
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006560 memsz 0x00006560 flags r-x
    LOAD off    0x00007580 vaddr 0x00046580 paddr 0x00047fec align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00009a58 vaddr 0x00049a58 paddr 0x00049a58 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006300  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00046530  00046530  00007530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00046580  00047fec  00007580  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049a58  00049a58  00009a58  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00049bac  00049bac  00008fec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008fec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00009010  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001697a  00000000  00000000  00009a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000610d  00000000  00000000  000203da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a48  00000000  00000000  000264e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001884  00000000  00000000  0002cf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029c2  00000000  00000000  0002e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00031176  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00035c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00035c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00038a32  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00038a35  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00038a41  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00038a42  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00038a43  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00038a4e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00038a59  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  00038a64  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00038a69  2**0
                  CONTENTS, READONLY
 26 .jdi          00003d04  00000000  00000000  00038a91  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000336c0  00000000  00000000  0003c795  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00046530 l    d  .rodata	00000000 .rodata
00046580 l    d  .rwdata	00000000 .rwdata
00049a58 l    d  .bss	00000000 .bss
00049bac l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 mfrc522.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000411f8 l     F .text	00000008 __fp_unlock
0004120c l     F .text	0000019c __sinit.part.1
000413a8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00046580 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00043e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043fac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043fd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000440cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000441b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000442a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004447c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00047fdc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000446f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004482c l     F .text	00000034 alt_dev_reg
00046f54 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044b08 l     F .text	0000020c altera_avalon_jtag_uart_irq
00044d14 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00045498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000458f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045a58 l     F .text	0000003c alt_get_errno
00045a94 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00049a80 g     O .bss	00000004 alt_instruction_exception_handler
00043c68 g     F .text	00000054 _isatty_r
000443b8 g     F .text	0000007c alt_main
00040748 g     F .text	000002b8 TM_MFRC522_ToCard
0004108c g     F .text	000000c0 _puts_r
00049aac g     O .bss	00000100 alt_irq
00043990 g     F .text	00000060 _lseek_r
00047fec g       *ABS*	00000000 __flash_rwdata_start
00040470 g     F .text	00000058 TM_MFRC522_WriteRegister
00049bac g       *ABS*	00000000 __alt_heap_start
00042f44 g     F .text	0000005c __sseek
00041558 g     F .text	00000010 __sinit
000413b0 g     F .text	00000078 __sfmoreglue
000403e4 g     F .text	0000008c TM_MFRC522_Compare
00044458 g     F .text	00000024 __malloc_unlock
00042630 g     F .text	0000015c memmove
00041540 g     F .text	00000018 _cleanup
00040a00 g     F .text	000000e8 TM_MFRC522_Anticoll
00045e80 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043c0c g     F .text	0000005c _fstat_r
00049a64 g     O .bss	00000004 errno
00042ec0 g     F .text	00000008 __seofread
00049a6c g     O .bss	00000004 alt_argv
0004ffb4 g       *ABS*	00000000 _gp
00046dd4 g     O .rwdata	00000180 alt_fd_list
00045ea4 g     F .text	00000090 alt_find_dev
000424e8 g     F .text	00000148 memcpy
00041200 g     F .text	0000000c _cleanup_r
000459dc g     F .text	0000007c alt_io_redirect
00046530 g       *ABS*	00000000 __DTOR_END__
0004114c g     F .text	00000014 puts
00046100 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044f0c g     F .text	0000021c altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00043db4 g     F .text	00000064 .hidden __udivsi3
00044108 g     F .text	000000ac isatty
0004068c g     F .text	00000034 TM_MFRC522_Reset
00049a60 g     O .bss	00000004 __malloc_top_pad
000415a8 g     F .text	000004c8 __sfvwrite_r
00042e18 g     F .text	00000054 _sbrk_r
00040ae8 g     F .text	0000010c TM_MFRC522_CalculateCRC
00043bac g     F .text	00000060 _read_r
00047fd4 g     O .rwdata	00000004 alt_max_fd
000431b0 g     F .text	000000f0 _fclose_r
0004352c g     F .text	00000030 fflush
00049a5c g     O .bss	00000004 __malloc_max_sbrked_mem
00040bf4 g     F .text	000000e8 TM_MFRC522_SelectTag
000442dc g     F .text	000000dc lseek
00047fb4 g     O .rwdata	00000004 _global_impure_ptr
000428b4 g     F .text	00000564 _realloc_r
00049bac g       *ABS*	00000000 __bss_end
00045808 g     F .text	000000f0 alt_iic_isr_register
00045d78 g     F .text	00000108 alt_tick
00041578 g     F .text	00000018 __fp_lock_all
000457bc g     F .text	0000004c alt_ic_irq_enabled
00045cdc g     F .text	0000009c alt_alarm_stop
00049a74 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046dac g     O .rwdata	00000028 alt_dev_null
00045478 g     F .text	00000020 alt_dcache_flush_all
000404c8 g     F .text	00000054 TM_MFRC522_ReadRegister
00047fec g       *ABS*	00000000 __ram_rwdata_end
00040e00 g     F .text	000000a4 TM_MFRC522_Read
00047fcc g     O .rwdata	00000008 alt_dev_list
0004472c g     F .text	00000100 write
00046580 g       *ABS*	00000000 __ram_rodata_end
00044014 g     F .text	000000b8 fstat
00043e18 g     F .text	00000058 .hidden __umodsi3
00049bac g       *ABS*	00000000 end
00044a48 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00046530 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
00045128 g     F .text	00000224 altera_avalon_jtag_uart_write
00041568 g     F .text	00000004 __sfp_lock_acquire
00042404 g     F .text	000000e4 memchr
00043680 g     F .text	00000310 _free_r
0004051c g     F .text	00000074 TM_MFRC522_SetBitMask
0004637c g     F .text	00000180 __call_exitprocs
00047fbc g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00049a78 g     O .bss	00000004 _alt_tick_rate
00049a7c g     O .bss	00000004 _alt_nticks
000444b8 g     F .text	00000104 read
00044898 g     F .text	0000004c alt_sys_init
00046264 g     F .text	00000118 __register_exitproc
00044db4 g     F .text	00000068 altera_avalon_jtag_uart_close
00043e70 g     F .text	00000028 .hidden __mulsi3
00046580 g       *ABS*	00000000 __ram_rwdata_start
00046530 g       *ABS*	00000000 __ram_rodata_start
00049a84 g     O .bss	00000028 __malloc_current_mallinfo
000448e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004603c g     F .text	000000c4 alt_get_fd
0004315c g     F .text	00000054 _close_r
000461e8 g     F .text	0000007c memcmp
000449a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049bac g       *ABS*	00000000 __alt_stack_base
000449f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00043008 g     F .text	00000154 __swsetup_r
00041428 g     F .text	00000118 __sfp
000469a4 g     O .rwdata	00000408 __malloc_av_
00041574 g     F .text	00000004 __sinit_lock_release
00042e6c g     F .text	00000054 __sread
00045f34 g     F .text	00000108 alt_find_file
000454d4 g     F .text	000000a4 alt_dev_llist_insert
00044434 g     F .text	00000024 __malloc_lock
00044640 g     F .text	000000b0 sbrk
000434d0 g     F .text	0000005c _fflush_r
00049a58 g       *ABS*	00000000 __bss_start
0004278c g     F .text	00000128 memset
000402d0 g     F .text	0000003c main
0004026c g     F .text	00000064 delay_ms
00049a70 g     O .bss	00000004 alt_envp
00049a58 g     O .bss	00000004 __malloc_max_total_mem
00044944 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042fa0 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
000432a0 g     F .text	00000014 fclose
00041bf8 g     F .text	0000080c _malloc_r
00040608 g     F .text	00000050 TM_MFRC522_AntennaOn
00047fd8 g     O .rwdata	00000004 alt_errno
00041a70 g     F .text	000000c4 _fwalk
00043cbc g     F .text	00000084 .hidden __divsi3
0004355c g     F .text	00000124 _malloc_trim_r
00046530 g       *ABS*	00000000 __CTOR_END__
00046530 g       *ABS*	00000000 __flash_rodata_start
00046530 g       *ABS*	00000000 __DTOR_LIST__
00044860 g     F .text	00000038 alt_irq_init
000445bc g     F .text	00000084 alt_release_fd
0004619c g     F .text	00000014 atexit
00042fa8 g     F .text	00000060 _write_r
00047fb8 g     O .rwdata	00000004 _impure_ptr
00049a68 g     O .bss	00000004 alt_argc
000432b4 g     F .text	0000021c __sflush_r
000455d8 g     F .text	00000060 _do_dtors
00040ea4 g     F .text	00000174 TM_MFRC522_Write
00040020 g       .exceptions	00000000 alt_irq_entry
00041590 g     F .text	00000018 __fp_unlock_all
00047fc4 g     O .rwdata	00000008 alt_fs_list
0004030c g     F .text	00000084 TM_MFRC522_Init
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045658 g     F .text	00000050 alt_ic_isr_register
000406c0 g     F .text	00000088 TM_MFRC522_Request
00047fec g       *ABS*	00000000 _edata
00049bac g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
00044e1c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00040cdc g     F .text	00000124 TM_MFRC522_Auth
00040658 g     F .text	00000034 TM_MFRC522_AntennaOff
00045730 g     F .text	0000008c alt_ic_irq_disable
00042ec8 g     F .text	0000007c __swrite
00047fc0 g     O .rwdata	00000004 __malloc_trim_threshold
000461b0 g     F .text	00000038 exit
00041b34 g     F .text	000000c4 _fwalk_reent
00043d40 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004156c g     F .text	00000004 __sfp_lock_release
000464fc g     F .text	00000034 _exit
0004534c g     F .text	0000012c alt_alarm_start
000439f0 g     F .text	000001bc __smakebuf_r
00041160 g     F .text	00000098 strlen
00045b80 g     F .text	0000015c open
00041018 g     F .text	00000074 TM_MFRC522_Halt
00040590 g     F .text	00000078 TM_MFRC522_ClearBitMask
00045638 g     F .text	00000020 alt_icache_flush_all
00047fe0 g     O .rwdata	00000004 alt_priority_mask
000456a8 g     F .text	00000088 alt_ic_irq_enable
00040390 g     F .text	00000054 TM_MFRC522_Check
00047fe4 g     O .rwdata	00000008 alt_alarm_list
00045578 g     F .text	00000060 _do_ctors
00043ed4 g     F .text	000000d8 close
0004421c g     F .text	00000084 alt_load
00041570 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a6ab04 	addi	r2,r2,-25940
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a6ab04 	addi	r2,r2,-25940
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6b317 	ldw	r2,-25908(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6b317 	ldw	r2,-25908(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4023c:	d6bfed14 	ori	gp,gp,65460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10a69614 	ori	r2,r2,39512

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18e6eb14 	ori	r3,r3,39852

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	004421c0 	call	4421c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00443b80 	call	443b8 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffce268>

0004026c <delay_ms>:


#include "delay.h"

void delay_ms(int time)
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	df000315 	stw	fp,12(sp)
   40274:	df000304 	addi	fp,sp,12
   40278:	e13fff15 	stw	r4,-4(fp)
	int x,y;
	for(x = 0; x<time; x++)
   4027c:	e03ffd15 	stw	zero,-12(fp)
   40280:	00000b06 	br	402b0 <delay_ms+0x44>
	{
		for(y = 0; y<1000; y++);
   40284:	e03ffe15 	stw	zero,-8(fp)
   40288:	00000306 	br	40298 <delay_ms+0x2c>
   4028c:	e0bffe17 	ldw	r2,-8(fp)
   40290:	10800044 	addi	r2,r2,1
   40294:	e0bffe15 	stw	r2,-8(fp)
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	1080fa10 	cmplti	r2,r2,1000
   402a0:	103ffa1e 	bne	r2,zero,4028c <__alt_data_end+0xfffce28c>
#include "delay.h"

void delay_ms(int time)
{
	int x,y;
	for(x = 0; x<time; x++)
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0bffd15 	stw	r2,-12(fp)
   402b0:	e0fffd17 	ldw	r3,-12(fp)
   402b4:	e0bfff17 	ldw	r2,-4(fp)
   402b8:	18bff216 	blt	r3,r2,40284 <__alt_data_end+0xfffce284>
	{
		for(y = 0; y<1000; y++);
	}
}
   402bc:	0001883a 	nop
   402c0:	e037883a 	mov	sp,fp
   402c4:	df000017 	ldw	fp,0(sp)
   402c8:	dec00104 	addi	sp,sp,4
   402cc:	f800283a 	ret

000402d0 <main>:
#include "altera_avalon_spi.h"
#include "mfrc522.h"
//#include "altera_avalon_pio_regs.h"

int main()
{
   402d0:	deffe304 	addi	sp,sp,-116
   402d4:	dfc01c15 	stw	ra,112(sp)
   402d8:	df001b15 	stw	fp,108(sp)
   402dc:	df001b04 	addi	fp,sp,108
  printf("Hello from Nios II!\n");
   402e0:	01000134 	movhi	r4,4
   402e4:	21194c04 	addi	r4,r4,25904
   402e8:	004114c0 	call	4114c <puts>
  delay_ms(2000);
   402ec:	0101f404 	movi	r4,2000
   402f0:	004026c0 	call	4026c <delay_ms>
  char CardID[5];
  char szBuff[100];
  return 0;
   402f4:	0005883a 	mov	r2,zero
	if (TM_MFRC522_Check(CardID) == MI_OK) {
		sprintf(szBuff, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
		printf(szBuff);
	}
  }
}
   402f8:	e037883a 	mov	sp,fp
   402fc:	dfc00117 	ldw	ra,4(sp)
   40300:	df000017 	ldw	fp,0(sp)
   40304:	dec00204 	addi	sp,sp,8
   40308:	f800283a 	ret

0004030c <TM_MFRC522_Init>:





void TM_MFRC522_Init(void) {
   4030c:	defffe04 	addi	sp,sp,-8
   40310:	dfc00115 	stw	ra,4(sp)
   40314:	df000015 	stw	fp,0(sp)
   40318:	d839883a 	mov	fp,sp
//	TM_MFRC522_InitPins();
//	TM_SPI_Init();

	TM_MFRC522_Reset();
   4031c:	004068c0 	call	4068c <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
   40320:	017fe344 	movi	r5,-115
   40324:	01000a84 	movi	r4,42
   40328:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
   4032c:	01400f84 	movi	r5,62
   40330:	01000ac4 	movi	r4,43
   40334:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
   40338:	01400784 	movi	r5,30
   4033c:	01000b44 	movi	r4,45
   40340:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
   40344:	000b883a 	mov	r5,zero
   40348:	01000b04 	movi	r4,44
   4034c:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
   40350:	01401c04 	movi	r5,112
   40354:	01000984 	movi	r4,38
   40358:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
   4035c:	01401004 	movi	r5,64
   40360:	01000544 	movi	r4,21
   40364:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
   40368:	01400f44 	movi	r5,61
   4036c:	01000444 	movi	r4,17
   40370:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
   40374:	00406080 	call	40608 <TM_MFRC522_AntennaOn>
}
   40378:	0001883a 	nop
   4037c:	e037883a 	mov	sp,fp
   40380:	dfc00117 	ldw	ra,4(sp)
   40384:	df000017 	ldw	fp,0(sp)
   40388:	dec00204 	addi	sp,sp,8
   4038c:	f800283a 	ret

00040390 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(char* id) {
   40390:	defffc04 	addi	sp,sp,-16
   40394:	dfc00315 	stw	ra,12(sp)
   40398:	df000215 	stw	fp,8(sp)
   4039c:	df000204 	addi	fp,sp,8
   403a0:	e13fff15 	stw	r4,-4(fp)
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);
   403a4:	e17fff17 	ldw	r5,-4(fp)
   403a8:	01000984 	movi	r4,38
   403ac:	00406c00 	call	406c0 <TM_MFRC522_Request>
   403b0:	e0bffe15 	stw	r2,-8(fp)
	if (status == MI_OK) {
   403b4:	e0bffe17 	ldw	r2,-8(fp)
   403b8:	1000031e 	bne	r2,zero,403c8 <TM_MFRC522_Check+0x38>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
   403bc:	e13fff17 	ldw	r4,-4(fp)
   403c0:	0040a000 	call	40a00 <TM_MFRC522_Anticoll>
   403c4:	e0bffe15 	stw	r2,-8(fp)
	}
	TM_MFRC522_Halt();			//Command card into hibernation
   403c8:	00410180 	call	41018 <TM_MFRC522_Halt>

	return status;
   403cc:	e0bffe17 	ldw	r2,-8(fp)
}
   403d0:	e037883a 	mov	sp,fp
   403d4:	dfc00117 	ldw	ra,4(sp)
   403d8:	df000017 	ldw	fp,0(sp)
   403dc:	dec00204 	addi	sp,sp,8
   403e0:	f800283a 	ret

000403e4 <TM_MFRC522_Compare>:

TM_MFRC522_Status_t TM_MFRC522_Compare(char* CardID, char* CompareID) {
   403e4:	defffc04 	addi	sp,sp,-16
   403e8:	df000315 	stw	fp,12(sp)
   403ec:	df000304 	addi	fp,sp,12
   403f0:	e13ffe15 	stw	r4,-8(fp)
   403f4:	e17fff15 	stw	r5,-4(fp)
	char i;
	for (i = 0; i < 5; i++) {
   403f8:	e03ffd05 	stb	zero,-12(fp)
   403fc:	00001406 	br	40450 <TM_MFRC522_Compare+0x6c>
		if (CardID[i] != CompareID[i]) {
   40400:	e0bffd07 	ldb	r2,-12(fp)
   40404:	e0fffe17 	ldw	r3,-8(fp)
   40408:	1885883a 	add	r2,r3,r2
   4040c:	11000003 	ldbu	r4,0(r2)
   40410:	e0bffd07 	ldb	r2,-12(fp)
   40414:	e0ffff17 	ldw	r3,-4(fp)
   40418:	1885883a 	add	r2,r3,r2
   4041c:	10800003 	ldbu	r2,0(r2)
   40420:	20c03fcc 	andi	r3,r4,255
   40424:	18c0201c 	xori	r3,r3,128
   40428:	18ffe004 	addi	r3,r3,-128
   4042c:	10803fcc 	andi	r2,r2,255
   40430:	1080201c 	xori	r2,r2,128
   40434:	10bfe004 	addi	r2,r2,-128
   40438:	18800226 	beq	r3,r2,40444 <TM_MFRC522_Compare+0x60>
			return MI_ERR;
   4043c:	00800084 	movi	r2,2
   40440:	00000706 	br	40460 <TM_MFRC522_Compare+0x7c>
	return status;
}

TM_MFRC522_Status_t TM_MFRC522_Compare(char* CardID, char* CompareID) {
	char i;
	for (i = 0; i < 5; i++) {
   40444:	e0bffd03 	ldbu	r2,-12(fp)
   40448:	10800044 	addi	r2,r2,1
   4044c:	e0bffd05 	stb	r2,-12(fp)
   40450:	e0bffd07 	ldb	r2,-12(fp)
   40454:	10800150 	cmplti	r2,r2,5
   40458:	103fe91e 	bne	r2,zero,40400 <__alt_data_end+0xfffce400>
		if (CardID[i] != CompareID[i]) {
			return MI_ERR;
		}
	}
	return MI_OK;
   4045c:	0005883a 	mov	r2,zero
}
   40460:	e037883a 	mov	sp,fp
   40464:	df000017 	ldw	fp,0(sp)
   40468:	dec00104 	addi	sp,sp,4
   4046c:	f800283a 	ret

00040470 <TM_MFRC522_WriteRegister>:

//==================================================
//ham nay can thay doi vi cau truc F1 khac F4

void TM_MFRC522_WriteRegister(char addr, char val) {
   40470:	defffd04 	addi	sp,sp,-12
   40474:	df000215 	stw	fp,8(sp)
   40478:	df000204 	addi	fp,sp,8
   4047c:	2007883a 	mov	r3,r4
   40480:	2805883a 	mov	r2,r5
   40484:	e0fffe05 	stb	r3,-8(fp)
   40488:	e0bfff05 	stb	r2,-4(fp)
//	TM_SPI_Send((addr << 1) & 0x7E);
//	//Send data
//	TM_SPI_Send(val);
//	//CS high
//	MFRC522_CS_HIGH;
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, (addr << 1) & 0x7E);
   4048c:	e0bffe07 	ldb	r2,-8(fp)
   40490:	1085883a 	add	r2,r2,r2
   40494:	10c01f8c 	andi	r3,r2,126
   40498:	00800234 	movhi	r2,8
   4049c:	10840104 	addi	r2,r2,4100
   404a0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, val);
   404a4:	e0ffff07 	ldb	r3,-4(fp)
   404a8:	00800234 	movhi	r2,8
   404ac:	10840104 	addi	r2,r2,4100
   404b0:	10c00035 	stwio	r3,0(r2)
}
   404b4:	0001883a 	nop
   404b8:	e037883a 	mov	sp,fp
   404bc:	df000017 	ldw	fp,0(sp)
   404c0:	dec00104 	addi	sp,sp,4
   404c4:	f800283a 	ret

000404c8 <TM_MFRC522_ReadRegister>:

char TM_MFRC522_ReadRegister(char addr) {
   404c8:	defffd04 	addi	sp,sp,-12
   404cc:	df000215 	stw	fp,8(sp)
   404d0:	df000204 	addi	fp,sp,8
   404d4:	2005883a 	mov	r2,r4
   404d8:	e0bfff05 	stb	r2,-4(fp)
//
//	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
//	val = TM_SPI_Send(MFRC522_DUMMY);
//	//CS high
//	MFRC522_CS_HIGH;
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_BASE, ((addr << 1) & 0x7E) | 0x80);
   404dc:	e0bfff07 	ldb	r2,-4(fp)
   404e0:	1085883a 	add	r2,r2,r2
   404e4:	10801f8c 	andi	r2,r2,126
   404e8:	10c02014 	ori	r3,r2,128
   404ec:	00800234 	movhi	r2,8
   404f0:	10840104 	addi	r2,r2,4100
   404f4:	10c00035 	stwio	r3,0(r2)
	val = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE);
   404f8:	00800234 	movhi	r2,8
   404fc:	10840004 	addi	r2,r2,4096
   40500:	10800037 	ldwio	r2,0(r2)
   40504:	e0bffe05 	stb	r2,-8(fp)
	return val;
   40508:	e0bffe03 	ldbu	r2,-8(fp)
}
   4050c:	e037883a 	mov	sp,fp
   40510:	df000017 	ldw	fp,0(sp)
   40514:	dec00104 	addi	sp,sp,4
   40518:	f800283a 	ret

0004051c <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(char reg, char mask) {
   4051c:	defffb04 	addi	sp,sp,-20
   40520:	dfc00415 	stw	ra,16(sp)
   40524:	df000315 	stw	fp,12(sp)
   40528:	dc000215 	stw	r16,8(sp)
   4052c:	df000304 	addi	fp,sp,12
   40530:	2007883a 	mov	r3,r4
   40534:	2805883a 	mov	r2,r5
   40538:	e0fffd05 	stb	r3,-12(fp)
   4053c:	e0bffe05 	stb	r2,-8(fp)
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
   40540:	e43ffd07 	ldb	r16,-12(fp)
   40544:	e0bffd07 	ldb	r2,-12(fp)
   40548:	1009883a 	mov	r4,r2
   4054c:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40550:	1007883a 	mov	r3,r2
   40554:	e0bffe03 	ldbu	r2,-8(fp)
   40558:	1884b03a 	or	r2,r3,r2
   4055c:	10803fcc 	andi	r2,r2,255
   40560:	1080201c 	xori	r2,r2,128
   40564:	10bfe004 	addi	r2,r2,-128
   40568:	100b883a 	mov	r5,r2
   4056c:	8009883a 	mov	r4,r16
   40570:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
}
   40574:	0001883a 	nop
   40578:	e6ffff04 	addi	sp,fp,-4
   4057c:	dfc00217 	ldw	ra,8(sp)
   40580:	df000117 	ldw	fp,4(sp)
   40584:	dc000017 	ldw	r16,0(sp)
   40588:	dec00304 	addi	sp,sp,12
   4058c:	f800283a 	ret

00040590 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(char reg, char mask){
   40590:	defffb04 	addi	sp,sp,-20
   40594:	dfc00415 	stw	ra,16(sp)
   40598:	df000315 	stw	fp,12(sp)
   4059c:	dc000215 	stw	r16,8(sp)
   405a0:	df000304 	addi	fp,sp,12
   405a4:	2007883a 	mov	r3,r4
   405a8:	2805883a 	mov	r2,r5
   405ac:	e0fffd05 	stb	r3,-12(fp)
   405b0:	e0bffe05 	stb	r2,-8(fp)
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
   405b4:	e43ffd07 	ldb	r16,-12(fp)
   405b8:	e0bffd07 	ldb	r2,-12(fp)
   405bc:	1009883a 	mov	r4,r2
   405c0:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   405c4:	1007883a 	mov	r3,r2
   405c8:	e0bffe03 	ldbu	r2,-8(fp)
   405cc:	0084303a 	nor	r2,zero,r2
   405d0:	1884703a 	and	r2,r3,r2
   405d4:	10803fcc 	andi	r2,r2,255
   405d8:	1080201c 	xori	r2,r2,128
   405dc:	10bfe004 	addi	r2,r2,-128
   405e0:	100b883a 	mov	r5,r2
   405e4:	8009883a 	mov	r4,r16
   405e8:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
}
   405ec:	0001883a 	nop
   405f0:	e6ffff04 	addi	sp,fp,-4
   405f4:	dfc00217 	ldw	ra,8(sp)
   405f8:	df000117 	ldw	fp,4(sp)
   405fc:	dc000017 	ldw	r16,0(sp)
   40600:	dec00304 	addi	sp,sp,12
   40604:	f800283a 	ret

00040608 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
   40608:	defffd04 	addi	sp,sp,-12
   4060c:	dfc00215 	stw	ra,8(sp)
   40610:	df000115 	stw	fp,4(sp)
   40614:	df000104 	addi	fp,sp,4
	char temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
   40618:	01000504 	movi	r4,20
   4061c:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40620:	e0bfff05 	stb	r2,-4(fp)
	if (!(temp & 0x03)) {
   40624:	e0bfff03 	ldbu	r2,-4(fp)
   40628:	10803fcc 	andi	r2,r2,255
   4062c:	108000cc 	andi	r2,r2,3
   40630:	1000031e 	bne	r2,zero,40640 <TM_MFRC522_AntennaOn+0x38>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
   40634:	014000c4 	movi	r5,3
   40638:	01000504 	movi	r4,20
   4063c:	004051c0 	call	4051c <TM_MFRC522_SetBitMask>
	}
}
   40640:	0001883a 	nop
   40644:	e037883a 	mov	sp,fp
   40648:	dfc00117 	ldw	ra,4(sp)
   4064c:	df000017 	ldw	fp,0(sp)
   40650:	dec00204 	addi	sp,sp,8
   40654:	f800283a 	ret

00040658 <TM_MFRC522_AntennaOff>:

void TM_MFRC522_AntennaOff(void) {
   40658:	defffe04 	addi	sp,sp,-8
   4065c:	dfc00115 	stw	ra,4(sp)
   40660:	df000015 	stw	fp,0(sp)
   40664:	d839883a 	mov	fp,sp
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
   40668:	014000c4 	movi	r5,3
   4066c:	01000504 	movi	r4,20
   40670:	00405900 	call	40590 <TM_MFRC522_ClearBitMask>
}
   40674:	0001883a 	nop
   40678:	e037883a 	mov	sp,fp
   4067c:	dfc00117 	ldw	ra,4(sp)
   40680:	df000017 	ldw	fp,0(sp)
   40684:	dec00204 	addi	sp,sp,8
   40688:	f800283a 	ret

0004068c <TM_MFRC522_Reset>:

void TM_MFRC522_Reset(void) {
   4068c:	defffe04 	addi	sp,sp,-8
   40690:	dfc00115 	stw	ra,4(sp)
   40694:	df000015 	stw	fp,0(sp)
   40698:	d839883a 	mov	fp,sp
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
   4069c:	014003c4 	movi	r5,15
   406a0:	01000044 	movi	r4,1
   406a4:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
}
   406a8:	0001883a 	nop
   406ac:	e037883a 	mov	sp,fp
   406b0:	dfc00117 	ldw	ra,4(sp)
   406b4:	df000017 	ldw	fp,0(sp)
   406b8:	dec00204 	addi	sp,sp,8
   406bc:	f800283a 	ret

000406c0 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(char reqMode, char* TagType) {
   406c0:	defff904 	addi	sp,sp,-28
   406c4:	dfc00615 	stw	ra,24(sp)
   406c8:	df000515 	stw	fp,20(sp)
   406cc:	df000504 	addi	fp,sp,20
   406d0:	2005883a 	mov	r2,r4
   406d4:	e17fff15 	stw	r5,-4(fp)
   406d8:	e0bffe05 	stb	r2,-8(fp)
	TM_MFRC522_Status_t status;
	int backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
   406dc:	014001c4 	movi	r5,7
   406e0:	01000344 	movi	r4,13
   406e4:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
   406e8:	e0bfff17 	ldw	r2,-4(fp)
   406ec:	e0fffe03 	ldbu	r3,-8(fp)
   406f0:	10c00005 	stb	r3,0(r2)
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
   406f4:	e0bffd04 	addi	r2,fp,-12
   406f8:	d8800015 	stw	r2,0(sp)
   406fc:	e1ffff17 	ldw	r7,-4(fp)
   40700:	01800044 	movi	r6,1
   40704:	e17fff17 	ldw	r5,-4(fp)
   40708:	01000304 	movi	r4,12
   4070c:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40710:	e0bffc15 	stw	r2,-16(fp)

	if ((status != MI_OK) || (backBits != 0x10)) {
   40714:	e0bffc17 	ldw	r2,-16(fp)
   40718:	1000031e 	bne	r2,zero,40728 <TM_MFRC522_Request+0x68>
   4071c:	e0bffd17 	ldw	r2,-12(fp)
   40720:	10800420 	cmpeqi	r2,r2,16
   40724:	1000021e 	bne	r2,zero,40730 <TM_MFRC522_Request+0x70>
		status = MI_ERR;
   40728:	00800084 	movi	r2,2
   4072c:	e0bffc15 	stw	r2,-16(fp)
	}

	return status;
   40730:	e0bffc17 	ldw	r2,-16(fp)
}
   40734:	e037883a 	mov	sp,fp
   40738:	dfc00117 	ldw	ra,4(sp)
   4073c:	df000017 	ldw	fp,0(sp)
   40740:	dec00204 	addi	sp,sp,8
   40744:	f800283a 	ret

00040748 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(char command, char* sendData, char sendLen, char* backData, int* backLen) {
   40748:	defff504 	addi	sp,sp,-44
   4074c:	dfc00a15 	stw	ra,40(sp)
   40750:	df000915 	stw	fp,36(sp)
   40754:	dc000815 	stw	r16,32(sp)
   40758:	df000904 	addi	fp,sp,36
   4075c:	2007883a 	mov	r3,r4
   40760:	e17ffc15 	stw	r5,-16(fp)
   40764:	3005883a 	mov	r2,r6
   40768:	e1fffe15 	stw	r7,-8(fp)
   4076c:	e0fffb05 	stb	r3,-20(fp)
   40770:	e0bffd05 	stb	r2,-12(fp)
	TM_MFRC522_Status_t status = MI_ERR;
   40774:	00800084 	movi	r2,2
   40778:	e0bff715 	stw	r2,-36(fp)
	char irqEn = 0x00;
   4077c:	e03ff805 	stb	zero,-32(fp)
	char waitIRq = 0x00;
   40780:	e03ff845 	stb	zero,-31(fp)
	char lastBits;
	char n;
	int i;

	switch (command) {
   40784:	e0bffb07 	ldb	r2,-20(fp)
   40788:	10c00320 	cmpeqi	r3,r2,12
   4078c:	1800081e 	bne	r3,zero,407b0 <TM_MFRC522_ToCard+0x68>
   40790:	108003a0 	cmpeqi	r2,r2,14
   40794:	1000011e 	bne	r2,zero,4079c <TM_MFRC522_ToCard+0x54>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
			break;
   40798:	00000a06 	br	407c4 <TM_MFRC522_ToCard+0x7c>
	char n;
	int i;

	switch (command) {
		case PCD_AUTHENT: {
			irqEn = 0x12;
   4079c:	00800484 	movi	r2,18
   407a0:	e0bff805 	stb	r2,-32(fp)
			waitIRq = 0x10;
   407a4:	00800404 	movi	r2,16
   407a8:	e0bff845 	stb	r2,-31(fp)
			break;
   407ac:	00000506 	br	407c4 <TM_MFRC522_ToCard+0x7c>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
   407b0:	00801dc4 	movi	r2,119
   407b4:	e0bff805 	stb	r2,-32(fp)
			waitIRq = 0x30;
   407b8:	00800c04 	movi	r2,48
   407bc:	e0bff845 	stb	r2,-31(fp)
			break;
   407c0:	0001883a 	nop
		}
		default:
			break;
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
   407c4:	e0fff803 	ldbu	r3,-32(fp)
   407c8:	00bfe004 	movi	r2,-128
   407cc:	1884b03a 	or	r2,r3,r2
   407d0:	10803fcc 	andi	r2,r2,255
   407d4:	1080201c 	xori	r2,r2,128
   407d8:	10bfe004 	addi	r2,r2,-128
   407dc:	100b883a 	mov	r5,r2
   407e0:	01000084 	movi	r4,2
   407e4:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
   407e8:	017fe004 	movi	r5,-128
   407ec:	01000104 	movi	r4,4
   407f0:	00405900 	call	40590 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
   407f4:	017fe004 	movi	r5,-128
   407f8:	01000284 	movi	r4,10
   407fc:	004051c0 	call	4051c <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
   40800:	000b883a 	mov	r5,zero
   40804:	01000044 	movi	r4,1
   40808:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
   4080c:	e03ff915 	stw	zero,-28(fp)
   40810:	00000d06 	br	40848 <TM_MFRC522_ToCard+0x100>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
   40814:	e0bff917 	ldw	r2,-28(fp)
   40818:	e0fffc17 	ldw	r3,-16(fp)
   4081c:	1885883a 	add	r2,r3,r2
   40820:	10800003 	ldbu	r2,0(r2)
   40824:	10803fcc 	andi	r2,r2,255
   40828:	1080201c 	xori	r2,r2,128
   4082c:	10bfe004 	addi	r2,r2,-128
   40830:	100b883a 	mov	r5,r2
   40834:	01000244 	movi	r4,9
   40838:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
   4083c:	e0bff917 	ldw	r2,-28(fp)
   40840:	10800044 	addi	r2,r2,1
   40844:	e0bff915 	stw	r2,-28(fp)
   40848:	e0bffd07 	ldb	r2,-12(fp)
   4084c:	e0fff917 	ldw	r3,-28(fp)
   40850:	18bff016 	blt	r3,r2,40814 <__alt_data_end+0xfffce814>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
   40854:	e0bffb07 	ldb	r2,-20(fp)
   40858:	100b883a 	mov	r5,r2
   4085c:	01000044 	movi	r4,1
   40860:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
   40864:	e0bffb07 	ldb	r2,-20(fp)
   40868:	10800318 	cmpnei	r2,r2,12
   4086c:	1000031e 	bne	r2,zero,4087c <TM_MFRC522_ToCard+0x134>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
   40870:	017fe004 	movi	r5,-128
   40874:	01000344 	movi	r4,13
   40878:	004051c0 	call	4051c <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
   4087c:	0081f404 	movi	r2,2000
   40880:	e0bff915 	stw	r2,-28(fp)
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
   40884:	01000104 	movi	r4,4
   40888:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   4088c:	e0bff885 	stb	r2,-30(fp)
		i--;
   40890:	e0bff917 	ldw	r2,-28(fp)
   40894:	10bfffc4 	addi	r2,r2,-1
   40898:	e0bff915 	stw	r2,-28(fp)
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
   4089c:	e0bff917 	ldw	r2,-28(fp)
   408a0:	10000b26 	beq	r2,zero,408d0 <TM_MFRC522_ToCard+0x188>
   408a4:	e0bff883 	ldbu	r2,-30(fp)
   408a8:	10803fcc 	andi	r2,r2,255
   408ac:	1080004c 	andi	r2,r2,1
   408b0:	1000071e 	bne	r2,zero,408d0 <TM_MFRC522_ToCard+0x188>
   408b4:	e0fff883 	ldbu	r3,-30(fp)
   408b8:	e0bff843 	ldbu	r2,-31(fp)
   408bc:	1884703a 	and	r2,r3,r2
   408c0:	10803fcc 	andi	r2,r2,255
   408c4:	1080201c 	xori	r2,r2,128
   408c8:	10bfe004 	addi	r2,r2,-128
   408cc:	103fed26 	beq	r2,zero,40884 <__alt_data_end+0xfffce884>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
   408d0:	017fe004 	movi	r5,-128
   408d4:	01000344 	movi	r4,13
   408d8:	00405900 	call	40590 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
   408dc:	e0bff917 	ldw	r2,-28(fp)
   408e0:	10004026 	beq	r2,zero,409e4 <TM_MFRC522_ToCard+0x29c>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
   408e4:	01000184 	movi	r4,6
   408e8:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   408ec:	10803fcc 	andi	r2,r2,255
   408f0:	108006cc 	andi	r2,r2,27
   408f4:	1000391e 	bne	r2,zero,409dc <TM_MFRC522_ToCard+0x294>
			status = MI_OK;
   408f8:	e03ff715 	stw	zero,-36(fp)
			if (n & irqEn & 0x01) {
   408fc:	e0fff883 	ldbu	r3,-30(fp)
   40900:	e0bff803 	ldbu	r2,-32(fp)
   40904:	1884703a 	and	r2,r3,r2
   40908:	10803fcc 	andi	r2,r2,255
   4090c:	1080004c 	andi	r2,r2,1
   40910:	10000226 	beq	r2,zero,4091c <TM_MFRC522_ToCard+0x1d4>
				status = MI_NOTAGERR;
   40914:	00800044 	movi	r2,1
   40918:	e0bff715 	stw	r2,-36(fp)
			}

			if (command == PCD_TRANSCEIVE) {
   4091c:	e0bffb07 	ldb	r2,-20(fp)
   40920:	10800318 	cmpnei	r2,r2,12
   40924:	10002f1e 	bne	r2,zero,409e4 <TM_MFRC522_ToCard+0x29c>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
   40928:	01000284 	movi	r4,10
   4092c:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40930:	e0bff885 	stb	r2,-30(fp)
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
   40934:	01000304 	movi	r4,12
   40938:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   4093c:	108001cc 	andi	r2,r2,7
   40940:	e0bffa05 	stb	r2,-24(fp)
				if (lastBits) {
   40944:	e0bffa07 	ldb	r2,-24(fp)
   40948:	10000826 	beq	r2,zero,4096c <TM_MFRC522_ToCard+0x224>
					*backLen = (n - 1) * 8 + lastBits;
   4094c:	e0bff887 	ldb	r2,-30(fp)
   40950:	10bfffc4 	addi	r2,r2,-1
   40954:	100690fa 	slli	r3,r2,3
   40958:	e0bffa07 	ldb	r2,-24(fp)
   4095c:	1887883a 	add	r3,r3,r2
   40960:	e0800217 	ldw	r2,8(fp)
   40964:	10c00015 	stw	r3,0(r2)
   40968:	00000406 	br	4097c <TM_MFRC522_ToCard+0x234>
				} else {
					*backLen = n * 8;
   4096c:	e0bff887 	ldb	r2,-30(fp)
   40970:	100690fa 	slli	r3,r2,3
   40974:	e0800217 	ldw	r2,8(fp)
   40978:	10c00015 	stw	r3,0(r2)
				}

				if (n == 0) {
   4097c:	e0bff887 	ldb	r2,-30(fp)
   40980:	1000021e 	bne	r2,zero,4098c <TM_MFRC522_ToCard+0x244>
					n = 1;
   40984:	00800044 	movi	r2,1
   40988:	e0bff885 	stb	r2,-30(fp)
				}
				if (n > MFRC522_MAX_LEN) {
   4098c:	e0bff887 	ldb	r2,-30(fp)
   40990:	10800450 	cmplti	r2,r2,17
   40994:	1000021e 	bne	r2,zero,409a0 <TM_MFRC522_ToCard+0x258>
					n = MFRC522_MAX_LEN;
   40998:	00800404 	movi	r2,16
   4099c:	e0bff885 	stb	r2,-30(fp)
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
   409a0:	e03ff915 	stw	zero,-28(fp)
   409a4:	00000906 	br	409cc <TM_MFRC522_ToCard+0x284>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
   409a8:	e0bff917 	ldw	r2,-28(fp)
   409ac:	e0fffe17 	ldw	r3,-8(fp)
   409b0:	18a1883a 	add	r16,r3,r2
   409b4:	01000244 	movi	r4,9
   409b8:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   409bc:	80800005 	stb	r2,0(r16)
				if (n > MFRC522_MAX_LEN) {
					n = MFRC522_MAX_LEN;
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
   409c0:	e0bff917 	ldw	r2,-28(fp)
   409c4:	10800044 	addi	r2,r2,1
   409c8:	e0bff915 	stw	r2,-28(fp)
   409cc:	e0bff887 	ldb	r2,-30(fp)
   409d0:	e0fff917 	ldw	r3,-28(fp)
   409d4:	18bff416 	blt	r3,r2,409a8 <__alt_data_end+0xfffce9a8>
   409d8:	00000206 	br	409e4 <TM_MFRC522_ToCard+0x29c>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
				}
			}
		} else {
			status = MI_ERR;
   409dc:	00800084 	movi	r2,2
   409e0:	e0bff715 	stw	r2,-36(fp)
		}
	}

	return status;
   409e4:	e0bff717 	ldw	r2,-36(fp)
}
   409e8:	e6ffff04 	addi	sp,fp,-4
   409ec:	dfc00217 	ldw	ra,8(sp)
   409f0:	df000117 	ldw	fp,4(sp)
   409f4:	dc000017 	ldw	r16,0(sp)
   409f8:	dec00304 	addi	sp,sp,12
   409fc:	f800283a 	ret

00040a00 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(char* serNum) {
   40a00:	defff904 	addi	sp,sp,-28
   40a04:	dfc00615 	stw	ra,24(sp)
   40a08:	df000515 	stw	fp,20(sp)
   40a0c:	df000504 	addi	fp,sp,20
   40a10:	e13fff15 	stw	r4,-4(fp)
	TM_MFRC522_Status_t status;
	char i;
	char serNumCheck = 0;
   40a14:	e03ffd45 	stb	zero,-11(fp)
	int unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
   40a18:	000b883a 	mov	r5,zero
   40a1c:	01000344 	movi	r4,13
   40a20:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
   40a24:	e0bfff17 	ldw	r2,-4(fp)
   40a28:	00ffe4c4 	movi	r3,-109
   40a2c:	10c00005 	stb	r3,0(r2)
	serNum[1] = 0x20;
   40a30:	e0bfff17 	ldw	r2,-4(fp)
   40a34:	10800044 	addi	r2,r2,1
   40a38:	00c00804 	movi	r3,32
   40a3c:	10c00005 	stb	r3,0(r2)
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
   40a40:	e0bffe04 	addi	r2,fp,-8
   40a44:	d8800015 	stw	r2,0(sp)
   40a48:	e1ffff17 	ldw	r7,-4(fp)
   40a4c:	01800084 	movi	r6,2
   40a50:	e17fff17 	ldw	r5,-4(fp)
   40a54:	01000304 	movi	r4,12
   40a58:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40a5c:	e0bffc15 	stw	r2,-16(fp)

	if (status == MI_OK) {
   40a60:	e0bffc17 	ldw	r2,-16(fp)
   40a64:	10001a1e 	bne	r2,zero,40ad0 <TM_MFRC522_Anticoll+0xd0>
		//Check card serial number
		for (i = 0; i < 4; i++) {
   40a68:	e03ffd05 	stb	zero,-12(fp)
   40a6c:	00000a06 	br	40a98 <TM_MFRC522_Anticoll+0x98>
			serNumCheck ^= serNum[i];
   40a70:	e0bffd07 	ldb	r2,-12(fp)
   40a74:	e0ffff17 	ldw	r3,-4(fp)
   40a78:	1885883a 	add	r2,r3,r2
   40a7c:	10c00003 	ldbu	r3,0(r2)
   40a80:	e0bffd43 	ldbu	r2,-11(fp)
   40a84:	1884f03a 	xor	r2,r3,r2
   40a88:	e0bffd45 	stb	r2,-11(fp)
	serNum[1] = 0x20;
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

	if (status == MI_OK) {
		//Check card serial number
		for (i = 0; i < 4; i++) {
   40a8c:	e0bffd03 	ldbu	r2,-12(fp)
   40a90:	10800044 	addi	r2,r2,1
   40a94:	e0bffd05 	stb	r2,-12(fp)
   40a98:	e0bffd07 	ldb	r2,-12(fp)
   40a9c:	10800110 	cmplti	r2,r2,4
   40aa0:	103ff31e 	bne	r2,zero,40a70 <__alt_data_end+0xfffcea70>
			serNumCheck ^= serNum[i];
		}
		if (serNumCheck != serNum[i]) {
   40aa4:	e0bffd07 	ldb	r2,-12(fp)
   40aa8:	e0ffff17 	ldw	r3,-4(fp)
   40aac:	1885883a 	add	r2,r3,r2
   40ab0:	10800003 	ldbu	r2,0(r2)
   40ab4:	10c03fcc 	andi	r3,r2,255
   40ab8:	18c0201c 	xori	r3,r3,128
   40abc:	18ffe004 	addi	r3,r3,-128
   40ac0:	e0bffd47 	ldb	r2,-11(fp)
   40ac4:	18800226 	beq	r3,r2,40ad0 <TM_MFRC522_Anticoll+0xd0>
			status = MI_ERR;
   40ac8:	00800084 	movi	r2,2
   40acc:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	return status;
   40ad0:	e0bffc17 	ldw	r2,-16(fp)
}
   40ad4:	e037883a 	mov	sp,fp
   40ad8:	dfc00117 	ldw	ra,4(sp)
   40adc:	df000017 	ldw	fp,0(sp)
   40ae0:	dec00204 	addi	sp,sp,8
   40ae4:	f800283a 	ret

00040ae8 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(char*  pIndata, char len, char* pOutData) {
   40ae8:	defff904 	addi	sp,sp,-28
   40aec:	dfc00615 	stw	ra,24(sp)
   40af0:	df000515 	stw	fp,20(sp)
   40af4:	dc000415 	stw	r16,16(sp)
   40af8:	df000504 	addi	fp,sp,20
   40afc:	e13ffc15 	stw	r4,-16(fp)
   40b00:	2805883a 	mov	r2,r5
   40b04:	e1bffe15 	stw	r6,-8(fp)
   40b08:	e0bffd05 	stb	r2,-12(fp)
	char i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
   40b0c:	01400104 	movi	r5,4
   40b10:	01000144 	movi	r4,5
   40b14:	00405900 	call	40590 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
   40b18:	017fe004 	movi	r5,-128
   40b1c:	01000284 	movi	r4,10
   40b20:	004051c0 	call	4051c <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
   40b24:	e03ffb05 	stb	zero,-20(fp)
   40b28:	00000d06 	br	40b60 <TM_MFRC522_CalculateCRC+0x78>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
   40b2c:	e0bffb07 	ldb	r2,-20(fp)
   40b30:	e0fffc17 	ldw	r3,-16(fp)
   40b34:	1885883a 	add	r2,r3,r2
   40b38:	10800003 	ldbu	r2,0(r2)
   40b3c:	10803fcc 	andi	r2,r2,255
   40b40:	1080201c 	xori	r2,r2,128
   40b44:	10bfe004 	addi	r2,r2,-128
   40b48:	100b883a 	mov	r5,r2
   40b4c:	01000244 	movi	r4,9
   40b50:	00404700 	call	40470 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
   40b54:	e0bffb03 	ldbu	r2,-20(fp)
   40b58:	10800044 	addi	r2,r2,1
   40b5c:	e0bffb05 	stb	r2,-20(fp)
   40b60:	e0fffb07 	ldb	r3,-20(fp)
   40b64:	e0bffd07 	ldb	r2,-12(fp)
   40b68:	18bff016 	blt	r3,r2,40b2c <__alt_data_end+0xfffceb2c>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
   40b6c:	014000c4 	movi	r5,3
   40b70:	01000044 	movi	r4,1
   40b74:	00404700 	call	40470 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
   40b78:	00bfffc4 	movi	r2,-1
   40b7c:	e0bffb05 	stb	r2,-20(fp)
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
   40b80:	01000144 	movi	r4,5
   40b84:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40b88:	e0bffb45 	stb	r2,-19(fp)
		i--;
   40b8c:	e0bffb03 	ldbu	r2,-20(fp)
   40b90:	10bfffc4 	addi	r2,r2,-1
   40b94:	e0bffb05 	stb	r2,-20(fp)
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
   40b98:	e0bffb07 	ldb	r2,-20(fp)
   40b9c:	10000426 	beq	r2,zero,40bb0 <TM_MFRC522_CalculateCRC+0xc8>
   40ba0:	e0bffb43 	ldbu	r2,-19(fp)
   40ba4:	10803fcc 	andi	r2,r2,255
   40ba8:	1080010c 	andi	r2,r2,4
   40bac:	103ff426 	beq	r2,zero,40b80 <__alt_data_end+0xfffceb80>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
   40bb0:	01000884 	movi	r4,34
   40bb4:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40bb8:	1007883a 	mov	r3,r2
   40bbc:	e0bffe17 	ldw	r2,-8(fp)
   40bc0:	10c00005 	stb	r3,0(r2)
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
   40bc4:	e0bffe17 	ldw	r2,-8(fp)
   40bc8:	14000044 	addi	r16,r2,1
   40bcc:	01000844 	movi	r4,33
   40bd0:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40bd4:	80800005 	stb	r2,0(r16)
}
   40bd8:	0001883a 	nop
   40bdc:	e6ffff04 	addi	sp,fp,-4
   40be0:	dfc00217 	ldw	ra,8(sp)
   40be4:	df000117 	ldw	fp,4(sp)
   40be8:	dc000017 	ldw	r16,0(sp)
   40bec:	dec00304 	addi	sp,sp,12
   40bf0:	f800283a 	ret

00040bf4 <TM_MFRC522_SelectTag>:

char TM_MFRC522_SelectTag(char* serNum) {
   40bf4:	defff604 	addi	sp,sp,-40
   40bf8:	dfc00915 	stw	ra,36(sp)
   40bfc:	df000815 	stw	fp,32(sp)
   40c00:	df000804 	addi	fp,sp,32
   40c04:	e13fff15 	stw	r4,-4(fp)
	TM_MFRC522_Status_t status;
	char size;
	int recvBits;
	char buffer[9];

	buffer[0] = PICC_SElECTTAG;
   40c08:	00bfe4c4 	movi	r2,-109
   40c0c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = 0x70;
   40c10:	00801c04 	movi	r2,112
   40c14:	e0bffc45 	stb	r2,-15(fp)
	for (i = 0; i < 5; i++) {
   40c18:	e03ff905 	stb	zero,-28(fp)
   40c1c:	00000c06 	br	40c50 <TM_MFRC522_SelectTag+0x5c>
		buffer[i+2] = *(serNum+i);
   40c20:	e0bff907 	ldb	r2,-28(fp)
   40c24:	10800084 	addi	r2,r2,2
   40c28:	e0fff907 	ldb	r3,-28(fp)
   40c2c:	e13fff17 	ldw	r4,-4(fp)
   40c30:	20c7883a 	add	r3,r4,r3
   40c34:	18c00003 	ldbu	r3,0(r3)
   40c38:	e13ffc04 	addi	r4,fp,-16
   40c3c:	2085883a 	add	r2,r4,r2
   40c40:	10c00005 	stb	r3,0(r2)
	int recvBits;
	char buffer[9];

	buffer[0] = PICC_SElECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++) {
   40c44:	e0bff903 	ldbu	r2,-28(fp)
   40c48:	10800044 	addi	r2,r2,1
   40c4c:	e0bff905 	stb	r2,-28(fp)
   40c50:	e0bff907 	ldb	r2,-28(fp)
   40c54:	10800150 	cmplti	r2,r2,5
   40c58:	103ff11e 	bne	r2,zero,40c20 <__alt_data_end+0xfffcec20>
		buffer[i+2] = *(serNum+i);
	}
	TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
   40c5c:	e0bffc04 	addi	r2,fp,-16
   40c60:	10c001c4 	addi	r3,r2,7
   40c64:	e0bffc04 	addi	r2,fp,-16
   40c68:	180d883a 	mov	r6,r3
   40c6c:	014001c4 	movi	r5,7
   40c70:	1009883a 	mov	r4,r2
   40c74:	0040ae80 	call	40ae8 <TM_MFRC522_CalculateCRC>
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
   40c78:	e13ffc04 	addi	r4,fp,-16
   40c7c:	e0fffc04 	addi	r3,fp,-16
   40c80:	e0bffb04 	addi	r2,fp,-20
   40c84:	d8800015 	stw	r2,0(sp)
   40c88:	200f883a 	mov	r7,r4
   40c8c:	01800244 	movi	r6,9
   40c90:	180b883a 	mov	r5,r3
   40c94:	01000304 	movi	r4,12
   40c98:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40c9c:	e0bffa15 	stw	r2,-24(fp)

	if ((status == MI_OK) && (recvBits == 0x18)) {
   40ca0:	e0bffa17 	ldw	r2,-24(fp)
   40ca4:	1000061e 	bne	r2,zero,40cc0 <TM_MFRC522_SelectTag+0xcc>
   40ca8:	e0bffb17 	ldw	r2,-20(fp)
   40cac:	10800618 	cmpnei	r2,r2,24
   40cb0:	1000031e 	bne	r2,zero,40cc0 <TM_MFRC522_SelectTag+0xcc>
		size = buffer[0];
   40cb4:	e0bffc03 	ldbu	r2,-16(fp)
   40cb8:	e0bff945 	stb	r2,-27(fp)
   40cbc:	00000106 	br	40cc4 <TM_MFRC522_SelectTag+0xd0>
	} else {
		size = 0;
   40cc0:	e03ff945 	stb	zero,-27(fp)
	}

	return size;
   40cc4:	e0bff943 	ldbu	r2,-27(fp)
}
   40cc8:	e037883a 	mov	sp,fp
   40ccc:	dfc00117 	ldw	ra,4(sp)
   40cd0:	df000017 	ldw	fp,0(sp)
   40cd4:	dec00204 	addi	sp,sp,8
   40cd8:	f800283a 	ret

00040cdc <TM_MFRC522_Auth>:

TM_MFRC522_Status_t TM_MFRC522_Auth(char authMode, char BlockAddr, char* Sectorkey, char* serNum) {
   40cdc:	defff304 	addi	sp,sp,-52
   40ce0:	dfc00c15 	stw	ra,48(sp)
   40ce4:	df000b15 	stw	fp,44(sp)
   40ce8:	df000b04 	addi	fp,sp,44
   40cec:	2007883a 	mov	r3,r4
   40cf0:	2805883a 	mov	r2,r5
   40cf4:	e1bffe15 	stw	r6,-8(fp)
   40cf8:	e1ffff15 	stw	r7,-4(fp)
   40cfc:	e0fffc05 	stb	r3,-16(fp)
   40d00:	e0bffd05 	stb	r2,-12(fp)
	int recvBits;
	char i;
	char buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
   40d04:	e0bffc03 	ldbu	r2,-16(fp)
   40d08:	e0bff905 	stb	r2,-28(fp)
	buff[1] = BlockAddr;
   40d0c:	e0bffd03 	ldbu	r2,-12(fp)
   40d10:	e0bff945 	stb	r2,-27(fp)
	for (i = 0; i < 6; i++) {
   40d14:	e03ff705 	stb	zero,-36(fp)
   40d18:	00000c06 	br	40d4c <TM_MFRC522_Auth+0x70>
		buff[i+2] = *(Sectorkey+i);
   40d1c:	e0bff707 	ldb	r2,-36(fp)
   40d20:	10800084 	addi	r2,r2,2
   40d24:	e0fff707 	ldb	r3,-36(fp)
   40d28:	e13ffe17 	ldw	r4,-8(fp)
   40d2c:	20c7883a 	add	r3,r4,r3
   40d30:	18c00003 	ldbu	r3,0(r3)
   40d34:	e13ff904 	addi	r4,fp,-28
   40d38:	2085883a 	add	r2,r4,r2
   40d3c:	10c00005 	stb	r3,0(r2)
	char buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
	buff[1] = BlockAddr;
	for (i = 0; i < 6; i++) {
   40d40:	e0bff703 	ldbu	r2,-36(fp)
   40d44:	10800044 	addi	r2,r2,1
   40d48:	e0bff705 	stb	r2,-36(fp)
   40d4c:	e0bff707 	ldb	r2,-36(fp)
   40d50:	10800190 	cmplti	r2,r2,6
   40d54:	103ff11e 	bne	r2,zero,40d1c <__alt_data_end+0xfffced1c>
		buff[i+2] = *(Sectorkey+i);
	}
	for (i=0; i<4; i++) {
   40d58:	e03ff705 	stb	zero,-36(fp)
   40d5c:	00000c06 	br	40d90 <TM_MFRC522_Auth+0xb4>
		buff[i+8] = *(serNum+i);
   40d60:	e0bff707 	ldb	r2,-36(fp)
   40d64:	10800204 	addi	r2,r2,8
   40d68:	e0fff707 	ldb	r3,-36(fp)
   40d6c:	e13fff17 	ldw	r4,-4(fp)
   40d70:	20c7883a 	add	r3,r4,r3
   40d74:	18c00003 	ldbu	r3,0(r3)
   40d78:	e13ff904 	addi	r4,fp,-28
   40d7c:	2085883a 	add	r2,r4,r2
   40d80:	10c00005 	stb	r3,0(r2)
	buff[0] = authMode;
	buff[1] = BlockAddr;
	for (i = 0; i < 6; i++) {
		buff[i+2] = *(Sectorkey+i);
	}
	for (i=0; i<4; i++) {
   40d84:	e0bff703 	ldbu	r2,-36(fp)
   40d88:	10800044 	addi	r2,r2,1
   40d8c:	e0bff705 	stb	r2,-36(fp)
   40d90:	e0bff707 	ldb	r2,-36(fp)
   40d94:	10800110 	cmplti	r2,r2,4
   40d98:	103ff11e 	bne	r2,zero,40d60 <__alt_data_end+0xfffced60>
		buff[i+8] = *(serNum+i);
	}
	status = TM_MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
   40d9c:	e13ff904 	addi	r4,fp,-28
   40da0:	e0fff904 	addi	r3,fp,-28
   40da4:	e0bff804 	addi	r2,fp,-32
   40da8:	d8800015 	stw	r2,0(sp)
   40dac:	200f883a 	mov	r7,r4
   40db0:	01800304 	movi	r6,12
   40db4:	180b883a 	mov	r5,r3
   40db8:	01000384 	movi	r4,14
   40dbc:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40dc0:	e0bff615 	stw	r2,-40(fp)

	if ((status != MI_OK) || (!(TM_MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) {
   40dc4:	e0bff617 	ldw	r2,-40(fp)
   40dc8:	1000051e 	bne	r2,zero,40de0 <TM_MFRC522_Auth+0x104>
   40dcc:	01000204 	movi	r4,8
   40dd0:	00404c80 	call	404c8 <TM_MFRC522_ReadRegister>
   40dd4:	10803fcc 	andi	r2,r2,255
   40dd8:	1080020c 	andi	r2,r2,8
   40ddc:	1000021e 	bne	r2,zero,40de8 <TM_MFRC522_Auth+0x10c>
		status = MI_ERR;
   40de0:	00800084 	movi	r2,2
   40de4:	e0bff615 	stw	r2,-40(fp)
	}

	return status;
   40de8:	e0bff617 	ldw	r2,-40(fp)
}
   40dec:	e037883a 	mov	sp,fp
   40df0:	dfc00117 	ldw	ra,4(sp)
   40df4:	df000017 	ldw	fp,0(sp)
   40df8:	dec00204 	addi	sp,sp,8
   40dfc:	f800283a 	ret

00040e00 <TM_MFRC522_Read>:

TM_MFRC522_Status_t TM_MFRC522_Read(char blockAddr, char* recvData) {
   40e00:	defff904 	addi	sp,sp,-28
   40e04:	dfc00615 	stw	ra,24(sp)
   40e08:	df000515 	stw	fp,20(sp)
   40e0c:	df000504 	addi	fp,sp,20
   40e10:	2005883a 	mov	r2,r4
   40e14:	e17fff15 	stw	r5,-4(fp)
   40e18:	e0bffe05 	stb	r2,-8(fp)
	TM_MFRC522_Status_t status;
	int unLen;

	recvData[0] = PICC_READ;
   40e1c:	e0bfff17 	ldw	r2,-4(fp)
   40e20:	00c00c04 	movi	r3,48
   40e24:	10c00005 	stb	r3,0(r2)
	recvData[1] = blockAddr;
   40e28:	e0bfff17 	ldw	r2,-4(fp)
   40e2c:	10800044 	addi	r2,r2,1
   40e30:	e0fffe03 	ldbu	r3,-8(fp)
   40e34:	10c00005 	stb	r3,0(r2)
	TM_MFRC522_CalculateCRC(recvData,2, &recvData[2]);
   40e38:	e0bfff17 	ldw	r2,-4(fp)
   40e3c:	10800084 	addi	r2,r2,2
   40e40:	100d883a 	mov	r6,r2
   40e44:	01400084 	movi	r5,2
   40e48:	e13fff17 	ldw	r4,-4(fp)
   40e4c:	0040ae80 	call	40ae8 <TM_MFRC522_CalculateCRC>
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
   40e50:	e0bffd04 	addi	r2,fp,-12
   40e54:	d8800015 	stw	r2,0(sp)
   40e58:	e1ffff17 	ldw	r7,-4(fp)
   40e5c:	01800104 	movi	r6,4
   40e60:	e17fff17 	ldw	r5,-4(fp)
   40e64:	01000304 	movi	r4,12
   40e68:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40e6c:	e0bffc15 	stw	r2,-16(fp)

	if ((status != MI_OK) || (unLen != 0x90)) {
   40e70:	e0bffc17 	ldw	r2,-16(fp)
   40e74:	1000031e 	bne	r2,zero,40e84 <TM_MFRC522_Read+0x84>
   40e78:	e0bffd17 	ldw	r2,-12(fp)
   40e7c:	10802420 	cmpeqi	r2,r2,144
   40e80:	1000021e 	bne	r2,zero,40e8c <TM_MFRC522_Read+0x8c>
		status = MI_ERR;
   40e84:	00800084 	movi	r2,2
   40e88:	e0bffc15 	stw	r2,-16(fp)
	}

	return status;
   40e8c:	e0bffc17 	ldw	r2,-16(fp)
}
   40e90:	e037883a 	mov	sp,fp
   40e94:	dfc00117 	ldw	ra,4(sp)
   40e98:	df000017 	ldw	fp,0(sp)
   40e9c:	dec00204 	addi	sp,sp,8
   40ea0:	f800283a 	ret

00040ea4 <TM_MFRC522_Write>:

TM_MFRC522_Status_t TM_MFRC522_Write(char blockAddr, char* writeData) {
   40ea4:	defff304 	addi	sp,sp,-52
   40ea8:	dfc00c15 	stw	ra,48(sp)
   40eac:	df000b15 	stw	fp,44(sp)
   40eb0:	df000b04 	addi	fp,sp,44
   40eb4:	2005883a 	mov	r2,r4
   40eb8:	e17fff15 	stw	r5,-4(fp)
   40ebc:	e0bffe05 	stb	r2,-8(fp)
	TM_MFRC522_Status_t status;
	int recvBits;
	char i;
	char buff[18];

	buff[0] = PICC_WRITE;
   40ec0:	00bfe804 	movi	r2,-96
   40ec4:	e0bff905 	stb	r2,-28(fp)
	buff[1] = blockAddr;
   40ec8:	e0bffe03 	ldbu	r2,-8(fp)
   40ecc:	e0bff945 	stb	r2,-27(fp)
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
   40ed0:	e0bff904 	addi	r2,fp,-28
   40ed4:	10c00084 	addi	r3,r2,2
   40ed8:	e0bff904 	addi	r2,fp,-28
   40edc:	180d883a 	mov	r6,r3
   40ee0:	01400084 	movi	r5,2
   40ee4:	1009883a 	mov	r4,r2
   40ee8:	0040ae80 	call	40ae8 <TM_MFRC522_CalculateCRC>
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
   40eec:	e13ff904 	addi	r4,fp,-28
   40ef0:	e0fff904 	addi	r3,fp,-28
   40ef4:	e0bff804 	addi	r2,fp,-32
   40ef8:	d8800015 	stw	r2,0(sp)
   40efc:	200f883a 	mov	r7,r4
   40f00:	01800104 	movi	r6,4
   40f04:	180b883a 	mov	r5,r3
   40f08:	01000304 	movi	r4,12
   40f0c:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40f10:	e0bff615 	stw	r2,-40(fp)

	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {
   40f14:	e0bff617 	ldw	r2,-40(fp)
   40f18:	1000081e 	bne	r2,zero,40f3c <TM_MFRC522_Write+0x98>
   40f1c:	e0bff817 	ldw	r2,-32(fp)
   40f20:	10800118 	cmpnei	r2,r2,4
   40f24:	1000051e 	bne	r2,zero,40f3c <TM_MFRC522_Write+0x98>
   40f28:	e0bff903 	ldbu	r2,-28(fp)
   40f2c:	10803fcc 	andi	r2,r2,255
   40f30:	108003cc 	andi	r2,r2,15
   40f34:	108002a0 	cmpeqi	r2,r2,10
   40f38:	1000021e 	bne	r2,zero,40f44 <TM_MFRC522_Write+0xa0>
		status = MI_ERR;
   40f3c:	00800084 	movi	r2,2
   40f40:	e0bff615 	stw	r2,-40(fp)
	}

	if (status == MI_OK) {
   40f44:	e0bff617 	ldw	r2,-40(fp)
   40f48:	10002d1e 	bne	r2,zero,41000 <TM_MFRC522_Write+0x15c>
		//Data to the FIFO write 16Byte
		for (i = 0; i < 16; i++) {
   40f4c:	e03ff705 	stb	zero,-36(fp)
   40f50:	00000b06 	br	40f80 <TM_MFRC522_Write+0xdc>
			buff[i] = *(writeData+i);
   40f54:	e0bff707 	ldb	r2,-36(fp)
   40f58:	e0fff707 	ldb	r3,-36(fp)
   40f5c:	e13fff17 	ldw	r4,-4(fp)
   40f60:	20c7883a 	add	r3,r4,r3
   40f64:	18c00003 	ldbu	r3,0(r3)
   40f68:	e13ff904 	addi	r4,fp,-28
   40f6c:	2085883a 	add	r2,r4,r2
   40f70:	10c00005 	stb	r3,0(r2)
		status = MI_ERR;
	}

	if (status == MI_OK) {
		//Data to the FIFO write 16Byte
		for (i = 0; i < 16; i++) {
   40f74:	e0bff703 	ldbu	r2,-36(fp)
   40f78:	10800044 	addi	r2,r2,1
   40f7c:	e0bff705 	stb	r2,-36(fp)
   40f80:	e0bff707 	ldb	r2,-36(fp)
   40f84:	10800410 	cmplti	r2,r2,16
   40f88:	103ff21e 	bne	r2,zero,40f54 <__alt_data_end+0xfffcef54>
			buff[i] = *(writeData+i);
		}
		TM_MFRC522_CalculateCRC(buff, 16, &buff[16]);
   40f8c:	e0bff904 	addi	r2,fp,-28
   40f90:	10c00404 	addi	r3,r2,16
   40f94:	e0bff904 	addi	r2,fp,-28
   40f98:	180d883a 	mov	r6,r3
   40f9c:	01400404 	movi	r5,16
   40fa0:	1009883a 	mov	r4,r2
   40fa4:	0040ae80 	call	40ae8 <TM_MFRC522_CalculateCRC>
		status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
   40fa8:	e13ff904 	addi	r4,fp,-28
   40fac:	e0fff904 	addi	r3,fp,-28
   40fb0:	e0bff804 	addi	r2,fp,-32
   40fb4:	d8800015 	stw	r2,0(sp)
   40fb8:	200f883a 	mov	r7,r4
   40fbc:	01800484 	movi	r6,18
   40fc0:	180b883a 	mov	r5,r3
   40fc4:	01000304 	movi	r4,12
   40fc8:	00407480 	call	40748 <TM_MFRC522_ToCard>
   40fcc:	e0bff615 	stw	r2,-40(fp)

		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {
   40fd0:	e0bff617 	ldw	r2,-40(fp)
   40fd4:	1000081e 	bne	r2,zero,40ff8 <TM_MFRC522_Write+0x154>
   40fd8:	e0bff817 	ldw	r2,-32(fp)
   40fdc:	10800118 	cmpnei	r2,r2,4
   40fe0:	1000051e 	bne	r2,zero,40ff8 <TM_MFRC522_Write+0x154>
   40fe4:	e0bff903 	ldbu	r2,-28(fp)
   40fe8:	10803fcc 	andi	r2,r2,255
   40fec:	108003cc 	andi	r2,r2,15
   40ff0:	108002a0 	cmpeqi	r2,r2,10
   40ff4:	1000021e 	bne	r2,zero,41000 <TM_MFRC522_Write+0x15c>
			status = MI_ERR;
   40ff8:	00800084 	movi	r2,2
   40ffc:	e0bff615 	stw	r2,-40(fp)
		}
	}

	return status;
   41000:	e0bff617 	ldw	r2,-40(fp)
}
   41004:	e037883a 	mov	sp,fp
   41008:	dfc00117 	ldw	ra,4(sp)
   4100c:	df000017 	ldw	fp,0(sp)
   41010:	dec00204 	addi	sp,sp,8
   41014:	f800283a 	ret

00041018 <TM_MFRC522_Halt>:

void TM_MFRC522_Halt(void) {
   41018:	defffb04 	addi	sp,sp,-20
   4101c:	dfc00415 	stw	ra,16(sp)
   41020:	df000315 	stw	fp,12(sp)
   41024:	df000304 	addi	fp,sp,12
	int unLen;
	char buff[4];

	buff[0] = PICC_HALT;
   41028:	00801404 	movi	r2,80
   4102c:	e0bfff05 	stb	r2,-4(fp)
	buff[1] = 0;
   41030:	e03fff45 	stb	zero,-3(fp)
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
   41034:	e0bfff04 	addi	r2,fp,-4
   41038:	10c00084 	addi	r3,r2,2
   4103c:	e0bfff04 	addi	r2,fp,-4
   41040:	180d883a 	mov	r6,r3
   41044:	01400084 	movi	r5,2
   41048:	1009883a 	mov	r4,r2
   4104c:	0040ae80 	call	40ae8 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
   41050:	e0ffff04 	addi	r3,fp,-4
   41054:	e0bfff04 	addi	r2,fp,-4
   41058:	e13ffe04 	addi	r4,fp,-8
   4105c:	d9000015 	stw	r4,0(sp)
   41060:	180f883a 	mov	r7,r3
   41064:	01800104 	movi	r6,4
   41068:	100b883a 	mov	r5,r2
   4106c:	01000304 	movi	r4,12
   41070:	00407480 	call	40748 <TM_MFRC522_ToCard>
}
   41074:	0001883a 	nop
   41078:	e037883a 	mov	sp,fp
   4107c:	dfc00117 	ldw	ra,4(sp)
   41080:	df000017 	ldw	fp,0(sp)
   41084:	dec00204 	addi	sp,sp,8
   41088:	f800283a 	ret

0004108c <_puts_r>:
   4108c:	defff604 	addi	sp,sp,-40
   41090:	dc000715 	stw	r16,28(sp)
   41094:	2021883a 	mov	r16,r4
   41098:	2809883a 	mov	r4,r5
   4109c:	dc400815 	stw	r17,32(sp)
   410a0:	dfc00915 	stw	ra,36(sp)
   410a4:	2823883a 	mov	r17,r5
   410a8:	00411600 	call	41160 <strlen>
   410ac:	10c00044 	addi	r3,r2,1
   410b0:	d8800115 	stw	r2,4(sp)
   410b4:	00800134 	movhi	r2,4
   410b8:	10995104 	addi	r2,r2,25924
   410bc:	d8800215 	stw	r2,8(sp)
   410c0:	00800044 	movi	r2,1
   410c4:	d8800315 	stw	r2,12(sp)
   410c8:	00800084 	movi	r2,2
   410cc:	dc400015 	stw	r17,0(sp)
   410d0:	d8c00615 	stw	r3,24(sp)
   410d4:	dec00415 	stw	sp,16(sp)
   410d8:	d8800515 	stw	r2,20(sp)
   410dc:	80000226 	beq	r16,zero,410e8 <_puts_r+0x5c>
   410e0:	80800e17 	ldw	r2,56(r16)
   410e4:	10001426 	beq	r2,zero,41138 <_puts_r+0xac>
   410e8:	81400217 	ldw	r5,8(r16)
   410ec:	2880030b 	ldhu	r2,12(r5)
   410f0:	10c8000c 	andi	r3,r2,8192
   410f4:	1800061e 	bne	r3,zero,41110 <_puts_r+0x84>
   410f8:	29001917 	ldw	r4,100(r5)
   410fc:	00f7ffc4 	movi	r3,-8193
   41100:	10880014 	ori	r2,r2,8192
   41104:	20c6703a 	and	r3,r4,r3
   41108:	2880030d 	sth	r2,12(r5)
   4110c:	28c01915 	stw	r3,100(r5)
   41110:	d9800404 	addi	r6,sp,16
   41114:	8009883a 	mov	r4,r16
   41118:	00415a80 	call	415a8 <__sfvwrite_r>
   4111c:	1000091e 	bne	r2,zero,41144 <_puts_r+0xb8>
   41120:	00800284 	movi	r2,10
   41124:	dfc00917 	ldw	ra,36(sp)
   41128:	dc400817 	ldw	r17,32(sp)
   4112c:	dc000717 	ldw	r16,28(sp)
   41130:	dec00a04 	addi	sp,sp,40
   41134:	f800283a 	ret
   41138:	8009883a 	mov	r4,r16
   4113c:	00415580 	call	41558 <__sinit>
   41140:	003fe906 	br	410e8 <__alt_data_end+0xfffcf0e8>
   41144:	00bfffc4 	movi	r2,-1
   41148:	003ff606 	br	41124 <__alt_data_end+0xfffcf124>

0004114c <puts>:
   4114c:	00800134 	movhi	r2,4
   41150:	109fee04 	addi	r2,r2,32696
   41154:	200b883a 	mov	r5,r4
   41158:	11000017 	ldw	r4,0(r2)
   4115c:	004108c1 	jmpi	4108c <_puts_r>

00041160 <strlen>:
   41160:	208000cc 	andi	r2,r4,3
   41164:	10002026 	beq	r2,zero,411e8 <strlen+0x88>
   41168:	20800007 	ldb	r2,0(r4)
   4116c:	10002026 	beq	r2,zero,411f0 <strlen+0x90>
   41170:	2005883a 	mov	r2,r4
   41174:	00000206 	br	41180 <strlen+0x20>
   41178:	10c00007 	ldb	r3,0(r2)
   4117c:	18001826 	beq	r3,zero,411e0 <strlen+0x80>
   41180:	10800044 	addi	r2,r2,1
   41184:	10c000cc 	andi	r3,r2,3
   41188:	183ffb1e 	bne	r3,zero,41178 <__alt_data_end+0xfffcf178>
   4118c:	10c00017 	ldw	r3,0(r2)
   41190:	01ffbff4 	movhi	r7,65279
   41194:	39ffbfc4 	addi	r7,r7,-257
   41198:	00ca303a 	nor	r5,zero,r3
   4119c:	01a02074 	movhi	r6,32897
   411a0:	19c7883a 	add	r3,r3,r7
   411a4:	31a02004 	addi	r6,r6,-32640
   411a8:	1946703a 	and	r3,r3,r5
   411ac:	1986703a 	and	r3,r3,r6
   411b0:	1800091e 	bne	r3,zero,411d8 <strlen+0x78>
   411b4:	10800104 	addi	r2,r2,4
   411b8:	10c00017 	ldw	r3,0(r2)
   411bc:	19cb883a 	add	r5,r3,r7
   411c0:	00c6303a 	nor	r3,zero,r3
   411c4:	28c6703a 	and	r3,r5,r3
   411c8:	1986703a 	and	r3,r3,r6
   411cc:	183ff926 	beq	r3,zero,411b4 <__alt_data_end+0xfffcf1b4>
   411d0:	00000106 	br	411d8 <strlen+0x78>
   411d4:	10800044 	addi	r2,r2,1
   411d8:	10c00007 	ldb	r3,0(r2)
   411dc:	183ffd1e 	bne	r3,zero,411d4 <__alt_data_end+0xfffcf1d4>
   411e0:	1105c83a 	sub	r2,r2,r4
   411e4:	f800283a 	ret
   411e8:	2005883a 	mov	r2,r4
   411ec:	003fe706 	br	4118c <__alt_data_end+0xfffcf18c>
   411f0:	0005883a 	mov	r2,zero
   411f4:	f800283a 	ret

000411f8 <__fp_unlock>:
   411f8:	0005883a 	mov	r2,zero
   411fc:	f800283a 	ret

00041200 <_cleanup_r>:
   41200:	01400134 	movhi	r5,4
   41204:	294c6c04 	addi	r5,r5,12720
   41208:	0041b341 	jmpi	41b34 <_fwalk_reent>

0004120c <__sinit.part.1>:
   4120c:	defff704 	addi	sp,sp,-36
   41210:	00c00134 	movhi	r3,4
   41214:	dfc00815 	stw	ra,32(sp)
   41218:	ddc00715 	stw	r23,28(sp)
   4121c:	dd800615 	stw	r22,24(sp)
   41220:	dd400515 	stw	r21,20(sp)
   41224:	dd000415 	stw	r20,16(sp)
   41228:	dcc00315 	stw	r19,12(sp)
   4122c:	dc800215 	stw	r18,8(sp)
   41230:	dc400115 	stw	r17,4(sp)
   41234:	dc000015 	stw	r16,0(sp)
   41238:	18c48004 	addi	r3,r3,4608
   4123c:	24000117 	ldw	r16,4(r4)
   41240:	20c00f15 	stw	r3,60(r4)
   41244:	2080bb04 	addi	r2,r4,748
   41248:	00c000c4 	movi	r3,3
   4124c:	20c0b915 	stw	r3,740(r4)
   41250:	2080ba15 	stw	r2,744(r4)
   41254:	2000b815 	stw	zero,736(r4)
   41258:	05c00204 	movi	r23,8
   4125c:	00800104 	movi	r2,4
   41260:	2025883a 	mov	r18,r4
   41264:	b80d883a 	mov	r6,r23
   41268:	81001704 	addi	r4,r16,92
   4126c:	000b883a 	mov	r5,zero
   41270:	80000015 	stw	zero,0(r16)
   41274:	80000115 	stw	zero,4(r16)
   41278:	80000215 	stw	zero,8(r16)
   4127c:	8080030d 	sth	r2,12(r16)
   41280:	80001915 	stw	zero,100(r16)
   41284:	8000038d 	sth	zero,14(r16)
   41288:	80000415 	stw	zero,16(r16)
   4128c:	80000515 	stw	zero,20(r16)
   41290:	80000615 	stw	zero,24(r16)
   41294:	004278c0 	call	4278c <memset>
   41298:	05800134 	movhi	r22,4
   4129c:	94400217 	ldw	r17,8(r18)
   412a0:	05400134 	movhi	r21,4
   412a4:	05000134 	movhi	r20,4
   412a8:	04c00134 	movhi	r19,4
   412ac:	b58b9b04 	addi	r22,r22,11884
   412b0:	ad4bb204 	addi	r21,r21,11976
   412b4:	a50bd104 	addi	r20,r20,12100
   412b8:	9ccbe804 	addi	r19,r19,12192
   412bc:	85800815 	stw	r22,32(r16)
   412c0:	85400915 	stw	r21,36(r16)
   412c4:	85000a15 	stw	r20,40(r16)
   412c8:	84c00b15 	stw	r19,44(r16)
   412cc:	84000715 	stw	r16,28(r16)
   412d0:	00800284 	movi	r2,10
   412d4:	8880030d 	sth	r2,12(r17)
   412d8:	00800044 	movi	r2,1
   412dc:	b80d883a 	mov	r6,r23
   412e0:	89001704 	addi	r4,r17,92
   412e4:	000b883a 	mov	r5,zero
   412e8:	88000015 	stw	zero,0(r17)
   412ec:	88000115 	stw	zero,4(r17)
   412f0:	88000215 	stw	zero,8(r17)
   412f4:	88001915 	stw	zero,100(r17)
   412f8:	8880038d 	sth	r2,14(r17)
   412fc:	88000415 	stw	zero,16(r17)
   41300:	88000515 	stw	zero,20(r17)
   41304:	88000615 	stw	zero,24(r17)
   41308:	004278c0 	call	4278c <memset>
   4130c:	94000317 	ldw	r16,12(r18)
   41310:	00800484 	movi	r2,18
   41314:	8c400715 	stw	r17,28(r17)
   41318:	8d800815 	stw	r22,32(r17)
   4131c:	8d400915 	stw	r21,36(r17)
   41320:	8d000a15 	stw	r20,40(r17)
   41324:	8cc00b15 	stw	r19,44(r17)
   41328:	8080030d 	sth	r2,12(r16)
   4132c:	00800084 	movi	r2,2
   41330:	80000015 	stw	zero,0(r16)
   41334:	80000115 	stw	zero,4(r16)
   41338:	80000215 	stw	zero,8(r16)
   4133c:	80001915 	stw	zero,100(r16)
   41340:	8080038d 	sth	r2,14(r16)
   41344:	80000415 	stw	zero,16(r16)
   41348:	80000515 	stw	zero,20(r16)
   4134c:	80000615 	stw	zero,24(r16)
   41350:	b80d883a 	mov	r6,r23
   41354:	000b883a 	mov	r5,zero
   41358:	81001704 	addi	r4,r16,92
   4135c:	004278c0 	call	4278c <memset>
   41360:	00800044 	movi	r2,1
   41364:	84000715 	stw	r16,28(r16)
   41368:	85800815 	stw	r22,32(r16)
   4136c:	85400915 	stw	r21,36(r16)
   41370:	85000a15 	stw	r20,40(r16)
   41374:	84c00b15 	stw	r19,44(r16)
   41378:	90800e15 	stw	r2,56(r18)
   4137c:	dfc00817 	ldw	ra,32(sp)
   41380:	ddc00717 	ldw	r23,28(sp)
   41384:	dd800617 	ldw	r22,24(sp)
   41388:	dd400517 	ldw	r21,20(sp)
   4138c:	dd000417 	ldw	r20,16(sp)
   41390:	dcc00317 	ldw	r19,12(sp)
   41394:	dc800217 	ldw	r18,8(sp)
   41398:	dc400117 	ldw	r17,4(sp)
   4139c:	dc000017 	ldw	r16,0(sp)
   413a0:	dec00904 	addi	sp,sp,36
   413a4:	f800283a 	ret

000413a8 <__fp_lock>:
   413a8:	0005883a 	mov	r2,zero
   413ac:	f800283a 	ret

000413b0 <__sfmoreglue>:
   413b0:	defffc04 	addi	sp,sp,-16
   413b4:	dc800215 	stw	r18,8(sp)
   413b8:	2825883a 	mov	r18,r5
   413bc:	dc000015 	stw	r16,0(sp)
   413c0:	01401a04 	movi	r5,104
   413c4:	2021883a 	mov	r16,r4
   413c8:	913fffc4 	addi	r4,r18,-1
   413cc:	dfc00315 	stw	ra,12(sp)
   413d0:	dc400115 	stw	r17,4(sp)
   413d4:	0043e700 	call	43e70 <__mulsi3>
   413d8:	8009883a 	mov	r4,r16
   413dc:	11401d04 	addi	r5,r2,116
   413e0:	1023883a 	mov	r17,r2
   413e4:	0041bf80 	call	41bf8 <_malloc_r>
   413e8:	1021883a 	mov	r16,r2
   413ec:	10000726 	beq	r2,zero,4140c <__sfmoreglue+0x5c>
   413f0:	11000304 	addi	r4,r2,12
   413f4:	10000015 	stw	zero,0(r2)
   413f8:	14800115 	stw	r18,4(r2)
   413fc:	11000215 	stw	r4,8(r2)
   41400:	89801a04 	addi	r6,r17,104
   41404:	000b883a 	mov	r5,zero
   41408:	004278c0 	call	4278c <memset>
   4140c:	8005883a 	mov	r2,r16
   41410:	dfc00317 	ldw	ra,12(sp)
   41414:	dc800217 	ldw	r18,8(sp)
   41418:	dc400117 	ldw	r17,4(sp)
   4141c:	dc000017 	ldw	r16,0(sp)
   41420:	dec00404 	addi	sp,sp,16
   41424:	f800283a 	ret

00041428 <__sfp>:
   41428:	defffb04 	addi	sp,sp,-20
   4142c:	dc000015 	stw	r16,0(sp)
   41430:	04000134 	movhi	r16,4
   41434:	841fed04 	addi	r16,r16,32692
   41438:	dcc00315 	stw	r19,12(sp)
   4143c:	2027883a 	mov	r19,r4
   41440:	81000017 	ldw	r4,0(r16)
   41444:	dfc00415 	stw	ra,16(sp)
   41448:	dc800215 	stw	r18,8(sp)
   4144c:	20800e17 	ldw	r2,56(r4)
   41450:	dc400115 	stw	r17,4(sp)
   41454:	1000021e 	bne	r2,zero,41460 <__sfp+0x38>
   41458:	004120c0 	call	4120c <__sinit.part.1>
   4145c:	81000017 	ldw	r4,0(r16)
   41460:	2480b804 	addi	r18,r4,736
   41464:	047fffc4 	movi	r17,-1
   41468:	91000117 	ldw	r4,4(r18)
   4146c:	94000217 	ldw	r16,8(r18)
   41470:	213fffc4 	addi	r4,r4,-1
   41474:	20000a16 	blt	r4,zero,414a0 <__sfp+0x78>
   41478:	8080030f 	ldh	r2,12(r16)
   4147c:	10000c26 	beq	r2,zero,414b0 <__sfp+0x88>
   41480:	80c01d04 	addi	r3,r16,116
   41484:	00000206 	br	41490 <__sfp+0x68>
   41488:	18bfe60f 	ldh	r2,-104(r3)
   4148c:	10000826 	beq	r2,zero,414b0 <__sfp+0x88>
   41490:	213fffc4 	addi	r4,r4,-1
   41494:	1c3ffd04 	addi	r16,r3,-12
   41498:	18c01a04 	addi	r3,r3,104
   4149c:	247ffa1e 	bne	r4,r17,41488 <__alt_data_end+0xfffcf488>
   414a0:	90800017 	ldw	r2,0(r18)
   414a4:	10001d26 	beq	r2,zero,4151c <__sfp+0xf4>
   414a8:	1025883a 	mov	r18,r2
   414ac:	003fee06 	br	41468 <__alt_data_end+0xfffcf468>
   414b0:	00bfffc4 	movi	r2,-1
   414b4:	8080038d 	sth	r2,14(r16)
   414b8:	00800044 	movi	r2,1
   414bc:	8080030d 	sth	r2,12(r16)
   414c0:	80001915 	stw	zero,100(r16)
   414c4:	80000015 	stw	zero,0(r16)
   414c8:	80000215 	stw	zero,8(r16)
   414cc:	80000115 	stw	zero,4(r16)
   414d0:	80000415 	stw	zero,16(r16)
   414d4:	80000515 	stw	zero,20(r16)
   414d8:	80000615 	stw	zero,24(r16)
   414dc:	01800204 	movi	r6,8
   414e0:	000b883a 	mov	r5,zero
   414e4:	81001704 	addi	r4,r16,92
   414e8:	004278c0 	call	4278c <memset>
   414ec:	8005883a 	mov	r2,r16
   414f0:	80000c15 	stw	zero,48(r16)
   414f4:	80000d15 	stw	zero,52(r16)
   414f8:	80001115 	stw	zero,68(r16)
   414fc:	80001215 	stw	zero,72(r16)
   41500:	dfc00417 	ldw	ra,16(sp)
   41504:	dcc00317 	ldw	r19,12(sp)
   41508:	dc800217 	ldw	r18,8(sp)
   4150c:	dc400117 	ldw	r17,4(sp)
   41510:	dc000017 	ldw	r16,0(sp)
   41514:	dec00504 	addi	sp,sp,20
   41518:	f800283a 	ret
   4151c:	01400104 	movi	r5,4
   41520:	9809883a 	mov	r4,r19
   41524:	00413b00 	call	413b0 <__sfmoreglue>
   41528:	90800015 	stw	r2,0(r18)
   4152c:	103fde1e 	bne	r2,zero,414a8 <__alt_data_end+0xfffcf4a8>
   41530:	00800304 	movi	r2,12
   41534:	98800015 	stw	r2,0(r19)
   41538:	0005883a 	mov	r2,zero
   4153c:	003ff006 	br	41500 <__alt_data_end+0xfffcf500>

00041540 <_cleanup>:
   41540:	00800134 	movhi	r2,4
   41544:	109fed04 	addi	r2,r2,32692
   41548:	11000017 	ldw	r4,0(r2)
   4154c:	01400134 	movhi	r5,4
   41550:	294c6c04 	addi	r5,r5,12720
   41554:	0041b341 	jmpi	41b34 <_fwalk_reent>

00041558 <__sinit>:
   41558:	20800e17 	ldw	r2,56(r4)
   4155c:	10000126 	beq	r2,zero,41564 <__sinit+0xc>
   41560:	f800283a 	ret
   41564:	004120c1 	jmpi	4120c <__sinit.part.1>

00041568 <__sfp_lock_acquire>:
   41568:	f800283a 	ret

0004156c <__sfp_lock_release>:
   4156c:	f800283a 	ret

00041570 <__sinit_lock_acquire>:
   41570:	f800283a 	ret

00041574 <__sinit_lock_release>:
   41574:	f800283a 	ret

00041578 <__fp_lock_all>:
   41578:	00800134 	movhi	r2,4
   4157c:	109fee04 	addi	r2,r2,32696
   41580:	11000017 	ldw	r4,0(r2)
   41584:	01400134 	movhi	r5,4
   41588:	2944ea04 	addi	r5,r5,5032
   4158c:	0041a701 	jmpi	41a70 <_fwalk>

00041590 <__fp_unlock_all>:
   41590:	00800134 	movhi	r2,4
   41594:	109fee04 	addi	r2,r2,32696
   41598:	11000017 	ldw	r4,0(r2)
   4159c:	01400134 	movhi	r5,4
   415a0:	29447e04 	addi	r5,r5,4600
   415a4:	0041a701 	jmpi	41a70 <_fwalk>

000415a8 <__sfvwrite_r>:
   415a8:	30800217 	ldw	r2,8(r6)
   415ac:	10006726 	beq	r2,zero,4174c <__sfvwrite_r+0x1a4>
   415b0:	28c0030b 	ldhu	r3,12(r5)
   415b4:	defff404 	addi	sp,sp,-48
   415b8:	dd400715 	stw	r21,28(sp)
   415bc:	dd000615 	stw	r20,24(sp)
   415c0:	dc000215 	stw	r16,8(sp)
   415c4:	dfc00b15 	stw	ra,44(sp)
   415c8:	df000a15 	stw	fp,40(sp)
   415cc:	ddc00915 	stw	r23,36(sp)
   415d0:	dd800815 	stw	r22,32(sp)
   415d4:	dcc00515 	stw	r19,20(sp)
   415d8:	dc800415 	stw	r18,16(sp)
   415dc:	dc400315 	stw	r17,12(sp)
   415e0:	1880020c 	andi	r2,r3,8
   415e4:	2821883a 	mov	r16,r5
   415e8:	202b883a 	mov	r21,r4
   415ec:	3029883a 	mov	r20,r6
   415f0:	10002726 	beq	r2,zero,41690 <__sfvwrite_r+0xe8>
   415f4:	28800417 	ldw	r2,16(r5)
   415f8:	10002526 	beq	r2,zero,41690 <__sfvwrite_r+0xe8>
   415fc:	1880008c 	andi	r2,r3,2
   41600:	a4400017 	ldw	r17,0(r20)
   41604:	10002a26 	beq	r2,zero,416b0 <__sfvwrite_r+0x108>
   41608:	05a00034 	movhi	r22,32768
   4160c:	0027883a 	mov	r19,zero
   41610:	0025883a 	mov	r18,zero
   41614:	b5bf0004 	addi	r22,r22,-1024
   41618:	980d883a 	mov	r6,r19
   4161c:	a809883a 	mov	r4,r21
   41620:	90004626 	beq	r18,zero,4173c <__sfvwrite_r+0x194>
   41624:	900f883a 	mov	r7,r18
   41628:	b480022e 	bgeu	r22,r18,41634 <__sfvwrite_r+0x8c>
   4162c:	01e00034 	movhi	r7,32768
   41630:	39ff0004 	addi	r7,r7,-1024
   41634:	80800917 	ldw	r2,36(r16)
   41638:	81400717 	ldw	r5,28(r16)
   4163c:	103ee83a 	callr	r2
   41640:	00805a0e 	bge	zero,r2,417ac <__sfvwrite_r+0x204>
   41644:	a0c00217 	ldw	r3,8(r20)
   41648:	98a7883a 	add	r19,r19,r2
   4164c:	90a5c83a 	sub	r18,r18,r2
   41650:	1885c83a 	sub	r2,r3,r2
   41654:	a0800215 	stw	r2,8(r20)
   41658:	103fef1e 	bne	r2,zero,41618 <__alt_data_end+0xfffcf618>
   4165c:	0005883a 	mov	r2,zero
   41660:	dfc00b17 	ldw	ra,44(sp)
   41664:	df000a17 	ldw	fp,40(sp)
   41668:	ddc00917 	ldw	r23,36(sp)
   4166c:	dd800817 	ldw	r22,32(sp)
   41670:	dd400717 	ldw	r21,28(sp)
   41674:	dd000617 	ldw	r20,24(sp)
   41678:	dcc00517 	ldw	r19,20(sp)
   4167c:	dc800417 	ldw	r18,16(sp)
   41680:	dc400317 	ldw	r17,12(sp)
   41684:	dc000217 	ldw	r16,8(sp)
   41688:	dec00c04 	addi	sp,sp,48
   4168c:	f800283a 	ret
   41690:	800b883a 	mov	r5,r16
   41694:	a809883a 	mov	r4,r21
   41698:	00430080 	call	43008 <__swsetup_r>
   4169c:	1000ee1e 	bne	r2,zero,41a58 <__sfvwrite_r+0x4b0>
   416a0:	80c0030b 	ldhu	r3,12(r16)
   416a4:	a4400017 	ldw	r17,0(r20)
   416a8:	1880008c 	andi	r2,r3,2
   416ac:	103fd61e 	bne	r2,zero,41608 <__alt_data_end+0xfffcf608>
   416b0:	1880004c 	andi	r2,r3,1
   416b4:	1000421e 	bne	r2,zero,417c0 <__sfvwrite_r+0x218>
   416b8:	0039883a 	mov	fp,zero
   416bc:	0025883a 	mov	r18,zero
   416c0:	90001a26 	beq	r18,zero,4172c <__sfvwrite_r+0x184>
   416c4:	1880800c 	andi	r2,r3,512
   416c8:	84c00217 	ldw	r19,8(r16)
   416cc:	10002126 	beq	r2,zero,41754 <__sfvwrite_r+0x1ac>
   416d0:	982f883a 	mov	r23,r19
   416d4:	94c09636 	bltu	r18,r19,41930 <__sfvwrite_r+0x388>
   416d8:	1881200c 	andi	r2,r3,1152
   416dc:	1000a11e 	bne	r2,zero,41964 <__sfvwrite_r+0x3bc>
   416e0:	81000017 	ldw	r4,0(r16)
   416e4:	b80d883a 	mov	r6,r23
   416e8:	e00b883a 	mov	r5,fp
   416ec:	00426300 	call	42630 <memmove>
   416f0:	80c00217 	ldw	r3,8(r16)
   416f4:	81000017 	ldw	r4,0(r16)
   416f8:	9005883a 	mov	r2,r18
   416fc:	1ce7c83a 	sub	r19,r3,r19
   41700:	25cf883a 	add	r7,r4,r23
   41704:	84c00215 	stw	r19,8(r16)
   41708:	81c00015 	stw	r7,0(r16)
   4170c:	a0c00217 	ldw	r3,8(r20)
   41710:	e0b9883a 	add	fp,fp,r2
   41714:	90a5c83a 	sub	r18,r18,r2
   41718:	18a7c83a 	sub	r19,r3,r2
   4171c:	a4c00215 	stw	r19,8(r20)
   41720:	983fce26 	beq	r19,zero,4165c <__alt_data_end+0xfffcf65c>
   41724:	80c0030b 	ldhu	r3,12(r16)
   41728:	903fe61e 	bne	r18,zero,416c4 <__alt_data_end+0xfffcf6c4>
   4172c:	8f000017 	ldw	fp,0(r17)
   41730:	8c800117 	ldw	r18,4(r17)
   41734:	8c400204 	addi	r17,r17,8
   41738:	003fe106 	br	416c0 <__alt_data_end+0xfffcf6c0>
   4173c:	8cc00017 	ldw	r19,0(r17)
   41740:	8c800117 	ldw	r18,4(r17)
   41744:	8c400204 	addi	r17,r17,8
   41748:	003fb306 	br	41618 <__alt_data_end+0xfffcf618>
   4174c:	0005883a 	mov	r2,zero
   41750:	f800283a 	ret
   41754:	81000017 	ldw	r4,0(r16)
   41758:	80800417 	ldw	r2,16(r16)
   4175c:	11005a36 	bltu	r2,r4,418c8 <__sfvwrite_r+0x320>
   41760:	85c00517 	ldw	r23,20(r16)
   41764:	95c05836 	bltu	r18,r23,418c8 <__sfvwrite_r+0x320>
   41768:	00a00034 	movhi	r2,32768
   4176c:	10bfffc4 	addi	r2,r2,-1
   41770:	9009883a 	mov	r4,r18
   41774:	1480012e 	bgeu	r2,r18,4177c <__sfvwrite_r+0x1d4>
   41778:	1009883a 	mov	r4,r2
   4177c:	b80b883a 	mov	r5,r23
   41780:	0043cbc0 	call	43cbc <__divsi3>
   41784:	b80b883a 	mov	r5,r23
   41788:	1009883a 	mov	r4,r2
   4178c:	0043e700 	call	43e70 <__mulsi3>
   41790:	81400717 	ldw	r5,28(r16)
   41794:	80c00917 	ldw	r3,36(r16)
   41798:	100f883a 	mov	r7,r2
   4179c:	e00d883a 	mov	r6,fp
   417a0:	a809883a 	mov	r4,r21
   417a4:	183ee83a 	callr	r3
   417a8:	00bfd816 	blt	zero,r2,4170c <__alt_data_end+0xfffcf70c>
   417ac:	8080030b 	ldhu	r2,12(r16)
   417b0:	10801014 	ori	r2,r2,64
   417b4:	8080030d 	sth	r2,12(r16)
   417b8:	00bfffc4 	movi	r2,-1
   417bc:	003fa806 	br	41660 <__alt_data_end+0xfffcf660>
   417c0:	0027883a 	mov	r19,zero
   417c4:	0011883a 	mov	r8,zero
   417c8:	0039883a 	mov	fp,zero
   417cc:	0025883a 	mov	r18,zero
   417d0:	90001f26 	beq	r18,zero,41850 <__sfvwrite_r+0x2a8>
   417d4:	40005a26 	beq	r8,zero,41940 <__sfvwrite_r+0x398>
   417d8:	982d883a 	mov	r22,r19
   417dc:	94c0012e 	bgeu	r18,r19,417e4 <__sfvwrite_r+0x23c>
   417e0:	902d883a 	mov	r22,r18
   417e4:	81000017 	ldw	r4,0(r16)
   417e8:	80800417 	ldw	r2,16(r16)
   417ec:	b02f883a 	mov	r23,r22
   417f0:	81c00517 	ldw	r7,20(r16)
   417f4:	1100032e 	bgeu	r2,r4,41804 <__sfvwrite_r+0x25c>
   417f8:	80c00217 	ldw	r3,8(r16)
   417fc:	38c7883a 	add	r3,r7,r3
   41800:	1d801816 	blt	r3,r22,41864 <__sfvwrite_r+0x2bc>
   41804:	b1c03e16 	blt	r22,r7,41900 <__sfvwrite_r+0x358>
   41808:	80800917 	ldw	r2,36(r16)
   4180c:	81400717 	ldw	r5,28(r16)
   41810:	e00d883a 	mov	r6,fp
   41814:	da000115 	stw	r8,4(sp)
   41818:	a809883a 	mov	r4,r21
   4181c:	103ee83a 	callr	r2
   41820:	102f883a 	mov	r23,r2
   41824:	da000117 	ldw	r8,4(sp)
   41828:	00bfe00e 	bge	zero,r2,417ac <__alt_data_end+0xfffcf7ac>
   4182c:	9de7c83a 	sub	r19,r19,r23
   41830:	98001f26 	beq	r19,zero,418b0 <__sfvwrite_r+0x308>
   41834:	a0800217 	ldw	r2,8(r20)
   41838:	e5f9883a 	add	fp,fp,r23
   4183c:	95e5c83a 	sub	r18,r18,r23
   41840:	15efc83a 	sub	r23,r2,r23
   41844:	a5c00215 	stw	r23,8(r20)
   41848:	b83f8426 	beq	r23,zero,4165c <__alt_data_end+0xfffcf65c>
   4184c:	903fe11e 	bne	r18,zero,417d4 <__alt_data_end+0xfffcf7d4>
   41850:	8f000017 	ldw	fp,0(r17)
   41854:	8c800117 	ldw	r18,4(r17)
   41858:	0011883a 	mov	r8,zero
   4185c:	8c400204 	addi	r17,r17,8
   41860:	003fdb06 	br	417d0 <__alt_data_end+0xfffcf7d0>
   41864:	180d883a 	mov	r6,r3
   41868:	e00b883a 	mov	r5,fp
   4186c:	da000115 	stw	r8,4(sp)
   41870:	d8c00015 	stw	r3,0(sp)
   41874:	00426300 	call	42630 <memmove>
   41878:	d8c00017 	ldw	r3,0(sp)
   4187c:	80800017 	ldw	r2,0(r16)
   41880:	800b883a 	mov	r5,r16
   41884:	a809883a 	mov	r4,r21
   41888:	10c5883a 	add	r2,r2,r3
   4188c:	80800015 	stw	r2,0(r16)
   41890:	d8c00015 	stw	r3,0(sp)
   41894:	00434d00 	call	434d0 <_fflush_r>
   41898:	d8c00017 	ldw	r3,0(sp)
   4189c:	da000117 	ldw	r8,4(sp)
   418a0:	103fc21e 	bne	r2,zero,417ac <__alt_data_end+0xfffcf7ac>
   418a4:	182f883a 	mov	r23,r3
   418a8:	9de7c83a 	sub	r19,r19,r23
   418ac:	983fe11e 	bne	r19,zero,41834 <__alt_data_end+0xfffcf834>
   418b0:	800b883a 	mov	r5,r16
   418b4:	a809883a 	mov	r4,r21
   418b8:	00434d00 	call	434d0 <_fflush_r>
   418bc:	103fbb1e 	bne	r2,zero,417ac <__alt_data_end+0xfffcf7ac>
   418c0:	0011883a 	mov	r8,zero
   418c4:	003fdb06 	br	41834 <__alt_data_end+0xfffcf834>
   418c8:	94c0012e 	bgeu	r18,r19,418d0 <__sfvwrite_r+0x328>
   418cc:	9027883a 	mov	r19,r18
   418d0:	980d883a 	mov	r6,r19
   418d4:	e00b883a 	mov	r5,fp
   418d8:	00426300 	call	42630 <memmove>
   418dc:	80800217 	ldw	r2,8(r16)
   418e0:	80c00017 	ldw	r3,0(r16)
   418e4:	14c5c83a 	sub	r2,r2,r19
   418e8:	1cc7883a 	add	r3,r3,r19
   418ec:	80800215 	stw	r2,8(r16)
   418f0:	80c00015 	stw	r3,0(r16)
   418f4:	10004326 	beq	r2,zero,41a04 <__sfvwrite_r+0x45c>
   418f8:	9805883a 	mov	r2,r19
   418fc:	003f8306 	br	4170c <__alt_data_end+0xfffcf70c>
   41900:	b00d883a 	mov	r6,r22
   41904:	e00b883a 	mov	r5,fp
   41908:	da000115 	stw	r8,4(sp)
   4190c:	00426300 	call	42630 <memmove>
   41910:	80800217 	ldw	r2,8(r16)
   41914:	80c00017 	ldw	r3,0(r16)
   41918:	da000117 	ldw	r8,4(sp)
   4191c:	1585c83a 	sub	r2,r2,r22
   41920:	1dad883a 	add	r22,r3,r22
   41924:	80800215 	stw	r2,8(r16)
   41928:	85800015 	stw	r22,0(r16)
   4192c:	003fbf06 	br	4182c <__alt_data_end+0xfffcf82c>
   41930:	81000017 	ldw	r4,0(r16)
   41934:	9027883a 	mov	r19,r18
   41938:	902f883a 	mov	r23,r18
   4193c:	003f6906 	br	416e4 <__alt_data_end+0xfffcf6e4>
   41940:	900d883a 	mov	r6,r18
   41944:	01400284 	movi	r5,10
   41948:	e009883a 	mov	r4,fp
   4194c:	00424040 	call	42404 <memchr>
   41950:	10003e26 	beq	r2,zero,41a4c <__sfvwrite_r+0x4a4>
   41954:	10800044 	addi	r2,r2,1
   41958:	1727c83a 	sub	r19,r2,fp
   4195c:	02000044 	movi	r8,1
   41960:	003f9d06 	br	417d8 <__alt_data_end+0xfffcf7d8>
   41964:	80800517 	ldw	r2,20(r16)
   41968:	81400417 	ldw	r5,16(r16)
   4196c:	81c00017 	ldw	r7,0(r16)
   41970:	10a7883a 	add	r19,r2,r2
   41974:	9885883a 	add	r2,r19,r2
   41978:	1026d7fa 	srli	r19,r2,31
   4197c:	396dc83a 	sub	r22,r7,r5
   41980:	b1000044 	addi	r4,r22,1
   41984:	9885883a 	add	r2,r19,r2
   41988:	1027d07a 	srai	r19,r2,1
   4198c:	2485883a 	add	r2,r4,r18
   41990:	980d883a 	mov	r6,r19
   41994:	9880022e 	bgeu	r19,r2,419a0 <__sfvwrite_r+0x3f8>
   41998:	1027883a 	mov	r19,r2
   4199c:	100d883a 	mov	r6,r2
   419a0:	18c1000c 	andi	r3,r3,1024
   419a4:	18001c26 	beq	r3,zero,41a18 <__sfvwrite_r+0x470>
   419a8:	300b883a 	mov	r5,r6
   419ac:	a809883a 	mov	r4,r21
   419b0:	0041bf80 	call	41bf8 <_malloc_r>
   419b4:	102f883a 	mov	r23,r2
   419b8:	10002926 	beq	r2,zero,41a60 <__sfvwrite_r+0x4b8>
   419bc:	81400417 	ldw	r5,16(r16)
   419c0:	b00d883a 	mov	r6,r22
   419c4:	1009883a 	mov	r4,r2
   419c8:	00424e80 	call	424e8 <memcpy>
   419cc:	8080030b 	ldhu	r2,12(r16)
   419d0:	00fedfc4 	movi	r3,-1153
   419d4:	10c4703a 	and	r2,r2,r3
   419d8:	10802014 	ori	r2,r2,128
   419dc:	8080030d 	sth	r2,12(r16)
   419e0:	bd89883a 	add	r4,r23,r22
   419e4:	9d8fc83a 	sub	r7,r19,r22
   419e8:	85c00415 	stw	r23,16(r16)
   419ec:	84c00515 	stw	r19,20(r16)
   419f0:	81000015 	stw	r4,0(r16)
   419f4:	9027883a 	mov	r19,r18
   419f8:	81c00215 	stw	r7,8(r16)
   419fc:	902f883a 	mov	r23,r18
   41a00:	003f3806 	br	416e4 <__alt_data_end+0xfffcf6e4>
   41a04:	800b883a 	mov	r5,r16
   41a08:	a809883a 	mov	r4,r21
   41a0c:	00434d00 	call	434d0 <_fflush_r>
   41a10:	103fb926 	beq	r2,zero,418f8 <__alt_data_end+0xfffcf8f8>
   41a14:	003f6506 	br	417ac <__alt_data_end+0xfffcf7ac>
   41a18:	a809883a 	mov	r4,r21
   41a1c:	00428b40 	call	428b4 <_realloc_r>
   41a20:	102f883a 	mov	r23,r2
   41a24:	103fee1e 	bne	r2,zero,419e0 <__alt_data_end+0xfffcf9e0>
   41a28:	81400417 	ldw	r5,16(r16)
   41a2c:	a809883a 	mov	r4,r21
   41a30:	00436800 	call	43680 <_free_r>
   41a34:	8080030b 	ldhu	r2,12(r16)
   41a38:	00ffdfc4 	movi	r3,-129
   41a3c:	1884703a 	and	r2,r3,r2
   41a40:	00c00304 	movi	r3,12
   41a44:	a8c00015 	stw	r3,0(r21)
   41a48:	003f5906 	br	417b0 <__alt_data_end+0xfffcf7b0>
   41a4c:	94c00044 	addi	r19,r18,1
   41a50:	02000044 	movi	r8,1
   41a54:	003f6006 	br	417d8 <__alt_data_end+0xfffcf7d8>
   41a58:	00bfffc4 	movi	r2,-1
   41a5c:	003f0006 	br	41660 <__alt_data_end+0xfffcf660>
   41a60:	00800304 	movi	r2,12
   41a64:	a8800015 	stw	r2,0(r21)
   41a68:	8080030b 	ldhu	r2,12(r16)
   41a6c:	003f5006 	br	417b0 <__alt_data_end+0xfffcf7b0>

00041a70 <_fwalk>:
   41a70:	defff704 	addi	sp,sp,-36
   41a74:	dd000415 	stw	r20,16(sp)
   41a78:	dfc00815 	stw	ra,32(sp)
   41a7c:	ddc00715 	stw	r23,28(sp)
   41a80:	dd800615 	stw	r22,24(sp)
   41a84:	dd400515 	stw	r21,20(sp)
   41a88:	dcc00315 	stw	r19,12(sp)
   41a8c:	dc800215 	stw	r18,8(sp)
   41a90:	dc400115 	stw	r17,4(sp)
   41a94:	dc000015 	stw	r16,0(sp)
   41a98:	2500b804 	addi	r20,r4,736
   41a9c:	a0002326 	beq	r20,zero,41b2c <_fwalk+0xbc>
   41aa0:	282b883a 	mov	r21,r5
   41aa4:	002f883a 	mov	r23,zero
   41aa8:	05800044 	movi	r22,1
   41aac:	04ffffc4 	movi	r19,-1
   41ab0:	a4400117 	ldw	r17,4(r20)
   41ab4:	a4800217 	ldw	r18,8(r20)
   41ab8:	8c7fffc4 	addi	r17,r17,-1
   41abc:	88000d16 	blt	r17,zero,41af4 <_fwalk+0x84>
   41ac0:	94000304 	addi	r16,r18,12
   41ac4:	94800384 	addi	r18,r18,14
   41ac8:	8080000b 	ldhu	r2,0(r16)
   41acc:	8c7fffc4 	addi	r17,r17,-1
   41ad0:	813ffd04 	addi	r4,r16,-12
   41ad4:	b080042e 	bgeu	r22,r2,41ae8 <_fwalk+0x78>
   41ad8:	9080000f 	ldh	r2,0(r18)
   41adc:	14c00226 	beq	r2,r19,41ae8 <_fwalk+0x78>
   41ae0:	a83ee83a 	callr	r21
   41ae4:	b8aeb03a 	or	r23,r23,r2
   41ae8:	84001a04 	addi	r16,r16,104
   41aec:	94801a04 	addi	r18,r18,104
   41af0:	8cfff51e 	bne	r17,r19,41ac8 <__alt_data_end+0xfffcfac8>
   41af4:	a5000017 	ldw	r20,0(r20)
   41af8:	a03fed1e 	bne	r20,zero,41ab0 <__alt_data_end+0xfffcfab0>
   41afc:	b805883a 	mov	r2,r23
   41b00:	dfc00817 	ldw	ra,32(sp)
   41b04:	ddc00717 	ldw	r23,28(sp)
   41b08:	dd800617 	ldw	r22,24(sp)
   41b0c:	dd400517 	ldw	r21,20(sp)
   41b10:	dd000417 	ldw	r20,16(sp)
   41b14:	dcc00317 	ldw	r19,12(sp)
   41b18:	dc800217 	ldw	r18,8(sp)
   41b1c:	dc400117 	ldw	r17,4(sp)
   41b20:	dc000017 	ldw	r16,0(sp)
   41b24:	dec00904 	addi	sp,sp,36
   41b28:	f800283a 	ret
   41b2c:	002f883a 	mov	r23,zero
   41b30:	003ff206 	br	41afc <__alt_data_end+0xfffcfafc>

00041b34 <_fwalk_reent>:
   41b34:	defff704 	addi	sp,sp,-36
   41b38:	dd000415 	stw	r20,16(sp)
   41b3c:	dfc00815 	stw	ra,32(sp)
   41b40:	ddc00715 	stw	r23,28(sp)
   41b44:	dd800615 	stw	r22,24(sp)
   41b48:	dd400515 	stw	r21,20(sp)
   41b4c:	dcc00315 	stw	r19,12(sp)
   41b50:	dc800215 	stw	r18,8(sp)
   41b54:	dc400115 	stw	r17,4(sp)
   41b58:	dc000015 	stw	r16,0(sp)
   41b5c:	2500b804 	addi	r20,r4,736
   41b60:	a0002326 	beq	r20,zero,41bf0 <_fwalk_reent+0xbc>
   41b64:	282b883a 	mov	r21,r5
   41b68:	2027883a 	mov	r19,r4
   41b6c:	002f883a 	mov	r23,zero
   41b70:	05800044 	movi	r22,1
   41b74:	04bfffc4 	movi	r18,-1
   41b78:	a4400117 	ldw	r17,4(r20)
   41b7c:	a4000217 	ldw	r16,8(r20)
   41b80:	8c7fffc4 	addi	r17,r17,-1
   41b84:	88000c16 	blt	r17,zero,41bb8 <_fwalk_reent+0x84>
   41b88:	84000304 	addi	r16,r16,12
   41b8c:	8080000b 	ldhu	r2,0(r16)
   41b90:	8c7fffc4 	addi	r17,r17,-1
   41b94:	817ffd04 	addi	r5,r16,-12
   41b98:	b080052e 	bgeu	r22,r2,41bb0 <_fwalk_reent+0x7c>
   41b9c:	8080008f 	ldh	r2,2(r16)
   41ba0:	9809883a 	mov	r4,r19
   41ba4:	14800226 	beq	r2,r18,41bb0 <_fwalk_reent+0x7c>
   41ba8:	a83ee83a 	callr	r21
   41bac:	b8aeb03a 	or	r23,r23,r2
   41bb0:	84001a04 	addi	r16,r16,104
   41bb4:	8cbff51e 	bne	r17,r18,41b8c <__alt_data_end+0xfffcfb8c>
   41bb8:	a5000017 	ldw	r20,0(r20)
   41bbc:	a03fee1e 	bne	r20,zero,41b78 <__alt_data_end+0xfffcfb78>
   41bc0:	b805883a 	mov	r2,r23
   41bc4:	dfc00817 	ldw	ra,32(sp)
   41bc8:	ddc00717 	ldw	r23,28(sp)
   41bcc:	dd800617 	ldw	r22,24(sp)
   41bd0:	dd400517 	ldw	r21,20(sp)
   41bd4:	dd000417 	ldw	r20,16(sp)
   41bd8:	dcc00317 	ldw	r19,12(sp)
   41bdc:	dc800217 	ldw	r18,8(sp)
   41be0:	dc400117 	ldw	r17,4(sp)
   41be4:	dc000017 	ldw	r16,0(sp)
   41be8:	dec00904 	addi	sp,sp,36
   41bec:	f800283a 	ret
   41bf0:	002f883a 	mov	r23,zero
   41bf4:	003ff206 	br	41bc0 <__alt_data_end+0xfffcfbc0>

00041bf8 <_malloc_r>:
   41bf8:	defff504 	addi	sp,sp,-44
   41bfc:	dc800315 	stw	r18,12(sp)
   41c00:	dfc00a15 	stw	ra,40(sp)
   41c04:	df000915 	stw	fp,36(sp)
   41c08:	ddc00815 	stw	r23,32(sp)
   41c0c:	dd800715 	stw	r22,28(sp)
   41c10:	dd400615 	stw	r21,24(sp)
   41c14:	dd000515 	stw	r20,20(sp)
   41c18:	dcc00415 	stw	r19,16(sp)
   41c1c:	dc400215 	stw	r17,8(sp)
   41c20:	dc000115 	stw	r16,4(sp)
   41c24:	288002c4 	addi	r2,r5,11
   41c28:	00c00584 	movi	r3,22
   41c2c:	2025883a 	mov	r18,r4
   41c30:	18807f2e 	bgeu	r3,r2,41e30 <_malloc_r+0x238>
   41c34:	047ffe04 	movi	r17,-8
   41c38:	1462703a 	and	r17,r2,r17
   41c3c:	8800a316 	blt	r17,zero,41ecc <_malloc_r+0x2d4>
   41c40:	8940a236 	bltu	r17,r5,41ecc <_malloc_r+0x2d4>
   41c44:	00444340 	call	44434 <__malloc_lock>
   41c48:	00807dc4 	movi	r2,503
   41c4c:	1441e92e 	bgeu	r2,r17,423f4 <_malloc_r+0x7fc>
   41c50:	8804d27a 	srli	r2,r17,9
   41c54:	1000a126 	beq	r2,zero,41edc <_malloc_r+0x2e4>
   41c58:	00c00104 	movi	r3,4
   41c5c:	18811e36 	bltu	r3,r2,420d8 <_malloc_r+0x4e0>
   41c60:	8804d1ba 	srli	r2,r17,6
   41c64:	12000e44 	addi	r8,r2,57
   41c68:	11c00e04 	addi	r7,r2,56
   41c6c:	4209883a 	add	r4,r8,r8
   41c70:	04c00134 	movhi	r19,4
   41c74:	2109883a 	add	r4,r4,r4
   41c78:	9cda6904 	addi	r19,r19,27044
   41c7c:	2109883a 	add	r4,r4,r4
   41c80:	9909883a 	add	r4,r19,r4
   41c84:	24000117 	ldw	r16,4(r4)
   41c88:	213ffe04 	addi	r4,r4,-8
   41c8c:	24009726 	beq	r4,r16,41eec <_malloc_r+0x2f4>
   41c90:	80800117 	ldw	r2,4(r16)
   41c94:	01bfff04 	movi	r6,-4
   41c98:	014003c4 	movi	r5,15
   41c9c:	1184703a 	and	r2,r2,r6
   41ca0:	1447c83a 	sub	r3,r2,r17
   41ca4:	28c00716 	blt	r5,r3,41cc4 <_malloc_r+0xcc>
   41ca8:	1800920e 	bge	r3,zero,41ef4 <_malloc_r+0x2fc>
   41cac:	84000317 	ldw	r16,12(r16)
   41cb0:	24008e26 	beq	r4,r16,41eec <_malloc_r+0x2f4>
   41cb4:	80800117 	ldw	r2,4(r16)
   41cb8:	1184703a 	and	r2,r2,r6
   41cbc:	1447c83a 	sub	r3,r2,r17
   41cc0:	28fff90e 	bge	r5,r3,41ca8 <__alt_data_end+0xfffcfca8>
   41cc4:	3809883a 	mov	r4,r7
   41cc8:	01800134 	movhi	r6,4
   41ccc:	9c000417 	ldw	r16,16(r19)
   41cd0:	319a6904 	addi	r6,r6,27044
   41cd4:	32000204 	addi	r8,r6,8
   41cd8:	82013426 	beq	r16,r8,421ac <_malloc_r+0x5b4>
   41cdc:	80c00117 	ldw	r3,4(r16)
   41ce0:	00bfff04 	movi	r2,-4
   41ce4:	188e703a 	and	r7,r3,r2
   41ce8:	3c45c83a 	sub	r2,r7,r17
   41cec:	00c003c4 	movi	r3,15
   41cf0:	18811f16 	blt	r3,r2,42170 <_malloc_r+0x578>
   41cf4:	32000515 	stw	r8,20(r6)
   41cf8:	32000415 	stw	r8,16(r6)
   41cfc:	10007f0e 	bge	r2,zero,41efc <_malloc_r+0x304>
   41d00:	00807fc4 	movi	r2,511
   41d04:	11c0fd36 	bltu	r2,r7,420fc <_malloc_r+0x504>
   41d08:	3806d0fa 	srli	r3,r7,3
   41d0c:	01c00044 	movi	r7,1
   41d10:	30800117 	ldw	r2,4(r6)
   41d14:	19400044 	addi	r5,r3,1
   41d18:	294b883a 	add	r5,r5,r5
   41d1c:	1807d0ba 	srai	r3,r3,2
   41d20:	294b883a 	add	r5,r5,r5
   41d24:	294b883a 	add	r5,r5,r5
   41d28:	298b883a 	add	r5,r5,r6
   41d2c:	38c6983a 	sll	r3,r7,r3
   41d30:	29c00017 	ldw	r7,0(r5)
   41d34:	2a7ffe04 	addi	r9,r5,-8
   41d38:	1886b03a 	or	r3,r3,r2
   41d3c:	82400315 	stw	r9,12(r16)
   41d40:	81c00215 	stw	r7,8(r16)
   41d44:	30c00115 	stw	r3,4(r6)
   41d48:	2c000015 	stw	r16,0(r5)
   41d4c:	3c000315 	stw	r16,12(r7)
   41d50:	2005d0ba 	srai	r2,r4,2
   41d54:	01400044 	movi	r5,1
   41d58:	288a983a 	sll	r5,r5,r2
   41d5c:	19406f36 	bltu	r3,r5,41f1c <_malloc_r+0x324>
   41d60:	28c4703a 	and	r2,r5,r3
   41d64:	10000a1e 	bne	r2,zero,41d90 <_malloc_r+0x198>
   41d68:	00bfff04 	movi	r2,-4
   41d6c:	294b883a 	add	r5,r5,r5
   41d70:	2088703a 	and	r4,r4,r2
   41d74:	28c4703a 	and	r2,r5,r3
   41d78:	21000104 	addi	r4,r4,4
   41d7c:	1000041e 	bne	r2,zero,41d90 <_malloc_r+0x198>
   41d80:	294b883a 	add	r5,r5,r5
   41d84:	28c4703a 	and	r2,r5,r3
   41d88:	21000104 	addi	r4,r4,4
   41d8c:	103ffc26 	beq	r2,zero,41d80 <__alt_data_end+0xfffcfd80>
   41d90:	02bfff04 	movi	r10,-4
   41d94:	024003c4 	movi	r9,15
   41d98:	21800044 	addi	r6,r4,1
   41d9c:	318d883a 	add	r6,r6,r6
   41da0:	318d883a 	add	r6,r6,r6
   41da4:	318d883a 	add	r6,r6,r6
   41da8:	998d883a 	add	r6,r19,r6
   41dac:	333ffe04 	addi	r12,r6,-8
   41db0:	2017883a 	mov	r11,r4
   41db4:	31800104 	addi	r6,r6,4
   41db8:	34000017 	ldw	r16,0(r6)
   41dbc:	31fffd04 	addi	r7,r6,-12
   41dc0:	81c0041e 	bne	r16,r7,41dd4 <_malloc_r+0x1dc>
   41dc4:	0000fb06 	br	421b4 <_malloc_r+0x5bc>
   41dc8:	1801030e 	bge	r3,zero,421d8 <_malloc_r+0x5e0>
   41dcc:	84000317 	ldw	r16,12(r16)
   41dd0:	81c0f826 	beq	r16,r7,421b4 <_malloc_r+0x5bc>
   41dd4:	80800117 	ldw	r2,4(r16)
   41dd8:	1284703a 	and	r2,r2,r10
   41ddc:	1447c83a 	sub	r3,r2,r17
   41de0:	48fff90e 	bge	r9,r3,41dc8 <__alt_data_end+0xfffcfdc8>
   41de4:	80800317 	ldw	r2,12(r16)
   41de8:	81000217 	ldw	r4,8(r16)
   41dec:	89400054 	ori	r5,r17,1
   41df0:	81400115 	stw	r5,4(r16)
   41df4:	20800315 	stw	r2,12(r4)
   41df8:	11000215 	stw	r4,8(r2)
   41dfc:	8463883a 	add	r17,r16,r17
   41e00:	9c400515 	stw	r17,20(r19)
   41e04:	9c400415 	stw	r17,16(r19)
   41e08:	18800054 	ori	r2,r3,1
   41e0c:	88800115 	stw	r2,4(r17)
   41e10:	8a000315 	stw	r8,12(r17)
   41e14:	8a000215 	stw	r8,8(r17)
   41e18:	88e3883a 	add	r17,r17,r3
   41e1c:	88c00015 	stw	r3,0(r17)
   41e20:	9009883a 	mov	r4,r18
   41e24:	00444580 	call	44458 <__malloc_unlock>
   41e28:	80800204 	addi	r2,r16,8
   41e2c:	00001b06 	br	41e9c <_malloc_r+0x2a4>
   41e30:	04400404 	movi	r17,16
   41e34:	89402536 	bltu	r17,r5,41ecc <_malloc_r+0x2d4>
   41e38:	00444340 	call	44434 <__malloc_lock>
   41e3c:	00800184 	movi	r2,6
   41e40:	01000084 	movi	r4,2
   41e44:	04c00134 	movhi	r19,4
   41e48:	1085883a 	add	r2,r2,r2
   41e4c:	9cda6904 	addi	r19,r19,27044
   41e50:	1085883a 	add	r2,r2,r2
   41e54:	9885883a 	add	r2,r19,r2
   41e58:	14000117 	ldw	r16,4(r2)
   41e5c:	10fffe04 	addi	r3,r2,-8
   41e60:	80c0d926 	beq	r16,r3,421c8 <_malloc_r+0x5d0>
   41e64:	80c00117 	ldw	r3,4(r16)
   41e68:	81000317 	ldw	r4,12(r16)
   41e6c:	00bfff04 	movi	r2,-4
   41e70:	1884703a 	and	r2,r3,r2
   41e74:	81400217 	ldw	r5,8(r16)
   41e78:	8085883a 	add	r2,r16,r2
   41e7c:	10c00117 	ldw	r3,4(r2)
   41e80:	29000315 	stw	r4,12(r5)
   41e84:	21400215 	stw	r5,8(r4)
   41e88:	18c00054 	ori	r3,r3,1
   41e8c:	10c00115 	stw	r3,4(r2)
   41e90:	9009883a 	mov	r4,r18
   41e94:	00444580 	call	44458 <__malloc_unlock>
   41e98:	80800204 	addi	r2,r16,8
   41e9c:	dfc00a17 	ldw	ra,40(sp)
   41ea0:	df000917 	ldw	fp,36(sp)
   41ea4:	ddc00817 	ldw	r23,32(sp)
   41ea8:	dd800717 	ldw	r22,28(sp)
   41eac:	dd400617 	ldw	r21,24(sp)
   41eb0:	dd000517 	ldw	r20,20(sp)
   41eb4:	dcc00417 	ldw	r19,16(sp)
   41eb8:	dc800317 	ldw	r18,12(sp)
   41ebc:	dc400217 	ldw	r17,8(sp)
   41ec0:	dc000117 	ldw	r16,4(sp)
   41ec4:	dec00b04 	addi	sp,sp,44
   41ec8:	f800283a 	ret
   41ecc:	00800304 	movi	r2,12
   41ed0:	90800015 	stw	r2,0(r18)
   41ed4:	0005883a 	mov	r2,zero
   41ed8:	003ff006 	br	41e9c <__alt_data_end+0xfffcfe9c>
   41edc:	01002004 	movi	r4,128
   41ee0:	02001004 	movi	r8,64
   41ee4:	01c00fc4 	movi	r7,63
   41ee8:	003f6106 	br	41c70 <__alt_data_end+0xfffcfc70>
   41eec:	4009883a 	mov	r4,r8
   41ef0:	003f7506 	br	41cc8 <__alt_data_end+0xfffcfcc8>
   41ef4:	81000317 	ldw	r4,12(r16)
   41ef8:	003fde06 	br	41e74 <__alt_data_end+0xfffcfe74>
   41efc:	81c5883a 	add	r2,r16,r7
   41f00:	11400117 	ldw	r5,4(r2)
   41f04:	9009883a 	mov	r4,r18
   41f08:	29400054 	ori	r5,r5,1
   41f0c:	11400115 	stw	r5,4(r2)
   41f10:	00444580 	call	44458 <__malloc_unlock>
   41f14:	80800204 	addi	r2,r16,8
   41f18:	003fe006 	br	41e9c <__alt_data_end+0xfffcfe9c>
   41f1c:	9c000217 	ldw	r16,8(r19)
   41f20:	00bfff04 	movi	r2,-4
   41f24:	85800117 	ldw	r22,4(r16)
   41f28:	b0ac703a 	and	r22,r22,r2
   41f2c:	b4400336 	bltu	r22,r17,41f3c <_malloc_r+0x344>
   41f30:	b445c83a 	sub	r2,r22,r17
   41f34:	00c003c4 	movi	r3,15
   41f38:	18805d16 	blt	r3,r2,420b0 <_malloc_r+0x4b8>
   41f3c:	05c00134 	movhi	r23,4
   41f40:	00800174 	movhi	r2,5
   41f44:	10a69804 	addi	r2,r2,-26016
   41f48:	bddfef04 	addi	r23,r23,32700
   41f4c:	15400017 	ldw	r21,0(r2)
   41f50:	b8c00017 	ldw	r3,0(r23)
   41f54:	00bfffc4 	movi	r2,-1
   41f58:	858d883a 	add	r6,r16,r22
   41f5c:	8d6b883a 	add	r21,r17,r21
   41f60:	1880ea26 	beq	r3,r2,4230c <_malloc_r+0x714>
   41f64:	ad4403c4 	addi	r21,r21,4111
   41f68:	00bc0004 	movi	r2,-4096
   41f6c:	a8aa703a 	and	r21,r21,r2
   41f70:	a80b883a 	mov	r5,r21
   41f74:	9009883a 	mov	r4,r18
   41f78:	d9800015 	stw	r6,0(sp)
   41f7c:	0042e180 	call	42e18 <_sbrk_r>
   41f80:	1029883a 	mov	r20,r2
   41f84:	00bfffc4 	movi	r2,-1
   41f88:	d9800017 	ldw	r6,0(sp)
   41f8c:	a080e826 	beq	r20,r2,42330 <_malloc_r+0x738>
   41f90:	a180a636 	bltu	r20,r6,4222c <_malloc_r+0x634>
   41f94:	07000174 	movhi	fp,5
   41f98:	e726a104 	addi	fp,fp,-25980
   41f9c:	e0800017 	ldw	r2,0(fp)
   41fa0:	a887883a 	add	r3,r21,r2
   41fa4:	e0c00015 	stw	r3,0(fp)
   41fa8:	3500e626 	beq	r6,r20,42344 <_malloc_r+0x74c>
   41fac:	b9000017 	ldw	r4,0(r23)
   41fb0:	00bfffc4 	movi	r2,-1
   41fb4:	2080ee26 	beq	r4,r2,42370 <_malloc_r+0x778>
   41fb8:	a185c83a 	sub	r2,r20,r6
   41fbc:	10c5883a 	add	r2,r2,r3
   41fc0:	e0800015 	stw	r2,0(fp)
   41fc4:	a0c001cc 	andi	r3,r20,7
   41fc8:	1800bc26 	beq	r3,zero,422bc <_malloc_r+0x6c4>
   41fcc:	a0e9c83a 	sub	r20,r20,r3
   41fd0:	00840204 	movi	r2,4104
   41fd4:	a5000204 	addi	r20,r20,8
   41fd8:	10c7c83a 	sub	r3,r2,r3
   41fdc:	a545883a 	add	r2,r20,r21
   41fe0:	1083ffcc 	andi	r2,r2,4095
   41fe4:	18abc83a 	sub	r21,r3,r2
   41fe8:	a80b883a 	mov	r5,r21
   41fec:	9009883a 	mov	r4,r18
   41ff0:	0042e180 	call	42e18 <_sbrk_r>
   41ff4:	00ffffc4 	movi	r3,-1
   41ff8:	10c0e126 	beq	r2,r3,42380 <_malloc_r+0x788>
   41ffc:	1505c83a 	sub	r2,r2,r20
   42000:	1545883a 	add	r2,r2,r21
   42004:	10800054 	ori	r2,r2,1
   42008:	e0c00017 	ldw	r3,0(fp)
   4200c:	9d000215 	stw	r20,8(r19)
   42010:	a0800115 	stw	r2,4(r20)
   42014:	a8c7883a 	add	r3,r21,r3
   42018:	e0c00015 	stw	r3,0(fp)
   4201c:	84c00e26 	beq	r16,r19,42058 <_malloc_r+0x460>
   42020:	018003c4 	movi	r6,15
   42024:	3580a72e 	bgeu	r6,r22,422c4 <_malloc_r+0x6cc>
   42028:	81400117 	ldw	r5,4(r16)
   4202c:	013ffe04 	movi	r4,-8
   42030:	b0bffd04 	addi	r2,r22,-12
   42034:	1104703a 	and	r2,r2,r4
   42038:	2900004c 	andi	r4,r5,1
   4203c:	2088b03a 	or	r4,r4,r2
   42040:	81000115 	stw	r4,4(r16)
   42044:	01400144 	movi	r5,5
   42048:	8089883a 	add	r4,r16,r2
   4204c:	21400115 	stw	r5,4(r4)
   42050:	21400215 	stw	r5,8(r4)
   42054:	3080cd36 	bltu	r6,r2,4238c <_malloc_r+0x794>
   42058:	00800174 	movhi	r2,5
   4205c:	10a69704 	addi	r2,r2,-26020
   42060:	11000017 	ldw	r4,0(r2)
   42064:	20c0012e 	bgeu	r4,r3,4206c <_malloc_r+0x474>
   42068:	10c00015 	stw	r3,0(r2)
   4206c:	00800174 	movhi	r2,5
   42070:	10a69604 	addi	r2,r2,-26024
   42074:	11000017 	ldw	r4,0(r2)
   42078:	9c000217 	ldw	r16,8(r19)
   4207c:	20c0012e 	bgeu	r4,r3,42084 <_malloc_r+0x48c>
   42080:	10c00015 	stw	r3,0(r2)
   42084:	80c00117 	ldw	r3,4(r16)
   42088:	00bfff04 	movi	r2,-4
   4208c:	1886703a 	and	r3,r3,r2
   42090:	1c45c83a 	sub	r2,r3,r17
   42094:	1c400236 	bltu	r3,r17,420a0 <_malloc_r+0x4a8>
   42098:	00c003c4 	movi	r3,15
   4209c:	18800416 	blt	r3,r2,420b0 <_malloc_r+0x4b8>
   420a0:	9009883a 	mov	r4,r18
   420a4:	00444580 	call	44458 <__malloc_unlock>
   420a8:	0005883a 	mov	r2,zero
   420ac:	003f7b06 	br	41e9c <__alt_data_end+0xfffcfe9c>
   420b0:	88c00054 	ori	r3,r17,1
   420b4:	80c00115 	stw	r3,4(r16)
   420b8:	8463883a 	add	r17,r16,r17
   420bc:	10800054 	ori	r2,r2,1
   420c0:	9c400215 	stw	r17,8(r19)
   420c4:	88800115 	stw	r2,4(r17)
   420c8:	9009883a 	mov	r4,r18
   420cc:	00444580 	call	44458 <__malloc_unlock>
   420d0:	80800204 	addi	r2,r16,8
   420d4:	003f7106 	br	41e9c <__alt_data_end+0xfffcfe9c>
   420d8:	00c00504 	movi	r3,20
   420dc:	18804a2e 	bgeu	r3,r2,42208 <_malloc_r+0x610>
   420e0:	00c01504 	movi	r3,84
   420e4:	18806e36 	bltu	r3,r2,422a0 <_malloc_r+0x6a8>
   420e8:	8804d33a 	srli	r2,r17,12
   420ec:	12001bc4 	addi	r8,r2,111
   420f0:	11c01b84 	addi	r7,r2,110
   420f4:	4209883a 	add	r4,r8,r8
   420f8:	003edd06 	br	41c70 <__alt_data_end+0xfffcfc70>
   420fc:	3804d27a 	srli	r2,r7,9
   42100:	00c00104 	movi	r3,4
   42104:	1880442e 	bgeu	r3,r2,42218 <_malloc_r+0x620>
   42108:	00c00504 	movi	r3,20
   4210c:	18808136 	bltu	r3,r2,42314 <_malloc_r+0x71c>
   42110:	11401704 	addi	r5,r2,92
   42114:	10c016c4 	addi	r3,r2,91
   42118:	294b883a 	add	r5,r5,r5
   4211c:	294b883a 	add	r5,r5,r5
   42120:	294b883a 	add	r5,r5,r5
   42124:	994b883a 	add	r5,r19,r5
   42128:	28800017 	ldw	r2,0(r5)
   4212c:	01800134 	movhi	r6,4
   42130:	297ffe04 	addi	r5,r5,-8
   42134:	319a6904 	addi	r6,r6,27044
   42138:	28806526 	beq	r5,r2,422d0 <_malloc_r+0x6d8>
   4213c:	01bfff04 	movi	r6,-4
   42140:	10c00117 	ldw	r3,4(r2)
   42144:	1986703a 	and	r3,r3,r6
   42148:	38c0022e 	bgeu	r7,r3,42154 <_malloc_r+0x55c>
   4214c:	10800217 	ldw	r2,8(r2)
   42150:	28bffb1e 	bne	r5,r2,42140 <__alt_data_end+0xfffd0140>
   42154:	11400317 	ldw	r5,12(r2)
   42158:	98c00117 	ldw	r3,4(r19)
   4215c:	81400315 	stw	r5,12(r16)
   42160:	80800215 	stw	r2,8(r16)
   42164:	2c000215 	stw	r16,8(r5)
   42168:	14000315 	stw	r16,12(r2)
   4216c:	003ef806 	br	41d50 <__alt_data_end+0xfffcfd50>
   42170:	88c00054 	ori	r3,r17,1
   42174:	80c00115 	stw	r3,4(r16)
   42178:	8463883a 	add	r17,r16,r17
   4217c:	34400515 	stw	r17,20(r6)
   42180:	34400415 	stw	r17,16(r6)
   42184:	10c00054 	ori	r3,r2,1
   42188:	8a000315 	stw	r8,12(r17)
   4218c:	8a000215 	stw	r8,8(r17)
   42190:	88c00115 	stw	r3,4(r17)
   42194:	88a3883a 	add	r17,r17,r2
   42198:	88800015 	stw	r2,0(r17)
   4219c:	9009883a 	mov	r4,r18
   421a0:	00444580 	call	44458 <__malloc_unlock>
   421a4:	80800204 	addi	r2,r16,8
   421a8:	003f3c06 	br	41e9c <__alt_data_end+0xfffcfe9c>
   421ac:	30c00117 	ldw	r3,4(r6)
   421b0:	003ee706 	br	41d50 <__alt_data_end+0xfffcfd50>
   421b4:	5ac00044 	addi	r11,r11,1
   421b8:	588000cc 	andi	r2,r11,3
   421bc:	31800204 	addi	r6,r6,8
   421c0:	103efd1e 	bne	r2,zero,41db8 <__alt_data_end+0xfffcfdb8>
   421c4:	00002406 	br	42258 <_malloc_r+0x660>
   421c8:	14000317 	ldw	r16,12(r2)
   421cc:	143f251e 	bne	r2,r16,41e64 <__alt_data_end+0xfffcfe64>
   421d0:	21000084 	addi	r4,r4,2
   421d4:	003ebc06 	br	41cc8 <__alt_data_end+0xfffcfcc8>
   421d8:	8085883a 	add	r2,r16,r2
   421dc:	10c00117 	ldw	r3,4(r2)
   421e0:	81000317 	ldw	r4,12(r16)
   421e4:	81400217 	ldw	r5,8(r16)
   421e8:	18c00054 	ori	r3,r3,1
   421ec:	10c00115 	stw	r3,4(r2)
   421f0:	29000315 	stw	r4,12(r5)
   421f4:	21400215 	stw	r5,8(r4)
   421f8:	9009883a 	mov	r4,r18
   421fc:	00444580 	call	44458 <__malloc_unlock>
   42200:	80800204 	addi	r2,r16,8
   42204:	003f2506 	br	41e9c <__alt_data_end+0xfffcfe9c>
   42208:	12001704 	addi	r8,r2,92
   4220c:	11c016c4 	addi	r7,r2,91
   42210:	4209883a 	add	r4,r8,r8
   42214:	003e9606 	br	41c70 <__alt_data_end+0xfffcfc70>
   42218:	3804d1ba 	srli	r2,r7,6
   4221c:	11400e44 	addi	r5,r2,57
   42220:	10c00e04 	addi	r3,r2,56
   42224:	294b883a 	add	r5,r5,r5
   42228:	003fbc06 	br	4211c <__alt_data_end+0xfffd011c>
   4222c:	84ff5926 	beq	r16,r19,41f94 <__alt_data_end+0xfffcff94>
   42230:	00800134 	movhi	r2,4
   42234:	109a6904 	addi	r2,r2,27044
   42238:	14000217 	ldw	r16,8(r2)
   4223c:	00bfff04 	movi	r2,-4
   42240:	80c00117 	ldw	r3,4(r16)
   42244:	1886703a 	and	r3,r3,r2
   42248:	003f9106 	br	42090 <__alt_data_end+0xfffd0090>
   4224c:	60800217 	ldw	r2,8(r12)
   42250:	213fffc4 	addi	r4,r4,-1
   42254:	1300651e 	bne	r2,r12,423ec <_malloc_r+0x7f4>
   42258:	208000cc 	andi	r2,r4,3
   4225c:	633ffe04 	addi	r12,r12,-8
   42260:	103ffa1e 	bne	r2,zero,4224c <__alt_data_end+0xfffd024c>
   42264:	98800117 	ldw	r2,4(r19)
   42268:	0146303a 	nor	r3,zero,r5
   4226c:	1884703a 	and	r2,r3,r2
   42270:	98800115 	stw	r2,4(r19)
   42274:	294b883a 	add	r5,r5,r5
   42278:	117f2836 	bltu	r2,r5,41f1c <__alt_data_end+0xfffcff1c>
   4227c:	283f2726 	beq	r5,zero,41f1c <__alt_data_end+0xfffcff1c>
   42280:	2886703a 	and	r3,r5,r2
   42284:	5809883a 	mov	r4,r11
   42288:	183ec31e 	bne	r3,zero,41d98 <__alt_data_end+0xfffcfd98>
   4228c:	294b883a 	add	r5,r5,r5
   42290:	2886703a 	and	r3,r5,r2
   42294:	21000104 	addi	r4,r4,4
   42298:	183ffc26 	beq	r3,zero,4228c <__alt_data_end+0xfffd028c>
   4229c:	003ebe06 	br	41d98 <__alt_data_end+0xfffcfd98>
   422a0:	00c05504 	movi	r3,340
   422a4:	18801236 	bltu	r3,r2,422f0 <_malloc_r+0x6f8>
   422a8:	8804d3fa 	srli	r2,r17,15
   422ac:	12001e04 	addi	r8,r2,120
   422b0:	11c01dc4 	addi	r7,r2,119
   422b4:	4209883a 	add	r4,r8,r8
   422b8:	003e6d06 	br	41c70 <__alt_data_end+0xfffcfc70>
   422bc:	00c40004 	movi	r3,4096
   422c0:	003f4606 	br	41fdc <__alt_data_end+0xfffcffdc>
   422c4:	00800044 	movi	r2,1
   422c8:	a0800115 	stw	r2,4(r20)
   422cc:	003f7406 	br	420a0 <__alt_data_end+0xfffd00a0>
   422d0:	1805d0ba 	srai	r2,r3,2
   422d4:	01c00044 	movi	r7,1
   422d8:	30c00117 	ldw	r3,4(r6)
   422dc:	388e983a 	sll	r7,r7,r2
   422e0:	2805883a 	mov	r2,r5
   422e4:	38c6b03a 	or	r3,r7,r3
   422e8:	30c00115 	stw	r3,4(r6)
   422ec:	003f9b06 	br	4215c <__alt_data_end+0xfffd015c>
   422f0:	00c15504 	movi	r3,1364
   422f4:	18801a36 	bltu	r3,r2,42360 <_malloc_r+0x768>
   422f8:	8804d4ba 	srli	r2,r17,18
   422fc:	12001f44 	addi	r8,r2,125
   42300:	11c01f04 	addi	r7,r2,124
   42304:	4209883a 	add	r4,r8,r8
   42308:	003e5906 	br	41c70 <__alt_data_end+0xfffcfc70>
   4230c:	ad400404 	addi	r21,r21,16
   42310:	003f1706 	br	41f70 <__alt_data_end+0xfffcff70>
   42314:	00c01504 	movi	r3,84
   42318:	18802336 	bltu	r3,r2,423a8 <_malloc_r+0x7b0>
   4231c:	3804d33a 	srli	r2,r7,12
   42320:	11401bc4 	addi	r5,r2,111
   42324:	10c01b84 	addi	r3,r2,110
   42328:	294b883a 	add	r5,r5,r5
   4232c:	003f7b06 	br	4211c <__alt_data_end+0xfffd011c>
   42330:	9c000217 	ldw	r16,8(r19)
   42334:	00bfff04 	movi	r2,-4
   42338:	80c00117 	ldw	r3,4(r16)
   4233c:	1886703a 	and	r3,r3,r2
   42340:	003f5306 	br	42090 <__alt_data_end+0xfffd0090>
   42344:	3083ffcc 	andi	r2,r6,4095
   42348:	103f181e 	bne	r2,zero,41fac <__alt_data_end+0xfffcffac>
   4234c:	99000217 	ldw	r4,8(r19)
   42350:	b545883a 	add	r2,r22,r21
   42354:	10800054 	ori	r2,r2,1
   42358:	20800115 	stw	r2,4(r4)
   4235c:	003f3e06 	br	42058 <__alt_data_end+0xfffd0058>
   42360:	01003f84 	movi	r4,254
   42364:	02001fc4 	movi	r8,127
   42368:	01c01f84 	movi	r7,126
   4236c:	003e4006 	br	41c70 <__alt_data_end+0xfffcfc70>
   42370:	00800134 	movhi	r2,4
   42374:	109fef04 	addi	r2,r2,32700
   42378:	15000015 	stw	r20,0(r2)
   4237c:	003f1106 	br	41fc4 <__alt_data_end+0xfffcffc4>
   42380:	00800044 	movi	r2,1
   42384:	002b883a 	mov	r21,zero
   42388:	003f1f06 	br	42008 <__alt_data_end+0xfffd0008>
   4238c:	81400204 	addi	r5,r16,8
   42390:	9009883a 	mov	r4,r18
   42394:	00436800 	call	43680 <_free_r>
   42398:	00800174 	movhi	r2,5
   4239c:	10a6a104 	addi	r2,r2,-25980
   423a0:	10c00017 	ldw	r3,0(r2)
   423a4:	003f2c06 	br	42058 <__alt_data_end+0xfffd0058>
   423a8:	00c05504 	movi	r3,340
   423ac:	18800536 	bltu	r3,r2,423c4 <_malloc_r+0x7cc>
   423b0:	3804d3fa 	srli	r2,r7,15
   423b4:	11401e04 	addi	r5,r2,120
   423b8:	10c01dc4 	addi	r3,r2,119
   423bc:	294b883a 	add	r5,r5,r5
   423c0:	003f5606 	br	4211c <__alt_data_end+0xfffd011c>
   423c4:	00c15504 	movi	r3,1364
   423c8:	18800536 	bltu	r3,r2,423e0 <_malloc_r+0x7e8>
   423cc:	3804d4ba 	srli	r2,r7,18
   423d0:	11401f44 	addi	r5,r2,125
   423d4:	10c01f04 	addi	r3,r2,124
   423d8:	294b883a 	add	r5,r5,r5
   423dc:	003f4f06 	br	4211c <__alt_data_end+0xfffd011c>
   423e0:	01403f84 	movi	r5,254
   423e4:	00c01f84 	movi	r3,126
   423e8:	003f4c06 	br	4211c <__alt_data_end+0xfffd011c>
   423ec:	98800117 	ldw	r2,4(r19)
   423f0:	003fa006 	br	42274 <__alt_data_end+0xfffd0274>
   423f4:	8808d0fa 	srli	r4,r17,3
   423f8:	20800044 	addi	r2,r4,1
   423fc:	1085883a 	add	r2,r2,r2
   42400:	003e9006 	br	41e44 <__alt_data_end+0xfffcfe44>

00042404 <memchr>:
   42404:	208000cc 	andi	r2,r4,3
   42408:	280f883a 	mov	r7,r5
   4240c:	10003426 	beq	r2,zero,424e0 <memchr+0xdc>
   42410:	30bfffc4 	addi	r2,r6,-1
   42414:	30001a26 	beq	r6,zero,42480 <memchr+0x7c>
   42418:	20c00003 	ldbu	r3,0(r4)
   4241c:	29803fcc 	andi	r6,r5,255
   42420:	30c0051e 	bne	r6,r3,42438 <memchr+0x34>
   42424:	00001806 	br	42488 <memchr+0x84>
   42428:	10001526 	beq	r2,zero,42480 <memchr+0x7c>
   4242c:	20c00003 	ldbu	r3,0(r4)
   42430:	10bfffc4 	addi	r2,r2,-1
   42434:	30c01426 	beq	r6,r3,42488 <memchr+0x84>
   42438:	21000044 	addi	r4,r4,1
   4243c:	20c000cc 	andi	r3,r4,3
   42440:	183ff91e 	bne	r3,zero,42428 <__alt_data_end+0xfffd0428>
   42444:	020000c4 	movi	r8,3
   42448:	40801136 	bltu	r8,r2,42490 <memchr+0x8c>
   4244c:	10000c26 	beq	r2,zero,42480 <memchr+0x7c>
   42450:	20c00003 	ldbu	r3,0(r4)
   42454:	29403fcc 	andi	r5,r5,255
   42458:	28c00b26 	beq	r5,r3,42488 <memchr+0x84>
   4245c:	20c00044 	addi	r3,r4,1
   42460:	39803fcc 	andi	r6,r7,255
   42464:	2089883a 	add	r4,r4,r2
   42468:	00000306 	br	42478 <memchr+0x74>
   4246c:	18c00044 	addi	r3,r3,1
   42470:	197fffc3 	ldbu	r5,-1(r3)
   42474:	31400526 	beq	r6,r5,4248c <memchr+0x88>
   42478:	1805883a 	mov	r2,r3
   4247c:	20fffb1e 	bne	r4,r3,4246c <__alt_data_end+0xfffd046c>
   42480:	0005883a 	mov	r2,zero
   42484:	f800283a 	ret
   42488:	2005883a 	mov	r2,r4
   4248c:	f800283a 	ret
   42490:	28c03fcc 	andi	r3,r5,255
   42494:	1812923a 	slli	r9,r3,8
   42498:	02ffbff4 	movhi	r11,65279
   4249c:	02a02074 	movhi	r10,32897
   424a0:	48d2b03a 	or	r9,r9,r3
   424a4:	4806943a 	slli	r3,r9,16
   424a8:	5affbfc4 	addi	r11,r11,-257
   424ac:	52a02004 	addi	r10,r10,-32640
   424b0:	48d2b03a 	or	r9,r9,r3
   424b4:	20c00017 	ldw	r3,0(r4)
   424b8:	48c6f03a 	xor	r3,r9,r3
   424bc:	1acd883a 	add	r6,r3,r11
   424c0:	00c6303a 	nor	r3,zero,r3
   424c4:	30c6703a 	and	r3,r6,r3
   424c8:	1a86703a 	and	r3,r3,r10
   424cc:	183fe01e 	bne	r3,zero,42450 <__alt_data_end+0xfffd0450>
   424d0:	10bfff04 	addi	r2,r2,-4
   424d4:	21000104 	addi	r4,r4,4
   424d8:	40bff636 	bltu	r8,r2,424b4 <__alt_data_end+0xfffd04b4>
   424dc:	003fdb06 	br	4244c <__alt_data_end+0xfffd044c>
   424e0:	3005883a 	mov	r2,r6
   424e4:	003fd706 	br	42444 <__alt_data_end+0xfffd0444>

000424e8 <memcpy>:
   424e8:	defffd04 	addi	sp,sp,-12
   424ec:	dfc00215 	stw	ra,8(sp)
   424f0:	dc400115 	stw	r17,4(sp)
   424f4:	dc000015 	stw	r16,0(sp)
   424f8:	00c003c4 	movi	r3,15
   424fc:	2005883a 	mov	r2,r4
   42500:	1980452e 	bgeu	r3,r6,42618 <memcpy+0x130>
   42504:	2906b03a 	or	r3,r5,r4
   42508:	18c000cc 	andi	r3,r3,3
   4250c:	1800441e 	bne	r3,zero,42620 <memcpy+0x138>
   42510:	347ffc04 	addi	r17,r6,-16
   42514:	8822d13a 	srli	r17,r17,4
   42518:	28c00104 	addi	r3,r5,4
   4251c:	23400104 	addi	r13,r4,4
   42520:	8820913a 	slli	r16,r17,4
   42524:	2b000204 	addi	r12,r5,8
   42528:	22c00204 	addi	r11,r4,8
   4252c:	84000504 	addi	r16,r16,20
   42530:	2a800304 	addi	r10,r5,12
   42534:	22400304 	addi	r9,r4,12
   42538:	2c21883a 	add	r16,r5,r16
   4253c:	2811883a 	mov	r8,r5
   42540:	200f883a 	mov	r7,r4
   42544:	41000017 	ldw	r4,0(r8)
   42548:	1fc00017 	ldw	ra,0(r3)
   4254c:	63c00017 	ldw	r15,0(r12)
   42550:	39000015 	stw	r4,0(r7)
   42554:	53800017 	ldw	r14,0(r10)
   42558:	6fc00015 	stw	ra,0(r13)
   4255c:	5bc00015 	stw	r15,0(r11)
   42560:	4b800015 	stw	r14,0(r9)
   42564:	18c00404 	addi	r3,r3,16
   42568:	39c00404 	addi	r7,r7,16
   4256c:	42000404 	addi	r8,r8,16
   42570:	6b400404 	addi	r13,r13,16
   42574:	63000404 	addi	r12,r12,16
   42578:	5ac00404 	addi	r11,r11,16
   4257c:	52800404 	addi	r10,r10,16
   42580:	4a400404 	addi	r9,r9,16
   42584:	1c3fef1e 	bne	r3,r16,42544 <__alt_data_end+0xfffd0544>
   42588:	89c00044 	addi	r7,r17,1
   4258c:	380e913a 	slli	r7,r7,4
   42590:	310003cc 	andi	r4,r6,15
   42594:	02c000c4 	movi	r11,3
   42598:	11c7883a 	add	r3,r2,r7
   4259c:	29cb883a 	add	r5,r5,r7
   425a0:	5900212e 	bgeu	r11,r4,42628 <memcpy+0x140>
   425a4:	1813883a 	mov	r9,r3
   425a8:	2811883a 	mov	r8,r5
   425ac:	200f883a 	mov	r7,r4
   425b0:	42800017 	ldw	r10,0(r8)
   425b4:	4a400104 	addi	r9,r9,4
   425b8:	39ffff04 	addi	r7,r7,-4
   425bc:	4abfff15 	stw	r10,-4(r9)
   425c0:	42000104 	addi	r8,r8,4
   425c4:	59fffa36 	bltu	r11,r7,425b0 <__alt_data_end+0xfffd05b0>
   425c8:	213fff04 	addi	r4,r4,-4
   425cc:	2008d0ba 	srli	r4,r4,2
   425d0:	318000cc 	andi	r6,r6,3
   425d4:	21000044 	addi	r4,r4,1
   425d8:	2109883a 	add	r4,r4,r4
   425dc:	2109883a 	add	r4,r4,r4
   425e0:	1907883a 	add	r3,r3,r4
   425e4:	290b883a 	add	r5,r5,r4
   425e8:	30000626 	beq	r6,zero,42604 <memcpy+0x11c>
   425ec:	198d883a 	add	r6,r3,r6
   425f0:	29c00003 	ldbu	r7,0(r5)
   425f4:	18c00044 	addi	r3,r3,1
   425f8:	29400044 	addi	r5,r5,1
   425fc:	19ffffc5 	stb	r7,-1(r3)
   42600:	19bffb1e 	bne	r3,r6,425f0 <__alt_data_end+0xfffd05f0>
   42604:	dfc00217 	ldw	ra,8(sp)
   42608:	dc400117 	ldw	r17,4(sp)
   4260c:	dc000017 	ldw	r16,0(sp)
   42610:	dec00304 	addi	sp,sp,12
   42614:	f800283a 	ret
   42618:	2007883a 	mov	r3,r4
   4261c:	003ff206 	br	425e8 <__alt_data_end+0xfffd05e8>
   42620:	2007883a 	mov	r3,r4
   42624:	003ff106 	br	425ec <__alt_data_end+0xfffd05ec>
   42628:	200d883a 	mov	r6,r4
   4262c:	003fee06 	br	425e8 <__alt_data_end+0xfffd05e8>

00042630 <memmove>:
   42630:	2005883a 	mov	r2,r4
   42634:	29000b2e 	bgeu	r5,r4,42664 <memmove+0x34>
   42638:	298f883a 	add	r7,r5,r6
   4263c:	21c0092e 	bgeu	r4,r7,42664 <memmove+0x34>
   42640:	2187883a 	add	r3,r4,r6
   42644:	198bc83a 	sub	r5,r3,r6
   42648:	30004826 	beq	r6,zero,4276c <memmove+0x13c>
   4264c:	39ffffc4 	addi	r7,r7,-1
   42650:	39000003 	ldbu	r4,0(r7)
   42654:	18ffffc4 	addi	r3,r3,-1
   42658:	19000005 	stb	r4,0(r3)
   4265c:	28fffb1e 	bne	r5,r3,4264c <__alt_data_end+0xfffd064c>
   42660:	f800283a 	ret
   42664:	00c003c4 	movi	r3,15
   42668:	1980412e 	bgeu	r3,r6,42770 <memmove+0x140>
   4266c:	2886b03a 	or	r3,r5,r2
   42670:	18c000cc 	andi	r3,r3,3
   42674:	1800401e 	bne	r3,zero,42778 <memmove+0x148>
   42678:	33fffc04 	addi	r15,r6,-16
   4267c:	781ed13a 	srli	r15,r15,4
   42680:	28c00104 	addi	r3,r5,4
   42684:	13400104 	addi	r13,r2,4
   42688:	781c913a 	slli	r14,r15,4
   4268c:	2b000204 	addi	r12,r5,8
   42690:	12c00204 	addi	r11,r2,8
   42694:	73800504 	addi	r14,r14,20
   42698:	2a800304 	addi	r10,r5,12
   4269c:	12400304 	addi	r9,r2,12
   426a0:	2b9d883a 	add	r14,r5,r14
   426a4:	2811883a 	mov	r8,r5
   426a8:	100f883a 	mov	r7,r2
   426ac:	41000017 	ldw	r4,0(r8)
   426b0:	39c00404 	addi	r7,r7,16
   426b4:	18c00404 	addi	r3,r3,16
   426b8:	393ffc15 	stw	r4,-16(r7)
   426bc:	193ffc17 	ldw	r4,-16(r3)
   426c0:	6b400404 	addi	r13,r13,16
   426c4:	5ac00404 	addi	r11,r11,16
   426c8:	693ffc15 	stw	r4,-16(r13)
   426cc:	61000017 	ldw	r4,0(r12)
   426d0:	4a400404 	addi	r9,r9,16
   426d4:	42000404 	addi	r8,r8,16
   426d8:	593ffc15 	stw	r4,-16(r11)
   426dc:	51000017 	ldw	r4,0(r10)
   426e0:	63000404 	addi	r12,r12,16
   426e4:	52800404 	addi	r10,r10,16
   426e8:	493ffc15 	stw	r4,-16(r9)
   426ec:	1bbfef1e 	bne	r3,r14,426ac <__alt_data_end+0xfffd06ac>
   426f0:	79000044 	addi	r4,r15,1
   426f4:	2008913a 	slli	r4,r4,4
   426f8:	328003cc 	andi	r10,r6,15
   426fc:	02c000c4 	movi	r11,3
   42700:	1107883a 	add	r3,r2,r4
   42704:	290b883a 	add	r5,r5,r4
   42708:	5a801e2e 	bgeu	r11,r10,42784 <memmove+0x154>
   4270c:	1813883a 	mov	r9,r3
   42710:	2811883a 	mov	r8,r5
   42714:	500f883a 	mov	r7,r10
   42718:	41000017 	ldw	r4,0(r8)
   4271c:	4a400104 	addi	r9,r9,4
   42720:	39ffff04 	addi	r7,r7,-4
   42724:	493fff15 	stw	r4,-4(r9)
   42728:	42000104 	addi	r8,r8,4
   4272c:	59fffa36 	bltu	r11,r7,42718 <__alt_data_end+0xfffd0718>
   42730:	513fff04 	addi	r4,r10,-4
   42734:	2008d0ba 	srli	r4,r4,2
   42738:	318000cc 	andi	r6,r6,3
   4273c:	21000044 	addi	r4,r4,1
   42740:	2109883a 	add	r4,r4,r4
   42744:	2109883a 	add	r4,r4,r4
   42748:	1907883a 	add	r3,r3,r4
   4274c:	290b883a 	add	r5,r5,r4
   42750:	30000b26 	beq	r6,zero,42780 <memmove+0x150>
   42754:	198d883a 	add	r6,r3,r6
   42758:	29c00003 	ldbu	r7,0(r5)
   4275c:	18c00044 	addi	r3,r3,1
   42760:	29400044 	addi	r5,r5,1
   42764:	19ffffc5 	stb	r7,-1(r3)
   42768:	19bffb1e 	bne	r3,r6,42758 <__alt_data_end+0xfffd0758>
   4276c:	f800283a 	ret
   42770:	1007883a 	mov	r3,r2
   42774:	003ff606 	br	42750 <__alt_data_end+0xfffd0750>
   42778:	1007883a 	mov	r3,r2
   4277c:	003ff506 	br	42754 <__alt_data_end+0xfffd0754>
   42780:	f800283a 	ret
   42784:	500d883a 	mov	r6,r10
   42788:	003ff106 	br	42750 <__alt_data_end+0xfffd0750>

0004278c <memset>:
   4278c:	20c000cc 	andi	r3,r4,3
   42790:	2005883a 	mov	r2,r4
   42794:	18004426 	beq	r3,zero,428a8 <memset+0x11c>
   42798:	31ffffc4 	addi	r7,r6,-1
   4279c:	30004026 	beq	r6,zero,428a0 <memset+0x114>
   427a0:	2813883a 	mov	r9,r5
   427a4:	200d883a 	mov	r6,r4
   427a8:	2007883a 	mov	r3,r4
   427ac:	00000406 	br	427c0 <memset+0x34>
   427b0:	3a3fffc4 	addi	r8,r7,-1
   427b4:	31800044 	addi	r6,r6,1
   427b8:	38003926 	beq	r7,zero,428a0 <memset+0x114>
   427bc:	400f883a 	mov	r7,r8
   427c0:	18c00044 	addi	r3,r3,1
   427c4:	32400005 	stb	r9,0(r6)
   427c8:	1a0000cc 	andi	r8,r3,3
   427cc:	403ff81e 	bne	r8,zero,427b0 <__alt_data_end+0xfffd07b0>
   427d0:	010000c4 	movi	r4,3
   427d4:	21c02d2e 	bgeu	r4,r7,4288c <memset+0x100>
   427d8:	29003fcc 	andi	r4,r5,255
   427dc:	200c923a 	slli	r6,r4,8
   427e0:	3108b03a 	or	r4,r6,r4
   427e4:	200c943a 	slli	r6,r4,16
   427e8:	218cb03a 	or	r6,r4,r6
   427ec:	010003c4 	movi	r4,15
   427f0:	21c0182e 	bgeu	r4,r7,42854 <memset+0xc8>
   427f4:	3b3ffc04 	addi	r12,r7,-16
   427f8:	6018d13a 	srli	r12,r12,4
   427fc:	1a000104 	addi	r8,r3,4
   42800:	1ac00204 	addi	r11,r3,8
   42804:	6008913a 	slli	r4,r12,4
   42808:	1a800304 	addi	r10,r3,12
   4280c:	1813883a 	mov	r9,r3
   42810:	21000504 	addi	r4,r4,20
   42814:	1909883a 	add	r4,r3,r4
   42818:	49800015 	stw	r6,0(r9)
   4281c:	41800015 	stw	r6,0(r8)
   42820:	59800015 	stw	r6,0(r11)
   42824:	51800015 	stw	r6,0(r10)
   42828:	42000404 	addi	r8,r8,16
   4282c:	4a400404 	addi	r9,r9,16
   42830:	5ac00404 	addi	r11,r11,16
   42834:	52800404 	addi	r10,r10,16
   42838:	413ff71e 	bne	r8,r4,42818 <__alt_data_end+0xfffd0818>
   4283c:	63000044 	addi	r12,r12,1
   42840:	6018913a 	slli	r12,r12,4
   42844:	39c003cc 	andi	r7,r7,15
   42848:	010000c4 	movi	r4,3
   4284c:	1b07883a 	add	r3,r3,r12
   42850:	21c00e2e 	bgeu	r4,r7,4288c <memset+0x100>
   42854:	1813883a 	mov	r9,r3
   42858:	3811883a 	mov	r8,r7
   4285c:	010000c4 	movi	r4,3
   42860:	49800015 	stw	r6,0(r9)
   42864:	423fff04 	addi	r8,r8,-4
   42868:	4a400104 	addi	r9,r9,4
   4286c:	223ffc36 	bltu	r4,r8,42860 <__alt_data_end+0xfffd0860>
   42870:	393fff04 	addi	r4,r7,-4
   42874:	2008d0ba 	srli	r4,r4,2
   42878:	39c000cc 	andi	r7,r7,3
   4287c:	21000044 	addi	r4,r4,1
   42880:	2109883a 	add	r4,r4,r4
   42884:	2109883a 	add	r4,r4,r4
   42888:	1907883a 	add	r3,r3,r4
   4288c:	38000526 	beq	r7,zero,428a4 <memset+0x118>
   42890:	19cf883a 	add	r7,r3,r7
   42894:	19400005 	stb	r5,0(r3)
   42898:	18c00044 	addi	r3,r3,1
   4289c:	38fffd1e 	bne	r7,r3,42894 <__alt_data_end+0xfffd0894>
   428a0:	f800283a 	ret
   428a4:	f800283a 	ret
   428a8:	2007883a 	mov	r3,r4
   428ac:	300f883a 	mov	r7,r6
   428b0:	003fc706 	br	427d0 <__alt_data_end+0xfffd07d0>

000428b4 <_realloc_r>:
   428b4:	defff604 	addi	sp,sp,-40
   428b8:	dc800215 	stw	r18,8(sp)
   428bc:	dfc00915 	stw	ra,36(sp)
   428c0:	df000815 	stw	fp,32(sp)
   428c4:	ddc00715 	stw	r23,28(sp)
   428c8:	dd800615 	stw	r22,24(sp)
   428cc:	dd400515 	stw	r21,20(sp)
   428d0:	dd000415 	stw	r20,16(sp)
   428d4:	dcc00315 	stw	r19,12(sp)
   428d8:	dc400115 	stw	r17,4(sp)
   428dc:	dc000015 	stw	r16,0(sp)
   428e0:	3025883a 	mov	r18,r6
   428e4:	2800b726 	beq	r5,zero,42bc4 <_realloc_r+0x310>
   428e8:	282b883a 	mov	r21,r5
   428ec:	2029883a 	mov	r20,r4
   428f0:	00444340 	call	44434 <__malloc_lock>
   428f4:	a8bfff17 	ldw	r2,-4(r21)
   428f8:	043fff04 	movi	r16,-4
   428fc:	90c002c4 	addi	r3,r18,11
   42900:	01000584 	movi	r4,22
   42904:	acfffe04 	addi	r19,r21,-8
   42908:	1420703a 	and	r16,r2,r16
   4290c:	20c0332e 	bgeu	r4,r3,429dc <_realloc_r+0x128>
   42910:	047ffe04 	movi	r17,-8
   42914:	1c62703a 	and	r17,r3,r17
   42918:	8807883a 	mov	r3,r17
   4291c:	88005816 	blt	r17,zero,42a80 <_realloc_r+0x1cc>
   42920:	8c805736 	bltu	r17,r18,42a80 <_realloc_r+0x1cc>
   42924:	80c0300e 	bge	r16,r3,429e8 <_realloc_r+0x134>
   42928:	07000134 	movhi	fp,4
   4292c:	e71a6904 	addi	fp,fp,27044
   42930:	e1c00217 	ldw	r7,8(fp)
   42934:	9c09883a 	add	r4,r19,r16
   42938:	22000117 	ldw	r8,4(r4)
   4293c:	21c06326 	beq	r4,r7,42acc <_realloc_r+0x218>
   42940:	017fff84 	movi	r5,-2
   42944:	414a703a 	and	r5,r8,r5
   42948:	214b883a 	add	r5,r4,r5
   4294c:	29800117 	ldw	r6,4(r5)
   42950:	3180004c 	andi	r6,r6,1
   42954:	30003f26 	beq	r6,zero,42a54 <_realloc_r+0x1a0>
   42958:	1080004c 	andi	r2,r2,1
   4295c:	10008326 	beq	r2,zero,42b6c <_realloc_r+0x2b8>
   42960:	900b883a 	mov	r5,r18
   42964:	a009883a 	mov	r4,r20
   42968:	0041bf80 	call	41bf8 <_malloc_r>
   4296c:	1025883a 	mov	r18,r2
   42970:	10011e26 	beq	r2,zero,42dec <_realloc_r+0x538>
   42974:	a93fff17 	ldw	r4,-4(r21)
   42978:	10fffe04 	addi	r3,r2,-8
   4297c:	00bfff84 	movi	r2,-2
   42980:	2084703a 	and	r2,r4,r2
   42984:	9885883a 	add	r2,r19,r2
   42988:	1880ee26 	beq	r3,r2,42d44 <_realloc_r+0x490>
   4298c:	81bfff04 	addi	r6,r16,-4
   42990:	00800904 	movi	r2,36
   42994:	1180b836 	bltu	r2,r6,42c78 <_realloc_r+0x3c4>
   42998:	00c004c4 	movi	r3,19
   4299c:	19809636 	bltu	r3,r6,42bf8 <_realloc_r+0x344>
   429a0:	9005883a 	mov	r2,r18
   429a4:	a807883a 	mov	r3,r21
   429a8:	19000017 	ldw	r4,0(r3)
   429ac:	11000015 	stw	r4,0(r2)
   429b0:	19000117 	ldw	r4,4(r3)
   429b4:	11000115 	stw	r4,4(r2)
   429b8:	18c00217 	ldw	r3,8(r3)
   429bc:	10c00215 	stw	r3,8(r2)
   429c0:	a80b883a 	mov	r5,r21
   429c4:	a009883a 	mov	r4,r20
   429c8:	00436800 	call	43680 <_free_r>
   429cc:	a009883a 	mov	r4,r20
   429d0:	00444580 	call	44458 <__malloc_unlock>
   429d4:	9005883a 	mov	r2,r18
   429d8:	00001206 	br	42a24 <_realloc_r+0x170>
   429dc:	00c00404 	movi	r3,16
   429e0:	1823883a 	mov	r17,r3
   429e4:	003fce06 	br	42920 <__alt_data_end+0xfffd0920>
   429e8:	a825883a 	mov	r18,r21
   429ec:	8445c83a 	sub	r2,r16,r17
   429f0:	00c003c4 	movi	r3,15
   429f4:	18802636 	bltu	r3,r2,42a90 <_realloc_r+0x1dc>
   429f8:	99800117 	ldw	r6,4(r19)
   429fc:	9c07883a 	add	r3,r19,r16
   42a00:	3180004c 	andi	r6,r6,1
   42a04:	3420b03a 	or	r16,r6,r16
   42a08:	9c000115 	stw	r16,4(r19)
   42a0c:	18800117 	ldw	r2,4(r3)
   42a10:	10800054 	ori	r2,r2,1
   42a14:	18800115 	stw	r2,4(r3)
   42a18:	a009883a 	mov	r4,r20
   42a1c:	00444580 	call	44458 <__malloc_unlock>
   42a20:	9005883a 	mov	r2,r18
   42a24:	dfc00917 	ldw	ra,36(sp)
   42a28:	df000817 	ldw	fp,32(sp)
   42a2c:	ddc00717 	ldw	r23,28(sp)
   42a30:	dd800617 	ldw	r22,24(sp)
   42a34:	dd400517 	ldw	r21,20(sp)
   42a38:	dd000417 	ldw	r20,16(sp)
   42a3c:	dcc00317 	ldw	r19,12(sp)
   42a40:	dc800217 	ldw	r18,8(sp)
   42a44:	dc400117 	ldw	r17,4(sp)
   42a48:	dc000017 	ldw	r16,0(sp)
   42a4c:	dec00a04 	addi	sp,sp,40
   42a50:	f800283a 	ret
   42a54:	017fff04 	movi	r5,-4
   42a58:	414a703a 	and	r5,r8,r5
   42a5c:	814d883a 	add	r6,r16,r5
   42a60:	30c01f16 	blt	r6,r3,42ae0 <_realloc_r+0x22c>
   42a64:	20800317 	ldw	r2,12(r4)
   42a68:	20c00217 	ldw	r3,8(r4)
   42a6c:	a825883a 	mov	r18,r21
   42a70:	3021883a 	mov	r16,r6
   42a74:	18800315 	stw	r2,12(r3)
   42a78:	10c00215 	stw	r3,8(r2)
   42a7c:	003fdb06 	br	429ec <__alt_data_end+0xfffd09ec>
   42a80:	00800304 	movi	r2,12
   42a84:	a0800015 	stw	r2,0(r20)
   42a88:	0005883a 	mov	r2,zero
   42a8c:	003fe506 	br	42a24 <__alt_data_end+0xfffd0a24>
   42a90:	98c00117 	ldw	r3,4(r19)
   42a94:	9c4b883a 	add	r5,r19,r17
   42a98:	11000054 	ori	r4,r2,1
   42a9c:	18c0004c 	andi	r3,r3,1
   42aa0:	1c62b03a 	or	r17,r3,r17
   42aa4:	9c400115 	stw	r17,4(r19)
   42aa8:	29000115 	stw	r4,4(r5)
   42aac:	2885883a 	add	r2,r5,r2
   42ab0:	10c00117 	ldw	r3,4(r2)
   42ab4:	29400204 	addi	r5,r5,8
   42ab8:	a009883a 	mov	r4,r20
   42abc:	18c00054 	ori	r3,r3,1
   42ac0:	10c00115 	stw	r3,4(r2)
   42ac4:	00436800 	call	43680 <_free_r>
   42ac8:	003fd306 	br	42a18 <__alt_data_end+0xfffd0a18>
   42acc:	017fff04 	movi	r5,-4
   42ad0:	414a703a 	and	r5,r8,r5
   42ad4:	89800404 	addi	r6,r17,16
   42ad8:	8151883a 	add	r8,r16,r5
   42adc:	4180590e 	bge	r8,r6,42c44 <_realloc_r+0x390>
   42ae0:	1080004c 	andi	r2,r2,1
   42ae4:	103f9e1e 	bne	r2,zero,42960 <__alt_data_end+0xfffd0960>
   42ae8:	adbffe17 	ldw	r22,-8(r21)
   42aec:	00bfff04 	movi	r2,-4
   42af0:	9dadc83a 	sub	r22,r19,r22
   42af4:	b1800117 	ldw	r6,4(r22)
   42af8:	3084703a 	and	r2,r6,r2
   42afc:	20002026 	beq	r4,zero,42b80 <_realloc_r+0x2cc>
   42b00:	80af883a 	add	r23,r16,r2
   42b04:	b96f883a 	add	r23,r23,r5
   42b08:	21c05f26 	beq	r4,r7,42c88 <_realloc_r+0x3d4>
   42b0c:	b8c01c16 	blt	r23,r3,42b80 <_realloc_r+0x2cc>
   42b10:	20800317 	ldw	r2,12(r4)
   42b14:	20c00217 	ldw	r3,8(r4)
   42b18:	81bfff04 	addi	r6,r16,-4
   42b1c:	01000904 	movi	r4,36
   42b20:	18800315 	stw	r2,12(r3)
   42b24:	10c00215 	stw	r3,8(r2)
   42b28:	b0c00217 	ldw	r3,8(r22)
   42b2c:	b0800317 	ldw	r2,12(r22)
   42b30:	b4800204 	addi	r18,r22,8
   42b34:	18800315 	stw	r2,12(r3)
   42b38:	10c00215 	stw	r3,8(r2)
   42b3c:	21801b36 	bltu	r4,r6,42bac <_realloc_r+0x2f8>
   42b40:	008004c4 	movi	r2,19
   42b44:	1180352e 	bgeu	r2,r6,42c1c <_realloc_r+0x368>
   42b48:	a8800017 	ldw	r2,0(r21)
   42b4c:	b0800215 	stw	r2,8(r22)
   42b50:	a8800117 	ldw	r2,4(r21)
   42b54:	b0800315 	stw	r2,12(r22)
   42b58:	008006c4 	movi	r2,27
   42b5c:	11807f36 	bltu	r2,r6,42d5c <_realloc_r+0x4a8>
   42b60:	b0800404 	addi	r2,r22,16
   42b64:	ad400204 	addi	r21,r21,8
   42b68:	00002d06 	br	42c20 <_realloc_r+0x36c>
   42b6c:	adbffe17 	ldw	r22,-8(r21)
   42b70:	00bfff04 	movi	r2,-4
   42b74:	9dadc83a 	sub	r22,r19,r22
   42b78:	b1000117 	ldw	r4,4(r22)
   42b7c:	2084703a 	and	r2,r4,r2
   42b80:	b03f7726 	beq	r22,zero,42960 <__alt_data_end+0xfffd0960>
   42b84:	80af883a 	add	r23,r16,r2
   42b88:	b8ff7516 	blt	r23,r3,42960 <__alt_data_end+0xfffd0960>
   42b8c:	b0800317 	ldw	r2,12(r22)
   42b90:	b0c00217 	ldw	r3,8(r22)
   42b94:	81bfff04 	addi	r6,r16,-4
   42b98:	01000904 	movi	r4,36
   42b9c:	18800315 	stw	r2,12(r3)
   42ba0:	10c00215 	stw	r3,8(r2)
   42ba4:	b4800204 	addi	r18,r22,8
   42ba8:	21bfe52e 	bgeu	r4,r6,42b40 <__alt_data_end+0xfffd0b40>
   42bac:	a80b883a 	mov	r5,r21
   42bb0:	9009883a 	mov	r4,r18
   42bb4:	00426300 	call	42630 <memmove>
   42bb8:	b821883a 	mov	r16,r23
   42bbc:	b027883a 	mov	r19,r22
   42bc0:	003f8a06 	br	429ec <__alt_data_end+0xfffd09ec>
   42bc4:	300b883a 	mov	r5,r6
   42bc8:	dfc00917 	ldw	ra,36(sp)
   42bcc:	df000817 	ldw	fp,32(sp)
   42bd0:	ddc00717 	ldw	r23,28(sp)
   42bd4:	dd800617 	ldw	r22,24(sp)
   42bd8:	dd400517 	ldw	r21,20(sp)
   42bdc:	dd000417 	ldw	r20,16(sp)
   42be0:	dcc00317 	ldw	r19,12(sp)
   42be4:	dc800217 	ldw	r18,8(sp)
   42be8:	dc400117 	ldw	r17,4(sp)
   42bec:	dc000017 	ldw	r16,0(sp)
   42bf0:	dec00a04 	addi	sp,sp,40
   42bf4:	0041bf81 	jmpi	41bf8 <_malloc_r>
   42bf8:	a8c00017 	ldw	r3,0(r21)
   42bfc:	90c00015 	stw	r3,0(r18)
   42c00:	a8c00117 	ldw	r3,4(r21)
   42c04:	90c00115 	stw	r3,4(r18)
   42c08:	00c006c4 	movi	r3,27
   42c0c:	19804536 	bltu	r3,r6,42d24 <_realloc_r+0x470>
   42c10:	90800204 	addi	r2,r18,8
   42c14:	a8c00204 	addi	r3,r21,8
   42c18:	003f6306 	br	429a8 <__alt_data_end+0xfffd09a8>
   42c1c:	9005883a 	mov	r2,r18
   42c20:	a8c00017 	ldw	r3,0(r21)
   42c24:	b821883a 	mov	r16,r23
   42c28:	b027883a 	mov	r19,r22
   42c2c:	10c00015 	stw	r3,0(r2)
   42c30:	a8c00117 	ldw	r3,4(r21)
   42c34:	10c00115 	stw	r3,4(r2)
   42c38:	a8c00217 	ldw	r3,8(r21)
   42c3c:	10c00215 	stw	r3,8(r2)
   42c40:	003f6a06 	br	429ec <__alt_data_end+0xfffd09ec>
   42c44:	9c67883a 	add	r19,r19,r17
   42c48:	4445c83a 	sub	r2,r8,r17
   42c4c:	e4c00215 	stw	r19,8(fp)
   42c50:	10800054 	ori	r2,r2,1
   42c54:	98800115 	stw	r2,4(r19)
   42c58:	a8bfff17 	ldw	r2,-4(r21)
   42c5c:	a009883a 	mov	r4,r20
   42c60:	1080004c 	andi	r2,r2,1
   42c64:	1462b03a 	or	r17,r2,r17
   42c68:	ac7fff15 	stw	r17,-4(r21)
   42c6c:	00444580 	call	44458 <__malloc_unlock>
   42c70:	a805883a 	mov	r2,r21
   42c74:	003f6b06 	br	42a24 <__alt_data_end+0xfffd0a24>
   42c78:	a80b883a 	mov	r5,r21
   42c7c:	9009883a 	mov	r4,r18
   42c80:	00426300 	call	42630 <memmove>
   42c84:	003f4e06 	br	429c0 <__alt_data_end+0xfffd09c0>
   42c88:	89000404 	addi	r4,r17,16
   42c8c:	b93fbc16 	blt	r23,r4,42b80 <__alt_data_end+0xfffd0b80>
   42c90:	b0800317 	ldw	r2,12(r22)
   42c94:	b0c00217 	ldw	r3,8(r22)
   42c98:	81bfff04 	addi	r6,r16,-4
   42c9c:	01000904 	movi	r4,36
   42ca0:	18800315 	stw	r2,12(r3)
   42ca4:	10c00215 	stw	r3,8(r2)
   42ca8:	b4800204 	addi	r18,r22,8
   42cac:	21804336 	bltu	r4,r6,42dbc <_realloc_r+0x508>
   42cb0:	008004c4 	movi	r2,19
   42cb4:	11803f2e 	bgeu	r2,r6,42db4 <_realloc_r+0x500>
   42cb8:	a8800017 	ldw	r2,0(r21)
   42cbc:	b0800215 	stw	r2,8(r22)
   42cc0:	a8800117 	ldw	r2,4(r21)
   42cc4:	b0800315 	stw	r2,12(r22)
   42cc8:	008006c4 	movi	r2,27
   42ccc:	11803f36 	bltu	r2,r6,42dcc <_realloc_r+0x518>
   42cd0:	b0800404 	addi	r2,r22,16
   42cd4:	ad400204 	addi	r21,r21,8
   42cd8:	a8c00017 	ldw	r3,0(r21)
   42cdc:	10c00015 	stw	r3,0(r2)
   42ce0:	a8c00117 	ldw	r3,4(r21)
   42ce4:	10c00115 	stw	r3,4(r2)
   42ce8:	a8c00217 	ldw	r3,8(r21)
   42cec:	10c00215 	stw	r3,8(r2)
   42cf0:	b447883a 	add	r3,r22,r17
   42cf4:	bc45c83a 	sub	r2,r23,r17
   42cf8:	e0c00215 	stw	r3,8(fp)
   42cfc:	10800054 	ori	r2,r2,1
   42d00:	18800115 	stw	r2,4(r3)
   42d04:	b0800117 	ldw	r2,4(r22)
   42d08:	a009883a 	mov	r4,r20
   42d0c:	1080004c 	andi	r2,r2,1
   42d10:	1462b03a 	or	r17,r2,r17
   42d14:	b4400115 	stw	r17,4(r22)
   42d18:	00444580 	call	44458 <__malloc_unlock>
   42d1c:	9005883a 	mov	r2,r18
   42d20:	003f4006 	br	42a24 <__alt_data_end+0xfffd0a24>
   42d24:	a8c00217 	ldw	r3,8(r21)
   42d28:	90c00215 	stw	r3,8(r18)
   42d2c:	a8c00317 	ldw	r3,12(r21)
   42d30:	90c00315 	stw	r3,12(r18)
   42d34:	30801126 	beq	r6,r2,42d7c <_realloc_r+0x4c8>
   42d38:	90800404 	addi	r2,r18,16
   42d3c:	a8c00404 	addi	r3,r21,16
   42d40:	003f1906 	br	429a8 <__alt_data_end+0xfffd09a8>
   42d44:	90ffff17 	ldw	r3,-4(r18)
   42d48:	00bfff04 	movi	r2,-4
   42d4c:	a825883a 	mov	r18,r21
   42d50:	1884703a 	and	r2,r3,r2
   42d54:	80a1883a 	add	r16,r16,r2
   42d58:	003f2406 	br	429ec <__alt_data_end+0xfffd09ec>
   42d5c:	a8800217 	ldw	r2,8(r21)
   42d60:	b0800415 	stw	r2,16(r22)
   42d64:	a8800317 	ldw	r2,12(r21)
   42d68:	b0800515 	stw	r2,20(r22)
   42d6c:	31000a26 	beq	r6,r4,42d98 <_realloc_r+0x4e4>
   42d70:	b0800604 	addi	r2,r22,24
   42d74:	ad400404 	addi	r21,r21,16
   42d78:	003fa906 	br	42c20 <__alt_data_end+0xfffd0c20>
   42d7c:	a9000417 	ldw	r4,16(r21)
   42d80:	90800604 	addi	r2,r18,24
   42d84:	a8c00604 	addi	r3,r21,24
   42d88:	91000415 	stw	r4,16(r18)
   42d8c:	a9000517 	ldw	r4,20(r21)
   42d90:	91000515 	stw	r4,20(r18)
   42d94:	003f0406 	br	429a8 <__alt_data_end+0xfffd09a8>
   42d98:	a8c00417 	ldw	r3,16(r21)
   42d9c:	ad400604 	addi	r21,r21,24
   42da0:	b0800804 	addi	r2,r22,32
   42da4:	b0c00615 	stw	r3,24(r22)
   42da8:	a8ffff17 	ldw	r3,-4(r21)
   42dac:	b0c00715 	stw	r3,28(r22)
   42db0:	003f9b06 	br	42c20 <__alt_data_end+0xfffd0c20>
   42db4:	9005883a 	mov	r2,r18
   42db8:	003fc706 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   42dbc:	a80b883a 	mov	r5,r21
   42dc0:	9009883a 	mov	r4,r18
   42dc4:	00426300 	call	42630 <memmove>
   42dc8:	003fc906 	br	42cf0 <__alt_data_end+0xfffd0cf0>
   42dcc:	a8800217 	ldw	r2,8(r21)
   42dd0:	b0800415 	stw	r2,16(r22)
   42dd4:	a8800317 	ldw	r2,12(r21)
   42dd8:	b0800515 	stw	r2,20(r22)
   42ddc:	31000726 	beq	r6,r4,42dfc <_realloc_r+0x548>
   42de0:	b0800604 	addi	r2,r22,24
   42de4:	ad400404 	addi	r21,r21,16
   42de8:	003fbb06 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   42dec:	a009883a 	mov	r4,r20
   42df0:	00444580 	call	44458 <__malloc_unlock>
   42df4:	0005883a 	mov	r2,zero
   42df8:	003f0a06 	br	42a24 <__alt_data_end+0xfffd0a24>
   42dfc:	a8c00417 	ldw	r3,16(r21)
   42e00:	ad400604 	addi	r21,r21,24
   42e04:	b0800804 	addi	r2,r22,32
   42e08:	b0c00615 	stw	r3,24(r22)
   42e0c:	a8ffff17 	ldw	r3,-4(r21)
   42e10:	b0c00715 	stw	r3,28(r22)
   42e14:	003fb006 	br	42cd8 <__alt_data_end+0xfffd0cd8>

00042e18 <_sbrk_r>:
   42e18:	defffd04 	addi	sp,sp,-12
   42e1c:	dc000015 	stw	r16,0(sp)
   42e20:	04000174 	movhi	r16,5
   42e24:	dc400115 	stw	r17,4(sp)
   42e28:	84269904 	addi	r16,r16,-26012
   42e2c:	2023883a 	mov	r17,r4
   42e30:	2809883a 	mov	r4,r5
   42e34:	dfc00215 	stw	ra,8(sp)
   42e38:	80000015 	stw	zero,0(r16)
   42e3c:	00446400 	call	44640 <sbrk>
   42e40:	00ffffc4 	movi	r3,-1
   42e44:	10c00526 	beq	r2,r3,42e5c <_sbrk_r+0x44>
   42e48:	dfc00217 	ldw	ra,8(sp)
   42e4c:	dc400117 	ldw	r17,4(sp)
   42e50:	dc000017 	ldw	r16,0(sp)
   42e54:	dec00304 	addi	sp,sp,12
   42e58:	f800283a 	ret
   42e5c:	80c00017 	ldw	r3,0(r16)
   42e60:	183ff926 	beq	r3,zero,42e48 <__alt_data_end+0xfffd0e48>
   42e64:	88c00015 	stw	r3,0(r17)
   42e68:	003ff706 	br	42e48 <__alt_data_end+0xfffd0e48>

00042e6c <__sread>:
   42e6c:	defffe04 	addi	sp,sp,-8
   42e70:	dc000015 	stw	r16,0(sp)
   42e74:	2821883a 	mov	r16,r5
   42e78:	2940038f 	ldh	r5,14(r5)
   42e7c:	dfc00115 	stw	ra,4(sp)
   42e80:	0043bac0 	call	43bac <_read_r>
   42e84:	10000716 	blt	r2,zero,42ea4 <__sread+0x38>
   42e88:	80c01417 	ldw	r3,80(r16)
   42e8c:	1887883a 	add	r3,r3,r2
   42e90:	80c01415 	stw	r3,80(r16)
   42e94:	dfc00117 	ldw	ra,4(sp)
   42e98:	dc000017 	ldw	r16,0(sp)
   42e9c:	dec00204 	addi	sp,sp,8
   42ea0:	f800283a 	ret
   42ea4:	80c0030b 	ldhu	r3,12(r16)
   42ea8:	18fbffcc 	andi	r3,r3,61439
   42eac:	80c0030d 	sth	r3,12(r16)
   42eb0:	dfc00117 	ldw	ra,4(sp)
   42eb4:	dc000017 	ldw	r16,0(sp)
   42eb8:	dec00204 	addi	sp,sp,8
   42ebc:	f800283a 	ret

00042ec0 <__seofread>:
   42ec0:	0005883a 	mov	r2,zero
   42ec4:	f800283a 	ret

00042ec8 <__swrite>:
   42ec8:	2880030b 	ldhu	r2,12(r5)
   42ecc:	defffb04 	addi	sp,sp,-20
   42ed0:	dcc00315 	stw	r19,12(sp)
   42ed4:	dc800215 	stw	r18,8(sp)
   42ed8:	dc400115 	stw	r17,4(sp)
   42edc:	dc000015 	stw	r16,0(sp)
   42ee0:	dfc00415 	stw	ra,16(sp)
   42ee4:	10c0400c 	andi	r3,r2,256
   42ee8:	2821883a 	mov	r16,r5
   42eec:	2023883a 	mov	r17,r4
   42ef0:	3025883a 	mov	r18,r6
   42ef4:	3827883a 	mov	r19,r7
   42ef8:	18000526 	beq	r3,zero,42f10 <__swrite+0x48>
   42efc:	2940038f 	ldh	r5,14(r5)
   42f00:	01c00084 	movi	r7,2
   42f04:	000d883a 	mov	r6,zero
   42f08:	00439900 	call	43990 <_lseek_r>
   42f0c:	8080030b 	ldhu	r2,12(r16)
   42f10:	8140038f 	ldh	r5,14(r16)
   42f14:	10bbffcc 	andi	r2,r2,61439
   42f18:	980f883a 	mov	r7,r19
   42f1c:	900d883a 	mov	r6,r18
   42f20:	8809883a 	mov	r4,r17
   42f24:	8080030d 	sth	r2,12(r16)
   42f28:	dfc00417 	ldw	ra,16(sp)
   42f2c:	dcc00317 	ldw	r19,12(sp)
   42f30:	dc800217 	ldw	r18,8(sp)
   42f34:	dc400117 	ldw	r17,4(sp)
   42f38:	dc000017 	ldw	r16,0(sp)
   42f3c:	dec00504 	addi	sp,sp,20
   42f40:	0042fa81 	jmpi	42fa8 <_write_r>

00042f44 <__sseek>:
   42f44:	defffe04 	addi	sp,sp,-8
   42f48:	dc000015 	stw	r16,0(sp)
   42f4c:	2821883a 	mov	r16,r5
   42f50:	2940038f 	ldh	r5,14(r5)
   42f54:	dfc00115 	stw	ra,4(sp)
   42f58:	00439900 	call	43990 <_lseek_r>
   42f5c:	00ffffc4 	movi	r3,-1
   42f60:	10c00826 	beq	r2,r3,42f84 <__sseek+0x40>
   42f64:	80c0030b 	ldhu	r3,12(r16)
   42f68:	80801415 	stw	r2,80(r16)
   42f6c:	18c40014 	ori	r3,r3,4096
   42f70:	80c0030d 	sth	r3,12(r16)
   42f74:	dfc00117 	ldw	ra,4(sp)
   42f78:	dc000017 	ldw	r16,0(sp)
   42f7c:	dec00204 	addi	sp,sp,8
   42f80:	f800283a 	ret
   42f84:	80c0030b 	ldhu	r3,12(r16)
   42f88:	18fbffcc 	andi	r3,r3,61439
   42f8c:	80c0030d 	sth	r3,12(r16)
   42f90:	dfc00117 	ldw	ra,4(sp)
   42f94:	dc000017 	ldw	r16,0(sp)
   42f98:	dec00204 	addi	sp,sp,8
   42f9c:	f800283a 	ret

00042fa0 <__sclose>:
   42fa0:	2940038f 	ldh	r5,14(r5)
   42fa4:	004315c1 	jmpi	4315c <_close_r>

00042fa8 <_write_r>:
   42fa8:	defffd04 	addi	sp,sp,-12
   42fac:	2805883a 	mov	r2,r5
   42fb0:	dc000015 	stw	r16,0(sp)
   42fb4:	04000174 	movhi	r16,5
   42fb8:	dc400115 	stw	r17,4(sp)
   42fbc:	300b883a 	mov	r5,r6
   42fc0:	84269904 	addi	r16,r16,-26012
   42fc4:	2023883a 	mov	r17,r4
   42fc8:	380d883a 	mov	r6,r7
   42fcc:	1009883a 	mov	r4,r2
   42fd0:	dfc00215 	stw	ra,8(sp)
   42fd4:	80000015 	stw	zero,0(r16)
   42fd8:	004472c0 	call	4472c <write>
   42fdc:	00ffffc4 	movi	r3,-1
   42fe0:	10c00526 	beq	r2,r3,42ff8 <_write_r+0x50>
   42fe4:	dfc00217 	ldw	ra,8(sp)
   42fe8:	dc400117 	ldw	r17,4(sp)
   42fec:	dc000017 	ldw	r16,0(sp)
   42ff0:	dec00304 	addi	sp,sp,12
   42ff4:	f800283a 	ret
   42ff8:	80c00017 	ldw	r3,0(r16)
   42ffc:	183ff926 	beq	r3,zero,42fe4 <__alt_data_end+0xfffd0fe4>
   43000:	88c00015 	stw	r3,0(r17)
   43004:	003ff706 	br	42fe4 <__alt_data_end+0xfffd0fe4>

00043008 <__swsetup_r>:
   43008:	00800134 	movhi	r2,4
   4300c:	defffd04 	addi	sp,sp,-12
   43010:	109fee04 	addi	r2,r2,32696
   43014:	dc400115 	stw	r17,4(sp)
   43018:	2023883a 	mov	r17,r4
   4301c:	11000017 	ldw	r4,0(r2)
   43020:	dc000015 	stw	r16,0(sp)
   43024:	dfc00215 	stw	ra,8(sp)
   43028:	2821883a 	mov	r16,r5
   4302c:	20000226 	beq	r4,zero,43038 <__swsetup_r+0x30>
   43030:	20800e17 	ldw	r2,56(r4)
   43034:	10003126 	beq	r2,zero,430fc <__swsetup_r+0xf4>
   43038:	8080030b 	ldhu	r2,12(r16)
   4303c:	10c0020c 	andi	r3,r2,8
   43040:	1009883a 	mov	r4,r2
   43044:	18000f26 	beq	r3,zero,43084 <__swsetup_r+0x7c>
   43048:	80c00417 	ldw	r3,16(r16)
   4304c:	18001526 	beq	r3,zero,430a4 <__swsetup_r+0x9c>
   43050:	1100004c 	andi	r4,r2,1
   43054:	20001c1e 	bne	r4,zero,430c8 <__swsetup_r+0xc0>
   43058:	1080008c 	andi	r2,r2,2
   4305c:	1000291e 	bne	r2,zero,43104 <__swsetup_r+0xfc>
   43060:	80800517 	ldw	r2,20(r16)
   43064:	80800215 	stw	r2,8(r16)
   43068:	18001c26 	beq	r3,zero,430dc <__swsetup_r+0xd4>
   4306c:	0005883a 	mov	r2,zero
   43070:	dfc00217 	ldw	ra,8(sp)
   43074:	dc400117 	ldw	r17,4(sp)
   43078:	dc000017 	ldw	r16,0(sp)
   4307c:	dec00304 	addi	sp,sp,12
   43080:	f800283a 	ret
   43084:	2080040c 	andi	r2,r4,16
   43088:	10002e26 	beq	r2,zero,43144 <__swsetup_r+0x13c>
   4308c:	2080010c 	andi	r2,r4,4
   43090:	10001e1e 	bne	r2,zero,4310c <__swsetup_r+0x104>
   43094:	80c00417 	ldw	r3,16(r16)
   43098:	20800214 	ori	r2,r4,8
   4309c:	8080030d 	sth	r2,12(r16)
   430a0:	183feb1e 	bne	r3,zero,43050 <__alt_data_end+0xfffd1050>
   430a4:	1100a00c 	andi	r4,r2,640
   430a8:	01408004 	movi	r5,512
   430ac:	217fe826 	beq	r4,r5,43050 <__alt_data_end+0xfffd1050>
   430b0:	800b883a 	mov	r5,r16
   430b4:	8809883a 	mov	r4,r17
   430b8:	00439f00 	call	439f0 <__smakebuf_r>
   430bc:	8080030b 	ldhu	r2,12(r16)
   430c0:	80c00417 	ldw	r3,16(r16)
   430c4:	003fe206 	br	43050 <__alt_data_end+0xfffd1050>
   430c8:	80800517 	ldw	r2,20(r16)
   430cc:	80000215 	stw	zero,8(r16)
   430d0:	0085c83a 	sub	r2,zero,r2
   430d4:	80800615 	stw	r2,24(r16)
   430d8:	183fe41e 	bne	r3,zero,4306c <__alt_data_end+0xfffd106c>
   430dc:	80c0030b 	ldhu	r3,12(r16)
   430e0:	0005883a 	mov	r2,zero
   430e4:	1900200c 	andi	r4,r3,128
   430e8:	203fe126 	beq	r4,zero,43070 <__alt_data_end+0xfffd1070>
   430ec:	18c01014 	ori	r3,r3,64
   430f0:	80c0030d 	sth	r3,12(r16)
   430f4:	00bfffc4 	movi	r2,-1
   430f8:	003fdd06 	br	43070 <__alt_data_end+0xfffd1070>
   430fc:	00415580 	call	41558 <__sinit>
   43100:	003fcd06 	br	43038 <__alt_data_end+0xfffd1038>
   43104:	0005883a 	mov	r2,zero
   43108:	003fd606 	br	43064 <__alt_data_end+0xfffd1064>
   4310c:	81400c17 	ldw	r5,48(r16)
   43110:	28000626 	beq	r5,zero,4312c <__swsetup_r+0x124>
   43114:	80801004 	addi	r2,r16,64
   43118:	28800326 	beq	r5,r2,43128 <__swsetup_r+0x120>
   4311c:	8809883a 	mov	r4,r17
   43120:	00436800 	call	43680 <_free_r>
   43124:	8100030b 	ldhu	r4,12(r16)
   43128:	80000c15 	stw	zero,48(r16)
   4312c:	80c00417 	ldw	r3,16(r16)
   43130:	00bff6c4 	movi	r2,-37
   43134:	1108703a 	and	r4,r2,r4
   43138:	80000115 	stw	zero,4(r16)
   4313c:	80c00015 	stw	r3,0(r16)
   43140:	003fd506 	br	43098 <__alt_data_end+0xfffd1098>
   43144:	00800244 	movi	r2,9
   43148:	88800015 	stw	r2,0(r17)
   4314c:	20801014 	ori	r2,r4,64
   43150:	8080030d 	sth	r2,12(r16)
   43154:	00bfffc4 	movi	r2,-1
   43158:	003fc506 	br	43070 <__alt_data_end+0xfffd1070>

0004315c <_close_r>:
   4315c:	defffd04 	addi	sp,sp,-12
   43160:	dc000015 	stw	r16,0(sp)
   43164:	04000174 	movhi	r16,5
   43168:	dc400115 	stw	r17,4(sp)
   4316c:	84269904 	addi	r16,r16,-26012
   43170:	2023883a 	mov	r17,r4
   43174:	2809883a 	mov	r4,r5
   43178:	dfc00215 	stw	ra,8(sp)
   4317c:	80000015 	stw	zero,0(r16)
   43180:	0043ed40 	call	43ed4 <close>
   43184:	00ffffc4 	movi	r3,-1
   43188:	10c00526 	beq	r2,r3,431a0 <_close_r+0x44>
   4318c:	dfc00217 	ldw	ra,8(sp)
   43190:	dc400117 	ldw	r17,4(sp)
   43194:	dc000017 	ldw	r16,0(sp)
   43198:	dec00304 	addi	sp,sp,12
   4319c:	f800283a 	ret
   431a0:	80c00017 	ldw	r3,0(r16)
   431a4:	183ff926 	beq	r3,zero,4318c <__alt_data_end+0xfffd118c>
   431a8:	88c00015 	stw	r3,0(r17)
   431ac:	003ff706 	br	4318c <__alt_data_end+0xfffd118c>

000431b0 <_fclose_r>:
   431b0:	28003926 	beq	r5,zero,43298 <_fclose_r+0xe8>
   431b4:	defffc04 	addi	sp,sp,-16
   431b8:	dc400115 	stw	r17,4(sp)
   431bc:	dc000015 	stw	r16,0(sp)
   431c0:	dfc00315 	stw	ra,12(sp)
   431c4:	dc800215 	stw	r18,8(sp)
   431c8:	2023883a 	mov	r17,r4
   431cc:	2821883a 	mov	r16,r5
   431d0:	20000226 	beq	r4,zero,431dc <_fclose_r+0x2c>
   431d4:	20800e17 	ldw	r2,56(r4)
   431d8:	10002726 	beq	r2,zero,43278 <_fclose_r+0xc8>
   431dc:	8080030f 	ldh	r2,12(r16)
   431e0:	1000071e 	bne	r2,zero,43200 <_fclose_r+0x50>
   431e4:	0005883a 	mov	r2,zero
   431e8:	dfc00317 	ldw	ra,12(sp)
   431ec:	dc800217 	ldw	r18,8(sp)
   431f0:	dc400117 	ldw	r17,4(sp)
   431f4:	dc000017 	ldw	r16,0(sp)
   431f8:	dec00404 	addi	sp,sp,16
   431fc:	f800283a 	ret
   43200:	800b883a 	mov	r5,r16
   43204:	8809883a 	mov	r4,r17
   43208:	00432b40 	call	432b4 <__sflush_r>
   4320c:	1025883a 	mov	r18,r2
   43210:	80800b17 	ldw	r2,44(r16)
   43214:	10000426 	beq	r2,zero,43228 <_fclose_r+0x78>
   43218:	81400717 	ldw	r5,28(r16)
   4321c:	8809883a 	mov	r4,r17
   43220:	103ee83a 	callr	r2
   43224:	10001616 	blt	r2,zero,43280 <_fclose_r+0xd0>
   43228:	8080030b 	ldhu	r2,12(r16)
   4322c:	1080200c 	andi	r2,r2,128
   43230:	1000151e 	bne	r2,zero,43288 <_fclose_r+0xd8>
   43234:	81400c17 	ldw	r5,48(r16)
   43238:	28000526 	beq	r5,zero,43250 <_fclose_r+0xa0>
   4323c:	80801004 	addi	r2,r16,64
   43240:	28800226 	beq	r5,r2,4324c <_fclose_r+0x9c>
   43244:	8809883a 	mov	r4,r17
   43248:	00436800 	call	43680 <_free_r>
   4324c:	80000c15 	stw	zero,48(r16)
   43250:	81401117 	ldw	r5,68(r16)
   43254:	28000326 	beq	r5,zero,43264 <_fclose_r+0xb4>
   43258:	8809883a 	mov	r4,r17
   4325c:	00436800 	call	43680 <_free_r>
   43260:	80001115 	stw	zero,68(r16)
   43264:	00415680 	call	41568 <__sfp_lock_acquire>
   43268:	8000030d 	sth	zero,12(r16)
   4326c:	004156c0 	call	4156c <__sfp_lock_release>
   43270:	9005883a 	mov	r2,r18
   43274:	003fdc06 	br	431e8 <__alt_data_end+0xfffd11e8>
   43278:	00415580 	call	41558 <__sinit>
   4327c:	003fd706 	br	431dc <__alt_data_end+0xfffd11dc>
   43280:	04bfffc4 	movi	r18,-1
   43284:	003fe806 	br	43228 <__alt_data_end+0xfffd1228>
   43288:	81400417 	ldw	r5,16(r16)
   4328c:	8809883a 	mov	r4,r17
   43290:	00436800 	call	43680 <_free_r>
   43294:	003fe706 	br	43234 <__alt_data_end+0xfffd1234>
   43298:	0005883a 	mov	r2,zero
   4329c:	f800283a 	ret

000432a0 <fclose>:
   432a0:	00800134 	movhi	r2,4
   432a4:	109fee04 	addi	r2,r2,32696
   432a8:	200b883a 	mov	r5,r4
   432ac:	11000017 	ldw	r4,0(r2)
   432b0:	00431b01 	jmpi	431b0 <_fclose_r>

000432b4 <__sflush_r>:
   432b4:	2880030b 	ldhu	r2,12(r5)
   432b8:	defffb04 	addi	sp,sp,-20
   432bc:	dcc00315 	stw	r19,12(sp)
   432c0:	dc400115 	stw	r17,4(sp)
   432c4:	dfc00415 	stw	ra,16(sp)
   432c8:	dc800215 	stw	r18,8(sp)
   432cc:	dc000015 	stw	r16,0(sp)
   432d0:	10c0020c 	andi	r3,r2,8
   432d4:	2823883a 	mov	r17,r5
   432d8:	2027883a 	mov	r19,r4
   432dc:	1800311e 	bne	r3,zero,433a4 <__sflush_r+0xf0>
   432e0:	28c00117 	ldw	r3,4(r5)
   432e4:	10820014 	ori	r2,r2,2048
   432e8:	2880030d 	sth	r2,12(r5)
   432ec:	00c04b0e 	bge	zero,r3,4341c <__sflush_r+0x168>
   432f0:	8a000a17 	ldw	r8,40(r17)
   432f4:	40002326 	beq	r8,zero,43384 <__sflush_r+0xd0>
   432f8:	9c000017 	ldw	r16,0(r19)
   432fc:	10c4000c 	andi	r3,r2,4096
   43300:	98000015 	stw	zero,0(r19)
   43304:	18004826 	beq	r3,zero,43428 <__sflush_r+0x174>
   43308:	89801417 	ldw	r6,80(r17)
   4330c:	10c0010c 	andi	r3,r2,4
   43310:	18000626 	beq	r3,zero,4332c <__sflush_r+0x78>
   43314:	88c00117 	ldw	r3,4(r17)
   43318:	88800c17 	ldw	r2,48(r17)
   4331c:	30cdc83a 	sub	r6,r6,r3
   43320:	10000226 	beq	r2,zero,4332c <__sflush_r+0x78>
   43324:	88800f17 	ldw	r2,60(r17)
   43328:	308dc83a 	sub	r6,r6,r2
   4332c:	89400717 	ldw	r5,28(r17)
   43330:	000f883a 	mov	r7,zero
   43334:	9809883a 	mov	r4,r19
   43338:	403ee83a 	callr	r8
   4333c:	00ffffc4 	movi	r3,-1
   43340:	10c04426 	beq	r2,r3,43454 <__sflush_r+0x1a0>
   43344:	88c0030b 	ldhu	r3,12(r17)
   43348:	89000417 	ldw	r4,16(r17)
   4334c:	88000115 	stw	zero,4(r17)
   43350:	197dffcc 	andi	r5,r3,63487
   43354:	8940030d 	sth	r5,12(r17)
   43358:	89000015 	stw	r4,0(r17)
   4335c:	18c4000c 	andi	r3,r3,4096
   43360:	18002c1e 	bne	r3,zero,43414 <__sflush_r+0x160>
   43364:	89400c17 	ldw	r5,48(r17)
   43368:	9c000015 	stw	r16,0(r19)
   4336c:	28000526 	beq	r5,zero,43384 <__sflush_r+0xd0>
   43370:	88801004 	addi	r2,r17,64
   43374:	28800226 	beq	r5,r2,43380 <__sflush_r+0xcc>
   43378:	9809883a 	mov	r4,r19
   4337c:	00436800 	call	43680 <_free_r>
   43380:	88000c15 	stw	zero,48(r17)
   43384:	0005883a 	mov	r2,zero
   43388:	dfc00417 	ldw	ra,16(sp)
   4338c:	dcc00317 	ldw	r19,12(sp)
   43390:	dc800217 	ldw	r18,8(sp)
   43394:	dc400117 	ldw	r17,4(sp)
   43398:	dc000017 	ldw	r16,0(sp)
   4339c:	dec00504 	addi	sp,sp,20
   433a0:	f800283a 	ret
   433a4:	2c800417 	ldw	r18,16(r5)
   433a8:	903ff626 	beq	r18,zero,43384 <__alt_data_end+0xfffd1384>
   433ac:	2c000017 	ldw	r16,0(r5)
   433b0:	108000cc 	andi	r2,r2,3
   433b4:	2c800015 	stw	r18,0(r5)
   433b8:	84a1c83a 	sub	r16,r16,r18
   433bc:	1000131e 	bne	r2,zero,4340c <__sflush_r+0x158>
   433c0:	28800517 	ldw	r2,20(r5)
   433c4:	88800215 	stw	r2,8(r17)
   433c8:	04000316 	blt	zero,r16,433d8 <__sflush_r+0x124>
   433cc:	003fed06 	br	43384 <__alt_data_end+0xfffd1384>
   433d0:	90a5883a 	add	r18,r18,r2
   433d4:	043feb0e 	bge	zero,r16,43384 <__alt_data_end+0xfffd1384>
   433d8:	88800917 	ldw	r2,36(r17)
   433dc:	89400717 	ldw	r5,28(r17)
   433e0:	800f883a 	mov	r7,r16
   433e4:	900d883a 	mov	r6,r18
   433e8:	9809883a 	mov	r4,r19
   433ec:	103ee83a 	callr	r2
   433f0:	80a1c83a 	sub	r16,r16,r2
   433f4:	00bff616 	blt	zero,r2,433d0 <__alt_data_end+0xfffd13d0>
   433f8:	88c0030b 	ldhu	r3,12(r17)
   433fc:	00bfffc4 	movi	r2,-1
   43400:	18c01014 	ori	r3,r3,64
   43404:	88c0030d 	sth	r3,12(r17)
   43408:	003fdf06 	br	43388 <__alt_data_end+0xfffd1388>
   4340c:	0005883a 	mov	r2,zero
   43410:	003fec06 	br	433c4 <__alt_data_end+0xfffd13c4>
   43414:	88801415 	stw	r2,80(r17)
   43418:	003fd206 	br	43364 <__alt_data_end+0xfffd1364>
   4341c:	28c00f17 	ldw	r3,60(r5)
   43420:	00ffb316 	blt	zero,r3,432f0 <__alt_data_end+0xfffd12f0>
   43424:	003fd706 	br	43384 <__alt_data_end+0xfffd1384>
   43428:	89400717 	ldw	r5,28(r17)
   4342c:	000d883a 	mov	r6,zero
   43430:	01c00044 	movi	r7,1
   43434:	9809883a 	mov	r4,r19
   43438:	403ee83a 	callr	r8
   4343c:	100d883a 	mov	r6,r2
   43440:	00bfffc4 	movi	r2,-1
   43444:	30801426 	beq	r6,r2,43498 <__sflush_r+0x1e4>
   43448:	8880030b 	ldhu	r2,12(r17)
   4344c:	8a000a17 	ldw	r8,40(r17)
   43450:	003fae06 	br	4330c <__alt_data_end+0xfffd130c>
   43454:	98c00017 	ldw	r3,0(r19)
   43458:	183fba26 	beq	r3,zero,43344 <__alt_data_end+0xfffd1344>
   4345c:	01000744 	movi	r4,29
   43460:	19000626 	beq	r3,r4,4347c <__sflush_r+0x1c8>
   43464:	01000584 	movi	r4,22
   43468:	19000426 	beq	r3,r4,4347c <__sflush_r+0x1c8>
   4346c:	88c0030b 	ldhu	r3,12(r17)
   43470:	18c01014 	ori	r3,r3,64
   43474:	88c0030d 	sth	r3,12(r17)
   43478:	003fc306 	br	43388 <__alt_data_end+0xfffd1388>
   4347c:	8880030b 	ldhu	r2,12(r17)
   43480:	88c00417 	ldw	r3,16(r17)
   43484:	88000115 	stw	zero,4(r17)
   43488:	10bdffcc 	andi	r2,r2,63487
   4348c:	8880030d 	sth	r2,12(r17)
   43490:	88c00015 	stw	r3,0(r17)
   43494:	003fb306 	br	43364 <__alt_data_end+0xfffd1364>
   43498:	98800017 	ldw	r2,0(r19)
   4349c:	103fea26 	beq	r2,zero,43448 <__alt_data_end+0xfffd1448>
   434a0:	00c00744 	movi	r3,29
   434a4:	10c00226 	beq	r2,r3,434b0 <__sflush_r+0x1fc>
   434a8:	00c00584 	movi	r3,22
   434ac:	10c0031e 	bne	r2,r3,434bc <__sflush_r+0x208>
   434b0:	9c000015 	stw	r16,0(r19)
   434b4:	0005883a 	mov	r2,zero
   434b8:	003fb306 	br	43388 <__alt_data_end+0xfffd1388>
   434bc:	88c0030b 	ldhu	r3,12(r17)
   434c0:	3005883a 	mov	r2,r6
   434c4:	18c01014 	ori	r3,r3,64
   434c8:	88c0030d 	sth	r3,12(r17)
   434cc:	003fae06 	br	43388 <__alt_data_end+0xfffd1388>

000434d0 <_fflush_r>:
   434d0:	defffd04 	addi	sp,sp,-12
   434d4:	dc000115 	stw	r16,4(sp)
   434d8:	dfc00215 	stw	ra,8(sp)
   434dc:	2021883a 	mov	r16,r4
   434e0:	20000226 	beq	r4,zero,434ec <_fflush_r+0x1c>
   434e4:	20800e17 	ldw	r2,56(r4)
   434e8:	10000c26 	beq	r2,zero,4351c <_fflush_r+0x4c>
   434ec:	2880030f 	ldh	r2,12(r5)
   434f0:	1000051e 	bne	r2,zero,43508 <_fflush_r+0x38>
   434f4:	0005883a 	mov	r2,zero
   434f8:	dfc00217 	ldw	ra,8(sp)
   434fc:	dc000117 	ldw	r16,4(sp)
   43500:	dec00304 	addi	sp,sp,12
   43504:	f800283a 	ret
   43508:	8009883a 	mov	r4,r16
   4350c:	dfc00217 	ldw	ra,8(sp)
   43510:	dc000117 	ldw	r16,4(sp)
   43514:	dec00304 	addi	sp,sp,12
   43518:	00432b41 	jmpi	432b4 <__sflush_r>
   4351c:	d9400015 	stw	r5,0(sp)
   43520:	00415580 	call	41558 <__sinit>
   43524:	d9400017 	ldw	r5,0(sp)
   43528:	003ff006 	br	434ec <__alt_data_end+0xfffd14ec>

0004352c <fflush>:
   4352c:	20000526 	beq	r4,zero,43544 <fflush+0x18>
   43530:	00800134 	movhi	r2,4
   43534:	109fee04 	addi	r2,r2,32696
   43538:	200b883a 	mov	r5,r4
   4353c:	11000017 	ldw	r4,0(r2)
   43540:	00434d01 	jmpi	434d0 <_fflush_r>
   43544:	00800134 	movhi	r2,4
   43548:	109fed04 	addi	r2,r2,32692
   4354c:	11000017 	ldw	r4,0(r2)
   43550:	01400134 	movhi	r5,4
   43554:	294d3404 	addi	r5,r5,13520
   43558:	0041b341 	jmpi	41b34 <_fwalk_reent>

0004355c <_malloc_trim_r>:
   4355c:	defffb04 	addi	sp,sp,-20
   43560:	dcc00315 	stw	r19,12(sp)
   43564:	04c00134 	movhi	r19,4
   43568:	dc800215 	stw	r18,8(sp)
   4356c:	dc400115 	stw	r17,4(sp)
   43570:	dc000015 	stw	r16,0(sp)
   43574:	dfc00415 	stw	ra,16(sp)
   43578:	2821883a 	mov	r16,r5
   4357c:	9cda6904 	addi	r19,r19,27044
   43580:	2025883a 	mov	r18,r4
   43584:	00444340 	call	44434 <__malloc_lock>
   43588:	98800217 	ldw	r2,8(r19)
   4358c:	14400117 	ldw	r17,4(r2)
   43590:	00bfff04 	movi	r2,-4
   43594:	88a2703a 	and	r17,r17,r2
   43598:	8c21c83a 	sub	r16,r17,r16
   4359c:	8403fbc4 	addi	r16,r16,4079
   435a0:	8020d33a 	srli	r16,r16,12
   435a4:	0083ffc4 	movi	r2,4095
   435a8:	843fffc4 	addi	r16,r16,-1
   435ac:	8020933a 	slli	r16,r16,12
   435b0:	1400060e 	bge	r2,r16,435cc <_malloc_trim_r+0x70>
   435b4:	000b883a 	mov	r5,zero
   435b8:	9009883a 	mov	r4,r18
   435bc:	0042e180 	call	42e18 <_sbrk_r>
   435c0:	98c00217 	ldw	r3,8(r19)
   435c4:	1c47883a 	add	r3,r3,r17
   435c8:	10c00a26 	beq	r2,r3,435f4 <_malloc_trim_r+0x98>
   435cc:	9009883a 	mov	r4,r18
   435d0:	00444580 	call	44458 <__malloc_unlock>
   435d4:	0005883a 	mov	r2,zero
   435d8:	dfc00417 	ldw	ra,16(sp)
   435dc:	dcc00317 	ldw	r19,12(sp)
   435e0:	dc800217 	ldw	r18,8(sp)
   435e4:	dc400117 	ldw	r17,4(sp)
   435e8:	dc000017 	ldw	r16,0(sp)
   435ec:	dec00504 	addi	sp,sp,20
   435f0:	f800283a 	ret
   435f4:	040bc83a 	sub	r5,zero,r16
   435f8:	9009883a 	mov	r4,r18
   435fc:	0042e180 	call	42e18 <_sbrk_r>
   43600:	00ffffc4 	movi	r3,-1
   43604:	10c00d26 	beq	r2,r3,4363c <_malloc_trim_r+0xe0>
   43608:	00c00174 	movhi	r3,5
   4360c:	18e6a104 	addi	r3,r3,-25980
   43610:	18800017 	ldw	r2,0(r3)
   43614:	99000217 	ldw	r4,8(r19)
   43618:	8c23c83a 	sub	r17,r17,r16
   4361c:	8c400054 	ori	r17,r17,1
   43620:	1421c83a 	sub	r16,r2,r16
   43624:	24400115 	stw	r17,4(r4)
   43628:	9009883a 	mov	r4,r18
   4362c:	1c000015 	stw	r16,0(r3)
   43630:	00444580 	call	44458 <__malloc_unlock>
   43634:	00800044 	movi	r2,1
   43638:	003fe706 	br	435d8 <__alt_data_end+0xfffd15d8>
   4363c:	000b883a 	mov	r5,zero
   43640:	9009883a 	mov	r4,r18
   43644:	0042e180 	call	42e18 <_sbrk_r>
   43648:	99000217 	ldw	r4,8(r19)
   4364c:	014003c4 	movi	r5,15
   43650:	1107c83a 	sub	r3,r2,r4
   43654:	28ffdd0e 	bge	r5,r3,435cc <__alt_data_end+0xfffd15cc>
   43658:	01400134 	movhi	r5,4
   4365c:	295fef04 	addi	r5,r5,32700
   43660:	29400017 	ldw	r5,0(r5)
   43664:	18c00054 	ori	r3,r3,1
   43668:	20c00115 	stw	r3,4(r4)
   4366c:	00c00174 	movhi	r3,5
   43670:	1145c83a 	sub	r2,r2,r5
   43674:	18e6a104 	addi	r3,r3,-25980
   43678:	18800015 	stw	r2,0(r3)
   4367c:	003fd306 	br	435cc <__alt_data_end+0xfffd15cc>

00043680 <_free_r>:
   43680:	28004126 	beq	r5,zero,43788 <_free_r+0x108>
   43684:	defffd04 	addi	sp,sp,-12
   43688:	dc400115 	stw	r17,4(sp)
   4368c:	dc000015 	stw	r16,0(sp)
   43690:	2023883a 	mov	r17,r4
   43694:	2821883a 	mov	r16,r5
   43698:	dfc00215 	stw	ra,8(sp)
   4369c:	00444340 	call	44434 <__malloc_lock>
   436a0:	81ffff17 	ldw	r7,-4(r16)
   436a4:	00bfff84 	movi	r2,-2
   436a8:	01000134 	movhi	r4,4
   436ac:	81bffe04 	addi	r6,r16,-8
   436b0:	3884703a 	and	r2,r7,r2
   436b4:	211a6904 	addi	r4,r4,27044
   436b8:	308b883a 	add	r5,r6,r2
   436bc:	2a400117 	ldw	r9,4(r5)
   436c0:	22000217 	ldw	r8,8(r4)
   436c4:	00ffff04 	movi	r3,-4
   436c8:	48c6703a 	and	r3,r9,r3
   436cc:	2a005726 	beq	r5,r8,4382c <_free_r+0x1ac>
   436d0:	28c00115 	stw	r3,4(r5)
   436d4:	39c0004c 	andi	r7,r7,1
   436d8:	3800091e 	bne	r7,zero,43700 <_free_r+0x80>
   436dc:	823ffe17 	ldw	r8,-8(r16)
   436e0:	22400204 	addi	r9,r4,8
   436e4:	320dc83a 	sub	r6,r6,r8
   436e8:	31c00217 	ldw	r7,8(r6)
   436ec:	1205883a 	add	r2,r2,r8
   436f0:	3a406526 	beq	r7,r9,43888 <_free_r+0x208>
   436f4:	32000317 	ldw	r8,12(r6)
   436f8:	3a000315 	stw	r8,12(r7)
   436fc:	41c00215 	stw	r7,8(r8)
   43700:	28cf883a 	add	r7,r5,r3
   43704:	39c00117 	ldw	r7,4(r7)
   43708:	39c0004c 	andi	r7,r7,1
   4370c:	38003a26 	beq	r7,zero,437f8 <_free_r+0x178>
   43710:	10c00054 	ori	r3,r2,1
   43714:	30c00115 	stw	r3,4(r6)
   43718:	3087883a 	add	r3,r6,r2
   4371c:	18800015 	stw	r2,0(r3)
   43720:	00c07fc4 	movi	r3,511
   43724:	18801936 	bltu	r3,r2,4378c <_free_r+0x10c>
   43728:	1004d0fa 	srli	r2,r2,3
   4372c:	01c00044 	movi	r7,1
   43730:	21400117 	ldw	r5,4(r4)
   43734:	10c00044 	addi	r3,r2,1
   43738:	18c7883a 	add	r3,r3,r3
   4373c:	1005d0ba 	srai	r2,r2,2
   43740:	18c7883a 	add	r3,r3,r3
   43744:	18c7883a 	add	r3,r3,r3
   43748:	1907883a 	add	r3,r3,r4
   4374c:	3884983a 	sll	r2,r7,r2
   43750:	19c00017 	ldw	r7,0(r3)
   43754:	1a3ffe04 	addi	r8,r3,-8
   43758:	1144b03a 	or	r2,r2,r5
   4375c:	32000315 	stw	r8,12(r6)
   43760:	31c00215 	stw	r7,8(r6)
   43764:	20800115 	stw	r2,4(r4)
   43768:	19800015 	stw	r6,0(r3)
   4376c:	39800315 	stw	r6,12(r7)
   43770:	8809883a 	mov	r4,r17
   43774:	dfc00217 	ldw	ra,8(sp)
   43778:	dc400117 	ldw	r17,4(sp)
   4377c:	dc000017 	ldw	r16,0(sp)
   43780:	dec00304 	addi	sp,sp,12
   43784:	00444581 	jmpi	44458 <__malloc_unlock>
   43788:	f800283a 	ret
   4378c:	100ad27a 	srli	r5,r2,9
   43790:	00c00104 	movi	r3,4
   43794:	19404a36 	bltu	r3,r5,438c0 <_free_r+0x240>
   43798:	100ad1ba 	srli	r5,r2,6
   4379c:	28c00e44 	addi	r3,r5,57
   437a0:	18c7883a 	add	r3,r3,r3
   437a4:	29400e04 	addi	r5,r5,56
   437a8:	18c7883a 	add	r3,r3,r3
   437ac:	18c7883a 	add	r3,r3,r3
   437b0:	1909883a 	add	r4,r3,r4
   437b4:	20c00017 	ldw	r3,0(r4)
   437b8:	01c00134 	movhi	r7,4
   437bc:	213ffe04 	addi	r4,r4,-8
   437c0:	39da6904 	addi	r7,r7,27044
   437c4:	20c04426 	beq	r4,r3,438d8 <_free_r+0x258>
   437c8:	01ffff04 	movi	r7,-4
   437cc:	19400117 	ldw	r5,4(r3)
   437d0:	29ca703a 	and	r5,r5,r7
   437d4:	1140022e 	bgeu	r2,r5,437e0 <_free_r+0x160>
   437d8:	18c00217 	ldw	r3,8(r3)
   437dc:	20fffb1e 	bne	r4,r3,437cc <__alt_data_end+0xfffd17cc>
   437e0:	19000317 	ldw	r4,12(r3)
   437e4:	31000315 	stw	r4,12(r6)
   437e8:	30c00215 	stw	r3,8(r6)
   437ec:	21800215 	stw	r6,8(r4)
   437f0:	19800315 	stw	r6,12(r3)
   437f4:	003fde06 	br	43770 <__alt_data_end+0xfffd1770>
   437f8:	29c00217 	ldw	r7,8(r5)
   437fc:	10c5883a 	add	r2,r2,r3
   43800:	00c00134 	movhi	r3,4
   43804:	18da6b04 	addi	r3,r3,27052
   43808:	38c03b26 	beq	r7,r3,438f8 <_free_r+0x278>
   4380c:	2a000317 	ldw	r8,12(r5)
   43810:	11400054 	ori	r5,r2,1
   43814:	3087883a 	add	r3,r6,r2
   43818:	3a000315 	stw	r8,12(r7)
   4381c:	41c00215 	stw	r7,8(r8)
   43820:	31400115 	stw	r5,4(r6)
   43824:	18800015 	stw	r2,0(r3)
   43828:	003fbd06 	br	43720 <__alt_data_end+0xfffd1720>
   4382c:	39c0004c 	andi	r7,r7,1
   43830:	10c5883a 	add	r2,r2,r3
   43834:	3800071e 	bne	r7,zero,43854 <_free_r+0x1d4>
   43838:	81fffe17 	ldw	r7,-8(r16)
   4383c:	31cdc83a 	sub	r6,r6,r7
   43840:	30c00317 	ldw	r3,12(r6)
   43844:	31400217 	ldw	r5,8(r6)
   43848:	11c5883a 	add	r2,r2,r7
   4384c:	28c00315 	stw	r3,12(r5)
   43850:	19400215 	stw	r5,8(r3)
   43854:	10c00054 	ori	r3,r2,1
   43858:	30c00115 	stw	r3,4(r6)
   4385c:	00c00134 	movhi	r3,4
   43860:	18dff004 	addi	r3,r3,32704
   43864:	18c00017 	ldw	r3,0(r3)
   43868:	21800215 	stw	r6,8(r4)
   4386c:	10ffc036 	bltu	r2,r3,43770 <__alt_data_end+0xfffd1770>
   43870:	00800174 	movhi	r2,5
   43874:	10a69804 	addi	r2,r2,-26016
   43878:	11400017 	ldw	r5,0(r2)
   4387c:	8809883a 	mov	r4,r17
   43880:	004355c0 	call	4355c <_malloc_trim_r>
   43884:	003fba06 	br	43770 <__alt_data_end+0xfffd1770>
   43888:	28c9883a 	add	r4,r5,r3
   4388c:	21000117 	ldw	r4,4(r4)
   43890:	2100004c 	andi	r4,r4,1
   43894:	2000391e 	bne	r4,zero,4397c <_free_r+0x2fc>
   43898:	29c00217 	ldw	r7,8(r5)
   4389c:	29000317 	ldw	r4,12(r5)
   438a0:	1885883a 	add	r2,r3,r2
   438a4:	10c00054 	ori	r3,r2,1
   438a8:	39000315 	stw	r4,12(r7)
   438ac:	21c00215 	stw	r7,8(r4)
   438b0:	30c00115 	stw	r3,4(r6)
   438b4:	308d883a 	add	r6,r6,r2
   438b8:	30800015 	stw	r2,0(r6)
   438bc:	003fac06 	br	43770 <__alt_data_end+0xfffd1770>
   438c0:	00c00504 	movi	r3,20
   438c4:	19401536 	bltu	r3,r5,4391c <_free_r+0x29c>
   438c8:	28c01704 	addi	r3,r5,92
   438cc:	18c7883a 	add	r3,r3,r3
   438d0:	294016c4 	addi	r5,r5,91
   438d4:	003fb406 	br	437a8 <__alt_data_end+0xfffd17a8>
   438d8:	280bd0ba 	srai	r5,r5,2
   438dc:	00c00044 	movi	r3,1
   438e0:	38800117 	ldw	r2,4(r7)
   438e4:	194a983a 	sll	r5,r3,r5
   438e8:	2007883a 	mov	r3,r4
   438ec:	2884b03a 	or	r2,r5,r2
   438f0:	38800115 	stw	r2,4(r7)
   438f4:	003fbb06 	br	437e4 <__alt_data_end+0xfffd17e4>
   438f8:	21800515 	stw	r6,20(r4)
   438fc:	21800415 	stw	r6,16(r4)
   43900:	10c00054 	ori	r3,r2,1
   43904:	31c00315 	stw	r7,12(r6)
   43908:	31c00215 	stw	r7,8(r6)
   4390c:	30c00115 	stw	r3,4(r6)
   43910:	308d883a 	add	r6,r6,r2
   43914:	30800015 	stw	r2,0(r6)
   43918:	003f9506 	br	43770 <__alt_data_end+0xfffd1770>
   4391c:	00c01504 	movi	r3,84
   43920:	19400536 	bltu	r3,r5,43938 <_free_r+0x2b8>
   43924:	100ad33a 	srli	r5,r2,12
   43928:	28c01bc4 	addi	r3,r5,111
   4392c:	18c7883a 	add	r3,r3,r3
   43930:	29401b84 	addi	r5,r5,110
   43934:	003f9c06 	br	437a8 <__alt_data_end+0xfffd17a8>
   43938:	00c05504 	movi	r3,340
   4393c:	19400536 	bltu	r3,r5,43954 <_free_r+0x2d4>
   43940:	100ad3fa 	srli	r5,r2,15
   43944:	28c01e04 	addi	r3,r5,120
   43948:	18c7883a 	add	r3,r3,r3
   4394c:	29401dc4 	addi	r5,r5,119
   43950:	003f9506 	br	437a8 <__alt_data_end+0xfffd17a8>
   43954:	00c15504 	movi	r3,1364
   43958:	19400536 	bltu	r3,r5,43970 <_free_r+0x2f0>
   4395c:	100ad4ba 	srli	r5,r2,18
   43960:	28c01f44 	addi	r3,r5,125
   43964:	18c7883a 	add	r3,r3,r3
   43968:	29401f04 	addi	r5,r5,124
   4396c:	003f8e06 	br	437a8 <__alt_data_end+0xfffd17a8>
   43970:	00c03f84 	movi	r3,254
   43974:	01401f84 	movi	r5,126
   43978:	003f8b06 	br	437a8 <__alt_data_end+0xfffd17a8>
   4397c:	10c00054 	ori	r3,r2,1
   43980:	30c00115 	stw	r3,4(r6)
   43984:	308d883a 	add	r6,r6,r2
   43988:	30800015 	stw	r2,0(r6)
   4398c:	003f7806 	br	43770 <__alt_data_end+0xfffd1770>

00043990 <_lseek_r>:
   43990:	defffd04 	addi	sp,sp,-12
   43994:	2805883a 	mov	r2,r5
   43998:	dc000015 	stw	r16,0(sp)
   4399c:	04000174 	movhi	r16,5
   439a0:	dc400115 	stw	r17,4(sp)
   439a4:	300b883a 	mov	r5,r6
   439a8:	84269904 	addi	r16,r16,-26012
   439ac:	2023883a 	mov	r17,r4
   439b0:	380d883a 	mov	r6,r7
   439b4:	1009883a 	mov	r4,r2
   439b8:	dfc00215 	stw	ra,8(sp)
   439bc:	80000015 	stw	zero,0(r16)
   439c0:	00442dc0 	call	442dc <lseek>
   439c4:	00ffffc4 	movi	r3,-1
   439c8:	10c00526 	beq	r2,r3,439e0 <_lseek_r+0x50>
   439cc:	dfc00217 	ldw	ra,8(sp)
   439d0:	dc400117 	ldw	r17,4(sp)
   439d4:	dc000017 	ldw	r16,0(sp)
   439d8:	dec00304 	addi	sp,sp,12
   439dc:	f800283a 	ret
   439e0:	80c00017 	ldw	r3,0(r16)
   439e4:	183ff926 	beq	r3,zero,439cc <__alt_data_end+0xfffd19cc>
   439e8:	88c00015 	stw	r3,0(r17)
   439ec:	003ff706 	br	439cc <__alt_data_end+0xfffd19cc>

000439f0 <__smakebuf_r>:
   439f0:	2880030b 	ldhu	r2,12(r5)
   439f4:	10c0008c 	andi	r3,r2,2
   439f8:	1800411e 	bne	r3,zero,43b00 <__smakebuf_r+0x110>
   439fc:	deffec04 	addi	sp,sp,-80
   43a00:	dc000f15 	stw	r16,60(sp)
   43a04:	2821883a 	mov	r16,r5
   43a08:	2940038f 	ldh	r5,14(r5)
   43a0c:	dc401015 	stw	r17,64(sp)
   43a10:	dfc01315 	stw	ra,76(sp)
   43a14:	dcc01215 	stw	r19,72(sp)
   43a18:	dc801115 	stw	r18,68(sp)
   43a1c:	2023883a 	mov	r17,r4
   43a20:	28001c16 	blt	r5,zero,43a94 <__smakebuf_r+0xa4>
   43a24:	d80d883a 	mov	r6,sp
   43a28:	0043c0c0 	call	43c0c <_fstat_r>
   43a2c:	10001816 	blt	r2,zero,43a90 <__smakebuf_r+0xa0>
   43a30:	d8800117 	ldw	r2,4(sp)
   43a34:	00e00014 	movui	r3,32768
   43a38:	10bc000c 	andi	r2,r2,61440
   43a3c:	14c80020 	cmpeqi	r19,r2,8192
   43a40:	10c03726 	beq	r2,r3,43b20 <__smakebuf_r+0x130>
   43a44:	80c0030b 	ldhu	r3,12(r16)
   43a48:	18c20014 	ori	r3,r3,2048
   43a4c:	80c0030d 	sth	r3,12(r16)
   43a50:	00c80004 	movi	r3,8192
   43a54:	10c0521e 	bne	r2,r3,43ba0 <__smakebuf_r+0x1b0>
   43a58:	8140038f 	ldh	r5,14(r16)
   43a5c:	8809883a 	mov	r4,r17
   43a60:	0043c680 	call	43c68 <_isatty_r>
   43a64:	10004c26 	beq	r2,zero,43b98 <__smakebuf_r+0x1a8>
   43a68:	8080030b 	ldhu	r2,12(r16)
   43a6c:	80c010c4 	addi	r3,r16,67
   43a70:	80c00015 	stw	r3,0(r16)
   43a74:	10800054 	ori	r2,r2,1
   43a78:	8080030d 	sth	r2,12(r16)
   43a7c:	00800044 	movi	r2,1
   43a80:	80c00415 	stw	r3,16(r16)
   43a84:	80800515 	stw	r2,20(r16)
   43a88:	04810004 	movi	r18,1024
   43a8c:	00000706 	br	43aac <__smakebuf_r+0xbc>
   43a90:	8080030b 	ldhu	r2,12(r16)
   43a94:	10c0200c 	andi	r3,r2,128
   43a98:	18001f1e 	bne	r3,zero,43b18 <__smakebuf_r+0x128>
   43a9c:	04810004 	movi	r18,1024
   43aa0:	10820014 	ori	r2,r2,2048
   43aa4:	8080030d 	sth	r2,12(r16)
   43aa8:	0027883a 	mov	r19,zero
   43aac:	900b883a 	mov	r5,r18
   43ab0:	8809883a 	mov	r4,r17
   43ab4:	0041bf80 	call	41bf8 <_malloc_r>
   43ab8:	10002c26 	beq	r2,zero,43b6c <__smakebuf_r+0x17c>
   43abc:	80c0030b 	ldhu	r3,12(r16)
   43ac0:	01000134 	movhi	r4,4
   43ac4:	21048004 	addi	r4,r4,4608
   43ac8:	89000f15 	stw	r4,60(r17)
   43acc:	18c02014 	ori	r3,r3,128
   43ad0:	80c0030d 	sth	r3,12(r16)
   43ad4:	80800015 	stw	r2,0(r16)
   43ad8:	80800415 	stw	r2,16(r16)
   43adc:	84800515 	stw	r18,20(r16)
   43ae0:	98001a1e 	bne	r19,zero,43b4c <__smakebuf_r+0x15c>
   43ae4:	dfc01317 	ldw	ra,76(sp)
   43ae8:	dcc01217 	ldw	r19,72(sp)
   43aec:	dc801117 	ldw	r18,68(sp)
   43af0:	dc401017 	ldw	r17,64(sp)
   43af4:	dc000f17 	ldw	r16,60(sp)
   43af8:	dec01404 	addi	sp,sp,80
   43afc:	f800283a 	ret
   43b00:	288010c4 	addi	r2,r5,67
   43b04:	28800015 	stw	r2,0(r5)
   43b08:	28800415 	stw	r2,16(r5)
   43b0c:	00800044 	movi	r2,1
   43b10:	28800515 	stw	r2,20(r5)
   43b14:	f800283a 	ret
   43b18:	04801004 	movi	r18,64
   43b1c:	003fe006 	br	43aa0 <__alt_data_end+0xfffd1aa0>
   43b20:	81000a17 	ldw	r4,40(r16)
   43b24:	00c00134 	movhi	r3,4
   43b28:	18cbd104 	addi	r3,r3,12100
   43b2c:	20ffc51e 	bne	r4,r3,43a44 <__alt_data_end+0xfffd1a44>
   43b30:	8080030b 	ldhu	r2,12(r16)
   43b34:	04810004 	movi	r18,1024
   43b38:	84801315 	stw	r18,76(r16)
   43b3c:	1484b03a 	or	r2,r2,r18
   43b40:	8080030d 	sth	r2,12(r16)
   43b44:	0027883a 	mov	r19,zero
   43b48:	003fd806 	br	43aac <__alt_data_end+0xfffd1aac>
   43b4c:	8140038f 	ldh	r5,14(r16)
   43b50:	8809883a 	mov	r4,r17
   43b54:	0043c680 	call	43c68 <_isatty_r>
   43b58:	103fe226 	beq	r2,zero,43ae4 <__alt_data_end+0xfffd1ae4>
   43b5c:	8080030b 	ldhu	r2,12(r16)
   43b60:	10800054 	ori	r2,r2,1
   43b64:	8080030d 	sth	r2,12(r16)
   43b68:	003fde06 	br	43ae4 <__alt_data_end+0xfffd1ae4>
   43b6c:	8080030b 	ldhu	r2,12(r16)
   43b70:	10c0800c 	andi	r3,r2,512
   43b74:	183fdb1e 	bne	r3,zero,43ae4 <__alt_data_end+0xfffd1ae4>
   43b78:	10800094 	ori	r2,r2,2
   43b7c:	80c010c4 	addi	r3,r16,67
   43b80:	8080030d 	sth	r2,12(r16)
   43b84:	00800044 	movi	r2,1
   43b88:	80c00015 	stw	r3,0(r16)
   43b8c:	80c00415 	stw	r3,16(r16)
   43b90:	80800515 	stw	r2,20(r16)
   43b94:	003fd306 	br	43ae4 <__alt_data_end+0xfffd1ae4>
   43b98:	04810004 	movi	r18,1024
   43b9c:	003fc306 	br	43aac <__alt_data_end+0xfffd1aac>
   43ba0:	0027883a 	mov	r19,zero
   43ba4:	04810004 	movi	r18,1024
   43ba8:	003fc006 	br	43aac <__alt_data_end+0xfffd1aac>

00043bac <_read_r>:
   43bac:	defffd04 	addi	sp,sp,-12
   43bb0:	2805883a 	mov	r2,r5
   43bb4:	dc000015 	stw	r16,0(sp)
   43bb8:	04000174 	movhi	r16,5
   43bbc:	dc400115 	stw	r17,4(sp)
   43bc0:	300b883a 	mov	r5,r6
   43bc4:	84269904 	addi	r16,r16,-26012
   43bc8:	2023883a 	mov	r17,r4
   43bcc:	380d883a 	mov	r6,r7
   43bd0:	1009883a 	mov	r4,r2
   43bd4:	dfc00215 	stw	ra,8(sp)
   43bd8:	80000015 	stw	zero,0(r16)
   43bdc:	00444b80 	call	444b8 <read>
   43be0:	00ffffc4 	movi	r3,-1
   43be4:	10c00526 	beq	r2,r3,43bfc <_read_r+0x50>
   43be8:	dfc00217 	ldw	ra,8(sp)
   43bec:	dc400117 	ldw	r17,4(sp)
   43bf0:	dc000017 	ldw	r16,0(sp)
   43bf4:	dec00304 	addi	sp,sp,12
   43bf8:	f800283a 	ret
   43bfc:	80c00017 	ldw	r3,0(r16)
   43c00:	183ff926 	beq	r3,zero,43be8 <__alt_data_end+0xfffd1be8>
   43c04:	88c00015 	stw	r3,0(r17)
   43c08:	003ff706 	br	43be8 <__alt_data_end+0xfffd1be8>

00043c0c <_fstat_r>:
   43c0c:	defffd04 	addi	sp,sp,-12
   43c10:	2805883a 	mov	r2,r5
   43c14:	dc000015 	stw	r16,0(sp)
   43c18:	04000174 	movhi	r16,5
   43c1c:	dc400115 	stw	r17,4(sp)
   43c20:	84269904 	addi	r16,r16,-26012
   43c24:	2023883a 	mov	r17,r4
   43c28:	300b883a 	mov	r5,r6
   43c2c:	1009883a 	mov	r4,r2
   43c30:	dfc00215 	stw	ra,8(sp)
   43c34:	80000015 	stw	zero,0(r16)
   43c38:	00440140 	call	44014 <fstat>
   43c3c:	00ffffc4 	movi	r3,-1
   43c40:	10c00526 	beq	r2,r3,43c58 <_fstat_r+0x4c>
   43c44:	dfc00217 	ldw	ra,8(sp)
   43c48:	dc400117 	ldw	r17,4(sp)
   43c4c:	dc000017 	ldw	r16,0(sp)
   43c50:	dec00304 	addi	sp,sp,12
   43c54:	f800283a 	ret
   43c58:	80c00017 	ldw	r3,0(r16)
   43c5c:	183ff926 	beq	r3,zero,43c44 <__alt_data_end+0xfffd1c44>
   43c60:	88c00015 	stw	r3,0(r17)
   43c64:	003ff706 	br	43c44 <__alt_data_end+0xfffd1c44>

00043c68 <_isatty_r>:
   43c68:	defffd04 	addi	sp,sp,-12
   43c6c:	dc000015 	stw	r16,0(sp)
   43c70:	04000174 	movhi	r16,5
   43c74:	dc400115 	stw	r17,4(sp)
   43c78:	84269904 	addi	r16,r16,-26012
   43c7c:	2023883a 	mov	r17,r4
   43c80:	2809883a 	mov	r4,r5
   43c84:	dfc00215 	stw	ra,8(sp)
   43c88:	80000015 	stw	zero,0(r16)
   43c8c:	00441080 	call	44108 <isatty>
   43c90:	00ffffc4 	movi	r3,-1
   43c94:	10c00526 	beq	r2,r3,43cac <_isatty_r+0x44>
   43c98:	dfc00217 	ldw	ra,8(sp)
   43c9c:	dc400117 	ldw	r17,4(sp)
   43ca0:	dc000017 	ldw	r16,0(sp)
   43ca4:	dec00304 	addi	sp,sp,12
   43ca8:	f800283a 	ret
   43cac:	80c00017 	ldw	r3,0(r16)
   43cb0:	183ff926 	beq	r3,zero,43c98 <__alt_data_end+0xfffd1c98>
   43cb4:	88c00015 	stw	r3,0(r17)
   43cb8:	003ff706 	br	43c98 <__alt_data_end+0xfffd1c98>

00043cbc <__divsi3>:
   43cbc:	20001b16 	blt	r4,zero,43d2c <__divsi3+0x70>
   43cc0:	000f883a 	mov	r7,zero
   43cc4:	28001616 	blt	r5,zero,43d20 <__divsi3+0x64>
   43cc8:	200d883a 	mov	r6,r4
   43ccc:	29001a2e 	bgeu	r5,r4,43d38 <__divsi3+0x7c>
   43cd0:	00800804 	movi	r2,32
   43cd4:	00c00044 	movi	r3,1
   43cd8:	00000106 	br	43ce0 <__divsi3+0x24>
   43cdc:	10000d26 	beq	r2,zero,43d14 <__divsi3+0x58>
   43ce0:	294b883a 	add	r5,r5,r5
   43ce4:	10bfffc4 	addi	r2,r2,-1
   43ce8:	18c7883a 	add	r3,r3,r3
   43cec:	293ffb36 	bltu	r5,r4,43cdc <__alt_data_end+0xfffd1cdc>
   43cf0:	0005883a 	mov	r2,zero
   43cf4:	18000726 	beq	r3,zero,43d14 <__divsi3+0x58>
   43cf8:	0005883a 	mov	r2,zero
   43cfc:	31400236 	bltu	r6,r5,43d08 <__divsi3+0x4c>
   43d00:	314dc83a 	sub	r6,r6,r5
   43d04:	10c4b03a 	or	r2,r2,r3
   43d08:	1806d07a 	srli	r3,r3,1
   43d0c:	280ad07a 	srli	r5,r5,1
   43d10:	183ffa1e 	bne	r3,zero,43cfc <__alt_data_end+0xfffd1cfc>
   43d14:	38000126 	beq	r7,zero,43d1c <__divsi3+0x60>
   43d18:	0085c83a 	sub	r2,zero,r2
   43d1c:	f800283a 	ret
   43d20:	014bc83a 	sub	r5,zero,r5
   43d24:	39c0005c 	xori	r7,r7,1
   43d28:	003fe706 	br	43cc8 <__alt_data_end+0xfffd1cc8>
   43d2c:	0109c83a 	sub	r4,zero,r4
   43d30:	01c00044 	movi	r7,1
   43d34:	003fe306 	br	43cc4 <__alt_data_end+0xfffd1cc4>
   43d38:	00c00044 	movi	r3,1
   43d3c:	003fee06 	br	43cf8 <__alt_data_end+0xfffd1cf8>

00043d40 <__modsi3>:
   43d40:	20001716 	blt	r4,zero,43da0 <__modsi3+0x60>
   43d44:	000f883a 	mov	r7,zero
   43d48:	2005883a 	mov	r2,r4
   43d4c:	28001216 	blt	r5,zero,43d98 <__modsi3+0x58>
   43d50:	2900162e 	bgeu	r5,r4,43dac <__modsi3+0x6c>
   43d54:	01800804 	movi	r6,32
   43d58:	00c00044 	movi	r3,1
   43d5c:	00000106 	br	43d64 <__modsi3+0x24>
   43d60:	30000a26 	beq	r6,zero,43d8c <__modsi3+0x4c>
   43d64:	294b883a 	add	r5,r5,r5
   43d68:	31bfffc4 	addi	r6,r6,-1
   43d6c:	18c7883a 	add	r3,r3,r3
   43d70:	293ffb36 	bltu	r5,r4,43d60 <__alt_data_end+0xfffd1d60>
   43d74:	18000526 	beq	r3,zero,43d8c <__modsi3+0x4c>
   43d78:	1806d07a 	srli	r3,r3,1
   43d7c:	11400136 	bltu	r2,r5,43d84 <__modsi3+0x44>
   43d80:	1145c83a 	sub	r2,r2,r5
   43d84:	280ad07a 	srli	r5,r5,1
   43d88:	183ffb1e 	bne	r3,zero,43d78 <__alt_data_end+0xfffd1d78>
   43d8c:	38000126 	beq	r7,zero,43d94 <__modsi3+0x54>
   43d90:	0085c83a 	sub	r2,zero,r2
   43d94:	f800283a 	ret
   43d98:	014bc83a 	sub	r5,zero,r5
   43d9c:	003fec06 	br	43d50 <__alt_data_end+0xfffd1d50>
   43da0:	0109c83a 	sub	r4,zero,r4
   43da4:	01c00044 	movi	r7,1
   43da8:	003fe706 	br	43d48 <__alt_data_end+0xfffd1d48>
   43dac:	00c00044 	movi	r3,1
   43db0:	003ff106 	br	43d78 <__alt_data_end+0xfffd1d78>

00043db4 <__udivsi3>:
   43db4:	200d883a 	mov	r6,r4
   43db8:	2900152e 	bgeu	r5,r4,43e10 <__udivsi3+0x5c>
   43dbc:	28001416 	blt	r5,zero,43e10 <__udivsi3+0x5c>
   43dc0:	00800804 	movi	r2,32
   43dc4:	00c00044 	movi	r3,1
   43dc8:	00000206 	br	43dd4 <__udivsi3+0x20>
   43dcc:	10000e26 	beq	r2,zero,43e08 <__udivsi3+0x54>
   43dd0:	28000516 	blt	r5,zero,43de8 <__udivsi3+0x34>
   43dd4:	294b883a 	add	r5,r5,r5
   43dd8:	10bfffc4 	addi	r2,r2,-1
   43ddc:	18c7883a 	add	r3,r3,r3
   43de0:	293ffa36 	bltu	r5,r4,43dcc <__alt_data_end+0xfffd1dcc>
   43de4:	18000826 	beq	r3,zero,43e08 <__udivsi3+0x54>
   43de8:	0005883a 	mov	r2,zero
   43dec:	31400236 	bltu	r6,r5,43df8 <__udivsi3+0x44>
   43df0:	314dc83a 	sub	r6,r6,r5
   43df4:	10c4b03a 	or	r2,r2,r3
   43df8:	1806d07a 	srli	r3,r3,1
   43dfc:	280ad07a 	srli	r5,r5,1
   43e00:	183ffa1e 	bne	r3,zero,43dec <__alt_data_end+0xfffd1dec>
   43e04:	f800283a 	ret
   43e08:	0005883a 	mov	r2,zero
   43e0c:	f800283a 	ret
   43e10:	00c00044 	movi	r3,1
   43e14:	003ff406 	br	43de8 <__alt_data_end+0xfffd1de8>

00043e18 <__umodsi3>:
   43e18:	2005883a 	mov	r2,r4
   43e1c:	2900122e 	bgeu	r5,r4,43e68 <__umodsi3+0x50>
   43e20:	28001116 	blt	r5,zero,43e68 <__umodsi3+0x50>
   43e24:	01800804 	movi	r6,32
   43e28:	00c00044 	movi	r3,1
   43e2c:	00000206 	br	43e38 <__umodsi3+0x20>
   43e30:	30000c26 	beq	r6,zero,43e64 <__umodsi3+0x4c>
   43e34:	28000516 	blt	r5,zero,43e4c <__umodsi3+0x34>
   43e38:	294b883a 	add	r5,r5,r5
   43e3c:	31bfffc4 	addi	r6,r6,-1
   43e40:	18c7883a 	add	r3,r3,r3
   43e44:	293ffa36 	bltu	r5,r4,43e30 <__alt_data_end+0xfffd1e30>
   43e48:	18000626 	beq	r3,zero,43e64 <__umodsi3+0x4c>
   43e4c:	1806d07a 	srli	r3,r3,1
   43e50:	11400136 	bltu	r2,r5,43e58 <__umodsi3+0x40>
   43e54:	1145c83a 	sub	r2,r2,r5
   43e58:	280ad07a 	srli	r5,r5,1
   43e5c:	183ffb1e 	bne	r3,zero,43e4c <__alt_data_end+0xfffd1e4c>
   43e60:	f800283a 	ret
   43e64:	f800283a 	ret
   43e68:	00c00044 	movi	r3,1
   43e6c:	003ff706 	br	43e4c <__alt_data_end+0xfffd1e4c>

00043e70 <__mulsi3>:
   43e70:	0005883a 	mov	r2,zero
   43e74:	20000726 	beq	r4,zero,43e94 <__mulsi3+0x24>
   43e78:	20c0004c 	andi	r3,r4,1
   43e7c:	2008d07a 	srli	r4,r4,1
   43e80:	18000126 	beq	r3,zero,43e88 <__mulsi3+0x18>
   43e84:	1145883a 	add	r2,r2,r5
   43e88:	294b883a 	add	r5,r5,r5
   43e8c:	203ffa1e 	bne	r4,zero,43e78 <__alt_data_end+0xfffd1e78>
   43e90:	f800283a 	ret
   43e94:	f800283a 	ret

00043e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43e98:	defffe04 	addi	sp,sp,-8
   43e9c:	dfc00115 	stw	ra,4(sp)
   43ea0:	df000015 	stw	fp,0(sp)
   43ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43ea8:	d0a00917 	ldw	r2,-32732(gp)
   43eac:	10000326 	beq	r2,zero,43ebc <alt_get_errno+0x24>
   43eb0:	d0a00917 	ldw	r2,-32732(gp)
   43eb4:	103ee83a 	callr	r2
   43eb8:	00000106 	br	43ec0 <alt_get_errno+0x28>
   43ebc:	d0a6ac04 	addi	r2,gp,-25936
}
   43ec0:	e037883a 	mov	sp,fp
   43ec4:	dfc00117 	ldw	ra,4(sp)
   43ec8:	df000017 	ldw	fp,0(sp)
   43ecc:	dec00204 	addi	sp,sp,8
   43ed0:	f800283a 	ret

00043ed4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43ed4:	defffb04 	addi	sp,sp,-20
   43ed8:	dfc00415 	stw	ra,16(sp)
   43edc:	df000315 	stw	fp,12(sp)
   43ee0:	df000304 	addi	fp,sp,12
   43ee4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43ee8:	e0bfff17 	ldw	r2,-4(fp)
   43eec:	10000816 	blt	r2,zero,43f10 <close+0x3c>
   43ef0:	01400304 	movi	r5,12
   43ef4:	e13fff17 	ldw	r4,-4(fp)
   43ef8:	0043e700 	call	43e70 <__mulsi3>
   43efc:	1007883a 	mov	r3,r2
   43f00:	00800134 	movhi	r2,4
   43f04:	109b7504 	addi	r2,r2,28116
   43f08:	1885883a 	add	r2,r3,r2
   43f0c:	00000106 	br	43f14 <close+0x40>
   43f10:	0005883a 	mov	r2,zero
   43f14:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43f18:	e0bffd17 	ldw	r2,-12(fp)
   43f1c:	10001926 	beq	r2,zero,43f84 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43f20:	e0bffd17 	ldw	r2,-12(fp)
   43f24:	10800017 	ldw	r2,0(r2)
   43f28:	10800417 	ldw	r2,16(r2)
   43f2c:	10000626 	beq	r2,zero,43f48 <close+0x74>
   43f30:	e0bffd17 	ldw	r2,-12(fp)
   43f34:	10800017 	ldw	r2,0(r2)
   43f38:	10800417 	ldw	r2,16(r2)
   43f3c:	e13ffd17 	ldw	r4,-12(fp)
   43f40:	103ee83a 	callr	r2
   43f44:	00000106 	br	43f4c <close+0x78>
   43f48:	0005883a 	mov	r2,zero
   43f4c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43f50:	e13fff17 	ldw	r4,-4(fp)
   43f54:	00445bc0 	call	445bc <alt_release_fd>
    if (rval < 0)
   43f58:	e0bffe17 	ldw	r2,-8(fp)
   43f5c:	1000070e 	bge	r2,zero,43f7c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43f60:	0043e980 	call	43e98 <alt_get_errno>
   43f64:	1007883a 	mov	r3,r2
   43f68:	e0bffe17 	ldw	r2,-8(fp)
   43f6c:	0085c83a 	sub	r2,zero,r2
   43f70:	18800015 	stw	r2,0(r3)
      return -1;
   43f74:	00bfffc4 	movi	r2,-1
   43f78:	00000706 	br	43f98 <close+0xc4>
    }
    return 0;
   43f7c:	0005883a 	mov	r2,zero
   43f80:	00000506 	br	43f98 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43f84:	0043e980 	call	43e98 <alt_get_errno>
   43f88:	1007883a 	mov	r3,r2
   43f8c:	00801444 	movi	r2,81
   43f90:	18800015 	stw	r2,0(r3)
    return -1;
   43f94:	00bfffc4 	movi	r2,-1
  }
}
   43f98:	e037883a 	mov	sp,fp
   43f9c:	dfc00117 	ldw	ra,4(sp)
   43fa0:	df000017 	ldw	fp,0(sp)
   43fa4:	dec00204 	addi	sp,sp,8
   43fa8:	f800283a 	ret

00043fac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43fac:	defffc04 	addi	sp,sp,-16
   43fb0:	df000315 	stw	fp,12(sp)
   43fb4:	df000304 	addi	fp,sp,12
   43fb8:	e13ffd15 	stw	r4,-12(fp)
   43fbc:	e17ffe15 	stw	r5,-8(fp)
   43fc0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43fc4:	e0bfff17 	ldw	r2,-4(fp)
}
   43fc8:	e037883a 	mov	sp,fp
   43fcc:	df000017 	ldw	fp,0(sp)
   43fd0:	dec00104 	addi	sp,sp,4
   43fd4:	f800283a 	ret

00043fd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43fd8:	defffe04 	addi	sp,sp,-8
   43fdc:	dfc00115 	stw	ra,4(sp)
   43fe0:	df000015 	stw	fp,0(sp)
   43fe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43fe8:	d0a00917 	ldw	r2,-32732(gp)
   43fec:	10000326 	beq	r2,zero,43ffc <alt_get_errno+0x24>
   43ff0:	d0a00917 	ldw	r2,-32732(gp)
   43ff4:	103ee83a 	callr	r2
   43ff8:	00000106 	br	44000 <alt_get_errno+0x28>
   43ffc:	d0a6ac04 	addi	r2,gp,-25936
}
   44000:	e037883a 	mov	sp,fp
   44004:	dfc00117 	ldw	ra,4(sp)
   44008:	df000017 	ldw	fp,0(sp)
   4400c:	dec00204 	addi	sp,sp,8
   44010:	f800283a 	ret

00044014 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   44014:	defffb04 	addi	sp,sp,-20
   44018:	dfc00415 	stw	ra,16(sp)
   4401c:	df000315 	stw	fp,12(sp)
   44020:	df000304 	addi	fp,sp,12
   44024:	e13ffe15 	stw	r4,-8(fp)
   44028:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4402c:	e0bffe17 	ldw	r2,-8(fp)
   44030:	10000816 	blt	r2,zero,44054 <fstat+0x40>
   44034:	01400304 	movi	r5,12
   44038:	e13ffe17 	ldw	r4,-8(fp)
   4403c:	0043e700 	call	43e70 <__mulsi3>
   44040:	1007883a 	mov	r3,r2
   44044:	00800134 	movhi	r2,4
   44048:	109b7504 	addi	r2,r2,28116
   4404c:	1885883a 	add	r2,r3,r2
   44050:	00000106 	br	44058 <fstat+0x44>
   44054:	0005883a 	mov	r2,zero
   44058:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4405c:	e0bffd17 	ldw	r2,-12(fp)
   44060:	10001026 	beq	r2,zero,440a4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   44064:	e0bffd17 	ldw	r2,-12(fp)
   44068:	10800017 	ldw	r2,0(r2)
   4406c:	10800817 	ldw	r2,32(r2)
   44070:	10000726 	beq	r2,zero,44090 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   44074:	e0bffd17 	ldw	r2,-12(fp)
   44078:	10800017 	ldw	r2,0(r2)
   4407c:	10800817 	ldw	r2,32(r2)
   44080:	e17fff17 	ldw	r5,-4(fp)
   44084:	e13ffd17 	ldw	r4,-12(fp)
   44088:	103ee83a 	callr	r2
   4408c:	00000a06 	br	440b8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   44090:	e0bfff17 	ldw	r2,-4(fp)
   44094:	00c80004 	movi	r3,8192
   44098:	10c00115 	stw	r3,4(r2)
      return 0;
   4409c:	0005883a 	mov	r2,zero
   440a0:	00000506 	br	440b8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   440a4:	0043fd80 	call	43fd8 <alt_get_errno>
   440a8:	1007883a 	mov	r3,r2
   440ac:	00801444 	movi	r2,81
   440b0:	18800015 	stw	r2,0(r3)
    return -1;
   440b4:	00bfffc4 	movi	r2,-1
  }
}
   440b8:	e037883a 	mov	sp,fp
   440bc:	dfc00117 	ldw	ra,4(sp)
   440c0:	df000017 	ldw	fp,0(sp)
   440c4:	dec00204 	addi	sp,sp,8
   440c8:	f800283a 	ret

000440cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   440cc:	defffe04 	addi	sp,sp,-8
   440d0:	dfc00115 	stw	ra,4(sp)
   440d4:	df000015 	stw	fp,0(sp)
   440d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   440dc:	d0a00917 	ldw	r2,-32732(gp)
   440e0:	10000326 	beq	r2,zero,440f0 <alt_get_errno+0x24>
   440e4:	d0a00917 	ldw	r2,-32732(gp)
   440e8:	103ee83a 	callr	r2
   440ec:	00000106 	br	440f4 <alt_get_errno+0x28>
   440f0:	d0a6ac04 	addi	r2,gp,-25936
}
   440f4:	e037883a 	mov	sp,fp
   440f8:	dfc00117 	ldw	ra,4(sp)
   440fc:	df000017 	ldw	fp,0(sp)
   44100:	dec00204 	addi	sp,sp,8
   44104:	f800283a 	ret

00044108 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   44108:	deffed04 	addi	sp,sp,-76
   4410c:	dfc01215 	stw	ra,72(sp)
   44110:	df001115 	stw	fp,68(sp)
   44114:	df001104 	addi	fp,sp,68
   44118:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4411c:	e0bfff17 	ldw	r2,-4(fp)
   44120:	10000816 	blt	r2,zero,44144 <isatty+0x3c>
   44124:	01400304 	movi	r5,12
   44128:	e13fff17 	ldw	r4,-4(fp)
   4412c:	0043e700 	call	43e70 <__mulsi3>
   44130:	1007883a 	mov	r3,r2
   44134:	00800134 	movhi	r2,4
   44138:	109b7504 	addi	r2,r2,28116
   4413c:	1885883a 	add	r2,r3,r2
   44140:	00000106 	br	44148 <isatty+0x40>
   44144:	0005883a 	mov	r2,zero
   44148:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4414c:	e0bfef17 	ldw	r2,-68(fp)
   44150:	10000e26 	beq	r2,zero,4418c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   44154:	e0bfef17 	ldw	r2,-68(fp)
   44158:	10800017 	ldw	r2,0(r2)
   4415c:	10800817 	ldw	r2,32(r2)
   44160:	1000021e 	bne	r2,zero,4416c <isatty+0x64>
    {
      return 1;
   44164:	00800044 	movi	r2,1
   44168:	00000d06 	br	441a0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4416c:	e0bff004 	addi	r2,fp,-64
   44170:	100b883a 	mov	r5,r2
   44174:	e13fff17 	ldw	r4,-4(fp)
   44178:	00440140 	call	44014 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4417c:	e0bff117 	ldw	r2,-60(fp)
   44180:	10880020 	cmpeqi	r2,r2,8192
   44184:	10803fcc 	andi	r2,r2,255
   44188:	00000506 	br	441a0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4418c:	00440cc0 	call	440cc <alt_get_errno>
   44190:	1007883a 	mov	r3,r2
   44194:	00801444 	movi	r2,81
   44198:	18800015 	stw	r2,0(r3)
    return 0;
   4419c:	0005883a 	mov	r2,zero
  }
}
   441a0:	e037883a 	mov	sp,fp
   441a4:	dfc00117 	ldw	ra,4(sp)
   441a8:	df000017 	ldw	fp,0(sp)
   441ac:	dec00204 	addi	sp,sp,8
   441b0:	f800283a 	ret

000441b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   441b4:	defffc04 	addi	sp,sp,-16
   441b8:	df000315 	stw	fp,12(sp)
   441bc:	df000304 	addi	fp,sp,12
   441c0:	e13ffd15 	stw	r4,-12(fp)
   441c4:	e17ffe15 	stw	r5,-8(fp)
   441c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   441cc:	e0fffe17 	ldw	r3,-8(fp)
   441d0:	e0bffd17 	ldw	r2,-12(fp)
   441d4:	18800c26 	beq	r3,r2,44208 <alt_load_section+0x54>
  {
    while( to != end )
   441d8:	00000806 	br	441fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   441dc:	e0bffe17 	ldw	r2,-8(fp)
   441e0:	10c00104 	addi	r3,r2,4
   441e4:	e0fffe15 	stw	r3,-8(fp)
   441e8:	e0fffd17 	ldw	r3,-12(fp)
   441ec:	19000104 	addi	r4,r3,4
   441f0:	e13ffd15 	stw	r4,-12(fp)
   441f4:	18c00017 	ldw	r3,0(r3)
   441f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   441fc:	e0fffe17 	ldw	r3,-8(fp)
   44200:	e0bfff17 	ldw	r2,-4(fp)
   44204:	18bff51e 	bne	r3,r2,441dc <__alt_data_end+0xfffd21dc>
    {
      *to++ = *from++;
    }
  }
}
   44208:	0001883a 	nop
   4420c:	e037883a 	mov	sp,fp
   44210:	df000017 	ldw	fp,0(sp)
   44214:	dec00104 	addi	sp,sp,4
   44218:	f800283a 	ret

0004421c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4421c:	defffe04 	addi	sp,sp,-8
   44220:	dfc00115 	stw	ra,4(sp)
   44224:	df000015 	stw	fp,0(sp)
   44228:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4422c:	01800134 	movhi	r6,4
   44230:	319ffb04 	addi	r6,r6,32748
   44234:	01400134 	movhi	r5,4
   44238:	29596004 	addi	r5,r5,25984
   4423c:	01000134 	movhi	r4,4
   44240:	211ffb04 	addi	r4,r4,32748
   44244:	00441b40 	call	441b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   44248:	01800134 	movhi	r6,4
   4424c:	31808c04 	addi	r6,r6,560
   44250:	01400134 	movhi	r5,4
   44254:	29400804 	addi	r5,r5,32
   44258:	01000134 	movhi	r4,4
   4425c:	21000804 	addi	r4,r4,32
   44260:	00441b40 	call	441b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   44264:	01800134 	movhi	r6,4
   44268:	31996004 	addi	r6,r6,25984
   4426c:	01400134 	movhi	r5,4
   44270:	29594c04 	addi	r5,r5,25904
   44274:	01000134 	movhi	r4,4
   44278:	21194c04 	addi	r4,r4,25904
   4427c:	00441b40 	call	441b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   44280:	00454780 	call	45478 <alt_dcache_flush_all>
  alt_icache_flush_all();
   44284:	00456380 	call	45638 <alt_icache_flush_all>
}
   44288:	0001883a 	nop
   4428c:	e037883a 	mov	sp,fp
   44290:	dfc00117 	ldw	ra,4(sp)
   44294:	df000017 	ldw	fp,0(sp)
   44298:	dec00204 	addi	sp,sp,8
   4429c:	f800283a 	ret

000442a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   442a0:	defffe04 	addi	sp,sp,-8
   442a4:	dfc00115 	stw	ra,4(sp)
   442a8:	df000015 	stw	fp,0(sp)
   442ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   442b0:	d0a00917 	ldw	r2,-32732(gp)
   442b4:	10000326 	beq	r2,zero,442c4 <alt_get_errno+0x24>
   442b8:	d0a00917 	ldw	r2,-32732(gp)
   442bc:	103ee83a 	callr	r2
   442c0:	00000106 	br	442c8 <alt_get_errno+0x28>
   442c4:	d0a6ac04 	addi	r2,gp,-25936
}
   442c8:	e037883a 	mov	sp,fp
   442cc:	dfc00117 	ldw	ra,4(sp)
   442d0:	df000017 	ldw	fp,0(sp)
   442d4:	dec00204 	addi	sp,sp,8
   442d8:	f800283a 	ret

000442dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   442dc:	defff904 	addi	sp,sp,-28
   442e0:	dfc00615 	stw	ra,24(sp)
   442e4:	df000515 	stw	fp,20(sp)
   442e8:	df000504 	addi	fp,sp,20
   442ec:	e13ffd15 	stw	r4,-12(fp)
   442f0:	e17ffe15 	stw	r5,-8(fp)
   442f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   442f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   442fc:	e0bffd17 	ldw	r2,-12(fp)
   44300:	10000816 	blt	r2,zero,44324 <lseek+0x48>
   44304:	01400304 	movi	r5,12
   44308:	e13ffd17 	ldw	r4,-12(fp)
   4430c:	0043e700 	call	43e70 <__mulsi3>
   44310:	1007883a 	mov	r3,r2
   44314:	00800134 	movhi	r2,4
   44318:	109b7504 	addi	r2,r2,28116
   4431c:	1885883a 	add	r2,r3,r2
   44320:	00000106 	br	44328 <lseek+0x4c>
   44324:	0005883a 	mov	r2,zero
   44328:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4432c:	e0bffc17 	ldw	r2,-16(fp)
   44330:	10001026 	beq	r2,zero,44374 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   44334:	e0bffc17 	ldw	r2,-16(fp)
   44338:	10800017 	ldw	r2,0(r2)
   4433c:	10800717 	ldw	r2,28(r2)
   44340:	10000926 	beq	r2,zero,44368 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   44344:	e0bffc17 	ldw	r2,-16(fp)
   44348:	10800017 	ldw	r2,0(r2)
   4434c:	10800717 	ldw	r2,28(r2)
   44350:	e1bfff17 	ldw	r6,-4(fp)
   44354:	e17ffe17 	ldw	r5,-8(fp)
   44358:	e13ffc17 	ldw	r4,-16(fp)
   4435c:	103ee83a 	callr	r2
   44360:	e0bffb15 	stw	r2,-20(fp)
   44364:	00000506 	br	4437c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   44368:	00bfde84 	movi	r2,-134
   4436c:	e0bffb15 	stw	r2,-20(fp)
   44370:	00000206 	br	4437c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   44374:	00bfebc4 	movi	r2,-81
   44378:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4437c:	e0bffb17 	ldw	r2,-20(fp)
   44380:	1000070e 	bge	r2,zero,443a0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   44384:	00442a00 	call	442a0 <alt_get_errno>
   44388:	1007883a 	mov	r3,r2
   4438c:	e0bffb17 	ldw	r2,-20(fp)
   44390:	0085c83a 	sub	r2,zero,r2
   44394:	18800015 	stw	r2,0(r3)
    rc = -1;
   44398:	00bfffc4 	movi	r2,-1
   4439c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   443a0:	e0bffb17 	ldw	r2,-20(fp)
}
   443a4:	e037883a 	mov	sp,fp
   443a8:	dfc00117 	ldw	ra,4(sp)
   443ac:	df000017 	ldw	fp,0(sp)
   443b0:	dec00204 	addi	sp,sp,8
   443b4:	f800283a 	ret

000443b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   443b8:	defffd04 	addi	sp,sp,-12
   443bc:	dfc00215 	stw	ra,8(sp)
   443c0:	df000115 	stw	fp,4(sp)
   443c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   443c8:	0009883a 	mov	r4,zero
   443cc:	00448600 	call	44860 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   443d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   443d4:	00448980 	call	44898 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   443d8:	01800134 	movhi	r6,4
   443dc:	31995604 	addi	r6,r6,25944
   443e0:	01400134 	movhi	r5,4
   443e4:	29595604 	addi	r5,r5,25944
   443e8:	01000134 	movhi	r4,4
   443ec:	21195604 	addi	r4,r4,25944
   443f0:	00459dc0 	call	459dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   443f4:	00455780 	call	45578 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   443f8:	01000134 	movhi	r4,4
   443fc:	21157604 	addi	r4,r4,21976
   44400:	004619c0 	call	4619c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   44404:	d0a6ad17 	ldw	r2,-25932(gp)
   44408:	d0e6ae17 	ldw	r3,-25928(gp)
   4440c:	d126af17 	ldw	r4,-25924(gp)
   44410:	200d883a 	mov	r6,r4
   44414:	180b883a 	mov	r5,r3
   44418:	1009883a 	mov	r4,r2
   4441c:	00402d00 	call	402d0 <main>
   44420:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   44424:	01000044 	movi	r4,1
   44428:	0043ed40 	call	43ed4 <close>
  exit (result);
   4442c:	e13fff17 	ldw	r4,-4(fp)
   44430:	00461b00 	call	461b0 <exit>

00044434 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   44434:	defffe04 	addi	sp,sp,-8
   44438:	df000115 	stw	fp,4(sp)
   4443c:	df000104 	addi	fp,sp,4
   44440:	e13fff15 	stw	r4,-4(fp)
}
   44444:	0001883a 	nop
   44448:	e037883a 	mov	sp,fp
   4444c:	df000017 	ldw	fp,0(sp)
   44450:	dec00104 	addi	sp,sp,4
   44454:	f800283a 	ret

00044458 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   44458:	defffe04 	addi	sp,sp,-8
   4445c:	df000115 	stw	fp,4(sp)
   44460:	df000104 	addi	fp,sp,4
   44464:	e13fff15 	stw	r4,-4(fp)
}
   44468:	0001883a 	nop
   4446c:	e037883a 	mov	sp,fp
   44470:	df000017 	ldw	fp,0(sp)
   44474:	dec00104 	addi	sp,sp,4
   44478:	f800283a 	ret

0004447c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4447c:	defffe04 	addi	sp,sp,-8
   44480:	dfc00115 	stw	ra,4(sp)
   44484:	df000015 	stw	fp,0(sp)
   44488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4448c:	d0a00917 	ldw	r2,-32732(gp)
   44490:	10000326 	beq	r2,zero,444a0 <alt_get_errno+0x24>
   44494:	d0a00917 	ldw	r2,-32732(gp)
   44498:	103ee83a 	callr	r2
   4449c:	00000106 	br	444a4 <alt_get_errno+0x28>
   444a0:	d0a6ac04 	addi	r2,gp,-25936
}
   444a4:	e037883a 	mov	sp,fp
   444a8:	dfc00117 	ldw	ra,4(sp)
   444ac:	df000017 	ldw	fp,0(sp)
   444b0:	dec00204 	addi	sp,sp,8
   444b4:	f800283a 	ret

000444b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   444b8:	defff904 	addi	sp,sp,-28
   444bc:	dfc00615 	stw	ra,24(sp)
   444c0:	df000515 	stw	fp,20(sp)
   444c4:	df000504 	addi	fp,sp,20
   444c8:	e13ffd15 	stw	r4,-12(fp)
   444cc:	e17ffe15 	stw	r5,-8(fp)
   444d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   444d4:	e0bffd17 	ldw	r2,-12(fp)
   444d8:	10000816 	blt	r2,zero,444fc <read+0x44>
   444dc:	01400304 	movi	r5,12
   444e0:	e13ffd17 	ldw	r4,-12(fp)
   444e4:	0043e700 	call	43e70 <__mulsi3>
   444e8:	1007883a 	mov	r3,r2
   444ec:	00800134 	movhi	r2,4
   444f0:	109b7504 	addi	r2,r2,28116
   444f4:	1885883a 	add	r2,r3,r2
   444f8:	00000106 	br	44500 <read+0x48>
   444fc:	0005883a 	mov	r2,zero
   44500:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   44504:	e0bffb17 	ldw	r2,-20(fp)
   44508:	10002226 	beq	r2,zero,44594 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4450c:	e0bffb17 	ldw	r2,-20(fp)
   44510:	10800217 	ldw	r2,8(r2)
   44514:	108000cc 	andi	r2,r2,3
   44518:	10800060 	cmpeqi	r2,r2,1
   4451c:	1000181e 	bne	r2,zero,44580 <read+0xc8>
        (fd->dev->read))
   44520:	e0bffb17 	ldw	r2,-20(fp)
   44524:	10800017 	ldw	r2,0(r2)
   44528:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4452c:	10001426 	beq	r2,zero,44580 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   44530:	e0bffb17 	ldw	r2,-20(fp)
   44534:	10800017 	ldw	r2,0(r2)
   44538:	10800517 	ldw	r2,20(r2)
   4453c:	e0ffff17 	ldw	r3,-4(fp)
   44540:	180d883a 	mov	r6,r3
   44544:	e17ffe17 	ldw	r5,-8(fp)
   44548:	e13ffb17 	ldw	r4,-20(fp)
   4454c:	103ee83a 	callr	r2
   44550:	e0bffc15 	stw	r2,-16(fp)
   44554:	e0bffc17 	ldw	r2,-16(fp)
   44558:	1000070e 	bge	r2,zero,44578 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4455c:	004447c0 	call	4447c <alt_get_errno>
   44560:	1007883a 	mov	r3,r2
   44564:	e0bffc17 	ldw	r2,-16(fp)
   44568:	0085c83a 	sub	r2,zero,r2
   4456c:	18800015 	stw	r2,0(r3)
          return -1;
   44570:	00bfffc4 	movi	r2,-1
   44574:	00000c06 	br	445a8 <read+0xf0>
        }
        return rval;
   44578:	e0bffc17 	ldw	r2,-16(fp)
   4457c:	00000a06 	br	445a8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   44580:	004447c0 	call	4447c <alt_get_errno>
   44584:	1007883a 	mov	r3,r2
   44588:	00800344 	movi	r2,13
   4458c:	18800015 	stw	r2,0(r3)
   44590:	00000406 	br	445a4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   44594:	004447c0 	call	4447c <alt_get_errno>
   44598:	1007883a 	mov	r3,r2
   4459c:	00801444 	movi	r2,81
   445a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   445a4:	00bfffc4 	movi	r2,-1
}
   445a8:	e037883a 	mov	sp,fp
   445ac:	dfc00117 	ldw	ra,4(sp)
   445b0:	df000017 	ldw	fp,0(sp)
   445b4:	dec00204 	addi	sp,sp,8
   445b8:	f800283a 	ret

000445bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   445bc:	defffc04 	addi	sp,sp,-16
   445c0:	dfc00315 	stw	ra,12(sp)
   445c4:	df000215 	stw	fp,8(sp)
   445c8:	dc000115 	stw	r16,4(sp)
   445cc:	df000204 	addi	fp,sp,8
   445d0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   445d4:	e0bffe17 	ldw	r2,-8(fp)
   445d8:	108000d0 	cmplti	r2,r2,3
   445dc:	1000111e 	bne	r2,zero,44624 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   445e0:	04000134 	movhi	r16,4
   445e4:	841b7504 	addi	r16,r16,28116
   445e8:	e0bffe17 	ldw	r2,-8(fp)
   445ec:	01400304 	movi	r5,12
   445f0:	1009883a 	mov	r4,r2
   445f4:	0043e700 	call	43e70 <__mulsi3>
   445f8:	8085883a 	add	r2,r16,r2
   445fc:	10800204 	addi	r2,r2,8
   44600:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   44604:	04000134 	movhi	r16,4
   44608:	841b7504 	addi	r16,r16,28116
   4460c:	e0bffe17 	ldw	r2,-8(fp)
   44610:	01400304 	movi	r5,12
   44614:	1009883a 	mov	r4,r2
   44618:	0043e700 	call	43e70 <__mulsi3>
   4461c:	8085883a 	add	r2,r16,r2
   44620:	10000015 	stw	zero,0(r2)
  }
}
   44624:	0001883a 	nop
   44628:	e6ffff04 	addi	sp,fp,-4
   4462c:	dfc00217 	ldw	ra,8(sp)
   44630:	df000117 	ldw	fp,4(sp)
   44634:	dc000017 	ldw	r16,0(sp)
   44638:	dec00304 	addi	sp,sp,12
   4463c:	f800283a 	ret

00044640 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   44640:	defff904 	addi	sp,sp,-28
   44644:	df000615 	stw	fp,24(sp)
   44648:	df000604 	addi	fp,sp,24
   4464c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44650:	0005303a 	rdctl	r2,status
   44654:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44658:	e0fffe17 	ldw	r3,-8(fp)
   4465c:	00bfff84 	movi	r2,-2
   44660:	1884703a 	and	r2,r3,r2
   44664:	1001703a 	wrctl	status,r2
  
  return context;
   44668:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4466c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   44670:	d0a00a17 	ldw	r2,-32728(gp)
   44674:	10c000c4 	addi	r3,r2,3
   44678:	00bfff04 	movi	r2,-4
   4467c:	1884703a 	and	r2,r3,r2
   44680:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   44684:	d0e00a17 	ldw	r3,-32728(gp)
   44688:	e0bfff17 	ldw	r2,-4(fp)
   4468c:	1887883a 	add	r3,r3,r2
   44690:	008001f4 	movhi	r2,7
   44694:	10880004 	addi	r2,r2,8192
   44698:	10c0062e 	bgeu	r2,r3,446b4 <sbrk+0x74>
   4469c:	e0bffb17 	ldw	r2,-20(fp)
   446a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   446a4:	e0bffa17 	ldw	r2,-24(fp)
   446a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   446ac:	00bfffc4 	movi	r2,-1
   446b0:	00000b06 	br	446e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   446b4:	d0a00a17 	ldw	r2,-32728(gp)
   446b8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   446bc:	d0e00a17 	ldw	r3,-32728(gp)
   446c0:	e0bfff17 	ldw	r2,-4(fp)
   446c4:	1885883a 	add	r2,r3,r2
   446c8:	d0a00a15 	stw	r2,-32728(gp)
   446cc:	e0bffb17 	ldw	r2,-20(fp)
   446d0:	e0bffc15 	stw	r2,-16(fp)
   446d4:	e0bffc17 	ldw	r2,-16(fp)
   446d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   446dc:	e0bffd17 	ldw	r2,-12(fp)
} 
   446e0:	e037883a 	mov	sp,fp
   446e4:	df000017 	ldw	fp,0(sp)
   446e8:	dec00104 	addi	sp,sp,4
   446ec:	f800283a 	ret

000446f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   446f0:	defffe04 	addi	sp,sp,-8
   446f4:	dfc00115 	stw	ra,4(sp)
   446f8:	df000015 	stw	fp,0(sp)
   446fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44700:	d0a00917 	ldw	r2,-32732(gp)
   44704:	10000326 	beq	r2,zero,44714 <alt_get_errno+0x24>
   44708:	d0a00917 	ldw	r2,-32732(gp)
   4470c:	103ee83a 	callr	r2
   44710:	00000106 	br	44718 <alt_get_errno+0x28>
   44714:	d0a6ac04 	addi	r2,gp,-25936
}
   44718:	e037883a 	mov	sp,fp
   4471c:	dfc00117 	ldw	ra,4(sp)
   44720:	df000017 	ldw	fp,0(sp)
   44724:	dec00204 	addi	sp,sp,8
   44728:	f800283a 	ret

0004472c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4472c:	defff904 	addi	sp,sp,-28
   44730:	dfc00615 	stw	ra,24(sp)
   44734:	df000515 	stw	fp,20(sp)
   44738:	df000504 	addi	fp,sp,20
   4473c:	e13ffd15 	stw	r4,-12(fp)
   44740:	e17ffe15 	stw	r5,-8(fp)
   44744:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44748:	e0bffd17 	ldw	r2,-12(fp)
   4474c:	10000816 	blt	r2,zero,44770 <write+0x44>
   44750:	01400304 	movi	r5,12
   44754:	e13ffd17 	ldw	r4,-12(fp)
   44758:	0043e700 	call	43e70 <__mulsi3>
   4475c:	1007883a 	mov	r3,r2
   44760:	00800134 	movhi	r2,4
   44764:	109b7504 	addi	r2,r2,28116
   44768:	1885883a 	add	r2,r3,r2
   4476c:	00000106 	br	44774 <write+0x48>
   44770:	0005883a 	mov	r2,zero
   44774:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   44778:	e0bffb17 	ldw	r2,-20(fp)
   4477c:	10002126 	beq	r2,zero,44804 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   44780:	e0bffb17 	ldw	r2,-20(fp)
   44784:	10800217 	ldw	r2,8(r2)
   44788:	108000cc 	andi	r2,r2,3
   4478c:	10001826 	beq	r2,zero,447f0 <write+0xc4>
   44790:	e0bffb17 	ldw	r2,-20(fp)
   44794:	10800017 	ldw	r2,0(r2)
   44798:	10800617 	ldw	r2,24(r2)
   4479c:	10001426 	beq	r2,zero,447f0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   447a0:	e0bffb17 	ldw	r2,-20(fp)
   447a4:	10800017 	ldw	r2,0(r2)
   447a8:	10800617 	ldw	r2,24(r2)
   447ac:	e0ffff17 	ldw	r3,-4(fp)
   447b0:	180d883a 	mov	r6,r3
   447b4:	e17ffe17 	ldw	r5,-8(fp)
   447b8:	e13ffb17 	ldw	r4,-20(fp)
   447bc:	103ee83a 	callr	r2
   447c0:	e0bffc15 	stw	r2,-16(fp)
   447c4:	e0bffc17 	ldw	r2,-16(fp)
   447c8:	1000070e 	bge	r2,zero,447e8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   447cc:	00446f00 	call	446f0 <alt_get_errno>
   447d0:	1007883a 	mov	r3,r2
   447d4:	e0bffc17 	ldw	r2,-16(fp)
   447d8:	0085c83a 	sub	r2,zero,r2
   447dc:	18800015 	stw	r2,0(r3)
        return -1;
   447e0:	00bfffc4 	movi	r2,-1
   447e4:	00000c06 	br	44818 <write+0xec>
      }
      return rval;
   447e8:	e0bffc17 	ldw	r2,-16(fp)
   447ec:	00000a06 	br	44818 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   447f0:	00446f00 	call	446f0 <alt_get_errno>
   447f4:	1007883a 	mov	r3,r2
   447f8:	00800344 	movi	r2,13
   447fc:	18800015 	stw	r2,0(r3)
   44800:	00000406 	br	44814 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   44804:	00446f00 	call	446f0 <alt_get_errno>
   44808:	1007883a 	mov	r3,r2
   4480c:	00801444 	movi	r2,81
   44810:	18800015 	stw	r2,0(r3)
  }
  return -1;
   44814:	00bfffc4 	movi	r2,-1
}
   44818:	e037883a 	mov	sp,fp
   4481c:	dfc00117 	ldw	ra,4(sp)
   44820:	df000017 	ldw	fp,0(sp)
   44824:	dec00204 	addi	sp,sp,8
   44828:	f800283a 	ret

0004482c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4482c:	defffd04 	addi	sp,sp,-12
   44830:	dfc00215 	stw	ra,8(sp)
   44834:	df000115 	stw	fp,4(sp)
   44838:	df000104 	addi	fp,sp,4
   4483c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   44840:	d1600604 	addi	r5,gp,-32744
   44844:	e13fff17 	ldw	r4,-4(fp)
   44848:	00454d40 	call	454d4 <alt_dev_llist_insert>
}
   4484c:	e037883a 	mov	sp,fp
   44850:	dfc00117 	ldw	ra,4(sp)
   44854:	df000017 	ldw	fp,0(sp)
   44858:	dec00204 	addi	sp,sp,8
   4485c:	f800283a 	ret

00044860 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   44860:	defffd04 	addi	sp,sp,-12
   44864:	dfc00215 	stw	ra,8(sp)
   44868:	df000115 	stw	fp,4(sp)
   4486c:	df000104 	addi	fp,sp,4
   44870:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   44874:	0045e800 	call	45e80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   44878:	00800044 	movi	r2,1
   4487c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   44880:	0001883a 	nop
   44884:	e037883a 	mov	sp,fp
   44888:	dfc00117 	ldw	ra,4(sp)
   4488c:	df000017 	ldw	fp,0(sp)
   44890:	dec00204 	addi	sp,sp,8
   44894:	f800283a 	ret

00044898 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   44898:	defffe04 	addi	sp,sp,-8
   4489c:	dfc00115 	stw	ra,4(sp)
   448a0:	df000015 	stw	fp,0(sp)
   448a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   448a8:	000d883a 	mov	r6,zero
   448ac:	000b883a 	mov	r5,zero
   448b0:	01000134 	movhi	r4,4
   448b4:	211bdf04 	addi	r4,r4,28540
   448b8:	0044a480 	call	44a48 <altera_avalon_jtag_uart_init>
   448bc:	01000134 	movhi	r4,4
   448c0:	211bd504 	addi	r4,r4,28500
   448c4:	004482c0 	call	4482c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   448c8:	0001883a 	nop
}
   448cc:	0001883a 	nop
   448d0:	e037883a 	mov	sp,fp
   448d4:	dfc00117 	ldw	ra,4(sp)
   448d8:	df000017 	ldw	fp,0(sp)
   448dc:	dec00204 	addi	sp,sp,8
   448e0:	f800283a 	ret

000448e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   448e4:	defffa04 	addi	sp,sp,-24
   448e8:	dfc00515 	stw	ra,20(sp)
   448ec:	df000415 	stw	fp,16(sp)
   448f0:	df000404 	addi	fp,sp,16
   448f4:	e13ffd15 	stw	r4,-12(fp)
   448f8:	e17ffe15 	stw	r5,-8(fp)
   448fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44900:	e0bffd17 	ldw	r2,-12(fp)
   44904:	10800017 	ldw	r2,0(r2)
   44908:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4490c:	e0bffc17 	ldw	r2,-16(fp)
   44910:	10c00a04 	addi	r3,r2,40
   44914:	e0bffd17 	ldw	r2,-12(fp)
   44918:	10800217 	ldw	r2,8(r2)
   4491c:	100f883a 	mov	r7,r2
   44920:	e1bfff17 	ldw	r6,-4(fp)
   44924:	e17ffe17 	ldw	r5,-8(fp)
   44928:	1809883a 	mov	r4,r3
   4492c:	0044f0c0 	call	44f0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44930:	e037883a 	mov	sp,fp
   44934:	dfc00117 	ldw	ra,4(sp)
   44938:	df000017 	ldw	fp,0(sp)
   4493c:	dec00204 	addi	sp,sp,8
   44940:	f800283a 	ret

00044944 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44944:	defffa04 	addi	sp,sp,-24
   44948:	dfc00515 	stw	ra,20(sp)
   4494c:	df000415 	stw	fp,16(sp)
   44950:	df000404 	addi	fp,sp,16
   44954:	e13ffd15 	stw	r4,-12(fp)
   44958:	e17ffe15 	stw	r5,-8(fp)
   4495c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44960:	e0bffd17 	ldw	r2,-12(fp)
   44964:	10800017 	ldw	r2,0(r2)
   44968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4496c:	e0bffc17 	ldw	r2,-16(fp)
   44970:	10c00a04 	addi	r3,r2,40
   44974:	e0bffd17 	ldw	r2,-12(fp)
   44978:	10800217 	ldw	r2,8(r2)
   4497c:	100f883a 	mov	r7,r2
   44980:	e1bfff17 	ldw	r6,-4(fp)
   44984:	e17ffe17 	ldw	r5,-8(fp)
   44988:	1809883a 	mov	r4,r3
   4498c:	00451280 	call	45128 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44990:	e037883a 	mov	sp,fp
   44994:	dfc00117 	ldw	ra,4(sp)
   44998:	df000017 	ldw	fp,0(sp)
   4499c:	dec00204 	addi	sp,sp,8
   449a0:	f800283a 	ret

000449a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   449a4:	defffc04 	addi	sp,sp,-16
   449a8:	dfc00315 	stw	ra,12(sp)
   449ac:	df000215 	stw	fp,8(sp)
   449b0:	df000204 	addi	fp,sp,8
   449b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   449b8:	e0bfff17 	ldw	r2,-4(fp)
   449bc:	10800017 	ldw	r2,0(r2)
   449c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   449c4:	e0bffe17 	ldw	r2,-8(fp)
   449c8:	10c00a04 	addi	r3,r2,40
   449cc:	e0bfff17 	ldw	r2,-4(fp)
   449d0:	10800217 	ldw	r2,8(r2)
   449d4:	100b883a 	mov	r5,r2
   449d8:	1809883a 	mov	r4,r3
   449dc:	0044db40 	call	44db4 <altera_avalon_jtag_uart_close>
}
   449e0:	e037883a 	mov	sp,fp
   449e4:	dfc00117 	ldw	ra,4(sp)
   449e8:	df000017 	ldw	fp,0(sp)
   449ec:	dec00204 	addi	sp,sp,8
   449f0:	f800283a 	ret

000449f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   449f4:	defffa04 	addi	sp,sp,-24
   449f8:	dfc00515 	stw	ra,20(sp)
   449fc:	df000415 	stw	fp,16(sp)
   44a00:	df000404 	addi	fp,sp,16
   44a04:	e13ffd15 	stw	r4,-12(fp)
   44a08:	e17ffe15 	stw	r5,-8(fp)
   44a0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   44a10:	e0bffd17 	ldw	r2,-12(fp)
   44a14:	10800017 	ldw	r2,0(r2)
   44a18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44a1c:	e0bffc17 	ldw	r2,-16(fp)
   44a20:	10800a04 	addi	r2,r2,40
   44a24:	e1bfff17 	ldw	r6,-4(fp)
   44a28:	e17ffe17 	ldw	r5,-8(fp)
   44a2c:	1009883a 	mov	r4,r2
   44a30:	0044e1c0 	call	44e1c <altera_avalon_jtag_uart_ioctl>
}
   44a34:	e037883a 	mov	sp,fp
   44a38:	dfc00117 	ldw	ra,4(sp)
   44a3c:	df000017 	ldw	fp,0(sp)
   44a40:	dec00204 	addi	sp,sp,8
   44a44:	f800283a 	ret

00044a48 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   44a48:	defffa04 	addi	sp,sp,-24
   44a4c:	dfc00515 	stw	ra,20(sp)
   44a50:	df000415 	stw	fp,16(sp)
   44a54:	df000404 	addi	fp,sp,16
   44a58:	e13ffd15 	stw	r4,-12(fp)
   44a5c:	e17ffe15 	stw	r5,-8(fp)
   44a60:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44a64:	e0bffd17 	ldw	r2,-12(fp)
   44a68:	00c00044 	movi	r3,1
   44a6c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44a70:	e0bffd17 	ldw	r2,-12(fp)
   44a74:	10800017 	ldw	r2,0(r2)
   44a78:	10800104 	addi	r2,r2,4
   44a7c:	1007883a 	mov	r3,r2
   44a80:	e0bffd17 	ldw	r2,-12(fp)
   44a84:	10800817 	ldw	r2,32(r2)
   44a88:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44a8c:	e0bffe17 	ldw	r2,-8(fp)
   44a90:	e0ffff17 	ldw	r3,-4(fp)
   44a94:	d8000015 	stw	zero,0(sp)
   44a98:	e1fffd17 	ldw	r7,-12(fp)
   44a9c:	01800134 	movhi	r6,4
   44aa0:	3192c204 	addi	r6,r6,19208
   44aa4:	180b883a 	mov	r5,r3
   44aa8:	1009883a 	mov	r4,r2
   44aac:	00456580 	call	45658 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   44ab0:	e0bffd17 	ldw	r2,-12(fp)
   44ab4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   44ab8:	e0bffd17 	ldw	r2,-12(fp)
   44abc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44ac0:	d0e6b117 	ldw	r3,-25916(gp)
   44ac4:	e1fffd17 	ldw	r7,-12(fp)
   44ac8:	01800134 	movhi	r6,4
   44acc:	31934504 	addi	r6,r6,19732
   44ad0:	180b883a 	mov	r5,r3
   44ad4:	1009883a 	mov	r4,r2
   44ad8:	004534c0 	call	4534c <alt_alarm_start>
   44adc:	1000040e 	bge	r2,zero,44af0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   44ae0:	e0fffd17 	ldw	r3,-12(fp)
   44ae4:	00a00034 	movhi	r2,32768
   44ae8:	10bfffc4 	addi	r2,r2,-1
   44aec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   44af0:	0001883a 	nop
   44af4:	e037883a 	mov	sp,fp
   44af8:	dfc00117 	ldw	ra,4(sp)
   44afc:	df000017 	ldw	fp,0(sp)
   44b00:	dec00204 	addi	sp,sp,8
   44b04:	f800283a 	ret

00044b08 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44b08:	defff804 	addi	sp,sp,-32
   44b0c:	df000715 	stw	fp,28(sp)
   44b10:	df000704 	addi	fp,sp,28
   44b14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44b18:	e0bfff17 	ldw	r2,-4(fp)
   44b1c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44b20:	e0bffb17 	ldw	r2,-20(fp)
   44b24:	10800017 	ldw	r2,0(r2)
   44b28:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44b2c:	e0bffc17 	ldw	r2,-16(fp)
   44b30:	10800104 	addi	r2,r2,4
   44b34:	10800037 	ldwio	r2,0(r2)
   44b38:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44b3c:	e0bffd17 	ldw	r2,-12(fp)
   44b40:	1080c00c 	andi	r2,r2,768
   44b44:	10006d26 	beq	r2,zero,44cfc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44b48:	e0bffd17 	ldw	r2,-12(fp)
   44b4c:	1080400c 	andi	r2,r2,256
   44b50:	10003526 	beq	r2,zero,44c28 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44b54:	00800074 	movhi	r2,1
   44b58:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44b5c:	e0bffb17 	ldw	r2,-20(fp)
   44b60:	10800a17 	ldw	r2,40(r2)
   44b64:	10800044 	addi	r2,r2,1
   44b68:	1081ffcc 	andi	r2,r2,2047
   44b6c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   44b70:	e0bffb17 	ldw	r2,-20(fp)
   44b74:	10c00b17 	ldw	r3,44(r2)
   44b78:	e0bffe17 	ldw	r2,-8(fp)
   44b7c:	18801526 	beq	r3,r2,44bd4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44b80:	e0bffc17 	ldw	r2,-16(fp)
   44b84:	10800037 	ldwio	r2,0(r2)
   44b88:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44b8c:	e0bff917 	ldw	r2,-28(fp)
   44b90:	10a0000c 	andi	r2,r2,32768
   44b94:	10001126 	beq	r2,zero,44bdc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44b98:	e0bffb17 	ldw	r2,-20(fp)
   44b9c:	10800a17 	ldw	r2,40(r2)
   44ba0:	e0fff917 	ldw	r3,-28(fp)
   44ba4:	1809883a 	mov	r4,r3
   44ba8:	e0fffb17 	ldw	r3,-20(fp)
   44bac:	1885883a 	add	r2,r3,r2
   44bb0:	10800e04 	addi	r2,r2,56
   44bb4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44bb8:	e0bffb17 	ldw	r2,-20(fp)
   44bbc:	10800a17 	ldw	r2,40(r2)
   44bc0:	10800044 	addi	r2,r2,1
   44bc4:	10c1ffcc 	andi	r3,r2,2047
   44bc8:	e0bffb17 	ldw	r2,-20(fp)
   44bcc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   44bd0:	003fe206 	br	44b5c <__alt_data_end+0xfffd2b5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   44bd4:	0001883a 	nop
   44bd8:	00000106 	br	44be0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   44bdc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44be0:	e0bff917 	ldw	r2,-28(fp)
   44be4:	10bfffec 	andhi	r2,r2,65535
   44be8:	10000f26 	beq	r2,zero,44c28 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44bec:	e0bffb17 	ldw	r2,-20(fp)
   44bf0:	10c00817 	ldw	r3,32(r2)
   44bf4:	00bfff84 	movi	r2,-2
   44bf8:	1886703a 	and	r3,r3,r2
   44bfc:	e0bffb17 	ldw	r2,-20(fp)
   44c00:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44c04:	e0bffc17 	ldw	r2,-16(fp)
   44c08:	10800104 	addi	r2,r2,4
   44c0c:	1007883a 	mov	r3,r2
   44c10:	e0bffb17 	ldw	r2,-20(fp)
   44c14:	10800817 	ldw	r2,32(r2)
   44c18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44c1c:	e0bffc17 	ldw	r2,-16(fp)
   44c20:	10800104 	addi	r2,r2,4
   44c24:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44c28:	e0bffd17 	ldw	r2,-12(fp)
   44c2c:	1080800c 	andi	r2,r2,512
   44c30:	103fbe26 	beq	r2,zero,44b2c <__alt_data_end+0xfffd2b2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44c34:	e0bffd17 	ldw	r2,-12(fp)
   44c38:	1004d43a 	srli	r2,r2,16
   44c3c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44c40:	00001406 	br	44c94 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44c44:	e0bffc17 	ldw	r2,-16(fp)
   44c48:	e0fffb17 	ldw	r3,-20(fp)
   44c4c:	18c00d17 	ldw	r3,52(r3)
   44c50:	e13ffb17 	ldw	r4,-20(fp)
   44c54:	20c7883a 	add	r3,r4,r3
   44c58:	18c20e04 	addi	r3,r3,2104
   44c5c:	18c00003 	ldbu	r3,0(r3)
   44c60:	18c03fcc 	andi	r3,r3,255
   44c64:	18c0201c 	xori	r3,r3,128
   44c68:	18ffe004 	addi	r3,r3,-128
   44c6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44c70:	e0bffb17 	ldw	r2,-20(fp)
   44c74:	10800d17 	ldw	r2,52(r2)
   44c78:	10800044 	addi	r2,r2,1
   44c7c:	10c1ffcc 	andi	r3,r2,2047
   44c80:	e0bffb17 	ldw	r2,-20(fp)
   44c84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44c88:	e0bffa17 	ldw	r2,-24(fp)
   44c8c:	10bfffc4 	addi	r2,r2,-1
   44c90:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   44c94:	e0bffa17 	ldw	r2,-24(fp)
   44c98:	10000526 	beq	r2,zero,44cb0 <altera_avalon_jtag_uart_irq+0x1a8>
   44c9c:	e0bffb17 	ldw	r2,-20(fp)
   44ca0:	10c00d17 	ldw	r3,52(r2)
   44ca4:	e0bffb17 	ldw	r2,-20(fp)
   44ca8:	10800c17 	ldw	r2,48(r2)
   44cac:	18bfe51e 	bne	r3,r2,44c44 <__alt_data_end+0xfffd2c44>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   44cb0:	e0bffa17 	ldw	r2,-24(fp)
   44cb4:	103f9d26 	beq	r2,zero,44b2c <__alt_data_end+0xfffd2b2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44cb8:	e0bffb17 	ldw	r2,-20(fp)
   44cbc:	10c00817 	ldw	r3,32(r2)
   44cc0:	00bfff44 	movi	r2,-3
   44cc4:	1886703a 	and	r3,r3,r2
   44cc8:	e0bffb17 	ldw	r2,-20(fp)
   44ccc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44cd0:	e0bffb17 	ldw	r2,-20(fp)
   44cd4:	10800017 	ldw	r2,0(r2)
   44cd8:	10800104 	addi	r2,r2,4
   44cdc:	1007883a 	mov	r3,r2
   44ce0:	e0bffb17 	ldw	r2,-20(fp)
   44ce4:	10800817 	ldw	r2,32(r2)
   44ce8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44cec:	e0bffc17 	ldw	r2,-16(fp)
   44cf0:	10800104 	addi	r2,r2,4
   44cf4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44cf8:	003f8c06 	br	44b2c <__alt_data_end+0xfffd2b2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   44cfc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   44d00:	0001883a 	nop
   44d04:	e037883a 	mov	sp,fp
   44d08:	df000017 	ldw	fp,0(sp)
   44d0c:	dec00104 	addi	sp,sp,4
   44d10:	f800283a 	ret

00044d14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44d14:	defff804 	addi	sp,sp,-32
   44d18:	df000715 	stw	fp,28(sp)
   44d1c:	df000704 	addi	fp,sp,28
   44d20:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44d24:	e0bffb17 	ldw	r2,-20(fp)
   44d28:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44d2c:	e0bff917 	ldw	r2,-28(fp)
   44d30:	10800017 	ldw	r2,0(r2)
   44d34:	10800104 	addi	r2,r2,4
   44d38:	10800037 	ldwio	r2,0(r2)
   44d3c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44d40:	e0bffa17 	ldw	r2,-24(fp)
   44d44:	1081000c 	andi	r2,r2,1024
   44d48:	10000b26 	beq	r2,zero,44d78 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44d4c:	e0bff917 	ldw	r2,-28(fp)
   44d50:	10800017 	ldw	r2,0(r2)
   44d54:	10800104 	addi	r2,r2,4
   44d58:	1007883a 	mov	r3,r2
   44d5c:	e0bff917 	ldw	r2,-28(fp)
   44d60:	10800817 	ldw	r2,32(r2)
   44d64:	10810014 	ori	r2,r2,1024
   44d68:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   44d6c:	e0bff917 	ldw	r2,-28(fp)
   44d70:	10000915 	stw	zero,36(r2)
   44d74:	00000a06 	br	44da0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44d78:	e0bff917 	ldw	r2,-28(fp)
   44d7c:	10c00917 	ldw	r3,36(r2)
   44d80:	00a00034 	movhi	r2,32768
   44d84:	10bfff04 	addi	r2,r2,-4
   44d88:	10c00536 	bltu	r2,r3,44da0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   44d8c:	e0bff917 	ldw	r2,-28(fp)
   44d90:	10800917 	ldw	r2,36(r2)
   44d94:	10c00044 	addi	r3,r2,1
   44d98:	e0bff917 	ldw	r2,-28(fp)
   44d9c:	10c00915 	stw	r3,36(r2)
   44da0:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   44da4:	e037883a 	mov	sp,fp
   44da8:	df000017 	ldw	fp,0(sp)
   44dac:	dec00104 	addi	sp,sp,4
   44db0:	f800283a 	ret

00044db4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   44db4:	defffd04 	addi	sp,sp,-12
   44db8:	df000215 	stw	fp,8(sp)
   44dbc:	df000204 	addi	fp,sp,8
   44dc0:	e13ffe15 	stw	r4,-8(fp)
   44dc4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44dc8:	00000506 	br	44de0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44dcc:	e0bfff17 	ldw	r2,-4(fp)
   44dd0:	1090000c 	andi	r2,r2,16384
   44dd4:	10000226 	beq	r2,zero,44de0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44dd8:	00bffd44 	movi	r2,-11
   44ddc:	00000b06 	br	44e0c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44de0:	e0bffe17 	ldw	r2,-8(fp)
   44de4:	10c00d17 	ldw	r3,52(r2)
   44de8:	e0bffe17 	ldw	r2,-8(fp)
   44dec:	10800c17 	ldw	r2,48(r2)
   44df0:	18800526 	beq	r3,r2,44e08 <altera_avalon_jtag_uart_close+0x54>
   44df4:	e0bffe17 	ldw	r2,-8(fp)
   44df8:	10c00917 	ldw	r3,36(r2)
   44dfc:	e0bffe17 	ldw	r2,-8(fp)
   44e00:	10800117 	ldw	r2,4(r2)
   44e04:	18bff136 	bltu	r3,r2,44dcc <__alt_data_end+0xfffd2dcc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44e08:	0005883a 	mov	r2,zero
}
   44e0c:	e037883a 	mov	sp,fp
   44e10:	df000017 	ldw	fp,0(sp)
   44e14:	dec00104 	addi	sp,sp,4
   44e18:	f800283a 	ret

00044e1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44e1c:	defffa04 	addi	sp,sp,-24
   44e20:	df000515 	stw	fp,20(sp)
   44e24:	df000504 	addi	fp,sp,20
   44e28:	e13ffd15 	stw	r4,-12(fp)
   44e2c:	e17ffe15 	stw	r5,-8(fp)
   44e30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   44e34:	00bff9c4 	movi	r2,-25
   44e38:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44e3c:	e0bffe17 	ldw	r2,-8(fp)
   44e40:	10da8060 	cmpeqi	r3,r2,27137
   44e44:	1800031e 	bne	r3,zero,44e54 <altera_avalon_jtag_uart_ioctl+0x38>
   44e48:	109a80a0 	cmpeqi	r2,r2,27138
   44e4c:	1000181e 	bne	r2,zero,44eb0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   44e50:	00002906 	br	44ef8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44e54:	e0bffd17 	ldw	r2,-12(fp)
   44e58:	10c00117 	ldw	r3,4(r2)
   44e5c:	00a00034 	movhi	r2,32768
   44e60:	10bfffc4 	addi	r2,r2,-1
   44e64:	18802126 	beq	r3,r2,44eec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   44e68:	e0bfff17 	ldw	r2,-4(fp)
   44e6c:	10800017 	ldw	r2,0(r2)
   44e70:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44e74:	e0bffc17 	ldw	r2,-16(fp)
   44e78:	10800090 	cmplti	r2,r2,2
   44e7c:	1000061e 	bne	r2,zero,44e98 <altera_avalon_jtag_uart_ioctl+0x7c>
   44e80:	e0fffc17 	ldw	r3,-16(fp)
   44e84:	00a00034 	movhi	r2,32768
   44e88:	10bfffc4 	addi	r2,r2,-1
   44e8c:	18800226 	beq	r3,r2,44e98 <altera_avalon_jtag_uart_ioctl+0x7c>
   44e90:	e0bffc17 	ldw	r2,-16(fp)
   44e94:	00000206 	br	44ea0 <altera_avalon_jtag_uart_ioctl+0x84>
   44e98:	00a00034 	movhi	r2,32768
   44e9c:	10bfff84 	addi	r2,r2,-2
   44ea0:	e0fffd17 	ldw	r3,-12(fp)
   44ea4:	18800115 	stw	r2,4(r3)
      rc = 0;
   44ea8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44eac:	00000f06 	br	44eec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   44eb0:	e0bffd17 	ldw	r2,-12(fp)
   44eb4:	10c00117 	ldw	r3,4(r2)
   44eb8:	00a00034 	movhi	r2,32768
   44ebc:	10bfffc4 	addi	r2,r2,-1
   44ec0:	18800c26 	beq	r3,r2,44ef4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44ec4:	e0bffd17 	ldw	r2,-12(fp)
   44ec8:	10c00917 	ldw	r3,36(r2)
   44ecc:	e0bffd17 	ldw	r2,-12(fp)
   44ed0:	10800117 	ldw	r2,4(r2)
   44ed4:	1885803a 	cmpltu	r2,r3,r2
   44ed8:	10c03fcc 	andi	r3,r2,255
   44edc:	e0bfff17 	ldw	r2,-4(fp)
   44ee0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44ee4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44ee8:	00000206 	br	44ef4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   44eec:	0001883a 	nop
   44ef0:	00000106 	br	44ef8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44ef4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44ef8:	e0bffb17 	ldw	r2,-20(fp)
}
   44efc:	e037883a 	mov	sp,fp
   44f00:	df000017 	ldw	fp,0(sp)
   44f04:	dec00104 	addi	sp,sp,4
   44f08:	f800283a 	ret

00044f0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44f0c:	defff304 	addi	sp,sp,-52
   44f10:	dfc00c15 	stw	ra,48(sp)
   44f14:	df000b15 	stw	fp,44(sp)
   44f18:	df000b04 	addi	fp,sp,44
   44f1c:	e13ffc15 	stw	r4,-16(fp)
   44f20:	e17ffd15 	stw	r5,-12(fp)
   44f24:	e1bffe15 	stw	r6,-8(fp)
   44f28:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44f2c:	e0bffd17 	ldw	r2,-12(fp)
   44f30:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44f34:	00004706 	br	45054 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44f38:	e0bffc17 	ldw	r2,-16(fp)
   44f3c:	10800a17 	ldw	r2,40(r2)
   44f40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44f44:	e0bffc17 	ldw	r2,-16(fp)
   44f48:	10800b17 	ldw	r2,44(r2)
   44f4c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44f50:	e0fff717 	ldw	r3,-36(fp)
   44f54:	e0bff817 	ldw	r2,-32(fp)
   44f58:	18800536 	bltu	r3,r2,44f70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44f5c:	e0fff717 	ldw	r3,-36(fp)
   44f60:	e0bff817 	ldw	r2,-32(fp)
   44f64:	1885c83a 	sub	r2,r3,r2
   44f68:	e0bff615 	stw	r2,-40(fp)
   44f6c:	00000406 	br	44f80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44f70:	00c20004 	movi	r3,2048
   44f74:	e0bff817 	ldw	r2,-32(fp)
   44f78:	1885c83a 	sub	r2,r3,r2
   44f7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44f80:	e0bff617 	ldw	r2,-40(fp)
   44f84:	10001e26 	beq	r2,zero,45000 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44f88:	e0fffe17 	ldw	r3,-8(fp)
   44f8c:	e0bff617 	ldw	r2,-40(fp)
   44f90:	1880022e 	bgeu	r3,r2,44f9c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   44f94:	e0bffe17 	ldw	r2,-8(fp)
   44f98:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44f9c:	e0bffc17 	ldw	r2,-16(fp)
   44fa0:	10c00e04 	addi	r3,r2,56
   44fa4:	e0bff817 	ldw	r2,-32(fp)
   44fa8:	1885883a 	add	r2,r3,r2
   44fac:	e1bff617 	ldw	r6,-40(fp)
   44fb0:	100b883a 	mov	r5,r2
   44fb4:	e13ff517 	ldw	r4,-44(fp)
   44fb8:	00424e80 	call	424e8 <memcpy>
      ptr   += n;
   44fbc:	e0fff517 	ldw	r3,-44(fp)
   44fc0:	e0bff617 	ldw	r2,-40(fp)
   44fc4:	1885883a 	add	r2,r3,r2
   44fc8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   44fcc:	e0fffe17 	ldw	r3,-8(fp)
   44fd0:	e0bff617 	ldw	r2,-40(fp)
   44fd4:	1885c83a 	sub	r2,r3,r2
   44fd8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44fdc:	e0fff817 	ldw	r3,-32(fp)
   44fe0:	e0bff617 	ldw	r2,-40(fp)
   44fe4:	1885883a 	add	r2,r3,r2
   44fe8:	10c1ffcc 	andi	r3,r2,2047
   44fec:	e0bffc17 	ldw	r2,-16(fp)
   44ff0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44ff4:	e0bffe17 	ldw	r2,-8(fp)
   44ff8:	00bfcf16 	blt	zero,r2,44f38 <__alt_data_end+0xfffd2f38>
   44ffc:	00000106 	br	45004 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   45000:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   45004:	e0fff517 	ldw	r3,-44(fp)
   45008:	e0bffd17 	ldw	r2,-12(fp)
   4500c:	1880141e 	bne	r3,r2,45060 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   45010:	e0bfff17 	ldw	r2,-4(fp)
   45014:	1090000c 	andi	r2,r2,16384
   45018:	1000131e 	bne	r2,zero,45068 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4501c:	0001883a 	nop
   45020:	e0bffc17 	ldw	r2,-16(fp)
   45024:	10c00a17 	ldw	r3,40(r2)
   45028:	e0bff717 	ldw	r2,-36(fp)
   4502c:	1880051e 	bne	r3,r2,45044 <altera_avalon_jtag_uart_read+0x138>
   45030:	e0bffc17 	ldw	r2,-16(fp)
   45034:	10c00917 	ldw	r3,36(r2)
   45038:	e0bffc17 	ldw	r2,-16(fp)
   4503c:	10800117 	ldw	r2,4(r2)
   45040:	18bff736 	bltu	r3,r2,45020 <__alt_data_end+0xfffd3020>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   45044:	e0bffc17 	ldw	r2,-16(fp)
   45048:	10c00a17 	ldw	r3,40(r2)
   4504c:	e0bff717 	ldw	r2,-36(fp)
   45050:	18800726 	beq	r3,r2,45070 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   45054:	e0bffe17 	ldw	r2,-8(fp)
   45058:	00bfb716 	blt	zero,r2,44f38 <__alt_data_end+0xfffd2f38>
   4505c:	00000506 	br	45074 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   45060:	0001883a 	nop
   45064:	00000306 	br	45074 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   45068:	0001883a 	nop
   4506c:	00000106 	br	45074 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   45070:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   45074:	e0fff517 	ldw	r3,-44(fp)
   45078:	e0bffd17 	ldw	r2,-12(fp)
   4507c:	18801826 	beq	r3,r2,450e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45080:	0005303a 	rdctl	r2,status
   45084:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45088:	e0fffb17 	ldw	r3,-20(fp)
   4508c:	00bfff84 	movi	r2,-2
   45090:	1884703a 	and	r2,r3,r2
   45094:	1001703a 	wrctl	status,r2
  
  return context;
   45098:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4509c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   450a0:	e0bffc17 	ldw	r2,-16(fp)
   450a4:	10800817 	ldw	r2,32(r2)
   450a8:	10c00054 	ori	r3,r2,1
   450ac:	e0bffc17 	ldw	r2,-16(fp)
   450b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   450b4:	e0bffc17 	ldw	r2,-16(fp)
   450b8:	10800017 	ldw	r2,0(r2)
   450bc:	10800104 	addi	r2,r2,4
   450c0:	1007883a 	mov	r3,r2
   450c4:	e0bffc17 	ldw	r2,-16(fp)
   450c8:	10800817 	ldw	r2,32(r2)
   450cc:	18800035 	stwio	r2,0(r3)
   450d0:	e0bffa17 	ldw	r2,-24(fp)
   450d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   450d8:	e0bff917 	ldw	r2,-28(fp)
   450dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   450e0:	e0fff517 	ldw	r3,-44(fp)
   450e4:	e0bffd17 	ldw	r2,-12(fp)
   450e8:	18800426 	beq	r3,r2,450fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   450ec:	e0fff517 	ldw	r3,-44(fp)
   450f0:	e0bffd17 	ldw	r2,-12(fp)
   450f4:	1885c83a 	sub	r2,r3,r2
   450f8:	00000606 	br	45114 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   450fc:	e0bfff17 	ldw	r2,-4(fp)
   45100:	1090000c 	andi	r2,r2,16384
   45104:	10000226 	beq	r2,zero,45110 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   45108:	00bffd44 	movi	r2,-11
   4510c:	00000106 	br	45114 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   45110:	00bffec4 	movi	r2,-5
}
   45114:	e037883a 	mov	sp,fp
   45118:	dfc00117 	ldw	ra,4(sp)
   4511c:	df000017 	ldw	fp,0(sp)
   45120:	dec00204 	addi	sp,sp,8
   45124:	f800283a 	ret

00045128 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   45128:	defff304 	addi	sp,sp,-52
   4512c:	dfc00c15 	stw	ra,48(sp)
   45130:	df000b15 	stw	fp,44(sp)
   45134:	df000b04 	addi	fp,sp,44
   45138:	e13ffc15 	stw	r4,-16(fp)
   4513c:	e17ffd15 	stw	r5,-12(fp)
   45140:	e1bffe15 	stw	r6,-8(fp)
   45144:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   45148:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4514c:	e0bffd17 	ldw	r2,-12(fp)
   45150:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   45154:	00003706 	br	45234 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   45158:	e0bffc17 	ldw	r2,-16(fp)
   4515c:	10800c17 	ldw	r2,48(r2)
   45160:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   45164:	e0bffc17 	ldw	r2,-16(fp)
   45168:	10800d17 	ldw	r2,52(r2)
   4516c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   45170:	e0fff917 	ldw	r3,-28(fp)
   45174:	e0bff517 	ldw	r2,-44(fp)
   45178:	1880062e 	bgeu	r3,r2,45194 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4517c:	e0fff517 	ldw	r3,-44(fp)
   45180:	e0bff917 	ldw	r2,-28(fp)
   45184:	1885c83a 	sub	r2,r3,r2
   45188:	10bfffc4 	addi	r2,r2,-1
   4518c:	e0bff615 	stw	r2,-40(fp)
   45190:	00000b06 	br	451c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   45194:	e0bff517 	ldw	r2,-44(fp)
   45198:	10000526 	beq	r2,zero,451b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4519c:	00c20004 	movi	r3,2048
   451a0:	e0bff917 	ldw	r2,-28(fp)
   451a4:	1885c83a 	sub	r2,r3,r2
   451a8:	e0bff615 	stw	r2,-40(fp)
   451ac:	00000406 	br	451c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   451b0:	00c1ffc4 	movi	r3,2047
   451b4:	e0bff917 	ldw	r2,-28(fp)
   451b8:	1885c83a 	sub	r2,r3,r2
   451bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   451c0:	e0bff617 	ldw	r2,-40(fp)
   451c4:	10001e26 	beq	r2,zero,45240 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   451c8:	e0fffe17 	ldw	r3,-8(fp)
   451cc:	e0bff617 	ldw	r2,-40(fp)
   451d0:	1880022e 	bgeu	r3,r2,451dc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   451d4:	e0bffe17 	ldw	r2,-8(fp)
   451d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   451dc:	e0bffc17 	ldw	r2,-16(fp)
   451e0:	10c20e04 	addi	r3,r2,2104
   451e4:	e0bff917 	ldw	r2,-28(fp)
   451e8:	1885883a 	add	r2,r3,r2
   451ec:	e1bff617 	ldw	r6,-40(fp)
   451f0:	e17ffd17 	ldw	r5,-12(fp)
   451f4:	1009883a 	mov	r4,r2
   451f8:	00424e80 	call	424e8 <memcpy>
      ptr   += n;
   451fc:	e0fffd17 	ldw	r3,-12(fp)
   45200:	e0bff617 	ldw	r2,-40(fp)
   45204:	1885883a 	add	r2,r3,r2
   45208:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4520c:	e0fffe17 	ldw	r3,-8(fp)
   45210:	e0bff617 	ldw	r2,-40(fp)
   45214:	1885c83a 	sub	r2,r3,r2
   45218:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4521c:	e0fff917 	ldw	r3,-28(fp)
   45220:	e0bff617 	ldw	r2,-40(fp)
   45224:	1885883a 	add	r2,r3,r2
   45228:	10c1ffcc 	andi	r3,r2,2047
   4522c:	e0bffc17 	ldw	r2,-16(fp)
   45230:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   45234:	e0bffe17 	ldw	r2,-8(fp)
   45238:	00bfc716 	blt	zero,r2,45158 <__alt_data_end+0xfffd3158>
   4523c:	00000106 	br	45244 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   45240:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45244:	0005303a 	rdctl	r2,status
   45248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4524c:	e0fffb17 	ldw	r3,-20(fp)
   45250:	00bfff84 	movi	r2,-2
   45254:	1884703a 	and	r2,r3,r2
   45258:	1001703a 	wrctl	status,r2
  
  return context;
   4525c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   45260:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   45264:	e0bffc17 	ldw	r2,-16(fp)
   45268:	10800817 	ldw	r2,32(r2)
   4526c:	10c00094 	ori	r3,r2,2
   45270:	e0bffc17 	ldw	r2,-16(fp)
   45274:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   45278:	e0bffc17 	ldw	r2,-16(fp)
   4527c:	10800017 	ldw	r2,0(r2)
   45280:	10800104 	addi	r2,r2,4
   45284:	1007883a 	mov	r3,r2
   45288:	e0bffc17 	ldw	r2,-16(fp)
   4528c:	10800817 	ldw	r2,32(r2)
   45290:	18800035 	stwio	r2,0(r3)
   45294:	e0bffa17 	ldw	r2,-24(fp)
   45298:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4529c:	e0bff817 	ldw	r2,-32(fp)
   452a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   452a4:	e0bffe17 	ldw	r2,-8(fp)
   452a8:	0080100e 	bge	zero,r2,452ec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   452ac:	e0bfff17 	ldw	r2,-4(fp)
   452b0:	1090000c 	andi	r2,r2,16384
   452b4:	1000101e 	bne	r2,zero,452f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   452b8:	0001883a 	nop
   452bc:	e0bffc17 	ldw	r2,-16(fp)
   452c0:	10c00d17 	ldw	r3,52(r2)
   452c4:	e0bff517 	ldw	r2,-44(fp)
   452c8:	1880051e 	bne	r3,r2,452e0 <altera_avalon_jtag_uart_write+0x1b8>
   452cc:	e0bffc17 	ldw	r2,-16(fp)
   452d0:	10c00917 	ldw	r3,36(r2)
   452d4:	e0bffc17 	ldw	r2,-16(fp)
   452d8:	10800117 	ldw	r2,4(r2)
   452dc:	18bff736 	bltu	r3,r2,452bc <__alt_data_end+0xfffd32bc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   452e0:	e0bffc17 	ldw	r2,-16(fp)
   452e4:	10800917 	ldw	r2,36(r2)
   452e8:	1000051e 	bne	r2,zero,45300 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   452ec:	e0bffe17 	ldw	r2,-8(fp)
   452f0:	00bfd016 	blt	zero,r2,45234 <__alt_data_end+0xfffd3234>
   452f4:	00000306 	br	45304 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   452f8:	0001883a 	nop
   452fc:	00000106 	br	45304 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   45300:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   45304:	e0fffd17 	ldw	r3,-12(fp)
   45308:	e0bff717 	ldw	r2,-36(fp)
   4530c:	18800426 	beq	r3,r2,45320 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   45310:	e0fffd17 	ldw	r3,-12(fp)
   45314:	e0bff717 	ldw	r2,-36(fp)
   45318:	1885c83a 	sub	r2,r3,r2
   4531c:	00000606 	br	45338 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   45320:	e0bfff17 	ldw	r2,-4(fp)
   45324:	1090000c 	andi	r2,r2,16384
   45328:	10000226 	beq	r2,zero,45334 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4532c:	00bffd44 	movi	r2,-11
   45330:	00000106 	br	45338 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   45334:	00bffec4 	movi	r2,-5
}
   45338:	e037883a 	mov	sp,fp
   4533c:	dfc00117 	ldw	ra,4(sp)
   45340:	df000017 	ldw	fp,0(sp)
   45344:	dec00204 	addi	sp,sp,8
   45348:	f800283a 	ret

0004534c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4534c:	defff504 	addi	sp,sp,-44
   45350:	df000a15 	stw	fp,40(sp)
   45354:	df000a04 	addi	fp,sp,40
   45358:	e13ffc15 	stw	r4,-16(fp)
   4535c:	e17ffd15 	stw	r5,-12(fp)
   45360:	e1bffe15 	stw	r6,-8(fp)
   45364:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   45368:	e03ff615 	stw	zero,-40(fp)
   4536c:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   45370:	10003c26 	beq	r2,zero,45464 <alt_alarm_start+0x118>
  {
    if (alarm)
   45374:	e0bffc17 	ldw	r2,-16(fp)
   45378:	10003826 	beq	r2,zero,4545c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4537c:	e0bffc17 	ldw	r2,-16(fp)
   45380:	e0fffe17 	ldw	r3,-8(fp)
   45384:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   45388:	e0bffc17 	ldw	r2,-16(fp)
   4538c:	e0ffff17 	ldw	r3,-4(fp)
   45390:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45394:	0005303a 	rdctl	r2,status
   45398:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4539c:	e0fff917 	ldw	r3,-28(fp)
   453a0:	00bfff84 	movi	r2,-2
   453a4:	1884703a 	and	r2,r3,r2
   453a8:	1001703a 	wrctl	status,r2
  
  return context;
   453ac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   453b0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   453b4:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
   453b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   453bc:	e0fffd17 	ldw	r3,-12(fp)
   453c0:	e0bff617 	ldw	r2,-40(fp)
   453c4:	1885883a 	add	r2,r3,r2
   453c8:	10c00044 	addi	r3,r2,1
   453cc:	e0bffc17 	ldw	r2,-16(fp)
   453d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   453d4:	e0bffc17 	ldw	r2,-16(fp)
   453d8:	10c00217 	ldw	r3,8(r2)
   453dc:	e0bff617 	ldw	r2,-40(fp)
   453e0:	1880042e 	bgeu	r3,r2,453f4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   453e4:	e0bffc17 	ldw	r2,-16(fp)
   453e8:	00c00044 	movi	r3,1
   453ec:	10c00405 	stb	r3,16(r2)
   453f0:	00000206 	br	453fc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   453f4:	e0bffc17 	ldw	r2,-16(fp)
   453f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   453fc:	e0bffc17 	ldw	r2,-16(fp)
   45400:	d0e00c04 	addi	r3,gp,-32720
   45404:	e0fffa15 	stw	r3,-24(fp)
   45408:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4540c:	e0bffb17 	ldw	r2,-20(fp)
   45410:	e0fffa17 	ldw	r3,-24(fp)
   45414:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45418:	e0bffa17 	ldw	r2,-24(fp)
   4541c:	10c00017 	ldw	r3,0(r2)
   45420:	e0bffb17 	ldw	r2,-20(fp)
   45424:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45428:	e0bffa17 	ldw	r2,-24(fp)
   4542c:	10800017 	ldw	r2,0(r2)
   45430:	e0fffb17 	ldw	r3,-20(fp)
   45434:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45438:	e0bffa17 	ldw	r2,-24(fp)
   4543c:	e0fffb17 	ldw	r3,-20(fp)
   45440:	10c00015 	stw	r3,0(r2)
   45444:	e0bff817 	ldw	r2,-32(fp)
   45448:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4544c:	e0bff717 	ldw	r2,-36(fp)
   45450:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   45454:	0005883a 	mov	r2,zero
   45458:	00000306 	br	45468 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4545c:	00bffa84 	movi	r2,-22
   45460:	00000106 	br	45468 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   45464:	00bfde84 	movi	r2,-134
  }
}
   45468:	e037883a 	mov	sp,fp
   4546c:	df000017 	ldw	fp,0(sp)
   45470:	dec00104 	addi	sp,sp,4
   45474:	f800283a 	ret

00045478 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   45478:	deffff04 	addi	sp,sp,-4
   4547c:	df000015 	stw	fp,0(sp)
   45480:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45484:	0001883a 	nop
   45488:	e037883a 	mov	sp,fp
   4548c:	df000017 	ldw	fp,0(sp)
   45490:	dec00104 	addi	sp,sp,4
   45494:	f800283a 	ret

00045498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45498:	defffe04 	addi	sp,sp,-8
   4549c:	dfc00115 	stw	ra,4(sp)
   454a0:	df000015 	stw	fp,0(sp)
   454a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   454a8:	d0a00917 	ldw	r2,-32732(gp)
   454ac:	10000326 	beq	r2,zero,454bc <alt_get_errno+0x24>
   454b0:	d0a00917 	ldw	r2,-32732(gp)
   454b4:	103ee83a 	callr	r2
   454b8:	00000106 	br	454c0 <alt_get_errno+0x28>
   454bc:	d0a6ac04 	addi	r2,gp,-25936
}
   454c0:	e037883a 	mov	sp,fp
   454c4:	dfc00117 	ldw	ra,4(sp)
   454c8:	df000017 	ldw	fp,0(sp)
   454cc:	dec00204 	addi	sp,sp,8
   454d0:	f800283a 	ret

000454d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   454d4:	defffa04 	addi	sp,sp,-24
   454d8:	dfc00515 	stw	ra,20(sp)
   454dc:	df000415 	stw	fp,16(sp)
   454e0:	df000404 	addi	fp,sp,16
   454e4:	e13ffe15 	stw	r4,-8(fp)
   454e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   454ec:	e0bffe17 	ldw	r2,-8(fp)
   454f0:	10000326 	beq	r2,zero,45500 <alt_dev_llist_insert+0x2c>
   454f4:	e0bffe17 	ldw	r2,-8(fp)
   454f8:	10800217 	ldw	r2,8(r2)
   454fc:	1000061e 	bne	r2,zero,45518 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   45500:	00454980 	call	45498 <alt_get_errno>
   45504:	1007883a 	mov	r3,r2
   45508:	00800584 	movi	r2,22
   4550c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   45510:	00bffa84 	movi	r2,-22
   45514:	00001306 	br	45564 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45518:	e0bffe17 	ldw	r2,-8(fp)
   4551c:	e0ffff17 	ldw	r3,-4(fp)
   45520:	e0fffc15 	stw	r3,-16(fp)
   45524:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45528:	e0bffd17 	ldw	r2,-12(fp)
   4552c:	e0fffc17 	ldw	r3,-16(fp)
   45530:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45534:	e0bffc17 	ldw	r2,-16(fp)
   45538:	10c00017 	ldw	r3,0(r2)
   4553c:	e0bffd17 	ldw	r2,-12(fp)
   45540:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45544:	e0bffc17 	ldw	r2,-16(fp)
   45548:	10800017 	ldw	r2,0(r2)
   4554c:	e0fffd17 	ldw	r3,-12(fp)
   45550:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45554:	e0bffc17 	ldw	r2,-16(fp)
   45558:	e0fffd17 	ldw	r3,-12(fp)
   4555c:	10c00015 	stw	r3,0(r2)

  return 0;  
   45560:	0005883a 	mov	r2,zero
}
   45564:	e037883a 	mov	sp,fp
   45568:	dfc00117 	ldw	ra,4(sp)
   4556c:	df000017 	ldw	fp,0(sp)
   45570:	dec00204 	addi	sp,sp,8
   45574:	f800283a 	ret

00045578 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45578:	defffd04 	addi	sp,sp,-12
   4557c:	dfc00215 	stw	ra,8(sp)
   45580:	df000115 	stw	fp,4(sp)
   45584:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45588:	00800134 	movhi	r2,4
   4558c:	10994b04 	addi	r2,r2,25900
   45590:	e0bfff15 	stw	r2,-4(fp)
   45594:	00000606 	br	455b0 <_do_ctors+0x38>
        (*ctor) (); 
   45598:	e0bfff17 	ldw	r2,-4(fp)
   4559c:	10800017 	ldw	r2,0(r2)
   455a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   455a4:	e0bfff17 	ldw	r2,-4(fp)
   455a8:	10bfff04 	addi	r2,r2,-4
   455ac:	e0bfff15 	stw	r2,-4(fp)
   455b0:	e0ffff17 	ldw	r3,-4(fp)
   455b4:	00800134 	movhi	r2,4
   455b8:	10994c04 	addi	r2,r2,25904
   455bc:	18bff62e 	bgeu	r3,r2,45598 <__alt_data_end+0xfffd3598>
        (*ctor) (); 
}
   455c0:	0001883a 	nop
   455c4:	e037883a 	mov	sp,fp
   455c8:	dfc00117 	ldw	ra,4(sp)
   455cc:	df000017 	ldw	fp,0(sp)
   455d0:	dec00204 	addi	sp,sp,8
   455d4:	f800283a 	ret

000455d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   455d8:	defffd04 	addi	sp,sp,-12
   455dc:	dfc00215 	stw	ra,8(sp)
   455e0:	df000115 	stw	fp,4(sp)
   455e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   455e8:	00800134 	movhi	r2,4
   455ec:	10994b04 	addi	r2,r2,25900
   455f0:	e0bfff15 	stw	r2,-4(fp)
   455f4:	00000606 	br	45610 <_do_dtors+0x38>
        (*dtor) (); 
   455f8:	e0bfff17 	ldw	r2,-4(fp)
   455fc:	10800017 	ldw	r2,0(r2)
   45600:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45604:	e0bfff17 	ldw	r2,-4(fp)
   45608:	10bfff04 	addi	r2,r2,-4
   4560c:	e0bfff15 	stw	r2,-4(fp)
   45610:	e0ffff17 	ldw	r3,-4(fp)
   45614:	00800134 	movhi	r2,4
   45618:	10994c04 	addi	r2,r2,25904
   4561c:	18bff62e 	bgeu	r3,r2,455f8 <__alt_data_end+0xfffd35f8>
        (*dtor) (); 
}
   45620:	0001883a 	nop
   45624:	e037883a 	mov	sp,fp
   45628:	dfc00117 	ldw	ra,4(sp)
   4562c:	df000017 	ldw	fp,0(sp)
   45630:	dec00204 	addi	sp,sp,8
   45634:	f800283a 	ret

00045638 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45638:	deffff04 	addi	sp,sp,-4
   4563c:	df000015 	stw	fp,0(sp)
   45640:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45644:	0001883a 	nop
   45648:	e037883a 	mov	sp,fp
   4564c:	df000017 	ldw	fp,0(sp)
   45650:	dec00104 	addi	sp,sp,4
   45654:	f800283a 	ret

00045658 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45658:	defff904 	addi	sp,sp,-28
   4565c:	dfc00615 	stw	ra,24(sp)
   45660:	df000515 	stw	fp,20(sp)
   45664:	df000504 	addi	fp,sp,20
   45668:	e13ffc15 	stw	r4,-16(fp)
   4566c:	e17ffd15 	stw	r5,-12(fp)
   45670:	e1bffe15 	stw	r6,-8(fp)
   45674:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45678:	e0800217 	ldw	r2,8(fp)
   4567c:	d8800015 	stw	r2,0(sp)
   45680:	e1ffff17 	ldw	r7,-4(fp)
   45684:	e1bffe17 	ldw	r6,-8(fp)
   45688:	e17ffd17 	ldw	r5,-12(fp)
   4568c:	e13ffc17 	ldw	r4,-16(fp)
   45690:	00458080 	call	45808 <alt_iic_isr_register>
}  
   45694:	e037883a 	mov	sp,fp
   45698:	dfc00117 	ldw	ra,4(sp)
   4569c:	df000017 	ldw	fp,0(sp)
   456a0:	dec00204 	addi	sp,sp,8
   456a4:	f800283a 	ret

000456a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   456a8:	defff904 	addi	sp,sp,-28
   456ac:	df000615 	stw	fp,24(sp)
   456b0:	df000604 	addi	fp,sp,24
   456b4:	e13ffe15 	stw	r4,-8(fp)
   456b8:	e17fff15 	stw	r5,-4(fp)
   456bc:	e0bfff17 	ldw	r2,-4(fp)
   456c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   456c4:	0005303a 	rdctl	r2,status
   456c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   456cc:	e0fffb17 	ldw	r3,-20(fp)
   456d0:	00bfff84 	movi	r2,-2
   456d4:	1884703a 	and	r2,r3,r2
   456d8:	1001703a 	wrctl	status,r2
  
  return context;
   456dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   456e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   456e4:	00c00044 	movi	r3,1
   456e8:	e0bffa17 	ldw	r2,-24(fp)
   456ec:	1884983a 	sll	r2,r3,r2
   456f0:	1007883a 	mov	r3,r2
   456f4:	d0a6b017 	ldw	r2,-25920(gp)
   456f8:	1884b03a 	or	r2,r3,r2
   456fc:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45700:	d0a6b017 	ldw	r2,-25920(gp)
   45704:	100170fa 	wrctl	ienable,r2
   45708:	e0bffc17 	ldw	r2,-16(fp)
   4570c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45710:	e0bffd17 	ldw	r2,-12(fp)
   45714:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45718:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4571c:	0001883a 	nop
}
   45720:	e037883a 	mov	sp,fp
   45724:	df000017 	ldw	fp,0(sp)
   45728:	dec00104 	addi	sp,sp,4
   4572c:	f800283a 	ret

00045730 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45730:	defff904 	addi	sp,sp,-28
   45734:	df000615 	stw	fp,24(sp)
   45738:	df000604 	addi	fp,sp,24
   4573c:	e13ffe15 	stw	r4,-8(fp)
   45740:	e17fff15 	stw	r5,-4(fp)
   45744:	e0bfff17 	ldw	r2,-4(fp)
   45748:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4574c:	0005303a 	rdctl	r2,status
   45750:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45754:	e0fffb17 	ldw	r3,-20(fp)
   45758:	00bfff84 	movi	r2,-2
   4575c:	1884703a 	and	r2,r3,r2
   45760:	1001703a 	wrctl	status,r2
  
  return context;
   45764:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45768:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4576c:	00c00044 	movi	r3,1
   45770:	e0bffa17 	ldw	r2,-24(fp)
   45774:	1884983a 	sll	r2,r3,r2
   45778:	0084303a 	nor	r2,zero,r2
   4577c:	1007883a 	mov	r3,r2
   45780:	d0a6b017 	ldw	r2,-25920(gp)
   45784:	1884703a 	and	r2,r3,r2
   45788:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4578c:	d0a6b017 	ldw	r2,-25920(gp)
   45790:	100170fa 	wrctl	ienable,r2
   45794:	e0bffc17 	ldw	r2,-16(fp)
   45798:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4579c:	e0bffd17 	ldw	r2,-12(fp)
   457a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   457a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   457a8:	0001883a 	nop
}
   457ac:	e037883a 	mov	sp,fp
   457b0:	df000017 	ldw	fp,0(sp)
   457b4:	dec00104 	addi	sp,sp,4
   457b8:	f800283a 	ret

000457bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   457bc:	defffc04 	addi	sp,sp,-16
   457c0:	df000315 	stw	fp,12(sp)
   457c4:	df000304 	addi	fp,sp,12
   457c8:	e13ffe15 	stw	r4,-8(fp)
   457cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   457d0:	000530fa 	rdctl	r2,ienable
   457d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   457d8:	00c00044 	movi	r3,1
   457dc:	e0bfff17 	ldw	r2,-4(fp)
   457e0:	1884983a 	sll	r2,r3,r2
   457e4:	1007883a 	mov	r3,r2
   457e8:	e0bffd17 	ldw	r2,-12(fp)
   457ec:	1884703a 	and	r2,r3,r2
   457f0:	1004c03a 	cmpne	r2,r2,zero
   457f4:	10803fcc 	andi	r2,r2,255
}
   457f8:	e037883a 	mov	sp,fp
   457fc:	df000017 	ldw	fp,0(sp)
   45800:	dec00104 	addi	sp,sp,4
   45804:	f800283a 	ret

00045808 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45808:	defff504 	addi	sp,sp,-44
   4580c:	dfc00a15 	stw	ra,40(sp)
   45810:	df000915 	stw	fp,36(sp)
   45814:	df000904 	addi	fp,sp,36
   45818:	e13ffc15 	stw	r4,-16(fp)
   4581c:	e17ffd15 	stw	r5,-12(fp)
   45820:	e1bffe15 	stw	r6,-8(fp)
   45824:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45828:	00bffa84 	movi	r2,-22
   4582c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45830:	e0bffd17 	ldw	r2,-12(fp)
   45834:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45838:	e0bff817 	ldw	r2,-32(fp)
   4583c:	10800808 	cmpgei	r2,r2,32
   45840:	1000271e 	bne	r2,zero,458e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45844:	0005303a 	rdctl	r2,status
   45848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4584c:	e0fffb17 	ldw	r3,-20(fp)
   45850:	00bfff84 	movi	r2,-2
   45854:	1884703a 	and	r2,r3,r2
   45858:	1001703a 	wrctl	status,r2
  
  return context;
   4585c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45860:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   45864:	00800174 	movhi	r2,5
   45868:	10a6ab04 	addi	r2,r2,-25940
   4586c:	e0fff817 	ldw	r3,-32(fp)
   45870:	180690fa 	slli	r3,r3,3
   45874:	10c5883a 	add	r2,r2,r3
   45878:	e0fffe17 	ldw	r3,-8(fp)
   4587c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45880:	00800174 	movhi	r2,5
   45884:	10a6ab04 	addi	r2,r2,-25940
   45888:	e0fff817 	ldw	r3,-32(fp)
   4588c:	180690fa 	slli	r3,r3,3
   45890:	10c5883a 	add	r2,r2,r3
   45894:	10800104 	addi	r2,r2,4
   45898:	e0ffff17 	ldw	r3,-4(fp)
   4589c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   458a0:	e0bffe17 	ldw	r2,-8(fp)
   458a4:	10000526 	beq	r2,zero,458bc <alt_iic_isr_register+0xb4>
   458a8:	e0bff817 	ldw	r2,-32(fp)
   458ac:	100b883a 	mov	r5,r2
   458b0:	e13ffc17 	ldw	r4,-16(fp)
   458b4:	00456a80 	call	456a8 <alt_ic_irq_enable>
   458b8:	00000406 	br	458cc <alt_iic_isr_register+0xc4>
   458bc:	e0bff817 	ldw	r2,-32(fp)
   458c0:	100b883a 	mov	r5,r2
   458c4:	e13ffc17 	ldw	r4,-16(fp)
   458c8:	00457300 	call	45730 <alt_ic_irq_disable>
   458cc:	e0bff715 	stw	r2,-36(fp)
   458d0:	e0bffa17 	ldw	r2,-24(fp)
   458d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   458d8:	e0bff917 	ldw	r2,-28(fp)
   458dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   458e0:	e0bff717 	ldw	r2,-36(fp)
}
   458e4:	e037883a 	mov	sp,fp
   458e8:	dfc00117 	ldw	ra,4(sp)
   458ec:	df000017 	ldw	fp,0(sp)
   458f0:	dec00204 	addi	sp,sp,8
   458f4:	f800283a 	ret

000458f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   458f8:	defff804 	addi	sp,sp,-32
   458fc:	dfc00715 	stw	ra,28(sp)
   45900:	df000615 	stw	fp,24(sp)
   45904:	dc000515 	stw	r16,20(sp)
   45908:	df000604 	addi	fp,sp,24
   4590c:	e13ffb15 	stw	r4,-20(fp)
   45910:	e17ffc15 	stw	r5,-16(fp)
   45914:	e1bffd15 	stw	r6,-12(fp)
   45918:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   4591c:	e1bffe17 	ldw	r6,-8(fp)
   45920:	e17ffd17 	ldw	r5,-12(fp)
   45924:	e13ffc17 	ldw	r4,-16(fp)
   45928:	0045b800 	call	45b80 <open>
   4592c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   45930:	e0bffa17 	ldw	r2,-24(fp)
   45934:	10002216 	blt	r2,zero,459c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   45938:	04000134 	movhi	r16,4
   4593c:	841b7504 	addi	r16,r16,28116
   45940:	e0bffa17 	ldw	r2,-24(fp)
   45944:	01400304 	movi	r5,12
   45948:	1009883a 	mov	r4,r2
   4594c:	0043e700 	call	43e70 <__mulsi3>
   45950:	8085883a 	add	r2,r16,r2
   45954:	10c00017 	ldw	r3,0(r2)
   45958:	e0bffb17 	ldw	r2,-20(fp)
   4595c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45960:	04000134 	movhi	r16,4
   45964:	841b7504 	addi	r16,r16,28116
   45968:	e0bffa17 	ldw	r2,-24(fp)
   4596c:	01400304 	movi	r5,12
   45970:	1009883a 	mov	r4,r2
   45974:	0043e700 	call	43e70 <__mulsi3>
   45978:	8085883a 	add	r2,r16,r2
   4597c:	10800104 	addi	r2,r2,4
   45980:	10c00017 	ldw	r3,0(r2)
   45984:	e0bffb17 	ldw	r2,-20(fp)
   45988:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4598c:	04000134 	movhi	r16,4
   45990:	841b7504 	addi	r16,r16,28116
   45994:	e0bffa17 	ldw	r2,-24(fp)
   45998:	01400304 	movi	r5,12
   4599c:	1009883a 	mov	r4,r2
   459a0:	0043e700 	call	43e70 <__mulsi3>
   459a4:	8085883a 	add	r2,r16,r2
   459a8:	10800204 	addi	r2,r2,8
   459ac:	10c00017 	ldw	r3,0(r2)
   459b0:	e0bffb17 	ldw	r2,-20(fp)
   459b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   459b8:	e13ffa17 	ldw	r4,-24(fp)
   459bc:	00445bc0 	call	445bc <alt_release_fd>
  }
} 
   459c0:	0001883a 	nop
   459c4:	e6ffff04 	addi	sp,fp,-4
   459c8:	dfc00217 	ldw	ra,8(sp)
   459cc:	df000117 	ldw	fp,4(sp)
   459d0:	dc000017 	ldw	r16,0(sp)
   459d4:	dec00304 	addi	sp,sp,12
   459d8:	f800283a 	ret

000459dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   459dc:	defffb04 	addi	sp,sp,-20
   459e0:	dfc00415 	stw	ra,16(sp)
   459e4:	df000315 	stw	fp,12(sp)
   459e8:	df000304 	addi	fp,sp,12
   459ec:	e13ffd15 	stw	r4,-12(fp)
   459f0:	e17ffe15 	stw	r5,-8(fp)
   459f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   459f8:	01c07fc4 	movi	r7,511
   459fc:	01800044 	movi	r6,1
   45a00:	e17ffd17 	ldw	r5,-12(fp)
   45a04:	01000134 	movhi	r4,4
   45a08:	211b7804 	addi	r4,r4,28128
   45a0c:	00458f80 	call	458f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45a10:	01c07fc4 	movi	r7,511
   45a14:	000d883a 	mov	r6,zero
   45a18:	e17ffe17 	ldw	r5,-8(fp)
   45a1c:	01000134 	movhi	r4,4
   45a20:	211b7504 	addi	r4,r4,28116
   45a24:	00458f80 	call	458f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45a28:	01c07fc4 	movi	r7,511
   45a2c:	01800044 	movi	r6,1
   45a30:	e17fff17 	ldw	r5,-4(fp)
   45a34:	01000134 	movhi	r4,4
   45a38:	211b7b04 	addi	r4,r4,28140
   45a3c:	00458f80 	call	458f8 <alt_open_fd>
}  
   45a40:	0001883a 	nop
   45a44:	e037883a 	mov	sp,fp
   45a48:	dfc00117 	ldw	ra,4(sp)
   45a4c:	df000017 	ldw	fp,0(sp)
   45a50:	dec00204 	addi	sp,sp,8
   45a54:	f800283a 	ret

00045a58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45a58:	defffe04 	addi	sp,sp,-8
   45a5c:	dfc00115 	stw	ra,4(sp)
   45a60:	df000015 	stw	fp,0(sp)
   45a64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45a68:	d0a00917 	ldw	r2,-32732(gp)
   45a6c:	10000326 	beq	r2,zero,45a7c <alt_get_errno+0x24>
   45a70:	d0a00917 	ldw	r2,-32732(gp)
   45a74:	103ee83a 	callr	r2
   45a78:	00000106 	br	45a80 <alt_get_errno+0x28>
   45a7c:	d0a6ac04 	addi	r2,gp,-25936
}
   45a80:	e037883a 	mov	sp,fp
   45a84:	dfc00117 	ldw	ra,4(sp)
   45a88:	df000017 	ldw	fp,0(sp)
   45a8c:	dec00204 	addi	sp,sp,8
   45a90:	f800283a 	ret

00045a94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45a94:	defffb04 	addi	sp,sp,-20
   45a98:	dfc00415 	stw	ra,16(sp)
   45a9c:	df000315 	stw	fp,12(sp)
   45aa0:	dc000215 	stw	r16,8(sp)
   45aa4:	df000304 	addi	fp,sp,12
   45aa8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45aac:	e0bffe17 	ldw	r2,-8(fp)
   45ab0:	10800217 	ldw	r2,8(r2)
   45ab4:	10d00034 	orhi	r3,r2,16384
   45ab8:	e0bffe17 	ldw	r2,-8(fp)
   45abc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45ac0:	e03ffd15 	stw	zero,-12(fp)
   45ac4:	00002306 	br	45b54 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45ac8:	04000134 	movhi	r16,4
   45acc:	841b7504 	addi	r16,r16,28116
   45ad0:	e0bffd17 	ldw	r2,-12(fp)
   45ad4:	01400304 	movi	r5,12
   45ad8:	1009883a 	mov	r4,r2
   45adc:	0043e700 	call	43e70 <__mulsi3>
   45ae0:	8085883a 	add	r2,r16,r2
   45ae4:	10c00017 	ldw	r3,0(r2)
   45ae8:	e0bffe17 	ldw	r2,-8(fp)
   45aec:	10800017 	ldw	r2,0(r2)
   45af0:	1880151e 	bne	r3,r2,45b48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45af4:	04000134 	movhi	r16,4
   45af8:	841b7504 	addi	r16,r16,28116
   45afc:	e0bffd17 	ldw	r2,-12(fp)
   45b00:	01400304 	movi	r5,12
   45b04:	1009883a 	mov	r4,r2
   45b08:	0043e700 	call	43e70 <__mulsi3>
   45b0c:	8085883a 	add	r2,r16,r2
   45b10:	10800204 	addi	r2,r2,8
   45b14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45b18:	10000b0e 	bge	r2,zero,45b48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45b1c:	01400304 	movi	r5,12
   45b20:	e13ffd17 	ldw	r4,-12(fp)
   45b24:	0043e700 	call	43e70 <__mulsi3>
   45b28:	1007883a 	mov	r3,r2
   45b2c:	00800134 	movhi	r2,4
   45b30:	109b7504 	addi	r2,r2,28116
   45b34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45b38:	e0bffe17 	ldw	r2,-8(fp)
   45b3c:	18800226 	beq	r3,r2,45b48 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45b40:	00bffcc4 	movi	r2,-13
   45b44:	00000806 	br	45b68 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45b48:	e0bffd17 	ldw	r2,-12(fp)
   45b4c:	10800044 	addi	r2,r2,1
   45b50:	e0bffd15 	stw	r2,-12(fp)
   45b54:	d0a00817 	ldw	r2,-32736(gp)
   45b58:	1007883a 	mov	r3,r2
   45b5c:	e0bffd17 	ldw	r2,-12(fp)
   45b60:	18bfd92e 	bgeu	r3,r2,45ac8 <__alt_data_end+0xfffd3ac8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45b64:	0005883a 	mov	r2,zero
}
   45b68:	e6ffff04 	addi	sp,fp,-4
   45b6c:	dfc00217 	ldw	ra,8(sp)
   45b70:	df000117 	ldw	fp,4(sp)
   45b74:	dc000017 	ldw	r16,0(sp)
   45b78:	dec00304 	addi	sp,sp,12
   45b7c:	f800283a 	ret

00045b80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45b80:	defff604 	addi	sp,sp,-40
   45b84:	dfc00915 	stw	ra,36(sp)
   45b88:	df000815 	stw	fp,32(sp)
   45b8c:	df000804 	addi	fp,sp,32
   45b90:	e13ffd15 	stw	r4,-12(fp)
   45b94:	e17ffe15 	stw	r5,-8(fp)
   45b98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45b9c:	00bfffc4 	movi	r2,-1
   45ba0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45ba4:	00bffb44 	movi	r2,-19
   45ba8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45bac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45bb0:	d1600604 	addi	r5,gp,-32744
   45bb4:	e13ffd17 	ldw	r4,-12(fp)
   45bb8:	0045ea40 	call	45ea4 <alt_find_dev>
   45bbc:	e0bff815 	stw	r2,-32(fp)
   45bc0:	e0bff817 	ldw	r2,-32(fp)
   45bc4:	1000051e 	bne	r2,zero,45bdc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45bc8:	e13ffd17 	ldw	r4,-12(fp)
   45bcc:	0045f340 	call	45f34 <alt_find_file>
   45bd0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45bd4:	00800044 	movi	r2,1
   45bd8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45bdc:	e0bff817 	ldw	r2,-32(fp)
   45be0:	10002b26 	beq	r2,zero,45c90 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45be4:	e13ff817 	ldw	r4,-32(fp)
   45be8:	004603c0 	call	4603c <alt_get_fd>
   45bec:	e0bff915 	stw	r2,-28(fp)
   45bf0:	e0bff917 	ldw	r2,-28(fp)
   45bf4:	1000030e 	bge	r2,zero,45c04 <open+0x84>
    {
      status = index;
   45bf8:	e0bff917 	ldw	r2,-28(fp)
   45bfc:	e0bffa15 	stw	r2,-24(fp)
   45c00:	00002506 	br	45c98 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   45c04:	01400304 	movi	r5,12
   45c08:	e13ff917 	ldw	r4,-28(fp)
   45c0c:	0043e700 	call	43e70 <__mulsi3>
   45c10:	1007883a 	mov	r3,r2
   45c14:	00800134 	movhi	r2,4
   45c18:	109b7504 	addi	r2,r2,28116
   45c1c:	1885883a 	add	r2,r3,r2
   45c20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45c24:	e0fffe17 	ldw	r3,-8(fp)
   45c28:	00900034 	movhi	r2,16384
   45c2c:	10bfffc4 	addi	r2,r2,-1
   45c30:	1886703a 	and	r3,r3,r2
   45c34:	e0bffc17 	ldw	r2,-16(fp)
   45c38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45c3c:	e0bffb17 	ldw	r2,-20(fp)
   45c40:	1000051e 	bne	r2,zero,45c58 <open+0xd8>
   45c44:	e13ffc17 	ldw	r4,-16(fp)
   45c48:	0045a940 	call	45a94 <alt_file_locked>
   45c4c:	e0bffa15 	stw	r2,-24(fp)
   45c50:	e0bffa17 	ldw	r2,-24(fp)
   45c54:	10001016 	blt	r2,zero,45c98 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45c58:	e0bff817 	ldw	r2,-32(fp)
   45c5c:	10800317 	ldw	r2,12(r2)
   45c60:	10000826 	beq	r2,zero,45c84 <open+0x104>
   45c64:	e0bff817 	ldw	r2,-32(fp)
   45c68:	10800317 	ldw	r2,12(r2)
   45c6c:	e1ffff17 	ldw	r7,-4(fp)
   45c70:	e1bffe17 	ldw	r6,-8(fp)
   45c74:	e17ffd17 	ldw	r5,-12(fp)
   45c78:	e13ffc17 	ldw	r4,-16(fp)
   45c7c:	103ee83a 	callr	r2
   45c80:	00000106 	br	45c88 <open+0x108>
   45c84:	0005883a 	mov	r2,zero
   45c88:	e0bffa15 	stw	r2,-24(fp)
   45c8c:	00000206 	br	45c98 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45c90:	00bffb44 	movi	r2,-19
   45c94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45c98:	e0bffa17 	ldw	r2,-24(fp)
   45c9c:	1000090e 	bge	r2,zero,45cc4 <open+0x144>
  {
    alt_release_fd (index);  
   45ca0:	e13ff917 	ldw	r4,-28(fp)
   45ca4:	00445bc0 	call	445bc <alt_release_fd>
    ALT_ERRNO = -status;
   45ca8:	0045a580 	call	45a58 <alt_get_errno>
   45cac:	1007883a 	mov	r3,r2
   45cb0:	e0bffa17 	ldw	r2,-24(fp)
   45cb4:	0085c83a 	sub	r2,zero,r2
   45cb8:	18800015 	stw	r2,0(r3)
    return -1;
   45cbc:	00bfffc4 	movi	r2,-1
   45cc0:	00000106 	br	45cc8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   45cc4:	e0bff917 	ldw	r2,-28(fp)
}
   45cc8:	e037883a 	mov	sp,fp
   45ccc:	dfc00117 	ldw	ra,4(sp)
   45cd0:	df000017 	ldw	fp,0(sp)
   45cd4:	dec00204 	addi	sp,sp,8
   45cd8:	f800283a 	ret

00045cdc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45cdc:	defffa04 	addi	sp,sp,-24
   45ce0:	df000515 	stw	fp,20(sp)
   45ce4:	df000504 	addi	fp,sp,20
   45ce8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45cec:	0005303a 	rdctl	r2,status
   45cf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45cf4:	e0fffc17 	ldw	r3,-16(fp)
   45cf8:	00bfff84 	movi	r2,-2
   45cfc:	1884703a 	and	r2,r3,r2
   45d00:	1001703a 	wrctl	status,r2
  
  return context;
   45d04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45d08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45d0c:	e0bfff17 	ldw	r2,-4(fp)
   45d10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   45d14:	e0bffd17 	ldw	r2,-12(fp)
   45d18:	10800017 	ldw	r2,0(r2)
   45d1c:	e0fffd17 	ldw	r3,-12(fp)
   45d20:	18c00117 	ldw	r3,4(r3)
   45d24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45d28:	e0bffd17 	ldw	r2,-12(fp)
   45d2c:	10800117 	ldw	r2,4(r2)
   45d30:	e0fffd17 	ldw	r3,-12(fp)
   45d34:	18c00017 	ldw	r3,0(r3)
   45d38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45d3c:	e0bffd17 	ldw	r2,-12(fp)
   45d40:	e0fffd17 	ldw	r3,-12(fp)
   45d44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45d48:	e0bffd17 	ldw	r2,-12(fp)
   45d4c:	e0fffd17 	ldw	r3,-12(fp)
   45d50:	10c00015 	stw	r3,0(r2)
   45d54:	e0bffb17 	ldw	r2,-20(fp)
   45d58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45d5c:	e0bffe17 	ldw	r2,-8(fp)
   45d60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45d64:	0001883a 	nop
   45d68:	e037883a 	mov	sp,fp
   45d6c:	df000017 	ldw	fp,0(sp)
   45d70:	dec00104 	addi	sp,sp,4
   45d74:	f800283a 	ret

00045d78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45d78:	defffb04 	addi	sp,sp,-20
   45d7c:	dfc00415 	stw	ra,16(sp)
   45d80:	df000315 	stw	fp,12(sp)
   45d84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45d88:	d0a00c17 	ldw	r2,-32720(gp)
   45d8c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45d90:	d0a6b217 	ldw	r2,-25912(gp)
   45d94:	10800044 	addi	r2,r2,1
   45d98:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45d9c:	00002e06 	br	45e58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45da0:	e0bffd17 	ldw	r2,-12(fp)
   45da4:	10800017 	ldw	r2,0(r2)
   45da8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45dac:	e0bffd17 	ldw	r2,-12(fp)
   45db0:	10800403 	ldbu	r2,16(r2)
   45db4:	10803fcc 	andi	r2,r2,255
   45db8:	10000426 	beq	r2,zero,45dcc <alt_tick+0x54>
   45dbc:	d0a6b217 	ldw	r2,-25912(gp)
   45dc0:	1000021e 	bne	r2,zero,45dcc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   45dc4:	e0bffd17 	ldw	r2,-12(fp)
   45dc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45dcc:	e0bffd17 	ldw	r2,-12(fp)
   45dd0:	10800217 	ldw	r2,8(r2)
   45dd4:	d0e6b217 	ldw	r3,-25912(gp)
   45dd8:	18801d36 	bltu	r3,r2,45e50 <alt_tick+0xd8>
   45ddc:	e0bffd17 	ldw	r2,-12(fp)
   45de0:	10800403 	ldbu	r2,16(r2)
   45de4:	10803fcc 	andi	r2,r2,255
   45de8:	1000191e 	bne	r2,zero,45e50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45dec:	e0bffd17 	ldw	r2,-12(fp)
   45df0:	10800317 	ldw	r2,12(r2)
   45df4:	e0fffd17 	ldw	r3,-12(fp)
   45df8:	18c00517 	ldw	r3,20(r3)
   45dfc:	1809883a 	mov	r4,r3
   45e00:	103ee83a 	callr	r2
   45e04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45e08:	e0bfff17 	ldw	r2,-4(fp)
   45e0c:	1000031e 	bne	r2,zero,45e1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   45e10:	e13ffd17 	ldw	r4,-12(fp)
   45e14:	0045cdc0 	call	45cdc <alt_alarm_stop>
   45e18:	00000d06 	br	45e50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   45e1c:	e0bffd17 	ldw	r2,-12(fp)
   45e20:	10c00217 	ldw	r3,8(r2)
   45e24:	e0bfff17 	ldw	r2,-4(fp)
   45e28:	1887883a 	add	r3,r3,r2
   45e2c:	e0bffd17 	ldw	r2,-12(fp)
   45e30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   45e34:	e0bffd17 	ldw	r2,-12(fp)
   45e38:	10c00217 	ldw	r3,8(r2)
   45e3c:	d0a6b217 	ldw	r2,-25912(gp)
   45e40:	1880032e 	bgeu	r3,r2,45e50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   45e44:	e0bffd17 	ldw	r2,-12(fp)
   45e48:	00c00044 	movi	r3,1
   45e4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   45e50:	e0bffe17 	ldw	r2,-8(fp)
   45e54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45e58:	e0fffd17 	ldw	r3,-12(fp)
   45e5c:	d0a00c04 	addi	r2,gp,-32720
   45e60:	18bfcf1e 	bne	r3,r2,45da0 <__alt_data_end+0xfffd3da0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45e64:	0001883a 	nop
}
   45e68:	0001883a 	nop
   45e6c:	e037883a 	mov	sp,fp
   45e70:	dfc00117 	ldw	ra,4(sp)
   45e74:	df000017 	ldw	fp,0(sp)
   45e78:	dec00204 	addi	sp,sp,8
   45e7c:	f800283a 	ret

00045e80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45e80:	deffff04 	addi	sp,sp,-4
   45e84:	df000015 	stw	fp,0(sp)
   45e88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45e8c:	000170fa 	wrctl	ienable,zero
}
   45e90:	0001883a 	nop
   45e94:	e037883a 	mov	sp,fp
   45e98:	df000017 	ldw	fp,0(sp)
   45e9c:	dec00104 	addi	sp,sp,4
   45ea0:	f800283a 	ret

00045ea4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45ea4:	defffa04 	addi	sp,sp,-24
   45ea8:	dfc00515 	stw	ra,20(sp)
   45eac:	df000415 	stw	fp,16(sp)
   45eb0:	df000404 	addi	fp,sp,16
   45eb4:	e13ffe15 	stw	r4,-8(fp)
   45eb8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45ebc:	e0bfff17 	ldw	r2,-4(fp)
   45ec0:	10800017 	ldw	r2,0(r2)
   45ec4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45ec8:	e13ffe17 	ldw	r4,-8(fp)
   45ecc:	00411600 	call	41160 <strlen>
   45ed0:	10800044 	addi	r2,r2,1
   45ed4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45ed8:	00000d06 	br	45f10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45edc:	e0bffc17 	ldw	r2,-16(fp)
   45ee0:	10800217 	ldw	r2,8(r2)
   45ee4:	e0fffd17 	ldw	r3,-12(fp)
   45ee8:	180d883a 	mov	r6,r3
   45eec:	e17ffe17 	ldw	r5,-8(fp)
   45ef0:	1009883a 	mov	r4,r2
   45ef4:	00461e80 	call	461e8 <memcmp>
   45ef8:	1000021e 	bne	r2,zero,45f04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45efc:	e0bffc17 	ldw	r2,-16(fp)
   45f00:	00000706 	br	45f20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   45f04:	e0bffc17 	ldw	r2,-16(fp)
   45f08:	10800017 	ldw	r2,0(r2)
   45f0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45f10:	e0fffc17 	ldw	r3,-16(fp)
   45f14:	e0bfff17 	ldw	r2,-4(fp)
   45f18:	18bff01e 	bne	r3,r2,45edc <__alt_data_end+0xfffd3edc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45f1c:	0005883a 	mov	r2,zero
}
   45f20:	e037883a 	mov	sp,fp
   45f24:	dfc00117 	ldw	ra,4(sp)
   45f28:	df000017 	ldw	fp,0(sp)
   45f2c:	dec00204 	addi	sp,sp,8
   45f30:	f800283a 	ret

00045f34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   45f34:	defffb04 	addi	sp,sp,-20
   45f38:	dfc00415 	stw	ra,16(sp)
   45f3c:	df000315 	stw	fp,12(sp)
   45f40:	df000304 	addi	fp,sp,12
   45f44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45f48:	d0a00417 	ldw	r2,-32752(gp)
   45f4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45f50:	00003106 	br	46018 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   45f54:	e0bffd17 	ldw	r2,-12(fp)
   45f58:	10800217 	ldw	r2,8(r2)
   45f5c:	1009883a 	mov	r4,r2
   45f60:	00411600 	call	41160 <strlen>
   45f64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45f68:	e0bffd17 	ldw	r2,-12(fp)
   45f6c:	10c00217 	ldw	r3,8(r2)
   45f70:	e0bffe17 	ldw	r2,-8(fp)
   45f74:	10bfffc4 	addi	r2,r2,-1
   45f78:	1885883a 	add	r2,r3,r2
   45f7c:	10800003 	ldbu	r2,0(r2)
   45f80:	10803fcc 	andi	r2,r2,255
   45f84:	1080201c 	xori	r2,r2,128
   45f88:	10bfe004 	addi	r2,r2,-128
   45f8c:	10800bd8 	cmpnei	r2,r2,47
   45f90:	1000031e 	bne	r2,zero,45fa0 <alt_find_file+0x6c>
    {
      len -= 1;
   45f94:	e0bffe17 	ldw	r2,-8(fp)
   45f98:	10bfffc4 	addi	r2,r2,-1
   45f9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45fa0:	e0bffe17 	ldw	r2,-8(fp)
   45fa4:	e0ffff17 	ldw	r3,-4(fp)
   45fa8:	1885883a 	add	r2,r3,r2
   45fac:	10800003 	ldbu	r2,0(r2)
   45fb0:	10803fcc 	andi	r2,r2,255
   45fb4:	1080201c 	xori	r2,r2,128
   45fb8:	10bfe004 	addi	r2,r2,-128
   45fbc:	10800be0 	cmpeqi	r2,r2,47
   45fc0:	1000081e 	bne	r2,zero,45fe4 <alt_find_file+0xb0>
   45fc4:	e0bffe17 	ldw	r2,-8(fp)
   45fc8:	e0ffff17 	ldw	r3,-4(fp)
   45fcc:	1885883a 	add	r2,r3,r2
   45fd0:	10800003 	ldbu	r2,0(r2)
   45fd4:	10803fcc 	andi	r2,r2,255
   45fd8:	1080201c 	xori	r2,r2,128
   45fdc:	10bfe004 	addi	r2,r2,-128
   45fe0:	10000a1e 	bne	r2,zero,4600c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   45fe4:	e0bffd17 	ldw	r2,-12(fp)
   45fe8:	10800217 	ldw	r2,8(r2)
   45fec:	e0fffe17 	ldw	r3,-8(fp)
   45ff0:	180d883a 	mov	r6,r3
   45ff4:	e17fff17 	ldw	r5,-4(fp)
   45ff8:	1009883a 	mov	r4,r2
   45ffc:	00461e80 	call	461e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46000:	1000021e 	bne	r2,zero,4600c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   46004:	e0bffd17 	ldw	r2,-12(fp)
   46008:	00000706 	br	46028 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4600c:	e0bffd17 	ldw	r2,-12(fp)
   46010:	10800017 	ldw	r2,0(r2)
   46014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46018:	e0fffd17 	ldw	r3,-12(fp)
   4601c:	d0a00404 	addi	r2,gp,-32752
   46020:	18bfcc1e 	bne	r3,r2,45f54 <__alt_data_end+0xfffd3f54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   46024:	0005883a 	mov	r2,zero
}
   46028:	e037883a 	mov	sp,fp
   4602c:	dfc00117 	ldw	ra,4(sp)
   46030:	df000017 	ldw	fp,0(sp)
   46034:	dec00204 	addi	sp,sp,8
   46038:	f800283a 	ret

0004603c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4603c:	defffa04 	addi	sp,sp,-24
   46040:	dfc00515 	stw	ra,20(sp)
   46044:	df000415 	stw	fp,16(sp)
   46048:	dc000315 	stw	r16,12(sp)
   4604c:	df000404 	addi	fp,sp,16
   46050:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   46054:	00bffa04 	movi	r2,-24
   46058:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4605c:	e03ffc15 	stw	zero,-16(fp)
   46060:	00001d06 	br	460d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   46064:	04000134 	movhi	r16,4
   46068:	841b7504 	addi	r16,r16,28116
   4606c:	e0bffc17 	ldw	r2,-16(fp)
   46070:	01400304 	movi	r5,12
   46074:	1009883a 	mov	r4,r2
   46078:	0043e700 	call	43e70 <__mulsi3>
   4607c:	8085883a 	add	r2,r16,r2
   46080:	10800017 	ldw	r2,0(r2)
   46084:	1000111e 	bne	r2,zero,460cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   46088:	04000134 	movhi	r16,4
   4608c:	841b7504 	addi	r16,r16,28116
   46090:	e0bffc17 	ldw	r2,-16(fp)
   46094:	01400304 	movi	r5,12
   46098:	1009883a 	mov	r4,r2
   4609c:	0043e700 	call	43e70 <__mulsi3>
   460a0:	8085883a 	add	r2,r16,r2
   460a4:	e0fffe17 	ldw	r3,-8(fp)
   460a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   460ac:	d0e00817 	ldw	r3,-32736(gp)
   460b0:	e0bffc17 	ldw	r2,-16(fp)
   460b4:	1880020e 	bge	r3,r2,460c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   460b8:	e0bffc17 	ldw	r2,-16(fp)
   460bc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   460c0:	e0bffc17 	ldw	r2,-16(fp)
   460c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   460c8:	00000606 	br	460e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   460cc:	e0bffc17 	ldw	r2,-16(fp)
   460d0:	10800044 	addi	r2,r2,1
   460d4:	e0bffc15 	stw	r2,-16(fp)
   460d8:	e0bffc17 	ldw	r2,-16(fp)
   460dc:	10800810 	cmplti	r2,r2,32
   460e0:	103fe01e 	bne	r2,zero,46064 <__alt_data_end+0xfffd4064>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   460e4:	e0bffd17 	ldw	r2,-12(fp)
}
   460e8:	e6ffff04 	addi	sp,fp,-4
   460ec:	dfc00217 	ldw	ra,8(sp)
   460f0:	df000117 	ldw	fp,4(sp)
   460f4:	dc000017 	ldw	r16,0(sp)
   460f8:	dec00304 	addi	sp,sp,12
   460fc:	f800283a 	ret

00046100 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   46100:	defffe04 	addi	sp,sp,-8
   46104:	df000115 	stw	fp,4(sp)
   46108:	df000104 	addi	fp,sp,4
   4610c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   46110:	e0bfff17 	ldw	r2,-4(fp)
   46114:	10bffe84 	addi	r2,r2,-6
   46118:	10c00428 	cmpgeui	r3,r2,16
   4611c:	18001a1e 	bne	r3,zero,46188 <alt_exception_cause_generated_bad_addr+0x88>
   46120:	100690ba 	slli	r3,r2,2
   46124:	00800134 	movhi	r2,4
   46128:	10984e04 	addi	r2,r2,24888
   4612c:	1885883a 	add	r2,r3,r2
   46130:	10800017 	ldw	r2,0(r2)
   46134:	1000683a 	jmp	r2
   46138:	00046178 	rdprs	zero,zero,4485
   4613c:	00046178 	rdprs	zero,zero,4485
   46140:	00046188 	cmpgei	zero,zero,4486
   46144:	00046188 	cmpgei	zero,zero,4486
   46148:	00046188 	cmpgei	zero,zero,4486
   4614c:	00046178 	rdprs	zero,zero,4485
   46150:	00046180 	call	4618 <__alt_mem_onchip_memory2_0-0x3b9e8>
   46154:	00046188 	cmpgei	zero,zero,4486
   46158:	00046178 	rdprs	zero,zero,4485
   4615c:	00046178 	rdprs	zero,zero,4485
   46160:	00046188 	cmpgei	zero,zero,4486
   46164:	00046178 	rdprs	zero,zero,4485
   46168:	00046180 	call	4618 <__alt_mem_onchip_memory2_0-0x3b9e8>
   4616c:	00046188 	cmpgei	zero,zero,4486
   46170:	00046188 	cmpgei	zero,zero,4486
   46174:	00046178 	rdprs	zero,zero,4485
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   46178:	00800044 	movi	r2,1
   4617c:	00000306 	br	4618c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   46180:	0005883a 	mov	r2,zero
   46184:	00000106 	br	4618c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   46188:	0005883a 	mov	r2,zero
  }
}
   4618c:	e037883a 	mov	sp,fp
   46190:	df000017 	ldw	fp,0(sp)
   46194:	dec00104 	addi	sp,sp,4
   46198:	f800283a 	ret

0004619c <atexit>:
   4619c:	200b883a 	mov	r5,r4
   461a0:	000f883a 	mov	r7,zero
   461a4:	000d883a 	mov	r6,zero
   461a8:	0009883a 	mov	r4,zero
   461ac:	00462641 	jmpi	46264 <__register_exitproc>

000461b0 <exit>:
   461b0:	defffe04 	addi	sp,sp,-8
   461b4:	000b883a 	mov	r5,zero
   461b8:	dc000015 	stw	r16,0(sp)
   461bc:	dfc00115 	stw	ra,4(sp)
   461c0:	2021883a 	mov	r16,r4
   461c4:	004637c0 	call	4637c <__call_exitprocs>
   461c8:	00800134 	movhi	r2,4
   461cc:	109fed04 	addi	r2,r2,32692
   461d0:	11000017 	ldw	r4,0(r2)
   461d4:	20800f17 	ldw	r2,60(r4)
   461d8:	10000126 	beq	r2,zero,461e0 <exit+0x30>
   461dc:	103ee83a 	callr	r2
   461e0:	8009883a 	mov	r4,r16
   461e4:	00464fc0 	call	464fc <_exit>

000461e8 <memcmp>:
   461e8:	01c000c4 	movi	r7,3
   461ec:	3980192e 	bgeu	r7,r6,46254 <memcmp+0x6c>
   461f0:	2144b03a 	or	r2,r4,r5
   461f4:	11c4703a 	and	r2,r2,r7
   461f8:	10000f26 	beq	r2,zero,46238 <memcmp+0x50>
   461fc:	20800003 	ldbu	r2,0(r4)
   46200:	28c00003 	ldbu	r3,0(r5)
   46204:	10c0151e 	bne	r2,r3,4625c <memcmp+0x74>
   46208:	31bfff84 	addi	r6,r6,-2
   4620c:	01ffffc4 	movi	r7,-1
   46210:	00000406 	br	46224 <memcmp+0x3c>
   46214:	20800003 	ldbu	r2,0(r4)
   46218:	28c00003 	ldbu	r3,0(r5)
   4621c:	31bfffc4 	addi	r6,r6,-1
   46220:	10c00e1e 	bne	r2,r3,4625c <memcmp+0x74>
   46224:	21000044 	addi	r4,r4,1
   46228:	29400044 	addi	r5,r5,1
   4622c:	31fff91e 	bne	r6,r7,46214 <__alt_data_end+0xfffd4214>
   46230:	0005883a 	mov	r2,zero
   46234:	f800283a 	ret
   46238:	20c00017 	ldw	r3,0(r4)
   4623c:	28800017 	ldw	r2,0(r5)
   46240:	18bfee1e 	bne	r3,r2,461fc <__alt_data_end+0xfffd41fc>
   46244:	31bfff04 	addi	r6,r6,-4
   46248:	21000104 	addi	r4,r4,4
   4624c:	29400104 	addi	r5,r5,4
   46250:	39bff936 	bltu	r7,r6,46238 <__alt_data_end+0xfffd4238>
   46254:	303fe91e 	bne	r6,zero,461fc <__alt_data_end+0xfffd41fc>
   46258:	003ff506 	br	46230 <__alt_data_end+0xfffd4230>
   4625c:	10c5c83a 	sub	r2,r2,r3
   46260:	f800283a 	ret

00046264 <__register_exitproc>:
   46264:	defffa04 	addi	sp,sp,-24
   46268:	dc000315 	stw	r16,12(sp)
   4626c:	04000134 	movhi	r16,4
   46270:	841fed04 	addi	r16,r16,32692
   46274:	80c00017 	ldw	r3,0(r16)
   46278:	dc400415 	stw	r17,16(sp)
   4627c:	dfc00515 	stw	ra,20(sp)
   46280:	18805217 	ldw	r2,328(r3)
   46284:	2023883a 	mov	r17,r4
   46288:	10003726 	beq	r2,zero,46368 <__register_exitproc+0x104>
   4628c:	10c00117 	ldw	r3,4(r2)
   46290:	010007c4 	movi	r4,31
   46294:	20c00e16 	blt	r4,r3,462d0 <__register_exitproc+0x6c>
   46298:	1a000044 	addi	r8,r3,1
   4629c:	8800221e 	bne	r17,zero,46328 <__register_exitproc+0xc4>
   462a0:	18c00084 	addi	r3,r3,2
   462a4:	18c7883a 	add	r3,r3,r3
   462a8:	18c7883a 	add	r3,r3,r3
   462ac:	12000115 	stw	r8,4(r2)
   462b0:	10c7883a 	add	r3,r2,r3
   462b4:	19400015 	stw	r5,0(r3)
   462b8:	0005883a 	mov	r2,zero
   462bc:	dfc00517 	ldw	ra,20(sp)
   462c0:	dc400417 	ldw	r17,16(sp)
   462c4:	dc000317 	ldw	r16,12(sp)
   462c8:	dec00604 	addi	sp,sp,24
   462cc:	f800283a 	ret
   462d0:	00800034 	movhi	r2,0
   462d4:	10800004 	addi	r2,r2,0
   462d8:	10002626 	beq	r2,zero,46374 <__register_exitproc+0x110>
   462dc:	01006404 	movi	r4,400
   462e0:	d9400015 	stw	r5,0(sp)
   462e4:	d9800115 	stw	r6,4(sp)
   462e8:	d9c00215 	stw	r7,8(sp)
   462ec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   462f0:	d9400017 	ldw	r5,0(sp)
   462f4:	d9800117 	ldw	r6,4(sp)
   462f8:	d9c00217 	ldw	r7,8(sp)
   462fc:	10001d26 	beq	r2,zero,46374 <__register_exitproc+0x110>
   46300:	81000017 	ldw	r4,0(r16)
   46304:	10000115 	stw	zero,4(r2)
   46308:	02000044 	movi	r8,1
   4630c:	22405217 	ldw	r9,328(r4)
   46310:	0007883a 	mov	r3,zero
   46314:	12400015 	stw	r9,0(r2)
   46318:	20805215 	stw	r2,328(r4)
   4631c:	10006215 	stw	zero,392(r2)
   46320:	10006315 	stw	zero,396(r2)
   46324:	883fde26 	beq	r17,zero,462a0 <__alt_data_end+0xfffd42a0>
   46328:	18c9883a 	add	r4,r3,r3
   4632c:	2109883a 	add	r4,r4,r4
   46330:	1109883a 	add	r4,r2,r4
   46334:	21802215 	stw	r6,136(r4)
   46338:	01800044 	movi	r6,1
   4633c:	12406217 	ldw	r9,392(r2)
   46340:	30cc983a 	sll	r6,r6,r3
   46344:	4992b03a 	or	r9,r9,r6
   46348:	12406215 	stw	r9,392(r2)
   4634c:	21c04215 	stw	r7,264(r4)
   46350:	01000084 	movi	r4,2
   46354:	893fd21e 	bne	r17,r4,462a0 <__alt_data_end+0xfffd42a0>
   46358:	11006317 	ldw	r4,396(r2)
   4635c:	218cb03a 	or	r6,r4,r6
   46360:	11806315 	stw	r6,396(r2)
   46364:	003fce06 	br	462a0 <__alt_data_end+0xfffd42a0>
   46368:	18805304 	addi	r2,r3,332
   4636c:	18805215 	stw	r2,328(r3)
   46370:	003fc606 	br	4628c <__alt_data_end+0xfffd428c>
   46374:	00bfffc4 	movi	r2,-1
   46378:	003fd006 	br	462bc <__alt_data_end+0xfffd42bc>

0004637c <__call_exitprocs>:
   4637c:	defff504 	addi	sp,sp,-44
   46380:	df000915 	stw	fp,36(sp)
   46384:	dd400615 	stw	r21,24(sp)
   46388:	dc800315 	stw	r18,12(sp)
   4638c:	dfc00a15 	stw	ra,40(sp)
   46390:	ddc00815 	stw	r23,32(sp)
   46394:	dd800715 	stw	r22,28(sp)
   46398:	dd000515 	stw	r20,20(sp)
   4639c:	dcc00415 	stw	r19,16(sp)
   463a0:	dc400215 	stw	r17,8(sp)
   463a4:	dc000115 	stw	r16,4(sp)
   463a8:	d9000015 	stw	r4,0(sp)
   463ac:	2839883a 	mov	fp,r5
   463b0:	04800044 	movi	r18,1
   463b4:	057fffc4 	movi	r21,-1
   463b8:	00800134 	movhi	r2,4
   463bc:	109fed04 	addi	r2,r2,32692
   463c0:	12000017 	ldw	r8,0(r2)
   463c4:	45005217 	ldw	r20,328(r8)
   463c8:	44c05204 	addi	r19,r8,328
   463cc:	a0001c26 	beq	r20,zero,46440 <__call_exitprocs+0xc4>
   463d0:	a0800117 	ldw	r2,4(r20)
   463d4:	15ffffc4 	addi	r23,r2,-1
   463d8:	b8000d16 	blt	r23,zero,46410 <__call_exitprocs+0x94>
   463dc:	14000044 	addi	r16,r2,1
   463e0:	8421883a 	add	r16,r16,r16
   463e4:	8421883a 	add	r16,r16,r16
   463e8:	84402004 	addi	r17,r16,128
   463ec:	a463883a 	add	r17,r20,r17
   463f0:	a421883a 	add	r16,r20,r16
   463f4:	e0001e26 	beq	fp,zero,46470 <__call_exitprocs+0xf4>
   463f8:	80804017 	ldw	r2,256(r16)
   463fc:	e0801c26 	beq	fp,r2,46470 <__call_exitprocs+0xf4>
   46400:	bdffffc4 	addi	r23,r23,-1
   46404:	843fff04 	addi	r16,r16,-4
   46408:	8c7fff04 	addi	r17,r17,-4
   4640c:	bd7ff91e 	bne	r23,r21,463f4 <__alt_data_end+0xfffd43f4>
   46410:	00800034 	movhi	r2,0
   46414:	10800004 	addi	r2,r2,0
   46418:	10000926 	beq	r2,zero,46440 <__call_exitprocs+0xc4>
   4641c:	a0800117 	ldw	r2,4(r20)
   46420:	1000301e 	bne	r2,zero,464e4 <__call_exitprocs+0x168>
   46424:	a0800017 	ldw	r2,0(r20)
   46428:	10003226 	beq	r2,zero,464f4 <__call_exitprocs+0x178>
   4642c:	a009883a 	mov	r4,r20
   46430:	98800015 	stw	r2,0(r19)
   46434:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   46438:	9d000017 	ldw	r20,0(r19)
   4643c:	a03fe41e 	bne	r20,zero,463d0 <__alt_data_end+0xfffd43d0>
   46440:	dfc00a17 	ldw	ra,40(sp)
   46444:	df000917 	ldw	fp,36(sp)
   46448:	ddc00817 	ldw	r23,32(sp)
   4644c:	dd800717 	ldw	r22,28(sp)
   46450:	dd400617 	ldw	r21,24(sp)
   46454:	dd000517 	ldw	r20,20(sp)
   46458:	dcc00417 	ldw	r19,16(sp)
   4645c:	dc800317 	ldw	r18,12(sp)
   46460:	dc400217 	ldw	r17,8(sp)
   46464:	dc000117 	ldw	r16,4(sp)
   46468:	dec00b04 	addi	sp,sp,44
   4646c:	f800283a 	ret
   46470:	a0800117 	ldw	r2,4(r20)
   46474:	80c00017 	ldw	r3,0(r16)
   46478:	10bfffc4 	addi	r2,r2,-1
   4647c:	15c01426 	beq	r2,r23,464d0 <__call_exitprocs+0x154>
   46480:	80000015 	stw	zero,0(r16)
   46484:	183fde26 	beq	r3,zero,46400 <__alt_data_end+0xfffd4400>
   46488:	95c8983a 	sll	r4,r18,r23
   4648c:	a0806217 	ldw	r2,392(r20)
   46490:	a5800117 	ldw	r22,4(r20)
   46494:	2084703a 	and	r2,r4,r2
   46498:	10000b26 	beq	r2,zero,464c8 <__call_exitprocs+0x14c>
   4649c:	a0806317 	ldw	r2,396(r20)
   464a0:	2088703a 	and	r4,r4,r2
   464a4:	20000c1e 	bne	r4,zero,464d8 <__call_exitprocs+0x15c>
   464a8:	89400017 	ldw	r5,0(r17)
   464ac:	d9000017 	ldw	r4,0(sp)
   464b0:	183ee83a 	callr	r3
   464b4:	a0800117 	ldw	r2,4(r20)
   464b8:	15bfbf1e 	bne	r2,r22,463b8 <__alt_data_end+0xfffd43b8>
   464bc:	98800017 	ldw	r2,0(r19)
   464c0:	153fcf26 	beq	r2,r20,46400 <__alt_data_end+0xfffd4400>
   464c4:	003fbc06 	br	463b8 <__alt_data_end+0xfffd43b8>
   464c8:	183ee83a 	callr	r3
   464cc:	003ff906 	br	464b4 <__alt_data_end+0xfffd44b4>
   464d0:	a5c00115 	stw	r23,4(r20)
   464d4:	003feb06 	br	46484 <__alt_data_end+0xfffd4484>
   464d8:	89000017 	ldw	r4,0(r17)
   464dc:	183ee83a 	callr	r3
   464e0:	003ff406 	br	464b4 <__alt_data_end+0xfffd44b4>
   464e4:	a0800017 	ldw	r2,0(r20)
   464e8:	a027883a 	mov	r19,r20
   464ec:	1029883a 	mov	r20,r2
   464f0:	003fb606 	br	463cc <__alt_data_end+0xfffd43cc>
   464f4:	0005883a 	mov	r2,zero
   464f8:	003ffb06 	br	464e8 <__alt_data_end+0xfffd44e8>

000464fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   464fc:	defffd04 	addi	sp,sp,-12
   46500:	df000215 	stw	fp,8(sp)
   46504:	df000204 	addi	fp,sp,8
   46508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4650c:	0001883a 	nop
   46510:	e0bfff17 	ldw	r2,-4(fp)
   46514:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   46518:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4651c:	10000226 	beq	r2,zero,46528 <_exit+0x2c>
    ALT_SIM_FAIL();
   46520:	002af070 	cmpltui	zero,zero,43969
   46524:	00000106 	br	4652c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   46528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4652c:	003fff06 	br	4652c <__alt_data_end+0xfffd452c>

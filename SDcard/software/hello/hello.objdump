
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014230 memsz 0x00014230 flags r-x
    LOAD off    0x00015250 vaddr 0x00014250 paddr 0x00015d68 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00017880 vaddr 0x00017880 paddr 0x00017880 align 2**12
         filesz 0x00000000 memsz 0x00000700 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013bb8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000468  00013de8  00013de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  00014250  00015d68  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000700  00017880  00017880  00017880  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00017f80  00017f80  00016d68  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016d68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000eb8  00000000  00000000  00016d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024c4f  00000000  00000000  00017c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009102  00000000  00000000  0003c897  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bd9d  00000000  00000000  00045999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002584  00000000  00000000  00051738  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000430a  00000000  00000000  00053cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00057fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0006f834  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001918  00000000  00000000  0006f848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000748de  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000748e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000748e4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000748e5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000005  00000000  00000000  000748e6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  000748eb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  000748f0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000748f5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000018  00000000  00000000  000748fb  2**0
                  CONTENTS, READONLY
 26 .jdi          00003699  00000000  00000000  00074913  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00031992  00000000  00000000  00077fac  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00013de8 l    d  .rodata	00000000 .rodata
00014250 l    d  .rwdata	00000000 .rwdata
00017880 l    d  .bss	00000000 .bss
00017f80 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013f9a l     O .rodata	00000010 zeroes.4404
0000293c l     F .text	000000bc __sbprintf
00013faa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002b4c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000046a4 l     F .text	00000008 __fp_unlock
000046b8 l     F .text	0000019c __sinit.part.1
00004854 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014250 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00014694 l     O .rwdata	00000020 lc_ctype_charset
00014674 l     O .rwdata	00000020 lc_message_charset
000146b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00013fdc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007d28 l     F .text	000000fc __sprint_r.part.0
00014100 l     O .rodata	00000010 zeroes.4349
00009364 l     F .text	000000bc __sbprintf
00014110 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d3ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d4c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d4ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d5e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d6c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d7b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d990 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015d58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000dc04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dd40 l     F .text	00000034 alt_dev_reg
00014c9c l     O .rwdata	00001060 debug
00015cfc l     O .rwdata	0000002c SDCard
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000123c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000125cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012d50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013240 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000133a0 l     F .text	0000003c alt_get_errno
000133dc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000178ec g     O .bss	00000004 alt_instruction_exception_handler
000178b4 g     O .bss	00000004 aux_status_register
0000736c g     F .text	00000074 _mprec_log10
00007458 g     F .text	0000008c __any_on
00009918 g     F .text	00000054 _isatty_r
00013fe8 g     O .rodata	00000028 __mprec_tinytens
0000d8cc g     F .text	0000007c alt_main
000004d8 g     F .text	000000c0 _puts_r
00017e80 g     O .bss	00000100 alt_irq
0000996c g     F .text	00000060 _lseek_r
00015d68 g       *ABS*	00000000 __flash_rwdata_start
0000bd84 g     F .text	00000088 .hidden __eqdf2
0000e16c g     F .text	000001a4 Check_for_Master_Boot_Record
00017f80 g       *ABS*	00000000 __alt_heap_start
00011fd0 g     F .text	000001cc alt_up_sd_card_fclose
0000049c g     F .text	0000003c printf
00009b84 g     F .text	0000009c _wcrtomb_r
00007be8 g     F .text	0000005c __sseek
00004a04 g     F .text	00000010 __sinit
00009a2c g     F .text	00000140 __swbuf_r
000054d8 g     F .text	0000007c _setlocale_r
0000485c g     F .text	00000078 __sfmoreglue
0000d96c g     F .text	00000024 __malloc_unlock
000178d8 g     O .bss	00000004 current_sector_modified
000061a8 g     F .text	0000015c memmove
000049ec g     F .text	00000018 _cleanup
0000642c g     F .text	000000a8 _Balloc
00010ba0 g     F .text	000000c4 alt_up_sd_card_is_Present
0000deb4 g     F .text	0000004c Save_Modified_Sector
0000be0c g     F .text	000000dc .hidden __gtdf2
000137c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
000178d0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00000020 g       *ABS*	00000000 __flash_exceptions_start
000098bc g     F .text	0000005c _fstat_r
0001789c g     O .bss	00000004 errno
00007b64 g     F .text	00000008 __seofread
000178a4 g     O .bss	00000004 alt_argv
0001dd28 g       *ABS*	00000000 _gp
00011168 g     F .text	0000037c alt_up_sd_card_fopen
00010cd0 g     F .text	000000d0 alt_up_sd_card_find_first
000178c4 g     O .bss	00000004 command_argument_register
00014b1c g     O .rwdata	00000180 alt_fd_list
00010404 g     F .text	00000134 find_first_empty_record_in_root_directory
00012ef0 g     F .text	00000090 alt_find_dev
00006060 g     F .text	00000148 memcpy
000046ac g     F .text	0000000c _cleanup_r
0000d1c4 g     F .text	000000dc .hidden __floatsidf
00013324 g     F .text	0000007c alt_io_redirect
0000bee8 g     F .text	000000f4 .hidden __ltdf2
00013de8 g       *ABS*	00000000 __DTOR_END__
00000598 g     F .text	00000014 puts
000139b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000fff4 g     F .text	000001bc find_first_empty_cluster
00007a48 g     F .text	00000074 __fpclassifyd
000072c8 g     F .text	000000a4 __ratio
00010ae4 g     F .text	000000bc alt_up_sd_card_open_dev
00009348 g     F .text	0000001c __vfiprintf_internal
000127c4 g     F .text	0000021c altera_avalon_jtag_uart_read
0000046c g     F .text	00000030 _printf_r
0000aa24 g     F .text	00000064 .hidden __udivsi3
0000d61c g     F .text	000000ac isatty
00014038 g     O .rodata	000000c8 __mprec_tens
00005554 g     F .text	0000000c __locale_charset
00017898 g     O .bss	00000004 __malloc_top_pad
00015d30 g     O .rwdata	00000004 __mb_cur_max
00005584 g     F .text	0000000c _localeconv_r
00000000 g       *ABS*	00000000 __alt_mem_ram
00006860 g     F .text	0000003c __i2b
00004e88 g     F .text	000004c8 __sfvwrite_r
0000f2d4 g     F .text	000000b8 get_dir_divider_location
00007abc g     F .text	00000054 _sbrk_r
0000efa4 g     F .text	000000c4 filename_to_upper_case
000114e4 g     F .text	00000088 alt_up_sd_card_set_attributes
0000e310 g     F .text	0000027c Read_File_Record_At_Offset
000099cc g     F .text	00000060 _read_r
00015d50 g     O .rwdata	00000004 alt_max_fd
0000fb70 g     F .text	00000484 find_file_in_directory
000095b0 g     F .text	000000f0 _fclose_r
00004674 g     F .text	00000030 fflush
00017894 g     O .bss	00000004 __malloc_max_sbrked_mem
00010c64 g     F .text	0000006c alt_up_sd_card_is_FAT16
0000ab08 g     F .text	000008ac .hidden __adddf3
00007070 g     F .text	0000010c __b2d
0000a368 g     F .text	000005c4 .hidden __umoddi3
0000d7f0 g     F .text	000000dc lseek
00015d28 g     O .rwdata	00000004 _global_impure_ptr
0000f628 g     F .text	00000548 get_home_directory_cluster_for_file
000074e4 g     F .text	00000564 _realloc_r
00017f80 g       *ABS*	00000000 __bss_end
00013150 g     F .text	000000f0 alt_iic_isr_register
000136c0 g     F .text	00000108 alt_tick
00009d6c g     F .text	000005fc .hidden __udivdi3
00009818 g     F .text	00000024 _fputwc_r
00014010 g     O .rodata	00000028 __mprec_bigtens
00006644 g     F .text	00000104 __s2b
0000d2a0 g     F .text	000000a8 .hidden __floatunsidf
00006db0 g     F .text	00000060 __mcmp
000178dc g     O .bss	00000004 current_sector_index
00004a24 g     F .text	00000018 __fp_lock_all
00013104 g     F .text	0000004c alt_ic_irq_enabled
00013624 g     F .text	0000009c alt_alarm_stop
0000e08c g     F .text	000000e0 mark_cluster
000178e0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00014af4 g     O .rwdata	00000028 alt_dev_null
00010538 g     F .text	0000018c convert_filename_to_name_extension
00012d30 g     F .text	00000020 alt_dcache_flush_all
00006748 g     F .text	00000068 __hi0bits
000178b0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0000d144 g     F .text	00000080 .hidden __fixdfsi
000101b0 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
00015d68 g       *ABS*	00000000 __ram_rwdata_end
00015d48 g     O .rwdata	00000008 alt_dev_list
0000dc40 g     F .text	00000100 write
000178d4 g     O .bss	00000004 device_pointer
00014250 g       *ABS*	00000000 __ram_rodata_end
0000d528 g     F .text	000000b8 fstat
0000bee8 g     F .text	000000f4 .hidden __ledf2
00006b28 g     F .text	00000140 __pow5mult
00007e3c g     F .text	0000150c ___vfiprintf_internal_r
0001788c g     O .bss	00000004 __nlocale_changed
0000aa88 g     F .text	00000058 .hidden __umodsi3
00017f80 g       *ABS*	00000000 end
00012300 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00013de8 g       *ABS*	00000000 __CTOR_LIST__
00032000 g       *ABS*	00000000 __alt_stack_pointer
0000d348 g     F .text	00000064 .hidden __clzsi2
000129e0 g     F .text	00000224 altera_avalon_jtag_uart_write
00004a14 g     F .text	00000004 __sfp_lock_acquire
00005f7c g     F .text	000000e4 memchr
00000644 g     F .text	000022dc ___vfprintf_internal_r
00004b78 g     F .text	00000310 _free_r
00005560 g     F .text	00000010 __locale_mb_cur_max
00013c34 g     F .text	00000180 __call_exitprocs
00017888 g     O .bss	00000004 __mlocale_changed
00015d34 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
000178e4 g     O .bss	00000004 _alt_tick_rate
00017880 g     O .bss	00000004 pixel
00006c68 g     F .text	00000148 __lshift
000178e8 g     O .bss	00000004 _alt_nticks
0000d9cc g     F .text	00000104 read
0000ddac g     F .text	00000054 alt_sys_init
00013b1c g     F .text	00000118 __register_exitproc
0000689c g     F .text	0000028c __multiply
0001266c g     F .text	00000068 altera_avalon_jtag_uart_close
0000aae0 g     F .text	00000028 .hidden __mulsi3
00014250 g       *ABS*	00000000 __ram_rwdata_start
00013de8 g       *ABS*	00000000 __ram_rodata_start
000178f0 g     O .bss	00000028 __malloc_current_mallinfo
0000717c g     F .text	0000014c __d2b
000178ac g     O .bss	00000004 initialized
0001219c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000138f4 g     F .text	000000c4 alt_get_fd
00017918 g     O .bss	00000014 search_data
00009480 g     F .text	00000054 _close_r
00013aa0 g     F .text	0000007c memcmp
0001225c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017f80 g       *ABS*	00000000 __alt_stack_base
000122ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000029f8 g     F .text	00000154 __swsetup_r
0000b3b4 g     F .text	000009d0 .hidden __divdf3
000048d4 g     F .text	00000118 __sfp
0001792c g     O .bss	00000054 boot_sector_data
000073e0 g     F .text	00000078 __copybits
000146ec g     O .rwdata	00000408 __malloc_av_
00004a20 g     F .text	00000004 __sinit_lock_release
0000bfdc g     F .text	0000086c .hidden __muldf3
00007b10 g     F .text	00000054 __sread
000137ec g     F .text	00000108 alt_find_file
00012d8c g     F .text	000000a4 alt_dev_llist_insert
0000d948 g     F .text	00000024 __malloc_lock
0000db54 g     F .text	000000b0 sbrk
00004618 g     F .text	0000005c _fflush_r
000094d4 g     F .text	000000dc _calloc_r
00017880 g       *ABS*	00000000 __bss_start
00006304 g     F .text	00000128 memset
0000026c g     F .text	00000200 main
000178a8 g     O .bss	00000004 alt_envp
00017890 g     O .bss	00000004 __malloc_max_total_mem
000121fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b6c g     F .text	00000018 __swbuf
0001156c g     F .text	00000088 alt_up_sd_card_get_attributes
0000de00 g     F .text	000000b4 Write_Sector_Data
00011984 g     F .text	0000064c alt_up_sd_card_write
00007c44 g     F .text	00000008 __sclose
00032000 g       *ABS*	00000000 __alt_heap_limit
000096a0 g     F .text	00000014 fclose
00002d74 g     F .text	00001688 _dtoa_r
00005770 g     F .text	0000080c _malloc_r
00009ce0 g     F .text	00000030 __ascii_wctomb
00015d54 g     O .rwdata	00000004 alt_errno
00005350 g     F .text	000000c4 _fwalk
0000a92c g     F .text	00000084 .hidden __divsi3
00004a54 g     F .text	00000124 _malloc_trim_r
00013de8 g       *ABS*	00000000 __CTOR_END__
000178b8 g     O .bss	00000004 status_register
00007c4c g     F .text	000000dc strcmp
000178c0 g     O .bss	00000004 command_register
00013de8 g       *ABS*	00000000 __flash_rodata_start
00013de8 g       *ABS*	00000000 __DTOR_LIST__
0000bd84 g     F .text	00000088 .hidden __nedf2
0000dd74 g     F .text	00000038 alt_irq_init
0000dad0 g     F .text	00000084 alt_release_fd
0000dfd8 g     F .text	000000b4 get_cluster_flag
00014120 g     O .rodata	00000100 .hidden __clz_tab
0000e58c g     F .text	0000028c Write_File_Record_At_Offset
00017884 g     O .bss	00000004 _PathLocale
00013a54 g     F .text	00000014 atexit
00009420 g     F .text	00000060 _write_r
00005590 g     F .text	00000018 setlocale
0000e818 g     F .text	000006a0 Check_for_DOS_FAT
000106c4 g     F .text	000002d8 create_file
00015d2c g     O .rwdata	00000004 _impure_ptr
000178bc g     O .bss	00000004 CSD_register_w0
000178a0 g     O .bss	00000004 alt_argc
000043fc g     F .text	0000021c __sflush_r
00012e90 g     F .text	00000060 _do_dtors
0000557c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000700c g     F .text	00000064 __ulp
00004a3c g     F .text	00000018 __fp_unlock_all
00015d40 g     O .rwdata	00000008 alt_fs_list
0000f068 g     F .text	0000026c check_file_name_for_FAT16_compliance
000178c8 g     O .bss	00000004 buffer_memory
00000020 g       *ABS*	00000000 __ram_exceptions_start
000055a8 g     F .text	0000000c localeconv
00012fa0 g     F .text	00000050 alt_ic_isr_register
000178cc g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00015d68 g       *ABS*	00000000 _edata
00017f80 g       *ABS*	00000000 _end
00017980 g     O .bss	00000500 active_files
000096b4 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001099c g     F .text	00000148 copy_file_record_name_to_string
000126d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000eeb8 g     F .text	000000ec Look_for_FAT16
00013078 g     F .text	0000008c alt_ic_irq_disable
00007b6c g     F .text	0000007c __swrite
00015d38 g     O .rwdata	00000004 __malloc_trim_threshold
00005570 g     F .text	0000000c __locale_msgcharset
00013a68 g     F .text	00000038 exit
00010da0 g     F .text	000003c8 alt_up_sd_card_find_next
00005414 g     F .text	000000c4 _fwalk_reent
00006e10 g     F .text	000001fc __mdiff
0000a9b0 g     F .text	00000074 .hidden __modsi3
0000df00 g     F .text	000000d8 Read_Sector_Data
00032000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004a18 g     F .text	00000004 __sfp_lock_release
00013db4 g     F .text	00000034 _exit
00012c04 g     F .text	0000012c alt_alarm_start
000115f4 g     F .text	00000390 alt_up_sd_card_read
000055b4 g     F .text	000001bc __smakebuf_r
000005ac g     F .text	00000098 strlen
000134c8 g     F .text	0000015c open
0000be0c g     F .text	000000dc .hidden __gedf2
00015d3c g     O .rwdata	00000004 __wctomb
00007e24 g     F .text	00000018 __sprint_r
00012f80 g     F .text	00000020 alt_icache_flush_all
00015d5c g     O .rwdata	00000004 alt_priority_mask
00012ff0 g     F .text	00000088 alt_ic_irq_enable
00002920 g     F .text	0000001c __vfprintf_internal
00009d10 g     F .text	0000005c _wctomb_r
0000c848 g     F .text	000008fc .hidden __subdf3
000067b0 g     F .text	000000b0 __lo0bits
00015d60 g     O .rwdata	00000008 alt_alarm_list
00012e30 g     F .text	00000060 _do_ctors
00009c20 g     F .text	000000c0 wcrtomb
0000d3e8 g     F .text	000000d8 close
0000d730 g     F .text	00000084 alt_load
0000f38c g     F .text	0000029c match_file_record_to_name_ext
0000983c g     F .text	00000080 fputwc
00004a1c g     F .text	00000004 __sinit_lock_acquire
000064fc g     F .text	00000148 __multadd
000064d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109fa004 	addi	r2,r2,32384
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109fa004 	addi	r2,r2,32384
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6f117 	ldw	r2,-25660(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6f117 	ldw	r2,-25660(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6b74a14 	ori	gp,gp,56616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	109e2014 	ori	r2,r2,30848

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18dfe014 	ori	r3,r3,32640

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000d7300 	call	d730 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000d8cc0 	call	d8cc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffce268>

0000026c <main>:
#include "unistd.h"


int pixel;
	int main(void)
	{
     26c:	defff804 	addi	sp,sp,-32
     270:	dfc00715 	stw	ra,28(sp)
     274:	df000615 	stw	fp,24(sp)
     278:	df000604 	addi	fp,sp,24
	    alt_up_sd_card_dev *device_reference = NULL;
     27c:	e03ffc15 	stw	zero,-16(fp)
	    int connected = 0;
     280:	e03ffa15 	stw	zero,-24(fp)

	    device_reference = alt_up_sd_card_open_dev("/dev/SDCard");
     284:	01000074 	movhi	r4,1
     288:	210f7a04 	addi	r4,r4,15848
     28c:	0010ae40 	call	10ae4 <alt_up_sd_card_open_dev>
     290:	e0bffc15 	stw	r2,-16(fp)
	    if (device_reference != NULL)
     294:	e0bffc17 	ldw	r2,-16(fp)
     298:	10006b26 	beq	r2,zero,448 <main+0x1dc>
	    {
		printf("Initialized. Waiting for SD card...\n");
     29c:	01000074 	movhi	r4,1
     2a0:	210f7d04 	addi	r4,r4,15860
     2a4:	00005980 	call	598 <puts>
		while(1)
		{
		    if ((connected == 0) && (alt_up_sd_card_is_Present()))
     2a8:	e0bffa17 	ldw	r2,-24(fp)
     2ac:	10005c1e 	bne	r2,zero,420 <main+0x1b4>
     2b0:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
     2b4:	10005a26 	beq	r2,zero,420 <main+0x1b4>
		    {
		        printf("Card connected.\n");
     2b8:	01000074 	movhi	r4,1
     2bc:	210f8604 	addi	r4,r4,15896
     2c0:	00005980 	call	598 <puts>
		        if (alt_up_sd_card_is_FAT16())
     2c4:	0010c640 	call	10c64 <alt_up_sd_card_is_FAT16>
     2c8:	10004f26 	beq	r2,zero,408 <main+0x19c>
		        {
			    printf("FAT16 file system detected.\n");
     2cc:	01000074 	movhi	r4,1
     2d0:	210f8a04 	addi	r4,r4,15912
     2d4:	00005980 	call	598 <puts>

			    printf("Looking for first file.\n");
     2d8:	01000074 	movhi	r4,1
     2dc:	210f9104 	addi	r4,r4,15940
     2e0:	00005980 	call	598 <puts>
			    char * firstFile = "filenameunchanged";
     2e4:	00800074 	movhi	r2,1
     2e8:	108f9704 	addi	r2,r2,15964
     2ec:	e0bffd15 	stw	r2,-12(fp)
			    alt_up_sd_card_find_first(".", firstFile);
     2f0:	e17ffd17 	ldw	r5,-12(fp)
     2f4:	01000074 	movhi	r4,1
     2f8:	210f9c04 	addi	r4,r4,15984
     2fc:	0010cd00 	call	10cd0 <alt_up_sd_card_find_first>
			    printf("Volume Name: '%s'\n\n", firstFile);
     300:	e17ffd17 	ldw	r5,-12(fp)
     304:	01000074 	movhi	r4,1
     308:	210f9d04 	addi	r4,r4,15988
     30c:	000049c0 	call	49c <printf>

			    short file;
			    while((file = alt_up_sd_card_find_next(firstFile)) != -1)
     310:	00003606 	br	3ec <main+0x180>
			    {
			        int contentCount = 0;
     314:	e03ffb15 	stw	zero,-20(fp)
			        printf("===========================\n");
     318:	01000074 	movhi	r4,1
     31c:	210fa204 	addi	r4,r4,16008
     320:	00005980 	call	598 <puts>
			        printf("Found file: '%s'\n", firstFile);
     324:	e17ffd17 	ldw	r5,-12(fp)
     328:	01000074 	movhi	r4,1
     32c:	210fa904 	addi	r4,r4,16036
     330:	000049c0 	call	49c <printf>

			        short fileHandle = alt_up_sd_card_fopen(firstFile,false);
     334:	000b883a 	mov	r5,zero
     338:	e13ffd17 	ldw	r4,-12(fp)
     33c:	00111680 	call	11168 <alt_up_sd_card_fopen>
     340:	e0bffe8d 	sth	r2,-6(fp)
			        printf("File handle: %i\n", fileHandle);
     344:	e0bffe8f 	ldh	r2,-6(fp)
     348:	100b883a 	mov	r5,r2
     34c:	01000074 	movhi	r4,1
     350:	210fae04 	addi	r4,r4,16056
     354:	000049c0 	call	49c <printf>

			        printf("Contents:\n");
     358:	01000074 	movhi	r4,1
     35c:	210fb304 	addi	r4,r4,16076
     360:	00005980 	call	598 <puts>
			        short int readCharacter;
			        short int readCharacter1;
			        while ((readCharacter = alt_up_sd_card_read(fileHandle)) != -1)
     364:	00001306 	br	3b4 <main+0x148>
			        {
			        	pixel = readCharacter;
     368:	e0bfff0f 	ldh	r2,-4(fp)
     36c:	d0a6d615 	stw	r2,-25768(gp)
			        	readCharacter1 = alt_up_sd_card_read(fileHandle);
     370:	e0bffe8f 	ldh	r2,-6(fp)
     374:	1009883a 	mov	r4,r2
     378:	00115f40 	call	115f4 <alt_up_sd_card_read>
     37c:	e0bfff8d 	sth	r2,-2(fp)
			        	pixel = (pixel<<8)|readCharacter1;
     380:	d0a6d617 	ldw	r2,-25768(gp)
     384:	1006923a 	slli	r3,r2,8
     388:	e0bfff8f 	ldh	r2,-2(fp)
     38c:	1884b03a 	or	r2,r3,r2
     390:	d0a6d615 	stw	r2,-25768(gp)
			            printf("%x\n", pixel);
     394:	d0a6d617 	ldw	r2,-25768(gp)
     398:	100b883a 	mov	r5,r2
     39c:	01000074 	movhi	r4,1
     3a0:	210fb604 	addi	r4,r4,16088
     3a4:	000049c0 	call	49c <printf>
			            ++contentCount;
     3a8:	e0bffb17 	ldw	r2,-20(fp)
     3ac:	10800044 	addi	r2,r2,1
     3b0:	e0bffb15 	stw	r2,-20(fp)
			        printf("File handle: %i\n", fileHandle);

			        printf("Contents:\n");
			        short int readCharacter;
			        short int readCharacter1;
			        while ((readCharacter = alt_up_sd_card_read(fileHandle)) != -1)
     3b4:	e0bffe8f 	ldh	r2,-6(fp)
     3b8:	1009883a 	mov	r4,r2
     3bc:	00115f40 	call	115f4 <alt_up_sd_card_read>
     3c0:	e0bfff0d 	sth	r2,-4(fp)
     3c4:	e0bfff0f 	ldh	r2,-4(fp)
     3c8:	10bfffd8 	cmpnei	r2,r2,-1
     3cc:	103fe61e 	bne	r2,zero,368 <__alt_data_end+0xfffce368>
			        	pixel = (pixel<<8)|readCharacter1;
			            printf("%x\n", pixel);
			            ++contentCount;

			        }
			        printf("\nContent size: %i", contentCount);
     3d0:	e17ffb17 	ldw	r5,-20(fp)
     3d4:	01000074 	movhi	r4,1
     3d8:	210fb704 	addi	r4,r4,16092
     3dc:	000049c0 	call	49c <printf>
			        printf("\n===========================\n\n");
     3e0:	01000074 	movhi	r4,1
     3e4:	210fbc04 	addi	r4,r4,16112
     3e8:	00005980 	call	598 <puts>
			    char * firstFile = "filenameunchanged";
			    alt_up_sd_card_find_first(".", firstFile);
			    printf("Volume Name: '%s'\n\n", firstFile);

			    short file;
			    while((file = alt_up_sd_card_find_next(firstFile)) != -1)
     3ec:	e13ffd17 	ldw	r4,-12(fp)
     3f0:	0010da00 	call	10da0 <alt_up_sd_card_find_next>
     3f4:	e0bffe0d 	sth	r2,-8(fp)
     3f8:	e0bffe0f 	ldh	r2,-8(fp)
     3fc:	10bfffd8 	cmpnei	r2,r2,-1
     400:	103fc41e 	bne	r2,zero,314 <__alt_data_end+0xfffce314>
     404:	00000306 	br	414 <main+0x1a8>
			        printf("\n===========================\n\n");
			    }
		        }
		        else
		        {
			    printf("Unknown file system.\n");
     408:	01000074 	movhi	r4,1
     40c:	210fc404 	addi	r4,r4,16144
     410:	00005980 	call	598 <puts>
		        }

		        connected = 1;
     414:	00800044 	movi	r2,1
     418:	e0bffa15 	stw	r2,-24(fp)
     41c:	00000906 	br	444 <main+0x1d8>
		    }
		    else if ((connected == 1) && (alt_up_sd_card_is_Present() == false))
     420:	e0bffa17 	ldw	r2,-24(fp)
     424:	10800058 	cmpnei	r2,r2,1
     428:	103f9f1e 	bne	r2,zero,2a8 <__alt_data_end+0xfffce2a8>
     42c:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
     430:	103f9d1e 	bne	r2,zero,2a8 <__alt_data_end+0xfffce2a8>
		    {
		        printf("Card disconnected.\n");
     434:	01000074 	movhi	r4,1
     438:	210fca04 	addi	r4,r4,16168
     43c:	00005980 	call	598 <puts>
		        connected = 0;
     440:	e03ffa15 	stw	zero,-24(fp)
		    }
		}
     444:	003f9806 	br	2a8 <__alt_data_end+0xfffce2a8>
	    }
	    else
	    {
		printf("Initialization failed.\n");
     448:	01000074 	movhi	r4,1
     44c:	210fcf04 	addi	r4,r4,16188
     450:	00005980 	call	598 <puts>
     454:	0005883a 	mov	r2,zero
	    }
	}
     458:	e037883a 	mov	sp,fp
     45c:	dfc00117 	ldw	ra,4(sp)
     460:	df000017 	ldw	fp,0(sp)
     464:	dec00204 	addi	sp,sp,8
     468:	f800283a 	ret

0000046c <_printf_r>:
     46c:	defffd04 	addi	sp,sp,-12
     470:	2805883a 	mov	r2,r5
     474:	dfc00015 	stw	ra,0(sp)
     478:	d9800115 	stw	r6,4(sp)
     47c:	d9c00215 	stw	r7,8(sp)
     480:	21400217 	ldw	r5,8(r4)
     484:	d9c00104 	addi	r7,sp,4
     488:	100d883a 	mov	r6,r2
     48c:	00006440 	call	644 <___vfprintf_internal_r>
     490:	dfc00017 	ldw	ra,0(sp)
     494:	dec00304 	addi	sp,sp,12
     498:	f800283a 	ret

0000049c <printf>:
     49c:	defffc04 	addi	sp,sp,-16
     4a0:	dfc00015 	stw	ra,0(sp)
     4a4:	d9400115 	stw	r5,4(sp)
     4a8:	d9800215 	stw	r6,8(sp)
     4ac:	d9c00315 	stw	r7,12(sp)
     4b0:	00800074 	movhi	r2,1
     4b4:	10974b04 	addi	r2,r2,23852
     4b8:	10800017 	ldw	r2,0(r2)
     4bc:	200b883a 	mov	r5,r4
     4c0:	d9800104 	addi	r6,sp,4
     4c4:	11000217 	ldw	r4,8(r2)
     4c8:	00029200 	call	2920 <__vfprintf_internal>
     4cc:	dfc00017 	ldw	ra,0(sp)
     4d0:	dec00404 	addi	sp,sp,16
     4d4:	f800283a 	ret

000004d8 <_puts_r>:
     4d8:	defff604 	addi	sp,sp,-40
     4dc:	dc000715 	stw	r16,28(sp)
     4e0:	2021883a 	mov	r16,r4
     4e4:	2809883a 	mov	r4,r5
     4e8:	dc400815 	stw	r17,32(sp)
     4ec:	dfc00915 	stw	ra,36(sp)
     4f0:	2823883a 	mov	r17,r5
     4f4:	00005ac0 	call	5ac <strlen>
     4f8:	10c00044 	addi	r3,r2,1
     4fc:	d8800115 	stw	r2,4(sp)
     500:	00800074 	movhi	r2,1
     504:	108fd504 	addi	r2,r2,16212
     508:	d8800215 	stw	r2,8(sp)
     50c:	00800044 	movi	r2,1
     510:	d8800315 	stw	r2,12(sp)
     514:	00800084 	movi	r2,2
     518:	dc400015 	stw	r17,0(sp)
     51c:	d8c00615 	stw	r3,24(sp)
     520:	dec00415 	stw	sp,16(sp)
     524:	d8800515 	stw	r2,20(sp)
     528:	80000226 	beq	r16,zero,534 <_puts_r+0x5c>
     52c:	80800e17 	ldw	r2,56(r16)
     530:	10001426 	beq	r2,zero,584 <_puts_r+0xac>
     534:	81400217 	ldw	r5,8(r16)
     538:	2880030b 	ldhu	r2,12(r5)
     53c:	10c8000c 	andi	r3,r2,8192
     540:	1800061e 	bne	r3,zero,55c <_puts_r+0x84>
     544:	29001917 	ldw	r4,100(r5)
     548:	00f7ffc4 	movi	r3,-8193
     54c:	10880014 	ori	r2,r2,8192
     550:	20c6703a 	and	r3,r4,r3
     554:	2880030d 	sth	r2,12(r5)
     558:	28c01915 	stw	r3,100(r5)
     55c:	d9800404 	addi	r6,sp,16
     560:	8009883a 	mov	r4,r16
     564:	0004e880 	call	4e88 <__sfvwrite_r>
     568:	1000091e 	bne	r2,zero,590 <_puts_r+0xb8>
     56c:	00800284 	movi	r2,10
     570:	dfc00917 	ldw	ra,36(sp)
     574:	dc400817 	ldw	r17,32(sp)
     578:	dc000717 	ldw	r16,28(sp)
     57c:	dec00a04 	addi	sp,sp,40
     580:	f800283a 	ret
     584:	8009883a 	mov	r4,r16
     588:	0004a040 	call	4a04 <__sinit>
     58c:	003fe906 	br	534 <__alt_data_end+0xfffce534>
     590:	00bfffc4 	movi	r2,-1
     594:	003ff606 	br	570 <__alt_data_end+0xfffce570>

00000598 <puts>:
     598:	00800074 	movhi	r2,1
     59c:	10974b04 	addi	r2,r2,23852
     5a0:	200b883a 	mov	r5,r4
     5a4:	11000017 	ldw	r4,0(r2)
     5a8:	00004d81 	jmpi	4d8 <_puts_r>

000005ac <strlen>:
     5ac:	208000cc 	andi	r2,r4,3
     5b0:	10002026 	beq	r2,zero,634 <strlen+0x88>
     5b4:	20800007 	ldb	r2,0(r4)
     5b8:	10002026 	beq	r2,zero,63c <strlen+0x90>
     5bc:	2005883a 	mov	r2,r4
     5c0:	00000206 	br	5cc <strlen+0x20>
     5c4:	10c00007 	ldb	r3,0(r2)
     5c8:	18001826 	beq	r3,zero,62c <strlen+0x80>
     5cc:	10800044 	addi	r2,r2,1
     5d0:	10c000cc 	andi	r3,r2,3
     5d4:	183ffb1e 	bne	r3,zero,5c4 <__alt_data_end+0xfffce5c4>
     5d8:	10c00017 	ldw	r3,0(r2)
     5dc:	01ffbff4 	movhi	r7,65279
     5e0:	39ffbfc4 	addi	r7,r7,-257
     5e4:	00ca303a 	nor	r5,zero,r3
     5e8:	01a02074 	movhi	r6,32897
     5ec:	19c7883a 	add	r3,r3,r7
     5f0:	31a02004 	addi	r6,r6,-32640
     5f4:	1946703a 	and	r3,r3,r5
     5f8:	1986703a 	and	r3,r3,r6
     5fc:	1800091e 	bne	r3,zero,624 <strlen+0x78>
     600:	10800104 	addi	r2,r2,4
     604:	10c00017 	ldw	r3,0(r2)
     608:	19cb883a 	add	r5,r3,r7
     60c:	00c6303a 	nor	r3,zero,r3
     610:	28c6703a 	and	r3,r5,r3
     614:	1986703a 	and	r3,r3,r6
     618:	183ff926 	beq	r3,zero,600 <__alt_data_end+0xfffce600>
     61c:	00000106 	br	624 <strlen+0x78>
     620:	10800044 	addi	r2,r2,1
     624:	10c00007 	ldb	r3,0(r2)
     628:	183ffd1e 	bne	r3,zero,620 <__alt_data_end+0xfffce620>
     62c:	1105c83a 	sub	r2,r2,r4
     630:	f800283a 	ret
     634:	2005883a 	mov	r2,r4
     638:	003fe706 	br	5d8 <__alt_data_end+0xfffce5d8>
     63c:	0005883a 	mov	r2,zero
     640:	f800283a 	ret

00000644 <___vfprintf_internal_r>:
     644:	deffb804 	addi	sp,sp,-288
     648:	dfc04715 	stw	ra,284(sp)
     64c:	ddc04515 	stw	r23,276(sp)
     650:	dd404315 	stw	r21,268(sp)
     654:	d9002d15 	stw	r4,180(sp)
     658:	282f883a 	mov	r23,r5
     65c:	302b883a 	mov	r21,r6
     660:	d9c02e15 	stw	r7,184(sp)
     664:	df004615 	stw	fp,280(sp)
     668:	dd804415 	stw	r22,272(sp)
     66c:	dd004215 	stw	r20,264(sp)
     670:	dcc04115 	stw	r19,260(sp)
     674:	dc804015 	stw	r18,256(sp)
     678:	dc403f15 	stw	r17,252(sp)
     67c:	dc003e15 	stw	r16,248(sp)
     680:	00055840 	call	5584 <_localeconv_r>
     684:	10800017 	ldw	r2,0(r2)
     688:	1009883a 	mov	r4,r2
     68c:	d8803415 	stw	r2,208(sp)
     690:	00005ac0 	call	5ac <strlen>
     694:	d8803715 	stw	r2,220(sp)
     698:	d8802d17 	ldw	r2,180(sp)
     69c:	10000226 	beq	r2,zero,6a8 <___vfprintf_internal_r+0x64>
     6a0:	10800e17 	ldw	r2,56(r2)
     6a4:	1000fb26 	beq	r2,zero,a94 <___vfprintf_internal_r+0x450>
     6a8:	b880030b 	ldhu	r2,12(r23)
     6ac:	10c8000c 	andi	r3,r2,8192
     6b0:	1800061e 	bne	r3,zero,6cc <___vfprintf_internal_r+0x88>
     6b4:	b9001917 	ldw	r4,100(r23)
     6b8:	00f7ffc4 	movi	r3,-8193
     6bc:	10880014 	ori	r2,r2,8192
     6c0:	20c6703a 	and	r3,r4,r3
     6c4:	b880030d 	sth	r2,12(r23)
     6c8:	b8c01915 	stw	r3,100(r23)
     6cc:	10c0020c 	andi	r3,r2,8
     6d0:	1800c326 	beq	r3,zero,9e0 <___vfprintf_internal_r+0x39c>
     6d4:	b8c00417 	ldw	r3,16(r23)
     6d8:	1800c126 	beq	r3,zero,9e0 <___vfprintf_internal_r+0x39c>
     6dc:	1080068c 	andi	r2,r2,26
     6e0:	00c00284 	movi	r3,10
     6e4:	10c0c626 	beq	r2,r3,a00 <___vfprintf_internal_r+0x3bc>
     6e8:	d8c00404 	addi	r3,sp,16
     6ec:	05000074 	movhi	r20,1
     6f0:	d9001e04 	addi	r4,sp,120
     6f4:	a50fe684 	addi	r20,r20,16282
     6f8:	d8c01e15 	stw	r3,120(sp)
     6fc:	d8002015 	stw	zero,128(sp)
     700:	d8001f15 	stw	zero,124(sp)
     704:	d8003315 	stw	zero,204(sp)
     708:	d8003615 	stw	zero,216(sp)
     70c:	d8003815 	stw	zero,224(sp)
     710:	1811883a 	mov	r8,r3
     714:	d8003915 	stw	zero,228(sp)
     718:	d8003a15 	stw	zero,232(sp)
     71c:	d8002f15 	stw	zero,188(sp)
     720:	d9002815 	stw	r4,160(sp)
     724:	a8800007 	ldb	r2,0(r21)
     728:	10028b26 	beq	r2,zero,1158 <___vfprintf_internal_r+0xb14>
     72c:	00c00944 	movi	r3,37
     730:	a823883a 	mov	r17,r21
     734:	10c0021e 	bne	r2,r3,740 <___vfprintf_internal_r+0xfc>
     738:	00001406 	br	78c <___vfprintf_internal_r+0x148>
     73c:	10c00326 	beq	r2,r3,74c <___vfprintf_internal_r+0x108>
     740:	8c400044 	addi	r17,r17,1
     744:	88800007 	ldb	r2,0(r17)
     748:	103ffc1e 	bne	r2,zero,73c <__alt_data_end+0xfffce73c>
     74c:	8d61c83a 	sub	r16,r17,r21
     750:	80000e26 	beq	r16,zero,78c <___vfprintf_internal_r+0x148>
     754:	d8c02017 	ldw	r3,128(sp)
     758:	d8801f17 	ldw	r2,124(sp)
     75c:	45400015 	stw	r21,0(r8)
     760:	1c07883a 	add	r3,r3,r16
     764:	10800044 	addi	r2,r2,1
     768:	d8c02015 	stw	r3,128(sp)
     76c:	44000115 	stw	r16,4(r8)
     770:	d8801f15 	stw	r2,124(sp)
     774:	00c001c4 	movi	r3,7
     778:	1880a916 	blt	r3,r2,a20 <___vfprintf_internal_r+0x3dc>
     77c:	42000204 	addi	r8,r8,8
     780:	d9402f17 	ldw	r5,188(sp)
     784:	2c0b883a 	add	r5,r5,r16
     788:	d9402f15 	stw	r5,188(sp)
     78c:	88800007 	ldb	r2,0(r17)
     790:	1000aa26 	beq	r2,zero,a3c <___vfprintf_internal_r+0x3f8>
     794:	8d400044 	addi	r21,r17,1
     798:	8c400047 	ldb	r17,1(r17)
     79c:	0021883a 	mov	r16,zero
     7a0:	00bfffc4 	movi	r2,-1
     7a4:	0025883a 	mov	r18,zero
     7a8:	dc002905 	stb	r16,164(sp)
     7ac:	d8002785 	stb	zero,158(sp)
     7b0:	d8002b05 	stb	zero,172(sp)
     7b4:	d8802a15 	stw	r2,168(sp)
     7b8:	d8003115 	stw	zero,196(sp)
     7bc:	04c01604 	movi	r19,88
     7c0:	05800244 	movi	r22,9
     7c4:	9021883a 	mov	r16,r18
     7c8:	4039883a 	mov	fp,r8
     7cc:	ad400044 	addi	r21,r21,1
     7d0:	88bff804 	addi	r2,r17,-32
     7d4:	98833236 	bltu	r19,r2,14a0 <___vfprintf_internal_r+0xe5c>
     7d8:	100490ba 	slli	r2,r2,2
     7dc:	00c00034 	movhi	r3,0
     7e0:	18c1fc04 	addi	r3,r3,2032
     7e4:	10c5883a 	add	r2,r2,r3
     7e8:	10800017 	ldw	r2,0(r2)
     7ec:	1000683a 	jmp	r2
     7f0:	00001398 	cmpnei	zero,zero,78
     7f4:	000014a0 	cmpeqi	zero,zero,82
     7f8:	000014a0 	cmpeqi	zero,zero,82
     7fc:	000013b8 	rdprs	zero,zero,78
     800:	000014a0 	cmpeqi	zero,zero,82
     804:	000014a0 	cmpeqi	zero,zero,82
     808:	000014a0 	cmpeqi	zero,zero,82
     80c:	000014a0 	cmpeqi	zero,zero,82
     810:	000014a0 	cmpeqi	zero,zero,82
     814:	000014a0 	cmpeqi	zero,zero,82
     818:	00000aa0 	cmpeqi	zero,zero,42
     81c:	000012a8 	cmpgeui	zero,zero,74
     820:	000014a0 	cmpeqi	zero,zero,82
     824:	00000964 	muli	zero,zero,37
     828:	00000ac4 	movi	zero,43
     82c:	000014a0 	cmpeqi	zero,zero,82
     830:	00000b14 	movui	zero,44
     834:	00000b20 	cmpeqi	zero,zero,44
     838:	00000b20 	cmpeqi	zero,zero,44
     83c:	00000b20 	cmpeqi	zero,zero,44
     840:	00000b20 	cmpeqi	zero,zero,44
     844:	00000b20 	cmpeqi	zero,zero,44
     848:	00000b20 	cmpeqi	zero,zero,44
     84c:	00000b20 	cmpeqi	zero,zero,44
     850:	00000b20 	cmpeqi	zero,zero,44
     854:	00000b20 	cmpeqi	zero,zero,44
     858:	000014a0 	cmpeqi	zero,zero,82
     85c:	000014a0 	cmpeqi	zero,zero,82
     860:	000014a0 	cmpeqi	zero,zero,82
     864:	000014a0 	cmpeqi	zero,zero,82
     868:	000014a0 	cmpeqi	zero,zero,82
     86c:	000014a0 	cmpeqi	zero,zero,82
     870:	000014a0 	cmpeqi	zero,zero,82
     874:	000014a0 	cmpeqi	zero,zero,82
     878:	000014a0 	cmpeqi	zero,zero,82
     87c:	000014a0 	cmpeqi	zero,zero,82
     880:	00000b5c 	xori	zero,zero,45
     884:	00000c24 	muli	zero,zero,48
     888:	000014a0 	cmpeqi	zero,zero,82
     88c:	00000c24 	muli	zero,zero,48
     890:	000014a0 	cmpeqi	zero,zero,82
     894:	000014a0 	cmpeqi	zero,zero,82
     898:	000014a0 	cmpeqi	zero,zero,82
     89c:	000014a0 	cmpeqi	zero,zero,82
     8a0:	00000cd0 	cmplti	zero,zero,51
     8a4:	000014a0 	cmpeqi	zero,zero,82
     8a8:	000014a0 	cmpeqi	zero,zero,82
     8ac:	00000cdc 	xori	zero,zero,51
     8b0:	000014a0 	cmpeqi	zero,zero,82
     8b4:	000014a0 	cmpeqi	zero,zero,82
     8b8:	000014a0 	cmpeqi	zero,zero,82
     8bc:	000014a0 	cmpeqi	zero,zero,82
     8c0:	000014a0 	cmpeqi	zero,zero,82
     8c4:	00001160 	cmpeqi	zero,zero,69
     8c8:	000014a0 	cmpeqi	zero,zero,82
     8cc:	000014a0 	cmpeqi	zero,zero,82
     8d0:	000011cc 	andi	zero,zero,71
     8d4:	000014a0 	cmpeqi	zero,zero,82
     8d8:	000014a0 	cmpeqi	zero,zero,82
     8dc:	000014a0 	cmpeqi	zero,zero,82
     8e0:	000014a0 	cmpeqi	zero,zero,82
     8e4:	000014a0 	cmpeqi	zero,zero,82
     8e8:	000014a0 	cmpeqi	zero,zero,82
     8ec:	000014a0 	cmpeqi	zero,zero,82
     8f0:	000014a0 	cmpeqi	zero,zero,82
     8f4:	000014a0 	cmpeqi	zero,zero,82
     8f8:	000014a0 	cmpeqi	zero,zero,82
     8fc:	00001444 	movi	zero,81
     900:	000013c4 	movi	zero,79
     904:	00000c24 	muli	zero,zero,48
     908:	00000c24 	muli	zero,zero,48
     90c:	00000c24 	muli	zero,zero,48
     910:	000013e4 	muli	zero,zero,79
     914:	000013c4 	movi	zero,79
     918:	000014a0 	cmpeqi	zero,zero,82
     91c:	000014a0 	cmpeqi	zero,zero,82
     920:	000013f0 	cmpltui	zero,zero,79
     924:	000014a0 	cmpeqi	zero,zero,82
     928:	00001404 	movi	zero,80
     92c:	00001288 	cmpgei	zero,zero,74
     930:	00000970 	cmpltui	zero,zero,37
     934:	000012c0 	call	12c <alt_irq_handler+0x30>
     938:	000014a0 	cmpeqi	zero,zero,82
     93c:	000012cc 	andi	zero,zero,75
     940:	000014a0 	cmpeqi	zero,zero,82
     944:	00001330 	cmpltui	zero,zero,76
     948:	000014a0 	cmpeqi	zero,zero,82
     94c:	000014a0 	cmpeqi	zero,zero,82
     950:	00001350 	cmplti	zero,zero,77
     954:	d8c03117 	ldw	r3,196(sp)
     958:	d8802e15 	stw	r2,184(sp)
     95c:	00c7c83a 	sub	r3,zero,r3
     960:	d8c03115 	stw	r3,196(sp)
     964:	84000114 	ori	r16,r16,4
     968:	ac400007 	ldb	r17,0(r21)
     96c:	003f9706 	br	7cc <__alt_data_end+0xfffce7cc>
     970:	00800c04 	movi	r2,48
     974:	d8802705 	stb	r2,156(sp)
     978:	00801e04 	movi	r2,120
     97c:	d8802745 	stb	r2,157(sp)
     980:	d9002a17 	ldw	r4,168(sp)
     984:	d8802e17 	ldw	r2,184(sp)
     988:	d8002785 	stb	zero,158(sp)
     98c:	e011883a 	mov	r8,fp
     990:	10c00104 	addi	r3,r2,4
     994:	14c00017 	ldw	r19,0(r2)
     998:	002d883a 	mov	r22,zero
     99c:	80800094 	ori	r2,r16,2
     9a0:	2002ca16 	blt	r4,zero,14cc <___vfprintf_internal_r+0xe88>
     9a4:	00bfdfc4 	movi	r2,-129
     9a8:	80a4703a 	and	r18,r16,r2
     9ac:	d8c02e15 	stw	r3,184(sp)
     9b0:	94800094 	ori	r18,r18,2
     9b4:	9802b41e 	bne	r19,zero,1488 <___vfprintf_internal_r+0xe44>
     9b8:	01400074 	movhi	r5,1
     9bc:	294fdf04 	addi	r5,r5,16252
     9c0:	d9403915 	stw	r5,228(sp)
     9c4:	04401e04 	movi	r17,120
     9c8:	d8802a17 	ldw	r2,168(sp)
     9cc:	0039883a 	mov	fp,zero
     9d0:	1001fa26 	beq	r2,zero,11bc <___vfprintf_internal_r+0xb78>
     9d4:	0027883a 	mov	r19,zero
     9d8:	002d883a 	mov	r22,zero
     9dc:	00021906 	br	1244 <___vfprintf_internal_r+0xc00>
     9e0:	d9002d17 	ldw	r4,180(sp)
     9e4:	b80b883a 	mov	r5,r23
     9e8:	00029f80 	call	29f8 <__swsetup_r>
     9ec:	1005dc1e 	bne	r2,zero,2160 <___vfprintf_internal_r+0x1b1c>
     9f0:	b880030b 	ldhu	r2,12(r23)
     9f4:	00c00284 	movi	r3,10
     9f8:	1080068c 	andi	r2,r2,26
     9fc:	10ff3a1e 	bne	r2,r3,6e8 <__alt_data_end+0xfffce6e8>
     a00:	b880038f 	ldh	r2,14(r23)
     a04:	103f3816 	blt	r2,zero,6e8 <__alt_data_end+0xfffce6e8>
     a08:	d9c02e17 	ldw	r7,184(sp)
     a0c:	d9002d17 	ldw	r4,180(sp)
     a10:	a80d883a 	mov	r6,r21
     a14:	b80b883a 	mov	r5,r23
     a18:	000293c0 	call	293c <__sbprintf>
     a1c:	00001106 	br	a64 <___vfprintf_internal_r+0x420>
     a20:	d9002d17 	ldw	r4,180(sp)
     a24:	d9801e04 	addi	r6,sp,120
     a28:	b80b883a 	mov	r5,r23
     a2c:	0007e240 	call	7e24 <__sprint_r>
     a30:	1000081e 	bne	r2,zero,a54 <___vfprintf_internal_r+0x410>
     a34:	da000404 	addi	r8,sp,16
     a38:	003f5106 	br	780 <__alt_data_end+0xfffce780>
     a3c:	d8802017 	ldw	r2,128(sp)
     a40:	10000426 	beq	r2,zero,a54 <___vfprintf_internal_r+0x410>
     a44:	d9002d17 	ldw	r4,180(sp)
     a48:	d9801e04 	addi	r6,sp,120
     a4c:	b80b883a 	mov	r5,r23
     a50:	0007e240 	call	7e24 <__sprint_r>
     a54:	b880030b 	ldhu	r2,12(r23)
     a58:	1080100c 	andi	r2,r2,64
     a5c:	1005c01e 	bne	r2,zero,2160 <___vfprintf_internal_r+0x1b1c>
     a60:	d8802f17 	ldw	r2,188(sp)
     a64:	dfc04717 	ldw	ra,284(sp)
     a68:	df004617 	ldw	fp,280(sp)
     a6c:	ddc04517 	ldw	r23,276(sp)
     a70:	dd804417 	ldw	r22,272(sp)
     a74:	dd404317 	ldw	r21,268(sp)
     a78:	dd004217 	ldw	r20,264(sp)
     a7c:	dcc04117 	ldw	r19,260(sp)
     a80:	dc804017 	ldw	r18,256(sp)
     a84:	dc403f17 	ldw	r17,252(sp)
     a88:	dc003e17 	ldw	r16,248(sp)
     a8c:	dec04804 	addi	sp,sp,288
     a90:	f800283a 	ret
     a94:	d9002d17 	ldw	r4,180(sp)
     a98:	0004a040 	call	4a04 <__sinit>
     a9c:	003f0206 	br	6a8 <__alt_data_end+0xfffce6a8>
     aa0:	d9002e17 	ldw	r4,184(sp)
     aa4:	d9402e17 	ldw	r5,184(sp)
     aa8:	21000017 	ldw	r4,0(r4)
     aac:	28800104 	addi	r2,r5,4
     ab0:	d9003115 	stw	r4,196(sp)
     ab4:	203fa716 	blt	r4,zero,954 <__alt_data_end+0xfffce954>
     ab8:	d8802e15 	stw	r2,184(sp)
     abc:	ac400007 	ldb	r17,0(r21)
     ac0:	003f4206 	br	7cc <__alt_data_end+0xfffce7cc>
     ac4:	ac400007 	ldb	r17,0(r21)
     ac8:	01000a84 	movi	r4,42
     acc:	a8c00044 	addi	r3,r21,1
     ad0:	89075826 	beq	r17,r4,2834 <___vfprintf_internal_r+0x21f0>
     ad4:	8cbff404 	addi	r18,r17,-48
     ad8:	b486ae36 	bltu	r22,r18,2594 <___vfprintf_internal_r+0x1f50>
     adc:	0009883a 	mov	r4,zero
     ae0:	1823883a 	mov	r17,r3
     ae4:	01400284 	movi	r5,10
     ae8:	000aae00 	call	aae0 <__mulsi3>
     aec:	88c00007 	ldb	r3,0(r17)
     af0:	1489883a 	add	r4,r2,r18
     af4:	8d400044 	addi	r21,r17,1
     af8:	1cbff404 	addi	r18,r3,-48
     afc:	a823883a 	mov	r17,r21
     b00:	b4bff82e 	bgeu	r22,r18,ae4 <__alt_data_end+0xfffceae4>
     b04:	1823883a 	mov	r17,r3
     b08:	2005f616 	blt	r4,zero,22e4 <___vfprintf_internal_r+0x1ca0>
     b0c:	d9002a15 	stw	r4,168(sp)
     b10:	003f2f06 	br	7d0 <__alt_data_end+0xfffce7d0>
     b14:	84002014 	ori	r16,r16,128
     b18:	ac400007 	ldb	r17,0(r21)
     b1c:	003f2b06 	br	7cc <__alt_data_end+0xfffce7cc>
     b20:	8cbff404 	addi	r18,r17,-48
     b24:	d8003115 	stw	zero,196(sp)
     b28:	0009883a 	mov	r4,zero
     b2c:	a823883a 	mov	r17,r21
     b30:	01400284 	movi	r5,10
     b34:	000aae00 	call	aae0 <__mulsi3>
     b38:	88c00007 	ldb	r3,0(r17)
     b3c:	9089883a 	add	r4,r18,r2
     b40:	ad400044 	addi	r21,r21,1
     b44:	1cbff404 	addi	r18,r3,-48
     b48:	a823883a 	mov	r17,r21
     b4c:	b4bff82e 	bgeu	r22,r18,b30 <__alt_data_end+0xfffceb30>
     b50:	1823883a 	mov	r17,r3
     b54:	d9003115 	stw	r4,196(sp)
     b58:	003f1d06 	br	7d0 <__alt_data_end+0xfffce7d0>
     b5c:	8025883a 	mov	r18,r16
     b60:	dc002903 	ldbu	r16,164(sp)
     b64:	e011883a 	mov	r8,fp
     b68:	84003fcc 	andi	r16,r16,255
     b6c:	8007531e 	bne	r16,zero,28bc <___vfprintf_internal_r+0x2278>
     b70:	94800414 	ori	r18,r18,16
     b74:	9080080c 	andi	r2,r18,32
     b78:	1003a326 	beq	r2,zero,1a08 <___vfprintf_internal_r+0x13c4>
     b7c:	d9002e17 	ldw	r4,184(sp)
     b80:	20800117 	ldw	r2,4(r4)
     b84:	24c00017 	ldw	r19,0(r4)
     b88:	21000204 	addi	r4,r4,8
     b8c:	d9002e15 	stw	r4,184(sp)
     b90:	102d883a 	mov	r22,r2
     b94:	10047316 	blt	r2,zero,1d64 <___vfprintf_internal_r+0x1720>
     b98:	d9002a17 	ldw	r4,168(sp)
     b9c:	df002783 	ldbu	fp,158(sp)
     ba0:	2003e416 	blt	r4,zero,1b34 <___vfprintf_internal_r+0x14f0>
     ba4:	00ffdfc4 	movi	r3,-129
     ba8:	9d84b03a 	or	r2,r19,r22
     bac:	90e4703a 	and	r18,r18,r3
     bb0:	10018026 	beq	r2,zero,11b4 <___vfprintf_internal_r+0xb70>
     bb4:	b003ab26 	beq	r22,zero,1a64 <___vfprintf_internal_r+0x1420>
     bb8:	dc402915 	stw	r17,164(sp)
     bbc:	dc001e04 	addi	r16,sp,120
     bc0:	b023883a 	mov	r17,r22
     bc4:	402d883a 	mov	r22,r8
     bc8:	9809883a 	mov	r4,r19
     bcc:	880b883a 	mov	r5,r17
     bd0:	01800284 	movi	r6,10
     bd4:	000f883a 	mov	r7,zero
     bd8:	000a3680 	call	a368 <__umoddi3>
     bdc:	10800c04 	addi	r2,r2,48
     be0:	843fffc4 	addi	r16,r16,-1
     be4:	9809883a 	mov	r4,r19
     be8:	880b883a 	mov	r5,r17
     bec:	80800005 	stb	r2,0(r16)
     bf0:	01800284 	movi	r6,10
     bf4:	000f883a 	mov	r7,zero
     bf8:	0009d6c0 	call	9d6c <__udivdi3>
     bfc:	1027883a 	mov	r19,r2
     c00:	10c4b03a 	or	r2,r2,r3
     c04:	1823883a 	mov	r17,r3
     c08:	103fef1e 	bne	r2,zero,bc8 <__alt_data_end+0xfffcebc8>
     c0c:	d8c02817 	ldw	r3,160(sp)
     c10:	dc402917 	ldw	r17,164(sp)
     c14:	b011883a 	mov	r8,r22
     c18:	1c07c83a 	sub	r3,r3,r16
     c1c:	d8c02b15 	stw	r3,172(sp)
     c20:	00005f06 	br	da0 <___vfprintf_internal_r+0x75c>
     c24:	8025883a 	mov	r18,r16
     c28:	dc002903 	ldbu	r16,164(sp)
     c2c:	e011883a 	mov	r8,fp
     c30:	84003fcc 	andi	r16,r16,255
     c34:	80071e1e 	bne	r16,zero,28b0 <___vfprintf_internal_r+0x226c>
     c38:	9080020c 	andi	r2,r18,8
     c3c:	1004af26 	beq	r2,zero,1efc <___vfprintf_internal_r+0x18b8>
     c40:	d9002e17 	ldw	r4,184(sp)
     c44:	d9402e17 	ldw	r5,184(sp)
     c48:	d8802e17 	ldw	r2,184(sp)
     c4c:	21000017 	ldw	r4,0(r4)
     c50:	29400117 	ldw	r5,4(r5)
     c54:	10800204 	addi	r2,r2,8
     c58:	d9003615 	stw	r4,216(sp)
     c5c:	d9403815 	stw	r5,224(sp)
     c60:	d8802e15 	stw	r2,184(sp)
     c64:	d9003617 	ldw	r4,216(sp)
     c68:	d9403817 	ldw	r5,224(sp)
     c6c:	da003d15 	stw	r8,244(sp)
     c70:	04000044 	movi	r16,1
     c74:	0007a480 	call	7a48 <__fpclassifyd>
     c78:	da003d17 	ldw	r8,244(sp)
     c7c:	1404441e 	bne	r2,r16,1d90 <___vfprintf_internal_r+0x174c>
     c80:	d9003617 	ldw	r4,216(sp)
     c84:	d9403817 	ldw	r5,224(sp)
     c88:	000d883a 	mov	r6,zero
     c8c:	000f883a 	mov	r7,zero
     c90:	000bee80 	call	bee8 <__ledf2>
     c94:	da003d17 	ldw	r8,244(sp)
     c98:	1005e316 	blt	r2,zero,2428 <___vfprintf_internal_r+0x1de4>
     c9c:	df002783 	ldbu	fp,158(sp)
     ca0:	008011c4 	movi	r2,71
     ca4:	1445580e 	bge	r2,r17,2208 <___vfprintf_internal_r+0x1bc4>
     ca8:	04000074 	movhi	r16,1
     cac:	840fd704 	addi	r16,r16,16220
     cb0:	00c000c4 	movi	r3,3
     cb4:	00bfdfc4 	movi	r2,-129
     cb8:	d8c02915 	stw	r3,164(sp)
     cbc:	90a4703a 	and	r18,r18,r2
     cc0:	d8c02b15 	stw	r3,172(sp)
     cc4:	d8002a15 	stw	zero,168(sp)
     cc8:	d8003215 	stw	zero,200(sp)
     ccc:	00003a06 	br	db8 <___vfprintf_internal_r+0x774>
     cd0:	84000214 	ori	r16,r16,8
     cd4:	ac400007 	ldb	r17,0(r21)
     cd8:	003ebc06 	br	7cc <__alt_data_end+0xfffce7cc>
     cdc:	8025883a 	mov	r18,r16
     ce0:	dc002903 	ldbu	r16,164(sp)
     ce4:	e011883a 	mov	r8,fp
     ce8:	84003fcc 	andi	r16,r16,255
     cec:	8007001e 	bne	r16,zero,28f0 <___vfprintf_internal_r+0x22ac>
     cf0:	94800414 	ori	r18,r18,16
     cf4:	9080080c 	andi	r2,r18,32
     cf8:	1002fa26 	beq	r2,zero,18e4 <___vfprintf_internal_r+0x12a0>
     cfc:	d9002e17 	ldw	r4,184(sp)
     d00:	d9402a17 	ldw	r5,168(sp)
     d04:	d8002785 	stb	zero,158(sp)
     d08:	20800204 	addi	r2,r4,8
     d0c:	24c00017 	ldw	r19,0(r4)
     d10:	25800117 	ldw	r22,4(r4)
     d14:	2804b116 	blt	r5,zero,1fdc <___vfprintf_internal_r+0x1998>
     d18:	013fdfc4 	movi	r4,-129
     d1c:	9d86b03a 	or	r3,r19,r22
     d20:	d8802e15 	stw	r2,184(sp)
     d24:	9124703a 	and	r18,r18,r4
     d28:	1802fb1e 	bne	r3,zero,1918 <___vfprintf_internal_r+0x12d4>
     d2c:	d8c02a17 	ldw	r3,168(sp)
     d30:	0039883a 	mov	fp,zero
     d34:	1805e526 	beq	r3,zero,24cc <___vfprintf_internal_r+0x1e88>
     d38:	0027883a 	mov	r19,zero
     d3c:	002d883a 	mov	r22,zero
     d40:	dc001e04 	addi	r16,sp,120
     d44:	9806d0fa 	srli	r3,r19,3
     d48:	b008977a 	slli	r4,r22,29
     d4c:	b02cd0fa 	srli	r22,r22,3
     d50:	9cc001cc 	andi	r19,r19,7
     d54:	98800c04 	addi	r2,r19,48
     d58:	843fffc4 	addi	r16,r16,-1
     d5c:	20e6b03a 	or	r19,r4,r3
     d60:	80800005 	stb	r2,0(r16)
     d64:	9d86b03a 	or	r3,r19,r22
     d68:	183ff61e 	bne	r3,zero,d44 <__alt_data_end+0xfffced44>
     d6c:	90c0004c 	andi	r3,r18,1
     d70:	18014126 	beq	r3,zero,1278 <___vfprintf_internal_r+0xc34>
     d74:	10803fcc 	andi	r2,r2,255
     d78:	1080201c 	xori	r2,r2,128
     d7c:	10bfe004 	addi	r2,r2,-128
     d80:	00c00c04 	movi	r3,48
     d84:	10c13c26 	beq	r2,r3,1278 <___vfprintf_internal_r+0xc34>
     d88:	80ffffc5 	stb	r3,-1(r16)
     d8c:	d8c02817 	ldw	r3,160(sp)
     d90:	80bfffc4 	addi	r2,r16,-1
     d94:	1021883a 	mov	r16,r2
     d98:	1887c83a 	sub	r3,r3,r2
     d9c:	d8c02b15 	stw	r3,172(sp)
     da0:	d8802b17 	ldw	r2,172(sp)
     da4:	d9002a17 	ldw	r4,168(sp)
     da8:	1100010e 	bge	r2,r4,db0 <___vfprintf_internal_r+0x76c>
     dac:	2005883a 	mov	r2,r4
     db0:	d8802915 	stw	r2,164(sp)
     db4:	d8003215 	stw	zero,200(sp)
     db8:	e7003fcc 	andi	fp,fp,255
     dbc:	e700201c 	xori	fp,fp,128
     dc0:	e73fe004 	addi	fp,fp,-128
     dc4:	e0000326 	beq	fp,zero,dd4 <___vfprintf_internal_r+0x790>
     dc8:	d8c02917 	ldw	r3,164(sp)
     dcc:	18c00044 	addi	r3,r3,1
     dd0:	d8c02915 	stw	r3,164(sp)
     dd4:	90c0008c 	andi	r3,r18,2
     dd8:	d8c02c15 	stw	r3,176(sp)
     ddc:	18000326 	beq	r3,zero,dec <___vfprintf_internal_r+0x7a8>
     de0:	d8c02917 	ldw	r3,164(sp)
     de4:	18c00084 	addi	r3,r3,2
     de8:	d8c02915 	stw	r3,164(sp)
     dec:	90c0210c 	andi	r3,r18,132
     df0:	d8c03015 	stw	r3,192(sp)
     df4:	1801c51e 	bne	r3,zero,150c <___vfprintf_internal_r+0xec8>
     df8:	d9003117 	ldw	r4,196(sp)
     dfc:	d8c02917 	ldw	r3,164(sp)
     e00:	20e7c83a 	sub	r19,r4,r3
     e04:	04c1c10e 	bge	zero,r19,150c <___vfprintf_internal_r+0xec8>
     e08:	02400404 	movi	r9,16
     e0c:	d8c02017 	ldw	r3,128(sp)
     e10:	d8801f17 	ldw	r2,124(sp)
     e14:	4cc52f0e 	bge	r9,r19,22d4 <___vfprintf_internal_r+0x1c90>
     e18:	01400074 	movhi	r5,1
     e1c:	294fea84 	addi	r5,r5,16298
     e20:	dc403b15 	stw	r17,236(sp)
     e24:	d9403515 	stw	r5,212(sp)
     e28:	9823883a 	mov	r17,r19
     e2c:	482d883a 	mov	r22,r9
     e30:	9027883a 	mov	r19,r18
     e34:	070001c4 	movi	fp,7
     e38:	8025883a 	mov	r18,r16
     e3c:	dc002d17 	ldw	r16,180(sp)
     e40:	00000306 	br	e50 <___vfprintf_internal_r+0x80c>
     e44:	8c7ffc04 	addi	r17,r17,-16
     e48:	42000204 	addi	r8,r8,8
     e4c:	b440130e 	bge	r22,r17,e9c <___vfprintf_internal_r+0x858>
     e50:	01000074 	movhi	r4,1
     e54:	18c00404 	addi	r3,r3,16
     e58:	10800044 	addi	r2,r2,1
     e5c:	210fea84 	addi	r4,r4,16298
     e60:	41000015 	stw	r4,0(r8)
     e64:	45800115 	stw	r22,4(r8)
     e68:	d8c02015 	stw	r3,128(sp)
     e6c:	d8801f15 	stw	r2,124(sp)
     e70:	e0bff40e 	bge	fp,r2,e44 <__alt_data_end+0xfffcee44>
     e74:	d9801e04 	addi	r6,sp,120
     e78:	b80b883a 	mov	r5,r23
     e7c:	8009883a 	mov	r4,r16
     e80:	0007e240 	call	7e24 <__sprint_r>
     e84:	103ef31e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
     e88:	8c7ffc04 	addi	r17,r17,-16
     e8c:	d8c02017 	ldw	r3,128(sp)
     e90:	d8801f17 	ldw	r2,124(sp)
     e94:	da000404 	addi	r8,sp,16
     e98:	b47fed16 	blt	r22,r17,e50 <__alt_data_end+0xfffcee50>
     e9c:	9021883a 	mov	r16,r18
     ea0:	9825883a 	mov	r18,r19
     ea4:	8827883a 	mov	r19,r17
     ea8:	dc403b17 	ldw	r17,236(sp)
     eac:	d9403517 	ldw	r5,212(sp)
     eb0:	98c7883a 	add	r3,r19,r3
     eb4:	10800044 	addi	r2,r2,1
     eb8:	41400015 	stw	r5,0(r8)
     ebc:	44c00115 	stw	r19,4(r8)
     ec0:	d8c02015 	stw	r3,128(sp)
     ec4:	d8801f15 	stw	r2,124(sp)
     ec8:	010001c4 	movi	r4,7
     ecc:	2082c516 	blt	r4,r2,19e4 <___vfprintf_internal_r+0x13a0>
     ed0:	df002787 	ldb	fp,158(sp)
     ed4:	42000204 	addi	r8,r8,8
     ed8:	e0000c26 	beq	fp,zero,f0c <___vfprintf_internal_r+0x8c8>
     edc:	d8801f17 	ldw	r2,124(sp)
     ee0:	d9002784 	addi	r4,sp,158
     ee4:	18c00044 	addi	r3,r3,1
     ee8:	10800044 	addi	r2,r2,1
     eec:	41000015 	stw	r4,0(r8)
     ef0:	01000044 	movi	r4,1
     ef4:	41000115 	stw	r4,4(r8)
     ef8:	d8c02015 	stw	r3,128(sp)
     efc:	d8801f15 	stw	r2,124(sp)
     f00:	010001c4 	movi	r4,7
     f04:	20825e16 	blt	r4,r2,1880 <___vfprintf_internal_r+0x123c>
     f08:	42000204 	addi	r8,r8,8
     f0c:	d8802c17 	ldw	r2,176(sp)
     f10:	10000c26 	beq	r2,zero,f44 <___vfprintf_internal_r+0x900>
     f14:	d8801f17 	ldw	r2,124(sp)
     f18:	d9002704 	addi	r4,sp,156
     f1c:	18c00084 	addi	r3,r3,2
     f20:	10800044 	addi	r2,r2,1
     f24:	41000015 	stw	r4,0(r8)
     f28:	01000084 	movi	r4,2
     f2c:	41000115 	stw	r4,4(r8)
     f30:	d8c02015 	stw	r3,128(sp)
     f34:	d8801f15 	stw	r2,124(sp)
     f38:	010001c4 	movi	r4,7
     f3c:	20825816 	blt	r4,r2,18a0 <___vfprintf_internal_r+0x125c>
     f40:	42000204 	addi	r8,r8,8
     f44:	d9003017 	ldw	r4,192(sp)
     f48:	00802004 	movi	r2,128
     f4c:	2081bb26 	beq	r4,r2,163c <___vfprintf_internal_r+0xff8>
     f50:	d9402a17 	ldw	r5,168(sp)
     f54:	d8802b17 	ldw	r2,172(sp)
     f58:	28adc83a 	sub	r22,r5,r2
     f5c:	0580310e 	bge	zero,r22,1024 <___vfprintf_internal_r+0x9e0>
     f60:	07000404 	movi	fp,16
     f64:	d8801f17 	ldw	r2,124(sp)
     f68:	e584360e 	bge	fp,r22,2044 <___vfprintf_internal_r+0x1a00>
     f6c:	01400074 	movhi	r5,1
     f70:	294fe684 	addi	r5,r5,16282
     f74:	dc402a15 	stw	r17,168(sp)
     f78:	d9402c15 	stw	r5,176(sp)
     f7c:	b023883a 	mov	r17,r22
     f80:	04c001c4 	movi	r19,7
     f84:	a82d883a 	mov	r22,r21
     f88:	902b883a 	mov	r21,r18
     f8c:	8025883a 	mov	r18,r16
     f90:	dc002d17 	ldw	r16,180(sp)
     f94:	00000306 	br	fa4 <___vfprintf_internal_r+0x960>
     f98:	8c7ffc04 	addi	r17,r17,-16
     f9c:	42000204 	addi	r8,r8,8
     fa0:	e440110e 	bge	fp,r17,fe8 <___vfprintf_internal_r+0x9a4>
     fa4:	18c00404 	addi	r3,r3,16
     fa8:	10800044 	addi	r2,r2,1
     fac:	45000015 	stw	r20,0(r8)
     fb0:	47000115 	stw	fp,4(r8)
     fb4:	d8c02015 	stw	r3,128(sp)
     fb8:	d8801f15 	stw	r2,124(sp)
     fbc:	98bff60e 	bge	r19,r2,f98 <__alt_data_end+0xfffcef98>
     fc0:	d9801e04 	addi	r6,sp,120
     fc4:	b80b883a 	mov	r5,r23
     fc8:	8009883a 	mov	r4,r16
     fcc:	0007e240 	call	7e24 <__sprint_r>
     fd0:	103ea01e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
     fd4:	8c7ffc04 	addi	r17,r17,-16
     fd8:	d8c02017 	ldw	r3,128(sp)
     fdc:	d8801f17 	ldw	r2,124(sp)
     fe0:	da000404 	addi	r8,sp,16
     fe4:	e47fef16 	blt	fp,r17,fa4 <__alt_data_end+0xfffcefa4>
     fe8:	9021883a 	mov	r16,r18
     fec:	a825883a 	mov	r18,r21
     ff0:	b02b883a 	mov	r21,r22
     ff4:	882d883a 	mov	r22,r17
     ff8:	dc402a17 	ldw	r17,168(sp)
     ffc:	d9002c17 	ldw	r4,176(sp)
    1000:	1d87883a 	add	r3,r3,r22
    1004:	10800044 	addi	r2,r2,1
    1008:	41000015 	stw	r4,0(r8)
    100c:	45800115 	stw	r22,4(r8)
    1010:	d8c02015 	stw	r3,128(sp)
    1014:	d8801f15 	stw	r2,124(sp)
    1018:	010001c4 	movi	r4,7
    101c:	20821016 	blt	r4,r2,1860 <___vfprintf_internal_r+0x121c>
    1020:	42000204 	addi	r8,r8,8
    1024:	9080400c 	andi	r2,r18,256
    1028:	10013a1e 	bne	r2,zero,1514 <___vfprintf_internal_r+0xed0>
    102c:	d9402b17 	ldw	r5,172(sp)
    1030:	d8801f17 	ldw	r2,124(sp)
    1034:	44000015 	stw	r16,0(r8)
    1038:	1947883a 	add	r3,r3,r5
    103c:	10800044 	addi	r2,r2,1
    1040:	41400115 	stw	r5,4(r8)
    1044:	d8c02015 	stw	r3,128(sp)
    1048:	d8801f15 	stw	r2,124(sp)
    104c:	010001c4 	movi	r4,7
    1050:	2081f516 	blt	r4,r2,1828 <___vfprintf_internal_r+0x11e4>
    1054:	42000204 	addi	r8,r8,8
    1058:	9480010c 	andi	r18,r18,4
    105c:	90003226 	beq	r18,zero,1128 <___vfprintf_internal_r+0xae4>
    1060:	d9403117 	ldw	r5,196(sp)
    1064:	d8802917 	ldw	r2,164(sp)
    1068:	28a1c83a 	sub	r16,r5,r2
    106c:	04002e0e 	bge	zero,r16,1128 <___vfprintf_internal_r+0xae4>
    1070:	04400404 	movi	r17,16
    1074:	d8801f17 	ldw	r2,124(sp)
    1078:	8c04c40e 	bge	r17,r16,238c <___vfprintf_internal_r+0x1d48>
    107c:	01400074 	movhi	r5,1
    1080:	294fea84 	addi	r5,r5,16298
    1084:	d9403515 	stw	r5,212(sp)
    1088:	048001c4 	movi	r18,7
    108c:	dcc02d17 	ldw	r19,180(sp)
    1090:	00000306 	br	10a0 <___vfprintf_internal_r+0xa5c>
    1094:	843ffc04 	addi	r16,r16,-16
    1098:	42000204 	addi	r8,r8,8
    109c:	8c00130e 	bge	r17,r16,10ec <___vfprintf_internal_r+0xaa8>
    10a0:	01000074 	movhi	r4,1
    10a4:	18c00404 	addi	r3,r3,16
    10a8:	10800044 	addi	r2,r2,1
    10ac:	210fea84 	addi	r4,r4,16298
    10b0:	41000015 	stw	r4,0(r8)
    10b4:	44400115 	stw	r17,4(r8)
    10b8:	d8c02015 	stw	r3,128(sp)
    10bc:	d8801f15 	stw	r2,124(sp)
    10c0:	90bff40e 	bge	r18,r2,1094 <__alt_data_end+0xfffcf094>
    10c4:	d9801e04 	addi	r6,sp,120
    10c8:	b80b883a 	mov	r5,r23
    10cc:	9809883a 	mov	r4,r19
    10d0:	0007e240 	call	7e24 <__sprint_r>
    10d4:	103e5f1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    10d8:	843ffc04 	addi	r16,r16,-16
    10dc:	d8c02017 	ldw	r3,128(sp)
    10e0:	d8801f17 	ldw	r2,124(sp)
    10e4:	da000404 	addi	r8,sp,16
    10e8:	8c3fed16 	blt	r17,r16,10a0 <__alt_data_end+0xfffcf0a0>
    10ec:	d9403517 	ldw	r5,212(sp)
    10f0:	1c07883a 	add	r3,r3,r16
    10f4:	10800044 	addi	r2,r2,1
    10f8:	41400015 	stw	r5,0(r8)
    10fc:	44000115 	stw	r16,4(r8)
    1100:	d8c02015 	stw	r3,128(sp)
    1104:	d8801f15 	stw	r2,124(sp)
    1108:	010001c4 	movi	r4,7
    110c:	2080060e 	bge	r4,r2,1128 <___vfprintf_internal_r+0xae4>
    1110:	d9002d17 	ldw	r4,180(sp)
    1114:	d9801e04 	addi	r6,sp,120
    1118:	b80b883a 	mov	r5,r23
    111c:	0007e240 	call	7e24 <__sprint_r>
    1120:	103e4c1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1124:	d8c02017 	ldw	r3,128(sp)
    1128:	d8803117 	ldw	r2,196(sp)
    112c:	d9002917 	ldw	r4,164(sp)
    1130:	1100010e 	bge	r2,r4,1138 <___vfprintf_internal_r+0xaf4>
    1134:	2005883a 	mov	r2,r4
    1138:	d9402f17 	ldw	r5,188(sp)
    113c:	288b883a 	add	r5,r5,r2
    1140:	d9402f15 	stw	r5,188(sp)
    1144:	1801c01e 	bne	r3,zero,1848 <___vfprintf_internal_r+0x1204>
    1148:	a8800007 	ldb	r2,0(r21)
    114c:	d8001f15 	stw	zero,124(sp)
    1150:	da000404 	addi	r8,sp,16
    1154:	103d751e 	bne	r2,zero,72c <__alt_data_end+0xfffce72c>
    1158:	a823883a 	mov	r17,r21
    115c:	003d8b06 	br	78c <__alt_data_end+0xfffce78c>
    1160:	8025883a 	mov	r18,r16
    1164:	dc002903 	ldbu	r16,164(sp)
    1168:	e011883a 	mov	r8,fp
    116c:	84003fcc 	andi	r16,r16,255
    1170:	8005e51e 	bne	r16,zero,2908 <___vfprintf_internal_r+0x22c4>
    1174:	94800414 	ori	r18,r18,16
    1178:	9080080c 	andi	r2,r18,32
    117c:	10022b26 	beq	r2,zero,1a2c <___vfprintf_internal_r+0x13e8>
    1180:	d9002e17 	ldw	r4,184(sp)
    1184:	d9402a17 	ldw	r5,168(sp)
    1188:	d8002785 	stb	zero,158(sp)
    118c:	20c00204 	addi	r3,r4,8
    1190:	24c00017 	ldw	r19,0(r4)
    1194:	25800117 	ldw	r22,4(r4)
    1198:	28042e16 	blt	r5,zero,2254 <___vfprintf_internal_r+0x1c10>
    119c:	013fdfc4 	movi	r4,-129
    11a0:	9d84b03a 	or	r2,r19,r22
    11a4:	d8c02e15 	stw	r3,184(sp)
    11a8:	9124703a 	and	r18,r18,r4
    11ac:	0039883a 	mov	fp,zero
    11b0:	103e801e 	bne	r2,zero,bb4 <__alt_data_end+0xfffcebb4>
    11b4:	d9002a17 	ldw	r4,168(sp)
    11b8:	2002e01e 	bne	r4,zero,1d3c <___vfprintf_internal_r+0x16f8>
    11bc:	d8002a15 	stw	zero,168(sp)
    11c0:	d8002b15 	stw	zero,172(sp)
    11c4:	dc001e04 	addi	r16,sp,120
    11c8:	003ef506 	br	da0 <__alt_data_end+0xfffceda0>
    11cc:	8025883a 	mov	r18,r16
    11d0:	dc002903 	ldbu	r16,164(sp)
    11d4:	e011883a 	mov	r8,fp
    11d8:	84003fcc 	andi	r16,r16,255
    11dc:	8005ba1e 	bne	r16,zero,28c8 <___vfprintf_internal_r+0x2284>
    11e0:	01000074 	movhi	r4,1
    11e4:	210fda04 	addi	r4,r4,16232
    11e8:	d9003915 	stw	r4,228(sp)
    11ec:	9080080c 	andi	r2,r18,32
    11f0:	10006126 	beq	r2,zero,1378 <___vfprintf_internal_r+0xd34>
    11f4:	d9402e17 	ldw	r5,184(sp)
    11f8:	2cc00017 	ldw	r19,0(r5)
    11fc:	2d800117 	ldw	r22,4(r5)
    1200:	29400204 	addi	r5,r5,8
    1204:	d9402e15 	stw	r5,184(sp)
    1208:	9080004c 	andi	r2,r18,1
    120c:	1001ac26 	beq	r2,zero,18c0 <___vfprintf_internal_r+0x127c>
    1210:	9d84b03a 	or	r2,r19,r22
    1214:	10038526 	beq	r2,zero,202c <___vfprintf_internal_r+0x19e8>
    1218:	d8c02a17 	ldw	r3,168(sp)
    121c:	00800c04 	movi	r2,48
    1220:	d8802705 	stb	r2,156(sp)
    1224:	dc402745 	stb	r17,157(sp)
    1228:	d8002785 	stb	zero,158(sp)
    122c:	90800094 	ori	r2,r18,2
    1230:	18047916 	blt	r3,zero,2418 <___vfprintf_internal_r+0x1dd4>
    1234:	00bfdfc4 	movi	r2,-129
    1238:	90a4703a 	and	r18,r18,r2
    123c:	94800094 	ori	r18,r18,2
    1240:	0039883a 	mov	fp,zero
    1244:	d9003917 	ldw	r4,228(sp)
    1248:	dc001e04 	addi	r16,sp,120
    124c:	988003cc 	andi	r2,r19,15
    1250:	b006973a 	slli	r3,r22,28
    1254:	2085883a 	add	r2,r4,r2
    1258:	9826d13a 	srli	r19,r19,4
    125c:	10800003 	ldbu	r2,0(r2)
    1260:	b02cd13a 	srli	r22,r22,4
    1264:	843fffc4 	addi	r16,r16,-1
    1268:	1ce6b03a 	or	r19,r3,r19
    126c:	80800005 	stb	r2,0(r16)
    1270:	9d84b03a 	or	r2,r19,r22
    1274:	103ff51e 	bne	r2,zero,124c <__alt_data_end+0xfffcf24c>
    1278:	d8c02817 	ldw	r3,160(sp)
    127c:	1c07c83a 	sub	r3,r3,r16
    1280:	d8c02b15 	stw	r3,172(sp)
    1284:	003ec606 	br	da0 <__alt_data_end+0xfffceda0>
    1288:	8025883a 	mov	r18,r16
    128c:	dc002903 	ldbu	r16,164(sp)
    1290:	e011883a 	mov	r8,fp
    1294:	84003fcc 	andi	r16,r16,255
    1298:	803e9626 	beq	r16,zero,cf4 <__alt_data_end+0xfffcecf4>
    129c:	d8c02b03 	ldbu	r3,172(sp)
    12a0:	d8c02785 	stb	r3,158(sp)
    12a4:	003e9306 	br	cf4 <__alt_data_end+0xfffcecf4>
    12a8:	00c00044 	movi	r3,1
    12ac:	d8c02905 	stb	r3,164(sp)
    12b0:	00c00ac4 	movi	r3,43
    12b4:	d8c02b05 	stb	r3,172(sp)
    12b8:	ac400007 	ldb	r17,0(r21)
    12bc:	003d4306 	br	7cc <__alt_data_end+0xfffce7cc>
    12c0:	84000814 	ori	r16,r16,32
    12c4:	ac400007 	ldb	r17,0(r21)
    12c8:	003d4006 	br	7cc <__alt_data_end+0xfffce7cc>
    12cc:	d8802e17 	ldw	r2,184(sp)
    12d0:	8025883a 	mov	r18,r16
    12d4:	d8002785 	stb	zero,158(sp)
    12d8:	14000017 	ldw	r16,0(r2)
    12dc:	e011883a 	mov	r8,fp
    12e0:	14c00104 	addi	r19,r2,4
    12e4:	80042d26 	beq	r16,zero,239c <___vfprintf_internal_r+0x1d58>
    12e8:	d8c02a17 	ldw	r3,168(sp)
    12ec:	1803e416 	blt	r3,zero,2280 <___vfprintf_internal_r+0x1c3c>
    12f0:	180d883a 	mov	r6,r3
    12f4:	000b883a 	mov	r5,zero
    12f8:	8009883a 	mov	r4,r16
    12fc:	df003d15 	stw	fp,244(sp)
    1300:	0005f7c0 	call	5f7c <memchr>
    1304:	da003d17 	ldw	r8,244(sp)
    1308:	10046826 	beq	r2,zero,24ac <___vfprintf_internal_r+0x1e68>
    130c:	1405c83a 	sub	r2,r2,r16
    1310:	d8802b15 	stw	r2,172(sp)
    1314:	1003e016 	blt	r2,zero,2298 <___vfprintf_internal_r+0x1c54>
    1318:	df002783 	ldbu	fp,158(sp)
    131c:	d8802915 	stw	r2,164(sp)
    1320:	dcc02e15 	stw	r19,184(sp)
    1324:	d8002a15 	stw	zero,168(sp)
    1328:	d8003215 	stw	zero,200(sp)
    132c:	003ea206 	br	db8 <__alt_data_end+0xfffcedb8>
    1330:	8025883a 	mov	r18,r16
    1334:	dc002903 	ldbu	r16,164(sp)
    1338:	e011883a 	mov	r8,fp
    133c:	84003fcc 	andi	r16,r16,255
    1340:	803f8d26 	beq	r16,zero,1178 <__alt_data_end+0xfffcf178>
    1344:	d8c02b03 	ldbu	r3,172(sp)
    1348:	d8c02785 	stb	r3,158(sp)
    134c:	003f8a06 	br	1178 <__alt_data_end+0xfffcf178>
    1350:	8025883a 	mov	r18,r16
    1354:	dc002903 	ldbu	r16,164(sp)
    1358:	e011883a 	mov	r8,fp
    135c:	84003fcc 	andi	r16,r16,255
    1360:	8005661e 	bne	r16,zero,28fc <___vfprintf_internal_r+0x22b8>
    1364:	01000074 	movhi	r4,1
    1368:	210fdf04 	addi	r4,r4,16252
    136c:	d9003915 	stw	r4,228(sp)
    1370:	9080080c 	andi	r2,r18,32
    1374:	103f9f1e 	bne	r2,zero,11f4 <__alt_data_end+0xfffcf1f4>
    1378:	9080040c 	andi	r2,r18,16
    137c:	1002eb26 	beq	r2,zero,1f2c <___vfprintf_internal_r+0x18e8>
    1380:	d8802e17 	ldw	r2,184(sp)
    1384:	002d883a 	mov	r22,zero
    1388:	14c00017 	ldw	r19,0(r2)
    138c:	10800104 	addi	r2,r2,4
    1390:	d8802e15 	stw	r2,184(sp)
    1394:	003f9c06 	br	1208 <__alt_data_end+0xfffcf208>
    1398:	d8802b07 	ldb	r2,172(sp)
    139c:	1002e11e 	bne	r2,zero,1f24 <___vfprintf_internal_r+0x18e0>
    13a0:	00c00044 	movi	r3,1
    13a4:	d8c02905 	stb	r3,164(sp)
    13a8:	00c00804 	movi	r3,32
    13ac:	d8c02b05 	stb	r3,172(sp)
    13b0:	ac400007 	ldb	r17,0(r21)
    13b4:	003d0506 	br	7cc <__alt_data_end+0xfffce7cc>
    13b8:	84000054 	ori	r16,r16,1
    13bc:	ac400007 	ldb	r17,0(r21)
    13c0:	003d0206 	br	7cc <__alt_data_end+0xfffce7cc>
    13c4:	8025883a 	mov	r18,r16
    13c8:	dc002903 	ldbu	r16,164(sp)
    13cc:	e011883a 	mov	r8,fp
    13d0:	84003fcc 	andi	r16,r16,255
    13d4:	803de726 	beq	r16,zero,b74 <__alt_data_end+0xfffceb74>
    13d8:	d8c02b03 	ldbu	r3,172(sp)
    13dc:	d8c02785 	stb	r3,158(sp)
    13e0:	003de406 	br	b74 <__alt_data_end+0xfffceb74>
    13e4:	84001014 	ori	r16,r16,64
    13e8:	ac400007 	ldb	r17,0(r21)
    13ec:	003cf706 	br	7cc <__alt_data_end+0xfffce7cc>
    13f0:	ac400007 	ldb	r17,0(r21)
    13f4:	00801b04 	movi	r2,108
    13f8:	88838f26 	beq	r17,r2,2238 <___vfprintf_internal_r+0x1bf4>
    13fc:	84000414 	ori	r16,r16,16
    1400:	003cf206 	br	7cc <__alt_data_end+0xfffce7cc>
    1404:	8025883a 	mov	r18,r16
    1408:	dc002903 	ldbu	r16,164(sp)
    140c:	e011883a 	mov	r8,fp
    1410:	84003fcc 	andi	r16,r16,255
    1414:	80053f1e 	bne	r16,zero,2914 <___vfprintf_internal_r+0x22d0>
    1418:	9080080c 	andi	r2,r18,32
    141c:	1002d226 	beq	r2,zero,1f68 <___vfprintf_internal_r+0x1924>
    1420:	d9002e17 	ldw	r4,184(sp)
    1424:	d9402f17 	ldw	r5,188(sp)
    1428:	20800017 	ldw	r2,0(r4)
    142c:	2807d7fa 	srai	r3,r5,31
    1430:	21000104 	addi	r4,r4,4
    1434:	d9002e15 	stw	r4,184(sp)
    1438:	11400015 	stw	r5,0(r2)
    143c:	10c00115 	stw	r3,4(r2)
    1440:	003cb806 	br	724 <__alt_data_end+0xfffce724>
    1444:	d8c02e17 	ldw	r3,184(sp)
    1448:	d9002e17 	ldw	r4,184(sp)
    144c:	8025883a 	mov	r18,r16
    1450:	18800017 	ldw	r2,0(r3)
    1454:	21000104 	addi	r4,r4,4
    1458:	00c00044 	movi	r3,1
    145c:	e011883a 	mov	r8,fp
    1460:	d8c02915 	stw	r3,164(sp)
    1464:	d8002785 	stb	zero,158(sp)
    1468:	d8801405 	stb	r2,80(sp)
    146c:	d9002e15 	stw	r4,184(sp)
    1470:	d8c02b15 	stw	r3,172(sp)
    1474:	d8002a15 	stw	zero,168(sp)
    1478:	d8003215 	stw	zero,200(sp)
    147c:	dc001404 	addi	r16,sp,80
    1480:	0039883a 	mov	fp,zero
    1484:	003e5306 	br	dd4 <__alt_data_end+0xfffcedd4>
    1488:	01000074 	movhi	r4,1
    148c:	210fdf04 	addi	r4,r4,16252
    1490:	0039883a 	mov	fp,zero
    1494:	d9003915 	stw	r4,228(sp)
    1498:	04401e04 	movi	r17,120
    149c:	003f6906 	br	1244 <__alt_data_end+0xfffcf244>
    14a0:	8025883a 	mov	r18,r16
    14a4:	dc002903 	ldbu	r16,164(sp)
    14a8:	e011883a 	mov	r8,fp
    14ac:	84003fcc 	andi	r16,r16,255
    14b0:	8005081e 	bne	r16,zero,28d4 <___vfprintf_internal_r+0x2290>
    14b4:	883d6126 	beq	r17,zero,a3c <__alt_data_end+0xfffcea3c>
    14b8:	00c00044 	movi	r3,1
    14bc:	d8c02915 	stw	r3,164(sp)
    14c0:	dc401405 	stb	r17,80(sp)
    14c4:	d8002785 	stb	zero,158(sp)
    14c8:	003fe906 	br	1470 <__alt_data_end+0xfffcf470>
    14cc:	01400074 	movhi	r5,1
    14d0:	294fdf04 	addi	r5,r5,16252
    14d4:	d9403915 	stw	r5,228(sp)
    14d8:	d8c02e15 	stw	r3,184(sp)
    14dc:	1025883a 	mov	r18,r2
    14e0:	04401e04 	movi	r17,120
    14e4:	9d84b03a 	or	r2,r19,r22
    14e8:	1000fc1e 	bne	r2,zero,18dc <___vfprintf_internal_r+0x1298>
    14ec:	0039883a 	mov	fp,zero
    14f0:	00800084 	movi	r2,2
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	00c00044 	movi	r3,1
    14fc:	10c20f26 	beq	r2,r3,1d3c <___vfprintf_internal_r+0x16f8>
    1500:	00c00084 	movi	r3,2
    1504:	10fd3326 	beq	r2,r3,9d4 <__alt_data_end+0xfffce9d4>
    1508:	003e0b06 	br	d38 <__alt_data_end+0xfffced38>
    150c:	d8c02017 	ldw	r3,128(sp)
    1510:	003e7106 	br	ed8 <__alt_data_end+0xfffceed8>
    1514:	00801944 	movi	r2,101
    1518:	14407e0e 	bge	r2,r17,1714 <___vfprintf_internal_r+0x10d0>
    151c:	d9003617 	ldw	r4,216(sp)
    1520:	d9403817 	ldw	r5,224(sp)
    1524:	000d883a 	mov	r6,zero
    1528:	000f883a 	mov	r7,zero
    152c:	d8c03c15 	stw	r3,240(sp)
    1530:	da003d15 	stw	r8,244(sp)
    1534:	000bd840 	call	bd84 <__eqdf2>
    1538:	d8c03c17 	ldw	r3,240(sp)
    153c:	da003d17 	ldw	r8,244(sp)
    1540:	1000f71e 	bne	r2,zero,1920 <___vfprintf_internal_r+0x12dc>
    1544:	d8801f17 	ldw	r2,124(sp)
    1548:	01000074 	movhi	r4,1
    154c:	210fe604 	addi	r4,r4,16280
    1550:	18c00044 	addi	r3,r3,1
    1554:	10800044 	addi	r2,r2,1
    1558:	41000015 	stw	r4,0(r8)
    155c:	01000044 	movi	r4,1
    1560:	41000115 	stw	r4,4(r8)
    1564:	d8c02015 	stw	r3,128(sp)
    1568:	d8801f15 	stw	r2,124(sp)
    156c:	010001c4 	movi	r4,7
    1570:	2082b816 	blt	r4,r2,2054 <___vfprintf_internal_r+0x1a10>
    1574:	42000204 	addi	r8,r8,8
    1578:	d8802617 	ldw	r2,152(sp)
    157c:	d9403317 	ldw	r5,204(sp)
    1580:	11400216 	blt	r2,r5,158c <___vfprintf_internal_r+0xf48>
    1584:	9080004c 	andi	r2,r18,1
    1588:	103eb326 	beq	r2,zero,1058 <__alt_data_end+0xfffcf058>
    158c:	d8803717 	ldw	r2,220(sp)
    1590:	d9003417 	ldw	r4,208(sp)
    1594:	d9403717 	ldw	r5,220(sp)
    1598:	1887883a 	add	r3,r3,r2
    159c:	d8801f17 	ldw	r2,124(sp)
    15a0:	41000015 	stw	r4,0(r8)
    15a4:	41400115 	stw	r5,4(r8)
    15a8:	10800044 	addi	r2,r2,1
    15ac:	d8c02015 	stw	r3,128(sp)
    15b0:	d8801f15 	stw	r2,124(sp)
    15b4:	010001c4 	movi	r4,7
    15b8:	20832916 	blt	r4,r2,2260 <___vfprintf_internal_r+0x1c1c>
    15bc:	42000204 	addi	r8,r8,8
    15c0:	d8803317 	ldw	r2,204(sp)
    15c4:	143fffc4 	addi	r16,r2,-1
    15c8:	043ea30e 	bge	zero,r16,1058 <__alt_data_end+0xfffcf058>
    15cc:	04400404 	movi	r17,16
    15d0:	d8801f17 	ldw	r2,124(sp)
    15d4:	8c00880e 	bge	r17,r16,17f8 <___vfprintf_internal_r+0x11b4>
    15d8:	01400074 	movhi	r5,1
    15dc:	294fe684 	addi	r5,r5,16282
    15e0:	d9402c15 	stw	r5,176(sp)
    15e4:	058001c4 	movi	r22,7
    15e8:	dcc02d17 	ldw	r19,180(sp)
    15ec:	00000306 	br	15fc <___vfprintf_internal_r+0xfb8>
    15f0:	42000204 	addi	r8,r8,8
    15f4:	843ffc04 	addi	r16,r16,-16
    15f8:	8c00820e 	bge	r17,r16,1804 <___vfprintf_internal_r+0x11c0>
    15fc:	18c00404 	addi	r3,r3,16
    1600:	10800044 	addi	r2,r2,1
    1604:	45000015 	stw	r20,0(r8)
    1608:	44400115 	stw	r17,4(r8)
    160c:	d8c02015 	stw	r3,128(sp)
    1610:	d8801f15 	stw	r2,124(sp)
    1614:	b0bff60e 	bge	r22,r2,15f0 <__alt_data_end+0xfffcf5f0>
    1618:	d9801e04 	addi	r6,sp,120
    161c:	b80b883a 	mov	r5,r23
    1620:	9809883a 	mov	r4,r19
    1624:	0007e240 	call	7e24 <__sprint_r>
    1628:	103d0a1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    162c:	d8c02017 	ldw	r3,128(sp)
    1630:	d8801f17 	ldw	r2,124(sp)
    1634:	da000404 	addi	r8,sp,16
    1638:	003fee06 	br	15f4 <__alt_data_end+0xfffcf5f4>
    163c:	d9403117 	ldw	r5,196(sp)
    1640:	d8802917 	ldw	r2,164(sp)
    1644:	28adc83a 	sub	r22,r5,r2
    1648:	05be410e 	bge	zero,r22,f50 <__alt_data_end+0xfffcef50>
    164c:	07000404 	movi	fp,16
    1650:	d8801f17 	ldw	r2,124(sp)
    1654:	e5838f0e 	bge	fp,r22,2494 <___vfprintf_internal_r+0x1e50>
    1658:	01400074 	movhi	r5,1
    165c:	294fe684 	addi	r5,r5,16282
    1660:	dc403015 	stw	r17,192(sp)
    1664:	d9402c15 	stw	r5,176(sp)
    1668:	b023883a 	mov	r17,r22
    166c:	04c001c4 	movi	r19,7
    1670:	a82d883a 	mov	r22,r21
    1674:	902b883a 	mov	r21,r18
    1678:	8025883a 	mov	r18,r16
    167c:	dc002d17 	ldw	r16,180(sp)
    1680:	00000306 	br	1690 <___vfprintf_internal_r+0x104c>
    1684:	8c7ffc04 	addi	r17,r17,-16
    1688:	42000204 	addi	r8,r8,8
    168c:	e440110e 	bge	fp,r17,16d4 <___vfprintf_internal_r+0x1090>
    1690:	18c00404 	addi	r3,r3,16
    1694:	10800044 	addi	r2,r2,1
    1698:	45000015 	stw	r20,0(r8)
    169c:	47000115 	stw	fp,4(r8)
    16a0:	d8c02015 	stw	r3,128(sp)
    16a4:	d8801f15 	stw	r2,124(sp)
    16a8:	98bff60e 	bge	r19,r2,1684 <__alt_data_end+0xfffcf684>
    16ac:	d9801e04 	addi	r6,sp,120
    16b0:	b80b883a 	mov	r5,r23
    16b4:	8009883a 	mov	r4,r16
    16b8:	0007e240 	call	7e24 <__sprint_r>
    16bc:	103ce51e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    16c0:	8c7ffc04 	addi	r17,r17,-16
    16c4:	d8c02017 	ldw	r3,128(sp)
    16c8:	d8801f17 	ldw	r2,124(sp)
    16cc:	da000404 	addi	r8,sp,16
    16d0:	e47fef16 	blt	fp,r17,1690 <__alt_data_end+0xfffcf690>
    16d4:	9021883a 	mov	r16,r18
    16d8:	a825883a 	mov	r18,r21
    16dc:	b02b883a 	mov	r21,r22
    16e0:	882d883a 	mov	r22,r17
    16e4:	dc403017 	ldw	r17,192(sp)
    16e8:	d9002c17 	ldw	r4,176(sp)
    16ec:	1d87883a 	add	r3,r3,r22
    16f0:	10800044 	addi	r2,r2,1
    16f4:	41000015 	stw	r4,0(r8)
    16f8:	45800115 	stw	r22,4(r8)
    16fc:	d8c02015 	stw	r3,128(sp)
    1700:	d8801f15 	stw	r2,124(sp)
    1704:	010001c4 	movi	r4,7
    1708:	20818e16 	blt	r4,r2,1d44 <___vfprintf_internal_r+0x1700>
    170c:	42000204 	addi	r8,r8,8
    1710:	003e0f06 	br	f50 <__alt_data_end+0xfffcef50>
    1714:	d9403317 	ldw	r5,204(sp)
    1718:	00800044 	movi	r2,1
    171c:	18c00044 	addi	r3,r3,1
    1720:	1141530e 	bge	r2,r5,1c70 <___vfprintf_internal_r+0x162c>
    1724:	dc401f17 	ldw	r17,124(sp)
    1728:	00800044 	movi	r2,1
    172c:	40800115 	stw	r2,4(r8)
    1730:	8c400044 	addi	r17,r17,1
    1734:	44000015 	stw	r16,0(r8)
    1738:	d8c02015 	stw	r3,128(sp)
    173c:	dc401f15 	stw	r17,124(sp)
    1740:	008001c4 	movi	r2,7
    1744:	14416b16 	blt	r2,r17,1cf4 <___vfprintf_internal_r+0x16b0>
    1748:	42000204 	addi	r8,r8,8
    174c:	d8803717 	ldw	r2,220(sp)
    1750:	d9003417 	ldw	r4,208(sp)
    1754:	8c400044 	addi	r17,r17,1
    1758:	10c7883a 	add	r3,r2,r3
    175c:	40800115 	stw	r2,4(r8)
    1760:	41000015 	stw	r4,0(r8)
    1764:	d8c02015 	stw	r3,128(sp)
    1768:	dc401f15 	stw	r17,124(sp)
    176c:	008001c4 	movi	r2,7
    1770:	14416916 	blt	r2,r17,1d18 <___vfprintf_internal_r+0x16d4>
    1774:	45800204 	addi	r22,r8,8
    1778:	d9003617 	ldw	r4,216(sp)
    177c:	d9403817 	ldw	r5,224(sp)
    1780:	000d883a 	mov	r6,zero
    1784:	000f883a 	mov	r7,zero
    1788:	d8c03c15 	stw	r3,240(sp)
    178c:	000bd840 	call	bd84 <__eqdf2>
    1790:	d8c03c17 	ldw	r3,240(sp)
    1794:	1000bc26 	beq	r2,zero,1a88 <___vfprintf_internal_r+0x1444>
    1798:	d9403317 	ldw	r5,204(sp)
    179c:	84000044 	addi	r16,r16,1
    17a0:	8c400044 	addi	r17,r17,1
    17a4:	28bfffc4 	addi	r2,r5,-1
    17a8:	1887883a 	add	r3,r3,r2
    17ac:	b0800115 	stw	r2,4(r22)
    17b0:	b4000015 	stw	r16,0(r22)
    17b4:	d8c02015 	stw	r3,128(sp)
    17b8:	dc401f15 	stw	r17,124(sp)
    17bc:	008001c4 	movi	r2,7
    17c0:	14414316 	blt	r2,r17,1cd0 <___vfprintf_internal_r+0x168c>
    17c4:	b5800204 	addi	r22,r22,8
    17c8:	d9003a17 	ldw	r4,232(sp)
    17cc:	df0022c4 	addi	fp,sp,139
    17d0:	8c400044 	addi	r17,r17,1
    17d4:	20c7883a 	add	r3,r4,r3
    17d8:	b7000015 	stw	fp,0(r22)
    17dc:	b1000115 	stw	r4,4(r22)
    17e0:	d8c02015 	stw	r3,128(sp)
    17e4:	dc401f15 	stw	r17,124(sp)
    17e8:	008001c4 	movi	r2,7
    17ec:	14400e16 	blt	r2,r17,1828 <___vfprintf_internal_r+0x11e4>
    17f0:	b2000204 	addi	r8,r22,8
    17f4:	003e1806 	br	1058 <__alt_data_end+0xfffcf058>
    17f8:	01000074 	movhi	r4,1
    17fc:	210fe684 	addi	r4,r4,16282
    1800:	d9002c15 	stw	r4,176(sp)
    1804:	d9002c17 	ldw	r4,176(sp)
    1808:	1c07883a 	add	r3,r3,r16
    180c:	44000115 	stw	r16,4(r8)
    1810:	41000015 	stw	r4,0(r8)
    1814:	10800044 	addi	r2,r2,1
    1818:	d8c02015 	stw	r3,128(sp)
    181c:	d8801f15 	stw	r2,124(sp)
    1820:	010001c4 	movi	r4,7
    1824:	20be0b0e 	bge	r4,r2,1054 <__alt_data_end+0xfffcf054>
    1828:	d9002d17 	ldw	r4,180(sp)
    182c:	d9801e04 	addi	r6,sp,120
    1830:	b80b883a 	mov	r5,r23
    1834:	0007e240 	call	7e24 <__sprint_r>
    1838:	103c861e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    183c:	d8c02017 	ldw	r3,128(sp)
    1840:	da000404 	addi	r8,sp,16
    1844:	003e0406 	br	1058 <__alt_data_end+0xfffcf058>
    1848:	d9002d17 	ldw	r4,180(sp)
    184c:	d9801e04 	addi	r6,sp,120
    1850:	b80b883a 	mov	r5,r23
    1854:	0007e240 	call	7e24 <__sprint_r>
    1858:	103e3b26 	beq	r2,zero,1148 <__alt_data_end+0xfffcf148>
    185c:	003c7d06 	br	a54 <__alt_data_end+0xfffcea54>
    1860:	d9002d17 	ldw	r4,180(sp)
    1864:	d9801e04 	addi	r6,sp,120
    1868:	b80b883a 	mov	r5,r23
    186c:	0007e240 	call	7e24 <__sprint_r>
    1870:	103c781e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1874:	d8c02017 	ldw	r3,128(sp)
    1878:	da000404 	addi	r8,sp,16
    187c:	003de906 	br	1024 <__alt_data_end+0xfffcf024>
    1880:	d9002d17 	ldw	r4,180(sp)
    1884:	d9801e04 	addi	r6,sp,120
    1888:	b80b883a 	mov	r5,r23
    188c:	0007e240 	call	7e24 <__sprint_r>
    1890:	103c701e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1894:	d8c02017 	ldw	r3,128(sp)
    1898:	da000404 	addi	r8,sp,16
    189c:	003d9b06 	br	f0c <__alt_data_end+0xfffcef0c>
    18a0:	d9002d17 	ldw	r4,180(sp)
    18a4:	d9801e04 	addi	r6,sp,120
    18a8:	b80b883a 	mov	r5,r23
    18ac:	0007e240 	call	7e24 <__sprint_r>
    18b0:	103c681e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    18b4:	d8c02017 	ldw	r3,128(sp)
    18b8:	da000404 	addi	r8,sp,16
    18bc:	003da106 	br	f44 <__alt_data_end+0xfffcef44>
    18c0:	d9402a17 	ldw	r5,168(sp)
    18c4:	d8002785 	stb	zero,158(sp)
    18c8:	283f0616 	blt	r5,zero,14e4 <__alt_data_end+0xfffcf4e4>
    18cc:	00ffdfc4 	movi	r3,-129
    18d0:	9d84b03a 	or	r2,r19,r22
    18d4:	90e4703a 	and	r18,r18,r3
    18d8:	103c3b26 	beq	r2,zero,9c8 <__alt_data_end+0xfffce9c8>
    18dc:	0039883a 	mov	fp,zero
    18e0:	003e5806 	br	1244 <__alt_data_end+0xfffcf244>
    18e4:	9080040c 	andi	r2,r18,16
    18e8:	1001b326 	beq	r2,zero,1fb8 <___vfprintf_internal_r+0x1974>
    18ec:	d8c02e17 	ldw	r3,184(sp)
    18f0:	d9002a17 	ldw	r4,168(sp)
    18f4:	d8002785 	stb	zero,158(sp)
    18f8:	18800104 	addi	r2,r3,4
    18fc:	1cc00017 	ldw	r19,0(r3)
    1900:	002d883a 	mov	r22,zero
    1904:	2001b516 	blt	r4,zero,1fdc <___vfprintf_internal_r+0x1998>
    1908:	00ffdfc4 	movi	r3,-129
    190c:	d8802e15 	stw	r2,184(sp)
    1910:	90e4703a 	and	r18,r18,r3
    1914:	983d0526 	beq	r19,zero,d2c <__alt_data_end+0xfffced2c>
    1918:	0039883a 	mov	fp,zero
    191c:	003d0806 	br	d40 <__alt_data_end+0xfffced40>
    1920:	dc402617 	ldw	r17,152(sp)
    1924:	0441d30e 	bge	zero,r17,2074 <___vfprintf_internal_r+0x1a30>
    1928:	dc403217 	ldw	r17,200(sp)
    192c:	d8803317 	ldw	r2,204(sp)
    1930:	1440010e 	bge	r2,r17,1938 <___vfprintf_internal_r+0x12f4>
    1934:	1023883a 	mov	r17,r2
    1938:	04400a0e 	bge	zero,r17,1964 <___vfprintf_internal_r+0x1320>
    193c:	d8801f17 	ldw	r2,124(sp)
    1940:	1c47883a 	add	r3,r3,r17
    1944:	44000015 	stw	r16,0(r8)
    1948:	10800044 	addi	r2,r2,1
    194c:	44400115 	stw	r17,4(r8)
    1950:	d8c02015 	stw	r3,128(sp)
    1954:	d8801f15 	stw	r2,124(sp)
    1958:	010001c4 	movi	r4,7
    195c:	20826516 	blt	r4,r2,22f4 <___vfprintf_internal_r+0x1cb0>
    1960:	42000204 	addi	r8,r8,8
    1964:	88026116 	blt	r17,zero,22ec <___vfprintf_internal_r+0x1ca8>
    1968:	d9003217 	ldw	r4,200(sp)
    196c:	2463c83a 	sub	r17,r4,r17
    1970:	04407b0e 	bge	zero,r17,1b60 <___vfprintf_internal_r+0x151c>
    1974:	05800404 	movi	r22,16
    1978:	d8801f17 	ldw	r2,124(sp)
    197c:	b4419d0e 	bge	r22,r17,1ff4 <___vfprintf_internal_r+0x19b0>
    1980:	01000074 	movhi	r4,1
    1984:	210fe684 	addi	r4,r4,16282
    1988:	d9002c15 	stw	r4,176(sp)
    198c:	070001c4 	movi	fp,7
    1990:	dcc02d17 	ldw	r19,180(sp)
    1994:	00000306 	br	19a4 <___vfprintf_internal_r+0x1360>
    1998:	42000204 	addi	r8,r8,8
    199c:	8c7ffc04 	addi	r17,r17,-16
    19a0:	b441970e 	bge	r22,r17,2000 <___vfprintf_internal_r+0x19bc>
    19a4:	18c00404 	addi	r3,r3,16
    19a8:	10800044 	addi	r2,r2,1
    19ac:	45000015 	stw	r20,0(r8)
    19b0:	45800115 	stw	r22,4(r8)
    19b4:	d8c02015 	stw	r3,128(sp)
    19b8:	d8801f15 	stw	r2,124(sp)
    19bc:	e0bff60e 	bge	fp,r2,1998 <__alt_data_end+0xfffcf998>
    19c0:	d9801e04 	addi	r6,sp,120
    19c4:	b80b883a 	mov	r5,r23
    19c8:	9809883a 	mov	r4,r19
    19cc:	0007e240 	call	7e24 <__sprint_r>
    19d0:	103c201e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    19d4:	d8c02017 	ldw	r3,128(sp)
    19d8:	d8801f17 	ldw	r2,124(sp)
    19dc:	da000404 	addi	r8,sp,16
    19e0:	003fee06 	br	199c <__alt_data_end+0xfffcf99c>
    19e4:	d9002d17 	ldw	r4,180(sp)
    19e8:	d9801e04 	addi	r6,sp,120
    19ec:	b80b883a 	mov	r5,r23
    19f0:	0007e240 	call	7e24 <__sprint_r>
    19f4:	103c171e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    19f8:	d8c02017 	ldw	r3,128(sp)
    19fc:	df002787 	ldb	fp,158(sp)
    1a00:	da000404 	addi	r8,sp,16
    1a04:	003d3406 	br	ed8 <__alt_data_end+0xfffceed8>
    1a08:	9080040c 	andi	r2,r18,16
    1a0c:	10016126 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x1950>
    1a10:	d9402e17 	ldw	r5,184(sp)
    1a14:	2cc00017 	ldw	r19,0(r5)
    1a18:	29400104 	addi	r5,r5,4
    1a1c:	d9402e15 	stw	r5,184(sp)
    1a20:	982dd7fa 	srai	r22,r19,31
    1a24:	b005883a 	mov	r2,r22
    1a28:	003c5a06 	br	b94 <__alt_data_end+0xfffceb94>
    1a2c:	9080040c 	andi	r2,r18,16
    1a30:	10003526 	beq	r2,zero,1b08 <___vfprintf_internal_r+0x14c4>
    1a34:	d8c02e17 	ldw	r3,184(sp)
    1a38:	d9002a17 	ldw	r4,168(sp)
    1a3c:	d8002785 	stb	zero,158(sp)
    1a40:	18800104 	addi	r2,r3,4
    1a44:	1cc00017 	ldw	r19,0(r3)
    1a48:	002d883a 	mov	r22,zero
    1a4c:	20003716 	blt	r4,zero,1b2c <___vfprintf_internal_r+0x14e8>
    1a50:	00ffdfc4 	movi	r3,-129
    1a54:	d8802e15 	stw	r2,184(sp)
    1a58:	90e4703a 	and	r18,r18,r3
    1a5c:	0039883a 	mov	fp,zero
    1a60:	983dd426 	beq	r19,zero,11b4 <__alt_data_end+0xfffcf1b4>
    1a64:	00800244 	movi	r2,9
    1a68:	14fc5336 	bltu	r2,r19,bb8 <__alt_data_end+0xfffcebb8>
    1a6c:	d8c02817 	ldw	r3,160(sp)
    1a70:	dc001dc4 	addi	r16,sp,119
    1a74:	9cc00c04 	addi	r19,r19,48
    1a78:	1c07c83a 	sub	r3,r3,r16
    1a7c:	dcc01dc5 	stb	r19,119(sp)
    1a80:	d8c02b15 	stw	r3,172(sp)
    1a84:	003cc606 	br	da0 <__alt_data_end+0xfffceda0>
    1a88:	d8803317 	ldw	r2,204(sp)
    1a8c:	143fffc4 	addi	r16,r2,-1
    1a90:	043f4d0e 	bge	zero,r16,17c8 <__alt_data_end+0xfffcf7c8>
    1a94:	07000404 	movi	fp,16
    1a98:	e400810e 	bge	fp,r16,1ca0 <___vfprintf_internal_r+0x165c>
    1a9c:	01400074 	movhi	r5,1
    1aa0:	294fe684 	addi	r5,r5,16282
    1aa4:	d9402c15 	stw	r5,176(sp)
    1aa8:	01c001c4 	movi	r7,7
    1aac:	dcc02d17 	ldw	r19,180(sp)
    1ab0:	00000306 	br	1ac0 <___vfprintf_internal_r+0x147c>
    1ab4:	b5800204 	addi	r22,r22,8
    1ab8:	843ffc04 	addi	r16,r16,-16
    1abc:	e4007b0e 	bge	fp,r16,1cac <___vfprintf_internal_r+0x1668>
    1ac0:	18c00404 	addi	r3,r3,16
    1ac4:	8c400044 	addi	r17,r17,1
    1ac8:	b5000015 	stw	r20,0(r22)
    1acc:	b7000115 	stw	fp,4(r22)
    1ad0:	d8c02015 	stw	r3,128(sp)
    1ad4:	dc401f15 	stw	r17,124(sp)
    1ad8:	3c7ff60e 	bge	r7,r17,1ab4 <__alt_data_end+0xfffcfab4>
    1adc:	d9801e04 	addi	r6,sp,120
    1ae0:	b80b883a 	mov	r5,r23
    1ae4:	9809883a 	mov	r4,r19
    1ae8:	d9c03c15 	stw	r7,240(sp)
    1aec:	0007e240 	call	7e24 <__sprint_r>
    1af0:	d9c03c17 	ldw	r7,240(sp)
    1af4:	103bd71e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1af8:	d8c02017 	ldw	r3,128(sp)
    1afc:	dc401f17 	ldw	r17,124(sp)
    1b00:	dd800404 	addi	r22,sp,16
    1b04:	003fec06 	br	1ab8 <__alt_data_end+0xfffcfab8>
    1b08:	9080100c 	andi	r2,r18,64
    1b0c:	d8002785 	stb	zero,158(sp)
    1b10:	10010e26 	beq	r2,zero,1f4c <___vfprintf_internal_r+0x1908>
    1b14:	d9402e17 	ldw	r5,184(sp)
    1b18:	d8c02a17 	ldw	r3,168(sp)
    1b1c:	002d883a 	mov	r22,zero
    1b20:	28800104 	addi	r2,r5,4
    1b24:	2cc0000b 	ldhu	r19,0(r5)
    1b28:	183fc90e 	bge	r3,zero,1a50 <__alt_data_end+0xfffcfa50>
    1b2c:	d8802e15 	stw	r2,184(sp)
    1b30:	0039883a 	mov	fp,zero
    1b34:	9d84b03a 	or	r2,r19,r22
    1b38:	103c1e1e 	bne	r2,zero,bb4 <__alt_data_end+0xfffcebb4>
    1b3c:	00800044 	movi	r2,1
    1b40:	003e6c06 	br	14f4 <__alt_data_end+0xfffcf4f4>
    1b44:	d9002d17 	ldw	r4,180(sp)
    1b48:	d9801e04 	addi	r6,sp,120
    1b4c:	b80b883a 	mov	r5,r23
    1b50:	0007e240 	call	7e24 <__sprint_r>
    1b54:	103bbf1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1b58:	d8c02017 	ldw	r3,128(sp)
    1b5c:	da000404 	addi	r8,sp,16
    1b60:	d9003217 	ldw	r4,200(sp)
    1b64:	d8802617 	ldw	r2,152(sp)
    1b68:	d9403317 	ldw	r5,204(sp)
    1b6c:	8123883a 	add	r17,r16,r4
    1b70:	11400216 	blt	r2,r5,1b7c <___vfprintf_internal_r+0x1538>
    1b74:	9100004c 	andi	r4,r18,1
    1b78:	20000d26 	beq	r4,zero,1bb0 <___vfprintf_internal_r+0x156c>
    1b7c:	d9003717 	ldw	r4,220(sp)
    1b80:	d9403417 	ldw	r5,208(sp)
    1b84:	1907883a 	add	r3,r3,r4
    1b88:	d9001f17 	ldw	r4,124(sp)
    1b8c:	41400015 	stw	r5,0(r8)
    1b90:	d9403717 	ldw	r5,220(sp)
    1b94:	21000044 	addi	r4,r4,1
    1b98:	d8c02015 	stw	r3,128(sp)
    1b9c:	41400115 	stw	r5,4(r8)
    1ba0:	d9001f15 	stw	r4,124(sp)
    1ba4:	014001c4 	movi	r5,7
    1ba8:	2901e816 	blt	r5,r4,234c <___vfprintf_internal_r+0x1d08>
    1bac:	42000204 	addi	r8,r8,8
    1bb0:	d9003317 	ldw	r4,204(sp)
    1bb4:	8121883a 	add	r16,r16,r4
    1bb8:	2085c83a 	sub	r2,r4,r2
    1bbc:	8461c83a 	sub	r16,r16,r17
    1bc0:	1400010e 	bge	r2,r16,1bc8 <___vfprintf_internal_r+0x1584>
    1bc4:	1021883a 	mov	r16,r2
    1bc8:	04000a0e 	bge	zero,r16,1bf4 <___vfprintf_internal_r+0x15b0>
    1bcc:	d9001f17 	ldw	r4,124(sp)
    1bd0:	1c07883a 	add	r3,r3,r16
    1bd4:	44400015 	stw	r17,0(r8)
    1bd8:	21000044 	addi	r4,r4,1
    1bdc:	44000115 	stw	r16,4(r8)
    1be0:	d8c02015 	stw	r3,128(sp)
    1be4:	d9001f15 	stw	r4,124(sp)
    1be8:	014001c4 	movi	r5,7
    1bec:	2901fb16 	blt	r5,r4,23dc <___vfprintf_internal_r+0x1d98>
    1bf0:	42000204 	addi	r8,r8,8
    1bf4:	8001f716 	blt	r16,zero,23d4 <___vfprintf_internal_r+0x1d90>
    1bf8:	1421c83a 	sub	r16,r2,r16
    1bfc:	043d160e 	bge	zero,r16,1058 <__alt_data_end+0xfffcf058>
    1c00:	04400404 	movi	r17,16
    1c04:	d8801f17 	ldw	r2,124(sp)
    1c08:	8c3efb0e 	bge	r17,r16,17f8 <__alt_data_end+0xfffcf7f8>
    1c0c:	01400074 	movhi	r5,1
    1c10:	294fe684 	addi	r5,r5,16282
    1c14:	d9402c15 	stw	r5,176(sp)
    1c18:	058001c4 	movi	r22,7
    1c1c:	dcc02d17 	ldw	r19,180(sp)
    1c20:	00000306 	br	1c30 <___vfprintf_internal_r+0x15ec>
    1c24:	42000204 	addi	r8,r8,8
    1c28:	843ffc04 	addi	r16,r16,-16
    1c2c:	8c3ef50e 	bge	r17,r16,1804 <__alt_data_end+0xfffcf804>
    1c30:	18c00404 	addi	r3,r3,16
    1c34:	10800044 	addi	r2,r2,1
    1c38:	45000015 	stw	r20,0(r8)
    1c3c:	44400115 	stw	r17,4(r8)
    1c40:	d8c02015 	stw	r3,128(sp)
    1c44:	d8801f15 	stw	r2,124(sp)
    1c48:	b0bff60e 	bge	r22,r2,1c24 <__alt_data_end+0xfffcfc24>
    1c4c:	d9801e04 	addi	r6,sp,120
    1c50:	b80b883a 	mov	r5,r23
    1c54:	9809883a 	mov	r4,r19
    1c58:	0007e240 	call	7e24 <__sprint_r>
    1c5c:	103b7d1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1c60:	d8c02017 	ldw	r3,128(sp)
    1c64:	d8801f17 	ldw	r2,124(sp)
    1c68:	da000404 	addi	r8,sp,16
    1c6c:	003fee06 	br	1c28 <__alt_data_end+0xfffcfc28>
    1c70:	9088703a 	and	r4,r18,r2
    1c74:	203eab1e 	bne	r4,zero,1724 <__alt_data_end+0xfffcf724>
    1c78:	dc401f17 	ldw	r17,124(sp)
    1c7c:	40800115 	stw	r2,4(r8)
    1c80:	44000015 	stw	r16,0(r8)
    1c84:	8c400044 	addi	r17,r17,1
    1c88:	d8c02015 	stw	r3,128(sp)
    1c8c:	dc401f15 	stw	r17,124(sp)
    1c90:	008001c4 	movi	r2,7
    1c94:	14400e16 	blt	r2,r17,1cd0 <___vfprintf_internal_r+0x168c>
    1c98:	45800204 	addi	r22,r8,8
    1c9c:	003eca06 	br	17c8 <__alt_data_end+0xfffcf7c8>
    1ca0:	01000074 	movhi	r4,1
    1ca4:	210fe684 	addi	r4,r4,16282
    1ca8:	d9002c15 	stw	r4,176(sp)
    1cac:	d8802c17 	ldw	r2,176(sp)
    1cb0:	1c07883a 	add	r3,r3,r16
    1cb4:	8c400044 	addi	r17,r17,1
    1cb8:	b0800015 	stw	r2,0(r22)
    1cbc:	b4000115 	stw	r16,4(r22)
    1cc0:	d8c02015 	stw	r3,128(sp)
    1cc4:	dc401f15 	stw	r17,124(sp)
    1cc8:	008001c4 	movi	r2,7
    1ccc:	147ebd0e 	bge	r2,r17,17c4 <__alt_data_end+0xfffcf7c4>
    1cd0:	d9002d17 	ldw	r4,180(sp)
    1cd4:	d9801e04 	addi	r6,sp,120
    1cd8:	b80b883a 	mov	r5,r23
    1cdc:	0007e240 	call	7e24 <__sprint_r>
    1ce0:	103b5c1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1ce4:	d8c02017 	ldw	r3,128(sp)
    1ce8:	dc401f17 	ldw	r17,124(sp)
    1cec:	dd800404 	addi	r22,sp,16
    1cf0:	003eb506 	br	17c8 <__alt_data_end+0xfffcf7c8>
    1cf4:	d9002d17 	ldw	r4,180(sp)
    1cf8:	d9801e04 	addi	r6,sp,120
    1cfc:	b80b883a 	mov	r5,r23
    1d00:	0007e240 	call	7e24 <__sprint_r>
    1d04:	103b531e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1d08:	d8c02017 	ldw	r3,128(sp)
    1d0c:	dc401f17 	ldw	r17,124(sp)
    1d10:	da000404 	addi	r8,sp,16
    1d14:	003e8d06 	br	174c <__alt_data_end+0xfffcf74c>
    1d18:	d9002d17 	ldw	r4,180(sp)
    1d1c:	d9801e04 	addi	r6,sp,120
    1d20:	b80b883a 	mov	r5,r23
    1d24:	0007e240 	call	7e24 <__sprint_r>
    1d28:	103b4a1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1d2c:	d8c02017 	ldw	r3,128(sp)
    1d30:	dc401f17 	ldw	r17,124(sp)
    1d34:	dd800404 	addi	r22,sp,16
    1d38:	003e8f06 	br	1778 <__alt_data_end+0xfffcf778>
    1d3c:	0027883a 	mov	r19,zero
    1d40:	003f4a06 	br	1a6c <__alt_data_end+0xfffcfa6c>
    1d44:	d9002d17 	ldw	r4,180(sp)
    1d48:	d9801e04 	addi	r6,sp,120
    1d4c:	b80b883a 	mov	r5,r23
    1d50:	0007e240 	call	7e24 <__sprint_r>
    1d54:	103b3f1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    1d58:	d8c02017 	ldw	r3,128(sp)
    1d5c:	da000404 	addi	r8,sp,16
    1d60:	003c7b06 	br	f50 <__alt_data_end+0xfffcef50>
    1d64:	d9402a17 	ldw	r5,168(sp)
    1d68:	04e7c83a 	sub	r19,zero,r19
    1d6c:	07000b44 	movi	fp,45
    1d70:	9804c03a 	cmpne	r2,r19,zero
    1d74:	05adc83a 	sub	r22,zero,r22
    1d78:	df002785 	stb	fp,158(sp)
    1d7c:	b0adc83a 	sub	r22,r22,r2
    1d80:	28017b16 	blt	r5,zero,2370 <___vfprintf_internal_r+0x1d2c>
    1d84:	00bfdfc4 	movi	r2,-129
    1d88:	90a4703a 	and	r18,r18,r2
    1d8c:	003b8906 	br	bb4 <__alt_data_end+0xfffcebb4>
    1d90:	d9003617 	ldw	r4,216(sp)
    1d94:	d9403817 	ldw	r5,224(sp)
    1d98:	da003d15 	stw	r8,244(sp)
    1d9c:	0007a480 	call	7a48 <__fpclassifyd>
    1da0:	da003d17 	ldw	r8,244(sp)
    1da4:	1000f026 	beq	r2,zero,2168 <___vfprintf_internal_r+0x1b24>
    1da8:	d9002a17 	ldw	r4,168(sp)
    1dac:	05bff7c4 	movi	r22,-33
    1db0:	00bfffc4 	movi	r2,-1
    1db4:	8dac703a 	and	r22,r17,r22
    1db8:	20820026 	beq	r4,r2,25bc <___vfprintf_internal_r+0x1f78>
    1dbc:	008011c4 	movi	r2,71
    1dc0:	b081f726 	beq	r22,r2,25a0 <___vfprintf_internal_r+0x1f5c>
    1dc4:	d9003817 	ldw	r4,224(sp)
    1dc8:	90c04014 	ori	r3,r18,256
    1dcc:	d8c02c15 	stw	r3,176(sp)
    1dd0:	20021516 	blt	r4,zero,2628 <___vfprintf_internal_r+0x1fe4>
    1dd4:	dcc03817 	ldw	r19,224(sp)
    1dd8:	d8002905 	stb	zero,164(sp)
    1ddc:	00801984 	movi	r2,102
    1de0:	8881f926 	beq	r17,r2,25c8 <___vfprintf_internal_r+0x1f84>
    1de4:	00801184 	movi	r2,70
    1de8:	88821c26 	beq	r17,r2,265c <___vfprintf_internal_r+0x2018>
    1dec:	00801144 	movi	r2,69
    1df0:	b081ef26 	beq	r22,r2,25b0 <___vfprintf_internal_r+0x1f6c>
    1df4:	d8c02a17 	ldw	r3,168(sp)
    1df8:	d8802104 	addi	r2,sp,132
    1dfc:	d8800315 	stw	r2,12(sp)
    1e00:	d9403617 	ldw	r5,216(sp)
    1e04:	d8802504 	addi	r2,sp,148
    1e08:	d9002d17 	ldw	r4,180(sp)
    1e0c:	d8800215 	stw	r2,8(sp)
    1e10:	d8802604 	addi	r2,sp,152
    1e14:	d8c00015 	stw	r3,0(sp)
    1e18:	d8800115 	stw	r2,4(sp)
    1e1c:	01c00084 	movi	r7,2
    1e20:	980d883a 	mov	r6,r19
    1e24:	d8c03c15 	stw	r3,240(sp)
    1e28:	da003d15 	stw	r8,244(sp)
    1e2c:	0002d740 	call	2d74 <_dtoa_r>
    1e30:	1021883a 	mov	r16,r2
    1e34:	008019c4 	movi	r2,103
    1e38:	d8c03c17 	ldw	r3,240(sp)
    1e3c:	da003d17 	ldw	r8,244(sp)
    1e40:	88817126 	beq	r17,r2,2408 <___vfprintf_internal_r+0x1dc4>
    1e44:	008011c4 	movi	r2,71
    1e48:	88829126 	beq	r17,r2,2890 <___vfprintf_internal_r+0x224c>
    1e4c:	80f9883a 	add	fp,r16,r3
    1e50:	d9003617 	ldw	r4,216(sp)
    1e54:	000d883a 	mov	r6,zero
    1e58:	000f883a 	mov	r7,zero
    1e5c:	980b883a 	mov	r5,r19
    1e60:	da003d15 	stw	r8,244(sp)
    1e64:	000bd840 	call	bd84 <__eqdf2>
    1e68:	da003d17 	ldw	r8,244(sp)
    1e6c:	10018d26 	beq	r2,zero,24a4 <___vfprintf_internal_r+0x1e60>
    1e70:	d8802117 	ldw	r2,132(sp)
    1e74:	1700062e 	bgeu	r2,fp,1e90 <___vfprintf_internal_r+0x184c>
    1e78:	01000c04 	movi	r4,48
    1e7c:	10c00044 	addi	r3,r2,1
    1e80:	d8c02115 	stw	r3,132(sp)
    1e84:	11000005 	stb	r4,0(r2)
    1e88:	d8802117 	ldw	r2,132(sp)
    1e8c:	173ffb36 	bltu	r2,fp,1e7c <__alt_data_end+0xfffcfe7c>
    1e90:	1405c83a 	sub	r2,r2,r16
    1e94:	d8803315 	stw	r2,204(sp)
    1e98:	008011c4 	movi	r2,71
    1e9c:	b0817626 	beq	r22,r2,2478 <___vfprintf_internal_r+0x1e34>
    1ea0:	00801944 	movi	r2,101
    1ea4:	1442800e 	bge	r2,r17,28a8 <___vfprintf_internal_r+0x2264>
    1ea8:	d8c02617 	ldw	r3,152(sp)
    1eac:	00801984 	movi	r2,102
    1eb0:	d8c03215 	stw	r3,200(sp)
    1eb4:	8881fe26 	beq	r17,r2,26b0 <___vfprintf_internal_r+0x206c>
    1eb8:	d8c03217 	ldw	r3,200(sp)
    1ebc:	d9003317 	ldw	r4,204(sp)
    1ec0:	1901dd16 	blt	r3,r4,2638 <___vfprintf_internal_r+0x1ff4>
    1ec4:	9480004c 	andi	r18,r18,1
    1ec8:	90022b1e 	bne	r18,zero,2778 <___vfprintf_internal_r+0x2134>
    1ecc:	1805883a 	mov	r2,r3
    1ed0:	18028316 	blt	r3,zero,28e0 <___vfprintf_internal_r+0x229c>
    1ed4:	d8c03217 	ldw	r3,200(sp)
    1ed8:	044019c4 	movi	r17,103
    1edc:	d8c02b15 	stw	r3,172(sp)
    1ee0:	df002907 	ldb	fp,164(sp)
    1ee4:	e001531e 	bne	fp,zero,2434 <___vfprintf_internal_r+0x1df0>
    1ee8:	df002783 	ldbu	fp,158(sp)
    1eec:	d8802915 	stw	r2,164(sp)
    1ef0:	dc802c17 	ldw	r18,176(sp)
    1ef4:	d8002a15 	stw	zero,168(sp)
    1ef8:	003baf06 	br	db8 <__alt_data_end+0xfffcedb8>
    1efc:	d8c02e17 	ldw	r3,184(sp)
    1f00:	d9002e17 	ldw	r4,184(sp)
    1f04:	d9402e17 	ldw	r5,184(sp)
    1f08:	18c00017 	ldw	r3,0(r3)
    1f0c:	21000117 	ldw	r4,4(r4)
    1f10:	29400204 	addi	r5,r5,8
    1f14:	d8c03615 	stw	r3,216(sp)
    1f18:	d9003815 	stw	r4,224(sp)
    1f1c:	d9402e15 	stw	r5,184(sp)
    1f20:	003b5006 	br	c64 <__alt_data_end+0xfffcec64>
    1f24:	ac400007 	ldb	r17,0(r21)
    1f28:	003a2806 	br	7cc <__alt_data_end+0xfffce7cc>
    1f2c:	9080100c 	andi	r2,r18,64
    1f30:	1000a826 	beq	r2,zero,21d4 <___vfprintf_internal_r+0x1b90>
    1f34:	d8c02e17 	ldw	r3,184(sp)
    1f38:	002d883a 	mov	r22,zero
    1f3c:	1cc0000b 	ldhu	r19,0(r3)
    1f40:	18c00104 	addi	r3,r3,4
    1f44:	d8c02e15 	stw	r3,184(sp)
    1f48:	003caf06 	br	1208 <__alt_data_end+0xfffcf208>
    1f4c:	d9002e17 	ldw	r4,184(sp)
    1f50:	d9402a17 	ldw	r5,168(sp)
    1f54:	002d883a 	mov	r22,zero
    1f58:	20800104 	addi	r2,r4,4
    1f5c:	24c00017 	ldw	r19,0(r4)
    1f60:	283ebb0e 	bge	r5,zero,1a50 <__alt_data_end+0xfffcfa50>
    1f64:	003ef106 	br	1b2c <__alt_data_end+0xfffcfb2c>
    1f68:	9080040c 	andi	r2,r18,16
    1f6c:	1000921e 	bne	r2,zero,21b8 <___vfprintf_internal_r+0x1b74>
    1f70:	9480100c 	andi	r18,r18,64
    1f74:	90013926 	beq	r18,zero,245c <___vfprintf_internal_r+0x1e18>
    1f78:	d9402e17 	ldw	r5,184(sp)
    1f7c:	d8c02f17 	ldw	r3,188(sp)
    1f80:	28800017 	ldw	r2,0(r5)
    1f84:	29400104 	addi	r5,r5,4
    1f88:	d9402e15 	stw	r5,184(sp)
    1f8c:	10c0000d 	sth	r3,0(r2)
    1f90:	0039e406 	br	724 <__alt_data_end+0xfffce724>
    1f94:	9080100c 	andi	r2,r18,64
    1f98:	10008026 	beq	r2,zero,219c <___vfprintf_internal_r+0x1b58>
    1f9c:	d8802e17 	ldw	r2,184(sp)
    1fa0:	14c0000f 	ldh	r19,0(r2)
    1fa4:	10800104 	addi	r2,r2,4
    1fa8:	d8802e15 	stw	r2,184(sp)
    1fac:	982dd7fa 	srai	r22,r19,31
    1fb0:	b005883a 	mov	r2,r22
    1fb4:	003af706 	br	b94 <__alt_data_end+0xfffceb94>
    1fb8:	9080100c 	andi	r2,r18,64
    1fbc:	d8002785 	stb	zero,158(sp)
    1fc0:	10008a1e 	bne	r2,zero,21ec <___vfprintf_internal_r+0x1ba8>
    1fc4:	d9002e17 	ldw	r4,184(sp)
    1fc8:	d9402a17 	ldw	r5,168(sp)
    1fcc:	002d883a 	mov	r22,zero
    1fd0:	20800104 	addi	r2,r4,4
    1fd4:	24c00017 	ldw	r19,0(r4)
    1fd8:	283e4b0e 	bge	r5,zero,1908 <__alt_data_end+0xfffcf908>
    1fdc:	9d86b03a 	or	r3,r19,r22
    1fe0:	d8802e15 	stw	r2,184(sp)
    1fe4:	183e4c1e 	bne	r3,zero,1918 <__alt_data_end+0xfffcf918>
    1fe8:	0039883a 	mov	fp,zero
    1fec:	0005883a 	mov	r2,zero
    1ff0:	003d4006 	br	14f4 <__alt_data_end+0xfffcf4f4>
    1ff4:	01400074 	movhi	r5,1
    1ff8:	294fe684 	addi	r5,r5,16282
    1ffc:	d9402c15 	stw	r5,176(sp)
    2000:	d9402c17 	ldw	r5,176(sp)
    2004:	1c47883a 	add	r3,r3,r17
    2008:	10800044 	addi	r2,r2,1
    200c:	41400015 	stw	r5,0(r8)
    2010:	44400115 	stw	r17,4(r8)
    2014:	d8c02015 	stw	r3,128(sp)
    2018:	d8801f15 	stw	r2,124(sp)
    201c:	010001c4 	movi	r4,7
    2020:	20bec816 	blt	r4,r2,1b44 <__alt_data_end+0xfffcfb44>
    2024:	42000204 	addi	r8,r8,8
    2028:	003ecd06 	br	1b60 <__alt_data_end+0xfffcfb60>
    202c:	d9002a17 	ldw	r4,168(sp)
    2030:	d8002785 	stb	zero,158(sp)
    2034:	203d2d16 	blt	r4,zero,14ec <__alt_data_end+0xfffcf4ec>
    2038:	00bfdfc4 	movi	r2,-129
    203c:	90a4703a 	and	r18,r18,r2
    2040:	003a6106 	br	9c8 <__alt_data_end+0xfffce9c8>
    2044:	01000074 	movhi	r4,1
    2048:	210fe684 	addi	r4,r4,16282
    204c:	d9002c15 	stw	r4,176(sp)
    2050:	003bea06 	br	ffc <__alt_data_end+0xfffceffc>
    2054:	d9002d17 	ldw	r4,180(sp)
    2058:	d9801e04 	addi	r6,sp,120
    205c:	b80b883a 	mov	r5,r23
    2060:	0007e240 	call	7e24 <__sprint_r>
    2064:	103a7b1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2068:	d8c02017 	ldw	r3,128(sp)
    206c:	da000404 	addi	r8,sp,16
    2070:	003d4106 	br	1578 <__alt_data_end+0xfffcf578>
    2074:	d8801f17 	ldw	r2,124(sp)
    2078:	01400074 	movhi	r5,1
    207c:	01000044 	movi	r4,1
    2080:	18c00044 	addi	r3,r3,1
    2084:	10800044 	addi	r2,r2,1
    2088:	294fe604 	addi	r5,r5,16280
    208c:	41000115 	stw	r4,4(r8)
    2090:	41400015 	stw	r5,0(r8)
    2094:	d8c02015 	stw	r3,128(sp)
    2098:	d8801f15 	stw	r2,124(sp)
    209c:	010001c4 	movi	r4,7
    20a0:	20805c16 	blt	r4,r2,2214 <___vfprintf_internal_r+0x1bd0>
    20a4:	42000204 	addi	r8,r8,8
    20a8:	8800041e 	bne	r17,zero,20bc <___vfprintf_internal_r+0x1a78>
    20ac:	d8803317 	ldw	r2,204(sp)
    20b0:	1000021e 	bne	r2,zero,20bc <___vfprintf_internal_r+0x1a78>
    20b4:	9080004c 	andi	r2,r18,1
    20b8:	103be726 	beq	r2,zero,1058 <__alt_data_end+0xfffcf058>
    20bc:	d9003717 	ldw	r4,220(sp)
    20c0:	d8801f17 	ldw	r2,124(sp)
    20c4:	d9403417 	ldw	r5,208(sp)
    20c8:	20c7883a 	add	r3,r4,r3
    20cc:	10800044 	addi	r2,r2,1
    20d0:	41000115 	stw	r4,4(r8)
    20d4:	41400015 	stw	r5,0(r8)
    20d8:	d8c02015 	stw	r3,128(sp)
    20dc:	d8801f15 	stw	r2,124(sp)
    20e0:	010001c4 	movi	r4,7
    20e4:	20812116 	blt	r4,r2,256c <___vfprintf_internal_r+0x1f28>
    20e8:	42000204 	addi	r8,r8,8
    20ec:	0463c83a 	sub	r17,zero,r17
    20f0:	0440730e 	bge	zero,r17,22c0 <___vfprintf_internal_r+0x1c7c>
    20f4:	05800404 	movi	r22,16
    20f8:	b440860e 	bge	r22,r17,2314 <___vfprintf_internal_r+0x1cd0>
    20fc:	01400074 	movhi	r5,1
    2100:	294fe684 	addi	r5,r5,16282
    2104:	d9402c15 	stw	r5,176(sp)
    2108:	070001c4 	movi	fp,7
    210c:	dcc02d17 	ldw	r19,180(sp)
    2110:	00000306 	br	2120 <___vfprintf_internal_r+0x1adc>
    2114:	42000204 	addi	r8,r8,8
    2118:	8c7ffc04 	addi	r17,r17,-16
    211c:	b440800e 	bge	r22,r17,2320 <___vfprintf_internal_r+0x1cdc>
    2120:	18c00404 	addi	r3,r3,16
    2124:	10800044 	addi	r2,r2,1
    2128:	45000015 	stw	r20,0(r8)
    212c:	45800115 	stw	r22,4(r8)
    2130:	d8c02015 	stw	r3,128(sp)
    2134:	d8801f15 	stw	r2,124(sp)
    2138:	e0bff60e 	bge	fp,r2,2114 <__alt_data_end+0xfffd0114>
    213c:	d9801e04 	addi	r6,sp,120
    2140:	b80b883a 	mov	r5,r23
    2144:	9809883a 	mov	r4,r19
    2148:	0007e240 	call	7e24 <__sprint_r>
    214c:	103a411e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2150:	d8c02017 	ldw	r3,128(sp)
    2154:	d8801f17 	ldw	r2,124(sp)
    2158:	da000404 	addi	r8,sp,16
    215c:	003fee06 	br	2118 <__alt_data_end+0xfffd0118>
    2160:	00bfffc4 	movi	r2,-1
    2164:	003a3f06 	br	a64 <__alt_data_end+0xfffcea64>
    2168:	008011c4 	movi	r2,71
    216c:	1440b816 	blt	r2,r17,2450 <___vfprintf_internal_r+0x1e0c>
    2170:	04000074 	movhi	r16,1
    2174:	840fd804 	addi	r16,r16,16224
    2178:	00c000c4 	movi	r3,3
    217c:	00bfdfc4 	movi	r2,-129
    2180:	d8c02915 	stw	r3,164(sp)
    2184:	90a4703a 	and	r18,r18,r2
    2188:	df002783 	ldbu	fp,158(sp)
    218c:	d8c02b15 	stw	r3,172(sp)
    2190:	d8002a15 	stw	zero,168(sp)
    2194:	d8003215 	stw	zero,200(sp)
    2198:	003b0706 	br	db8 <__alt_data_end+0xfffcedb8>
    219c:	d8c02e17 	ldw	r3,184(sp)
    21a0:	1cc00017 	ldw	r19,0(r3)
    21a4:	18c00104 	addi	r3,r3,4
    21a8:	d8c02e15 	stw	r3,184(sp)
    21ac:	982dd7fa 	srai	r22,r19,31
    21b0:	b005883a 	mov	r2,r22
    21b4:	003a7706 	br	b94 <__alt_data_end+0xfffceb94>
    21b8:	d8c02e17 	ldw	r3,184(sp)
    21bc:	d9002f17 	ldw	r4,188(sp)
    21c0:	18800017 	ldw	r2,0(r3)
    21c4:	18c00104 	addi	r3,r3,4
    21c8:	d8c02e15 	stw	r3,184(sp)
    21cc:	11000015 	stw	r4,0(r2)
    21d0:	00395406 	br	724 <__alt_data_end+0xfffce724>
    21d4:	d9002e17 	ldw	r4,184(sp)
    21d8:	002d883a 	mov	r22,zero
    21dc:	24c00017 	ldw	r19,0(r4)
    21e0:	21000104 	addi	r4,r4,4
    21e4:	d9002e15 	stw	r4,184(sp)
    21e8:	003c0706 	br	1208 <__alt_data_end+0xfffcf208>
    21ec:	d9402e17 	ldw	r5,184(sp)
    21f0:	d8c02a17 	ldw	r3,168(sp)
    21f4:	002d883a 	mov	r22,zero
    21f8:	28800104 	addi	r2,r5,4
    21fc:	2cc0000b 	ldhu	r19,0(r5)
    2200:	183dc10e 	bge	r3,zero,1908 <__alt_data_end+0xfffcf908>
    2204:	003f7506 	br	1fdc <__alt_data_end+0xfffcffdc>
    2208:	04000074 	movhi	r16,1
    220c:	840fd604 	addi	r16,r16,16216
    2210:	003aa706 	br	cb0 <__alt_data_end+0xfffcecb0>
    2214:	d9002d17 	ldw	r4,180(sp)
    2218:	d9801e04 	addi	r6,sp,120
    221c:	b80b883a 	mov	r5,r23
    2220:	0007e240 	call	7e24 <__sprint_r>
    2224:	103a0b1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2228:	dc402617 	ldw	r17,152(sp)
    222c:	d8c02017 	ldw	r3,128(sp)
    2230:	da000404 	addi	r8,sp,16
    2234:	003f9c06 	br	20a8 <__alt_data_end+0xfffd00a8>
    2238:	ac400043 	ldbu	r17,1(r21)
    223c:	84000814 	ori	r16,r16,32
    2240:	ad400044 	addi	r21,r21,1
    2244:	8c403fcc 	andi	r17,r17,255
    2248:	8c40201c 	xori	r17,r17,128
    224c:	8c7fe004 	addi	r17,r17,-128
    2250:	00395e06 	br	7cc <__alt_data_end+0xfffce7cc>
    2254:	d8c02e15 	stw	r3,184(sp)
    2258:	0039883a 	mov	fp,zero
    225c:	003e3506 	br	1b34 <__alt_data_end+0xfffcfb34>
    2260:	d9002d17 	ldw	r4,180(sp)
    2264:	d9801e04 	addi	r6,sp,120
    2268:	b80b883a 	mov	r5,r23
    226c:	0007e240 	call	7e24 <__sprint_r>
    2270:	1039f81e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2274:	d8c02017 	ldw	r3,128(sp)
    2278:	da000404 	addi	r8,sp,16
    227c:	003cd006 	br	15c0 <__alt_data_end+0xfffcf5c0>
    2280:	8009883a 	mov	r4,r16
    2284:	df003d15 	stw	fp,244(sp)
    2288:	00005ac0 	call	5ac <strlen>
    228c:	d8802b15 	stw	r2,172(sp)
    2290:	da003d17 	ldw	r8,244(sp)
    2294:	103c200e 	bge	r2,zero,1318 <__alt_data_end+0xfffcf318>
    2298:	0005883a 	mov	r2,zero
    229c:	003c1e06 	br	1318 <__alt_data_end+0xfffcf318>
    22a0:	d9002d17 	ldw	r4,180(sp)
    22a4:	d9801e04 	addi	r6,sp,120
    22a8:	b80b883a 	mov	r5,r23
    22ac:	0007e240 	call	7e24 <__sprint_r>
    22b0:	1039e81e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    22b4:	d8c02017 	ldw	r3,128(sp)
    22b8:	d8801f17 	ldw	r2,124(sp)
    22bc:	da000404 	addi	r8,sp,16
    22c0:	d9403317 	ldw	r5,204(sp)
    22c4:	10800044 	addi	r2,r2,1
    22c8:	44000015 	stw	r16,0(r8)
    22cc:	28c7883a 	add	r3,r5,r3
    22d0:	003b5b06 	br	1040 <__alt_data_end+0xfffcf040>
    22d4:	01000074 	movhi	r4,1
    22d8:	210fea84 	addi	r4,r4,16298
    22dc:	d9003515 	stw	r4,212(sp)
    22e0:	003af206 	br	eac <__alt_data_end+0xfffceeac>
    22e4:	013fffc4 	movi	r4,-1
    22e8:	003a0806 	br	b0c <__alt_data_end+0xfffceb0c>
    22ec:	0023883a 	mov	r17,zero
    22f0:	003d9d06 	br	1968 <__alt_data_end+0xfffcf968>
    22f4:	d9002d17 	ldw	r4,180(sp)
    22f8:	d9801e04 	addi	r6,sp,120
    22fc:	b80b883a 	mov	r5,r23
    2300:	0007e240 	call	7e24 <__sprint_r>
    2304:	1039d31e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2308:	d8c02017 	ldw	r3,128(sp)
    230c:	da000404 	addi	r8,sp,16
    2310:	003d9406 	br	1964 <__alt_data_end+0xfffcf964>
    2314:	01000074 	movhi	r4,1
    2318:	210fe684 	addi	r4,r4,16282
    231c:	d9002c15 	stw	r4,176(sp)
    2320:	d9002c17 	ldw	r4,176(sp)
    2324:	1c47883a 	add	r3,r3,r17
    2328:	10800044 	addi	r2,r2,1
    232c:	41000015 	stw	r4,0(r8)
    2330:	44400115 	stw	r17,4(r8)
    2334:	d8c02015 	stw	r3,128(sp)
    2338:	d8801f15 	stw	r2,124(sp)
    233c:	010001c4 	movi	r4,7
    2340:	20bfd716 	blt	r4,r2,22a0 <__alt_data_end+0xfffd02a0>
    2344:	42000204 	addi	r8,r8,8
    2348:	003fdd06 	br	22c0 <__alt_data_end+0xfffd02c0>
    234c:	d9002d17 	ldw	r4,180(sp)
    2350:	d9801e04 	addi	r6,sp,120
    2354:	b80b883a 	mov	r5,r23
    2358:	0007e240 	call	7e24 <__sprint_r>
    235c:	1039bd1e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2360:	d8802617 	ldw	r2,152(sp)
    2364:	d8c02017 	ldw	r3,128(sp)
    2368:	da000404 	addi	r8,sp,16
    236c:	003e1006 	br	1bb0 <__alt_data_end+0xfffcfbb0>
    2370:	00800044 	movi	r2,1
    2374:	10803fcc 	andi	r2,r2,255
    2378:	00c00044 	movi	r3,1
    237c:	10fa0d26 	beq	r2,r3,bb4 <__alt_data_end+0xfffcebb4>
    2380:	00c00084 	movi	r3,2
    2384:	10fbaf26 	beq	r2,r3,1244 <__alt_data_end+0xfffcf244>
    2388:	003a6d06 	br	d40 <__alt_data_end+0xfffced40>
    238c:	01000074 	movhi	r4,1
    2390:	210fea84 	addi	r4,r4,16298
    2394:	d9003515 	stw	r4,212(sp)
    2398:	003b5406 	br	10ec <__alt_data_end+0xfffcf0ec>
    239c:	d8802a17 	ldw	r2,168(sp)
    23a0:	00c00184 	movi	r3,6
    23a4:	1880012e 	bgeu	r3,r2,23ac <___vfprintf_internal_r+0x1d68>
    23a8:	1805883a 	mov	r2,r3
    23ac:	d8802b15 	stw	r2,172(sp)
    23b0:	1000ef16 	blt	r2,zero,2770 <___vfprintf_internal_r+0x212c>
    23b4:	04000074 	movhi	r16,1
    23b8:	d8802915 	stw	r2,164(sp)
    23bc:	dcc02e15 	stw	r19,184(sp)
    23c0:	d8002a15 	stw	zero,168(sp)
    23c4:	d8003215 	stw	zero,200(sp)
    23c8:	840fe404 	addi	r16,r16,16272
    23cc:	0039883a 	mov	fp,zero
    23d0:	003a8006 	br	dd4 <__alt_data_end+0xfffcedd4>
    23d4:	0021883a 	mov	r16,zero
    23d8:	003e0706 	br	1bf8 <__alt_data_end+0xfffcfbf8>
    23dc:	d9002d17 	ldw	r4,180(sp)
    23e0:	d9801e04 	addi	r6,sp,120
    23e4:	b80b883a 	mov	r5,r23
    23e8:	0007e240 	call	7e24 <__sprint_r>
    23ec:	1039991e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    23f0:	d8802617 	ldw	r2,152(sp)
    23f4:	d9403317 	ldw	r5,204(sp)
    23f8:	d8c02017 	ldw	r3,128(sp)
    23fc:	da000404 	addi	r8,sp,16
    2400:	2885c83a 	sub	r2,r5,r2
    2404:	003dfb06 	br	1bf4 <__alt_data_end+0xfffcfbf4>
    2408:	9080004c 	andi	r2,r18,1
    240c:	103e8f1e 	bne	r2,zero,1e4c <__alt_data_end+0xfffcfe4c>
    2410:	d8802117 	ldw	r2,132(sp)
    2414:	003e9e06 	br	1e90 <__alt_data_end+0xfffcfe90>
    2418:	1025883a 	mov	r18,r2
    241c:	0039883a 	mov	fp,zero
    2420:	00800084 	movi	r2,2
    2424:	003fd306 	br	2374 <__alt_data_end+0xfffd0374>
    2428:	07000b44 	movi	fp,45
    242c:	df002785 	stb	fp,158(sp)
    2430:	003a1b06 	br	ca0 <__alt_data_end+0xfffceca0>
    2434:	00c00b44 	movi	r3,45
    2438:	d8c02785 	stb	r3,158(sp)
    243c:	d8802915 	stw	r2,164(sp)
    2440:	dc802c17 	ldw	r18,176(sp)
    2444:	d8002a15 	stw	zero,168(sp)
    2448:	07000b44 	movi	fp,45
    244c:	003a5e06 	br	dc8 <__alt_data_end+0xfffcedc8>
    2450:	04000074 	movhi	r16,1
    2454:	840fd904 	addi	r16,r16,16228
    2458:	003f4706 	br	2178 <__alt_data_end+0xfffd0178>
    245c:	d9002e17 	ldw	r4,184(sp)
    2460:	d9402f17 	ldw	r5,188(sp)
    2464:	20800017 	ldw	r2,0(r4)
    2468:	21000104 	addi	r4,r4,4
    246c:	d9002e15 	stw	r4,184(sp)
    2470:	11400015 	stw	r5,0(r2)
    2474:	0038ab06 	br	724 <__alt_data_end+0xfffce724>
    2478:	dd802617 	ldw	r22,152(sp)
    247c:	00bfff44 	movi	r2,-3
    2480:	b0801c16 	blt	r22,r2,24f4 <___vfprintf_internal_r+0x1eb0>
    2484:	d9402a17 	ldw	r5,168(sp)
    2488:	2d801a16 	blt	r5,r22,24f4 <___vfprintf_internal_r+0x1eb0>
    248c:	dd803215 	stw	r22,200(sp)
    2490:	003e8906 	br	1eb8 <__alt_data_end+0xfffcfeb8>
    2494:	01000074 	movhi	r4,1
    2498:	210fe684 	addi	r4,r4,16282
    249c:	d9002c15 	stw	r4,176(sp)
    24a0:	003c9106 	br	16e8 <__alt_data_end+0xfffcf6e8>
    24a4:	e005883a 	mov	r2,fp
    24a8:	003e7906 	br	1e90 <__alt_data_end+0xfffcfe90>
    24ac:	d9002a17 	ldw	r4,168(sp)
    24b0:	df002783 	ldbu	fp,158(sp)
    24b4:	dcc02e15 	stw	r19,184(sp)
    24b8:	d9002915 	stw	r4,164(sp)
    24bc:	d9002b15 	stw	r4,172(sp)
    24c0:	d8002a15 	stw	zero,168(sp)
    24c4:	d8003215 	stw	zero,200(sp)
    24c8:	003a3b06 	br	db8 <__alt_data_end+0xfffcedb8>
    24cc:	9080004c 	andi	r2,r18,1
    24d0:	0039883a 	mov	fp,zero
    24d4:	10000426 	beq	r2,zero,24e8 <___vfprintf_internal_r+0x1ea4>
    24d8:	00800c04 	movi	r2,48
    24dc:	dc001dc4 	addi	r16,sp,119
    24e0:	d8801dc5 	stb	r2,119(sp)
    24e4:	003b6406 	br	1278 <__alt_data_end+0xfffcf278>
    24e8:	d8002b15 	stw	zero,172(sp)
    24ec:	dc001e04 	addi	r16,sp,120
    24f0:	003a2b06 	br	da0 <__alt_data_end+0xfffceda0>
    24f4:	8c7fff84 	addi	r17,r17,-2
    24f8:	b5bfffc4 	addi	r22,r22,-1
    24fc:	dd802615 	stw	r22,152(sp)
    2500:	dc4022c5 	stb	r17,139(sp)
    2504:	b000bf16 	blt	r22,zero,2804 <___vfprintf_internal_r+0x21c0>
    2508:	00800ac4 	movi	r2,43
    250c:	d8802305 	stb	r2,140(sp)
    2510:	00800244 	movi	r2,9
    2514:	15807016 	blt	r2,r22,26d8 <___vfprintf_internal_r+0x2094>
    2518:	00800c04 	movi	r2,48
    251c:	b5800c04 	addi	r22,r22,48
    2520:	d8802345 	stb	r2,141(sp)
    2524:	dd802385 	stb	r22,142(sp)
    2528:	d88023c4 	addi	r2,sp,143
    252c:	df0022c4 	addi	fp,sp,139
    2530:	d8c03317 	ldw	r3,204(sp)
    2534:	1739c83a 	sub	fp,r2,fp
    2538:	d9003317 	ldw	r4,204(sp)
    253c:	e0c7883a 	add	r3,fp,r3
    2540:	df003a15 	stw	fp,232(sp)
    2544:	d8c02b15 	stw	r3,172(sp)
    2548:	00800044 	movi	r2,1
    254c:	1100b30e 	bge	r2,r4,281c <___vfprintf_internal_r+0x21d8>
    2550:	d8c02b17 	ldw	r3,172(sp)
    2554:	18c00044 	addi	r3,r3,1
    2558:	d8c02b15 	stw	r3,172(sp)
    255c:	1805883a 	mov	r2,r3
    2560:	1800ac16 	blt	r3,zero,2814 <___vfprintf_internal_r+0x21d0>
    2564:	d8003215 	stw	zero,200(sp)
    2568:	003e5d06 	br	1ee0 <__alt_data_end+0xfffcfee0>
    256c:	d9002d17 	ldw	r4,180(sp)
    2570:	d9801e04 	addi	r6,sp,120
    2574:	b80b883a 	mov	r5,r23
    2578:	0007e240 	call	7e24 <__sprint_r>
    257c:	1039351e 	bne	r2,zero,a54 <__alt_data_end+0xfffcea54>
    2580:	dc402617 	ldw	r17,152(sp)
    2584:	d8c02017 	ldw	r3,128(sp)
    2588:	d8801f17 	ldw	r2,124(sp)
    258c:	da000404 	addi	r8,sp,16
    2590:	003ed606 	br	20ec <__alt_data_end+0xfffd00ec>
    2594:	182b883a 	mov	r21,r3
    2598:	d8002a15 	stw	zero,168(sp)
    259c:	00388c06 	br	7d0 <__alt_data_end+0xfffce7d0>
    25a0:	d8802a17 	ldw	r2,168(sp)
    25a4:	103e071e 	bne	r2,zero,1dc4 <__alt_data_end+0xfffcfdc4>
    25a8:	dc002a15 	stw	r16,168(sp)
    25ac:	003e0506 	br	1dc4 <__alt_data_end+0xfffcfdc4>
    25b0:	d9002a17 	ldw	r4,168(sp)
    25b4:	20c00044 	addi	r3,r4,1
    25b8:	003e0f06 	br	1df8 <__alt_data_end+0xfffcfdf8>
    25bc:	01400184 	movi	r5,6
    25c0:	d9402a15 	stw	r5,168(sp)
    25c4:	003dff06 	br	1dc4 <__alt_data_end+0xfffcfdc4>
    25c8:	d8802104 	addi	r2,sp,132
    25cc:	d8800315 	stw	r2,12(sp)
    25d0:	d8802504 	addi	r2,sp,148
    25d4:	d8800215 	stw	r2,8(sp)
    25d8:	d8802604 	addi	r2,sp,152
    25dc:	d8800115 	stw	r2,4(sp)
    25e0:	d8802a17 	ldw	r2,168(sp)
    25e4:	d9403617 	ldw	r5,216(sp)
    25e8:	d9002d17 	ldw	r4,180(sp)
    25ec:	d8800015 	stw	r2,0(sp)
    25f0:	01c000c4 	movi	r7,3
    25f4:	980d883a 	mov	r6,r19
    25f8:	da003d15 	stw	r8,244(sp)
    25fc:	0002d740 	call	2d74 <_dtoa_r>
    2600:	d8c02a17 	ldw	r3,168(sp)
    2604:	da003d17 	ldw	r8,244(sp)
    2608:	1021883a 	mov	r16,r2
    260c:	10f9883a 	add	fp,r2,r3
    2610:	81000007 	ldb	r4,0(r16)
    2614:	00800c04 	movi	r2,48
    2618:	20805e26 	beq	r4,r2,2794 <___vfprintf_internal_r+0x2150>
    261c:	d8c02617 	ldw	r3,152(sp)
    2620:	e0f9883a 	add	fp,fp,r3
    2624:	003e0a06 	br	1e50 <__alt_data_end+0xfffcfe50>
    2628:	00c00b44 	movi	r3,45
    262c:	24e0003c 	xorhi	r19,r4,32768
    2630:	d8c02905 	stb	r3,164(sp)
    2634:	003de906 	br	1ddc <__alt_data_end+0xfffcfddc>
    2638:	d8c03217 	ldw	r3,200(sp)
    263c:	00c07a0e 	bge	zero,r3,2828 <___vfprintf_internal_r+0x21e4>
    2640:	00800044 	movi	r2,1
    2644:	d9003317 	ldw	r4,204(sp)
    2648:	1105883a 	add	r2,r2,r4
    264c:	d8802b15 	stw	r2,172(sp)
    2650:	10004e16 	blt	r2,zero,278c <___vfprintf_internal_r+0x2148>
    2654:	044019c4 	movi	r17,103
    2658:	003e2106 	br	1ee0 <__alt_data_end+0xfffcfee0>
    265c:	d9002a17 	ldw	r4,168(sp)
    2660:	d8802104 	addi	r2,sp,132
    2664:	d8800315 	stw	r2,12(sp)
    2668:	d9000015 	stw	r4,0(sp)
    266c:	d8802504 	addi	r2,sp,148
    2670:	d9403617 	ldw	r5,216(sp)
    2674:	d9002d17 	ldw	r4,180(sp)
    2678:	d8800215 	stw	r2,8(sp)
    267c:	d8802604 	addi	r2,sp,152
    2680:	d8800115 	stw	r2,4(sp)
    2684:	01c000c4 	movi	r7,3
    2688:	980d883a 	mov	r6,r19
    268c:	da003d15 	stw	r8,244(sp)
    2690:	0002d740 	call	2d74 <_dtoa_r>
    2694:	d8c02a17 	ldw	r3,168(sp)
    2698:	da003d17 	ldw	r8,244(sp)
    269c:	1021883a 	mov	r16,r2
    26a0:	00801184 	movi	r2,70
    26a4:	80f9883a 	add	fp,r16,r3
    26a8:	88bfd926 	beq	r17,r2,2610 <__alt_data_end+0xfffd0610>
    26ac:	003de806 	br	1e50 <__alt_data_end+0xfffcfe50>
    26b0:	d9002a17 	ldw	r4,168(sp)
    26b4:	00c04d0e 	bge	zero,r3,27ec <___vfprintf_internal_r+0x21a8>
    26b8:	2000441e 	bne	r4,zero,27cc <___vfprintf_internal_r+0x2188>
    26bc:	9480004c 	andi	r18,r18,1
    26c0:	9000421e 	bne	r18,zero,27cc <___vfprintf_internal_r+0x2188>
    26c4:	1805883a 	mov	r2,r3
    26c8:	18006f16 	blt	r3,zero,2888 <___vfprintf_internal_r+0x2244>
    26cc:	d8c03217 	ldw	r3,200(sp)
    26d0:	d8c02b15 	stw	r3,172(sp)
    26d4:	003e0206 	br	1ee0 <__alt_data_end+0xfffcfee0>
    26d8:	df0022c4 	addi	fp,sp,139
    26dc:	dc002a15 	stw	r16,168(sp)
    26e0:	4027883a 	mov	r19,r8
    26e4:	e021883a 	mov	r16,fp
    26e8:	b009883a 	mov	r4,r22
    26ec:	01400284 	movi	r5,10
    26f0:	000a9b00 	call	a9b0 <__modsi3>
    26f4:	10800c04 	addi	r2,r2,48
    26f8:	843fffc4 	addi	r16,r16,-1
    26fc:	b009883a 	mov	r4,r22
    2700:	01400284 	movi	r5,10
    2704:	80800005 	stb	r2,0(r16)
    2708:	000a92c0 	call	a92c <__divsi3>
    270c:	102d883a 	mov	r22,r2
    2710:	00800244 	movi	r2,9
    2714:	15bff416 	blt	r2,r22,26e8 <__alt_data_end+0xfffd06e8>
    2718:	9811883a 	mov	r8,r19
    271c:	b0800c04 	addi	r2,r22,48
    2720:	8027883a 	mov	r19,r16
    2724:	997fffc4 	addi	r5,r19,-1
    2728:	98bfffc5 	stb	r2,-1(r19)
    272c:	dc002a17 	ldw	r16,168(sp)
    2730:	2f006d2e 	bgeu	r5,fp,28e8 <___vfprintf_internal_r+0x22a4>
    2734:	d9c02384 	addi	r7,sp,142
    2738:	3ccfc83a 	sub	r7,r7,r19
    273c:	d9002344 	addi	r4,sp,141
    2740:	e1cf883a 	add	r7,fp,r7
    2744:	00000106 	br	274c <___vfprintf_internal_r+0x2108>
    2748:	28800003 	ldbu	r2,0(r5)
    274c:	20800005 	stb	r2,0(r4)
    2750:	21000044 	addi	r4,r4,1
    2754:	29400044 	addi	r5,r5,1
    2758:	393ffb1e 	bne	r7,r4,2748 <__alt_data_end+0xfffd0748>
    275c:	d8802304 	addi	r2,sp,140
    2760:	14c5c83a 	sub	r2,r2,r19
    2764:	d8c02344 	addi	r3,sp,141
    2768:	1885883a 	add	r2,r3,r2
    276c:	003f7006 	br	2530 <__alt_data_end+0xfffd0530>
    2770:	0005883a 	mov	r2,zero
    2774:	003f0f06 	br	23b4 <__alt_data_end+0xfffd03b4>
    2778:	d8c03217 	ldw	r3,200(sp)
    277c:	18c00044 	addi	r3,r3,1
    2780:	d8c02b15 	stw	r3,172(sp)
    2784:	1805883a 	mov	r2,r3
    2788:	183fb20e 	bge	r3,zero,2654 <__alt_data_end+0xfffd0654>
    278c:	0005883a 	mov	r2,zero
    2790:	003fb006 	br	2654 <__alt_data_end+0xfffd0654>
    2794:	d9003617 	ldw	r4,216(sp)
    2798:	000d883a 	mov	r6,zero
    279c:	000f883a 	mov	r7,zero
    27a0:	980b883a 	mov	r5,r19
    27a4:	d8c03c15 	stw	r3,240(sp)
    27a8:	da003d15 	stw	r8,244(sp)
    27ac:	000bd840 	call	bd84 <__eqdf2>
    27b0:	d8c03c17 	ldw	r3,240(sp)
    27b4:	da003d17 	ldw	r8,244(sp)
    27b8:	103f9826 	beq	r2,zero,261c <__alt_data_end+0xfffd061c>
    27bc:	00800044 	movi	r2,1
    27c0:	10c7c83a 	sub	r3,r2,r3
    27c4:	d8c02615 	stw	r3,152(sp)
    27c8:	003f9506 	br	2620 <__alt_data_end+0xfffd0620>
    27cc:	d9002a17 	ldw	r4,168(sp)
    27d0:	d8c03217 	ldw	r3,200(sp)
    27d4:	20800044 	addi	r2,r4,1
    27d8:	1885883a 	add	r2,r3,r2
    27dc:	d8802b15 	stw	r2,172(sp)
    27e0:	103dbf0e 	bge	r2,zero,1ee0 <__alt_data_end+0xfffcfee0>
    27e4:	0005883a 	mov	r2,zero
    27e8:	003dbd06 	br	1ee0 <__alt_data_end+0xfffcfee0>
    27ec:	2000201e 	bne	r4,zero,2870 <___vfprintf_internal_r+0x222c>
    27f0:	9480004c 	andi	r18,r18,1
    27f4:	90001e1e 	bne	r18,zero,2870 <___vfprintf_internal_r+0x222c>
    27f8:	00800044 	movi	r2,1
    27fc:	d8802b15 	stw	r2,172(sp)
    2800:	003db706 	br	1ee0 <__alt_data_end+0xfffcfee0>
    2804:	00800b44 	movi	r2,45
    2808:	05adc83a 	sub	r22,zero,r22
    280c:	d8802305 	stb	r2,140(sp)
    2810:	003f3f06 	br	2510 <__alt_data_end+0xfffd0510>
    2814:	0005883a 	mov	r2,zero
    2818:	003f5206 	br	2564 <__alt_data_end+0xfffd0564>
    281c:	90a4703a 	and	r18,r18,r2
    2820:	903f4e26 	beq	r18,zero,255c <__alt_data_end+0xfffd055c>
    2824:	003f4a06 	br	2550 <__alt_data_end+0xfffd0550>
    2828:	00800084 	movi	r2,2
    282c:	10c5c83a 	sub	r2,r2,r3
    2830:	003f8406 	br	2644 <__alt_data_end+0xfffd0644>
    2834:	d9402e17 	ldw	r5,184(sp)
    2838:	d9002e17 	ldw	r4,184(sp)
    283c:	ac400043 	ldbu	r17,1(r21)
    2840:	29400017 	ldw	r5,0(r5)
    2844:	20800104 	addi	r2,r4,4
    2848:	d8802e15 	stw	r2,184(sp)
    284c:	d9402a15 	stw	r5,168(sp)
    2850:	182b883a 	mov	r21,r3
    2854:	283e7b0e 	bge	r5,zero,2244 <__alt_data_end+0xfffd0244>
    2858:	8c403fcc 	andi	r17,r17,255
    285c:	017fffc4 	movi	r5,-1
    2860:	8c40201c 	xori	r17,r17,128
    2864:	d9402a15 	stw	r5,168(sp)
    2868:	8c7fe004 	addi	r17,r17,-128
    286c:	0037d706 	br	7cc <__alt_data_end+0xfffce7cc>
    2870:	d8c02a17 	ldw	r3,168(sp)
    2874:	18c00084 	addi	r3,r3,2
    2878:	d8c02b15 	stw	r3,172(sp)
    287c:	1805883a 	mov	r2,r3
    2880:	183d970e 	bge	r3,zero,1ee0 <__alt_data_end+0xfffcfee0>
    2884:	003fd706 	br	27e4 <__alt_data_end+0xfffd07e4>
    2888:	0005883a 	mov	r2,zero
    288c:	003f8f06 	br	26cc <__alt_data_end+0xfffd06cc>
    2890:	9080004c 	andi	r2,r18,1
    2894:	103f821e 	bne	r2,zero,26a0 <__alt_data_end+0xfffd06a0>
    2898:	d8802117 	ldw	r2,132(sp)
    289c:	1405c83a 	sub	r2,r2,r16
    28a0:	d8803315 	stw	r2,204(sp)
    28a4:	b47ef426 	beq	r22,r17,2478 <__alt_data_end+0xfffd0478>
    28a8:	dd802617 	ldw	r22,152(sp)
    28ac:	003f1206 	br	24f8 <__alt_data_end+0xfffd04f8>
    28b0:	d8c02b03 	ldbu	r3,172(sp)
    28b4:	d8c02785 	stb	r3,158(sp)
    28b8:	0038df06 	br	c38 <__alt_data_end+0xfffcec38>
    28bc:	d8c02b03 	ldbu	r3,172(sp)
    28c0:	d8c02785 	stb	r3,158(sp)
    28c4:	0038aa06 	br	b70 <__alt_data_end+0xfffceb70>
    28c8:	d8c02b03 	ldbu	r3,172(sp)
    28cc:	d8c02785 	stb	r3,158(sp)
    28d0:	003a4306 	br	11e0 <__alt_data_end+0xfffcf1e0>
    28d4:	d8c02b03 	ldbu	r3,172(sp)
    28d8:	d8c02785 	stb	r3,158(sp)
    28dc:	003af506 	br	14b4 <__alt_data_end+0xfffcf4b4>
    28e0:	0005883a 	mov	r2,zero
    28e4:	003d7b06 	br	1ed4 <__alt_data_end+0xfffcfed4>
    28e8:	d8802344 	addi	r2,sp,141
    28ec:	003f1006 	br	2530 <__alt_data_end+0xfffd0530>
    28f0:	d8c02b03 	ldbu	r3,172(sp)
    28f4:	d8c02785 	stb	r3,158(sp)
    28f8:	0038fd06 	br	cf0 <__alt_data_end+0xfffcecf0>
    28fc:	d8c02b03 	ldbu	r3,172(sp)
    2900:	d8c02785 	stb	r3,158(sp)
    2904:	003a9706 	br	1364 <__alt_data_end+0xfffcf364>
    2908:	d8c02b03 	ldbu	r3,172(sp)
    290c:	d8c02785 	stb	r3,158(sp)
    2910:	003a1806 	br	1174 <__alt_data_end+0xfffcf174>
    2914:	d8c02b03 	ldbu	r3,172(sp)
    2918:	d8c02785 	stb	r3,158(sp)
    291c:	003abe06 	br	1418 <__alt_data_end+0xfffcf418>

00002920 <__vfprintf_internal>:
    2920:	00800074 	movhi	r2,1
    2924:	10974b04 	addi	r2,r2,23852
    2928:	300f883a 	mov	r7,r6
    292c:	280d883a 	mov	r6,r5
    2930:	200b883a 	mov	r5,r4
    2934:	11000017 	ldw	r4,0(r2)
    2938:	00006441 	jmpi	644 <___vfprintf_internal_r>

0000293c <__sbprintf>:
    293c:	2880030b 	ldhu	r2,12(r5)
    2940:	2ac01917 	ldw	r11,100(r5)
    2944:	2a80038b 	ldhu	r10,14(r5)
    2948:	2a400717 	ldw	r9,28(r5)
    294c:	2a000917 	ldw	r8,36(r5)
    2950:	defee204 	addi	sp,sp,-1144
    2954:	00c10004 	movi	r3,1024
    2958:	dc011a15 	stw	r16,1128(sp)
    295c:	10bfff4c 	andi	r2,r2,65533
    2960:	2821883a 	mov	r16,r5
    2964:	d8cb883a 	add	r5,sp,r3
    2968:	dc811c15 	stw	r18,1136(sp)
    296c:	dc411b15 	stw	r17,1132(sp)
    2970:	dfc11d15 	stw	ra,1140(sp)
    2974:	2025883a 	mov	r18,r4
    2978:	d881030d 	sth	r2,1036(sp)
    297c:	dac11915 	stw	r11,1124(sp)
    2980:	da81038d 	sth	r10,1038(sp)
    2984:	da410715 	stw	r9,1052(sp)
    2988:	da010915 	stw	r8,1060(sp)
    298c:	dec10015 	stw	sp,1024(sp)
    2990:	dec10415 	stw	sp,1040(sp)
    2994:	d8c10215 	stw	r3,1032(sp)
    2998:	d8c10515 	stw	r3,1044(sp)
    299c:	d8010615 	stw	zero,1048(sp)
    29a0:	00006440 	call	644 <___vfprintf_internal_r>
    29a4:	1023883a 	mov	r17,r2
    29a8:	10000416 	blt	r2,zero,29bc <__sbprintf+0x80>
    29ac:	d9410004 	addi	r5,sp,1024
    29b0:	9009883a 	mov	r4,r18
    29b4:	00046180 	call	4618 <_fflush_r>
    29b8:	10000d1e 	bne	r2,zero,29f0 <__sbprintf+0xb4>
    29bc:	d881030b 	ldhu	r2,1036(sp)
    29c0:	1080100c 	andi	r2,r2,64
    29c4:	10000326 	beq	r2,zero,29d4 <__sbprintf+0x98>
    29c8:	8080030b 	ldhu	r2,12(r16)
    29cc:	10801014 	ori	r2,r2,64
    29d0:	8080030d 	sth	r2,12(r16)
    29d4:	8805883a 	mov	r2,r17
    29d8:	dfc11d17 	ldw	ra,1140(sp)
    29dc:	dc811c17 	ldw	r18,1136(sp)
    29e0:	dc411b17 	ldw	r17,1132(sp)
    29e4:	dc011a17 	ldw	r16,1128(sp)
    29e8:	dec11e04 	addi	sp,sp,1144
    29ec:	f800283a 	ret
    29f0:	047fffc4 	movi	r17,-1
    29f4:	003ff106 	br	29bc <__alt_data_end+0xfffd09bc>

000029f8 <__swsetup_r>:
    29f8:	00800074 	movhi	r2,1
    29fc:	defffd04 	addi	sp,sp,-12
    2a00:	10974b04 	addi	r2,r2,23852
    2a04:	dc400115 	stw	r17,4(sp)
    2a08:	2023883a 	mov	r17,r4
    2a0c:	11000017 	ldw	r4,0(r2)
    2a10:	dc000015 	stw	r16,0(sp)
    2a14:	dfc00215 	stw	ra,8(sp)
    2a18:	2821883a 	mov	r16,r5
    2a1c:	20000226 	beq	r4,zero,2a28 <__swsetup_r+0x30>
    2a20:	20800e17 	ldw	r2,56(r4)
    2a24:	10003126 	beq	r2,zero,2aec <__swsetup_r+0xf4>
    2a28:	8080030b 	ldhu	r2,12(r16)
    2a2c:	10c0020c 	andi	r3,r2,8
    2a30:	1009883a 	mov	r4,r2
    2a34:	18000f26 	beq	r3,zero,2a74 <__swsetup_r+0x7c>
    2a38:	80c00417 	ldw	r3,16(r16)
    2a3c:	18001526 	beq	r3,zero,2a94 <__swsetup_r+0x9c>
    2a40:	1100004c 	andi	r4,r2,1
    2a44:	20001c1e 	bne	r4,zero,2ab8 <__swsetup_r+0xc0>
    2a48:	1080008c 	andi	r2,r2,2
    2a4c:	1000291e 	bne	r2,zero,2af4 <__swsetup_r+0xfc>
    2a50:	80800517 	ldw	r2,20(r16)
    2a54:	80800215 	stw	r2,8(r16)
    2a58:	18001c26 	beq	r3,zero,2acc <__swsetup_r+0xd4>
    2a5c:	0005883a 	mov	r2,zero
    2a60:	dfc00217 	ldw	ra,8(sp)
    2a64:	dc400117 	ldw	r17,4(sp)
    2a68:	dc000017 	ldw	r16,0(sp)
    2a6c:	dec00304 	addi	sp,sp,12
    2a70:	f800283a 	ret
    2a74:	2080040c 	andi	r2,r4,16
    2a78:	10002e26 	beq	r2,zero,2b34 <__swsetup_r+0x13c>
    2a7c:	2080010c 	andi	r2,r4,4
    2a80:	10001e1e 	bne	r2,zero,2afc <__swsetup_r+0x104>
    2a84:	80c00417 	ldw	r3,16(r16)
    2a88:	20800214 	ori	r2,r4,8
    2a8c:	8080030d 	sth	r2,12(r16)
    2a90:	183feb1e 	bne	r3,zero,2a40 <__alt_data_end+0xfffd0a40>
    2a94:	1100a00c 	andi	r4,r2,640
    2a98:	01408004 	movi	r5,512
    2a9c:	217fe826 	beq	r4,r5,2a40 <__alt_data_end+0xfffd0a40>
    2aa0:	800b883a 	mov	r5,r16
    2aa4:	8809883a 	mov	r4,r17
    2aa8:	00055b40 	call	55b4 <__smakebuf_r>
    2aac:	8080030b 	ldhu	r2,12(r16)
    2ab0:	80c00417 	ldw	r3,16(r16)
    2ab4:	003fe206 	br	2a40 <__alt_data_end+0xfffd0a40>
    2ab8:	80800517 	ldw	r2,20(r16)
    2abc:	80000215 	stw	zero,8(r16)
    2ac0:	0085c83a 	sub	r2,zero,r2
    2ac4:	80800615 	stw	r2,24(r16)
    2ac8:	183fe41e 	bne	r3,zero,2a5c <__alt_data_end+0xfffd0a5c>
    2acc:	80c0030b 	ldhu	r3,12(r16)
    2ad0:	0005883a 	mov	r2,zero
    2ad4:	1900200c 	andi	r4,r3,128
    2ad8:	203fe126 	beq	r4,zero,2a60 <__alt_data_end+0xfffd0a60>
    2adc:	18c01014 	ori	r3,r3,64
    2ae0:	80c0030d 	sth	r3,12(r16)
    2ae4:	00bfffc4 	movi	r2,-1
    2ae8:	003fdd06 	br	2a60 <__alt_data_end+0xfffd0a60>
    2aec:	0004a040 	call	4a04 <__sinit>
    2af0:	003fcd06 	br	2a28 <__alt_data_end+0xfffd0a28>
    2af4:	0005883a 	mov	r2,zero
    2af8:	003fd606 	br	2a54 <__alt_data_end+0xfffd0a54>
    2afc:	81400c17 	ldw	r5,48(r16)
    2b00:	28000626 	beq	r5,zero,2b1c <__swsetup_r+0x124>
    2b04:	80801004 	addi	r2,r16,64
    2b08:	28800326 	beq	r5,r2,2b18 <__swsetup_r+0x120>
    2b0c:	8809883a 	mov	r4,r17
    2b10:	0004b780 	call	4b78 <_free_r>
    2b14:	8100030b 	ldhu	r4,12(r16)
    2b18:	80000c15 	stw	zero,48(r16)
    2b1c:	80c00417 	ldw	r3,16(r16)
    2b20:	00bff6c4 	movi	r2,-37
    2b24:	1108703a 	and	r4,r2,r4
    2b28:	80000115 	stw	zero,4(r16)
    2b2c:	80c00015 	stw	r3,0(r16)
    2b30:	003fd506 	br	2a88 <__alt_data_end+0xfffd0a88>
    2b34:	00800244 	movi	r2,9
    2b38:	88800015 	stw	r2,0(r17)
    2b3c:	20801014 	ori	r2,r4,64
    2b40:	8080030d 	sth	r2,12(r16)
    2b44:	00bfffc4 	movi	r2,-1
    2b48:	003fc506 	br	2a60 <__alt_data_end+0xfffd0a60>

00002b4c <quorem>:
    2b4c:	defff204 	addi	sp,sp,-56
    2b50:	ddc00b15 	stw	r23,44(sp)
    2b54:	20800417 	ldw	r2,16(r4)
    2b58:	2dc00417 	ldw	r23,16(r5)
    2b5c:	dfc00d15 	stw	ra,52(sp)
    2b60:	df000c15 	stw	fp,48(sp)
    2b64:	dd800a15 	stw	r22,40(sp)
    2b68:	dd400915 	stw	r21,36(sp)
    2b6c:	dd000815 	stw	r20,32(sp)
    2b70:	dcc00715 	stw	r19,28(sp)
    2b74:	dc800615 	stw	r18,24(sp)
    2b78:	dc400515 	stw	r17,20(sp)
    2b7c:	dc000415 	stw	r16,16(sp)
    2b80:	15c07a16 	blt	r2,r23,2d6c <quorem+0x220>
    2b84:	bdffffc4 	addi	r23,r23,-1
    2b88:	bde9883a 	add	r20,r23,r23
    2b8c:	28c00504 	addi	r3,r5,20
    2b90:	a529883a 	add	r20,r20,r20
    2b94:	1d39883a 	add	fp,r3,r20
    2b98:	24c00504 	addi	r19,r4,20
    2b9c:	d9400215 	stw	r5,8(sp)
    2ba0:	9d29883a 	add	r20,r19,r20
    2ba4:	e1400017 	ldw	r5,0(fp)
    2ba8:	d9000015 	stw	r4,0(sp)
    2bac:	a1000017 	ldw	r4,0(r20)
    2bb0:	29400044 	addi	r5,r5,1
    2bb4:	d8c00115 	stw	r3,4(sp)
    2bb8:	dd000315 	stw	r20,12(sp)
    2bbc:	000aa240 	call	aa24 <__udivsi3>
    2bc0:	1025883a 	mov	r18,r2
    2bc4:	10003026 	beq	r2,zero,2c88 <quorem+0x13c>
    2bc8:	dc400117 	ldw	r17,4(sp)
    2bcc:	9829883a 	mov	r20,r19
    2bd0:	002d883a 	mov	r22,zero
    2bd4:	0021883a 	mov	r16,zero
    2bd8:	8d400017 	ldw	r21,0(r17)
    2bdc:	900b883a 	mov	r5,r18
    2be0:	8c400104 	addi	r17,r17,4
    2be4:	a93fffcc 	andi	r4,r21,65535
    2be8:	000aae00 	call	aae0 <__mulsi3>
    2bec:	a808d43a 	srli	r4,r21,16
    2bf0:	900b883a 	mov	r5,r18
    2bf4:	15ad883a 	add	r22,r2,r22
    2bf8:	000aae00 	call	aae0 <__mulsi3>
    2bfc:	a1000017 	ldw	r4,0(r20)
    2c00:	b00cd43a 	srli	r6,r22,16
    2c04:	b0ffffcc 	andi	r3,r22,65535
    2c08:	217fffcc 	andi	r5,r4,65535
    2c0c:	2c21883a 	add	r16,r5,r16
    2c10:	80c7c83a 	sub	r3,r16,r3
    2c14:	2008d43a 	srli	r4,r4,16
    2c18:	1185883a 	add	r2,r2,r6
    2c1c:	1821d43a 	srai	r16,r3,16
    2c20:	117fffcc 	andi	r5,r2,65535
    2c24:	2149c83a 	sub	r4,r4,r5
    2c28:	2421883a 	add	r16,r4,r16
    2c2c:	8008943a 	slli	r4,r16,16
    2c30:	18ffffcc 	andi	r3,r3,65535
    2c34:	102cd43a 	srli	r22,r2,16
    2c38:	20c8b03a 	or	r4,r4,r3
    2c3c:	a1000015 	stw	r4,0(r20)
    2c40:	8021d43a 	srai	r16,r16,16
    2c44:	a5000104 	addi	r20,r20,4
    2c48:	e47fe32e 	bgeu	fp,r17,2bd8 <__alt_data_end+0xfffd0bd8>
    2c4c:	d8c00317 	ldw	r3,12(sp)
    2c50:	18800017 	ldw	r2,0(r3)
    2c54:	10000c1e 	bne	r2,zero,2c88 <quorem+0x13c>
    2c58:	18bfff04 	addi	r2,r3,-4
    2c5c:	9880082e 	bgeu	r19,r2,2c80 <quorem+0x134>
    2c60:	18ffff17 	ldw	r3,-4(r3)
    2c64:	18000326 	beq	r3,zero,2c74 <quorem+0x128>
    2c68:	00000506 	br	2c80 <quorem+0x134>
    2c6c:	10c00017 	ldw	r3,0(r2)
    2c70:	1800031e 	bne	r3,zero,2c80 <quorem+0x134>
    2c74:	10bfff04 	addi	r2,r2,-4
    2c78:	bdffffc4 	addi	r23,r23,-1
    2c7c:	98bffb36 	bltu	r19,r2,2c6c <__alt_data_end+0xfffd0c6c>
    2c80:	d8c00017 	ldw	r3,0(sp)
    2c84:	1dc00415 	stw	r23,16(r3)
    2c88:	d9400217 	ldw	r5,8(sp)
    2c8c:	d9000017 	ldw	r4,0(sp)
    2c90:	0006db00 	call	6db0 <__mcmp>
    2c94:	10002816 	blt	r2,zero,2d38 <quorem+0x1ec>
    2c98:	dc400117 	ldw	r17,4(sp)
    2c9c:	94800044 	addi	r18,r18,1
    2ca0:	980d883a 	mov	r6,r19
    2ca4:	0007883a 	mov	r3,zero
    2ca8:	31000017 	ldw	r4,0(r6)
    2cac:	89400017 	ldw	r5,0(r17)
    2cb0:	31800104 	addi	r6,r6,4
    2cb4:	20bfffcc 	andi	r2,r4,65535
    2cb8:	10c7883a 	add	r3,r2,r3
    2cbc:	28bfffcc 	andi	r2,r5,65535
    2cc0:	1885c83a 	sub	r2,r3,r2
    2cc4:	280ad43a 	srli	r5,r5,16
    2cc8:	2008d43a 	srli	r4,r4,16
    2ccc:	1007d43a 	srai	r3,r2,16
    2cd0:	10bfffcc 	andi	r2,r2,65535
    2cd4:	2149c83a 	sub	r4,r4,r5
    2cd8:	20c9883a 	add	r4,r4,r3
    2cdc:	200a943a 	slli	r5,r4,16
    2ce0:	8c400104 	addi	r17,r17,4
    2ce4:	2007d43a 	srai	r3,r4,16
    2ce8:	2884b03a 	or	r2,r5,r2
    2cec:	30bfff15 	stw	r2,-4(r6)
    2cf0:	e47fed2e 	bgeu	fp,r17,2ca8 <__alt_data_end+0xfffd0ca8>
    2cf4:	bdc5883a 	add	r2,r23,r23
    2cf8:	1085883a 	add	r2,r2,r2
    2cfc:	9887883a 	add	r3,r19,r2
    2d00:	18800017 	ldw	r2,0(r3)
    2d04:	10000c1e 	bne	r2,zero,2d38 <quorem+0x1ec>
    2d08:	18bfff04 	addi	r2,r3,-4
    2d0c:	9880082e 	bgeu	r19,r2,2d30 <quorem+0x1e4>
    2d10:	18ffff17 	ldw	r3,-4(r3)
    2d14:	18000326 	beq	r3,zero,2d24 <quorem+0x1d8>
    2d18:	00000506 	br	2d30 <quorem+0x1e4>
    2d1c:	10c00017 	ldw	r3,0(r2)
    2d20:	1800031e 	bne	r3,zero,2d30 <quorem+0x1e4>
    2d24:	10bfff04 	addi	r2,r2,-4
    2d28:	bdffffc4 	addi	r23,r23,-1
    2d2c:	98bffb36 	bltu	r19,r2,2d1c <__alt_data_end+0xfffd0d1c>
    2d30:	d8c00017 	ldw	r3,0(sp)
    2d34:	1dc00415 	stw	r23,16(r3)
    2d38:	9005883a 	mov	r2,r18
    2d3c:	dfc00d17 	ldw	ra,52(sp)
    2d40:	df000c17 	ldw	fp,48(sp)
    2d44:	ddc00b17 	ldw	r23,44(sp)
    2d48:	dd800a17 	ldw	r22,40(sp)
    2d4c:	dd400917 	ldw	r21,36(sp)
    2d50:	dd000817 	ldw	r20,32(sp)
    2d54:	dcc00717 	ldw	r19,28(sp)
    2d58:	dc800617 	ldw	r18,24(sp)
    2d5c:	dc400517 	ldw	r17,20(sp)
    2d60:	dc000417 	ldw	r16,16(sp)
    2d64:	dec00e04 	addi	sp,sp,56
    2d68:	f800283a 	ret
    2d6c:	0005883a 	mov	r2,zero
    2d70:	003ff206 	br	2d3c <__alt_data_end+0xfffd0d3c>

00002d74 <_dtoa_r>:
    2d74:	20801017 	ldw	r2,64(r4)
    2d78:	deffde04 	addi	sp,sp,-136
    2d7c:	df002015 	stw	fp,128(sp)
    2d80:	dcc01b15 	stw	r19,108(sp)
    2d84:	dc801a15 	stw	r18,104(sp)
    2d88:	dc401915 	stw	r17,100(sp)
    2d8c:	dc001815 	stw	r16,96(sp)
    2d90:	dfc02115 	stw	ra,132(sp)
    2d94:	ddc01f15 	stw	r23,124(sp)
    2d98:	dd801e15 	stw	r22,120(sp)
    2d9c:	dd401d15 	stw	r21,116(sp)
    2da0:	dd001c15 	stw	r20,112(sp)
    2da4:	d9c00315 	stw	r7,12(sp)
    2da8:	2039883a 	mov	fp,r4
    2dac:	3023883a 	mov	r17,r6
    2db0:	2825883a 	mov	r18,r5
    2db4:	dc002417 	ldw	r16,144(sp)
    2db8:	3027883a 	mov	r19,r6
    2dbc:	10000826 	beq	r2,zero,2de0 <_dtoa_r+0x6c>
    2dc0:	21801117 	ldw	r6,68(r4)
    2dc4:	00c00044 	movi	r3,1
    2dc8:	100b883a 	mov	r5,r2
    2dcc:	1986983a 	sll	r3,r3,r6
    2dd0:	11800115 	stw	r6,4(r2)
    2dd4:	10c00215 	stw	r3,8(r2)
    2dd8:	00064d40 	call	64d4 <_Bfree>
    2ddc:	e0001015 	stw	zero,64(fp)
    2de0:	88002e16 	blt	r17,zero,2e9c <_dtoa_r+0x128>
    2de4:	80000015 	stw	zero,0(r16)
    2de8:	889ffc2c 	andhi	r2,r17,32752
    2dec:	00dffc34 	movhi	r3,32752
    2df0:	10c01c26 	beq	r2,r3,2e64 <_dtoa_r+0xf0>
    2df4:	000d883a 	mov	r6,zero
    2df8:	000f883a 	mov	r7,zero
    2dfc:	9009883a 	mov	r4,r18
    2e00:	980b883a 	mov	r5,r19
    2e04:	000bd840 	call	bd84 <__eqdf2>
    2e08:	10002b1e 	bne	r2,zero,2eb8 <_dtoa_r+0x144>
    2e0c:	d9c02317 	ldw	r7,140(sp)
    2e10:	00800044 	movi	r2,1
    2e14:	38800015 	stw	r2,0(r7)
    2e18:	d8802517 	ldw	r2,148(sp)
    2e1c:	10019e26 	beq	r2,zero,3498 <_dtoa_r+0x724>
    2e20:	d8c02517 	ldw	r3,148(sp)
    2e24:	00800074 	movhi	r2,1
    2e28:	108fe644 	addi	r2,r2,16281
    2e2c:	18800015 	stw	r2,0(r3)
    2e30:	10bfffc4 	addi	r2,r2,-1
    2e34:	dfc02117 	ldw	ra,132(sp)
    2e38:	df002017 	ldw	fp,128(sp)
    2e3c:	ddc01f17 	ldw	r23,124(sp)
    2e40:	dd801e17 	ldw	r22,120(sp)
    2e44:	dd401d17 	ldw	r21,116(sp)
    2e48:	dd001c17 	ldw	r20,112(sp)
    2e4c:	dcc01b17 	ldw	r19,108(sp)
    2e50:	dc801a17 	ldw	r18,104(sp)
    2e54:	dc401917 	ldw	r17,100(sp)
    2e58:	dc001817 	ldw	r16,96(sp)
    2e5c:	dec02204 	addi	sp,sp,136
    2e60:	f800283a 	ret
    2e64:	d8c02317 	ldw	r3,140(sp)
    2e68:	0089c3c4 	movi	r2,9999
    2e6c:	18800015 	stw	r2,0(r3)
    2e70:	90017726 	beq	r18,zero,3450 <_dtoa_r+0x6dc>
    2e74:	00800074 	movhi	r2,1
    2e78:	108ff204 	addi	r2,r2,16328
    2e7c:	d9002517 	ldw	r4,148(sp)
    2e80:	203fec26 	beq	r4,zero,2e34 <__alt_data_end+0xfffd0e34>
    2e84:	10c000c7 	ldb	r3,3(r2)
    2e88:	1801781e 	bne	r3,zero,346c <_dtoa_r+0x6f8>
    2e8c:	10c000c4 	addi	r3,r2,3
    2e90:	d9802517 	ldw	r6,148(sp)
    2e94:	30c00015 	stw	r3,0(r6)
    2e98:	003fe606 	br	2e34 <__alt_data_end+0xfffd0e34>
    2e9c:	04e00034 	movhi	r19,32768
    2ea0:	9cffffc4 	addi	r19,r19,-1
    2ea4:	00800044 	movi	r2,1
    2ea8:	8ce6703a 	and	r19,r17,r19
    2eac:	80800015 	stw	r2,0(r16)
    2eb0:	9823883a 	mov	r17,r19
    2eb4:	003fcc06 	br	2de8 <__alt_data_end+0xfffd0de8>
    2eb8:	d8800204 	addi	r2,sp,8
    2ebc:	d8800015 	stw	r2,0(sp)
    2ec0:	d9c00104 	addi	r7,sp,4
    2ec4:	900b883a 	mov	r5,r18
    2ec8:	980d883a 	mov	r6,r19
    2ecc:	e009883a 	mov	r4,fp
    2ed0:	8820d53a 	srli	r16,r17,20
    2ed4:	000717c0 	call	717c <__d2b>
    2ed8:	d8800915 	stw	r2,36(sp)
    2edc:	8001651e 	bne	r16,zero,3474 <_dtoa_r+0x700>
    2ee0:	dd800217 	ldw	r22,8(sp)
    2ee4:	dc000117 	ldw	r16,4(sp)
    2ee8:	00800804 	movi	r2,32
    2eec:	b421883a 	add	r16,r22,r16
    2ef0:	80c10c84 	addi	r3,r16,1074
    2ef4:	10c2d10e 	bge	r2,r3,3a3c <_dtoa_r+0xcc8>
    2ef8:	00801004 	movi	r2,64
    2efc:	81010484 	addi	r4,r16,1042
    2f00:	10c7c83a 	sub	r3,r2,r3
    2f04:	9108d83a 	srl	r4,r18,r4
    2f08:	88e2983a 	sll	r17,r17,r3
    2f0c:	2448b03a 	or	r4,r4,r17
    2f10:	000d2a00 	call	d2a0 <__floatunsidf>
    2f14:	017f8434 	movhi	r5,65040
    2f18:	01800044 	movi	r6,1
    2f1c:	1009883a 	mov	r4,r2
    2f20:	194b883a 	add	r5,r3,r5
    2f24:	843fffc4 	addi	r16,r16,-1
    2f28:	d9801115 	stw	r6,68(sp)
    2f2c:	000d883a 	mov	r6,zero
    2f30:	01cffe34 	movhi	r7,16376
    2f34:	000c8480 	call	c848 <__subdf3>
    2f38:	0198dbf4 	movhi	r6,25455
    2f3c:	01cff4f4 	movhi	r7,16339
    2f40:	3190d844 	addi	r6,r6,17249
    2f44:	39e1e9c4 	addi	r7,r7,-30809
    2f48:	1009883a 	mov	r4,r2
    2f4c:	180b883a 	mov	r5,r3
    2f50:	000bfdc0 	call	bfdc <__muldf3>
    2f54:	01a2d874 	movhi	r6,35681
    2f58:	01cff1f4 	movhi	r7,16327
    2f5c:	31b22cc4 	addi	r6,r6,-14157
    2f60:	39e28a04 	addi	r7,r7,-30168
    2f64:	180b883a 	mov	r5,r3
    2f68:	1009883a 	mov	r4,r2
    2f6c:	000ab080 	call	ab08 <__adddf3>
    2f70:	8009883a 	mov	r4,r16
    2f74:	1029883a 	mov	r20,r2
    2f78:	1823883a 	mov	r17,r3
    2f7c:	000d1c40 	call	d1c4 <__floatsidf>
    2f80:	019427f4 	movhi	r6,20639
    2f84:	01cff4f4 	movhi	r7,16339
    2f88:	319e7ec4 	addi	r6,r6,31227
    2f8c:	39d104c4 	addi	r7,r7,17427
    2f90:	1009883a 	mov	r4,r2
    2f94:	180b883a 	mov	r5,r3
    2f98:	000bfdc0 	call	bfdc <__muldf3>
    2f9c:	100d883a 	mov	r6,r2
    2fa0:	180f883a 	mov	r7,r3
    2fa4:	a009883a 	mov	r4,r20
    2fa8:	880b883a 	mov	r5,r17
    2fac:	000ab080 	call	ab08 <__adddf3>
    2fb0:	1009883a 	mov	r4,r2
    2fb4:	180b883a 	mov	r5,r3
    2fb8:	1029883a 	mov	r20,r2
    2fbc:	1823883a 	mov	r17,r3
    2fc0:	000d1440 	call	d144 <__fixdfsi>
    2fc4:	000d883a 	mov	r6,zero
    2fc8:	000f883a 	mov	r7,zero
    2fcc:	a009883a 	mov	r4,r20
    2fd0:	880b883a 	mov	r5,r17
    2fd4:	d8800515 	stw	r2,20(sp)
    2fd8:	000bee80 	call	bee8 <__ledf2>
    2fdc:	10028716 	blt	r2,zero,39fc <_dtoa_r+0xc88>
    2fe0:	d8c00517 	ldw	r3,20(sp)
    2fe4:	00800584 	movi	r2,22
    2fe8:	10c27536 	bltu	r2,r3,39c0 <_dtoa_r+0xc4c>
    2fec:	180490fa 	slli	r2,r3,3
    2ff0:	00c00074 	movhi	r3,1
    2ff4:	18d00e04 	addi	r3,r3,16440
    2ff8:	1885883a 	add	r2,r3,r2
    2ffc:	11000017 	ldw	r4,0(r2)
    3000:	11400117 	ldw	r5,4(r2)
    3004:	900d883a 	mov	r6,r18
    3008:	980f883a 	mov	r7,r19
    300c:	000be0c0 	call	be0c <__gedf2>
    3010:	00828d0e 	bge	zero,r2,3a48 <_dtoa_r+0xcd4>
    3014:	d9000517 	ldw	r4,20(sp)
    3018:	d8000e15 	stw	zero,56(sp)
    301c:	213fffc4 	addi	r4,r4,-1
    3020:	d9000515 	stw	r4,20(sp)
    3024:	b42dc83a 	sub	r22,r22,r16
    3028:	b5bfffc4 	addi	r22,r22,-1
    302c:	b0026f16 	blt	r22,zero,39ec <_dtoa_r+0xc78>
    3030:	d8000815 	stw	zero,32(sp)
    3034:	d9c00517 	ldw	r7,20(sp)
    3038:	38026416 	blt	r7,zero,39cc <_dtoa_r+0xc58>
    303c:	b1ed883a 	add	r22,r22,r7
    3040:	d9c00d15 	stw	r7,52(sp)
    3044:	d8000a15 	stw	zero,40(sp)
    3048:	d9800317 	ldw	r6,12(sp)
    304c:	00800244 	movi	r2,9
    3050:	11811436 	bltu	r2,r6,34a4 <_dtoa_r+0x730>
    3054:	00800144 	movi	r2,5
    3058:	1184e10e 	bge	r2,r6,43e0 <_dtoa_r+0x166c>
    305c:	31bfff04 	addi	r6,r6,-4
    3060:	d9800315 	stw	r6,12(sp)
    3064:	0023883a 	mov	r17,zero
    3068:	d9800317 	ldw	r6,12(sp)
    306c:	008000c4 	movi	r2,3
    3070:	30836726 	beq	r6,r2,3e10 <_dtoa_r+0x109c>
    3074:	1183410e 	bge	r2,r6,3d7c <_dtoa_r+0x1008>
    3078:	d9c00317 	ldw	r7,12(sp)
    307c:	00800104 	movi	r2,4
    3080:	38827c26 	beq	r7,r2,3a74 <_dtoa_r+0xd00>
    3084:	00800144 	movi	r2,5
    3088:	3884c41e 	bne	r7,r2,439c <_dtoa_r+0x1628>
    308c:	00800044 	movi	r2,1
    3090:	d8800b15 	stw	r2,44(sp)
    3094:	d8c00517 	ldw	r3,20(sp)
    3098:	d9002217 	ldw	r4,136(sp)
    309c:	1907883a 	add	r3,r3,r4
    30a0:	19800044 	addi	r6,r3,1
    30a4:	d8c00c15 	stw	r3,48(sp)
    30a8:	d9800615 	stw	r6,24(sp)
    30ac:	0183a40e 	bge	zero,r6,3f40 <_dtoa_r+0x11cc>
    30b0:	d9800617 	ldw	r6,24(sp)
    30b4:	3021883a 	mov	r16,r6
    30b8:	e0001115 	stw	zero,68(fp)
    30bc:	008005c4 	movi	r2,23
    30c0:	1184c92e 	bgeu	r2,r6,43e8 <_dtoa_r+0x1674>
    30c4:	00c00044 	movi	r3,1
    30c8:	00800104 	movi	r2,4
    30cc:	1085883a 	add	r2,r2,r2
    30d0:	11000504 	addi	r4,r2,20
    30d4:	180b883a 	mov	r5,r3
    30d8:	18c00044 	addi	r3,r3,1
    30dc:	313ffb2e 	bgeu	r6,r4,30cc <__alt_data_end+0xfffd10cc>
    30e0:	e1401115 	stw	r5,68(fp)
    30e4:	e009883a 	mov	r4,fp
    30e8:	000642c0 	call	642c <_Balloc>
    30ec:	d8800715 	stw	r2,28(sp)
    30f0:	e0801015 	stw	r2,64(fp)
    30f4:	00800384 	movi	r2,14
    30f8:	1400f736 	bltu	r2,r16,34d8 <_dtoa_r+0x764>
    30fc:	8800f626 	beq	r17,zero,34d8 <_dtoa_r+0x764>
    3100:	d9c00517 	ldw	r7,20(sp)
    3104:	01c39a0e 	bge	zero,r7,3f70 <_dtoa_r+0x11fc>
    3108:	388003cc 	andi	r2,r7,15
    310c:	100490fa 	slli	r2,r2,3
    3110:	382bd13a 	srai	r21,r7,4
    3114:	00c00074 	movhi	r3,1
    3118:	18d00e04 	addi	r3,r3,16440
    311c:	1885883a 	add	r2,r3,r2
    3120:	a8c0040c 	andi	r3,r21,16
    3124:	12400017 	ldw	r9,0(r2)
    3128:	12000117 	ldw	r8,4(r2)
    312c:	18037926 	beq	r3,zero,3f14 <_dtoa_r+0x11a0>
    3130:	00800074 	movhi	r2,1
    3134:	10900404 	addi	r2,r2,16400
    3138:	11800817 	ldw	r6,32(r2)
    313c:	11c00917 	ldw	r7,36(r2)
    3140:	9009883a 	mov	r4,r18
    3144:	980b883a 	mov	r5,r19
    3148:	da001715 	stw	r8,92(sp)
    314c:	da401615 	stw	r9,88(sp)
    3150:	000b3b40 	call	b3b4 <__divdf3>
    3154:	da001717 	ldw	r8,92(sp)
    3158:	da401617 	ldw	r9,88(sp)
    315c:	ad4003cc 	andi	r21,r21,15
    3160:	040000c4 	movi	r16,3
    3164:	1023883a 	mov	r17,r2
    3168:	1829883a 	mov	r20,r3
    316c:	a8001126 	beq	r21,zero,31b4 <_dtoa_r+0x440>
    3170:	05c00074 	movhi	r23,1
    3174:	bdd00404 	addi	r23,r23,16400
    3178:	4805883a 	mov	r2,r9
    317c:	4007883a 	mov	r3,r8
    3180:	a980004c 	andi	r6,r21,1
    3184:	1009883a 	mov	r4,r2
    3188:	a82bd07a 	srai	r21,r21,1
    318c:	180b883a 	mov	r5,r3
    3190:	30000426 	beq	r6,zero,31a4 <_dtoa_r+0x430>
    3194:	b9800017 	ldw	r6,0(r23)
    3198:	b9c00117 	ldw	r7,4(r23)
    319c:	84000044 	addi	r16,r16,1
    31a0:	000bfdc0 	call	bfdc <__muldf3>
    31a4:	bdc00204 	addi	r23,r23,8
    31a8:	a83ff51e 	bne	r21,zero,3180 <__alt_data_end+0xfffd1180>
    31ac:	1013883a 	mov	r9,r2
    31b0:	1811883a 	mov	r8,r3
    31b4:	480d883a 	mov	r6,r9
    31b8:	400f883a 	mov	r7,r8
    31bc:	8809883a 	mov	r4,r17
    31c0:	a00b883a 	mov	r5,r20
    31c4:	000b3b40 	call	b3b4 <__divdf3>
    31c8:	d8800f15 	stw	r2,60(sp)
    31cc:	d8c01015 	stw	r3,64(sp)
    31d0:	d8c00e17 	ldw	r3,56(sp)
    31d4:	18000626 	beq	r3,zero,31f0 <_dtoa_r+0x47c>
    31d8:	d9000f17 	ldw	r4,60(sp)
    31dc:	d9401017 	ldw	r5,64(sp)
    31e0:	000d883a 	mov	r6,zero
    31e4:	01cffc34 	movhi	r7,16368
    31e8:	000bee80 	call	bee8 <__ledf2>
    31ec:	10040b16 	blt	r2,zero,421c <_dtoa_r+0x14a8>
    31f0:	8009883a 	mov	r4,r16
    31f4:	000d1c40 	call	d1c4 <__floatsidf>
    31f8:	d9800f17 	ldw	r6,60(sp)
    31fc:	d9c01017 	ldw	r7,64(sp)
    3200:	1009883a 	mov	r4,r2
    3204:	180b883a 	mov	r5,r3
    3208:	000bfdc0 	call	bfdc <__muldf3>
    320c:	000d883a 	mov	r6,zero
    3210:	01d00734 	movhi	r7,16412
    3214:	1009883a 	mov	r4,r2
    3218:	180b883a 	mov	r5,r3
    321c:	000ab080 	call	ab08 <__adddf3>
    3220:	1021883a 	mov	r16,r2
    3224:	d8800617 	ldw	r2,24(sp)
    3228:	047f3034 	movhi	r17,64704
    322c:	1c63883a 	add	r17,r3,r17
    3230:	10031826 	beq	r2,zero,3e94 <_dtoa_r+0x1120>
    3234:	d8c00517 	ldw	r3,20(sp)
    3238:	db000617 	ldw	r12,24(sp)
    323c:	d8c01315 	stw	r3,76(sp)
    3240:	d9000b17 	ldw	r4,44(sp)
    3244:	20038f26 	beq	r4,zero,4084 <_dtoa_r+0x1310>
    3248:	60bfffc4 	addi	r2,r12,-1
    324c:	100490fa 	slli	r2,r2,3
    3250:	00c00074 	movhi	r3,1
    3254:	18d00e04 	addi	r3,r3,16440
    3258:	1885883a 	add	r2,r3,r2
    325c:	11800017 	ldw	r6,0(r2)
    3260:	11c00117 	ldw	r7,4(r2)
    3264:	d8800717 	ldw	r2,28(sp)
    3268:	0009883a 	mov	r4,zero
    326c:	014ff834 	movhi	r5,16352
    3270:	db001615 	stw	r12,88(sp)
    3274:	15c00044 	addi	r23,r2,1
    3278:	000b3b40 	call	b3b4 <__divdf3>
    327c:	800d883a 	mov	r6,r16
    3280:	880f883a 	mov	r7,r17
    3284:	1009883a 	mov	r4,r2
    3288:	180b883a 	mov	r5,r3
    328c:	000c8480 	call	c848 <__subdf3>
    3290:	d9401017 	ldw	r5,64(sp)
    3294:	d9000f17 	ldw	r4,60(sp)
    3298:	102b883a 	mov	r21,r2
    329c:	d8c01215 	stw	r3,72(sp)
    32a0:	000d1440 	call	d144 <__fixdfsi>
    32a4:	1009883a 	mov	r4,r2
    32a8:	1029883a 	mov	r20,r2
    32ac:	000d1c40 	call	d1c4 <__floatsidf>
    32b0:	d9000f17 	ldw	r4,60(sp)
    32b4:	d9401017 	ldw	r5,64(sp)
    32b8:	100d883a 	mov	r6,r2
    32bc:	180f883a 	mov	r7,r3
    32c0:	000c8480 	call	c848 <__subdf3>
    32c4:	1823883a 	mov	r17,r3
    32c8:	d8c00717 	ldw	r3,28(sp)
    32cc:	d9401217 	ldw	r5,72(sp)
    32d0:	a2000c04 	addi	r8,r20,48
    32d4:	1021883a 	mov	r16,r2
    32d8:	1a000005 	stb	r8,0(r3)
    32dc:	800d883a 	mov	r6,r16
    32e0:	880f883a 	mov	r7,r17
    32e4:	a809883a 	mov	r4,r21
    32e8:	4029883a 	mov	r20,r8
    32ec:	000be0c0 	call	be0c <__gedf2>
    32f0:	00841d16 	blt	zero,r2,4368 <_dtoa_r+0x15f4>
    32f4:	800d883a 	mov	r6,r16
    32f8:	880f883a 	mov	r7,r17
    32fc:	0009883a 	mov	r4,zero
    3300:	014ffc34 	movhi	r5,16368
    3304:	000c8480 	call	c848 <__subdf3>
    3308:	d9401217 	ldw	r5,72(sp)
    330c:	100d883a 	mov	r6,r2
    3310:	180f883a 	mov	r7,r3
    3314:	a809883a 	mov	r4,r21
    3318:	000be0c0 	call	be0c <__gedf2>
    331c:	db001617 	ldw	r12,88(sp)
    3320:	00840e16 	blt	zero,r2,435c <_dtoa_r+0x15e8>
    3324:	00800044 	movi	r2,1
    3328:	13006b0e 	bge	r2,r12,34d8 <_dtoa_r+0x764>
    332c:	d9000717 	ldw	r4,28(sp)
    3330:	dd800f15 	stw	r22,60(sp)
    3334:	dcc01015 	stw	r19,64(sp)
    3338:	2319883a 	add	r12,r4,r12
    333c:	dcc01217 	ldw	r19,72(sp)
    3340:	602d883a 	mov	r22,r12
    3344:	dc801215 	stw	r18,72(sp)
    3348:	b825883a 	mov	r18,r23
    334c:	00000906 	br	3374 <_dtoa_r+0x600>
    3350:	000c8480 	call	c848 <__subdf3>
    3354:	a80d883a 	mov	r6,r21
    3358:	980f883a 	mov	r7,r19
    335c:	1009883a 	mov	r4,r2
    3360:	180b883a 	mov	r5,r3
    3364:	000bee80 	call	bee8 <__ledf2>
    3368:	1003e816 	blt	r2,zero,430c <_dtoa_r+0x1598>
    336c:	b825883a 	mov	r18,r23
    3370:	bd83e926 	beq	r23,r22,4318 <_dtoa_r+0x15a4>
    3374:	a809883a 	mov	r4,r21
    3378:	980b883a 	mov	r5,r19
    337c:	000d883a 	mov	r6,zero
    3380:	01d00934 	movhi	r7,16420
    3384:	000bfdc0 	call	bfdc <__muldf3>
    3388:	000d883a 	mov	r6,zero
    338c:	01d00934 	movhi	r7,16420
    3390:	8009883a 	mov	r4,r16
    3394:	880b883a 	mov	r5,r17
    3398:	102b883a 	mov	r21,r2
    339c:	1827883a 	mov	r19,r3
    33a0:	000bfdc0 	call	bfdc <__muldf3>
    33a4:	180b883a 	mov	r5,r3
    33a8:	1009883a 	mov	r4,r2
    33ac:	1821883a 	mov	r16,r3
    33b0:	1023883a 	mov	r17,r2
    33b4:	000d1440 	call	d144 <__fixdfsi>
    33b8:	1009883a 	mov	r4,r2
    33bc:	1029883a 	mov	r20,r2
    33c0:	000d1c40 	call	d1c4 <__floatsidf>
    33c4:	8809883a 	mov	r4,r17
    33c8:	800b883a 	mov	r5,r16
    33cc:	100d883a 	mov	r6,r2
    33d0:	180f883a 	mov	r7,r3
    33d4:	000c8480 	call	c848 <__subdf3>
    33d8:	a5000c04 	addi	r20,r20,48
    33dc:	a80d883a 	mov	r6,r21
    33e0:	980f883a 	mov	r7,r19
    33e4:	1009883a 	mov	r4,r2
    33e8:	180b883a 	mov	r5,r3
    33ec:	95000005 	stb	r20,0(r18)
    33f0:	1021883a 	mov	r16,r2
    33f4:	1823883a 	mov	r17,r3
    33f8:	000bee80 	call	bee8 <__ledf2>
    33fc:	bdc00044 	addi	r23,r23,1
    3400:	800d883a 	mov	r6,r16
    3404:	880f883a 	mov	r7,r17
    3408:	0009883a 	mov	r4,zero
    340c:	014ffc34 	movhi	r5,16368
    3410:	103fcf0e 	bge	r2,zero,3350 <__alt_data_end+0xfffd1350>
    3414:	d8c01317 	ldw	r3,76(sp)
    3418:	d8c00515 	stw	r3,20(sp)
    341c:	d9400917 	ldw	r5,36(sp)
    3420:	e009883a 	mov	r4,fp
    3424:	00064d40 	call	64d4 <_Bfree>
    3428:	d9000517 	ldw	r4,20(sp)
    342c:	d9802317 	ldw	r6,140(sp)
    3430:	d9c02517 	ldw	r7,148(sp)
    3434:	b8000005 	stb	zero,0(r23)
    3438:	20800044 	addi	r2,r4,1
    343c:	30800015 	stw	r2,0(r6)
    3440:	3802aa26 	beq	r7,zero,3eec <_dtoa_r+0x1178>
    3444:	3dc00015 	stw	r23,0(r7)
    3448:	d8800717 	ldw	r2,28(sp)
    344c:	003e7906 	br	2e34 <__alt_data_end+0xfffd0e34>
    3450:	00800434 	movhi	r2,16
    3454:	10bfffc4 	addi	r2,r2,-1
    3458:	88a2703a 	and	r17,r17,r2
    345c:	883e851e 	bne	r17,zero,2e74 <__alt_data_end+0xfffd0e74>
    3460:	00800074 	movhi	r2,1
    3464:	108fef04 	addi	r2,r2,16316
    3468:	003e8406 	br	2e7c <__alt_data_end+0xfffd0e7c>
    346c:	10c00204 	addi	r3,r2,8
    3470:	003e8706 	br	2e90 <__alt_data_end+0xfffd0e90>
    3474:	01400434 	movhi	r5,16
    3478:	297fffc4 	addi	r5,r5,-1
    347c:	994a703a 	and	r5,r19,r5
    3480:	9009883a 	mov	r4,r18
    3484:	843f0044 	addi	r16,r16,-1023
    3488:	294ffc34 	orhi	r5,r5,16368
    348c:	dd800217 	ldw	r22,8(sp)
    3490:	d8001115 	stw	zero,68(sp)
    3494:	003ea506 	br	2f2c <__alt_data_end+0xfffd0f2c>
    3498:	00800074 	movhi	r2,1
    349c:	108fe604 	addi	r2,r2,16280
    34a0:	003e6406 	br	2e34 <__alt_data_end+0xfffd0e34>
    34a4:	e0001115 	stw	zero,68(fp)
    34a8:	000b883a 	mov	r5,zero
    34ac:	e009883a 	mov	r4,fp
    34b0:	000642c0 	call	642c <_Balloc>
    34b4:	01bfffc4 	movi	r6,-1
    34b8:	01c00044 	movi	r7,1
    34bc:	d8800715 	stw	r2,28(sp)
    34c0:	d9800c15 	stw	r6,48(sp)
    34c4:	e0801015 	stw	r2,64(fp)
    34c8:	d8000315 	stw	zero,12(sp)
    34cc:	d9c00b15 	stw	r7,44(sp)
    34d0:	d9800615 	stw	r6,24(sp)
    34d4:	d8002215 	stw	zero,136(sp)
    34d8:	d8800117 	ldw	r2,4(sp)
    34dc:	10008916 	blt	r2,zero,3704 <_dtoa_r+0x990>
    34e0:	d9000517 	ldw	r4,20(sp)
    34e4:	00c00384 	movi	r3,14
    34e8:	19008616 	blt	r3,r4,3704 <_dtoa_r+0x990>
    34ec:	200490fa 	slli	r2,r4,3
    34f0:	00c00074 	movhi	r3,1
    34f4:	d9802217 	ldw	r6,136(sp)
    34f8:	18d00e04 	addi	r3,r3,16440
    34fc:	1885883a 	add	r2,r3,r2
    3500:	14000017 	ldw	r16,0(r2)
    3504:	14400117 	ldw	r17,4(r2)
    3508:	30016316 	blt	r6,zero,3a98 <_dtoa_r+0xd24>
    350c:	800d883a 	mov	r6,r16
    3510:	880f883a 	mov	r7,r17
    3514:	9009883a 	mov	r4,r18
    3518:	980b883a 	mov	r5,r19
    351c:	000b3b40 	call	b3b4 <__divdf3>
    3520:	180b883a 	mov	r5,r3
    3524:	1009883a 	mov	r4,r2
    3528:	000d1440 	call	d144 <__fixdfsi>
    352c:	1009883a 	mov	r4,r2
    3530:	102b883a 	mov	r21,r2
    3534:	000d1c40 	call	d1c4 <__floatsidf>
    3538:	800d883a 	mov	r6,r16
    353c:	880f883a 	mov	r7,r17
    3540:	1009883a 	mov	r4,r2
    3544:	180b883a 	mov	r5,r3
    3548:	000bfdc0 	call	bfdc <__muldf3>
    354c:	100d883a 	mov	r6,r2
    3550:	180f883a 	mov	r7,r3
    3554:	9009883a 	mov	r4,r18
    3558:	980b883a 	mov	r5,r19
    355c:	000c8480 	call	c848 <__subdf3>
    3560:	d9c00717 	ldw	r7,28(sp)
    3564:	1009883a 	mov	r4,r2
    3568:	a8800c04 	addi	r2,r21,48
    356c:	38800005 	stb	r2,0(r7)
    3570:	3dc00044 	addi	r23,r7,1
    3574:	d9c00617 	ldw	r7,24(sp)
    3578:	01800044 	movi	r6,1
    357c:	180b883a 	mov	r5,r3
    3580:	2005883a 	mov	r2,r4
    3584:	39803826 	beq	r7,r6,3668 <_dtoa_r+0x8f4>
    3588:	000d883a 	mov	r6,zero
    358c:	01d00934 	movhi	r7,16420
    3590:	000bfdc0 	call	bfdc <__muldf3>
    3594:	000d883a 	mov	r6,zero
    3598:	000f883a 	mov	r7,zero
    359c:	1009883a 	mov	r4,r2
    35a0:	180b883a 	mov	r5,r3
    35a4:	1025883a 	mov	r18,r2
    35a8:	1827883a 	mov	r19,r3
    35ac:	000bd840 	call	bd84 <__eqdf2>
    35b0:	103f9a26 	beq	r2,zero,341c <__alt_data_end+0xfffd141c>
    35b4:	d9c00617 	ldw	r7,24(sp)
    35b8:	d8c00717 	ldw	r3,28(sp)
    35bc:	b829883a 	mov	r20,r23
    35c0:	38bfffc4 	addi	r2,r7,-1
    35c4:	18ad883a 	add	r22,r3,r2
    35c8:	00000a06 	br	35f4 <_dtoa_r+0x880>
    35cc:	000bfdc0 	call	bfdc <__muldf3>
    35d0:	000d883a 	mov	r6,zero
    35d4:	000f883a 	mov	r7,zero
    35d8:	1009883a 	mov	r4,r2
    35dc:	180b883a 	mov	r5,r3
    35e0:	1025883a 	mov	r18,r2
    35e4:	1827883a 	mov	r19,r3
    35e8:	b829883a 	mov	r20,r23
    35ec:	000bd840 	call	bd84 <__eqdf2>
    35f0:	103f8a26 	beq	r2,zero,341c <__alt_data_end+0xfffd141c>
    35f4:	800d883a 	mov	r6,r16
    35f8:	880f883a 	mov	r7,r17
    35fc:	9009883a 	mov	r4,r18
    3600:	980b883a 	mov	r5,r19
    3604:	000b3b40 	call	b3b4 <__divdf3>
    3608:	180b883a 	mov	r5,r3
    360c:	1009883a 	mov	r4,r2
    3610:	000d1440 	call	d144 <__fixdfsi>
    3614:	1009883a 	mov	r4,r2
    3618:	102b883a 	mov	r21,r2
    361c:	000d1c40 	call	d1c4 <__floatsidf>
    3620:	800d883a 	mov	r6,r16
    3624:	880f883a 	mov	r7,r17
    3628:	1009883a 	mov	r4,r2
    362c:	180b883a 	mov	r5,r3
    3630:	000bfdc0 	call	bfdc <__muldf3>
    3634:	100d883a 	mov	r6,r2
    3638:	180f883a 	mov	r7,r3
    363c:	9009883a 	mov	r4,r18
    3640:	980b883a 	mov	r5,r19
    3644:	000c8480 	call	c848 <__subdf3>
    3648:	aa000c04 	addi	r8,r21,48
    364c:	a2000005 	stb	r8,0(r20)
    3650:	000d883a 	mov	r6,zero
    3654:	01d00934 	movhi	r7,16420
    3658:	1009883a 	mov	r4,r2
    365c:	180b883a 	mov	r5,r3
    3660:	a5c00044 	addi	r23,r20,1
    3664:	b53fd91e 	bne	r22,r20,35cc <__alt_data_end+0xfffd15cc>
    3668:	100d883a 	mov	r6,r2
    366c:	180f883a 	mov	r7,r3
    3670:	1009883a 	mov	r4,r2
    3674:	180b883a 	mov	r5,r3
    3678:	000ab080 	call	ab08 <__adddf3>
    367c:	100d883a 	mov	r6,r2
    3680:	180f883a 	mov	r7,r3
    3684:	8009883a 	mov	r4,r16
    3688:	880b883a 	mov	r5,r17
    368c:	1027883a 	mov	r19,r2
    3690:	1825883a 	mov	r18,r3
    3694:	000bee80 	call	bee8 <__ledf2>
    3698:	10000816 	blt	r2,zero,36bc <_dtoa_r+0x948>
    369c:	980d883a 	mov	r6,r19
    36a0:	900f883a 	mov	r7,r18
    36a4:	8009883a 	mov	r4,r16
    36a8:	880b883a 	mov	r5,r17
    36ac:	000bd840 	call	bd84 <__eqdf2>
    36b0:	103f5a1e 	bne	r2,zero,341c <__alt_data_end+0xfffd141c>
    36b4:	ad40004c 	andi	r21,r21,1
    36b8:	a83f5826 	beq	r21,zero,341c <__alt_data_end+0xfffd141c>
    36bc:	bd3fffc3 	ldbu	r20,-1(r23)
    36c0:	b8bfffc4 	addi	r2,r23,-1
    36c4:	1007883a 	mov	r3,r2
    36c8:	01400e44 	movi	r5,57
    36cc:	d9800717 	ldw	r6,28(sp)
    36d0:	00000506 	br	36e8 <_dtoa_r+0x974>
    36d4:	18ffffc4 	addi	r3,r3,-1
    36d8:	11824726 	beq	r2,r6,3ff8 <_dtoa_r+0x1284>
    36dc:	1d000003 	ldbu	r20,0(r3)
    36e0:	102f883a 	mov	r23,r2
    36e4:	10bfffc4 	addi	r2,r2,-1
    36e8:	a1003fcc 	andi	r4,r20,255
    36ec:	2100201c 	xori	r4,r4,128
    36f0:	213fe004 	addi	r4,r4,-128
    36f4:	217ff726 	beq	r4,r5,36d4 <__alt_data_end+0xfffd16d4>
    36f8:	a2000044 	addi	r8,r20,1
    36fc:	12000005 	stb	r8,0(r2)
    3700:	003f4606 	br	341c <__alt_data_end+0xfffd141c>
    3704:	d9000b17 	ldw	r4,44(sp)
    3708:	2000c826 	beq	r4,zero,3a2c <_dtoa_r+0xcb8>
    370c:	d9800317 	ldw	r6,12(sp)
    3710:	00c00044 	movi	r3,1
    3714:	1980f90e 	bge	r3,r6,3afc <_dtoa_r+0xd88>
    3718:	d8800617 	ldw	r2,24(sp)
    371c:	d8c00a17 	ldw	r3,40(sp)
    3720:	157fffc4 	addi	r21,r2,-1
    3724:	1d41f316 	blt	r3,r21,3ef4 <_dtoa_r+0x1180>
    3728:	1d6bc83a 	sub	r21,r3,r21
    372c:	d9c00617 	ldw	r7,24(sp)
    3730:	3802aa16 	blt	r7,zero,41dc <_dtoa_r+0x1468>
    3734:	dd000817 	ldw	r20,32(sp)
    3738:	d8800617 	ldw	r2,24(sp)
    373c:	d8c00817 	ldw	r3,32(sp)
    3740:	01400044 	movi	r5,1
    3744:	e009883a 	mov	r4,fp
    3748:	1887883a 	add	r3,r3,r2
    374c:	d8c00815 	stw	r3,32(sp)
    3750:	b0ad883a 	add	r22,r22,r2
    3754:	00068600 	call	6860 <__i2b>
    3758:	1023883a 	mov	r17,r2
    375c:	a0000826 	beq	r20,zero,3780 <_dtoa_r+0xa0c>
    3760:	0580070e 	bge	zero,r22,3780 <_dtoa_r+0xa0c>
    3764:	a005883a 	mov	r2,r20
    3768:	b500b916 	blt	r22,r20,3a50 <_dtoa_r+0xcdc>
    376c:	d9000817 	ldw	r4,32(sp)
    3770:	a0a9c83a 	sub	r20,r20,r2
    3774:	b0adc83a 	sub	r22,r22,r2
    3778:	2089c83a 	sub	r4,r4,r2
    377c:	d9000815 	stw	r4,32(sp)
    3780:	d9800a17 	ldw	r6,40(sp)
    3784:	0181810e 	bge	zero,r6,3d8c <_dtoa_r+0x1018>
    3788:	d9c00b17 	ldw	r7,44(sp)
    378c:	3800b326 	beq	r7,zero,3a5c <_dtoa_r+0xce8>
    3790:	a800b226 	beq	r21,zero,3a5c <_dtoa_r+0xce8>
    3794:	880b883a 	mov	r5,r17
    3798:	a80d883a 	mov	r6,r21
    379c:	e009883a 	mov	r4,fp
    37a0:	0006b280 	call	6b28 <__pow5mult>
    37a4:	d9800917 	ldw	r6,36(sp)
    37a8:	100b883a 	mov	r5,r2
    37ac:	e009883a 	mov	r4,fp
    37b0:	1023883a 	mov	r17,r2
    37b4:	000689c0 	call	689c <__multiply>
    37b8:	1021883a 	mov	r16,r2
    37bc:	d8800a17 	ldw	r2,40(sp)
    37c0:	d9400917 	ldw	r5,36(sp)
    37c4:	e009883a 	mov	r4,fp
    37c8:	1545c83a 	sub	r2,r2,r21
    37cc:	d8800a15 	stw	r2,40(sp)
    37d0:	00064d40 	call	64d4 <_Bfree>
    37d4:	d8c00a17 	ldw	r3,40(sp)
    37d8:	18009f1e 	bne	r3,zero,3a58 <_dtoa_r+0xce4>
    37dc:	05c00044 	movi	r23,1
    37e0:	e009883a 	mov	r4,fp
    37e4:	b80b883a 	mov	r5,r23
    37e8:	00068600 	call	6860 <__i2b>
    37ec:	d9000d17 	ldw	r4,52(sp)
    37f0:	102b883a 	mov	r21,r2
    37f4:	2000ce26 	beq	r4,zero,3b30 <_dtoa_r+0xdbc>
    37f8:	200d883a 	mov	r6,r4
    37fc:	100b883a 	mov	r5,r2
    3800:	e009883a 	mov	r4,fp
    3804:	0006b280 	call	6b28 <__pow5mult>
    3808:	d9800317 	ldw	r6,12(sp)
    380c:	102b883a 	mov	r21,r2
    3810:	b981810e 	bge	r23,r6,3e18 <_dtoa_r+0x10a4>
    3814:	0027883a 	mov	r19,zero
    3818:	a8800417 	ldw	r2,16(r21)
    381c:	05c00804 	movi	r23,32
    3820:	10800104 	addi	r2,r2,4
    3824:	1085883a 	add	r2,r2,r2
    3828:	1085883a 	add	r2,r2,r2
    382c:	a885883a 	add	r2,r21,r2
    3830:	11000017 	ldw	r4,0(r2)
    3834:	00067480 	call	6748 <__hi0bits>
    3838:	b885c83a 	sub	r2,r23,r2
    383c:	1585883a 	add	r2,r2,r22
    3840:	108007cc 	andi	r2,r2,31
    3844:	1000b326 	beq	r2,zero,3b14 <_dtoa_r+0xda0>
    3848:	00c00804 	movi	r3,32
    384c:	1887c83a 	sub	r3,r3,r2
    3850:	01000104 	movi	r4,4
    3854:	20c2cd0e 	bge	r4,r3,438c <_dtoa_r+0x1618>
    3858:	00c00704 	movi	r3,28
    385c:	1885c83a 	sub	r2,r3,r2
    3860:	d8c00817 	ldw	r3,32(sp)
    3864:	a0a9883a 	add	r20,r20,r2
    3868:	b0ad883a 	add	r22,r22,r2
    386c:	1887883a 	add	r3,r3,r2
    3870:	d8c00815 	stw	r3,32(sp)
    3874:	d9800817 	ldw	r6,32(sp)
    3878:	0180040e 	bge	zero,r6,388c <_dtoa_r+0xb18>
    387c:	800b883a 	mov	r5,r16
    3880:	e009883a 	mov	r4,fp
    3884:	0006c680 	call	6c68 <__lshift>
    3888:	1021883a 	mov	r16,r2
    388c:	0580050e 	bge	zero,r22,38a4 <_dtoa_r+0xb30>
    3890:	a80b883a 	mov	r5,r21
    3894:	b00d883a 	mov	r6,r22
    3898:	e009883a 	mov	r4,fp
    389c:	0006c680 	call	6c68 <__lshift>
    38a0:	102b883a 	mov	r21,r2
    38a4:	d9c00e17 	ldw	r7,56(sp)
    38a8:	3801211e 	bne	r7,zero,3d30 <_dtoa_r+0xfbc>
    38ac:	d9800617 	ldw	r6,24(sp)
    38b0:	0181380e 	bge	zero,r6,3d94 <_dtoa_r+0x1020>
    38b4:	d8c00b17 	ldw	r3,44(sp)
    38b8:	1800ab1e 	bne	r3,zero,3b68 <_dtoa_r+0xdf4>
    38bc:	dc800717 	ldw	r18,28(sp)
    38c0:	dcc00617 	ldw	r19,24(sp)
    38c4:	9029883a 	mov	r20,r18
    38c8:	00000206 	br	38d4 <_dtoa_r+0xb60>
    38cc:	00064fc0 	call	64fc <__multadd>
    38d0:	1021883a 	mov	r16,r2
    38d4:	a80b883a 	mov	r5,r21
    38d8:	8009883a 	mov	r4,r16
    38dc:	0002b4c0 	call	2b4c <quorem>
    38e0:	10800c04 	addi	r2,r2,48
    38e4:	90800005 	stb	r2,0(r18)
    38e8:	94800044 	addi	r18,r18,1
    38ec:	9507c83a 	sub	r3,r18,r20
    38f0:	000f883a 	mov	r7,zero
    38f4:	01800284 	movi	r6,10
    38f8:	800b883a 	mov	r5,r16
    38fc:	e009883a 	mov	r4,fp
    3900:	1cfff216 	blt	r3,r19,38cc <__alt_data_end+0xfffd18cc>
    3904:	1011883a 	mov	r8,r2
    3908:	d8800617 	ldw	r2,24(sp)
    390c:	0082370e 	bge	zero,r2,41ec <_dtoa_r+0x1478>
    3910:	d9000717 	ldw	r4,28(sp)
    3914:	0025883a 	mov	r18,zero
    3918:	20af883a 	add	r23,r4,r2
    391c:	01800044 	movi	r6,1
    3920:	800b883a 	mov	r5,r16
    3924:	e009883a 	mov	r4,fp
    3928:	da001715 	stw	r8,92(sp)
    392c:	0006c680 	call	6c68 <__lshift>
    3930:	a80b883a 	mov	r5,r21
    3934:	1009883a 	mov	r4,r2
    3938:	d8800915 	stw	r2,36(sp)
    393c:	0006db00 	call	6db0 <__mcmp>
    3940:	da001717 	ldw	r8,92(sp)
    3944:	0081800e 	bge	zero,r2,3f48 <_dtoa_r+0x11d4>
    3948:	b93fffc3 	ldbu	r4,-1(r23)
    394c:	b8bfffc4 	addi	r2,r23,-1
    3950:	1007883a 	mov	r3,r2
    3954:	01800e44 	movi	r6,57
    3958:	d9c00717 	ldw	r7,28(sp)
    395c:	00000506 	br	3974 <_dtoa_r+0xc00>
    3960:	18ffffc4 	addi	r3,r3,-1
    3964:	11c12326 	beq	r2,r7,3df4 <_dtoa_r+0x1080>
    3968:	19000003 	ldbu	r4,0(r3)
    396c:	102f883a 	mov	r23,r2
    3970:	10bfffc4 	addi	r2,r2,-1
    3974:	21403fcc 	andi	r5,r4,255
    3978:	2940201c 	xori	r5,r5,128
    397c:	297fe004 	addi	r5,r5,-128
    3980:	29bff726 	beq	r5,r6,3960 <__alt_data_end+0xfffd1960>
    3984:	21000044 	addi	r4,r4,1
    3988:	11000005 	stb	r4,0(r2)
    398c:	a80b883a 	mov	r5,r21
    3990:	e009883a 	mov	r4,fp
    3994:	00064d40 	call	64d4 <_Bfree>
    3998:	883ea026 	beq	r17,zero,341c <__alt_data_end+0xfffd141c>
    399c:	90000426 	beq	r18,zero,39b0 <_dtoa_r+0xc3c>
    39a0:	94400326 	beq	r18,r17,39b0 <_dtoa_r+0xc3c>
    39a4:	900b883a 	mov	r5,r18
    39a8:	e009883a 	mov	r4,fp
    39ac:	00064d40 	call	64d4 <_Bfree>
    39b0:	880b883a 	mov	r5,r17
    39b4:	e009883a 	mov	r4,fp
    39b8:	00064d40 	call	64d4 <_Bfree>
    39bc:	003e9706 	br	341c <__alt_data_end+0xfffd141c>
    39c0:	01800044 	movi	r6,1
    39c4:	d9800e15 	stw	r6,56(sp)
    39c8:	003d9606 	br	3024 <__alt_data_end+0xfffd1024>
    39cc:	d8800817 	ldw	r2,32(sp)
    39d0:	d8c00517 	ldw	r3,20(sp)
    39d4:	d8000d15 	stw	zero,52(sp)
    39d8:	10c5c83a 	sub	r2,r2,r3
    39dc:	00c9c83a 	sub	r4,zero,r3
    39e0:	d8800815 	stw	r2,32(sp)
    39e4:	d9000a15 	stw	r4,40(sp)
    39e8:	003d9706 	br	3048 <__alt_data_end+0xfffd1048>
    39ec:	05adc83a 	sub	r22,zero,r22
    39f0:	dd800815 	stw	r22,32(sp)
    39f4:	002d883a 	mov	r22,zero
    39f8:	003d8e06 	br	3034 <__alt_data_end+0xfffd1034>
    39fc:	d9000517 	ldw	r4,20(sp)
    3a00:	000d1c40 	call	d1c4 <__floatsidf>
    3a04:	100d883a 	mov	r6,r2
    3a08:	180f883a 	mov	r7,r3
    3a0c:	a009883a 	mov	r4,r20
    3a10:	880b883a 	mov	r5,r17
    3a14:	000bd840 	call	bd84 <__eqdf2>
    3a18:	103d7126 	beq	r2,zero,2fe0 <__alt_data_end+0xfffd0fe0>
    3a1c:	d9c00517 	ldw	r7,20(sp)
    3a20:	39ffffc4 	addi	r7,r7,-1
    3a24:	d9c00515 	stw	r7,20(sp)
    3a28:	003d6d06 	br	2fe0 <__alt_data_end+0xfffd0fe0>
    3a2c:	dd400a17 	ldw	r21,40(sp)
    3a30:	dd000817 	ldw	r20,32(sp)
    3a34:	0023883a 	mov	r17,zero
    3a38:	003f4806 	br	375c <__alt_data_end+0xfffd175c>
    3a3c:	10e3c83a 	sub	r17,r2,r3
    3a40:	9448983a 	sll	r4,r18,r17
    3a44:	003d3206 	br	2f10 <__alt_data_end+0xfffd0f10>
    3a48:	d8000e15 	stw	zero,56(sp)
    3a4c:	003d7506 	br	3024 <__alt_data_end+0xfffd1024>
    3a50:	b005883a 	mov	r2,r22
    3a54:	003f4506 	br	376c <__alt_data_end+0xfffd176c>
    3a58:	dc000915 	stw	r16,36(sp)
    3a5c:	d9800a17 	ldw	r6,40(sp)
    3a60:	d9400917 	ldw	r5,36(sp)
    3a64:	e009883a 	mov	r4,fp
    3a68:	0006b280 	call	6b28 <__pow5mult>
    3a6c:	1021883a 	mov	r16,r2
    3a70:	003f5a06 	br	37dc <__alt_data_end+0xfffd17dc>
    3a74:	01c00044 	movi	r7,1
    3a78:	d9c00b15 	stw	r7,44(sp)
    3a7c:	d8802217 	ldw	r2,136(sp)
    3a80:	0081280e 	bge	zero,r2,3f24 <_dtoa_r+0x11b0>
    3a84:	100d883a 	mov	r6,r2
    3a88:	1021883a 	mov	r16,r2
    3a8c:	d8800c15 	stw	r2,48(sp)
    3a90:	d8800615 	stw	r2,24(sp)
    3a94:	003d8806 	br	30b8 <__alt_data_end+0xfffd10b8>
    3a98:	d8800617 	ldw	r2,24(sp)
    3a9c:	00be9b16 	blt	zero,r2,350c <__alt_data_end+0xfffd150c>
    3aa0:	10010f1e 	bne	r2,zero,3ee0 <_dtoa_r+0x116c>
    3aa4:	880b883a 	mov	r5,r17
    3aa8:	000d883a 	mov	r6,zero
    3aac:	01d00534 	movhi	r7,16404
    3ab0:	8009883a 	mov	r4,r16
    3ab4:	000bfdc0 	call	bfdc <__muldf3>
    3ab8:	900d883a 	mov	r6,r18
    3abc:	980f883a 	mov	r7,r19
    3ac0:	1009883a 	mov	r4,r2
    3ac4:	180b883a 	mov	r5,r3
    3ac8:	000be0c0 	call	be0c <__gedf2>
    3acc:	002b883a 	mov	r21,zero
    3ad0:	0023883a 	mov	r17,zero
    3ad4:	1000bf16 	blt	r2,zero,3dd4 <_dtoa_r+0x1060>
    3ad8:	d9802217 	ldw	r6,136(sp)
    3adc:	ddc00717 	ldw	r23,28(sp)
    3ae0:	018c303a 	nor	r6,zero,r6
    3ae4:	d9800515 	stw	r6,20(sp)
    3ae8:	a80b883a 	mov	r5,r21
    3aec:	e009883a 	mov	r4,fp
    3af0:	00064d40 	call	64d4 <_Bfree>
    3af4:	883e4926 	beq	r17,zero,341c <__alt_data_end+0xfffd141c>
    3af8:	003fad06 	br	39b0 <__alt_data_end+0xfffd19b0>
    3afc:	d9c01117 	ldw	r7,68(sp)
    3b00:	3801bc26 	beq	r7,zero,41f4 <_dtoa_r+0x1480>
    3b04:	10810cc4 	addi	r2,r2,1075
    3b08:	dd400a17 	ldw	r21,40(sp)
    3b0c:	dd000817 	ldw	r20,32(sp)
    3b10:	003f0a06 	br	373c <__alt_data_end+0xfffd173c>
    3b14:	00800704 	movi	r2,28
    3b18:	d9000817 	ldw	r4,32(sp)
    3b1c:	a0a9883a 	add	r20,r20,r2
    3b20:	b0ad883a 	add	r22,r22,r2
    3b24:	2089883a 	add	r4,r4,r2
    3b28:	d9000815 	stw	r4,32(sp)
    3b2c:	003f5106 	br	3874 <__alt_data_end+0xfffd1874>
    3b30:	d8c00317 	ldw	r3,12(sp)
    3b34:	b8c1fc0e 	bge	r23,r3,4328 <_dtoa_r+0x15b4>
    3b38:	0027883a 	mov	r19,zero
    3b3c:	b805883a 	mov	r2,r23
    3b40:	003f3e06 	br	383c <__alt_data_end+0xfffd183c>
    3b44:	880b883a 	mov	r5,r17
    3b48:	e009883a 	mov	r4,fp
    3b4c:	000f883a 	mov	r7,zero
    3b50:	01800284 	movi	r6,10
    3b54:	00064fc0 	call	64fc <__multadd>
    3b58:	d9000c17 	ldw	r4,48(sp)
    3b5c:	1023883a 	mov	r17,r2
    3b60:	0102040e 	bge	zero,r4,4374 <_dtoa_r+0x1600>
    3b64:	d9000615 	stw	r4,24(sp)
    3b68:	0500050e 	bge	zero,r20,3b80 <_dtoa_r+0xe0c>
    3b6c:	880b883a 	mov	r5,r17
    3b70:	a00d883a 	mov	r6,r20
    3b74:	e009883a 	mov	r4,fp
    3b78:	0006c680 	call	6c68 <__lshift>
    3b7c:	1023883a 	mov	r17,r2
    3b80:	9801241e 	bne	r19,zero,4014 <_dtoa_r+0x12a0>
    3b84:	8829883a 	mov	r20,r17
    3b88:	d9000617 	ldw	r4,24(sp)
    3b8c:	dcc00717 	ldw	r19,28(sp)
    3b90:	9480004c 	andi	r18,r18,1
    3b94:	20bfffc4 	addi	r2,r4,-1
    3b98:	9885883a 	add	r2,r19,r2
    3b9c:	d8800415 	stw	r2,16(sp)
    3ba0:	dc800615 	stw	r18,24(sp)
    3ba4:	a80b883a 	mov	r5,r21
    3ba8:	8009883a 	mov	r4,r16
    3bac:	0002b4c0 	call	2b4c <quorem>
    3bb0:	880b883a 	mov	r5,r17
    3bb4:	8009883a 	mov	r4,r16
    3bb8:	102f883a 	mov	r23,r2
    3bbc:	0006db00 	call	6db0 <__mcmp>
    3bc0:	a80b883a 	mov	r5,r21
    3bc4:	a00d883a 	mov	r6,r20
    3bc8:	e009883a 	mov	r4,fp
    3bcc:	102d883a 	mov	r22,r2
    3bd0:	0006e100 	call	6e10 <__mdiff>
    3bd4:	1007883a 	mov	r3,r2
    3bd8:	10800317 	ldw	r2,12(r2)
    3bdc:	bc800c04 	addi	r18,r23,48
    3be0:	180b883a 	mov	r5,r3
    3be4:	10004e1e 	bne	r2,zero,3d20 <_dtoa_r+0xfac>
    3be8:	8009883a 	mov	r4,r16
    3bec:	d8c01615 	stw	r3,88(sp)
    3bf0:	0006db00 	call	6db0 <__mcmp>
    3bf4:	d8c01617 	ldw	r3,88(sp)
    3bf8:	e009883a 	mov	r4,fp
    3bfc:	d8801615 	stw	r2,88(sp)
    3c00:	180b883a 	mov	r5,r3
    3c04:	00064d40 	call	64d4 <_Bfree>
    3c08:	d8801617 	ldw	r2,88(sp)
    3c0c:	1000041e 	bne	r2,zero,3c20 <_dtoa_r+0xeac>
    3c10:	d9800317 	ldw	r6,12(sp)
    3c14:	3000021e 	bne	r6,zero,3c20 <_dtoa_r+0xeac>
    3c18:	d8c00617 	ldw	r3,24(sp)
    3c1c:	18003726 	beq	r3,zero,3cfc <_dtoa_r+0xf88>
    3c20:	b0002016 	blt	r22,zero,3ca4 <_dtoa_r+0xf30>
    3c24:	b000041e 	bne	r22,zero,3c38 <_dtoa_r+0xec4>
    3c28:	d9000317 	ldw	r4,12(sp)
    3c2c:	2000021e 	bne	r4,zero,3c38 <_dtoa_r+0xec4>
    3c30:	d8c00617 	ldw	r3,24(sp)
    3c34:	18001b26 	beq	r3,zero,3ca4 <_dtoa_r+0xf30>
    3c38:	00810716 	blt	zero,r2,4058 <_dtoa_r+0x12e4>
    3c3c:	d8c00417 	ldw	r3,16(sp)
    3c40:	9d800044 	addi	r22,r19,1
    3c44:	9c800005 	stb	r18,0(r19)
    3c48:	b02f883a 	mov	r23,r22
    3c4c:	98c10626 	beq	r19,r3,4068 <_dtoa_r+0x12f4>
    3c50:	800b883a 	mov	r5,r16
    3c54:	000f883a 	mov	r7,zero
    3c58:	01800284 	movi	r6,10
    3c5c:	e009883a 	mov	r4,fp
    3c60:	00064fc0 	call	64fc <__multadd>
    3c64:	1021883a 	mov	r16,r2
    3c68:	000f883a 	mov	r7,zero
    3c6c:	01800284 	movi	r6,10
    3c70:	880b883a 	mov	r5,r17
    3c74:	e009883a 	mov	r4,fp
    3c78:	8d002526 	beq	r17,r20,3d10 <_dtoa_r+0xf9c>
    3c7c:	00064fc0 	call	64fc <__multadd>
    3c80:	a00b883a 	mov	r5,r20
    3c84:	000f883a 	mov	r7,zero
    3c88:	01800284 	movi	r6,10
    3c8c:	e009883a 	mov	r4,fp
    3c90:	1023883a 	mov	r17,r2
    3c94:	00064fc0 	call	64fc <__multadd>
    3c98:	1029883a 	mov	r20,r2
    3c9c:	b027883a 	mov	r19,r22
    3ca0:	003fc006 	br	3ba4 <__alt_data_end+0xfffd1ba4>
    3ca4:	9011883a 	mov	r8,r18
    3ca8:	00800e0e 	bge	zero,r2,3ce4 <_dtoa_r+0xf70>
    3cac:	800b883a 	mov	r5,r16
    3cb0:	01800044 	movi	r6,1
    3cb4:	e009883a 	mov	r4,fp
    3cb8:	da001715 	stw	r8,92(sp)
    3cbc:	0006c680 	call	6c68 <__lshift>
    3cc0:	a80b883a 	mov	r5,r21
    3cc4:	1009883a 	mov	r4,r2
    3cc8:	1021883a 	mov	r16,r2
    3ccc:	0006db00 	call	6db0 <__mcmp>
    3cd0:	da001717 	ldw	r8,92(sp)
    3cd4:	0081960e 	bge	zero,r2,4330 <_dtoa_r+0x15bc>
    3cd8:	00800e44 	movi	r2,57
    3cdc:	40817026 	beq	r8,r2,42a0 <_dtoa_r+0x152c>
    3ce0:	ba000c44 	addi	r8,r23,49
    3ce4:	8825883a 	mov	r18,r17
    3ce8:	9dc00044 	addi	r23,r19,1
    3cec:	9a000005 	stb	r8,0(r19)
    3cf0:	a023883a 	mov	r17,r20
    3cf4:	dc000915 	stw	r16,36(sp)
    3cf8:	003f2406 	br	398c <__alt_data_end+0xfffd198c>
    3cfc:	00800e44 	movi	r2,57
    3d00:	9011883a 	mov	r8,r18
    3d04:	90816626 	beq	r18,r2,42a0 <_dtoa_r+0x152c>
    3d08:	05bff516 	blt	zero,r22,3ce0 <__alt_data_end+0xfffd1ce0>
    3d0c:	003ff506 	br	3ce4 <__alt_data_end+0xfffd1ce4>
    3d10:	00064fc0 	call	64fc <__multadd>
    3d14:	1023883a 	mov	r17,r2
    3d18:	1029883a 	mov	r20,r2
    3d1c:	003fdf06 	br	3c9c <__alt_data_end+0xfffd1c9c>
    3d20:	e009883a 	mov	r4,fp
    3d24:	00064d40 	call	64d4 <_Bfree>
    3d28:	00800044 	movi	r2,1
    3d2c:	003fbc06 	br	3c20 <__alt_data_end+0xfffd1c20>
    3d30:	a80b883a 	mov	r5,r21
    3d34:	8009883a 	mov	r4,r16
    3d38:	0006db00 	call	6db0 <__mcmp>
    3d3c:	103edb0e 	bge	r2,zero,38ac <__alt_data_end+0xfffd18ac>
    3d40:	800b883a 	mov	r5,r16
    3d44:	000f883a 	mov	r7,zero
    3d48:	01800284 	movi	r6,10
    3d4c:	e009883a 	mov	r4,fp
    3d50:	00064fc0 	call	64fc <__multadd>
    3d54:	1021883a 	mov	r16,r2
    3d58:	d8800517 	ldw	r2,20(sp)
    3d5c:	d8c00b17 	ldw	r3,44(sp)
    3d60:	10bfffc4 	addi	r2,r2,-1
    3d64:	d8800515 	stw	r2,20(sp)
    3d68:	183f761e 	bne	r3,zero,3b44 <__alt_data_end+0xfffd1b44>
    3d6c:	d9000c17 	ldw	r4,48(sp)
    3d70:	0101730e 	bge	zero,r4,4340 <_dtoa_r+0x15cc>
    3d74:	d9000615 	stw	r4,24(sp)
    3d78:	003ed006 	br	38bc <__alt_data_end+0xfffd18bc>
    3d7c:	00800084 	movi	r2,2
    3d80:	3081861e 	bne	r6,r2,439c <_dtoa_r+0x1628>
    3d84:	d8000b15 	stw	zero,44(sp)
    3d88:	003f3c06 	br	3a7c <__alt_data_end+0xfffd1a7c>
    3d8c:	dc000917 	ldw	r16,36(sp)
    3d90:	003e9206 	br	37dc <__alt_data_end+0xfffd17dc>
    3d94:	d9c00317 	ldw	r7,12(sp)
    3d98:	00800084 	movi	r2,2
    3d9c:	11fec50e 	bge	r2,r7,38b4 <__alt_data_end+0xfffd18b4>
    3da0:	d9000617 	ldw	r4,24(sp)
    3da4:	20013c1e 	bne	r4,zero,4298 <_dtoa_r+0x1524>
    3da8:	a80b883a 	mov	r5,r21
    3dac:	000f883a 	mov	r7,zero
    3db0:	01800144 	movi	r6,5
    3db4:	e009883a 	mov	r4,fp
    3db8:	00064fc0 	call	64fc <__multadd>
    3dbc:	100b883a 	mov	r5,r2
    3dc0:	8009883a 	mov	r4,r16
    3dc4:	102b883a 	mov	r21,r2
    3dc8:	0006db00 	call	6db0 <__mcmp>
    3dcc:	dc000915 	stw	r16,36(sp)
    3dd0:	00bf410e 	bge	zero,r2,3ad8 <__alt_data_end+0xfffd1ad8>
    3dd4:	d9c00717 	ldw	r7,28(sp)
    3dd8:	00800c44 	movi	r2,49
    3ddc:	38800005 	stb	r2,0(r7)
    3de0:	d8800517 	ldw	r2,20(sp)
    3de4:	3dc00044 	addi	r23,r7,1
    3de8:	10800044 	addi	r2,r2,1
    3dec:	d8800515 	stw	r2,20(sp)
    3df0:	003f3d06 	br	3ae8 <__alt_data_end+0xfffd1ae8>
    3df4:	d9800517 	ldw	r6,20(sp)
    3df8:	d9c00717 	ldw	r7,28(sp)
    3dfc:	00800c44 	movi	r2,49
    3e00:	31800044 	addi	r6,r6,1
    3e04:	d9800515 	stw	r6,20(sp)
    3e08:	38800005 	stb	r2,0(r7)
    3e0c:	003edf06 	br	398c <__alt_data_end+0xfffd198c>
    3e10:	d8000b15 	stw	zero,44(sp)
    3e14:	003c9f06 	br	3094 <__alt_data_end+0xfffd1094>
    3e18:	903e7e1e 	bne	r18,zero,3814 <__alt_data_end+0xfffd1814>
    3e1c:	00800434 	movhi	r2,16
    3e20:	10bfffc4 	addi	r2,r2,-1
    3e24:	9884703a 	and	r2,r19,r2
    3e28:	1000ea1e 	bne	r2,zero,41d4 <_dtoa_r+0x1460>
    3e2c:	9cdffc2c 	andhi	r19,r19,32752
    3e30:	9800e826 	beq	r19,zero,41d4 <_dtoa_r+0x1460>
    3e34:	d9c00817 	ldw	r7,32(sp)
    3e38:	b5800044 	addi	r22,r22,1
    3e3c:	04c00044 	movi	r19,1
    3e40:	39c00044 	addi	r7,r7,1
    3e44:	d9c00815 	stw	r7,32(sp)
    3e48:	d8800d17 	ldw	r2,52(sp)
    3e4c:	103e721e 	bne	r2,zero,3818 <__alt_data_end+0xfffd1818>
    3e50:	00800044 	movi	r2,1
    3e54:	003e7906 	br	383c <__alt_data_end+0xfffd183c>
    3e58:	8009883a 	mov	r4,r16
    3e5c:	000d1c40 	call	d1c4 <__floatsidf>
    3e60:	d9800f17 	ldw	r6,60(sp)
    3e64:	d9c01017 	ldw	r7,64(sp)
    3e68:	1009883a 	mov	r4,r2
    3e6c:	180b883a 	mov	r5,r3
    3e70:	000bfdc0 	call	bfdc <__muldf3>
    3e74:	000d883a 	mov	r6,zero
    3e78:	01d00734 	movhi	r7,16412
    3e7c:	1009883a 	mov	r4,r2
    3e80:	180b883a 	mov	r5,r3
    3e84:	000ab080 	call	ab08 <__adddf3>
    3e88:	047f3034 	movhi	r17,64704
    3e8c:	1021883a 	mov	r16,r2
    3e90:	1c63883a 	add	r17,r3,r17
    3e94:	d9000f17 	ldw	r4,60(sp)
    3e98:	d9401017 	ldw	r5,64(sp)
    3e9c:	000d883a 	mov	r6,zero
    3ea0:	01d00534 	movhi	r7,16404
    3ea4:	000c8480 	call	c848 <__subdf3>
    3ea8:	800d883a 	mov	r6,r16
    3eac:	880f883a 	mov	r7,r17
    3eb0:	1009883a 	mov	r4,r2
    3eb4:	180b883a 	mov	r5,r3
    3eb8:	102b883a 	mov	r21,r2
    3ebc:	1829883a 	mov	r20,r3
    3ec0:	000be0c0 	call	be0c <__gedf2>
    3ec4:	00806c16 	blt	zero,r2,4078 <_dtoa_r+0x1304>
    3ec8:	89e0003c 	xorhi	r7,r17,32768
    3ecc:	800d883a 	mov	r6,r16
    3ed0:	a809883a 	mov	r4,r21
    3ed4:	a00b883a 	mov	r5,r20
    3ed8:	000bee80 	call	bee8 <__ledf2>
    3edc:	103d7e0e 	bge	r2,zero,34d8 <__alt_data_end+0xfffd14d8>
    3ee0:	002b883a 	mov	r21,zero
    3ee4:	0023883a 	mov	r17,zero
    3ee8:	003efb06 	br	3ad8 <__alt_data_end+0xfffd1ad8>
    3eec:	d8800717 	ldw	r2,28(sp)
    3ef0:	003bd006 	br	2e34 <__alt_data_end+0xfffd0e34>
    3ef4:	d9000a17 	ldw	r4,40(sp)
    3ef8:	d9800d17 	ldw	r6,52(sp)
    3efc:	dd400a15 	stw	r21,40(sp)
    3f00:	a905c83a 	sub	r2,r21,r4
    3f04:	308d883a 	add	r6,r6,r2
    3f08:	d9800d15 	stw	r6,52(sp)
    3f0c:	002b883a 	mov	r21,zero
    3f10:	003e0606 	br	372c <__alt_data_end+0xfffd172c>
    3f14:	9023883a 	mov	r17,r18
    3f18:	9829883a 	mov	r20,r19
    3f1c:	04000084 	movi	r16,2
    3f20:	003c9206 	br	316c <__alt_data_end+0xfffd116c>
    3f24:	04000044 	movi	r16,1
    3f28:	dc000c15 	stw	r16,48(sp)
    3f2c:	dc000615 	stw	r16,24(sp)
    3f30:	dc002215 	stw	r16,136(sp)
    3f34:	e0001115 	stw	zero,68(fp)
    3f38:	000b883a 	mov	r5,zero
    3f3c:	003c6906 	br	30e4 <__alt_data_end+0xfffd10e4>
    3f40:	3021883a 	mov	r16,r6
    3f44:	003ffb06 	br	3f34 <__alt_data_end+0xfffd1f34>
    3f48:	1000021e 	bne	r2,zero,3f54 <_dtoa_r+0x11e0>
    3f4c:	4200004c 	andi	r8,r8,1
    3f50:	403e7d1e 	bne	r8,zero,3948 <__alt_data_end+0xfffd1948>
    3f54:	01000c04 	movi	r4,48
    3f58:	00000106 	br	3f60 <_dtoa_r+0x11ec>
    3f5c:	102f883a 	mov	r23,r2
    3f60:	b8bfffc4 	addi	r2,r23,-1
    3f64:	10c00007 	ldb	r3,0(r2)
    3f68:	193ffc26 	beq	r3,r4,3f5c <__alt_data_end+0xfffd1f5c>
    3f6c:	003e8706 	br	398c <__alt_data_end+0xfffd198c>
    3f70:	d8800517 	ldw	r2,20(sp)
    3f74:	00a3c83a 	sub	r17,zero,r2
    3f78:	8800a426 	beq	r17,zero,420c <_dtoa_r+0x1498>
    3f7c:	888003cc 	andi	r2,r17,15
    3f80:	100490fa 	slli	r2,r2,3
    3f84:	00c00074 	movhi	r3,1
    3f88:	18d00e04 	addi	r3,r3,16440
    3f8c:	1885883a 	add	r2,r3,r2
    3f90:	11800017 	ldw	r6,0(r2)
    3f94:	11c00117 	ldw	r7,4(r2)
    3f98:	9009883a 	mov	r4,r18
    3f9c:	980b883a 	mov	r5,r19
    3fa0:	8823d13a 	srai	r17,r17,4
    3fa4:	000bfdc0 	call	bfdc <__muldf3>
    3fa8:	d8800f15 	stw	r2,60(sp)
    3fac:	d8c01015 	stw	r3,64(sp)
    3fb0:	8800e826 	beq	r17,zero,4354 <_dtoa_r+0x15e0>
    3fb4:	05000074 	movhi	r20,1
    3fb8:	a5100404 	addi	r20,r20,16400
    3fbc:	04000084 	movi	r16,2
    3fc0:	8980004c 	andi	r6,r17,1
    3fc4:	1009883a 	mov	r4,r2
    3fc8:	8823d07a 	srai	r17,r17,1
    3fcc:	180b883a 	mov	r5,r3
    3fd0:	30000426 	beq	r6,zero,3fe4 <_dtoa_r+0x1270>
    3fd4:	a1800017 	ldw	r6,0(r20)
    3fd8:	a1c00117 	ldw	r7,4(r20)
    3fdc:	84000044 	addi	r16,r16,1
    3fe0:	000bfdc0 	call	bfdc <__muldf3>
    3fe4:	a5000204 	addi	r20,r20,8
    3fe8:	883ff51e 	bne	r17,zero,3fc0 <__alt_data_end+0xfffd1fc0>
    3fec:	d8800f15 	stw	r2,60(sp)
    3ff0:	d8c01015 	stw	r3,64(sp)
    3ff4:	003c7606 	br	31d0 <__alt_data_end+0xfffd11d0>
    3ff8:	00c00c04 	movi	r3,48
    3ffc:	10c00005 	stb	r3,0(r2)
    4000:	d8c00517 	ldw	r3,20(sp)
    4004:	bd3fffc3 	ldbu	r20,-1(r23)
    4008:	18c00044 	addi	r3,r3,1
    400c:	d8c00515 	stw	r3,20(sp)
    4010:	003db906 	br	36f8 <__alt_data_end+0xfffd16f8>
    4014:	89400117 	ldw	r5,4(r17)
    4018:	e009883a 	mov	r4,fp
    401c:	000642c0 	call	642c <_Balloc>
    4020:	89800417 	ldw	r6,16(r17)
    4024:	89400304 	addi	r5,r17,12
    4028:	11000304 	addi	r4,r2,12
    402c:	31800084 	addi	r6,r6,2
    4030:	318d883a 	add	r6,r6,r6
    4034:	318d883a 	add	r6,r6,r6
    4038:	1027883a 	mov	r19,r2
    403c:	00060600 	call	6060 <memcpy>
    4040:	01800044 	movi	r6,1
    4044:	980b883a 	mov	r5,r19
    4048:	e009883a 	mov	r4,fp
    404c:	0006c680 	call	6c68 <__lshift>
    4050:	1029883a 	mov	r20,r2
    4054:	003ecc06 	br	3b88 <__alt_data_end+0xfffd1b88>
    4058:	00800e44 	movi	r2,57
    405c:	90809026 	beq	r18,r2,42a0 <_dtoa_r+0x152c>
    4060:	92000044 	addi	r8,r18,1
    4064:	003f1f06 	br	3ce4 <__alt_data_end+0xfffd1ce4>
    4068:	9011883a 	mov	r8,r18
    406c:	8825883a 	mov	r18,r17
    4070:	a023883a 	mov	r17,r20
    4074:	003e2906 	br	391c <__alt_data_end+0xfffd191c>
    4078:	002b883a 	mov	r21,zero
    407c:	0023883a 	mov	r17,zero
    4080:	003f5406 	br	3dd4 <__alt_data_end+0xfffd1dd4>
    4084:	61bfffc4 	addi	r6,r12,-1
    4088:	300490fa 	slli	r2,r6,3
    408c:	00c00074 	movhi	r3,1
    4090:	18d00e04 	addi	r3,r3,16440
    4094:	1885883a 	add	r2,r3,r2
    4098:	11000017 	ldw	r4,0(r2)
    409c:	11400117 	ldw	r5,4(r2)
    40a0:	d8800717 	ldw	r2,28(sp)
    40a4:	880f883a 	mov	r7,r17
    40a8:	d9801215 	stw	r6,72(sp)
    40ac:	800d883a 	mov	r6,r16
    40b0:	db001615 	stw	r12,88(sp)
    40b4:	15c00044 	addi	r23,r2,1
    40b8:	000bfdc0 	call	bfdc <__muldf3>
    40bc:	d9401017 	ldw	r5,64(sp)
    40c0:	d9000f17 	ldw	r4,60(sp)
    40c4:	d8c01515 	stw	r3,84(sp)
    40c8:	d8801415 	stw	r2,80(sp)
    40cc:	000d1440 	call	d144 <__fixdfsi>
    40d0:	1009883a 	mov	r4,r2
    40d4:	1021883a 	mov	r16,r2
    40d8:	000d1c40 	call	d1c4 <__floatsidf>
    40dc:	d9000f17 	ldw	r4,60(sp)
    40e0:	d9401017 	ldw	r5,64(sp)
    40e4:	100d883a 	mov	r6,r2
    40e8:	180f883a 	mov	r7,r3
    40ec:	000c8480 	call	c848 <__subdf3>
    40f0:	1829883a 	mov	r20,r3
    40f4:	d8c00717 	ldw	r3,28(sp)
    40f8:	84000c04 	addi	r16,r16,48
    40fc:	1023883a 	mov	r17,r2
    4100:	1c000005 	stb	r16,0(r3)
    4104:	db001617 	ldw	r12,88(sp)
    4108:	00800044 	movi	r2,1
    410c:	60802226 	beq	r12,r2,4198 <_dtoa_r+0x1424>
    4110:	d9c00717 	ldw	r7,28(sp)
    4114:	8805883a 	mov	r2,r17
    4118:	b82b883a 	mov	r21,r23
    411c:	3b19883a 	add	r12,r7,r12
    4120:	6023883a 	mov	r17,r12
    4124:	a007883a 	mov	r3,r20
    4128:	dc800f15 	stw	r18,60(sp)
    412c:	000d883a 	mov	r6,zero
    4130:	01d00934 	movhi	r7,16420
    4134:	1009883a 	mov	r4,r2
    4138:	180b883a 	mov	r5,r3
    413c:	000bfdc0 	call	bfdc <__muldf3>
    4140:	180b883a 	mov	r5,r3
    4144:	1009883a 	mov	r4,r2
    4148:	1829883a 	mov	r20,r3
    414c:	1025883a 	mov	r18,r2
    4150:	000d1440 	call	d144 <__fixdfsi>
    4154:	1009883a 	mov	r4,r2
    4158:	1021883a 	mov	r16,r2
    415c:	000d1c40 	call	d1c4 <__floatsidf>
    4160:	100d883a 	mov	r6,r2
    4164:	180f883a 	mov	r7,r3
    4168:	9009883a 	mov	r4,r18
    416c:	a00b883a 	mov	r5,r20
    4170:	84000c04 	addi	r16,r16,48
    4174:	000c8480 	call	c848 <__subdf3>
    4178:	ad400044 	addi	r21,r21,1
    417c:	ac3fffc5 	stb	r16,-1(r21)
    4180:	ac7fea1e 	bne	r21,r17,412c <__alt_data_end+0xfffd212c>
    4184:	1023883a 	mov	r17,r2
    4188:	d8801217 	ldw	r2,72(sp)
    418c:	dc800f17 	ldw	r18,60(sp)
    4190:	1829883a 	mov	r20,r3
    4194:	b8af883a 	add	r23,r23,r2
    4198:	d9001417 	ldw	r4,80(sp)
    419c:	d9401517 	ldw	r5,84(sp)
    41a0:	000d883a 	mov	r6,zero
    41a4:	01cff834 	movhi	r7,16352
    41a8:	000ab080 	call	ab08 <__adddf3>
    41ac:	880d883a 	mov	r6,r17
    41b0:	a00f883a 	mov	r7,r20
    41b4:	1009883a 	mov	r4,r2
    41b8:	180b883a 	mov	r5,r3
    41bc:	000bee80 	call	bee8 <__ledf2>
    41c0:	10003e0e 	bge	r2,zero,42bc <_dtoa_r+0x1548>
    41c4:	d9001317 	ldw	r4,76(sp)
    41c8:	bd3fffc3 	ldbu	r20,-1(r23)
    41cc:	d9000515 	stw	r4,20(sp)
    41d0:	003d3b06 	br	36c0 <__alt_data_end+0xfffd16c0>
    41d4:	0027883a 	mov	r19,zero
    41d8:	003f1b06 	br	3e48 <__alt_data_end+0xfffd1e48>
    41dc:	d8800817 	ldw	r2,32(sp)
    41e0:	11e9c83a 	sub	r20,r2,r7
    41e4:	0005883a 	mov	r2,zero
    41e8:	003d5406 	br	373c <__alt_data_end+0xfffd173c>
    41ec:	00800044 	movi	r2,1
    41f0:	003dc706 	br	3910 <__alt_data_end+0xfffd1910>
    41f4:	d8c00217 	ldw	r3,8(sp)
    41f8:	00800d84 	movi	r2,54
    41fc:	dd400a17 	ldw	r21,40(sp)
    4200:	10c5c83a 	sub	r2,r2,r3
    4204:	dd000817 	ldw	r20,32(sp)
    4208:	003d4c06 	br	373c <__alt_data_end+0xfffd173c>
    420c:	dc800f15 	stw	r18,60(sp)
    4210:	dcc01015 	stw	r19,64(sp)
    4214:	04000084 	movi	r16,2
    4218:	003bed06 	br	31d0 <__alt_data_end+0xfffd11d0>
    421c:	d9000617 	ldw	r4,24(sp)
    4220:	203f0d26 	beq	r4,zero,3e58 <__alt_data_end+0xfffd1e58>
    4224:	d9800c17 	ldw	r6,48(sp)
    4228:	01bcab0e 	bge	zero,r6,34d8 <__alt_data_end+0xfffd14d8>
    422c:	d9401017 	ldw	r5,64(sp)
    4230:	d9000f17 	ldw	r4,60(sp)
    4234:	000d883a 	mov	r6,zero
    4238:	01d00934 	movhi	r7,16420
    423c:	000bfdc0 	call	bfdc <__muldf3>
    4240:	81000044 	addi	r4,r16,1
    4244:	d8800f15 	stw	r2,60(sp)
    4248:	d8c01015 	stw	r3,64(sp)
    424c:	000d1c40 	call	d1c4 <__floatsidf>
    4250:	d9800f17 	ldw	r6,60(sp)
    4254:	d9c01017 	ldw	r7,64(sp)
    4258:	1009883a 	mov	r4,r2
    425c:	180b883a 	mov	r5,r3
    4260:	000bfdc0 	call	bfdc <__muldf3>
    4264:	01d00734 	movhi	r7,16412
    4268:	000d883a 	mov	r6,zero
    426c:	1009883a 	mov	r4,r2
    4270:	180b883a 	mov	r5,r3
    4274:	000ab080 	call	ab08 <__adddf3>
    4278:	d9c00517 	ldw	r7,20(sp)
    427c:	047f3034 	movhi	r17,64704
    4280:	1021883a 	mov	r16,r2
    4284:	39ffffc4 	addi	r7,r7,-1
    4288:	d9c01315 	stw	r7,76(sp)
    428c:	1c63883a 	add	r17,r3,r17
    4290:	db000c17 	ldw	r12,48(sp)
    4294:	003bea06 	br	3240 <__alt_data_end+0xfffd1240>
    4298:	dc000915 	stw	r16,36(sp)
    429c:	003e0e06 	br	3ad8 <__alt_data_end+0xfffd1ad8>
    42a0:	01000e44 	movi	r4,57
    42a4:	8825883a 	mov	r18,r17
    42a8:	9dc00044 	addi	r23,r19,1
    42ac:	99000005 	stb	r4,0(r19)
    42b0:	a023883a 	mov	r17,r20
    42b4:	dc000915 	stw	r16,36(sp)
    42b8:	003da406 	br	394c <__alt_data_end+0xfffd194c>
    42bc:	d9801417 	ldw	r6,80(sp)
    42c0:	d9c01517 	ldw	r7,84(sp)
    42c4:	0009883a 	mov	r4,zero
    42c8:	014ff834 	movhi	r5,16352
    42cc:	000c8480 	call	c848 <__subdf3>
    42d0:	880d883a 	mov	r6,r17
    42d4:	a00f883a 	mov	r7,r20
    42d8:	1009883a 	mov	r4,r2
    42dc:	180b883a 	mov	r5,r3
    42e0:	000be0c0 	call	be0c <__gedf2>
    42e4:	00bc7c0e 	bge	zero,r2,34d8 <__alt_data_end+0xfffd14d8>
    42e8:	01000c04 	movi	r4,48
    42ec:	00000106 	br	42f4 <_dtoa_r+0x1580>
    42f0:	102f883a 	mov	r23,r2
    42f4:	b8bfffc4 	addi	r2,r23,-1
    42f8:	10c00007 	ldb	r3,0(r2)
    42fc:	193ffc26 	beq	r3,r4,42f0 <__alt_data_end+0xfffd22f0>
    4300:	d9801317 	ldw	r6,76(sp)
    4304:	d9800515 	stw	r6,20(sp)
    4308:	003c4406 	br	341c <__alt_data_end+0xfffd141c>
    430c:	d9801317 	ldw	r6,76(sp)
    4310:	d9800515 	stw	r6,20(sp)
    4314:	003cea06 	br	36c0 <__alt_data_end+0xfffd16c0>
    4318:	dd800f17 	ldw	r22,60(sp)
    431c:	dcc01017 	ldw	r19,64(sp)
    4320:	dc801217 	ldw	r18,72(sp)
    4324:	003c6c06 	br	34d8 <__alt_data_end+0xfffd14d8>
    4328:	903e031e 	bne	r18,zero,3b38 <__alt_data_end+0xfffd1b38>
    432c:	003ebb06 	br	3e1c <__alt_data_end+0xfffd1e1c>
    4330:	103e6c1e 	bne	r2,zero,3ce4 <__alt_data_end+0xfffd1ce4>
    4334:	4080004c 	andi	r2,r8,1
    4338:	103e6a26 	beq	r2,zero,3ce4 <__alt_data_end+0xfffd1ce4>
    433c:	003e6606 	br	3cd8 <__alt_data_end+0xfffd1cd8>
    4340:	d8c00317 	ldw	r3,12(sp)
    4344:	00800084 	movi	r2,2
    4348:	10c02916 	blt	r2,r3,43f0 <_dtoa_r+0x167c>
    434c:	d9000c17 	ldw	r4,48(sp)
    4350:	003e8806 	br	3d74 <__alt_data_end+0xfffd1d74>
    4354:	04000084 	movi	r16,2
    4358:	003b9d06 	br	31d0 <__alt_data_end+0xfffd11d0>
    435c:	d9001317 	ldw	r4,76(sp)
    4360:	d9000515 	stw	r4,20(sp)
    4364:	003cd606 	br	36c0 <__alt_data_end+0xfffd16c0>
    4368:	d8801317 	ldw	r2,76(sp)
    436c:	d8800515 	stw	r2,20(sp)
    4370:	003c2a06 	br	341c <__alt_data_end+0xfffd141c>
    4374:	d9800317 	ldw	r6,12(sp)
    4378:	00800084 	movi	r2,2
    437c:	11801516 	blt	r2,r6,43d4 <_dtoa_r+0x1660>
    4380:	d9c00c17 	ldw	r7,48(sp)
    4384:	d9c00615 	stw	r7,24(sp)
    4388:	003df706 	br	3b68 <__alt_data_end+0xfffd1b68>
    438c:	193d3926 	beq	r3,r4,3874 <__alt_data_end+0xfffd1874>
    4390:	00c00f04 	movi	r3,60
    4394:	1885c83a 	sub	r2,r3,r2
    4398:	003ddf06 	br	3b18 <__alt_data_end+0xfffd1b18>
    439c:	e009883a 	mov	r4,fp
    43a0:	e0001115 	stw	zero,68(fp)
    43a4:	000b883a 	mov	r5,zero
    43a8:	000642c0 	call	642c <_Balloc>
    43ac:	d8800715 	stw	r2,28(sp)
    43b0:	d8c00717 	ldw	r3,28(sp)
    43b4:	00bfffc4 	movi	r2,-1
    43b8:	01000044 	movi	r4,1
    43bc:	d8800c15 	stw	r2,48(sp)
    43c0:	e0c01015 	stw	r3,64(fp)
    43c4:	d9000b15 	stw	r4,44(sp)
    43c8:	d8800615 	stw	r2,24(sp)
    43cc:	d8002215 	stw	zero,136(sp)
    43d0:	003c4106 	br	34d8 <__alt_data_end+0xfffd14d8>
    43d4:	d8c00c17 	ldw	r3,48(sp)
    43d8:	d8c00615 	stw	r3,24(sp)
    43dc:	003e7006 	br	3da0 <__alt_data_end+0xfffd1da0>
    43e0:	04400044 	movi	r17,1
    43e4:	003b2006 	br	3068 <__alt_data_end+0xfffd1068>
    43e8:	000b883a 	mov	r5,zero
    43ec:	003b3d06 	br	30e4 <__alt_data_end+0xfffd10e4>
    43f0:	d8800c17 	ldw	r2,48(sp)
    43f4:	d8800615 	stw	r2,24(sp)
    43f8:	003e6906 	br	3da0 <__alt_data_end+0xfffd1da0>

000043fc <__sflush_r>:
    43fc:	2880030b 	ldhu	r2,12(r5)
    4400:	defffb04 	addi	sp,sp,-20
    4404:	dcc00315 	stw	r19,12(sp)
    4408:	dc400115 	stw	r17,4(sp)
    440c:	dfc00415 	stw	ra,16(sp)
    4410:	dc800215 	stw	r18,8(sp)
    4414:	dc000015 	stw	r16,0(sp)
    4418:	10c0020c 	andi	r3,r2,8
    441c:	2823883a 	mov	r17,r5
    4420:	2027883a 	mov	r19,r4
    4424:	1800311e 	bne	r3,zero,44ec <__sflush_r+0xf0>
    4428:	28c00117 	ldw	r3,4(r5)
    442c:	10820014 	ori	r2,r2,2048
    4430:	2880030d 	sth	r2,12(r5)
    4434:	00c04b0e 	bge	zero,r3,4564 <__sflush_r+0x168>
    4438:	8a000a17 	ldw	r8,40(r17)
    443c:	40002326 	beq	r8,zero,44cc <__sflush_r+0xd0>
    4440:	9c000017 	ldw	r16,0(r19)
    4444:	10c4000c 	andi	r3,r2,4096
    4448:	98000015 	stw	zero,0(r19)
    444c:	18004826 	beq	r3,zero,4570 <__sflush_r+0x174>
    4450:	89801417 	ldw	r6,80(r17)
    4454:	10c0010c 	andi	r3,r2,4
    4458:	18000626 	beq	r3,zero,4474 <__sflush_r+0x78>
    445c:	88c00117 	ldw	r3,4(r17)
    4460:	88800c17 	ldw	r2,48(r17)
    4464:	30cdc83a 	sub	r6,r6,r3
    4468:	10000226 	beq	r2,zero,4474 <__sflush_r+0x78>
    446c:	88800f17 	ldw	r2,60(r17)
    4470:	308dc83a 	sub	r6,r6,r2
    4474:	89400717 	ldw	r5,28(r17)
    4478:	000f883a 	mov	r7,zero
    447c:	9809883a 	mov	r4,r19
    4480:	403ee83a 	callr	r8
    4484:	00ffffc4 	movi	r3,-1
    4488:	10c04426 	beq	r2,r3,459c <__sflush_r+0x1a0>
    448c:	88c0030b 	ldhu	r3,12(r17)
    4490:	89000417 	ldw	r4,16(r17)
    4494:	88000115 	stw	zero,4(r17)
    4498:	197dffcc 	andi	r5,r3,63487
    449c:	8940030d 	sth	r5,12(r17)
    44a0:	89000015 	stw	r4,0(r17)
    44a4:	18c4000c 	andi	r3,r3,4096
    44a8:	18002c1e 	bne	r3,zero,455c <__sflush_r+0x160>
    44ac:	89400c17 	ldw	r5,48(r17)
    44b0:	9c000015 	stw	r16,0(r19)
    44b4:	28000526 	beq	r5,zero,44cc <__sflush_r+0xd0>
    44b8:	88801004 	addi	r2,r17,64
    44bc:	28800226 	beq	r5,r2,44c8 <__sflush_r+0xcc>
    44c0:	9809883a 	mov	r4,r19
    44c4:	0004b780 	call	4b78 <_free_r>
    44c8:	88000c15 	stw	zero,48(r17)
    44cc:	0005883a 	mov	r2,zero
    44d0:	dfc00417 	ldw	ra,16(sp)
    44d4:	dcc00317 	ldw	r19,12(sp)
    44d8:	dc800217 	ldw	r18,8(sp)
    44dc:	dc400117 	ldw	r17,4(sp)
    44e0:	dc000017 	ldw	r16,0(sp)
    44e4:	dec00504 	addi	sp,sp,20
    44e8:	f800283a 	ret
    44ec:	2c800417 	ldw	r18,16(r5)
    44f0:	903ff626 	beq	r18,zero,44cc <__alt_data_end+0xfffd24cc>
    44f4:	2c000017 	ldw	r16,0(r5)
    44f8:	108000cc 	andi	r2,r2,3
    44fc:	2c800015 	stw	r18,0(r5)
    4500:	84a1c83a 	sub	r16,r16,r18
    4504:	1000131e 	bne	r2,zero,4554 <__sflush_r+0x158>
    4508:	28800517 	ldw	r2,20(r5)
    450c:	88800215 	stw	r2,8(r17)
    4510:	04000316 	blt	zero,r16,4520 <__sflush_r+0x124>
    4514:	003fed06 	br	44cc <__alt_data_end+0xfffd24cc>
    4518:	90a5883a 	add	r18,r18,r2
    451c:	043feb0e 	bge	zero,r16,44cc <__alt_data_end+0xfffd24cc>
    4520:	88800917 	ldw	r2,36(r17)
    4524:	89400717 	ldw	r5,28(r17)
    4528:	800f883a 	mov	r7,r16
    452c:	900d883a 	mov	r6,r18
    4530:	9809883a 	mov	r4,r19
    4534:	103ee83a 	callr	r2
    4538:	80a1c83a 	sub	r16,r16,r2
    453c:	00bff616 	blt	zero,r2,4518 <__alt_data_end+0xfffd2518>
    4540:	88c0030b 	ldhu	r3,12(r17)
    4544:	00bfffc4 	movi	r2,-1
    4548:	18c01014 	ori	r3,r3,64
    454c:	88c0030d 	sth	r3,12(r17)
    4550:	003fdf06 	br	44d0 <__alt_data_end+0xfffd24d0>
    4554:	0005883a 	mov	r2,zero
    4558:	003fec06 	br	450c <__alt_data_end+0xfffd250c>
    455c:	88801415 	stw	r2,80(r17)
    4560:	003fd206 	br	44ac <__alt_data_end+0xfffd24ac>
    4564:	28c00f17 	ldw	r3,60(r5)
    4568:	00ffb316 	blt	zero,r3,4438 <__alt_data_end+0xfffd2438>
    456c:	003fd706 	br	44cc <__alt_data_end+0xfffd24cc>
    4570:	89400717 	ldw	r5,28(r17)
    4574:	000d883a 	mov	r6,zero
    4578:	01c00044 	movi	r7,1
    457c:	9809883a 	mov	r4,r19
    4580:	403ee83a 	callr	r8
    4584:	100d883a 	mov	r6,r2
    4588:	00bfffc4 	movi	r2,-1
    458c:	30801426 	beq	r6,r2,45e0 <__sflush_r+0x1e4>
    4590:	8880030b 	ldhu	r2,12(r17)
    4594:	8a000a17 	ldw	r8,40(r17)
    4598:	003fae06 	br	4454 <__alt_data_end+0xfffd2454>
    459c:	98c00017 	ldw	r3,0(r19)
    45a0:	183fba26 	beq	r3,zero,448c <__alt_data_end+0xfffd248c>
    45a4:	01000744 	movi	r4,29
    45a8:	19000626 	beq	r3,r4,45c4 <__sflush_r+0x1c8>
    45ac:	01000584 	movi	r4,22
    45b0:	19000426 	beq	r3,r4,45c4 <__sflush_r+0x1c8>
    45b4:	88c0030b 	ldhu	r3,12(r17)
    45b8:	18c01014 	ori	r3,r3,64
    45bc:	88c0030d 	sth	r3,12(r17)
    45c0:	003fc306 	br	44d0 <__alt_data_end+0xfffd24d0>
    45c4:	8880030b 	ldhu	r2,12(r17)
    45c8:	88c00417 	ldw	r3,16(r17)
    45cc:	88000115 	stw	zero,4(r17)
    45d0:	10bdffcc 	andi	r2,r2,63487
    45d4:	8880030d 	sth	r2,12(r17)
    45d8:	88c00015 	stw	r3,0(r17)
    45dc:	003fb306 	br	44ac <__alt_data_end+0xfffd24ac>
    45e0:	98800017 	ldw	r2,0(r19)
    45e4:	103fea26 	beq	r2,zero,4590 <__alt_data_end+0xfffd2590>
    45e8:	00c00744 	movi	r3,29
    45ec:	10c00226 	beq	r2,r3,45f8 <__sflush_r+0x1fc>
    45f0:	00c00584 	movi	r3,22
    45f4:	10c0031e 	bne	r2,r3,4604 <__sflush_r+0x208>
    45f8:	9c000015 	stw	r16,0(r19)
    45fc:	0005883a 	mov	r2,zero
    4600:	003fb306 	br	44d0 <__alt_data_end+0xfffd24d0>
    4604:	88c0030b 	ldhu	r3,12(r17)
    4608:	3005883a 	mov	r2,r6
    460c:	18c01014 	ori	r3,r3,64
    4610:	88c0030d 	sth	r3,12(r17)
    4614:	003fae06 	br	44d0 <__alt_data_end+0xfffd24d0>

00004618 <_fflush_r>:
    4618:	defffd04 	addi	sp,sp,-12
    461c:	dc000115 	stw	r16,4(sp)
    4620:	dfc00215 	stw	ra,8(sp)
    4624:	2021883a 	mov	r16,r4
    4628:	20000226 	beq	r4,zero,4634 <_fflush_r+0x1c>
    462c:	20800e17 	ldw	r2,56(r4)
    4630:	10000c26 	beq	r2,zero,4664 <_fflush_r+0x4c>
    4634:	2880030f 	ldh	r2,12(r5)
    4638:	1000051e 	bne	r2,zero,4650 <_fflush_r+0x38>
    463c:	0005883a 	mov	r2,zero
    4640:	dfc00217 	ldw	ra,8(sp)
    4644:	dc000117 	ldw	r16,4(sp)
    4648:	dec00304 	addi	sp,sp,12
    464c:	f800283a 	ret
    4650:	8009883a 	mov	r4,r16
    4654:	dfc00217 	ldw	ra,8(sp)
    4658:	dc000117 	ldw	r16,4(sp)
    465c:	dec00304 	addi	sp,sp,12
    4660:	00043fc1 	jmpi	43fc <__sflush_r>
    4664:	d9400015 	stw	r5,0(sp)
    4668:	0004a040 	call	4a04 <__sinit>
    466c:	d9400017 	ldw	r5,0(sp)
    4670:	003ff006 	br	4634 <__alt_data_end+0xfffd2634>

00004674 <fflush>:
    4674:	20000526 	beq	r4,zero,468c <fflush+0x18>
    4678:	00800074 	movhi	r2,1
    467c:	10974b04 	addi	r2,r2,23852
    4680:	200b883a 	mov	r5,r4
    4684:	11000017 	ldw	r4,0(r2)
    4688:	00046181 	jmpi	4618 <_fflush_r>
    468c:	00800074 	movhi	r2,1
    4690:	10974a04 	addi	r2,r2,23848
    4694:	11000017 	ldw	r4,0(r2)
    4698:	01400034 	movhi	r5,0
    469c:	29518604 	addi	r5,r5,17944
    46a0:	00054141 	jmpi	5414 <_fwalk_reent>

000046a4 <__fp_unlock>:
    46a4:	0005883a 	mov	r2,zero
    46a8:	f800283a 	ret

000046ac <_cleanup_r>:
    46ac:	01400074 	movhi	r5,1
    46b0:	29656c04 	addi	r5,r5,-27216
    46b4:	00054141 	jmpi	5414 <_fwalk_reent>

000046b8 <__sinit.part.1>:
    46b8:	defff704 	addi	sp,sp,-36
    46bc:	00c00034 	movhi	r3,0
    46c0:	dfc00815 	stw	ra,32(sp)
    46c4:	ddc00715 	stw	r23,28(sp)
    46c8:	dd800615 	stw	r22,24(sp)
    46cc:	dd400515 	stw	r21,20(sp)
    46d0:	dd000415 	stw	r20,16(sp)
    46d4:	dcc00315 	stw	r19,12(sp)
    46d8:	dc800215 	stw	r18,8(sp)
    46dc:	dc400115 	stw	r17,4(sp)
    46e0:	dc000015 	stw	r16,0(sp)
    46e4:	18d1ab04 	addi	r3,r3,18092
    46e8:	24000117 	ldw	r16,4(r4)
    46ec:	20c00f15 	stw	r3,60(r4)
    46f0:	2080bb04 	addi	r2,r4,748
    46f4:	00c000c4 	movi	r3,3
    46f8:	20c0b915 	stw	r3,740(r4)
    46fc:	2080ba15 	stw	r2,744(r4)
    4700:	2000b815 	stw	zero,736(r4)
    4704:	05c00204 	movi	r23,8
    4708:	00800104 	movi	r2,4
    470c:	2025883a 	mov	r18,r4
    4710:	b80d883a 	mov	r6,r23
    4714:	81001704 	addi	r4,r16,92
    4718:	000b883a 	mov	r5,zero
    471c:	80000015 	stw	zero,0(r16)
    4720:	80000115 	stw	zero,4(r16)
    4724:	80000215 	stw	zero,8(r16)
    4728:	8080030d 	sth	r2,12(r16)
    472c:	80001915 	stw	zero,100(r16)
    4730:	8000038d 	sth	zero,14(r16)
    4734:	80000415 	stw	zero,16(r16)
    4738:	80000515 	stw	zero,20(r16)
    473c:	80000615 	stw	zero,24(r16)
    4740:	00063040 	call	6304 <memset>
    4744:	05800034 	movhi	r22,0
    4748:	94400217 	ldw	r17,8(r18)
    474c:	05400034 	movhi	r21,0
    4750:	05000034 	movhi	r20,0
    4754:	04c00034 	movhi	r19,0
    4758:	b59ec404 	addi	r22,r22,31504
    475c:	ad5edb04 	addi	r21,r21,31596
    4760:	a51efa04 	addi	r20,r20,31720
    4764:	9cdf1104 	addi	r19,r19,31812
    4768:	85800815 	stw	r22,32(r16)
    476c:	85400915 	stw	r21,36(r16)
    4770:	85000a15 	stw	r20,40(r16)
    4774:	84c00b15 	stw	r19,44(r16)
    4778:	84000715 	stw	r16,28(r16)
    477c:	00800284 	movi	r2,10
    4780:	8880030d 	sth	r2,12(r17)
    4784:	00800044 	movi	r2,1
    4788:	b80d883a 	mov	r6,r23
    478c:	89001704 	addi	r4,r17,92
    4790:	000b883a 	mov	r5,zero
    4794:	88000015 	stw	zero,0(r17)
    4798:	88000115 	stw	zero,4(r17)
    479c:	88000215 	stw	zero,8(r17)
    47a0:	88001915 	stw	zero,100(r17)
    47a4:	8880038d 	sth	r2,14(r17)
    47a8:	88000415 	stw	zero,16(r17)
    47ac:	88000515 	stw	zero,20(r17)
    47b0:	88000615 	stw	zero,24(r17)
    47b4:	00063040 	call	6304 <memset>
    47b8:	94000317 	ldw	r16,12(r18)
    47bc:	00800484 	movi	r2,18
    47c0:	8c400715 	stw	r17,28(r17)
    47c4:	8d800815 	stw	r22,32(r17)
    47c8:	8d400915 	stw	r21,36(r17)
    47cc:	8d000a15 	stw	r20,40(r17)
    47d0:	8cc00b15 	stw	r19,44(r17)
    47d4:	8080030d 	sth	r2,12(r16)
    47d8:	00800084 	movi	r2,2
    47dc:	80000015 	stw	zero,0(r16)
    47e0:	80000115 	stw	zero,4(r16)
    47e4:	80000215 	stw	zero,8(r16)
    47e8:	80001915 	stw	zero,100(r16)
    47ec:	8080038d 	sth	r2,14(r16)
    47f0:	80000415 	stw	zero,16(r16)
    47f4:	80000515 	stw	zero,20(r16)
    47f8:	80000615 	stw	zero,24(r16)
    47fc:	b80d883a 	mov	r6,r23
    4800:	000b883a 	mov	r5,zero
    4804:	81001704 	addi	r4,r16,92
    4808:	00063040 	call	6304 <memset>
    480c:	00800044 	movi	r2,1
    4810:	84000715 	stw	r16,28(r16)
    4814:	85800815 	stw	r22,32(r16)
    4818:	85400915 	stw	r21,36(r16)
    481c:	85000a15 	stw	r20,40(r16)
    4820:	84c00b15 	stw	r19,44(r16)
    4824:	90800e15 	stw	r2,56(r18)
    4828:	dfc00817 	ldw	ra,32(sp)
    482c:	ddc00717 	ldw	r23,28(sp)
    4830:	dd800617 	ldw	r22,24(sp)
    4834:	dd400517 	ldw	r21,20(sp)
    4838:	dd000417 	ldw	r20,16(sp)
    483c:	dcc00317 	ldw	r19,12(sp)
    4840:	dc800217 	ldw	r18,8(sp)
    4844:	dc400117 	ldw	r17,4(sp)
    4848:	dc000017 	ldw	r16,0(sp)
    484c:	dec00904 	addi	sp,sp,36
    4850:	f800283a 	ret

00004854 <__fp_lock>:
    4854:	0005883a 	mov	r2,zero
    4858:	f800283a 	ret

0000485c <__sfmoreglue>:
    485c:	defffc04 	addi	sp,sp,-16
    4860:	dc800215 	stw	r18,8(sp)
    4864:	2825883a 	mov	r18,r5
    4868:	dc000015 	stw	r16,0(sp)
    486c:	01401a04 	movi	r5,104
    4870:	2021883a 	mov	r16,r4
    4874:	913fffc4 	addi	r4,r18,-1
    4878:	dfc00315 	stw	ra,12(sp)
    487c:	dc400115 	stw	r17,4(sp)
    4880:	000aae00 	call	aae0 <__mulsi3>
    4884:	8009883a 	mov	r4,r16
    4888:	11401d04 	addi	r5,r2,116
    488c:	1023883a 	mov	r17,r2
    4890:	00057700 	call	5770 <_malloc_r>
    4894:	1021883a 	mov	r16,r2
    4898:	10000726 	beq	r2,zero,48b8 <__sfmoreglue+0x5c>
    489c:	11000304 	addi	r4,r2,12
    48a0:	10000015 	stw	zero,0(r2)
    48a4:	14800115 	stw	r18,4(r2)
    48a8:	11000215 	stw	r4,8(r2)
    48ac:	89801a04 	addi	r6,r17,104
    48b0:	000b883a 	mov	r5,zero
    48b4:	00063040 	call	6304 <memset>
    48b8:	8005883a 	mov	r2,r16
    48bc:	dfc00317 	ldw	ra,12(sp)
    48c0:	dc800217 	ldw	r18,8(sp)
    48c4:	dc400117 	ldw	r17,4(sp)
    48c8:	dc000017 	ldw	r16,0(sp)
    48cc:	dec00404 	addi	sp,sp,16
    48d0:	f800283a 	ret

000048d4 <__sfp>:
    48d4:	defffb04 	addi	sp,sp,-20
    48d8:	dc000015 	stw	r16,0(sp)
    48dc:	04000074 	movhi	r16,1
    48e0:	84174a04 	addi	r16,r16,23848
    48e4:	dcc00315 	stw	r19,12(sp)
    48e8:	2027883a 	mov	r19,r4
    48ec:	81000017 	ldw	r4,0(r16)
    48f0:	dfc00415 	stw	ra,16(sp)
    48f4:	dc800215 	stw	r18,8(sp)
    48f8:	20800e17 	ldw	r2,56(r4)
    48fc:	dc400115 	stw	r17,4(sp)
    4900:	1000021e 	bne	r2,zero,490c <__sfp+0x38>
    4904:	00046b80 	call	46b8 <__sinit.part.1>
    4908:	81000017 	ldw	r4,0(r16)
    490c:	2480b804 	addi	r18,r4,736
    4910:	047fffc4 	movi	r17,-1
    4914:	91000117 	ldw	r4,4(r18)
    4918:	94000217 	ldw	r16,8(r18)
    491c:	213fffc4 	addi	r4,r4,-1
    4920:	20000a16 	blt	r4,zero,494c <__sfp+0x78>
    4924:	8080030f 	ldh	r2,12(r16)
    4928:	10000c26 	beq	r2,zero,495c <__sfp+0x88>
    492c:	80c01d04 	addi	r3,r16,116
    4930:	00000206 	br	493c <__sfp+0x68>
    4934:	18bfe60f 	ldh	r2,-104(r3)
    4938:	10000826 	beq	r2,zero,495c <__sfp+0x88>
    493c:	213fffc4 	addi	r4,r4,-1
    4940:	1c3ffd04 	addi	r16,r3,-12
    4944:	18c01a04 	addi	r3,r3,104
    4948:	247ffa1e 	bne	r4,r17,4934 <__alt_data_end+0xfffd2934>
    494c:	90800017 	ldw	r2,0(r18)
    4950:	10001d26 	beq	r2,zero,49c8 <__sfp+0xf4>
    4954:	1025883a 	mov	r18,r2
    4958:	003fee06 	br	4914 <__alt_data_end+0xfffd2914>
    495c:	00bfffc4 	movi	r2,-1
    4960:	8080038d 	sth	r2,14(r16)
    4964:	00800044 	movi	r2,1
    4968:	8080030d 	sth	r2,12(r16)
    496c:	80001915 	stw	zero,100(r16)
    4970:	80000015 	stw	zero,0(r16)
    4974:	80000215 	stw	zero,8(r16)
    4978:	80000115 	stw	zero,4(r16)
    497c:	80000415 	stw	zero,16(r16)
    4980:	80000515 	stw	zero,20(r16)
    4984:	80000615 	stw	zero,24(r16)
    4988:	01800204 	movi	r6,8
    498c:	000b883a 	mov	r5,zero
    4990:	81001704 	addi	r4,r16,92
    4994:	00063040 	call	6304 <memset>
    4998:	8005883a 	mov	r2,r16
    499c:	80000c15 	stw	zero,48(r16)
    49a0:	80000d15 	stw	zero,52(r16)
    49a4:	80001115 	stw	zero,68(r16)
    49a8:	80001215 	stw	zero,72(r16)
    49ac:	dfc00417 	ldw	ra,16(sp)
    49b0:	dcc00317 	ldw	r19,12(sp)
    49b4:	dc800217 	ldw	r18,8(sp)
    49b8:	dc400117 	ldw	r17,4(sp)
    49bc:	dc000017 	ldw	r16,0(sp)
    49c0:	dec00504 	addi	sp,sp,20
    49c4:	f800283a 	ret
    49c8:	01400104 	movi	r5,4
    49cc:	9809883a 	mov	r4,r19
    49d0:	000485c0 	call	485c <__sfmoreglue>
    49d4:	90800015 	stw	r2,0(r18)
    49d8:	103fde1e 	bne	r2,zero,4954 <__alt_data_end+0xfffd2954>
    49dc:	00800304 	movi	r2,12
    49e0:	98800015 	stw	r2,0(r19)
    49e4:	0005883a 	mov	r2,zero
    49e8:	003ff006 	br	49ac <__alt_data_end+0xfffd29ac>

000049ec <_cleanup>:
    49ec:	00800074 	movhi	r2,1
    49f0:	10974a04 	addi	r2,r2,23848
    49f4:	11000017 	ldw	r4,0(r2)
    49f8:	01400074 	movhi	r5,1
    49fc:	29656c04 	addi	r5,r5,-27216
    4a00:	00054141 	jmpi	5414 <_fwalk_reent>

00004a04 <__sinit>:
    4a04:	20800e17 	ldw	r2,56(r4)
    4a08:	10000126 	beq	r2,zero,4a10 <__sinit+0xc>
    4a0c:	f800283a 	ret
    4a10:	00046b81 	jmpi	46b8 <__sinit.part.1>

00004a14 <__sfp_lock_acquire>:
    4a14:	f800283a 	ret

00004a18 <__sfp_lock_release>:
    4a18:	f800283a 	ret

00004a1c <__sinit_lock_acquire>:
    4a1c:	f800283a 	ret

00004a20 <__sinit_lock_release>:
    4a20:	f800283a 	ret

00004a24 <__fp_lock_all>:
    4a24:	00800074 	movhi	r2,1
    4a28:	10974b04 	addi	r2,r2,23852
    4a2c:	11000017 	ldw	r4,0(r2)
    4a30:	01400034 	movhi	r5,0
    4a34:	29521504 	addi	r5,r5,18516
    4a38:	00053501 	jmpi	5350 <_fwalk>

00004a3c <__fp_unlock_all>:
    4a3c:	00800074 	movhi	r2,1
    4a40:	10974b04 	addi	r2,r2,23852
    4a44:	11000017 	ldw	r4,0(r2)
    4a48:	01400034 	movhi	r5,0
    4a4c:	2951a904 	addi	r5,r5,18084
    4a50:	00053501 	jmpi	5350 <_fwalk>

00004a54 <_malloc_trim_r>:
    4a54:	defffb04 	addi	sp,sp,-20
    4a58:	dcc00315 	stw	r19,12(sp)
    4a5c:	04c00074 	movhi	r19,1
    4a60:	dc800215 	stw	r18,8(sp)
    4a64:	dc400115 	stw	r17,4(sp)
    4a68:	dc000015 	stw	r16,0(sp)
    4a6c:	dfc00415 	stw	ra,16(sp)
    4a70:	2821883a 	mov	r16,r5
    4a74:	9cd1bb04 	addi	r19,r19,18156
    4a78:	2025883a 	mov	r18,r4
    4a7c:	000d9480 	call	d948 <__malloc_lock>
    4a80:	98800217 	ldw	r2,8(r19)
    4a84:	14400117 	ldw	r17,4(r2)
    4a88:	00bfff04 	movi	r2,-4
    4a8c:	88a2703a 	and	r17,r17,r2
    4a90:	8c21c83a 	sub	r16,r17,r16
    4a94:	8403fbc4 	addi	r16,r16,4079
    4a98:	8020d33a 	srli	r16,r16,12
    4a9c:	0083ffc4 	movi	r2,4095
    4aa0:	843fffc4 	addi	r16,r16,-1
    4aa4:	8020933a 	slli	r16,r16,12
    4aa8:	1400060e 	bge	r2,r16,4ac4 <_malloc_trim_r+0x70>
    4aac:	000b883a 	mov	r5,zero
    4ab0:	9009883a 	mov	r4,r18
    4ab4:	0007abc0 	call	7abc <_sbrk_r>
    4ab8:	98c00217 	ldw	r3,8(r19)
    4abc:	1c47883a 	add	r3,r3,r17
    4ac0:	10c00a26 	beq	r2,r3,4aec <_malloc_trim_r+0x98>
    4ac4:	9009883a 	mov	r4,r18
    4ac8:	000d96c0 	call	d96c <__malloc_unlock>
    4acc:	0005883a 	mov	r2,zero
    4ad0:	dfc00417 	ldw	ra,16(sp)
    4ad4:	dcc00317 	ldw	r19,12(sp)
    4ad8:	dc800217 	ldw	r18,8(sp)
    4adc:	dc400117 	ldw	r17,4(sp)
    4ae0:	dc000017 	ldw	r16,0(sp)
    4ae4:	dec00504 	addi	sp,sp,20
    4ae8:	f800283a 	ret
    4aec:	040bc83a 	sub	r5,zero,r16
    4af0:	9009883a 	mov	r4,r18
    4af4:	0007abc0 	call	7abc <_sbrk_r>
    4af8:	00ffffc4 	movi	r3,-1
    4afc:	10c00d26 	beq	r2,r3,4b34 <_malloc_trim_r+0xe0>
    4b00:	00c00074 	movhi	r3,1
    4b04:	18de3c04 	addi	r3,r3,30960
    4b08:	18800017 	ldw	r2,0(r3)
    4b0c:	99000217 	ldw	r4,8(r19)
    4b10:	8c23c83a 	sub	r17,r17,r16
    4b14:	8c400054 	ori	r17,r17,1
    4b18:	1421c83a 	sub	r16,r2,r16
    4b1c:	24400115 	stw	r17,4(r4)
    4b20:	9009883a 	mov	r4,r18
    4b24:	1c000015 	stw	r16,0(r3)
    4b28:	000d96c0 	call	d96c <__malloc_unlock>
    4b2c:	00800044 	movi	r2,1
    4b30:	003fe706 	br	4ad0 <__alt_data_end+0xfffd2ad0>
    4b34:	000b883a 	mov	r5,zero
    4b38:	9009883a 	mov	r4,r18
    4b3c:	0007abc0 	call	7abc <_sbrk_r>
    4b40:	99000217 	ldw	r4,8(r19)
    4b44:	014003c4 	movi	r5,15
    4b48:	1107c83a 	sub	r3,r2,r4
    4b4c:	28ffdd0e 	bge	r5,r3,4ac4 <__alt_data_end+0xfffd2ac4>
    4b50:	01400074 	movhi	r5,1
    4b54:	29574d04 	addi	r5,r5,23860
    4b58:	29400017 	ldw	r5,0(r5)
    4b5c:	18c00054 	ori	r3,r3,1
    4b60:	20c00115 	stw	r3,4(r4)
    4b64:	00c00074 	movhi	r3,1
    4b68:	1145c83a 	sub	r2,r2,r5
    4b6c:	18de3c04 	addi	r3,r3,30960
    4b70:	18800015 	stw	r2,0(r3)
    4b74:	003fd306 	br	4ac4 <__alt_data_end+0xfffd2ac4>

00004b78 <_free_r>:
    4b78:	28004126 	beq	r5,zero,4c80 <_free_r+0x108>
    4b7c:	defffd04 	addi	sp,sp,-12
    4b80:	dc400115 	stw	r17,4(sp)
    4b84:	dc000015 	stw	r16,0(sp)
    4b88:	2023883a 	mov	r17,r4
    4b8c:	2821883a 	mov	r16,r5
    4b90:	dfc00215 	stw	ra,8(sp)
    4b94:	000d9480 	call	d948 <__malloc_lock>
    4b98:	81ffff17 	ldw	r7,-4(r16)
    4b9c:	00bfff84 	movi	r2,-2
    4ba0:	01000074 	movhi	r4,1
    4ba4:	81bffe04 	addi	r6,r16,-8
    4ba8:	3884703a 	and	r2,r7,r2
    4bac:	2111bb04 	addi	r4,r4,18156
    4bb0:	308b883a 	add	r5,r6,r2
    4bb4:	2a400117 	ldw	r9,4(r5)
    4bb8:	22000217 	ldw	r8,8(r4)
    4bbc:	00ffff04 	movi	r3,-4
    4bc0:	48c6703a 	and	r3,r9,r3
    4bc4:	2a005726 	beq	r5,r8,4d24 <_free_r+0x1ac>
    4bc8:	28c00115 	stw	r3,4(r5)
    4bcc:	39c0004c 	andi	r7,r7,1
    4bd0:	3800091e 	bne	r7,zero,4bf8 <_free_r+0x80>
    4bd4:	823ffe17 	ldw	r8,-8(r16)
    4bd8:	22400204 	addi	r9,r4,8
    4bdc:	320dc83a 	sub	r6,r6,r8
    4be0:	31c00217 	ldw	r7,8(r6)
    4be4:	1205883a 	add	r2,r2,r8
    4be8:	3a406526 	beq	r7,r9,4d80 <_free_r+0x208>
    4bec:	32000317 	ldw	r8,12(r6)
    4bf0:	3a000315 	stw	r8,12(r7)
    4bf4:	41c00215 	stw	r7,8(r8)
    4bf8:	28cf883a 	add	r7,r5,r3
    4bfc:	39c00117 	ldw	r7,4(r7)
    4c00:	39c0004c 	andi	r7,r7,1
    4c04:	38003a26 	beq	r7,zero,4cf0 <_free_r+0x178>
    4c08:	10c00054 	ori	r3,r2,1
    4c0c:	30c00115 	stw	r3,4(r6)
    4c10:	3087883a 	add	r3,r6,r2
    4c14:	18800015 	stw	r2,0(r3)
    4c18:	00c07fc4 	movi	r3,511
    4c1c:	18801936 	bltu	r3,r2,4c84 <_free_r+0x10c>
    4c20:	1004d0fa 	srli	r2,r2,3
    4c24:	01c00044 	movi	r7,1
    4c28:	21400117 	ldw	r5,4(r4)
    4c2c:	10c00044 	addi	r3,r2,1
    4c30:	18c7883a 	add	r3,r3,r3
    4c34:	1005d0ba 	srai	r2,r2,2
    4c38:	18c7883a 	add	r3,r3,r3
    4c3c:	18c7883a 	add	r3,r3,r3
    4c40:	1907883a 	add	r3,r3,r4
    4c44:	3884983a 	sll	r2,r7,r2
    4c48:	19c00017 	ldw	r7,0(r3)
    4c4c:	1a3ffe04 	addi	r8,r3,-8
    4c50:	1144b03a 	or	r2,r2,r5
    4c54:	32000315 	stw	r8,12(r6)
    4c58:	31c00215 	stw	r7,8(r6)
    4c5c:	20800115 	stw	r2,4(r4)
    4c60:	19800015 	stw	r6,0(r3)
    4c64:	39800315 	stw	r6,12(r7)
    4c68:	8809883a 	mov	r4,r17
    4c6c:	dfc00217 	ldw	ra,8(sp)
    4c70:	dc400117 	ldw	r17,4(sp)
    4c74:	dc000017 	ldw	r16,0(sp)
    4c78:	dec00304 	addi	sp,sp,12
    4c7c:	000d96c1 	jmpi	d96c <__malloc_unlock>
    4c80:	f800283a 	ret
    4c84:	100ad27a 	srli	r5,r2,9
    4c88:	00c00104 	movi	r3,4
    4c8c:	19404a36 	bltu	r3,r5,4db8 <_free_r+0x240>
    4c90:	100ad1ba 	srli	r5,r2,6
    4c94:	28c00e44 	addi	r3,r5,57
    4c98:	18c7883a 	add	r3,r3,r3
    4c9c:	29400e04 	addi	r5,r5,56
    4ca0:	18c7883a 	add	r3,r3,r3
    4ca4:	18c7883a 	add	r3,r3,r3
    4ca8:	1909883a 	add	r4,r3,r4
    4cac:	20c00017 	ldw	r3,0(r4)
    4cb0:	01c00074 	movhi	r7,1
    4cb4:	213ffe04 	addi	r4,r4,-8
    4cb8:	39d1bb04 	addi	r7,r7,18156
    4cbc:	20c04426 	beq	r4,r3,4dd0 <_free_r+0x258>
    4cc0:	01ffff04 	movi	r7,-4
    4cc4:	19400117 	ldw	r5,4(r3)
    4cc8:	29ca703a 	and	r5,r5,r7
    4ccc:	1140022e 	bgeu	r2,r5,4cd8 <_free_r+0x160>
    4cd0:	18c00217 	ldw	r3,8(r3)
    4cd4:	20fffb1e 	bne	r4,r3,4cc4 <__alt_data_end+0xfffd2cc4>
    4cd8:	19000317 	ldw	r4,12(r3)
    4cdc:	31000315 	stw	r4,12(r6)
    4ce0:	30c00215 	stw	r3,8(r6)
    4ce4:	21800215 	stw	r6,8(r4)
    4ce8:	19800315 	stw	r6,12(r3)
    4cec:	003fde06 	br	4c68 <__alt_data_end+0xfffd2c68>
    4cf0:	29c00217 	ldw	r7,8(r5)
    4cf4:	10c5883a 	add	r2,r2,r3
    4cf8:	00c00074 	movhi	r3,1
    4cfc:	18d1bd04 	addi	r3,r3,18164
    4d00:	38c03b26 	beq	r7,r3,4df0 <_free_r+0x278>
    4d04:	2a000317 	ldw	r8,12(r5)
    4d08:	11400054 	ori	r5,r2,1
    4d0c:	3087883a 	add	r3,r6,r2
    4d10:	3a000315 	stw	r8,12(r7)
    4d14:	41c00215 	stw	r7,8(r8)
    4d18:	31400115 	stw	r5,4(r6)
    4d1c:	18800015 	stw	r2,0(r3)
    4d20:	003fbd06 	br	4c18 <__alt_data_end+0xfffd2c18>
    4d24:	39c0004c 	andi	r7,r7,1
    4d28:	10c5883a 	add	r2,r2,r3
    4d2c:	3800071e 	bne	r7,zero,4d4c <_free_r+0x1d4>
    4d30:	81fffe17 	ldw	r7,-8(r16)
    4d34:	31cdc83a 	sub	r6,r6,r7
    4d38:	30c00317 	ldw	r3,12(r6)
    4d3c:	31400217 	ldw	r5,8(r6)
    4d40:	11c5883a 	add	r2,r2,r7
    4d44:	28c00315 	stw	r3,12(r5)
    4d48:	19400215 	stw	r5,8(r3)
    4d4c:	10c00054 	ori	r3,r2,1
    4d50:	30c00115 	stw	r3,4(r6)
    4d54:	00c00074 	movhi	r3,1
    4d58:	18d74e04 	addi	r3,r3,23864
    4d5c:	18c00017 	ldw	r3,0(r3)
    4d60:	21800215 	stw	r6,8(r4)
    4d64:	10ffc036 	bltu	r2,r3,4c68 <__alt_data_end+0xfffd2c68>
    4d68:	00800074 	movhi	r2,1
    4d6c:	109e2604 	addi	r2,r2,30872
    4d70:	11400017 	ldw	r5,0(r2)
    4d74:	8809883a 	mov	r4,r17
    4d78:	0004a540 	call	4a54 <_malloc_trim_r>
    4d7c:	003fba06 	br	4c68 <__alt_data_end+0xfffd2c68>
    4d80:	28c9883a 	add	r4,r5,r3
    4d84:	21000117 	ldw	r4,4(r4)
    4d88:	2100004c 	andi	r4,r4,1
    4d8c:	2000391e 	bne	r4,zero,4e74 <_free_r+0x2fc>
    4d90:	29c00217 	ldw	r7,8(r5)
    4d94:	29000317 	ldw	r4,12(r5)
    4d98:	1885883a 	add	r2,r3,r2
    4d9c:	10c00054 	ori	r3,r2,1
    4da0:	39000315 	stw	r4,12(r7)
    4da4:	21c00215 	stw	r7,8(r4)
    4da8:	30c00115 	stw	r3,4(r6)
    4dac:	308d883a 	add	r6,r6,r2
    4db0:	30800015 	stw	r2,0(r6)
    4db4:	003fac06 	br	4c68 <__alt_data_end+0xfffd2c68>
    4db8:	00c00504 	movi	r3,20
    4dbc:	19401536 	bltu	r3,r5,4e14 <_free_r+0x29c>
    4dc0:	28c01704 	addi	r3,r5,92
    4dc4:	18c7883a 	add	r3,r3,r3
    4dc8:	294016c4 	addi	r5,r5,91
    4dcc:	003fb406 	br	4ca0 <__alt_data_end+0xfffd2ca0>
    4dd0:	280bd0ba 	srai	r5,r5,2
    4dd4:	00c00044 	movi	r3,1
    4dd8:	38800117 	ldw	r2,4(r7)
    4ddc:	194a983a 	sll	r5,r3,r5
    4de0:	2007883a 	mov	r3,r4
    4de4:	2884b03a 	or	r2,r5,r2
    4de8:	38800115 	stw	r2,4(r7)
    4dec:	003fbb06 	br	4cdc <__alt_data_end+0xfffd2cdc>
    4df0:	21800515 	stw	r6,20(r4)
    4df4:	21800415 	stw	r6,16(r4)
    4df8:	10c00054 	ori	r3,r2,1
    4dfc:	31c00315 	stw	r7,12(r6)
    4e00:	31c00215 	stw	r7,8(r6)
    4e04:	30c00115 	stw	r3,4(r6)
    4e08:	308d883a 	add	r6,r6,r2
    4e0c:	30800015 	stw	r2,0(r6)
    4e10:	003f9506 	br	4c68 <__alt_data_end+0xfffd2c68>
    4e14:	00c01504 	movi	r3,84
    4e18:	19400536 	bltu	r3,r5,4e30 <_free_r+0x2b8>
    4e1c:	100ad33a 	srli	r5,r2,12
    4e20:	28c01bc4 	addi	r3,r5,111
    4e24:	18c7883a 	add	r3,r3,r3
    4e28:	29401b84 	addi	r5,r5,110
    4e2c:	003f9c06 	br	4ca0 <__alt_data_end+0xfffd2ca0>
    4e30:	00c05504 	movi	r3,340
    4e34:	19400536 	bltu	r3,r5,4e4c <_free_r+0x2d4>
    4e38:	100ad3fa 	srli	r5,r2,15
    4e3c:	28c01e04 	addi	r3,r5,120
    4e40:	18c7883a 	add	r3,r3,r3
    4e44:	29401dc4 	addi	r5,r5,119
    4e48:	003f9506 	br	4ca0 <__alt_data_end+0xfffd2ca0>
    4e4c:	00c15504 	movi	r3,1364
    4e50:	19400536 	bltu	r3,r5,4e68 <_free_r+0x2f0>
    4e54:	100ad4ba 	srli	r5,r2,18
    4e58:	28c01f44 	addi	r3,r5,125
    4e5c:	18c7883a 	add	r3,r3,r3
    4e60:	29401f04 	addi	r5,r5,124
    4e64:	003f8e06 	br	4ca0 <__alt_data_end+0xfffd2ca0>
    4e68:	00c03f84 	movi	r3,254
    4e6c:	01401f84 	movi	r5,126
    4e70:	003f8b06 	br	4ca0 <__alt_data_end+0xfffd2ca0>
    4e74:	10c00054 	ori	r3,r2,1
    4e78:	30c00115 	stw	r3,4(r6)
    4e7c:	308d883a 	add	r6,r6,r2
    4e80:	30800015 	stw	r2,0(r6)
    4e84:	003f7806 	br	4c68 <__alt_data_end+0xfffd2c68>

00004e88 <__sfvwrite_r>:
    4e88:	30800217 	ldw	r2,8(r6)
    4e8c:	10006726 	beq	r2,zero,502c <__sfvwrite_r+0x1a4>
    4e90:	28c0030b 	ldhu	r3,12(r5)
    4e94:	defff404 	addi	sp,sp,-48
    4e98:	dd400715 	stw	r21,28(sp)
    4e9c:	dd000615 	stw	r20,24(sp)
    4ea0:	dc000215 	stw	r16,8(sp)
    4ea4:	dfc00b15 	stw	ra,44(sp)
    4ea8:	df000a15 	stw	fp,40(sp)
    4eac:	ddc00915 	stw	r23,36(sp)
    4eb0:	dd800815 	stw	r22,32(sp)
    4eb4:	dcc00515 	stw	r19,20(sp)
    4eb8:	dc800415 	stw	r18,16(sp)
    4ebc:	dc400315 	stw	r17,12(sp)
    4ec0:	1880020c 	andi	r2,r3,8
    4ec4:	2821883a 	mov	r16,r5
    4ec8:	202b883a 	mov	r21,r4
    4ecc:	3029883a 	mov	r20,r6
    4ed0:	10002726 	beq	r2,zero,4f70 <__sfvwrite_r+0xe8>
    4ed4:	28800417 	ldw	r2,16(r5)
    4ed8:	10002526 	beq	r2,zero,4f70 <__sfvwrite_r+0xe8>
    4edc:	1880008c 	andi	r2,r3,2
    4ee0:	a4400017 	ldw	r17,0(r20)
    4ee4:	10002a26 	beq	r2,zero,4f90 <__sfvwrite_r+0x108>
    4ee8:	05a00034 	movhi	r22,32768
    4eec:	0027883a 	mov	r19,zero
    4ef0:	0025883a 	mov	r18,zero
    4ef4:	b5bf0004 	addi	r22,r22,-1024
    4ef8:	980d883a 	mov	r6,r19
    4efc:	a809883a 	mov	r4,r21
    4f00:	90004626 	beq	r18,zero,501c <__sfvwrite_r+0x194>
    4f04:	900f883a 	mov	r7,r18
    4f08:	b480022e 	bgeu	r22,r18,4f14 <__sfvwrite_r+0x8c>
    4f0c:	01e00034 	movhi	r7,32768
    4f10:	39ff0004 	addi	r7,r7,-1024
    4f14:	80800917 	ldw	r2,36(r16)
    4f18:	81400717 	ldw	r5,28(r16)
    4f1c:	103ee83a 	callr	r2
    4f20:	00805a0e 	bge	zero,r2,508c <__sfvwrite_r+0x204>
    4f24:	a0c00217 	ldw	r3,8(r20)
    4f28:	98a7883a 	add	r19,r19,r2
    4f2c:	90a5c83a 	sub	r18,r18,r2
    4f30:	1885c83a 	sub	r2,r3,r2
    4f34:	a0800215 	stw	r2,8(r20)
    4f38:	103fef1e 	bne	r2,zero,4ef8 <__alt_data_end+0xfffd2ef8>
    4f3c:	0005883a 	mov	r2,zero
    4f40:	dfc00b17 	ldw	ra,44(sp)
    4f44:	df000a17 	ldw	fp,40(sp)
    4f48:	ddc00917 	ldw	r23,36(sp)
    4f4c:	dd800817 	ldw	r22,32(sp)
    4f50:	dd400717 	ldw	r21,28(sp)
    4f54:	dd000617 	ldw	r20,24(sp)
    4f58:	dcc00517 	ldw	r19,20(sp)
    4f5c:	dc800417 	ldw	r18,16(sp)
    4f60:	dc400317 	ldw	r17,12(sp)
    4f64:	dc000217 	ldw	r16,8(sp)
    4f68:	dec00c04 	addi	sp,sp,48
    4f6c:	f800283a 	ret
    4f70:	800b883a 	mov	r5,r16
    4f74:	a809883a 	mov	r4,r21
    4f78:	00029f80 	call	29f8 <__swsetup_r>
    4f7c:	1000ee1e 	bne	r2,zero,5338 <__sfvwrite_r+0x4b0>
    4f80:	80c0030b 	ldhu	r3,12(r16)
    4f84:	a4400017 	ldw	r17,0(r20)
    4f88:	1880008c 	andi	r2,r3,2
    4f8c:	103fd61e 	bne	r2,zero,4ee8 <__alt_data_end+0xfffd2ee8>
    4f90:	1880004c 	andi	r2,r3,1
    4f94:	1000421e 	bne	r2,zero,50a0 <__sfvwrite_r+0x218>
    4f98:	0039883a 	mov	fp,zero
    4f9c:	0025883a 	mov	r18,zero
    4fa0:	90001a26 	beq	r18,zero,500c <__sfvwrite_r+0x184>
    4fa4:	1880800c 	andi	r2,r3,512
    4fa8:	84c00217 	ldw	r19,8(r16)
    4fac:	10002126 	beq	r2,zero,5034 <__sfvwrite_r+0x1ac>
    4fb0:	982f883a 	mov	r23,r19
    4fb4:	94c09636 	bltu	r18,r19,5210 <__sfvwrite_r+0x388>
    4fb8:	1881200c 	andi	r2,r3,1152
    4fbc:	1000a11e 	bne	r2,zero,5244 <__sfvwrite_r+0x3bc>
    4fc0:	81000017 	ldw	r4,0(r16)
    4fc4:	b80d883a 	mov	r6,r23
    4fc8:	e00b883a 	mov	r5,fp
    4fcc:	00061a80 	call	61a8 <memmove>
    4fd0:	80c00217 	ldw	r3,8(r16)
    4fd4:	81000017 	ldw	r4,0(r16)
    4fd8:	9005883a 	mov	r2,r18
    4fdc:	1ce7c83a 	sub	r19,r3,r19
    4fe0:	25cf883a 	add	r7,r4,r23
    4fe4:	84c00215 	stw	r19,8(r16)
    4fe8:	81c00015 	stw	r7,0(r16)
    4fec:	a0c00217 	ldw	r3,8(r20)
    4ff0:	e0b9883a 	add	fp,fp,r2
    4ff4:	90a5c83a 	sub	r18,r18,r2
    4ff8:	18a7c83a 	sub	r19,r3,r2
    4ffc:	a4c00215 	stw	r19,8(r20)
    5000:	983fce26 	beq	r19,zero,4f3c <__alt_data_end+0xfffd2f3c>
    5004:	80c0030b 	ldhu	r3,12(r16)
    5008:	903fe61e 	bne	r18,zero,4fa4 <__alt_data_end+0xfffd2fa4>
    500c:	8f000017 	ldw	fp,0(r17)
    5010:	8c800117 	ldw	r18,4(r17)
    5014:	8c400204 	addi	r17,r17,8
    5018:	003fe106 	br	4fa0 <__alt_data_end+0xfffd2fa0>
    501c:	8cc00017 	ldw	r19,0(r17)
    5020:	8c800117 	ldw	r18,4(r17)
    5024:	8c400204 	addi	r17,r17,8
    5028:	003fb306 	br	4ef8 <__alt_data_end+0xfffd2ef8>
    502c:	0005883a 	mov	r2,zero
    5030:	f800283a 	ret
    5034:	81000017 	ldw	r4,0(r16)
    5038:	80800417 	ldw	r2,16(r16)
    503c:	11005a36 	bltu	r2,r4,51a8 <__sfvwrite_r+0x320>
    5040:	85c00517 	ldw	r23,20(r16)
    5044:	95c05836 	bltu	r18,r23,51a8 <__sfvwrite_r+0x320>
    5048:	00a00034 	movhi	r2,32768
    504c:	10bfffc4 	addi	r2,r2,-1
    5050:	9009883a 	mov	r4,r18
    5054:	1480012e 	bgeu	r2,r18,505c <__sfvwrite_r+0x1d4>
    5058:	1009883a 	mov	r4,r2
    505c:	b80b883a 	mov	r5,r23
    5060:	000a92c0 	call	a92c <__divsi3>
    5064:	b80b883a 	mov	r5,r23
    5068:	1009883a 	mov	r4,r2
    506c:	000aae00 	call	aae0 <__mulsi3>
    5070:	81400717 	ldw	r5,28(r16)
    5074:	80c00917 	ldw	r3,36(r16)
    5078:	100f883a 	mov	r7,r2
    507c:	e00d883a 	mov	r6,fp
    5080:	a809883a 	mov	r4,r21
    5084:	183ee83a 	callr	r3
    5088:	00bfd816 	blt	zero,r2,4fec <__alt_data_end+0xfffd2fec>
    508c:	8080030b 	ldhu	r2,12(r16)
    5090:	10801014 	ori	r2,r2,64
    5094:	8080030d 	sth	r2,12(r16)
    5098:	00bfffc4 	movi	r2,-1
    509c:	003fa806 	br	4f40 <__alt_data_end+0xfffd2f40>
    50a0:	0027883a 	mov	r19,zero
    50a4:	0011883a 	mov	r8,zero
    50a8:	0039883a 	mov	fp,zero
    50ac:	0025883a 	mov	r18,zero
    50b0:	90001f26 	beq	r18,zero,5130 <__sfvwrite_r+0x2a8>
    50b4:	40005a26 	beq	r8,zero,5220 <__sfvwrite_r+0x398>
    50b8:	982d883a 	mov	r22,r19
    50bc:	94c0012e 	bgeu	r18,r19,50c4 <__sfvwrite_r+0x23c>
    50c0:	902d883a 	mov	r22,r18
    50c4:	81000017 	ldw	r4,0(r16)
    50c8:	80800417 	ldw	r2,16(r16)
    50cc:	b02f883a 	mov	r23,r22
    50d0:	81c00517 	ldw	r7,20(r16)
    50d4:	1100032e 	bgeu	r2,r4,50e4 <__sfvwrite_r+0x25c>
    50d8:	80c00217 	ldw	r3,8(r16)
    50dc:	38c7883a 	add	r3,r7,r3
    50e0:	1d801816 	blt	r3,r22,5144 <__sfvwrite_r+0x2bc>
    50e4:	b1c03e16 	blt	r22,r7,51e0 <__sfvwrite_r+0x358>
    50e8:	80800917 	ldw	r2,36(r16)
    50ec:	81400717 	ldw	r5,28(r16)
    50f0:	e00d883a 	mov	r6,fp
    50f4:	da000115 	stw	r8,4(sp)
    50f8:	a809883a 	mov	r4,r21
    50fc:	103ee83a 	callr	r2
    5100:	102f883a 	mov	r23,r2
    5104:	da000117 	ldw	r8,4(sp)
    5108:	00bfe00e 	bge	zero,r2,508c <__alt_data_end+0xfffd308c>
    510c:	9de7c83a 	sub	r19,r19,r23
    5110:	98001f26 	beq	r19,zero,5190 <__sfvwrite_r+0x308>
    5114:	a0800217 	ldw	r2,8(r20)
    5118:	e5f9883a 	add	fp,fp,r23
    511c:	95e5c83a 	sub	r18,r18,r23
    5120:	15efc83a 	sub	r23,r2,r23
    5124:	a5c00215 	stw	r23,8(r20)
    5128:	b83f8426 	beq	r23,zero,4f3c <__alt_data_end+0xfffd2f3c>
    512c:	903fe11e 	bne	r18,zero,50b4 <__alt_data_end+0xfffd30b4>
    5130:	8f000017 	ldw	fp,0(r17)
    5134:	8c800117 	ldw	r18,4(r17)
    5138:	0011883a 	mov	r8,zero
    513c:	8c400204 	addi	r17,r17,8
    5140:	003fdb06 	br	50b0 <__alt_data_end+0xfffd30b0>
    5144:	180d883a 	mov	r6,r3
    5148:	e00b883a 	mov	r5,fp
    514c:	da000115 	stw	r8,4(sp)
    5150:	d8c00015 	stw	r3,0(sp)
    5154:	00061a80 	call	61a8 <memmove>
    5158:	d8c00017 	ldw	r3,0(sp)
    515c:	80800017 	ldw	r2,0(r16)
    5160:	800b883a 	mov	r5,r16
    5164:	a809883a 	mov	r4,r21
    5168:	10c5883a 	add	r2,r2,r3
    516c:	80800015 	stw	r2,0(r16)
    5170:	d8c00015 	stw	r3,0(sp)
    5174:	00046180 	call	4618 <_fflush_r>
    5178:	d8c00017 	ldw	r3,0(sp)
    517c:	da000117 	ldw	r8,4(sp)
    5180:	103fc21e 	bne	r2,zero,508c <__alt_data_end+0xfffd308c>
    5184:	182f883a 	mov	r23,r3
    5188:	9de7c83a 	sub	r19,r19,r23
    518c:	983fe11e 	bne	r19,zero,5114 <__alt_data_end+0xfffd3114>
    5190:	800b883a 	mov	r5,r16
    5194:	a809883a 	mov	r4,r21
    5198:	00046180 	call	4618 <_fflush_r>
    519c:	103fbb1e 	bne	r2,zero,508c <__alt_data_end+0xfffd308c>
    51a0:	0011883a 	mov	r8,zero
    51a4:	003fdb06 	br	5114 <__alt_data_end+0xfffd3114>
    51a8:	94c0012e 	bgeu	r18,r19,51b0 <__sfvwrite_r+0x328>
    51ac:	9027883a 	mov	r19,r18
    51b0:	980d883a 	mov	r6,r19
    51b4:	e00b883a 	mov	r5,fp
    51b8:	00061a80 	call	61a8 <memmove>
    51bc:	80800217 	ldw	r2,8(r16)
    51c0:	80c00017 	ldw	r3,0(r16)
    51c4:	14c5c83a 	sub	r2,r2,r19
    51c8:	1cc7883a 	add	r3,r3,r19
    51cc:	80800215 	stw	r2,8(r16)
    51d0:	80c00015 	stw	r3,0(r16)
    51d4:	10004326 	beq	r2,zero,52e4 <__sfvwrite_r+0x45c>
    51d8:	9805883a 	mov	r2,r19
    51dc:	003f8306 	br	4fec <__alt_data_end+0xfffd2fec>
    51e0:	b00d883a 	mov	r6,r22
    51e4:	e00b883a 	mov	r5,fp
    51e8:	da000115 	stw	r8,4(sp)
    51ec:	00061a80 	call	61a8 <memmove>
    51f0:	80800217 	ldw	r2,8(r16)
    51f4:	80c00017 	ldw	r3,0(r16)
    51f8:	da000117 	ldw	r8,4(sp)
    51fc:	1585c83a 	sub	r2,r2,r22
    5200:	1dad883a 	add	r22,r3,r22
    5204:	80800215 	stw	r2,8(r16)
    5208:	85800015 	stw	r22,0(r16)
    520c:	003fbf06 	br	510c <__alt_data_end+0xfffd310c>
    5210:	81000017 	ldw	r4,0(r16)
    5214:	9027883a 	mov	r19,r18
    5218:	902f883a 	mov	r23,r18
    521c:	003f6906 	br	4fc4 <__alt_data_end+0xfffd2fc4>
    5220:	900d883a 	mov	r6,r18
    5224:	01400284 	movi	r5,10
    5228:	e009883a 	mov	r4,fp
    522c:	0005f7c0 	call	5f7c <memchr>
    5230:	10003e26 	beq	r2,zero,532c <__sfvwrite_r+0x4a4>
    5234:	10800044 	addi	r2,r2,1
    5238:	1727c83a 	sub	r19,r2,fp
    523c:	02000044 	movi	r8,1
    5240:	003f9d06 	br	50b8 <__alt_data_end+0xfffd30b8>
    5244:	80800517 	ldw	r2,20(r16)
    5248:	81400417 	ldw	r5,16(r16)
    524c:	81c00017 	ldw	r7,0(r16)
    5250:	10a7883a 	add	r19,r2,r2
    5254:	9885883a 	add	r2,r19,r2
    5258:	1026d7fa 	srli	r19,r2,31
    525c:	396dc83a 	sub	r22,r7,r5
    5260:	b1000044 	addi	r4,r22,1
    5264:	9885883a 	add	r2,r19,r2
    5268:	1027d07a 	srai	r19,r2,1
    526c:	2485883a 	add	r2,r4,r18
    5270:	980d883a 	mov	r6,r19
    5274:	9880022e 	bgeu	r19,r2,5280 <__sfvwrite_r+0x3f8>
    5278:	1027883a 	mov	r19,r2
    527c:	100d883a 	mov	r6,r2
    5280:	18c1000c 	andi	r3,r3,1024
    5284:	18001c26 	beq	r3,zero,52f8 <__sfvwrite_r+0x470>
    5288:	300b883a 	mov	r5,r6
    528c:	a809883a 	mov	r4,r21
    5290:	00057700 	call	5770 <_malloc_r>
    5294:	102f883a 	mov	r23,r2
    5298:	10002926 	beq	r2,zero,5340 <__sfvwrite_r+0x4b8>
    529c:	81400417 	ldw	r5,16(r16)
    52a0:	b00d883a 	mov	r6,r22
    52a4:	1009883a 	mov	r4,r2
    52a8:	00060600 	call	6060 <memcpy>
    52ac:	8080030b 	ldhu	r2,12(r16)
    52b0:	00fedfc4 	movi	r3,-1153
    52b4:	10c4703a 	and	r2,r2,r3
    52b8:	10802014 	ori	r2,r2,128
    52bc:	8080030d 	sth	r2,12(r16)
    52c0:	bd89883a 	add	r4,r23,r22
    52c4:	9d8fc83a 	sub	r7,r19,r22
    52c8:	85c00415 	stw	r23,16(r16)
    52cc:	84c00515 	stw	r19,20(r16)
    52d0:	81000015 	stw	r4,0(r16)
    52d4:	9027883a 	mov	r19,r18
    52d8:	81c00215 	stw	r7,8(r16)
    52dc:	902f883a 	mov	r23,r18
    52e0:	003f3806 	br	4fc4 <__alt_data_end+0xfffd2fc4>
    52e4:	800b883a 	mov	r5,r16
    52e8:	a809883a 	mov	r4,r21
    52ec:	00046180 	call	4618 <_fflush_r>
    52f0:	103fb926 	beq	r2,zero,51d8 <__alt_data_end+0xfffd31d8>
    52f4:	003f6506 	br	508c <__alt_data_end+0xfffd308c>
    52f8:	a809883a 	mov	r4,r21
    52fc:	00074e40 	call	74e4 <_realloc_r>
    5300:	102f883a 	mov	r23,r2
    5304:	103fee1e 	bne	r2,zero,52c0 <__alt_data_end+0xfffd32c0>
    5308:	81400417 	ldw	r5,16(r16)
    530c:	a809883a 	mov	r4,r21
    5310:	0004b780 	call	4b78 <_free_r>
    5314:	8080030b 	ldhu	r2,12(r16)
    5318:	00ffdfc4 	movi	r3,-129
    531c:	1884703a 	and	r2,r3,r2
    5320:	00c00304 	movi	r3,12
    5324:	a8c00015 	stw	r3,0(r21)
    5328:	003f5906 	br	5090 <__alt_data_end+0xfffd3090>
    532c:	94c00044 	addi	r19,r18,1
    5330:	02000044 	movi	r8,1
    5334:	003f6006 	br	50b8 <__alt_data_end+0xfffd30b8>
    5338:	00bfffc4 	movi	r2,-1
    533c:	003f0006 	br	4f40 <__alt_data_end+0xfffd2f40>
    5340:	00800304 	movi	r2,12
    5344:	a8800015 	stw	r2,0(r21)
    5348:	8080030b 	ldhu	r2,12(r16)
    534c:	003f5006 	br	5090 <__alt_data_end+0xfffd3090>

00005350 <_fwalk>:
    5350:	defff704 	addi	sp,sp,-36
    5354:	dd000415 	stw	r20,16(sp)
    5358:	dfc00815 	stw	ra,32(sp)
    535c:	ddc00715 	stw	r23,28(sp)
    5360:	dd800615 	stw	r22,24(sp)
    5364:	dd400515 	stw	r21,20(sp)
    5368:	dcc00315 	stw	r19,12(sp)
    536c:	dc800215 	stw	r18,8(sp)
    5370:	dc400115 	stw	r17,4(sp)
    5374:	dc000015 	stw	r16,0(sp)
    5378:	2500b804 	addi	r20,r4,736
    537c:	a0002326 	beq	r20,zero,540c <_fwalk+0xbc>
    5380:	282b883a 	mov	r21,r5
    5384:	002f883a 	mov	r23,zero
    5388:	05800044 	movi	r22,1
    538c:	04ffffc4 	movi	r19,-1
    5390:	a4400117 	ldw	r17,4(r20)
    5394:	a4800217 	ldw	r18,8(r20)
    5398:	8c7fffc4 	addi	r17,r17,-1
    539c:	88000d16 	blt	r17,zero,53d4 <_fwalk+0x84>
    53a0:	94000304 	addi	r16,r18,12
    53a4:	94800384 	addi	r18,r18,14
    53a8:	8080000b 	ldhu	r2,0(r16)
    53ac:	8c7fffc4 	addi	r17,r17,-1
    53b0:	813ffd04 	addi	r4,r16,-12
    53b4:	b080042e 	bgeu	r22,r2,53c8 <_fwalk+0x78>
    53b8:	9080000f 	ldh	r2,0(r18)
    53bc:	14c00226 	beq	r2,r19,53c8 <_fwalk+0x78>
    53c0:	a83ee83a 	callr	r21
    53c4:	b8aeb03a 	or	r23,r23,r2
    53c8:	84001a04 	addi	r16,r16,104
    53cc:	94801a04 	addi	r18,r18,104
    53d0:	8cfff51e 	bne	r17,r19,53a8 <__alt_data_end+0xfffd33a8>
    53d4:	a5000017 	ldw	r20,0(r20)
    53d8:	a03fed1e 	bne	r20,zero,5390 <__alt_data_end+0xfffd3390>
    53dc:	b805883a 	mov	r2,r23
    53e0:	dfc00817 	ldw	ra,32(sp)
    53e4:	ddc00717 	ldw	r23,28(sp)
    53e8:	dd800617 	ldw	r22,24(sp)
    53ec:	dd400517 	ldw	r21,20(sp)
    53f0:	dd000417 	ldw	r20,16(sp)
    53f4:	dcc00317 	ldw	r19,12(sp)
    53f8:	dc800217 	ldw	r18,8(sp)
    53fc:	dc400117 	ldw	r17,4(sp)
    5400:	dc000017 	ldw	r16,0(sp)
    5404:	dec00904 	addi	sp,sp,36
    5408:	f800283a 	ret
    540c:	002f883a 	mov	r23,zero
    5410:	003ff206 	br	53dc <__alt_data_end+0xfffd33dc>

00005414 <_fwalk_reent>:
    5414:	defff704 	addi	sp,sp,-36
    5418:	dd000415 	stw	r20,16(sp)
    541c:	dfc00815 	stw	ra,32(sp)
    5420:	ddc00715 	stw	r23,28(sp)
    5424:	dd800615 	stw	r22,24(sp)
    5428:	dd400515 	stw	r21,20(sp)
    542c:	dcc00315 	stw	r19,12(sp)
    5430:	dc800215 	stw	r18,8(sp)
    5434:	dc400115 	stw	r17,4(sp)
    5438:	dc000015 	stw	r16,0(sp)
    543c:	2500b804 	addi	r20,r4,736
    5440:	a0002326 	beq	r20,zero,54d0 <_fwalk_reent+0xbc>
    5444:	282b883a 	mov	r21,r5
    5448:	2027883a 	mov	r19,r4
    544c:	002f883a 	mov	r23,zero
    5450:	05800044 	movi	r22,1
    5454:	04bfffc4 	movi	r18,-1
    5458:	a4400117 	ldw	r17,4(r20)
    545c:	a4000217 	ldw	r16,8(r20)
    5460:	8c7fffc4 	addi	r17,r17,-1
    5464:	88000c16 	blt	r17,zero,5498 <_fwalk_reent+0x84>
    5468:	84000304 	addi	r16,r16,12
    546c:	8080000b 	ldhu	r2,0(r16)
    5470:	8c7fffc4 	addi	r17,r17,-1
    5474:	817ffd04 	addi	r5,r16,-12
    5478:	b080052e 	bgeu	r22,r2,5490 <_fwalk_reent+0x7c>
    547c:	8080008f 	ldh	r2,2(r16)
    5480:	9809883a 	mov	r4,r19
    5484:	14800226 	beq	r2,r18,5490 <_fwalk_reent+0x7c>
    5488:	a83ee83a 	callr	r21
    548c:	b8aeb03a 	or	r23,r23,r2
    5490:	84001a04 	addi	r16,r16,104
    5494:	8cbff51e 	bne	r17,r18,546c <__alt_data_end+0xfffd346c>
    5498:	a5000017 	ldw	r20,0(r20)
    549c:	a03fee1e 	bne	r20,zero,5458 <__alt_data_end+0xfffd3458>
    54a0:	b805883a 	mov	r2,r23
    54a4:	dfc00817 	ldw	ra,32(sp)
    54a8:	ddc00717 	ldw	r23,28(sp)
    54ac:	dd800617 	ldw	r22,24(sp)
    54b0:	dd400517 	ldw	r21,20(sp)
    54b4:	dd000417 	ldw	r20,16(sp)
    54b8:	dcc00317 	ldw	r19,12(sp)
    54bc:	dc800217 	ldw	r18,8(sp)
    54c0:	dc400117 	ldw	r17,4(sp)
    54c4:	dc000017 	ldw	r16,0(sp)
    54c8:	dec00904 	addi	sp,sp,36
    54cc:	f800283a 	ret
    54d0:	002f883a 	mov	r23,zero
    54d4:	003ff206 	br	54a0 <__alt_data_end+0xfffd34a0>

000054d8 <_setlocale_r>:
    54d8:	30001b26 	beq	r6,zero,5548 <_setlocale_r+0x70>
    54dc:	01400074 	movhi	r5,1
    54e0:	defffe04 	addi	sp,sp,-8
    54e4:	294ff404 	addi	r5,r5,16336
    54e8:	3009883a 	mov	r4,r6
    54ec:	dc000015 	stw	r16,0(sp)
    54f0:	dfc00115 	stw	ra,4(sp)
    54f4:	3021883a 	mov	r16,r6
    54f8:	0007c4c0 	call	7c4c <strcmp>
    54fc:	1000061e 	bne	r2,zero,5518 <_setlocale_r+0x40>
    5500:	00800074 	movhi	r2,1
    5504:	108ff304 	addi	r2,r2,16332
    5508:	dfc00117 	ldw	ra,4(sp)
    550c:	dc000017 	ldw	r16,0(sp)
    5510:	dec00204 	addi	sp,sp,8
    5514:	f800283a 	ret
    5518:	01400074 	movhi	r5,1
    551c:	294ff304 	addi	r5,r5,16332
    5520:	8009883a 	mov	r4,r16
    5524:	0007c4c0 	call	7c4c <strcmp>
    5528:	103ff526 	beq	r2,zero,5500 <__alt_data_end+0xfffd3500>
    552c:	01400074 	movhi	r5,1
    5530:	294fde04 	addi	r5,r5,16248
    5534:	8009883a 	mov	r4,r16
    5538:	0007c4c0 	call	7c4c <strcmp>
    553c:	103ff026 	beq	r2,zero,5500 <__alt_data_end+0xfffd3500>
    5540:	0005883a 	mov	r2,zero
    5544:	003ff006 	br	5508 <__alt_data_end+0xfffd3508>
    5548:	00800074 	movhi	r2,1
    554c:	108ff304 	addi	r2,r2,16332
    5550:	f800283a 	ret

00005554 <__locale_charset>:
    5554:	00800074 	movhi	r2,1
    5558:	1091a504 	addi	r2,r2,18068
    555c:	f800283a 	ret

00005560 <__locale_mb_cur_max>:
    5560:	00800074 	movhi	r2,1
    5564:	10974c04 	addi	r2,r2,23856
    5568:	10800017 	ldw	r2,0(r2)
    556c:	f800283a 	ret

00005570 <__locale_msgcharset>:
    5570:	00800074 	movhi	r2,1
    5574:	10919d04 	addi	r2,r2,18036
    5578:	f800283a 	ret

0000557c <__locale_cjk_lang>:
    557c:	0005883a 	mov	r2,zero
    5580:	f800283a 	ret

00005584 <_localeconv_r>:
    5584:	00800074 	movhi	r2,1
    5588:	1091ad04 	addi	r2,r2,18100
    558c:	f800283a 	ret

00005590 <setlocale>:
    5590:	00800074 	movhi	r2,1
    5594:	10974b04 	addi	r2,r2,23852
    5598:	280d883a 	mov	r6,r5
    559c:	200b883a 	mov	r5,r4
    55a0:	11000017 	ldw	r4,0(r2)
    55a4:	00054d81 	jmpi	54d8 <_setlocale_r>

000055a8 <localeconv>:
    55a8:	00800074 	movhi	r2,1
    55ac:	1091ad04 	addi	r2,r2,18100
    55b0:	f800283a 	ret

000055b4 <__smakebuf_r>:
    55b4:	2880030b 	ldhu	r2,12(r5)
    55b8:	10c0008c 	andi	r3,r2,2
    55bc:	1800411e 	bne	r3,zero,56c4 <__smakebuf_r+0x110>
    55c0:	deffec04 	addi	sp,sp,-80
    55c4:	dc000f15 	stw	r16,60(sp)
    55c8:	2821883a 	mov	r16,r5
    55cc:	2940038f 	ldh	r5,14(r5)
    55d0:	dc401015 	stw	r17,64(sp)
    55d4:	dfc01315 	stw	ra,76(sp)
    55d8:	dcc01215 	stw	r19,72(sp)
    55dc:	dc801115 	stw	r18,68(sp)
    55e0:	2023883a 	mov	r17,r4
    55e4:	28001c16 	blt	r5,zero,5658 <__smakebuf_r+0xa4>
    55e8:	d80d883a 	mov	r6,sp
    55ec:	00098bc0 	call	98bc <_fstat_r>
    55f0:	10001816 	blt	r2,zero,5654 <__smakebuf_r+0xa0>
    55f4:	d8800117 	ldw	r2,4(sp)
    55f8:	00e00014 	movui	r3,32768
    55fc:	10bc000c 	andi	r2,r2,61440
    5600:	14c80020 	cmpeqi	r19,r2,8192
    5604:	10c03726 	beq	r2,r3,56e4 <__smakebuf_r+0x130>
    5608:	80c0030b 	ldhu	r3,12(r16)
    560c:	18c20014 	ori	r3,r3,2048
    5610:	80c0030d 	sth	r3,12(r16)
    5614:	00c80004 	movi	r3,8192
    5618:	10c0521e 	bne	r2,r3,5764 <__smakebuf_r+0x1b0>
    561c:	8140038f 	ldh	r5,14(r16)
    5620:	8809883a 	mov	r4,r17
    5624:	00099180 	call	9918 <_isatty_r>
    5628:	10004c26 	beq	r2,zero,575c <__smakebuf_r+0x1a8>
    562c:	8080030b 	ldhu	r2,12(r16)
    5630:	80c010c4 	addi	r3,r16,67
    5634:	80c00015 	stw	r3,0(r16)
    5638:	10800054 	ori	r2,r2,1
    563c:	8080030d 	sth	r2,12(r16)
    5640:	00800044 	movi	r2,1
    5644:	80c00415 	stw	r3,16(r16)
    5648:	80800515 	stw	r2,20(r16)
    564c:	04810004 	movi	r18,1024
    5650:	00000706 	br	5670 <__smakebuf_r+0xbc>
    5654:	8080030b 	ldhu	r2,12(r16)
    5658:	10c0200c 	andi	r3,r2,128
    565c:	18001f1e 	bne	r3,zero,56dc <__smakebuf_r+0x128>
    5660:	04810004 	movi	r18,1024
    5664:	10820014 	ori	r2,r2,2048
    5668:	8080030d 	sth	r2,12(r16)
    566c:	0027883a 	mov	r19,zero
    5670:	900b883a 	mov	r5,r18
    5674:	8809883a 	mov	r4,r17
    5678:	00057700 	call	5770 <_malloc_r>
    567c:	10002c26 	beq	r2,zero,5730 <__smakebuf_r+0x17c>
    5680:	80c0030b 	ldhu	r3,12(r16)
    5684:	01000034 	movhi	r4,0
    5688:	2111ab04 	addi	r4,r4,18092
    568c:	89000f15 	stw	r4,60(r17)
    5690:	18c02014 	ori	r3,r3,128
    5694:	80c0030d 	sth	r3,12(r16)
    5698:	80800015 	stw	r2,0(r16)
    569c:	80800415 	stw	r2,16(r16)
    56a0:	84800515 	stw	r18,20(r16)
    56a4:	98001a1e 	bne	r19,zero,5710 <__smakebuf_r+0x15c>
    56a8:	dfc01317 	ldw	ra,76(sp)
    56ac:	dcc01217 	ldw	r19,72(sp)
    56b0:	dc801117 	ldw	r18,68(sp)
    56b4:	dc401017 	ldw	r17,64(sp)
    56b8:	dc000f17 	ldw	r16,60(sp)
    56bc:	dec01404 	addi	sp,sp,80
    56c0:	f800283a 	ret
    56c4:	288010c4 	addi	r2,r5,67
    56c8:	28800015 	stw	r2,0(r5)
    56cc:	28800415 	stw	r2,16(r5)
    56d0:	00800044 	movi	r2,1
    56d4:	28800515 	stw	r2,20(r5)
    56d8:	f800283a 	ret
    56dc:	04801004 	movi	r18,64
    56e0:	003fe006 	br	5664 <__alt_data_end+0xfffd3664>
    56e4:	81000a17 	ldw	r4,40(r16)
    56e8:	00c00034 	movhi	r3,0
    56ec:	18defa04 	addi	r3,r3,31720
    56f0:	20ffc51e 	bne	r4,r3,5608 <__alt_data_end+0xfffd3608>
    56f4:	8080030b 	ldhu	r2,12(r16)
    56f8:	04810004 	movi	r18,1024
    56fc:	84801315 	stw	r18,76(r16)
    5700:	1484b03a 	or	r2,r2,r18
    5704:	8080030d 	sth	r2,12(r16)
    5708:	0027883a 	mov	r19,zero
    570c:	003fd806 	br	5670 <__alt_data_end+0xfffd3670>
    5710:	8140038f 	ldh	r5,14(r16)
    5714:	8809883a 	mov	r4,r17
    5718:	00099180 	call	9918 <_isatty_r>
    571c:	103fe226 	beq	r2,zero,56a8 <__alt_data_end+0xfffd36a8>
    5720:	8080030b 	ldhu	r2,12(r16)
    5724:	10800054 	ori	r2,r2,1
    5728:	8080030d 	sth	r2,12(r16)
    572c:	003fde06 	br	56a8 <__alt_data_end+0xfffd36a8>
    5730:	8080030b 	ldhu	r2,12(r16)
    5734:	10c0800c 	andi	r3,r2,512
    5738:	183fdb1e 	bne	r3,zero,56a8 <__alt_data_end+0xfffd36a8>
    573c:	10800094 	ori	r2,r2,2
    5740:	80c010c4 	addi	r3,r16,67
    5744:	8080030d 	sth	r2,12(r16)
    5748:	00800044 	movi	r2,1
    574c:	80c00015 	stw	r3,0(r16)
    5750:	80c00415 	stw	r3,16(r16)
    5754:	80800515 	stw	r2,20(r16)
    5758:	003fd306 	br	56a8 <__alt_data_end+0xfffd36a8>
    575c:	04810004 	movi	r18,1024
    5760:	003fc306 	br	5670 <__alt_data_end+0xfffd3670>
    5764:	0027883a 	mov	r19,zero
    5768:	04810004 	movi	r18,1024
    576c:	003fc006 	br	5670 <__alt_data_end+0xfffd3670>

00005770 <_malloc_r>:
    5770:	defff504 	addi	sp,sp,-44
    5774:	dc800315 	stw	r18,12(sp)
    5778:	dfc00a15 	stw	ra,40(sp)
    577c:	df000915 	stw	fp,36(sp)
    5780:	ddc00815 	stw	r23,32(sp)
    5784:	dd800715 	stw	r22,28(sp)
    5788:	dd400615 	stw	r21,24(sp)
    578c:	dd000515 	stw	r20,20(sp)
    5790:	dcc00415 	stw	r19,16(sp)
    5794:	dc400215 	stw	r17,8(sp)
    5798:	dc000115 	stw	r16,4(sp)
    579c:	288002c4 	addi	r2,r5,11
    57a0:	00c00584 	movi	r3,22
    57a4:	2025883a 	mov	r18,r4
    57a8:	18807f2e 	bgeu	r3,r2,59a8 <_malloc_r+0x238>
    57ac:	047ffe04 	movi	r17,-8
    57b0:	1462703a 	and	r17,r2,r17
    57b4:	8800a316 	blt	r17,zero,5a44 <_malloc_r+0x2d4>
    57b8:	8940a236 	bltu	r17,r5,5a44 <_malloc_r+0x2d4>
    57bc:	000d9480 	call	d948 <__malloc_lock>
    57c0:	00807dc4 	movi	r2,503
    57c4:	1441e92e 	bgeu	r2,r17,5f6c <_malloc_r+0x7fc>
    57c8:	8804d27a 	srli	r2,r17,9
    57cc:	1000a126 	beq	r2,zero,5a54 <_malloc_r+0x2e4>
    57d0:	00c00104 	movi	r3,4
    57d4:	18811e36 	bltu	r3,r2,5c50 <_malloc_r+0x4e0>
    57d8:	8804d1ba 	srli	r2,r17,6
    57dc:	12000e44 	addi	r8,r2,57
    57e0:	11c00e04 	addi	r7,r2,56
    57e4:	4209883a 	add	r4,r8,r8
    57e8:	04c00074 	movhi	r19,1
    57ec:	2109883a 	add	r4,r4,r4
    57f0:	9cd1bb04 	addi	r19,r19,18156
    57f4:	2109883a 	add	r4,r4,r4
    57f8:	9909883a 	add	r4,r19,r4
    57fc:	24000117 	ldw	r16,4(r4)
    5800:	213ffe04 	addi	r4,r4,-8
    5804:	24009726 	beq	r4,r16,5a64 <_malloc_r+0x2f4>
    5808:	80800117 	ldw	r2,4(r16)
    580c:	01bfff04 	movi	r6,-4
    5810:	014003c4 	movi	r5,15
    5814:	1184703a 	and	r2,r2,r6
    5818:	1447c83a 	sub	r3,r2,r17
    581c:	28c00716 	blt	r5,r3,583c <_malloc_r+0xcc>
    5820:	1800920e 	bge	r3,zero,5a6c <_malloc_r+0x2fc>
    5824:	84000317 	ldw	r16,12(r16)
    5828:	24008e26 	beq	r4,r16,5a64 <_malloc_r+0x2f4>
    582c:	80800117 	ldw	r2,4(r16)
    5830:	1184703a 	and	r2,r2,r6
    5834:	1447c83a 	sub	r3,r2,r17
    5838:	28fff90e 	bge	r5,r3,5820 <__alt_data_end+0xfffd3820>
    583c:	3809883a 	mov	r4,r7
    5840:	01800074 	movhi	r6,1
    5844:	9c000417 	ldw	r16,16(r19)
    5848:	3191bb04 	addi	r6,r6,18156
    584c:	32000204 	addi	r8,r6,8
    5850:	82013426 	beq	r16,r8,5d24 <_malloc_r+0x5b4>
    5854:	80c00117 	ldw	r3,4(r16)
    5858:	00bfff04 	movi	r2,-4
    585c:	188e703a 	and	r7,r3,r2
    5860:	3c45c83a 	sub	r2,r7,r17
    5864:	00c003c4 	movi	r3,15
    5868:	18811f16 	blt	r3,r2,5ce8 <_malloc_r+0x578>
    586c:	32000515 	stw	r8,20(r6)
    5870:	32000415 	stw	r8,16(r6)
    5874:	10007f0e 	bge	r2,zero,5a74 <_malloc_r+0x304>
    5878:	00807fc4 	movi	r2,511
    587c:	11c0fd36 	bltu	r2,r7,5c74 <_malloc_r+0x504>
    5880:	3806d0fa 	srli	r3,r7,3
    5884:	01c00044 	movi	r7,1
    5888:	30800117 	ldw	r2,4(r6)
    588c:	19400044 	addi	r5,r3,1
    5890:	294b883a 	add	r5,r5,r5
    5894:	1807d0ba 	srai	r3,r3,2
    5898:	294b883a 	add	r5,r5,r5
    589c:	294b883a 	add	r5,r5,r5
    58a0:	298b883a 	add	r5,r5,r6
    58a4:	38c6983a 	sll	r3,r7,r3
    58a8:	29c00017 	ldw	r7,0(r5)
    58ac:	2a7ffe04 	addi	r9,r5,-8
    58b0:	1886b03a 	or	r3,r3,r2
    58b4:	82400315 	stw	r9,12(r16)
    58b8:	81c00215 	stw	r7,8(r16)
    58bc:	30c00115 	stw	r3,4(r6)
    58c0:	2c000015 	stw	r16,0(r5)
    58c4:	3c000315 	stw	r16,12(r7)
    58c8:	2005d0ba 	srai	r2,r4,2
    58cc:	01400044 	movi	r5,1
    58d0:	288a983a 	sll	r5,r5,r2
    58d4:	19406f36 	bltu	r3,r5,5a94 <_malloc_r+0x324>
    58d8:	28c4703a 	and	r2,r5,r3
    58dc:	10000a1e 	bne	r2,zero,5908 <_malloc_r+0x198>
    58e0:	00bfff04 	movi	r2,-4
    58e4:	294b883a 	add	r5,r5,r5
    58e8:	2088703a 	and	r4,r4,r2
    58ec:	28c4703a 	and	r2,r5,r3
    58f0:	21000104 	addi	r4,r4,4
    58f4:	1000041e 	bne	r2,zero,5908 <_malloc_r+0x198>
    58f8:	294b883a 	add	r5,r5,r5
    58fc:	28c4703a 	and	r2,r5,r3
    5900:	21000104 	addi	r4,r4,4
    5904:	103ffc26 	beq	r2,zero,58f8 <__alt_data_end+0xfffd38f8>
    5908:	02bfff04 	movi	r10,-4
    590c:	024003c4 	movi	r9,15
    5910:	21800044 	addi	r6,r4,1
    5914:	318d883a 	add	r6,r6,r6
    5918:	318d883a 	add	r6,r6,r6
    591c:	318d883a 	add	r6,r6,r6
    5920:	998d883a 	add	r6,r19,r6
    5924:	333ffe04 	addi	r12,r6,-8
    5928:	2017883a 	mov	r11,r4
    592c:	31800104 	addi	r6,r6,4
    5930:	34000017 	ldw	r16,0(r6)
    5934:	31fffd04 	addi	r7,r6,-12
    5938:	81c0041e 	bne	r16,r7,594c <_malloc_r+0x1dc>
    593c:	0000fb06 	br	5d2c <_malloc_r+0x5bc>
    5940:	1801030e 	bge	r3,zero,5d50 <_malloc_r+0x5e0>
    5944:	84000317 	ldw	r16,12(r16)
    5948:	81c0f826 	beq	r16,r7,5d2c <_malloc_r+0x5bc>
    594c:	80800117 	ldw	r2,4(r16)
    5950:	1284703a 	and	r2,r2,r10
    5954:	1447c83a 	sub	r3,r2,r17
    5958:	48fff90e 	bge	r9,r3,5940 <__alt_data_end+0xfffd3940>
    595c:	80800317 	ldw	r2,12(r16)
    5960:	81000217 	ldw	r4,8(r16)
    5964:	89400054 	ori	r5,r17,1
    5968:	81400115 	stw	r5,4(r16)
    596c:	20800315 	stw	r2,12(r4)
    5970:	11000215 	stw	r4,8(r2)
    5974:	8463883a 	add	r17,r16,r17
    5978:	9c400515 	stw	r17,20(r19)
    597c:	9c400415 	stw	r17,16(r19)
    5980:	18800054 	ori	r2,r3,1
    5984:	88800115 	stw	r2,4(r17)
    5988:	8a000315 	stw	r8,12(r17)
    598c:	8a000215 	stw	r8,8(r17)
    5990:	88e3883a 	add	r17,r17,r3
    5994:	88c00015 	stw	r3,0(r17)
    5998:	9009883a 	mov	r4,r18
    599c:	000d96c0 	call	d96c <__malloc_unlock>
    59a0:	80800204 	addi	r2,r16,8
    59a4:	00001b06 	br	5a14 <_malloc_r+0x2a4>
    59a8:	04400404 	movi	r17,16
    59ac:	89402536 	bltu	r17,r5,5a44 <_malloc_r+0x2d4>
    59b0:	000d9480 	call	d948 <__malloc_lock>
    59b4:	00800184 	movi	r2,6
    59b8:	01000084 	movi	r4,2
    59bc:	04c00074 	movhi	r19,1
    59c0:	1085883a 	add	r2,r2,r2
    59c4:	9cd1bb04 	addi	r19,r19,18156
    59c8:	1085883a 	add	r2,r2,r2
    59cc:	9885883a 	add	r2,r19,r2
    59d0:	14000117 	ldw	r16,4(r2)
    59d4:	10fffe04 	addi	r3,r2,-8
    59d8:	80c0d926 	beq	r16,r3,5d40 <_malloc_r+0x5d0>
    59dc:	80c00117 	ldw	r3,4(r16)
    59e0:	81000317 	ldw	r4,12(r16)
    59e4:	00bfff04 	movi	r2,-4
    59e8:	1884703a 	and	r2,r3,r2
    59ec:	81400217 	ldw	r5,8(r16)
    59f0:	8085883a 	add	r2,r16,r2
    59f4:	10c00117 	ldw	r3,4(r2)
    59f8:	29000315 	stw	r4,12(r5)
    59fc:	21400215 	stw	r5,8(r4)
    5a00:	18c00054 	ori	r3,r3,1
    5a04:	10c00115 	stw	r3,4(r2)
    5a08:	9009883a 	mov	r4,r18
    5a0c:	000d96c0 	call	d96c <__malloc_unlock>
    5a10:	80800204 	addi	r2,r16,8
    5a14:	dfc00a17 	ldw	ra,40(sp)
    5a18:	df000917 	ldw	fp,36(sp)
    5a1c:	ddc00817 	ldw	r23,32(sp)
    5a20:	dd800717 	ldw	r22,28(sp)
    5a24:	dd400617 	ldw	r21,24(sp)
    5a28:	dd000517 	ldw	r20,20(sp)
    5a2c:	dcc00417 	ldw	r19,16(sp)
    5a30:	dc800317 	ldw	r18,12(sp)
    5a34:	dc400217 	ldw	r17,8(sp)
    5a38:	dc000117 	ldw	r16,4(sp)
    5a3c:	dec00b04 	addi	sp,sp,44
    5a40:	f800283a 	ret
    5a44:	00800304 	movi	r2,12
    5a48:	90800015 	stw	r2,0(r18)
    5a4c:	0005883a 	mov	r2,zero
    5a50:	003ff006 	br	5a14 <__alt_data_end+0xfffd3a14>
    5a54:	01002004 	movi	r4,128
    5a58:	02001004 	movi	r8,64
    5a5c:	01c00fc4 	movi	r7,63
    5a60:	003f6106 	br	57e8 <__alt_data_end+0xfffd37e8>
    5a64:	4009883a 	mov	r4,r8
    5a68:	003f7506 	br	5840 <__alt_data_end+0xfffd3840>
    5a6c:	81000317 	ldw	r4,12(r16)
    5a70:	003fde06 	br	59ec <__alt_data_end+0xfffd39ec>
    5a74:	81c5883a 	add	r2,r16,r7
    5a78:	11400117 	ldw	r5,4(r2)
    5a7c:	9009883a 	mov	r4,r18
    5a80:	29400054 	ori	r5,r5,1
    5a84:	11400115 	stw	r5,4(r2)
    5a88:	000d96c0 	call	d96c <__malloc_unlock>
    5a8c:	80800204 	addi	r2,r16,8
    5a90:	003fe006 	br	5a14 <__alt_data_end+0xfffd3a14>
    5a94:	9c000217 	ldw	r16,8(r19)
    5a98:	00bfff04 	movi	r2,-4
    5a9c:	85800117 	ldw	r22,4(r16)
    5aa0:	b0ac703a 	and	r22,r22,r2
    5aa4:	b4400336 	bltu	r22,r17,5ab4 <_malloc_r+0x344>
    5aa8:	b445c83a 	sub	r2,r22,r17
    5aac:	00c003c4 	movi	r3,15
    5ab0:	18805d16 	blt	r3,r2,5c28 <_malloc_r+0x4b8>
    5ab4:	05c00074 	movhi	r23,1
    5ab8:	00800074 	movhi	r2,1
    5abc:	109e2604 	addi	r2,r2,30872
    5ac0:	bdd74d04 	addi	r23,r23,23860
    5ac4:	15400017 	ldw	r21,0(r2)
    5ac8:	b8c00017 	ldw	r3,0(r23)
    5acc:	00bfffc4 	movi	r2,-1
    5ad0:	858d883a 	add	r6,r16,r22
    5ad4:	8d6b883a 	add	r21,r17,r21
    5ad8:	1880ea26 	beq	r3,r2,5e84 <_malloc_r+0x714>
    5adc:	ad4403c4 	addi	r21,r21,4111
    5ae0:	00bc0004 	movi	r2,-4096
    5ae4:	a8aa703a 	and	r21,r21,r2
    5ae8:	a80b883a 	mov	r5,r21
    5aec:	9009883a 	mov	r4,r18
    5af0:	d9800015 	stw	r6,0(sp)
    5af4:	0007abc0 	call	7abc <_sbrk_r>
    5af8:	1029883a 	mov	r20,r2
    5afc:	00bfffc4 	movi	r2,-1
    5b00:	d9800017 	ldw	r6,0(sp)
    5b04:	a080e826 	beq	r20,r2,5ea8 <_malloc_r+0x738>
    5b08:	a180a636 	bltu	r20,r6,5da4 <_malloc_r+0x634>
    5b0c:	07000074 	movhi	fp,1
    5b10:	e71e3c04 	addi	fp,fp,30960
    5b14:	e0800017 	ldw	r2,0(fp)
    5b18:	a887883a 	add	r3,r21,r2
    5b1c:	e0c00015 	stw	r3,0(fp)
    5b20:	3500e626 	beq	r6,r20,5ebc <_malloc_r+0x74c>
    5b24:	b9000017 	ldw	r4,0(r23)
    5b28:	00bfffc4 	movi	r2,-1
    5b2c:	2080ee26 	beq	r4,r2,5ee8 <_malloc_r+0x778>
    5b30:	a185c83a 	sub	r2,r20,r6
    5b34:	10c5883a 	add	r2,r2,r3
    5b38:	e0800015 	stw	r2,0(fp)
    5b3c:	a0c001cc 	andi	r3,r20,7
    5b40:	1800bc26 	beq	r3,zero,5e34 <_malloc_r+0x6c4>
    5b44:	a0e9c83a 	sub	r20,r20,r3
    5b48:	00840204 	movi	r2,4104
    5b4c:	a5000204 	addi	r20,r20,8
    5b50:	10c7c83a 	sub	r3,r2,r3
    5b54:	a545883a 	add	r2,r20,r21
    5b58:	1083ffcc 	andi	r2,r2,4095
    5b5c:	18abc83a 	sub	r21,r3,r2
    5b60:	a80b883a 	mov	r5,r21
    5b64:	9009883a 	mov	r4,r18
    5b68:	0007abc0 	call	7abc <_sbrk_r>
    5b6c:	00ffffc4 	movi	r3,-1
    5b70:	10c0e126 	beq	r2,r3,5ef8 <_malloc_r+0x788>
    5b74:	1505c83a 	sub	r2,r2,r20
    5b78:	1545883a 	add	r2,r2,r21
    5b7c:	10800054 	ori	r2,r2,1
    5b80:	e0c00017 	ldw	r3,0(fp)
    5b84:	9d000215 	stw	r20,8(r19)
    5b88:	a0800115 	stw	r2,4(r20)
    5b8c:	a8c7883a 	add	r3,r21,r3
    5b90:	e0c00015 	stw	r3,0(fp)
    5b94:	84c00e26 	beq	r16,r19,5bd0 <_malloc_r+0x460>
    5b98:	018003c4 	movi	r6,15
    5b9c:	3580a72e 	bgeu	r6,r22,5e3c <_malloc_r+0x6cc>
    5ba0:	81400117 	ldw	r5,4(r16)
    5ba4:	013ffe04 	movi	r4,-8
    5ba8:	b0bffd04 	addi	r2,r22,-12
    5bac:	1104703a 	and	r2,r2,r4
    5bb0:	2900004c 	andi	r4,r5,1
    5bb4:	2088b03a 	or	r4,r4,r2
    5bb8:	81000115 	stw	r4,4(r16)
    5bbc:	01400144 	movi	r5,5
    5bc0:	8089883a 	add	r4,r16,r2
    5bc4:	21400115 	stw	r5,4(r4)
    5bc8:	21400215 	stw	r5,8(r4)
    5bcc:	3080cd36 	bltu	r6,r2,5f04 <_malloc_r+0x794>
    5bd0:	00800074 	movhi	r2,1
    5bd4:	109e2504 	addi	r2,r2,30868
    5bd8:	11000017 	ldw	r4,0(r2)
    5bdc:	20c0012e 	bgeu	r4,r3,5be4 <_malloc_r+0x474>
    5be0:	10c00015 	stw	r3,0(r2)
    5be4:	00800074 	movhi	r2,1
    5be8:	109e2404 	addi	r2,r2,30864
    5bec:	11000017 	ldw	r4,0(r2)
    5bf0:	9c000217 	ldw	r16,8(r19)
    5bf4:	20c0012e 	bgeu	r4,r3,5bfc <_malloc_r+0x48c>
    5bf8:	10c00015 	stw	r3,0(r2)
    5bfc:	80c00117 	ldw	r3,4(r16)
    5c00:	00bfff04 	movi	r2,-4
    5c04:	1886703a 	and	r3,r3,r2
    5c08:	1c45c83a 	sub	r2,r3,r17
    5c0c:	1c400236 	bltu	r3,r17,5c18 <_malloc_r+0x4a8>
    5c10:	00c003c4 	movi	r3,15
    5c14:	18800416 	blt	r3,r2,5c28 <_malloc_r+0x4b8>
    5c18:	9009883a 	mov	r4,r18
    5c1c:	000d96c0 	call	d96c <__malloc_unlock>
    5c20:	0005883a 	mov	r2,zero
    5c24:	003f7b06 	br	5a14 <__alt_data_end+0xfffd3a14>
    5c28:	88c00054 	ori	r3,r17,1
    5c2c:	80c00115 	stw	r3,4(r16)
    5c30:	8463883a 	add	r17,r16,r17
    5c34:	10800054 	ori	r2,r2,1
    5c38:	9c400215 	stw	r17,8(r19)
    5c3c:	88800115 	stw	r2,4(r17)
    5c40:	9009883a 	mov	r4,r18
    5c44:	000d96c0 	call	d96c <__malloc_unlock>
    5c48:	80800204 	addi	r2,r16,8
    5c4c:	003f7106 	br	5a14 <__alt_data_end+0xfffd3a14>
    5c50:	00c00504 	movi	r3,20
    5c54:	18804a2e 	bgeu	r3,r2,5d80 <_malloc_r+0x610>
    5c58:	00c01504 	movi	r3,84
    5c5c:	18806e36 	bltu	r3,r2,5e18 <_malloc_r+0x6a8>
    5c60:	8804d33a 	srli	r2,r17,12
    5c64:	12001bc4 	addi	r8,r2,111
    5c68:	11c01b84 	addi	r7,r2,110
    5c6c:	4209883a 	add	r4,r8,r8
    5c70:	003edd06 	br	57e8 <__alt_data_end+0xfffd37e8>
    5c74:	3804d27a 	srli	r2,r7,9
    5c78:	00c00104 	movi	r3,4
    5c7c:	1880442e 	bgeu	r3,r2,5d90 <_malloc_r+0x620>
    5c80:	00c00504 	movi	r3,20
    5c84:	18808136 	bltu	r3,r2,5e8c <_malloc_r+0x71c>
    5c88:	11401704 	addi	r5,r2,92
    5c8c:	10c016c4 	addi	r3,r2,91
    5c90:	294b883a 	add	r5,r5,r5
    5c94:	294b883a 	add	r5,r5,r5
    5c98:	294b883a 	add	r5,r5,r5
    5c9c:	994b883a 	add	r5,r19,r5
    5ca0:	28800017 	ldw	r2,0(r5)
    5ca4:	01800074 	movhi	r6,1
    5ca8:	297ffe04 	addi	r5,r5,-8
    5cac:	3191bb04 	addi	r6,r6,18156
    5cb0:	28806526 	beq	r5,r2,5e48 <_malloc_r+0x6d8>
    5cb4:	01bfff04 	movi	r6,-4
    5cb8:	10c00117 	ldw	r3,4(r2)
    5cbc:	1986703a 	and	r3,r3,r6
    5cc0:	38c0022e 	bgeu	r7,r3,5ccc <_malloc_r+0x55c>
    5cc4:	10800217 	ldw	r2,8(r2)
    5cc8:	28bffb1e 	bne	r5,r2,5cb8 <__alt_data_end+0xfffd3cb8>
    5ccc:	11400317 	ldw	r5,12(r2)
    5cd0:	98c00117 	ldw	r3,4(r19)
    5cd4:	81400315 	stw	r5,12(r16)
    5cd8:	80800215 	stw	r2,8(r16)
    5cdc:	2c000215 	stw	r16,8(r5)
    5ce0:	14000315 	stw	r16,12(r2)
    5ce4:	003ef806 	br	58c8 <__alt_data_end+0xfffd38c8>
    5ce8:	88c00054 	ori	r3,r17,1
    5cec:	80c00115 	stw	r3,4(r16)
    5cf0:	8463883a 	add	r17,r16,r17
    5cf4:	34400515 	stw	r17,20(r6)
    5cf8:	34400415 	stw	r17,16(r6)
    5cfc:	10c00054 	ori	r3,r2,1
    5d00:	8a000315 	stw	r8,12(r17)
    5d04:	8a000215 	stw	r8,8(r17)
    5d08:	88c00115 	stw	r3,4(r17)
    5d0c:	88a3883a 	add	r17,r17,r2
    5d10:	88800015 	stw	r2,0(r17)
    5d14:	9009883a 	mov	r4,r18
    5d18:	000d96c0 	call	d96c <__malloc_unlock>
    5d1c:	80800204 	addi	r2,r16,8
    5d20:	003f3c06 	br	5a14 <__alt_data_end+0xfffd3a14>
    5d24:	30c00117 	ldw	r3,4(r6)
    5d28:	003ee706 	br	58c8 <__alt_data_end+0xfffd38c8>
    5d2c:	5ac00044 	addi	r11,r11,1
    5d30:	588000cc 	andi	r2,r11,3
    5d34:	31800204 	addi	r6,r6,8
    5d38:	103efd1e 	bne	r2,zero,5930 <__alt_data_end+0xfffd3930>
    5d3c:	00002406 	br	5dd0 <_malloc_r+0x660>
    5d40:	14000317 	ldw	r16,12(r2)
    5d44:	143f251e 	bne	r2,r16,59dc <__alt_data_end+0xfffd39dc>
    5d48:	21000084 	addi	r4,r4,2
    5d4c:	003ebc06 	br	5840 <__alt_data_end+0xfffd3840>
    5d50:	8085883a 	add	r2,r16,r2
    5d54:	10c00117 	ldw	r3,4(r2)
    5d58:	81000317 	ldw	r4,12(r16)
    5d5c:	81400217 	ldw	r5,8(r16)
    5d60:	18c00054 	ori	r3,r3,1
    5d64:	10c00115 	stw	r3,4(r2)
    5d68:	29000315 	stw	r4,12(r5)
    5d6c:	21400215 	stw	r5,8(r4)
    5d70:	9009883a 	mov	r4,r18
    5d74:	000d96c0 	call	d96c <__malloc_unlock>
    5d78:	80800204 	addi	r2,r16,8
    5d7c:	003f2506 	br	5a14 <__alt_data_end+0xfffd3a14>
    5d80:	12001704 	addi	r8,r2,92
    5d84:	11c016c4 	addi	r7,r2,91
    5d88:	4209883a 	add	r4,r8,r8
    5d8c:	003e9606 	br	57e8 <__alt_data_end+0xfffd37e8>
    5d90:	3804d1ba 	srli	r2,r7,6
    5d94:	11400e44 	addi	r5,r2,57
    5d98:	10c00e04 	addi	r3,r2,56
    5d9c:	294b883a 	add	r5,r5,r5
    5da0:	003fbc06 	br	5c94 <__alt_data_end+0xfffd3c94>
    5da4:	84ff5926 	beq	r16,r19,5b0c <__alt_data_end+0xfffd3b0c>
    5da8:	00800074 	movhi	r2,1
    5dac:	1091bb04 	addi	r2,r2,18156
    5db0:	14000217 	ldw	r16,8(r2)
    5db4:	00bfff04 	movi	r2,-4
    5db8:	80c00117 	ldw	r3,4(r16)
    5dbc:	1886703a 	and	r3,r3,r2
    5dc0:	003f9106 	br	5c08 <__alt_data_end+0xfffd3c08>
    5dc4:	60800217 	ldw	r2,8(r12)
    5dc8:	213fffc4 	addi	r4,r4,-1
    5dcc:	1300651e 	bne	r2,r12,5f64 <_malloc_r+0x7f4>
    5dd0:	208000cc 	andi	r2,r4,3
    5dd4:	633ffe04 	addi	r12,r12,-8
    5dd8:	103ffa1e 	bne	r2,zero,5dc4 <__alt_data_end+0xfffd3dc4>
    5ddc:	98800117 	ldw	r2,4(r19)
    5de0:	0146303a 	nor	r3,zero,r5
    5de4:	1884703a 	and	r2,r3,r2
    5de8:	98800115 	stw	r2,4(r19)
    5dec:	294b883a 	add	r5,r5,r5
    5df0:	117f2836 	bltu	r2,r5,5a94 <__alt_data_end+0xfffd3a94>
    5df4:	283f2726 	beq	r5,zero,5a94 <__alt_data_end+0xfffd3a94>
    5df8:	2886703a 	and	r3,r5,r2
    5dfc:	5809883a 	mov	r4,r11
    5e00:	183ec31e 	bne	r3,zero,5910 <__alt_data_end+0xfffd3910>
    5e04:	294b883a 	add	r5,r5,r5
    5e08:	2886703a 	and	r3,r5,r2
    5e0c:	21000104 	addi	r4,r4,4
    5e10:	183ffc26 	beq	r3,zero,5e04 <__alt_data_end+0xfffd3e04>
    5e14:	003ebe06 	br	5910 <__alt_data_end+0xfffd3910>
    5e18:	00c05504 	movi	r3,340
    5e1c:	18801236 	bltu	r3,r2,5e68 <_malloc_r+0x6f8>
    5e20:	8804d3fa 	srli	r2,r17,15
    5e24:	12001e04 	addi	r8,r2,120
    5e28:	11c01dc4 	addi	r7,r2,119
    5e2c:	4209883a 	add	r4,r8,r8
    5e30:	003e6d06 	br	57e8 <__alt_data_end+0xfffd37e8>
    5e34:	00c40004 	movi	r3,4096
    5e38:	003f4606 	br	5b54 <__alt_data_end+0xfffd3b54>
    5e3c:	00800044 	movi	r2,1
    5e40:	a0800115 	stw	r2,4(r20)
    5e44:	003f7406 	br	5c18 <__alt_data_end+0xfffd3c18>
    5e48:	1805d0ba 	srai	r2,r3,2
    5e4c:	01c00044 	movi	r7,1
    5e50:	30c00117 	ldw	r3,4(r6)
    5e54:	388e983a 	sll	r7,r7,r2
    5e58:	2805883a 	mov	r2,r5
    5e5c:	38c6b03a 	or	r3,r7,r3
    5e60:	30c00115 	stw	r3,4(r6)
    5e64:	003f9b06 	br	5cd4 <__alt_data_end+0xfffd3cd4>
    5e68:	00c15504 	movi	r3,1364
    5e6c:	18801a36 	bltu	r3,r2,5ed8 <_malloc_r+0x768>
    5e70:	8804d4ba 	srli	r2,r17,18
    5e74:	12001f44 	addi	r8,r2,125
    5e78:	11c01f04 	addi	r7,r2,124
    5e7c:	4209883a 	add	r4,r8,r8
    5e80:	003e5906 	br	57e8 <__alt_data_end+0xfffd37e8>
    5e84:	ad400404 	addi	r21,r21,16
    5e88:	003f1706 	br	5ae8 <__alt_data_end+0xfffd3ae8>
    5e8c:	00c01504 	movi	r3,84
    5e90:	18802336 	bltu	r3,r2,5f20 <_malloc_r+0x7b0>
    5e94:	3804d33a 	srli	r2,r7,12
    5e98:	11401bc4 	addi	r5,r2,111
    5e9c:	10c01b84 	addi	r3,r2,110
    5ea0:	294b883a 	add	r5,r5,r5
    5ea4:	003f7b06 	br	5c94 <__alt_data_end+0xfffd3c94>
    5ea8:	9c000217 	ldw	r16,8(r19)
    5eac:	00bfff04 	movi	r2,-4
    5eb0:	80c00117 	ldw	r3,4(r16)
    5eb4:	1886703a 	and	r3,r3,r2
    5eb8:	003f5306 	br	5c08 <__alt_data_end+0xfffd3c08>
    5ebc:	3083ffcc 	andi	r2,r6,4095
    5ec0:	103f181e 	bne	r2,zero,5b24 <__alt_data_end+0xfffd3b24>
    5ec4:	99000217 	ldw	r4,8(r19)
    5ec8:	b545883a 	add	r2,r22,r21
    5ecc:	10800054 	ori	r2,r2,1
    5ed0:	20800115 	stw	r2,4(r4)
    5ed4:	003f3e06 	br	5bd0 <__alt_data_end+0xfffd3bd0>
    5ed8:	01003f84 	movi	r4,254
    5edc:	02001fc4 	movi	r8,127
    5ee0:	01c01f84 	movi	r7,126
    5ee4:	003e4006 	br	57e8 <__alt_data_end+0xfffd37e8>
    5ee8:	00800074 	movhi	r2,1
    5eec:	10974d04 	addi	r2,r2,23860
    5ef0:	15000015 	stw	r20,0(r2)
    5ef4:	003f1106 	br	5b3c <__alt_data_end+0xfffd3b3c>
    5ef8:	00800044 	movi	r2,1
    5efc:	002b883a 	mov	r21,zero
    5f00:	003f1f06 	br	5b80 <__alt_data_end+0xfffd3b80>
    5f04:	81400204 	addi	r5,r16,8
    5f08:	9009883a 	mov	r4,r18
    5f0c:	0004b780 	call	4b78 <_free_r>
    5f10:	00800074 	movhi	r2,1
    5f14:	109e3c04 	addi	r2,r2,30960
    5f18:	10c00017 	ldw	r3,0(r2)
    5f1c:	003f2c06 	br	5bd0 <__alt_data_end+0xfffd3bd0>
    5f20:	00c05504 	movi	r3,340
    5f24:	18800536 	bltu	r3,r2,5f3c <_malloc_r+0x7cc>
    5f28:	3804d3fa 	srli	r2,r7,15
    5f2c:	11401e04 	addi	r5,r2,120
    5f30:	10c01dc4 	addi	r3,r2,119
    5f34:	294b883a 	add	r5,r5,r5
    5f38:	003f5606 	br	5c94 <__alt_data_end+0xfffd3c94>
    5f3c:	00c15504 	movi	r3,1364
    5f40:	18800536 	bltu	r3,r2,5f58 <_malloc_r+0x7e8>
    5f44:	3804d4ba 	srli	r2,r7,18
    5f48:	11401f44 	addi	r5,r2,125
    5f4c:	10c01f04 	addi	r3,r2,124
    5f50:	294b883a 	add	r5,r5,r5
    5f54:	003f4f06 	br	5c94 <__alt_data_end+0xfffd3c94>
    5f58:	01403f84 	movi	r5,254
    5f5c:	00c01f84 	movi	r3,126
    5f60:	003f4c06 	br	5c94 <__alt_data_end+0xfffd3c94>
    5f64:	98800117 	ldw	r2,4(r19)
    5f68:	003fa006 	br	5dec <__alt_data_end+0xfffd3dec>
    5f6c:	8808d0fa 	srli	r4,r17,3
    5f70:	20800044 	addi	r2,r4,1
    5f74:	1085883a 	add	r2,r2,r2
    5f78:	003e9006 	br	59bc <__alt_data_end+0xfffd39bc>

00005f7c <memchr>:
    5f7c:	208000cc 	andi	r2,r4,3
    5f80:	280f883a 	mov	r7,r5
    5f84:	10003426 	beq	r2,zero,6058 <memchr+0xdc>
    5f88:	30bfffc4 	addi	r2,r6,-1
    5f8c:	30001a26 	beq	r6,zero,5ff8 <memchr+0x7c>
    5f90:	20c00003 	ldbu	r3,0(r4)
    5f94:	29803fcc 	andi	r6,r5,255
    5f98:	30c0051e 	bne	r6,r3,5fb0 <memchr+0x34>
    5f9c:	00001806 	br	6000 <memchr+0x84>
    5fa0:	10001526 	beq	r2,zero,5ff8 <memchr+0x7c>
    5fa4:	20c00003 	ldbu	r3,0(r4)
    5fa8:	10bfffc4 	addi	r2,r2,-1
    5fac:	30c01426 	beq	r6,r3,6000 <memchr+0x84>
    5fb0:	21000044 	addi	r4,r4,1
    5fb4:	20c000cc 	andi	r3,r4,3
    5fb8:	183ff91e 	bne	r3,zero,5fa0 <__alt_data_end+0xfffd3fa0>
    5fbc:	020000c4 	movi	r8,3
    5fc0:	40801136 	bltu	r8,r2,6008 <memchr+0x8c>
    5fc4:	10000c26 	beq	r2,zero,5ff8 <memchr+0x7c>
    5fc8:	20c00003 	ldbu	r3,0(r4)
    5fcc:	29403fcc 	andi	r5,r5,255
    5fd0:	28c00b26 	beq	r5,r3,6000 <memchr+0x84>
    5fd4:	20c00044 	addi	r3,r4,1
    5fd8:	39803fcc 	andi	r6,r7,255
    5fdc:	2089883a 	add	r4,r4,r2
    5fe0:	00000306 	br	5ff0 <memchr+0x74>
    5fe4:	18c00044 	addi	r3,r3,1
    5fe8:	197fffc3 	ldbu	r5,-1(r3)
    5fec:	31400526 	beq	r6,r5,6004 <memchr+0x88>
    5ff0:	1805883a 	mov	r2,r3
    5ff4:	20fffb1e 	bne	r4,r3,5fe4 <__alt_data_end+0xfffd3fe4>
    5ff8:	0005883a 	mov	r2,zero
    5ffc:	f800283a 	ret
    6000:	2005883a 	mov	r2,r4
    6004:	f800283a 	ret
    6008:	28c03fcc 	andi	r3,r5,255
    600c:	1812923a 	slli	r9,r3,8
    6010:	02ffbff4 	movhi	r11,65279
    6014:	02a02074 	movhi	r10,32897
    6018:	48d2b03a 	or	r9,r9,r3
    601c:	4806943a 	slli	r3,r9,16
    6020:	5affbfc4 	addi	r11,r11,-257
    6024:	52a02004 	addi	r10,r10,-32640
    6028:	48d2b03a 	or	r9,r9,r3
    602c:	20c00017 	ldw	r3,0(r4)
    6030:	48c6f03a 	xor	r3,r9,r3
    6034:	1acd883a 	add	r6,r3,r11
    6038:	00c6303a 	nor	r3,zero,r3
    603c:	30c6703a 	and	r3,r6,r3
    6040:	1a86703a 	and	r3,r3,r10
    6044:	183fe01e 	bne	r3,zero,5fc8 <__alt_data_end+0xfffd3fc8>
    6048:	10bfff04 	addi	r2,r2,-4
    604c:	21000104 	addi	r4,r4,4
    6050:	40bff636 	bltu	r8,r2,602c <__alt_data_end+0xfffd402c>
    6054:	003fdb06 	br	5fc4 <__alt_data_end+0xfffd3fc4>
    6058:	3005883a 	mov	r2,r6
    605c:	003fd706 	br	5fbc <__alt_data_end+0xfffd3fbc>

00006060 <memcpy>:
    6060:	defffd04 	addi	sp,sp,-12
    6064:	dfc00215 	stw	ra,8(sp)
    6068:	dc400115 	stw	r17,4(sp)
    606c:	dc000015 	stw	r16,0(sp)
    6070:	00c003c4 	movi	r3,15
    6074:	2005883a 	mov	r2,r4
    6078:	1980452e 	bgeu	r3,r6,6190 <memcpy+0x130>
    607c:	2906b03a 	or	r3,r5,r4
    6080:	18c000cc 	andi	r3,r3,3
    6084:	1800441e 	bne	r3,zero,6198 <memcpy+0x138>
    6088:	347ffc04 	addi	r17,r6,-16
    608c:	8822d13a 	srli	r17,r17,4
    6090:	28c00104 	addi	r3,r5,4
    6094:	23400104 	addi	r13,r4,4
    6098:	8820913a 	slli	r16,r17,4
    609c:	2b000204 	addi	r12,r5,8
    60a0:	22c00204 	addi	r11,r4,8
    60a4:	84000504 	addi	r16,r16,20
    60a8:	2a800304 	addi	r10,r5,12
    60ac:	22400304 	addi	r9,r4,12
    60b0:	2c21883a 	add	r16,r5,r16
    60b4:	2811883a 	mov	r8,r5
    60b8:	200f883a 	mov	r7,r4
    60bc:	41000017 	ldw	r4,0(r8)
    60c0:	1fc00017 	ldw	ra,0(r3)
    60c4:	63c00017 	ldw	r15,0(r12)
    60c8:	39000015 	stw	r4,0(r7)
    60cc:	53800017 	ldw	r14,0(r10)
    60d0:	6fc00015 	stw	ra,0(r13)
    60d4:	5bc00015 	stw	r15,0(r11)
    60d8:	4b800015 	stw	r14,0(r9)
    60dc:	18c00404 	addi	r3,r3,16
    60e0:	39c00404 	addi	r7,r7,16
    60e4:	42000404 	addi	r8,r8,16
    60e8:	6b400404 	addi	r13,r13,16
    60ec:	63000404 	addi	r12,r12,16
    60f0:	5ac00404 	addi	r11,r11,16
    60f4:	52800404 	addi	r10,r10,16
    60f8:	4a400404 	addi	r9,r9,16
    60fc:	1c3fef1e 	bne	r3,r16,60bc <__alt_data_end+0xfffd40bc>
    6100:	89c00044 	addi	r7,r17,1
    6104:	380e913a 	slli	r7,r7,4
    6108:	310003cc 	andi	r4,r6,15
    610c:	02c000c4 	movi	r11,3
    6110:	11c7883a 	add	r3,r2,r7
    6114:	29cb883a 	add	r5,r5,r7
    6118:	5900212e 	bgeu	r11,r4,61a0 <memcpy+0x140>
    611c:	1813883a 	mov	r9,r3
    6120:	2811883a 	mov	r8,r5
    6124:	200f883a 	mov	r7,r4
    6128:	42800017 	ldw	r10,0(r8)
    612c:	4a400104 	addi	r9,r9,4
    6130:	39ffff04 	addi	r7,r7,-4
    6134:	4abfff15 	stw	r10,-4(r9)
    6138:	42000104 	addi	r8,r8,4
    613c:	59fffa36 	bltu	r11,r7,6128 <__alt_data_end+0xfffd4128>
    6140:	213fff04 	addi	r4,r4,-4
    6144:	2008d0ba 	srli	r4,r4,2
    6148:	318000cc 	andi	r6,r6,3
    614c:	21000044 	addi	r4,r4,1
    6150:	2109883a 	add	r4,r4,r4
    6154:	2109883a 	add	r4,r4,r4
    6158:	1907883a 	add	r3,r3,r4
    615c:	290b883a 	add	r5,r5,r4
    6160:	30000626 	beq	r6,zero,617c <memcpy+0x11c>
    6164:	198d883a 	add	r6,r3,r6
    6168:	29c00003 	ldbu	r7,0(r5)
    616c:	18c00044 	addi	r3,r3,1
    6170:	29400044 	addi	r5,r5,1
    6174:	19ffffc5 	stb	r7,-1(r3)
    6178:	19bffb1e 	bne	r3,r6,6168 <__alt_data_end+0xfffd4168>
    617c:	dfc00217 	ldw	ra,8(sp)
    6180:	dc400117 	ldw	r17,4(sp)
    6184:	dc000017 	ldw	r16,0(sp)
    6188:	dec00304 	addi	sp,sp,12
    618c:	f800283a 	ret
    6190:	2007883a 	mov	r3,r4
    6194:	003ff206 	br	6160 <__alt_data_end+0xfffd4160>
    6198:	2007883a 	mov	r3,r4
    619c:	003ff106 	br	6164 <__alt_data_end+0xfffd4164>
    61a0:	200d883a 	mov	r6,r4
    61a4:	003fee06 	br	6160 <__alt_data_end+0xfffd4160>

000061a8 <memmove>:
    61a8:	2005883a 	mov	r2,r4
    61ac:	29000b2e 	bgeu	r5,r4,61dc <memmove+0x34>
    61b0:	298f883a 	add	r7,r5,r6
    61b4:	21c0092e 	bgeu	r4,r7,61dc <memmove+0x34>
    61b8:	2187883a 	add	r3,r4,r6
    61bc:	198bc83a 	sub	r5,r3,r6
    61c0:	30004826 	beq	r6,zero,62e4 <memmove+0x13c>
    61c4:	39ffffc4 	addi	r7,r7,-1
    61c8:	39000003 	ldbu	r4,0(r7)
    61cc:	18ffffc4 	addi	r3,r3,-1
    61d0:	19000005 	stb	r4,0(r3)
    61d4:	28fffb1e 	bne	r5,r3,61c4 <__alt_data_end+0xfffd41c4>
    61d8:	f800283a 	ret
    61dc:	00c003c4 	movi	r3,15
    61e0:	1980412e 	bgeu	r3,r6,62e8 <memmove+0x140>
    61e4:	2886b03a 	or	r3,r5,r2
    61e8:	18c000cc 	andi	r3,r3,3
    61ec:	1800401e 	bne	r3,zero,62f0 <memmove+0x148>
    61f0:	33fffc04 	addi	r15,r6,-16
    61f4:	781ed13a 	srli	r15,r15,4
    61f8:	28c00104 	addi	r3,r5,4
    61fc:	13400104 	addi	r13,r2,4
    6200:	781c913a 	slli	r14,r15,4
    6204:	2b000204 	addi	r12,r5,8
    6208:	12c00204 	addi	r11,r2,8
    620c:	73800504 	addi	r14,r14,20
    6210:	2a800304 	addi	r10,r5,12
    6214:	12400304 	addi	r9,r2,12
    6218:	2b9d883a 	add	r14,r5,r14
    621c:	2811883a 	mov	r8,r5
    6220:	100f883a 	mov	r7,r2
    6224:	41000017 	ldw	r4,0(r8)
    6228:	39c00404 	addi	r7,r7,16
    622c:	18c00404 	addi	r3,r3,16
    6230:	393ffc15 	stw	r4,-16(r7)
    6234:	193ffc17 	ldw	r4,-16(r3)
    6238:	6b400404 	addi	r13,r13,16
    623c:	5ac00404 	addi	r11,r11,16
    6240:	693ffc15 	stw	r4,-16(r13)
    6244:	61000017 	ldw	r4,0(r12)
    6248:	4a400404 	addi	r9,r9,16
    624c:	42000404 	addi	r8,r8,16
    6250:	593ffc15 	stw	r4,-16(r11)
    6254:	51000017 	ldw	r4,0(r10)
    6258:	63000404 	addi	r12,r12,16
    625c:	52800404 	addi	r10,r10,16
    6260:	493ffc15 	stw	r4,-16(r9)
    6264:	1bbfef1e 	bne	r3,r14,6224 <__alt_data_end+0xfffd4224>
    6268:	79000044 	addi	r4,r15,1
    626c:	2008913a 	slli	r4,r4,4
    6270:	328003cc 	andi	r10,r6,15
    6274:	02c000c4 	movi	r11,3
    6278:	1107883a 	add	r3,r2,r4
    627c:	290b883a 	add	r5,r5,r4
    6280:	5a801e2e 	bgeu	r11,r10,62fc <memmove+0x154>
    6284:	1813883a 	mov	r9,r3
    6288:	2811883a 	mov	r8,r5
    628c:	500f883a 	mov	r7,r10
    6290:	41000017 	ldw	r4,0(r8)
    6294:	4a400104 	addi	r9,r9,4
    6298:	39ffff04 	addi	r7,r7,-4
    629c:	493fff15 	stw	r4,-4(r9)
    62a0:	42000104 	addi	r8,r8,4
    62a4:	59fffa36 	bltu	r11,r7,6290 <__alt_data_end+0xfffd4290>
    62a8:	513fff04 	addi	r4,r10,-4
    62ac:	2008d0ba 	srli	r4,r4,2
    62b0:	318000cc 	andi	r6,r6,3
    62b4:	21000044 	addi	r4,r4,1
    62b8:	2109883a 	add	r4,r4,r4
    62bc:	2109883a 	add	r4,r4,r4
    62c0:	1907883a 	add	r3,r3,r4
    62c4:	290b883a 	add	r5,r5,r4
    62c8:	30000b26 	beq	r6,zero,62f8 <memmove+0x150>
    62cc:	198d883a 	add	r6,r3,r6
    62d0:	29c00003 	ldbu	r7,0(r5)
    62d4:	18c00044 	addi	r3,r3,1
    62d8:	29400044 	addi	r5,r5,1
    62dc:	19ffffc5 	stb	r7,-1(r3)
    62e0:	19bffb1e 	bne	r3,r6,62d0 <__alt_data_end+0xfffd42d0>
    62e4:	f800283a 	ret
    62e8:	1007883a 	mov	r3,r2
    62ec:	003ff606 	br	62c8 <__alt_data_end+0xfffd42c8>
    62f0:	1007883a 	mov	r3,r2
    62f4:	003ff506 	br	62cc <__alt_data_end+0xfffd42cc>
    62f8:	f800283a 	ret
    62fc:	500d883a 	mov	r6,r10
    6300:	003ff106 	br	62c8 <__alt_data_end+0xfffd42c8>

00006304 <memset>:
    6304:	20c000cc 	andi	r3,r4,3
    6308:	2005883a 	mov	r2,r4
    630c:	18004426 	beq	r3,zero,6420 <memset+0x11c>
    6310:	31ffffc4 	addi	r7,r6,-1
    6314:	30004026 	beq	r6,zero,6418 <memset+0x114>
    6318:	2813883a 	mov	r9,r5
    631c:	200d883a 	mov	r6,r4
    6320:	2007883a 	mov	r3,r4
    6324:	00000406 	br	6338 <memset+0x34>
    6328:	3a3fffc4 	addi	r8,r7,-1
    632c:	31800044 	addi	r6,r6,1
    6330:	38003926 	beq	r7,zero,6418 <memset+0x114>
    6334:	400f883a 	mov	r7,r8
    6338:	18c00044 	addi	r3,r3,1
    633c:	32400005 	stb	r9,0(r6)
    6340:	1a0000cc 	andi	r8,r3,3
    6344:	403ff81e 	bne	r8,zero,6328 <__alt_data_end+0xfffd4328>
    6348:	010000c4 	movi	r4,3
    634c:	21c02d2e 	bgeu	r4,r7,6404 <memset+0x100>
    6350:	29003fcc 	andi	r4,r5,255
    6354:	200c923a 	slli	r6,r4,8
    6358:	3108b03a 	or	r4,r6,r4
    635c:	200c943a 	slli	r6,r4,16
    6360:	218cb03a 	or	r6,r4,r6
    6364:	010003c4 	movi	r4,15
    6368:	21c0182e 	bgeu	r4,r7,63cc <memset+0xc8>
    636c:	3b3ffc04 	addi	r12,r7,-16
    6370:	6018d13a 	srli	r12,r12,4
    6374:	1a000104 	addi	r8,r3,4
    6378:	1ac00204 	addi	r11,r3,8
    637c:	6008913a 	slli	r4,r12,4
    6380:	1a800304 	addi	r10,r3,12
    6384:	1813883a 	mov	r9,r3
    6388:	21000504 	addi	r4,r4,20
    638c:	1909883a 	add	r4,r3,r4
    6390:	49800015 	stw	r6,0(r9)
    6394:	41800015 	stw	r6,0(r8)
    6398:	59800015 	stw	r6,0(r11)
    639c:	51800015 	stw	r6,0(r10)
    63a0:	42000404 	addi	r8,r8,16
    63a4:	4a400404 	addi	r9,r9,16
    63a8:	5ac00404 	addi	r11,r11,16
    63ac:	52800404 	addi	r10,r10,16
    63b0:	413ff71e 	bne	r8,r4,6390 <__alt_data_end+0xfffd4390>
    63b4:	63000044 	addi	r12,r12,1
    63b8:	6018913a 	slli	r12,r12,4
    63bc:	39c003cc 	andi	r7,r7,15
    63c0:	010000c4 	movi	r4,3
    63c4:	1b07883a 	add	r3,r3,r12
    63c8:	21c00e2e 	bgeu	r4,r7,6404 <memset+0x100>
    63cc:	1813883a 	mov	r9,r3
    63d0:	3811883a 	mov	r8,r7
    63d4:	010000c4 	movi	r4,3
    63d8:	49800015 	stw	r6,0(r9)
    63dc:	423fff04 	addi	r8,r8,-4
    63e0:	4a400104 	addi	r9,r9,4
    63e4:	223ffc36 	bltu	r4,r8,63d8 <__alt_data_end+0xfffd43d8>
    63e8:	393fff04 	addi	r4,r7,-4
    63ec:	2008d0ba 	srli	r4,r4,2
    63f0:	39c000cc 	andi	r7,r7,3
    63f4:	21000044 	addi	r4,r4,1
    63f8:	2109883a 	add	r4,r4,r4
    63fc:	2109883a 	add	r4,r4,r4
    6400:	1907883a 	add	r3,r3,r4
    6404:	38000526 	beq	r7,zero,641c <memset+0x118>
    6408:	19cf883a 	add	r7,r3,r7
    640c:	19400005 	stb	r5,0(r3)
    6410:	18c00044 	addi	r3,r3,1
    6414:	38fffd1e 	bne	r7,r3,640c <__alt_data_end+0xfffd440c>
    6418:	f800283a 	ret
    641c:	f800283a 	ret
    6420:	2007883a 	mov	r3,r4
    6424:	300f883a 	mov	r7,r6
    6428:	003fc706 	br	6348 <__alt_data_end+0xfffd4348>

0000642c <_Balloc>:
    642c:	20801317 	ldw	r2,76(r4)
    6430:	defffc04 	addi	sp,sp,-16
    6434:	dc400115 	stw	r17,4(sp)
    6438:	dc000015 	stw	r16,0(sp)
    643c:	dfc00315 	stw	ra,12(sp)
    6440:	dc800215 	stw	r18,8(sp)
    6444:	2023883a 	mov	r17,r4
    6448:	2821883a 	mov	r16,r5
    644c:	10000f26 	beq	r2,zero,648c <_Balloc+0x60>
    6450:	8407883a 	add	r3,r16,r16
    6454:	18c7883a 	add	r3,r3,r3
    6458:	10c7883a 	add	r3,r2,r3
    645c:	18800017 	ldw	r2,0(r3)
    6460:	10001126 	beq	r2,zero,64a8 <_Balloc+0x7c>
    6464:	11000017 	ldw	r4,0(r2)
    6468:	19000015 	stw	r4,0(r3)
    646c:	10000415 	stw	zero,16(r2)
    6470:	10000315 	stw	zero,12(r2)
    6474:	dfc00317 	ldw	ra,12(sp)
    6478:	dc800217 	ldw	r18,8(sp)
    647c:	dc400117 	ldw	r17,4(sp)
    6480:	dc000017 	ldw	r16,0(sp)
    6484:	dec00404 	addi	sp,sp,16
    6488:	f800283a 	ret
    648c:	01800844 	movi	r6,33
    6490:	01400104 	movi	r5,4
    6494:	00094d40 	call	94d4 <_calloc_r>
    6498:	88801315 	stw	r2,76(r17)
    649c:	103fec1e 	bne	r2,zero,6450 <__alt_data_end+0xfffd4450>
    64a0:	0005883a 	mov	r2,zero
    64a4:	003ff306 	br	6474 <__alt_data_end+0xfffd4474>
    64a8:	01400044 	movi	r5,1
    64ac:	2c24983a 	sll	r18,r5,r16
    64b0:	8809883a 	mov	r4,r17
    64b4:	91800144 	addi	r6,r18,5
    64b8:	318d883a 	add	r6,r6,r6
    64bc:	318d883a 	add	r6,r6,r6
    64c0:	00094d40 	call	94d4 <_calloc_r>
    64c4:	103ff626 	beq	r2,zero,64a0 <__alt_data_end+0xfffd44a0>
    64c8:	14000115 	stw	r16,4(r2)
    64cc:	14800215 	stw	r18,8(r2)
    64d0:	003fe606 	br	646c <__alt_data_end+0xfffd446c>

000064d4 <_Bfree>:
    64d4:	28000826 	beq	r5,zero,64f8 <_Bfree+0x24>
    64d8:	28c00117 	ldw	r3,4(r5)
    64dc:	20801317 	ldw	r2,76(r4)
    64e0:	18c7883a 	add	r3,r3,r3
    64e4:	18c7883a 	add	r3,r3,r3
    64e8:	10c5883a 	add	r2,r2,r3
    64ec:	10c00017 	ldw	r3,0(r2)
    64f0:	28c00015 	stw	r3,0(r5)
    64f4:	11400015 	stw	r5,0(r2)
    64f8:	f800283a 	ret

000064fc <__multadd>:
    64fc:	defff704 	addi	sp,sp,-36
    6500:	dc800215 	stw	r18,8(sp)
    6504:	2c800417 	ldw	r18,16(r5)
    6508:	dd800615 	stw	r22,24(sp)
    650c:	dd400515 	stw	r21,20(sp)
    6510:	dd000415 	stw	r20,16(sp)
    6514:	dcc00315 	stw	r19,12(sp)
    6518:	dc400115 	stw	r17,4(sp)
    651c:	dc000015 	stw	r16,0(sp)
    6520:	dfc00815 	stw	ra,32(sp)
    6524:	ddc00715 	stw	r23,28(sp)
    6528:	2827883a 	mov	r19,r5
    652c:	2029883a 	mov	r20,r4
    6530:	3023883a 	mov	r17,r6
    6534:	3821883a 	mov	r16,r7
    6538:	2d400504 	addi	r21,r5,20
    653c:	002d883a 	mov	r22,zero
    6540:	adc00017 	ldw	r23,0(r21)
    6544:	880b883a 	mov	r5,r17
    6548:	ad400104 	addi	r21,r21,4
    654c:	b93fffcc 	andi	r4,r23,65535
    6550:	000aae00 	call	aae0 <__mulsi3>
    6554:	b808d43a 	srli	r4,r23,16
    6558:	880b883a 	mov	r5,r17
    655c:	1421883a 	add	r16,r2,r16
    6560:	000aae00 	call	aae0 <__mulsi3>
    6564:	800ed43a 	srli	r7,r16,16
    6568:	80ffffcc 	andi	r3,r16,65535
    656c:	b5800044 	addi	r22,r22,1
    6570:	11c5883a 	add	r2,r2,r7
    6574:	100e943a 	slli	r7,r2,16
    6578:	1020d43a 	srli	r16,r2,16
    657c:	38c7883a 	add	r3,r7,r3
    6580:	a8ffff15 	stw	r3,-4(r21)
    6584:	b4bfee16 	blt	r22,r18,6540 <__alt_data_end+0xfffd4540>
    6588:	80000926 	beq	r16,zero,65b0 <__multadd+0xb4>
    658c:	98800217 	ldw	r2,8(r19)
    6590:	9080130e 	bge	r18,r2,65e0 <__multadd+0xe4>
    6594:	90800144 	addi	r2,r18,5
    6598:	1085883a 	add	r2,r2,r2
    659c:	1085883a 	add	r2,r2,r2
    65a0:	9885883a 	add	r2,r19,r2
    65a4:	14000015 	stw	r16,0(r2)
    65a8:	94800044 	addi	r18,r18,1
    65ac:	9c800415 	stw	r18,16(r19)
    65b0:	9805883a 	mov	r2,r19
    65b4:	dfc00817 	ldw	ra,32(sp)
    65b8:	ddc00717 	ldw	r23,28(sp)
    65bc:	dd800617 	ldw	r22,24(sp)
    65c0:	dd400517 	ldw	r21,20(sp)
    65c4:	dd000417 	ldw	r20,16(sp)
    65c8:	dcc00317 	ldw	r19,12(sp)
    65cc:	dc800217 	ldw	r18,8(sp)
    65d0:	dc400117 	ldw	r17,4(sp)
    65d4:	dc000017 	ldw	r16,0(sp)
    65d8:	dec00904 	addi	sp,sp,36
    65dc:	f800283a 	ret
    65e0:	99400117 	ldw	r5,4(r19)
    65e4:	a009883a 	mov	r4,r20
    65e8:	29400044 	addi	r5,r5,1
    65ec:	000642c0 	call	642c <_Balloc>
    65f0:	99800417 	ldw	r6,16(r19)
    65f4:	99400304 	addi	r5,r19,12
    65f8:	11000304 	addi	r4,r2,12
    65fc:	31800084 	addi	r6,r6,2
    6600:	318d883a 	add	r6,r6,r6
    6604:	318d883a 	add	r6,r6,r6
    6608:	1023883a 	mov	r17,r2
    660c:	00060600 	call	6060 <memcpy>
    6610:	98000a26 	beq	r19,zero,663c <__multadd+0x140>
    6614:	98c00117 	ldw	r3,4(r19)
    6618:	a0801317 	ldw	r2,76(r20)
    661c:	18c7883a 	add	r3,r3,r3
    6620:	18c7883a 	add	r3,r3,r3
    6624:	10c5883a 	add	r2,r2,r3
    6628:	10c00017 	ldw	r3,0(r2)
    662c:	98c00015 	stw	r3,0(r19)
    6630:	14c00015 	stw	r19,0(r2)
    6634:	8827883a 	mov	r19,r17
    6638:	003fd606 	br	6594 <__alt_data_end+0xfffd4594>
    663c:	8827883a 	mov	r19,r17
    6640:	003fd406 	br	6594 <__alt_data_end+0xfffd4594>

00006644 <__s2b>:
    6644:	defff904 	addi	sp,sp,-28
    6648:	dc400115 	stw	r17,4(sp)
    664c:	dc000015 	stw	r16,0(sp)
    6650:	2023883a 	mov	r17,r4
    6654:	2821883a 	mov	r16,r5
    6658:	39000204 	addi	r4,r7,8
    665c:	01400244 	movi	r5,9
    6660:	dcc00315 	stw	r19,12(sp)
    6664:	dc800215 	stw	r18,8(sp)
    6668:	dfc00615 	stw	ra,24(sp)
    666c:	dd400515 	stw	r21,20(sp)
    6670:	dd000415 	stw	r20,16(sp)
    6674:	3825883a 	mov	r18,r7
    6678:	3027883a 	mov	r19,r6
    667c:	000a92c0 	call	a92c <__divsi3>
    6680:	00c00044 	movi	r3,1
    6684:	000b883a 	mov	r5,zero
    6688:	1880030e 	bge	r3,r2,6698 <__s2b+0x54>
    668c:	18c7883a 	add	r3,r3,r3
    6690:	29400044 	addi	r5,r5,1
    6694:	18bffd16 	blt	r3,r2,668c <__alt_data_end+0xfffd468c>
    6698:	8809883a 	mov	r4,r17
    669c:	000642c0 	call	642c <_Balloc>
    66a0:	d8c00717 	ldw	r3,28(sp)
    66a4:	10c00515 	stw	r3,20(r2)
    66a8:	00c00044 	movi	r3,1
    66ac:	10c00415 	stw	r3,16(r2)
    66b0:	00c00244 	movi	r3,9
    66b4:	1cc0210e 	bge	r3,r19,673c <__s2b+0xf8>
    66b8:	80eb883a 	add	r21,r16,r3
    66bc:	a829883a 	mov	r20,r21
    66c0:	84e1883a 	add	r16,r16,r19
    66c4:	a1c00007 	ldb	r7,0(r20)
    66c8:	01800284 	movi	r6,10
    66cc:	a5000044 	addi	r20,r20,1
    66d0:	100b883a 	mov	r5,r2
    66d4:	39fff404 	addi	r7,r7,-48
    66d8:	8809883a 	mov	r4,r17
    66dc:	00064fc0 	call	64fc <__multadd>
    66e0:	a43ff81e 	bne	r20,r16,66c4 <__alt_data_end+0xfffd46c4>
    66e4:	ace1883a 	add	r16,r21,r19
    66e8:	843ffe04 	addi	r16,r16,-8
    66ec:	9c800a0e 	bge	r19,r18,6718 <__s2b+0xd4>
    66f0:	94e5c83a 	sub	r18,r18,r19
    66f4:	84a5883a 	add	r18,r16,r18
    66f8:	81c00007 	ldb	r7,0(r16)
    66fc:	01800284 	movi	r6,10
    6700:	84000044 	addi	r16,r16,1
    6704:	100b883a 	mov	r5,r2
    6708:	39fff404 	addi	r7,r7,-48
    670c:	8809883a 	mov	r4,r17
    6710:	00064fc0 	call	64fc <__multadd>
    6714:	84bff81e 	bne	r16,r18,66f8 <__alt_data_end+0xfffd46f8>
    6718:	dfc00617 	ldw	ra,24(sp)
    671c:	dd400517 	ldw	r21,20(sp)
    6720:	dd000417 	ldw	r20,16(sp)
    6724:	dcc00317 	ldw	r19,12(sp)
    6728:	dc800217 	ldw	r18,8(sp)
    672c:	dc400117 	ldw	r17,4(sp)
    6730:	dc000017 	ldw	r16,0(sp)
    6734:	dec00704 	addi	sp,sp,28
    6738:	f800283a 	ret
    673c:	84000284 	addi	r16,r16,10
    6740:	1827883a 	mov	r19,r3
    6744:	003fe906 	br	66ec <__alt_data_end+0xfffd46ec>

00006748 <__hi0bits>:
    6748:	20bfffec 	andhi	r2,r4,65535
    674c:	1000141e 	bne	r2,zero,67a0 <__hi0bits+0x58>
    6750:	2008943a 	slli	r4,r4,16
    6754:	00800404 	movi	r2,16
    6758:	20ffc02c 	andhi	r3,r4,65280
    675c:	1800021e 	bne	r3,zero,6768 <__hi0bits+0x20>
    6760:	2008923a 	slli	r4,r4,8
    6764:	10800204 	addi	r2,r2,8
    6768:	20fc002c 	andhi	r3,r4,61440
    676c:	1800021e 	bne	r3,zero,6778 <__hi0bits+0x30>
    6770:	2008913a 	slli	r4,r4,4
    6774:	10800104 	addi	r2,r2,4
    6778:	20f0002c 	andhi	r3,r4,49152
    677c:	1800031e 	bne	r3,zero,678c <__hi0bits+0x44>
    6780:	2109883a 	add	r4,r4,r4
    6784:	10800084 	addi	r2,r2,2
    6788:	2109883a 	add	r4,r4,r4
    678c:	20000316 	blt	r4,zero,679c <__hi0bits+0x54>
    6790:	2110002c 	andhi	r4,r4,16384
    6794:	2000041e 	bne	r4,zero,67a8 <__hi0bits+0x60>
    6798:	00800804 	movi	r2,32
    679c:	f800283a 	ret
    67a0:	0005883a 	mov	r2,zero
    67a4:	003fec06 	br	6758 <__alt_data_end+0xfffd4758>
    67a8:	10800044 	addi	r2,r2,1
    67ac:	f800283a 	ret

000067b0 <__lo0bits>:
    67b0:	20c00017 	ldw	r3,0(r4)
    67b4:	188001cc 	andi	r2,r3,7
    67b8:	10000826 	beq	r2,zero,67dc <__lo0bits+0x2c>
    67bc:	1880004c 	andi	r2,r3,1
    67c0:	1000211e 	bne	r2,zero,6848 <__lo0bits+0x98>
    67c4:	1880008c 	andi	r2,r3,2
    67c8:	1000211e 	bne	r2,zero,6850 <__lo0bits+0xa0>
    67cc:	1806d0ba 	srli	r3,r3,2
    67d0:	00800084 	movi	r2,2
    67d4:	20c00015 	stw	r3,0(r4)
    67d8:	f800283a 	ret
    67dc:	18bfffcc 	andi	r2,r3,65535
    67e0:	10001326 	beq	r2,zero,6830 <__lo0bits+0x80>
    67e4:	0005883a 	mov	r2,zero
    67e8:	19403fcc 	andi	r5,r3,255
    67ec:	2800021e 	bne	r5,zero,67f8 <__lo0bits+0x48>
    67f0:	1806d23a 	srli	r3,r3,8
    67f4:	10800204 	addi	r2,r2,8
    67f8:	194003cc 	andi	r5,r3,15
    67fc:	2800021e 	bne	r5,zero,6808 <__lo0bits+0x58>
    6800:	1806d13a 	srli	r3,r3,4
    6804:	10800104 	addi	r2,r2,4
    6808:	194000cc 	andi	r5,r3,3
    680c:	2800021e 	bne	r5,zero,6818 <__lo0bits+0x68>
    6810:	1806d0ba 	srli	r3,r3,2
    6814:	10800084 	addi	r2,r2,2
    6818:	1940004c 	andi	r5,r3,1
    681c:	2800081e 	bne	r5,zero,6840 <__lo0bits+0x90>
    6820:	1806d07a 	srli	r3,r3,1
    6824:	1800051e 	bne	r3,zero,683c <__lo0bits+0x8c>
    6828:	00800804 	movi	r2,32
    682c:	f800283a 	ret
    6830:	1806d43a 	srli	r3,r3,16
    6834:	00800404 	movi	r2,16
    6838:	003feb06 	br	67e8 <__alt_data_end+0xfffd47e8>
    683c:	10800044 	addi	r2,r2,1
    6840:	20c00015 	stw	r3,0(r4)
    6844:	f800283a 	ret
    6848:	0005883a 	mov	r2,zero
    684c:	f800283a 	ret
    6850:	1806d07a 	srli	r3,r3,1
    6854:	00800044 	movi	r2,1
    6858:	20c00015 	stw	r3,0(r4)
    685c:	f800283a 	ret

00006860 <__i2b>:
    6860:	defffd04 	addi	sp,sp,-12
    6864:	dc000015 	stw	r16,0(sp)
    6868:	04000044 	movi	r16,1
    686c:	dc400115 	stw	r17,4(sp)
    6870:	2823883a 	mov	r17,r5
    6874:	800b883a 	mov	r5,r16
    6878:	dfc00215 	stw	ra,8(sp)
    687c:	000642c0 	call	642c <_Balloc>
    6880:	14400515 	stw	r17,20(r2)
    6884:	14000415 	stw	r16,16(r2)
    6888:	dfc00217 	ldw	ra,8(sp)
    688c:	dc400117 	ldw	r17,4(sp)
    6890:	dc000017 	ldw	r16,0(sp)
    6894:	dec00304 	addi	sp,sp,12
    6898:	f800283a 	ret

0000689c <__multiply>:
    689c:	deffef04 	addi	sp,sp,-68
    68a0:	dc400815 	stw	r17,32(sp)
    68a4:	dc000715 	stw	r16,28(sp)
    68a8:	34400417 	ldw	r17,16(r6)
    68ac:	2c000417 	ldw	r16,16(r5)
    68b0:	dd800d15 	stw	r22,52(sp)
    68b4:	dc800915 	stw	r18,36(sp)
    68b8:	dfc01015 	stw	ra,64(sp)
    68bc:	df000f15 	stw	fp,60(sp)
    68c0:	ddc00e15 	stw	r23,56(sp)
    68c4:	dd400c15 	stw	r21,48(sp)
    68c8:	dd000b15 	stw	r20,44(sp)
    68cc:	dcc00a15 	stw	r19,40(sp)
    68d0:	2825883a 	mov	r18,r5
    68d4:	302d883a 	mov	r22,r6
    68d8:	8440050e 	bge	r16,r17,68f0 <__multiply+0x54>
    68dc:	8007883a 	mov	r3,r16
    68e0:	3025883a 	mov	r18,r6
    68e4:	8821883a 	mov	r16,r17
    68e8:	282d883a 	mov	r22,r5
    68ec:	1823883a 	mov	r17,r3
    68f0:	90800217 	ldw	r2,8(r18)
    68f4:	8447883a 	add	r3,r16,r17
    68f8:	d8c00215 	stw	r3,8(sp)
    68fc:	91400117 	ldw	r5,4(r18)
    6900:	10c0010e 	bge	r2,r3,6908 <__multiply+0x6c>
    6904:	29400044 	addi	r5,r5,1
    6908:	000642c0 	call	642c <_Balloc>
    690c:	d8c00217 	ldw	r3,8(sp)
    6910:	d8800615 	stw	r2,24(sp)
    6914:	18eb883a 	add	r21,r3,r3
    6918:	ad6b883a 	add	r21,r21,r21
    691c:	10c00504 	addi	r3,r2,20
    6920:	1d6b883a 	add	r21,r3,r21
    6924:	d8c00115 	stw	r3,4(sp)
    6928:	dd400315 	stw	r21,12(sp)
    692c:	1805883a 	mov	r2,r3
    6930:	1d40042e 	bgeu	r3,r21,6944 <__multiply+0xa8>
    6934:	d8c00317 	ldw	r3,12(sp)
    6938:	10000015 	stw	zero,0(r2)
    693c:	10800104 	addi	r2,r2,4
    6940:	10fffc36 	bltu	r2,r3,6934 <__alt_data_end+0xfffd4934>
    6944:	8c63883a 	add	r17,r17,r17
    6948:	b5800504 	addi	r22,r22,20
    694c:	8c63883a 	add	r17,r17,r17
    6950:	94800504 	addi	r18,r18,20
    6954:	8421883a 	add	r16,r16,r16
    6958:	b463883a 	add	r17,r22,r17
    695c:	8421883a 	add	r16,r16,r16
    6960:	dd800015 	stw	r22,0(sp)
    6964:	dc800415 	stw	r18,16(sp)
    6968:	dc400515 	stw	r17,20(sp)
    696c:	9429883a 	add	r20,r18,r16
    6970:	b4404f2e 	bgeu	r22,r17,6ab0 <__multiply+0x214>
    6974:	d8c00017 	ldw	r3,0(sp)
    6978:	1c800017 	ldw	r18,0(r3)
    697c:	947fffcc 	andi	r17,r18,65535
    6980:	88001e26 	beq	r17,zero,69fc <__multiply+0x160>
    6984:	dd800117 	ldw	r22,4(sp)
    6988:	dd400417 	ldw	r21,16(sp)
    698c:	0027883a 	mov	r19,zero
    6990:	ac800017 	ldw	r18,0(r21)
    6994:	b4000017 	ldw	r16,0(r22)
    6998:	880b883a 	mov	r5,r17
    699c:	913fffcc 	andi	r4,r18,65535
    69a0:	000aae00 	call	aae0 <__mulsi3>
    69a4:	9008d43a 	srli	r4,r18,16
    69a8:	84bfffcc 	andi	r18,r16,65535
    69ac:	1485883a 	add	r2,r2,r18
    69b0:	14e5883a 	add	r18,r2,r19
    69b4:	8020d43a 	srli	r16,r16,16
    69b8:	9026d43a 	srli	r19,r18,16
    69bc:	880b883a 	mov	r5,r17
    69c0:	000aae00 	call	aae0 <__mulsi3>
    69c4:	1405883a 	add	r2,r2,r16
    69c8:	14e1883a 	add	r16,r2,r19
    69cc:	90ffffcc 	andi	r3,r18,65535
    69d0:	8024943a 	slli	r18,r16,16
    69d4:	ad400104 	addi	r21,r21,4
    69d8:	b005883a 	mov	r2,r22
    69dc:	90c6b03a 	or	r3,r18,r3
    69e0:	b0c00015 	stw	r3,0(r22)
    69e4:	8026d43a 	srli	r19,r16,16
    69e8:	b5800104 	addi	r22,r22,4
    69ec:	ad3fe836 	bltu	r21,r20,6990 <__alt_data_end+0xfffd4990>
    69f0:	d8c00017 	ldw	r3,0(sp)
    69f4:	14c00115 	stw	r19,4(r2)
    69f8:	1c800017 	ldw	r18,0(r3)
    69fc:	9024d43a 	srli	r18,r18,16
    6a00:	90002226 	beq	r18,zero,6a8c <__multiply+0x1f0>
    6a04:	d8c00117 	ldw	r3,4(sp)
    6a08:	dd800417 	ldw	r22,16(sp)
    6a0c:	002f883a 	mov	r23,zero
    6a10:	1f000017 	ldw	fp,0(r3)
    6a14:	1823883a 	mov	r17,r3
    6a18:	182b883a 	mov	r21,r3
    6a1c:	e021883a 	mov	r16,fp
    6a20:	00000106 	br	6a28 <__multiply+0x18c>
    6a24:	982b883a 	mov	r21,r19
    6a28:	b100000b 	ldhu	r4,0(r22)
    6a2c:	8020d43a 	srli	r16,r16,16
    6a30:	900b883a 	mov	r5,r18
    6a34:	000aae00 	call	aae0 <__mulsi3>
    6a38:	1405883a 	add	r2,r2,r16
    6a3c:	15ef883a 	add	r23,r2,r23
    6a40:	b804943a 	slli	r2,r23,16
    6a44:	e0ffffcc 	andi	r3,fp,65535
    6a48:	8c400104 	addi	r17,r17,4
    6a4c:	10c6b03a 	or	r3,r2,r3
    6a50:	88ffff15 	stw	r3,-4(r17)
    6a54:	b5800104 	addi	r22,r22,4
    6a58:	b13fff17 	ldw	r4,-4(r22)
    6a5c:	acc00104 	addi	r19,r21,4
    6a60:	900b883a 	mov	r5,r18
    6a64:	2008d43a 	srli	r4,r4,16
    6a68:	9c000017 	ldw	r16,0(r19)
    6a6c:	000aae00 	call	aae0 <__mulsi3>
    6a70:	b806d43a 	srli	r3,r23,16
    6a74:	813fffcc 	andi	r4,r16,65535
    6a78:	1105883a 	add	r2,r2,r4
    6a7c:	10f9883a 	add	fp,r2,r3
    6a80:	e02ed43a 	srli	r23,fp,16
    6a84:	b53fe736 	bltu	r22,r20,6a24 <__alt_data_end+0xfffd4a24>
    6a88:	af000115 	stw	fp,4(r21)
    6a8c:	d8c00017 	ldw	r3,0(sp)
    6a90:	d9000517 	ldw	r4,20(sp)
    6a94:	18c00104 	addi	r3,r3,4
    6a98:	d8c00015 	stw	r3,0(sp)
    6a9c:	d8c00117 	ldw	r3,4(sp)
    6aa0:	18c00104 	addi	r3,r3,4
    6aa4:	d8c00115 	stw	r3,4(sp)
    6aa8:	d8c00017 	ldw	r3,0(sp)
    6aac:	193fb136 	bltu	r3,r4,6974 <__alt_data_end+0xfffd4974>
    6ab0:	d8c00217 	ldw	r3,8(sp)
    6ab4:	00c00c0e 	bge	zero,r3,6ae8 <__multiply+0x24c>
    6ab8:	d8c00317 	ldw	r3,12(sp)
    6abc:	18bfff17 	ldw	r2,-4(r3)
    6ac0:	1d7fff04 	addi	r21,r3,-4
    6ac4:	10000326 	beq	r2,zero,6ad4 <__multiply+0x238>
    6ac8:	00000706 	br	6ae8 <__multiply+0x24c>
    6acc:	a8800017 	ldw	r2,0(r21)
    6ad0:	1000051e 	bne	r2,zero,6ae8 <__multiply+0x24c>
    6ad4:	d8c00217 	ldw	r3,8(sp)
    6ad8:	ad7fff04 	addi	r21,r21,-4
    6adc:	18ffffc4 	addi	r3,r3,-1
    6ae0:	d8c00215 	stw	r3,8(sp)
    6ae4:	183ff91e 	bne	r3,zero,6acc <__alt_data_end+0xfffd4acc>
    6ae8:	d8c00617 	ldw	r3,24(sp)
    6aec:	d9000217 	ldw	r4,8(sp)
    6af0:	1805883a 	mov	r2,r3
    6af4:	19000415 	stw	r4,16(r3)
    6af8:	dfc01017 	ldw	ra,64(sp)
    6afc:	df000f17 	ldw	fp,60(sp)
    6b00:	ddc00e17 	ldw	r23,56(sp)
    6b04:	dd800d17 	ldw	r22,52(sp)
    6b08:	dd400c17 	ldw	r21,48(sp)
    6b0c:	dd000b17 	ldw	r20,44(sp)
    6b10:	dcc00a17 	ldw	r19,40(sp)
    6b14:	dc800917 	ldw	r18,36(sp)
    6b18:	dc400817 	ldw	r17,32(sp)
    6b1c:	dc000717 	ldw	r16,28(sp)
    6b20:	dec01104 	addi	sp,sp,68
    6b24:	f800283a 	ret

00006b28 <__pow5mult>:
    6b28:	defffa04 	addi	sp,sp,-24
    6b2c:	dcc00315 	stw	r19,12(sp)
    6b30:	dc000015 	stw	r16,0(sp)
    6b34:	dfc00515 	stw	ra,20(sp)
    6b38:	dd000415 	stw	r20,16(sp)
    6b3c:	dc800215 	stw	r18,8(sp)
    6b40:	dc400115 	stw	r17,4(sp)
    6b44:	308000cc 	andi	r2,r6,3
    6b48:	3021883a 	mov	r16,r6
    6b4c:	2027883a 	mov	r19,r4
    6b50:	10002f1e 	bne	r2,zero,6c10 <__pow5mult+0xe8>
    6b54:	2825883a 	mov	r18,r5
    6b58:	8021d0ba 	srai	r16,r16,2
    6b5c:	80001a26 	beq	r16,zero,6bc8 <__pow5mult+0xa0>
    6b60:	9c401217 	ldw	r17,72(r19)
    6b64:	8800061e 	bne	r17,zero,6b80 <__pow5mult+0x58>
    6b68:	00003406 	br	6c3c <__pow5mult+0x114>
    6b6c:	8021d07a 	srai	r16,r16,1
    6b70:	80001526 	beq	r16,zero,6bc8 <__pow5mult+0xa0>
    6b74:	88800017 	ldw	r2,0(r17)
    6b78:	10001c26 	beq	r2,zero,6bec <__pow5mult+0xc4>
    6b7c:	1023883a 	mov	r17,r2
    6b80:	8080004c 	andi	r2,r16,1
    6b84:	103ff926 	beq	r2,zero,6b6c <__alt_data_end+0xfffd4b6c>
    6b88:	880d883a 	mov	r6,r17
    6b8c:	900b883a 	mov	r5,r18
    6b90:	9809883a 	mov	r4,r19
    6b94:	000689c0 	call	689c <__multiply>
    6b98:	90001b26 	beq	r18,zero,6c08 <__pow5mult+0xe0>
    6b9c:	91000117 	ldw	r4,4(r18)
    6ba0:	98c01317 	ldw	r3,76(r19)
    6ba4:	8021d07a 	srai	r16,r16,1
    6ba8:	2109883a 	add	r4,r4,r4
    6bac:	2109883a 	add	r4,r4,r4
    6bb0:	1907883a 	add	r3,r3,r4
    6bb4:	19000017 	ldw	r4,0(r3)
    6bb8:	91000015 	stw	r4,0(r18)
    6bbc:	1c800015 	stw	r18,0(r3)
    6bc0:	1025883a 	mov	r18,r2
    6bc4:	803feb1e 	bne	r16,zero,6b74 <__alt_data_end+0xfffd4b74>
    6bc8:	9005883a 	mov	r2,r18
    6bcc:	dfc00517 	ldw	ra,20(sp)
    6bd0:	dd000417 	ldw	r20,16(sp)
    6bd4:	dcc00317 	ldw	r19,12(sp)
    6bd8:	dc800217 	ldw	r18,8(sp)
    6bdc:	dc400117 	ldw	r17,4(sp)
    6be0:	dc000017 	ldw	r16,0(sp)
    6be4:	dec00604 	addi	sp,sp,24
    6be8:	f800283a 	ret
    6bec:	880d883a 	mov	r6,r17
    6bf0:	880b883a 	mov	r5,r17
    6bf4:	9809883a 	mov	r4,r19
    6bf8:	000689c0 	call	689c <__multiply>
    6bfc:	88800015 	stw	r2,0(r17)
    6c00:	10000015 	stw	zero,0(r2)
    6c04:	003fdd06 	br	6b7c <__alt_data_end+0xfffd4b7c>
    6c08:	1025883a 	mov	r18,r2
    6c0c:	003fd706 	br	6b6c <__alt_data_end+0xfffd4b6c>
    6c10:	10bfffc4 	addi	r2,r2,-1
    6c14:	1085883a 	add	r2,r2,r2
    6c18:	00c00074 	movhi	r3,1
    6c1c:	18cff704 	addi	r3,r3,16348
    6c20:	1085883a 	add	r2,r2,r2
    6c24:	1885883a 	add	r2,r3,r2
    6c28:	11800017 	ldw	r6,0(r2)
    6c2c:	000f883a 	mov	r7,zero
    6c30:	00064fc0 	call	64fc <__multadd>
    6c34:	1025883a 	mov	r18,r2
    6c38:	003fc706 	br	6b58 <__alt_data_end+0xfffd4b58>
    6c3c:	05000044 	movi	r20,1
    6c40:	a00b883a 	mov	r5,r20
    6c44:	9809883a 	mov	r4,r19
    6c48:	000642c0 	call	642c <_Balloc>
    6c4c:	1023883a 	mov	r17,r2
    6c50:	00809c44 	movi	r2,625
    6c54:	88800515 	stw	r2,20(r17)
    6c58:	8d000415 	stw	r20,16(r17)
    6c5c:	9c401215 	stw	r17,72(r19)
    6c60:	88000015 	stw	zero,0(r17)
    6c64:	003fc606 	br	6b80 <__alt_data_end+0xfffd4b80>

00006c68 <__lshift>:
    6c68:	defff904 	addi	sp,sp,-28
    6c6c:	dd400515 	stw	r21,20(sp)
    6c70:	dcc00315 	stw	r19,12(sp)
    6c74:	302bd17a 	srai	r21,r6,5
    6c78:	2cc00417 	ldw	r19,16(r5)
    6c7c:	28800217 	ldw	r2,8(r5)
    6c80:	dd000415 	stw	r20,16(sp)
    6c84:	ace7883a 	add	r19,r21,r19
    6c88:	dc800215 	stw	r18,8(sp)
    6c8c:	dc400115 	stw	r17,4(sp)
    6c90:	dc000015 	stw	r16,0(sp)
    6c94:	dfc00615 	stw	ra,24(sp)
    6c98:	9c000044 	addi	r16,r19,1
    6c9c:	2823883a 	mov	r17,r5
    6ca0:	3029883a 	mov	r20,r6
    6ca4:	2025883a 	mov	r18,r4
    6ca8:	29400117 	ldw	r5,4(r5)
    6cac:	1400030e 	bge	r2,r16,6cbc <__lshift+0x54>
    6cb0:	1085883a 	add	r2,r2,r2
    6cb4:	29400044 	addi	r5,r5,1
    6cb8:	143ffd16 	blt	r2,r16,6cb0 <__alt_data_end+0xfffd4cb0>
    6cbc:	9009883a 	mov	r4,r18
    6cc0:	000642c0 	call	642c <_Balloc>
    6cc4:	10c00504 	addi	r3,r2,20
    6cc8:	0540070e 	bge	zero,r21,6ce8 <__lshift+0x80>
    6ccc:	ad6b883a 	add	r21,r21,r21
    6cd0:	ad6b883a 	add	r21,r21,r21
    6cd4:	1809883a 	mov	r4,r3
    6cd8:	1d47883a 	add	r3,r3,r21
    6cdc:	20000015 	stw	zero,0(r4)
    6ce0:	21000104 	addi	r4,r4,4
    6ce4:	193ffd1e 	bne	r3,r4,6cdc <__alt_data_end+0xfffd4cdc>
    6ce8:	8a000417 	ldw	r8,16(r17)
    6cec:	89000504 	addi	r4,r17,20
    6cf0:	a18007cc 	andi	r6,r20,31
    6cf4:	4211883a 	add	r8,r8,r8
    6cf8:	4211883a 	add	r8,r8,r8
    6cfc:	2211883a 	add	r8,r4,r8
    6d00:	30002326 	beq	r6,zero,6d90 <__lshift+0x128>
    6d04:	02400804 	movi	r9,32
    6d08:	4993c83a 	sub	r9,r9,r6
    6d0c:	000b883a 	mov	r5,zero
    6d10:	21c00017 	ldw	r7,0(r4)
    6d14:	1815883a 	mov	r10,r3
    6d18:	18c00104 	addi	r3,r3,4
    6d1c:	398e983a 	sll	r7,r7,r6
    6d20:	21000104 	addi	r4,r4,4
    6d24:	394ab03a 	or	r5,r7,r5
    6d28:	197fff15 	stw	r5,-4(r3)
    6d2c:	217fff17 	ldw	r5,-4(r4)
    6d30:	2a4ad83a 	srl	r5,r5,r9
    6d34:	223ff636 	bltu	r4,r8,6d10 <__alt_data_end+0xfffd4d10>
    6d38:	51400115 	stw	r5,4(r10)
    6d3c:	28001a1e 	bne	r5,zero,6da8 <__lshift+0x140>
    6d40:	843fffc4 	addi	r16,r16,-1
    6d44:	14000415 	stw	r16,16(r2)
    6d48:	88000826 	beq	r17,zero,6d6c <__lshift+0x104>
    6d4c:	89000117 	ldw	r4,4(r17)
    6d50:	90c01317 	ldw	r3,76(r18)
    6d54:	2109883a 	add	r4,r4,r4
    6d58:	2109883a 	add	r4,r4,r4
    6d5c:	1907883a 	add	r3,r3,r4
    6d60:	19000017 	ldw	r4,0(r3)
    6d64:	89000015 	stw	r4,0(r17)
    6d68:	1c400015 	stw	r17,0(r3)
    6d6c:	dfc00617 	ldw	ra,24(sp)
    6d70:	dd400517 	ldw	r21,20(sp)
    6d74:	dd000417 	ldw	r20,16(sp)
    6d78:	dcc00317 	ldw	r19,12(sp)
    6d7c:	dc800217 	ldw	r18,8(sp)
    6d80:	dc400117 	ldw	r17,4(sp)
    6d84:	dc000017 	ldw	r16,0(sp)
    6d88:	dec00704 	addi	sp,sp,28
    6d8c:	f800283a 	ret
    6d90:	21400017 	ldw	r5,0(r4)
    6d94:	18c00104 	addi	r3,r3,4
    6d98:	21000104 	addi	r4,r4,4
    6d9c:	197fff15 	stw	r5,-4(r3)
    6da0:	223ffb36 	bltu	r4,r8,6d90 <__alt_data_end+0xfffd4d90>
    6da4:	003fe606 	br	6d40 <__alt_data_end+0xfffd4d40>
    6da8:	9c000084 	addi	r16,r19,2
    6dac:	003fe406 	br	6d40 <__alt_data_end+0xfffd4d40>

00006db0 <__mcmp>:
    6db0:	20800417 	ldw	r2,16(r4)
    6db4:	28c00417 	ldw	r3,16(r5)
    6db8:	10c5c83a 	sub	r2,r2,r3
    6dbc:	1000111e 	bne	r2,zero,6e04 <__mcmp+0x54>
    6dc0:	18c7883a 	add	r3,r3,r3
    6dc4:	18c7883a 	add	r3,r3,r3
    6dc8:	21000504 	addi	r4,r4,20
    6dcc:	29400504 	addi	r5,r5,20
    6dd0:	20c5883a 	add	r2,r4,r3
    6dd4:	28cb883a 	add	r5,r5,r3
    6dd8:	00000106 	br	6de0 <__mcmp+0x30>
    6ddc:	20800a2e 	bgeu	r4,r2,6e08 <__mcmp+0x58>
    6de0:	10bfff04 	addi	r2,r2,-4
    6de4:	297fff04 	addi	r5,r5,-4
    6de8:	11800017 	ldw	r6,0(r2)
    6dec:	28c00017 	ldw	r3,0(r5)
    6df0:	30fffa26 	beq	r6,r3,6ddc <__alt_data_end+0xfffd4ddc>
    6df4:	30c00236 	bltu	r6,r3,6e00 <__mcmp+0x50>
    6df8:	00800044 	movi	r2,1
    6dfc:	f800283a 	ret
    6e00:	00bfffc4 	movi	r2,-1
    6e04:	f800283a 	ret
    6e08:	0005883a 	mov	r2,zero
    6e0c:	f800283a 	ret

00006e10 <__mdiff>:
    6e10:	28c00417 	ldw	r3,16(r5)
    6e14:	30800417 	ldw	r2,16(r6)
    6e18:	defffa04 	addi	sp,sp,-24
    6e1c:	dcc00315 	stw	r19,12(sp)
    6e20:	dc800215 	stw	r18,8(sp)
    6e24:	dfc00515 	stw	ra,20(sp)
    6e28:	dd000415 	stw	r20,16(sp)
    6e2c:	dc400115 	stw	r17,4(sp)
    6e30:	dc000015 	stw	r16,0(sp)
    6e34:	1887c83a 	sub	r3,r3,r2
    6e38:	2825883a 	mov	r18,r5
    6e3c:	3027883a 	mov	r19,r6
    6e40:	1800141e 	bne	r3,zero,6e94 <__mdiff+0x84>
    6e44:	1085883a 	add	r2,r2,r2
    6e48:	1085883a 	add	r2,r2,r2
    6e4c:	2a000504 	addi	r8,r5,20
    6e50:	34000504 	addi	r16,r6,20
    6e54:	4087883a 	add	r3,r8,r2
    6e58:	8085883a 	add	r2,r16,r2
    6e5c:	00000106 	br	6e64 <__mdiff+0x54>
    6e60:	40c0592e 	bgeu	r8,r3,6fc8 <__mdiff+0x1b8>
    6e64:	18ffff04 	addi	r3,r3,-4
    6e68:	10bfff04 	addi	r2,r2,-4
    6e6c:	19c00017 	ldw	r7,0(r3)
    6e70:	11400017 	ldw	r5,0(r2)
    6e74:	397ffa26 	beq	r7,r5,6e60 <__alt_data_end+0xfffd4e60>
    6e78:	3940592e 	bgeu	r7,r5,6fe0 <__mdiff+0x1d0>
    6e7c:	9005883a 	mov	r2,r18
    6e80:	4023883a 	mov	r17,r8
    6e84:	9825883a 	mov	r18,r19
    6e88:	05000044 	movi	r20,1
    6e8c:	1027883a 	mov	r19,r2
    6e90:	00000406 	br	6ea4 <__mdiff+0x94>
    6e94:	18005616 	blt	r3,zero,6ff0 <__mdiff+0x1e0>
    6e98:	34400504 	addi	r17,r6,20
    6e9c:	2c000504 	addi	r16,r5,20
    6ea0:	0029883a 	mov	r20,zero
    6ea4:	91400117 	ldw	r5,4(r18)
    6ea8:	000642c0 	call	642c <_Balloc>
    6eac:	92400417 	ldw	r9,16(r18)
    6eb0:	9b000417 	ldw	r12,16(r19)
    6eb4:	12c00504 	addi	r11,r2,20
    6eb8:	4a51883a 	add	r8,r9,r9
    6ebc:	6319883a 	add	r12,r12,r12
    6ec0:	4211883a 	add	r8,r8,r8
    6ec4:	6319883a 	add	r12,r12,r12
    6ec8:	15000315 	stw	r20,12(r2)
    6ecc:	8211883a 	add	r8,r16,r8
    6ed0:	8b19883a 	add	r12,r17,r12
    6ed4:	0007883a 	mov	r3,zero
    6ed8:	81400017 	ldw	r5,0(r16)
    6edc:	89c00017 	ldw	r7,0(r17)
    6ee0:	59800104 	addi	r6,r11,4
    6ee4:	293fffcc 	andi	r4,r5,65535
    6ee8:	20c7883a 	add	r3,r4,r3
    6eec:	393fffcc 	andi	r4,r7,65535
    6ef0:	1909c83a 	sub	r4,r3,r4
    6ef4:	280ad43a 	srli	r5,r5,16
    6ef8:	380ed43a 	srli	r7,r7,16
    6efc:	2007d43a 	srai	r3,r4,16
    6f00:	213fffcc 	andi	r4,r4,65535
    6f04:	29cbc83a 	sub	r5,r5,r7
    6f08:	28c7883a 	add	r3,r5,r3
    6f0c:	180a943a 	slli	r5,r3,16
    6f10:	8c400104 	addi	r17,r17,4
    6f14:	84000104 	addi	r16,r16,4
    6f18:	2908b03a 	or	r4,r5,r4
    6f1c:	59000015 	stw	r4,0(r11)
    6f20:	1807d43a 	srai	r3,r3,16
    6f24:	3015883a 	mov	r10,r6
    6f28:	3017883a 	mov	r11,r6
    6f2c:	8b3fea36 	bltu	r17,r12,6ed8 <__alt_data_end+0xfffd4ed8>
    6f30:	8200162e 	bgeu	r16,r8,6f8c <__mdiff+0x17c>
    6f34:	8017883a 	mov	r11,r16
    6f38:	59400017 	ldw	r5,0(r11)
    6f3c:	31800104 	addi	r6,r6,4
    6f40:	5ac00104 	addi	r11,r11,4
    6f44:	293fffcc 	andi	r4,r5,65535
    6f48:	20c7883a 	add	r3,r4,r3
    6f4c:	280ed43a 	srli	r7,r5,16
    6f50:	180bd43a 	srai	r5,r3,16
    6f54:	193fffcc 	andi	r4,r3,65535
    6f58:	3947883a 	add	r3,r7,r5
    6f5c:	180a943a 	slli	r5,r3,16
    6f60:	1807d43a 	srai	r3,r3,16
    6f64:	2908b03a 	or	r4,r5,r4
    6f68:	313fff15 	stw	r4,-4(r6)
    6f6c:	5a3ff236 	bltu	r11,r8,6f38 <__alt_data_end+0xfffd4f38>
    6f70:	0406303a 	nor	r3,zero,r16
    6f74:	1a07883a 	add	r3,r3,r8
    6f78:	1806d0ba 	srli	r3,r3,2
    6f7c:	18c00044 	addi	r3,r3,1
    6f80:	18c7883a 	add	r3,r3,r3
    6f84:	18c7883a 	add	r3,r3,r3
    6f88:	50d5883a 	add	r10,r10,r3
    6f8c:	50ffff04 	addi	r3,r10,-4
    6f90:	2000041e 	bne	r4,zero,6fa4 <__mdiff+0x194>
    6f94:	18ffff04 	addi	r3,r3,-4
    6f98:	19000017 	ldw	r4,0(r3)
    6f9c:	4a7fffc4 	addi	r9,r9,-1
    6fa0:	203ffc26 	beq	r4,zero,6f94 <__alt_data_end+0xfffd4f94>
    6fa4:	12400415 	stw	r9,16(r2)
    6fa8:	dfc00517 	ldw	ra,20(sp)
    6fac:	dd000417 	ldw	r20,16(sp)
    6fb0:	dcc00317 	ldw	r19,12(sp)
    6fb4:	dc800217 	ldw	r18,8(sp)
    6fb8:	dc400117 	ldw	r17,4(sp)
    6fbc:	dc000017 	ldw	r16,0(sp)
    6fc0:	dec00604 	addi	sp,sp,24
    6fc4:	f800283a 	ret
    6fc8:	000b883a 	mov	r5,zero
    6fcc:	000642c0 	call	642c <_Balloc>
    6fd0:	00c00044 	movi	r3,1
    6fd4:	10c00415 	stw	r3,16(r2)
    6fd8:	10000515 	stw	zero,20(r2)
    6fdc:	003ff206 	br	6fa8 <__alt_data_end+0xfffd4fa8>
    6fe0:	8023883a 	mov	r17,r16
    6fe4:	0029883a 	mov	r20,zero
    6fe8:	4021883a 	mov	r16,r8
    6fec:	003fad06 	br	6ea4 <__alt_data_end+0xfffd4ea4>
    6ff0:	9005883a 	mov	r2,r18
    6ff4:	94400504 	addi	r17,r18,20
    6ff8:	9c000504 	addi	r16,r19,20
    6ffc:	9825883a 	mov	r18,r19
    7000:	05000044 	movi	r20,1
    7004:	1027883a 	mov	r19,r2
    7008:	003fa606 	br	6ea4 <__alt_data_end+0xfffd4ea4>

0000700c <__ulp>:
    700c:	295ffc2c 	andhi	r5,r5,32752
    7010:	00bf3034 	movhi	r2,64704
    7014:	2887883a 	add	r3,r5,r2
    7018:	00c0020e 	bge	zero,r3,7024 <__ulp+0x18>
    701c:	0005883a 	mov	r2,zero
    7020:	f800283a 	ret
    7024:	00c7c83a 	sub	r3,zero,r3
    7028:	1807d53a 	srai	r3,r3,20
    702c:	008004c4 	movi	r2,19
    7030:	10c00b0e 	bge	r2,r3,7060 <__ulp+0x54>
    7034:	18bffb04 	addi	r2,r3,-20
    7038:	01000784 	movi	r4,30
    703c:	0007883a 	mov	r3,zero
    7040:	20800516 	blt	r4,r2,7058 <__ulp+0x4c>
    7044:	010007c4 	movi	r4,31
    7048:	2089c83a 	sub	r4,r4,r2
    704c:	00800044 	movi	r2,1
    7050:	1104983a 	sll	r2,r2,r4
    7054:	f800283a 	ret
    7058:	00800044 	movi	r2,1
    705c:	f800283a 	ret
    7060:	01400234 	movhi	r5,8
    7064:	28c7d83a 	sra	r3,r5,r3
    7068:	0005883a 	mov	r2,zero
    706c:	f800283a 	ret

00007070 <__b2d>:
    7070:	defffa04 	addi	sp,sp,-24
    7074:	dc000015 	stw	r16,0(sp)
    7078:	24000417 	ldw	r16,16(r4)
    707c:	dc400115 	stw	r17,4(sp)
    7080:	24400504 	addi	r17,r4,20
    7084:	8421883a 	add	r16,r16,r16
    7088:	8421883a 	add	r16,r16,r16
    708c:	8c21883a 	add	r16,r17,r16
    7090:	dc800215 	stw	r18,8(sp)
    7094:	84bfff17 	ldw	r18,-4(r16)
    7098:	dd000415 	stw	r20,16(sp)
    709c:	dcc00315 	stw	r19,12(sp)
    70a0:	9009883a 	mov	r4,r18
    70a4:	2829883a 	mov	r20,r5
    70a8:	dfc00515 	stw	ra,20(sp)
    70ac:	00067480 	call	6748 <__hi0bits>
    70b0:	00c00804 	movi	r3,32
    70b4:	1889c83a 	sub	r4,r3,r2
    70b8:	a1000015 	stw	r4,0(r20)
    70bc:	01000284 	movi	r4,10
    70c0:	84ffff04 	addi	r19,r16,-4
    70c4:	20801216 	blt	r4,r2,7110 <__b2d+0xa0>
    70c8:	018002c4 	movi	r6,11
    70cc:	308dc83a 	sub	r6,r6,r2
    70d0:	9186d83a 	srl	r3,r18,r6
    70d4:	18cffc34 	orhi	r3,r3,16368
    70d8:	8cc0212e 	bgeu	r17,r19,7160 <__b2d+0xf0>
    70dc:	813ffe17 	ldw	r4,-8(r16)
    70e0:	218cd83a 	srl	r6,r4,r6
    70e4:	10800544 	addi	r2,r2,21
    70e8:	9084983a 	sll	r2,r18,r2
    70ec:	1184b03a 	or	r2,r2,r6
    70f0:	dfc00517 	ldw	ra,20(sp)
    70f4:	dd000417 	ldw	r20,16(sp)
    70f8:	dcc00317 	ldw	r19,12(sp)
    70fc:	dc800217 	ldw	r18,8(sp)
    7100:	dc400117 	ldw	r17,4(sp)
    7104:	dc000017 	ldw	r16,0(sp)
    7108:	dec00604 	addi	sp,sp,24
    710c:	f800283a 	ret
    7110:	8cc00f2e 	bgeu	r17,r19,7150 <__b2d+0xe0>
    7114:	117ffd44 	addi	r5,r2,-11
    7118:	80bffe17 	ldw	r2,-8(r16)
    711c:	28000e26 	beq	r5,zero,7158 <__b2d+0xe8>
    7120:	1949c83a 	sub	r4,r3,r5
    7124:	9164983a 	sll	r18,r18,r5
    7128:	1106d83a 	srl	r3,r2,r4
    712c:	81bffe04 	addi	r6,r16,-8
    7130:	948ffc34 	orhi	r18,r18,16368
    7134:	90c6b03a 	or	r3,r18,r3
    7138:	89800e2e 	bgeu	r17,r6,7174 <__b2d+0x104>
    713c:	81bffd17 	ldw	r6,-12(r16)
    7140:	1144983a 	sll	r2,r2,r5
    7144:	310ad83a 	srl	r5,r6,r4
    7148:	2884b03a 	or	r2,r5,r2
    714c:	003fe806 	br	70f0 <__alt_data_end+0xfffd50f0>
    7150:	10bffd44 	addi	r2,r2,-11
    7154:	1000041e 	bne	r2,zero,7168 <__b2d+0xf8>
    7158:	90cffc34 	orhi	r3,r18,16368
    715c:	003fe406 	br	70f0 <__alt_data_end+0xfffd50f0>
    7160:	000d883a 	mov	r6,zero
    7164:	003fdf06 	br	70e4 <__alt_data_end+0xfffd50e4>
    7168:	90a4983a 	sll	r18,r18,r2
    716c:	0005883a 	mov	r2,zero
    7170:	003ff906 	br	7158 <__alt_data_end+0xfffd5158>
    7174:	1144983a 	sll	r2,r2,r5
    7178:	003fdd06 	br	70f0 <__alt_data_end+0xfffd50f0>

0000717c <__d2b>:
    717c:	defff804 	addi	sp,sp,-32
    7180:	dc000215 	stw	r16,8(sp)
    7184:	3021883a 	mov	r16,r6
    7188:	dc400315 	stw	r17,12(sp)
    718c:	8022907a 	slli	r17,r16,1
    7190:	dd000615 	stw	r20,24(sp)
    7194:	2829883a 	mov	r20,r5
    7198:	01400044 	movi	r5,1
    719c:	dcc00515 	stw	r19,20(sp)
    71a0:	dc800415 	stw	r18,16(sp)
    71a4:	dfc00715 	stw	ra,28(sp)
    71a8:	3825883a 	mov	r18,r7
    71ac:	8822d57a 	srli	r17,r17,21
    71b0:	000642c0 	call	642c <_Balloc>
    71b4:	1027883a 	mov	r19,r2
    71b8:	00800434 	movhi	r2,16
    71bc:	10bfffc4 	addi	r2,r2,-1
    71c0:	808c703a 	and	r6,r16,r2
    71c4:	88000126 	beq	r17,zero,71cc <__d2b+0x50>
    71c8:	31800434 	orhi	r6,r6,16
    71cc:	d9800015 	stw	r6,0(sp)
    71d0:	a0002426 	beq	r20,zero,7264 <__d2b+0xe8>
    71d4:	d9000104 	addi	r4,sp,4
    71d8:	dd000115 	stw	r20,4(sp)
    71dc:	00067b00 	call	67b0 <__lo0bits>
    71e0:	d8c00017 	ldw	r3,0(sp)
    71e4:	10002f1e 	bne	r2,zero,72a4 <__d2b+0x128>
    71e8:	d9000117 	ldw	r4,4(sp)
    71ec:	99000515 	stw	r4,20(r19)
    71f0:	1821003a 	cmpeq	r16,r3,zero
    71f4:	01000084 	movi	r4,2
    71f8:	2421c83a 	sub	r16,r4,r16
    71fc:	98c00615 	stw	r3,24(r19)
    7200:	9c000415 	stw	r16,16(r19)
    7204:	88001f1e 	bne	r17,zero,7284 <__d2b+0x108>
    7208:	10bef384 	addi	r2,r2,-1074
    720c:	90800015 	stw	r2,0(r18)
    7210:	00900034 	movhi	r2,16384
    7214:	10bfffc4 	addi	r2,r2,-1
    7218:	8085883a 	add	r2,r16,r2
    721c:	1085883a 	add	r2,r2,r2
    7220:	1085883a 	add	r2,r2,r2
    7224:	9885883a 	add	r2,r19,r2
    7228:	11000517 	ldw	r4,20(r2)
    722c:	8020917a 	slli	r16,r16,5
    7230:	00067480 	call	6748 <__hi0bits>
    7234:	d8c00817 	ldw	r3,32(sp)
    7238:	8085c83a 	sub	r2,r16,r2
    723c:	18800015 	stw	r2,0(r3)
    7240:	9805883a 	mov	r2,r19
    7244:	dfc00717 	ldw	ra,28(sp)
    7248:	dd000617 	ldw	r20,24(sp)
    724c:	dcc00517 	ldw	r19,20(sp)
    7250:	dc800417 	ldw	r18,16(sp)
    7254:	dc400317 	ldw	r17,12(sp)
    7258:	dc000217 	ldw	r16,8(sp)
    725c:	dec00804 	addi	sp,sp,32
    7260:	f800283a 	ret
    7264:	d809883a 	mov	r4,sp
    7268:	00067b00 	call	67b0 <__lo0bits>
    726c:	d8c00017 	ldw	r3,0(sp)
    7270:	04000044 	movi	r16,1
    7274:	9c000415 	stw	r16,16(r19)
    7278:	98c00515 	stw	r3,20(r19)
    727c:	10800804 	addi	r2,r2,32
    7280:	883fe126 	beq	r17,zero,7208 <__alt_data_end+0xfffd5208>
    7284:	00c00d44 	movi	r3,53
    7288:	8c7ef344 	addi	r17,r17,-1075
    728c:	88a3883a 	add	r17,r17,r2
    7290:	1885c83a 	sub	r2,r3,r2
    7294:	d8c00817 	ldw	r3,32(sp)
    7298:	94400015 	stw	r17,0(r18)
    729c:	18800015 	stw	r2,0(r3)
    72a0:	003fe706 	br	7240 <__alt_data_end+0xfffd5240>
    72a4:	01000804 	movi	r4,32
    72a8:	2089c83a 	sub	r4,r4,r2
    72ac:	1908983a 	sll	r4,r3,r4
    72b0:	d9400117 	ldw	r5,4(sp)
    72b4:	1886d83a 	srl	r3,r3,r2
    72b8:	2148b03a 	or	r4,r4,r5
    72bc:	99000515 	stw	r4,20(r19)
    72c0:	d8c00015 	stw	r3,0(sp)
    72c4:	003fca06 	br	71f0 <__alt_data_end+0xfffd51f0>

000072c8 <__ratio>:
    72c8:	defff904 	addi	sp,sp,-28
    72cc:	dc400315 	stw	r17,12(sp)
    72d0:	2823883a 	mov	r17,r5
    72d4:	d9400104 	addi	r5,sp,4
    72d8:	dfc00615 	stw	ra,24(sp)
    72dc:	dcc00515 	stw	r19,20(sp)
    72e0:	dc800415 	stw	r18,16(sp)
    72e4:	2027883a 	mov	r19,r4
    72e8:	dc000215 	stw	r16,8(sp)
    72ec:	00070700 	call	7070 <__b2d>
    72f0:	d80b883a 	mov	r5,sp
    72f4:	8809883a 	mov	r4,r17
    72f8:	1025883a 	mov	r18,r2
    72fc:	1821883a 	mov	r16,r3
    7300:	00070700 	call	7070 <__b2d>
    7304:	8a000417 	ldw	r8,16(r17)
    7308:	99000417 	ldw	r4,16(r19)
    730c:	d9400117 	ldw	r5,4(sp)
    7310:	2209c83a 	sub	r4,r4,r8
    7314:	2010917a 	slli	r8,r4,5
    7318:	d9000017 	ldw	r4,0(sp)
    731c:	2909c83a 	sub	r4,r5,r4
    7320:	4109883a 	add	r4,r8,r4
    7324:	01000e0e 	bge	zero,r4,7360 <__ratio+0x98>
    7328:	2008953a 	slli	r4,r4,20
    732c:	2421883a 	add	r16,r4,r16
    7330:	100d883a 	mov	r6,r2
    7334:	180f883a 	mov	r7,r3
    7338:	9009883a 	mov	r4,r18
    733c:	800b883a 	mov	r5,r16
    7340:	000b3b40 	call	b3b4 <__divdf3>
    7344:	dfc00617 	ldw	ra,24(sp)
    7348:	dcc00517 	ldw	r19,20(sp)
    734c:	dc800417 	ldw	r18,16(sp)
    7350:	dc400317 	ldw	r17,12(sp)
    7354:	dc000217 	ldw	r16,8(sp)
    7358:	dec00704 	addi	sp,sp,28
    735c:	f800283a 	ret
    7360:	2008953a 	slli	r4,r4,20
    7364:	1907c83a 	sub	r3,r3,r4
    7368:	003ff106 	br	7330 <__alt_data_end+0xfffd5330>

0000736c <_mprec_log10>:
    736c:	defffe04 	addi	sp,sp,-8
    7370:	dc000015 	stw	r16,0(sp)
    7374:	dfc00115 	stw	ra,4(sp)
    7378:	008005c4 	movi	r2,23
    737c:	2021883a 	mov	r16,r4
    7380:	11000d0e 	bge	r2,r4,73b8 <_mprec_log10+0x4c>
    7384:	0005883a 	mov	r2,zero
    7388:	00cffc34 	movhi	r3,16368
    738c:	843fffc4 	addi	r16,r16,-1
    7390:	000d883a 	mov	r6,zero
    7394:	01d00934 	movhi	r7,16420
    7398:	1009883a 	mov	r4,r2
    739c:	180b883a 	mov	r5,r3
    73a0:	000bfdc0 	call	bfdc <__muldf3>
    73a4:	803ff91e 	bne	r16,zero,738c <__alt_data_end+0xfffd538c>
    73a8:	dfc00117 	ldw	ra,4(sp)
    73ac:	dc000017 	ldw	r16,0(sp)
    73b0:	dec00204 	addi	sp,sp,8
    73b4:	f800283a 	ret
    73b8:	202090fa 	slli	r16,r4,3
    73bc:	00800074 	movhi	r2,1
    73c0:	10900e04 	addi	r2,r2,16440
    73c4:	1421883a 	add	r16,r2,r16
    73c8:	80800017 	ldw	r2,0(r16)
    73cc:	80c00117 	ldw	r3,4(r16)
    73d0:	dfc00117 	ldw	ra,4(sp)
    73d4:	dc000017 	ldw	r16,0(sp)
    73d8:	dec00204 	addi	sp,sp,8
    73dc:	f800283a 	ret

000073e0 <__copybits>:
    73e0:	297fffc4 	addi	r5,r5,-1
    73e4:	280fd17a 	srai	r7,r5,5
    73e8:	30c00417 	ldw	r3,16(r6)
    73ec:	30800504 	addi	r2,r6,20
    73f0:	39c00044 	addi	r7,r7,1
    73f4:	18c7883a 	add	r3,r3,r3
    73f8:	39cf883a 	add	r7,r7,r7
    73fc:	18c7883a 	add	r3,r3,r3
    7400:	39cf883a 	add	r7,r7,r7
    7404:	10c7883a 	add	r3,r2,r3
    7408:	21cf883a 	add	r7,r4,r7
    740c:	10c00d2e 	bgeu	r2,r3,7444 <__copybits+0x64>
    7410:	200b883a 	mov	r5,r4
    7414:	12000017 	ldw	r8,0(r2)
    7418:	29400104 	addi	r5,r5,4
    741c:	10800104 	addi	r2,r2,4
    7420:	2a3fff15 	stw	r8,-4(r5)
    7424:	10fffb36 	bltu	r2,r3,7414 <__alt_data_end+0xfffd5414>
    7428:	1985c83a 	sub	r2,r3,r6
    742c:	10bffac4 	addi	r2,r2,-21
    7430:	1004d0ba 	srli	r2,r2,2
    7434:	10800044 	addi	r2,r2,1
    7438:	1085883a 	add	r2,r2,r2
    743c:	1085883a 	add	r2,r2,r2
    7440:	2089883a 	add	r4,r4,r2
    7444:	21c0032e 	bgeu	r4,r7,7454 <__copybits+0x74>
    7448:	20000015 	stw	zero,0(r4)
    744c:	21000104 	addi	r4,r4,4
    7450:	21fffd36 	bltu	r4,r7,7448 <__alt_data_end+0xfffd5448>
    7454:	f800283a 	ret

00007458 <__any_on>:
    7458:	20c00417 	ldw	r3,16(r4)
    745c:	2805d17a 	srai	r2,r5,5
    7460:	21000504 	addi	r4,r4,20
    7464:	18800d0e 	bge	r3,r2,749c <__any_on+0x44>
    7468:	18c7883a 	add	r3,r3,r3
    746c:	18c7883a 	add	r3,r3,r3
    7470:	20c7883a 	add	r3,r4,r3
    7474:	20c0192e 	bgeu	r4,r3,74dc <__any_on+0x84>
    7478:	18bfff17 	ldw	r2,-4(r3)
    747c:	18ffff04 	addi	r3,r3,-4
    7480:	1000041e 	bne	r2,zero,7494 <__any_on+0x3c>
    7484:	20c0142e 	bgeu	r4,r3,74d8 <__any_on+0x80>
    7488:	18ffff04 	addi	r3,r3,-4
    748c:	19400017 	ldw	r5,0(r3)
    7490:	283ffc26 	beq	r5,zero,7484 <__alt_data_end+0xfffd5484>
    7494:	00800044 	movi	r2,1
    7498:	f800283a 	ret
    749c:	10c00a0e 	bge	r2,r3,74c8 <__any_on+0x70>
    74a0:	1085883a 	add	r2,r2,r2
    74a4:	1085883a 	add	r2,r2,r2
    74a8:	294007cc 	andi	r5,r5,31
    74ac:	2087883a 	add	r3,r4,r2
    74b0:	283ff026 	beq	r5,zero,7474 <__alt_data_end+0xfffd5474>
    74b4:	19800017 	ldw	r6,0(r3)
    74b8:	3144d83a 	srl	r2,r6,r5
    74bc:	114a983a 	sll	r5,r2,r5
    74c0:	317ff41e 	bne	r6,r5,7494 <__alt_data_end+0xfffd5494>
    74c4:	003feb06 	br	7474 <__alt_data_end+0xfffd5474>
    74c8:	1085883a 	add	r2,r2,r2
    74cc:	1085883a 	add	r2,r2,r2
    74d0:	2087883a 	add	r3,r4,r2
    74d4:	003fe706 	br	7474 <__alt_data_end+0xfffd5474>
    74d8:	f800283a 	ret
    74dc:	0005883a 	mov	r2,zero
    74e0:	f800283a 	ret

000074e4 <_realloc_r>:
    74e4:	defff604 	addi	sp,sp,-40
    74e8:	dc800215 	stw	r18,8(sp)
    74ec:	dfc00915 	stw	ra,36(sp)
    74f0:	df000815 	stw	fp,32(sp)
    74f4:	ddc00715 	stw	r23,28(sp)
    74f8:	dd800615 	stw	r22,24(sp)
    74fc:	dd400515 	stw	r21,20(sp)
    7500:	dd000415 	stw	r20,16(sp)
    7504:	dcc00315 	stw	r19,12(sp)
    7508:	dc400115 	stw	r17,4(sp)
    750c:	dc000015 	stw	r16,0(sp)
    7510:	3025883a 	mov	r18,r6
    7514:	2800b726 	beq	r5,zero,77f4 <_realloc_r+0x310>
    7518:	282b883a 	mov	r21,r5
    751c:	2029883a 	mov	r20,r4
    7520:	000d9480 	call	d948 <__malloc_lock>
    7524:	a8bfff17 	ldw	r2,-4(r21)
    7528:	043fff04 	movi	r16,-4
    752c:	90c002c4 	addi	r3,r18,11
    7530:	01000584 	movi	r4,22
    7534:	acfffe04 	addi	r19,r21,-8
    7538:	1420703a 	and	r16,r2,r16
    753c:	20c0332e 	bgeu	r4,r3,760c <_realloc_r+0x128>
    7540:	047ffe04 	movi	r17,-8
    7544:	1c62703a 	and	r17,r3,r17
    7548:	8807883a 	mov	r3,r17
    754c:	88005816 	blt	r17,zero,76b0 <_realloc_r+0x1cc>
    7550:	8c805736 	bltu	r17,r18,76b0 <_realloc_r+0x1cc>
    7554:	80c0300e 	bge	r16,r3,7618 <_realloc_r+0x134>
    7558:	07000074 	movhi	fp,1
    755c:	e711bb04 	addi	fp,fp,18156
    7560:	e1c00217 	ldw	r7,8(fp)
    7564:	9c09883a 	add	r4,r19,r16
    7568:	22000117 	ldw	r8,4(r4)
    756c:	21c06326 	beq	r4,r7,76fc <_realloc_r+0x218>
    7570:	017fff84 	movi	r5,-2
    7574:	414a703a 	and	r5,r8,r5
    7578:	214b883a 	add	r5,r4,r5
    757c:	29800117 	ldw	r6,4(r5)
    7580:	3180004c 	andi	r6,r6,1
    7584:	30003f26 	beq	r6,zero,7684 <_realloc_r+0x1a0>
    7588:	1080004c 	andi	r2,r2,1
    758c:	10008326 	beq	r2,zero,779c <_realloc_r+0x2b8>
    7590:	900b883a 	mov	r5,r18
    7594:	a009883a 	mov	r4,r20
    7598:	00057700 	call	5770 <_malloc_r>
    759c:	1025883a 	mov	r18,r2
    75a0:	10011e26 	beq	r2,zero,7a1c <_realloc_r+0x538>
    75a4:	a93fff17 	ldw	r4,-4(r21)
    75a8:	10fffe04 	addi	r3,r2,-8
    75ac:	00bfff84 	movi	r2,-2
    75b0:	2084703a 	and	r2,r4,r2
    75b4:	9885883a 	add	r2,r19,r2
    75b8:	1880ee26 	beq	r3,r2,7974 <_realloc_r+0x490>
    75bc:	81bfff04 	addi	r6,r16,-4
    75c0:	00800904 	movi	r2,36
    75c4:	1180b836 	bltu	r2,r6,78a8 <_realloc_r+0x3c4>
    75c8:	00c004c4 	movi	r3,19
    75cc:	19809636 	bltu	r3,r6,7828 <_realloc_r+0x344>
    75d0:	9005883a 	mov	r2,r18
    75d4:	a807883a 	mov	r3,r21
    75d8:	19000017 	ldw	r4,0(r3)
    75dc:	11000015 	stw	r4,0(r2)
    75e0:	19000117 	ldw	r4,4(r3)
    75e4:	11000115 	stw	r4,4(r2)
    75e8:	18c00217 	ldw	r3,8(r3)
    75ec:	10c00215 	stw	r3,8(r2)
    75f0:	a80b883a 	mov	r5,r21
    75f4:	a009883a 	mov	r4,r20
    75f8:	0004b780 	call	4b78 <_free_r>
    75fc:	a009883a 	mov	r4,r20
    7600:	000d96c0 	call	d96c <__malloc_unlock>
    7604:	9005883a 	mov	r2,r18
    7608:	00001206 	br	7654 <_realloc_r+0x170>
    760c:	00c00404 	movi	r3,16
    7610:	1823883a 	mov	r17,r3
    7614:	003fce06 	br	7550 <__alt_data_end+0xfffd5550>
    7618:	a825883a 	mov	r18,r21
    761c:	8445c83a 	sub	r2,r16,r17
    7620:	00c003c4 	movi	r3,15
    7624:	18802636 	bltu	r3,r2,76c0 <_realloc_r+0x1dc>
    7628:	99800117 	ldw	r6,4(r19)
    762c:	9c07883a 	add	r3,r19,r16
    7630:	3180004c 	andi	r6,r6,1
    7634:	3420b03a 	or	r16,r6,r16
    7638:	9c000115 	stw	r16,4(r19)
    763c:	18800117 	ldw	r2,4(r3)
    7640:	10800054 	ori	r2,r2,1
    7644:	18800115 	stw	r2,4(r3)
    7648:	a009883a 	mov	r4,r20
    764c:	000d96c0 	call	d96c <__malloc_unlock>
    7650:	9005883a 	mov	r2,r18
    7654:	dfc00917 	ldw	ra,36(sp)
    7658:	df000817 	ldw	fp,32(sp)
    765c:	ddc00717 	ldw	r23,28(sp)
    7660:	dd800617 	ldw	r22,24(sp)
    7664:	dd400517 	ldw	r21,20(sp)
    7668:	dd000417 	ldw	r20,16(sp)
    766c:	dcc00317 	ldw	r19,12(sp)
    7670:	dc800217 	ldw	r18,8(sp)
    7674:	dc400117 	ldw	r17,4(sp)
    7678:	dc000017 	ldw	r16,0(sp)
    767c:	dec00a04 	addi	sp,sp,40
    7680:	f800283a 	ret
    7684:	017fff04 	movi	r5,-4
    7688:	414a703a 	and	r5,r8,r5
    768c:	814d883a 	add	r6,r16,r5
    7690:	30c01f16 	blt	r6,r3,7710 <_realloc_r+0x22c>
    7694:	20800317 	ldw	r2,12(r4)
    7698:	20c00217 	ldw	r3,8(r4)
    769c:	a825883a 	mov	r18,r21
    76a0:	3021883a 	mov	r16,r6
    76a4:	18800315 	stw	r2,12(r3)
    76a8:	10c00215 	stw	r3,8(r2)
    76ac:	003fdb06 	br	761c <__alt_data_end+0xfffd561c>
    76b0:	00800304 	movi	r2,12
    76b4:	a0800015 	stw	r2,0(r20)
    76b8:	0005883a 	mov	r2,zero
    76bc:	003fe506 	br	7654 <__alt_data_end+0xfffd5654>
    76c0:	98c00117 	ldw	r3,4(r19)
    76c4:	9c4b883a 	add	r5,r19,r17
    76c8:	11000054 	ori	r4,r2,1
    76cc:	18c0004c 	andi	r3,r3,1
    76d0:	1c62b03a 	or	r17,r3,r17
    76d4:	9c400115 	stw	r17,4(r19)
    76d8:	29000115 	stw	r4,4(r5)
    76dc:	2885883a 	add	r2,r5,r2
    76e0:	10c00117 	ldw	r3,4(r2)
    76e4:	29400204 	addi	r5,r5,8
    76e8:	a009883a 	mov	r4,r20
    76ec:	18c00054 	ori	r3,r3,1
    76f0:	10c00115 	stw	r3,4(r2)
    76f4:	0004b780 	call	4b78 <_free_r>
    76f8:	003fd306 	br	7648 <__alt_data_end+0xfffd5648>
    76fc:	017fff04 	movi	r5,-4
    7700:	414a703a 	and	r5,r8,r5
    7704:	89800404 	addi	r6,r17,16
    7708:	8151883a 	add	r8,r16,r5
    770c:	4180590e 	bge	r8,r6,7874 <_realloc_r+0x390>
    7710:	1080004c 	andi	r2,r2,1
    7714:	103f9e1e 	bne	r2,zero,7590 <__alt_data_end+0xfffd5590>
    7718:	adbffe17 	ldw	r22,-8(r21)
    771c:	00bfff04 	movi	r2,-4
    7720:	9dadc83a 	sub	r22,r19,r22
    7724:	b1800117 	ldw	r6,4(r22)
    7728:	3084703a 	and	r2,r6,r2
    772c:	20002026 	beq	r4,zero,77b0 <_realloc_r+0x2cc>
    7730:	80af883a 	add	r23,r16,r2
    7734:	b96f883a 	add	r23,r23,r5
    7738:	21c05f26 	beq	r4,r7,78b8 <_realloc_r+0x3d4>
    773c:	b8c01c16 	blt	r23,r3,77b0 <_realloc_r+0x2cc>
    7740:	20800317 	ldw	r2,12(r4)
    7744:	20c00217 	ldw	r3,8(r4)
    7748:	81bfff04 	addi	r6,r16,-4
    774c:	01000904 	movi	r4,36
    7750:	18800315 	stw	r2,12(r3)
    7754:	10c00215 	stw	r3,8(r2)
    7758:	b0c00217 	ldw	r3,8(r22)
    775c:	b0800317 	ldw	r2,12(r22)
    7760:	b4800204 	addi	r18,r22,8
    7764:	18800315 	stw	r2,12(r3)
    7768:	10c00215 	stw	r3,8(r2)
    776c:	21801b36 	bltu	r4,r6,77dc <_realloc_r+0x2f8>
    7770:	008004c4 	movi	r2,19
    7774:	1180352e 	bgeu	r2,r6,784c <_realloc_r+0x368>
    7778:	a8800017 	ldw	r2,0(r21)
    777c:	b0800215 	stw	r2,8(r22)
    7780:	a8800117 	ldw	r2,4(r21)
    7784:	b0800315 	stw	r2,12(r22)
    7788:	008006c4 	movi	r2,27
    778c:	11807f36 	bltu	r2,r6,798c <_realloc_r+0x4a8>
    7790:	b0800404 	addi	r2,r22,16
    7794:	ad400204 	addi	r21,r21,8
    7798:	00002d06 	br	7850 <_realloc_r+0x36c>
    779c:	adbffe17 	ldw	r22,-8(r21)
    77a0:	00bfff04 	movi	r2,-4
    77a4:	9dadc83a 	sub	r22,r19,r22
    77a8:	b1000117 	ldw	r4,4(r22)
    77ac:	2084703a 	and	r2,r4,r2
    77b0:	b03f7726 	beq	r22,zero,7590 <__alt_data_end+0xfffd5590>
    77b4:	80af883a 	add	r23,r16,r2
    77b8:	b8ff7516 	blt	r23,r3,7590 <__alt_data_end+0xfffd5590>
    77bc:	b0800317 	ldw	r2,12(r22)
    77c0:	b0c00217 	ldw	r3,8(r22)
    77c4:	81bfff04 	addi	r6,r16,-4
    77c8:	01000904 	movi	r4,36
    77cc:	18800315 	stw	r2,12(r3)
    77d0:	10c00215 	stw	r3,8(r2)
    77d4:	b4800204 	addi	r18,r22,8
    77d8:	21bfe52e 	bgeu	r4,r6,7770 <__alt_data_end+0xfffd5770>
    77dc:	a80b883a 	mov	r5,r21
    77e0:	9009883a 	mov	r4,r18
    77e4:	00061a80 	call	61a8 <memmove>
    77e8:	b821883a 	mov	r16,r23
    77ec:	b027883a 	mov	r19,r22
    77f0:	003f8a06 	br	761c <__alt_data_end+0xfffd561c>
    77f4:	300b883a 	mov	r5,r6
    77f8:	dfc00917 	ldw	ra,36(sp)
    77fc:	df000817 	ldw	fp,32(sp)
    7800:	ddc00717 	ldw	r23,28(sp)
    7804:	dd800617 	ldw	r22,24(sp)
    7808:	dd400517 	ldw	r21,20(sp)
    780c:	dd000417 	ldw	r20,16(sp)
    7810:	dcc00317 	ldw	r19,12(sp)
    7814:	dc800217 	ldw	r18,8(sp)
    7818:	dc400117 	ldw	r17,4(sp)
    781c:	dc000017 	ldw	r16,0(sp)
    7820:	dec00a04 	addi	sp,sp,40
    7824:	00057701 	jmpi	5770 <_malloc_r>
    7828:	a8c00017 	ldw	r3,0(r21)
    782c:	90c00015 	stw	r3,0(r18)
    7830:	a8c00117 	ldw	r3,4(r21)
    7834:	90c00115 	stw	r3,4(r18)
    7838:	00c006c4 	movi	r3,27
    783c:	19804536 	bltu	r3,r6,7954 <_realloc_r+0x470>
    7840:	90800204 	addi	r2,r18,8
    7844:	a8c00204 	addi	r3,r21,8
    7848:	003f6306 	br	75d8 <__alt_data_end+0xfffd55d8>
    784c:	9005883a 	mov	r2,r18
    7850:	a8c00017 	ldw	r3,0(r21)
    7854:	b821883a 	mov	r16,r23
    7858:	b027883a 	mov	r19,r22
    785c:	10c00015 	stw	r3,0(r2)
    7860:	a8c00117 	ldw	r3,4(r21)
    7864:	10c00115 	stw	r3,4(r2)
    7868:	a8c00217 	ldw	r3,8(r21)
    786c:	10c00215 	stw	r3,8(r2)
    7870:	003f6a06 	br	761c <__alt_data_end+0xfffd561c>
    7874:	9c67883a 	add	r19,r19,r17
    7878:	4445c83a 	sub	r2,r8,r17
    787c:	e4c00215 	stw	r19,8(fp)
    7880:	10800054 	ori	r2,r2,1
    7884:	98800115 	stw	r2,4(r19)
    7888:	a8bfff17 	ldw	r2,-4(r21)
    788c:	a009883a 	mov	r4,r20
    7890:	1080004c 	andi	r2,r2,1
    7894:	1462b03a 	or	r17,r2,r17
    7898:	ac7fff15 	stw	r17,-4(r21)
    789c:	000d96c0 	call	d96c <__malloc_unlock>
    78a0:	a805883a 	mov	r2,r21
    78a4:	003f6b06 	br	7654 <__alt_data_end+0xfffd5654>
    78a8:	a80b883a 	mov	r5,r21
    78ac:	9009883a 	mov	r4,r18
    78b0:	00061a80 	call	61a8 <memmove>
    78b4:	003f4e06 	br	75f0 <__alt_data_end+0xfffd55f0>
    78b8:	89000404 	addi	r4,r17,16
    78bc:	b93fbc16 	blt	r23,r4,77b0 <__alt_data_end+0xfffd57b0>
    78c0:	b0800317 	ldw	r2,12(r22)
    78c4:	b0c00217 	ldw	r3,8(r22)
    78c8:	81bfff04 	addi	r6,r16,-4
    78cc:	01000904 	movi	r4,36
    78d0:	18800315 	stw	r2,12(r3)
    78d4:	10c00215 	stw	r3,8(r2)
    78d8:	b4800204 	addi	r18,r22,8
    78dc:	21804336 	bltu	r4,r6,79ec <_realloc_r+0x508>
    78e0:	008004c4 	movi	r2,19
    78e4:	11803f2e 	bgeu	r2,r6,79e4 <_realloc_r+0x500>
    78e8:	a8800017 	ldw	r2,0(r21)
    78ec:	b0800215 	stw	r2,8(r22)
    78f0:	a8800117 	ldw	r2,4(r21)
    78f4:	b0800315 	stw	r2,12(r22)
    78f8:	008006c4 	movi	r2,27
    78fc:	11803f36 	bltu	r2,r6,79fc <_realloc_r+0x518>
    7900:	b0800404 	addi	r2,r22,16
    7904:	ad400204 	addi	r21,r21,8
    7908:	a8c00017 	ldw	r3,0(r21)
    790c:	10c00015 	stw	r3,0(r2)
    7910:	a8c00117 	ldw	r3,4(r21)
    7914:	10c00115 	stw	r3,4(r2)
    7918:	a8c00217 	ldw	r3,8(r21)
    791c:	10c00215 	stw	r3,8(r2)
    7920:	b447883a 	add	r3,r22,r17
    7924:	bc45c83a 	sub	r2,r23,r17
    7928:	e0c00215 	stw	r3,8(fp)
    792c:	10800054 	ori	r2,r2,1
    7930:	18800115 	stw	r2,4(r3)
    7934:	b0800117 	ldw	r2,4(r22)
    7938:	a009883a 	mov	r4,r20
    793c:	1080004c 	andi	r2,r2,1
    7940:	1462b03a 	or	r17,r2,r17
    7944:	b4400115 	stw	r17,4(r22)
    7948:	000d96c0 	call	d96c <__malloc_unlock>
    794c:	9005883a 	mov	r2,r18
    7950:	003f4006 	br	7654 <__alt_data_end+0xfffd5654>
    7954:	a8c00217 	ldw	r3,8(r21)
    7958:	90c00215 	stw	r3,8(r18)
    795c:	a8c00317 	ldw	r3,12(r21)
    7960:	90c00315 	stw	r3,12(r18)
    7964:	30801126 	beq	r6,r2,79ac <_realloc_r+0x4c8>
    7968:	90800404 	addi	r2,r18,16
    796c:	a8c00404 	addi	r3,r21,16
    7970:	003f1906 	br	75d8 <__alt_data_end+0xfffd55d8>
    7974:	90ffff17 	ldw	r3,-4(r18)
    7978:	00bfff04 	movi	r2,-4
    797c:	a825883a 	mov	r18,r21
    7980:	1884703a 	and	r2,r3,r2
    7984:	80a1883a 	add	r16,r16,r2
    7988:	003f2406 	br	761c <__alt_data_end+0xfffd561c>
    798c:	a8800217 	ldw	r2,8(r21)
    7990:	b0800415 	stw	r2,16(r22)
    7994:	a8800317 	ldw	r2,12(r21)
    7998:	b0800515 	stw	r2,20(r22)
    799c:	31000a26 	beq	r6,r4,79c8 <_realloc_r+0x4e4>
    79a0:	b0800604 	addi	r2,r22,24
    79a4:	ad400404 	addi	r21,r21,16
    79a8:	003fa906 	br	7850 <__alt_data_end+0xfffd5850>
    79ac:	a9000417 	ldw	r4,16(r21)
    79b0:	90800604 	addi	r2,r18,24
    79b4:	a8c00604 	addi	r3,r21,24
    79b8:	91000415 	stw	r4,16(r18)
    79bc:	a9000517 	ldw	r4,20(r21)
    79c0:	91000515 	stw	r4,20(r18)
    79c4:	003f0406 	br	75d8 <__alt_data_end+0xfffd55d8>
    79c8:	a8c00417 	ldw	r3,16(r21)
    79cc:	ad400604 	addi	r21,r21,24
    79d0:	b0800804 	addi	r2,r22,32
    79d4:	b0c00615 	stw	r3,24(r22)
    79d8:	a8ffff17 	ldw	r3,-4(r21)
    79dc:	b0c00715 	stw	r3,28(r22)
    79e0:	003f9b06 	br	7850 <__alt_data_end+0xfffd5850>
    79e4:	9005883a 	mov	r2,r18
    79e8:	003fc706 	br	7908 <__alt_data_end+0xfffd5908>
    79ec:	a80b883a 	mov	r5,r21
    79f0:	9009883a 	mov	r4,r18
    79f4:	00061a80 	call	61a8 <memmove>
    79f8:	003fc906 	br	7920 <__alt_data_end+0xfffd5920>
    79fc:	a8800217 	ldw	r2,8(r21)
    7a00:	b0800415 	stw	r2,16(r22)
    7a04:	a8800317 	ldw	r2,12(r21)
    7a08:	b0800515 	stw	r2,20(r22)
    7a0c:	31000726 	beq	r6,r4,7a2c <_realloc_r+0x548>
    7a10:	b0800604 	addi	r2,r22,24
    7a14:	ad400404 	addi	r21,r21,16
    7a18:	003fbb06 	br	7908 <__alt_data_end+0xfffd5908>
    7a1c:	a009883a 	mov	r4,r20
    7a20:	000d96c0 	call	d96c <__malloc_unlock>
    7a24:	0005883a 	mov	r2,zero
    7a28:	003f0a06 	br	7654 <__alt_data_end+0xfffd5654>
    7a2c:	a8c00417 	ldw	r3,16(r21)
    7a30:	ad400604 	addi	r21,r21,24
    7a34:	b0800804 	addi	r2,r22,32
    7a38:	b0c00615 	stw	r3,24(r22)
    7a3c:	a8ffff17 	ldw	r3,-4(r21)
    7a40:	b0c00715 	stw	r3,28(r22)
    7a44:	003fb006 	br	7908 <__alt_data_end+0xfffd5908>

00007a48 <__fpclassifyd>:
    7a48:	00a00034 	movhi	r2,32768
    7a4c:	10bfffc4 	addi	r2,r2,-1
    7a50:	2884703a 	and	r2,r5,r2
    7a54:	10000726 	beq	r2,zero,7a74 <__fpclassifyd+0x2c>
    7a58:	00fffc34 	movhi	r3,65520
    7a5c:	019ff834 	movhi	r6,32736
    7a60:	28c7883a 	add	r3,r5,r3
    7a64:	31bfffc4 	addi	r6,r6,-1
    7a68:	30c00536 	bltu	r6,r3,7a80 <__fpclassifyd+0x38>
    7a6c:	00800104 	movi	r2,4
    7a70:	f800283a 	ret
    7a74:	2000021e 	bne	r4,zero,7a80 <__fpclassifyd+0x38>
    7a78:	00800084 	movi	r2,2
    7a7c:	f800283a 	ret
    7a80:	00dffc34 	movhi	r3,32752
    7a84:	019ff834 	movhi	r6,32736
    7a88:	28cb883a 	add	r5,r5,r3
    7a8c:	31bfffc4 	addi	r6,r6,-1
    7a90:	317ff62e 	bgeu	r6,r5,7a6c <__alt_data_end+0xfffd5a6c>
    7a94:	01400434 	movhi	r5,16
    7a98:	297fffc4 	addi	r5,r5,-1
    7a9c:	28800236 	bltu	r5,r2,7aa8 <__fpclassifyd+0x60>
    7aa0:	008000c4 	movi	r2,3
    7aa4:	f800283a 	ret
    7aa8:	10c00226 	beq	r2,r3,7ab4 <__fpclassifyd+0x6c>
    7aac:	0005883a 	mov	r2,zero
    7ab0:	f800283a 	ret
    7ab4:	2005003a 	cmpeq	r2,r4,zero
    7ab8:	f800283a 	ret

00007abc <_sbrk_r>:
    7abc:	defffd04 	addi	sp,sp,-12
    7ac0:	dc000015 	stw	r16,0(sp)
    7ac4:	04000074 	movhi	r16,1
    7ac8:	dc400115 	stw	r17,4(sp)
    7acc:	841e2704 	addi	r16,r16,30876
    7ad0:	2023883a 	mov	r17,r4
    7ad4:	2809883a 	mov	r4,r5
    7ad8:	dfc00215 	stw	ra,8(sp)
    7adc:	80000015 	stw	zero,0(r16)
    7ae0:	000db540 	call	db54 <sbrk>
    7ae4:	00ffffc4 	movi	r3,-1
    7ae8:	10c00526 	beq	r2,r3,7b00 <_sbrk_r+0x44>
    7aec:	dfc00217 	ldw	ra,8(sp)
    7af0:	dc400117 	ldw	r17,4(sp)
    7af4:	dc000017 	ldw	r16,0(sp)
    7af8:	dec00304 	addi	sp,sp,12
    7afc:	f800283a 	ret
    7b00:	80c00017 	ldw	r3,0(r16)
    7b04:	183ff926 	beq	r3,zero,7aec <__alt_data_end+0xfffd5aec>
    7b08:	88c00015 	stw	r3,0(r17)
    7b0c:	003ff706 	br	7aec <__alt_data_end+0xfffd5aec>

00007b10 <__sread>:
    7b10:	defffe04 	addi	sp,sp,-8
    7b14:	dc000015 	stw	r16,0(sp)
    7b18:	2821883a 	mov	r16,r5
    7b1c:	2940038f 	ldh	r5,14(r5)
    7b20:	dfc00115 	stw	ra,4(sp)
    7b24:	00099cc0 	call	99cc <_read_r>
    7b28:	10000716 	blt	r2,zero,7b48 <__sread+0x38>
    7b2c:	80c01417 	ldw	r3,80(r16)
    7b30:	1887883a 	add	r3,r3,r2
    7b34:	80c01415 	stw	r3,80(r16)
    7b38:	dfc00117 	ldw	ra,4(sp)
    7b3c:	dc000017 	ldw	r16,0(sp)
    7b40:	dec00204 	addi	sp,sp,8
    7b44:	f800283a 	ret
    7b48:	80c0030b 	ldhu	r3,12(r16)
    7b4c:	18fbffcc 	andi	r3,r3,61439
    7b50:	80c0030d 	sth	r3,12(r16)
    7b54:	dfc00117 	ldw	ra,4(sp)
    7b58:	dc000017 	ldw	r16,0(sp)
    7b5c:	dec00204 	addi	sp,sp,8
    7b60:	f800283a 	ret

00007b64 <__seofread>:
    7b64:	0005883a 	mov	r2,zero
    7b68:	f800283a 	ret

00007b6c <__swrite>:
    7b6c:	2880030b 	ldhu	r2,12(r5)
    7b70:	defffb04 	addi	sp,sp,-20
    7b74:	dcc00315 	stw	r19,12(sp)
    7b78:	dc800215 	stw	r18,8(sp)
    7b7c:	dc400115 	stw	r17,4(sp)
    7b80:	dc000015 	stw	r16,0(sp)
    7b84:	dfc00415 	stw	ra,16(sp)
    7b88:	10c0400c 	andi	r3,r2,256
    7b8c:	2821883a 	mov	r16,r5
    7b90:	2023883a 	mov	r17,r4
    7b94:	3025883a 	mov	r18,r6
    7b98:	3827883a 	mov	r19,r7
    7b9c:	18000526 	beq	r3,zero,7bb4 <__swrite+0x48>
    7ba0:	2940038f 	ldh	r5,14(r5)
    7ba4:	01c00084 	movi	r7,2
    7ba8:	000d883a 	mov	r6,zero
    7bac:	000996c0 	call	996c <_lseek_r>
    7bb0:	8080030b 	ldhu	r2,12(r16)
    7bb4:	8140038f 	ldh	r5,14(r16)
    7bb8:	10bbffcc 	andi	r2,r2,61439
    7bbc:	980f883a 	mov	r7,r19
    7bc0:	900d883a 	mov	r6,r18
    7bc4:	8809883a 	mov	r4,r17
    7bc8:	8080030d 	sth	r2,12(r16)
    7bcc:	dfc00417 	ldw	ra,16(sp)
    7bd0:	dcc00317 	ldw	r19,12(sp)
    7bd4:	dc800217 	ldw	r18,8(sp)
    7bd8:	dc400117 	ldw	r17,4(sp)
    7bdc:	dc000017 	ldw	r16,0(sp)
    7be0:	dec00504 	addi	sp,sp,20
    7be4:	00094201 	jmpi	9420 <_write_r>

00007be8 <__sseek>:
    7be8:	defffe04 	addi	sp,sp,-8
    7bec:	dc000015 	stw	r16,0(sp)
    7bf0:	2821883a 	mov	r16,r5
    7bf4:	2940038f 	ldh	r5,14(r5)
    7bf8:	dfc00115 	stw	ra,4(sp)
    7bfc:	000996c0 	call	996c <_lseek_r>
    7c00:	00ffffc4 	movi	r3,-1
    7c04:	10c00826 	beq	r2,r3,7c28 <__sseek+0x40>
    7c08:	80c0030b 	ldhu	r3,12(r16)
    7c0c:	80801415 	stw	r2,80(r16)
    7c10:	18c40014 	ori	r3,r3,4096
    7c14:	80c0030d 	sth	r3,12(r16)
    7c18:	dfc00117 	ldw	ra,4(sp)
    7c1c:	dc000017 	ldw	r16,0(sp)
    7c20:	dec00204 	addi	sp,sp,8
    7c24:	f800283a 	ret
    7c28:	80c0030b 	ldhu	r3,12(r16)
    7c2c:	18fbffcc 	andi	r3,r3,61439
    7c30:	80c0030d 	sth	r3,12(r16)
    7c34:	dfc00117 	ldw	ra,4(sp)
    7c38:	dc000017 	ldw	r16,0(sp)
    7c3c:	dec00204 	addi	sp,sp,8
    7c40:	f800283a 	ret

00007c44 <__sclose>:
    7c44:	2940038f 	ldh	r5,14(r5)
    7c48:	00094801 	jmpi	9480 <_close_r>

00007c4c <strcmp>:
    7c4c:	2144b03a 	or	r2,r4,r5
    7c50:	108000cc 	andi	r2,r2,3
    7c54:	1000171e 	bne	r2,zero,7cb4 <strcmp+0x68>
    7c58:	20800017 	ldw	r2,0(r4)
    7c5c:	28c00017 	ldw	r3,0(r5)
    7c60:	10c0141e 	bne	r2,r3,7cb4 <strcmp+0x68>
    7c64:	027fbff4 	movhi	r9,65279
    7c68:	4a7fbfc4 	addi	r9,r9,-257
    7c6c:	0086303a 	nor	r3,zero,r2
    7c70:	02202074 	movhi	r8,32897
    7c74:	1245883a 	add	r2,r2,r9
    7c78:	42202004 	addi	r8,r8,-32640
    7c7c:	10c4703a 	and	r2,r2,r3
    7c80:	1204703a 	and	r2,r2,r8
    7c84:	10000226 	beq	r2,zero,7c90 <strcmp+0x44>
    7c88:	00002306 	br	7d18 <strcmp+0xcc>
    7c8c:	1000221e 	bne	r2,zero,7d18 <strcmp+0xcc>
    7c90:	21000104 	addi	r4,r4,4
    7c94:	20c00017 	ldw	r3,0(r4)
    7c98:	29400104 	addi	r5,r5,4
    7c9c:	29800017 	ldw	r6,0(r5)
    7ca0:	1a4f883a 	add	r7,r3,r9
    7ca4:	00c4303a 	nor	r2,zero,r3
    7ca8:	3884703a 	and	r2,r7,r2
    7cac:	1204703a 	and	r2,r2,r8
    7cb0:	19bff626 	beq	r3,r6,7c8c <__alt_data_end+0xfffd5c8c>
    7cb4:	20800003 	ldbu	r2,0(r4)
    7cb8:	10c03fcc 	andi	r3,r2,255
    7cbc:	18c0201c 	xori	r3,r3,128
    7cc0:	18ffe004 	addi	r3,r3,-128
    7cc4:	18000c26 	beq	r3,zero,7cf8 <strcmp+0xac>
    7cc8:	29800007 	ldb	r6,0(r5)
    7ccc:	19800326 	beq	r3,r6,7cdc <strcmp+0x90>
    7cd0:	00001306 	br	7d20 <strcmp+0xd4>
    7cd4:	29800007 	ldb	r6,0(r5)
    7cd8:	11800b1e 	bne	r2,r6,7d08 <strcmp+0xbc>
    7cdc:	21000044 	addi	r4,r4,1
    7ce0:	20c00003 	ldbu	r3,0(r4)
    7ce4:	29400044 	addi	r5,r5,1
    7ce8:	18803fcc 	andi	r2,r3,255
    7cec:	1080201c 	xori	r2,r2,128
    7cf0:	10bfe004 	addi	r2,r2,-128
    7cf4:	103ff71e 	bne	r2,zero,7cd4 <__alt_data_end+0xfffd5cd4>
    7cf8:	0007883a 	mov	r3,zero
    7cfc:	28800003 	ldbu	r2,0(r5)
    7d00:	1885c83a 	sub	r2,r3,r2
    7d04:	f800283a 	ret
    7d08:	28800003 	ldbu	r2,0(r5)
    7d0c:	18c03fcc 	andi	r3,r3,255
    7d10:	1885c83a 	sub	r2,r3,r2
    7d14:	f800283a 	ret
    7d18:	0005883a 	mov	r2,zero
    7d1c:	f800283a 	ret
    7d20:	10c03fcc 	andi	r3,r2,255
    7d24:	003ff506 	br	7cfc <__alt_data_end+0xfffd5cfc>

00007d28 <__sprint_r.part.0>:
    7d28:	28801917 	ldw	r2,100(r5)
    7d2c:	defff604 	addi	sp,sp,-40
    7d30:	dd400515 	stw	r21,20(sp)
    7d34:	dfc00915 	stw	ra,36(sp)
    7d38:	df000815 	stw	fp,32(sp)
    7d3c:	ddc00715 	stw	r23,28(sp)
    7d40:	dd800615 	stw	r22,24(sp)
    7d44:	dd000415 	stw	r20,16(sp)
    7d48:	dcc00315 	stw	r19,12(sp)
    7d4c:	dc800215 	stw	r18,8(sp)
    7d50:	dc400115 	stw	r17,4(sp)
    7d54:	dc000015 	stw	r16,0(sp)
    7d58:	1088000c 	andi	r2,r2,8192
    7d5c:	302b883a 	mov	r21,r6
    7d60:	10002e26 	beq	r2,zero,7e1c <__sprint_r.part.0+0xf4>
    7d64:	30800217 	ldw	r2,8(r6)
    7d68:	35800017 	ldw	r22,0(r6)
    7d6c:	10002926 	beq	r2,zero,7e14 <__sprint_r.part.0+0xec>
    7d70:	2827883a 	mov	r19,r5
    7d74:	2029883a 	mov	r20,r4
    7d78:	b5c00104 	addi	r23,r22,4
    7d7c:	04bfffc4 	movi	r18,-1
    7d80:	bc400017 	ldw	r17,0(r23)
    7d84:	b4000017 	ldw	r16,0(r22)
    7d88:	0039883a 	mov	fp,zero
    7d8c:	8822d0ba 	srli	r17,r17,2
    7d90:	8800031e 	bne	r17,zero,7da0 <__sprint_r.part.0+0x78>
    7d94:	00001806 	br	7df8 <__sprint_r.part.0+0xd0>
    7d98:	84000104 	addi	r16,r16,4
    7d9c:	8f001526 	beq	r17,fp,7df4 <__sprint_r.part.0+0xcc>
    7da0:	81400017 	ldw	r5,0(r16)
    7da4:	980d883a 	mov	r6,r19
    7da8:	a009883a 	mov	r4,r20
    7dac:	00098180 	call	9818 <_fputwc_r>
    7db0:	e7000044 	addi	fp,fp,1
    7db4:	14bff81e 	bne	r2,r18,7d98 <__alt_data_end+0xfffd5d98>
    7db8:	9005883a 	mov	r2,r18
    7dbc:	a8000215 	stw	zero,8(r21)
    7dc0:	a8000115 	stw	zero,4(r21)
    7dc4:	dfc00917 	ldw	ra,36(sp)
    7dc8:	df000817 	ldw	fp,32(sp)
    7dcc:	ddc00717 	ldw	r23,28(sp)
    7dd0:	dd800617 	ldw	r22,24(sp)
    7dd4:	dd400517 	ldw	r21,20(sp)
    7dd8:	dd000417 	ldw	r20,16(sp)
    7ddc:	dcc00317 	ldw	r19,12(sp)
    7de0:	dc800217 	ldw	r18,8(sp)
    7de4:	dc400117 	ldw	r17,4(sp)
    7de8:	dc000017 	ldw	r16,0(sp)
    7dec:	dec00a04 	addi	sp,sp,40
    7df0:	f800283a 	ret
    7df4:	a8800217 	ldw	r2,8(r21)
    7df8:	8c63883a 	add	r17,r17,r17
    7dfc:	8c63883a 	add	r17,r17,r17
    7e00:	1445c83a 	sub	r2,r2,r17
    7e04:	a8800215 	stw	r2,8(r21)
    7e08:	b5800204 	addi	r22,r22,8
    7e0c:	bdc00204 	addi	r23,r23,8
    7e10:	103fdb1e 	bne	r2,zero,7d80 <__alt_data_end+0xfffd5d80>
    7e14:	0005883a 	mov	r2,zero
    7e18:	003fe806 	br	7dbc <__alt_data_end+0xfffd5dbc>
    7e1c:	0004e880 	call	4e88 <__sfvwrite_r>
    7e20:	003fe606 	br	7dbc <__alt_data_end+0xfffd5dbc>

00007e24 <__sprint_r>:
    7e24:	30c00217 	ldw	r3,8(r6)
    7e28:	18000126 	beq	r3,zero,7e30 <__sprint_r+0xc>
    7e2c:	0007d281 	jmpi	7d28 <__sprint_r.part.0>
    7e30:	30000115 	stw	zero,4(r6)
    7e34:	0005883a 	mov	r2,zero
    7e38:	f800283a 	ret

00007e3c <___vfiprintf_internal_r>:
    7e3c:	deffca04 	addi	sp,sp,-216
    7e40:	dd403115 	stw	r21,196(sp)
    7e44:	dfc03515 	stw	ra,212(sp)
    7e48:	df003415 	stw	fp,208(sp)
    7e4c:	ddc03315 	stw	r23,204(sp)
    7e50:	dd803215 	stw	r22,200(sp)
    7e54:	dd003015 	stw	r20,192(sp)
    7e58:	dcc02f15 	stw	r19,188(sp)
    7e5c:	dc802e15 	stw	r18,184(sp)
    7e60:	dc402d15 	stw	r17,180(sp)
    7e64:	dc002c15 	stw	r16,176(sp)
    7e68:	d9002115 	stw	r4,132(sp)
    7e6c:	d9402015 	stw	r5,128(sp)
    7e70:	d9c02215 	stw	r7,136(sp)
    7e74:	302b883a 	mov	r21,r6
    7e78:	20000226 	beq	r4,zero,7e84 <___vfiprintf_internal_r+0x48>
    7e7c:	20800e17 	ldw	r2,56(r4)
    7e80:	1000cf26 	beq	r2,zero,81c0 <___vfiprintf_internal_r+0x384>
    7e84:	d8c02017 	ldw	r3,128(sp)
    7e88:	1880030b 	ldhu	r2,12(r3)
    7e8c:	10c8000c 	andi	r3,r2,8192
    7e90:	1800071e 	bne	r3,zero,7eb0 <___vfiprintf_internal_r+0x74>
    7e94:	d9402017 	ldw	r5,128(sp)
    7e98:	00f7ffc4 	movi	r3,-8193
    7e9c:	10880014 	ori	r2,r2,8192
    7ea0:	29001917 	ldw	r4,100(r5)
    7ea4:	2880030d 	sth	r2,12(r5)
    7ea8:	20c6703a 	and	r3,r4,r3
    7eac:	28c01915 	stw	r3,100(r5)
    7eb0:	10c0020c 	andi	r3,r2,8
    7eb4:	1800a526 	beq	r3,zero,814c <___vfiprintf_internal_r+0x310>
    7eb8:	d9002017 	ldw	r4,128(sp)
    7ebc:	20c00417 	ldw	r3,16(r4)
    7ec0:	1800a226 	beq	r3,zero,814c <___vfiprintf_internal_r+0x310>
    7ec4:	1080068c 	andi	r2,r2,26
    7ec8:	00c00284 	movi	r3,10
    7ecc:	10c0a826 	beq	r2,r3,8170 <___vfiprintf_internal_r+0x334>
    7ed0:	d9001a04 	addi	r4,sp,104
    7ed4:	d94019c4 	addi	r5,sp,103
    7ed8:	04800074 	movhi	r18,1
    7edc:	2145c83a 	sub	r2,r4,r5
    7ee0:	94904004 	addi	r18,r18,16640
    7ee4:	d9001e15 	stw	r4,120(sp)
    7ee8:	d9401f15 	stw	r5,124(sp)
    7eec:	dec01a15 	stw	sp,104(sp)
    7ef0:	d8001c15 	stw	zero,112(sp)
    7ef4:	d8001b15 	stw	zero,108(sp)
    7ef8:	d811883a 	mov	r8,sp
    7efc:	d8002615 	stw	zero,152(sp)
    7f00:	d8002415 	stw	zero,144(sp)
    7f04:	d8802815 	stw	r2,160(sp)
    7f08:	a82d883a 	mov	r22,r21
    7f0c:	b0800007 	ldb	r2,0(r22)
    7f10:	10040d26 	beq	r2,zero,8f48 <___vfiprintf_internal_r+0x110c>
    7f14:	00c00944 	movi	r3,37
    7f18:	b029883a 	mov	r20,r22
    7f1c:	10c0021e 	bne	r2,r3,7f28 <___vfiprintf_internal_r+0xec>
    7f20:	00001606 	br	7f7c <___vfiprintf_internal_r+0x140>
    7f24:	10c00326 	beq	r2,r3,7f34 <___vfiprintf_internal_r+0xf8>
    7f28:	a5000044 	addi	r20,r20,1
    7f2c:	a0800007 	ldb	r2,0(r20)
    7f30:	103ffc1e 	bne	r2,zero,7f24 <__alt_data_end+0xfffd5f24>
    7f34:	a5a1c83a 	sub	r16,r20,r22
    7f38:	80001026 	beq	r16,zero,7f7c <___vfiprintf_internal_r+0x140>
    7f3c:	d8c01c17 	ldw	r3,112(sp)
    7f40:	d8801b17 	ldw	r2,108(sp)
    7f44:	45800015 	stw	r22,0(r8)
    7f48:	80c7883a 	add	r3,r16,r3
    7f4c:	10800044 	addi	r2,r2,1
    7f50:	44000115 	stw	r16,4(r8)
    7f54:	d8c01c15 	stw	r3,112(sp)
    7f58:	d8801b15 	stw	r2,108(sp)
    7f5c:	010001c4 	movi	r4,7
    7f60:	2080750e 	bge	r4,r2,8138 <___vfiprintf_internal_r+0x2fc>
    7f64:	1803951e 	bne	r3,zero,8dbc <___vfiprintf_internal_r+0xf80>
    7f68:	d8c02417 	ldw	r3,144(sp)
    7f6c:	d8001b15 	stw	zero,108(sp)
    7f70:	d811883a 	mov	r8,sp
    7f74:	1c07883a 	add	r3,r3,r16
    7f78:	d8c02415 	stw	r3,144(sp)
    7f7c:	a0800007 	ldb	r2,0(r20)
    7f80:	1002e026 	beq	r2,zero,8b04 <___vfiprintf_internal_r+0xcc8>
    7f84:	a5800044 	addi	r22,r20,1
    7f88:	a0c00047 	ldb	r3,1(r20)
    7f8c:	d8001d85 	stb	zero,118(sp)
    7f90:	0027883a 	mov	r19,zero
    7f94:	d8002305 	stb	zero,140(sp)
    7f98:	043fffc4 	movi	r16,-1
    7f9c:	d8002515 	stw	zero,148(sp)
    7fa0:	0023883a 	mov	r17,zero
    7fa4:	05001604 	movi	r20,88
    7fa8:	05400244 	movi	r21,9
    7fac:	402f883a 	mov	r23,r8
    7fb0:	b5800044 	addi	r22,r22,1
    7fb4:	18bff804 	addi	r2,r3,-32
    7fb8:	a0827736 	bltu	r20,r2,8998 <___vfiprintf_internal_r+0xb5c>
    7fbc:	100490ba 	slli	r2,r2,2
    7fc0:	01000034 	movhi	r4,0
    7fc4:	211ff504 	addi	r4,r4,32724
    7fc8:	1105883a 	add	r2,r2,r4
    7fcc:	10800017 	ldw	r2,0(r2)
    7fd0:	1000683a 	jmp	r2
    7fd4:	00008698 	cmpnei	zero,zero,538
    7fd8:	00008998 	cmpnei	zero,zero,550
    7fdc:	00008998 	cmpnei	zero,zero,550
    7fe0:	000086b4 	movhi	zero,538
    7fe4:	00008998 	cmpnei	zero,zero,550
    7fe8:	00008998 	cmpnei	zero,zero,550
    7fec:	00008998 	cmpnei	zero,zero,550
    7ff0:	00008998 	cmpnei	zero,zero,550
    7ff4:	00008998 	cmpnei	zero,zero,550
    7ff8:	00008998 	cmpnei	zero,zero,550
    7ffc:	000088bc 	xorhi	zero,zero,546
    8000:	000088e0 	cmpeqi	zero,zero,547
    8004:	00008998 	cmpnei	zero,zero,550
    8008:	000081d8 	cmpnei	zero,zero,519
    800c:	000088f4 	movhi	zero,547
    8010:	00008998 	cmpnei	zero,zero,550
    8014:	000086c0 	call	86c <___vfprintf_internal_r+0x228>
    8018:	000086cc 	andi	zero,zero,539
    801c:	000086cc 	andi	zero,zero,539
    8020:	000086cc 	andi	zero,zero,539
    8024:	000086cc 	andi	zero,zero,539
    8028:	000086cc 	andi	zero,zero,539
    802c:	000086cc 	andi	zero,zero,539
    8030:	000086cc 	andi	zero,zero,539
    8034:	000086cc 	andi	zero,zero,539
    8038:	000086cc 	andi	zero,zero,539
    803c:	00008998 	cmpnei	zero,zero,550
    8040:	00008998 	cmpnei	zero,zero,550
    8044:	00008998 	cmpnei	zero,zero,550
    8048:	00008998 	cmpnei	zero,zero,550
    804c:	00008998 	cmpnei	zero,zero,550
    8050:	00008998 	cmpnei	zero,zero,550
    8054:	00008998 	cmpnei	zero,zero,550
    8058:	00008998 	cmpnei	zero,zero,550
    805c:	00008998 	cmpnei	zero,zero,550
    8060:	00008998 	cmpnei	zero,zero,550
    8064:	0000870c 	andi	zero,zero,540
    8068:	00008998 	cmpnei	zero,zero,550
    806c:	00008998 	cmpnei	zero,zero,550
    8070:	00008998 	cmpnei	zero,zero,550
    8074:	00008998 	cmpnei	zero,zero,550
    8078:	00008998 	cmpnei	zero,zero,550
    807c:	00008998 	cmpnei	zero,zero,550
    8080:	00008998 	cmpnei	zero,zero,550
    8084:	00008998 	cmpnei	zero,zero,550
    8088:	00008998 	cmpnei	zero,zero,550
    808c:	00008998 	cmpnei	zero,zero,550
    8090:	00008748 	cmpgei	zero,zero,541
    8094:	00008998 	cmpnei	zero,zero,550
    8098:	00008998 	cmpnei	zero,zero,550
    809c:	00008998 	cmpnei	zero,zero,550
    80a0:	00008998 	cmpnei	zero,zero,550
    80a4:	00008998 	cmpnei	zero,zero,550
    80a8:	000087a4 	muli	zero,zero,542
    80ac:	00008998 	cmpnei	zero,zero,550
    80b0:	00008998 	cmpnei	zero,zero,550
    80b4:	00008818 	cmpnei	zero,zero,544
    80b8:	00008998 	cmpnei	zero,zero,550
    80bc:	00008998 	cmpnei	zero,zero,550
    80c0:	00008998 	cmpnei	zero,zero,550
    80c4:	00008998 	cmpnei	zero,zero,550
    80c8:	00008998 	cmpnei	zero,zero,550
    80cc:	00008998 	cmpnei	zero,zero,550
    80d0:	00008998 	cmpnei	zero,zero,550
    80d4:	00008998 	cmpnei	zero,zero,550
    80d8:	00008998 	cmpnei	zero,zero,550
    80dc:	00008998 	cmpnei	zero,zero,550
    80e0:	000085c0 	call	85c <___vfprintf_internal_r+0x218>
    80e4:	000085f0 	cmpltui	zero,zero,535
    80e8:	00008998 	cmpnei	zero,zero,550
    80ec:	00008998 	cmpnei	zero,zero,550
    80f0:	00008998 	cmpnei	zero,zero,550
    80f4:	00008940 	call	894 <___vfprintf_internal_r+0x250>
    80f8:	000085f0 	cmpltui	zero,zero,535
    80fc:	00008998 	cmpnei	zero,zero,550
    8100:	00008998 	cmpnei	zero,zero,550
    8104:	00008498 	cmpnei	zero,zero,530
    8108:	00008998 	cmpnei	zero,zero,550
    810c:	000084ac 	andhi	zero,zero,530
    8110:	000084e4 	muli	zero,zero,531
    8114:	000081e4 	muli	zero,zero,519
    8118:	0000848c 	andi	zero,zero,530
    811c:	00008998 	cmpnei	zero,zero,550
    8120:	00008858 	cmpnei	zero,zero,545
    8124:	00008998 	cmpnei	zero,zero,550
    8128:	000088a4 	muli	zero,zero,546
    812c:	00008998 	cmpnei	zero,zero,550
    8130:	00008998 	cmpnei	zero,zero,550
    8134:	00008568 	cmpgeui	zero,zero,533
    8138:	42000204 	addi	r8,r8,8
    813c:	d8c02417 	ldw	r3,144(sp)
    8140:	1c07883a 	add	r3,r3,r16
    8144:	d8c02415 	stw	r3,144(sp)
    8148:	003f8c06 	br	7f7c <__alt_data_end+0xfffd5f7c>
    814c:	d9402017 	ldw	r5,128(sp)
    8150:	d9002117 	ldw	r4,132(sp)
    8154:	00029f80 	call	29f8 <__swsetup_r>
    8158:	1003c11e 	bne	r2,zero,9060 <___vfiprintf_internal_r+0x1224>
    815c:	d9402017 	ldw	r5,128(sp)
    8160:	00c00284 	movi	r3,10
    8164:	2880030b 	ldhu	r2,12(r5)
    8168:	1080068c 	andi	r2,r2,26
    816c:	10ff581e 	bne	r2,r3,7ed0 <__alt_data_end+0xfffd5ed0>
    8170:	d8c02017 	ldw	r3,128(sp)
    8174:	1880038f 	ldh	r2,14(r3)
    8178:	103f5516 	blt	r2,zero,7ed0 <__alt_data_end+0xfffd5ed0>
    817c:	d9c02217 	ldw	r7,136(sp)
    8180:	d9002117 	ldw	r4,132(sp)
    8184:	a80d883a 	mov	r6,r21
    8188:	180b883a 	mov	r5,r3
    818c:	00093640 	call	9364 <__sbprintf>
    8190:	dfc03517 	ldw	ra,212(sp)
    8194:	df003417 	ldw	fp,208(sp)
    8198:	ddc03317 	ldw	r23,204(sp)
    819c:	dd803217 	ldw	r22,200(sp)
    81a0:	dd403117 	ldw	r21,196(sp)
    81a4:	dd003017 	ldw	r20,192(sp)
    81a8:	dcc02f17 	ldw	r19,188(sp)
    81ac:	dc802e17 	ldw	r18,184(sp)
    81b0:	dc402d17 	ldw	r17,180(sp)
    81b4:	dc002c17 	ldw	r16,176(sp)
    81b8:	dec03604 	addi	sp,sp,216
    81bc:	f800283a 	ret
    81c0:	0004a040 	call	4a04 <__sinit>
    81c4:	003f2f06 	br	7e84 <__alt_data_end+0xfffd5e84>
    81c8:	d8c02517 	ldw	r3,148(sp)
    81cc:	d8802215 	stw	r2,136(sp)
    81d0:	00c7c83a 	sub	r3,zero,r3
    81d4:	d8c02515 	stw	r3,148(sp)
    81d8:	8c400114 	ori	r17,r17,4
    81dc:	b0c00007 	ldb	r3,0(r22)
    81e0:	003f7306 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    81e4:	00800c04 	movi	r2,48
    81e8:	d9402217 	ldw	r5,136(sp)
    81ec:	d8801d05 	stb	r2,116(sp)
    81f0:	00801e04 	movi	r2,120
    81f4:	d8801d45 	stb	r2,117(sp)
    81f8:	d8001d85 	stb	zero,118(sp)
    81fc:	b811883a 	mov	r8,r23
    8200:	28c00104 	addi	r3,r5,4
    8204:	2cc00017 	ldw	r19,0(r5)
    8208:	0029883a 	mov	r20,zero
    820c:	88800094 	ori	r2,r17,2
    8210:	80032516 	blt	r16,zero,8ea8 <___vfiprintf_internal_r+0x106c>
    8214:	00bfdfc4 	movi	r2,-129
    8218:	88a2703a 	and	r17,r17,r2
    821c:	d8c02215 	stw	r3,136(sp)
    8220:	8c400094 	ori	r17,r17,2
    8224:	98032a1e 	bne	r19,zero,8ed0 <___vfiprintf_internal_r+0x1094>
    8228:	00800074 	movhi	r2,1
    822c:	108fdf04 	addi	r2,r2,16252
    8230:	d8802615 	stw	r2,152(sp)
    8234:	002b883a 	mov	r21,zero
    8238:	8001741e 	bne	r16,zero,880c <___vfiprintf_internal_r+0x9d0>
    823c:	0021883a 	mov	r16,zero
    8240:	0029883a 	mov	r20,zero
    8244:	ddc01a04 	addi	r23,sp,104
    8248:	8027883a 	mov	r19,r16
    824c:	8500010e 	bge	r16,r20,8254 <___vfiprintf_internal_r+0x418>
    8250:	a027883a 	mov	r19,r20
    8254:	ad403fcc 	andi	r21,r21,255
    8258:	ad40201c 	xori	r21,r21,128
    825c:	ad7fe004 	addi	r21,r21,-128
    8260:	a8000126 	beq	r21,zero,8268 <___vfiprintf_internal_r+0x42c>
    8264:	9cc00044 	addi	r19,r19,1
    8268:	89c0008c 	andi	r7,r17,2
    826c:	38000126 	beq	r7,zero,8274 <___vfiprintf_internal_r+0x438>
    8270:	9cc00084 	addi	r19,r19,2
    8274:	88c0210c 	andi	r3,r17,132
    8278:	1801dd1e 	bne	r3,zero,89f0 <___vfiprintf_internal_r+0xbb4>
    827c:	d9402517 	ldw	r5,148(sp)
    8280:	2cebc83a 	sub	r21,r5,r19
    8284:	0541da0e 	bge	zero,r21,89f0 <___vfiprintf_internal_r+0xbb4>
    8288:	07000404 	movi	fp,16
    828c:	d8801c17 	ldw	r2,112(sp)
    8290:	e543be0e 	bge	fp,r21,918c <___vfiprintf_internal_r+0x1350>
    8294:	01400074 	movhi	r5,1
    8298:	29504404 	addi	r5,r5,16656
    829c:	dc002715 	stw	r16,156(sp)
    82a0:	d9801b17 	ldw	r6,108(sp)
    82a4:	a821883a 	mov	r16,r21
    82a8:	d9402315 	stw	r5,140(sp)
    82ac:	028001c4 	movi	r10,7
    82b0:	d9c02915 	stw	r7,164(sp)
    82b4:	182b883a 	mov	r21,r3
    82b8:	00000506 	br	82d0 <___vfiprintf_internal_r+0x494>
    82bc:	31000084 	addi	r4,r6,2
    82c0:	42000204 	addi	r8,r8,8
    82c4:	180d883a 	mov	r6,r3
    82c8:	843ffc04 	addi	r16,r16,-16
    82cc:	e4000f0e 	bge	fp,r16,830c <___vfiprintf_internal_r+0x4d0>
    82d0:	01000074 	movhi	r4,1
    82d4:	10800404 	addi	r2,r2,16
    82d8:	30c00044 	addi	r3,r6,1
    82dc:	21104404 	addi	r4,r4,16656
    82e0:	41000015 	stw	r4,0(r8)
    82e4:	47000115 	stw	fp,4(r8)
    82e8:	d8801c15 	stw	r2,112(sp)
    82ec:	d8c01b15 	stw	r3,108(sp)
    82f0:	50fff20e 	bge	r10,r3,82bc <__alt_data_end+0xfffd62bc>
    82f4:	1001b21e 	bne	r2,zero,89c0 <___vfiprintf_internal_r+0xb84>
    82f8:	843ffc04 	addi	r16,r16,-16
    82fc:	000d883a 	mov	r6,zero
    8300:	01000044 	movi	r4,1
    8304:	d811883a 	mov	r8,sp
    8308:	e43ff116 	blt	fp,r16,82d0 <__alt_data_end+0xfffd62d0>
    830c:	a807883a 	mov	r3,r21
    8310:	d9c02917 	ldw	r7,164(sp)
    8314:	802b883a 	mov	r21,r16
    8318:	dc002717 	ldw	r16,156(sp)
    831c:	d9402317 	ldw	r5,140(sp)
    8320:	a885883a 	add	r2,r21,r2
    8324:	45400115 	stw	r21,4(r8)
    8328:	41400015 	stw	r5,0(r8)
    832c:	d8801c15 	stw	r2,112(sp)
    8330:	d9001b15 	stw	r4,108(sp)
    8334:	014001c4 	movi	r5,7
    8338:	29026216 	blt	r5,r4,8cc4 <___vfiprintf_internal_r+0xe88>
    833c:	d9801d87 	ldb	r6,118(sp)
    8340:	42000204 	addi	r8,r8,8
    8344:	21400044 	addi	r5,r4,1
    8348:	3001ae1e 	bne	r6,zero,8a04 <___vfiprintf_internal_r+0xbc8>
    834c:	3801bb26 	beq	r7,zero,8a3c <___vfiprintf_internal_r+0xc00>
    8350:	d9001d04 	addi	r4,sp,116
    8354:	10800084 	addi	r2,r2,2
    8358:	41000015 	stw	r4,0(r8)
    835c:	01000084 	movi	r4,2
    8360:	41000115 	stw	r4,4(r8)
    8364:	d8801c15 	stw	r2,112(sp)
    8368:	d9401b15 	stw	r5,108(sp)
    836c:	010001c4 	movi	r4,7
    8370:	2142680e 	bge	r4,r5,8d14 <___vfiprintf_internal_r+0xed8>
    8374:	1002b11e 	bne	r2,zero,8e3c <___vfiprintf_internal_r+0x1000>
    8378:	01802004 	movi	r6,128
    837c:	01400044 	movi	r5,1
    8380:	0009883a 	mov	r4,zero
    8384:	d811883a 	mov	r8,sp
    8388:	1981ae1e 	bne	r3,r6,8a44 <___vfiprintf_internal_r+0xc08>
    838c:	d8c02517 	ldw	r3,148(sp)
    8390:	1cf9c83a 	sub	fp,r3,r19
    8394:	0701ab0e 	bge	zero,fp,8a44 <___vfiprintf_internal_r+0xc08>
    8398:	05400404 	movi	r21,16
    839c:	af03a90e 	bge	r21,fp,9244 <___vfiprintf_internal_r+0x1408>
    83a0:	01400074 	movhi	r5,1
    83a4:	29504004 	addi	r5,r5,16640
    83a8:	d9402315 	stw	r5,140(sp)
    83ac:	01c001c4 	movi	r7,7
    83b0:	00000506 	br	83c8 <___vfiprintf_internal_r+0x58c>
    83b4:	21800084 	addi	r6,r4,2
    83b8:	42000204 	addi	r8,r8,8
    83bc:	1809883a 	mov	r4,r3
    83c0:	e73ffc04 	addi	fp,fp,-16
    83c4:	af000d0e 	bge	r21,fp,83fc <___vfiprintf_internal_r+0x5c0>
    83c8:	10800404 	addi	r2,r2,16
    83cc:	20c00044 	addi	r3,r4,1
    83d0:	44800015 	stw	r18,0(r8)
    83d4:	45400115 	stw	r21,4(r8)
    83d8:	d8801c15 	stw	r2,112(sp)
    83dc:	d8c01b15 	stw	r3,108(sp)
    83e0:	38fff40e 	bge	r7,r3,83b4 <__alt_data_end+0xfffd63b4>
    83e4:	10022b1e 	bne	r2,zero,8c94 <___vfiprintf_internal_r+0xe58>
    83e8:	e73ffc04 	addi	fp,fp,-16
    83ec:	01800044 	movi	r6,1
    83f0:	0009883a 	mov	r4,zero
    83f4:	d811883a 	mov	r8,sp
    83f8:	af3ff316 	blt	r21,fp,83c8 <__alt_data_end+0xfffd63c8>
    83fc:	d8c02317 	ldw	r3,140(sp)
    8400:	1705883a 	add	r2,r2,fp
    8404:	47000115 	stw	fp,4(r8)
    8408:	40c00015 	stw	r3,0(r8)
    840c:	d8801c15 	stw	r2,112(sp)
    8410:	d9801b15 	stw	r6,108(sp)
    8414:	00c001c4 	movi	r3,7
    8418:	19829416 	blt	r3,r6,8e6c <___vfiprintf_internal_r+0x1030>
    841c:	8521c83a 	sub	r16,r16,r20
    8420:	42000204 	addi	r8,r8,8
    8424:	31400044 	addi	r5,r6,1
    8428:	3009883a 	mov	r4,r6
    842c:	04018716 	blt	zero,r16,8a4c <___vfiprintf_internal_r+0xc10>
    8430:	a085883a 	add	r2,r20,r2
    8434:	45c00015 	stw	r23,0(r8)
    8438:	45000115 	stw	r20,4(r8)
    843c:	d8801c15 	stw	r2,112(sp)
    8440:	d9401b15 	stw	r5,108(sp)
    8444:	00c001c4 	movi	r3,7
    8448:	1941c20e 	bge	r3,r5,8b54 <___vfiprintf_internal_r+0xd18>
    844c:	1002531e 	bne	r2,zero,8d9c <___vfiprintf_internal_r+0xf60>
    8450:	d8001b15 	stw	zero,108(sp)
    8454:	8c40010c 	andi	r17,r17,4
    8458:	88023226 	beq	r17,zero,8d24 <___vfiprintf_internal_r+0xee8>
    845c:	d9002517 	ldw	r4,148(sp)
    8460:	24e3c83a 	sub	r17,r4,r19
    8464:	04432916 	blt	zero,r17,910c <___vfiprintf_internal_r+0x12d0>
    8468:	d8802517 	ldw	r2,148(sp)
    846c:	14c0010e 	bge	r2,r19,8474 <___vfiprintf_internal_r+0x638>
    8470:	9805883a 	mov	r2,r19
    8474:	d8c02417 	ldw	r3,144(sp)
    8478:	1887883a 	add	r3,r3,r2
    847c:	d8c02415 	stw	r3,144(sp)
    8480:	d8001b15 	stw	zero,108(sp)
    8484:	d811883a 	mov	r8,sp
    8488:	003ea006 	br	7f0c <__alt_data_end+0xfffd5f0c>
    848c:	8c400814 	ori	r17,r17,32
    8490:	b0c00007 	ldb	r3,0(r22)
    8494:	003ec606 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    8498:	b0c00007 	ldb	r3,0(r22)
    849c:	00801b04 	movi	r2,108
    84a0:	18832026 	beq	r3,r2,9124 <___vfiprintf_internal_r+0x12e8>
    84a4:	8c400414 	ori	r17,r17,16
    84a8:	003ec106 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    84ac:	9cc03fcc 	andi	r19,r19,255
    84b0:	b811883a 	mov	r8,r23
    84b4:	9803981e 	bne	r19,zero,9318 <___vfiprintf_internal_r+0x14dc>
    84b8:	8880080c 	andi	r2,r17,32
    84bc:	1002be26 	beq	r2,zero,8fb8 <___vfiprintf_internal_r+0x117c>
    84c0:	d9002217 	ldw	r4,136(sp)
    84c4:	d9402417 	ldw	r5,144(sp)
    84c8:	20800017 	ldw	r2,0(r4)
    84cc:	2807d7fa 	srai	r3,r5,31
    84d0:	21000104 	addi	r4,r4,4
    84d4:	d9002215 	stw	r4,136(sp)
    84d8:	11400015 	stw	r5,0(r2)
    84dc:	10c00115 	stw	r3,4(r2)
    84e0:	003e8a06 	br	7f0c <__alt_data_end+0xfffd5f0c>
    84e4:	9cc03fcc 	andi	r19,r19,255
    84e8:	b811883a 	mov	r8,r23
    84ec:	9803871e 	bne	r19,zero,930c <___vfiprintf_internal_r+0x14d0>
    84f0:	8880080c 	andi	r2,r17,32
    84f4:	10009a26 	beq	r2,zero,8760 <___vfiprintf_internal_r+0x924>
    84f8:	d9002217 	ldw	r4,136(sp)
    84fc:	d8001d85 	stb	zero,118(sp)
    8500:	20800204 	addi	r2,r4,8
    8504:	24c00017 	ldw	r19,0(r4)
    8508:	25000117 	ldw	r20,4(r4)
    850c:	8002a416 	blt	r16,zero,8fa0 <___vfiprintf_internal_r+0x1164>
    8510:	013fdfc4 	movi	r4,-129
    8514:	9d06b03a 	or	r3,r19,r20
    8518:	d8802215 	stw	r2,136(sp)
    851c:	8922703a 	and	r17,r17,r4
    8520:	18009b26 	beq	r3,zero,8790 <___vfiprintf_internal_r+0x954>
    8524:	002b883a 	mov	r21,zero
    8528:	ddc01a04 	addi	r23,sp,104
    852c:	9806d0fa 	srli	r3,r19,3
    8530:	a008977a 	slli	r4,r20,29
    8534:	a028d0fa 	srli	r20,r20,3
    8538:	9cc001cc 	andi	r19,r19,7
    853c:	98800c04 	addi	r2,r19,48
    8540:	bdffffc4 	addi	r23,r23,-1
    8544:	20e6b03a 	or	r19,r4,r3
    8548:	b8800005 	stb	r2,0(r23)
    854c:	9d06b03a 	or	r3,r19,r20
    8550:	183ff61e 	bne	r3,zero,852c <__alt_data_end+0xfffd652c>
    8554:	88c0004c 	andi	r3,r17,1
    8558:	18021f1e 	bne	r3,zero,8dd8 <___vfiprintf_internal_r+0xf9c>
    855c:	d9401e17 	ldw	r5,120(sp)
    8560:	2de9c83a 	sub	r20,r5,r23
    8564:	003f3806 	br	8248 <__alt_data_end+0xfffd6248>
    8568:	9cc03fcc 	andi	r19,r19,255
    856c:	b811883a 	mov	r8,r23
    8570:	98034f1e 	bne	r19,zero,92b0 <___vfiprintf_internal_r+0x1474>
    8574:	00800074 	movhi	r2,1
    8578:	108fdf04 	addi	r2,r2,16252
    857c:	d8802615 	stw	r2,152(sp)
    8580:	8880080c 	andi	r2,r17,32
    8584:	1000ac26 	beq	r2,zero,8838 <___vfiprintf_internal_r+0x9fc>
    8588:	d9002217 	ldw	r4,136(sp)
    858c:	24c00017 	ldw	r19,0(r4)
    8590:	25000117 	ldw	r20,4(r4)
    8594:	21000204 	addi	r4,r4,8
    8598:	d9002215 	stw	r4,136(sp)
    859c:	8880004c 	andi	r2,r17,1
    85a0:	1001e726 	beq	r2,zero,8d40 <___vfiprintf_internal_r+0xf04>
    85a4:	9d04b03a 	or	r2,r19,r20
    85a8:	10025c1e 	bne	r2,zero,8f1c <___vfiprintf_internal_r+0x10e0>
    85ac:	d8001d85 	stb	zero,118(sp)
    85b0:	80024416 	blt	r16,zero,8ec4 <___vfiprintf_internal_r+0x1088>
    85b4:	00bfdfc4 	movi	r2,-129
    85b8:	88a2703a 	and	r17,r17,r2
    85bc:	003f1d06 	br	8234 <__alt_data_end+0xfffd6234>
    85c0:	d8c02217 	ldw	r3,136(sp)
    85c4:	04c00044 	movi	r19,1
    85c8:	b811883a 	mov	r8,r23
    85cc:	18800017 	ldw	r2,0(r3)
    85d0:	18c00104 	addi	r3,r3,4
    85d4:	d8001d85 	stb	zero,118(sp)
    85d8:	d8801005 	stb	r2,64(sp)
    85dc:	d8c02215 	stw	r3,136(sp)
    85e0:	9829883a 	mov	r20,r19
    85e4:	ddc01004 	addi	r23,sp,64
    85e8:	0021883a 	mov	r16,zero
    85ec:	003f1e06 	br	8268 <__alt_data_end+0xfffd6268>
    85f0:	9cc03fcc 	andi	r19,r19,255
    85f4:	b811883a 	mov	r8,r23
    85f8:	9803331e 	bne	r19,zero,92c8 <___vfiprintf_internal_r+0x148c>
    85fc:	8880080c 	andi	r2,r17,32
    8600:	10004826 	beq	r2,zero,8724 <___vfiprintf_internal_r+0x8e8>
    8604:	d9002217 	ldw	r4,136(sp)
    8608:	20800117 	ldw	r2,4(r4)
    860c:	24c00017 	ldw	r19,0(r4)
    8610:	21000204 	addi	r4,r4,8
    8614:	d9002215 	stw	r4,136(sp)
    8618:	1029883a 	mov	r20,r2
    861c:	10024c16 	blt	r2,zero,8f50 <___vfiprintf_internal_r+0x1114>
    8620:	dd401d83 	ldbu	r21,118(sp)
    8624:	80007116 	blt	r16,zero,87ec <___vfiprintf_internal_r+0x9b0>
    8628:	00ffdfc4 	movi	r3,-129
    862c:	9d04b03a 	or	r2,r19,r20
    8630:	88e2703a 	and	r17,r17,r3
    8634:	1000d126 	beq	r2,zero,897c <___vfiprintf_internal_r+0xb40>
    8638:	a0023526 	beq	r20,zero,8f10 <___vfiprintf_internal_r+0x10d4>
    863c:	ddc01a04 	addi	r23,sp,104
    8640:	4039883a 	mov	fp,r8
    8644:	9809883a 	mov	r4,r19
    8648:	a00b883a 	mov	r5,r20
    864c:	01800284 	movi	r6,10
    8650:	000f883a 	mov	r7,zero
    8654:	000a3680 	call	a368 <__umoddi3>
    8658:	10800c04 	addi	r2,r2,48
    865c:	bdffffc4 	addi	r23,r23,-1
    8660:	9809883a 	mov	r4,r19
    8664:	a00b883a 	mov	r5,r20
    8668:	b8800005 	stb	r2,0(r23)
    866c:	01800284 	movi	r6,10
    8670:	000f883a 	mov	r7,zero
    8674:	0009d6c0 	call	9d6c <__udivdi3>
    8678:	1027883a 	mov	r19,r2
    867c:	10c4b03a 	or	r2,r2,r3
    8680:	1829883a 	mov	r20,r3
    8684:	103fef1e 	bne	r2,zero,8644 <__alt_data_end+0xfffd6644>
    8688:	d9001e17 	ldw	r4,120(sp)
    868c:	e011883a 	mov	r8,fp
    8690:	25e9c83a 	sub	r20,r4,r23
    8694:	003eec06 	br	8248 <__alt_data_end+0xfffd6248>
    8698:	d8802307 	ldb	r2,140(sp)
    869c:	1002361e 	bne	r2,zero,8f78 <___vfiprintf_internal_r+0x113c>
    86a0:	00c00804 	movi	r3,32
    86a4:	d8c02305 	stb	r3,140(sp)
    86a8:	04c00044 	movi	r19,1
    86ac:	b0c00007 	ldb	r3,0(r22)
    86b0:	003e3f06 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    86b4:	8c400054 	ori	r17,r17,1
    86b8:	b0c00007 	ldb	r3,0(r22)
    86bc:	003e3c06 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    86c0:	8c402014 	ori	r17,r17,128
    86c4:	b0c00007 	ldb	r3,0(r22)
    86c8:	003e3906 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    86cc:	dc002715 	stw	r16,156(sp)
    86d0:	d8002515 	stw	zero,148(sp)
    86d4:	1f3ff404 	addi	fp,r3,-48
    86d8:	0009883a 	mov	r4,zero
    86dc:	b021883a 	mov	r16,r22
    86e0:	01400284 	movi	r5,10
    86e4:	000aae00 	call	aae0 <__mulsi3>
    86e8:	80c00007 	ldb	r3,0(r16)
    86ec:	e089883a 	add	r4,fp,r2
    86f0:	b5800044 	addi	r22,r22,1
    86f4:	1f3ff404 	addi	fp,r3,-48
    86f8:	b021883a 	mov	r16,r22
    86fc:	af3ff82e 	bgeu	r21,fp,86e0 <__alt_data_end+0xfffd66e0>
    8700:	d9002515 	stw	r4,148(sp)
    8704:	dc002717 	ldw	r16,156(sp)
    8708:	003e2a06 	br	7fb4 <__alt_data_end+0xfffd5fb4>
    870c:	9cc03fcc 	andi	r19,r19,255
    8710:	b811883a 	mov	r8,r23
    8714:	9802e91e 	bne	r19,zero,92bc <___vfiprintf_internal_r+0x1480>
    8718:	8c400414 	ori	r17,r17,16
    871c:	8880080c 	andi	r2,r17,32
    8720:	103fb81e 	bne	r2,zero,8604 <__alt_data_end+0xfffd6604>
    8724:	8880040c 	andi	r2,r17,16
    8728:	10022e26 	beq	r2,zero,8fe4 <___vfiprintf_internal_r+0x11a8>
    872c:	d9402217 	ldw	r5,136(sp)
    8730:	2cc00017 	ldw	r19,0(r5)
    8734:	29400104 	addi	r5,r5,4
    8738:	d9402215 	stw	r5,136(sp)
    873c:	9829d7fa 	srai	r20,r19,31
    8740:	a005883a 	mov	r2,r20
    8744:	003fb506 	br	861c <__alt_data_end+0xfffd661c>
    8748:	9cc03fcc 	andi	r19,r19,255
    874c:	b811883a 	mov	r8,r23
    8750:	9802fa1e 	bne	r19,zero,933c <___vfiprintf_internal_r+0x1500>
    8754:	8c400414 	ori	r17,r17,16
    8758:	8880080c 	andi	r2,r17,32
    875c:	103f661e 	bne	r2,zero,84f8 <__alt_data_end+0xfffd64f8>
    8760:	8880040c 	andi	r2,r17,16
    8764:	10020626 	beq	r2,zero,8f80 <___vfiprintf_internal_r+0x1144>
    8768:	d9402217 	ldw	r5,136(sp)
    876c:	d8001d85 	stb	zero,118(sp)
    8770:	0029883a 	mov	r20,zero
    8774:	28800104 	addi	r2,r5,4
    8778:	2cc00017 	ldw	r19,0(r5)
    877c:	80020816 	blt	r16,zero,8fa0 <___vfiprintf_internal_r+0x1164>
    8780:	00ffdfc4 	movi	r3,-129
    8784:	d8802215 	stw	r2,136(sp)
    8788:	88e2703a 	and	r17,r17,r3
    878c:	983f651e 	bne	r19,zero,8524 <__alt_data_end+0xfffd6524>
    8790:	002b883a 	mov	r21,zero
    8794:	8002cf26 	beq	r16,zero,92d4 <___vfiprintf_internal_r+0x1498>
    8798:	0027883a 	mov	r19,zero
    879c:	0029883a 	mov	r20,zero
    87a0:	003f6106 	br	8528 <__alt_data_end+0xfffd6528>
    87a4:	9cc03fcc 	andi	r19,r19,255
    87a8:	b811883a 	mov	r8,r23
    87ac:	9802e01e 	bne	r19,zero,9330 <___vfiprintf_internal_r+0x14f4>
    87b0:	8c400414 	ori	r17,r17,16
    87b4:	8880080c 	andi	r2,r17,32
    87b8:	1000641e 	bne	r2,zero,894c <___vfiprintf_internal_r+0xb10>
    87bc:	8880040c 	andi	r2,r17,16
    87c0:	1001c81e 	bne	r2,zero,8ee4 <___vfiprintf_internal_r+0x10a8>
    87c4:	8880100c 	andi	r2,r17,64
    87c8:	d8001d85 	stb	zero,118(sp)
    87cc:	1002281e 	bne	r2,zero,9070 <___vfiprintf_internal_r+0x1234>
    87d0:	d9002217 	ldw	r4,136(sp)
    87d4:	0029883a 	mov	r20,zero
    87d8:	20800104 	addi	r2,r4,4
    87dc:	24c00017 	ldw	r19,0(r4)
    87e0:	8001c60e 	bge	r16,zero,8efc <___vfiprintf_internal_r+0x10c0>
    87e4:	d8802215 	stw	r2,136(sp)
    87e8:	002b883a 	mov	r21,zero
    87ec:	9d04b03a 	or	r2,r19,r20
    87f0:	103f911e 	bne	r2,zero,8638 <__alt_data_end+0xfffd6638>
    87f4:	00800044 	movi	r2,1
    87f8:	10803fcc 	andi	r2,r2,255
    87fc:	00c00044 	movi	r3,1
    8800:	10c05f26 	beq	r2,r3,8980 <___vfiprintf_internal_r+0xb44>
    8804:	00c00084 	movi	r3,2
    8808:	10ffe31e 	bne	r2,r3,8798 <__alt_data_end+0xfffd6798>
    880c:	0027883a 	mov	r19,zero
    8810:	0029883a 	mov	r20,zero
    8814:	00015106 	br	8d5c <___vfiprintf_internal_r+0xf20>
    8818:	9cc03fcc 	andi	r19,r19,255
    881c:	b811883a 	mov	r8,r23
    8820:	9802c01e 	bne	r19,zero,9324 <___vfiprintf_internal_r+0x14e8>
    8824:	01400074 	movhi	r5,1
    8828:	294fda04 	addi	r5,r5,16232
    882c:	d9402615 	stw	r5,152(sp)
    8830:	8880080c 	andi	r2,r17,32
    8834:	103f541e 	bne	r2,zero,8588 <__alt_data_end+0xfffd6588>
    8838:	8880040c 	andi	r2,r17,16
    883c:	1001f226 	beq	r2,zero,9008 <___vfiprintf_internal_r+0x11cc>
    8840:	d9402217 	ldw	r5,136(sp)
    8844:	0029883a 	mov	r20,zero
    8848:	2cc00017 	ldw	r19,0(r5)
    884c:	29400104 	addi	r5,r5,4
    8850:	d9402215 	stw	r5,136(sp)
    8854:	003f5106 	br	859c <__alt_data_end+0xfffd659c>
    8858:	d8c02217 	ldw	r3,136(sp)
    885c:	b811883a 	mov	r8,r23
    8860:	d8001d85 	stb	zero,118(sp)
    8864:	1dc00017 	ldw	r23,0(r3)
    8868:	1f000104 	addi	fp,r3,4
    886c:	b8025926 	beq	r23,zero,91d4 <___vfiprintf_internal_r+0x1398>
    8870:	80023316 	blt	r16,zero,9140 <___vfiprintf_internal_r+0x1304>
    8874:	800d883a 	mov	r6,r16
    8878:	000b883a 	mov	r5,zero
    887c:	b809883a 	mov	r4,r23
    8880:	da002a15 	stw	r8,168(sp)
    8884:	0005f7c0 	call	5f7c <memchr>
    8888:	da002a17 	ldw	r8,168(sp)
    888c:	10026826 	beq	r2,zero,9230 <___vfiprintf_internal_r+0x13f4>
    8890:	15e9c83a 	sub	r20,r2,r23
    8894:	dd401d83 	ldbu	r21,118(sp)
    8898:	df002215 	stw	fp,136(sp)
    889c:	0021883a 	mov	r16,zero
    88a0:	003e6906 	br	8248 <__alt_data_end+0xfffd6248>
    88a4:	9cc03fcc 	andi	r19,r19,255
    88a8:	b811883a 	mov	r8,r23
    88ac:	983fc126 	beq	r19,zero,87b4 <__alt_data_end+0xfffd67b4>
    88b0:	d8c02303 	ldbu	r3,140(sp)
    88b4:	d8c01d85 	stb	r3,118(sp)
    88b8:	003fbe06 	br	87b4 <__alt_data_end+0xfffd67b4>
    88bc:	d9002217 	ldw	r4,136(sp)
    88c0:	d9402217 	ldw	r5,136(sp)
    88c4:	21000017 	ldw	r4,0(r4)
    88c8:	28800104 	addi	r2,r5,4
    88cc:	d9002515 	stw	r4,148(sp)
    88d0:	203e3d16 	blt	r4,zero,81c8 <__alt_data_end+0xfffd61c8>
    88d4:	d8802215 	stw	r2,136(sp)
    88d8:	b0c00007 	ldb	r3,0(r22)
    88dc:	003db406 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    88e0:	00c00ac4 	movi	r3,43
    88e4:	d8c02305 	stb	r3,140(sp)
    88e8:	04c00044 	movi	r19,1
    88ec:	b0c00007 	ldb	r3,0(r22)
    88f0:	003daf06 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    88f4:	b0c00007 	ldb	r3,0(r22)
    88f8:	01000a84 	movi	r4,42
    88fc:	b4000044 	addi	r16,r22,1
    8900:	19025e26 	beq	r3,r4,927c <___vfiprintf_internal_r+0x1440>
    8904:	1f3ff404 	addi	fp,r3,-48
    8908:	0009883a 	mov	r4,zero
    890c:	af025236 	bltu	r21,fp,9258 <___vfiprintf_internal_r+0x141c>
    8910:	01400284 	movi	r5,10
    8914:	000aae00 	call	aae0 <__mulsi3>
    8918:	80c00007 	ldb	r3,0(r16)
    891c:	1709883a 	add	r4,r2,fp
    8920:	85800044 	addi	r22,r16,1
    8924:	1f3ff404 	addi	fp,r3,-48
    8928:	b021883a 	mov	r16,r22
    892c:	af3ff82e 	bgeu	r21,fp,8910 <__alt_data_end+0xfffd6910>
    8930:	2021883a 	mov	r16,r4
    8934:	203d9f0e 	bge	r4,zero,7fb4 <__alt_data_end+0xfffd5fb4>
    8938:	043fffc4 	movi	r16,-1
    893c:	003d9d06 	br	7fb4 <__alt_data_end+0xfffd5fb4>
    8940:	8c401014 	ori	r17,r17,64
    8944:	b0c00007 	ldb	r3,0(r22)
    8948:	003d9906 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    894c:	d9002217 	ldw	r4,136(sp)
    8950:	d8001d85 	stb	zero,118(sp)
    8954:	20c00204 	addi	r3,r4,8
    8958:	24c00017 	ldw	r19,0(r4)
    895c:	25000117 	ldw	r20,4(r4)
    8960:	8001e716 	blt	r16,zero,9100 <___vfiprintf_internal_r+0x12c4>
    8964:	013fdfc4 	movi	r4,-129
    8968:	9d04b03a 	or	r2,r19,r20
    896c:	d8c02215 	stw	r3,136(sp)
    8970:	8922703a 	and	r17,r17,r4
    8974:	002b883a 	mov	r21,zero
    8978:	103f2f1e 	bne	r2,zero,8638 <__alt_data_end+0xfffd6638>
    897c:	803e2f26 	beq	r16,zero,823c <__alt_data_end+0xfffd623c>
    8980:	0027883a 	mov	r19,zero
    8984:	9cc00c04 	addi	r19,r19,48
    8988:	dcc019c5 	stb	r19,103(sp)
    898c:	dd002817 	ldw	r20,160(sp)
    8990:	ddc019c4 	addi	r23,sp,103
    8994:	003e2c06 	br	8248 <__alt_data_end+0xfffd6248>
    8998:	9cc03fcc 	andi	r19,r19,255
    899c:	b811883a 	mov	r8,r23
    89a0:	9802571e 	bne	r19,zero,9300 <___vfiprintf_internal_r+0x14c4>
    89a4:	18005726 	beq	r3,zero,8b04 <___vfiprintf_internal_r+0xcc8>
    89a8:	04c00044 	movi	r19,1
    89ac:	d8c01005 	stb	r3,64(sp)
    89b0:	d8001d85 	stb	zero,118(sp)
    89b4:	9829883a 	mov	r20,r19
    89b8:	ddc01004 	addi	r23,sp,64
    89bc:	003f0a06 	br	85e8 <__alt_data_end+0xfffd65e8>
    89c0:	d9402017 	ldw	r5,128(sp)
    89c4:	d9002117 	ldw	r4,132(sp)
    89c8:	d9801a04 	addi	r6,sp,104
    89cc:	da802a15 	stw	r10,168(sp)
    89d0:	0007d280 	call	7d28 <__sprint_r.part.0>
    89d4:	da802a17 	ldw	r10,168(sp)
    89d8:	1000501e 	bne	r2,zero,8b1c <___vfiprintf_internal_r+0xce0>
    89dc:	d9801b17 	ldw	r6,108(sp)
    89e0:	d8801c17 	ldw	r2,112(sp)
    89e4:	d811883a 	mov	r8,sp
    89e8:	31000044 	addi	r4,r6,1
    89ec:	003e3606 	br	82c8 <__alt_data_end+0xfffd62c8>
    89f0:	d9001b17 	ldw	r4,108(sp)
    89f4:	d8801c17 	ldw	r2,112(sp)
    89f8:	21400044 	addi	r5,r4,1
    89fc:	d9801d87 	ldb	r6,118(sp)
    8a00:	303e5226 	beq	r6,zero,834c <__alt_data_end+0xfffd634c>
    8a04:	01800044 	movi	r6,1
    8a08:	d9001d84 	addi	r4,sp,118
    8a0c:	1185883a 	add	r2,r2,r6
    8a10:	41000015 	stw	r4,0(r8)
    8a14:	41800115 	stw	r6,4(r8)
    8a18:	d8801c15 	stw	r2,112(sp)
    8a1c:	d9401b15 	stw	r5,108(sp)
    8a20:	010001c4 	movi	r4,7
    8a24:	2140b00e 	bge	r4,r5,8ce8 <___vfiprintf_internal_r+0xeac>
    8a28:	1000f61e 	bne	r2,zero,8e04 <___vfiprintf_internal_r+0xfc8>
    8a2c:	3800b31e 	bne	r7,zero,8cfc <___vfiprintf_internal_r+0xec0>
    8a30:	0009883a 	mov	r4,zero
    8a34:	300b883a 	mov	r5,r6
    8a38:	d811883a 	mov	r8,sp
    8a3c:	01802004 	movi	r6,128
    8a40:	19be5226 	beq	r3,r6,838c <__alt_data_end+0xfffd638c>
    8a44:	8521c83a 	sub	r16,r16,r20
    8a48:	043e790e 	bge	zero,r16,8430 <__alt_data_end+0xfffd6430>
    8a4c:	05400404 	movi	r21,16
    8a50:	ac01b00e 	bge	r21,r16,9114 <___vfiprintf_internal_r+0x12d8>
    8a54:	01400074 	movhi	r5,1
    8a58:	29504004 	addi	r5,r5,16640
    8a5c:	d9402315 	stw	r5,140(sp)
    8a60:	070001c4 	movi	fp,7
    8a64:	00000506 	br	8a7c <___vfiprintf_internal_r+0xc40>
    8a68:	21400084 	addi	r5,r4,2
    8a6c:	42000204 	addi	r8,r8,8
    8a70:	1809883a 	mov	r4,r3
    8a74:	843ffc04 	addi	r16,r16,-16
    8a78:	ac000d0e 	bge	r21,r16,8ab0 <___vfiprintf_internal_r+0xc74>
    8a7c:	10800404 	addi	r2,r2,16
    8a80:	20c00044 	addi	r3,r4,1
    8a84:	44800015 	stw	r18,0(r8)
    8a88:	45400115 	stw	r21,4(r8)
    8a8c:	d8801c15 	stw	r2,112(sp)
    8a90:	d8c01b15 	stw	r3,108(sp)
    8a94:	e0fff40e 	bge	fp,r3,8a68 <__alt_data_end+0xfffd6a68>
    8a98:	1000101e 	bne	r2,zero,8adc <___vfiprintf_internal_r+0xca0>
    8a9c:	843ffc04 	addi	r16,r16,-16
    8aa0:	01400044 	movi	r5,1
    8aa4:	0009883a 	mov	r4,zero
    8aa8:	d811883a 	mov	r8,sp
    8aac:	ac3ff316 	blt	r21,r16,8a7c <__alt_data_end+0xfffd6a7c>
    8ab0:	d8c02317 	ldw	r3,140(sp)
    8ab4:	1405883a 	add	r2,r2,r16
    8ab8:	44000115 	stw	r16,4(r8)
    8abc:	40c00015 	stw	r3,0(r8)
    8ac0:	d8801c15 	stw	r2,112(sp)
    8ac4:	d9401b15 	stw	r5,108(sp)
    8ac8:	00c001c4 	movi	r3,7
    8acc:	19401916 	blt	r3,r5,8b34 <___vfiprintf_internal_r+0xcf8>
    8ad0:	42000204 	addi	r8,r8,8
    8ad4:	29400044 	addi	r5,r5,1
    8ad8:	003e5506 	br	8430 <__alt_data_end+0xfffd6430>
    8adc:	d9402017 	ldw	r5,128(sp)
    8ae0:	d9002117 	ldw	r4,132(sp)
    8ae4:	d9801a04 	addi	r6,sp,104
    8ae8:	0007d280 	call	7d28 <__sprint_r.part.0>
    8aec:	10000b1e 	bne	r2,zero,8b1c <___vfiprintf_internal_r+0xce0>
    8af0:	d9001b17 	ldw	r4,108(sp)
    8af4:	d8801c17 	ldw	r2,112(sp)
    8af8:	d811883a 	mov	r8,sp
    8afc:	21400044 	addi	r5,r4,1
    8b00:	003fdc06 	br	8a74 <__alt_data_end+0xfffd6a74>
    8b04:	d8801c17 	ldw	r2,112(sp)
    8b08:	10000426 	beq	r2,zero,8b1c <___vfiprintf_internal_r+0xce0>
    8b0c:	d9402017 	ldw	r5,128(sp)
    8b10:	d9002117 	ldw	r4,132(sp)
    8b14:	d9801a04 	addi	r6,sp,104
    8b18:	0007d280 	call	7d28 <__sprint_r.part.0>
    8b1c:	d9402017 	ldw	r5,128(sp)
    8b20:	2880030b 	ldhu	r2,12(r5)
    8b24:	1080100c 	andi	r2,r2,64
    8b28:	10014d1e 	bne	r2,zero,9060 <___vfiprintf_internal_r+0x1224>
    8b2c:	d8802417 	ldw	r2,144(sp)
    8b30:	003d9706 	br	8190 <__alt_data_end+0xfffd6190>
    8b34:	1000d21e 	bne	r2,zero,8e80 <___vfiprintf_internal_r+0x1044>
    8b38:	00c00044 	movi	r3,1
    8b3c:	a005883a 	mov	r2,r20
    8b40:	ddc00015 	stw	r23,0(sp)
    8b44:	dd000115 	stw	r20,4(sp)
    8b48:	dd001c15 	stw	r20,112(sp)
    8b4c:	d8c01b15 	stw	r3,108(sp)
    8b50:	d811883a 	mov	r8,sp
    8b54:	42000204 	addi	r8,r8,8
    8b58:	8c40010c 	andi	r17,r17,4
    8b5c:	88004026 	beq	r17,zero,8c60 <___vfiprintf_internal_r+0xe24>
    8b60:	d9002517 	ldw	r4,148(sp)
    8b64:	24e3c83a 	sub	r17,r4,r19
    8b68:	04403d0e 	bge	zero,r17,8c60 <___vfiprintf_internal_r+0xe24>
    8b6c:	04000404 	movi	r16,16
    8b70:	8441a90e 	bge	r16,r17,9218 <___vfiprintf_internal_r+0x13dc>
    8b74:	00c00074 	movhi	r3,1
    8b78:	18d04404 	addi	r3,r3,16656
    8b7c:	d9001b17 	ldw	r4,108(sp)
    8b80:	d8c02315 	stw	r3,140(sp)
    8b84:	050001c4 	movi	r20,7
    8b88:	dd402117 	ldw	r21,132(sp)
    8b8c:	ddc02017 	ldw	r23,128(sp)
    8b90:	00000506 	br	8ba8 <___vfiprintf_internal_r+0xd6c>
    8b94:	21400084 	addi	r5,r4,2
    8b98:	42000204 	addi	r8,r8,8
    8b9c:	1809883a 	mov	r4,r3
    8ba0:	8c7ffc04 	addi	r17,r17,-16
    8ba4:	84400f0e 	bge	r16,r17,8be4 <___vfiprintf_internal_r+0xda8>
    8ba8:	01400074 	movhi	r5,1
    8bac:	10800404 	addi	r2,r2,16
    8bb0:	20c00044 	addi	r3,r4,1
    8bb4:	29504404 	addi	r5,r5,16656
    8bb8:	41400015 	stw	r5,0(r8)
    8bbc:	44000115 	stw	r16,4(r8)
    8bc0:	d8801c15 	stw	r2,112(sp)
    8bc4:	d8c01b15 	stw	r3,108(sp)
    8bc8:	a0fff20e 	bge	r20,r3,8b94 <__alt_data_end+0xfffd6b94>
    8bcc:	1000141e 	bne	r2,zero,8c20 <___vfiprintf_internal_r+0xde4>
    8bd0:	8c7ffc04 	addi	r17,r17,-16
    8bd4:	01400044 	movi	r5,1
    8bd8:	0009883a 	mov	r4,zero
    8bdc:	d811883a 	mov	r8,sp
    8be0:	847ff116 	blt	r16,r17,8ba8 <__alt_data_end+0xfffd6ba8>
    8be4:	d8c02317 	ldw	r3,140(sp)
    8be8:	1445883a 	add	r2,r2,r17
    8bec:	44400115 	stw	r17,4(r8)
    8bf0:	40c00015 	stw	r3,0(r8)
    8bf4:	d8801c15 	stw	r2,112(sp)
    8bf8:	d9401b15 	stw	r5,108(sp)
    8bfc:	00c001c4 	movi	r3,7
    8c00:	1940170e 	bge	r3,r5,8c60 <___vfiprintf_internal_r+0xe24>
    8c04:	1000101e 	bne	r2,zero,8c48 <___vfiprintf_internal_r+0xe0c>
    8c08:	d8802517 	ldw	r2,148(sp)
    8c0c:	14c11616 	blt	r2,r19,9068 <___vfiprintf_internal_r+0x122c>
    8c10:	d9002417 	ldw	r4,144(sp)
    8c14:	2089883a 	add	r4,r4,r2
    8c18:	d9002415 	stw	r4,144(sp)
    8c1c:	003e1806 	br	8480 <__alt_data_end+0xfffd6480>
    8c20:	d9801a04 	addi	r6,sp,104
    8c24:	b80b883a 	mov	r5,r23
    8c28:	a809883a 	mov	r4,r21
    8c2c:	0007d280 	call	7d28 <__sprint_r.part.0>
    8c30:	103fba1e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8c34:	d9001b17 	ldw	r4,108(sp)
    8c38:	d8801c17 	ldw	r2,112(sp)
    8c3c:	d811883a 	mov	r8,sp
    8c40:	21400044 	addi	r5,r4,1
    8c44:	003fd606 	br	8ba0 <__alt_data_end+0xfffd6ba0>
    8c48:	d9402017 	ldw	r5,128(sp)
    8c4c:	d9002117 	ldw	r4,132(sp)
    8c50:	d9801a04 	addi	r6,sp,104
    8c54:	0007d280 	call	7d28 <__sprint_r.part.0>
    8c58:	103fb01e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8c5c:	d8801c17 	ldw	r2,112(sp)
    8c60:	d8c02517 	ldw	r3,148(sp)
    8c64:	1cc0010e 	bge	r3,r19,8c6c <___vfiprintf_internal_r+0xe30>
    8c68:	9807883a 	mov	r3,r19
    8c6c:	d9002417 	ldw	r4,144(sp)
    8c70:	20c9883a 	add	r4,r4,r3
    8c74:	d9002415 	stw	r4,144(sp)
    8c78:	103e0126 	beq	r2,zero,8480 <__alt_data_end+0xfffd6480>
    8c7c:	d9402017 	ldw	r5,128(sp)
    8c80:	d9002117 	ldw	r4,132(sp)
    8c84:	d9801a04 	addi	r6,sp,104
    8c88:	0007d280 	call	7d28 <__sprint_r.part.0>
    8c8c:	103dfc26 	beq	r2,zero,8480 <__alt_data_end+0xfffd6480>
    8c90:	003fa206 	br	8b1c <__alt_data_end+0xfffd6b1c>
    8c94:	d9402017 	ldw	r5,128(sp)
    8c98:	d9002117 	ldw	r4,132(sp)
    8c9c:	d9801a04 	addi	r6,sp,104
    8ca0:	d9c02b15 	stw	r7,172(sp)
    8ca4:	0007d280 	call	7d28 <__sprint_r.part.0>
    8ca8:	d9c02b17 	ldw	r7,172(sp)
    8cac:	103f9b1e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8cb0:	d9001b17 	ldw	r4,108(sp)
    8cb4:	d8801c17 	ldw	r2,112(sp)
    8cb8:	d811883a 	mov	r8,sp
    8cbc:	21800044 	addi	r6,r4,1
    8cc0:	003dbf06 	br	83c0 <__alt_data_end+0xfffd63c0>
    8cc4:	1000d81e 	bne	r2,zero,9028 <___vfiprintf_internal_r+0x11ec>
    8cc8:	d9001d87 	ldb	r4,118(sp)
    8ccc:	20000a26 	beq	r4,zero,8cf8 <___vfiprintf_internal_r+0xebc>
    8cd0:	00800044 	movi	r2,1
    8cd4:	d9001d84 	addi	r4,sp,118
    8cd8:	100b883a 	mov	r5,r2
    8cdc:	d9000015 	stw	r4,0(sp)
    8ce0:	d8800115 	stw	r2,4(sp)
    8ce4:	d811883a 	mov	r8,sp
    8ce8:	2809883a 	mov	r4,r5
    8cec:	42000204 	addi	r8,r8,8
    8cf0:	29400044 	addi	r5,r5,1
    8cf4:	003d9506 	br	834c <__alt_data_end+0xfffd634c>
    8cf8:	3800fd26 	beq	r7,zero,90f0 <___vfiprintf_internal_r+0x12b4>
    8cfc:	00800084 	movi	r2,2
    8d00:	d9001d04 	addi	r4,sp,116
    8d04:	d9000015 	stw	r4,0(sp)
    8d08:	d8800115 	stw	r2,4(sp)
    8d0c:	01400044 	movi	r5,1
    8d10:	d811883a 	mov	r8,sp
    8d14:	2809883a 	mov	r4,r5
    8d18:	42000204 	addi	r8,r8,8
    8d1c:	29400044 	addi	r5,r5,1
    8d20:	003f4606 	br	8a3c <__alt_data_end+0xfffd6a3c>
    8d24:	d8802517 	ldw	r2,148(sp)
    8d28:	14c0010e 	bge	r2,r19,8d30 <___vfiprintf_internal_r+0xef4>
    8d2c:	9805883a 	mov	r2,r19
    8d30:	d9402417 	ldw	r5,144(sp)
    8d34:	288b883a 	add	r5,r5,r2
    8d38:	d9402415 	stw	r5,144(sp)
    8d3c:	003dd006 	br	8480 <__alt_data_end+0xfffd6480>
    8d40:	d8001d85 	stb	zero,118(sp)
    8d44:	80005d16 	blt	r16,zero,8ebc <___vfiprintf_internal_r+0x1080>
    8d48:	00ffdfc4 	movi	r3,-129
    8d4c:	9d04b03a 	or	r2,r19,r20
    8d50:	88e2703a 	and	r17,r17,r3
    8d54:	103d3726 	beq	r2,zero,8234 <__alt_data_end+0xfffd6234>
    8d58:	002b883a 	mov	r21,zero
    8d5c:	d9002617 	ldw	r4,152(sp)
    8d60:	ddc01a04 	addi	r23,sp,104
    8d64:	988003cc 	andi	r2,r19,15
    8d68:	a006973a 	slli	r3,r20,28
    8d6c:	2085883a 	add	r2,r4,r2
    8d70:	9826d13a 	srli	r19,r19,4
    8d74:	10800003 	ldbu	r2,0(r2)
    8d78:	a028d13a 	srli	r20,r20,4
    8d7c:	bdffffc4 	addi	r23,r23,-1
    8d80:	1ce6b03a 	or	r19,r3,r19
    8d84:	b8800005 	stb	r2,0(r23)
    8d88:	9d04b03a 	or	r2,r19,r20
    8d8c:	103ff51e 	bne	r2,zero,8d64 <__alt_data_end+0xfffd6d64>
    8d90:	d8801e17 	ldw	r2,120(sp)
    8d94:	15e9c83a 	sub	r20,r2,r23
    8d98:	003d2b06 	br	8248 <__alt_data_end+0xfffd6248>
    8d9c:	d9402017 	ldw	r5,128(sp)
    8da0:	d9002117 	ldw	r4,132(sp)
    8da4:	d9801a04 	addi	r6,sp,104
    8da8:	0007d280 	call	7d28 <__sprint_r.part.0>
    8dac:	103f5b1e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8db0:	d8801c17 	ldw	r2,112(sp)
    8db4:	d811883a 	mov	r8,sp
    8db8:	003f6706 	br	8b58 <__alt_data_end+0xfffd6b58>
    8dbc:	d9402017 	ldw	r5,128(sp)
    8dc0:	d9002117 	ldw	r4,132(sp)
    8dc4:	d9801a04 	addi	r6,sp,104
    8dc8:	0007d280 	call	7d28 <__sprint_r.part.0>
    8dcc:	103f531e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8dd0:	d811883a 	mov	r8,sp
    8dd4:	003cd906 	br	813c <__alt_data_end+0xfffd613c>
    8dd8:	10803fcc 	andi	r2,r2,255
    8ddc:	1080201c 	xori	r2,r2,128
    8de0:	10bfe004 	addi	r2,r2,-128
    8de4:	00c00c04 	movi	r3,48
    8de8:	10ffe926 	beq	r2,r3,8d90 <__alt_data_end+0xfffd6d90>
    8dec:	b8ffffc5 	stb	r3,-1(r23)
    8df0:	d8c01e17 	ldw	r3,120(sp)
    8df4:	b8bfffc4 	addi	r2,r23,-1
    8df8:	102f883a 	mov	r23,r2
    8dfc:	18a9c83a 	sub	r20,r3,r2
    8e00:	003d1106 	br	8248 <__alt_data_end+0xfffd6248>
    8e04:	d9402017 	ldw	r5,128(sp)
    8e08:	d9002117 	ldw	r4,132(sp)
    8e0c:	d9801a04 	addi	r6,sp,104
    8e10:	d8c02a15 	stw	r3,168(sp)
    8e14:	d9c02b15 	stw	r7,172(sp)
    8e18:	0007d280 	call	7d28 <__sprint_r.part.0>
    8e1c:	d8c02a17 	ldw	r3,168(sp)
    8e20:	d9c02b17 	ldw	r7,172(sp)
    8e24:	103f3d1e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8e28:	d9001b17 	ldw	r4,108(sp)
    8e2c:	d8801c17 	ldw	r2,112(sp)
    8e30:	d811883a 	mov	r8,sp
    8e34:	21400044 	addi	r5,r4,1
    8e38:	003d4406 	br	834c <__alt_data_end+0xfffd634c>
    8e3c:	d9402017 	ldw	r5,128(sp)
    8e40:	d9002117 	ldw	r4,132(sp)
    8e44:	d9801a04 	addi	r6,sp,104
    8e48:	d8c02a15 	stw	r3,168(sp)
    8e4c:	0007d280 	call	7d28 <__sprint_r.part.0>
    8e50:	d8c02a17 	ldw	r3,168(sp)
    8e54:	103f311e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8e58:	d9001b17 	ldw	r4,108(sp)
    8e5c:	d8801c17 	ldw	r2,112(sp)
    8e60:	d811883a 	mov	r8,sp
    8e64:	21400044 	addi	r5,r4,1
    8e68:	003ef406 	br	8a3c <__alt_data_end+0xfffd6a3c>
    8e6c:	1000bd1e 	bne	r2,zero,9164 <___vfiprintf_internal_r+0x1328>
    8e70:	01400044 	movi	r5,1
    8e74:	0009883a 	mov	r4,zero
    8e78:	d811883a 	mov	r8,sp
    8e7c:	003ef106 	br	8a44 <__alt_data_end+0xfffd6a44>
    8e80:	d9402017 	ldw	r5,128(sp)
    8e84:	d9002117 	ldw	r4,132(sp)
    8e88:	d9801a04 	addi	r6,sp,104
    8e8c:	0007d280 	call	7d28 <__sprint_r.part.0>
    8e90:	103f221e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    8e94:	d9401b17 	ldw	r5,108(sp)
    8e98:	d8801c17 	ldw	r2,112(sp)
    8e9c:	d811883a 	mov	r8,sp
    8ea0:	29400044 	addi	r5,r5,1
    8ea4:	003d6206 	br	8430 <__alt_data_end+0xfffd6430>
    8ea8:	01400074 	movhi	r5,1
    8eac:	294fdf04 	addi	r5,r5,16252
    8eb0:	d9402615 	stw	r5,152(sp)
    8eb4:	d8c02215 	stw	r3,136(sp)
    8eb8:	1023883a 	mov	r17,r2
    8ebc:	9d04b03a 	or	r2,r19,r20
    8ec0:	103fa51e 	bne	r2,zero,8d58 <__alt_data_end+0xfffd6d58>
    8ec4:	002b883a 	mov	r21,zero
    8ec8:	00800084 	movi	r2,2
    8ecc:	003e4a06 	br	87f8 <__alt_data_end+0xfffd67f8>
    8ed0:	01400074 	movhi	r5,1
    8ed4:	294fdf04 	addi	r5,r5,16252
    8ed8:	002b883a 	mov	r21,zero
    8edc:	d9402615 	stw	r5,152(sp)
    8ee0:	003f9e06 	br	8d5c <__alt_data_end+0xfffd6d5c>
    8ee4:	d9402217 	ldw	r5,136(sp)
    8ee8:	d8001d85 	stb	zero,118(sp)
    8eec:	0029883a 	mov	r20,zero
    8ef0:	28800104 	addi	r2,r5,4
    8ef4:	2cc00017 	ldw	r19,0(r5)
    8ef8:	803e3a16 	blt	r16,zero,87e4 <__alt_data_end+0xfffd67e4>
    8efc:	00ffdfc4 	movi	r3,-129
    8f00:	d8802215 	stw	r2,136(sp)
    8f04:	88e2703a 	and	r17,r17,r3
    8f08:	002b883a 	mov	r21,zero
    8f0c:	983e9b26 	beq	r19,zero,897c <__alt_data_end+0xfffd697c>
    8f10:	00800244 	movi	r2,9
    8f14:	14fdc936 	bltu	r2,r19,863c <__alt_data_end+0xfffd663c>
    8f18:	003e9a06 	br	8984 <__alt_data_end+0xfffd6984>
    8f1c:	00800c04 	movi	r2,48
    8f20:	d8c01d45 	stb	r3,117(sp)
    8f24:	d8801d05 	stb	r2,116(sp)
    8f28:	d8001d85 	stb	zero,118(sp)
    8f2c:	88c00094 	ori	r3,r17,2
    8f30:	80009c16 	blt	r16,zero,91a4 <___vfiprintf_internal_r+0x1368>
    8f34:	00bfdfc4 	movi	r2,-129
    8f38:	88a2703a 	and	r17,r17,r2
    8f3c:	8c400094 	ori	r17,r17,2
    8f40:	002b883a 	mov	r21,zero
    8f44:	003f8506 	br	8d5c <__alt_data_end+0xfffd6d5c>
    8f48:	b029883a 	mov	r20,r22
    8f4c:	003c0b06 	br	7f7c <__alt_data_end+0xfffd5f7c>
    8f50:	04e7c83a 	sub	r19,zero,r19
    8f54:	05400b44 	movi	r21,45
    8f58:	9804c03a 	cmpne	r2,r19,zero
    8f5c:	0529c83a 	sub	r20,zero,r20
    8f60:	dd401d85 	stb	r21,118(sp)
    8f64:	a0a9c83a 	sub	r20,r20,r2
    8f68:	80009716 	blt	r16,zero,91c8 <___vfiprintf_internal_r+0x138c>
    8f6c:	00bfdfc4 	movi	r2,-129
    8f70:	88a2703a 	and	r17,r17,r2
    8f74:	003db006 	br	8638 <__alt_data_end+0xfffd6638>
    8f78:	b0c00007 	ldb	r3,0(r22)
    8f7c:	003c0c06 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    8f80:	8880100c 	andi	r2,r17,64
    8f84:	d8001d85 	stb	zero,118(sp)
    8f88:	1000461e 	bne	r2,zero,90a4 <___vfiprintf_internal_r+0x1268>
    8f8c:	d9002217 	ldw	r4,136(sp)
    8f90:	0029883a 	mov	r20,zero
    8f94:	20800104 	addi	r2,r4,4
    8f98:	24c00017 	ldw	r19,0(r4)
    8f9c:	803df80e 	bge	r16,zero,8780 <__alt_data_end+0xfffd6780>
    8fa0:	9d06b03a 	or	r3,r19,r20
    8fa4:	d8802215 	stw	r2,136(sp)
    8fa8:	183d5e1e 	bne	r3,zero,8524 <__alt_data_end+0xfffd6524>
    8fac:	002b883a 	mov	r21,zero
    8fb0:	0005883a 	mov	r2,zero
    8fb4:	003e1006 	br	87f8 <__alt_data_end+0xfffd67f8>
    8fb8:	8880040c 	andi	r2,r17,16
    8fbc:	1000321e 	bne	r2,zero,9088 <___vfiprintf_internal_r+0x124c>
    8fc0:	8c40100c 	andi	r17,r17,64
    8fc4:	88008d26 	beq	r17,zero,91fc <___vfiprintf_internal_r+0x13c0>
    8fc8:	d9402217 	ldw	r5,136(sp)
    8fcc:	d8c02417 	ldw	r3,144(sp)
    8fd0:	28800017 	ldw	r2,0(r5)
    8fd4:	29400104 	addi	r5,r5,4
    8fd8:	d9402215 	stw	r5,136(sp)
    8fdc:	10c0000d 	sth	r3,0(r2)
    8fe0:	003bca06 	br	7f0c <__alt_data_end+0xfffd5f0c>
    8fe4:	8880100c 	andi	r2,r17,64
    8fe8:	10003a26 	beq	r2,zero,90d4 <___vfiprintf_internal_r+0x1298>
    8fec:	d8802217 	ldw	r2,136(sp)
    8ff0:	14c0000f 	ldh	r19,0(r2)
    8ff4:	10800104 	addi	r2,r2,4
    8ff8:	d8802215 	stw	r2,136(sp)
    8ffc:	9829d7fa 	srai	r20,r19,31
    9000:	a005883a 	mov	r2,r20
    9004:	003d8506 	br	861c <__alt_data_end+0xfffd661c>
    9008:	8880100c 	andi	r2,r17,64
    900c:	10002b26 	beq	r2,zero,90bc <___vfiprintf_internal_r+0x1280>
    9010:	d8802217 	ldw	r2,136(sp)
    9014:	0029883a 	mov	r20,zero
    9018:	14c0000b 	ldhu	r19,0(r2)
    901c:	10800104 	addi	r2,r2,4
    9020:	d8802215 	stw	r2,136(sp)
    9024:	003d5d06 	br	859c <__alt_data_end+0xfffd659c>
    9028:	d9402017 	ldw	r5,128(sp)
    902c:	d9002117 	ldw	r4,132(sp)
    9030:	d9801a04 	addi	r6,sp,104
    9034:	d8c02a15 	stw	r3,168(sp)
    9038:	d9c02b15 	stw	r7,172(sp)
    903c:	0007d280 	call	7d28 <__sprint_r.part.0>
    9040:	d8c02a17 	ldw	r3,168(sp)
    9044:	d9c02b17 	ldw	r7,172(sp)
    9048:	103eb41e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    904c:	d9001b17 	ldw	r4,108(sp)
    9050:	d8801c17 	ldw	r2,112(sp)
    9054:	d811883a 	mov	r8,sp
    9058:	21400044 	addi	r5,r4,1
    905c:	003e6706 	br	89fc <__alt_data_end+0xfffd69fc>
    9060:	00bfffc4 	movi	r2,-1
    9064:	003c4a06 	br	8190 <__alt_data_end+0xfffd6190>
    9068:	9805883a 	mov	r2,r19
    906c:	003ee806 	br	8c10 <__alt_data_end+0xfffd6c10>
    9070:	d8c02217 	ldw	r3,136(sp)
    9074:	0029883a 	mov	r20,zero
    9078:	18800104 	addi	r2,r3,4
    907c:	1cc0000b 	ldhu	r19,0(r3)
    9080:	803f9e0e 	bge	r16,zero,8efc <__alt_data_end+0xfffd6efc>
    9084:	003dd706 	br	87e4 <__alt_data_end+0xfffd67e4>
    9088:	d8c02217 	ldw	r3,136(sp)
    908c:	d9002417 	ldw	r4,144(sp)
    9090:	18800017 	ldw	r2,0(r3)
    9094:	18c00104 	addi	r3,r3,4
    9098:	d8c02215 	stw	r3,136(sp)
    909c:	11000015 	stw	r4,0(r2)
    90a0:	003b9a06 	br	7f0c <__alt_data_end+0xfffd5f0c>
    90a4:	d8c02217 	ldw	r3,136(sp)
    90a8:	0029883a 	mov	r20,zero
    90ac:	18800104 	addi	r2,r3,4
    90b0:	1cc0000b 	ldhu	r19,0(r3)
    90b4:	803db20e 	bge	r16,zero,8780 <__alt_data_end+0xfffd6780>
    90b8:	003fb906 	br	8fa0 <__alt_data_end+0xfffd6fa0>
    90bc:	d9002217 	ldw	r4,136(sp)
    90c0:	0029883a 	mov	r20,zero
    90c4:	24c00017 	ldw	r19,0(r4)
    90c8:	21000104 	addi	r4,r4,4
    90cc:	d9002215 	stw	r4,136(sp)
    90d0:	003d3206 	br	859c <__alt_data_end+0xfffd659c>
    90d4:	d8c02217 	ldw	r3,136(sp)
    90d8:	1cc00017 	ldw	r19,0(r3)
    90dc:	18c00104 	addi	r3,r3,4
    90e0:	d8c02215 	stw	r3,136(sp)
    90e4:	9829d7fa 	srai	r20,r19,31
    90e8:	a005883a 	mov	r2,r20
    90ec:	003d4b06 	br	861c <__alt_data_end+0xfffd661c>
    90f0:	0009883a 	mov	r4,zero
    90f4:	01400044 	movi	r5,1
    90f8:	d811883a 	mov	r8,sp
    90fc:	003e4f06 	br	8a3c <__alt_data_end+0xfffd6a3c>
    9100:	d8c02215 	stw	r3,136(sp)
    9104:	002b883a 	mov	r21,zero
    9108:	003db806 	br	87ec <__alt_data_end+0xfffd67ec>
    910c:	d811883a 	mov	r8,sp
    9110:	003e9606 	br	8b6c <__alt_data_end+0xfffd6b6c>
    9114:	01000074 	movhi	r4,1
    9118:	21104004 	addi	r4,r4,16640
    911c:	d9002315 	stw	r4,140(sp)
    9120:	003e6306 	br	8ab0 <__alt_data_end+0xfffd6ab0>
    9124:	b0c00043 	ldbu	r3,1(r22)
    9128:	8c400814 	ori	r17,r17,32
    912c:	b5800044 	addi	r22,r22,1
    9130:	18c03fcc 	andi	r3,r3,255
    9134:	18c0201c 	xori	r3,r3,128
    9138:	18ffe004 	addi	r3,r3,-128
    913c:	003b9c06 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    9140:	b809883a 	mov	r4,r23
    9144:	da002a15 	stw	r8,168(sp)
    9148:	00005ac0 	call	5ac <strlen>
    914c:	1029883a 	mov	r20,r2
    9150:	dd401d83 	ldbu	r21,118(sp)
    9154:	df002215 	stw	fp,136(sp)
    9158:	0021883a 	mov	r16,zero
    915c:	da002a17 	ldw	r8,168(sp)
    9160:	003c3906 	br	8248 <__alt_data_end+0xfffd6248>
    9164:	d9402017 	ldw	r5,128(sp)
    9168:	d9002117 	ldw	r4,132(sp)
    916c:	d9801a04 	addi	r6,sp,104
    9170:	0007d280 	call	7d28 <__sprint_r.part.0>
    9174:	103e691e 	bne	r2,zero,8b1c <__alt_data_end+0xfffd6b1c>
    9178:	d9001b17 	ldw	r4,108(sp)
    917c:	d8801c17 	ldw	r2,112(sp)
    9180:	d811883a 	mov	r8,sp
    9184:	21400044 	addi	r5,r4,1
    9188:	003e2e06 	br	8a44 <__alt_data_end+0xfffd6a44>
    918c:	01000074 	movhi	r4,1
    9190:	21104404 	addi	r4,r4,16656
    9194:	d9002315 	stw	r4,140(sp)
    9198:	d9001b17 	ldw	r4,108(sp)
    919c:	21000044 	addi	r4,r4,1
    91a0:	003c5e06 	br	831c <__alt_data_end+0xfffd631c>
    91a4:	002b883a 	mov	r21,zero
    91a8:	00800084 	movi	r2,2
    91ac:	10803fcc 	andi	r2,r2,255
    91b0:	01000044 	movi	r4,1
    91b4:	11002b26 	beq	r2,r4,9264 <___vfiprintf_internal_r+0x1428>
    91b8:	01000084 	movi	r4,2
    91bc:	11002b1e 	bne	r2,r4,926c <___vfiprintf_internal_r+0x1430>
    91c0:	1823883a 	mov	r17,r3
    91c4:	003ee506 	br	8d5c <__alt_data_end+0xfffd6d5c>
    91c8:	8807883a 	mov	r3,r17
    91cc:	00800044 	movi	r2,1
    91d0:	003ff606 	br	91ac <__alt_data_end+0xfffd71ac>
    91d4:	00800184 	movi	r2,6
    91d8:	1400012e 	bgeu	r2,r16,91e0 <___vfiprintf_internal_r+0x13a4>
    91dc:	1021883a 	mov	r16,r2
    91e0:	8029883a 	mov	r20,r16
    91e4:	8027883a 	mov	r19,r16
    91e8:	80002216 	blt	r16,zero,9274 <___vfiprintf_internal_r+0x1438>
    91ec:	05c00074 	movhi	r23,1
    91f0:	df002215 	stw	fp,136(sp)
    91f4:	bdcfe404 	addi	r23,r23,16272
    91f8:	003cfb06 	br	85e8 <__alt_data_end+0xfffd65e8>
    91fc:	d9002217 	ldw	r4,136(sp)
    9200:	d9402417 	ldw	r5,144(sp)
    9204:	20800017 	ldw	r2,0(r4)
    9208:	21000104 	addi	r4,r4,4
    920c:	d9002215 	stw	r4,136(sp)
    9210:	11400015 	stw	r5,0(r2)
    9214:	003b3d06 	br	7f0c <__alt_data_end+0xfffd5f0c>
    9218:	01400074 	movhi	r5,1
    921c:	29504404 	addi	r5,r5,16656
    9220:	d9402315 	stw	r5,140(sp)
    9224:	d9401b17 	ldw	r5,108(sp)
    9228:	29400044 	addi	r5,r5,1
    922c:	003e6d06 	br	8be4 <__alt_data_end+0xfffd6be4>
    9230:	8029883a 	mov	r20,r16
    9234:	dd401d83 	ldbu	r21,118(sp)
    9238:	df002215 	stw	fp,136(sp)
    923c:	0021883a 	mov	r16,zero
    9240:	003c0106 	br	8248 <__alt_data_end+0xfffd6248>
    9244:	00c00074 	movhi	r3,1
    9248:	18d04004 	addi	r3,r3,16640
    924c:	d8c02315 	stw	r3,140(sp)
    9250:	280d883a 	mov	r6,r5
    9254:	003c6906 	br	83fc <__alt_data_end+0xfffd63fc>
    9258:	802d883a 	mov	r22,r16
    925c:	0021883a 	mov	r16,zero
    9260:	003b5406 	br	7fb4 <__alt_data_end+0xfffd5fb4>
    9264:	1823883a 	mov	r17,r3
    9268:	003cf306 	br	8638 <__alt_data_end+0xfffd6638>
    926c:	1823883a 	mov	r17,r3
    9270:	003cad06 	br	8528 <__alt_data_end+0xfffd6528>
    9274:	0027883a 	mov	r19,zero
    9278:	003fdc06 	br	91ec <__alt_data_end+0xfffd71ec>
    927c:	d9402217 	ldw	r5,136(sp)
    9280:	8005883a 	mov	r2,r16
    9284:	b0c00043 	ldbu	r3,1(r22)
    9288:	2c000017 	ldw	r16,0(r5)
    928c:	29000104 	addi	r4,r5,4
    9290:	d9002215 	stw	r4,136(sp)
    9294:	102d883a 	mov	r22,r2
    9298:	803fa50e 	bge	r16,zero,9130 <__alt_data_end+0xfffd7130>
    929c:	18c03fcc 	andi	r3,r3,255
    92a0:	18c0201c 	xori	r3,r3,128
    92a4:	043fffc4 	movi	r16,-1
    92a8:	18ffe004 	addi	r3,r3,-128
    92ac:	003b4006 	br	7fb0 <__alt_data_end+0xfffd5fb0>
    92b0:	d9402303 	ldbu	r5,140(sp)
    92b4:	d9401d85 	stb	r5,118(sp)
    92b8:	003cae06 	br	8574 <__alt_data_end+0xfffd6574>
    92bc:	d8c02303 	ldbu	r3,140(sp)
    92c0:	d8c01d85 	stb	r3,118(sp)
    92c4:	003d1406 	br	8718 <__alt_data_end+0xfffd6718>
    92c8:	d8c02303 	ldbu	r3,140(sp)
    92cc:	d8c01d85 	stb	r3,118(sp)
    92d0:	003cca06 	br	85fc <__alt_data_end+0xfffd65fc>
    92d4:	8880004c 	andi	r2,r17,1
    92d8:	002b883a 	mov	r21,zero
    92dc:	10000526 	beq	r2,zero,92f4 <___vfiprintf_internal_r+0x14b8>
    92e0:	00800c04 	movi	r2,48
    92e4:	d88019c5 	stb	r2,103(sp)
    92e8:	dd002817 	ldw	r20,160(sp)
    92ec:	ddc019c4 	addi	r23,sp,103
    92f0:	003bd506 	br	8248 <__alt_data_end+0xfffd6248>
    92f4:	0029883a 	mov	r20,zero
    92f8:	ddc01a04 	addi	r23,sp,104
    92fc:	003bd206 	br	8248 <__alt_data_end+0xfffd6248>
    9300:	d9002303 	ldbu	r4,140(sp)
    9304:	d9001d85 	stb	r4,118(sp)
    9308:	003da606 	br	89a4 <__alt_data_end+0xfffd69a4>
    930c:	d8c02303 	ldbu	r3,140(sp)
    9310:	d8c01d85 	stb	r3,118(sp)
    9314:	003c7606 	br	84f0 <__alt_data_end+0xfffd64f0>
    9318:	d8c02303 	ldbu	r3,140(sp)
    931c:	d8c01d85 	stb	r3,118(sp)
    9320:	003c6506 	br	84b8 <__alt_data_end+0xfffd64b8>
    9324:	d9002303 	ldbu	r4,140(sp)
    9328:	d9001d85 	stb	r4,118(sp)
    932c:	003d3d06 	br	8824 <__alt_data_end+0xfffd6824>
    9330:	d8c02303 	ldbu	r3,140(sp)
    9334:	d8c01d85 	stb	r3,118(sp)
    9338:	003d1d06 	br	87b0 <__alt_data_end+0xfffd67b0>
    933c:	d8c02303 	ldbu	r3,140(sp)
    9340:	d8c01d85 	stb	r3,118(sp)
    9344:	003d0306 	br	8754 <__alt_data_end+0xfffd6754>

00009348 <__vfiprintf_internal>:
    9348:	00800074 	movhi	r2,1
    934c:	10974b04 	addi	r2,r2,23852
    9350:	300f883a 	mov	r7,r6
    9354:	280d883a 	mov	r6,r5
    9358:	200b883a 	mov	r5,r4
    935c:	11000017 	ldw	r4,0(r2)
    9360:	0007e3c1 	jmpi	7e3c <___vfiprintf_internal_r>

00009364 <__sbprintf>:
    9364:	2880030b 	ldhu	r2,12(r5)
    9368:	2ac01917 	ldw	r11,100(r5)
    936c:	2a80038b 	ldhu	r10,14(r5)
    9370:	2a400717 	ldw	r9,28(r5)
    9374:	2a000917 	ldw	r8,36(r5)
    9378:	defee204 	addi	sp,sp,-1144
    937c:	00c10004 	movi	r3,1024
    9380:	dc011a15 	stw	r16,1128(sp)
    9384:	10bfff4c 	andi	r2,r2,65533
    9388:	2821883a 	mov	r16,r5
    938c:	d8cb883a 	add	r5,sp,r3
    9390:	dc811c15 	stw	r18,1136(sp)
    9394:	dc411b15 	stw	r17,1132(sp)
    9398:	dfc11d15 	stw	ra,1140(sp)
    939c:	2025883a 	mov	r18,r4
    93a0:	d881030d 	sth	r2,1036(sp)
    93a4:	dac11915 	stw	r11,1124(sp)
    93a8:	da81038d 	sth	r10,1038(sp)
    93ac:	da410715 	stw	r9,1052(sp)
    93b0:	da010915 	stw	r8,1060(sp)
    93b4:	dec10015 	stw	sp,1024(sp)
    93b8:	dec10415 	stw	sp,1040(sp)
    93bc:	d8c10215 	stw	r3,1032(sp)
    93c0:	d8c10515 	stw	r3,1044(sp)
    93c4:	d8010615 	stw	zero,1048(sp)
    93c8:	0007e3c0 	call	7e3c <___vfiprintf_internal_r>
    93cc:	1023883a 	mov	r17,r2
    93d0:	10000416 	blt	r2,zero,93e4 <__sbprintf+0x80>
    93d4:	d9410004 	addi	r5,sp,1024
    93d8:	9009883a 	mov	r4,r18
    93dc:	00046180 	call	4618 <_fflush_r>
    93e0:	10000d1e 	bne	r2,zero,9418 <__sbprintf+0xb4>
    93e4:	d881030b 	ldhu	r2,1036(sp)
    93e8:	1080100c 	andi	r2,r2,64
    93ec:	10000326 	beq	r2,zero,93fc <__sbprintf+0x98>
    93f0:	8080030b 	ldhu	r2,12(r16)
    93f4:	10801014 	ori	r2,r2,64
    93f8:	8080030d 	sth	r2,12(r16)
    93fc:	8805883a 	mov	r2,r17
    9400:	dfc11d17 	ldw	ra,1140(sp)
    9404:	dc811c17 	ldw	r18,1136(sp)
    9408:	dc411b17 	ldw	r17,1132(sp)
    940c:	dc011a17 	ldw	r16,1128(sp)
    9410:	dec11e04 	addi	sp,sp,1144
    9414:	f800283a 	ret
    9418:	047fffc4 	movi	r17,-1
    941c:	003ff106 	br	93e4 <__alt_data_end+0xfffd73e4>

00009420 <_write_r>:
    9420:	defffd04 	addi	sp,sp,-12
    9424:	2805883a 	mov	r2,r5
    9428:	dc000015 	stw	r16,0(sp)
    942c:	04000074 	movhi	r16,1
    9430:	dc400115 	stw	r17,4(sp)
    9434:	300b883a 	mov	r5,r6
    9438:	841e2704 	addi	r16,r16,30876
    943c:	2023883a 	mov	r17,r4
    9440:	380d883a 	mov	r6,r7
    9444:	1009883a 	mov	r4,r2
    9448:	dfc00215 	stw	ra,8(sp)
    944c:	80000015 	stw	zero,0(r16)
    9450:	000dc400 	call	dc40 <write>
    9454:	00ffffc4 	movi	r3,-1
    9458:	10c00526 	beq	r2,r3,9470 <_write_r+0x50>
    945c:	dfc00217 	ldw	ra,8(sp)
    9460:	dc400117 	ldw	r17,4(sp)
    9464:	dc000017 	ldw	r16,0(sp)
    9468:	dec00304 	addi	sp,sp,12
    946c:	f800283a 	ret
    9470:	80c00017 	ldw	r3,0(r16)
    9474:	183ff926 	beq	r3,zero,945c <__alt_data_end+0xfffd745c>
    9478:	88c00015 	stw	r3,0(r17)
    947c:	003ff706 	br	945c <__alt_data_end+0xfffd745c>

00009480 <_close_r>:
    9480:	defffd04 	addi	sp,sp,-12
    9484:	dc000015 	stw	r16,0(sp)
    9488:	04000074 	movhi	r16,1
    948c:	dc400115 	stw	r17,4(sp)
    9490:	841e2704 	addi	r16,r16,30876
    9494:	2023883a 	mov	r17,r4
    9498:	2809883a 	mov	r4,r5
    949c:	dfc00215 	stw	ra,8(sp)
    94a0:	80000015 	stw	zero,0(r16)
    94a4:	000d3e80 	call	d3e8 <close>
    94a8:	00ffffc4 	movi	r3,-1
    94ac:	10c00526 	beq	r2,r3,94c4 <_close_r+0x44>
    94b0:	dfc00217 	ldw	ra,8(sp)
    94b4:	dc400117 	ldw	r17,4(sp)
    94b8:	dc000017 	ldw	r16,0(sp)
    94bc:	dec00304 	addi	sp,sp,12
    94c0:	f800283a 	ret
    94c4:	80c00017 	ldw	r3,0(r16)
    94c8:	183ff926 	beq	r3,zero,94b0 <__alt_data_end+0xfffd74b0>
    94cc:	88c00015 	stw	r3,0(r17)
    94d0:	003ff706 	br	94b0 <__alt_data_end+0xfffd74b0>

000094d4 <_calloc_r>:
    94d4:	defffe04 	addi	sp,sp,-8
    94d8:	2805883a 	mov	r2,r5
    94dc:	dc000015 	stw	r16,0(sp)
    94e0:	300b883a 	mov	r5,r6
    94e4:	2021883a 	mov	r16,r4
    94e8:	1009883a 	mov	r4,r2
    94ec:	dfc00115 	stw	ra,4(sp)
    94f0:	000aae00 	call	aae0 <__mulsi3>
    94f4:	100b883a 	mov	r5,r2
    94f8:	8009883a 	mov	r4,r16
    94fc:	00057700 	call	5770 <_malloc_r>
    9500:	10002926 	beq	r2,zero,95a8 <_calloc_r+0xd4>
    9504:	11bfff17 	ldw	r6,-4(r2)
    9508:	1021883a 	mov	r16,r2
    950c:	00bfff04 	movi	r2,-4
    9510:	308c703a 	and	r6,r6,r2
    9514:	00c00904 	movi	r3,36
    9518:	308d883a 	add	r6,r6,r2
    951c:	19801636 	bltu	r3,r6,9578 <_calloc_r+0xa4>
    9520:	008004c4 	movi	r2,19
    9524:	11800b2e 	bgeu	r2,r6,9554 <_calloc_r+0x80>
    9528:	80000015 	stw	zero,0(r16)
    952c:	80000115 	stw	zero,4(r16)
    9530:	008006c4 	movi	r2,27
    9534:	11801a2e 	bgeu	r2,r6,95a0 <_calloc_r+0xcc>
    9538:	80000215 	stw	zero,8(r16)
    953c:	80000315 	stw	zero,12(r16)
    9540:	30c0151e 	bne	r6,r3,9598 <_calloc_r+0xc4>
    9544:	80000415 	stw	zero,16(r16)
    9548:	80800604 	addi	r2,r16,24
    954c:	80000515 	stw	zero,20(r16)
    9550:	00000106 	br	9558 <_calloc_r+0x84>
    9554:	8005883a 	mov	r2,r16
    9558:	10000015 	stw	zero,0(r2)
    955c:	10000115 	stw	zero,4(r2)
    9560:	10000215 	stw	zero,8(r2)
    9564:	8005883a 	mov	r2,r16
    9568:	dfc00117 	ldw	ra,4(sp)
    956c:	dc000017 	ldw	r16,0(sp)
    9570:	dec00204 	addi	sp,sp,8
    9574:	f800283a 	ret
    9578:	000b883a 	mov	r5,zero
    957c:	8009883a 	mov	r4,r16
    9580:	00063040 	call	6304 <memset>
    9584:	8005883a 	mov	r2,r16
    9588:	dfc00117 	ldw	ra,4(sp)
    958c:	dc000017 	ldw	r16,0(sp)
    9590:	dec00204 	addi	sp,sp,8
    9594:	f800283a 	ret
    9598:	80800404 	addi	r2,r16,16
    959c:	003fee06 	br	9558 <__alt_data_end+0xfffd7558>
    95a0:	80800204 	addi	r2,r16,8
    95a4:	003fec06 	br	9558 <__alt_data_end+0xfffd7558>
    95a8:	0005883a 	mov	r2,zero
    95ac:	003fee06 	br	9568 <__alt_data_end+0xfffd7568>

000095b0 <_fclose_r>:
    95b0:	28003926 	beq	r5,zero,9698 <_fclose_r+0xe8>
    95b4:	defffc04 	addi	sp,sp,-16
    95b8:	dc400115 	stw	r17,4(sp)
    95bc:	dc000015 	stw	r16,0(sp)
    95c0:	dfc00315 	stw	ra,12(sp)
    95c4:	dc800215 	stw	r18,8(sp)
    95c8:	2023883a 	mov	r17,r4
    95cc:	2821883a 	mov	r16,r5
    95d0:	20000226 	beq	r4,zero,95dc <_fclose_r+0x2c>
    95d4:	20800e17 	ldw	r2,56(r4)
    95d8:	10002726 	beq	r2,zero,9678 <_fclose_r+0xc8>
    95dc:	8080030f 	ldh	r2,12(r16)
    95e0:	1000071e 	bne	r2,zero,9600 <_fclose_r+0x50>
    95e4:	0005883a 	mov	r2,zero
    95e8:	dfc00317 	ldw	ra,12(sp)
    95ec:	dc800217 	ldw	r18,8(sp)
    95f0:	dc400117 	ldw	r17,4(sp)
    95f4:	dc000017 	ldw	r16,0(sp)
    95f8:	dec00404 	addi	sp,sp,16
    95fc:	f800283a 	ret
    9600:	800b883a 	mov	r5,r16
    9604:	8809883a 	mov	r4,r17
    9608:	00043fc0 	call	43fc <__sflush_r>
    960c:	1025883a 	mov	r18,r2
    9610:	80800b17 	ldw	r2,44(r16)
    9614:	10000426 	beq	r2,zero,9628 <_fclose_r+0x78>
    9618:	81400717 	ldw	r5,28(r16)
    961c:	8809883a 	mov	r4,r17
    9620:	103ee83a 	callr	r2
    9624:	10001616 	blt	r2,zero,9680 <_fclose_r+0xd0>
    9628:	8080030b 	ldhu	r2,12(r16)
    962c:	1080200c 	andi	r2,r2,128
    9630:	1000151e 	bne	r2,zero,9688 <_fclose_r+0xd8>
    9634:	81400c17 	ldw	r5,48(r16)
    9638:	28000526 	beq	r5,zero,9650 <_fclose_r+0xa0>
    963c:	80801004 	addi	r2,r16,64
    9640:	28800226 	beq	r5,r2,964c <_fclose_r+0x9c>
    9644:	8809883a 	mov	r4,r17
    9648:	0004b780 	call	4b78 <_free_r>
    964c:	80000c15 	stw	zero,48(r16)
    9650:	81401117 	ldw	r5,68(r16)
    9654:	28000326 	beq	r5,zero,9664 <_fclose_r+0xb4>
    9658:	8809883a 	mov	r4,r17
    965c:	0004b780 	call	4b78 <_free_r>
    9660:	80001115 	stw	zero,68(r16)
    9664:	0004a140 	call	4a14 <__sfp_lock_acquire>
    9668:	8000030d 	sth	zero,12(r16)
    966c:	0004a180 	call	4a18 <__sfp_lock_release>
    9670:	9005883a 	mov	r2,r18
    9674:	003fdc06 	br	95e8 <__alt_data_end+0xfffd75e8>
    9678:	0004a040 	call	4a04 <__sinit>
    967c:	003fd706 	br	95dc <__alt_data_end+0xfffd75dc>
    9680:	04bfffc4 	movi	r18,-1
    9684:	003fe806 	br	9628 <__alt_data_end+0xfffd7628>
    9688:	81400417 	ldw	r5,16(r16)
    968c:	8809883a 	mov	r4,r17
    9690:	0004b780 	call	4b78 <_free_r>
    9694:	003fe706 	br	9634 <__alt_data_end+0xfffd7634>
    9698:	0005883a 	mov	r2,zero
    969c:	f800283a 	ret

000096a0 <fclose>:
    96a0:	00800074 	movhi	r2,1
    96a4:	10974b04 	addi	r2,r2,23852
    96a8:	200b883a 	mov	r5,r4
    96ac:	11000017 	ldw	r4,0(r2)
    96b0:	00095b01 	jmpi	95b0 <_fclose_r>

000096b4 <__fputwc>:
    96b4:	defff804 	addi	sp,sp,-32
    96b8:	dcc00415 	stw	r19,16(sp)
    96bc:	dc800315 	stw	r18,12(sp)
    96c0:	dc000115 	stw	r16,4(sp)
    96c4:	dfc00715 	stw	ra,28(sp)
    96c8:	dd400615 	stw	r21,24(sp)
    96cc:	dd000515 	stw	r20,20(sp)
    96d0:	dc400215 	stw	r17,8(sp)
    96d4:	2027883a 	mov	r19,r4
    96d8:	2825883a 	mov	r18,r5
    96dc:	3021883a 	mov	r16,r6
    96e0:	00055600 	call	5560 <__locale_mb_cur_max>
    96e4:	00c00044 	movi	r3,1
    96e8:	10c03e26 	beq	r2,r3,97e4 <__fputwc+0x130>
    96ec:	81c01704 	addi	r7,r16,92
    96f0:	900d883a 	mov	r6,r18
    96f4:	d80b883a 	mov	r5,sp
    96f8:	9809883a 	mov	r4,r19
    96fc:	0009b840 	call	9b84 <_wcrtomb_r>
    9700:	1029883a 	mov	r20,r2
    9704:	00bfffc4 	movi	r2,-1
    9708:	a0802026 	beq	r20,r2,978c <__fputwc+0xd8>
    970c:	d9400003 	ldbu	r5,0(sp)
    9710:	a0001c26 	beq	r20,zero,9784 <__fputwc+0xd0>
    9714:	0023883a 	mov	r17,zero
    9718:	05400284 	movi	r21,10
    971c:	00000906 	br	9744 <__fputwc+0x90>
    9720:	80800017 	ldw	r2,0(r16)
    9724:	11400005 	stb	r5,0(r2)
    9728:	80c00017 	ldw	r3,0(r16)
    972c:	18c00044 	addi	r3,r3,1
    9730:	80c00015 	stw	r3,0(r16)
    9734:	8c400044 	addi	r17,r17,1
    9738:	dc45883a 	add	r2,sp,r17
    973c:	8d00112e 	bgeu	r17,r20,9784 <__fputwc+0xd0>
    9740:	11400003 	ldbu	r5,0(r2)
    9744:	80c00217 	ldw	r3,8(r16)
    9748:	18ffffc4 	addi	r3,r3,-1
    974c:	80c00215 	stw	r3,8(r16)
    9750:	183ff30e 	bge	r3,zero,9720 <__alt_data_end+0xfffd7720>
    9754:	80800617 	ldw	r2,24(r16)
    9758:	18801916 	blt	r3,r2,97c0 <__fputwc+0x10c>
    975c:	80800017 	ldw	r2,0(r16)
    9760:	11400005 	stb	r5,0(r2)
    9764:	80800017 	ldw	r2,0(r16)
    9768:	10c00003 	ldbu	r3,0(r2)
    976c:	10800044 	addi	r2,r2,1
    9770:	1d402326 	beq	r3,r21,9800 <__fputwc+0x14c>
    9774:	80800015 	stw	r2,0(r16)
    9778:	8c400044 	addi	r17,r17,1
    977c:	dc45883a 	add	r2,sp,r17
    9780:	8d3fef36 	bltu	r17,r20,9740 <__alt_data_end+0xfffd7740>
    9784:	9005883a 	mov	r2,r18
    9788:	00000406 	br	979c <__fputwc+0xe8>
    978c:	80c0030b 	ldhu	r3,12(r16)
    9790:	a005883a 	mov	r2,r20
    9794:	18c01014 	ori	r3,r3,64
    9798:	80c0030d 	sth	r3,12(r16)
    979c:	dfc00717 	ldw	ra,28(sp)
    97a0:	dd400617 	ldw	r21,24(sp)
    97a4:	dd000517 	ldw	r20,20(sp)
    97a8:	dcc00417 	ldw	r19,16(sp)
    97ac:	dc800317 	ldw	r18,12(sp)
    97b0:	dc400217 	ldw	r17,8(sp)
    97b4:	dc000117 	ldw	r16,4(sp)
    97b8:	dec00804 	addi	sp,sp,32
    97bc:	f800283a 	ret
    97c0:	800d883a 	mov	r6,r16
    97c4:	29403fcc 	andi	r5,r5,255
    97c8:	9809883a 	mov	r4,r19
    97cc:	0009a2c0 	call	9a2c <__swbuf_r>
    97d0:	10bfffe0 	cmpeqi	r2,r2,-1
    97d4:	10803fcc 	andi	r2,r2,255
    97d8:	103fd626 	beq	r2,zero,9734 <__alt_data_end+0xfffd7734>
    97dc:	00bfffc4 	movi	r2,-1
    97e0:	003fee06 	br	979c <__alt_data_end+0xfffd779c>
    97e4:	90ffffc4 	addi	r3,r18,-1
    97e8:	01003f84 	movi	r4,254
    97ec:	20ffbf36 	bltu	r4,r3,96ec <__alt_data_end+0xfffd76ec>
    97f0:	900b883a 	mov	r5,r18
    97f4:	dc800005 	stb	r18,0(sp)
    97f8:	1029883a 	mov	r20,r2
    97fc:	003fc506 	br	9714 <__alt_data_end+0xfffd7714>
    9800:	800d883a 	mov	r6,r16
    9804:	a80b883a 	mov	r5,r21
    9808:	9809883a 	mov	r4,r19
    980c:	0009a2c0 	call	9a2c <__swbuf_r>
    9810:	10bfffe0 	cmpeqi	r2,r2,-1
    9814:	003fef06 	br	97d4 <__alt_data_end+0xfffd77d4>

00009818 <_fputwc_r>:
    9818:	3080030b 	ldhu	r2,12(r6)
    981c:	10c8000c 	andi	r3,r2,8192
    9820:	1800051e 	bne	r3,zero,9838 <_fputwc_r+0x20>
    9824:	30c01917 	ldw	r3,100(r6)
    9828:	10880014 	ori	r2,r2,8192
    982c:	3080030d 	sth	r2,12(r6)
    9830:	18880014 	ori	r2,r3,8192
    9834:	30801915 	stw	r2,100(r6)
    9838:	00096b41 	jmpi	96b4 <__fputwc>

0000983c <fputwc>:
    983c:	00800074 	movhi	r2,1
    9840:	defffc04 	addi	sp,sp,-16
    9844:	10974b04 	addi	r2,r2,23852
    9848:	dc000115 	stw	r16,4(sp)
    984c:	14000017 	ldw	r16,0(r2)
    9850:	dc400215 	stw	r17,8(sp)
    9854:	dfc00315 	stw	ra,12(sp)
    9858:	2023883a 	mov	r17,r4
    985c:	80000226 	beq	r16,zero,9868 <fputwc+0x2c>
    9860:	80800e17 	ldw	r2,56(r16)
    9864:	10001026 	beq	r2,zero,98a8 <fputwc+0x6c>
    9868:	2880030b 	ldhu	r2,12(r5)
    986c:	10c8000c 	andi	r3,r2,8192
    9870:	1800051e 	bne	r3,zero,9888 <fputwc+0x4c>
    9874:	28c01917 	ldw	r3,100(r5)
    9878:	10880014 	ori	r2,r2,8192
    987c:	2880030d 	sth	r2,12(r5)
    9880:	18880014 	ori	r2,r3,8192
    9884:	28801915 	stw	r2,100(r5)
    9888:	280d883a 	mov	r6,r5
    988c:	8009883a 	mov	r4,r16
    9890:	880b883a 	mov	r5,r17
    9894:	dfc00317 	ldw	ra,12(sp)
    9898:	dc400217 	ldw	r17,8(sp)
    989c:	dc000117 	ldw	r16,4(sp)
    98a0:	dec00404 	addi	sp,sp,16
    98a4:	00096b41 	jmpi	96b4 <__fputwc>
    98a8:	8009883a 	mov	r4,r16
    98ac:	d9400015 	stw	r5,0(sp)
    98b0:	0004a040 	call	4a04 <__sinit>
    98b4:	d9400017 	ldw	r5,0(sp)
    98b8:	003feb06 	br	9868 <__alt_data_end+0xfffd7868>

000098bc <_fstat_r>:
    98bc:	defffd04 	addi	sp,sp,-12
    98c0:	2805883a 	mov	r2,r5
    98c4:	dc000015 	stw	r16,0(sp)
    98c8:	04000074 	movhi	r16,1
    98cc:	dc400115 	stw	r17,4(sp)
    98d0:	841e2704 	addi	r16,r16,30876
    98d4:	2023883a 	mov	r17,r4
    98d8:	300b883a 	mov	r5,r6
    98dc:	1009883a 	mov	r4,r2
    98e0:	dfc00215 	stw	ra,8(sp)
    98e4:	80000015 	stw	zero,0(r16)
    98e8:	000d5280 	call	d528 <fstat>
    98ec:	00ffffc4 	movi	r3,-1
    98f0:	10c00526 	beq	r2,r3,9908 <_fstat_r+0x4c>
    98f4:	dfc00217 	ldw	ra,8(sp)
    98f8:	dc400117 	ldw	r17,4(sp)
    98fc:	dc000017 	ldw	r16,0(sp)
    9900:	dec00304 	addi	sp,sp,12
    9904:	f800283a 	ret
    9908:	80c00017 	ldw	r3,0(r16)
    990c:	183ff926 	beq	r3,zero,98f4 <__alt_data_end+0xfffd78f4>
    9910:	88c00015 	stw	r3,0(r17)
    9914:	003ff706 	br	98f4 <__alt_data_end+0xfffd78f4>

00009918 <_isatty_r>:
    9918:	defffd04 	addi	sp,sp,-12
    991c:	dc000015 	stw	r16,0(sp)
    9920:	04000074 	movhi	r16,1
    9924:	dc400115 	stw	r17,4(sp)
    9928:	841e2704 	addi	r16,r16,30876
    992c:	2023883a 	mov	r17,r4
    9930:	2809883a 	mov	r4,r5
    9934:	dfc00215 	stw	ra,8(sp)
    9938:	80000015 	stw	zero,0(r16)
    993c:	000d61c0 	call	d61c <isatty>
    9940:	00ffffc4 	movi	r3,-1
    9944:	10c00526 	beq	r2,r3,995c <_isatty_r+0x44>
    9948:	dfc00217 	ldw	ra,8(sp)
    994c:	dc400117 	ldw	r17,4(sp)
    9950:	dc000017 	ldw	r16,0(sp)
    9954:	dec00304 	addi	sp,sp,12
    9958:	f800283a 	ret
    995c:	80c00017 	ldw	r3,0(r16)
    9960:	183ff926 	beq	r3,zero,9948 <__alt_data_end+0xfffd7948>
    9964:	88c00015 	stw	r3,0(r17)
    9968:	003ff706 	br	9948 <__alt_data_end+0xfffd7948>

0000996c <_lseek_r>:
    996c:	defffd04 	addi	sp,sp,-12
    9970:	2805883a 	mov	r2,r5
    9974:	dc000015 	stw	r16,0(sp)
    9978:	04000074 	movhi	r16,1
    997c:	dc400115 	stw	r17,4(sp)
    9980:	300b883a 	mov	r5,r6
    9984:	841e2704 	addi	r16,r16,30876
    9988:	2023883a 	mov	r17,r4
    998c:	380d883a 	mov	r6,r7
    9990:	1009883a 	mov	r4,r2
    9994:	dfc00215 	stw	ra,8(sp)
    9998:	80000015 	stw	zero,0(r16)
    999c:	000d7f00 	call	d7f0 <lseek>
    99a0:	00ffffc4 	movi	r3,-1
    99a4:	10c00526 	beq	r2,r3,99bc <_lseek_r+0x50>
    99a8:	dfc00217 	ldw	ra,8(sp)
    99ac:	dc400117 	ldw	r17,4(sp)
    99b0:	dc000017 	ldw	r16,0(sp)
    99b4:	dec00304 	addi	sp,sp,12
    99b8:	f800283a 	ret
    99bc:	80c00017 	ldw	r3,0(r16)
    99c0:	183ff926 	beq	r3,zero,99a8 <__alt_data_end+0xfffd79a8>
    99c4:	88c00015 	stw	r3,0(r17)
    99c8:	003ff706 	br	99a8 <__alt_data_end+0xfffd79a8>

000099cc <_read_r>:
    99cc:	defffd04 	addi	sp,sp,-12
    99d0:	2805883a 	mov	r2,r5
    99d4:	dc000015 	stw	r16,0(sp)
    99d8:	04000074 	movhi	r16,1
    99dc:	dc400115 	stw	r17,4(sp)
    99e0:	300b883a 	mov	r5,r6
    99e4:	841e2704 	addi	r16,r16,30876
    99e8:	2023883a 	mov	r17,r4
    99ec:	380d883a 	mov	r6,r7
    99f0:	1009883a 	mov	r4,r2
    99f4:	dfc00215 	stw	ra,8(sp)
    99f8:	80000015 	stw	zero,0(r16)
    99fc:	000d9cc0 	call	d9cc <read>
    9a00:	00ffffc4 	movi	r3,-1
    9a04:	10c00526 	beq	r2,r3,9a1c <_read_r+0x50>
    9a08:	dfc00217 	ldw	ra,8(sp)
    9a0c:	dc400117 	ldw	r17,4(sp)
    9a10:	dc000017 	ldw	r16,0(sp)
    9a14:	dec00304 	addi	sp,sp,12
    9a18:	f800283a 	ret
    9a1c:	80c00017 	ldw	r3,0(r16)
    9a20:	183ff926 	beq	r3,zero,9a08 <__alt_data_end+0xfffd7a08>
    9a24:	88c00015 	stw	r3,0(r17)
    9a28:	003ff706 	br	9a08 <__alt_data_end+0xfffd7a08>

00009a2c <__swbuf_r>:
    9a2c:	defffb04 	addi	sp,sp,-20
    9a30:	dcc00315 	stw	r19,12(sp)
    9a34:	dc800215 	stw	r18,8(sp)
    9a38:	dc000015 	stw	r16,0(sp)
    9a3c:	dfc00415 	stw	ra,16(sp)
    9a40:	dc400115 	stw	r17,4(sp)
    9a44:	2025883a 	mov	r18,r4
    9a48:	2827883a 	mov	r19,r5
    9a4c:	3021883a 	mov	r16,r6
    9a50:	20000226 	beq	r4,zero,9a5c <__swbuf_r+0x30>
    9a54:	20800e17 	ldw	r2,56(r4)
    9a58:	10004226 	beq	r2,zero,9b64 <__swbuf_r+0x138>
    9a5c:	80800617 	ldw	r2,24(r16)
    9a60:	8100030b 	ldhu	r4,12(r16)
    9a64:	80800215 	stw	r2,8(r16)
    9a68:	2080020c 	andi	r2,r4,8
    9a6c:	10003626 	beq	r2,zero,9b48 <__swbuf_r+0x11c>
    9a70:	80c00417 	ldw	r3,16(r16)
    9a74:	18003426 	beq	r3,zero,9b48 <__swbuf_r+0x11c>
    9a78:	2088000c 	andi	r2,r4,8192
    9a7c:	9c403fcc 	andi	r17,r19,255
    9a80:	10001a26 	beq	r2,zero,9aec <__swbuf_r+0xc0>
    9a84:	80800017 	ldw	r2,0(r16)
    9a88:	81000517 	ldw	r4,20(r16)
    9a8c:	10c7c83a 	sub	r3,r2,r3
    9a90:	1900200e 	bge	r3,r4,9b14 <__swbuf_r+0xe8>
    9a94:	18c00044 	addi	r3,r3,1
    9a98:	81000217 	ldw	r4,8(r16)
    9a9c:	11400044 	addi	r5,r2,1
    9aa0:	81400015 	stw	r5,0(r16)
    9aa4:	213fffc4 	addi	r4,r4,-1
    9aa8:	81000215 	stw	r4,8(r16)
    9aac:	14c00005 	stb	r19,0(r2)
    9ab0:	80800517 	ldw	r2,20(r16)
    9ab4:	10c01e26 	beq	r2,r3,9b30 <__swbuf_r+0x104>
    9ab8:	8080030b 	ldhu	r2,12(r16)
    9abc:	1080004c 	andi	r2,r2,1
    9ac0:	10000226 	beq	r2,zero,9acc <__swbuf_r+0xa0>
    9ac4:	00800284 	movi	r2,10
    9ac8:	88801926 	beq	r17,r2,9b30 <__swbuf_r+0x104>
    9acc:	8805883a 	mov	r2,r17
    9ad0:	dfc00417 	ldw	ra,16(sp)
    9ad4:	dcc00317 	ldw	r19,12(sp)
    9ad8:	dc800217 	ldw	r18,8(sp)
    9adc:	dc400117 	ldw	r17,4(sp)
    9ae0:	dc000017 	ldw	r16,0(sp)
    9ae4:	dec00504 	addi	sp,sp,20
    9ae8:	f800283a 	ret
    9aec:	81401917 	ldw	r5,100(r16)
    9af0:	00b7ffc4 	movi	r2,-8193
    9af4:	21080014 	ori	r4,r4,8192
    9af8:	2884703a 	and	r2,r5,r2
    9afc:	80801915 	stw	r2,100(r16)
    9b00:	80800017 	ldw	r2,0(r16)
    9b04:	8100030d 	sth	r4,12(r16)
    9b08:	81000517 	ldw	r4,20(r16)
    9b0c:	10c7c83a 	sub	r3,r2,r3
    9b10:	193fe016 	blt	r3,r4,9a94 <__alt_data_end+0xfffd7a94>
    9b14:	800b883a 	mov	r5,r16
    9b18:	9009883a 	mov	r4,r18
    9b1c:	00046180 	call	4618 <_fflush_r>
    9b20:	1000071e 	bne	r2,zero,9b40 <__swbuf_r+0x114>
    9b24:	80800017 	ldw	r2,0(r16)
    9b28:	00c00044 	movi	r3,1
    9b2c:	003fda06 	br	9a98 <__alt_data_end+0xfffd7a98>
    9b30:	800b883a 	mov	r5,r16
    9b34:	9009883a 	mov	r4,r18
    9b38:	00046180 	call	4618 <_fflush_r>
    9b3c:	103fe326 	beq	r2,zero,9acc <__alt_data_end+0xfffd7acc>
    9b40:	00bfffc4 	movi	r2,-1
    9b44:	003fe206 	br	9ad0 <__alt_data_end+0xfffd7ad0>
    9b48:	800b883a 	mov	r5,r16
    9b4c:	9009883a 	mov	r4,r18
    9b50:	00029f80 	call	29f8 <__swsetup_r>
    9b54:	103ffa1e 	bne	r2,zero,9b40 <__alt_data_end+0xfffd7b40>
    9b58:	8100030b 	ldhu	r4,12(r16)
    9b5c:	80c00417 	ldw	r3,16(r16)
    9b60:	003fc506 	br	9a78 <__alt_data_end+0xfffd7a78>
    9b64:	0004a040 	call	4a04 <__sinit>
    9b68:	003fbc06 	br	9a5c <__alt_data_end+0xfffd7a5c>

00009b6c <__swbuf>:
    9b6c:	00800074 	movhi	r2,1
    9b70:	10974b04 	addi	r2,r2,23852
    9b74:	280d883a 	mov	r6,r5
    9b78:	200b883a 	mov	r5,r4
    9b7c:	11000017 	ldw	r4,0(r2)
    9b80:	0009a2c1 	jmpi	9a2c <__swbuf_r>

00009b84 <_wcrtomb_r>:
    9b84:	defff604 	addi	sp,sp,-40
    9b88:	00800074 	movhi	r2,1
    9b8c:	dc800815 	stw	r18,32(sp)
    9b90:	dc400715 	stw	r17,28(sp)
    9b94:	dc000615 	stw	r16,24(sp)
    9b98:	10974f04 	addi	r2,r2,23868
    9b9c:	dfc00915 	stw	ra,36(sp)
    9ba0:	2021883a 	mov	r16,r4
    9ba4:	3823883a 	mov	r17,r7
    9ba8:	14800017 	ldw	r18,0(r2)
    9bac:	28001426 	beq	r5,zero,9c00 <_wcrtomb_r+0x7c>
    9bb0:	d9400415 	stw	r5,16(sp)
    9bb4:	d9800515 	stw	r6,20(sp)
    9bb8:	00055540 	call	5554 <__locale_charset>
    9bbc:	d9800517 	ldw	r6,20(sp)
    9bc0:	d9400417 	ldw	r5,16(sp)
    9bc4:	100f883a 	mov	r7,r2
    9bc8:	dc400015 	stw	r17,0(sp)
    9bcc:	8009883a 	mov	r4,r16
    9bd0:	903ee83a 	callr	r18
    9bd4:	00ffffc4 	movi	r3,-1
    9bd8:	10c0031e 	bne	r2,r3,9be8 <_wcrtomb_r+0x64>
    9bdc:	88000015 	stw	zero,0(r17)
    9be0:	00c02284 	movi	r3,138
    9be4:	80c00015 	stw	r3,0(r16)
    9be8:	dfc00917 	ldw	ra,36(sp)
    9bec:	dc800817 	ldw	r18,32(sp)
    9bf0:	dc400717 	ldw	r17,28(sp)
    9bf4:	dc000617 	ldw	r16,24(sp)
    9bf8:	dec00a04 	addi	sp,sp,40
    9bfc:	f800283a 	ret
    9c00:	00055540 	call	5554 <__locale_charset>
    9c04:	100f883a 	mov	r7,r2
    9c08:	dc400015 	stw	r17,0(sp)
    9c0c:	000d883a 	mov	r6,zero
    9c10:	d9400104 	addi	r5,sp,4
    9c14:	8009883a 	mov	r4,r16
    9c18:	903ee83a 	callr	r18
    9c1c:	003fed06 	br	9bd4 <__alt_data_end+0xfffd7bd4>

00009c20 <wcrtomb>:
    9c20:	defff604 	addi	sp,sp,-40
    9c24:	00800074 	movhi	r2,1
    9c28:	dc800615 	stw	r18,24(sp)
    9c2c:	dc400515 	stw	r17,20(sp)
    9c30:	10974b04 	addi	r2,r2,23852
    9c34:	dfc00915 	stw	ra,36(sp)
    9c38:	dd000815 	stw	r20,32(sp)
    9c3c:	dcc00715 	stw	r19,28(sp)
    9c40:	dc000415 	stw	r16,16(sp)
    9c44:	3025883a 	mov	r18,r6
    9c48:	14400017 	ldw	r17,0(r2)
    9c4c:	20001926 	beq	r4,zero,9cb4 <wcrtomb+0x94>
    9c50:	00800074 	movhi	r2,1
    9c54:	10974f04 	addi	r2,r2,23868
    9c58:	15000017 	ldw	r20,0(r2)
    9c5c:	2021883a 	mov	r16,r4
    9c60:	2827883a 	mov	r19,r5
    9c64:	00055540 	call	5554 <__locale_charset>
    9c68:	100f883a 	mov	r7,r2
    9c6c:	dc800015 	stw	r18,0(sp)
    9c70:	980d883a 	mov	r6,r19
    9c74:	800b883a 	mov	r5,r16
    9c78:	8809883a 	mov	r4,r17
    9c7c:	a03ee83a 	callr	r20
    9c80:	00ffffc4 	movi	r3,-1
    9c84:	10c0031e 	bne	r2,r3,9c94 <wcrtomb+0x74>
    9c88:	90000015 	stw	zero,0(r18)
    9c8c:	00c02284 	movi	r3,138
    9c90:	88c00015 	stw	r3,0(r17)
    9c94:	dfc00917 	ldw	ra,36(sp)
    9c98:	dd000817 	ldw	r20,32(sp)
    9c9c:	dcc00717 	ldw	r19,28(sp)
    9ca0:	dc800617 	ldw	r18,24(sp)
    9ca4:	dc400517 	ldw	r17,20(sp)
    9ca8:	dc000417 	ldw	r16,16(sp)
    9cac:	dec00a04 	addi	sp,sp,40
    9cb0:	f800283a 	ret
    9cb4:	00800074 	movhi	r2,1
    9cb8:	10974f04 	addi	r2,r2,23868
    9cbc:	14000017 	ldw	r16,0(r2)
    9cc0:	00055540 	call	5554 <__locale_charset>
    9cc4:	100f883a 	mov	r7,r2
    9cc8:	dc800015 	stw	r18,0(sp)
    9ccc:	000d883a 	mov	r6,zero
    9cd0:	d9400104 	addi	r5,sp,4
    9cd4:	8809883a 	mov	r4,r17
    9cd8:	803ee83a 	callr	r16
    9cdc:	003fe806 	br	9c80 <__alt_data_end+0xfffd7c80>

00009ce0 <__ascii_wctomb>:
    9ce0:	28000526 	beq	r5,zero,9cf8 <__ascii_wctomb+0x18>
    9ce4:	00803fc4 	movi	r2,255
    9ce8:	11800536 	bltu	r2,r6,9d00 <__ascii_wctomb+0x20>
    9cec:	29800005 	stb	r6,0(r5)
    9cf0:	00800044 	movi	r2,1
    9cf4:	f800283a 	ret
    9cf8:	0005883a 	mov	r2,zero
    9cfc:	f800283a 	ret
    9d00:	00802284 	movi	r2,138
    9d04:	20800015 	stw	r2,0(r4)
    9d08:	00bfffc4 	movi	r2,-1
    9d0c:	f800283a 	ret

00009d10 <_wctomb_r>:
    9d10:	00800074 	movhi	r2,1
    9d14:	defff904 	addi	sp,sp,-28
    9d18:	10974f04 	addi	r2,r2,23868
    9d1c:	dfc00615 	stw	ra,24(sp)
    9d20:	dc400515 	stw	r17,20(sp)
    9d24:	dc000415 	stw	r16,16(sp)
    9d28:	3823883a 	mov	r17,r7
    9d2c:	14000017 	ldw	r16,0(r2)
    9d30:	d9000115 	stw	r4,4(sp)
    9d34:	d9400215 	stw	r5,8(sp)
    9d38:	d9800315 	stw	r6,12(sp)
    9d3c:	00055540 	call	5554 <__locale_charset>
    9d40:	d9800317 	ldw	r6,12(sp)
    9d44:	d9400217 	ldw	r5,8(sp)
    9d48:	d9000117 	ldw	r4,4(sp)
    9d4c:	100f883a 	mov	r7,r2
    9d50:	dc400015 	stw	r17,0(sp)
    9d54:	803ee83a 	callr	r16
    9d58:	dfc00617 	ldw	ra,24(sp)
    9d5c:	dc400517 	ldw	r17,20(sp)
    9d60:	dc000417 	ldw	r16,16(sp)
    9d64:	dec00704 	addi	sp,sp,28
    9d68:	f800283a 	ret

00009d6c <__udivdi3>:
    9d6c:	defff404 	addi	sp,sp,-48
    9d70:	dcc00515 	stw	r19,20(sp)
    9d74:	dc000215 	stw	r16,8(sp)
    9d78:	dfc00b15 	stw	ra,44(sp)
    9d7c:	df000a15 	stw	fp,40(sp)
    9d80:	ddc00915 	stw	r23,36(sp)
    9d84:	dd800815 	stw	r22,32(sp)
    9d88:	dd400715 	stw	r21,28(sp)
    9d8c:	dd000615 	stw	r20,24(sp)
    9d90:	dc800415 	stw	r18,16(sp)
    9d94:	dc400315 	stw	r17,12(sp)
    9d98:	2027883a 	mov	r19,r4
    9d9c:	2821883a 	mov	r16,r5
    9da0:	3800461e 	bne	r7,zero,9ebc <__udivdi3+0x150>
    9da4:	3023883a 	mov	r17,r6
    9da8:	2025883a 	mov	r18,r4
    9dac:	2980572e 	bgeu	r5,r6,9f0c <__udivdi3+0x1a0>
    9db0:	00bfffd4 	movui	r2,65535
    9db4:	282d883a 	mov	r22,r5
    9db8:	1180b236 	bltu	r2,r6,a084 <__udivdi3+0x318>
    9dbc:	00803fc4 	movi	r2,255
    9dc0:	1185803a 	cmpltu	r2,r2,r6
    9dc4:	100490fa 	slli	r2,r2,3
    9dc8:	3086d83a 	srl	r3,r6,r2
    9dcc:	01000074 	movhi	r4,1
    9dd0:	21104804 	addi	r4,r4,16672
    9dd4:	20c7883a 	add	r3,r4,r3
    9dd8:	18c00003 	ldbu	r3,0(r3)
    9ddc:	1885883a 	add	r2,r3,r2
    9de0:	00c00804 	movi	r3,32
    9de4:	1887c83a 	sub	r3,r3,r2
    9de8:	18000526 	beq	r3,zero,9e00 <__udivdi3+0x94>
    9dec:	80e0983a 	sll	r16,r16,r3
    9df0:	9884d83a 	srl	r2,r19,r2
    9df4:	30e2983a 	sll	r17,r6,r3
    9df8:	98e4983a 	sll	r18,r19,r3
    9dfc:	142cb03a 	or	r22,r2,r16
    9e00:	882ad43a 	srli	r21,r17,16
    9e04:	b009883a 	mov	r4,r22
    9e08:	8d3fffcc 	andi	r20,r17,65535
    9e0c:	a80b883a 	mov	r5,r21
    9e10:	000aa880 	call	aa88 <__umodsi3>
    9e14:	b009883a 	mov	r4,r22
    9e18:	a80b883a 	mov	r5,r21
    9e1c:	1027883a 	mov	r19,r2
    9e20:	000aa240 	call	aa24 <__udivsi3>
    9e24:	100b883a 	mov	r5,r2
    9e28:	a009883a 	mov	r4,r20
    9e2c:	102d883a 	mov	r22,r2
    9e30:	000aae00 	call	aae0 <__mulsi3>
    9e34:	9826943a 	slli	r19,r19,16
    9e38:	9006d43a 	srli	r3,r18,16
    9e3c:	1cc6b03a 	or	r3,r3,r19
    9e40:	1880052e 	bgeu	r3,r2,9e58 <__udivdi3+0xec>
    9e44:	1c47883a 	add	r3,r3,r17
    9e48:	b13fffc4 	addi	r4,r22,-1
    9e4c:	1c400136 	bltu	r3,r17,9e54 <__udivdi3+0xe8>
    9e50:	18814236 	bltu	r3,r2,a35c <__udivdi3+0x5f0>
    9e54:	202d883a 	mov	r22,r4
    9e58:	18a1c83a 	sub	r16,r3,r2
    9e5c:	8009883a 	mov	r4,r16
    9e60:	a80b883a 	mov	r5,r21
    9e64:	000aa880 	call	aa88 <__umodsi3>
    9e68:	1027883a 	mov	r19,r2
    9e6c:	8009883a 	mov	r4,r16
    9e70:	a80b883a 	mov	r5,r21
    9e74:	9826943a 	slli	r19,r19,16
    9e78:	000aa240 	call	aa24 <__udivsi3>
    9e7c:	100b883a 	mov	r5,r2
    9e80:	a009883a 	mov	r4,r20
    9e84:	94bfffcc 	andi	r18,r18,65535
    9e88:	1021883a 	mov	r16,r2
    9e8c:	94e4b03a 	or	r18,r18,r19
    9e90:	000aae00 	call	aae0 <__mulsi3>
    9e94:	9080052e 	bgeu	r18,r2,9eac <__udivdi3+0x140>
    9e98:	8ca5883a 	add	r18,r17,r18
    9e9c:	80ffffc4 	addi	r3,r16,-1
    9ea0:	94410c36 	bltu	r18,r17,a2d4 <__udivdi3+0x568>
    9ea4:	90810b2e 	bgeu	r18,r2,a2d4 <__udivdi3+0x568>
    9ea8:	843fff84 	addi	r16,r16,-2
    9eac:	b004943a 	slli	r2,r22,16
    9eb0:	0007883a 	mov	r3,zero
    9eb4:	1404b03a 	or	r2,r2,r16
    9eb8:	00005e06 	br	a034 <__udivdi3+0x2c8>
    9ebc:	29c05b36 	bltu	r5,r7,a02c <__udivdi3+0x2c0>
    9ec0:	00bfffd4 	movui	r2,65535
    9ec4:	11c0672e 	bgeu	r2,r7,a064 <__udivdi3+0x2f8>
    9ec8:	00804034 	movhi	r2,256
    9ecc:	10bfffc4 	addi	r2,r2,-1
    9ed0:	11c10a36 	bltu	r2,r7,a2fc <__udivdi3+0x590>
    9ed4:	00800404 	movi	r2,16
    9ed8:	3886d83a 	srl	r3,r7,r2
    9edc:	01000074 	movhi	r4,1
    9ee0:	21104804 	addi	r4,r4,16672
    9ee4:	20c7883a 	add	r3,r4,r3
    9ee8:	18c00003 	ldbu	r3,0(r3)
    9eec:	05c00804 	movi	r23,32
    9ef0:	1885883a 	add	r2,r3,r2
    9ef4:	b8afc83a 	sub	r23,r23,r2
    9ef8:	b800671e 	bne	r23,zero,a098 <__udivdi3+0x32c>
    9efc:	3c010536 	bltu	r7,r16,a314 <__udivdi3+0x5a8>
    9f00:	9985403a 	cmpgeu	r2,r19,r6
    9f04:	0007883a 	mov	r3,zero
    9f08:	00004a06 	br	a034 <__udivdi3+0x2c8>
    9f0c:	3000041e 	bne	r6,zero,9f20 <__udivdi3+0x1b4>
    9f10:	000b883a 	mov	r5,zero
    9f14:	01000044 	movi	r4,1
    9f18:	000aa240 	call	aa24 <__udivsi3>
    9f1c:	1023883a 	mov	r17,r2
    9f20:	00bfffd4 	movui	r2,65535
    9f24:	1440532e 	bgeu	r2,r17,a074 <__udivdi3+0x308>
    9f28:	00804034 	movhi	r2,256
    9f2c:	10bfffc4 	addi	r2,r2,-1
    9f30:	1440f436 	bltu	r2,r17,a304 <__udivdi3+0x598>
    9f34:	00800404 	movi	r2,16
    9f38:	8886d83a 	srl	r3,r17,r2
    9f3c:	01000074 	movhi	r4,1
    9f40:	21104804 	addi	r4,r4,16672
    9f44:	20c7883a 	add	r3,r4,r3
    9f48:	18c00003 	ldbu	r3,0(r3)
    9f4c:	1885883a 	add	r2,r3,r2
    9f50:	00c00804 	movi	r3,32
    9f54:	1887c83a 	sub	r3,r3,r2
    9f58:	1800a51e 	bne	r3,zero,a1f0 <__udivdi3+0x484>
    9f5c:	882ad43a 	srli	r21,r17,16
    9f60:	8461c83a 	sub	r16,r16,r17
    9f64:	8d3fffcc 	andi	r20,r17,65535
    9f68:	00c00044 	movi	r3,1
    9f6c:	a80b883a 	mov	r5,r21
    9f70:	8009883a 	mov	r4,r16
    9f74:	d8c00115 	stw	r3,4(sp)
    9f78:	000aa880 	call	aa88 <__umodsi3>
    9f7c:	a80b883a 	mov	r5,r21
    9f80:	8009883a 	mov	r4,r16
    9f84:	1027883a 	mov	r19,r2
    9f88:	000aa240 	call	aa24 <__udivsi3>
    9f8c:	a00b883a 	mov	r5,r20
    9f90:	1009883a 	mov	r4,r2
    9f94:	102d883a 	mov	r22,r2
    9f98:	000aae00 	call	aae0 <__mulsi3>
    9f9c:	9826943a 	slli	r19,r19,16
    9fa0:	900ed43a 	srli	r7,r18,16
    9fa4:	d8c00117 	ldw	r3,4(sp)
    9fa8:	3cceb03a 	or	r7,r7,r19
    9fac:	3880052e 	bgeu	r7,r2,9fc4 <__udivdi3+0x258>
    9fb0:	3c4f883a 	add	r7,r7,r17
    9fb4:	b13fffc4 	addi	r4,r22,-1
    9fb8:	3c400136 	bltu	r7,r17,9fc0 <__udivdi3+0x254>
    9fbc:	3880e436 	bltu	r7,r2,a350 <__udivdi3+0x5e4>
    9fc0:	202d883a 	mov	r22,r4
    9fc4:	38a1c83a 	sub	r16,r7,r2
    9fc8:	8009883a 	mov	r4,r16
    9fcc:	a80b883a 	mov	r5,r21
    9fd0:	d8c00115 	stw	r3,4(sp)
    9fd4:	000aa880 	call	aa88 <__umodsi3>
    9fd8:	1027883a 	mov	r19,r2
    9fdc:	8009883a 	mov	r4,r16
    9fe0:	a80b883a 	mov	r5,r21
    9fe4:	9826943a 	slli	r19,r19,16
    9fe8:	000aa240 	call	aa24 <__udivsi3>
    9fec:	a00b883a 	mov	r5,r20
    9ff0:	1009883a 	mov	r4,r2
    9ff4:	94bfffcc 	andi	r18,r18,65535
    9ff8:	1021883a 	mov	r16,r2
    9ffc:	94e4b03a 	or	r18,r18,r19
    a000:	000aae00 	call	aae0 <__mulsi3>
    a004:	d8c00117 	ldw	r3,4(sp)
    a008:	9080052e 	bgeu	r18,r2,a020 <__udivdi3+0x2b4>
    a00c:	8ca5883a 	add	r18,r17,r18
    a010:	813fffc4 	addi	r4,r16,-1
    a014:	9440ad36 	bltu	r18,r17,a2cc <__udivdi3+0x560>
    a018:	9080ac2e 	bgeu	r18,r2,a2cc <__udivdi3+0x560>
    a01c:	843fff84 	addi	r16,r16,-2
    a020:	b004943a 	slli	r2,r22,16
    a024:	1404b03a 	or	r2,r2,r16
    a028:	00000206 	br	a034 <__udivdi3+0x2c8>
    a02c:	0007883a 	mov	r3,zero
    a030:	0005883a 	mov	r2,zero
    a034:	dfc00b17 	ldw	ra,44(sp)
    a038:	df000a17 	ldw	fp,40(sp)
    a03c:	ddc00917 	ldw	r23,36(sp)
    a040:	dd800817 	ldw	r22,32(sp)
    a044:	dd400717 	ldw	r21,28(sp)
    a048:	dd000617 	ldw	r20,24(sp)
    a04c:	dcc00517 	ldw	r19,20(sp)
    a050:	dc800417 	ldw	r18,16(sp)
    a054:	dc400317 	ldw	r17,12(sp)
    a058:	dc000217 	ldw	r16,8(sp)
    a05c:	dec00c04 	addi	sp,sp,48
    a060:	f800283a 	ret
    a064:	00803fc4 	movi	r2,255
    a068:	11c5803a 	cmpltu	r2,r2,r7
    a06c:	100490fa 	slli	r2,r2,3
    a070:	003f9906 	br	9ed8 <__alt_data_end+0xfffd7ed8>
    a074:	00803fc4 	movi	r2,255
    a078:	1445803a 	cmpltu	r2,r2,r17
    a07c:	100490fa 	slli	r2,r2,3
    a080:	003fad06 	br	9f38 <__alt_data_end+0xfffd7f38>
    a084:	00804034 	movhi	r2,256
    a088:	10bfffc4 	addi	r2,r2,-1
    a08c:	11809f36 	bltu	r2,r6,a30c <__udivdi3+0x5a0>
    a090:	00800404 	movi	r2,16
    a094:	003f4c06 	br	9dc8 <__alt_data_end+0xfffd7dc8>
    a098:	3dce983a 	sll	r7,r7,r23
    a09c:	30b8d83a 	srl	fp,r6,r2
    a0a0:	80a2d83a 	srl	r17,r16,r2
    a0a4:	35cc983a 	sll	r6,r6,r23
    a0a8:	3f38b03a 	or	fp,r7,fp
    a0ac:	e024d43a 	srli	r18,fp,16
    a0b0:	9884d83a 	srl	r2,r19,r2
    a0b4:	85e0983a 	sll	r16,r16,r23
    a0b8:	8809883a 	mov	r4,r17
    a0bc:	900b883a 	mov	r5,r18
    a0c0:	d9800015 	stw	r6,0(sp)
    a0c4:	1420b03a 	or	r16,r2,r16
    a0c8:	000aa880 	call	aa88 <__umodsi3>
    a0cc:	900b883a 	mov	r5,r18
    a0d0:	8809883a 	mov	r4,r17
    a0d4:	1029883a 	mov	r20,r2
    a0d8:	e5bfffcc 	andi	r22,fp,65535
    a0dc:	000aa240 	call	aa24 <__udivsi3>
    a0e0:	100b883a 	mov	r5,r2
    a0e4:	b009883a 	mov	r4,r22
    a0e8:	102b883a 	mov	r21,r2
    a0ec:	000aae00 	call	aae0 <__mulsi3>
    a0f0:	a028943a 	slli	r20,r20,16
    a0f4:	8006d43a 	srli	r3,r16,16
    a0f8:	1d06b03a 	or	r3,r3,r20
    a0fc:	1880042e 	bgeu	r3,r2,a110 <__udivdi3+0x3a4>
    a100:	1f07883a 	add	r3,r3,fp
    a104:	a93fffc4 	addi	r4,r21,-1
    a108:	1f00892e 	bgeu	r3,fp,a330 <__udivdi3+0x5c4>
    a10c:	202b883a 	mov	r21,r4
    a110:	18a3c83a 	sub	r17,r3,r2
    a114:	8809883a 	mov	r4,r17
    a118:	900b883a 	mov	r5,r18
    a11c:	000aa880 	call	aa88 <__umodsi3>
    a120:	1029883a 	mov	r20,r2
    a124:	8809883a 	mov	r4,r17
    a128:	900b883a 	mov	r5,r18
    a12c:	a028943a 	slli	r20,r20,16
    a130:	000aa240 	call	aa24 <__udivsi3>
    a134:	100b883a 	mov	r5,r2
    a138:	b009883a 	mov	r4,r22
    a13c:	843fffcc 	andi	r16,r16,65535
    a140:	1023883a 	mov	r17,r2
    a144:	8520b03a 	or	r16,r16,r20
    a148:	000aae00 	call	aae0 <__mulsi3>
    a14c:	8080042e 	bgeu	r16,r2,a160 <__udivdi3+0x3f4>
    a150:	8721883a 	add	r16,r16,fp
    a154:	88ffffc4 	addi	r3,r17,-1
    a158:	8700712e 	bgeu	r16,fp,a320 <__udivdi3+0x5b4>
    a15c:	1823883a 	mov	r17,r3
    a160:	a80e943a 	slli	r7,r21,16
    a164:	d8c00017 	ldw	r3,0(sp)
    a168:	80a1c83a 	sub	r16,r16,r2
    a16c:	3c64b03a 	or	r18,r7,r17
    a170:	1d3fffcc 	andi	r20,r3,65535
    a174:	9022d43a 	srli	r17,r18,16
    a178:	95bfffcc 	andi	r22,r18,65535
    a17c:	a00b883a 	mov	r5,r20
    a180:	b009883a 	mov	r4,r22
    a184:	182ad43a 	srli	r21,r3,16
    a188:	000aae00 	call	aae0 <__mulsi3>
    a18c:	a00b883a 	mov	r5,r20
    a190:	8809883a 	mov	r4,r17
    a194:	1039883a 	mov	fp,r2
    a198:	000aae00 	call	aae0 <__mulsi3>
    a19c:	8809883a 	mov	r4,r17
    a1a0:	a80b883a 	mov	r5,r21
    a1a4:	1029883a 	mov	r20,r2
    a1a8:	000aae00 	call	aae0 <__mulsi3>
    a1ac:	a80b883a 	mov	r5,r21
    a1b0:	b009883a 	mov	r4,r22
    a1b4:	1023883a 	mov	r17,r2
    a1b8:	000aae00 	call	aae0 <__mulsi3>
    a1bc:	e006d43a 	srli	r3,fp,16
    a1c0:	1505883a 	add	r2,r2,r20
    a1c4:	1887883a 	add	r3,r3,r2
    a1c8:	1d00022e 	bgeu	r3,r20,a1d4 <__udivdi3+0x468>
    a1cc:	00800074 	movhi	r2,1
    a1d0:	88a3883a 	add	r17,r17,r2
    a1d4:	1804d43a 	srli	r2,r3,16
    a1d8:	1463883a 	add	r17,r2,r17
    a1dc:	84404436 	bltu	r16,r17,a2f0 <__udivdi3+0x584>
    a1e0:	84403e26 	beq	r16,r17,a2dc <__udivdi3+0x570>
    a1e4:	9005883a 	mov	r2,r18
    a1e8:	0007883a 	mov	r3,zero
    a1ec:	003f9106 	br	a034 <__alt_data_end+0xfffd8034>
    a1f0:	88e2983a 	sll	r17,r17,r3
    a1f4:	80aed83a 	srl	r23,r16,r2
    a1f8:	80e0983a 	sll	r16,r16,r3
    a1fc:	882ad43a 	srli	r21,r17,16
    a200:	9884d83a 	srl	r2,r19,r2
    a204:	b809883a 	mov	r4,r23
    a208:	a80b883a 	mov	r5,r21
    a20c:	98e4983a 	sll	r18,r19,r3
    a210:	142cb03a 	or	r22,r2,r16
    a214:	000aa880 	call	aa88 <__umodsi3>
    a218:	b809883a 	mov	r4,r23
    a21c:	a80b883a 	mov	r5,r21
    a220:	1027883a 	mov	r19,r2
    a224:	8d3fffcc 	andi	r20,r17,65535
    a228:	000aa240 	call	aa24 <__udivsi3>
    a22c:	a009883a 	mov	r4,r20
    a230:	100b883a 	mov	r5,r2
    a234:	102f883a 	mov	r23,r2
    a238:	000aae00 	call	aae0 <__mulsi3>
    a23c:	9826943a 	slli	r19,r19,16
    a240:	b008d43a 	srli	r4,r22,16
    a244:	24c8b03a 	or	r4,r4,r19
    a248:	2080062e 	bgeu	r4,r2,a264 <__udivdi3+0x4f8>
    a24c:	2449883a 	add	r4,r4,r17
    a250:	b8ffffc4 	addi	r3,r23,-1
    a254:	24403c36 	bltu	r4,r17,a348 <__udivdi3+0x5dc>
    a258:	20803b2e 	bgeu	r4,r2,a348 <__udivdi3+0x5dc>
    a25c:	bdffff84 	addi	r23,r23,-2
    a260:	2449883a 	add	r4,r4,r17
    a264:	20a1c83a 	sub	r16,r4,r2
    a268:	a80b883a 	mov	r5,r21
    a26c:	8009883a 	mov	r4,r16
    a270:	000aa880 	call	aa88 <__umodsi3>
    a274:	a80b883a 	mov	r5,r21
    a278:	8009883a 	mov	r4,r16
    a27c:	1027883a 	mov	r19,r2
    a280:	000aa240 	call	aa24 <__udivsi3>
    a284:	a009883a 	mov	r4,r20
    a288:	100b883a 	mov	r5,r2
    a28c:	9826943a 	slli	r19,r19,16
    a290:	1039883a 	mov	fp,r2
    a294:	000aae00 	call	aae0 <__mulsi3>
    a298:	b13fffcc 	andi	r4,r22,65535
    a29c:	24c8b03a 	or	r4,r4,r19
    a2a0:	2080062e 	bgeu	r4,r2,a2bc <__udivdi3+0x550>
    a2a4:	2449883a 	add	r4,r4,r17
    a2a8:	e0ffffc4 	addi	r3,fp,-1
    a2ac:	24402436 	bltu	r4,r17,a340 <__udivdi3+0x5d4>
    a2b0:	2080232e 	bgeu	r4,r2,a340 <__udivdi3+0x5d4>
    a2b4:	e73fff84 	addi	fp,fp,-2
    a2b8:	2449883a 	add	r4,r4,r17
    a2bc:	b82e943a 	slli	r23,r23,16
    a2c0:	20a1c83a 	sub	r16,r4,r2
    a2c4:	bf06b03a 	or	r3,r23,fp
    a2c8:	003f2806 	br	9f6c <__alt_data_end+0xfffd7f6c>
    a2cc:	2021883a 	mov	r16,r4
    a2d0:	003f5306 	br	a020 <__alt_data_end+0xfffd8020>
    a2d4:	1821883a 	mov	r16,r3
    a2d8:	003ef406 	br	9eac <__alt_data_end+0xfffd7eac>
    a2dc:	1806943a 	slli	r3,r3,16
    a2e0:	9de6983a 	sll	r19,r19,r23
    a2e4:	e73fffcc 	andi	fp,fp,65535
    a2e8:	1f07883a 	add	r3,r3,fp
    a2ec:	98ffbd2e 	bgeu	r19,r3,a1e4 <__alt_data_end+0xfffd81e4>
    a2f0:	90bfffc4 	addi	r2,r18,-1
    a2f4:	0007883a 	mov	r3,zero
    a2f8:	003f4e06 	br	a034 <__alt_data_end+0xfffd8034>
    a2fc:	00800604 	movi	r2,24
    a300:	003ef506 	br	9ed8 <__alt_data_end+0xfffd7ed8>
    a304:	00800604 	movi	r2,24
    a308:	003f0b06 	br	9f38 <__alt_data_end+0xfffd7f38>
    a30c:	00800604 	movi	r2,24
    a310:	003ead06 	br	9dc8 <__alt_data_end+0xfffd7dc8>
    a314:	0007883a 	mov	r3,zero
    a318:	00800044 	movi	r2,1
    a31c:	003f4506 	br	a034 <__alt_data_end+0xfffd8034>
    a320:	80bf8e2e 	bgeu	r16,r2,a15c <__alt_data_end+0xfffd815c>
    a324:	8c7fff84 	addi	r17,r17,-2
    a328:	8721883a 	add	r16,r16,fp
    a32c:	003f8c06 	br	a160 <__alt_data_end+0xfffd8160>
    a330:	18bf762e 	bgeu	r3,r2,a10c <__alt_data_end+0xfffd810c>
    a334:	ad7fff84 	addi	r21,r21,-2
    a338:	1f07883a 	add	r3,r3,fp
    a33c:	003f7406 	br	a110 <__alt_data_end+0xfffd8110>
    a340:	1839883a 	mov	fp,r3
    a344:	003fdd06 	br	a2bc <__alt_data_end+0xfffd82bc>
    a348:	182f883a 	mov	r23,r3
    a34c:	003fc506 	br	a264 <__alt_data_end+0xfffd8264>
    a350:	b5bfff84 	addi	r22,r22,-2
    a354:	3c4f883a 	add	r7,r7,r17
    a358:	003f1a06 	br	9fc4 <__alt_data_end+0xfffd7fc4>
    a35c:	b5bfff84 	addi	r22,r22,-2
    a360:	1c47883a 	add	r3,r3,r17
    a364:	003ebc06 	br	9e58 <__alt_data_end+0xfffd7e58>

0000a368 <__umoddi3>:
    a368:	defff304 	addi	sp,sp,-52
    a36c:	df000b15 	stw	fp,44(sp)
    a370:	dc400415 	stw	r17,16(sp)
    a374:	dc000315 	stw	r16,12(sp)
    a378:	dfc00c15 	stw	ra,48(sp)
    a37c:	ddc00a15 	stw	r23,40(sp)
    a380:	dd800915 	stw	r22,36(sp)
    a384:	dd400815 	stw	r21,32(sp)
    a388:	dd000715 	stw	r20,28(sp)
    a38c:	dcc00615 	stw	r19,24(sp)
    a390:	dc800515 	stw	r18,20(sp)
    a394:	2021883a 	mov	r16,r4
    a398:	2823883a 	mov	r17,r5
    a39c:	2839883a 	mov	fp,r5
    a3a0:	3800401e 	bne	r7,zero,a4a4 <__umoddi3+0x13c>
    a3a4:	3027883a 	mov	r19,r6
    a3a8:	2029883a 	mov	r20,r4
    a3ac:	2980552e 	bgeu	r5,r6,a504 <__umoddi3+0x19c>
    a3b0:	00bfffd4 	movui	r2,65535
    a3b4:	1180a236 	bltu	r2,r6,a640 <__umoddi3+0x2d8>
    a3b8:	01003fc4 	movi	r4,255
    a3bc:	2189803a 	cmpltu	r4,r4,r6
    a3c0:	200890fa 	slli	r4,r4,3
    a3c4:	3104d83a 	srl	r2,r6,r4
    a3c8:	00c00074 	movhi	r3,1
    a3cc:	18d04804 	addi	r3,r3,16672
    a3d0:	1885883a 	add	r2,r3,r2
    a3d4:	10c00003 	ldbu	r3,0(r2)
    a3d8:	00800804 	movi	r2,32
    a3dc:	1909883a 	add	r4,r3,r4
    a3e0:	1125c83a 	sub	r18,r2,r4
    a3e4:	90000526 	beq	r18,zero,a3fc <__umoddi3+0x94>
    a3e8:	8ca2983a 	sll	r17,r17,r18
    a3ec:	8108d83a 	srl	r4,r16,r4
    a3f0:	34a6983a 	sll	r19,r6,r18
    a3f4:	84a8983a 	sll	r20,r16,r18
    a3f8:	2478b03a 	or	fp,r4,r17
    a3fc:	982cd43a 	srli	r22,r19,16
    a400:	e009883a 	mov	r4,fp
    a404:	9dffffcc 	andi	r23,r19,65535
    a408:	b00b883a 	mov	r5,r22
    a40c:	000aa880 	call	aa88 <__umodsi3>
    a410:	b00b883a 	mov	r5,r22
    a414:	e009883a 	mov	r4,fp
    a418:	102b883a 	mov	r21,r2
    a41c:	000aa240 	call	aa24 <__udivsi3>
    a420:	100b883a 	mov	r5,r2
    a424:	b809883a 	mov	r4,r23
    a428:	000aae00 	call	aae0 <__mulsi3>
    a42c:	a82a943a 	slli	r21,r21,16
    a430:	a006d43a 	srli	r3,r20,16
    a434:	1d46b03a 	or	r3,r3,r21
    a438:	1880032e 	bgeu	r3,r2,a448 <__umoddi3+0xe0>
    a43c:	1cc7883a 	add	r3,r3,r19
    a440:	1cc00136 	bltu	r3,r19,a448 <__umoddi3+0xe0>
    a444:	18813136 	bltu	r3,r2,a90c <__umoddi3+0x5a4>
    a448:	18a1c83a 	sub	r16,r3,r2
    a44c:	b00b883a 	mov	r5,r22
    a450:	8009883a 	mov	r4,r16
    a454:	000aa880 	call	aa88 <__umodsi3>
    a458:	b00b883a 	mov	r5,r22
    a45c:	8009883a 	mov	r4,r16
    a460:	1023883a 	mov	r17,r2
    a464:	000aa240 	call	aa24 <__udivsi3>
    a468:	100b883a 	mov	r5,r2
    a46c:	b809883a 	mov	r4,r23
    a470:	8822943a 	slli	r17,r17,16
    a474:	000aae00 	call	aae0 <__mulsi3>
    a478:	a0ffffcc 	andi	r3,r20,65535
    a47c:	1c46b03a 	or	r3,r3,r17
    a480:	1880042e 	bgeu	r3,r2,a494 <__umoddi3+0x12c>
    a484:	1cc7883a 	add	r3,r3,r19
    a488:	1cc00236 	bltu	r3,r19,a494 <__umoddi3+0x12c>
    a48c:	1880012e 	bgeu	r3,r2,a494 <__umoddi3+0x12c>
    a490:	1cc7883a 	add	r3,r3,r19
    a494:	1885c83a 	sub	r2,r3,r2
    a498:	1484d83a 	srl	r2,r2,r18
    a49c:	0007883a 	mov	r3,zero
    a4a0:	00005306 	br	a5f0 <__umoddi3+0x288>
    a4a4:	29c05036 	bltu	r5,r7,a5e8 <__umoddi3+0x280>
    a4a8:	00bfffd4 	movui	r2,65535
    a4ac:	11c05c2e 	bgeu	r2,r7,a620 <__umoddi3+0x2b8>
    a4b0:	00804034 	movhi	r2,256
    a4b4:	10bfffc4 	addi	r2,r2,-1
    a4b8:	11c10636 	bltu	r2,r7,a8d4 <__umoddi3+0x56c>
    a4bc:	01000404 	movi	r4,16
    a4c0:	3904d83a 	srl	r2,r7,r4
    a4c4:	00c00074 	movhi	r3,1
    a4c8:	18d04804 	addi	r3,r3,16672
    a4cc:	1885883a 	add	r2,r3,r2
    a4d0:	14c00003 	ldbu	r19,0(r2)
    a4d4:	00c00804 	movi	r3,32
    a4d8:	9927883a 	add	r19,r19,r4
    a4dc:	1ce9c83a 	sub	r20,r3,r19
    a4e0:	a0005c1e 	bne	r20,zero,a654 <__umoddi3+0x2ec>
    a4e4:	3c400136 	bltu	r7,r17,a4ec <__umoddi3+0x184>
    a4e8:	81810a36 	bltu	r16,r6,a914 <__umoddi3+0x5ac>
    a4ec:	8185c83a 	sub	r2,r16,r6
    a4f0:	89e3c83a 	sub	r17,r17,r7
    a4f4:	8089803a 	cmpltu	r4,r16,r2
    a4f8:	8939c83a 	sub	fp,r17,r4
    a4fc:	e007883a 	mov	r3,fp
    a500:	00003b06 	br	a5f0 <__umoddi3+0x288>
    a504:	3000041e 	bne	r6,zero,a518 <__umoddi3+0x1b0>
    a508:	000b883a 	mov	r5,zero
    a50c:	01000044 	movi	r4,1
    a510:	000aa240 	call	aa24 <__udivsi3>
    a514:	1027883a 	mov	r19,r2
    a518:	00bfffd4 	movui	r2,65535
    a51c:	14c0442e 	bgeu	r2,r19,a630 <__umoddi3+0x2c8>
    a520:	00804034 	movhi	r2,256
    a524:	10bfffc4 	addi	r2,r2,-1
    a528:	14c0ec36 	bltu	r2,r19,a8dc <__umoddi3+0x574>
    a52c:	00800404 	movi	r2,16
    a530:	9886d83a 	srl	r3,r19,r2
    a534:	01000074 	movhi	r4,1
    a538:	21104804 	addi	r4,r4,16672
    a53c:	20c7883a 	add	r3,r4,r3
    a540:	18c00003 	ldbu	r3,0(r3)
    a544:	1887883a 	add	r3,r3,r2
    a548:	00800804 	movi	r2,32
    a54c:	10e5c83a 	sub	r18,r2,r3
    a550:	9000ab1e 	bne	r18,zero,a800 <__umoddi3+0x498>
    a554:	982cd43a 	srli	r22,r19,16
    a558:	8ce3c83a 	sub	r17,r17,r19
    a55c:	9dffffcc 	andi	r23,r19,65535
    a560:	b00b883a 	mov	r5,r22
    a564:	8809883a 	mov	r4,r17
    a568:	000aa880 	call	aa88 <__umodsi3>
    a56c:	b00b883a 	mov	r5,r22
    a570:	8809883a 	mov	r4,r17
    a574:	102b883a 	mov	r21,r2
    a578:	000aa240 	call	aa24 <__udivsi3>
    a57c:	b80b883a 	mov	r5,r23
    a580:	1009883a 	mov	r4,r2
    a584:	000aae00 	call	aae0 <__mulsi3>
    a588:	a82a943a 	slli	r21,r21,16
    a58c:	a006d43a 	srli	r3,r20,16
    a590:	1d46b03a 	or	r3,r3,r21
    a594:	1880042e 	bgeu	r3,r2,a5a8 <__umoddi3+0x240>
    a598:	1cc7883a 	add	r3,r3,r19
    a59c:	1cc00236 	bltu	r3,r19,a5a8 <__umoddi3+0x240>
    a5a0:	1880012e 	bgeu	r3,r2,a5a8 <__umoddi3+0x240>
    a5a4:	1cc7883a 	add	r3,r3,r19
    a5a8:	18a1c83a 	sub	r16,r3,r2
    a5ac:	b00b883a 	mov	r5,r22
    a5b0:	8009883a 	mov	r4,r16
    a5b4:	000aa880 	call	aa88 <__umodsi3>
    a5b8:	1023883a 	mov	r17,r2
    a5bc:	b00b883a 	mov	r5,r22
    a5c0:	8009883a 	mov	r4,r16
    a5c4:	000aa240 	call	aa24 <__udivsi3>
    a5c8:	8822943a 	slli	r17,r17,16
    a5cc:	b80b883a 	mov	r5,r23
    a5d0:	1009883a 	mov	r4,r2
    a5d4:	000aae00 	call	aae0 <__mulsi3>
    a5d8:	a53fffcc 	andi	r20,r20,65535
    a5dc:	a446b03a 	or	r3,r20,r17
    a5e0:	18bfac2e 	bgeu	r3,r2,a494 <__alt_data_end+0xfffd8494>
    a5e4:	003fa706 	br	a484 <__alt_data_end+0xfffd8484>
    a5e8:	2005883a 	mov	r2,r4
    a5ec:	2807883a 	mov	r3,r5
    a5f0:	dfc00c17 	ldw	ra,48(sp)
    a5f4:	df000b17 	ldw	fp,44(sp)
    a5f8:	ddc00a17 	ldw	r23,40(sp)
    a5fc:	dd800917 	ldw	r22,36(sp)
    a600:	dd400817 	ldw	r21,32(sp)
    a604:	dd000717 	ldw	r20,28(sp)
    a608:	dcc00617 	ldw	r19,24(sp)
    a60c:	dc800517 	ldw	r18,20(sp)
    a610:	dc400417 	ldw	r17,16(sp)
    a614:	dc000317 	ldw	r16,12(sp)
    a618:	dec00d04 	addi	sp,sp,52
    a61c:	f800283a 	ret
    a620:	04c03fc4 	movi	r19,255
    a624:	99c9803a 	cmpltu	r4,r19,r7
    a628:	200890fa 	slli	r4,r4,3
    a62c:	003fa406 	br	a4c0 <__alt_data_end+0xfffd84c0>
    a630:	00803fc4 	movi	r2,255
    a634:	14c5803a 	cmpltu	r2,r2,r19
    a638:	100490fa 	slli	r2,r2,3
    a63c:	003fbc06 	br	a530 <__alt_data_end+0xfffd8530>
    a640:	00804034 	movhi	r2,256
    a644:	10bfffc4 	addi	r2,r2,-1
    a648:	1180a636 	bltu	r2,r6,a8e4 <__umoddi3+0x57c>
    a64c:	01000404 	movi	r4,16
    a650:	003f5c06 	br	a3c4 <__alt_data_end+0xfffd83c4>
    a654:	3d0e983a 	sll	r7,r7,r20
    a658:	34ead83a 	srl	r21,r6,r19
    a65c:	8cc6d83a 	srl	r3,r17,r19
    a660:	8d10983a 	sll	r8,r17,r20
    a664:	3d6ab03a 	or	r21,r7,r21
    a668:	a82cd43a 	srli	r22,r21,16
    a66c:	84e2d83a 	srl	r17,r16,r19
    a670:	1809883a 	mov	r4,r3
    a674:	b00b883a 	mov	r5,r22
    a678:	8a22b03a 	or	r17,r17,r8
    a67c:	3524983a 	sll	r18,r6,r20
    a680:	dc400015 	stw	r17,0(sp)
    a684:	d8c00115 	stw	r3,4(sp)
    a688:	000aa880 	call	aa88 <__umodsi3>
    a68c:	d8c00117 	ldw	r3,4(sp)
    a690:	b00b883a 	mov	r5,r22
    a694:	1039883a 	mov	fp,r2
    a698:	1809883a 	mov	r4,r3
    a69c:	000aa240 	call	aa24 <__udivsi3>
    a6a0:	adffffcc 	andi	r23,r21,65535
    a6a4:	100b883a 	mov	r5,r2
    a6a8:	b809883a 	mov	r4,r23
    a6ac:	1023883a 	mov	r17,r2
    a6b0:	000aae00 	call	aae0 <__mulsi3>
    a6b4:	d9400017 	ldw	r5,0(sp)
    a6b8:	e008943a 	slli	r4,fp,16
    a6bc:	8520983a 	sll	r16,r16,r20
    a6c0:	2806d43a 	srli	r3,r5,16
    a6c4:	1906b03a 	or	r3,r3,r4
    a6c8:	1880042e 	bgeu	r3,r2,a6dc <__umoddi3+0x374>
    a6cc:	1d47883a 	add	r3,r3,r21
    a6d0:	893fffc4 	addi	r4,r17,-1
    a6d4:	1d40892e 	bgeu	r3,r21,a8fc <__umoddi3+0x594>
    a6d8:	2023883a 	mov	r17,r4
    a6dc:	18b9c83a 	sub	fp,r3,r2
    a6e0:	b00b883a 	mov	r5,r22
    a6e4:	e009883a 	mov	r4,fp
    a6e8:	000aa880 	call	aa88 <__umodsi3>
    a6ec:	b00b883a 	mov	r5,r22
    a6f0:	e009883a 	mov	r4,fp
    a6f4:	d8800215 	stw	r2,8(sp)
    a6f8:	000aa240 	call	aa24 <__udivsi3>
    a6fc:	100b883a 	mov	r5,r2
    a700:	b809883a 	mov	r4,r23
    a704:	102d883a 	mov	r22,r2
    a708:	000aae00 	call	aae0 <__mulsi3>
    a70c:	d9800217 	ldw	r6,8(sp)
    a710:	d8c00017 	ldw	r3,0(sp)
    a714:	300c943a 	slli	r6,r6,16
    a718:	1a3fffcc 	andi	r8,r3,65535
    a71c:	4190b03a 	or	r8,r8,r6
    a720:	4080042e 	bgeu	r8,r2,a734 <__umoddi3+0x3cc>
    a724:	4551883a 	add	r8,r8,r21
    a728:	b0ffffc4 	addi	r3,r22,-1
    a72c:	45406f2e 	bgeu	r8,r21,a8ec <__umoddi3+0x584>
    a730:	182d883a 	mov	r22,r3
    a734:	880e943a 	slli	r7,r17,16
    a738:	9006d43a 	srli	r3,r18,16
    a73c:	91bfffcc 	andi	r6,r18,65535
    a740:	3dacb03a 	or	r22,r7,r22
    a744:	b02ed43a 	srli	r23,r22,16
    a748:	b5bfffcc 	andi	r22,r22,65535
    a74c:	300b883a 	mov	r5,r6
    a750:	b009883a 	mov	r4,r22
    a754:	40a3c83a 	sub	r17,r8,r2
    a758:	d8c00115 	stw	r3,4(sp)
    a75c:	d9800215 	stw	r6,8(sp)
    a760:	000aae00 	call	aae0 <__mulsi3>
    a764:	d9800217 	ldw	r6,8(sp)
    a768:	b809883a 	mov	r4,r23
    a76c:	1039883a 	mov	fp,r2
    a770:	300b883a 	mov	r5,r6
    a774:	000aae00 	call	aae0 <__mulsi3>
    a778:	d8c00117 	ldw	r3,4(sp)
    a77c:	b809883a 	mov	r4,r23
    a780:	d8800215 	stw	r2,8(sp)
    a784:	180b883a 	mov	r5,r3
    a788:	000aae00 	call	aae0 <__mulsi3>
    a78c:	d8c00117 	ldw	r3,4(sp)
    a790:	b009883a 	mov	r4,r22
    a794:	102f883a 	mov	r23,r2
    a798:	180b883a 	mov	r5,r3
    a79c:	000aae00 	call	aae0 <__mulsi3>
    a7a0:	d9800217 	ldw	r6,8(sp)
    a7a4:	e006d43a 	srli	r3,fp,16
    a7a8:	1185883a 	add	r2,r2,r6
    a7ac:	1885883a 	add	r2,r3,r2
    a7b0:	1180022e 	bgeu	r2,r6,a7bc <__umoddi3+0x454>
    a7b4:	00c00074 	movhi	r3,1
    a7b8:	b8ef883a 	add	r23,r23,r3
    a7bc:	1006d43a 	srli	r3,r2,16
    a7c0:	1004943a 	slli	r2,r2,16
    a7c4:	e73fffcc 	andi	fp,fp,65535
    a7c8:	1dc7883a 	add	r3,r3,r23
    a7cc:	1739883a 	add	fp,r2,fp
    a7d0:	88c03a36 	bltu	r17,r3,a8bc <__umoddi3+0x554>
    a7d4:	88c05126 	beq	r17,r3,a91c <__umoddi3+0x5b4>
    a7d8:	88c9c83a 	sub	r4,r17,r3
    a7dc:	e00f883a 	mov	r7,fp
    a7e0:	81cfc83a 	sub	r7,r16,r7
    a7e4:	81c7803a 	cmpltu	r3,r16,r7
    a7e8:	20c7c83a 	sub	r3,r4,r3
    a7ec:	1cc4983a 	sll	r2,r3,r19
    a7f0:	3d0ed83a 	srl	r7,r7,r20
    a7f4:	1d06d83a 	srl	r3,r3,r20
    a7f8:	11c4b03a 	or	r2,r2,r7
    a7fc:	003f7c06 	br	a5f0 <__alt_data_end+0xfffd85f0>
    a800:	9ca6983a 	sll	r19,r19,r18
    a804:	88f8d83a 	srl	fp,r17,r3
    a808:	80c4d83a 	srl	r2,r16,r3
    a80c:	982cd43a 	srli	r22,r19,16
    a810:	8ca2983a 	sll	r17,r17,r18
    a814:	e009883a 	mov	r4,fp
    a818:	b00b883a 	mov	r5,r22
    a81c:	146ab03a 	or	r21,r2,r17
    a820:	000aa880 	call	aa88 <__umodsi3>
    a824:	b00b883a 	mov	r5,r22
    a828:	e009883a 	mov	r4,fp
    a82c:	1029883a 	mov	r20,r2
    a830:	9dffffcc 	andi	r23,r19,65535
    a834:	000aa240 	call	aa24 <__udivsi3>
    a838:	b809883a 	mov	r4,r23
    a83c:	100b883a 	mov	r5,r2
    a840:	000aae00 	call	aae0 <__mulsi3>
    a844:	a008943a 	slli	r4,r20,16
    a848:	a806d43a 	srli	r3,r21,16
    a84c:	84a8983a 	sll	r20,r16,r18
    a850:	1906b03a 	or	r3,r3,r4
    a854:	1880042e 	bgeu	r3,r2,a868 <__umoddi3+0x500>
    a858:	1cc7883a 	add	r3,r3,r19
    a85c:	1cc00236 	bltu	r3,r19,a868 <__umoddi3+0x500>
    a860:	1880012e 	bgeu	r3,r2,a868 <__umoddi3+0x500>
    a864:	1cc7883a 	add	r3,r3,r19
    a868:	18a3c83a 	sub	r17,r3,r2
    a86c:	b00b883a 	mov	r5,r22
    a870:	8809883a 	mov	r4,r17
    a874:	000aa880 	call	aa88 <__umodsi3>
    a878:	b00b883a 	mov	r5,r22
    a87c:	8809883a 	mov	r4,r17
    a880:	1021883a 	mov	r16,r2
    a884:	000aa240 	call	aa24 <__udivsi3>
    a888:	100b883a 	mov	r5,r2
    a88c:	b809883a 	mov	r4,r23
    a890:	8020943a 	slli	r16,r16,16
    a894:	000aae00 	call	aae0 <__mulsi3>
    a898:	a8ffffcc 	andi	r3,r21,65535
    a89c:	1c06b03a 	or	r3,r3,r16
    a8a0:	1880042e 	bgeu	r3,r2,a8b4 <__umoddi3+0x54c>
    a8a4:	1cc7883a 	add	r3,r3,r19
    a8a8:	1cc00236 	bltu	r3,r19,a8b4 <__umoddi3+0x54c>
    a8ac:	1880012e 	bgeu	r3,r2,a8b4 <__umoddi3+0x54c>
    a8b0:	1cc7883a 	add	r3,r3,r19
    a8b4:	18a3c83a 	sub	r17,r3,r2
    a8b8:	003f2906 	br	a560 <__alt_data_end+0xfffd8560>
    a8bc:	e48fc83a 	sub	r7,fp,r18
    a8c0:	1d49c83a 	sub	r4,r3,r21
    a8c4:	e1f9803a 	cmpltu	fp,fp,r7
    a8c8:	2739c83a 	sub	fp,r4,fp
    a8cc:	8f09c83a 	sub	r4,r17,fp
    a8d0:	003fc306 	br	a7e0 <__alt_data_end+0xfffd87e0>
    a8d4:	01000604 	movi	r4,24
    a8d8:	003ef906 	br	a4c0 <__alt_data_end+0xfffd84c0>
    a8dc:	00800604 	movi	r2,24
    a8e0:	003f1306 	br	a530 <__alt_data_end+0xfffd8530>
    a8e4:	01000604 	movi	r4,24
    a8e8:	003eb606 	br	a3c4 <__alt_data_end+0xfffd83c4>
    a8ec:	40bf902e 	bgeu	r8,r2,a730 <__alt_data_end+0xfffd8730>
    a8f0:	b5bfff84 	addi	r22,r22,-2
    a8f4:	4551883a 	add	r8,r8,r21
    a8f8:	003f8e06 	br	a734 <__alt_data_end+0xfffd8734>
    a8fc:	18bf762e 	bgeu	r3,r2,a6d8 <__alt_data_end+0xfffd86d8>
    a900:	8c7fff84 	addi	r17,r17,-2
    a904:	1d47883a 	add	r3,r3,r21
    a908:	003f7406 	br	a6dc <__alt_data_end+0xfffd86dc>
    a90c:	1cc7883a 	add	r3,r3,r19
    a910:	003ecd06 	br	a448 <__alt_data_end+0xfffd8448>
    a914:	8005883a 	mov	r2,r16
    a918:	003ef806 	br	a4fc <__alt_data_end+0xfffd84fc>
    a91c:	873fe736 	bltu	r16,fp,a8bc <__alt_data_end+0xfffd88bc>
    a920:	e00f883a 	mov	r7,fp
    a924:	0009883a 	mov	r4,zero
    a928:	003fad06 	br	a7e0 <__alt_data_end+0xfffd87e0>

0000a92c <__divsi3>:
    a92c:	20001b16 	blt	r4,zero,a99c <__divsi3+0x70>
    a930:	000f883a 	mov	r7,zero
    a934:	28001616 	blt	r5,zero,a990 <__divsi3+0x64>
    a938:	200d883a 	mov	r6,r4
    a93c:	29001a2e 	bgeu	r5,r4,a9a8 <__divsi3+0x7c>
    a940:	00800804 	movi	r2,32
    a944:	00c00044 	movi	r3,1
    a948:	00000106 	br	a950 <__divsi3+0x24>
    a94c:	10000d26 	beq	r2,zero,a984 <__divsi3+0x58>
    a950:	294b883a 	add	r5,r5,r5
    a954:	10bfffc4 	addi	r2,r2,-1
    a958:	18c7883a 	add	r3,r3,r3
    a95c:	293ffb36 	bltu	r5,r4,a94c <__alt_data_end+0xfffd894c>
    a960:	0005883a 	mov	r2,zero
    a964:	18000726 	beq	r3,zero,a984 <__divsi3+0x58>
    a968:	0005883a 	mov	r2,zero
    a96c:	31400236 	bltu	r6,r5,a978 <__divsi3+0x4c>
    a970:	314dc83a 	sub	r6,r6,r5
    a974:	10c4b03a 	or	r2,r2,r3
    a978:	1806d07a 	srli	r3,r3,1
    a97c:	280ad07a 	srli	r5,r5,1
    a980:	183ffa1e 	bne	r3,zero,a96c <__alt_data_end+0xfffd896c>
    a984:	38000126 	beq	r7,zero,a98c <__divsi3+0x60>
    a988:	0085c83a 	sub	r2,zero,r2
    a98c:	f800283a 	ret
    a990:	014bc83a 	sub	r5,zero,r5
    a994:	39c0005c 	xori	r7,r7,1
    a998:	003fe706 	br	a938 <__alt_data_end+0xfffd8938>
    a99c:	0109c83a 	sub	r4,zero,r4
    a9a0:	01c00044 	movi	r7,1
    a9a4:	003fe306 	br	a934 <__alt_data_end+0xfffd8934>
    a9a8:	00c00044 	movi	r3,1
    a9ac:	003fee06 	br	a968 <__alt_data_end+0xfffd8968>

0000a9b0 <__modsi3>:
    a9b0:	20001716 	blt	r4,zero,aa10 <__modsi3+0x60>
    a9b4:	000f883a 	mov	r7,zero
    a9b8:	2005883a 	mov	r2,r4
    a9bc:	28001216 	blt	r5,zero,aa08 <__modsi3+0x58>
    a9c0:	2900162e 	bgeu	r5,r4,aa1c <__modsi3+0x6c>
    a9c4:	01800804 	movi	r6,32
    a9c8:	00c00044 	movi	r3,1
    a9cc:	00000106 	br	a9d4 <__modsi3+0x24>
    a9d0:	30000a26 	beq	r6,zero,a9fc <__modsi3+0x4c>
    a9d4:	294b883a 	add	r5,r5,r5
    a9d8:	31bfffc4 	addi	r6,r6,-1
    a9dc:	18c7883a 	add	r3,r3,r3
    a9e0:	293ffb36 	bltu	r5,r4,a9d0 <__alt_data_end+0xfffd89d0>
    a9e4:	18000526 	beq	r3,zero,a9fc <__modsi3+0x4c>
    a9e8:	1806d07a 	srli	r3,r3,1
    a9ec:	11400136 	bltu	r2,r5,a9f4 <__modsi3+0x44>
    a9f0:	1145c83a 	sub	r2,r2,r5
    a9f4:	280ad07a 	srli	r5,r5,1
    a9f8:	183ffb1e 	bne	r3,zero,a9e8 <__alt_data_end+0xfffd89e8>
    a9fc:	38000126 	beq	r7,zero,aa04 <__modsi3+0x54>
    aa00:	0085c83a 	sub	r2,zero,r2
    aa04:	f800283a 	ret
    aa08:	014bc83a 	sub	r5,zero,r5
    aa0c:	003fec06 	br	a9c0 <__alt_data_end+0xfffd89c0>
    aa10:	0109c83a 	sub	r4,zero,r4
    aa14:	01c00044 	movi	r7,1
    aa18:	003fe706 	br	a9b8 <__alt_data_end+0xfffd89b8>
    aa1c:	00c00044 	movi	r3,1
    aa20:	003ff106 	br	a9e8 <__alt_data_end+0xfffd89e8>

0000aa24 <__udivsi3>:
    aa24:	200d883a 	mov	r6,r4
    aa28:	2900152e 	bgeu	r5,r4,aa80 <__udivsi3+0x5c>
    aa2c:	28001416 	blt	r5,zero,aa80 <__udivsi3+0x5c>
    aa30:	00800804 	movi	r2,32
    aa34:	00c00044 	movi	r3,1
    aa38:	00000206 	br	aa44 <__udivsi3+0x20>
    aa3c:	10000e26 	beq	r2,zero,aa78 <__udivsi3+0x54>
    aa40:	28000516 	blt	r5,zero,aa58 <__udivsi3+0x34>
    aa44:	294b883a 	add	r5,r5,r5
    aa48:	10bfffc4 	addi	r2,r2,-1
    aa4c:	18c7883a 	add	r3,r3,r3
    aa50:	293ffa36 	bltu	r5,r4,aa3c <__alt_data_end+0xfffd8a3c>
    aa54:	18000826 	beq	r3,zero,aa78 <__udivsi3+0x54>
    aa58:	0005883a 	mov	r2,zero
    aa5c:	31400236 	bltu	r6,r5,aa68 <__udivsi3+0x44>
    aa60:	314dc83a 	sub	r6,r6,r5
    aa64:	10c4b03a 	or	r2,r2,r3
    aa68:	1806d07a 	srli	r3,r3,1
    aa6c:	280ad07a 	srli	r5,r5,1
    aa70:	183ffa1e 	bne	r3,zero,aa5c <__alt_data_end+0xfffd8a5c>
    aa74:	f800283a 	ret
    aa78:	0005883a 	mov	r2,zero
    aa7c:	f800283a 	ret
    aa80:	00c00044 	movi	r3,1
    aa84:	003ff406 	br	aa58 <__alt_data_end+0xfffd8a58>

0000aa88 <__umodsi3>:
    aa88:	2005883a 	mov	r2,r4
    aa8c:	2900122e 	bgeu	r5,r4,aad8 <__umodsi3+0x50>
    aa90:	28001116 	blt	r5,zero,aad8 <__umodsi3+0x50>
    aa94:	01800804 	movi	r6,32
    aa98:	00c00044 	movi	r3,1
    aa9c:	00000206 	br	aaa8 <__umodsi3+0x20>
    aaa0:	30000c26 	beq	r6,zero,aad4 <__umodsi3+0x4c>
    aaa4:	28000516 	blt	r5,zero,aabc <__umodsi3+0x34>
    aaa8:	294b883a 	add	r5,r5,r5
    aaac:	31bfffc4 	addi	r6,r6,-1
    aab0:	18c7883a 	add	r3,r3,r3
    aab4:	293ffa36 	bltu	r5,r4,aaa0 <__alt_data_end+0xfffd8aa0>
    aab8:	18000626 	beq	r3,zero,aad4 <__umodsi3+0x4c>
    aabc:	1806d07a 	srli	r3,r3,1
    aac0:	11400136 	bltu	r2,r5,aac8 <__umodsi3+0x40>
    aac4:	1145c83a 	sub	r2,r2,r5
    aac8:	280ad07a 	srli	r5,r5,1
    aacc:	183ffb1e 	bne	r3,zero,aabc <__alt_data_end+0xfffd8abc>
    aad0:	f800283a 	ret
    aad4:	f800283a 	ret
    aad8:	00c00044 	movi	r3,1
    aadc:	003ff706 	br	aabc <__alt_data_end+0xfffd8abc>

0000aae0 <__mulsi3>:
    aae0:	0005883a 	mov	r2,zero
    aae4:	20000726 	beq	r4,zero,ab04 <__mulsi3+0x24>
    aae8:	20c0004c 	andi	r3,r4,1
    aaec:	2008d07a 	srli	r4,r4,1
    aaf0:	18000126 	beq	r3,zero,aaf8 <__mulsi3+0x18>
    aaf4:	1145883a 	add	r2,r2,r5
    aaf8:	294b883a 	add	r5,r5,r5
    aafc:	203ffa1e 	bne	r4,zero,aae8 <__alt_data_end+0xfffd8ae8>
    ab00:	f800283a 	ret
    ab04:	f800283a 	ret

0000ab08 <__adddf3>:
    ab08:	02c00434 	movhi	r11,16
    ab0c:	5affffc4 	addi	r11,r11,-1
    ab10:	2806d7fa 	srli	r3,r5,31
    ab14:	2ad4703a 	and	r10,r5,r11
    ab18:	3ad2703a 	and	r9,r7,r11
    ab1c:	3804d53a 	srli	r2,r7,20
    ab20:	3018d77a 	srli	r12,r6,29
    ab24:	280ad53a 	srli	r5,r5,20
    ab28:	501490fa 	slli	r10,r10,3
    ab2c:	2010d77a 	srli	r8,r4,29
    ab30:	481290fa 	slli	r9,r9,3
    ab34:	380ed7fa 	srli	r7,r7,31
    ab38:	defffb04 	addi	sp,sp,-20
    ab3c:	dc800215 	stw	r18,8(sp)
    ab40:	dc400115 	stw	r17,4(sp)
    ab44:	dc000015 	stw	r16,0(sp)
    ab48:	dfc00415 	stw	ra,16(sp)
    ab4c:	dcc00315 	stw	r19,12(sp)
    ab50:	1c803fcc 	andi	r18,r3,255
    ab54:	2c01ffcc 	andi	r16,r5,2047
    ab58:	5210b03a 	or	r8,r10,r8
    ab5c:	202290fa 	slli	r17,r4,3
    ab60:	1081ffcc 	andi	r2,r2,2047
    ab64:	4b12b03a 	or	r9,r9,r12
    ab68:	300c90fa 	slli	r6,r6,3
    ab6c:	91c07526 	beq	r18,r7,ad44 <__adddf3+0x23c>
    ab70:	8087c83a 	sub	r3,r16,r2
    ab74:	00c0ab0e 	bge	zero,r3,ae24 <__adddf3+0x31c>
    ab78:	10002a1e 	bne	r2,zero,ac24 <__adddf3+0x11c>
    ab7c:	4984b03a 	or	r2,r9,r6
    ab80:	1000961e 	bne	r2,zero,addc <__adddf3+0x2d4>
    ab84:	888001cc 	andi	r2,r17,7
    ab88:	10000726 	beq	r2,zero,aba8 <__adddf3+0xa0>
    ab8c:	888003cc 	andi	r2,r17,15
    ab90:	00c00104 	movi	r3,4
    ab94:	10c00426 	beq	r2,r3,aba8 <__adddf3+0xa0>
    ab98:	88c7883a 	add	r3,r17,r3
    ab9c:	1c63803a 	cmpltu	r17,r3,r17
    aba0:	4451883a 	add	r8,r8,r17
    aba4:	1823883a 	mov	r17,r3
    aba8:	4080202c 	andhi	r2,r8,128
    abac:	10005926 	beq	r2,zero,ad14 <__adddf3+0x20c>
    abb0:	84000044 	addi	r16,r16,1
    abb4:	0081ffc4 	movi	r2,2047
    abb8:	8080ba26 	beq	r16,r2,aea4 <__adddf3+0x39c>
    abbc:	00bfe034 	movhi	r2,65408
    abc0:	10bfffc4 	addi	r2,r2,-1
    abc4:	4090703a 	and	r8,r8,r2
    abc8:	4004977a 	slli	r2,r8,29
    abcc:	4010927a 	slli	r8,r8,9
    abd0:	8822d0fa 	srli	r17,r17,3
    abd4:	8401ffcc 	andi	r16,r16,2047
    abd8:	4010d33a 	srli	r8,r8,12
    abdc:	9007883a 	mov	r3,r18
    abe0:	1444b03a 	or	r2,r2,r17
    abe4:	8401ffcc 	andi	r16,r16,2047
    abe8:	8020953a 	slli	r16,r16,20
    abec:	18c03fcc 	andi	r3,r3,255
    abf0:	01000434 	movhi	r4,16
    abf4:	213fffc4 	addi	r4,r4,-1
    abf8:	180697fa 	slli	r3,r3,31
    abfc:	4110703a 	and	r8,r8,r4
    ac00:	4410b03a 	or	r8,r8,r16
    ac04:	40c6b03a 	or	r3,r8,r3
    ac08:	dfc00417 	ldw	ra,16(sp)
    ac0c:	dcc00317 	ldw	r19,12(sp)
    ac10:	dc800217 	ldw	r18,8(sp)
    ac14:	dc400117 	ldw	r17,4(sp)
    ac18:	dc000017 	ldw	r16,0(sp)
    ac1c:	dec00504 	addi	sp,sp,20
    ac20:	f800283a 	ret
    ac24:	0081ffc4 	movi	r2,2047
    ac28:	80bfd626 	beq	r16,r2,ab84 <__alt_data_end+0xfffd8b84>
    ac2c:	4a402034 	orhi	r9,r9,128
    ac30:	00800e04 	movi	r2,56
    ac34:	10c09f16 	blt	r2,r3,aeb4 <__adddf3+0x3ac>
    ac38:	008007c4 	movi	r2,31
    ac3c:	10c0c216 	blt	r2,r3,af48 <__adddf3+0x440>
    ac40:	00800804 	movi	r2,32
    ac44:	10c5c83a 	sub	r2,r2,r3
    ac48:	488a983a 	sll	r5,r9,r2
    ac4c:	30c8d83a 	srl	r4,r6,r3
    ac50:	3084983a 	sll	r2,r6,r2
    ac54:	48c6d83a 	srl	r3,r9,r3
    ac58:	290cb03a 	or	r6,r5,r4
    ac5c:	1004c03a 	cmpne	r2,r2,zero
    ac60:	308cb03a 	or	r6,r6,r2
    ac64:	898dc83a 	sub	r6,r17,r6
    ac68:	89a3803a 	cmpltu	r17,r17,r6
    ac6c:	40d1c83a 	sub	r8,r8,r3
    ac70:	4451c83a 	sub	r8,r8,r17
    ac74:	3023883a 	mov	r17,r6
    ac78:	4080202c 	andhi	r2,r8,128
    ac7c:	10002326 	beq	r2,zero,ad0c <__adddf3+0x204>
    ac80:	04c02034 	movhi	r19,128
    ac84:	9cffffc4 	addi	r19,r19,-1
    ac88:	44e6703a 	and	r19,r8,r19
    ac8c:	98007626 	beq	r19,zero,ae68 <__adddf3+0x360>
    ac90:	9809883a 	mov	r4,r19
    ac94:	000d3480 	call	d348 <__clzsi2>
    ac98:	10fffe04 	addi	r3,r2,-8
    ac9c:	010007c4 	movi	r4,31
    aca0:	20c07716 	blt	r4,r3,ae80 <__adddf3+0x378>
    aca4:	00800804 	movi	r2,32
    aca8:	10c5c83a 	sub	r2,r2,r3
    acac:	8884d83a 	srl	r2,r17,r2
    acb0:	98d0983a 	sll	r8,r19,r3
    acb4:	88e2983a 	sll	r17,r17,r3
    acb8:	1204b03a 	or	r2,r2,r8
    acbc:	1c007416 	blt	r3,r16,ae90 <__adddf3+0x388>
    acc0:	1c21c83a 	sub	r16,r3,r16
    acc4:	82000044 	addi	r8,r16,1
    acc8:	00c007c4 	movi	r3,31
    accc:	1a009116 	blt	r3,r8,af14 <__adddf3+0x40c>
    acd0:	00c00804 	movi	r3,32
    acd4:	1a07c83a 	sub	r3,r3,r8
    acd8:	8a08d83a 	srl	r4,r17,r8
    acdc:	88e2983a 	sll	r17,r17,r3
    ace0:	10c6983a 	sll	r3,r2,r3
    ace4:	1210d83a 	srl	r8,r2,r8
    ace8:	8804c03a 	cmpne	r2,r17,zero
    acec:	1906b03a 	or	r3,r3,r4
    acf0:	18a2b03a 	or	r17,r3,r2
    acf4:	0021883a 	mov	r16,zero
    acf8:	003fa206 	br	ab84 <__alt_data_end+0xfffd8b84>
    acfc:	1890b03a 	or	r8,r3,r2
    ad00:	40017d26 	beq	r8,zero,b2f8 <__adddf3+0x7f0>
    ad04:	1011883a 	mov	r8,r2
    ad08:	1823883a 	mov	r17,r3
    ad0c:	888001cc 	andi	r2,r17,7
    ad10:	103f9e1e 	bne	r2,zero,ab8c <__alt_data_end+0xfffd8b8c>
    ad14:	4004977a 	slli	r2,r8,29
    ad18:	8822d0fa 	srli	r17,r17,3
    ad1c:	4010d0fa 	srli	r8,r8,3
    ad20:	9007883a 	mov	r3,r18
    ad24:	1444b03a 	or	r2,r2,r17
    ad28:	0101ffc4 	movi	r4,2047
    ad2c:	81002426 	beq	r16,r4,adc0 <__adddf3+0x2b8>
    ad30:	8120703a 	and	r16,r16,r4
    ad34:	01000434 	movhi	r4,16
    ad38:	213fffc4 	addi	r4,r4,-1
    ad3c:	4110703a 	and	r8,r8,r4
    ad40:	003fa806 	br	abe4 <__alt_data_end+0xfffd8be4>
    ad44:	8089c83a 	sub	r4,r16,r2
    ad48:	01005e0e 	bge	zero,r4,aec4 <__adddf3+0x3bc>
    ad4c:	10002b26 	beq	r2,zero,adfc <__adddf3+0x2f4>
    ad50:	0081ffc4 	movi	r2,2047
    ad54:	80bf8b26 	beq	r16,r2,ab84 <__alt_data_end+0xfffd8b84>
    ad58:	4a402034 	orhi	r9,r9,128
    ad5c:	00800e04 	movi	r2,56
    ad60:	1100a40e 	bge	r2,r4,aff4 <__adddf3+0x4ec>
    ad64:	498cb03a 	or	r6,r9,r6
    ad68:	300ac03a 	cmpne	r5,r6,zero
    ad6c:	0013883a 	mov	r9,zero
    ad70:	2c4b883a 	add	r5,r5,r17
    ad74:	2c63803a 	cmpltu	r17,r5,r17
    ad78:	4a11883a 	add	r8,r9,r8
    ad7c:	8a11883a 	add	r8,r17,r8
    ad80:	2823883a 	mov	r17,r5
    ad84:	4080202c 	andhi	r2,r8,128
    ad88:	103fe026 	beq	r2,zero,ad0c <__alt_data_end+0xfffd8d0c>
    ad8c:	84000044 	addi	r16,r16,1
    ad90:	0081ffc4 	movi	r2,2047
    ad94:	8080d226 	beq	r16,r2,b0e0 <__adddf3+0x5d8>
    ad98:	00bfe034 	movhi	r2,65408
    ad9c:	10bfffc4 	addi	r2,r2,-1
    ada0:	4090703a 	and	r8,r8,r2
    ada4:	880ad07a 	srli	r5,r17,1
    ada8:	400897fa 	slli	r4,r8,31
    adac:	88c0004c 	andi	r3,r17,1
    adb0:	28e2b03a 	or	r17,r5,r3
    adb4:	4010d07a 	srli	r8,r8,1
    adb8:	2462b03a 	or	r17,r4,r17
    adbc:	003f7106 	br	ab84 <__alt_data_end+0xfffd8b84>
    adc0:	4088b03a 	or	r4,r8,r2
    adc4:	20014526 	beq	r4,zero,b2dc <__adddf3+0x7d4>
    adc8:	01000434 	movhi	r4,16
    adcc:	42000234 	orhi	r8,r8,8
    add0:	213fffc4 	addi	r4,r4,-1
    add4:	4110703a 	and	r8,r8,r4
    add8:	003f8206 	br	abe4 <__alt_data_end+0xfffd8be4>
    addc:	18ffffc4 	addi	r3,r3,-1
    ade0:	1800491e 	bne	r3,zero,af08 <__adddf3+0x400>
    ade4:	898bc83a 	sub	r5,r17,r6
    ade8:	8963803a 	cmpltu	r17,r17,r5
    adec:	4251c83a 	sub	r8,r8,r9
    adf0:	4451c83a 	sub	r8,r8,r17
    adf4:	2823883a 	mov	r17,r5
    adf8:	003f9f06 	br	ac78 <__alt_data_end+0xfffd8c78>
    adfc:	4984b03a 	or	r2,r9,r6
    ae00:	103f6026 	beq	r2,zero,ab84 <__alt_data_end+0xfffd8b84>
    ae04:	213fffc4 	addi	r4,r4,-1
    ae08:	2000931e 	bne	r4,zero,b058 <__adddf3+0x550>
    ae0c:	898d883a 	add	r6,r17,r6
    ae10:	3463803a 	cmpltu	r17,r6,r17
    ae14:	4251883a 	add	r8,r8,r9
    ae18:	8a11883a 	add	r8,r17,r8
    ae1c:	3023883a 	mov	r17,r6
    ae20:	003fd806 	br	ad84 <__alt_data_end+0xfffd8d84>
    ae24:	1800541e 	bne	r3,zero,af78 <__adddf3+0x470>
    ae28:	80800044 	addi	r2,r16,1
    ae2c:	1081ffcc 	andi	r2,r2,2047
    ae30:	00c00044 	movi	r3,1
    ae34:	1880a00e 	bge	r3,r2,b0b8 <__adddf3+0x5b0>
    ae38:	8989c83a 	sub	r4,r17,r6
    ae3c:	8905803a 	cmpltu	r2,r17,r4
    ae40:	4267c83a 	sub	r19,r8,r9
    ae44:	98a7c83a 	sub	r19,r19,r2
    ae48:	9880202c 	andhi	r2,r19,128
    ae4c:	10006326 	beq	r2,zero,afdc <__adddf3+0x4d4>
    ae50:	3463c83a 	sub	r17,r6,r17
    ae54:	4a07c83a 	sub	r3,r9,r8
    ae58:	344d803a 	cmpltu	r6,r6,r17
    ae5c:	19a7c83a 	sub	r19,r3,r6
    ae60:	3825883a 	mov	r18,r7
    ae64:	983f8a1e 	bne	r19,zero,ac90 <__alt_data_end+0xfffd8c90>
    ae68:	8809883a 	mov	r4,r17
    ae6c:	000d3480 	call	d348 <__clzsi2>
    ae70:	10800804 	addi	r2,r2,32
    ae74:	10fffe04 	addi	r3,r2,-8
    ae78:	010007c4 	movi	r4,31
    ae7c:	20ff890e 	bge	r4,r3,aca4 <__alt_data_end+0xfffd8ca4>
    ae80:	10bff604 	addi	r2,r2,-40
    ae84:	8884983a 	sll	r2,r17,r2
    ae88:	0023883a 	mov	r17,zero
    ae8c:	1c3f8c0e 	bge	r3,r16,acc0 <__alt_data_end+0xfffd8cc0>
    ae90:	023fe034 	movhi	r8,65408
    ae94:	423fffc4 	addi	r8,r8,-1
    ae98:	80e1c83a 	sub	r16,r16,r3
    ae9c:	1210703a 	and	r8,r2,r8
    aea0:	003f3806 	br	ab84 <__alt_data_end+0xfffd8b84>
    aea4:	9007883a 	mov	r3,r18
    aea8:	0011883a 	mov	r8,zero
    aeac:	0005883a 	mov	r2,zero
    aeb0:	003f4c06 	br	abe4 <__alt_data_end+0xfffd8be4>
    aeb4:	498cb03a 	or	r6,r9,r6
    aeb8:	300cc03a 	cmpne	r6,r6,zero
    aebc:	0007883a 	mov	r3,zero
    aec0:	003f6806 	br	ac64 <__alt_data_end+0xfffd8c64>
    aec4:	20009c1e 	bne	r4,zero,b138 <__adddf3+0x630>
    aec8:	80800044 	addi	r2,r16,1
    aecc:	1141ffcc 	andi	r5,r2,2047
    aed0:	01000044 	movi	r4,1
    aed4:	2140670e 	bge	r4,r5,b074 <__adddf3+0x56c>
    aed8:	0101ffc4 	movi	r4,2047
    aedc:	11007f26 	beq	r2,r4,b0dc <__adddf3+0x5d4>
    aee0:	898d883a 	add	r6,r17,r6
    aee4:	4247883a 	add	r3,r8,r9
    aee8:	3451803a 	cmpltu	r8,r6,r17
    aeec:	40d1883a 	add	r8,r8,r3
    aef0:	402297fa 	slli	r17,r8,31
    aef4:	300cd07a 	srli	r6,r6,1
    aef8:	4010d07a 	srli	r8,r8,1
    aefc:	1021883a 	mov	r16,r2
    af00:	89a2b03a 	or	r17,r17,r6
    af04:	003f1f06 	br	ab84 <__alt_data_end+0xfffd8b84>
    af08:	0081ffc4 	movi	r2,2047
    af0c:	80bf481e 	bne	r16,r2,ac30 <__alt_data_end+0xfffd8c30>
    af10:	003f1c06 	br	ab84 <__alt_data_end+0xfffd8b84>
    af14:	843ff844 	addi	r16,r16,-31
    af18:	01000804 	movi	r4,32
    af1c:	1406d83a 	srl	r3,r2,r16
    af20:	41005026 	beq	r8,r4,b064 <__adddf3+0x55c>
    af24:	01001004 	movi	r4,64
    af28:	2211c83a 	sub	r8,r4,r8
    af2c:	1204983a 	sll	r2,r2,r8
    af30:	88a2b03a 	or	r17,r17,r2
    af34:	8822c03a 	cmpne	r17,r17,zero
    af38:	1c62b03a 	or	r17,r3,r17
    af3c:	0011883a 	mov	r8,zero
    af40:	0021883a 	mov	r16,zero
    af44:	003f7106 	br	ad0c <__alt_data_end+0xfffd8d0c>
    af48:	193ff804 	addi	r4,r3,-32
    af4c:	00800804 	movi	r2,32
    af50:	4908d83a 	srl	r4,r9,r4
    af54:	18804526 	beq	r3,r2,b06c <__adddf3+0x564>
    af58:	00801004 	movi	r2,64
    af5c:	10c5c83a 	sub	r2,r2,r3
    af60:	4886983a 	sll	r3,r9,r2
    af64:	198cb03a 	or	r6,r3,r6
    af68:	300cc03a 	cmpne	r6,r6,zero
    af6c:	218cb03a 	or	r6,r4,r6
    af70:	0007883a 	mov	r3,zero
    af74:	003f3b06 	br	ac64 <__alt_data_end+0xfffd8c64>
    af78:	80002a26 	beq	r16,zero,b024 <__adddf3+0x51c>
    af7c:	0101ffc4 	movi	r4,2047
    af80:	11006826 	beq	r2,r4,b124 <__adddf3+0x61c>
    af84:	00c7c83a 	sub	r3,zero,r3
    af88:	42002034 	orhi	r8,r8,128
    af8c:	01000e04 	movi	r4,56
    af90:	20c07c16 	blt	r4,r3,b184 <__adddf3+0x67c>
    af94:	010007c4 	movi	r4,31
    af98:	20c0da16 	blt	r4,r3,b304 <__adddf3+0x7fc>
    af9c:	01000804 	movi	r4,32
    afa0:	20c9c83a 	sub	r4,r4,r3
    afa4:	4114983a 	sll	r10,r8,r4
    afa8:	88cad83a 	srl	r5,r17,r3
    afac:	8908983a 	sll	r4,r17,r4
    afb0:	40c6d83a 	srl	r3,r8,r3
    afb4:	5162b03a 	or	r17,r10,r5
    afb8:	2008c03a 	cmpne	r4,r4,zero
    afbc:	8922b03a 	or	r17,r17,r4
    afc0:	3463c83a 	sub	r17,r6,r17
    afc4:	48c7c83a 	sub	r3,r9,r3
    afc8:	344d803a 	cmpltu	r6,r6,r17
    afcc:	1991c83a 	sub	r8,r3,r6
    afd0:	1021883a 	mov	r16,r2
    afd4:	3825883a 	mov	r18,r7
    afd8:	003f2706 	br	ac78 <__alt_data_end+0xfffd8c78>
    afdc:	24d0b03a 	or	r8,r4,r19
    afe0:	40001b1e 	bne	r8,zero,b050 <__adddf3+0x548>
    afe4:	0005883a 	mov	r2,zero
    afe8:	0007883a 	mov	r3,zero
    afec:	0021883a 	mov	r16,zero
    aff0:	003f4d06 	br	ad28 <__alt_data_end+0xfffd8d28>
    aff4:	008007c4 	movi	r2,31
    aff8:	11003c16 	blt	r2,r4,b0ec <__adddf3+0x5e4>
    affc:	00800804 	movi	r2,32
    b000:	1105c83a 	sub	r2,r2,r4
    b004:	488e983a 	sll	r7,r9,r2
    b008:	310ad83a 	srl	r5,r6,r4
    b00c:	3084983a 	sll	r2,r6,r2
    b010:	4912d83a 	srl	r9,r9,r4
    b014:	394ab03a 	or	r5,r7,r5
    b018:	1004c03a 	cmpne	r2,r2,zero
    b01c:	288ab03a 	or	r5,r5,r2
    b020:	003f5306 	br	ad70 <__alt_data_end+0xfffd8d70>
    b024:	4448b03a 	or	r4,r8,r17
    b028:	20003e26 	beq	r4,zero,b124 <__adddf3+0x61c>
    b02c:	00c6303a 	nor	r3,zero,r3
    b030:	18003a1e 	bne	r3,zero,b11c <__adddf3+0x614>
    b034:	3463c83a 	sub	r17,r6,r17
    b038:	4a07c83a 	sub	r3,r9,r8
    b03c:	344d803a 	cmpltu	r6,r6,r17
    b040:	1991c83a 	sub	r8,r3,r6
    b044:	1021883a 	mov	r16,r2
    b048:	3825883a 	mov	r18,r7
    b04c:	003f0a06 	br	ac78 <__alt_data_end+0xfffd8c78>
    b050:	2023883a 	mov	r17,r4
    b054:	003f0d06 	br	ac8c <__alt_data_end+0xfffd8c8c>
    b058:	0081ffc4 	movi	r2,2047
    b05c:	80bf3f1e 	bne	r16,r2,ad5c <__alt_data_end+0xfffd8d5c>
    b060:	003ec806 	br	ab84 <__alt_data_end+0xfffd8b84>
    b064:	0005883a 	mov	r2,zero
    b068:	003fb106 	br	af30 <__alt_data_end+0xfffd8f30>
    b06c:	0007883a 	mov	r3,zero
    b070:	003fbc06 	br	af64 <__alt_data_end+0xfffd8f64>
    b074:	4444b03a 	or	r2,r8,r17
    b078:	8000871e 	bne	r16,zero,b298 <__adddf3+0x790>
    b07c:	1000ba26 	beq	r2,zero,b368 <__adddf3+0x860>
    b080:	4984b03a 	or	r2,r9,r6
    b084:	103ebf26 	beq	r2,zero,ab84 <__alt_data_end+0xfffd8b84>
    b088:	8985883a 	add	r2,r17,r6
    b08c:	4247883a 	add	r3,r8,r9
    b090:	1451803a 	cmpltu	r8,r2,r17
    b094:	40d1883a 	add	r8,r8,r3
    b098:	40c0202c 	andhi	r3,r8,128
    b09c:	1023883a 	mov	r17,r2
    b0a0:	183f1a26 	beq	r3,zero,ad0c <__alt_data_end+0xfffd8d0c>
    b0a4:	00bfe034 	movhi	r2,65408
    b0a8:	10bfffc4 	addi	r2,r2,-1
    b0ac:	2021883a 	mov	r16,r4
    b0b0:	4090703a 	and	r8,r8,r2
    b0b4:	003eb306 	br	ab84 <__alt_data_end+0xfffd8b84>
    b0b8:	4444b03a 	or	r2,r8,r17
    b0bc:	8000291e 	bne	r16,zero,b164 <__adddf3+0x65c>
    b0c0:	10004b1e 	bne	r2,zero,b1f0 <__adddf3+0x6e8>
    b0c4:	4990b03a 	or	r8,r9,r6
    b0c8:	40008b26 	beq	r8,zero,b2f8 <__adddf3+0x7f0>
    b0cc:	4811883a 	mov	r8,r9
    b0d0:	3023883a 	mov	r17,r6
    b0d4:	3825883a 	mov	r18,r7
    b0d8:	003eaa06 	br	ab84 <__alt_data_end+0xfffd8b84>
    b0dc:	1021883a 	mov	r16,r2
    b0e0:	0011883a 	mov	r8,zero
    b0e4:	0005883a 	mov	r2,zero
    b0e8:	003f0f06 	br	ad28 <__alt_data_end+0xfffd8d28>
    b0ec:	217ff804 	addi	r5,r4,-32
    b0f0:	00800804 	movi	r2,32
    b0f4:	494ad83a 	srl	r5,r9,r5
    b0f8:	20807d26 	beq	r4,r2,b2f0 <__adddf3+0x7e8>
    b0fc:	00801004 	movi	r2,64
    b100:	1109c83a 	sub	r4,r2,r4
    b104:	4912983a 	sll	r9,r9,r4
    b108:	498cb03a 	or	r6,r9,r6
    b10c:	300cc03a 	cmpne	r6,r6,zero
    b110:	298ab03a 	or	r5,r5,r6
    b114:	0013883a 	mov	r9,zero
    b118:	003f1506 	br	ad70 <__alt_data_end+0xfffd8d70>
    b11c:	0101ffc4 	movi	r4,2047
    b120:	113f9a1e 	bne	r2,r4,af8c <__alt_data_end+0xfffd8f8c>
    b124:	4811883a 	mov	r8,r9
    b128:	3023883a 	mov	r17,r6
    b12c:	1021883a 	mov	r16,r2
    b130:	3825883a 	mov	r18,r7
    b134:	003e9306 	br	ab84 <__alt_data_end+0xfffd8b84>
    b138:	8000161e 	bne	r16,zero,b194 <__adddf3+0x68c>
    b13c:	444ab03a 	or	r5,r8,r17
    b140:	28005126 	beq	r5,zero,b288 <__adddf3+0x780>
    b144:	0108303a 	nor	r4,zero,r4
    b148:	20004d1e 	bne	r4,zero,b280 <__adddf3+0x778>
    b14c:	89a3883a 	add	r17,r17,r6
    b150:	4253883a 	add	r9,r8,r9
    b154:	898d803a 	cmpltu	r6,r17,r6
    b158:	3251883a 	add	r8,r6,r9
    b15c:	1021883a 	mov	r16,r2
    b160:	003f0806 	br	ad84 <__alt_data_end+0xfffd8d84>
    b164:	1000301e 	bne	r2,zero,b228 <__adddf3+0x720>
    b168:	4984b03a 	or	r2,r9,r6
    b16c:	10007126 	beq	r2,zero,b334 <__adddf3+0x82c>
    b170:	4811883a 	mov	r8,r9
    b174:	3023883a 	mov	r17,r6
    b178:	3825883a 	mov	r18,r7
    b17c:	0401ffc4 	movi	r16,2047
    b180:	003e8006 	br	ab84 <__alt_data_end+0xfffd8b84>
    b184:	4462b03a 	or	r17,r8,r17
    b188:	8822c03a 	cmpne	r17,r17,zero
    b18c:	0007883a 	mov	r3,zero
    b190:	003f8b06 	br	afc0 <__alt_data_end+0xfffd8fc0>
    b194:	0141ffc4 	movi	r5,2047
    b198:	11403b26 	beq	r2,r5,b288 <__adddf3+0x780>
    b19c:	0109c83a 	sub	r4,zero,r4
    b1a0:	42002034 	orhi	r8,r8,128
    b1a4:	01400e04 	movi	r5,56
    b1a8:	29006716 	blt	r5,r4,b348 <__adddf3+0x840>
    b1ac:	014007c4 	movi	r5,31
    b1b0:	29007016 	blt	r5,r4,b374 <__adddf3+0x86c>
    b1b4:	01400804 	movi	r5,32
    b1b8:	290bc83a 	sub	r5,r5,r4
    b1bc:	4154983a 	sll	r10,r8,r5
    b1c0:	890ed83a 	srl	r7,r17,r4
    b1c4:	894a983a 	sll	r5,r17,r5
    b1c8:	4108d83a 	srl	r4,r8,r4
    b1cc:	51e2b03a 	or	r17,r10,r7
    b1d0:	280ac03a 	cmpne	r5,r5,zero
    b1d4:	8962b03a 	or	r17,r17,r5
    b1d8:	89a3883a 	add	r17,r17,r6
    b1dc:	2253883a 	add	r9,r4,r9
    b1e0:	898d803a 	cmpltu	r6,r17,r6
    b1e4:	3251883a 	add	r8,r6,r9
    b1e8:	1021883a 	mov	r16,r2
    b1ec:	003ee506 	br	ad84 <__alt_data_end+0xfffd8d84>
    b1f0:	4984b03a 	or	r2,r9,r6
    b1f4:	103e6326 	beq	r2,zero,ab84 <__alt_data_end+0xfffd8b84>
    b1f8:	8987c83a 	sub	r3,r17,r6
    b1fc:	88c9803a 	cmpltu	r4,r17,r3
    b200:	4245c83a 	sub	r2,r8,r9
    b204:	1105c83a 	sub	r2,r2,r4
    b208:	1100202c 	andhi	r4,r2,128
    b20c:	203ebb26 	beq	r4,zero,acfc <__alt_data_end+0xfffd8cfc>
    b210:	3463c83a 	sub	r17,r6,r17
    b214:	4a07c83a 	sub	r3,r9,r8
    b218:	344d803a 	cmpltu	r6,r6,r17
    b21c:	1991c83a 	sub	r8,r3,r6
    b220:	3825883a 	mov	r18,r7
    b224:	003e5706 	br	ab84 <__alt_data_end+0xfffd8b84>
    b228:	4984b03a 	or	r2,r9,r6
    b22c:	10002e26 	beq	r2,zero,b2e8 <__adddf3+0x7e0>
    b230:	4004d0fa 	srli	r2,r8,3
    b234:	8822d0fa 	srli	r17,r17,3
    b238:	4010977a 	slli	r8,r8,29
    b23c:	10c0022c 	andhi	r3,r2,8
    b240:	4462b03a 	or	r17,r8,r17
    b244:	18000826 	beq	r3,zero,b268 <__adddf3+0x760>
    b248:	4808d0fa 	srli	r4,r9,3
    b24c:	20c0022c 	andhi	r3,r4,8
    b250:	1800051e 	bne	r3,zero,b268 <__adddf3+0x760>
    b254:	300cd0fa 	srli	r6,r6,3
    b258:	4806977a 	slli	r3,r9,29
    b25c:	2005883a 	mov	r2,r4
    b260:	3825883a 	mov	r18,r7
    b264:	19a2b03a 	or	r17,r3,r6
    b268:	8810d77a 	srli	r8,r17,29
    b26c:	100490fa 	slli	r2,r2,3
    b270:	882290fa 	slli	r17,r17,3
    b274:	0401ffc4 	movi	r16,2047
    b278:	4090b03a 	or	r8,r8,r2
    b27c:	003e4106 	br	ab84 <__alt_data_end+0xfffd8b84>
    b280:	0141ffc4 	movi	r5,2047
    b284:	117fc71e 	bne	r2,r5,b1a4 <__alt_data_end+0xfffd91a4>
    b288:	4811883a 	mov	r8,r9
    b28c:	3023883a 	mov	r17,r6
    b290:	1021883a 	mov	r16,r2
    b294:	003e3b06 	br	ab84 <__alt_data_end+0xfffd8b84>
    b298:	10002f26 	beq	r2,zero,b358 <__adddf3+0x850>
    b29c:	4984b03a 	or	r2,r9,r6
    b2a0:	10001126 	beq	r2,zero,b2e8 <__adddf3+0x7e0>
    b2a4:	4004d0fa 	srli	r2,r8,3
    b2a8:	8822d0fa 	srli	r17,r17,3
    b2ac:	4010977a 	slli	r8,r8,29
    b2b0:	10c0022c 	andhi	r3,r2,8
    b2b4:	4462b03a 	or	r17,r8,r17
    b2b8:	183feb26 	beq	r3,zero,b268 <__alt_data_end+0xfffd9268>
    b2bc:	4808d0fa 	srli	r4,r9,3
    b2c0:	20c0022c 	andhi	r3,r4,8
    b2c4:	183fe81e 	bne	r3,zero,b268 <__alt_data_end+0xfffd9268>
    b2c8:	300cd0fa 	srli	r6,r6,3
    b2cc:	4806977a 	slli	r3,r9,29
    b2d0:	2005883a 	mov	r2,r4
    b2d4:	19a2b03a 	or	r17,r3,r6
    b2d8:	003fe306 	br	b268 <__alt_data_end+0xfffd9268>
    b2dc:	0011883a 	mov	r8,zero
    b2e0:	0005883a 	mov	r2,zero
    b2e4:	003e3f06 	br	abe4 <__alt_data_end+0xfffd8be4>
    b2e8:	0401ffc4 	movi	r16,2047
    b2ec:	003e2506 	br	ab84 <__alt_data_end+0xfffd8b84>
    b2f0:	0013883a 	mov	r9,zero
    b2f4:	003f8406 	br	b108 <__alt_data_end+0xfffd9108>
    b2f8:	0005883a 	mov	r2,zero
    b2fc:	0007883a 	mov	r3,zero
    b300:	003e8906 	br	ad28 <__alt_data_end+0xfffd8d28>
    b304:	197ff804 	addi	r5,r3,-32
    b308:	01000804 	movi	r4,32
    b30c:	414ad83a 	srl	r5,r8,r5
    b310:	19002426 	beq	r3,r4,b3a4 <__adddf3+0x89c>
    b314:	01001004 	movi	r4,64
    b318:	20c7c83a 	sub	r3,r4,r3
    b31c:	40c6983a 	sll	r3,r8,r3
    b320:	1c46b03a 	or	r3,r3,r17
    b324:	1806c03a 	cmpne	r3,r3,zero
    b328:	28e2b03a 	or	r17,r5,r3
    b32c:	0007883a 	mov	r3,zero
    b330:	003f2306 	br	afc0 <__alt_data_end+0xfffd8fc0>
    b334:	0007883a 	mov	r3,zero
    b338:	5811883a 	mov	r8,r11
    b33c:	00bfffc4 	movi	r2,-1
    b340:	0401ffc4 	movi	r16,2047
    b344:	003e7806 	br	ad28 <__alt_data_end+0xfffd8d28>
    b348:	4462b03a 	or	r17,r8,r17
    b34c:	8822c03a 	cmpne	r17,r17,zero
    b350:	0009883a 	mov	r4,zero
    b354:	003fa006 	br	b1d8 <__alt_data_end+0xfffd91d8>
    b358:	4811883a 	mov	r8,r9
    b35c:	3023883a 	mov	r17,r6
    b360:	0401ffc4 	movi	r16,2047
    b364:	003e0706 	br	ab84 <__alt_data_end+0xfffd8b84>
    b368:	4811883a 	mov	r8,r9
    b36c:	3023883a 	mov	r17,r6
    b370:	003e0406 	br	ab84 <__alt_data_end+0xfffd8b84>
    b374:	21fff804 	addi	r7,r4,-32
    b378:	01400804 	movi	r5,32
    b37c:	41ced83a 	srl	r7,r8,r7
    b380:	21400a26 	beq	r4,r5,b3ac <__adddf3+0x8a4>
    b384:	01401004 	movi	r5,64
    b388:	2909c83a 	sub	r4,r5,r4
    b38c:	4108983a 	sll	r4,r8,r4
    b390:	2448b03a 	or	r4,r4,r17
    b394:	2008c03a 	cmpne	r4,r4,zero
    b398:	3922b03a 	or	r17,r7,r4
    b39c:	0009883a 	mov	r4,zero
    b3a0:	003f8d06 	br	b1d8 <__alt_data_end+0xfffd91d8>
    b3a4:	0007883a 	mov	r3,zero
    b3a8:	003fdd06 	br	b320 <__alt_data_end+0xfffd9320>
    b3ac:	0009883a 	mov	r4,zero
    b3b0:	003ff706 	br	b390 <__alt_data_end+0xfffd9390>

0000b3b4 <__divdf3>:
    b3b4:	defff004 	addi	sp,sp,-64
    b3b8:	dc800815 	stw	r18,32(sp)
    b3bc:	2824d53a 	srli	r18,r5,20
    b3c0:	dd800c15 	stw	r22,48(sp)
    b3c4:	282cd7fa 	srli	r22,r5,31
    b3c8:	dc000615 	stw	r16,24(sp)
    b3cc:	04000434 	movhi	r16,16
    b3d0:	843fffc4 	addi	r16,r16,-1
    b3d4:	dfc00f15 	stw	ra,60(sp)
    b3d8:	df000e15 	stw	fp,56(sp)
    b3dc:	ddc00d15 	stw	r23,52(sp)
    b3e0:	dd400b15 	stw	r21,44(sp)
    b3e4:	dd000a15 	stw	r20,40(sp)
    b3e8:	dcc00915 	stw	r19,36(sp)
    b3ec:	dc400715 	stw	r17,28(sp)
    b3f0:	9481ffcc 	andi	r18,r18,2047
    b3f4:	2c20703a 	and	r16,r5,r16
    b3f8:	b2003fcc 	andi	r8,r22,255
    b3fc:	90006126 	beq	r18,zero,b584 <__divdf3+0x1d0>
    b400:	0081ffc4 	movi	r2,2047
    b404:	202b883a 	mov	r21,r4
    b408:	90803726 	beq	r18,r2,b4e8 <__divdf3+0x134>
    b40c:	80800434 	orhi	r2,r16,16
    b410:	100490fa 	slli	r2,r2,3
    b414:	2020d77a 	srli	r16,r4,29
    b418:	202a90fa 	slli	r21,r4,3
    b41c:	94bf0044 	addi	r18,r18,-1023
    b420:	80a0b03a 	or	r16,r16,r2
    b424:	0013883a 	mov	r9,zero
    b428:	000b883a 	mov	r5,zero
    b42c:	3806d53a 	srli	r3,r7,20
    b430:	382ed7fa 	srli	r23,r7,31
    b434:	04400434 	movhi	r17,16
    b438:	8c7fffc4 	addi	r17,r17,-1
    b43c:	18c1ffcc 	andi	r3,r3,2047
    b440:	3029883a 	mov	r20,r6
    b444:	3c62703a 	and	r17,r7,r17
    b448:	bf003fcc 	andi	fp,r23,255
    b44c:	18006e26 	beq	r3,zero,b608 <__divdf3+0x254>
    b450:	0081ffc4 	movi	r2,2047
    b454:	18806626 	beq	r3,r2,b5f0 <__divdf3+0x23c>
    b458:	88800434 	orhi	r2,r17,16
    b45c:	100490fa 	slli	r2,r2,3
    b460:	3022d77a 	srli	r17,r6,29
    b464:	302890fa 	slli	r20,r6,3
    b468:	18ff0044 	addi	r3,r3,-1023
    b46c:	88a2b03a 	or	r17,r17,r2
    b470:	000f883a 	mov	r7,zero
    b474:	b5e6f03a 	xor	r19,r22,r23
    b478:	3a4cb03a 	or	r6,r7,r9
    b47c:	008003c4 	movi	r2,15
    b480:	9809883a 	mov	r4,r19
    b484:	90c7c83a 	sub	r3,r18,r3
    b488:	9cc03fcc 	andi	r19,r19,255
    b48c:	11809636 	bltu	r2,r6,b6e8 <__divdf3+0x334>
    b490:	300c90ba 	slli	r6,r6,2
    b494:	00800074 	movhi	r2,1
    b498:	10ad2a04 	addi	r2,r2,-19288
    b49c:	308d883a 	add	r6,r6,r2
    b4a0:	30800017 	ldw	r2,0(r6)
    b4a4:	1000683a 	jmp	r2
    b4a8:	0000b6e8 	cmpgeui	zero,zero,731
    b4ac:	0000b520 	cmpeqi	zero,zero,724
    b4b0:	0000b6d8 	cmpnei	zero,zero,731
    b4b4:	0000b514 	movui	zero,724
    b4b8:	0000b6d8 	cmpnei	zero,zero,731
    b4bc:	0000b6ac 	andhi	zero,zero,730
    b4c0:	0000b6d8 	cmpnei	zero,zero,731
    b4c4:	0000b514 	movui	zero,724
    b4c8:	0000b520 	cmpeqi	zero,zero,724
    b4cc:	0000b520 	cmpeqi	zero,zero,724
    b4d0:	0000b6ac 	andhi	zero,zero,730
    b4d4:	0000b514 	movui	zero,724
    b4d8:	0000b504 	movi	zero,724
    b4dc:	0000b504 	movi	zero,724
    b4e0:	0000b504 	movi	zero,724
    b4e4:	0000ba70 	cmpltui	zero,zero,745
    b4e8:	2404b03a 	or	r2,r4,r16
    b4ec:	10006c1e 	bne	r2,zero,b6a0 <__divdf3+0x2ec>
    b4f0:	02400204 	movi	r9,8
    b4f4:	0021883a 	mov	r16,zero
    b4f8:	002b883a 	mov	r21,zero
    b4fc:	01400084 	movi	r5,2
    b500:	003fca06 	br	b42c <__alt_data_end+0xfffd942c>
    b504:	8023883a 	mov	r17,r16
    b508:	a829883a 	mov	r20,r21
    b50c:	4039883a 	mov	fp,r8
    b510:	280f883a 	mov	r7,r5
    b514:	00800084 	movi	r2,2
    b518:	3881601e 	bne	r7,r2,ba9c <__divdf3+0x6e8>
    b51c:	e027883a 	mov	r19,fp
    b520:	9900004c 	andi	r4,r19,1
    b524:	0081ffc4 	movi	r2,2047
    b528:	0021883a 	mov	r16,zero
    b52c:	002b883a 	mov	r21,zero
    b530:	1004953a 	slli	r2,r2,20
    b534:	20c03fcc 	andi	r3,r4,255
    b538:	01400434 	movhi	r5,16
    b53c:	297fffc4 	addi	r5,r5,-1
    b540:	180697fa 	slli	r3,r3,31
    b544:	8160703a 	and	r16,r16,r5
    b548:	80a0b03a 	or	r16,r16,r2
    b54c:	80c6b03a 	or	r3,r16,r3
    b550:	a805883a 	mov	r2,r21
    b554:	dfc00f17 	ldw	ra,60(sp)
    b558:	df000e17 	ldw	fp,56(sp)
    b55c:	ddc00d17 	ldw	r23,52(sp)
    b560:	dd800c17 	ldw	r22,48(sp)
    b564:	dd400b17 	ldw	r21,44(sp)
    b568:	dd000a17 	ldw	r20,40(sp)
    b56c:	dcc00917 	ldw	r19,36(sp)
    b570:	dc800817 	ldw	r18,32(sp)
    b574:	dc400717 	ldw	r17,28(sp)
    b578:	dc000617 	ldw	r16,24(sp)
    b57c:	dec01004 	addi	sp,sp,64
    b580:	f800283a 	ret
    b584:	2404b03a 	or	r2,r4,r16
    b588:	2023883a 	mov	r17,r4
    b58c:	10003f26 	beq	r2,zero,b68c <__divdf3+0x2d8>
    b590:	80015e26 	beq	r16,zero,bb0c <__divdf3+0x758>
    b594:	8009883a 	mov	r4,r16
    b598:	d9800215 	stw	r6,8(sp)
    b59c:	d9c00515 	stw	r7,20(sp)
    b5a0:	da000415 	stw	r8,16(sp)
    b5a4:	000d3480 	call	d348 <__clzsi2>
    b5a8:	d9800217 	ldw	r6,8(sp)
    b5ac:	d9c00517 	ldw	r7,20(sp)
    b5b0:	da000417 	ldw	r8,16(sp)
    b5b4:	113ffd44 	addi	r4,r2,-11
    b5b8:	00c00704 	movi	r3,28
    b5bc:	19014f16 	blt	r3,r4,bafc <__divdf3+0x748>
    b5c0:	00c00744 	movi	r3,29
    b5c4:	157ffe04 	addi	r21,r2,-8
    b5c8:	1907c83a 	sub	r3,r3,r4
    b5cc:	8560983a 	sll	r16,r16,r21
    b5d0:	88c6d83a 	srl	r3,r17,r3
    b5d4:	8d6a983a 	sll	r21,r17,r21
    b5d8:	1c20b03a 	or	r16,r3,r16
    b5dc:	1080fcc4 	addi	r2,r2,1011
    b5e0:	00a5c83a 	sub	r18,zero,r2
    b5e4:	0013883a 	mov	r9,zero
    b5e8:	000b883a 	mov	r5,zero
    b5ec:	003f8f06 	br	b42c <__alt_data_end+0xfffd942c>
    b5f0:	3444b03a 	or	r2,r6,r17
    b5f4:	1000231e 	bne	r2,zero,b684 <__divdf3+0x2d0>
    b5f8:	0023883a 	mov	r17,zero
    b5fc:	0029883a 	mov	r20,zero
    b600:	01c00084 	movi	r7,2
    b604:	003f9b06 	br	b474 <__alt_data_end+0xfffd9474>
    b608:	3444b03a 	or	r2,r6,r17
    b60c:	10001926 	beq	r2,zero,b674 <__divdf3+0x2c0>
    b610:	88014b26 	beq	r17,zero,bb40 <__divdf3+0x78c>
    b614:	8809883a 	mov	r4,r17
    b618:	d9400115 	stw	r5,4(sp)
    b61c:	d9800215 	stw	r6,8(sp)
    b620:	da000415 	stw	r8,16(sp)
    b624:	da400315 	stw	r9,12(sp)
    b628:	000d3480 	call	d348 <__clzsi2>
    b62c:	d9400117 	ldw	r5,4(sp)
    b630:	d9800217 	ldw	r6,8(sp)
    b634:	da000417 	ldw	r8,16(sp)
    b638:	da400317 	ldw	r9,12(sp)
    b63c:	113ffd44 	addi	r4,r2,-11
    b640:	00c00704 	movi	r3,28
    b644:	19013a16 	blt	r3,r4,bb30 <__divdf3+0x77c>
    b648:	00c00744 	movi	r3,29
    b64c:	153ffe04 	addi	r20,r2,-8
    b650:	1907c83a 	sub	r3,r3,r4
    b654:	8d22983a 	sll	r17,r17,r20
    b658:	30c6d83a 	srl	r3,r6,r3
    b65c:	3528983a 	sll	r20,r6,r20
    b660:	1c62b03a 	or	r17,r3,r17
    b664:	1080fcc4 	addi	r2,r2,1011
    b668:	0087c83a 	sub	r3,zero,r2
    b66c:	000f883a 	mov	r7,zero
    b670:	003f8006 	br	b474 <__alt_data_end+0xfffd9474>
    b674:	0023883a 	mov	r17,zero
    b678:	0029883a 	mov	r20,zero
    b67c:	01c00044 	movi	r7,1
    b680:	003f7c06 	br	b474 <__alt_data_end+0xfffd9474>
    b684:	01c000c4 	movi	r7,3
    b688:	003f7a06 	br	b474 <__alt_data_end+0xfffd9474>
    b68c:	02400104 	movi	r9,4
    b690:	0021883a 	mov	r16,zero
    b694:	002b883a 	mov	r21,zero
    b698:	01400044 	movi	r5,1
    b69c:	003f6306 	br	b42c <__alt_data_end+0xfffd942c>
    b6a0:	02400304 	movi	r9,12
    b6a4:	014000c4 	movi	r5,3
    b6a8:	003f6006 	br	b42c <__alt_data_end+0xfffd942c>
    b6ac:	04000434 	movhi	r16,16
    b6b0:	0009883a 	mov	r4,zero
    b6b4:	843fffc4 	addi	r16,r16,-1
    b6b8:	057fffc4 	movi	r21,-1
    b6bc:	0081ffc4 	movi	r2,2047
    b6c0:	003f9b06 	br	b530 <__alt_data_end+0xfffd9530>
    b6c4:	00c00044 	movi	r3,1
    b6c8:	1887c83a 	sub	r3,r3,r2
    b6cc:	01000e04 	movi	r4,56
    b6d0:	20c1530e 	bge	r4,r3,bc20 <__divdf3+0x86c>
    b6d4:	9900004c 	andi	r4,r19,1
    b6d8:	0005883a 	mov	r2,zero
    b6dc:	0021883a 	mov	r16,zero
    b6e0:	002b883a 	mov	r21,zero
    b6e4:	003f9206 	br	b530 <__alt_data_end+0xfffd9530>
    b6e8:	8c012e36 	bltu	r17,r16,bba4 <__divdf3+0x7f0>
    b6ec:	84412c26 	beq	r16,r17,bba0 <__divdf3+0x7ec>
    b6f0:	a82f883a 	mov	r23,r21
    b6f4:	18ffffc4 	addi	r3,r3,-1
    b6f8:	002b883a 	mov	r21,zero
    b6fc:	a004d63a 	srli	r2,r20,24
    b700:	8822923a 	slli	r17,r17,8
    b704:	a028923a 	slli	r20,r20,8
    b708:	8009883a 	mov	r4,r16
    b70c:	88acb03a 	or	r22,r17,r2
    b710:	dd000015 	stw	r20,0(sp)
    b714:	b028d43a 	srli	r20,r22,16
    b718:	d8c00215 	stw	r3,8(sp)
    b71c:	b4bfffcc 	andi	r18,r22,65535
    b720:	a00b883a 	mov	r5,r20
    b724:	000aa240 	call	aa24 <__udivsi3>
    b728:	100b883a 	mov	r5,r2
    b72c:	9009883a 	mov	r4,r18
    b730:	1023883a 	mov	r17,r2
    b734:	000aae00 	call	aae0 <__mulsi3>
    b738:	8009883a 	mov	r4,r16
    b73c:	a00b883a 	mov	r5,r20
    b740:	1039883a 	mov	fp,r2
    b744:	000aa880 	call	aa88 <__umodsi3>
    b748:	1004943a 	slli	r2,r2,16
    b74c:	b808d43a 	srli	r4,r23,16
    b750:	d8c00217 	ldw	r3,8(sp)
    b754:	2084b03a 	or	r2,r4,r2
    b758:	1700062e 	bgeu	r2,fp,b774 <__divdf3+0x3c0>
    b75c:	1585883a 	add	r2,r2,r22
    b760:	893fffc4 	addi	r4,r17,-1
    b764:	15811d36 	bltu	r2,r22,bbdc <__divdf3+0x828>
    b768:	17011c2e 	bgeu	r2,fp,bbdc <__divdf3+0x828>
    b76c:	8c7fff84 	addi	r17,r17,-2
    b770:	1585883a 	add	r2,r2,r22
    b774:	1739c83a 	sub	fp,r2,fp
    b778:	a00b883a 	mov	r5,r20
    b77c:	e009883a 	mov	r4,fp
    b780:	d8c00215 	stw	r3,8(sp)
    b784:	000aa240 	call	aa24 <__udivsi3>
    b788:	100b883a 	mov	r5,r2
    b78c:	9009883a 	mov	r4,r18
    b790:	1021883a 	mov	r16,r2
    b794:	000aae00 	call	aae0 <__mulsi3>
    b798:	a00b883a 	mov	r5,r20
    b79c:	e009883a 	mov	r4,fp
    b7a0:	d8800415 	stw	r2,16(sp)
    b7a4:	000aa880 	call	aa88 <__umodsi3>
    b7a8:	1004943a 	slli	r2,r2,16
    b7ac:	da000417 	ldw	r8,16(sp)
    b7b0:	bdffffcc 	andi	r23,r23,65535
    b7b4:	b884b03a 	or	r2,r23,r2
    b7b8:	d8c00217 	ldw	r3,8(sp)
    b7bc:	1200062e 	bgeu	r2,r8,b7d8 <__divdf3+0x424>
    b7c0:	1585883a 	add	r2,r2,r22
    b7c4:	813fffc4 	addi	r4,r16,-1
    b7c8:	15810236 	bltu	r2,r22,bbd4 <__divdf3+0x820>
    b7cc:	1201012e 	bgeu	r2,r8,bbd4 <__divdf3+0x820>
    b7d0:	843fff84 	addi	r16,r16,-2
    b7d4:	1585883a 	add	r2,r2,r22
    b7d8:	8822943a 	slli	r17,r17,16
    b7dc:	d9800017 	ldw	r6,0(sp)
    b7e0:	1211c83a 	sub	r8,r2,r8
    b7e4:	8c22b03a 	or	r17,r17,r16
    b7e8:	373fffcc 	andi	fp,r6,65535
    b7ec:	8abfffcc 	andi	r10,r17,65535
    b7f0:	8820d43a 	srli	r16,r17,16
    b7f4:	5009883a 	mov	r4,r10
    b7f8:	e00b883a 	mov	r5,fp
    b7fc:	302ed43a 	srli	r23,r6,16
    b800:	d8c00215 	stw	r3,8(sp)
    b804:	da000415 	stw	r8,16(sp)
    b808:	da800115 	stw	r10,4(sp)
    b80c:	000aae00 	call	aae0 <__mulsi3>
    b810:	800b883a 	mov	r5,r16
    b814:	e009883a 	mov	r4,fp
    b818:	d8800515 	stw	r2,20(sp)
    b81c:	000aae00 	call	aae0 <__mulsi3>
    b820:	8009883a 	mov	r4,r16
    b824:	b80b883a 	mov	r5,r23
    b828:	d8800315 	stw	r2,12(sp)
    b82c:	000aae00 	call	aae0 <__mulsi3>
    b830:	da800117 	ldw	r10,4(sp)
    b834:	b80b883a 	mov	r5,r23
    b838:	1021883a 	mov	r16,r2
    b83c:	5009883a 	mov	r4,r10
    b840:	000aae00 	call	aae0 <__mulsi3>
    b844:	d9c00517 	ldw	r7,20(sp)
    b848:	da400317 	ldw	r9,12(sp)
    b84c:	d8c00217 	ldw	r3,8(sp)
    b850:	3808d43a 	srli	r4,r7,16
    b854:	1245883a 	add	r2,r2,r9
    b858:	da000417 	ldw	r8,16(sp)
    b85c:	2085883a 	add	r2,r4,r2
    b860:	1240022e 	bgeu	r2,r9,b86c <__divdf3+0x4b8>
    b864:	01000074 	movhi	r4,1
    b868:	8121883a 	add	r16,r16,r4
    b86c:	1008d43a 	srli	r4,r2,16
    b870:	1004943a 	slli	r2,r2,16
    b874:	39ffffcc 	andi	r7,r7,65535
    b878:	2409883a 	add	r4,r4,r16
    b87c:	11c5883a 	add	r2,r2,r7
    b880:	4100bb36 	bltu	r8,r4,bb70 <__divdf3+0x7bc>
    b884:	4100d726 	beq	r8,r4,bbe4 <__divdf3+0x830>
    b888:	4109c83a 	sub	r4,r8,r4
    b88c:	a8a1c83a 	sub	r16,r21,r2
    b890:	ac2b803a 	cmpltu	r21,r21,r16
    b894:	256bc83a 	sub	r21,r4,r21
    b898:	b540d926 	beq	r22,r21,bc00 <__divdf3+0x84c>
    b89c:	a00b883a 	mov	r5,r20
    b8a0:	a809883a 	mov	r4,r21
    b8a4:	d8c00215 	stw	r3,8(sp)
    b8a8:	000aa240 	call	aa24 <__udivsi3>
    b8ac:	100b883a 	mov	r5,r2
    b8b0:	9009883a 	mov	r4,r18
    b8b4:	d8800515 	stw	r2,20(sp)
    b8b8:	000aae00 	call	aae0 <__mulsi3>
    b8bc:	a809883a 	mov	r4,r21
    b8c0:	a00b883a 	mov	r5,r20
    b8c4:	d8800415 	stw	r2,16(sp)
    b8c8:	000aa880 	call	aa88 <__umodsi3>
    b8cc:	1004943a 	slli	r2,r2,16
    b8d0:	8008d43a 	srli	r4,r16,16
    b8d4:	da000417 	ldw	r8,16(sp)
    b8d8:	d8c00217 	ldw	r3,8(sp)
    b8dc:	2084b03a 	or	r2,r4,r2
    b8e0:	d9c00517 	ldw	r7,20(sp)
    b8e4:	1200062e 	bgeu	r2,r8,b900 <__divdf3+0x54c>
    b8e8:	1585883a 	add	r2,r2,r22
    b8ec:	393fffc4 	addi	r4,r7,-1
    b8f0:	1580c536 	bltu	r2,r22,bc08 <__divdf3+0x854>
    b8f4:	1200c42e 	bgeu	r2,r8,bc08 <__divdf3+0x854>
    b8f8:	39ffff84 	addi	r7,r7,-2
    b8fc:	1585883a 	add	r2,r2,r22
    b900:	122bc83a 	sub	r21,r2,r8
    b904:	a00b883a 	mov	r5,r20
    b908:	a809883a 	mov	r4,r21
    b90c:	d8c00215 	stw	r3,8(sp)
    b910:	d9c00515 	stw	r7,20(sp)
    b914:	000aa240 	call	aa24 <__udivsi3>
    b918:	9009883a 	mov	r4,r18
    b91c:	100b883a 	mov	r5,r2
    b920:	d8800415 	stw	r2,16(sp)
    b924:	000aae00 	call	aae0 <__mulsi3>
    b928:	a809883a 	mov	r4,r21
    b92c:	a00b883a 	mov	r5,r20
    b930:	1025883a 	mov	r18,r2
    b934:	000aa880 	call	aa88 <__umodsi3>
    b938:	1004943a 	slli	r2,r2,16
    b93c:	813fffcc 	andi	r4,r16,65535
    b940:	d8c00217 	ldw	r3,8(sp)
    b944:	20a0b03a 	or	r16,r4,r2
    b948:	d9c00517 	ldw	r7,20(sp)
    b94c:	da000417 	ldw	r8,16(sp)
    b950:	8480062e 	bgeu	r16,r18,b96c <__divdf3+0x5b8>
    b954:	85a1883a 	add	r16,r16,r22
    b958:	40bfffc4 	addi	r2,r8,-1
    b95c:	8580ac36 	bltu	r16,r22,bc10 <__divdf3+0x85c>
    b960:	8480ab2e 	bgeu	r16,r18,bc10 <__divdf3+0x85c>
    b964:	423fff84 	addi	r8,r8,-2
    b968:	85a1883a 	add	r16,r16,r22
    b96c:	3804943a 	slli	r2,r7,16
    b970:	84a1c83a 	sub	r16,r16,r18
    b974:	e009883a 	mov	r4,fp
    b978:	1228b03a 	or	r20,r2,r8
    b97c:	a1ffffcc 	andi	r7,r20,65535
    b980:	a024d43a 	srli	r18,r20,16
    b984:	380b883a 	mov	r5,r7
    b988:	d8c00215 	stw	r3,8(sp)
    b98c:	d9c00515 	stw	r7,20(sp)
    b990:	000aae00 	call	aae0 <__mulsi3>
    b994:	900b883a 	mov	r5,r18
    b998:	e009883a 	mov	r4,fp
    b99c:	102b883a 	mov	r21,r2
    b9a0:	000aae00 	call	aae0 <__mulsi3>
    b9a4:	900b883a 	mov	r5,r18
    b9a8:	b809883a 	mov	r4,r23
    b9ac:	1039883a 	mov	fp,r2
    b9b0:	000aae00 	call	aae0 <__mulsi3>
    b9b4:	d9c00517 	ldw	r7,20(sp)
    b9b8:	b80b883a 	mov	r5,r23
    b9bc:	1025883a 	mov	r18,r2
    b9c0:	3809883a 	mov	r4,r7
    b9c4:	000aae00 	call	aae0 <__mulsi3>
    b9c8:	a808d43a 	srli	r4,r21,16
    b9cc:	1705883a 	add	r2,r2,fp
    b9d0:	d8c00217 	ldw	r3,8(sp)
    b9d4:	2085883a 	add	r2,r4,r2
    b9d8:	1700022e 	bgeu	r2,fp,b9e4 <__divdf3+0x630>
    b9dc:	01000074 	movhi	r4,1
    b9e0:	9125883a 	add	r18,r18,r4
    b9e4:	1008d43a 	srli	r4,r2,16
    b9e8:	1004943a 	slli	r2,r2,16
    b9ec:	ad7fffcc 	andi	r21,r21,65535
    b9f0:	2489883a 	add	r4,r4,r18
    b9f4:	1545883a 	add	r2,r2,r21
    b9f8:	81003836 	bltu	r16,r4,badc <__divdf3+0x728>
    b9fc:	81003626 	beq	r16,r4,bad8 <__divdf3+0x724>
    ba00:	a5000054 	ori	r20,r20,1
    ba04:	1880ffc4 	addi	r2,r3,1023
    ba08:	00bf2e0e 	bge	zero,r2,b6c4 <__alt_data_end+0xfffd96c4>
    ba0c:	a10001cc 	andi	r4,r20,7
    ba10:	20000726 	beq	r4,zero,ba30 <__divdf3+0x67c>
    ba14:	a10003cc 	andi	r4,r20,15
    ba18:	01400104 	movi	r5,4
    ba1c:	21400426 	beq	r4,r5,ba30 <__divdf3+0x67c>
    ba20:	a149883a 	add	r4,r20,r5
    ba24:	2529803a 	cmpltu	r20,r4,r20
    ba28:	8d23883a 	add	r17,r17,r20
    ba2c:	2029883a 	mov	r20,r4
    ba30:	8900402c 	andhi	r4,r17,256
    ba34:	20000426 	beq	r4,zero,ba48 <__divdf3+0x694>
    ba38:	18810004 	addi	r2,r3,1024
    ba3c:	00ffc034 	movhi	r3,65280
    ba40:	18ffffc4 	addi	r3,r3,-1
    ba44:	88e2703a 	and	r17,r17,r3
    ba48:	00c1ff84 	movi	r3,2046
    ba4c:	18beb416 	blt	r3,r2,b520 <__alt_data_end+0xfffd9520>
    ba50:	a028d0fa 	srli	r20,r20,3
    ba54:	882a977a 	slli	r21,r17,29
    ba58:	8820927a 	slli	r16,r17,9
    ba5c:	1081ffcc 	andi	r2,r2,2047
    ba60:	ad2ab03a 	or	r21,r21,r20
    ba64:	8020d33a 	srli	r16,r16,12
    ba68:	9900004c 	andi	r4,r19,1
    ba6c:	003eb006 	br	b530 <__alt_data_end+0xfffd9530>
    ba70:	8080022c 	andhi	r2,r16,8
    ba74:	10001226 	beq	r2,zero,bac0 <__divdf3+0x70c>
    ba78:	8880022c 	andhi	r2,r17,8
    ba7c:	1000101e 	bne	r2,zero,bac0 <__divdf3+0x70c>
    ba80:	00800434 	movhi	r2,16
    ba84:	8c000234 	orhi	r16,r17,8
    ba88:	10bfffc4 	addi	r2,r2,-1
    ba8c:	b809883a 	mov	r4,r23
    ba90:	80a0703a 	and	r16,r16,r2
    ba94:	a02b883a 	mov	r21,r20
    ba98:	003f0806 	br	b6bc <__alt_data_end+0xfffd96bc>
    ba9c:	008000c4 	movi	r2,3
    baa0:	3880b126 	beq	r7,r2,bd68 <__divdf3+0x9b4>
    baa4:	00800044 	movi	r2,1
    baa8:	38805b1e 	bne	r7,r2,bc18 <__divdf3+0x864>
    baac:	e009883a 	mov	r4,fp
    bab0:	0005883a 	mov	r2,zero
    bab4:	0021883a 	mov	r16,zero
    bab8:	002b883a 	mov	r21,zero
    babc:	003e9c06 	br	b530 <__alt_data_end+0xfffd9530>
    bac0:	00800434 	movhi	r2,16
    bac4:	84000234 	orhi	r16,r16,8
    bac8:	10bfffc4 	addi	r2,r2,-1
    bacc:	b009883a 	mov	r4,r22
    bad0:	80a0703a 	and	r16,r16,r2
    bad4:	003ef906 	br	b6bc <__alt_data_end+0xfffd96bc>
    bad8:	103fca26 	beq	r2,zero,ba04 <__alt_data_end+0xfffd9a04>
    badc:	b421883a 	add	r16,r22,r16
    bae0:	a17fffc4 	addi	r5,r20,-1
    bae4:	8580422e 	bgeu	r16,r22,bbf0 <__divdf3+0x83c>
    bae8:	2829883a 	mov	r20,r5
    baec:	813fc41e 	bne	r16,r4,ba00 <__alt_data_end+0xfffd9a00>
    baf0:	d9800017 	ldw	r6,0(sp)
    baf4:	30bfc21e 	bne	r6,r2,ba00 <__alt_data_end+0xfffd9a00>
    baf8:	003fc206 	br	ba04 <__alt_data_end+0xfffd9a04>
    bafc:	143ff604 	addi	r16,r2,-40
    bb00:	8c20983a 	sll	r16,r17,r16
    bb04:	002b883a 	mov	r21,zero
    bb08:	003eb406 	br	b5dc <__alt_data_end+0xfffd95dc>
    bb0c:	d9800215 	stw	r6,8(sp)
    bb10:	d9c00515 	stw	r7,20(sp)
    bb14:	da000415 	stw	r8,16(sp)
    bb18:	000d3480 	call	d348 <__clzsi2>
    bb1c:	10800804 	addi	r2,r2,32
    bb20:	da000417 	ldw	r8,16(sp)
    bb24:	d9c00517 	ldw	r7,20(sp)
    bb28:	d9800217 	ldw	r6,8(sp)
    bb2c:	003ea106 	br	b5b4 <__alt_data_end+0xfffd95b4>
    bb30:	147ff604 	addi	r17,r2,-40
    bb34:	3462983a 	sll	r17,r6,r17
    bb38:	0029883a 	mov	r20,zero
    bb3c:	003ec906 	br	b664 <__alt_data_end+0xfffd9664>
    bb40:	3009883a 	mov	r4,r6
    bb44:	d9400115 	stw	r5,4(sp)
    bb48:	d9800215 	stw	r6,8(sp)
    bb4c:	da000415 	stw	r8,16(sp)
    bb50:	da400315 	stw	r9,12(sp)
    bb54:	000d3480 	call	d348 <__clzsi2>
    bb58:	10800804 	addi	r2,r2,32
    bb5c:	da400317 	ldw	r9,12(sp)
    bb60:	da000417 	ldw	r8,16(sp)
    bb64:	d9800217 	ldw	r6,8(sp)
    bb68:	d9400117 	ldw	r5,4(sp)
    bb6c:	003eb306 	br	b63c <__alt_data_end+0xfffd963c>
    bb70:	d9800017 	ldw	r6,0(sp)
    bb74:	a9ab883a 	add	r21,r21,r6
    bb78:	a98b803a 	cmpltu	r5,r21,r6
    bb7c:	2d8b883a 	add	r5,r5,r22
    bb80:	2a11883a 	add	r8,r5,r8
    bb84:	897fffc4 	addi	r5,r17,-1
    bb88:	b2000c2e 	bgeu	r22,r8,bbbc <__divdf3+0x808>
    bb8c:	41003f36 	bltu	r8,r4,bc8c <__divdf3+0x8d8>
    bb90:	22006c26 	beq	r4,r8,bd44 <__divdf3+0x990>
    bb94:	4109c83a 	sub	r4,r8,r4
    bb98:	2823883a 	mov	r17,r5
    bb9c:	003f3b06 	br	b88c <__alt_data_end+0xfffd988c>
    bba0:	ad3ed336 	bltu	r21,r20,b6f0 <__alt_data_end+0xfffd96f0>
    bba4:	a804d07a 	srli	r2,r21,1
    bba8:	802e97fa 	slli	r23,r16,31
    bbac:	a82a97fa 	slli	r21,r21,31
    bbb0:	8020d07a 	srli	r16,r16,1
    bbb4:	b8aeb03a 	or	r23,r23,r2
    bbb8:	003ed006 	br	b6fc <__alt_data_end+0xfffd96fc>
    bbbc:	b23ff51e 	bne	r22,r8,bb94 <__alt_data_end+0xfffd9b94>
    bbc0:	d9800017 	ldw	r6,0(sp)
    bbc4:	a9bff12e 	bgeu	r21,r6,bb8c <__alt_data_end+0xfffd9b8c>
    bbc8:	b109c83a 	sub	r4,r22,r4
    bbcc:	2823883a 	mov	r17,r5
    bbd0:	003f2e06 	br	b88c <__alt_data_end+0xfffd988c>
    bbd4:	2021883a 	mov	r16,r4
    bbd8:	003eff06 	br	b7d8 <__alt_data_end+0xfffd97d8>
    bbdc:	2023883a 	mov	r17,r4
    bbe0:	003ee406 	br	b774 <__alt_data_end+0xfffd9774>
    bbe4:	a8bfe236 	bltu	r21,r2,bb70 <__alt_data_end+0xfffd9b70>
    bbe8:	0009883a 	mov	r4,zero
    bbec:	003f2706 	br	b88c <__alt_data_end+0xfffd988c>
    bbf0:	81002d36 	bltu	r16,r4,bca8 <__divdf3+0x8f4>
    bbf4:	24005626 	beq	r4,r16,bd50 <__divdf3+0x99c>
    bbf8:	2829883a 	mov	r20,r5
    bbfc:	003f8006 	br	ba00 <__alt_data_end+0xfffd9a00>
    bc00:	053fffc4 	movi	r20,-1
    bc04:	003f7f06 	br	ba04 <__alt_data_end+0xfffd9a04>
    bc08:	200f883a 	mov	r7,r4
    bc0c:	003f3c06 	br	b900 <__alt_data_end+0xfffd9900>
    bc10:	1011883a 	mov	r8,r2
    bc14:	003f5506 	br	b96c <__alt_data_end+0xfffd996c>
    bc18:	e027883a 	mov	r19,fp
    bc1c:	003f7906 	br	ba04 <__alt_data_end+0xfffd9a04>
    bc20:	010007c4 	movi	r4,31
    bc24:	20c02816 	blt	r4,r3,bcc8 <__divdf3+0x914>
    bc28:	00800804 	movi	r2,32
    bc2c:	10c5c83a 	sub	r2,r2,r3
    bc30:	888a983a 	sll	r5,r17,r2
    bc34:	a0c8d83a 	srl	r4,r20,r3
    bc38:	a084983a 	sll	r2,r20,r2
    bc3c:	88e2d83a 	srl	r17,r17,r3
    bc40:	2906b03a 	or	r3,r5,r4
    bc44:	1004c03a 	cmpne	r2,r2,zero
    bc48:	1886b03a 	or	r3,r3,r2
    bc4c:	188001cc 	andi	r2,r3,7
    bc50:	10000726 	beq	r2,zero,bc70 <__divdf3+0x8bc>
    bc54:	188003cc 	andi	r2,r3,15
    bc58:	01000104 	movi	r4,4
    bc5c:	11000426 	beq	r2,r4,bc70 <__divdf3+0x8bc>
    bc60:	1805883a 	mov	r2,r3
    bc64:	10c00104 	addi	r3,r2,4
    bc68:	1885803a 	cmpltu	r2,r3,r2
    bc6c:	88a3883a 	add	r17,r17,r2
    bc70:	8880202c 	andhi	r2,r17,128
    bc74:	10002926 	beq	r2,zero,bd1c <__divdf3+0x968>
    bc78:	9900004c 	andi	r4,r19,1
    bc7c:	00800044 	movi	r2,1
    bc80:	0021883a 	mov	r16,zero
    bc84:	002b883a 	mov	r21,zero
    bc88:	003e2906 	br	b530 <__alt_data_end+0xfffd9530>
    bc8c:	d9800017 	ldw	r6,0(sp)
    bc90:	8c7fff84 	addi	r17,r17,-2
    bc94:	a9ab883a 	add	r21,r21,r6
    bc98:	a98b803a 	cmpltu	r5,r21,r6
    bc9c:	2d8b883a 	add	r5,r5,r22
    bca0:	2a11883a 	add	r8,r5,r8
    bca4:	003ef806 	br	b888 <__alt_data_end+0xfffd9888>
    bca8:	d9800017 	ldw	r6,0(sp)
    bcac:	318f883a 	add	r7,r6,r6
    bcb0:	398b803a 	cmpltu	r5,r7,r6
    bcb4:	2d8d883a 	add	r6,r5,r22
    bcb8:	81a1883a 	add	r16,r16,r6
    bcbc:	a17fff84 	addi	r5,r20,-2
    bcc0:	d9c00015 	stw	r7,0(sp)
    bcc4:	003f8806 	br	bae8 <__alt_data_end+0xfffd9ae8>
    bcc8:	013ff844 	movi	r4,-31
    bccc:	2085c83a 	sub	r2,r4,r2
    bcd0:	8888d83a 	srl	r4,r17,r2
    bcd4:	00800804 	movi	r2,32
    bcd8:	18802126 	beq	r3,r2,bd60 <__divdf3+0x9ac>
    bcdc:	04001004 	movi	r16,64
    bce0:	80c7c83a 	sub	r3,r16,r3
    bce4:	88e0983a 	sll	r16,r17,r3
    bce8:	8504b03a 	or	r2,r16,r20
    bcec:	1004c03a 	cmpne	r2,r2,zero
    bcf0:	2084b03a 	or	r2,r4,r2
    bcf4:	144001cc 	andi	r17,r2,7
    bcf8:	88000d1e 	bne	r17,zero,bd30 <__divdf3+0x97c>
    bcfc:	0021883a 	mov	r16,zero
    bd00:	102ad0fa 	srli	r21,r2,3
    bd04:	9900004c 	andi	r4,r19,1
    bd08:	0005883a 	mov	r2,zero
    bd0c:	ac6ab03a 	or	r21,r21,r17
    bd10:	003e0706 	br	b530 <__alt_data_end+0xfffd9530>
    bd14:	1007883a 	mov	r3,r2
    bd18:	0023883a 	mov	r17,zero
    bd1c:	8820927a 	slli	r16,r17,9
    bd20:	1805883a 	mov	r2,r3
    bd24:	8822977a 	slli	r17,r17,29
    bd28:	8020d33a 	srli	r16,r16,12
    bd2c:	003ff406 	br	bd00 <__alt_data_end+0xfffd9d00>
    bd30:	10c003cc 	andi	r3,r2,15
    bd34:	01000104 	movi	r4,4
    bd38:	193ff626 	beq	r3,r4,bd14 <__alt_data_end+0xfffd9d14>
    bd3c:	0023883a 	mov	r17,zero
    bd40:	003fc806 	br	bc64 <__alt_data_end+0xfffd9c64>
    bd44:	a8bfd136 	bltu	r21,r2,bc8c <__alt_data_end+0xfffd9c8c>
    bd48:	2823883a 	mov	r17,r5
    bd4c:	003fa606 	br	bbe8 <__alt_data_end+0xfffd9be8>
    bd50:	d9800017 	ldw	r6,0(sp)
    bd54:	30bfd436 	bltu	r6,r2,bca8 <__alt_data_end+0xfffd9ca8>
    bd58:	2829883a 	mov	r20,r5
    bd5c:	003f6406 	br	baf0 <__alt_data_end+0xfffd9af0>
    bd60:	0021883a 	mov	r16,zero
    bd64:	003fe006 	br	bce8 <__alt_data_end+0xfffd9ce8>
    bd68:	00800434 	movhi	r2,16
    bd6c:	8c000234 	orhi	r16,r17,8
    bd70:	10bfffc4 	addi	r2,r2,-1
    bd74:	e009883a 	mov	r4,fp
    bd78:	80a0703a 	and	r16,r16,r2
    bd7c:	a02b883a 	mov	r21,r20
    bd80:	003e4e06 	br	b6bc <__alt_data_end+0xfffd96bc>

0000bd84 <__eqdf2>:
    bd84:	2804d53a 	srli	r2,r5,20
    bd88:	3806d53a 	srli	r3,r7,20
    bd8c:	02000434 	movhi	r8,16
    bd90:	423fffc4 	addi	r8,r8,-1
    bd94:	1081ffcc 	andi	r2,r2,2047
    bd98:	0281ffc4 	movi	r10,2047
    bd9c:	2a12703a 	and	r9,r5,r8
    bda0:	18c1ffcc 	andi	r3,r3,2047
    bda4:	3a10703a 	and	r8,r7,r8
    bda8:	280ad7fa 	srli	r5,r5,31
    bdac:	380ed7fa 	srli	r7,r7,31
    bdb0:	12801026 	beq	r2,r10,bdf4 <__eqdf2+0x70>
    bdb4:	0281ffc4 	movi	r10,2047
    bdb8:	1a800a26 	beq	r3,r10,bde4 <__eqdf2+0x60>
    bdbc:	10c00226 	beq	r2,r3,bdc8 <__eqdf2+0x44>
    bdc0:	00800044 	movi	r2,1
    bdc4:	f800283a 	ret
    bdc8:	4a3ffd1e 	bne	r9,r8,bdc0 <__alt_data_end+0xfffd9dc0>
    bdcc:	21bffc1e 	bne	r4,r6,bdc0 <__alt_data_end+0xfffd9dc0>
    bdd0:	29c00c26 	beq	r5,r7,be04 <__eqdf2+0x80>
    bdd4:	103ffa1e 	bne	r2,zero,bdc0 <__alt_data_end+0xfffd9dc0>
    bdd8:	2244b03a 	or	r2,r4,r9
    bddc:	1004c03a 	cmpne	r2,r2,zero
    bde0:	f800283a 	ret
    bde4:	3214b03a 	or	r10,r6,r8
    bde8:	503ff426 	beq	r10,zero,bdbc <__alt_data_end+0xfffd9dbc>
    bdec:	00800044 	movi	r2,1
    bdf0:	f800283a 	ret
    bdf4:	2254b03a 	or	r10,r4,r9
    bdf8:	503fee26 	beq	r10,zero,bdb4 <__alt_data_end+0xfffd9db4>
    bdfc:	00800044 	movi	r2,1
    be00:	f800283a 	ret
    be04:	0005883a 	mov	r2,zero
    be08:	f800283a 	ret

0000be0c <__gedf2>:
    be0c:	2804d53a 	srli	r2,r5,20
    be10:	3806d53a 	srli	r3,r7,20
    be14:	02000434 	movhi	r8,16
    be18:	423fffc4 	addi	r8,r8,-1
    be1c:	1081ffcc 	andi	r2,r2,2047
    be20:	0241ffc4 	movi	r9,2047
    be24:	2a14703a 	and	r10,r5,r8
    be28:	18c1ffcc 	andi	r3,r3,2047
    be2c:	3a10703a 	and	r8,r7,r8
    be30:	280ad7fa 	srli	r5,r5,31
    be34:	380ed7fa 	srli	r7,r7,31
    be38:	12401d26 	beq	r2,r9,beb0 <__gedf2+0xa4>
    be3c:	0241ffc4 	movi	r9,2047
    be40:	1a401226 	beq	r3,r9,be8c <__gedf2+0x80>
    be44:	1000081e 	bne	r2,zero,be68 <__gedf2+0x5c>
    be48:	2296b03a 	or	r11,r4,r10
    be4c:	5813003a 	cmpeq	r9,r11,zero
    be50:	1800091e 	bne	r3,zero,be78 <__gedf2+0x6c>
    be54:	3218b03a 	or	r12,r6,r8
    be58:	6000071e 	bne	r12,zero,be78 <__gedf2+0x6c>
    be5c:	0005883a 	mov	r2,zero
    be60:	5800101e 	bne	r11,zero,bea4 <__gedf2+0x98>
    be64:	f800283a 	ret
    be68:	18000c1e 	bne	r3,zero,be9c <__gedf2+0x90>
    be6c:	3212b03a 	or	r9,r6,r8
    be70:	48000c26 	beq	r9,zero,bea4 <__gedf2+0x98>
    be74:	0013883a 	mov	r9,zero
    be78:	39c03fcc 	andi	r7,r7,255
    be7c:	48000826 	beq	r9,zero,bea0 <__gedf2+0x94>
    be80:	38000926 	beq	r7,zero,bea8 <__gedf2+0x9c>
    be84:	00800044 	movi	r2,1
    be88:	f800283a 	ret
    be8c:	3212b03a 	or	r9,r6,r8
    be90:	483fec26 	beq	r9,zero,be44 <__alt_data_end+0xfffd9e44>
    be94:	00bfff84 	movi	r2,-2
    be98:	f800283a 	ret
    be9c:	39c03fcc 	andi	r7,r7,255
    bea0:	29c00626 	beq	r5,r7,bebc <__gedf2+0xb0>
    bea4:	283ff726 	beq	r5,zero,be84 <__alt_data_end+0xfffd9e84>
    bea8:	00bfffc4 	movi	r2,-1
    beac:	f800283a 	ret
    beb0:	2292b03a 	or	r9,r4,r10
    beb4:	483fe126 	beq	r9,zero,be3c <__alt_data_end+0xfffd9e3c>
    beb8:	003ff606 	br	be94 <__alt_data_end+0xfffd9e94>
    bebc:	18bff916 	blt	r3,r2,bea4 <__alt_data_end+0xfffd9ea4>
    bec0:	10c00316 	blt	r2,r3,bed0 <__gedf2+0xc4>
    bec4:	42bff736 	bltu	r8,r10,bea4 <__alt_data_end+0xfffd9ea4>
    bec8:	52000326 	beq	r10,r8,bed8 <__gedf2+0xcc>
    becc:	5200042e 	bgeu	r10,r8,bee0 <__gedf2+0xd4>
    bed0:	283fec1e 	bne	r5,zero,be84 <__alt_data_end+0xfffd9e84>
    bed4:	003ff406 	br	bea8 <__alt_data_end+0xfffd9ea8>
    bed8:	313ff236 	bltu	r6,r4,bea4 <__alt_data_end+0xfffd9ea4>
    bedc:	21bffc36 	bltu	r4,r6,bed0 <__alt_data_end+0xfffd9ed0>
    bee0:	0005883a 	mov	r2,zero
    bee4:	f800283a 	ret

0000bee8 <__ledf2>:
    bee8:	2804d53a 	srli	r2,r5,20
    beec:	3810d53a 	srli	r8,r7,20
    bef0:	00c00434 	movhi	r3,16
    bef4:	18ffffc4 	addi	r3,r3,-1
    bef8:	1081ffcc 	andi	r2,r2,2047
    befc:	0241ffc4 	movi	r9,2047
    bf00:	28d4703a 	and	r10,r5,r3
    bf04:	4201ffcc 	andi	r8,r8,2047
    bf08:	38c6703a 	and	r3,r7,r3
    bf0c:	280ad7fa 	srli	r5,r5,31
    bf10:	380ed7fa 	srli	r7,r7,31
    bf14:	12401f26 	beq	r2,r9,bf94 <__ledf2+0xac>
    bf18:	0241ffc4 	movi	r9,2047
    bf1c:	42401426 	beq	r8,r9,bf70 <__ledf2+0x88>
    bf20:	1000091e 	bne	r2,zero,bf48 <__ledf2+0x60>
    bf24:	2296b03a 	or	r11,r4,r10
    bf28:	5813003a 	cmpeq	r9,r11,zero
    bf2c:	29403fcc 	andi	r5,r5,255
    bf30:	40000a1e 	bne	r8,zero,bf5c <__ledf2+0x74>
    bf34:	30d8b03a 	or	r12,r6,r3
    bf38:	6000081e 	bne	r12,zero,bf5c <__ledf2+0x74>
    bf3c:	0005883a 	mov	r2,zero
    bf40:	5800111e 	bne	r11,zero,bf88 <__ledf2+0xa0>
    bf44:	f800283a 	ret
    bf48:	29403fcc 	andi	r5,r5,255
    bf4c:	40000c1e 	bne	r8,zero,bf80 <__ledf2+0x98>
    bf50:	30d2b03a 	or	r9,r6,r3
    bf54:	48000c26 	beq	r9,zero,bf88 <__ledf2+0xa0>
    bf58:	0013883a 	mov	r9,zero
    bf5c:	39c03fcc 	andi	r7,r7,255
    bf60:	48000826 	beq	r9,zero,bf84 <__ledf2+0x9c>
    bf64:	38001126 	beq	r7,zero,bfac <__ledf2+0xc4>
    bf68:	00800044 	movi	r2,1
    bf6c:	f800283a 	ret
    bf70:	30d2b03a 	or	r9,r6,r3
    bf74:	483fea26 	beq	r9,zero,bf20 <__alt_data_end+0xfffd9f20>
    bf78:	00800084 	movi	r2,2
    bf7c:	f800283a 	ret
    bf80:	39c03fcc 	andi	r7,r7,255
    bf84:	39400726 	beq	r7,r5,bfa4 <__ledf2+0xbc>
    bf88:	2800081e 	bne	r5,zero,bfac <__ledf2+0xc4>
    bf8c:	00800044 	movi	r2,1
    bf90:	f800283a 	ret
    bf94:	2292b03a 	or	r9,r4,r10
    bf98:	483fdf26 	beq	r9,zero,bf18 <__alt_data_end+0xfffd9f18>
    bf9c:	00800084 	movi	r2,2
    bfa0:	f800283a 	ret
    bfa4:	4080030e 	bge	r8,r2,bfb4 <__ledf2+0xcc>
    bfa8:	383fef26 	beq	r7,zero,bf68 <__alt_data_end+0xfffd9f68>
    bfac:	00bfffc4 	movi	r2,-1
    bfb0:	f800283a 	ret
    bfb4:	123feb16 	blt	r2,r8,bf64 <__alt_data_end+0xfffd9f64>
    bfb8:	1abff336 	bltu	r3,r10,bf88 <__alt_data_end+0xfffd9f88>
    bfbc:	50c00326 	beq	r10,r3,bfcc <__ledf2+0xe4>
    bfc0:	50c0042e 	bgeu	r10,r3,bfd4 <__ledf2+0xec>
    bfc4:	283fe81e 	bne	r5,zero,bf68 <__alt_data_end+0xfffd9f68>
    bfc8:	003ff806 	br	bfac <__alt_data_end+0xfffd9fac>
    bfcc:	313fee36 	bltu	r6,r4,bf88 <__alt_data_end+0xfffd9f88>
    bfd0:	21bffc36 	bltu	r4,r6,bfc4 <__alt_data_end+0xfffd9fc4>
    bfd4:	0005883a 	mov	r2,zero
    bfd8:	f800283a 	ret

0000bfdc <__muldf3>:
    bfdc:	deffee04 	addi	sp,sp,-72
    bfe0:	dd000c15 	stw	r20,48(sp)
    bfe4:	2828d53a 	srli	r20,r5,20
    bfe8:	ddc00f15 	stw	r23,60(sp)
    bfec:	282ed7fa 	srli	r23,r5,31
    bff0:	dc000815 	stw	r16,32(sp)
    bff4:	04000434 	movhi	r16,16
    bff8:	dcc00b15 	stw	r19,44(sp)
    bffc:	843fffc4 	addi	r16,r16,-1
    c000:	dfc01115 	stw	ra,68(sp)
    c004:	df001015 	stw	fp,64(sp)
    c008:	dd800e15 	stw	r22,56(sp)
    c00c:	dd400d15 	stw	r21,52(sp)
    c010:	dc800a15 	stw	r18,40(sp)
    c014:	dc400915 	stw	r17,36(sp)
    c018:	a501ffcc 	andi	r20,r20,2047
    c01c:	2c20703a 	and	r16,r5,r16
    c020:	b827883a 	mov	r19,r23
    c024:	ba403fcc 	andi	r9,r23,255
    c028:	a0006026 	beq	r20,zero,c1ac <__muldf3+0x1d0>
    c02c:	0081ffc4 	movi	r2,2047
    c030:	202d883a 	mov	r22,r4
    c034:	a0803626 	beq	r20,r2,c110 <__muldf3+0x134>
    c038:	84000434 	orhi	r16,r16,16
    c03c:	200ad77a 	srli	r5,r4,29
    c040:	800490fa 	slli	r2,r16,3
    c044:	202c90fa 	slli	r22,r4,3
    c048:	a53f0044 	addi	r20,r20,-1023
    c04c:	28a0b03a 	or	r16,r5,r2
    c050:	002b883a 	mov	r21,zero
    c054:	000b883a 	mov	r5,zero
    c058:	3804d53a 	srli	r2,r7,20
    c05c:	3838d7fa 	srli	fp,r7,31
    c060:	04400434 	movhi	r17,16
    c064:	8c7fffc4 	addi	r17,r17,-1
    c068:	1081ffcc 	andi	r2,r2,2047
    c06c:	3025883a 	mov	r18,r6
    c070:	3c62703a 	and	r17,r7,r17
    c074:	e2803fcc 	andi	r10,fp,255
    c078:	10006d26 	beq	r2,zero,c230 <__muldf3+0x254>
    c07c:	00c1ffc4 	movi	r3,2047
    c080:	10c06526 	beq	r2,r3,c218 <__muldf3+0x23c>
    c084:	8c400434 	orhi	r17,r17,16
    c088:	300ed77a 	srli	r7,r6,29
    c08c:	880690fa 	slli	r3,r17,3
    c090:	302490fa 	slli	r18,r6,3
    c094:	10bf0044 	addi	r2,r2,-1023
    c098:	38e2b03a 	or	r17,r7,r3
    c09c:	000f883a 	mov	r7,zero
    c0a0:	a087883a 	add	r3,r20,r2
    c0a4:	010003c4 	movi	r4,15
    c0a8:	3d44b03a 	or	r2,r7,r21
    c0ac:	e5ccf03a 	xor	r6,fp,r23
    c0b0:	1a000044 	addi	r8,r3,1
    c0b4:	20809b36 	bltu	r4,r2,c324 <__muldf3+0x348>
    c0b8:	100490ba 	slli	r2,r2,2
    c0bc:	01000074 	movhi	r4,1
    c0c0:	21303404 	addi	r4,r4,-16176
    c0c4:	1105883a 	add	r2,r2,r4
    c0c8:	10800017 	ldw	r2,0(r2)
    c0cc:	1000683a 	jmp	r2
    c0d0:	0000c324 	muli	zero,zero,780
    c0d4:	0000c130 	cmpltui	zero,zero,772
    c0d8:	0000c130 	cmpltui	zero,zero,772
    c0dc:	0000c12c 	andhi	zero,zero,772
    c0e0:	0000c300 	call	c30 <___vfprintf_internal_r+0x5ec>
    c0e4:	0000c300 	call	c30 <___vfprintf_internal_r+0x5ec>
    c0e8:	0000c2e8 	cmpgeui	zero,zero,779
    c0ec:	0000c12c 	andhi	zero,zero,772
    c0f0:	0000c300 	call	c30 <___vfprintf_internal_r+0x5ec>
    c0f4:	0000c2e8 	cmpgeui	zero,zero,779
    c0f8:	0000c300 	call	c30 <___vfprintf_internal_r+0x5ec>
    c0fc:	0000c12c 	andhi	zero,zero,772
    c100:	0000c310 	cmplti	zero,zero,780
    c104:	0000c310 	cmplti	zero,zero,780
    c108:	0000c310 	cmplti	zero,zero,780
    c10c:	0000c670 	cmpltui	zero,zero,793
    c110:	2404b03a 	or	r2,r4,r16
    c114:	1000711e 	bne	r2,zero,c2dc <__muldf3+0x300>
    c118:	05400204 	movi	r21,8
    c11c:	0021883a 	mov	r16,zero
    c120:	002d883a 	mov	r22,zero
    c124:	01400084 	movi	r5,2
    c128:	003fcb06 	br	c058 <__alt_data_end+0xfffda058>
    c12c:	500d883a 	mov	r6,r10
    c130:	00800084 	movi	r2,2
    c134:	38805926 	beq	r7,r2,c29c <__muldf3+0x2c0>
    c138:	008000c4 	movi	r2,3
    c13c:	3881bb26 	beq	r7,r2,c82c <__muldf3+0x850>
    c140:	00800044 	movi	r2,1
    c144:	3881961e 	bne	r7,r2,c7a0 <__muldf3+0x7c4>
    c148:	3027883a 	mov	r19,r6
    c14c:	0005883a 	mov	r2,zero
    c150:	0021883a 	mov	r16,zero
    c154:	002d883a 	mov	r22,zero
    c158:	1004953a 	slli	r2,r2,20
    c15c:	98c03fcc 	andi	r3,r19,255
    c160:	04400434 	movhi	r17,16
    c164:	8c7fffc4 	addi	r17,r17,-1
    c168:	180697fa 	slli	r3,r3,31
    c16c:	8460703a 	and	r16,r16,r17
    c170:	80a0b03a 	or	r16,r16,r2
    c174:	80c6b03a 	or	r3,r16,r3
    c178:	b005883a 	mov	r2,r22
    c17c:	dfc01117 	ldw	ra,68(sp)
    c180:	df001017 	ldw	fp,64(sp)
    c184:	ddc00f17 	ldw	r23,60(sp)
    c188:	dd800e17 	ldw	r22,56(sp)
    c18c:	dd400d17 	ldw	r21,52(sp)
    c190:	dd000c17 	ldw	r20,48(sp)
    c194:	dcc00b17 	ldw	r19,44(sp)
    c198:	dc800a17 	ldw	r18,40(sp)
    c19c:	dc400917 	ldw	r17,36(sp)
    c1a0:	dc000817 	ldw	r16,32(sp)
    c1a4:	dec01204 	addi	sp,sp,72
    c1a8:	f800283a 	ret
    c1ac:	2404b03a 	or	r2,r4,r16
    c1b0:	202b883a 	mov	r21,r4
    c1b4:	10004426 	beq	r2,zero,c2c8 <__muldf3+0x2ec>
    c1b8:	80015126 	beq	r16,zero,c700 <__muldf3+0x724>
    c1bc:	8009883a 	mov	r4,r16
    c1c0:	d9800715 	stw	r6,28(sp)
    c1c4:	d9c00215 	stw	r7,8(sp)
    c1c8:	da400415 	stw	r9,16(sp)
    c1cc:	000d3480 	call	d348 <__clzsi2>
    c1d0:	d9800717 	ldw	r6,28(sp)
    c1d4:	d9c00217 	ldw	r7,8(sp)
    c1d8:	da400417 	ldw	r9,16(sp)
    c1dc:	113ffd44 	addi	r4,r2,-11
    c1e0:	00c00704 	movi	r3,28
    c1e4:	19014216 	blt	r3,r4,c6f0 <__muldf3+0x714>
    c1e8:	00c00744 	movi	r3,29
    c1ec:	15bffe04 	addi	r22,r2,-8
    c1f0:	1907c83a 	sub	r3,r3,r4
    c1f4:	85a0983a 	sll	r16,r16,r22
    c1f8:	a8c6d83a 	srl	r3,r21,r3
    c1fc:	adac983a 	sll	r22,r21,r22
    c200:	1c20b03a 	or	r16,r3,r16
    c204:	1080fcc4 	addi	r2,r2,1011
    c208:	00a9c83a 	sub	r20,zero,r2
    c20c:	002b883a 	mov	r21,zero
    c210:	000b883a 	mov	r5,zero
    c214:	003f9006 	br	c058 <__alt_data_end+0xfffda058>
    c218:	3446b03a 	or	r3,r6,r17
    c21c:	1800281e 	bne	r3,zero,c2c0 <__muldf3+0x2e4>
    c220:	0023883a 	mov	r17,zero
    c224:	0025883a 	mov	r18,zero
    c228:	01c00084 	movi	r7,2
    c22c:	003f9c06 	br	c0a0 <__alt_data_end+0xfffda0a0>
    c230:	3446b03a 	or	r3,r6,r17
    c234:	18001e26 	beq	r3,zero,c2b0 <__muldf3+0x2d4>
    c238:	88012126 	beq	r17,zero,c6c0 <__muldf3+0x6e4>
    c23c:	8809883a 	mov	r4,r17
    c240:	d9400215 	stw	r5,8(sp)
    c244:	d9800715 	stw	r6,28(sp)
    c248:	da400415 	stw	r9,16(sp)
    c24c:	da800315 	stw	r10,12(sp)
    c250:	000d3480 	call	d348 <__clzsi2>
    c254:	d9400217 	ldw	r5,8(sp)
    c258:	d9800717 	ldw	r6,28(sp)
    c25c:	da400417 	ldw	r9,16(sp)
    c260:	da800317 	ldw	r10,12(sp)
    c264:	113ffd44 	addi	r4,r2,-11
    c268:	00c00704 	movi	r3,28
    c26c:	19011016 	blt	r3,r4,c6b0 <__muldf3+0x6d4>
    c270:	00c00744 	movi	r3,29
    c274:	14bffe04 	addi	r18,r2,-8
    c278:	1907c83a 	sub	r3,r3,r4
    c27c:	8ca2983a 	sll	r17,r17,r18
    c280:	30c6d83a 	srl	r3,r6,r3
    c284:	34a4983a 	sll	r18,r6,r18
    c288:	1c62b03a 	or	r17,r3,r17
    c28c:	1080fcc4 	addi	r2,r2,1011
    c290:	0085c83a 	sub	r2,zero,r2
    c294:	000f883a 	mov	r7,zero
    c298:	003f8106 	br	c0a0 <__alt_data_end+0xfffda0a0>
    c29c:	3027883a 	mov	r19,r6
    c2a0:	0081ffc4 	movi	r2,2047
    c2a4:	0021883a 	mov	r16,zero
    c2a8:	002d883a 	mov	r22,zero
    c2ac:	003faa06 	br	c158 <__alt_data_end+0xfffda158>
    c2b0:	0023883a 	mov	r17,zero
    c2b4:	0025883a 	mov	r18,zero
    c2b8:	01c00044 	movi	r7,1
    c2bc:	003f7806 	br	c0a0 <__alt_data_end+0xfffda0a0>
    c2c0:	01c000c4 	movi	r7,3
    c2c4:	003f7606 	br	c0a0 <__alt_data_end+0xfffda0a0>
    c2c8:	05400104 	movi	r21,4
    c2cc:	0021883a 	mov	r16,zero
    c2d0:	002d883a 	mov	r22,zero
    c2d4:	01400044 	movi	r5,1
    c2d8:	003f5f06 	br	c058 <__alt_data_end+0xfffda058>
    c2dc:	05400304 	movi	r21,12
    c2e0:	014000c4 	movi	r5,3
    c2e4:	003f5c06 	br	c058 <__alt_data_end+0xfffda058>
    c2e8:	04000434 	movhi	r16,16
    c2ec:	0027883a 	mov	r19,zero
    c2f0:	843fffc4 	addi	r16,r16,-1
    c2f4:	05bfffc4 	movi	r22,-1
    c2f8:	0081ffc4 	movi	r2,2047
    c2fc:	003f9606 	br	c158 <__alt_data_end+0xfffda158>
    c300:	8023883a 	mov	r17,r16
    c304:	b025883a 	mov	r18,r22
    c308:	280f883a 	mov	r7,r5
    c30c:	003f8806 	br	c130 <__alt_data_end+0xfffda130>
    c310:	8023883a 	mov	r17,r16
    c314:	b025883a 	mov	r18,r22
    c318:	480d883a 	mov	r6,r9
    c31c:	280f883a 	mov	r7,r5
    c320:	003f8306 	br	c130 <__alt_data_end+0xfffda130>
    c324:	b026d43a 	srli	r19,r22,16
    c328:	902ed43a 	srli	r23,r18,16
    c32c:	b5bfffcc 	andi	r22,r22,65535
    c330:	94bfffcc 	andi	r18,r18,65535
    c334:	b00b883a 	mov	r5,r22
    c338:	9009883a 	mov	r4,r18
    c33c:	d8c00515 	stw	r3,20(sp)
    c340:	d9800715 	stw	r6,28(sp)
    c344:	da000615 	stw	r8,24(sp)
    c348:	000aae00 	call	aae0 <__mulsi3>
    c34c:	980b883a 	mov	r5,r19
    c350:	9009883a 	mov	r4,r18
    c354:	1029883a 	mov	r20,r2
    c358:	000aae00 	call	aae0 <__mulsi3>
    c35c:	b80b883a 	mov	r5,r23
    c360:	9809883a 	mov	r4,r19
    c364:	102b883a 	mov	r21,r2
    c368:	000aae00 	call	aae0 <__mulsi3>
    c36c:	b809883a 	mov	r4,r23
    c370:	b00b883a 	mov	r5,r22
    c374:	1039883a 	mov	fp,r2
    c378:	000aae00 	call	aae0 <__mulsi3>
    c37c:	a008d43a 	srli	r4,r20,16
    c380:	1545883a 	add	r2,r2,r21
    c384:	d8c00517 	ldw	r3,20(sp)
    c388:	2085883a 	add	r2,r4,r2
    c38c:	d9800717 	ldw	r6,28(sp)
    c390:	da000617 	ldw	r8,24(sp)
    c394:	1540022e 	bgeu	r2,r21,c3a0 <__muldf3+0x3c4>
    c398:	01000074 	movhi	r4,1
    c39c:	e139883a 	add	fp,fp,r4
    c3a0:	100e943a 	slli	r7,r2,16
    c3a4:	1004d43a 	srli	r2,r2,16
    c3a8:	882ad43a 	srli	r21,r17,16
    c3ac:	a53fffcc 	andi	r20,r20,65535
    c3b0:	8c7fffcc 	andi	r17,r17,65535
    c3b4:	3d29883a 	add	r20,r7,r20
    c3b8:	b00b883a 	mov	r5,r22
    c3bc:	8809883a 	mov	r4,r17
    c3c0:	d8c00515 	stw	r3,20(sp)
    c3c4:	d9800715 	stw	r6,28(sp)
    c3c8:	da000615 	stw	r8,24(sp)
    c3cc:	dd000115 	stw	r20,4(sp)
    c3d0:	d8800015 	stw	r2,0(sp)
    c3d4:	000aae00 	call	aae0 <__mulsi3>
    c3d8:	980b883a 	mov	r5,r19
    c3dc:	8809883a 	mov	r4,r17
    c3e0:	d8800215 	stw	r2,8(sp)
    c3e4:	000aae00 	call	aae0 <__mulsi3>
    c3e8:	9809883a 	mov	r4,r19
    c3ec:	a80b883a 	mov	r5,r21
    c3f0:	1029883a 	mov	r20,r2
    c3f4:	000aae00 	call	aae0 <__mulsi3>
    c3f8:	b00b883a 	mov	r5,r22
    c3fc:	a809883a 	mov	r4,r21
    c400:	d8800415 	stw	r2,16(sp)
    c404:	000aae00 	call	aae0 <__mulsi3>
    c408:	d9c00217 	ldw	r7,8(sp)
    c40c:	1505883a 	add	r2,r2,r20
    c410:	d8c00517 	ldw	r3,20(sp)
    c414:	3826d43a 	srli	r19,r7,16
    c418:	d9800717 	ldw	r6,28(sp)
    c41c:	da000617 	ldw	r8,24(sp)
    c420:	9885883a 	add	r2,r19,r2
    c424:	da400417 	ldw	r9,16(sp)
    c428:	1500022e 	bgeu	r2,r20,c434 <__muldf3+0x458>
    c42c:	01000074 	movhi	r4,1
    c430:	4913883a 	add	r9,r9,r4
    c434:	1028d43a 	srli	r20,r2,16
    c438:	1004943a 	slli	r2,r2,16
    c43c:	802cd43a 	srli	r22,r16,16
    c440:	843fffcc 	andi	r16,r16,65535
    c444:	3cffffcc 	andi	r19,r7,65535
    c448:	9009883a 	mov	r4,r18
    c44c:	800b883a 	mov	r5,r16
    c450:	a269883a 	add	r20,r20,r9
    c454:	d8c00515 	stw	r3,20(sp)
    c458:	d9800715 	stw	r6,28(sp)
    c45c:	da000615 	stw	r8,24(sp)
    c460:	14e7883a 	add	r19,r2,r19
    c464:	000aae00 	call	aae0 <__mulsi3>
    c468:	9009883a 	mov	r4,r18
    c46c:	b00b883a 	mov	r5,r22
    c470:	d8800315 	stw	r2,12(sp)
    c474:	000aae00 	call	aae0 <__mulsi3>
    c478:	b809883a 	mov	r4,r23
    c47c:	b00b883a 	mov	r5,r22
    c480:	d8800215 	stw	r2,8(sp)
    c484:	000aae00 	call	aae0 <__mulsi3>
    c488:	b80b883a 	mov	r5,r23
    c48c:	8009883a 	mov	r4,r16
    c490:	d8800415 	stw	r2,16(sp)
    c494:	000aae00 	call	aae0 <__mulsi3>
    c498:	da800317 	ldw	r10,12(sp)
    c49c:	d9c00217 	ldw	r7,8(sp)
    c4a0:	d9000017 	ldw	r4,0(sp)
    c4a4:	502ed43a 	srli	r23,r10,16
    c4a8:	11c5883a 	add	r2,r2,r7
    c4ac:	24e5883a 	add	r18,r4,r19
    c4b0:	b885883a 	add	r2,r23,r2
    c4b4:	d8c00517 	ldw	r3,20(sp)
    c4b8:	d9800717 	ldw	r6,28(sp)
    c4bc:	da000617 	ldw	r8,24(sp)
    c4c0:	da400417 	ldw	r9,16(sp)
    c4c4:	11c0022e 	bgeu	r2,r7,c4d0 <__muldf3+0x4f4>
    c4c8:	01000074 	movhi	r4,1
    c4cc:	4913883a 	add	r9,r9,r4
    c4d0:	100ed43a 	srli	r7,r2,16
    c4d4:	1004943a 	slli	r2,r2,16
    c4d8:	55ffffcc 	andi	r23,r10,65535
    c4dc:	3a53883a 	add	r9,r7,r9
    c4e0:	8809883a 	mov	r4,r17
    c4e4:	800b883a 	mov	r5,r16
    c4e8:	d8c00515 	stw	r3,20(sp)
    c4ec:	d9800715 	stw	r6,28(sp)
    c4f0:	da000615 	stw	r8,24(sp)
    c4f4:	da400415 	stw	r9,16(sp)
    c4f8:	15ef883a 	add	r23,r2,r23
    c4fc:	000aae00 	call	aae0 <__mulsi3>
    c500:	8809883a 	mov	r4,r17
    c504:	b00b883a 	mov	r5,r22
    c508:	d8800215 	stw	r2,8(sp)
    c50c:	000aae00 	call	aae0 <__mulsi3>
    c510:	b00b883a 	mov	r5,r22
    c514:	a809883a 	mov	r4,r21
    c518:	d8800315 	stw	r2,12(sp)
    c51c:	000aae00 	call	aae0 <__mulsi3>
    c520:	8009883a 	mov	r4,r16
    c524:	a80b883a 	mov	r5,r21
    c528:	1023883a 	mov	r17,r2
    c52c:	000aae00 	call	aae0 <__mulsi3>
    c530:	d9c00217 	ldw	r7,8(sp)
    c534:	da800317 	ldw	r10,12(sp)
    c538:	d8c00517 	ldw	r3,20(sp)
    c53c:	3808d43a 	srli	r4,r7,16
    c540:	1285883a 	add	r2,r2,r10
    c544:	d9800717 	ldw	r6,28(sp)
    c548:	2085883a 	add	r2,r4,r2
    c54c:	da000617 	ldw	r8,24(sp)
    c550:	da400417 	ldw	r9,16(sp)
    c554:	1280022e 	bgeu	r2,r10,c560 <__muldf3+0x584>
    c558:	01000074 	movhi	r4,1
    c55c:	8923883a 	add	r17,r17,r4
    c560:	1008943a 	slli	r4,r2,16
    c564:	39ffffcc 	andi	r7,r7,65535
    c568:	e4b9883a 	add	fp,fp,r18
    c56c:	21cf883a 	add	r7,r4,r7
    c570:	e4e7803a 	cmpltu	r19,fp,r19
    c574:	3d0f883a 	add	r7,r7,r20
    c578:	bf39883a 	add	fp,r23,fp
    c57c:	99c9883a 	add	r4,r19,r7
    c580:	e5ef803a 	cmpltu	r23,fp,r23
    c584:	490b883a 	add	r5,r9,r4
    c588:	1004d43a 	srli	r2,r2,16
    c58c:	b965883a 	add	r18,r23,r5
    c590:	24c9803a 	cmpltu	r4,r4,r19
    c594:	3d29803a 	cmpltu	r20,r7,r20
    c598:	a128b03a 	or	r20,r20,r4
    c59c:	95ef803a 	cmpltu	r23,r18,r23
    c5a0:	2a53803a 	cmpltu	r9,r5,r9
    c5a4:	a0a9883a 	add	r20,r20,r2
    c5a8:	4deeb03a 	or	r23,r9,r23
    c5ac:	a5ef883a 	add	r23,r20,r23
    c5b0:	bc63883a 	add	r17,r23,r17
    c5b4:	e004927a 	slli	r2,fp,9
    c5b8:	d9000117 	ldw	r4,4(sp)
    c5bc:	882e927a 	slli	r23,r17,9
    c5c0:	9022d5fa 	srli	r17,r18,23
    c5c4:	e038d5fa 	srli	fp,fp,23
    c5c8:	1104b03a 	or	r2,r2,r4
    c5cc:	9024927a 	slli	r18,r18,9
    c5d0:	1004c03a 	cmpne	r2,r2,zero
    c5d4:	bc62b03a 	or	r17,r23,r17
    c5d8:	1738b03a 	or	fp,r2,fp
    c5dc:	8880402c 	andhi	r2,r17,256
    c5e0:	e4a4b03a 	or	r18,fp,r18
    c5e4:	10000726 	beq	r2,zero,c604 <__muldf3+0x628>
    c5e8:	9006d07a 	srli	r3,r18,1
    c5ec:	880497fa 	slli	r2,r17,31
    c5f0:	9480004c 	andi	r18,r18,1
    c5f4:	8822d07a 	srli	r17,r17,1
    c5f8:	1ca4b03a 	or	r18,r3,r18
    c5fc:	14a4b03a 	or	r18,r2,r18
    c600:	4007883a 	mov	r3,r8
    c604:	1880ffc4 	addi	r2,r3,1023
    c608:	0080460e 	bge	zero,r2,c724 <__muldf3+0x748>
    c60c:	910001cc 	andi	r4,r18,7
    c610:	20000726 	beq	r4,zero,c630 <__muldf3+0x654>
    c614:	910003cc 	andi	r4,r18,15
    c618:	01400104 	movi	r5,4
    c61c:	21400426 	beq	r4,r5,c630 <__muldf3+0x654>
    c620:	9149883a 	add	r4,r18,r5
    c624:	24a5803a 	cmpltu	r18,r4,r18
    c628:	8ca3883a 	add	r17,r17,r18
    c62c:	2025883a 	mov	r18,r4
    c630:	8900402c 	andhi	r4,r17,256
    c634:	20000426 	beq	r4,zero,c648 <__muldf3+0x66c>
    c638:	18810004 	addi	r2,r3,1024
    c63c:	00ffc034 	movhi	r3,65280
    c640:	18ffffc4 	addi	r3,r3,-1
    c644:	88e2703a 	and	r17,r17,r3
    c648:	00c1ff84 	movi	r3,2046
    c64c:	18bf1316 	blt	r3,r2,c29c <__alt_data_end+0xfffda29c>
    c650:	882c977a 	slli	r22,r17,29
    c654:	9024d0fa 	srli	r18,r18,3
    c658:	8822927a 	slli	r17,r17,9
    c65c:	1081ffcc 	andi	r2,r2,2047
    c660:	b4acb03a 	or	r22,r22,r18
    c664:	8820d33a 	srli	r16,r17,12
    c668:	3027883a 	mov	r19,r6
    c66c:	003eba06 	br	c158 <__alt_data_end+0xfffda158>
    c670:	8080022c 	andhi	r2,r16,8
    c674:	10000926 	beq	r2,zero,c69c <__muldf3+0x6c0>
    c678:	8880022c 	andhi	r2,r17,8
    c67c:	1000071e 	bne	r2,zero,c69c <__muldf3+0x6c0>
    c680:	00800434 	movhi	r2,16
    c684:	8c000234 	orhi	r16,r17,8
    c688:	10bfffc4 	addi	r2,r2,-1
    c68c:	e027883a 	mov	r19,fp
    c690:	80a0703a 	and	r16,r16,r2
    c694:	902d883a 	mov	r22,r18
    c698:	003f1706 	br	c2f8 <__alt_data_end+0xfffda2f8>
    c69c:	00800434 	movhi	r2,16
    c6a0:	84000234 	orhi	r16,r16,8
    c6a4:	10bfffc4 	addi	r2,r2,-1
    c6a8:	80a0703a 	and	r16,r16,r2
    c6ac:	003f1206 	br	c2f8 <__alt_data_end+0xfffda2f8>
    c6b0:	147ff604 	addi	r17,r2,-40
    c6b4:	3462983a 	sll	r17,r6,r17
    c6b8:	0025883a 	mov	r18,zero
    c6bc:	003ef306 	br	c28c <__alt_data_end+0xfffda28c>
    c6c0:	3009883a 	mov	r4,r6
    c6c4:	d9400215 	stw	r5,8(sp)
    c6c8:	d9800715 	stw	r6,28(sp)
    c6cc:	da400415 	stw	r9,16(sp)
    c6d0:	da800315 	stw	r10,12(sp)
    c6d4:	000d3480 	call	d348 <__clzsi2>
    c6d8:	10800804 	addi	r2,r2,32
    c6dc:	da800317 	ldw	r10,12(sp)
    c6e0:	da400417 	ldw	r9,16(sp)
    c6e4:	d9800717 	ldw	r6,28(sp)
    c6e8:	d9400217 	ldw	r5,8(sp)
    c6ec:	003edd06 	br	c264 <__alt_data_end+0xfffda264>
    c6f0:	143ff604 	addi	r16,r2,-40
    c6f4:	ac20983a 	sll	r16,r21,r16
    c6f8:	002d883a 	mov	r22,zero
    c6fc:	003ec106 	br	c204 <__alt_data_end+0xfffda204>
    c700:	d9800715 	stw	r6,28(sp)
    c704:	d9c00215 	stw	r7,8(sp)
    c708:	da400415 	stw	r9,16(sp)
    c70c:	000d3480 	call	d348 <__clzsi2>
    c710:	10800804 	addi	r2,r2,32
    c714:	da400417 	ldw	r9,16(sp)
    c718:	d9c00217 	ldw	r7,8(sp)
    c71c:	d9800717 	ldw	r6,28(sp)
    c720:	003eae06 	br	c1dc <__alt_data_end+0xfffda1dc>
    c724:	00c00044 	movi	r3,1
    c728:	1887c83a 	sub	r3,r3,r2
    c72c:	01000e04 	movi	r4,56
    c730:	20fe8516 	blt	r4,r3,c148 <__alt_data_end+0xfffda148>
    c734:	010007c4 	movi	r4,31
    c738:	20c01b16 	blt	r4,r3,c7a8 <__muldf3+0x7cc>
    c73c:	00800804 	movi	r2,32
    c740:	10c5c83a 	sub	r2,r2,r3
    c744:	888a983a 	sll	r5,r17,r2
    c748:	90c8d83a 	srl	r4,r18,r3
    c74c:	9084983a 	sll	r2,r18,r2
    c750:	88e2d83a 	srl	r17,r17,r3
    c754:	2906b03a 	or	r3,r5,r4
    c758:	1004c03a 	cmpne	r2,r2,zero
    c75c:	1886b03a 	or	r3,r3,r2
    c760:	188001cc 	andi	r2,r3,7
    c764:	10000726 	beq	r2,zero,c784 <__muldf3+0x7a8>
    c768:	188003cc 	andi	r2,r3,15
    c76c:	01000104 	movi	r4,4
    c770:	11000426 	beq	r2,r4,c784 <__muldf3+0x7a8>
    c774:	1805883a 	mov	r2,r3
    c778:	10c00104 	addi	r3,r2,4
    c77c:	1885803a 	cmpltu	r2,r3,r2
    c780:	88a3883a 	add	r17,r17,r2
    c784:	8880202c 	andhi	r2,r17,128
    c788:	10001c26 	beq	r2,zero,c7fc <__muldf3+0x820>
    c78c:	3027883a 	mov	r19,r6
    c790:	00800044 	movi	r2,1
    c794:	0021883a 	mov	r16,zero
    c798:	002d883a 	mov	r22,zero
    c79c:	003e6e06 	br	c158 <__alt_data_end+0xfffda158>
    c7a0:	4007883a 	mov	r3,r8
    c7a4:	003f9706 	br	c604 <__alt_data_end+0xfffda604>
    c7a8:	017ff844 	movi	r5,-31
    c7ac:	2885c83a 	sub	r2,r5,r2
    c7b0:	888ad83a 	srl	r5,r17,r2
    c7b4:	00800804 	movi	r2,32
    c7b8:	18801a26 	beq	r3,r2,c824 <__muldf3+0x848>
    c7bc:	01001004 	movi	r4,64
    c7c0:	20c7c83a 	sub	r3,r4,r3
    c7c4:	88e2983a 	sll	r17,r17,r3
    c7c8:	8ca4b03a 	or	r18,r17,r18
    c7cc:	9004c03a 	cmpne	r2,r18,zero
    c7d0:	2884b03a 	or	r2,r5,r2
    c7d4:	144001cc 	andi	r17,r2,7
    c7d8:	88000d1e 	bne	r17,zero,c810 <__muldf3+0x834>
    c7dc:	0021883a 	mov	r16,zero
    c7e0:	102cd0fa 	srli	r22,r2,3
    c7e4:	3027883a 	mov	r19,r6
    c7e8:	0005883a 	mov	r2,zero
    c7ec:	b46cb03a 	or	r22,r22,r17
    c7f0:	003e5906 	br	c158 <__alt_data_end+0xfffda158>
    c7f4:	1007883a 	mov	r3,r2
    c7f8:	0023883a 	mov	r17,zero
    c7fc:	8820927a 	slli	r16,r17,9
    c800:	1805883a 	mov	r2,r3
    c804:	8822977a 	slli	r17,r17,29
    c808:	8020d33a 	srli	r16,r16,12
    c80c:	003ff406 	br	c7e0 <__alt_data_end+0xfffda7e0>
    c810:	10c003cc 	andi	r3,r2,15
    c814:	01000104 	movi	r4,4
    c818:	193ff626 	beq	r3,r4,c7f4 <__alt_data_end+0xfffda7f4>
    c81c:	0023883a 	mov	r17,zero
    c820:	003fd506 	br	c778 <__alt_data_end+0xfffda778>
    c824:	0023883a 	mov	r17,zero
    c828:	003fe706 	br	c7c8 <__alt_data_end+0xfffda7c8>
    c82c:	00800434 	movhi	r2,16
    c830:	8c000234 	orhi	r16,r17,8
    c834:	10bfffc4 	addi	r2,r2,-1
    c838:	3027883a 	mov	r19,r6
    c83c:	80a0703a 	and	r16,r16,r2
    c840:	902d883a 	mov	r22,r18
    c844:	003eac06 	br	c2f8 <__alt_data_end+0xfffda2f8>

0000c848 <__subdf3>:
    c848:	02000434 	movhi	r8,16
    c84c:	423fffc4 	addi	r8,r8,-1
    c850:	defffb04 	addi	sp,sp,-20
    c854:	2a14703a 	and	r10,r5,r8
    c858:	3812d53a 	srli	r9,r7,20
    c85c:	3a10703a 	and	r8,r7,r8
    c860:	2006d77a 	srli	r3,r4,29
    c864:	3004d77a 	srli	r2,r6,29
    c868:	dc000015 	stw	r16,0(sp)
    c86c:	501490fa 	slli	r10,r10,3
    c870:	2820d53a 	srli	r16,r5,20
    c874:	401090fa 	slli	r8,r8,3
    c878:	dc800215 	stw	r18,8(sp)
    c87c:	dc400115 	stw	r17,4(sp)
    c880:	dfc00415 	stw	ra,16(sp)
    c884:	202290fa 	slli	r17,r4,3
    c888:	dcc00315 	stw	r19,12(sp)
    c88c:	4a41ffcc 	andi	r9,r9,2047
    c890:	0101ffc4 	movi	r4,2047
    c894:	2824d7fa 	srli	r18,r5,31
    c898:	8401ffcc 	andi	r16,r16,2047
    c89c:	50c6b03a 	or	r3,r10,r3
    c8a0:	380ed7fa 	srli	r7,r7,31
    c8a4:	408ab03a 	or	r5,r8,r2
    c8a8:	300c90fa 	slli	r6,r6,3
    c8ac:	49009626 	beq	r9,r4,cb08 <__subdf3+0x2c0>
    c8b0:	39c0005c 	xori	r7,r7,1
    c8b4:	8245c83a 	sub	r2,r16,r9
    c8b8:	3c807426 	beq	r7,r18,ca8c <__subdf3+0x244>
    c8bc:	0080af0e 	bge	zero,r2,cb7c <__subdf3+0x334>
    c8c0:	48002a1e 	bne	r9,zero,c96c <__subdf3+0x124>
    c8c4:	2988b03a 	or	r4,r5,r6
    c8c8:	20009a1e 	bne	r4,zero,cb34 <__subdf3+0x2ec>
    c8cc:	888001cc 	andi	r2,r17,7
    c8d0:	10000726 	beq	r2,zero,c8f0 <__subdf3+0xa8>
    c8d4:	888003cc 	andi	r2,r17,15
    c8d8:	01000104 	movi	r4,4
    c8dc:	11000426 	beq	r2,r4,c8f0 <__subdf3+0xa8>
    c8e0:	890b883a 	add	r5,r17,r4
    c8e4:	2c63803a 	cmpltu	r17,r5,r17
    c8e8:	1c47883a 	add	r3,r3,r17
    c8ec:	2823883a 	mov	r17,r5
    c8f0:	1880202c 	andhi	r2,r3,128
    c8f4:	10005926 	beq	r2,zero,ca5c <__subdf3+0x214>
    c8f8:	84000044 	addi	r16,r16,1
    c8fc:	0081ffc4 	movi	r2,2047
    c900:	8080be26 	beq	r16,r2,cbfc <__subdf3+0x3b4>
    c904:	017fe034 	movhi	r5,65408
    c908:	297fffc4 	addi	r5,r5,-1
    c90c:	1946703a 	and	r3,r3,r5
    c910:	1804977a 	slli	r2,r3,29
    c914:	1806927a 	slli	r3,r3,9
    c918:	8822d0fa 	srli	r17,r17,3
    c91c:	8401ffcc 	andi	r16,r16,2047
    c920:	180ad33a 	srli	r5,r3,12
    c924:	9100004c 	andi	r4,r18,1
    c928:	1444b03a 	or	r2,r2,r17
    c92c:	80c1ffcc 	andi	r3,r16,2047
    c930:	1820953a 	slli	r16,r3,20
    c934:	20c03fcc 	andi	r3,r4,255
    c938:	180897fa 	slli	r4,r3,31
    c93c:	00c00434 	movhi	r3,16
    c940:	18ffffc4 	addi	r3,r3,-1
    c944:	28c6703a 	and	r3,r5,r3
    c948:	1c06b03a 	or	r3,r3,r16
    c94c:	1906b03a 	or	r3,r3,r4
    c950:	dfc00417 	ldw	ra,16(sp)
    c954:	dcc00317 	ldw	r19,12(sp)
    c958:	dc800217 	ldw	r18,8(sp)
    c95c:	dc400117 	ldw	r17,4(sp)
    c960:	dc000017 	ldw	r16,0(sp)
    c964:	dec00504 	addi	sp,sp,20
    c968:	f800283a 	ret
    c96c:	0101ffc4 	movi	r4,2047
    c970:	813fd626 	beq	r16,r4,c8cc <__alt_data_end+0xfffda8cc>
    c974:	29402034 	orhi	r5,r5,128
    c978:	01000e04 	movi	r4,56
    c97c:	2080a316 	blt	r4,r2,cc0c <__subdf3+0x3c4>
    c980:	010007c4 	movi	r4,31
    c984:	2080c616 	blt	r4,r2,cca0 <__subdf3+0x458>
    c988:	01000804 	movi	r4,32
    c98c:	2089c83a 	sub	r4,r4,r2
    c990:	2910983a 	sll	r8,r5,r4
    c994:	308ed83a 	srl	r7,r6,r2
    c998:	3108983a 	sll	r4,r6,r4
    c99c:	2884d83a 	srl	r2,r5,r2
    c9a0:	41ccb03a 	or	r6,r8,r7
    c9a4:	2008c03a 	cmpne	r4,r4,zero
    c9a8:	310cb03a 	or	r6,r6,r4
    c9ac:	898dc83a 	sub	r6,r17,r6
    c9b0:	89a3803a 	cmpltu	r17,r17,r6
    c9b4:	1887c83a 	sub	r3,r3,r2
    c9b8:	1c47c83a 	sub	r3,r3,r17
    c9bc:	3023883a 	mov	r17,r6
    c9c0:	1880202c 	andhi	r2,r3,128
    c9c4:	10002326 	beq	r2,zero,ca54 <__subdf3+0x20c>
    c9c8:	04c02034 	movhi	r19,128
    c9cc:	9cffffc4 	addi	r19,r19,-1
    c9d0:	1ce6703a 	and	r19,r3,r19
    c9d4:	98007a26 	beq	r19,zero,cbc0 <__subdf3+0x378>
    c9d8:	9809883a 	mov	r4,r19
    c9dc:	000d3480 	call	d348 <__clzsi2>
    c9e0:	113ffe04 	addi	r4,r2,-8
    c9e4:	00c007c4 	movi	r3,31
    c9e8:	19007b16 	blt	r3,r4,cbd8 <__subdf3+0x390>
    c9ec:	00800804 	movi	r2,32
    c9f0:	1105c83a 	sub	r2,r2,r4
    c9f4:	8884d83a 	srl	r2,r17,r2
    c9f8:	9906983a 	sll	r3,r19,r4
    c9fc:	8922983a 	sll	r17,r17,r4
    ca00:	10c4b03a 	or	r2,r2,r3
    ca04:	24007816 	blt	r4,r16,cbe8 <__subdf3+0x3a0>
    ca08:	2421c83a 	sub	r16,r4,r16
    ca0c:	80c00044 	addi	r3,r16,1
    ca10:	010007c4 	movi	r4,31
    ca14:	20c09516 	blt	r4,r3,cc6c <__subdf3+0x424>
    ca18:	01400804 	movi	r5,32
    ca1c:	28cbc83a 	sub	r5,r5,r3
    ca20:	88c8d83a 	srl	r4,r17,r3
    ca24:	8962983a 	sll	r17,r17,r5
    ca28:	114a983a 	sll	r5,r2,r5
    ca2c:	10c6d83a 	srl	r3,r2,r3
    ca30:	8804c03a 	cmpne	r2,r17,zero
    ca34:	290ab03a 	or	r5,r5,r4
    ca38:	28a2b03a 	or	r17,r5,r2
    ca3c:	0021883a 	mov	r16,zero
    ca40:	003fa206 	br	c8cc <__alt_data_end+0xfffda8cc>
    ca44:	2090b03a 	or	r8,r4,r2
    ca48:	40018e26 	beq	r8,zero,d084 <__subdf3+0x83c>
    ca4c:	1007883a 	mov	r3,r2
    ca50:	2023883a 	mov	r17,r4
    ca54:	888001cc 	andi	r2,r17,7
    ca58:	103f9e1e 	bne	r2,zero,c8d4 <__alt_data_end+0xfffda8d4>
    ca5c:	1804977a 	slli	r2,r3,29
    ca60:	8822d0fa 	srli	r17,r17,3
    ca64:	1810d0fa 	srli	r8,r3,3
    ca68:	9100004c 	andi	r4,r18,1
    ca6c:	1444b03a 	or	r2,r2,r17
    ca70:	00c1ffc4 	movi	r3,2047
    ca74:	80c02826 	beq	r16,r3,cb18 <__subdf3+0x2d0>
    ca78:	01400434 	movhi	r5,16
    ca7c:	297fffc4 	addi	r5,r5,-1
    ca80:	80e0703a 	and	r16,r16,r3
    ca84:	414a703a 	and	r5,r8,r5
    ca88:	003fa806 	br	c92c <__alt_data_end+0xfffda92c>
    ca8c:	0080630e 	bge	zero,r2,cc1c <__subdf3+0x3d4>
    ca90:	48003026 	beq	r9,zero,cb54 <__subdf3+0x30c>
    ca94:	0101ffc4 	movi	r4,2047
    ca98:	813f8c26 	beq	r16,r4,c8cc <__alt_data_end+0xfffda8cc>
    ca9c:	29402034 	orhi	r5,r5,128
    caa0:	01000e04 	movi	r4,56
    caa4:	2080a90e 	bge	r4,r2,cd4c <__subdf3+0x504>
    caa8:	298cb03a 	or	r6,r5,r6
    caac:	3012c03a 	cmpne	r9,r6,zero
    cab0:	0005883a 	mov	r2,zero
    cab4:	4c53883a 	add	r9,r9,r17
    cab8:	4c63803a 	cmpltu	r17,r9,r17
    cabc:	10c7883a 	add	r3,r2,r3
    cac0:	88c7883a 	add	r3,r17,r3
    cac4:	4823883a 	mov	r17,r9
    cac8:	1880202c 	andhi	r2,r3,128
    cacc:	1000d026 	beq	r2,zero,ce10 <__subdf3+0x5c8>
    cad0:	84000044 	addi	r16,r16,1
    cad4:	0081ffc4 	movi	r2,2047
    cad8:	8080fe26 	beq	r16,r2,ced4 <__subdf3+0x68c>
    cadc:	00bfe034 	movhi	r2,65408
    cae0:	10bfffc4 	addi	r2,r2,-1
    cae4:	1886703a 	and	r3,r3,r2
    cae8:	880ad07a 	srli	r5,r17,1
    caec:	180497fa 	slli	r2,r3,31
    caf0:	8900004c 	andi	r4,r17,1
    caf4:	2922b03a 	or	r17,r5,r4
    caf8:	1806d07a 	srli	r3,r3,1
    cafc:	1462b03a 	or	r17,r2,r17
    cb00:	3825883a 	mov	r18,r7
    cb04:	003f7106 	br	c8cc <__alt_data_end+0xfffda8cc>
    cb08:	2984b03a 	or	r2,r5,r6
    cb0c:	103f6826 	beq	r2,zero,c8b0 <__alt_data_end+0xfffda8b0>
    cb10:	39c03fcc 	andi	r7,r7,255
    cb14:	003f6706 	br	c8b4 <__alt_data_end+0xfffda8b4>
    cb18:	4086b03a 	or	r3,r8,r2
    cb1c:	18015226 	beq	r3,zero,d068 <__subdf3+0x820>
    cb20:	00c00434 	movhi	r3,16
    cb24:	41400234 	orhi	r5,r8,8
    cb28:	18ffffc4 	addi	r3,r3,-1
    cb2c:	28ca703a 	and	r5,r5,r3
    cb30:	003f7e06 	br	c92c <__alt_data_end+0xfffda92c>
    cb34:	10bfffc4 	addi	r2,r2,-1
    cb38:	1000491e 	bne	r2,zero,cc60 <__subdf3+0x418>
    cb3c:	898fc83a 	sub	r7,r17,r6
    cb40:	89e3803a 	cmpltu	r17,r17,r7
    cb44:	1947c83a 	sub	r3,r3,r5
    cb48:	1c47c83a 	sub	r3,r3,r17
    cb4c:	3823883a 	mov	r17,r7
    cb50:	003f9b06 	br	c9c0 <__alt_data_end+0xfffda9c0>
    cb54:	2988b03a 	or	r4,r5,r6
    cb58:	203f5c26 	beq	r4,zero,c8cc <__alt_data_end+0xfffda8cc>
    cb5c:	10bfffc4 	addi	r2,r2,-1
    cb60:	1000931e 	bne	r2,zero,cdb0 <__subdf3+0x568>
    cb64:	898d883a 	add	r6,r17,r6
    cb68:	3463803a 	cmpltu	r17,r6,r17
    cb6c:	1947883a 	add	r3,r3,r5
    cb70:	88c7883a 	add	r3,r17,r3
    cb74:	3023883a 	mov	r17,r6
    cb78:	003fd306 	br	cac8 <__alt_data_end+0xfffdaac8>
    cb7c:	1000541e 	bne	r2,zero,ccd0 <__subdf3+0x488>
    cb80:	80800044 	addi	r2,r16,1
    cb84:	1081ffcc 	andi	r2,r2,2047
    cb88:	01000044 	movi	r4,1
    cb8c:	2080a20e 	bge	r4,r2,ce18 <__subdf3+0x5d0>
    cb90:	8989c83a 	sub	r4,r17,r6
    cb94:	8905803a 	cmpltu	r2,r17,r4
    cb98:	1967c83a 	sub	r19,r3,r5
    cb9c:	98a7c83a 	sub	r19,r19,r2
    cba0:	9880202c 	andhi	r2,r19,128
    cba4:	10006326 	beq	r2,zero,cd34 <__subdf3+0x4ec>
    cba8:	3463c83a 	sub	r17,r6,r17
    cbac:	28c7c83a 	sub	r3,r5,r3
    cbb0:	344d803a 	cmpltu	r6,r6,r17
    cbb4:	19a7c83a 	sub	r19,r3,r6
    cbb8:	3825883a 	mov	r18,r7
    cbbc:	983f861e 	bne	r19,zero,c9d8 <__alt_data_end+0xfffda9d8>
    cbc0:	8809883a 	mov	r4,r17
    cbc4:	000d3480 	call	d348 <__clzsi2>
    cbc8:	10800804 	addi	r2,r2,32
    cbcc:	113ffe04 	addi	r4,r2,-8
    cbd0:	00c007c4 	movi	r3,31
    cbd4:	193f850e 	bge	r3,r4,c9ec <__alt_data_end+0xfffda9ec>
    cbd8:	10bff604 	addi	r2,r2,-40
    cbdc:	8884983a 	sll	r2,r17,r2
    cbe0:	0023883a 	mov	r17,zero
    cbe4:	243f880e 	bge	r4,r16,ca08 <__alt_data_end+0xfffdaa08>
    cbe8:	00ffe034 	movhi	r3,65408
    cbec:	18ffffc4 	addi	r3,r3,-1
    cbf0:	8121c83a 	sub	r16,r16,r4
    cbf4:	10c6703a 	and	r3,r2,r3
    cbf8:	003f3406 	br	c8cc <__alt_data_end+0xfffda8cc>
    cbfc:	9100004c 	andi	r4,r18,1
    cc00:	000b883a 	mov	r5,zero
    cc04:	0005883a 	mov	r2,zero
    cc08:	003f4806 	br	c92c <__alt_data_end+0xfffda92c>
    cc0c:	298cb03a 	or	r6,r5,r6
    cc10:	300cc03a 	cmpne	r6,r6,zero
    cc14:	0005883a 	mov	r2,zero
    cc18:	003f6406 	br	c9ac <__alt_data_end+0xfffda9ac>
    cc1c:	10009a1e 	bne	r2,zero,ce88 <__subdf3+0x640>
    cc20:	82400044 	addi	r9,r16,1
    cc24:	4881ffcc 	andi	r2,r9,2047
    cc28:	02800044 	movi	r10,1
    cc2c:	5080670e 	bge	r10,r2,cdcc <__subdf3+0x584>
    cc30:	0081ffc4 	movi	r2,2047
    cc34:	4880af26 	beq	r9,r2,cef4 <__subdf3+0x6ac>
    cc38:	898d883a 	add	r6,r17,r6
    cc3c:	1945883a 	add	r2,r3,r5
    cc40:	3447803a 	cmpltu	r3,r6,r17
    cc44:	1887883a 	add	r3,r3,r2
    cc48:	182297fa 	slli	r17,r3,31
    cc4c:	300cd07a 	srli	r6,r6,1
    cc50:	1806d07a 	srli	r3,r3,1
    cc54:	4821883a 	mov	r16,r9
    cc58:	89a2b03a 	or	r17,r17,r6
    cc5c:	003f1b06 	br	c8cc <__alt_data_end+0xfffda8cc>
    cc60:	0101ffc4 	movi	r4,2047
    cc64:	813f441e 	bne	r16,r4,c978 <__alt_data_end+0xfffda978>
    cc68:	003f1806 	br	c8cc <__alt_data_end+0xfffda8cc>
    cc6c:	843ff844 	addi	r16,r16,-31
    cc70:	01400804 	movi	r5,32
    cc74:	1408d83a 	srl	r4,r2,r16
    cc78:	19405026 	beq	r3,r5,cdbc <__subdf3+0x574>
    cc7c:	01401004 	movi	r5,64
    cc80:	28c7c83a 	sub	r3,r5,r3
    cc84:	10c4983a 	sll	r2,r2,r3
    cc88:	88a2b03a 	or	r17,r17,r2
    cc8c:	8822c03a 	cmpne	r17,r17,zero
    cc90:	2462b03a 	or	r17,r4,r17
    cc94:	0007883a 	mov	r3,zero
    cc98:	0021883a 	mov	r16,zero
    cc9c:	003f6d06 	br	ca54 <__alt_data_end+0xfffdaa54>
    cca0:	11fff804 	addi	r7,r2,-32
    cca4:	01000804 	movi	r4,32
    cca8:	29ced83a 	srl	r7,r5,r7
    ccac:	11004526 	beq	r2,r4,cdc4 <__subdf3+0x57c>
    ccb0:	01001004 	movi	r4,64
    ccb4:	2089c83a 	sub	r4,r4,r2
    ccb8:	2904983a 	sll	r2,r5,r4
    ccbc:	118cb03a 	or	r6,r2,r6
    ccc0:	300cc03a 	cmpne	r6,r6,zero
    ccc4:	398cb03a 	or	r6,r7,r6
    ccc8:	0005883a 	mov	r2,zero
    cccc:	003f3706 	br	c9ac <__alt_data_end+0xfffda9ac>
    ccd0:	80002a26 	beq	r16,zero,cd7c <__subdf3+0x534>
    ccd4:	0101ffc4 	movi	r4,2047
    ccd8:	49006626 	beq	r9,r4,ce74 <__subdf3+0x62c>
    ccdc:	0085c83a 	sub	r2,zero,r2
    cce0:	18c02034 	orhi	r3,r3,128
    cce4:	01000e04 	movi	r4,56
    cce8:	20807e16 	blt	r4,r2,cee4 <__subdf3+0x69c>
    ccec:	010007c4 	movi	r4,31
    ccf0:	2080e716 	blt	r4,r2,d090 <__subdf3+0x848>
    ccf4:	01000804 	movi	r4,32
    ccf8:	2089c83a 	sub	r4,r4,r2
    ccfc:	1914983a 	sll	r10,r3,r4
    cd00:	8890d83a 	srl	r8,r17,r2
    cd04:	8908983a 	sll	r4,r17,r4
    cd08:	1884d83a 	srl	r2,r3,r2
    cd0c:	5222b03a 	or	r17,r10,r8
    cd10:	2006c03a 	cmpne	r3,r4,zero
    cd14:	88e2b03a 	or	r17,r17,r3
    cd18:	3463c83a 	sub	r17,r6,r17
    cd1c:	2885c83a 	sub	r2,r5,r2
    cd20:	344d803a 	cmpltu	r6,r6,r17
    cd24:	1187c83a 	sub	r3,r2,r6
    cd28:	4821883a 	mov	r16,r9
    cd2c:	3825883a 	mov	r18,r7
    cd30:	003f2306 	br	c9c0 <__alt_data_end+0xfffda9c0>
    cd34:	24d0b03a 	or	r8,r4,r19
    cd38:	40001b1e 	bne	r8,zero,cda8 <__subdf3+0x560>
    cd3c:	0005883a 	mov	r2,zero
    cd40:	0009883a 	mov	r4,zero
    cd44:	0021883a 	mov	r16,zero
    cd48:	003f4906 	br	ca70 <__alt_data_end+0xfffdaa70>
    cd4c:	010007c4 	movi	r4,31
    cd50:	20803a16 	blt	r4,r2,ce3c <__subdf3+0x5f4>
    cd54:	01000804 	movi	r4,32
    cd58:	2089c83a 	sub	r4,r4,r2
    cd5c:	2912983a 	sll	r9,r5,r4
    cd60:	3090d83a 	srl	r8,r6,r2
    cd64:	3108983a 	sll	r4,r6,r4
    cd68:	2884d83a 	srl	r2,r5,r2
    cd6c:	4a12b03a 	or	r9,r9,r8
    cd70:	2008c03a 	cmpne	r4,r4,zero
    cd74:	4912b03a 	or	r9,r9,r4
    cd78:	003f4e06 	br	cab4 <__alt_data_end+0xfffdaab4>
    cd7c:	1c48b03a 	or	r4,r3,r17
    cd80:	20003c26 	beq	r4,zero,ce74 <__subdf3+0x62c>
    cd84:	0084303a 	nor	r2,zero,r2
    cd88:	1000381e 	bne	r2,zero,ce6c <__subdf3+0x624>
    cd8c:	3463c83a 	sub	r17,r6,r17
    cd90:	28c5c83a 	sub	r2,r5,r3
    cd94:	344d803a 	cmpltu	r6,r6,r17
    cd98:	1187c83a 	sub	r3,r2,r6
    cd9c:	4821883a 	mov	r16,r9
    cda0:	3825883a 	mov	r18,r7
    cda4:	003f0606 	br	c9c0 <__alt_data_end+0xfffda9c0>
    cda8:	2023883a 	mov	r17,r4
    cdac:	003f0906 	br	c9d4 <__alt_data_end+0xfffda9d4>
    cdb0:	0101ffc4 	movi	r4,2047
    cdb4:	813f3a1e 	bne	r16,r4,caa0 <__alt_data_end+0xfffdaaa0>
    cdb8:	003ec406 	br	c8cc <__alt_data_end+0xfffda8cc>
    cdbc:	0005883a 	mov	r2,zero
    cdc0:	003fb106 	br	cc88 <__alt_data_end+0xfffdac88>
    cdc4:	0005883a 	mov	r2,zero
    cdc8:	003fbc06 	br	ccbc <__alt_data_end+0xfffdacbc>
    cdcc:	1c44b03a 	or	r2,r3,r17
    cdd0:	80008e1e 	bne	r16,zero,d00c <__subdf3+0x7c4>
    cdd4:	1000c826 	beq	r2,zero,d0f8 <__subdf3+0x8b0>
    cdd8:	2984b03a 	or	r2,r5,r6
    cddc:	103ebb26 	beq	r2,zero,c8cc <__alt_data_end+0xfffda8cc>
    cde0:	8989883a 	add	r4,r17,r6
    cde4:	1945883a 	add	r2,r3,r5
    cde8:	2447803a 	cmpltu	r3,r4,r17
    cdec:	1887883a 	add	r3,r3,r2
    cdf0:	1880202c 	andhi	r2,r3,128
    cdf4:	2023883a 	mov	r17,r4
    cdf8:	103f1626 	beq	r2,zero,ca54 <__alt_data_end+0xfffdaa54>
    cdfc:	00bfe034 	movhi	r2,65408
    ce00:	10bfffc4 	addi	r2,r2,-1
    ce04:	5021883a 	mov	r16,r10
    ce08:	1886703a 	and	r3,r3,r2
    ce0c:	003eaf06 	br	c8cc <__alt_data_end+0xfffda8cc>
    ce10:	3825883a 	mov	r18,r7
    ce14:	003f0f06 	br	ca54 <__alt_data_end+0xfffdaa54>
    ce18:	1c44b03a 	or	r2,r3,r17
    ce1c:	8000251e 	bne	r16,zero,ceb4 <__subdf3+0x66c>
    ce20:	1000661e 	bne	r2,zero,cfbc <__subdf3+0x774>
    ce24:	2990b03a 	or	r8,r5,r6
    ce28:	40009626 	beq	r8,zero,d084 <__subdf3+0x83c>
    ce2c:	2807883a 	mov	r3,r5
    ce30:	3023883a 	mov	r17,r6
    ce34:	3825883a 	mov	r18,r7
    ce38:	003ea406 	br	c8cc <__alt_data_end+0xfffda8cc>
    ce3c:	127ff804 	addi	r9,r2,-32
    ce40:	01000804 	movi	r4,32
    ce44:	2a52d83a 	srl	r9,r5,r9
    ce48:	11008c26 	beq	r2,r4,d07c <__subdf3+0x834>
    ce4c:	01001004 	movi	r4,64
    ce50:	2085c83a 	sub	r2,r4,r2
    ce54:	2884983a 	sll	r2,r5,r2
    ce58:	118cb03a 	or	r6,r2,r6
    ce5c:	300cc03a 	cmpne	r6,r6,zero
    ce60:	4992b03a 	or	r9,r9,r6
    ce64:	0005883a 	mov	r2,zero
    ce68:	003f1206 	br	cab4 <__alt_data_end+0xfffdaab4>
    ce6c:	0101ffc4 	movi	r4,2047
    ce70:	493f9c1e 	bne	r9,r4,cce4 <__alt_data_end+0xfffdace4>
    ce74:	2807883a 	mov	r3,r5
    ce78:	3023883a 	mov	r17,r6
    ce7c:	4821883a 	mov	r16,r9
    ce80:	3825883a 	mov	r18,r7
    ce84:	003e9106 	br	c8cc <__alt_data_end+0xfffda8cc>
    ce88:	80001f1e 	bne	r16,zero,cf08 <__subdf3+0x6c0>
    ce8c:	1c48b03a 	or	r4,r3,r17
    ce90:	20005a26 	beq	r4,zero,cffc <__subdf3+0x7b4>
    ce94:	0084303a 	nor	r2,zero,r2
    ce98:	1000561e 	bne	r2,zero,cff4 <__subdf3+0x7ac>
    ce9c:	89a3883a 	add	r17,r17,r6
    cea0:	1945883a 	add	r2,r3,r5
    cea4:	898d803a 	cmpltu	r6,r17,r6
    cea8:	3087883a 	add	r3,r6,r2
    ceac:	4821883a 	mov	r16,r9
    ceb0:	003f0506 	br	cac8 <__alt_data_end+0xfffdaac8>
    ceb4:	10002b1e 	bne	r2,zero,cf64 <__subdf3+0x71c>
    ceb8:	2984b03a 	or	r2,r5,r6
    cebc:	10008026 	beq	r2,zero,d0c0 <__subdf3+0x878>
    cec0:	2807883a 	mov	r3,r5
    cec4:	3023883a 	mov	r17,r6
    cec8:	3825883a 	mov	r18,r7
    cecc:	0401ffc4 	movi	r16,2047
    ced0:	003e7e06 	br	c8cc <__alt_data_end+0xfffda8cc>
    ced4:	3809883a 	mov	r4,r7
    ced8:	0011883a 	mov	r8,zero
    cedc:	0005883a 	mov	r2,zero
    cee0:	003ee306 	br	ca70 <__alt_data_end+0xfffdaa70>
    cee4:	1c62b03a 	or	r17,r3,r17
    cee8:	8822c03a 	cmpne	r17,r17,zero
    ceec:	0005883a 	mov	r2,zero
    cef0:	003f8906 	br	cd18 <__alt_data_end+0xfffdad18>
    cef4:	3809883a 	mov	r4,r7
    cef8:	4821883a 	mov	r16,r9
    cefc:	0011883a 	mov	r8,zero
    cf00:	0005883a 	mov	r2,zero
    cf04:	003eda06 	br	ca70 <__alt_data_end+0xfffdaa70>
    cf08:	0101ffc4 	movi	r4,2047
    cf0c:	49003b26 	beq	r9,r4,cffc <__subdf3+0x7b4>
    cf10:	0085c83a 	sub	r2,zero,r2
    cf14:	18c02034 	orhi	r3,r3,128
    cf18:	01000e04 	movi	r4,56
    cf1c:	20806e16 	blt	r4,r2,d0d8 <__subdf3+0x890>
    cf20:	010007c4 	movi	r4,31
    cf24:	20807716 	blt	r4,r2,d104 <__subdf3+0x8bc>
    cf28:	01000804 	movi	r4,32
    cf2c:	2089c83a 	sub	r4,r4,r2
    cf30:	1914983a 	sll	r10,r3,r4
    cf34:	8890d83a 	srl	r8,r17,r2
    cf38:	8908983a 	sll	r4,r17,r4
    cf3c:	1884d83a 	srl	r2,r3,r2
    cf40:	5222b03a 	or	r17,r10,r8
    cf44:	2006c03a 	cmpne	r3,r4,zero
    cf48:	88e2b03a 	or	r17,r17,r3
    cf4c:	89a3883a 	add	r17,r17,r6
    cf50:	1145883a 	add	r2,r2,r5
    cf54:	898d803a 	cmpltu	r6,r17,r6
    cf58:	3087883a 	add	r3,r6,r2
    cf5c:	4821883a 	mov	r16,r9
    cf60:	003ed906 	br	cac8 <__alt_data_end+0xfffdaac8>
    cf64:	2984b03a 	or	r2,r5,r6
    cf68:	10004226 	beq	r2,zero,d074 <__subdf3+0x82c>
    cf6c:	1808d0fa 	srli	r4,r3,3
    cf70:	8822d0fa 	srli	r17,r17,3
    cf74:	1806977a 	slli	r3,r3,29
    cf78:	2080022c 	andhi	r2,r4,8
    cf7c:	1c62b03a 	or	r17,r3,r17
    cf80:	10000826 	beq	r2,zero,cfa4 <__subdf3+0x75c>
    cf84:	2812d0fa 	srli	r9,r5,3
    cf88:	4880022c 	andhi	r2,r9,8
    cf8c:	1000051e 	bne	r2,zero,cfa4 <__subdf3+0x75c>
    cf90:	300cd0fa 	srli	r6,r6,3
    cf94:	2804977a 	slli	r2,r5,29
    cf98:	4809883a 	mov	r4,r9
    cf9c:	3825883a 	mov	r18,r7
    cfa0:	11a2b03a 	or	r17,r2,r6
    cfa4:	8806d77a 	srli	r3,r17,29
    cfa8:	200890fa 	slli	r4,r4,3
    cfac:	882290fa 	slli	r17,r17,3
    cfb0:	0401ffc4 	movi	r16,2047
    cfb4:	1906b03a 	or	r3,r3,r4
    cfb8:	003e4406 	br	c8cc <__alt_data_end+0xfffda8cc>
    cfbc:	2984b03a 	or	r2,r5,r6
    cfc0:	103e4226 	beq	r2,zero,c8cc <__alt_data_end+0xfffda8cc>
    cfc4:	8989c83a 	sub	r4,r17,r6
    cfc8:	8911803a 	cmpltu	r8,r17,r4
    cfcc:	1945c83a 	sub	r2,r3,r5
    cfd0:	1205c83a 	sub	r2,r2,r8
    cfd4:	1200202c 	andhi	r8,r2,128
    cfd8:	403e9a26 	beq	r8,zero,ca44 <__alt_data_end+0xfffdaa44>
    cfdc:	3463c83a 	sub	r17,r6,r17
    cfe0:	28c5c83a 	sub	r2,r5,r3
    cfe4:	344d803a 	cmpltu	r6,r6,r17
    cfe8:	1187c83a 	sub	r3,r2,r6
    cfec:	3825883a 	mov	r18,r7
    cff0:	003e3606 	br	c8cc <__alt_data_end+0xfffda8cc>
    cff4:	0101ffc4 	movi	r4,2047
    cff8:	493fc71e 	bne	r9,r4,cf18 <__alt_data_end+0xfffdaf18>
    cffc:	2807883a 	mov	r3,r5
    d000:	3023883a 	mov	r17,r6
    d004:	4821883a 	mov	r16,r9
    d008:	003e3006 	br	c8cc <__alt_data_end+0xfffda8cc>
    d00c:	10003626 	beq	r2,zero,d0e8 <__subdf3+0x8a0>
    d010:	2984b03a 	or	r2,r5,r6
    d014:	10001726 	beq	r2,zero,d074 <__subdf3+0x82c>
    d018:	1808d0fa 	srli	r4,r3,3
    d01c:	8822d0fa 	srli	r17,r17,3
    d020:	1806977a 	slli	r3,r3,29
    d024:	2080022c 	andhi	r2,r4,8
    d028:	1c62b03a 	or	r17,r3,r17
    d02c:	10000726 	beq	r2,zero,d04c <__subdf3+0x804>
    d030:	2812d0fa 	srli	r9,r5,3
    d034:	4880022c 	andhi	r2,r9,8
    d038:	1000041e 	bne	r2,zero,d04c <__subdf3+0x804>
    d03c:	300cd0fa 	srli	r6,r6,3
    d040:	2804977a 	slli	r2,r5,29
    d044:	4809883a 	mov	r4,r9
    d048:	11a2b03a 	or	r17,r2,r6
    d04c:	8806d77a 	srli	r3,r17,29
    d050:	200890fa 	slli	r4,r4,3
    d054:	882290fa 	slli	r17,r17,3
    d058:	3825883a 	mov	r18,r7
    d05c:	1906b03a 	or	r3,r3,r4
    d060:	0401ffc4 	movi	r16,2047
    d064:	003e1906 	br	c8cc <__alt_data_end+0xfffda8cc>
    d068:	000b883a 	mov	r5,zero
    d06c:	0005883a 	mov	r2,zero
    d070:	003e2e06 	br	c92c <__alt_data_end+0xfffda92c>
    d074:	0401ffc4 	movi	r16,2047
    d078:	003e1406 	br	c8cc <__alt_data_end+0xfffda8cc>
    d07c:	0005883a 	mov	r2,zero
    d080:	003f7506 	br	ce58 <__alt_data_end+0xfffdae58>
    d084:	0005883a 	mov	r2,zero
    d088:	0009883a 	mov	r4,zero
    d08c:	003e7806 	br	ca70 <__alt_data_end+0xfffdaa70>
    d090:	123ff804 	addi	r8,r2,-32
    d094:	01000804 	movi	r4,32
    d098:	1a10d83a 	srl	r8,r3,r8
    d09c:	11002526 	beq	r2,r4,d134 <__subdf3+0x8ec>
    d0a0:	01001004 	movi	r4,64
    d0a4:	2085c83a 	sub	r2,r4,r2
    d0a8:	1884983a 	sll	r2,r3,r2
    d0ac:	1444b03a 	or	r2,r2,r17
    d0b0:	1004c03a 	cmpne	r2,r2,zero
    d0b4:	40a2b03a 	or	r17,r8,r2
    d0b8:	0005883a 	mov	r2,zero
    d0bc:	003f1606 	br	cd18 <__alt_data_end+0xfffdad18>
    d0c0:	02000434 	movhi	r8,16
    d0c4:	0009883a 	mov	r4,zero
    d0c8:	423fffc4 	addi	r8,r8,-1
    d0cc:	00bfffc4 	movi	r2,-1
    d0d0:	0401ffc4 	movi	r16,2047
    d0d4:	003e6606 	br	ca70 <__alt_data_end+0xfffdaa70>
    d0d8:	1c62b03a 	or	r17,r3,r17
    d0dc:	8822c03a 	cmpne	r17,r17,zero
    d0e0:	0005883a 	mov	r2,zero
    d0e4:	003f9906 	br	cf4c <__alt_data_end+0xfffdaf4c>
    d0e8:	2807883a 	mov	r3,r5
    d0ec:	3023883a 	mov	r17,r6
    d0f0:	0401ffc4 	movi	r16,2047
    d0f4:	003df506 	br	c8cc <__alt_data_end+0xfffda8cc>
    d0f8:	2807883a 	mov	r3,r5
    d0fc:	3023883a 	mov	r17,r6
    d100:	003df206 	br	c8cc <__alt_data_end+0xfffda8cc>
    d104:	123ff804 	addi	r8,r2,-32
    d108:	01000804 	movi	r4,32
    d10c:	1a10d83a 	srl	r8,r3,r8
    d110:	11000a26 	beq	r2,r4,d13c <__subdf3+0x8f4>
    d114:	01001004 	movi	r4,64
    d118:	2085c83a 	sub	r2,r4,r2
    d11c:	1884983a 	sll	r2,r3,r2
    d120:	1444b03a 	or	r2,r2,r17
    d124:	1004c03a 	cmpne	r2,r2,zero
    d128:	40a2b03a 	or	r17,r8,r2
    d12c:	0005883a 	mov	r2,zero
    d130:	003f8606 	br	cf4c <__alt_data_end+0xfffdaf4c>
    d134:	0005883a 	mov	r2,zero
    d138:	003fdc06 	br	d0ac <__alt_data_end+0xfffdb0ac>
    d13c:	0005883a 	mov	r2,zero
    d140:	003ff706 	br	d120 <__alt_data_end+0xfffdb120>

0000d144 <__fixdfsi>:
    d144:	280cd53a 	srli	r6,r5,20
    d148:	00c00434 	movhi	r3,16
    d14c:	18ffffc4 	addi	r3,r3,-1
    d150:	3181ffcc 	andi	r6,r6,2047
    d154:	01c0ff84 	movi	r7,1022
    d158:	28c6703a 	and	r3,r5,r3
    d15c:	280ad7fa 	srli	r5,r5,31
    d160:	3980120e 	bge	r7,r6,d1ac <__fixdfsi+0x68>
    d164:	00810744 	movi	r2,1053
    d168:	11800c16 	blt	r2,r6,d19c <__fixdfsi+0x58>
    d16c:	00810cc4 	movi	r2,1075
    d170:	1185c83a 	sub	r2,r2,r6
    d174:	01c007c4 	movi	r7,31
    d178:	18c00434 	orhi	r3,r3,16
    d17c:	38800d16 	blt	r7,r2,d1b4 <__fixdfsi+0x70>
    d180:	31befb44 	addi	r6,r6,-1043
    d184:	2084d83a 	srl	r2,r4,r2
    d188:	1986983a 	sll	r3,r3,r6
    d18c:	1884b03a 	or	r2,r3,r2
    d190:	28000726 	beq	r5,zero,d1b0 <__fixdfsi+0x6c>
    d194:	0085c83a 	sub	r2,zero,r2
    d198:	f800283a 	ret
    d19c:	00a00034 	movhi	r2,32768
    d1a0:	10bfffc4 	addi	r2,r2,-1
    d1a4:	2885883a 	add	r2,r5,r2
    d1a8:	f800283a 	ret
    d1ac:	0005883a 	mov	r2,zero
    d1b0:	f800283a 	ret
    d1b4:	008104c4 	movi	r2,1043
    d1b8:	1185c83a 	sub	r2,r2,r6
    d1bc:	1884d83a 	srl	r2,r3,r2
    d1c0:	003ff306 	br	d190 <__alt_data_end+0xfffdb190>

0000d1c4 <__floatsidf>:
    d1c4:	defffd04 	addi	sp,sp,-12
    d1c8:	dfc00215 	stw	ra,8(sp)
    d1cc:	dc400115 	stw	r17,4(sp)
    d1d0:	dc000015 	stw	r16,0(sp)
    d1d4:	20002b26 	beq	r4,zero,d284 <__floatsidf+0xc0>
    d1d8:	2023883a 	mov	r17,r4
    d1dc:	2020d7fa 	srli	r16,r4,31
    d1e0:	20002d16 	blt	r4,zero,d298 <__floatsidf+0xd4>
    d1e4:	8809883a 	mov	r4,r17
    d1e8:	000d3480 	call	d348 <__clzsi2>
    d1ec:	01410784 	movi	r5,1054
    d1f0:	288bc83a 	sub	r5,r5,r2
    d1f4:	01010cc4 	movi	r4,1075
    d1f8:	2149c83a 	sub	r4,r4,r5
    d1fc:	00c007c4 	movi	r3,31
    d200:	1900160e 	bge	r3,r4,d25c <__floatsidf+0x98>
    d204:	00c104c4 	movi	r3,1043
    d208:	1947c83a 	sub	r3,r3,r5
    d20c:	88c6983a 	sll	r3,r17,r3
    d210:	00800434 	movhi	r2,16
    d214:	10bfffc4 	addi	r2,r2,-1
    d218:	1886703a 	and	r3,r3,r2
    d21c:	2941ffcc 	andi	r5,r5,2047
    d220:	800d883a 	mov	r6,r16
    d224:	0005883a 	mov	r2,zero
    d228:	280a953a 	slli	r5,r5,20
    d22c:	31803fcc 	andi	r6,r6,255
    d230:	01000434 	movhi	r4,16
    d234:	300c97fa 	slli	r6,r6,31
    d238:	213fffc4 	addi	r4,r4,-1
    d23c:	1906703a 	and	r3,r3,r4
    d240:	1946b03a 	or	r3,r3,r5
    d244:	1986b03a 	or	r3,r3,r6
    d248:	dfc00217 	ldw	ra,8(sp)
    d24c:	dc400117 	ldw	r17,4(sp)
    d250:	dc000017 	ldw	r16,0(sp)
    d254:	dec00304 	addi	sp,sp,12
    d258:	f800283a 	ret
    d25c:	00c002c4 	movi	r3,11
    d260:	1887c83a 	sub	r3,r3,r2
    d264:	88c6d83a 	srl	r3,r17,r3
    d268:	8904983a 	sll	r2,r17,r4
    d26c:	01000434 	movhi	r4,16
    d270:	213fffc4 	addi	r4,r4,-1
    d274:	2941ffcc 	andi	r5,r5,2047
    d278:	1906703a 	and	r3,r3,r4
    d27c:	800d883a 	mov	r6,r16
    d280:	003fe906 	br	d228 <__alt_data_end+0xfffdb228>
    d284:	000d883a 	mov	r6,zero
    d288:	000b883a 	mov	r5,zero
    d28c:	0007883a 	mov	r3,zero
    d290:	0005883a 	mov	r2,zero
    d294:	003fe406 	br	d228 <__alt_data_end+0xfffdb228>
    d298:	0123c83a 	sub	r17,zero,r4
    d29c:	003fd106 	br	d1e4 <__alt_data_end+0xfffdb1e4>

0000d2a0 <__floatunsidf>:
    d2a0:	defffe04 	addi	sp,sp,-8
    d2a4:	dc000015 	stw	r16,0(sp)
    d2a8:	dfc00115 	stw	ra,4(sp)
    d2ac:	2021883a 	mov	r16,r4
    d2b0:	20002226 	beq	r4,zero,d33c <__floatunsidf+0x9c>
    d2b4:	000d3480 	call	d348 <__clzsi2>
    d2b8:	01010784 	movi	r4,1054
    d2bc:	2089c83a 	sub	r4,r4,r2
    d2c0:	01810cc4 	movi	r6,1075
    d2c4:	310dc83a 	sub	r6,r6,r4
    d2c8:	00c007c4 	movi	r3,31
    d2cc:	1980120e 	bge	r3,r6,d318 <__floatunsidf+0x78>
    d2d0:	00c104c4 	movi	r3,1043
    d2d4:	1907c83a 	sub	r3,r3,r4
    d2d8:	80ca983a 	sll	r5,r16,r3
    d2dc:	00800434 	movhi	r2,16
    d2e0:	10bfffc4 	addi	r2,r2,-1
    d2e4:	2101ffcc 	andi	r4,r4,2047
    d2e8:	0021883a 	mov	r16,zero
    d2ec:	288a703a 	and	r5,r5,r2
    d2f0:	2008953a 	slli	r4,r4,20
    d2f4:	00c00434 	movhi	r3,16
    d2f8:	18ffffc4 	addi	r3,r3,-1
    d2fc:	28c6703a 	and	r3,r5,r3
    d300:	8005883a 	mov	r2,r16
    d304:	1906b03a 	or	r3,r3,r4
    d308:	dfc00117 	ldw	ra,4(sp)
    d30c:	dc000017 	ldw	r16,0(sp)
    d310:	dec00204 	addi	sp,sp,8
    d314:	f800283a 	ret
    d318:	00c002c4 	movi	r3,11
    d31c:	188bc83a 	sub	r5,r3,r2
    d320:	814ad83a 	srl	r5,r16,r5
    d324:	00c00434 	movhi	r3,16
    d328:	18ffffc4 	addi	r3,r3,-1
    d32c:	81a0983a 	sll	r16,r16,r6
    d330:	2101ffcc 	andi	r4,r4,2047
    d334:	28ca703a 	and	r5,r5,r3
    d338:	003fed06 	br	d2f0 <__alt_data_end+0xfffdb2f0>
    d33c:	0009883a 	mov	r4,zero
    d340:	000b883a 	mov	r5,zero
    d344:	003fea06 	br	d2f0 <__alt_data_end+0xfffdb2f0>

0000d348 <__clzsi2>:
    d348:	00bfffd4 	movui	r2,65535
    d34c:	11000536 	bltu	r2,r4,d364 <__clzsi2+0x1c>
    d350:	00803fc4 	movi	r2,255
    d354:	11000f36 	bltu	r2,r4,d394 <__clzsi2+0x4c>
    d358:	00800804 	movi	r2,32
    d35c:	0007883a 	mov	r3,zero
    d360:	00000506 	br	d378 <__clzsi2+0x30>
    d364:	00804034 	movhi	r2,256
    d368:	10bfffc4 	addi	r2,r2,-1
    d36c:	11000c2e 	bgeu	r2,r4,d3a0 <__clzsi2+0x58>
    d370:	00800204 	movi	r2,8
    d374:	00c00604 	movi	r3,24
    d378:	20c8d83a 	srl	r4,r4,r3
    d37c:	00c00074 	movhi	r3,1
    d380:	18d04804 	addi	r3,r3,16672
    d384:	1909883a 	add	r4,r3,r4
    d388:	20c00003 	ldbu	r3,0(r4)
    d38c:	10c5c83a 	sub	r2,r2,r3
    d390:	f800283a 	ret
    d394:	00800604 	movi	r2,24
    d398:	00c00204 	movi	r3,8
    d39c:	003ff606 	br	d378 <__alt_data_end+0xfffdb378>
    d3a0:	00800404 	movi	r2,16
    d3a4:	1007883a 	mov	r3,r2
    d3a8:	003ff306 	br	d378 <__alt_data_end+0xfffdb378>

0000d3ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d3ac:	defffe04 	addi	sp,sp,-8
    d3b0:	dfc00115 	stw	ra,4(sp)
    d3b4:	df000015 	stw	fp,0(sp)
    d3b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3bc:	d0a00b17 	ldw	r2,-32724(gp)
    d3c0:	10000326 	beq	r2,zero,d3d0 <alt_get_errno+0x24>
    d3c4:	d0a00b17 	ldw	r2,-32724(gp)
    d3c8:	103ee83a 	callr	r2
    d3cc:	00000106 	br	d3d4 <alt_get_errno+0x28>
    d3d0:	d0a6dd04 	addi	r2,gp,-25740
}
    d3d4:	e037883a 	mov	sp,fp
    d3d8:	dfc00117 	ldw	ra,4(sp)
    d3dc:	df000017 	ldw	fp,0(sp)
    d3e0:	dec00204 	addi	sp,sp,8
    d3e4:	f800283a 	ret

0000d3e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d3e8:	defffb04 	addi	sp,sp,-20
    d3ec:	dfc00415 	stw	ra,16(sp)
    d3f0:	df000315 	stw	fp,12(sp)
    d3f4:	df000304 	addi	fp,sp,12
    d3f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d3fc:	e0bfff17 	ldw	r2,-4(fp)
    d400:	10000816 	blt	r2,zero,d424 <close+0x3c>
    d404:	01400304 	movi	r5,12
    d408:	e13fff17 	ldw	r4,-4(fp)
    d40c:	000aae00 	call	aae0 <__mulsi3>
    d410:	1007883a 	mov	r3,r2
    d414:	00800074 	movhi	r2,1
    d418:	1092c704 	addi	r2,r2,19228
    d41c:	1885883a 	add	r2,r3,r2
    d420:	00000106 	br	d428 <close+0x40>
    d424:	0005883a 	mov	r2,zero
    d428:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d42c:	e0bffd17 	ldw	r2,-12(fp)
    d430:	10001926 	beq	r2,zero,d498 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d434:	e0bffd17 	ldw	r2,-12(fp)
    d438:	10800017 	ldw	r2,0(r2)
    d43c:	10800417 	ldw	r2,16(r2)
    d440:	10000626 	beq	r2,zero,d45c <close+0x74>
    d444:	e0bffd17 	ldw	r2,-12(fp)
    d448:	10800017 	ldw	r2,0(r2)
    d44c:	10800417 	ldw	r2,16(r2)
    d450:	e13ffd17 	ldw	r4,-12(fp)
    d454:	103ee83a 	callr	r2
    d458:	00000106 	br	d460 <close+0x78>
    d45c:	0005883a 	mov	r2,zero
    d460:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d464:	e13fff17 	ldw	r4,-4(fp)
    d468:	000dad00 	call	dad0 <alt_release_fd>
    if (rval < 0)
    d46c:	e0bffe17 	ldw	r2,-8(fp)
    d470:	1000070e 	bge	r2,zero,d490 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d474:	000d3ac0 	call	d3ac <alt_get_errno>
    d478:	1007883a 	mov	r3,r2
    d47c:	e0bffe17 	ldw	r2,-8(fp)
    d480:	0085c83a 	sub	r2,zero,r2
    d484:	18800015 	stw	r2,0(r3)
      return -1;
    d488:	00bfffc4 	movi	r2,-1
    d48c:	00000706 	br	d4ac <close+0xc4>
    }
    return 0;
    d490:	0005883a 	mov	r2,zero
    d494:	00000506 	br	d4ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d498:	000d3ac0 	call	d3ac <alt_get_errno>
    d49c:	1007883a 	mov	r3,r2
    d4a0:	00801444 	movi	r2,81
    d4a4:	18800015 	stw	r2,0(r3)
    return -1;
    d4a8:	00bfffc4 	movi	r2,-1
  }
}
    d4ac:	e037883a 	mov	sp,fp
    d4b0:	dfc00117 	ldw	ra,4(sp)
    d4b4:	df000017 	ldw	fp,0(sp)
    d4b8:	dec00204 	addi	sp,sp,8
    d4bc:	f800283a 	ret

0000d4c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d4c0:	defffc04 	addi	sp,sp,-16
    d4c4:	df000315 	stw	fp,12(sp)
    d4c8:	df000304 	addi	fp,sp,12
    d4cc:	e13ffd15 	stw	r4,-12(fp)
    d4d0:	e17ffe15 	stw	r5,-8(fp)
    d4d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d4d8:	e0bfff17 	ldw	r2,-4(fp)
}
    d4dc:	e037883a 	mov	sp,fp
    d4e0:	df000017 	ldw	fp,0(sp)
    d4e4:	dec00104 	addi	sp,sp,4
    d4e8:	f800283a 	ret

0000d4ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4ec:	defffe04 	addi	sp,sp,-8
    d4f0:	dfc00115 	stw	ra,4(sp)
    d4f4:	df000015 	stw	fp,0(sp)
    d4f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d4fc:	d0a00b17 	ldw	r2,-32724(gp)
    d500:	10000326 	beq	r2,zero,d510 <alt_get_errno+0x24>
    d504:	d0a00b17 	ldw	r2,-32724(gp)
    d508:	103ee83a 	callr	r2
    d50c:	00000106 	br	d514 <alt_get_errno+0x28>
    d510:	d0a6dd04 	addi	r2,gp,-25740
}
    d514:	e037883a 	mov	sp,fp
    d518:	dfc00117 	ldw	ra,4(sp)
    d51c:	df000017 	ldw	fp,0(sp)
    d520:	dec00204 	addi	sp,sp,8
    d524:	f800283a 	ret

0000d528 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d528:	defffb04 	addi	sp,sp,-20
    d52c:	dfc00415 	stw	ra,16(sp)
    d530:	df000315 	stw	fp,12(sp)
    d534:	df000304 	addi	fp,sp,12
    d538:	e13ffe15 	stw	r4,-8(fp)
    d53c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d540:	e0bffe17 	ldw	r2,-8(fp)
    d544:	10000816 	blt	r2,zero,d568 <fstat+0x40>
    d548:	01400304 	movi	r5,12
    d54c:	e13ffe17 	ldw	r4,-8(fp)
    d550:	000aae00 	call	aae0 <__mulsi3>
    d554:	1007883a 	mov	r3,r2
    d558:	00800074 	movhi	r2,1
    d55c:	1092c704 	addi	r2,r2,19228
    d560:	1885883a 	add	r2,r3,r2
    d564:	00000106 	br	d56c <fstat+0x44>
    d568:	0005883a 	mov	r2,zero
    d56c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d570:	e0bffd17 	ldw	r2,-12(fp)
    d574:	10001026 	beq	r2,zero,d5b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d578:	e0bffd17 	ldw	r2,-12(fp)
    d57c:	10800017 	ldw	r2,0(r2)
    d580:	10800817 	ldw	r2,32(r2)
    d584:	10000726 	beq	r2,zero,d5a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d588:	e0bffd17 	ldw	r2,-12(fp)
    d58c:	10800017 	ldw	r2,0(r2)
    d590:	10800817 	ldw	r2,32(r2)
    d594:	e17fff17 	ldw	r5,-4(fp)
    d598:	e13ffd17 	ldw	r4,-12(fp)
    d59c:	103ee83a 	callr	r2
    d5a0:	00000a06 	br	d5cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d5a4:	e0bfff17 	ldw	r2,-4(fp)
    d5a8:	00c80004 	movi	r3,8192
    d5ac:	10c00115 	stw	r3,4(r2)
      return 0;
    d5b0:	0005883a 	mov	r2,zero
    d5b4:	00000506 	br	d5cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d5b8:	000d4ec0 	call	d4ec <alt_get_errno>
    d5bc:	1007883a 	mov	r3,r2
    d5c0:	00801444 	movi	r2,81
    d5c4:	18800015 	stw	r2,0(r3)
    return -1;
    d5c8:	00bfffc4 	movi	r2,-1
  }
}
    d5cc:	e037883a 	mov	sp,fp
    d5d0:	dfc00117 	ldw	ra,4(sp)
    d5d4:	df000017 	ldw	fp,0(sp)
    d5d8:	dec00204 	addi	sp,sp,8
    d5dc:	f800283a 	ret

0000d5e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5e0:	defffe04 	addi	sp,sp,-8
    d5e4:	dfc00115 	stw	ra,4(sp)
    d5e8:	df000015 	stw	fp,0(sp)
    d5ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5f0:	d0a00b17 	ldw	r2,-32724(gp)
    d5f4:	10000326 	beq	r2,zero,d604 <alt_get_errno+0x24>
    d5f8:	d0a00b17 	ldw	r2,-32724(gp)
    d5fc:	103ee83a 	callr	r2
    d600:	00000106 	br	d608 <alt_get_errno+0x28>
    d604:	d0a6dd04 	addi	r2,gp,-25740
}
    d608:	e037883a 	mov	sp,fp
    d60c:	dfc00117 	ldw	ra,4(sp)
    d610:	df000017 	ldw	fp,0(sp)
    d614:	dec00204 	addi	sp,sp,8
    d618:	f800283a 	ret

0000d61c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d61c:	deffed04 	addi	sp,sp,-76
    d620:	dfc01215 	stw	ra,72(sp)
    d624:	df001115 	stw	fp,68(sp)
    d628:	df001104 	addi	fp,sp,68
    d62c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d630:	e0bfff17 	ldw	r2,-4(fp)
    d634:	10000816 	blt	r2,zero,d658 <isatty+0x3c>
    d638:	01400304 	movi	r5,12
    d63c:	e13fff17 	ldw	r4,-4(fp)
    d640:	000aae00 	call	aae0 <__mulsi3>
    d644:	1007883a 	mov	r3,r2
    d648:	00800074 	movhi	r2,1
    d64c:	1092c704 	addi	r2,r2,19228
    d650:	1885883a 	add	r2,r3,r2
    d654:	00000106 	br	d65c <isatty+0x40>
    d658:	0005883a 	mov	r2,zero
    d65c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d660:	e0bfef17 	ldw	r2,-68(fp)
    d664:	10000e26 	beq	r2,zero,d6a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d668:	e0bfef17 	ldw	r2,-68(fp)
    d66c:	10800017 	ldw	r2,0(r2)
    d670:	10800817 	ldw	r2,32(r2)
    d674:	1000021e 	bne	r2,zero,d680 <isatty+0x64>
    {
      return 1;
    d678:	00800044 	movi	r2,1
    d67c:	00000d06 	br	d6b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d680:	e0bff004 	addi	r2,fp,-64
    d684:	100b883a 	mov	r5,r2
    d688:	e13fff17 	ldw	r4,-4(fp)
    d68c:	000d5280 	call	d528 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d690:	e0bff117 	ldw	r2,-60(fp)
    d694:	10880020 	cmpeqi	r2,r2,8192
    d698:	10803fcc 	andi	r2,r2,255
    d69c:	00000506 	br	d6b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d6a0:	000d5e00 	call	d5e0 <alt_get_errno>
    d6a4:	1007883a 	mov	r3,r2
    d6a8:	00801444 	movi	r2,81
    d6ac:	18800015 	stw	r2,0(r3)
    return 0;
    d6b0:	0005883a 	mov	r2,zero
  }
}
    d6b4:	e037883a 	mov	sp,fp
    d6b8:	dfc00117 	ldw	ra,4(sp)
    d6bc:	df000017 	ldw	fp,0(sp)
    d6c0:	dec00204 	addi	sp,sp,8
    d6c4:	f800283a 	ret

0000d6c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d6c8:	defffc04 	addi	sp,sp,-16
    d6cc:	df000315 	stw	fp,12(sp)
    d6d0:	df000304 	addi	fp,sp,12
    d6d4:	e13ffd15 	stw	r4,-12(fp)
    d6d8:	e17ffe15 	stw	r5,-8(fp)
    d6dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d6e0:	e0fffe17 	ldw	r3,-8(fp)
    d6e4:	e0bffd17 	ldw	r2,-12(fp)
    d6e8:	18800c26 	beq	r3,r2,d71c <alt_load_section+0x54>
  {
    while( to != end )
    d6ec:	00000806 	br	d710 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d6f0:	e0bffe17 	ldw	r2,-8(fp)
    d6f4:	10c00104 	addi	r3,r2,4
    d6f8:	e0fffe15 	stw	r3,-8(fp)
    d6fc:	e0fffd17 	ldw	r3,-12(fp)
    d700:	19000104 	addi	r4,r3,4
    d704:	e13ffd15 	stw	r4,-12(fp)
    d708:	18c00017 	ldw	r3,0(r3)
    d70c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d710:	e0fffe17 	ldw	r3,-8(fp)
    d714:	e0bfff17 	ldw	r2,-4(fp)
    d718:	18bff51e 	bne	r3,r2,d6f0 <__alt_data_end+0xfffdb6f0>
    {
      *to++ = *from++;
    }
  }
}
    d71c:	0001883a 	nop
    d720:	e037883a 	mov	sp,fp
    d724:	df000017 	ldw	fp,0(sp)
    d728:	dec00104 	addi	sp,sp,4
    d72c:	f800283a 	ret

0000d730 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d730:	defffe04 	addi	sp,sp,-8
    d734:	dfc00115 	stw	ra,4(sp)
    d738:	df000015 	stw	fp,0(sp)
    d73c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d740:	01800074 	movhi	r6,1
    d744:	31975a04 	addi	r6,r6,23912
    d748:	01400074 	movhi	r5,1
    d74c:	29509404 	addi	r5,r5,16976
    d750:	01000074 	movhi	r4,1
    d754:	21175a04 	addi	r4,r4,23912
    d758:	000d6c80 	call	d6c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d75c:	01800034 	movhi	r6,0
    d760:	31808c04 	addi	r6,r6,560
    d764:	01400034 	movhi	r5,0
    d768:	29400804 	addi	r5,r5,32
    d76c:	01000034 	movhi	r4,0
    d770:	21000804 	addi	r4,r4,32
    d774:	000d6c80 	call	d6c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d778:	01800074 	movhi	r6,1
    d77c:	31909404 	addi	r6,r6,16976
    d780:	01400074 	movhi	r5,1
    d784:	294f7a04 	addi	r5,r5,15848
    d788:	01000074 	movhi	r4,1
    d78c:	210f7a04 	addi	r4,r4,15848
    d790:	000d6c80 	call	d6c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d794:	0012d300 	call	12d30 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d798:	0012f800 	call	12f80 <alt_icache_flush_all>
}
    d79c:	0001883a 	nop
    d7a0:	e037883a 	mov	sp,fp
    d7a4:	dfc00117 	ldw	ra,4(sp)
    d7a8:	df000017 	ldw	fp,0(sp)
    d7ac:	dec00204 	addi	sp,sp,8
    d7b0:	f800283a 	ret

0000d7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7b4:	defffe04 	addi	sp,sp,-8
    d7b8:	dfc00115 	stw	ra,4(sp)
    d7bc:	df000015 	stw	fp,0(sp)
    d7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7c4:	d0a00b17 	ldw	r2,-32724(gp)
    d7c8:	10000326 	beq	r2,zero,d7d8 <alt_get_errno+0x24>
    d7cc:	d0a00b17 	ldw	r2,-32724(gp)
    d7d0:	103ee83a 	callr	r2
    d7d4:	00000106 	br	d7dc <alt_get_errno+0x28>
    d7d8:	d0a6dd04 	addi	r2,gp,-25740
}
    d7dc:	e037883a 	mov	sp,fp
    d7e0:	dfc00117 	ldw	ra,4(sp)
    d7e4:	df000017 	ldw	fp,0(sp)
    d7e8:	dec00204 	addi	sp,sp,8
    d7ec:	f800283a 	ret

0000d7f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d7f0:	defff904 	addi	sp,sp,-28
    d7f4:	dfc00615 	stw	ra,24(sp)
    d7f8:	df000515 	stw	fp,20(sp)
    d7fc:	df000504 	addi	fp,sp,20
    d800:	e13ffd15 	stw	r4,-12(fp)
    d804:	e17ffe15 	stw	r5,-8(fp)
    d808:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d80c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d810:	e0bffd17 	ldw	r2,-12(fp)
    d814:	10000816 	blt	r2,zero,d838 <lseek+0x48>
    d818:	01400304 	movi	r5,12
    d81c:	e13ffd17 	ldw	r4,-12(fp)
    d820:	000aae00 	call	aae0 <__mulsi3>
    d824:	1007883a 	mov	r3,r2
    d828:	00800074 	movhi	r2,1
    d82c:	1092c704 	addi	r2,r2,19228
    d830:	1885883a 	add	r2,r3,r2
    d834:	00000106 	br	d83c <lseek+0x4c>
    d838:	0005883a 	mov	r2,zero
    d83c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d840:	e0bffc17 	ldw	r2,-16(fp)
    d844:	10001026 	beq	r2,zero,d888 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d848:	e0bffc17 	ldw	r2,-16(fp)
    d84c:	10800017 	ldw	r2,0(r2)
    d850:	10800717 	ldw	r2,28(r2)
    d854:	10000926 	beq	r2,zero,d87c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d858:	e0bffc17 	ldw	r2,-16(fp)
    d85c:	10800017 	ldw	r2,0(r2)
    d860:	10800717 	ldw	r2,28(r2)
    d864:	e1bfff17 	ldw	r6,-4(fp)
    d868:	e17ffe17 	ldw	r5,-8(fp)
    d86c:	e13ffc17 	ldw	r4,-16(fp)
    d870:	103ee83a 	callr	r2
    d874:	e0bffb15 	stw	r2,-20(fp)
    d878:	00000506 	br	d890 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d87c:	00bfde84 	movi	r2,-134
    d880:	e0bffb15 	stw	r2,-20(fp)
    d884:	00000206 	br	d890 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    d888:	00bfebc4 	movi	r2,-81
    d88c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d890:	e0bffb17 	ldw	r2,-20(fp)
    d894:	1000070e 	bge	r2,zero,d8b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    d898:	000d7b40 	call	d7b4 <alt_get_errno>
    d89c:	1007883a 	mov	r3,r2
    d8a0:	e0bffb17 	ldw	r2,-20(fp)
    d8a4:	0085c83a 	sub	r2,zero,r2
    d8a8:	18800015 	stw	r2,0(r3)
    rc = -1;
    d8ac:	00bfffc4 	movi	r2,-1
    d8b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d8b4:	e0bffb17 	ldw	r2,-20(fp)
}
    d8b8:	e037883a 	mov	sp,fp
    d8bc:	dfc00117 	ldw	ra,4(sp)
    d8c0:	df000017 	ldw	fp,0(sp)
    d8c4:	dec00204 	addi	sp,sp,8
    d8c8:	f800283a 	ret

0000d8cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d8cc:	defffd04 	addi	sp,sp,-12
    d8d0:	dfc00215 	stw	ra,8(sp)
    d8d4:	df000115 	stw	fp,4(sp)
    d8d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d8dc:	0009883a 	mov	r4,zero
    d8e0:	000dd740 	call	dd74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d8e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d8e8:	000ddac0 	call	ddac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d8ec:	01800074 	movhi	r6,1
    d8f0:	31908b04 	addi	r6,r6,16940
    d8f4:	01400074 	movhi	r5,1
    d8f8:	29508b04 	addi	r5,r5,16940
    d8fc:	01000074 	movhi	r4,1
    d900:	21108b04 	addi	r4,r4,16940
    d904:	00133240 	call	13324 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d908:	0012e300 	call	12e30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d90c:	01000074 	movhi	r4,1
    d910:	210ba404 	addi	r4,r4,11920
    d914:	0013a540 	call	13a54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d918:	d0a6de17 	ldw	r2,-25736(gp)
    d91c:	d0e6df17 	ldw	r3,-25732(gp)
    d920:	d126e017 	ldw	r4,-25728(gp)
    d924:	200d883a 	mov	r6,r4
    d928:	180b883a 	mov	r5,r3
    d92c:	1009883a 	mov	r4,r2
    d930:	000026c0 	call	26c <main>
    d934:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d938:	01000044 	movi	r4,1
    d93c:	000d3e80 	call	d3e8 <close>
  exit (result);
    d940:	e13fff17 	ldw	r4,-4(fp)
    d944:	0013a680 	call	13a68 <exit>

0000d948 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d948:	defffe04 	addi	sp,sp,-8
    d94c:	df000115 	stw	fp,4(sp)
    d950:	df000104 	addi	fp,sp,4
    d954:	e13fff15 	stw	r4,-4(fp)
}
    d958:	0001883a 	nop
    d95c:	e037883a 	mov	sp,fp
    d960:	df000017 	ldw	fp,0(sp)
    d964:	dec00104 	addi	sp,sp,4
    d968:	f800283a 	ret

0000d96c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d96c:	defffe04 	addi	sp,sp,-8
    d970:	df000115 	stw	fp,4(sp)
    d974:	df000104 	addi	fp,sp,4
    d978:	e13fff15 	stw	r4,-4(fp)
}
    d97c:	0001883a 	nop
    d980:	e037883a 	mov	sp,fp
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00104 	addi	sp,sp,4
    d98c:	f800283a 	ret

0000d990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d990:	defffe04 	addi	sp,sp,-8
    d994:	dfc00115 	stw	ra,4(sp)
    d998:	df000015 	stw	fp,0(sp)
    d99c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9a0:	d0a00b17 	ldw	r2,-32724(gp)
    d9a4:	10000326 	beq	r2,zero,d9b4 <alt_get_errno+0x24>
    d9a8:	d0a00b17 	ldw	r2,-32724(gp)
    d9ac:	103ee83a 	callr	r2
    d9b0:	00000106 	br	d9b8 <alt_get_errno+0x28>
    d9b4:	d0a6dd04 	addi	r2,gp,-25740
}
    d9b8:	e037883a 	mov	sp,fp
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d9cc:	defff904 	addi	sp,sp,-28
    d9d0:	dfc00615 	stw	ra,24(sp)
    d9d4:	df000515 	stw	fp,20(sp)
    d9d8:	df000504 	addi	fp,sp,20
    d9dc:	e13ffd15 	stw	r4,-12(fp)
    d9e0:	e17ffe15 	stw	r5,-8(fp)
    d9e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9e8:	e0bffd17 	ldw	r2,-12(fp)
    d9ec:	10000816 	blt	r2,zero,da10 <read+0x44>
    d9f0:	01400304 	movi	r5,12
    d9f4:	e13ffd17 	ldw	r4,-12(fp)
    d9f8:	000aae00 	call	aae0 <__mulsi3>
    d9fc:	1007883a 	mov	r3,r2
    da00:	00800074 	movhi	r2,1
    da04:	1092c704 	addi	r2,r2,19228
    da08:	1885883a 	add	r2,r3,r2
    da0c:	00000106 	br	da14 <read+0x48>
    da10:	0005883a 	mov	r2,zero
    da14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    da18:	e0bffb17 	ldw	r2,-20(fp)
    da1c:	10002226 	beq	r2,zero,daa8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    da20:	e0bffb17 	ldw	r2,-20(fp)
    da24:	10800217 	ldw	r2,8(r2)
    da28:	108000cc 	andi	r2,r2,3
    da2c:	10800060 	cmpeqi	r2,r2,1
    da30:	1000181e 	bne	r2,zero,da94 <read+0xc8>
        (fd->dev->read))
    da34:	e0bffb17 	ldw	r2,-20(fp)
    da38:	10800017 	ldw	r2,0(r2)
    da3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    da40:	10001426 	beq	r2,zero,da94 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    da44:	e0bffb17 	ldw	r2,-20(fp)
    da48:	10800017 	ldw	r2,0(r2)
    da4c:	10800517 	ldw	r2,20(r2)
    da50:	e0ffff17 	ldw	r3,-4(fp)
    da54:	180d883a 	mov	r6,r3
    da58:	e17ffe17 	ldw	r5,-8(fp)
    da5c:	e13ffb17 	ldw	r4,-20(fp)
    da60:	103ee83a 	callr	r2
    da64:	e0bffc15 	stw	r2,-16(fp)
    da68:	e0bffc17 	ldw	r2,-16(fp)
    da6c:	1000070e 	bge	r2,zero,da8c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    da70:	000d9900 	call	d990 <alt_get_errno>
    da74:	1007883a 	mov	r3,r2
    da78:	e0bffc17 	ldw	r2,-16(fp)
    da7c:	0085c83a 	sub	r2,zero,r2
    da80:	18800015 	stw	r2,0(r3)
          return -1;
    da84:	00bfffc4 	movi	r2,-1
    da88:	00000c06 	br	dabc <read+0xf0>
        }
        return rval;
    da8c:	e0bffc17 	ldw	r2,-16(fp)
    da90:	00000a06 	br	dabc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    da94:	000d9900 	call	d990 <alt_get_errno>
    da98:	1007883a 	mov	r3,r2
    da9c:	00800344 	movi	r2,13
    daa0:	18800015 	stw	r2,0(r3)
    daa4:	00000406 	br	dab8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    daa8:	000d9900 	call	d990 <alt_get_errno>
    daac:	1007883a 	mov	r3,r2
    dab0:	00801444 	movi	r2,81
    dab4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dab8:	00bfffc4 	movi	r2,-1
}
    dabc:	e037883a 	mov	sp,fp
    dac0:	dfc00117 	ldw	ra,4(sp)
    dac4:	df000017 	ldw	fp,0(sp)
    dac8:	dec00204 	addi	sp,sp,8
    dacc:	f800283a 	ret

0000dad0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dad0:	defffc04 	addi	sp,sp,-16
    dad4:	dfc00315 	stw	ra,12(sp)
    dad8:	df000215 	stw	fp,8(sp)
    dadc:	dc000115 	stw	r16,4(sp)
    dae0:	df000204 	addi	fp,sp,8
    dae4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    dae8:	e0bffe17 	ldw	r2,-8(fp)
    daec:	108000d0 	cmplti	r2,r2,3
    daf0:	1000111e 	bne	r2,zero,db38 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    daf4:	04000074 	movhi	r16,1
    daf8:	8412c704 	addi	r16,r16,19228
    dafc:	e0bffe17 	ldw	r2,-8(fp)
    db00:	01400304 	movi	r5,12
    db04:	1009883a 	mov	r4,r2
    db08:	000aae00 	call	aae0 <__mulsi3>
    db0c:	8085883a 	add	r2,r16,r2
    db10:	10800204 	addi	r2,r2,8
    db14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    db18:	04000074 	movhi	r16,1
    db1c:	8412c704 	addi	r16,r16,19228
    db20:	e0bffe17 	ldw	r2,-8(fp)
    db24:	01400304 	movi	r5,12
    db28:	1009883a 	mov	r4,r2
    db2c:	000aae00 	call	aae0 <__mulsi3>
    db30:	8085883a 	add	r2,r16,r2
    db34:	10000015 	stw	zero,0(r2)
  }
}
    db38:	0001883a 	nop
    db3c:	e6ffff04 	addi	sp,fp,-4
    db40:	dfc00217 	ldw	ra,8(sp)
    db44:	df000117 	ldw	fp,4(sp)
    db48:	dc000017 	ldw	r16,0(sp)
    db4c:	dec00304 	addi	sp,sp,12
    db50:	f800283a 	ret

0000db54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    db54:	defff904 	addi	sp,sp,-28
    db58:	df000615 	stw	fp,24(sp)
    db5c:	df000604 	addi	fp,sp,24
    db60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db64:	0005303a 	rdctl	r2,status
    db68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db6c:	e0fffe17 	ldw	r3,-8(fp)
    db70:	00bfff84 	movi	r2,-2
    db74:	1884703a 	and	r2,r3,r2
    db78:	1001703a 	wrctl	status,r2
  
  return context;
    db7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    db80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    db84:	d0a00c17 	ldw	r2,-32720(gp)
    db88:	10c000c4 	addi	r3,r2,3
    db8c:	00bfff04 	movi	r2,-4
    db90:	1884703a 	and	r2,r3,r2
    db94:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    db98:	d0e00c17 	ldw	r3,-32720(gp)
    db9c:	e0bfff17 	ldw	r2,-4(fp)
    dba0:	1887883a 	add	r3,r3,r2
    dba4:	008000f4 	movhi	r2,3
    dba8:	10880004 	addi	r2,r2,8192
    dbac:	10c0062e 	bgeu	r2,r3,dbc8 <sbrk+0x74>
    dbb0:	e0bffb17 	ldw	r2,-20(fp)
    dbb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbb8:	e0bffa17 	ldw	r2,-24(fp)
    dbbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    dbc0:	00bfffc4 	movi	r2,-1
    dbc4:	00000b06 	br	dbf4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    dbc8:	d0a00c17 	ldw	r2,-32720(gp)
    dbcc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    dbd0:	d0e00c17 	ldw	r3,-32720(gp)
    dbd4:	e0bfff17 	ldw	r2,-4(fp)
    dbd8:	1885883a 	add	r2,r3,r2
    dbdc:	d0a00c15 	stw	r2,-32720(gp)
    dbe0:	e0bffb17 	ldw	r2,-20(fp)
    dbe4:	e0bffc15 	stw	r2,-16(fp)
    dbe8:	e0bffc17 	ldw	r2,-16(fp)
    dbec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dbf0:	e0bffd17 	ldw	r2,-12(fp)
} 
    dbf4:	e037883a 	mov	sp,fp
    dbf8:	df000017 	ldw	fp,0(sp)
    dbfc:	dec00104 	addi	sp,sp,4
    dc00:	f800283a 	ret

0000dc04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc04:	defffe04 	addi	sp,sp,-8
    dc08:	dfc00115 	stw	ra,4(sp)
    dc0c:	df000015 	stw	fp,0(sp)
    dc10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dc14:	d0a00b17 	ldw	r2,-32724(gp)
    dc18:	10000326 	beq	r2,zero,dc28 <alt_get_errno+0x24>
    dc1c:	d0a00b17 	ldw	r2,-32724(gp)
    dc20:	103ee83a 	callr	r2
    dc24:	00000106 	br	dc2c <alt_get_errno+0x28>
    dc28:	d0a6dd04 	addi	r2,gp,-25740
}
    dc2c:	e037883a 	mov	sp,fp
    dc30:	dfc00117 	ldw	ra,4(sp)
    dc34:	df000017 	ldw	fp,0(sp)
    dc38:	dec00204 	addi	sp,sp,8
    dc3c:	f800283a 	ret

0000dc40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dc40:	defff904 	addi	sp,sp,-28
    dc44:	dfc00615 	stw	ra,24(sp)
    dc48:	df000515 	stw	fp,20(sp)
    dc4c:	df000504 	addi	fp,sp,20
    dc50:	e13ffd15 	stw	r4,-12(fp)
    dc54:	e17ffe15 	stw	r5,-8(fp)
    dc58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dc5c:	e0bffd17 	ldw	r2,-12(fp)
    dc60:	10000816 	blt	r2,zero,dc84 <write+0x44>
    dc64:	01400304 	movi	r5,12
    dc68:	e13ffd17 	ldw	r4,-12(fp)
    dc6c:	000aae00 	call	aae0 <__mulsi3>
    dc70:	1007883a 	mov	r3,r2
    dc74:	00800074 	movhi	r2,1
    dc78:	1092c704 	addi	r2,r2,19228
    dc7c:	1885883a 	add	r2,r3,r2
    dc80:	00000106 	br	dc88 <write+0x48>
    dc84:	0005883a 	mov	r2,zero
    dc88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dc8c:	e0bffb17 	ldw	r2,-20(fp)
    dc90:	10002126 	beq	r2,zero,dd18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dc94:	e0bffb17 	ldw	r2,-20(fp)
    dc98:	10800217 	ldw	r2,8(r2)
    dc9c:	108000cc 	andi	r2,r2,3
    dca0:	10001826 	beq	r2,zero,dd04 <write+0xc4>
    dca4:	e0bffb17 	ldw	r2,-20(fp)
    dca8:	10800017 	ldw	r2,0(r2)
    dcac:	10800617 	ldw	r2,24(r2)
    dcb0:	10001426 	beq	r2,zero,dd04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dcb4:	e0bffb17 	ldw	r2,-20(fp)
    dcb8:	10800017 	ldw	r2,0(r2)
    dcbc:	10800617 	ldw	r2,24(r2)
    dcc0:	e0ffff17 	ldw	r3,-4(fp)
    dcc4:	180d883a 	mov	r6,r3
    dcc8:	e17ffe17 	ldw	r5,-8(fp)
    dccc:	e13ffb17 	ldw	r4,-20(fp)
    dcd0:	103ee83a 	callr	r2
    dcd4:	e0bffc15 	stw	r2,-16(fp)
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	1000070e 	bge	r2,zero,dcfc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    dce0:	000dc040 	call	dc04 <alt_get_errno>
    dce4:	1007883a 	mov	r3,r2
    dce8:	e0bffc17 	ldw	r2,-16(fp)
    dcec:	0085c83a 	sub	r2,zero,r2
    dcf0:	18800015 	stw	r2,0(r3)
        return -1;
    dcf4:	00bfffc4 	movi	r2,-1
    dcf8:	00000c06 	br	dd2c <write+0xec>
      }
      return rval;
    dcfc:	e0bffc17 	ldw	r2,-16(fp)
    dd00:	00000a06 	br	dd2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dd04:	000dc040 	call	dc04 <alt_get_errno>
    dd08:	1007883a 	mov	r3,r2
    dd0c:	00800344 	movi	r2,13
    dd10:	18800015 	stw	r2,0(r3)
    dd14:	00000406 	br	dd28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dd18:	000dc040 	call	dc04 <alt_get_errno>
    dd1c:	1007883a 	mov	r3,r2
    dd20:	00801444 	movi	r2,81
    dd24:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dd28:	00bfffc4 	movi	r2,-1
}
    dd2c:	e037883a 	mov	sp,fp
    dd30:	dfc00117 	ldw	ra,4(sp)
    dd34:	df000017 	ldw	fp,0(sp)
    dd38:	dec00204 	addi	sp,sp,8
    dd3c:	f800283a 	ret

0000dd40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    dd40:	defffd04 	addi	sp,sp,-12
    dd44:	dfc00215 	stw	ra,8(sp)
    dd48:	df000115 	stw	fp,4(sp)
    dd4c:	df000104 	addi	fp,sp,4
    dd50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    dd54:	d1600804 	addi	r5,gp,-32736
    dd58:	e13fff17 	ldw	r4,-4(fp)
    dd5c:	0012d8c0 	call	12d8c <alt_dev_llist_insert>
}
    dd60:	e037883a 	mov	sp,fp
    dd64:	dfc00117 	ldw	ra,4(sp)
    dd68:	df000017 	ldw	fp,0(sp)
    dd6c:	dec00204 	addi	sp,sp,8
    dd70:	f800283a 	ret

0000dd74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dd74:	defffd04 	addi	sp,sp,-12
    dd78:	dfc00215 	stw	ra,8(sp)
    dd7c:	df000115 	stw	fp,4(sp)
    dd80:	df000104 	addi	fp,sp,4
    dd84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    dd88:	00137c80 	call	137c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dd8c:	00800044 	movi	r2,1
    dd90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    dd94:	0001883a 	nop
    dd98:	e037883a 	mov	sp,fp
    dd9c:	dfc00117 	ldw	ra,4(sp)
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00204 	addi	sp,sp,8
    dda8:	f800283a 	ret

0000ddac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ddac:	defffe04 	addi	sp,sp,-8
    ddb0:	dfc00115 	stw	ra,4(sp)
    ddb4:	df000015 	stw	fp,0(sp)
    ddb8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, debug);
    ddbc:	000d883a 	mov	r6,zero
    ddc0:	000b883a 	mov	r5,zero
    ddc4:	01000074 	movhi	r4,1
    ddc8:	21133104 	addi	r4,r4,19652
    ddcc:	00123000 	call	12300 <altera_avalon_jtag_uart_init>
    ddd0:	01000074 	movhi	r4,1
    ddd4:	21132704 	addi	r4,r4,19612
    ddd8:	000dd400 	call	dd40 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SDCARD, SDCard);
    dddc:	01000074 	movhi	r4,1
    dde0:	21173f04 	addi	r4,r4,23804
    dde4:	000dd400 	call	dd40 <alt_dev_reg>
}
    dde8:	0001883a 	nop
    ddec:	e037883a 	mov	sp,fp
    ddf0:	dfc00117 	ldw	ra,4(sp)
    ddf4:	df000017 	ldw	fp,0(sp)
    ddf8:	dec00204 	addi	sp,sp,8
    ddfc:	f800283a 	ret

0000de00 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    de00:	defffa04 	addi	sp,sp,-24
    de04:	dfc00515 	stw	ra,20(sp)
    de08:	df000415 	stw	fp,16(sp)
    de0c:	df000404 	addi	fp,sp,16
    de10:	e13ffe15 	stw	r4,-8(fp)
    de14:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    de18:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
    de1c:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
    de20:	10001e26 	beq	r2,zero,de9c <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
    de24:	00803fc4 	movi	r2,255
    de28:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    de2c:	d0a6e717 	ldw	r2,-25700(gp)
    de30:	e13ffe17 	ldw	r4,-8(fp)
    de34:	e0ffff17 	ldw	r3,-4(fp)
    de38:	20c7883a 	add	r3,r4,r3
    de3c:	1806927a 	slli	r3,r3,9
    de40:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
    de44:	d0a6e617 	ldw	r2,-25704(gp)
    de48:	00c00604 	movi	r3,24
    de4c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    de50:	d0a6e317 	ldw	r2,-25716(gp)
    de54:	1080002b 	ldhuio	r2,0(r2)
    de58:	10bfffcc 	andi	r2,r2,65535
    de5c:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
    de60:	e0bffd0b 	ldhu	r2,-12(fp)
    de64:	10bfffcc 	andi	r2,r2,65535
    de68:	1080010c 	andi	r2,r2,4
    de6c:	103ff81e 	bne	r2,zero,de50 <__alt_data_end+0xfffdbe50>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
    de70:	e0bffd0b 	ldhu	r2,-12(fp)
    de74:	10bfffcc 	andi	r2,r2,65535
    de78:	1080040c 	andi	r2,r2,16
    de7c:	1000071e 	bne	r2,zero,de9c <Write_Sector_Data+0x9c>
        {
            result = true;
    de80:	00800044 	movi	r2,1
    de84:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    de88:	d026ec15 	stw	zero,-25680(gp)
            current_sector_index = sector_index+partition_offset;
    de8c:	e0fffe17 	ldw	r3,-8(fp)
    de90:	e0bfff17 	ldw	r2,-4(fp)
    de94:	1885883a 	add	r2,r3,r2
    de98:	d0a6ed15 	stw	r2,-25676(gp)
        }
    }
    return result;
    de9c:	e0bffc17 	ldw	r2,-16(fp)
}
    dea0:	e037883a 	mov	sp,fp
    dea4:	dfc00117 	ldw	ra,4(sp)
    dea8:	df000017 	ldw	fp,0(sp)
    deac:	dec00204 	addi	sp,sp,8
    deb0:	f800283a 	ret

0000deb4 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    deb4:	defffd04 	addi	sp,sp,-12
    deb8:	dfc00215 	stw	ra,8(sp)
    debc:	df000115 	stw	fp,4(sp)
    dec0:	df000104 	addi	fp,sp,4
    bool result = true;
    dec4:	00800044 	movi	r2,1
    dec8:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
    decc:	d0a6ec17 	ldw	r2,-25680(gp)
    ded0:	10000526 	beq	r2,zero,dee8 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
    ded4:	d0a6ed17 	ldw	r2,-25676(gp)
    ded8:	000b883a 	mov	r5,zero
    dedc:	1009883a 	mov	r4,r2
    dee0:	000de000 	call	de00 <Write_Sector_Data>
    dee4:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
    dee8:	e0bfff17 	ldw	r2,-4(fp)
}
    deec:	e037883a 	mov	sp,fp
    def0:	dfc00117 	ldw	ra,4(sp)
    def4:	df000017 	ldw	fp,0(sp)
    def8:	dec00204 	addi	sp,sp,8
    defc:	f800283a 	ret

0000df00 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
    df00:	defffa04 	addi	sp,sp,-24
    df04:	dfc00515 	stw	ra,20(sp)
    df08:	df000415 	stw	fp,16(sp)
    df0c:	df000404 	addi	fp,sp,16
    df10:	e13ffe15 	stw	r4,-8(fp)
    df14:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
    df18:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
    df1c:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
    df20:	10002726 	beq	r2,zero,dfc0 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
    df24:	00803fc4 	movi	r2,255
    df28:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
    df2c:	d0a6ec17 	ldw	r2,-25680(gp)
    df30:	10000726 	beq	r2,zero,df50 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
    df34:	d0a6ed17 	ldw	r2,-25676(gp)
    df38:	000b883a 	mov	r5,zero
    df3c:	1009883a 	mov	r4,r2
    df40:	000de000 	call	de00 <Write_Sector_Data>
    df44:	1000021e 	bne	r2,zero,df50 <Read_Sector_Data+0x50>
            {
                return false;
    df48:	0005883a 	mov	r2,zero
    df4c:	00001d06 	br	dfc4 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    df50:	d0a6e717 	ldw	r2,-25700(gp)
    df54:	e13ffe17 	ldw	r4,-8(fp)
    df58:	e0ffff17 	ldw	r3,-4(fp)
    df5c:	20c7883a 	add	r3,r4,r3
    df60:	1806927a 	slli	r3,r3,9
    df64:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
    df68:	d0a6e617 	ldw	r2,-25704(gp)
    df6c:	00c00444 	movi	r3,17
    df70:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    df74:	d0a6e317 	ldw	r2,-25716(gp)
    df78:	1080002b 	ldhuio	r2,0(r2)
    df7c:	10bfffcc 	andi	r2,r2,65535
    df80:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
    df84:	e0bffd0b 	ldhu	r2,-12(fp)
    df88:	10bfffcc 	andi	r2,r2,65535
    df8c:	1080010c 	andi	r2,r2,4
    df90:	103ff81e 	bne	r2,zero,df74 <__alt_data_end+0xfffdbf74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
    df94:	e0bffd0b 	ldhu	r2,-12(fp)
    df98:	10bfffcc 	andi	r2,r2,65535
    df9c:	1080040c 	andi	r2,r2,16
    dfa0:	1000071e 	bne	r2,zero,dfc0 <Read_Sector_Data+0xc0>
		{
			result = true;
    dfa4:	00800044 	movi	r2,1
    dfa8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    dfac:	d026ec15 	stw	zero,-25680(gp)
            current_sector_index = sector_index+partition_offset;
    dfb0:	e0fffe17 	ldw	r3,-8(fp)
    dfb4:	e0bfff17 	ldw	r2,-4(fp)
    dfb8:	1885883a 	add	r2,r3,r2
    dfbc:	d0a6ed15 	stw	r2,-25676(gp)
		}
	}
	return result;
    dfc0:	e0bffc17 	ldw	r2,-16(fp)
}
    dfc4:	e037883a 	mov	sp,fp
    dfc8:	dfc00117 	ldw	ra,4(sp)
    dfcc:	df000017 	ldw	fp,0(sp)
    dfd0:	dec00204 	addi	sp,sp,8
    dfd4:	f800283a 	ret

0000dfd8 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    dfd8:	defffb04 	addi	sp,sp,-20
    dfdc:	dfc00415 	stw	ra,16(sp)
    dfe0:	df000315 	stw	fp,12(sp)
    dfe4:	df000304 	addi	fp,sp,12
    dfe8:	e13ffe15 	stw	r4,-8(fp)
    dfec:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    dff0:	e0bffe17 	ldw	r2,-8(fp)
    dff4:	1004d23a 	srli	r2,r2,8
    dff8:	d0e6e917 	ldw	r3,-25692(gp)
    dffc:	10c5883a 	add	r2,r2,r3
    e000:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    e004:	00800074 	movhi	r2,1
    e008:	109e4b04 	addi	r2,r2,31020
    e00c:	10801117 	ldw	r2,68(r2)
    e010:	e0fffd17 	ldw	r3,-12(fp)
    e014:	1885883a 	add	r2,r3,r2
    e018:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
    e01c:	d0a6ed17 	ldw	r2,-25676(gp)
    e020:	e0fffd17 	ldw	r3,-12(fp)
    e024:	18800726 	beq	r3,r2,e044 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    e028:	e0bffd17 	ldw	r2,-12(fp)
    e02c:	000b883a 	mov	r5,zero
    e030:	1009883a 	mov	r4,r2
    e034:	000df000 	call	df00 <Read_Sector_Data>
    e038:	1000021e 	bne	r2,zero,e044 <get_cluster_flag+0x6c>
        {
            return false;
    e03c:	0005883a 	mov	r2,zero
    e040:	00000d06 	br	e078 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
    e044:	e0bffe17 	ldw	r2,-8(fp)
    e048:	10803fcc 	andi	r2,r2,255
    e04c:	1085883a 	add	r2,r2,r2
    e050:	1007883a 	mov	r3,r2
    e054:	d0a6eb17 	ldw	r2,-25684(gp)
    e058:	10800a17 	ldw	r2,40(r2)
    e05c:	1885883a 	add	r2,r3,r2
    e060:	1080002b 	ldhuio	r2,0(r2)
    e064:	10bfffcc 	andi	r2,r2,65535
    e068:	1007883a 	mov	r3,r2
    e06c:	e0bfff17 	ldw	r2,-4(fp)
    e070:	10c0000d 	sth	r3,0(r2)
    return true;
    e074:	00800044 	movi	r2,1
}
    e078:	e037883a 	mov	sp,fp
    e07c:	dfc00117 	ldw	ra,4(sp)
    e080:	df000017 	ldw	fp,0(sp)
    e084:	dec00204 	addi	sp,sp,8
    e088:	f800283a 	ret

0000e08c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    e08c:	defffa04 	addi	sp,sp,-24
    e090:	dfc00515 	stw	ra,20(sp)
    e094:	df000415 	stw	fp,16(sp)
    e098:	df000404 	addi	fp,sp,16
    e09c:	e13ffd15 	stw	r4,-12(fp)
    e0a0:	2805883a 	mov	r2,r5
    e0a4:	e1bfff15 	stw	r6,-4(fp)
    e0a8:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    e0ac:	e0bffd17 	ldw	r2,-12(fp)
    e0b0:	1004d23a 	srli	r2,r2,8
    e0b4:	d0e6e917 	ldw	r3,-25692(gp)
    e0b8:	10c5883a 	add	r2,r2,r3
    e0bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
    e0c0:	e0bfff17 	ldw	r2,-4(fp)
    e0c4:	10000726 	beq	r2,zero,e0e4 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    e0c8:	00800074 	movhi	r2,1
    e0cc:	109e4b04 	addi	r2,r2,31020
    e0d0:	10801117 	ldw	r2,68(r2)
    e0d4:	e0fffc17 	ldw	r3,-16(fp)
    e0d8:	1885883a 	add	r2,r3,r2
    e0dc:	e0bffc15 	stw	r2,-16(fp)
    e0e0:	00000606 	br	e0fc <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    e0e4:	00800074 	movhi	r2,1
    e0e8:	109e4b04 	addi	r2,r2,31020
    e0ec:	10801217 	ldw	r2,72(r2)
    e0f0:	e0fffc17 	ldw	r3,-16(fp)
    e0f4:	1885883a 	add	r2,r3,r2
    e0f8:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
    e0fc:	d0a6ed17 	ldw	r2,-25676(gp)
    e100:	e0fffc17 	ldw	r3,-16(fp)
    e104:	18800726 	beq	r3,r2,e124 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    e108:	e0bffc17 	ldw	r2,-16(fp)
    e10c:	000b883a 	mov	r5,zero
    e110:	1009883a 	mov	r4,r2
    e114:	000df000 	call	df00 <Read_Sector_Data>
    e118:	1000021e 	bne	r2,zero,e124 <mark_cluster+0x98>
        {
            return false;
    e11c:	0005883a 	mov	r2,zero
    e120:	00000d06 	br	e158 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    e124:	e0bffd17 	ldw	r2,-12(fp)
    e128:	10803fcc 	andi	r2,r2,255
    e12c:	1085883a 	add	r2,r2,r2
    e130:	1007883a 	mov	r3,r2
    e134:	d0a6eb17 	ldw	r2,-25684(gp)
    e138:	10800a17 	ldw	r2,40(r2)
    e13c:	1885883a 	add	r2,r3,r2
    e140:	1007883a 	mov	r3,r2
    e144:	e0bffe0f 	ldh	r2,-8(fp)
    e148:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
    e14c:	00800044 	movi	r2,1
    e150:	d0a6ec15 	stw	r2,-25680(gp)
    return true;
    e154:	00800044 	movi	r2,1
}
    e158:	e037883a 	mov	sp,fp
    e15c:	dfc00117 	ldw	ra,4(sp)
    e160:	df000017 	ldw	fp,0(sp)
    e164:	dec00204 	addi	sp,sp,8
    e168:	f800283a 	ret

0000e16c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
    e16c:	defff704 	addi	sp,sp,-36
    e170:	dfc00815 	stw	ra,32(sp)
    e174:	df000715 	stw	fp,28(sp)
    e178:	df000704 	addi	fp,sp,28
	bool result = false;
    e17c:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
    e180:	000b883a 	mov	r5,zero
    e184:	0009883a 	mov	r4,zero
    e188:	000df000 	call	df00 <Read_Sector_Data>
    e18c:	10005a26 	beq	r2,zero,e2f8 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
    e190:	d0a6eb17 	ldw	r2,-25684(gp)
    e194:	10800a17 	ldw	r2,40(r2)
    e198:	10807f84 	addi	r2,r2,510
    e19c:	1080002b 	ldhuio	r2,0(r2)
    e1a0:	10bfffcc 	andi	r2,r2,65535
    e1a4:	10bfffcc 	andi	r2,r2,65535
    e1a8:	10a0001c 	xori	r2,r2,32768
    e1ac:	10a00004 	addi	r2,r2,-32768
    e1b0:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
    e1b4:	e0bffb17 	ldw	r2,-20(fp)
    e1b8:	10ffffcc 	andi	r3,r2,65535
    e1bc:	00aa9554 	movui	r2,43605
    e1c0:	18804d1e 	bne	r3,r2,e2f8 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    e1c4:	e03ffa15 	stw	zero,-24(fp)
    e1c8:	00004806 	br	e2ec <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
    e1cc:	e0bffa17 	ldw	r2,-24(fp)
    e1d0:	1004913a 	slli	r2,r2,4
    e1d4:	10806f84 	addi	r2,r2,446
    e1d8:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
    e1dc:	d0a6eb17 	ldw	r2,-25684(gp)
    e1e0:	10c00a17 	ldw	r3,40(r2)
    e1e4:	e0bffc17 	ldw	r2,-16(fp)
    e1e8:	1885883a 	add	r2,r3,r2
    e1ec:	10800104 	addi	r2,r2,4
    e1f0:	10800023 	ldbuio	r2,0(r2)
    e1f4:	10803fcc 	andi	r2,r2,255
    e1f8:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
    e1fc:	e0bffd07 	ldb	r2,-12(fp)
    e200:	10800060 	cmpeqi	r2,r2,1
    e204:	1000091e 	bne	r2,zero,e22c <Check_for_Master_Boot_Record+0xc0>
    e208:	e0bffd07 	ldb	r2,-12(fp)
    e20c:	10800120 	cmpeqi	r2,r2,4
    e210:	1000061e 	bne	r2,zero,e22c <Check_for_Master_Boot_Record+0xc0>
    e214:	e0bffd07 	ldb	r2,-12(fp)
    e218:	108001a0 	cmpeqi	r2,r2,6
    e21c:	1000031e 	bne	r2,zero,e22c <Check_for_Master_Boot_Record+0xc0>
    e220:	e0bffd07 	ldb	r2,-12(fp)
    e224:	10800398 	cmpnei	r2,r2,14
    e228:	10002d1e 	bne	r2,zero,e2e0 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
    e22c:	d0a6eb17 	ldw	r2,-25684(gp)
    e230:	10c00a17 	ldw	r3,40(r2)
    e234:	e0bffc17 	ldw	r2,-16(fp)
    e238:	1885883a 	add	r2,r3,r2
    e23c:	10800284 	addi	r2,r2,10
    e240:	1080002b 	ldhuio	r2,0(r2)
    e244:	10bfffcc 	andi	r2,r2,65535
    e248:	1006943a 	slli	r3,r2,16
    e24c:	d0a6eb17 	ldw	r2,-25684(gp)
    e250:	11000a17 	ldw	r4,40(r2)
    e254:	e0bffc17 	ldw	r2,-16(fp)
    e258:	2085883a 	add	r2,r4,r2
    e25c:	10800204 	addi	r2,r2,8
    e260:	1080002b 	ldhuio	r2,0(r2)
    e264:	10bfffcc 	andi	r2,r2,65535
    e268:	10bfffcc 	andi	r2,r2,65535
    e26c:	1884b03a 	or	r2,r3,r2
    e270:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
    e274:	d0a6eb17 	ldw	r2,-25684(gp)
    e278:	10c00a17 	ldw	r3,40(r2)
    e27c:	e0bffc17 	ldw	r2,-16(fp)
    e280:	1885883a 	add	r2,r3,r2
    e284:	10800384 	addi	r2,r2,14
    e288:	1080002b 	ldhuio	r2,0(r2)
    e28c:	10bfffcc 	andi	r2,r2,65535
    e290:	1006943a 	slli	r3,r2,16
    e294:	d0a6eb17 	ldw	r2,-25684(gp)
    e298:	11000a17 	ldw	r4,40(r2)
    e29c:	e0bffc17 	ldw	r2,-16(fp)
    e2a0:	2085883a 	add	r2,r4,r2
    e2a4:	10800304 	addi	r2,r2,12
    e2a8:	1080002b 	ldhuio	r2,0(r2)
    e2ac:	10bfffcc 	andi	r2,r2,65535
    e2b0:	10bfffcc 	andi	r2,r2,65535
    e2b4:	1884b03a 	or	r2,r3,r2
    e2b8:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
    e2bc:	e0bfff17 	ldw	r2,-4(fp)
    e2c0:	0080070e 	bge	zero,r2,e2e0 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
    e2c4:	00800044 	movi	r2,1
    e2c8:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
    e2cc:	e0bfff17 	ldw	r2,-4(fp)
    e2d0:	d0a6ea15 	stw	r2,-25688(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	d0a6e915 	stw	r2,-25692(gp)
						break;
    e2dc:	00000606 	br	e2f8 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    e2e0:	e0bffa17 	ldw	r2,-24(fp)
    e2e4:	10800044 	addi	r2,r2,1
    e2e8:	e0bffa15 	stw	r2,-24(fp)
    e2ec:	e0bffa17 	ldw	r2,-24(fp)
    e2f0:	10800110 	cmplti	r2,r2,4
    e2f4:	103fb51e 	bne	r2,zero,e1cc <__alt_data_end+0xfffdc1cc>
				}
			}
		}
	}

	return result;
    e2f8:	e0bff917 	ldw	r2,-28(fp)
}
    e2fc:	e037883a 	mov	sp,fp
    e300:	dfc00117 	ldw	ra,4(sp)
    e304:	df000017 	ldw	fp,0(sp)
    e308:	dec00204 	addi	sp,sp,8
    e30c:	f800283a 	ret

0000e310 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
    e310:	defff804 	addi	sp,sp,-32
    e314:	dfc00715 	stw	ra,28(sp)
    e318:	df000615 	stw	fp,24(sp)
    e31c:	df000604 	addi	fp,sp,24
    e320:	e13ffc15 	stw	r4,-16(fp)
    e324:	e17ffd15 	stw	r5,-12(fp)
    e328:	e1bffe15 	stw	r6,-8(fp)
    e32c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
    e330:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    e334:	e0bffc17 	ldw	r2,-16(fp)
    e338:	108007cc 	andi	r2,r2,31
    e33c:	10008d1e 	bne	r2,zero,e574 <Read_File_Record_At_Offset+0x264>
    e340:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
    e344:	10008b26 	beq	r2,zero,e574 <Read_File_Record_At_Offset+0x264>
    e348:	d0a6e217 	ldw	r2,-25720(gp)
    e34c:	10008926 	beq	r2,zero,e574 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    e350:	e03ffb15 	stw	zero,-20(fp)
    e354:	00001106 	br	e39c <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
    e358:	e0fffc17 	ldw	r3,-16(fp)
    e35c:	e0bffb17 	ldw	r2,-20(fp)
    e360:	1885883a 	add	r2,r3,r2
    e364:	1007883a 	mov	r3,r2
    e368:	d0a6eb17 	ldw	r2,-25684(gp)
    e36c:	10800a17 	ldw	r2,40(r2)
    e370:	1885883a 	add	r2,r3,r2
    e374:	10800023 	ldbuio	r2,0(r2)
    e378:	10803fcc 	andi	r2,r2,255
    e37c:	1009883a 	mov	r4,r2
    e380:	e0fffd17 	ldw	r3,-12(fp)
    e384:	e0bffb17 	ldw	r2,-20(fp)
    e388:	1885883a 	add	r2,r3,r2
    e38c:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    e390:	e0bffb17 	ldw	r2,-20(fp)
    e394:	10800044 	addi	r2,r2,1
    e398:	e0bffb15 	stw	r2,-20(fp)
    e39c:	e0bffb17 	ldw	r2,-20(fp)
    e3a0:	10800210 	cmplti	r2,r2,8
    e3a4:	103fec1e 	bne	r2,zero,e358 <__alt_data_end+0xfffdc358>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    e3a8:	e03ffb15 	stw	zero,-20(fp)
    e3ac:	00001306 	br	e3fc <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
    e3b0:	e0fffc17 	ldw	r3,-16(fp)
    e3b4:	e0bffb17 	ldw	r2,-20(fp)
    e3b8:	1885883a 	add	r2,r3,r2
    e3bc:	1007883a 	mov	r3,r2
    e3c0:	d0a6eb17 	ldw	r2,-25684(gp)
    e3c4:	10800a17 	ldw	r2,40(r2)
    e3c8:	1885883a 	add	r2,r3,r2
    e3cc:	10800204 	addi	r2,r2,8
    e3d0:	10800023 	ldbuio	r2,0(r2)
    e3d4:	10803fcc 	andi	r2,r2,255
    e3d8:	1009883a 	mov	r4,r2
    e3dc:	e0fffd17 	ldw	r3,-12(fp)
    e3e0:	e0bffb17 	ldw	r2,-20(fp)
    e3e4:	1885883a 	add	r2,r3,r2
    e3e8:	10800204 	addi	r2,r2,8
    e3ec:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    e3f0:	e0bffb17 	ldw	r2,-20(fp)
    e3f4:	10800044 	addi	r2,r2,1
    e3f8:	e0bffb15 	stw	r2,-20(fp)
    e3fc:	e0bffb17 	ldw	r2,-20(fp)
    e400:	108000d0 	cmplti	r2,r2,3
    e404:	103fea1e 	bne	r2,zero,e3b0 <__alt_data_end+0xfffdc3b0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
    e408:	d0a6eb17 	ldw	r2,-25684(gp)
    e40c:	10c00a17 	ldw	r3,40(r2)
    e410:	e0bffc17 	ldw	r2,-16(fp)
    e414:	1885883a 	add	r2,r3,r2
    e418:	108002c4 	addi	r2,r2,11
    e41c:	10800023 	ldbuio	r2,0(r2)
    e420:	10803fcc 	andi	r2,r2,255
    e424:	1007883a 	mov	r3,r2
    e428:	e0bffd17 	ldw	r2,-12(fp)
    e42c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
    e430:	d0a6eb17 	ldw	r2,-25684(gp)
    e434:	10c00a17 	ldw	r3,40(r2)
    e438:	e0bffc17 	ldw	r2,-16(fp)
    e43c:	1885883a 	add	r2,r3,r2
    e440:	10800384 	addi	r2,r2,14
    e444:	1080002b 	ldhuio	r2,0(r2)
    e448:	10bfffcc 	andi	r2,r2,65535
    e44c:	1007883a 	mov	r3,r2
    e450:	e0bffd17 	ldw	r2,-12(fp)
    e454:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
    e458:	d0a6eb17 	ldw	r2,-25684(gp)
    e45c:	10c00a17 	ldw	r3,40(r2)
    e460:	e0bffc17 	ldw	r2,-16(fp)
    e464:	1885883a 	add	r2,r3,r2
    e468:	10800404 	addi	r2,r2,16
    e46c:	1080002b 	ldhuio	r2,0(r2)
    e470:	10bfffcc 	andi	r2,r2,65535
    e474:	1007883a 	mov	r3,r2
    e478:	e0bffd17 	ldw	r2,-12(fp)
    e47c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
    e480:	d0a6eb17 	ldw	r2,-25684(gp)
    e484:	10c00a17 	ldw	r3,40(r2)
    e488:	e0bffc17 	ldw	r2,-16(fp)
    e48c:	1885883a 	add	r2,r3,r2
    e490:	10800484 	addi	r2,r2,18
    e494:	1080002b 	ldhuio	r2,0(r2)
    e498:	10bfffcc 	andi	r2,r2,65535
    e49c:	1007883a 	mov	r3,r2
    e4a0:	e0bffd17 	ldw	r2,-12(fp)
    e4a4:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
    e4a8:	d0a6eb17 	ldw	r2,-25684(gp)
    e4ac:	10c00a17 	ldw	r3,40(r2)
    e4b0:	e0bffc17 	ldw	r2,-16(fp)
    e4b4:	1885883a 	add	r2,r3,r2
    e4b8:	10800584 	addi	r2,r2,22
    e4bc:	1080002b 	ldhuio	r2,0(r2)
    e4c0:	10bfffcc 	andi	r2,r2,65535
    e4c4:	1007883a 	mov	r3,r2
    e4c8:	e0bffd17 	ldw	r2,-12(fp)
    e4cc:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
    e4d0:	d0a6eb17 	ldw	r2,-25684(gp)
    e4d4:	10c00a17 	ldw	r3,40(r2)
    e4d8:	e0bffc17 	ldw	r2,-16(fp)
    e4dc:	1885883a 	add	r2,r3,r2
    e4e0:	10800604 	addi	r2,r2,24
    e4e4:	1080002b 	ldhuio	r2,0(r2)
    e4e8:	10bfffcc 	andi	r2,r2,65535
    e4ec:	1007883a 	mov	r3,r2
    e4f0:	e0bffd17 	ldw	r2,-12(fp)
    e4f4:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
    e4f8:	d0a6eb17 	ldw	r2,-25684(gp)
    e4fc:	10c00a17 	ldw	r3,40(r2)
    e500:	e0bffc17 	ldw	r2,-16(fp)
    e504:	1885883a 	add	r2,r3,r2
    e508:	10800684 	addi	r2,r2,26
    e50c:	1080002b 	ldhuio	r2,0(r2)
    e510:	10bfffcc 	andi	r2,r2,65535
    e514:	1007883a 	mov	r3,r2
    e518:	e0bffd17 	ldw	r2,-12(fp)
    e51c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
    e520:	d0a6eb17 	ldw	r2,-25684(gp)
    e524:	10c00a17 	ldw	r3,40(r2)
    e528:	e0bffc17 	ldw	r2,-16(fp)
    e52c:	1885883a 	add	r2,r3,r2
    e530:	10800704 	addi	r2,r2,28
    e534:	10800037 	ldwio	r2,0(r2)
    e538:	1007883a 	mov	r3,r2
    e53c:	e0bffd17 	ldw	r2,-12(fp)
    e540:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
    e544:	e0bffd17 	ldw	r2,-12(fp)
    e548:	e0fffe17 	ldw	r3,-8(fp)
    e54c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
    e550:	e0bffd17 	ldw	r2,-12(fp)
    e554:	e0ffff17 	ldw	r3,-4(fp)
    e558:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
    e55c:	e0bffc17 	ldw	r2,-16(fp)
    e560:	1007883a 	mov	r3,r2
    e564:	e0bffd17 	ldw	r2,-12(fp)
    e568:	10c00c0d 	sth	r3,48(r2)
		result = true;
    e56c:	00800044 	movi	r2,1
    e570:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
    e574:	e0bffa17 	ldw	r2,-24(fp)
}
    e578:	e037883a 	mov	sp,fp
    e57c:	dfc00117 	ldw	ra,4(sp)
    e580:	df000017 	ldw	fp,0(sp)
    e584:	dec00204 	addi	sp,sp,8
    e588:	f800283a 	ret

0000e58c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    e58c:	defff904 	addi	sp,sp,-28
    e590:	dfc00615 	stw	ra,24(sp)
    e594:	df000515 	stw	fp,20(sp)
    e598:	df000504 	addi	fp,sp,20
    e59c:	e13ffe15 	stw	r4,-8(fp)
    e5a0:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    e5a4:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    e5a8:	e0bffe17 	ldw	r2,-8(fp)
    e5ac:	108007cc 	andi	r2,r2,31
    e5b0:	1000931e 	bne	r2,zero,e800 <Write_File_Record_At_Offset+0x274>
    e5b4:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
    e5b8:	10009126 	beq	r2,zero,e800 <Write_File_Record_At_Offset+0x274>
    e5bc:	d0a6e217 	ldw	r2,-25720(gp)
    e5c0:	10008f26 	beq	r2,zero,e800 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    e5c4:	e03ffc15 	stw	zero,-16(fp)
    e5c8:	00001f06 	br	e648 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
    e5cc:	e0bffc17 	ldw	r2,-16(fp)
    e5d0:	10800044 	addi	r2,r2,1
    e5d4:	e0ffff17 	ldw	r3,-4(fp)
    e5d8:	1885883a 	add	r2,r3,r2
    e5dc:	10800003 	ldbu	r2,0(r2)
    e5e0:	10803fcc 	andi	r2,r2,255
    e5e4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
    e5e8:	e0bffd0f 	ldh	r2,-12(fp)
    e5ec:	1004923a 	slli	r2,r2,8
    e5f0:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
    e5f4:	e0ffff17 	ldw	r3,-4(fp)
    e5f8:	e0bffc17 	ldw	r2,-16(fp)
    e5fc:	1885883a 	add	r2,r3,r2
    e600:	10800003 	ldbu	r2,0(r2)
    e604:	10c03fcc 	andi	r3,r2,255
    e608:	e0bffd0b 	ldhu	r2,-12(fp)
    e60c:	1884b03a 	or	r2,r3,r2
    e610:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
    e614:	e0fffe17 	ldw	r3,-8(fp)
    e618:	e0bffc17 	ldw	r2,-16(fp)
    e61c:	1885883a 	add	r2,r3,r2
    e620:	1007883a 	mov	r3,r2
    e624:	d0a6eb17 	ldw	r2,-25684(gp)
    e628:	10800a17 	ldw	r2,40(r2)
    e62c:	1885883a 	add	r2,r3,r2
    e630:	1007883a 	mov	r3,r2
    e634:	e0bffd0f 	ldh	r2,-12(fp)
    e638:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    e63c:	e0bffc17 	ldw	r2,-16(fp)
    e640:	10800084 	addi	r2,r2,2
    e644:	e0bffc15 	stw	r2,-16(fp)
    e648:	e0bffc17 	ldw	r2,-16(fp)
    e64c:	10800210 	cmplti	r2,r2,8
    e650:	103fde1e 	bne	r2,zero,e5cc <__alt_data_end+0xfffdc5cc>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    e654:	e03ffc15 	stw	zero,-16(fp)
    e658:	00001306 	br	e6a8 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
    e65c:	e0fffe17 	ldw	r3,-8(fp)
    e660:	e0bffc17 	ldw	r2,-16(fp)
    e664:	1885883a 	add	r2,r3,r2
    e668:	1007883a 	mov	r3,r2
    e66c:	d0a6eb17 	ldw	r2,-25684(gp)
    e670:	10800a17 	ldw	r2,40(r2)
    e674:	1885883a 	add	r2,r3,r2
    e678:	10800204 	addi	r2,r2,8
    e67c:	1009883a 	mov	r4,r2
    e680:	e0ffff17 	ldw	r3,-4(fp)
    e684:	e0bffc17 	ldw	r2,-16(fp)
    e688:	1885883a 	add	r2,r3,r2
    e68c:	10800204 	addi	r2,r2,8
    e690:	10800003 	ldbu	r2,0(r2)
    e694:	10803fcc 	andi	r2,r2,255
    e698:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    e69c:	e0bffc17 	ldw	r2,-16(fp)
    e6a0:	10800044 	addi	r2,r2,1
    e6a4:	e0bffc15 	stw	r2,-16(fp)
    e6a8:	e0bffc17 	ldw	r2,-16(fp)
    e6ac:	108000d0 	cmplti	r2,r2,3
    e6b0:	103fea1e 	bne	r2,zero,e65c <__alt_data_end+0xfffdc65c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
    e6b4:	d0a6eb17 	ldw	r2,-25684(gp)
    e6b8:	10c00a17 	ldw	r3,40(r2)
    e6bc:	e0bffe17 	ldw	r2,-8(fp)
    e6c0:	1885883a 	add	r2,r3,r2
    e6c4:	108002c4 	addi	r2,r2,11
    e6c8:	1007883a 	mov	r3,r2
    e6cc:	e0bfff17 	ldw	r2,-4(fp)
    e6d0:	108002c3 	ldbu	r2,11(r2)
    e6d4:	10803fcc 	andi	r2,r2,255
    e6d8:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
    e6dc:	d0a6eb17 	ldw	r2,-25684(gp)
    e6e0:	10c00a17 	ldw	r3,40(r2)
    e6e4:	e0bffe17 	ldw	r2,-8(fp)
    e6e8:	1885883a 	add	r2,r3,r2
    e6ec:	10800384 	addi	r2,r2,14
    e6f0:	1007883a 	mov	r3,r2
    e6f4:	e0bfff17 	ldw	r2,-4(fp)
    e6f8:	1080030b 	ldhu	r2,12(r2)
    e6fc:	10bfffcc 	andi	r2,r2,65535
    e700:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
    e704:	d0a6eb17 	ldw	r2,-25684(gp)
    e708:	10c00a17 	ldw	r3,40(r2)
    e70c:	e0bffe17 	ldw	r2,-8(fp)
    e710:	1885883a 	add	r2,r3,r2
    e714:	10800404 	addi	r2,r2,16
    e718:	1007883a 	mov	r3,r2
    e71c:	e0bfff17 	ldw	r2,-4(fp)
    e720:	1080038b 	ldhu	r2,14(r2)
    e724:	10bfffcc 	andi	r2,r2,65535
    e728:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
    e72c:	d0a6eb17 	ldw	r2,-25684(gp)
    e730:	10c00a17 	ldw	r3,40(r2)
    e734:	e0bffe17 	ldw	r2,-8(fp)
    e738:	1885883a 	add	r2,r3,r2
    e73c:	10800484 	addi	r2,r2,18
    e740:	1007883a 	mov	r3,r2
    e744:	e0bfff17 	ldw	r2,-4(fp)
    e748:	1080040b 	ldhu	r2,16(r2)
    e74c:	10bfffcc 	andi	r2,r2,65535
    e750:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
    e754:	d0a6eb17 	ldw	r2,-25684(gp)
    e758:	10c00a17 	ldw	r3,40(r2)
    e75c:	e0bffe17 	ldw	r2,-8(fp)
    e760:	1885883a 	add	r2,r3,r2
    e764:	10800584 	addi	r2,r2,22
    e768:	1007883a 	mov	r3,r2
    e76c:	e0bfff17 	ldw	r2,-4(fp)
    e770:	1080048b 	ldhu	r2,18(r2)
    e774:	10bfffcc 	andi	r2,r2,65535
    e778:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
    e77c:	d0a6eb17 	ldw	r2,-25684(gp)
    e780:	10c00a17 	ldw	r3,40(r2)
    e784:	e0bffe17 	ldw	r2,-8(fp)
    e788:	1885883a 	add	r2,r3,r2
    e78c:	10800604 	addi	r2,r2,24
    e790:	1007883a 	mov	r3,r2
    e794:	e0bfff17 	ldw	r2,-4(fp)
    e798:	1080050b 	ldhu	r2,20(r2)
    e79c:	10bfffcc 	andi	r2,r2,65535
    e7a0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
    e7a4:	d0a6eb17 	ldw	r2,-25684(gp)
    e7a8:	10c00a17 	ldw	r3,40(r2)
    e7ac:	e0bffe17 	ldw	r2,-8(fp)
    e7b0:	1885883a 	add	r2,r3,r2
    e7b4:	10800684 	addi	r2,r2,26
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	e0bfff17 	ldw	r2,-4(fp)
    e7c0:	1080058b 	ldhu	r2,22(r2)
    e7c4:	10bfffcc 	andi	r2,r2,65535
    e7c8:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
    e7cc:	d0a6eb17 	ldw	r2,-25684(gp)
    e7d0:	10c00a17 	ldw	r3,40(r2)
    e7d4:	e0bffe17 	ldw	r2,-8(fp)
    e7d8:	1885883a 	add	r2,r3,r2
    e7dc:	10800704 	addi	r2,r2,28
    e7e0:	1007883a 	mov	r3,r2
    e7e4:	e0bfff17 	ldw	r2,-4(fp)
    e7e8:	10800617 	ldw	r2,24(r2)
    e7ec:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
    e7f0:	00800044 	movi	r2,1
    e7f4:	d0a6ec15 	stw	r2,-25680(gp)
        result = true;
    e7f8:	00800044 	movi	r2,1
    e7fc:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
    e800:	e0bffb17 	ldw	r2,-20(fp)
}
    e804:	e037883a 	mov	sp,fp
    e808:	dfc00117 	ldw	ra,4(sp)
    e80c:	df000017 	ldw	fp,0(sp)
    e810:	dec00204 	addi	sp,sp,8
    e814:	f800283a 	ret

0000e818 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
    e818:	defff804 	addi	sp,sp,-32
    e81c:	dfc00715 	stw	ra,28(sp)
    e820:	df000615 	stw	fp,24(sp)
    e824:	dc000515 	stw	r16,20(sp)
    e828:	df000604 	addi	fp,sp,24
    e82c:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
    e830:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
    e834:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
    e838:	e17ffe17 	ldw	r5,-8(fp)
    e83c:	0009883a 	mov	r4,zero
    e840:	000df000 	call	df00 <Read_Sector_Data>
    e844:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
    e848:	d0a6eb17 	ldw	r2,-25684(gp)
    e84c:	10800a17 	ldw	r2,40(r2)
    e850:	10807f84 	addi	r2,r2,510
    e854:	1080002b 	ldhuio	r2,0(r2)
    e858:	10bfffcc 	andi	r2,r2,65535
    e85c:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
    e860:	e0bffd0f 	ldh	r2,-12(fp)
    e864:	10ffffcc 	andi	r3,r2,65535
    e868:	00aa9554 	movui	r2,43605
    e86c:	18818a1e 	bne	r3,r2,ee98 <Check_for_DOS_FAT+0x680>
    e870:	e0bffa17 	ldw	r2,-24(fp)
    e874:	10018826 	beq	r2,zero,ee98 <Check_for_DOS_FAT+0x680>
	{
		int num_clusters = 0;
    e878:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
    e87c:	d0a6eb17 	ldw	r2,-25684(gp)
    e880:	10800a17 	ldw	r2,40(r2)
    e884:	10800023 	ldbuio	r2,0(r2)
    e888:	10803fcc 	andi	r2,r2,255
    e88c:	1007883a 	mov	r3,r2
    e890:	00800074 	movhi	r2,1
    e894:	109e4b04 	addi	r2,r2,31020
    e898:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
    e89c:	d0a6eb17 	ldw	r2,-25684(gp)
    e8a0:	10800a17 	ldw	r2,40(r2)
    e8a4:	10800044 	addi	r2,r2,1
    e8a8:	10800023 	ldbuio	r2,0(r2)
    e8ac:	10803fcc 	andi	r2,r2,255
    e8b0:	1007883a 	mov	r3,r2
    e8b4:	00800074 	movhi	r2,1
    e8b8:	109e4b04 	addi	r2,r2,31020
    e8bc:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
    e8c0:	d0a6eb17 	ldw	r2,-25684(gp)
    e8c4:	10800a17 	ldw	r2,40(r2)
    e8c8:	10800084 	addi	r2,r2,2
    e8cc:	10800023 	ldbuio	r2,0(r2)
    e8d0:	10803fcc 	andi	r2,r2,255
    e8d4:	1007883a 	mov	r3,r2
    e8d8:	00800074 	movhi	r2,1
    e8dc:	109e4b04 	addi	r2,r2,31020
    e8e0:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
    e8e4:	e03ffb15 	stw	zero,-20(fp)
    e8e8:	00001106 	br	e930 <Check_for_DOS_FAT+0x118>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
    e8ec:	d0a6eb17 	ldw	r2,-25684(gp)
    e8f0:	10c00a17 	ldw	r3,40(r2)
    e8f4:	e0bffb17 	ldw	r2,-20(fp)
    e8f8:	1885883a 	add	r2,r3,r2
    e8fc:	108000c4 	addi	r2,r2,3
    e900:	10800023 	ldbuio	r2,0(r2)
    e904:	10803fcc 	andi	r2,r2,255
    e908:	1009883a 	mov	r4,r2
    e90c:	00800074 	movhi	r2,1
    e910:	109e4b04 	addi	r2,r2,31020
    e914:	e0fffb17 	ldw	r3,-20(fp)
    e918:	10c5883a 	add	r2,r2,r3
    e91c:	108000c4 	addi	r2,r2,3
    e920:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
    e924:	e0bffb17 	ldw	r2,-20(fp)
    e928:	10800044 	addi	r2,r2,1
    e92c:	e0bffb15 	stw	r2,-20(fp)
    e930:	e0bffb17 	ldw	r2,-20(fp)
    e934:	10800210 	cmplti	r2,r2,8
    e938:	103fec1e 	bne	r2,zero,e8ec <__alt_data_end+0xfffdc8ec>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
    e93c:	d0a6eb17 	ldw	r2,-25684(gp)
    e940:	10800a17 	ldw	r2,40(r2)
    e944:	10800304 	addi	r2,r2,12
    e948:	10800023 	ldbuio	r2,0(r2)
    e94c:	10803fcc 	andi	r2,r2,255
    e950:	1004923a 	slli	r2,r2,8
    e954:	1007883a 	mov	r3,r2
    e958:	d0a6eb17 	ldw	r2,-25684(gp)
    e95c:	10800a17 	ldw	r2,40(r2)
    e960:	108002c4 	addi	r2,r2,11
    e964:	10800023 	ldbuio	r2,0(r2)
    e968:	10803fcc 	andi	r2,r2,255
    e96c:	10803fcc 	andi	r2,r2,255
    e970:	1080201c 	xori	r2,r2,128
    e974:	10bfe004 	addi	r2,r2,-128
    e978:	1884b03a 	or	r2,r3,r2
    e97c:	1007883a 	mov	r3,r2
    e980:	00800074 	movhi	r2,1
    e984:	109e4b04 	addi	r2,r2,31020
    e988:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
    e98c:	d0a6eb17 	ldw	r2,-25684(gp)
    e990:	10800a17 	ldw	r2,40(r2)
    e994:	10800344 	addi	r2,r2,13
    e998:	10800023 	ldbuio	r2,0(r2)
    e99c:	10803fcc 	andi	r2,r2,255
    e9a0:	1007883a 	mov	r3,r2
    e9a4:	00800074 	movhi	r2,1
    e9a8:	109e4b04 	addi	r2,r2,31020
    e9ac:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
    e9b0:	d0a6eb17 	ldw	r2,-25684(gp)
    e9b4:	10800a17 	ldw	r2,40(r2)
    e9b8:	10800384 	addi	r2,r2,14
    e9bc:	1080002b 	ldhuio	r2,0(r2)
    e9c0:	10bfffcc 	andi	r2,r2,65535
    e9c4:	1007883a 	mov	r3,r2
    e9c8:	00800074 	movhi	r2,1
    e9cc:	109e4b04 	addi	r2,r2,31020
    e9d0:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
    e9d4:	d0a6eb17 	ldw	r2,-25684(gp)
    e9d8:	10800a17 	ldw	r2,40(r2)
    e9dc:	10800404 	addi	r2,r2,16
    e9e0:	10800023 	ldbuio	r2,0(r2)
    e9e4:	10803fcc 	andi	r2,r2,255
    e9e8:	1007883a 	mov	r3,r2
    e9ec:	00800074 	movhi	r2,1
    e9f0:	109e4b04 	addi	r2,r2,31020
    e9f4:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
    e9f8:	d0a6eb17 	ldw	r2,-25684(gp)
    e9fc:	10800a17 	ldw	r2,40(r2)
    ea00:	10800484 	addi	r2,r2,18
    ea04:	10800023 	ldbuio	r2,0(r2)
    ea08:	10803fcc 	andi	r2,r2,255
    ea0c:	1004923a 	slli	r2,r2,8
    ea10:	1007883a 	mov	r3,r2
    ea14:	d0a6eb17 	ldw	r2,-25684(gp)
    ea18:	10800a17 	ldw	r2,40(r2)
    ea1c:	10800444 	addi	r2,r2,17
    ea20:	10800023 	ldbuio	r2,0(r2)
    ea24:	10803fcc 	andi	r2,r2,255
    ea28:	10803fcc 	andi	r2,r2,255
    ea2c:	1884b03a 	or	r2,r3,r2
    ea30:	1007883a 	mov	r3,r2
    ea34:	00800074 	movhi	r2,1
    ea38:	109e4b04 	addi	r2,r2,31020
    ea3c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
    ea40:	d0a6eb17 	ldw	r2,-25684(gp)
    ea44:	10800a17 	ldw	r2,40(r2)
    ea48:	10800504 	addi	r2,r2,20
    ea4c:	10800023 	ldbuio	r2,0(r2)
    ea50:	10803fcc 	andi	r2,r2,255
    ea54:	1004923a 	slli	r2,r2,8
    ea58:	1007883a 	mov	r3,r2
    ea5c:	d0a6eb17 	ldw	r2,-25684(gp)
    ea60:	10800a17 	ldw	r2,40(r2)
    ea64:	108004c4 	addi	r2,r2,19
    ea68:	10800023 	ldbuio	r2,0(r2)
    ea6c:	10803fcc 	andi	r2,r2,255
    ea70:	10803fcc 	andi	r2,r2,255
    ea74:	1884b03a 	or	r2,r3,r2
    ea78:	1007883a 	mov	r3,r2
    ea7c:	00800074 	movhi	r2,1
    ea80:	109e4b04 	addi	r2,r2,31020
    ea84:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
    ea88:	d0a6eb17 	ldw	r2,-25684(gp)
    ea8c:	10800a17 	ldw	r2,40(r2)
    ea90:	10800544 	addi	r2,r2,21
    ea94:	10800023 	ldbuio	r2,0(r2)
    ea98:	10803fcc 	andi	r2,r2,255
    ea9c:	1007883a 	mov	r3,r2
    eaa0:	00800074 	movhi	r2,1
    eaa4:	109e4b04 	addi	r2,r2,31020
    eaa8:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
    eaac:	d0a6eb17 	ldw	r2,-25684(gp)
    eab0:	10800a17 	ldw	r2,40(r2)
    eab4:	10800584 	addi	r2,r2,22
    eab8:	1080002b 	ldhuio	r2,0(r2)
    eabc:	10bfffcc 	andi	r2,r2,65535
    eac0:	1007883a 	mov	r3,r2
    eac4:	00800074 	movhi	r2,1
    eac8:	109e4b04 	addi	r2,r2,31020
    eacc:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
    ead0:	d0a6eb17 	ldw	r2,-25684(gp)
    ead4:	10800a17 	ldw	r2,40(r2)
    ead8:	10800604 	addi	r2,r2,24
    eadc:	1080002b 	ldhuio	r2,0(r2)
    eae0:	10bfffcc 	andi	r2,r2,65535
    eae4:	1007883a 	mov	r3,r2
    eae8:	00800074 	movhi	r2,1
    eaec:	109e4b04 	addi	r2,r2,31020
    eaf0:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
    eaf4:	d0a6eb17 	ldw	r2,-25684(gp)
    eaf8:	10800a17 	ldw	r2,40(r2)
    eafc:	10800684 	addi	r2,r2,26
    eb00:	1080002b 	ldhuio	r2,0(r2)
    eb04:	10bfffcc 	andi	r2,r2,65535
    eb08:	1007883a 	mov	r3,r2
    eb0c:	00800074 	movhi	r2,1
    eb10:	109e4b04 	addi	r2,r2,31020
    eb14:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
    eb18:	d0a6eb17 	ldw	r2,-25684(gp)
    eb1c:	10800a17 	ldw	r2,40(r2)
    eb20:	10800704 	addi	r2,r2,28
    eb24:	10800037 	ldwio	r2,0(r2)
    eb28:	1007883a 	mov	r3,r2
    eb2c:	00800074 	movhi	r2,1
    eb30:	109e4b04 	addi	r2,r2,31020
    eb34:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
    eb38:	d0a6eb17 	ldw	r2,-25684(gp)
    eb3c:	10800a17 	ldw	r2,40(r2)
    eb40:	10800804 	addi	r2,r2,32
    eb44:	10800037 	ldwio	r2,0(r2)
    eb48:	1007883a 	mov	r3,r2
    eb4c:	00800074 	movhi	r2,1
    eb50:	109e4b04 	addi	r2,r2,31020
    eb54:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
    eb58:	d0a6eb17 	ldw	r2,-25684(gp)
    eb5c:	10800a17 	ldw	r2,40(r2)
    eb60:	10800904 	addi	r2,r2,36
    eb64:	10800023 	ldbuio	r2,0(r2)
    eb68:	10803fcc 	andi	r2,r2,255
    eb6c:	1007883a 	mov	r3,r2
    eb70:	00800074 	movhi	r2,1
    eb74:	109e4b04 	addi	r2,r2,31020
    eb78:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
    eb7c:	d0a6eb17 	ldw	r2,-25684(gp)
    eb80:	10800a17 	ldw	r2,40(r2)
    eb84:	10800944 	addi	r2,r2,37
    eb88:	10800023 	ldbuio	r2,0(r2)
    eb8c:	10803fcc 	andi	r2,r2,255
    eb90:	1007883a 	mov	r3,r2
    eb94:	00800074 	movhi	r2,1
    eb98:	109e4b04 	addi	r2,r2,31020
    eb9c:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
    eba0:	d0a6eb17 	ldw	r2,-25684(gp)
    eba4:	10800a17 	ldw	r2,40(r2)
    eba8:	10800984 	addi	r2,r2,38
    ebac:	10800023 	ldbuio	r2,0(r2)
    ebb0:	10803fcc 	andi	r2,r2,255
    ebb4:	1007883a 	mov	r3,r2
    ebb8:	00800074 	movhi	r2,1
    ebbc:	109e4b04 	addi	r2,r2,31020
    ebc0:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
    ebc4:	00800074 	movhi	r2,1
    ebc8:	109e4b04 	addi	r2,r2,31020
    ebcc:	1080040b 	ldhu	r2,16(r2)
    ebd0:	10ffffcc 	andi	r3,r2,65535
    ebd4:	00800074 	movhi	r2,1
    ebd8:	109e4b04 	addi	r2,r2,31020
    ebdc:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
    ebe0:	00800074 	movhi	r2,1
    ebe4:	109e4b04 	addi	r2,r2,31020
    ebe8:	10c01117 	ldw	r3,68(r2)
    ebec:	00800074 	movhi	r2,1
    ebf0:	109e4b04 	addi	r2,r2,31020
    ebf4:	1080068b 	ldhu	r2,26(r2)
    ebf8:	10bfffcc 	andi	r2,r2,65535
    ebfc:	1887883a 	add	r3,r3,r2
    ec00:	00800074 	movhi	r2,1
    ec04:	109e4b04 	addi	r2,r2,31020
    ec08:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
    ec0c:	00800074 	movhi	r2,1
    ec10:	109e4b04 	addi	r2,r2,31020
    ec14:	10c01217 	ldw	r3,72(r2)
    ec18:	00800074 	movhi	r2,1
    ec1c:	109e4b04 	addi	r2,r2,31020
    ec20:	1080068b 	ldhu	r2,26(r2)
    ec24:	10bfffcc 	andi	r2,r2,65535
    ec28:	1887883a 	add	r3,r3,r2
    ec2c:	00800074 	movhi	r2,1
    ec30:	109e4b04 	addi	r2,r2,31020
    ec34:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
    ec38:	00800074 	movhi	r2,1
    ec3c:	109e4b04 	addi	r2,r2,31020
    ec40:	14001317 	ldw	r16,76(r2)
    ec44:	00800074 	movhi	r2,1
    ec48:	109e4b04 	addi	r2,r2,31020
    ec4c:	1080050b 	ldhu	r2,20(r2)
    ec50:	10bfffcc 	andi	r2,r2,65535
    ec54:	1006917a 	slli	r3,r2,5
    ec58:	00800074 	movhi	r2,1
    ec5c:	109e4b04 	addi	r2,r2,31020
    ec60:	1080030b 	ldhu	r2,12(r2)
    ec64:	10bfffcc 	andi	r2,r2,65535
    ec68:	100b883a 	mov	r5,r2
    ec6c:	1809883a 	mov	r4,r3
    ec70:	000a92c0 	call	a92c <__divsi3>
    ec74:	8087883a 	add	r3,r16,r2
    ec78:	00800074 	movhi	r2,1
    ec7c:	109e4b04 	addi	r2,r2,31020
    ec80:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
    ec84:	00800074 	movhi	r2,1
    ec88:	109e4b04 	addi	r2,r2,31020
    ec8c:	1080058b 	ldhu	r2,22(r2)
    ec90:	10bfffcc 	andi	r2,r2,65535
    ec94:	10000d26 	beq	r2,zero,eccc <Check_for_DOS_FAT+0x4b4>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
    ec98:	00800074 	movhi	r2,1
    ec9c:	109e4b04 	addi	r2,r2,31020
    eca0:	1080058b 	ldhu	r2,22(r2)
    eca4:	10ffffcc 	andi	r3,r2,65535
    eca8:	00800074 	movhi	r2,1
    ecac:	109e4b04 	addi	r2,r2,31020
    ecb0:	10800383 	ldbu	r2,14(r2)
    ecb4:	10803fcc 	andi	r2,r2,255
    ecb8:	100b883a 	mov	r5,r2
    ecbc:	1809883a 	mov	r4,r3
    ecc0:	000a92c0 	call	a92c <__divsi3>
    ecc4:	e0bffc15 	stw	r2,-16(fp)
    ecc8:	00000b06 	br	ecf8 <Check_for_DOS_FAT+0x4e0>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
    eccc:	00800074 	movhi	r2,1
    ecd0:	109e4b04 	addi	r2,r2,31020
    ecd4:	10c00917 	ldw	r3,36(r2)
    ecd8:	00800074 	movhi	r2,1
    ecdc:	109e4b04 	addi	r2,r2,31020
    ece0:	10800383 	ldbu	r2,14(r2)
    ece4:	10803fcc 	andi	r2,r2,255
    ece8:	100b883a 	mov	r5,r2
    ecec:	1809883a 	mov	r4,r3
    ecf0:	000aa240 	call	aa24 <__udivsi3>
    ecf4:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
    ecf8:	e0bffc17 	ldw	r2,-16(fp)
    ecfc:	1083fdc8 	cmpgei	r2,r2,4087
    ed00:	1000051e 	bne	r2,zero,ed18 <Check_for_DOS_FAT+0x500>
		{
			boot_sector_data.bits_for_cluster_index = 12;
    ed04:	00800074 	movhi	r2,1
    ed08:	109e4b04 	addi	r2,r2,31020
    ed0c:	00c00304 	movi	r3,12
    ed10:	10c01085 	stb	r3,66(r2)
    ed14:	00000c06 	br	ed48 <Check_for_DOS_FAT+0x530>
		}
		else if (num_clusters <= 65517)
    ed18:	e0bffc17 	ldw	r2,-16(fp)
    ed1c:	00fffb54 	movui	r3,65517
    ed20:	18800516 	blt	r3,r2,ed38 <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.bits_for_cluster_index = 16;
    ed24:	00800074 	movhi	r2,1
    ed28:	109e4b04 	addi	r2,r2,31020
    ed2c:	00c00404 	movi	r3,16
    ed30:	10c01085 	stb	r3,66(r2)
    ed34:	00000406 	br	ed48 <Check_for_DOS_FAT+0x530>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
    ed38:	00800074 	movhi	r2,1
    ed3c:	109e4b04 	addi	r2,r2,31020
    ed40:	00c00804 	movi	r3,32
    ed44:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
    ed48:	e03ffb15 	stw	zero,-20(fp)
    ed4c:	00001106 	br	ed94 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
    ed50:	d0a6eb17 	ldw	r2,-25684(gp)
    ed54:	10c00a17 	ldw	r3,40(r2)
    ed58:	e0bffb17 	ldw	r2,-20(fp)
    ed5c:	1885883a 	add	r2,r3,r2
    ed60:	108009c4 	addi	r2,r2,39
    ed64:	10800023 	ldbuio	r2,0(r2)
    ed68:	10803fcc 	andi	r2,r2,255
    ed6c:	1009883a 	mov	r4,r2
    ed70:	00800074 	movhi	r2,1
    ed74:	109e4b04 	addi	r2,r2,31020
    ed78:	e0fffb17 	ldw	r3,-20(fp)
    ed7c:	10c5883a 	add	r2,r2,r3
    ed80:	10800ac4 	addi	r2,r2,43
    ed84:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
    ed88:	e0bffb17 	ldw	r2,-20(fp)
    ed8c:	10800044 	addi	r2,r2,1
    ed90:	e0bffb15 	stw	r2,-20(fp)
    ed94:	e0bffb17 	ldw	r2,-20(fp)
    ed98:	10800110 	cmplti	r2,r2,4
    ed9c:	103fec1e 	bne	r2,zero,ed50 <__alt_data_end+0xfffdcd50>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    eda0:	e03ffb15 	stw	zero,-20(fp)
    eda4:	00001106 	br	edec <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
    eda8:	d0a6eb17 	ldw	r2,-25684(gp)
    edac:	10c00a17 	ldw	r3,40(r2)
    edb0:	e0bffb17 	ldw	r2,-20(fp)
    edb4:	1885883a 	add	r2,r3,r2
    edb8:	10800ac4 	addi	r2,r2,43
    edbc:	10800023 	ldbuio	r2,0(r2)
    edc0:	10803fcc 	andi	r2,r2,255
    edc4:	1009883a 	mov	r4,r2
    edc8:	00800074 	movhi	r2,1
    edcc:	109e4b04 	addi	r2,r2,31020
    edd0:	e0fffb17 	ldw	r3,-20(fp)
    edd4:	10c5883a 	add	r2,r2,r3
    edd8:	10800bc4 	addi	r2,r2,47
    eddc:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    ede0:	e0bffb17 	ldw	r2,-20(fp)
    ede4:	10800044 	addi	r2,r2,1
    ede8:	e0bffb15 	stw	r2,-20(fp)
    edec:	e0bffb17 	ldw	r2,-20(fp)
    edf0:	108002d0 	cmplti	r2,r2,11
    edf4:	103fec1e 	bne	r2,zero,eda8 <__alt_data_end+0xfffdcda8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    edf8:	e03ffb15 	stw	zero,-20(fp)
    edfc:	00001106 	br	ee44 <Check_for_DOS_FAT+0x62c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
    ee00:	d0a6eb17 	ldw	r2,-25684(gp)
    ee04:	10c00a17 	ldw	r3,40(r2)
    ee08:	e0bffb17 	ldw	r2,-20(fp)
    ee0c:	1885883a 	add	r2,r3,r2
    ee10:	10800d84 	addi	r2,r2,54
    ee14:	10800023 	ldbuio	r2,0(r2)
    ee18:	10803fcc 	andi	r2,r2,255
    ee1c:	1009883a 	mov	r4,r2
    ee20:	00800074 	movhi	r2,1
    ee24:	109e4b04 	addi	r2,r2,31020
    ee28:	e0fffb17 	ldw	r3,-20(fp)
    ee2c:	10c5883a 	add	r2,r2,r3
    ee30:	10800e84 	addi	r2,r2,58
    ee34:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    ee38:	e0bffb17 	ldw	r2,-20(fp)
    ee3c:	10800044 	addi	r2,r2,1
    ee40:	e0bffb15 	stw	r2,-20(fp)
    ee44:	e0bffb17 	ldw	r2,-20(fp)
    ee48:	10800210 	cmplti	r2,r2,8
    ee4c:	103fec1e 	bne	r2,zero,ee00 <__alt_data_end+0xfffdce00>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    ee50:	e03ffb15 	stw	zero,-20(fp)
    ee54:	00000a06 	br	ee80 <Check_for_DOS_FAT+0x668>
		{
			active_files[counter].in_use = false;
    ee58:	00800074 	movhi	r2,1
    ee5c:	109e6004 	addi	r2,r2,31104
    ee60:	e0fffb17 	ldw	r3,-20(fp)
    ee64:	180691ba 	slli	r3,r3,6
    ee68:	10c5883a 	add	r2,r2,r3
    ee6c:	10800f04 	addi	r2,r2,60
    ee70:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    ee74:	e0bffb17 	ldw	r2,-20(fp)
    ee78:	10800044 	addi	r2,r2,1
    ee7c:	e0bffb15 	stw	r2,-20(fp)
    ee80:	e0bffb17 	ldw	r2,-20(fp)
    ee84:	10800510 	cmplti	r2,r2,20
    ee88:	103ff31e 	bne	r2,zero,ee58 <__alt_data_end+0xfffdce58>
		{
			active_files[counter].in_use = false;
		}
		result = true;
    ee8c:	00800044 	movi	r2,1
    ee90:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
    ee94:	00000106 	br	ee9c <Check_for_DOS_FAT+0x684>
		}
		result = true;
	}
    else
    {
        result = false;
    ee98:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
    ee9c:	e0bffa17 	ldw	r2,-24(fp)
}
    eea0:	e6ffff04 	addi	sp,fp,-4
    eea4:	dfc00217 	ldw	ra,8(sp)
    eea8:	df000117 	ldw	fp,4(sp)
    eeac:	dc000017 	ldw	r16,0(sp)
    eeb0:	dec00304 	addi	sp,sp,12
    eeb4:	f800283a 	ret

0000eeb8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
    eeb8:	defffc04 	addi	sp,sp,-16
    eebc:	dfc00315 	stw	ra,12(sp)
    eec0:	df000215 	stw	fp,8(sp)
    eec4:	df000204 	addi	fp,sp,8
	bool result = false;
    eec8:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
    eecc:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
    eed0:	10002e26 	beq	r2,zero,ef8c <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
    eed4:	d0a6e517 	ldw	r2,-25708(gp)
    eed8:	1080000b 	ldhu	r2,0(r2)
    eedc:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
    eee0:	d026e915 	stw	zero,-25692(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
    eee4:	d026ea15 	stw	zero,-25688(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
    eee8:	e0bfff0f 	ldh	r2,-4(fp)
    eeec:	10002716 	blt	r2,zero,ef8c <Look_for_FAT16+0xd4>
    eef0:	e0bfff0b 	ldhu	r2,-4(fp)
    eef4:	10bfffcc 	andi	r2,r2,65535
    eef8:	1083000c 	andi	r2,r2,3072
    eefc:	10830020 	cmpeqi	r2,r2,3072
    ef00:	1000221e 	bne	r2,zero,ef8c <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
    ef04:	e0bfff0b 	ldhu	r2,-4(fp)
    ef08:	10bfffcc 	andi	r2,r2,65535
    ef0c:	1083000c 	andi	r2,r2,3072
    ef10:	10810018 	cmpnei	r2,r2,1024
    ef14:	1000031e 	bne	r2,zero,ef24 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
    ef18:	0009883a 	mov	r4,zero
    ef1c:	000e8180 	call	e818 <Check_for_DOS_FAT>
    ef20:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
    ef24:	e0bfff0b 	ldhu	r2,-4(fp)
    ef28:	10bfffcc 	andi	r2,r2,65535
    ef2c:	1083000c 	andi	r2,r2,3072
    ef30:	1000061e 	bne	r2,zero,ef4c <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
    ef34:	000e16c0 	call	e16c <Check_for_Master_Boot_Record>
    ef38:	10000426 	beq	r2,zero,ef4c <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
    ef3c:	d0a6e917 	ldw	r2,-25692(gp)
    ef40:	1009883a 	mov	r4,r2
    ef44:	000e8180 	call	e818 <Check_for_DOS_FAT>
    ef48:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
    ef4c:	e0bffe17 	ldw	r2,-8(fp)
    ef50:	10800058 	cmpnei	r2,r2,1
    ef54:	10000d1e 	bne	r2,zero,ef8c <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
    ef58:	00800074 	movhi	r2,1
    ef5c:	109e4b04 	addi	r2,r2,31020
    ef60:	10801083 	ldbu	r2,66(r2)
    ef64:	10803fcc 	andi	r2,r2,255
    ef68:	10800420 	cmpeqi	r2,r2,16
    ef6c:	1000021e 	bne	r2,zero,ef78 <Look_for_FAT16+0xc0>
				{
					result = false;
    ef70:	e03ffe15 	stw	zero,-8(fp)
    ef74:	00000506 	br	ef8c <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
    ef78:	00800074 	movhi	r2,1
    ef7c:	109e4b04 	addi	r2,r2,31020
    ef80:	1080058b 	ldhu	r2,22(r2)
    ef84:	10bfffcc 	andi	r2,r2,65535
    ef88:	d0a6ea15 	stw	r2,-25688(gp)
				}
			}
		}
	}
	return result;
    ef8c:	e0bffe17 	ldw	r2,-8(fp)
}
    ef90:	e037883a 	mov	sp,fp
    ef94:	dfc00117 	ldw	ra,4(sp)
    ef98:	df000017 	ldw	fp,0(sp)
    ef9c:	dec00204 	addi	sp,sp,8
    efa0:	f800283a 	ret

0000efa4 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    efa4:	defffb04 	addi	sp,sp,-20
    efa8:	dfc00415 	stw	ra,16(sp)
    efac:	df000315 	stw	fp,12(sp)
    efb0:	df000304 	addi	fp,sp,12
    efb4:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
    efb8:	e13fff17 	ldw	r4,-4(fp)
    efbc:	00005ac0 	call	5ac <strlen>
    efc0:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
    efc4:	e03ffd15 	stw	zero,-12(fp)
    efc8:	00001e06 	br	f044 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
    efcc:	e0bffd17 	ldw	r2,-12(fp)
    efd0:	e0ffff17 	ldw	r3,-4(fp)
    efd4:	1885883a 	add	r2,r3,r2
    efd8:	10800003 	ldbu	r2,0(r2)
    efdc:	10803fcc 	andi	r2,r2,255
    efe0:	1080201c 	xori	r2,r2,128
    efe4:	10bfe004 	addi	r2,r2,-128
    efe8:	10801850 	cmplti	r2,r2,97
    efec:	1000121e 	bne	r2,zero,f038 <filename_to_upper_case+0x94>
    eff0:	e0bffd17 	ldw	r2,-12(fp)
    eff4:	e0ffff17 	ldw	r3,-4(fp)
    eff8:	1885883a 	add	r2,r3,r2
    effc:	10800003 	ldbu	r2,0(r2)
    f000:	10803fcc 	andi	r2,r2,255
    f004:	1080201c 	xori	r2,r2,128
    f008:	10bfe004 	addi	r2,r2,-128
    f00c:	10801ec8 	cmpgei	r2,r2,123
    f010:	1000091e 	bne	r2,zero,f038 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
    f014:	e0bffd17 	ldw	r2,-12(fp)
    f018:	e0ffff17 	ldw	r3,-4(fp)
    f01c:	1885883a 	add	r2,r3,r2
    f020:	e0fffd17 	ldw	r3,-12(fp)
    f024:	e13fff17 	ldw	r4,-4(fp)
    f028:	20c7883a 	add	r3,r4,r3
    f02c:	18c00003 	ldbu	r3,0(r3)
    f030:	18fff804 	addi	r3,r3,-32
    f034:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    f038:	e0bffd17 	ldw	r2,-12(fp)
    f03c:	10800044 	addi	r2,r2,1
    f040:	e0bffd15 	stw	r2,-12(fp)
    f044:	e0fffd17 	ldw	r3,-12(fp)
    f048:	e0bffe17 	ldw	r2,-8(fp)
    f04c:	18bfdf16 	blt	r3,r2,efcc <__alt_data_end+0xfffdcfcc>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
    f050:	0001883a 	nop
    f054:	e037883a 	mov	sp,fp
    f058:	dfc00117 	ldw	ra,4(sp)
    f05c:	df000017 	ldw	fp,0(sp)
    f060:	dec00204 	addi	sp,sp,8
    f064:	f800283a 	ret

0000f068 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
    f068:	defff804 	addi	sp,sp,-32
    f06c:	dfc00715 	stw	ra,28(sp)
    f070:	df000615 	stw	fp,24(sp)
    f074:	df000604 	addi	fp,sp,24
    f078:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
    f07c:	e13fff17 	ldw	r4,-4(fp)
    f080:	00005ac0 	call	5ac <strlen>
    f084:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
    f088:	00bfffc4 	movi	r2,-1
    f08c:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
    f090:	00bfffc4 	movi	r2,-1
    f094:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
    f098:	00800044 	movi	r2,1
    f09c:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
    f0a0:	e03ffa15 	stw	zero,-24(fp)
    f0a4:	00006d06 	br	f25c <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
    f0a8:	e0bffa17 	ldw	r2,-24(fp)
    f0ac:	e0ffff17 	ldw	r3,-4(fp)
    f0b0:	1885883a 	add	r2,r3,r2
    f0b4:	10800003 	ldbu	r2,0(r2)
    f0b8:	10803fcc 	andi	r2,r2,255
    f0bc:	1080201c 	xori	r2,r2,128
    f0c0:	10bfe004 	addi	r2,r2,-128
    f0c4:	10800820 	cmpeqi	r2,r2,32
    f0c8:	10003e1e 	bne	r2,zero,f1c4 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    f0cc:	e0bffa17 	ldw	r2,-24(fp)
    f0d0:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
    f0d4:	e0bffb17 	ldw	r2,-20(fp)
    f0d8:	1880121e 	bne	r3,r2,f124 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    f0dc:	e0bffa17 	ldw	r2,-24(fp)
    f0e0:	e0ffff17 	ldw	r3,-4(fp)
    f0e4:	1885883a 	add	r2,r3,r2
    f0e8:	10800003 	ldbu	r2,0(r2)
    f0ec:	10803fcc 	andi	r2,r2,255
    f0f0:	1080201c 	xori	r2,r2,128
    f0f4:	10bfe004 	addi	r2,r2,-128
    f0f8:	10801720 	cmpeqi	r2,r2,92
    f0fc:	1000311e 	bne	r2,zero,f1c4 <check_file_name_for_FAT16_compliance+0x15c>
    f100:	e0bffa17 	ldw	r2,-24(fp)
    f104:	e0ffff17 	ldw	r3,-4(fp)
    f108:	1885883a 	add	r2,r3,r2
    f10c:	10800003 	ldbu	r2,0(r2)
    f110:	10803fcc 	andi	r2,r2,255
    f114:	1080201c 	xori	r2,r2,128
    f118:	10bfe004 	addi	r2,r2,-128
    f11c:	10800be0 	cmpeqi	r2,r2,47
    f120:	1000281e 	bne	r2,zero,f1c4 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
    f124:	e0fffa17 	ldw	r3,-24(fp)
    f128:	e0bffc17 	ldw	r2,-16(fp)
    f12c:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    f130:	10800258 	cmpnei	r2,r2,9
    f134:	1000091e 	bne	r2,zero,f15c <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
    f138:	e0bffa17 	ldw	r2,-24(fp)
    f13c:	e0ffff17 	ldw	r3,-4(fp)
    f140:	1885883a 	add	r2,r3,r2
    f144:	10800003 	ldbu	r2,0(r2)
    f148:	10803fcc 	andi	r2,r2,255
    f14c:	1080201c 	xori	r2,r2,128
    f150:	10bfe004 	addi	r2,r2,-128
    f154:	10800b98 	cmpnei	r2,r2,46
    f158:	10001a1e 	bne	r2,zero,f1c4 <check_file_name_for_FAT16_compliance+0x15c>
    f15c:	e0fffb17 	ldw	r3,-20(fp)
    f160:	e0bffc17 	ldw	r2,-16(fp)
    f164:	18801926 	beq	r3,r2,f1cc <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
    f168:	e0fffa17 	ldw	r3,-24(fp)
    f16c:	e0bffc17 	ldw	r2,-16(fp)
    f170:	1885c83a 	sub	r2,r3,r2
    f174:	10800110 	cmplti	r2,r2,4
    f178:	1000141e 	bne	r2,zero,f1cc <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
    f17c:	e0bffa17 	ldw	r2,-24(fp)
    f180:	e0ffff17 	ldw	r3,-4(fp)
    f184:	1885883a 	add	r2,r3,r2
    f188:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
    f18c:	10803fcc 	andi	r2,r2,255
    f190:	1080201c 	xori	r2,r2,128
    f194:	10bfe004 	addi	r2,r2,-128
    f198:	10801720 	cmpeqi	r2,r2,92
    f19c:	10000b1e 	bne	r2,zero,f1cc <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
    f1a0:	e0bffa17 	ldw	r2,-24(fp)
    f1a4:	e0ffff17 	ldw	r3,-4(fp)
    f1a8:	1885883a 	add	r2,r3,r2
    f1ac:	10800003 	ldbu	r2,0(r2)
    f1b0:	10803fcc 	andi	r2,r2,255
    f1b4:	1080201c 	xori	r2,r2,128
    f1b8:	10bfe004 	addi	r2,r2,-128
    f1bc:	10800be0 	cmpeqi	r2,r2,47
    f1c0:	1000021e 	bne	r2,zero,f1cc <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
    f1c4:	e03ffd15 	stw	zero,-12(fp)
            break;
    f1c8:	00002706 	br	f268 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
    f1cc:	e0bffa17 	ldw	r2,-24(fp)
    f1d0:	e0ffff17 	ldw	r3,-4(fp)
    f1d4:	1885883a 	add	r2,r3,r2
    f1d8:	10800003 	ldbu	r2,0(r2)
    f1dc:	10803fcc 	andi	r2,r2,255
    f1e0:	1080201c 	xori	r2,r2,128
    f1e4:	10bfe004 	addi	r2,r2,-128
    f1e8:	10801720 	cmpeqi	r2,r2,92
    f1ec:	1000091e 	bne	r2,zero,f214 <check_file_name_for_FAT16_compliance+0x1ac>
    f1f0:	e0bffa17 	ldw	r2,-24(fp)
    f1f4:	e0ffff17 	ldw	r3,-4(fp)
    f1f8:	1885883a 	add	r2,r3,r2
    f1fc:	10800003 	ldbu	r2,0(r2)
    f200:	10803fcc 	andi	r2,r2,255
    f204:	1080201c 	xori	r2,r2,128
    f208:	10bfe004 	addi	r2,r2,-128
    f20c:	10800bd8 	cmpnei	r2,r2,47
    f210:	1000041e 	bne	r2,zero,f224 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
    f214:	e0bffa17 	ldw	r2,-24(fp)
    f218:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
    f21c:	e0bffa17 	ldw	r2,-24(fp)
    f220:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
    f224:	e0bffa17 	ldw	r2,-24(fp)
    f228:	e0ffff17 	ldw	r3,-4(fp)
    f22c:	1885883a 	add	r2,r3,r2
    f230:	10800003 	ldbu	r2,0(r2)
    f234:	10803fcc 	andi	r2,r2,255
    f238:	1080201c 	xori	r2,r2,128
    f23c:	10bfe004 	addi	r2,r2,-128
    f240:	10800b98 	cmpnei	r2,r2,46
    f244:	1000021e 	bne	r2,zero,f250 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
    f248:	e0bffa17 	ldw	r2,-24(fp)
    f24c:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    f250:	e0bffa17 	ldw	r2,-24(fp)
    f254:	10800044 	addi	r2,r2,1
    f258:	e0bffa15 	stw	r2,-24(fp)
    f25c:	e0fffa17 	ldw	r3,-24(fp)
    f260:	e0bffe17 	ldw	r2,-8(fp)
    f264:	18bf9016 	blt	r3,r2,f0a8 <__alt_data_end+0xfffdd0a8>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
    f268:	e0bffe17 	ldw	r2,-8(fp)
    f26c:	10bfffc4 	addi	r2,r2,-1
    f270:	e0ffff17 	ldw	r3,-4(fp)
    f274:	1885883a 	add	r2,r3,r2
    f278:	10800003 	ldbu	r2,0(r2)
    f27c:	10803fcc 	andi	r2,r2,255
    f280:	1080201c 	xori	r2,r2,128
    f284:	10bfe004 	addi	r2,r2,-128
    f288:	10801720 	cmpeqi	r2,r2,92
    f28c:	10000a1e 	bne	r2,zero,f2b8 <check_file_name_for_FAT16_compliance+0x250>
    f290:	e0bffe17 	ldw	r2,-8(fp)
    f294:	10bfffc4 	addi	r2,r2,-1
    f298:	e0ffff17 	ldw	r3,-4(fp)
    f29c:	1885883a 	add	r2,r3,r2
    f2a0:	10800003 	ldbu	r2,0(r2)
    f2a4:	10803fcc 	andi	r2,r2,255
    f2a8:	1080201c 	xori	r2,r2,128
    f2ac:	10bfe004 	addi	r2,r2,-128
    f2b0:	10800bd8 	cmpnei	r2,r2,47
    f2b4:	1000011e 	bne	r2,zero,f2bc <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
    f2b8:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
    f2bc:	e0bffd17 	ldw	r2,-12(fp)
}
    f2c0:	e037883a 	mov	sp,fp
    f2c4:	dfc00117 	ldw	ra,4(sp)
    f2c8:	df000017 	ldw	fp,0(sp)
    f2cc:	dec00204 	addi	sp,sp,8
    f2d0:	f800283a 	ret

0000f2d4 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    f2d4:	defffb04 	addi	sp,sp,-20
    f2d8:	dfc00415 	stw	ra,16(sp)
    f2dc:	df000315 	stw	fp,12(sp)
    f2e0:	df000304 	addi	fp,sp,12
    f2e4:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
    f2e8:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
    f2ec:	e13fff17 	ldw	r4,-4(fp)
    f2f0:	00005ac0 	call	5ac <strlen>
    f2f4:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
    f2f8:	e03ffd15 	stw	zero,-12(fp)
    f2fc:	00001506 	br	f354 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
    f300:	e0bffd17 	ldw	r2,-12(fp)
    f304:	e0ffff17 	ldw	r3,-4(fp)
    f308:	1885883a 	add	r2,r3,r2
    f30c:	10800003 	ldbu	r2,0(r2)
    f310:	10803fcc 	andi	r2,r2,255
    f314:	1080201c 	xori	r2,r2,128
    f318:	10bfe004 	addi	r2,r2,-128
    f31c:	10801720 	cmpeqi	r2,r2,92
    f320:	10000f1e 	bne	r2,zero,f360 <get_dir_divider_location+0x8c>
    f324:	e0bffd17 	ldw	r2,-12(fp)
    f328:	e0ffff17 	ldw	r3,-4(fp)
    f32c:	1885883a 	add	r2,r3,r2
    f330:	10800003 	ldbu	r2,0(r2)
    f334:	10803fcc 	andi	r2,r2,255
    f338:	1080201c 	xori	r2,r2,128
    f33c:	10bfe004 	addi	r2,r2,-128
    f340:	10800be0 	cmpeqi	r2,r2,47
    f344:	1000061e 	bne	r2,zero,f360 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
    f348:	e0bffd17 	ldw	r2,-12(fp)
    f34c:	10800044 	addi	r2,r2,1
    f350:	e0bffd15 	stw	r2,-12(fp)
    f354:	e0fffd17 	ldw	r3,-12(fp)
    f358:	e0bffe17 	ldw	r2,-8(fp)
    f35c:	18bfe816 	blt	r3,r2,f300 <__alt_data_end+0xfffdd300>
        {
            break;
        }
    }
    
    if (index == length)
    f360:	e0fffd17 	ldw	r3,-12(fp)
    f364:	e0bffe17 	ldw	r2,-8(fp)
    f368:	1880021e 	bne	r3,r2,f374 <get_dir_divider_location+0xa0>
    {
        index = -1;
    f36c:	00bfffc4 	movi	r2,-1
    f370:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
    f374:	e0bffd17 	ldw	r2,-12(fp)
}
    f378:	e037883a 	mov	sp,fp
    f37c:	dfc00117 	ldw	ra,4(sp)
    f380:	df000017 	ldw	fp,0(sp)
    f384:	dec00204 	addi	sp,sp,8
    f388:	f800283a 	ret

0000f38c <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    f38c:	defffa04 	addi	sp,sp,-24
    f390:	df000515 	stw	fp,20(sp)
    f394:	df000504 	addi	fp,sp,20
    f398:	e13ffd15 	stw	r4,-12(fp)
    f39c:	e17ffe15 	stw	r5,-8(fp)
    f3a0:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
    f3a4:	00800044 	movi	r2,1
    f3a8:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
    f3ac:	e03ffc15 	stw	zero,-16(fp)
    f3b0:	00004606 	br	f4cc <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
    f3b4:	e0fffd17 	ldw	r3,-12(fp)
    f3b8:	e0bffc17 	ldw	r2,-16(fp)
    f3bc:	1885883a 	add	r2,r3,r2
    f3c0:	10800003 	ldbu	r2,0(r2)
    f3c4:	10803fcc 	andi	r2,r2,255
    f3c8:	10801870 	cmpltui	r2,r2,97
    f3cc:	1000101e 	bne	r2,zero,f410 <match_file_record_to_name_ext+0x84>
    f3d0:	e0fffd17 	ldw	r3,-12(fp)
    f3d4:	e0bffc17 	ldw	r2,-16(fp)
    f3d8:	1885883a 	add	r2,r3,r2
    f3dc:	10800003 	ldbu	r2,0(r2)
    f3e0:	10803fcc 	andi	r2,r2,255
    f3e4:	10801ee8 	cmpgeui	r2,r2,123
    f3e8:	1000091e 	bne	r2,zero,f410 <match_file_record_to_name_ext+0x84>
    f3ec:	e0fffd17 	ldw	r3,-12(fp)
    f3f0:	e0bffc17 	ldw	r2,-16(fp)
    f3f4:	1885883a 	add	r2,r3,r2
    f3f8:	10800003 	ldbu	r2,0(r2)
    f3fc:	10bff804 	addi	r2,r2,-32
    f400:	10c03fcc 	andi	r3,r2,255
    f404:	18c0201c 	xori	r3,r3,128
    f408:	18ffe004 	addi	r3,r3,-128
    f40c:	00000706 	br	f42c <match_file_record_to_name_ext+0xa0>
    f410:	e0fffd17 	ldw	r3,-12(fp)
    f414:	e0bffc17 	ldw	r2,-16(fp)
    f418:	1885883a 	add	r2,r3,r2
    f41c:	10800003 	ldbu	r2,0(r2)
    f420:	10c03fcc 	andi	r3,r2,255
    f424:	18c0201c 	xori	r3,r3,128
    f428:	18ffe004 	addi	r3,r3,-128
    f42c:	e0bffc17 	ldw	r2,-16(fp)
    f430:	e13ffe17 	ldw	r4,-8(fp)
    f434:	2085883a 	add	r2,r4,r2
    f438:	10800003 	ldbu	r2,0(r2)
    f43c:	10803fcc 	andi	r2,r2,255
    f440:	1080201c 	xori	r2,r2,128
    f444:	10bfe004 	addi	r2,r2,-128
    f448:	10801850 	cmplti	r2,r2,97
    f44c:	1000121e 	bne	r2,zero,f498 <match_file_record_to_name_ext+0x10c>
    f450:	e0bffc17 	ldw	r2,-16(fp)
    f454:	e13ffe17 	ldw	r4,-8(fp)
    f458:	2085883a 	add	r2,r4,r2
    f45c:	10800003 	ldbu	r2,0(r2)
    f460:	10803fcc 	andi	r2,r2,255
    f464:	1080201c 	xori	r2,r2,128
    f468:	10bfe004 	addi	r2,r2,-128
    f46c:	10801ec8 	cmpgei	r2,r2,123
    f470:	1000091e 	bne	r2,zero,f498 <match_file_record_to_name_ext+0x10c>
    f474:	e0bffc17 	ldw	r2,-16(fp)
    f478:	e13ffe17 	ldw	r4,-8(fp)
    f47c:	2085883a 	add	r2,r4,r2
    f480:	10800003 	ldbu	r2,0(r2)
    f484:	10bff804 	addi	r2,r2,-32
    f488:	10803fcc 	andi	r2,r2,255
    f48c:	1080201c 	xori	r2,r2,128
    f490:	10bfe004 	addi	r2,r2,-128
    f494:	00000706 	br	f4b4 <match_file_record_to_name_ext+0x128>
    f498:	e0bffc17 	ldw	r2,-16(fp)
    f49c:	e13ffe17 	ldw	r4,-8(fp)
    f4a0:	2085883a 	add	r2,r4,r2
    f4a4:	10800003 	ldbu	r2,0(r2)
    f4a8:	10803fcc 	andi	r2,r2,255
    f4ac:	1080201c 	xori	r2,r2,128
    f4b0:	10bfe004 	addi	r2,r2,-128
    f4b4:	18800226 	beq	r3,r2,f4c0 <match_file_record_to_name_ext+0x134>
        {
            match = false;
    f4b8:	e03ffb15 	stw	zero,-20(fp)
			break;
    f4bc:	00000606 	br	f4d8 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    f4c0:	e0bffc17 	ldw	r2,-16(fp)
    f4c4:	10800044 	addi	r2,r2,1
    f4c8:	e0bffc15 	stw	r2,-16(fp)
    f4cc:	e0bffc17 	ldw	r2,-16(fp)
    f4d0:	10800210 	cmplti	r2,r2,8
    f4d4:	103fb71e 	bne	r2,zero,f3b4 <__alt_data_end+0xfffdd3b4>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
    f4d8:	e03ffc15 	stw	zero,-16(fp)
    f4dc:	00004a06 	br	f608 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
    f4e0:	e0fffd17 	ldw	r3,-12(fp)
    f4e4:	e0bffc17 	ldw	r2,-16(fp)
    f4e8:	1885883a 	add	r2,r3,r2
    f4ec:	10800204 	addi	r2,r2,8
    f4f0:	10800003 	ldbu	r2,0(r2)
    f4f4:	10803fcc 	andi	r2,r2,255
    f4f8:	10801870 	cmpltui	r2,r2,97
    f4fc:	1000121e 	bne	r2,zero,f548 <match_file_record_to_name_ext+0x1bc>
    f500:	e0fffd17 	ldw	r3,-12(fp)
    f504:	e0bffc17 	ldw	r2,-16(fp)
    f508:	1885883a 	add	r2,r3,r2
    f50c:	10800204 	addi	r2,r2,8
    f510:	10800003 	ldbu	r2,0(r2)
    f514:	10803fcc 	andi	r2,r2,255
    f518:	10801ee8 	cmpgeui	r2,r2,123
    f51c:	10000a1e 	bne	r2,zero,f548 <match_file_record_to_name_ext+0x1bc>
    f520:	e0fffd17 	ldw	r3,-12(fp)
    f524:	e0bffc17 	ldw	r2,-16(fp)
    f528:	1885883a 	add	r2,r3,r2
    f52c:	10800204 	addi	r2,r2,8
    f530:	10800003 	ldbu	r2,0(r2)
    f534:	10bff804 	addi	r2,r2,-32
    f538:	10c03fcc 	andi	r3,r2,255
    f53c:	18c0201c 	xori	r3,r3,128
    f540:	18ffe004 	addi	r3,r3,-128
    f544:	00000806 	br	f568 <match_file_record_to_name_ext+0x1dc>
    f548:	e0fffd17 	ldw	r3,-12(fp)
    f54c:	e0bffc17 	ldw	r2,-16(fp)
    f550:	1885883a 	add	r2,r3,r2
    f554:	10800204 	addi	r2,r2,8
    f558:	10800003 	ldbu	r2,0(r2)
    f55c:	10c03fcc 	andi	r3,r2,255
    f560:	18c0201c 	xori	r3,r3,128
    f564:	18ffe004 	addi	r3,r3,-128
    f568:	e0bffc17 	ldw	r2,-16(fp)
    f56c:	e13fff17 	ldw	r4,-4(fp)
    f570:	2085883a 	add	r2,r4,r2
    f574:	10800003 	ldbu	r2,0(r2)
    f578:	10803fcc 	andi	r2,r2,255
    f57c:	1080201c 	xori	r2,r2,128
    f580:	10bfe004 	addi	r2,r2,-128
    f584:	10801850 	cmplti	r2,r2,97
    f588:	1000121e 	bne	r2,zero,f5d4 <match_file_record_to_name_ext+0x248>
    f58c:	e0bffc17 	ldw	r2,-16(fp)
    f590:	e13fff17 	ldw	r4,-4(fp)
    f594:	2085883a 	add	r2,r4,r2
    f598:	10800003 	ldbu	r2,0(r2)
    f59c:	10803fcc 	andi	r2,r2,255
    f5a0:	1080201c 	xori	r2,r2,128
    f5a4:	10bfe004 	addi	r2,r2,-128
    f5a8:	10801ec8 	cmpgei	r2,r2,123
    f5ac:	1000091e 	bne	r2,zero,f5d4 <match_file_record_to_name_ext+0x248>
    f5b0:	e0bffc17 	ldw	r2,-16(fp)
    f5b4:	e13fff17 	ldw	r4,-4(fp)
    f5b8:	2085883a 	add	r2,r4,r2
    f5bc:	10800003 	ldbu	r2,0(r2)
    f5c0:	10bff804 	addi	r2,r2,-32
    f5c4:	10803fcc 	andi	r2,r2,255
    f5c8:	1080201c 	xori	r2,r2,128
    f5cc:	10bfe004 	addi	r2,r2,-128
    f5d0:	00000706 	br	f5f0 <match_file_record_to_name_ext+0x264>
    f5d4:	e0bffc17 	ldw	r2,-16(fp)
    f5d8:	e13fff17 	ldw	r4,-4(fp)
    f5dc:	2085883a 	add	r2,r4,r2
    f5e0:	10800003 	ldbu	r2,0(r2)
    f5e4:	10803fcc 	andi	r2,r2,255
    f5e8:	1080201c 	xori	r2,r2,128
    f5ec:	10bfe004 	addi	r2,r2,-128
    f5f0:	18800226 	beq	r3,r2,f5fc <match_file_record_to_name_ext+0x270>
        {
            match = false;
    f5f4:	e03ffb15 	stw	zero,-20(fp)
			break;
    f5f8:	00000606 	br	f614 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
    f5fc:	e0bffc17 	ldw	r2,-16(fp)
    f600:	10800044 	addi	r2,r2,1
    f604:	e0bffc15 	stw	r2,-16(fp)
    f608:	e0bffc17 	ldw	r2,-16(fp)
    f60c:	108000d0 	cmplti	r2,r2,3
    f610:	103fb31e 	bne	r2,zero,f4e0 <__alt_data_end+0xfffdd4e0>
        {
            match = false;
			break;
        }
    }
	return match;
    f614:	e0bffb17 	ldw	r2,-20(fp)
}
    f618:	e037883a 	mov	sp,fp
    f61c:	df000017 	ldw	fp,0(sp)
    f620:	dec00104 	addi	sp,sp,4
    f624:	f800283a 	ret

0000f628 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
    f628:	deffe704 	addi	sp,sp,-100
    f62c:	dfc01815 	stw	ra,96(sp)
    f630:	df001715 	stw	fp,92(sp)
    f634:	df001704 	addi	fp,sp,92
    f638:	e13ffd15 	stw	r4,-12(fp)
    f63c:	e17ffe15 	stw	r5,-8(fp)
    f640:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
    f644:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
    f648:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
    f64c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    f650:	e13ffd17 	ldw	r4,-12(fp)
    f654:	000f2d40 	call	f2d4 <get_dir_divider_location>
    f658:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
    f65c:	00013306 	br	fb2c <get_home_directory_cluster_for_file+0x504>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    f660:	00800804 	movi	r2,32
    f664:	e0bff905 	stb	r2,-28(fp)
    f668:	00800804 	movi	r2,32
    f66c:	e0bff945 	stb	r2,-27(fp)
    f670:	00800804 	movi	r2,32
    f674:	e0bff985 	stb	r2,-26(fp)
    f678:	00800804 	movi	r2,32
    f67c:	e0bff9c5 	stb	r2,-25(fp)
    f680:	00800804 	movi	r2,32
    f684:	e0bffa05 	stb	r2,-24(fp)
    f688:	00800804 	movi	r2,32
    f68c:	e0bffa45 	stb	r2,-23(fp)
    f690:	00800804 	movi	r2,32
    f694:	e0bffa85 	stb	r2,-22(fp)
    f698:	00800804 	movi	r2,32
    f69c:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
    f6a0:	00800804 	movi	r2,32
    f6a4:	e0bffb05 	stb	r2,-20(fp)
    f6a8:	00800804 	movi	r2,32
    f6ac:	e0bffb45 	stb	r2,-19(fp)
    f6b0:	00800804 	movi	r2,32
    f6b4:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
    f6b8:	00bfffc4 	movi	r2,-1
    f6bc:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
    f6c0:	e0bfea17 	ldw	r2,-88(fp)
    f6c4:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
    f6c8:	e03fec15 	stw	zero,-80(fp)
    f6cc:	00002d06 	br	f784 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
    f6d0:	e0ffec17 	ldw	r3,-80(fp)
    f6d4:	e0bfed17 	ldw	r2,-76(fp)
    f6d8:	1885883a 	add	r2,r3,r2
    f6dc:	1007883a 	mov	r3,r2
    f6e0:	e0bffd17 	ldw	r2,-12(fp)
    f6e4:	10c5883a 	add	r2,r2,r3
    f6e8:	10800003 	ldbu	r2,0(r2)
    f6ec:	10803fcc 	andi	r2,r2,255
    f6f0:	1080201c 	xori	r2,r2,128
    f6f4:	10bfe004 	addi	r2,r2,-128
    f6f8:	10800b98 	cmpnei	r2,r2,46
    f6fc:	1000031e 	bne	r2,zero,f70c <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
    f700:	e0bfec17 	ldw	r2,-80(fp)
    f704:	e0bfee15 	stw	r2,-72(fp)
    f708:	00001b06 	br	f778 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
    f70c:	e0bfee17 	ldw	r2,-72(fp)
    f710:	10000c0e 	bge	r2,zero,f744 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
    f714:	e0ffec17 	ldw	r3,-80(fp)
    f718:	e0bfed17 	ldw	r2,-76(fp)
    f71c:	1885883a 	add	r2,r3,r2
    f720:	1007883a 	mov	r3,r2
    f724:	e0bffd17 	ldw	r2,-12(fp)
    f728:	10c5883a 	add	r2,r2,r3
    f72c:	10c00003 	ldbu	r3,0(r2)
    f730:	e13ff904 	addi	r4,fp,-28
    f734:	e0bfec17 	ldw	r2,-80(fp)
    f738:	2085883a 	add	r2,r4,r2
    f73c:	10c00005 	stb	r3,0(r2)
    f740:	00000d06 	br	f778 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
    f744:	e0ffec17 	ldw	r3,-80(fp)
    f748:	e0bfee17 	ldw	r2,-72(fp)
    f74c:	1885c83a 	sub	r2,r3,r2
    f750:	e13fec17 	ldw	r4,-80(fp)
    f754:	e0ffed17 	ldw	r3,-76(fp)
    f758:	20c7883a 	add	r3,r4,r3
    f75c:	1809883a 	mov	r4,r3
    f760:	e0fffd17 	ldw	r3,-12(fp)
    f764:	1907883a 	add	r3,r3,r4
    f768:	18c00003 	ldbu	r3,0(r3)
    f76c:	e13ffb04 	addi	r4,fp,-20
    f770:	2085883a 	add	r2,r4,r2
    f774:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
    f778:	e0bfec17 	ldw	r2,-80(fp)
    f77c:	10800044 	addi	r2,r2,1
    f780:	e0bfec15 	stw	r2,-80(fp)
    f784:	e0ffec17 	ldw	r3,-80(fp)
    f788:	e0bfeb17 	ldw	r2,-84(fp)
    f78c:	18bfd016 	blt	r3,r2,f6d0 <__alt_data_end+0xfffdd6d0>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
    f790:	e0bfea17 	ldw	r2,-88(fp)
    f794:	10005e1e 	bne	r2,zero,f910 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    f798:	00800074 	movhi	r2,1
    f79c:	109e4b04 	addi	r2,r2,31020
    f7a0:	1080050b 	ldhu	r2,20(r2)
    f7a4:	10bfffcc 	andi	r2,r2,65535
    f7a8:	1006917a 	slli	r3,r2,5
    f7ac:	00800074 	movhi	r2,1
    f7b0:	109e4b04 	addi	r2,r2,31020
    f7b4:	1080030b 	ldhu	r2,12(r2)
    f7b8:	10bfffcc 	andi	r2,r2,65535
    f7bc:	100b883a 	mov	r5,r2
    f7c0:	1809883a 	mov	r4,r3
    f7c4:	000a92c0 	call	a92c <__divsi3>
    f7c8:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    f7cc:	e03ff015 	stw	zero,-64(fp)
    f7d0:	00003b06 	br	f8c0 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
    f7d4:	00800074 	movhi	r2,1
    f7d8:	109e4b04 	addi	r2,r2,31020
    f7dc:	10c01317 	ldw	r3,76(r2)
    f7e0:	e0bff017 	ldw	r2,-64(fp)
    f7e4:	1885883a 	add	r2,r3,r2
    f7e8:	1007883a 	mov	r3,r2
    f7ec:	d0a6e917 	ldw	r2,-25692(gp)
    f7f0:	100b883a 	mov	r5,r2
    f7f4:	1809883a 	mov	r4,r3
    f7f8:	000df000 	call	df00 <Read_Sector_Data>
    f7fc:	10003426 	beq	r2,zero,f8d0 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    f800:	e03ff115 	stw	zero,-60(fp)
    f804:	00002506 	br	f89c <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
    f808:	e0bff117 	ldw	r2,-60(fp)
    f80c:	1004917a 	slli	r2,r2,5
    f810:	e0fff017 	ldw	r3,-64(fp)
    f814:	180f883a 	mov	r7,r3
    f818:	000d883a 	mov	r6,zero
    f81c:	e17fff17 	ldw	r5,-4(fp)
    f820:	1009883a 	mov	r4,r2
    f824:	000e3100 	call	e310 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    f828:	e0bfff17 	ldw	r2,-4(fp)
    f82c:	10800003 	ldbu	r2,0(r2)
    f830:	10803fcc 	andi	r2,r2,255
    f834:	10803960 	cmpeqi	r2,r2,229
    f838:	1000151e 	bne	r2,zero,f890 <get_home_directory_cluster_for_file+0x268>
    f83c:	e0bfff17 	ldw	r2,-4(fp)
    f840:	10800003 	ldbu	r2,0(r2)
    f844:	10803fcc 	andi	r2,r2,255
    f848:	10001126 	beq	r2,zero,f890 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
    f84c:	e0fffb04 	addi	r3,fp,-20
    f850:	e0bff904 	addi	r2,fp,-28
    f854:	180d883a 	mov	r6,r3
    f858:	100b883a 	mov	r5,r2
    f85c:	e13fff17 	ldw	r4,-4(fp)
    f860:	000f38c0 	call	f38c <match_file_record_to_name_ext>
    f864:	e0bff815 	stw	r2,-32(fp)
                            if (match)
    f868:	e0bff817 	ldw	r2,-32(fp)
    f86c:	10000826 	beq	r2,zero,f890 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
    f870:	e0bfff17 	ldw	r2,-4(fp)
    f874:	1080058b 	ldhu	r2,22(r2)
    f878:	10bfffcc 	andi	r2,r2,65535
    f87c:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
    f880:	e0bfff17 	ldw	r2,-4(fp)
    f884:	00c00044 	movi	r3,1
    f888:	10c00a15 	stw	r3,40(r2)
                                break;
    f88c:	00000606 	br	f8a8 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    f890:	e0bff117 	ldw	r2,-60(fp)
    f894:	10800044 	addi	r2,r2,1
    f898:	e0bff115 	stw	r2,-60(fp)
    f89c:	e0bff117 	ldw	r2,-60(fp)
    f8a0:	10800410 	cmplti	r2,r2,16
    f8a4:	103fd81e 	bne	r2,zero,f808 <__alt_data_end+0xfffdd808>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
    f8a8:	e0ffef17 	ldw	r3,-68(fp)
    f8ac:	e0bfea17 	ldw	r2,-88(fp)
    f8b0:	1880091e 	bne	r3,r2,f8d8 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    f8b4:	e0bff017 	ldw	r2,-64(fp)
    f8b8:	10800044 	addi	r2,r2,1
    f8bc:	e0bff015 	stw	r2,-64(fp)
    f8c0:	e0fff017 	ldw	r3,-64(fp)
    f8c4:	e0bff717 	ldw	r2,-36(fp)
    f8c8:	18bfc216 	blt	r3,r2,f7d4 <__alt_data_end+0xfffdd7d4>
    f8cc:	00000306 	br	f8dc <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
    f8d0:	0001883a 	nop
    f8d4:	00000106 	br	f8dc <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
    f8d8:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
    f8dc:	e0ffef17 	ldw	r3,-68(fp)
    f8e0:	e0bfea17 	ldw	r2,-88(fp)
    f8e4:	18800826 	beq	r3,r2,f908 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
    f8e8:	e0bfef17 	ldw	r2,-68(fp)
    f8ec:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
    f8f0:	e0ffed17 	ldw	r3,-76(fp)
    f8f4:	e0bfeb17 	ldw	r2,-84(fp)
    f8f8:	1885883a 	add	r2,r3,r2
    f8fc:	10800044 	addi	r2,r2,1
    f900:	e0bfed15 	stw	r2,-76(fp)
    f904:	00007f06 	br	fb04 <get_home_directory_cluster_for_file+0x4dc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
    f908:	0005883a 	mov	r2,zero
    f90c:	00009306 	br	fb5c <get_home_directory_cluster_for_file+0x534>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
    f910:	e0bfea17 	ldw	r2,-88(fp)
    f914:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    f918:	e0bff417 	ldw	r2,-48(fp)
    f91c:	10ffff84 	addi	r3,r2,-2
    f920:	00800074 	movhi	r2,1
    f924:	109e4b04 	addi	r2,r2,31020
    f928:	10800383 	ldbu	r2,14(r2)
    f92c:	10803fcc 	andi	r2,r2,255
    f930:	100b883a 	mov	r5,r2
    f934:	1809883a 	mov	r4,r3
    f938:	000aae00 	call	aae0 <__mulsi3>
    f93c:	1007883a 	mov	r3,r2
    f940:	00800074 	movhi	r2,1
    f944:	109e4b04 	addi	r2,r2,31020
    f948:	10801417 	ldw	r2,80(r2)
    f94c:	1885883a 	add	r2,r3,r2
    f950:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    f954:	e03ff215 	stw	zero,-56(fp)
    f958:	00003606 	br	fa34 <get_home_directory_cluster_for_file+0x40c>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    f95c:	e0fff217 	ldw	r3,-56(fp)
    f960:	e0bff517 	ldw	r2,-44(fp)
    f964:	1885883a 	add	r2,r3,r2
    f968:	d0e6e917 	ldw	r3,-25692(gp)
    f96c:	180b883a 	mov	r5,r3
    f970:	1009883a 	mov	r4,r2
    f974:	000df000 	call	df00 <Read_Sector_Data>
    f978:	10003526 	beq	r2,zero,fa50 <get_home_directory_cluster_for_file+0x428>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
    f97c:	e03ff315 	stw	zero,-52(fp)
    f980:	00002306 	br	fa10 <get_home_directory_cluster_for_file+0x3e8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
    f984:	e0bff317 	ldw	r2,-52(fp)
    f988:	1004917a 	slli	r2,r2,5
    f98c:	e0fff417 	ldw	r3,-48(fp)
    f990:	e13ff217 	ldw	r4,-56(fp)
    f994:	200f883a 	mov	r7,r4
    f998:	180d883a 	mov	r6,r3
    f99c:	e17fff17 	ldw	r5,-4(fp)
    f9a0:	1009883a 	mov	r4,r2
    f9a4:	000e3100 	call	e310 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    f9a8:	e0bfff17 	ldw	r2,-4(fp)
    f9ac:	10800003 	ldbu	r2,0(r2)
    f9b0:	10803fcc 	andi	r2,r2,255
    f9b4:	10803960 	cmpeqi	r2,r2,229
    f9b8:	1000121e 	bne	r2,zero,fa04 <get_home_directory_cluster_for_file+0x3dc>
    f9bc:	e0bfff17 	ldw	r2,-4(fp)
    f9c0:	10800003 	ldbu	r2,0(r2)
    f9c4:	10803fcc 	andi	r2,r2,255
    f9c8:	10000e26 	beq	r2,zero,fa04 <get_home_directory_cluster_for_file+0x3dc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
    f9cc:	e0fffb04 	addi	r3,fp,-20
    f9d0:	e0bff904 	addi	r2,fp,-28
    f9d4:	180d883a 	mov	r6,r3
    f9d8:	100b883a 	mov	r5,r2
    f9dc:	e13fff17 	ldw	r4,-4(fp)
    f9e0:	000f38c0 	call	f38c <match_file_record_to_name_ext>
    f9e4:	e0bff615 	stw	r2,-40(fp)
                                if (match)
    f9e8:	e0bff617 	ldw	r2,-40(fp)
    f9ec:	10000526 	beq	r2,zero,fa04 <get_home_directory_cluster_for_file+0x3dc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	1080058b 	ldhu	r2,22(r2)
    f9f8:	10bfffcc 	andi	r2,r2,65535
    f9fc:	e0bfef15 	stw	r2,-68(fp)
                                    break;
    fa00:	00000606 	br	fa1c <get_home_directory_cluster_for_file+0x3f4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
    fa04:	e0bff317 	ldw	r2,-52(fp)
    fa08:	10800044 	addi	r2,r2,1
    fa0c:	e0bff315 	stw	r2,-52(fp)
    fa10:	e0bff317 	ldw	r2,-52(fp)
    fa14:	10800410 	cmplti	r2,r2,16
    fa18:	103fda1e 	bne	r2,zero,f984 <__alt_data_end+0xfffdd984>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
    fa1c:	e0ffef17 	ldw	r3,-68(fp)
    fa20:	e0bfea17 	ldw	r2,-88(fp)
    fa24:	18800c1e 	bne	r3,r2,fa58 <get_home_directory_cluster_for_file+0x430>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    fa28:	e0bff217 	ldw	r2,-56(fp)
    fa2c:	10800044 	addi	r2,r2,1
    fa30:	e0bff215 	stw	r2,-56(fp)
    fa34:	00800074 	movhi	r2,1
    fa38:	109e4b04 	addi	r2,r2,31020
    fa3c:	10800383 	ldbu	r2,14(r2)
    fa40:	10803fcc 	andi	r2,r2,255
    fa44:	e0fff217 	ldw	r3,-56(fp)
    fa48:	18bfc416 	blt	r3,r2,f95c <__alt_data_end+0xfffdd95c>
    fa4c:	00000306 	br	fa5c <get_home_directory_cluster_for_file+0x434>
                            }
                        }
                    }
                    else
                    {
                        break;
    fa50:	0001883a 	nop
    fa54:	00000106 	br	fa5c <get_home_directory_cluster_for_file+0x434>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
    fa58:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
    fa5c:	e0ffef17 	ldw	r3,-68(fp)
    fa60:	e0bfea17 	ldw	r2,-88(fp)
    fa64:	1880141e 	bne	r3,r2,fab8 <get_home_directory_cluster_for_file+0x490>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
    fa68:	e0bfef17 	ldw	r2,-68(fp)
    fa6c:	e0fffc04 	addi	r3,fp,-16
    fa70:	180b883a 	mov	r5,r3
    fa74:	1009883a 	mov	r4,r2
    fa78:	000dfd80 	call	dfd8 <get_cluster_flag>
    fa7c:	10000c26 	beq	r2,zero,fab0 <get_home_directory_cluster_for_file+0x488>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
    fa80:	e0bffc0b 	ldhu	r2,-16(fp)
    fa84:	10bfffcc 	andi	r2,r2,65535
    fa88:	10fffe0c 	andi	r3,r2,65528
    fa8c:	00bffe14 	movui	r2,65528
    fa90:	1880021e 	bne	r3,r2,fa9c <get_home_directory_cluster_for_file+0x474>
						{
							return false;
    fa94:	0005883a 	mov	r2,zero
    fa98:	00003006 	br	fb5c <get_home_directory_cluster_for_file+0x534>
						}
						new_cluster = (next_cluster & 0x0000fff8);
    fa9c:	e0bffc0b 	ldhu	r2,-16(fp)
    faa0:	10bfffcc 	andi	r2,r2,65535
    faa4:	10bffe0c 	andi	r2,r2,65528
    faa8:	e0bfef15 	stw	r2,-68(fp)
    faac:	00000206 	br	fab8 <get_home_directory_cluster_for_file+0x490>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
    fab0:	0005883a 	mov	r2,zero
    fab4:	00002906 	br	fb5c <get_home_directory_cluster_for_file+0x534>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
    fab8:	e0bff417 	ldw	r2,-48(fp)
    fabc:	00fffdd4 	movui	r3,65527
    fac0:	18800316 	blt	r3,r2,fad0 <get_home_directory_cluster_for_file+0x4a8>
    fac4:	e0ffef17 	ldw	r3,-68(fp)
    fac8:	e0bfea17 	ldw	r2,-88(fp)
    facc:	18bf9226 	beq	r3,r2,f918 <__alt_data_end+0xfffdd918>
            if (new_cluster != home_dir_cluster)
    fad0:	e0ffef17 	ldw	r3,-68(fp)
    fad4:	e0bfea17 	ldw	r2,-88(fp)
    fad8:	18800826 	beq	r3,r2,fafc <get_home_directory_cluster_for_file+0x4d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
    fadc:	e0bfef17 	ldw	r2,-68(fp)
    fae0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
    fae4:	e0ffed17 	ldw	r3,-76(fp)
    fae8:	e0bfeb17 	ldw	r2,-84(fp)
    faec:	1885883a 	add	r2,r3,r2
    faf0:	10800044 	addi	r2,r2,1
    faf4:	e0bfed15 	stw	r2,-76(fp)
    faf8:	00000206 	br	fb04 <get_home_directory_cluster_for_file+0x4dc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
    fafc:	0005883a 	mov	r2,zero
    fb00:	00001606 	br	fb5c <get_home_directory_cluster_for_file+0x534>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
    fb04:	e0bfed17 	ldw	r2,-76(fp)
    fb08:	e0fffd17 	ldw	r3,-12(fp)
    fb0c:	1885883a 	add	r2,r3,r2
    fb10:	1009883a 	mov	r4,r2
    fb14:	000f2d40 	call	f2d4 <get_dir_divider_location>
    fb18:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
    fb1c:	e0bfeb17 	ldw	r2,-84(fp)
    fb20:	1000020e 	bge	r2,zero,fb2c <get_home_directory_cluster_for_file+0x504>
        {
            // Directory has been located.
            result = true;
    fb24:	00800044 	movi	r2,1
    fb28:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    fb2c:	e0bfeb17 	ldw	r2,-84(fp)
    fb30:	00becb16 	blt	zero,r2,f660 <__alt_data_end+0xfffdd660>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
    fb34:	e0bffe17 	ldw	r2,-8(fp)
    fb38:	e0ffea17 	ldw	r3,-88(fp)
    fb3c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
    fb40:	e0bfea17 	ldw	r2,-88(fp)
    fb44:	1000041e 	bne	r2,zero,fb58 <get_home_directory_cluster_for_file+0x530>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
    fb48:	e0bfff17 	ldw	r2,-4(fp)
    fb4c:	10000a15 	stw	zero,40(r2)
		result = true;
    fb50:	00800044 	movi	r2,1
    fb54:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
    fb58:	e0bfe917 	ldw	r2,-92(fp)
}
    fb5c:	e037883a 	mov	sp,fp
    fb60:	dfc00117 	ldw	ra,4(sp)
    fb64:	df000017 	ldw	fp,0(sp)
    fb68:	dec00204 	addi	sp,sp,8
    fb6c:	f800283a 	ret

0000fb70 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    fb70:	deffe804 	addi	sp,sp,-96
    fb74:	dfc01715 	stw	ra,92(sp)
    fb78:	df001615 	stw	fp,88(sp)
    fb7c:	df001604 	addi	fp,sp,88
    fb80:	e13ffd15 	stw	r4,-12(fp)
    fb84:	e17ffe15 	stw	r5,-8(fp)
    fb88:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
    fb8c:	e13ffe17 	ldw	r4,-8(fp)
    fb90:	000f2d40 	call	f2d4 <get_dir_divider_location>
    fb94:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
    fb98:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    fb9c:	00800804 	movi	r2,32
    fba0:	e0bff905 	stb	r2,-28(fp)
    fba4:	00800804 	movi	r2,32
    fba8:	e0bff945 	stb	r2,-27(fp)
    fbac:	00800804 	movi	r2,32
    fbb0:	e0bff985 	stb	r2,-26(fp)
    fbb4:	00800804 	movi	r2,32
    fbb8:	e0bff9c5 	stb	r2,-25(fp)
    fbbc:	00800804 	movi	r2,32
    fbc0:	e0bffa05 	stb	r2,-24(fp)
    fbc4:	00800804 	movi	r2,32
    fbc8:	e0bffa45 	stb	r2,-23(fp)
    fbcc:	00800804 	movi	r2,32
    fbd0:	e0bffa85 	stb	r2,-22(fp)
    fbd4:	00800804 	movi	r2,32
    fbd8:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
    fbdc:	00800804 	movi	r2,32
    fbe0:	e0bffb05 	stb	r2,-20(fp)
    fbe4:	00800804 	movi	r2,32
    fbe8:	e0bffb45 	stb	r2,-19(fp)
    fbec:	00800804 	movi	r2,32
    fbf0:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
    fbf4:	00bfffc4 	movi	r2,-1
    fbf8:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
    fbfc:	e0bffd17 	ldw	r2,-12(fp)
    fc00:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
    fc04:	e13ffe17 	ldw	r4,-8(fp)
    fc08:	00005ac0 	call	5ac <strlen>
    fc0c:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
    fc10:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
    fc14:	00000b06 	br	fc44 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
    fc18:	e0ffeb17 	ldw	r3,-84(fp)
    fc1c:	e0bfea17 	ldw	r2,-88(fp)
    fc20:	1885883a 	add	r2,r3,r2
    fc24:	10800044 	addi	r2,r2,1
    fc28:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    fc2c:	e0bfeb17 	ldw	r2,-84(fp)
    fc30:	e0fffe17 	ldw	r3,-8(fp)
    fc34:	1885883a 	add	r2,r3,r2
    fc38:	1009883a 	mov	r4,r2
    fc3c:	000f2d40 	call	f2d4 <get_dir_divider_location>
    fc40:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
    fc44:	e0bfea17 	ldw	r2,-88(fp)
    fc48:	00bff316 	blt	zero,r2,fc18 <__alt_data_end+0xfffddc18>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    fc4c:	e0bfeb17 	ldw	r2,-84(fp)
    fc50:	e0bfee15 	stw	r2,-72(fp)
    fc54:	00002706 	br	fcf4 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
    fc58:	e0bfee17 	ldw	r2,-72(fp)
    fc5c:	e0fffe17 	ldw	r3,-8(fp)
    fc60:	1885883a 	add	r2,r3,r2
    fc64:	10800003 	ldbu	r2,0(r2)
    fc68:	10803fcc 	andi	r2,r2,255
    fc6c:	1080201c 	xori	r2,r2,128
    fc70:	10bfe004 	addi	r2,r2,-128
    fc74:	10800b98 	cmpnei	r2,r2,46
    fc78:	1000031e 	bne	r2,zero,fc88 <find_file_in_directory+0x118>
        {
            ext_index = index;
    fc7c:	e0bfee17 	ldw	r2,-72(fp)
    fc80:	e0bfec15 	stw	r2,-80(fp)
    fc84:	00001806 	br	fce8 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
    fc88:	e0bfec17 	ldw	r2,-80(fp)
    fc8c:	10000b0e 	bge	r2,zero,fcbc <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
    fc90:	e0ffee17 	ldw	r3,-72(fp)
    fc94:	e0bfeb17 	ldw	r2,-84(fp)
    fc98:	1885c83a 	sub	r2,r3,r2
    fc9c:	e0ffee17 	ldw	r3,-72(fp)
    fca0:	e13ffe17 	ldw	r4,-8(fp)
    fca4:	20c7883a 	add	r3,r4,r3
    fca8:	18c00003 	ldbu	r3,0(r3)
    fcac:	e13ff904 	addi	r4,fp,-28
    fcb0:	2085883a 	add	r2,r4,r2
    fcb4:	10c00005 	stb	r3,0(r2)
    fcb8:	00000b06 	br	fce8 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
    fcbc:	e0ffee17 	ldw	r3,-72(fp)
    fcc0:	e0bfec17 	ldw	r2,-80(fp)
    fcc4:	1885c83a 	sub	r2,r3,r2
    fcc8:	10bfffc4 	addi	r2,r2,-1
    fccc:	e0ffee17 	ldw	r3,-72(fp)
    fcd0:	e13ffe17 	ldw	r4,-8(fp)
    fcd4:	20c7883a 	add	r3,r4,r3
    fcd8:	18c00003 	ldbu	r3,0(r3)
    fcdc:	e13ffb04 	addi	r4,fp,-20
    fce0:	2085883a 	add	r2,r4,r2
    fce4:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    fce8:	e0bfee17 	ldw	r2,-72(fp)
    fcec:	10800044 	addi	r2,r2,1
    fcf0:	e0bfee15 	stw	r2,-72(fp)
    fcf4:	e0ffee17 	ldw	r3,-72(fp)
    fcf8:	e0bff417 	ldw	r2,-48(fp)
    fcfc:	18bfd616 	blt	r3,r2,fc58 <__alt_data_end+0xfffddc58>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
    fd00:	e0bffd17 	ldw	r2,-12(fp)
    fd04:	1000481e 	bne	r2,zero,fe28 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    fd08:	00800074 	movhi	r2,1
    fd0c:	109e4b04 	addi	r2,r2,31020
    fd10:	1080050b 	ldhu	r2,20(r2)
    fd14:	10bfffcc 	andi	r2,r2,65535
    fd18:	1006917a 	slli	r3,r2,5
    fd1c:	00800074 	movhi	r2,1
    fd20:	109e4b04 	addi	r2,r2,31020
    fd24:	1080030b 	ldhu	r2,12(r2)
    fd28:	10bfffcc 	andi	r2,r2,65535
    fd2c:	100b883a 	mov	r5,r2
    fd30:	1809883a 	mov	r4,r3
    fd34:	000a92c0 	call	a92c <__divsi3>
    fd38:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    fd3c:	e03ff015 	stw	zero,-64(fp)
    fd40:	00003506 	br	fe18 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
    fd44:	00800074 	movhi	r2,1
    fd48:	109e4b04 	addi	r2,r2,31020
    fd4c:	10c01317 	ldw	r3,76(r2)
    fd50:	e0bff017 	ldw	r2,-64(fp)
    fd54:	1885883a 	add	r2,r3,r2
    fd58:	1007883a 	mov	r3,r2
    fd5c:	d0a6e917 	ldw	r2,-25692(gp)
    fd60:	100b883a 	mov	r5,r2
    fd64:	1809883a 	mov	r4,r3
    fd68:	000df000 	call	df00 <Read_Sector_Data>
    fd6c:	10009826 	beq	r2,zero,ffd0 <find_file_in_directory+0x460>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    fd70:	e03ff115 	stw	zero,-60(fp)
    fd74:	00002006 	br	fdf8 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
    fd78:	e0bff117 	ldw	r2,-60(fp)
    fd7c:	1004917a 	slli	r2,r2,5
    fd80:	e0fff017 	ldw	r3,-64(fp)
    fd84:	180f883a 	mov	r7,r3
    fd88:	000d883a 	mov	r6,zero
    fd8c:	e17fff17 	ldw	r5,-4(fp)
    fd90:	1009883a 	mov	r4,r2
    fd94:	000e3100 	call	e310 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    fd98:	e0bfff17 	ldw	r2,-4(fp)
    fd9c:	10800003 	ldbu	r2,0(r2)
    fda0:	10803fcc 	andi	r2,r2,255
    fda4:	10803960 	cmpeqi	r2,r2,229
    fda8:	1000101e 	bne	r2,zero,fdec <find_file_in_directory+0x27c>
    fdac:	e0bfff17 	ldw	r2,-4(fp)
    fdb0:	10800003 	ldbu	r2,0(r2)
    fdb4:	10803fcc 	andi	r2,r2,255
    fdb8:	10000c26 	beq	r2,zero,fdec <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
    fdbc:	e0fffb04 	addi	r3,fp,-20
    fdc0:	e0bff904 	addi	r2,fp,-28
    fdc4:	180d883a 	mov	r6,r3
    fdc8:	100b883a 	mov	r5,r2
    fdcc:	e13fff17 	ldw	r4,-4(fp)
    fdd0:	000f38c0 	call	f38c <match_file_record_to_name_ext>
    fdd4:	e0bff815 	stw	r2,-32(fp)

                        if (match)
    fdd8:	e0bff817 	ldw	r2,-32(fp)
    fddc:	10000326 	beq	r2,zero,fdec <find_file_in_directory+0x27c>
                        {
                            result = true;
    fde0:	00800044 	movi	r2,1
    fde4:	e0bfef15 	stw	r2,-68(fp)
                            break;
    fde8:	00000606 	br	fe04 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    fdec:	e0bff117 	ldw	r2,-60(fp)
    fdf0:	10800044 	addi	r2,r2,1
    fdf4:	e0bff115 	stw	r2,-60(fp)
    fdf8:	e0bff117 	ldw	r2,-60(fp)
    fdfc:	10800410 	cmplti	r2,r2,16
    fe00:	103fdd1e 	bne	r2,zero,fd78 <__alt_data_end+0xfffddd78>
            }
            else
            {
                break;
            }
            if (result)
    fe04:	e0bfef17 	ldw	r2,-68(fp)
    fe08:	1000731e 	bne	r2,zero,ffd8 <find_file_in_directory+0x468>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    fe0c:	e0bff017 	ldw	r2,-64(fp)
    fe10:	10800044 	addi	r2,r2,1
    fe14:	e0bff015 	stw	r2,-64(fp)
    fe18:	e0fff017 	ldw	r3,-64(fp)
    fe1c:	e0bff717 	ldw	r2,-36(fp)
    fe20:	18bfc816 	blt	r3,r2,fd44 <__alt_data_end+0xfffddd44>
    fe24:	00006d06 	br	ffdc <find_file_in_directory+0x46c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    fe28:	e0bfed17 	ldw	r2,-76(fp)
    fe2c:	10ffff84 	addi	r3,r2,-2
    fe30:	00800074 	movhi	r2,1
    fe34:	109e4b04 	addi	r2,r2,31020
    fe38:	10800383 	ldbu	r2,14(r2)
    fe3c:	10803fcc 	andi	r2,r2,255
    fe40:	100b883a 	mov	r5,r2
    fe44:	1809883a 	mov	r4,r3
    fe48:	000aae00 	call	aae0 <__mulsi3>
    fe4c:	1007883a 	mov	r3,r2
    fe50:	00800074 	movhi	r2,1
    fe54:	109e4b04 	addi	r2,r2,31020
    fe58:	10801417 	ldw	r2,80(r2)
    fe5c:	1885883a 	add	r2,r3,r2
    fe60:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    fe64:	e03ff215 	stw	zero,-56(fp)
    fe68:	00003306 	br	ff38 <find_file_in_directory+0x3c8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    fe6c:	e0fff217 	ldw	r3,-56(fp)
    fe70:	e0bff517 	ldw	r2,-44(fp)
    fe74:	1885883a 	add	r2,r3,r2
    fe78:	d0e6e917 	ldw	r3,-25692(gp)
    fe7c:	180b883a 	mov	r5,r3
    fe80:	1009883a 	mov	r4,r2
    fe84:	000df000 	call	df00 <Read_Sector_Data>
    fe88:	10003226 	beq	r2,zero,ff54 <find_file_in_directory+0x3e4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    fe8c:	e03ff315 	stw	zero,-52(fp)
    fe90:	00002106 	br	ff18 <find_file_in_directory+0x3a8>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
    fe94:	e0bff317 	ldw	r2,-52(fp)
    fe98:	1004917a 	slli	r2,r2,5
    fe9c:	e0ffed17 	ldw	r3,-76(fp)
    fea0:	e13ff217 	ldw	r4,-56(fp)
    fea4:	200f883a 	mov	r7,r4
    fea8:	180d883a 	mov	r6,r3
    feac:	e17fff17 	ldw	r5,-4(fp)
    feb0:	1009883a 	mov	r4,r2
    feb4:	000e3100 	call	e310 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    feb8:	e0bfff17 	ldw	r2,-4(fp)
    febc:	10800003 	ldbu	r2,0(r2)
    fec0:	10803fcc 	andi	r2,r2,255
    fec4:	10803960 	cmpeqi	r2,r2,229
    fec8:	1000101e 	bne	r2,zero,ff0c <find_file_in_directory+0x39c>
    fecc:	e0bfff17 	ldw	r2,-4(fp)
    fed0:	10800003 	ldbu	r2,0(r2)
    fed4:	10803fcc 	andi	r2,r2,255
    fed8:	10000c26 	beq	r2,zero,ff0c <find_file_in_directory+0x39c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
    fedc:	e0fffb04 	addi	r3,fp,-20
    fee0:	e0bff904 	addi	r2,fp,-28
    fee4:	180d883a 	mov	r6,r3
    fee8:	100b883a 	mov	r5,r2
    feec:	e13fff17 	ldw	r4,-4(fp)
    fef0:	000f38c0 	call	f38c <match_file_record_to_name_ext>
    fef4:	e0bff615 	stw	r2,-40(fp)

                            if (match)
    fef8:	e0bff617 	ldw	r2,-40(fp)
    fefc:	10000326 	beq	r2,zero,ff0c <find_file_in_directory+0x39c>
                            {                               
                                result = true;
    ff00:	00800044 	movi	r2,1
    ff04:	e0bfef15 	stw	r2,-68(fp)
                                break;
    ff08:	00000606 	br	ff24 <find_file_in_directory+0x3b4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    ff0c:	e0bff317 	ldw	r2,-52(fp)
    ff10:	10800044 	addi	r2,r2,1
    ff14:	e0bff315 	stw	r2,-52(fp)
    ff18:	e0bff317 	ldw	r2,-52(fp)
    ff1c:	10800410 	cmplti	r2,r2,16
    ff20:	103fdc1e 	bne	r2,zero,fe94 <__alt_data_end+0xfffdde94>
                }
                else
                {
                    break;
                }
                if (result)
    ff24:	e0bfef17 	ldw	r2,-68(fp)
    ff28:	10000c1e 	bne	r2,zero,ff5c <find_file_in_directory+0x3ec>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    ff2c:	e0bff217 	ldw	r2,-56(fp)
    ff30:	10800044 	addi	r2,r2,1
    ff34:	e0bff215 	stw	r2,-56(fp)
    ff38:	00800074 	movhi	r2,1
    ff3c:	109e4b04 	addi	r2,r2,31020
    ff40:	10800383 	ldbu	r2,14(r2)
    ff44:	10803fcc 	andi	r2,r2,255
    ff48:	e0fff217 	ldw	r3,-56(fp)
    ff4c:	18bfc716 	blt	r3,r2,fe6c <__alt_data_end+0xfffdde6c>
    ff50:	00000306 	br	ff60 <find_file_in_directory+0x3f0>
                        }
                    }
                }
                else
                {
                    break;
    ff54:	0001883a 	nop
    ff58:	00000106 	br	ff60 <find_file_in_directory+0x3f0>
                }
                if (result)
                {
                    break;
    ff5c:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
    ff60:	e0bfef17 	ldw	r2,-68(fp)
    ff64:	1000141e 	bne	r2,zero,ffb8 <find_file_in_directory+0x448>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
    ff68:	e0bfed17 	ldw	r2,-76(fp)
    ff6c:	e0fffc04 	addi	r3,fp,-16
    ff70:	180b883a 	mov	r5,r3
    ff74:	1009883a 	mov	r4,r2
    ff78:	000dfd80 	call	dfd8 <get_cluster_flag>
    ff7c:	10000c26 	beq	r2,zero,ffb0 <find_file_in_directory+0x440>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
    ff80:	e0bffc0b 	ldhu	r2,-16(fp)
    ff84:	10bfffcc 	andi	r2,r2,65535
    ff88:	10fffe0c 	andi	r3,r2,65528
    ff8c:	00bffe14 	movui	r2,65528
    ff90:	1880021e 	bne	r3,r2,ff9c <find_file_in_directory+0x42c>
					{
						return false;
    ff94:	0005883a 	mov	r2,zero
    ff98:	00001106 	br	ffe0 <find_file_in_directory+0x470>
					}
					cluster = (new_cluster & 0x0000fff8);
    ff9c:	e0bffc0b 	ldhu	r2,-16(fp)
    ffa0:	10bfffcc 	andi	r2,r2,65535
    ffa4:	10bffe0c 	andi	r2,r2,65528
    ffa8:	e0bfed15 	stw	r2,-76(fp)
    ffac:	00000206 	br	ffb8 <find_file_in_directory+0x448>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
    ffb0:	0005883a 	mov	r2,zero
    ffb4:	00000a06 	br	ffe0 <find_file_in_directory+0x470>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    ffb8:	e0bfed17 	ldw	r2,-76(fp)
    ffbc:	00fffdd4 	movui	r3,65527
    ffc0:	18800616 	blt	r3,r2,ffdc <find_file_in_directory+0x46c>
    ffc4:	e0bfef17 	ldw	r2,-68(fp)
    ffc8:	103f9726 	beq	r2,zero,fe28 <__alt_data_end+0xfffdde28>
    ffcc:	00000306 	br	ffdc <find_file_in_directory+0x46c>
                    }
                }
            }
            else
            {
                break;
    ffd0:	0001883a 	nop
    ffd4:	00000106 	br	ffdc <find_file_in_directory+0x46c>
            }
            if (result)
            {
                break;
    ffd8:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
    ffdc:	e0bfef17 	ldw	r2,-68(fp)
}
    ffe0:	e037883a 	mov	sp,fp
    ffe4:	dfc00117 	ldw	ra,4(sp)
    ffe8:	df000017 	ldw	fp,0(sp)
    ffec:	dec00204 	addi	sp,sp,8
    fff0:	f800283a 	ret

0000fff4 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    fff4:	defff504 	addi	sp,sp,-44
    fff8:	dfc00a15 	stw	ra,40(sp)
    fffc:	df000915 	stw	fp,36(sp)
   10000:	df000904 	addi	fp,sp,36
   10004:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   10008:	00800074 	movhi	r2,1
   1000c:	109e4b04 	addi	r2,r2,31020
   10010:	10801117 	ldw	r2,68(r2)
   10014:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   10018:	00800084 	movi	r2,2
   1001c:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   10020:	00bfffc4 	movi	r2,-1
   10024:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   10028:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1002c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   10030:	00800074 	movhi	r2,1
   10034:	109e4b04 	addi	r2,r2,31020
   10038:	10801417 	ldw	r2,80(r2)
   1003c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   10040:	00800074 	movhi	r2,1
   10044:	109e4b04 	addi	r2,r2,31020
   10048:	1080058b 	ldhu	r2,22(r2)
   1004c:	10bfffcc 	andi	r2,r2,65535
   10050:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   10054:	00800074 	movhi	r2,1
   10058:	109e4b04 	addi	r2,r2,31020
   1005c:	10800917 	ldw	r2,36(r2)
   10060:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   10064:	e0bffd17 	ldw	r2,-12(fp)
   10068:	e0fffe17 	ldw	r3,-8(fp)
   1006c:	18800d2e 	bgeu	r3,r2,100a4 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   10070:	e0fffd17 	ldw	r3,-12(fp)
   10074:	e0bffc17 	ldw	r2,-16(fp)
   10078:	1887c83a 	sub	r3,r3,r2
   1007c:	00800074 	movhi	r2,1
   10080:	109e4b04 	addi	r2,r2,31020
   10084:	10800383 	ldbu	r2,14(r2)
   10088:	10803fcc 	andi	r2,r2,255
   1008c:	100b883a 	mov	r5,r2
   10090:	1809883a 	mov	r4,r3
   10094:	000aa240 	call	aa24 <__udivsi3>
   10098:	10800044 	addi	r2,r2,1
   1009c:	e0bffb15 	stw	r2,-20(fp)
   100a0:	00002c06 	br	10154 <find_first_empty_cluster+0x160>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   100a4:	e0fffe17 	ldw	r3,-8(fp)
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	1887c83a 	sub	r3,r3,r2
   100b0:	00800074 	movhi	r2,1
   100b4:	109e4b04 	addi	r2,r2,31020
   100b8:	10800383 	ldbu	r2,14(r2)
   100bc:	10803fcc 	andi	r2,r2,255
   100c0:	100b883a 	mov	r5,r2
   100c4:	1809883a 	mov	r4,r3
   100c8:	000aa240 	call	aa24 <__udivsi3>
   100cc:	10800044 	addi	r2,r2,1
   100d0:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   100d4:	00001f06 	br	10154 <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   100d8:	e0bff717 	ldw	r2,-36(fp)
   100dc:	d0e6e917 	ldw	r3,-25692(gp)
   100e0:	180b883a 	mov	r5,r3
   100e4:	1009883a 	mov	r4,r2
   100e8:	000df000 	call	df00 <Read_Sector_Data>
   100ec:	10001426 	beq	r2,zero,10140 <find_first_empty_cluster+0x14c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   100f0:	e0bff817 	ldw	r2,-32(fp)
   100f4:	10803fcc 	andi	r2,r2,255
   100f8:	1085883a 	add	r2,r2,r2
   100fc:	1007883a 	mov	r3,r2
   10100:	d0a6eb17 	ldw	r2,-25684(gp)
   10104:	10800a17 	ldw	r2,40(r2)
   10108:	1885883a 	add	r2,r3,r2
   1010c:	1080002b 	ldhuio	r2,0(r2)
   10110:	10bfffcc 	andi	r2,r2,65535
   10114:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   10118:	e0bff90f 	ldh	r2,-28(fp)
   1011c:	10000726 	beq	r2,zero,1013c <find_first_empty_cluster+0x148>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   10120:	e0bff817 	ldw	r2,-32(fp)
   10124:	10800044 	addi	r2,r2,1
   10128:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1012c:	e0bff817 	ldw	r2,-32(fp)
   10130:	10803fcc 	andi	r2,r2,255
   10134:	103fee1e 	bne	r2,zero,100f0 <__alt_data_end+0xfffde0f0>
   10138:	00000106 	br	10140 <find_first_empty_cluster+0x14c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
   1013c:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
   10140:	e0bff90f 	ldh	r2,-28(fp)
   10144:	10000926 	beq	r2,zero,1016c <find_first_empty_cluster+0x178>
        {
            break;
        }
        sector++;
   10148:	e0bff717 	ldw	r2,-36(fp)
   1014c:	10800044 	addi	r2,r2,1
   10150:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   10154:	00800074 	movhi	r2,1
   10158:	109e4b04 	addi	r2,r2,31020
   1015c:	10c01217 	ldw	r3,72(r2)
   10160:	e0bff717 	ldw	r2,-36(fp)
   10164:	18bfdc1e 	bne	r3,r2,100d8 <__alt_data_end+0xfffde0d8>
   10168:	00000106 	br	10170 <find_first_empty_cluster+0x17c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
   1016c:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   10170:	e0bff90f 	ldh	r2,-28(fp)
   10174:	1000081e 	bne	r2,zero,10198 <find_first_empty_cluster+0x1a4>
   10178:	e0bff90f 	ldh	r2,-28(fp)
   1017c:	e0fffb17 	ldw	r3,-20(fp)
   10180:	18800536 	bltu	r3,r2,10198 <find_first_empty_cluster+0x1a4>
    {
        *cluster_number = cluster_index;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	e0fff817 	ldw	r3,-32(fp)
   1018c:	10c00015 	stw	r3,0(r2)
		result = true;
   10190:	00800044 	movi	r2,1
   10194:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   10198:	e0bffa17 	ldw	r2,-24(fp)
}
   1019c:	e037883a 	mov	sp,fp
   101a0:	dfc00117 	ldw	ra,4(sp)
   101a4:	df000017 	ldw	fp,0(sp)
   101a8:	dec00204 	addi	sp,sp,8
   101ac:	f800283a 	ret

000101b0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   101b0:	defff604 	addi	sp,sp,-40
   101b4:	dfc00915 	stw	ra,36(sp)
   101b8:	df000815 	stw	fp,32(sp)
   101bc:	df000804 	addi	fp,sp,32
   101c0:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   101c4:	00bfffc4 	movi	r2,-1
   101c8:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   101cc:	e0bfff17 	ldw	r2,-4(fp)
   101d0:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   101d4:	e0bff917 	ldw	r2,-28(fp)
   101d8:	10ffff84 	addi	r3,r2,-2
   101dc:	00800074 	movhi	r2,1
   101e0:	109e4b04 	addi	r2,r2,31020
   101e4:	10800383 	ldbu	r2,14(r2)
   101e8:	10803fcc 	andi	r2,r2,255
   101ec:	100b883a 	mov	r5,r2
   101f0:	1809883a 	mov	r4,r3
   101f4:	000aae00 	call	aae0 <__mulsi3>
   101f8:	1007883a 	mov	r3,r2
   101fc:	00800074 	movhi	r2,1
   10200:	109e4b04 	addi	r2,r2,31020
   10204:	10801417 	ldw	r2,80(r2)
   10208:	1885883a 	add	r2,r3,r2
   1020c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10210:	e03ffa15 	stw	zero,-24(fp)
   10214:	00002c06 	br	102c8 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   10218:	e0fffa17 	ldw	r3,-24(fp)
   1021c:	e0bffc17 	ldw	r2,-16(fp)
   10220:	1885883a 	add	r2,r3,r2
   10224:	d0e6e917 	ldw	r3,-25692(gp)
   10228:	180b883a 	mov	r5,r3
   1022c:	1009883a 	mov	r4,r2
   10230:	000df000 	call	df00 <Read_Sector_Data>
   10234:	10002b26 	beq	r2,zero,102e4 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   10238:	e03ffb15 	stw	zero,-20(fp)
   1023c:	00001c06 	br	102b0 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   10240:	e0bffb17 	ldw	r2,-20(fp)
   10244:	1004917a 	slli	r2,r2,5
   10248:	1007883a 	mov	r3,r2
   1024c:	d0a6eb17 	ldw	r2,-25684(gp)
   10250:	10800a17 	ldw	r2,40(r2)
   10254:	1885883a 	add	r2,r3,r2
   10258:	10800023 	ldbuio	r2,0(r2)
   1025c:	10803fcc 	andi	r2,r2,255
   10260:	10803fcc 	andi	r2,r2,255
   10264:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   10268:	e0bffd0b 	ldhu	r2,-12(fp)
   1026c:	10803960 	cmpeqi	r2,r2,229
   10270:	1000021e 	bne	r2,zero,1027c <find_first_empty_record_in_a_subdirectory+0xcc>
   10274:	e0bffd0b 	ldhu	r2,-12(fp)
   10278:	10000a1e 	bne	r2,zero,102a4 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1027c:	e0bffa17 	ldw	r2,-24(fp)
   10280:	1006913a 	slli	r3,r2,4
   10284:	e0bffb17 	ldw	r2,-20(fp)
   10288:	1885883a 	add	r2,r3,r2
   1028c:	1006943a 	slli	r3,r2,16
   10290:	e0bff917 	ldw	r2,-28(fp)
   10294:	1884b03a 	or	r2,r3,r2
   10298:	e0bff815 	stw	r2,-32(fp)
                        return result;
   1029c:	e0bff817 	ldw	r2,-32(fp)
   102a0:	00005306 	br	103f0 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   102a4:	e0bffb17 	ldw	r2,-20(fp)
   102a8:	10800044 	addi	r2,r2,1
   102ac:	e0bffb15 	stw	r2,-20(fp)
   102b0:	e0bffb17 	ldw	r2,-20(fp)
   102b4:	10800410 	cmplti	r2,r2,16
   102b8:	103fe11e 	bne	r2,zero,10240 <__alt_data_end+0xfffde240>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   102bc:	e0bffa17 	ldw	r2,-24(fp)
   102c0:	10800044 	addi	r2,r2,1
   102c4:	e0bffa15 	stw	r2,-24(fp)
   102c8:	00800074 	movhi	r2,1
   102cc:	109e4b04 	addi	r2,r2,31020
   102d0:	10800383 	ldbu	r2,14(r2)
   102d4:	10803fcc 	andi	r2,r2,255
   102d8:	e0fffa17 	ldw	r3,-24(fp)
   102dc:	18bfce16 	blt	r3,r2,10218 <__alt_data_end+0xfffde218>
   102e0:	00000106 	br	102e8 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
   102e4:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   102e8:	e0bff817 	ldw	r2,-32(fp)
   102ec:	1000390e 	bge	r2,zero,103d4 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   102f0:	e0bff917 	ldw	r2,-28(fp)
   102f4:	e0fffd84 	addi	r3,fp,-10
   102f8:	180b883a 	mov	r5,r3
   102fc:	1009883a 	mov	r4,r2
   10300:	000dfd80 	call	dfd8 <get_cluster_flag>
   10304:	10003126 	beq	r2,zero,103cc <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   10308:	e0bffd8b 	ldhu	r2,-10(fp)
   1030c:	10bfffcc 	andi	r2,r2,65535
   10310:	10fffe0c 	andi	r3,r2,65528
   10314:	00bffe14 	movui	r2,65528
   10318:	18802e1e 	bne	r3,r2,103d4 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1031c:	e0bffe04 	addi	r2,fp,-8
   10320:	1009883a 	mov	r4,r2
   10324:	000fff40 	call	fff4 <find_first_empty_cluster>
   10328:	10002326 	beq	r2,zero,103b8 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1032c:	e0bff917 	ldw	r2,-28(fp)
   10330:	e0fffe17 	ldw	r3,-8(fp)
   10334:	18ffffcc 	andi	r3,r3,65535
   10338:	18e0001c 	xori	r3,r3,32768
   1033c:	18e00004 	addi	r3,r3,-32768
   10340:	01800044 	movi	r6,1
   10344:	180b883a 	mov	r5,r3
   10348:	1009883a 	mov	r4,r2
   1034c:	000e08c0 	call	e08c <mark_cluster>
   10350:	10001926 	beq	r2,zero,103b8 <find_first_empty_record_in_a_subdirectory+0x208>
   10354:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   10358:	01800044 	movi	r6,1
   1035c:	017fffc4 	movi	r5,-1
   10360:	1009883a 	mov	r4,r2
   10364:	000e08c0 	call	e08c <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   10368:	10001326 	beq	r2,zero,103b8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1036c:	e0bff917 	ldw	r2,-28(fp)
   10370:	e0fffe17 	ldw	r3,-8(fp)
   10374:	18ffffcc 	andi	r3,r3,65535
   10378:	18e0001c 	xori	r3,r3,32768
   1037c:	18e00004 	addi	r3,r3,-32768
   10380:	000d883a 	mov	r6,zero
   10384:	180b883a 	mov	r5,r3
   10388:	1009883a 	mov	r4,r2
   1038c:	000e08c0 	call	e08c <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   10390:	10000926 	beq	r2,zero,103b8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   10394:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   10398:	000d883a 	mov	r6,zero
   1039c:	017fffc4 	movi	r5,-1
   103a0:	1009883a 	mov	r4,r2
   103a4:	000e08c0 	call	e08c <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   103a8:	10000326 	beq	r2,zero,103b8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   103ac:	000deb40 	call	deb4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   103b8:	e0bffd8b 	ldhu	r2,-10(fp)
   103bc:	10bfffcc 	andi	r2,r2,65535
   103c0:	10bffe0c 	andi	r2,r2,65528
   103c4:	e0bff915 	stw	r2,-28(fp)
   103c8:	00000206 	br	103d4 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   103cc:	00bfffc4 	movi	r2,-1
   103d0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   103d4:	e0bff917 	ldw	r2,-28(fp)
   103d8:	00fffdd4 	movui	r3,65527
   103dc:	18800316 	blt	r3,r2,103ec <find_first_empty_record_in_a_subdirectory+0x23c>
   103e0:	e0bff817 	ldw	r2,-32(fp)
   103e4:	10bfffe0 	cmpeqi	r2,r2,-1
   103e8:	103f7a1e 	bne	r2,zero,101d4 <__alt_data_end+0xfffde1d4>
    return result; 
   103ec:	e0bff817 	ldw	r2,-32(fp)
}
   103f0:	e037883a 	mov	sp,fp
   103f4:	dfc00117 	ldw	ra,4(sp)
   103f8:	df000017 	ldw	fp,0(sp)
   103fc:	dec00204 	addi	sp,sp,8
   10400:	f800283a 	ret

00010404 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   10404:	defff904 	addi	sp,sp,-28
   10408:	dfc00615 	stw	ra,24(sp)
   1040c:	df000515 	stw	fp,20(sp)
   10410:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   10414:	00800074 	movhi	r2,1
   10418:	109e4b04 	addi	r2,r2,31020
   1041c:	1080050b 	ldhu	r2,20(r2)
   10420:	10bfffcc 	andi	r2,r2,65535
   10424:	1006917a 	slli	r3,r2,5
   10428:	00800074 	movhi	r2,1
   1042c:	109e4b04 	addi	r2,r2,31020
   10430:	1080030b 	ldhu	r2,12(r2)
   10434:	10bfffcc 	andi	r2,r2,65535
   10438:	100b883a 	mov	r5,r2
   1043c:	1809883a 	mov	r4,r3
   10440:	000a92c0 	call	a92c <__divsi3>
   10444:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   10448:	00bfffc4 	movi	r2,-1
   1044c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10450:	e03ffb15 	stw	zero,-20(fp)
   10454:	00002d06 	br	1050c <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   10458:	00800074 	movhi	r2,1
   1045c:	109e4b04 	addi	r2,r2,31020
   10460:	10c01317 	ldw	r3,76(r2)
   10464:	e0bffb17 	ldw	r2,-20(fp)
   10468:	1885883a 	add	r2,r3,r2
   1046c:	1007883a 	mov	r3,r2
   10470:	d0a6e917 	ldw	r2,-25692(gp)
   10474:	100b883a 	mov	r5,r2
   10478:	1809883a 	mov	r4,r3
   1047c:	000df000 	call	df00 <Read_Sector_Data>
   10480:	10002626 	beq	r2,zero,1051c <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   10484:	e03ffc15 	stw	zero,-16(fp)
   10488:	00001a06 	br	104f4 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1048c:	e0bffc17 	ldw	r2,-16(fp)
   10490:	1004917a 	slli	r2,r2,5
   10494:	1007883a 	mov	r3,r2
   10498:	d0a6eb17 	ldw	r2,-25684(gp)
   1049c:	10800a17 	ldw	r2,40(r2)
   104a0:	1885883a 	add	r2,r3,r2
   104a4:	10800023 	ldbuio	r2,0(r2)
   104a8:	10803fcc 	andi	r2,r2,255
   104ac:	10803fcc 	andi	r2,r2,255
   104b0:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   104b4:	e0bfff0b 	ldhu	r2,-4(fp)
   104b8:	10803960 	cmpeqi	r2,r2,229
   104bc:	1000021e 	bne	r2,zero,104c8 <find_first_empty_record_in_root_directory+0xc4>
   104c0:	e0bfff0b 	ldhu	r2,-4(fp)
   104c4:	1000081e 	bne	r2,zero,104e8 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
   104c8:	e0bffb17 	ldw	r2,-20(fp)
   104cc:	1006913a 	slli	r3,r2,4
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	1885883a 	add	r2,r3,r2
   104d8:	1004943a 	slli	r2,r2,16
   104dc:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   104e0:	e0bffe17 	ldw	r2,-8(fp)
   104e4:	00000f06 	br	10524 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   104e8:	e0bffc17 	ldw	r2,-16(fp)
   104ec:	10800044 	addi	r2,r2,1
   104f0:	e0bffc15 	stw	r2,-16(fp)
   104f4:	e0bffc17 	ldw	r2,-16(fp)
   104f8:	10800410 	cmplti	r2,r2,16
   104fc:	103fe31e 	bne	r2,zero,1048c <__alt_data_end+0xfffde48c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10500:	e0bffb17 	ldw	r2,-20(fp)
   10504:	10800044 	addi	r2,r2,1
   10508:	e0bffb15 	stw	r2,-20(fp)
   1050c:	e0fffb17 	ldw	r3,-20(fp)
   10510:	e0bffd17 	ldw	r2,-12(fp)
   10514:	18bfd016 	blt	r3,r2,10458 <__alt_data_end+0xfffde458>
   10518:	00000106 	br	10520 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
   1051c:	0001883a 	nop
        }
    }
    return result;
   10520:	e0bffe17 	ldw	r2,-8(fp)
}
   10524:	e037883a 	mov	sp,fp
   10528:	dfc00117 	ldw	ra,4(sp)
   1052c:	df000017 	ldw	fp,0(sp)
   10530:	dec00204 	addi	sp,sp,8
   10534:	f800283a 	ret

00010538 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   10538:	defffa04 	addi	sp,sp,-24
   1053c:	df000515 	stw	fp,20(sp)
   10540:	df000504 	addi	fp,sp,20
   10544:	e13ffd15 	stw	r4,-12(fp)
   10548:	e17ffe15 	stw	r5,-8(fp)
   1054c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   10550:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   10554:	e03ffb15 	stw	zero,-20(fp)
   10558:	00002506 	br	105f0 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1055c:	e0bffc17 	ldw	r2,-16(fp)
   10560:	e0fffd17 	ldw	r3,-12(fp)
   10564:	1885883a 	add	r2,r3,r2
   10568:	10800003 	ldbu	r2,0(r2)
   1056c:	10803fcc 	andi	r2,r2,255
   10570:	1080201c 	xori	r2,r2,128
   10574:	10bfe004 	addi	r2,r2,-128
   10578:	10800ba0 	cmpeqi	r2,r2,46
   1057c:	1000141e 	bne	r2,zero,105d0 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   10580:	e0bffb17 	ldw	r2,-20(fp)
   10584:	e0fffe17 	ldw	r3,-8(fp)
   10588:	1885883a 	add	r2,r3,r2
   1058c:	e0fffc17 	ldw	r3,-16(fp)
   10590:	e13ffd17 	ldw	r4,-12(fp)
   10594:	20c7883a 	add	r3,r4,r3
   10598:	18c00003 	ldbu	r3,0(r3)
   1059c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   105a0:	e0bffc17 	ldw	r2,-16(fp)
   105a4:	e0fffd17 	ldw	r3,-12(fp)
   105a8:	1885883a 	add	r2,r3,r2
   105ac:	10800003 	ldbu	r2,0(r2)
   105b0:	10803fcc 	andi	r2,r2,255
   105b4:	1080201c 	xori	r2,r2,128
   105b8:	10bfe004 	addi	r2,r2,-128
   105bc:	10000926 	beq	r2,zero,105e4 <convert_filename_to_name_extension+0xac>
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	10800044 	addi	r2,r2,1
   105c8:	e0bffc15 	stw	r2,-16(fp)
   105cc:	00000506 	br	105e4 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   105d0:	e0bffb17 	ldw	r2,-20(fp)
   105d4:	e0fffe17 	ldw	r3,-8(fp)
   105d8:	1885883a 	add	r2,r3,r2
   105dc:	00c00804 	movi	r3,32
   105e0:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   105e4:	e0bffb17 	ldw	r2,-20(fp)
   105e8:	10800044 	addi	r2,r2,1
   105ec:	e0bffb15 	stw	r2,-20(fp)
   105f0:	e0bffb17 	ldw	r2,-20(fp)
   105f4:	10800210 	cmplti	r2,r2,8
   105f8:	103fd81e 	bne	r2,zero,1055c <__alt_data_end+0xfffde55c>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   105fc:	e0bffc17 	ldw	r2,-16(fp)
   10600:	e0fffd17 	ldw	r3,-12(fp)
   10604:	1885883a 	add	r2,r3,r2
   10608:	10800003 	ldbu	r2,0(r2)
   1060c:	10803fcc 	andi	r2,r2,255
   10610:	1080201c 	xori	r2,r2,128
   10614:	10bfe004 	addi	r2,r2,-128
   10618:	10800b98 	cmpnei	r2,r2,46
   1061c:	1000031e 	bne	r2,zero,1062c <convert_filename_to_name_extension+0xf4>
   10620:	e0bffc17 	ldw	r2,-16(fp)
   10624:	10800044 	addi	r2,r2,1
   10628:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1062c:	e03ffb15 	stw	zero,-20(fp)
   10630:	00001c06 	br	106a4 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   10634:	e0bffc17 	ldw	r2,-16(fp)
   10638:	e0fffd17 	ldw	r3,-12(fp)
   1063c:	1885883a 	add	r2,r3,r2
   10640:	10800003 	ldbu	r2,0(r2)
   10644:	10803fcc 	andi	r2,r2,255
   10648:	1080201c 	xori	r2,r2,128
   1064c:	10bfe004 	addi	r2,r2,-128
   10650:	10000c26 	beq	r2,zero,10684 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   10654:	e0bffb17 	ldw	r2,-20(fp)
   10658:	e0ffff17 	ldw	r3,-4(fp)
   1065c:	1885883a 	add	r2,r3,r2
   10660:	e0fffc17 	ldw	r3,-16(fp)
   10664:	e13ffd17 	ldw	r4,-12(fp)
   10668:	20c7883a 	add	r3,r4,r3
   1066c:	18c00003 	ldbu	r3,0(r3)
   10670:	10c00005 	stb	r3,0(r2)
            local++;
   10674:	e0bffc17 	ldw	r2,-16(fp)
   10678:	10800044 	addi	r2,r2,1
   1067c:	e0bffc15 	stw	r2,-16(fp)
   10680:	00000506 	br	10698 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   10684:	e0bffb17 	ldw	r2,-20(fp)
   10688:	e0ffff17 	ldw	r3,-4(fp)
   1068c:	1885883a 	add	r2,r3,r2
   10690:	00c00804 	movi	r3,32
   10694:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   10698:	e0bffb17 	ldw	r2,-20(fp)
   1069c:	10800044 	addi	r2,r2,1
   106a0:	e0bffb15 	stw	r2,-20(fp)
   106a4:	e0bffb17 	ldw	r2,-20(fp)
   106a8:	108000d0 	cmplti	r2,r2,3
   106ac:	103fe11e 	bne	r2,zero,10634 <__alt_data_end+0xfffde634>
        {
            extension[counter] = ' ';
        }
    }

}
   106b0:	0001883a 	nop
   106b4:	e037883a 	mov	sp,fp
   106b8:	df000017 	ldw	fp,0(sp)
   106bc:	dec00104 	addi	sp,sp,4
   106c0:	f800283a 	ret

000106c4 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   106c4:	defff404 	addi	sp,sp,-48
   106c8:	dfc00b15 	stw	ra,44(sp)
   106cc:	df000a15 	stw	fp,40(sp)
   106d0:	dc000915 	stw	r16,36(sp)
   106d4:	df000a04 	addi	fp,sp,40
   106d8:	e13ffc15 	stw	r4,-16(fp)
   106dc:	e17ffd15 	stw	r5,-12(fp)
   106e0:	e1bffe15 	stw	r6,-8(fp)
    unsigned int cluster_number;
    bool result = false;
   106e4:	e03ff615 	stw	zero,-40(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   106e8:	e0bffb04 	addi	r2,fp,-20
   106ec:	1009883a 	mov	r4,r2
   106f0:	000fff40 	call	fff4 <find_first_empty_cluster>
   106f4:	1000a226 	beq	r2,zero,10980 <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   106f8:	e0bffe17 	ldw	r2,-8(fp)
   106fc:	10800a17 	ldw	r2,40(r2)
   10700:	1000031e 	bne	r2,zero,10710 <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   10704:	00104040 	call	10404 <find_first_empty_record_in_root_directory>
   10708:	e0bff715 	stw	r2,-36(fp)
   1070c:	00000606 	br	10728 <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   10710:	e0bffe17 	ldw	r2,-8(fp)
   10714:	1080058b 	ldhu	r2,22(r2)
   10718:	10bfffcc 	andi	r2,r2,65535
   1071c:	1009883a 	mov	r4,r2
   10720:	00101b00 	call	101b0 <find_first_empty_record_in_a_subdirectory>
   10724:	e0bff715 	stw	r2,-36(fp)
        }
        if (record_index >= 0)
   10728:	e0bff717 	ldw	r2,-36(fp)
   1072c:	10009416 	blt	r2,zero,10980 <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   10730:	e13ffc17 	ldw	r4,-16(fp)
   10734:	000f2d40 	call	f2d4 <get_dir_divider_location>
   10738:	e0bff815 	stw	r2,-32(fp)
            int last_dir_separator = 0;
   1073c:	e03ff915 	stw	zero,-28(fp)

            // Skip through all directory separators.
            while (location > 0)
   10740:	00000b06 	br	10770 <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
   10744:	e0fff917 	ldw	r3,-28(fp)
   10748:	e0bff817 	ldw	r2,-32(fp)
   1074c:	1885883a 	add	r2,r3,r2
   10750:	10800044 	addi	r2,r2,1
   10754:	e0bff915 	stw	r2,-28(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	e0fffc17 	ldw	r3,-16(fp)
   10760:	1885883a 	add	r2,r3,r2
   10764:	1009883a 	mov	r4,r2
   10768:	000f2d40 	call	f2d4 <get_dir_divider_location>
   1076c:	e0bff815 	stw	r2,-32(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   10770:	e0bff817 	ldw	r2,-32(fp)
   10774:	00bff316 	blt	zero,r2,10744 <__alt_data_end+0xfffde744>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   10778:	e0bff917 	ldw	r2,-28(fp)
   1077c:	e0fffc17 	ldw	r3,-16(fp)
   10780:	1887883a 	add	r3,r3,r2
   10784:	e13ffd17 	ldw	r4,-12(fp)
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	10800204 	addi	r2,r2,8
   10790:	100d883a 	mov	r6,r2
   10794:	200b883a 	mov	r5,r4
   10798:	1809883a 	mov	r4,r3
   1079c:	00105380 	call	10538 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   107a8:	e0bffd17 	ldw	r2,-12(fp)
   107ac:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   107b0:	e0bffd17 	ldw	r2,-12(fp)
   107b4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   107c0:	e0bffd17 	ldw	r2,-12(fp)
   107c4:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   107d0:	e0bffb17 	ldw	r2,-20(fp)
   107d4:	1007883a 	mov	r3,r2
   107d8:	e0bffd17 	ldw	r2,-12(fp)
   107dc:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   107e0:	e0bffd17 	ldw	r2,-12(fp)
   107e4:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   107e8:	e0fffb17 	ldw	r3,-20(fp)
   107ec:	e0bffd17 	ldw	r2,-12(fp)
   107f0:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   107f4:	e0bffd17 	ldw	r2,-12(fp)
   107f8:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   10804:	e0bff717 	ldw	r2,-36(fp)
   10808:	10ffffcc 	andi	r3,r2,65535
   1080c:	e0bffd17 	ldw	r2,-12(fp)
   10810:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   10814:	e0bff717 	ldw	r2,-36(fp)
   10818:	1004d43a 	srli	r2,r2,16
   1081c:	1000010e 	bge	r2,zero,10824 <create_file+0x160>
   10820:	108003c4 	addi	r2,r2,15
   10824:	1005d13a 	srai	r2,r2,4
   10828:	1007883a 	mov	r3,r2
   1082c:	e0bffd17 	ldw	r2,-12(fp)
   10830:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   10834:	e0bff717 	ldw	r2,-36(fp)
   10838:	1004d43a 	srli	r2,r2,16
   1083c:	1007883a 	mov	r3,r2
   10840:	00a00034 	movhi	r2,32768
   10844:	108003c4 	addi	r2,r2,15
   10848:	1884703a 	and	r2,r3,r2
   1084c:	1000040e 	bge	r2,zero,10860 <create_file+0x19c>
   10850:	10bfffc4 	addi	r2,r2,-1
   10854:	00fffc04 	movi	r3,-16
   10858:	10c4b03a 	or	r2,r2,r3
   1085c:	10800044 	addi	r2,r2,1
   10860:	1004917a 	slli	r2,r2,5
   10864:	1007883a 	mov	r3,r2
   10868:	e0bffd17 	ldw	r2,-12(fp)
   1086c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   10870:	e0bffe17 	ldw	r2,-8(fp)
   10874:	1080058b 	ldhu	r2,22(r2)
   10878:	10ffffcc 	andi	r3,r2,65535
   1087c:	e0bffd17 	ldw	r2,-12(fp)
   10880:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   10884:	e0bffd17 	ldw	r2,-12(fp)
   10888:	00c00044 	movi	r3,1
   1088c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	00c00044 	movi	r3,1
   10898:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1089c:	e0bffd17 	ldw	r2,-12(fp)
   108a0:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   108a4:	1000071e 	bne	r2,zero,108c4 <create_file+0x200>
   108a8:	00800074 	movhi	r2,1
   108ac:	109e4b04 	addi	r2,r2,31020
   108b0:	10c01317 	ldw	r3,76(r2)
   108b4:	e0bffd17 	ldw	r2,-12(fp)
   108b8:	10800b17 	ldw	r2,44(r2)
   108bc:	1885883a 	add	r2,r3,r2
   108c0:	00001106 	br	10908 <create_file+0x244>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   108c4:	00800074 	movhi	r2,1
   108c8:	109e4b04 	addi	r2,r2,31020
   108cc:	14001417 	ldw	r16,80(r2)
   108d0:	e0bffd17 	ldw	r2,-12(fp)
   108d4:	10800a17 	ldw	r2,40(r2)
   108d8:	10ffff84 	addi	r3,r2,-2
   108dc:	00800074 	movhi	r2,1
   108e0:	109e4b04 	addi	r2,r2,31020
   108e4:	10800383 	ldbu	r2,14(r2)
   108e8:	10803fcc 	andi	r2,r2,255
   108ec:	100b883a 	mov	r5,r2
   108f0:	1809883a 	mov	r4,r3
   108f4:	000aae00 	call	aae0 <__mulsi3>
   108f8:	8087883a 	add	r3,r16,r2
                                     file_record->file_record_sector_in_cluster);
   108fc:	e0bffd17 	ldw	r2,-12(fp)
   10900:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   10904:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   10908:	e0bffa15 	stw	r2,-24(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1090c:	e0bffa17 	ldw	r2,-24(fp)
   10910:	d0e6e917 	ldw	r3,-25692(gp)
   10914:	180b883a 	mov	r5,r3
   10918:	1009883a 	mov	r4,r2
   1091c:	000df000 	call	df00 <Read_Sector_Data>
   10920:	10001726 	beq	r2,zero,10980 <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   10924:	e0bffd17 	ldw	r2,-12(fp)
   10928:	10800c0b 	ldhu	r2,48(r2)
   1092c:	10bfffcc 	andi	r2,r2,65535
   10930:	10a0001c 	xori	r2,r2,32768
   10934:	10a00004 	addi	r2,r2,-32768
   10938:	e17ffd17 	ldw	r5,-12(fp)
   1093c:	1009883a 	mov	r4,r2
   10940:	000e58c0 	call	e58c <Write_File_Record_At_Offset>
   10944:	10000e26 	beq	r2,zero,10980 <create_file+0x2bc>
                {
                    Save_Modified_Sector();
   10948:	000deb40 	call	deb4 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1094c:	e0bffb17 	ldw	r2,-20(fp)
   10950:	01800044 	movi	r6,1
   10954:	017fffc4 	movi	r5,-1
   10958:	1009883a 	mov	r4,r2
   1095c:	000e08c0 	call	e08c <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   10960:	e0bffb17 	ldw	r2,-20(fp)
   10964:	000d883a 	mov	r6,zero
   10968:	017fffc4 	movi	r5,-1
   1096c:	1009883a 	mov	r4,r2
   10970:	000e08c0 	call	e08c <mark_cluster>
   10974:	10000226 	beq	r2,zero,10980 <create_file+0x2bc>
                    {
                        result = true;
   10978:	00800044 	movi	r2,1
   1097c:	e0bff615 	stw	r2,-40(fp)
                }
            }
        }

    }
    return result;           
   10980:	e0bff617 	ldw	r2,-40(fp)
}
   10984:	e6ffff04 	addi	sp,fp,-4
   10988:	dfc00217 	ldw	ra,8(sp)
   1098c:	df000117 	ldw	fp,4(sp)
   10990:	dc000017 	ldw	r16,0(sp)
   10994:	dec00304 	addi	sp,sp,12
   10998:	f800283a 	ret

0001099c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1099c:	defffb04 	addi	sp,sp,-20
   109a0:	df000415 	stw	fp,16(sp)
   109a4:	df000404 	addi	fp,sp,16
   109a8:	e13ffe15 	stw	r4,-8(fp)
   109ac:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   109b0:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   109b4:	e03ffc15 	stw	zero,-16(fp)
   109b8:	00001506 	br	10a10 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   109bc:	e0fffe17 	ldw	r3,-8(fp)
   109c0:	e0bffc17 	ldw	r2,-16(fp)
   109c4:	1885883a 	add	r2,r3,r2
   109c8:	10800003 	ldbu	r2,0(r2)
   109cc:	10803fcc 	andi	r2,r2,255
   109d0:	10800820 	cmpeqi	r2,r2,32
   109d4:	10000b1e 	bne	r2,zero,10a04 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   109d8:	e0bffd17 	ldw	r2,-12(fp)
   109dc:	e0ffff17 	ldw	r3,-4(fp)
   109e0:	1885883a 	add	r2,r3,r2
   109e4:	e13ffe17 	ldw	r4,-8(fp)
   109e8:	e0fffc17 	ldw	r3,-16(fp)
   109ec:	20c7883a 	add	r3,r4,r3
   109f0:	18c00003 	ldbu	r3,0(r3)
   109f4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   109f8:	e0bffd17 	ldw	r2,-12(fp)
   109fc:	10800044 	addi	r2,r2,1
   10a00:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	10800044 	addi	r2,r2,1
   10a0c:	e0bffc15 	stw	r2,-16(fp)
   10a10:	e0bffc17 	ldw	r2,-16(fp)
   10a14:	10800210 	cmplti	r2,r2,8
   10a18:	103fe81e 	bne	r2,zero,109bc <__alt_data_end+0xfffde9bc>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   10a1c:	e0bffe17 	ldw	r2,-8(fp)
   10a20:	10800203 	ldbu	r2,8(r2)
   10a24:	10803fcc 	andi	r2,r2,255
   10a28:	10800820 	cmpeqi	r2,r2,32
   10a2c:	1000241e 	bne	r2,zero,10ac0 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	e0ffff17 	ldw	r3,-4(fp)
   10a38:	1885883a 	add	r2,r3,r2
   10a3c:	00c00b84 	movi	r3,46
   10a40:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	10800044 	addi	r2,r2,1
   10a4c:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   10a50:	e03ffc15 	stw	zero,-16(fp)
   10a54:	00001706 	br	10ab4 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   10a58:	e0fffe17 	ldw	r3,-8(fp)
   10a5c:	e0bffc17 	ldw	r2,-16(fp)
   10a60:	1885883a 	add	r2,r3,r2
   10a64:	10800204 	addi	r2,r2,8
   10a68:	10800003 	ldbu	r2,0(r2)
   10a6c:	10803fcc 	andi	r2,r2,255
   10a70:	10800820 	cmpeqi	r2,r2,32
   10a74:	10000c1e 	bne	r2,zero,10aa8 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   10a78:	e0bffd17 	ldw	r2,-12(fp)
   10a7c:	e0ffff17 	ldw	r3,-4(fp)
   10a80:	1885883a 	add	r2,r3,r2
   10a84:	e13ffe17 	ldw	r4,-8(fp)
   10a88:	e0fffc17 	ldw	r3,-16(fp)
   10a8c:	20c7883a 	add	r3,r4,r3
   10a90:	18c00204 	addi	r3,r3,8
   10a94:	18c00003 	ldbu	r3,0(r3)
   10a98:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   10a9c:	e0bffd17 	ldw	r2,-12(fp)
   10aa0:	10800044 	addi	r2,r2,1
   10aa4:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   10aa8:	e0bffc17 	ldw	r2,-16(fp)
   10aac:	10800044 	addi	r2,r2,1
   10ab0:	e0bffc15 	stw	r2,-16(fp)
   10ab4:	e0bffc17 	ldw	r2,-16(fp)
   10ab8:	108000d0 	cmplti	r2,r2,3
   10abc:	103fe61e 	bne	r2,zero,10a58 <__alt_data_end+0xfffdea58>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   10ac0:	e0bffd17 	ldw	r2,-12(fp)
   10ac4:	e0ffff17 	ldw	r3,-4(fp)
   10ac8:	1885883a 	add	r2,r3,r2
   10acc:	10000005 	stb	zero,0(r2)
}
   10ad0:	0001883a 	nop
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	df000017 	ldw	fp,0(sp)
   10adc:	dec00104 	addi	sp,sp,4
   10ae0:	f800283a 	ret

00010ae4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   10ae4:	defffc04 	addi	sp,sp,-16
   10ae8:	dfc00315 	stw	ra,12(sp)
   10aec:	df000215 	stw	fp,8(sp)
   10af0:	df000204 	addi	fp,sp,8
   10af4:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   10af8:	d1600804 	addi	r5,gp,-32736
   10afc:	e13fff17 	ldw	r4,-4(fp)
   10b00:	0012ef00 	call	12ef0 <alt_find_dev>
   10b04:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   10b08:	e0bffe17 	ldw	r2,-8(fp)
   10b0c:	10001e26 	beq	r2,zero,10b88 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   10b10:	e0bffe17 	ldw	r2,-8(fp)
   10b14:	10800a17 	ldw	r2,40(r2)
   10b18:	10808d04 	addi	r2,r2,564
   10b1c:	d0a6e315 	stw	r2,-25716(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   10b20:	e0bffe17 	ldw	r2,-8(fp)
   10b24:	10800a17 	ldw	r2,40(r2)
   10b28:	10808904 	addi	r2,r2,548
   10b2c:	d0a6e415 	stw	r2,-25712(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   10b30:	e0bffe17 	ldw	r2,-8(fp)
   10b34:	10800a17 	ldw	r2,40(r2)
   10b38:	10808404 	addi	r2,r2,528
   10b3c:	d0a6e515 	stw	r2,-25708(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   10b40:	e0bffe17 	ldw	r2,-8(fp)
   10b44:	10800a17 	ldw	r2,40(r2)
   10b48:	10808c04 	addi	r2,r2,560
   10b4c:	d0a6e615 	stw	r2,-25704(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   10b50:	e0bffe17 	ldw	r2,-8(fp)
   10b54:	10800a17 	ldw	r2,40(r2)
   10b58:	10808b04 	addi	r2,r2,556
   10b5c:	d0a6e715 	stw	r2,-25700(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   10b60:	e0bffe17 	ldw	r2,-8(fp)
   10b64:	10800a17 	ldw	r2,40(r2)
   10b68:	d0a6e815 	stw	r2,-25696(gp)
		device_pointer = dev;
   10b6c:	e0bffe17 	ldw	r2,-8(fp)
   10b70:	d0a6eb15 	stw	r2,-25684(gp)
		initialized = false;
   10b74:	d026e115 	stw	zero,-25724(gp)
		is_sd_card_formated_as_FAT16 = false;
   10b78:	d026e215 	stw	zero,-25720(gp)
		search_data.valid = false;
   10b7c:	00800074 	movhi	r2,1
   10b80:	109e4604 	addi	r2,r2,31000
   10b84:	10000415 	stw	zero,16(r2)
	}
	return dev;
   10b88:	e0bffe17 	ldw	r2,-8(fp)
}
   10b8c:	e037883a 	mov	sp,fp
   10b90:	dfc00117 	ldw	ra,4(sp)
   10b94:	df000017 	ldw	fp,0(sp)
   10b98:	dec00204 	addi	sp,sp,8
   10b9c:	f800283a 	ret

00010ba0 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   10ba0:	defffd04 	addi	sp,sp,-12
   10ba4:	df000215 	stw	fp,8(sp)
   10ba8:	df000204 	addi	fp,sp,8
    bool result = false;
   10bac:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   10bb0:	d0a6eb17 	ldw	r2,-25684(gp)
   10bb4:	10000826 	beq	r2,zero,10bd8 <alt_up_sd_card_is_Present+0x38>
   10bb8:	d0a6e317 	ldw	r2,-25716(gp)
   10bbc:	1080002b 	ldhuio	r2,0(r2)
   10bc0:	10bfffcc 	andi	r2,r2,65535
   10bc4:	1080008c 	andi	r2,r2,2
   10bc8:	10000326 	beq	r2,zero,10bd8 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   10bcc:	00800044 	movi	r2,1
   10bd0:	e0bffe15 	stw	r2,-8(fp)
   10bd4:	00001e06 	br	10c50 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   10bd8:	d0a6e117 	ldw	r2,-25724(gp)
   10bdc:	10800058 	cmpnei	r2,r2,1
   10be0:	10001b1e 	bne	r2,zero,10c50 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   10be4:	d026e115 	stw	zero,-25724(gp)
		search_data.valid = false;
   10be8:	00800074 	movhi	r2,1
   10bec:	109e4604 	addi	r2,r2,31000
   10bf0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   10bf4:	d026e215 	stw	zero,-25720(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   10bf8:	e03fff15 	stw	zero,-4(fp)
   10bfc:	00001106 	br	10c44 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   10c00:	00800074 	movhi	r2,1
   10c04:	109e6004 	addi	r2,r2,31104
   10c08:	e0ffff17 	ldw	r3,-4(fp)
   10c0c:	180691ba 	slli	r3,r3,6
   10c10:	10c5883a 	add	r2,r2,r3
   10c14:	10800f04 	addi	r2,r2,60
   10c18:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   10c1c:	00800074 	movhi	r2,1
   10c20:	109e6004 	addi	r2,r2,31104
   10c24:	e0ffff17 	ldw	r3,-4(fp)
   10c28:	180691ba 	slli	r3,r3,6
   10c2c:	10c5883a 	add	r2,r2,r3
   10c30:	10800e04 	addi	r2,r2,56
   10c34:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   10c38:	e0bfff17 	ldw	r2,-4(fp)
   10c3c:	10800044 	addi	r2,r2,1
   10c40:	e0bfff15 	stw	r2,-4(fp)
   10c44:	e0bfff17 	ldw	r2,-4(fp)
   10c48:	10800510 	cmplti	r2,r2,20
   10c4c:	103fec1e 	bne	r2,zero,10c00 <__alt_data_end+0xfffdec00>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   10c50:	e0bffe17 	ldw	r2,-8(fp)
}
   10c54:	e037883a 	mov	sp,fp
   10c58:	df000017 	ldw	fp,0(sp)
   10c5c:	dec00104 	addi	sp,sp,4
   10c60:	f800283a 	ret

00010c64 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   10c64:	defffd04 	addi	sp,sp,-12
   10c68:	dfc00215 	stw	ra,8(sp)
   10c6c:	df000115 	stw	fp,4(sp)
   10c70:	df000104 	addi	fp,sp,4
	bool result = false;
   10c74:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   10c78:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
   10c7c:	10000c26 	beq	r2,zero,10cb0 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   10c80:	d0a6e117 	ldw	r2,-25724(gp)
   10c84:	1000071e 	bne	r2,zero,10ca4 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   10c88:	000eeb80 	call	eeb8 <Look_for_FAT16>
   10c8c:	d0a6e215 	stw	r2,-25720(gp)
			initialized = is_sd_card_formated_as_FAT16;
   10c90:	d0a6e217 	ldw	r2,-25720(gp)
   10c94:	d0a6e115 	stw	r2,-25724(gp)
			search_data.valid = false;
   10c98:	00800074 	movhi	r2,1
   10c9c:	109e4604 	addi	r2,r2,31000
   10ca0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   10ca4:	d0a6e217 	ldw	r2,-25720(gp)
   10ca8:	e0bfff15 	stw	r2,-4(fp)
   10cac:	00000206 	br	10cb8 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   10cb0:	d026e115 	stw	zero,-25724(gp)
		is_sd_card_formated_as_FAT16 = false;
   10cb4:	d026e215 	stw	zero,-25720(gp)
	}

	return result;
   10cb8:	e0bfff17 	ldw	r2,-4(fp)
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	dfc00117 	ldw	ra,4(sp)
   10cc4:	df000017 	ldw	fp,0(sp)
   10cc8:	dec00204 	addi	sp,sp,8
   10ccc:	f800283a 	ret

00010cd0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   10cd0:	deffea04 	addi	sp,sp,-88
   10cd4:	dfc01515 	stw	ra,84(sp)
   10cd8:	df001415 	stw	fp,80(sp)
   10cdc:	df001404 	addi	fp,sp,80
   10ce0:	e13ffe15 	stw	r4,-8(fp)
   10ce4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   10ce8:	00800084 	movi	r2,2
   10cec:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   10cf0:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
   10cf4:	10002426 	beq	r2,zero,10d88 <alt_up_sd_card_find_first+0xb8>
   10cf8:	d0a6e217 	ldw	r2,-25720(gp)
   10cfc:	10002226 	beq	r2,zero,10d88 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   10d00:	e0ffee04 	addi	r3,fp,-72
   10d04:	e0bfed04 	addi	r2,fp,-76
   10d08:	180d883a 	mov	r6,r3
   10d0c:	100b883a 	mov	r5,r2
   10d10:	e13ffe17 	ldw	r4,-8(fp)
   10d14:	000f6280 	call	f628 <get_home_directory_cluster_for_file>
   10d18:	10001926 	beq	r2,zero,10d80 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   10d1c:	e0bfed17 	ldw	r2,-76(fp)
   10d20:	1007883a 	mov	r3,r2
   10d24:	00800074 	movhi	r2,1
   10d28:	109e4604 	addi	r2,r2,31000
   10d2c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   10d30:	e0bfed17 	ldw	r2,-76(fp)
   10d34:	1007883a 	mov	r3,r2
   10d38:	00800074 	movhi	r2,1
   10d3c:	109e4604 	addi	r2,r2,31000
   10d40:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   10d44:	00800074 	movhi	r2,1
   10d48:	109e4604 	addi	r2,r2,31000
   10d4c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   10d50:	00800074 	movhi	r2,1
   10d54:	109e4604 	addi	r2,r2,31000
   10d58:	00ffffc4 	movi	r3,-1
   10d5c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   10d60:	00800074 	movhi	r2,1
   10d64:	109e4604 	addi	r2,r2,31000
   10d68:	00c00044 	movi	r3,1
   10d6c:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   10d70:	e13fff17 	ldw	r4,-4(fp)
   10d74:	0010da00 	call	10da0 <alt_up_sd_card_find_next>
   10d78:	e0bfec0d 	sth	r2,-80(fp)
   10d7c:	00000206 	br	10d88 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   10d80:	00800044 	movi	r2,1
   10d84:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   10d88:	e0bfec0b 	ldhu	r2,-80(fp)
}
   10d8c:	e037883a 	mov	sp,fp
   10d90:	dfc00117 	ldw	ra,4(sp)
   10d94:	df000017 	ldw	fp,0(sp)
   10d98:	dec00204 	addi	sp,sp,8
   10d9c:	f800283a 	ret

00010da0 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   10da0:	deffe404 	addi	sp,sp,-112
   10da4:	dfc01b15 	stw	ra,108(sp)
   10da8:	df001a15 	stw	fp,104(sp)
   10dac:	df001a04 	addi	fp,sp,104
   10db0:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   10db4:	00800084 	movi	r2,2
   10db8:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   10dbc:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
   10dc0:	1000e326 	beq	r2,zero,11150 <alt_up_sd_card_find_next+0x3b0>
   10dc4:	d0a6e217 	ldw	r2,-25720(gp)
   10dc8:	1000e126 	beq	r2,zero,11150 <alt_up_sd_card_find_next+0x3b0>
	{
		if (search_data.valid)
   10dcc:	00800074 	movhi	r2,1
   10dd0:	109e4604 	addi	r2,r2,31000
   10dd4:	10800417 	ldw	r2,16(r2)
   10dd8:	1000db26 	beq	r2,zero,11148 <alt_up_sd_card_find_next+0x3a8>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   10ddc:	00800074 	movhi	r2,1
   10de0:	109e4604 	addi	r2,r2,31000
   10de4:	10800117 	ldw	r2,4(r2)
   10de8:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   10dec:	e0bfe717 	ldw	r2,-100(fp)
   10df0:	1000581e 	bne	r2,zero,10f54 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   10df4:	00800074 	movhi	r2,1
   10df8:	109e4b04 	addi	r2,r2,31020
   10dfc:	1080050b 	ldhu	r2,20(r2)
   10e00:	10bfffcc 	andi	r2,r2,65535
   10e04:	1006917a 	slli	r3,r2,5
   10e08:	00800074 	movhi	r2,1
   10e0c:	109e4b04 	addi	r2,r2,31020
   10e10:	1080030b 	ldhu	r2,12(r2)
   10e14:	10bfffcc 	andi	r2,r2,65535
   10e18:	100b883a 	mov	r5,r2
   10e1c:	1809883a 	mov	r4,r3
   10e20:	000a92c0 	call	a92c <__divsi3>
   10e24:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   10e28:	00800074 	movhi	r2,1
   10e2c:	109e4604 	addi	r2,r2,31000
   10e30:	10800217 	ldw	r2,8(r2)
   10e34:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   10e38:	00800074 	movhi	r2,1
   10e3c:	109e4604 	addi	r2,r2,31000
   10e40:	1080030b 	ldhu	r2,12(r2)
   10e44:	10bfffcc 	andi	r2,r2,65535
   10e48:	10a0001c 	xori	r2,r2,32768
   10e4c:	10a00004 	addi	r2,r2,-32768
   10e50:	10800044 	addi	r2,r2,1
   10e54:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   10e58:	00003606 	br	10f34 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   10e5c:	00800074 	movhi	r2,1
   10e60:	109e4b04 	addi	r2,r2,31020
   10e64:	10c01317 	ldw	r3,76(r2)
   10e68:	e0bfe817 	ldw	r2,-96(fp)
   10e6c:	1885883a 	add	r2,r3,r2
   10e70:	1007883a 	mov	r3,r2
   10e74:	d0a6e917 	ldw	r2,-25692(gp)
   10e78:	100b883a 	mov	r5,r2
   10e7c:	1809883a 	mov	r4,r3
   10e80:	000df000 	call	df00 <Read_Sector_Data>
   10e84:	10002f26 	beq	r2,zero,10f44 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   10e88:	00002306 	br	10f18 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   10e8c:	e0bfe917 	ldw	r2,-92(fp)
   10e90:	1004917a 	slli	r2,r2,5
   10e94:	e13fe817 	ldw	r4,-96(fp)
   10e98:	e0ffef04 	addi	r3,fp,-68
   10e9c:	200f883a 	mov	r7,r4
   10ea0:	000d883a 	mov	r6,zero
   10ea4:	180b883a 	mov	r5,r3
   10ea8:	1009883a 	mov	r4,r2
   10eac:	000e3100 	call	e310 <Read_File_Record_At_Offset>
   10eb0:	10001626 	beq	r2,zero,10f0c <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   10eb4:	e0bfef03 	ldbu	r2,-68(fp)
   10eb8:	10803fcc 	andi	r2,r2,255
   10ebc:	10001326 	beq	r2,zero,10f0c <alt_up_sd_card_find_next+0x16c>
   10ec0:	e0bfef03 	ldbu	r2,-68(fp)
   10ec4:	10803fcc 	andi	r2,r2,255
   10ec8:	10803960 	cmpeqi	r2,r2,229
   10ecc:	10000f1e 	bne	r2,zero,10f0c <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   10ed0:	e0bfe917 	ldw	r2,-92(fp)
   10ed4:	1007883a 	mov	r3,r2
   10ed8:	00800074 	movhi	r2,1
   10edc:	109e4604 	addi	r2,r2,31000
   10ee0:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   10ee4:	e0ffe817 	ldw	r3,-96(fp)
   10ee8:	00800074 	movhi	r2,1
   10eec:	109e4604 	addi	r2,r2,31000
   10ef0:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   10ef4:	e0bfef04 	addi	r2,fp,-68
   10ef8:	e17fff17 	ldw	r5,-4(fp)
   10efc:	1009883a 	mov	r4,r2
   10f00:	001099c0 	call	1099c <copy_file_record_name_to_string>
									return 0;
   10f04:	0005883a 	mov	r2,zero
   10f08:	00009206 	br	11154 <alt_up_sd_card_find_next+0x3b4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   10f0c:	e0bfe917 	ldw	r2,-92(fp)
   10f10:	10800044 	addi	r2,r2,1
   10f14:	e0bfe915 	stw	r2,-92(fp)
   10f18:	e0bfe917 	ldw	r2,-92(fp)
   10f1c:	10800410 	cmplti	r2,r2,16
   10f20:	103fda1e 	bne	r2,zero,10e8c <__alt_data_end+0xfffdee8c>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   10f24:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   10f28:	e0bfe817 	ldw	r2,-96(fp)
   10f2c:	10800044 	addi	r2,r2,1
   10f30:	e0bfe815 	stw	r2,-96(fp)
   10f34:	e0ffe817 	ldw	r3,-96(fp)
   10f38:	e0bfec17 	ldw	r2,-80(fp)
   10f3c:	18bfc716 	blt	r3,r2,10e5c <__alt_data_end+0xfffdee5c>
   10f40:	00000106 	br	10f48 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
   10f44:	0001883a 	nop
					}
				}
				result = -1;
   10f48:	00bfffc4 	movi	r2,-1
   10f4c:	e0bfe60d 	sth	r2,-104(fp)
   10f50:	00007f06 	br	11150 <alt_up_sd_card_find_next+0x3b0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   10f54:	00800074 	movhi	r2,1
   10f58:	109e4604 	addi	r2,r2,31000
   10f5c:	1080030b 	ldhu	r2,12(r2)
   10f60:	10bfffcc 	andi	r2,r2,65535
   10f64:	10a0001c 	xori	r2,r2,32768
   10f68:	10a00004 	addi	r2,r2,-32768
   10f6c:	10800044 	addi	r2,r2,1
   10f70:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   10f74:	e0bfe717 	ldw	r2,-100(fp)
   10f78:	10ffff84 	addi	r3,r2,-2
   10f7c:	00800074 	movhi	r2,1
   10f80:	109e4b04 	addi	r2,r2,31020
   10f84:	10800383 	ldbu	r2,14(r2)
   10f88:	10803fcc 	andi	r2,r2,255
   10f8c:	100b883a 	mov	r5,r2
   10f90:	1809883a 	mov	r4,r3
   10f94:	000aae00 	call	aae0 <__mulsi3>
   10f98:	1007883a 	mov	r3,r2
   10f9c:	00800074 	movhi	r2,1
   10fa0:	109e4b04 	addi	r2,r2,31020
   10fa4:	10801417 	ldw	r2,80(r2)
   10fa8:	1885883a 	add	r2,r3,r2
   10fac:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   10fb0:	00800074 	movhi	r2,1
   10fb4:	109e4604 	addi	r2,r2,31000
   10fb8:	10800217 	ldw	r2,8(r2)
   10fbc:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10fc0:	00003806 	br	110a4 <alt_up_sd_card_find_next+0x304>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   10fc4:	e0ffeb17 	ldw	r3,-84(fp)
   10fc8:	e0bfed17 	ldw	r2,-76(fp)
   10fcc:	1885883a 	add	r2,r3,r2
   10fd0:	d0e6e917 	ldw	r3,-25692(gp)
   10fd4:	180b883a 	mov	r5,r3
   10fd8:	1009883a 	mov	r4,r2
   10fdc:	000df000 	call	df00 <Read_Sector_Data>
   10fe0:	10003726 	beq	r2,zero,110c0 <alt_up_sd_card_find_next+0x320>
						{        
							for (; file_counter < 16; file_counter++)
   10fe4:	00002806 	br	11088 <alt_up_sd_card_find_next+0x2e8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   10fe8:	e0bfea17 	ldw	r2,-88(fp)
   10fec:	1004917a 	slli	r2,r2,5
   10ff0:	e13fe717 	ldw	r4,-100(fp)
   10ff4:	e17feb17 	ldw	r5,-84(fp)
   10ff8:	e0ffef04 	addi	r3,fp,-68
   10ffc:	280f883a 	mov	r7,r5
   11000:	200d883a 	mov	r6,r4
   11004:	180b883a 	mov	r5,r3
   11008:	1009883a 	mov	r4,r2
   1100c:	000e3100 	call	e310 <Read_File_Record_At_Offset>
   11010:	10001a26 	beq	r2,zero,1107c <alt_up_sd_card_find_next+0x2dc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   11014:	e0bfef03 	ldbu	r2,-68(fp)
   11018:	10803fcc 	andi	r2,r2,255
   1101c:	10001726 	beq	r2,zero,1107c <alt_up_sd_card_find_next+0x2dc>
   11020:	e0bfef03 	ldbu	r2,-68(fp)
   11024:	10803fcc 	andi	r2,r2,255
   11028:	10803960 	cmpeqi	r2,r2,229
   1102c:	1000131e 	bne	r2,zero,1107c <alt_up_sd_card_find_next+0x2dc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   11030:	e0ffe717 	ldw	r3,-100(fp)
   11034:	00800074 	movhi	r2,1
   11038:	109e4604 	addi	r2,r2,31000
   1103c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   11040:	e0bfea17 	ldw	r2,-88(fp)
   11044:	1007883a 	mov	r3,r2
   11048:	00800074 	movhi	r2,1
   1104c:	109e4604 	addi	r2,r2,31000
   11050:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   11054:	e0ffeb17 	ldw	r3,-84(fp)
   11058:	00800074 	movhi	r2,1
   1105c:	109e4604 	addi	r2,r2,31000
   11060:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   11064:	e0bfef04 	addi	r2,fp,-68
   11068:	e17fff17 	ldw	r5,-4(fp)
   1106c:	1009883a 	mov	r4,r2
   11070:	001099c0 	call	1099c <copy_file_record_name_to_string>
										return 0;
   11074:	0005883a 	mov	r2,zero
   11078:	00003606 	br	11154 <alt_up_sd_card_find_next+0x3b4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   1107c:	e0bfea17 	ldw	r2,-88(fp)
   11080:	10800044 	addi	r2,r2,1
   11084:	e0bfea15 	stw	r2,-88(fp)
   11088:	e0bfea17 	ldw	r2,-88(fp)
   1108c:	10800410 	cmplti	r2,r2,16
   11090:	103fd51e 	bne	r2,zero,10fe8 <__alt_data_end+0xfffdefe8>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   11094:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   11098:	e0bfeb17 	ldw	r2,-84(fp)
   1109c:	10800044 	addi	r2,r2,1
   110a0:	e0bfeb15 	stw	r2,-84(fp)
   110a4:	00800074 	movhi	r2,1
   110a8:	109e4b04 	addi	r2,r2,31020
   110ac:	10800383 	ldbu	r2,14(r2)
   110b0:	10803fcc 	andi	r2,r2,255
   110b4:	e0ffeb17 	ldw	r3,-84(fp)
   110b8:	18bfc216 	blt	r3,r2,10fc4 <__alt_data_end+0xfffdefc4>
   110bc:	00000106 	br	110c4 <alt_up_sd_card_find_next+0x324>
							}
							file_counter = 0;
						}
						else
						{
							break;
   110c0:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   110c4:	00800074 	movhi	r2,1
   110c8:	109e4b04 	addi	r2,r2,31020
   110cc:	10800383 	ldbu	r2,14(r2)
   110d0:	10803fcc 	andi	r2,r2,255
   110d4:	e0ffeb17 	ldw	r3,-84(fp)
   110d8:	18801716 	blt	r3,r2,11138 <alt_up_sd_card_find_next+0x398>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   110dc:	e0bfe717 	ldw	r2,-100(fp)
   110e0:	e0ffee04 	addi	r3,fp,-72
   110e4:	180b883a 	mov	r5,r3
   110e8:	1009883a 	mov	r4,r2
   110ec:	000dfd80 	call	dfd8 <get_cluster_flag>
   110f0:	10000f26 	beq	r2,zero,11130 <alt_up_sd_card_find_next+0x390>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   110f4:	e0bfee0b 	ldhu	r2,-72(fp)
   110f8:	10bfffcc 	andi	r2,r2,65535
   110fc:	10fffe0c 	andi	r3,r2,65528
   11100:	00bffe14 	movui	r2,65528
   11104:	1880051e 	bne	r3,r2,1111c <alt_up_sd_card_find_next+0x37c>
							{
								result = -1;
   11108:	00bfffc4 	movi	r2,-1
   1110c:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   11110:	00800074 	movhi	r2,1
   11114:	109e4604 	addi	r2,r2,31000
   11118:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   1111c:	e0bfee0b 	ldhu	r2,-72(fp)
   11120:	10bfffcc 	andi	r2,r2,65535
   11124:	10bffe0c 	andi	r2,r2,65528
   11128:	e0bfe715 	stw	r2,-100(fp)
   1112c:	00000206 	br	11138 <alt_up_sd_card_find_next+0x398>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   11130:	00bfffc4 	movi	r2,-1
   11134:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   11138:	e0bfe717 	ldw	r2,-100(fp)
   1113c:	00fffdd4 	movui	r3,65527
   11140:	18bf8c0e 	bge	r3,r2,10f74 <__alt_data_end+0xfffdef74>
   11144:	00000206 	br	11150 <alt_up_sd_card_find_next+0x3b0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   11148:	008000c4 	movi	r2,3
   1114c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   11150:	e0bfe60b 	ldhu	r2,-104(fp)
}
   11154:	e037883a 	mov	sp,fp
   11158:	dfc00117 	ldw	ra,4(sp)
   1115c:	df000017 	ldw	fp,0(sp)
   11160:	dec00204 	addi	sp,sp,8
   11164:	f800283a 	ret

00011168 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   11168:	deffe904 	addi	sp,sp,-92
   1116c:	dfc01615 	stw	ra,88(sp)
   11170:	df001515 	stw	fp,84(sp)
   11174:	df001504 	addi	fp,sp,84
   11178:	e13ffe15 	stw	r4,-8(fp)
   1117c:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   11180:	00bfffc4 	movi	r2,-1
   11184:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   11188:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
   1118c:	1000cf26 	beq	r2,zero,114cc <alt_up_sd_card_fopen+0x364>
   11190:	d0a6e217 	ldw	r2,-25720(gp)
   11194:	1000cd26 	beq	r2,zero,114cc <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
   11198:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1119c:	e13ffe17 	ldw	r4,-8(fp)
   111a0:	000efa40 	call	efa4 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   111a4:	e13ffe17 	ldw	r4,-8(fp)
   111a8:	000f0680 	call	f068 <check_file_name_for_FAT16_compliance>
   111ac:	1000c726 	beq	r2,zero,114cc <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   111b0:	e0ffee04 	addi	r3,fp,-72
   111b4:	e0bfed04 	addi	r2,fp,-76
   111b8:	180d883a 	mov	r6,r3
   111bc:	100b883a 	mov	r5,r2
   111c0:	e13ffe17 	ldw	r4,-8(fp)
   111c4:	000f6280 	call	f628 <get_home_directory_cluster_for_file>
   111c8:	1000021e 	bne	r2,zero,111d4 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   111cc:	e0bfeb0b 	ldhu	r2,-84(fp)
   111d0:	0000bf06 	br	114d0 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   111d4:	e03fec15 	stw	zero,-80(fp)
   111d8:	00000e06 	br	11214 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   111dc:	00800074 	movhi	r2,1
   111e0:	109e6004 	addi	r2,r2,31104
   111e4:	e0ffec17 	ldw	r3,-80(fp)
   111e8:	180691ba 	slli	r3,r3,6
   111ec:	10c5883a 	add	r2,r2,r3
   111f0:	10800f04 	addi	r2,r2,60
   111f4:	10800017 	ldw	r2,0(r2)
   111f8:	1000031e 	bne	r2,zero,11208 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   111fc:	e0bfec17 	ldw	r2,-80(fp)
   11200:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   11204:	00000606 	br	11220 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   11208:	e0bfec17 	ldw	r2,-80(fp)
   1120c:	10800044 	addi	r2,r2,1
   11210:	e0bfec15 	stw	r2,-80(fp)
   11214:	e0bfec17 	ldw	r2,-80(fp)
   11218:	10800510 	cmplti	r2,r2,20
   1121c:	103fef1e 	bne	r2,zero,111dc <__alt_data_end+0xfffdf1dc>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   11220:	e0bfeb0f 	ldh	r2,-84(fp)
   11224:	1000a916 	blt	r2,zero,114cc <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   11228:	e0bfed17 	ldw	r2,-76(fp)
   1122c:	1009883a 	mov	r4,r2
   11230:	e0bfeb0f 	ldh	r2,-84(fp)
   11234:	100691ba 	slli	r3,r2,6
   11238:	00800074 	movhi	r2,1
   1123c:	109e6004 	addi	r2,r2,31104
   11240:	1885883a 	add	r2,r3,r2
   11244:	100d883a 	mov	r6,r2
   11248:	e17ffe17 	ldw	r5,-8(fp)
   1124c:	000fb700 	call	fb70 <find_file_in_directory>
   11250:	10007b26 	beq	r2,zero,11440 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
   11254:	e0bfff17 	ldw	r2,-4(fp)
   11258:	10000226 	beq	r2,zero,11264 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1125c:	00bfffc4 	movi	r2,-1
   11260:	00009b06 	br	114d0 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   11264:	e13feb0f 	ldh	r4,-84(fp)
   11268:	e0ffeb0f 	ldh	r3,-84(fp)
   1126c:	00800074 	movhi	r2,1
   11270:	109e6004 	addi	r2,r2,31104
   11274:	180691ba 	slli	r3,r3,6
   11278:	10c5883a 	add	r2,r2,r3
   1127c:	10800584 	addi	r2,r2,22
   11280:	1080000b 	ldhu	r2,0(r2)
   11284:	10ffffcc 	andi	r3,r2,65535
   11288:	00800074 	movhi	r2,1
   1128c:	109e6004 	addi	r2,r2,31104
   11290:	200891ba 	slli	r4,r4,6
   11294:	1105883a 	add	r2,r2,r4
   11298:	10800704 	addi	r2,r2,28
   1129c:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   112a0:	e0ffeb0f 	ldh	r3,-84(fp)
   112a4:	00800074 	movhi	r2,1
   112a8:	109e6004 	addi	r2,r2,31104
   112ac:	180691ba 	slli	r3,r3,6
   112b0:	10c5883a 	add	r2,r2,r3
   112b4:	10800804 	addi	r2,r2,32
   112b8:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   112bc:	e0ffeb0f 	ldh	r3,-84(fp)
   112c0:	00800074 	movhi	r2,1
   112c4:	109e6004 	addi	r2,r2,31104
   112c8:	180691ba 	slli	r3,r3,6
   112cc:	10c5883a 	add	r2,r2,r3
   112d0:	10800904 	addi	r2,r2,36
   112d4:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   112d8:	e0ffeb0f 	ldh	r3,-84(fp)
   112dc:	00800074 	movhi	r2,1
   112e0:	109e6004 	addi	r2,r2,31104
   112e4:	180691ba 	slli	r3,r3,6
   112e8:	10c5883a 	add	r2,r2,r3
   112ec:	10800f04 	addi	r2,r2,60
   112f0:	00c00044 	movi	r3,1
   112f4:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   112f8:	e0ffeb0f 	ldh	r3,-84(fp)
   112fc:	00800074 	movhi	r2,1
   11300:	109e6004 	addi	r2,r2,31104
   11304:	180691ba 	slli	r3,r3,6
   11308:	10c5883a 	add	r2,r2,r3
   1130c:	10800e04 	addi	r2,r2,56
   11310:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   11314:	e03fec15 	stw	zero,-80(fp)
   11318:	00004506 	br	11430 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   1131c:	e0ffeb0f 	ldh	r3,-84(fp)
   11320:	e0bfec17 	ldw	r2,-80(fp)
   11324:	18803f26 	beq	r3,r2,11424 <alt_up_sd_card_fopen+0x2bc>
   11328:	00800074 	movhi	r2,1
   1132c:	109e6004 	addi	r2,r2,31104
   11330:	e0ffec17 	ldw	r3,-80(fp)
   11334:	180691ba 	slli	r3,r3,6
   11338:	10c5883a 	add	r2,r2,r3
   1133c:	10800f04 	addi	r2,r2,60
   11340:	10800017 	ldw	r2,0(r2)
   11344:	10800058 	cmpnei	r2,r2,1
   11348:	1000361e 	bne	r2,zero,11424 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1134c:	e0ffeb0f 	ldh	r3,-84(fp)
   11350:	00800074 	movhi	r2,1
   11354:	109e6004 	addi	r2,r2,31104
   11358:	180691ba 	slli	r3,r3,6
   1135c:	10c5883a 	add	r2,r2,r3
   11360:	10800a04 	addi	r2,r2,40
   11364:	10c00017 	ldw	r3,0(r2)
   11368:	00800074 	movhi	r2,1
   1136c:	109e6004 	addi	r2,r2,31104
   11370:	e13fec17 	ldw	r4,-80(fp)
   11374:	200891ba 	slli	r4,r4,6
   11378:	1105883a 	add	r2,r2,r4
   1137c:	10800a04 	addi	r2,r2,40
   11380:	10800017 	ldw	r2,0(r2)
   11384:	1880271e 	bne	r3,r2,11424 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   11388:	e0ffeb0f 	ldh	r3,-84(fp)
   1138c:	00800074 	movhi	r2,1
   11390:	109e6004 	addi	r2,r2,31104
   11394:	180691ba 	slli	r3,r3,6
   11398:	10c5883a 	add	r2,r2,r3
   1139c:	10800b04 	addi	r2,r2,44
   113a0:	10c00017 	ldw	r3,0(r2)
   113a4:	00800074 	movhi	r2,1
   113a8:	109e6004 	addi	r2,r2,31104
   113ac:	e13fec17 	ldw	r4,-80(fp)
   113b0:	200891ba 	slli	r4,r4,6
   113b4:	1105883a 	add	r2,r2,r4
   113b8:	10800b04 	addi	r2,r2,44
   113bc:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   113c0:	1880181e 	bne	r3,r2,11424 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   113c4:	e0ffeb0f 	ldh	r3,-84(fp)
   113c8:	00800074 	movhi	r2,1
   113cc:	109e6004 	addi	r2,r2,31104
   113d0:	180691ba 	slli	r3,r3,6
   113d4:	10c5883a 	add	r2,r2,r3
   113d8:	10800c04 	addi	r2,r2,48
   113dc:	1100000b 	ldhu	r4,0(r2)
   113e0:	00800074 	movhi	r2,1
   113e4:	109e6004 	addi	r2,r2,31104
   113e8:	e0ffec17 	ldw	r3,-80(fp)
   113ec:	180691ba 	slli	r3,r3,6
   113f0:	10c5883a 	add	r2,r2,r3
   113f4:	10800c04 	addi	r2,r2,48
   113f8:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   113fc:	20ffffcc 	andi	r3,r4,65535
   11400:	18e0001c 	xori	r3,r3,32768
   11404:	18e00004 	addi	r3,r3,-32768
   11408:	10bfffcc 	andi	r2,r2,65535
   1140c:	10a0001c 	xori	r2,r2,32768
   11410:	10a00004 	addi	r2,r2,-32768
   11414:	1880031e 	bne	r3,r2,11424 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   11418:	00bfff84 	movi	r2,-2
   1141c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   11420:	00002a06 	br	114cc <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   11424:	e0bfec17 	ldw	r2,-80(fp)
   11428:	10800044 	addi	r2,r2,1
   1142c:	e0bfec15 	stw	r2,-80(fp)
   11430:	e0bfec17 	ldw	r2,-80(fp)
   11434:	10800510 	cmplti	r2,r2,20
   11438:	103fb81e 	bne	r2,zero,1131c <__alt_data_end+0xfffdf31c>
   1143c:	00002306 	br	114cc <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
   11440:	e0bfff17 	ldw	r2,-4(fp)
   11444:	10001f26 	beq	r2,zero,114c4 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   11448:	e0bfeb0f 	ldh	r2,-84(fp)
   1144c:	100691ba 	slli	r3,r2,6
   11450:	00800074 	movhi	r2,1
   11454:	109e6004 	addi	r2,r2,31104
   11458:	1885883a 	add	r2,r3,r2
   1145c:	e0ffee04 	addi	r3,fp,-72
   11460:	180d883a 	mov	r6,r3
   11464:	100b883a 	mov	r5,r2
   11468:	e13ffe17 	ldw	r4,-8(fp)
   1146c:	00106c40 	call	106c4 <create_file>
   11470:	10001126 	beq	r2,zero,114b8 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
   11474:	e0ffeb0f 	ldh	r3,-84(fp)
   11478:	00800074 	movhi	r2,1
   1147c:	109e6004 	addi	r2,r2,31104
   11480:	180691ba 	slli	r3,r3,6
   11484:	10c5883a 	add	r2,r2,r3
   11488:	10800f04 	addi	r2,r2,60
   1148c:	00c00044 	movi	r3,1
   11490:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   11494:	e0ffeb0f 	ldh	r3,-84(fp)
   11498:	00800074 	movhi	r2,1
   1149c:	109e6004 	addi	r2,r2,31104
   114a0:	180691ba 	slli	r3,r3,6
   114a4:	10c5883a 	add	r2,r2,r3
   114a8:	10800e04 	addi	r2,r2,56
   114ac:	00c00044 	movi	r3,1
   114b0:	10c00015 	stw	r3,0(r2)
   114b4:	00000506 	br	114cc <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   114b8:	00bfffc4 	movi	r2,-1
   114bc:	e0bfeb0d 	sth	r2,-84(fp)
   114c0:	00000206 	br	114cc <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   114c4:	00bfffc4 	movi	r2,-1
   114c8:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
   114cc:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   114d0:	e037883a 	mov	sp,fp
   114d4:	dfc00117 	ldw	ra,4(sp)
   114d8:	df000017 	ldw	fp,0(sp)
   114dc:	dec00204 	addi	sp,sp,8
   114e0:	f800283a 	ret

000114e4 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   114e4:	defffd04 	addi	sp,sp,-12
   114e8:	df000215 	stw	fp,8(sp)
   114ec:	df000204 	addi	fp,sp,8
   114f0:	2007883a 	mov	r3,r4
   114f4:	2805883a 	mov	r2,r5
   114f8:	e0fffe0d 	sth	r3,-8(fp)
   114fc:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   11500:	e0bffe0f 	ldh	r2,-8(fp)
   11504:	10001416 	blt	r2,zero,11558 <alt_up_sd_card_set_attributes+0x74>
   11508:	e0bffe0f 	ldh	r2,-8(fp)
   1150c:	10800508 	cmpgei	r2,r2,20
   11510:	1000111e 	bne	r2,zero,11558 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   11514:	e0fffe0f 	ldh	r3,-8(fp)
   11518:	00800074 	movhi	r2,1
   1151c:	109e6004 	addi	r2,r2,31104
   11520:	180691ba 	slli	r3,r3,6
   11524:	10c5883a 	add	r2,r2,r3
   11528:	10800f04 	addi	r2,r2,60
   1152c:	10800017 	ldw	r2,0(r2)
   11530:	10000926 	beq	r2,zero,11558 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   11534:	e0fffe0f 	ldh	r3,-8(fp)
   11538:	e0bfff0b 	ldhu	r2,-4(fp)
   1153c:	1009883a 	mov	r4,r2
   11540:	00800074 	movhi	r2,1
   11544:	109e6004 	addi	r2,r2,31104
   11548:	180691ba 	slli	r3,r3,6
   1154c:	10c5883a 	add	r2,r2,r3
   11550:	108002c4 	addi	r2,r2,11
   11554:	11000005 	stb	r4,0(r2)
        }
    }
}
   11558:	0001883a 	nop
   1155c:	e037883a 	mov	sp,fp
   11560:	df000017 	ldw	fp,0(sp)
   11564:	dec00104 	addi	sp,sp,4
   11568:	f800283a 	ret

0001156c <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1156c:	defffd04 	addi	sp,sp,-12
   11570:	df000215 	stw	fp,8(sp)
   11574:	df000204 	addi	fp,sp,8
   11578:	2005883a 	mov	r2,r4
   1157c:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   11580:	00bfffc4 	movi	r2,-1
   11584:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   11588:	e0bfff0f 	ldh	r2,-4(fp)
   1158c:	10001416 	blt	r2,zero,115e0 <alt_up_sd_card_get_attributes+0x74>
   11590:	e0bfff0f 	ldh	r2,-4(fp)
   11594:	10800508 	cmpgei	r2,r2,20
   11598:	1000111e 	bne	r2,zero,115e0 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1159c:	e0ffff0f 	ldh	r3,-4(fp)
   115a0:	00800074 	movhi	r2,1
   115a4:	109e6004 	addi	r2,r2,31104
   115a8:	180691ba 	slli	r3,r3,6
   115ac:	10c5883a 	add	r2,r2,r3
   115b0:	10800f04 	addi	r2,r2,60
   115b4:	10800017 	ldw	r2,0(r2)
   115b8:	10000926 	beq	r2,zero,115e0 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   115bc:	e0ffff0f 	ldh	r3,-4(fp)
   115c0:	00800074 	movhi	r2,1
   115c4:	109e6004 	addi	r2,r2,31104
   115c8:	180691ba 	slli	r3,r3,6
   115cc:	10c5883a 	add	r2,r2,r3
   115d0:	108002c4 	addi	r2,r2,11
   115d4:	10800003 	ldbu	r2,0(r2)
   115d8:	10803fcc 	andi	r2,r2,255
   115dc:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   115e0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   115e4:	e037883a 	mov	sp,fp
   115e8:	df000017 	ldw	fp,0(sp)
   115ec:	dec00104 	addi	sp,sp,4
   115f0:	f800283a 	ret

000115f4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   115f4:	defff904 	addi	sp,sp,-28
   115f8:	dfc00615 	stw	ra,24(sp)
   115fc:	df000515 	stw	fp,20(sp)
   11600:	dc000415 	stw	r16,16(sp)
   11604:	df000504 	addi	fp,sp,20
   11608:	2005883a 	mov	r2,r4
   1160c:	e0bffe0d 	sth	r2,-8(fp)
    short int ch = -1;
   11610:	00bfffc4 	movi	r2,-1
   11614:	e0bffb0d 	sth	r2,-20(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   11618:	e0bffe0f 	ldh	r2,-8(fp)
   1161c:	1000d216 	blt	r2,zero,11968 <alt_up_sd_card_read+0x374>
   11620:	e0bffe0f 	ldh	r2,-8(fp)
   11624:	10800508 	cmpgei	r2,r2,20
   11628:	1000cf1e 	bne	r2,zero,11968 <alt_up_sd_card_read+0x374>
    {
        if (active_files[file_handle].in_use)
   1162c:	e0fffe0f 	ldh	r3,-8(fp)
   11630:	00800074 	movhi	r2,1
   11634:	109e6004 	addi	r2,r2,31104
   11638:	180691ba 	slli	r3,r3,6
   1163c:	10c5883a 	add	r2,r2,r3
   11640:	10800f04 	addi	r2,r2,60
   11644:	10800017 	ldw	r2,0(r2)
   11648:	1000c726 	beq	r2,zero,11968 <alt_up_sd_card_read+0x374>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1164c:	e0fffe0f 	ldh	r3,-8(fp)
   11650:	00800074 	movhi	r2,1
   11654:	109e6004 	addi	r2,r2,31104
   11658:	180691ba 	slli	r3,r3,6
   1165c:	10c5883a 	add	r2,r2,r3
   11660:	10800904 	addi	r2,r2,36
   11664:	10c00017 	ldw	r3,0(r2)
   11668:	e13ffe0f 	ldh	r4,-8(fp)
   1166c:	00800074 	movhi	r2,1
   11670:	109e6004 	addi	r2,r2,31104
   11674:	200891ba 	slli	r4,r4,6
   11678:	1105883a 	add	r2,r2,r4
   1167c:	10800604 	addi	r2,r2,24
   11680:	10800017 	ldw	r2,0(r2)
   11684:	1880b82e 	bgeu	r3,r2,11968 <alt_up_sd_card_read+0x374>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11688:	00800074 	movhi	r2,1
   1168c:	109e4b04 	addi	r2,r2,31020
   11690:	14001417 	ldw	r16,80(r2)
   11694:	e0fffe0f 	ldh	r3,-8(fp)
   11698:	00800074 	movhi	r2,1
   1169c:	109e6004 	addi	r2,r2,31104
   116a0:	180691ba 	slli	r3,r3,6
   116a4:	10c5883a 	add	r2,r2,r3
   116a8:	10800704 	addi	r2,r2,28
   116ac:	10800017 	ldw	r2,0(r2)
   116b0:	10ffff84 	addi	r3,r2,-2
   116b4:	00800074 	movhi	r2,1
   116b8:	109e4b04 	addi	r2,r2,31020
   116bc:	10800383 	ldbu	r2,14(r2)
   116c0:	10803fcc 	andi	r2,r2,255
   116c4:	100b883a 	mov	r5,r2
   116c8:	1809883a 	mov	r4,r3
   116cc:	000aae00 	call	aae0 <__mulsi3>
   116d0:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;
   116d4:	e13ffe0f 	ldh	r4,-8(fp)
   116d8:	00800074 	movhi	r2,1
   116dc:	109e6004 	addi	r2,r2,31104
   116e0:	200891ba 	slli	r4,r4,6
   116e4:	1105883a 	add	r2,r2,r4
   116e8:	10800804 	addi	r2,r2,32
   116ec:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   116f0:	1885883a 	add	r2,r3,r2
   116f4:	e0bffc15 	stw	r2,-16(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   116f8:	e0fffe0f 	ldh	r3,-8(fp)
   116fc:	00800074 	movhi	r2,1
   11700:	109e6004 	addi	r2,r2,31104
   11704:	180691ba 	slli	r3,r3,6
   11708:	10c5883a 	add	r2,r2,r3
   1170c:	10800904 	addi	r2,r2,36
   11710:	10800017 	ldw	r2,0(r2)
   11714:	10006a26 	beq	r2,zero,118c0 <alt_up_sd_card_read+0x2cc>
   11718:	e0fffe0f 	ldh	r3,-8(fp)
   1171c:	00800074 	movhi	r2,1
   11720:	109e6004 	addi	r2,r2,31104
   11724:	180691ba 	slli	r3,r3,6
   11728:	10c5883a 	add	r2,r2,r3
   1172c:	10800904 	addi	r2,r2,36
   11730:	10800017 	ldw	r2,0(r2)
   11734:	10807fcc 	andi	r2,r2,511
   11738:	1000611e 	bne	r2,zero,118c0 <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1173c:	e0fffe0f 	ldh	r3,-8(fp)
   11740:	00800074 	movhi	r2,1
   11744:	109e6004 	addi	r2,r2,31104
   11748:	180691ba 	slli	r3,r3,6
   1174c:	10c5883a 	add	r2,r2,r3
   11750:	10800804 	addi	r2,r2,32
   11754:	10c00017 	ldw	r3,0(r2)
   11758:	00800074 	movhi	r2,1
   1175c:	109e4b04 	addi	r2,r2,31020
   11760:	10800383 	ldbu	r2,14(r2)
   11764:	10803fcc 	andi	r2,r2,255
   11768:	10bfffc4 	addi	r2,r2,-1
   1176c:	1880421e 	bne	r3,r2,11878 <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   11770:	e0fffe0f 	ldh	r3,-8(fp)
   11774:	00800074 	movhi	r2,1
   11778:	109e6004 	addi	r2,r2,31104
   1177c:	180691ba 	slli	r3,r3,6
   11780:	10c5883a 	add	r2,r2,r3
   11784:	10800704 	addi	r2,r2,28
   11788:	10800017 	ldw	r2,0(r2)
   1178c:	e0fffd04 	addi	r3,fp,-12
   11790:	180b883a 	mov	r5,r3
   11794:	1009883a 	mov	r4,r2
   11798:	000dfd80 	call	dfd8 <get_cluster_flag>
   1179c:	10003426 	beq	r2,zero,11870 <alt_up_sd_card_read+0x27c>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   117a0:	e0bffd0b 	ldhu	r2,-12(fp)
   117a4:	10bfffcc 	andi	r2,r2,65535
   117a8:	10fffe0c 	andi	r3,r2,65528
   117ac:	00bffe14 	movui	r2,65528
   117b0:	1880021e 	bne	r3,r2,117bc <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
   117b4:	00bfffc4 	movi	r2,-1
   117b8:	00006c06 	br	1196c <alt_up_sd_card_read+0x378>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   117bc:	e13ffe0f 	ldh	r4,-8(fp)
   117c0:	e0bffd0b 	ldhu	r2,-12(fp)
   117c4:	10ffffcc 	andi	r3,r2,65535
   117c8:	00800074 	movhi	r2,1
   117cc:	109e6004 	addi	r2,r2,31104
   117d0:	200891ba 	slli	r4,r4,6
   117d4:	1105883a 	add	r2,r2,r4
   117d8:	10800704 	addi	r2,r2,28
   117dc:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   117e0:	e0fffe0f 	ldh	r3,-8(fp)
   117e4:	00800074 	movhi	r2,1
   117e8:	109e6004 	addi	r2,r2,31104
   117ec:	180691ba 	slli	r3,r3,6
   117f0:	10c5883a 	add	r2,r2,r3
   117f4:	10800804 	addi	r2,r2,32
   117f8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   117fc:	00800074 	movhi	r2,1
   11800:	109e4b04 	addi	r2,r2,31020
   11804:	14001417 	ldw	r16,80(r2)
   11808:	e0fffe0f 	ldh	r3,-8(fp)
   1180c:	00800074 	movhi	r2,1
   11810:	109e6004 	addi	r2,r2,31104
   11814:	180691ba 	slli	r3,r3,6
   11818:	10c5883a 	add	r2,r2,r3
   1181c:	10800704 	addi	r2,r2,28
   11820:	10800017 	ldw	r2,0(r2)
   11824:	10ffff84 	addi	r3,r2,-2
   11828:	00800074 	movhi	r2,1
   1182c:	109e4b04 	addi	r2,r2,31020
   11830:	10800383 	ldbu	r2,14(r2)
   11834:	10803fcc 	andi	r2,r2,255
   11838:	100b883a 	mov	r5,r2
   1183c:	1809883a 	mov	r4,r3
   11840:	000aae00 	call	aae0 <__mulsi3>
   11844:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   11848:	e13ffe0f 	ldh	r4,-8(fp)
   1184c:	00800074 	movhi	r2,1
   11850:	109e6004 	addi	r2,r2,31104
   11854:	200891ba 	slli	r4,r4,6
   11858:	1105883a 	add	r2,r2,r4
   1185c:	10800804 	addi	r2,r2,32
   11860:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11864:	1885883a 	add	r2,r3,r2
   11868:	e0bffc15 	stw	r2,-16(fp)
   1186c:	00001406 	br	118c0 <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   11870:	00bfff84 	movi	r2,-2
   11874:	00003d06 	br	1196c <alt_up_sd_card_read+0x378>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   11878:	e13ffe0f 	ldh	r4,-8(fp)
   1187c:	e0fffe0f 	ldh	r3,-8(fp)
   11880:	00800074 	movhi	r2,1
   11884:	109e6004 	addi	r2,r2,31104
   11888:	180691ba 	slli	r3,r3,6
   1188c:	10c5883a 	add	r2,r2,r3
   11890:	10800804 	addi	r2,r2,32
   11894:	10800017 	ldw	r2,0(r2)
   11898:	10c00044 	addi	r3,r2,1
   1189c:	00800074 	movhi	r2,1
   118a0:	109e6004 	addi	r2,r2,31104
   118a4:	200891ba 	slli	r4,r4,6
   118a8:	1105883a 	add	r2,r2,r4
   118ac:	10800804 	addi	r2,r2,32
   118b0:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   118b4:	e0bffc17 	ldw	r2,-16(fp)
   118b8:	10800044 	addi	r2,r2,1
   118bc:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   118c0:	d0e6e917 	ldw	r3,-25692(gp)
   118c4:	e0bffc17 	ldw	r2,-16(fp)
   118c8:	1885883a 	add	r2,r3,r2
   118cc:	1007883a 	mov	r3,r2
   118d0:	d0a6ed17 	ldw	r2,-25676(gp)
   118d4:	18800726 	beq	r3,r2,118f4 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   118d8:	d0a6e917 	ldw	r2,-25692(gp)
   118dc:	100b883a 	mov	r5,r2
   118e0:	e13ffc17 	ldw	r4,-16(fp)
   118e4:	000df000 	call	df00 <Read_Sector_Data>
   118e8:	1000021e 	bne	r2,zero,118f4 <alt_up_sd_card_read+0x300>
                    {
						return -2;
   118ec:	00bfff84 	movi	r2,-2
   118f0:	00001e06 	br	1196c <alt_up_sd_card_read+0x378>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   118f4:	d0e6e817 	ldw	r3,-25696(gp)
   118f8:	e13ffe0f 	ldh	r4,-8(fp)
   118fc:	00800074 	movhi	r2,1
   11900:	109e6004 	addi	r2,r2,31104
   11904:	200891ba 	slli	r4,r4,6
   11908:	1105883a 	add	r2,r2,r4
   1190c:	10800904 	addi	r2,r2,36
   11910:	10800017 	ldw	r2,0(r2)
   11914:	10807fcc 	andi	r2,r2,511
   11918:	1885883a 	add	r2,r3,r2
   1191c:	10800023 	ldbuio	r2,0(r2)
   11920:	10803fcc 	andi	r2,r2,255
   11924:	10803fcc 	andi	r2,r2,255
   11928:	e0bffb0d 	sth	r2,-20(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1192c:	e13ffe0f 	ldh	r4,-8(fp)
   11930:	e0fffe0f 	ldh	r3,-8(fp)
   11934:	00800074 	movhi	r2,1
   11938:	109e6004 	addi	r2,r2,31104
   1193c:	180691ba 	slli	r3,r3,6
   11940:	10c5883a 	add	r2,r2,r3
   11944:	10800904 	addi	r2,r2,36
   11948:	10800017 	ldw	r2,0(r2)
   1194c:	10c00044 	addi	r3,r2,1
   11950:	00800074 	movhi	r2,1
   11954:	109e6004 	addi	r2,r2,31104
   11958:	200891ba 	slli	r4,r4,6
   1195c:	1105883a 	add	r2,r2,r4
   11960:	10800904 	addi	r2,r2,36
   11964:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   11968:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1196c:	e6ffff04 	addi	sp,fp,-4
   11970:	dfc00217 	ldw	ra,8(sp)
   11974:	df000117 	ldw	fp,4(sp)
   11978:	dc000017 	ldw	r16,0(sp)
   1197c:	dec00304 	addi	sp,sp,12
   11980:	f800283a 	ret

00011984 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   11984:	defff704 	addi	sp,sp,-36
   11988:	dfc00815 	stw	ra,32(sp)
   1198c:	df000715 	stw	fp,28(sp)
   11990:	dc000615 	stw	r16,24(sp)
   11994:	df000704 	addi	fp,sp,28
   11998:	2007883a 	mov	r3,r4
   1199c:	2805883a 	mov	r2,r5
   119a0:	e0fffd0d 	sth	r3,-12(fp)
   119a4:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
   119a8:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   119ac:	e0bffd0f 	ldh	r2,-12(fp)
   119b0:	10018016 	blt	r2,zero,11fb4 <alt_up_sd_card_write+0x630>
   119b4:	e0bffd0f 	ldh	r2,-12(fp)
   119b8:	10800508 	cmpgei	r2,r2,20
   119bc:	10017d1e 	bne	r2,zero,11fb4 <alt_up_sd_card_write+0x630>
    {
        if (active_files[file_handle].in_use)
   119c0:	e0fffd0f 	ldh	r3,-12(fp)
   119c4:	00800074 	movhi	r2,1
   119c8:	109e6004 	addi	r2,r2,31104
   119cc:	180691ba 	slli	r3,r3,6
   119d0:	10c5883a 	add	r2,r2,r3
   119d4:	10800f04 	addi	r2,r2,60
   119d8:	10800017 	ldw	r2,0(r2)
   119dc:	10017526 	beq	r2,zero,11fb4 <alt_up_sd_card_write+0x630>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   119e0:	00800074 	movhi	r2,1
   119e4:	109e4b04 	addi	r2,r2,31020
   119e8:	14001417 	ldw	r16,80(r2)
   119ec:	e0fffd0f 	ldh	r3,-12(fp)
   119f0:	00800074 	movhi	r2,1
   119f4:	109e6004 	addi	r2,r2,31104
   119f8:	180691ba 	slli	r3,r3,6
   119fc:	10c5883a 	add	r2,r2,r3
   11a00:	10800704 	addi	r2,r2,28
   11a04:	10800017 	ldw	r2,0(r2)
   11a08:	10ffff84 	addi	r3,r2,-2
   11a0c:	00800074 	movhi	r2,1
   11a10:	109e4b04 	addi	r2,r2,31020
   11a14:	10800383 	ldbu	r2,14(r2)
   11a18:	10803fcc 	andi	r2,r2,255
   11a1c:	100b883a 	mov	r5,r2
   11a20:	1809883a 	mov	r4,r3
   11a24:	000aae00 	call	aae0 <__mulsi3>
   11a28:	8087883a 	add	r3,r16,r2
                              active_files[file_handle].current_sector_in_cluster;
   11a2c:	e13ffd0f 	ldh	r4,-12(fp)
   11a30:	00800074 	movhi	r2,1
   11a34:	109e6004 	addi	r2,r2,31104
   11a38:	200891ba 	slli	r4,r4,6
   11a3c:	1105883a 	add	r2,r2,r4
   11a40:	10800804 	addi	r2,r2,32
   11a44:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11a48:	1885883a 	add	r2,r3,r2
   11a4c:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   11a50:	e0fffd0f 	ldh	r3,-12(fp)
   11a54:	00800074 	movhi	r2,1
   11a58:	109e6004 	addi	r2,r2,31104
   11a5c:	180691ba 	slli	r3,r3,6
   11a60:	10c5883a 	add	r2,r2,r3
   11a64:	10800904 	addi	r2,r2,36
   11a68:	10c00017 	ldw	r3,0(r2)
   11a6c:	00800074 	movhi	r2,1
   11a70:	109e4b04 	addi	r2,r2,31020
   11a74:	1080030b 	ldhu	r2,12(r2)
   11a78:	10bfffcc 	andi	r2,r2,65535
   11a7c:	100b883a 	mov	r5,r2
   11a80:	1809883a 	mov	r4,r3
   11a84:	000aa880 	call	aa88 <__umodsi3>
   11a88:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   11a8c:	e0fffd0f 	ldh	r3,-12(fp)
   11a90:	00800074 	movhi	r2,1
   11a94:	109e6004 	addi	r2,r2,31104
   11a98:	180691ba 	slli	r3,r3,6
   11a9c:	10c5883a 	add	r2,r2,r3
   11aa0:	10800904 	addi	r2,r2,36
   11aa4:	10c00017 	ldw	r3,0(r2)
   11aa8:	e13ffd0f 	ldh	r4,-12(fp)
   11aac:	00800074 	movhi	r2,1
   11ab0:	109e6004 	addi	r2,r2,31104
   11ab4:	200891ba 	slli	r4,r4,6
   11ab8:	1105883a 	add	r2,r2,r4
   11abc:	10800604 	addi	r2,r2,24
   11ac0:	10800017 	ldw	r2,0(r2)
   11ac4:	1880692e 	bgeu	r3,r2,11c6c <alt_up_sd_card_write+0x2e8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   11ac8:	e0fffd0f 	ldh	r3,-12(fp)
   11acc:	00800074 	movhi	r2,1
   11ad0:	109e6004 	addi	r2,r2,31104
   11ad4:	180691ba 	slli	r3,r3,6
   11ad8:	10c5883a 	add	r2,r2,r3
   11adc:	10800904 	addi	r2,r2,36
   11ae0:	10800017 	ldw	r2,0(r2)
   11ae4:	1000e826 	beq	r2,zero,11e88 <alt_up_sd_card_write+0x504>
   11ae8:	e0bffb0f 	ldh	r2,-20(fp)
   11aec:	1000e61e 	bne	r2,zero,11e88 <alt_up_sd_card_write+0x504>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   11af0:	e0fffd0f 	ldh	r3,-12(fp)
   11af4:	00800074 	movhi	r2,1
   11af8:	109e6004 	addi	r2,r2,31104
   11afc:	180691ba 	slli	r3,r3,6
   11b00:	10c5883a 	add	r2,r2,r3
   11b04:	10800804 	addi	r2,r2,32
   11b08:	10c00017 	ldw	r3,0(r2)
   11b0c:	00800074 	movhi	r2,1
   11b10:	109e4b04 	addi	r2,r2,31020
   11b14:	10800383 	ldbu	r2,14(r2)
   11b18:	10803fcc 	andi	r2,r2,255
   11b1c:	10bfffc4 	addi	r2,r2,-1
   11b20:	18803f1e 	bne	r3,r2,11c20 <alt_up_sd_card_write+0x29c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   11b24:	e0fffd0f 	ldh	r3,-12(fp)
   11b28:	00800074 	movhi	r2,1
   11b2c:	109e6004 	addi	r2,r2,31104
   11b30:	180691ba 	slli	r3,r3,6
   11b34:	10c5883a 	add	r2,r2,r3
   11b38:	10800704 	addi	r2,r2,28
   11b3c:	10800017 	ldw	r2,0(r2)
   11b40:	e0fffb84 	addi	r3,fp,-18
   11b44:	180b883a 	mov	r5,r3
   11b48:	1009883a 	mov	r4,r2
   11b4c:	000dfd80 	call	dfd8 <get_cluster_flag>
   11b50:	10003126 	beq	r2,zero,11c18 <alt_up_sd_card_write+0x294>
                        {
                            if (next_cluster < 0x0000fff8)
   11b54:	e0bffb8b 	ldhu	r2,-18(fp)
   11b58:	10bfffcc 	andi	r2,r2,65535
   11b5c:	10bffe28 	cmpgeui	r2,r2,65528
   11b60:	1000c91e 	bne	r2,zero,11e88 <alt_up_sd_card_write+0x504>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   11b64:	e13ffd0f 	ldh	r4,-12(fp)
   11b68:	e0bffb8b 	ldhu	r2,-18(fp)
   11b6c:	10ffffcc 	andi	r3,r2,65535
   11b70:	00800074 	movhi	r2,1
   11b74:	109e6004 	addi	r2,r2,31104
   11b78:	200891ba 	slli	r4,r4,6
   11b7c:	1105883a 	add	r2,r2,r4
   11b80:	10800704 	addi	r2,r2,28
   11b84:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   11b88:	e0fffd0f 	ldh	r3,-12(fp)
   11b8c:	00800074 	movhi	r2,1
   11b90:	109e6004 	addi	r2,r2,31104
   11b94:	180691ba 	slli	r3,r3,6
   11b98:	10c5883a 	add	r2,r2,r3
   11b9c:	10800804 	addi	r2,r2,32
   11ba0:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11ba4:	00800074 	movhi	r2,1
   11ba8:	109e4b04 	addi	r2,r2,31020
   11bac:	14001417 	ldw	r16,80(r2)
   11bb0:	e0fffd0f 	ldh	r3,-12(fp)
   11bb4:	00800074 	movhi	r2,1
   11bb8:	109e6004 	addi	r2,r2,31104
   11bbc:	180691ba 	slli	r3,r3,6
   11bc0:	10c5883a 	add	r2,r2,r3
   11bc4:	10800704 	addi	r2,r2,28
   11bc8:	10800017 	ldw	r2,0(r2)
   11bcc:	10ffff84 	addi	r3,r2,-2
   11bd0:	00800074 	movhi	r2,1
   11bd4:	109e4b04 	addi	r2,r2,31020
   11bd8:	10800383 	ldbu	r2,14(r2)
   11bdc:	10803fcc 	andi	r2,r2,255
   11be0:	100b883a 	mov	r5,r2
   11be4:	1809883a 	mov	r4,r3
   11be8:	000aae00 	call	aae0 <__mulsi3>
   11bec:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   11bf0:	e13ffd0f 	ldh	r4,-12(fp)
   11bf4:	00800074 	movhi	r2,1
   11bf8:	109e6004 	addi	r2,r2,31104
   11bfc:	200891ba 	slli	r4,r4,6
   11c00:	1105883a 	add	r2,r2,r4
   11c04:	10800804 	addi	r2,r2,32
   11c08:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11c0c:	1885883a 	add	r2,r3,r2
   11c10:	e0bffa15 	stw	r2,-24(fp)
   11c14:	00009c06 	br	11e88 <alt_up_sd_card_write+0x504>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   11c18:	0005883a 	mov	r2,zero
   11c1c:	0000e606 	br	11fb8 <alt_up_sd_card_write+0x634>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   11c20:	e13ffd0f 	ldh	r4,-12(fp)
   11c24:	e0fffd0f 	ldh	r3,-12(fp)
   11c28:	00800074 	movhi	r2,1
   11c2c:	109e6004 	addi	r2,r2,31104
   11c30:	180691ba 	slli	r3,r3,6
   11c34:	10c5883a 	add	r2,r2,r3
   11c38:	10800804 	addi	r2,r2,32
   11c3c:	10800017 	ldw	r2,0(r2)
   11c40:	10c00044 	addi	r3,r2,1
   11c44:	00800074 	movhi	r2,1
   11c48:	109e6004 	addi	r2,r2,31104
   11c4c:	200891ba 	slli	r4,r4,6
   11c50:	1105883a 	add	r2,r2,r4
   11c54:	10800804 	addi	r2,r2,32
   11c58:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   11c5c:	e0bffa17 	ldw	r2,-24(fp)
   11c60:	10800044 	addi	r2,r2,1
   11c64:	e0bffa15 	stw	r2,-24(fp)
   11c68:	00008706 	br	11e88 <alt_up_sd_card_write+0x504>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   11c6c:	e0fffd0f 	ldh	r3,-12(fp)
   11c70:	00800074 	movhi	r2,1
   11c74:	109e6004 	addi	r2,r2,31104
   11c78:	180691ba 	slli	r3,r3,6
   11c7c:	10c5883a 	add	r2,r2,r3
   11c80:	10800904 	addi	r2,r2,36
   11c84:	10800017 	ldw	r2,0(r2)
   11c88:	10007f26 	beq	r2,zero,11e88 <alt_up_sd_card_write+0x504>
   11c8c:	e0bffb0f 	ldh	r2,-20(fp)
   11c90:	10007d1e 	bne	r2,zero,11e88 <alt_up_sd_card_write+0x504>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   11c94:	e0fffd0f 	ldh	r3,-12(fp)
   11c98:	00800074 	movhi	r2,1
   11c9c:	109e6004 	addi	r2,r2,31104
   11ca0:	180691ba 	slli	r3,r3,6
   11ca4:	10c5883a 	add	r2,r2,r3
   11ca8:	10800804 	addi	r2,r2,32
   11cac:	10c00017 	ldw	r3,0(r2)
   11cb0:	00800074 	movhi	r2,1
   11cb4:	109e4b04 	addi	r2,r2,31020
   11cb8:	10800383 	ldbu	r2,14(r2)
   11cbc:	10803fcc 	andi	r2,r2,255
   11cc0:	10bfffc4 	addi	r2,r2,-1
   11cc4:	18803e1e 	bne	r3,r2,11dc0 <alt_up_sd_card_write+0x43c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   11cc8:	e0bffc04 	addi	r2,fp,-16
   11ccc:	1009883a 	mov	r4,r2
   11cd0:	000fff40 	call	fff4 <find_first_empty_cluster>
   11cd4:	10003826 	beq	r2,zero,11db8 <alt_up_sd_card_write+0x434>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   11cd8:	e0fffd0f 	ldh	r3,-12(fp)
   11cdc:	00800074 	movhi	r2,1
   11ce0:	109e6004 	addi	r2,r2,31104
   11ce4:	180691ba 	slli	r3,r3,6
   11ce8:	10c5883a 	add	r2,r2,r3
   11cec:	10800704 	addi	r2,r2,28
   11cf0:	10800017 	ldw	r2,0(r2)
   11cf4:	e0fffc17 	ldw	r3,-16(fp)
   11cf8:	18ffffcc 	andi	r3,r3,65535
   11cfc:	18e0001c 	xori	r3,r3,32768
   11d00:	18e00004 	addi	r3,r3,-32768
   11d04:	01800044 	movi	r6,1
   11d08:	180b883a 	mov	r5,r3
   11d0c:	1009883a 	mov	r4,r2
   11d10:	000e08c0 	call	e08c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   11d14:	e0bffc17 	ldw	r2,-16(fp)
   11d18:	01800044 	movi	r6,1
   11d1c:	017fffc4 	movi	r5,-1
   11d20:	1009883a 	mov	r4,r2
   11d24:	000e08c0 	call	e08c <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   11d28:	e0fffd0f 	ldh	r3,-12(fp)
   11d2c:	00800074 	movhi	r2,1
   11d30:	109e6004 	addi	r2,r2,31104
   11d34:	180691ba 	slli	r3,r3,6
   11d38:	10c5883a 	add	r2,r2,r3
   11d3c:	10800704 	addi	r2,r2,28
   11d40:	10800017 	ldw	r2,0(r2)
   11d44:	e0fffc17 	ldw	r3,-16(fp)
   11d48:	18ffffcc 	andi	r3,r3,65535
   11d4c:	18e0001c 	xori	r3,r3,32768
   11d50:	18e00004 	addi	r3,r3,-32768
   11d54:	000d883a 	mov	r6,zero
   11d58:	180b883a 	mov	r5,r3
   11d5c:	1009883a 	mov	r4,r2
   11d60:	000e08c0 	call	e08c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   11d64:	e0bffc17 	ldw	r2,-16(fp)
   11d68:	000d883a 	mov	r6,zero
   11d6c:	017fffc4 	movi	r5,-1
   11d70:	1009883a 	mov	r4,r2
   11d74:	000e08c0 	call	e08c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   11d78:	e13ffd0f 	ldh	r4,-12(fp)
   11d7c:	e0fffc17 	ldw	r3,-16(fp)
   11d80:	00800074 	movhi	r2,1
   11d84:	109e6004 	addi	r2,r2,31104
   11d88:	200891ba 	slli	r4,r4,6
   11d8c:	1105883a 	add	r2,r2,r4
   11d90:	10800704 	addi	r2,r2,28
   11d94:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   11d98:	e0fffd0f 	ldh	r3,-12(fp)
   11d9c:	00800074 	movhi	r2,1
   11da0:	109e6004 	addi	r2,r2,31104
   11da4:	180691ba 	slli	r3,r3,6
   11da8:	10c5883a 	add	r2,r2,r3
   11dac:	10800804 	addi	r2,r2,32
   11db0:	10000015 	stw	zero,0(r2)
   11db4:	00001806 	br	11e18 <alt_up_sd_card_write+0x494>
						}
						else
						{
							return false;
   11db8:	0005883a 	mov	r2,zero
   11dbc:	00007e06 	br	11fb8 <alt_up_sd_card_write+0x634>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   11dc0:	e43ffd0f 	ldh	r16,-12(fp)
   11dc4:	e0fffd0f 	ldh	r3,-12(fp)
   11dc8:	00800074 	movhi	r2,1
   11dcc:	109e6004 	addi	r2,r2,31104
   11dd0:	180691ba 	slli	r3,r3,6
   11dd4:	10c5883a 	add	r2,r2,r3
   11dd8:	10800904 	addi	r2,r2,36
   11ddc:	10c00017 	ldw	r3,0(r2)
   11de0:	00800074 	movhi	r2,1
   11de4:	109e4b04 	addi	r2,r2,31020
   11de8:	1080030b 	ldhu	r2,12(r2)
   11dec:	10bfffcc 	andi	r2,r2,65535
   11df0:	100b883a 	mov	r5,r2
   11df4:	1809883a 	mov	r4,r3
   11df8:	000aa240 	call	aa24 <__udivsi3>
   11dfc:	1009883a 	mov	r4,r2
   11e00:	00800074 	movhi	r2,1
   11e04:	109e6004 	addi	r2,r2,31104
   11e08:	800691ba 	slli	r3,r16,6
   11e0c:	10c5883a 	add	r2,r2,r3
   11e10:	10800804 	addi	r2,r2,32
   11e14:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11e18:	00800074 	movhi	r2,1
   11e1c:	109e4b04 	addi	r2,r2,31020
   11e20:	14001417 	ldw	r16,80(r2)
   11e24:	e0fffd0f 	ldh	r3,-12(fp)
   11e28:	00800074 	movhi	r2,1
   11e2c:	109e6004 	addi	r2,r2,31104
   11e30:	180691ba 	slli	r3,r3,6
   11e34:	10c5883a 	add	r2,r2,r3
   11e38:	10800704 	addi	r2,r2,28
   11e3c:	10800017 	ldw	r2,0(r2)
   11e40:	10ffff84 	addi	r3,r2,-2
   11e44:	00800074 	movhi	r2,1
   11e48:	109e4b04 	addi	r2,r2,31020
   11e4c:	10800383 	ldbu	r2,14(r2)
   11e50:	10803fcc 	andi	r2,r2,255
   11e54:	100b883a 	mov	r5,r2
   11e58:	1809883a 	mov	r4,r3
   11e5c:	000aae00 	call	aae0 <__mulsi3>
   11e60:	8087883a 	add	r3,r16,r2
                          active_files[file_handle].current_sector_in_cluster;
   11e64:	e13ffd0f 	ldh	r4,-12(fp)
   11e68:	00800074 	movhi	r2,1
   11e6c:	109e6004 	addi	r2,r2,31104
   11e70:	200891ba 	slli	r4,r4,6
   11e74:	1105883a 	add	r2,r2,r4
   11e78:	10800804 	addi	r2,r2,32
   11e7c:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11e80:	1885883a 	add	r2,r3,r2
   11e84:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   11e88:	d0e6e917 	ldw	r3,-25692(gp)
   11e8c:	e0bffa17 	ldw	r2,-24(fp)
   11e90:	1885883a 	add	r2,r3,r2
   11e94:	1007883a 	mov	r3,r2
   11e98:	d0a6ed17 	ldw	r2,-25676(gp)
   11e9c:	18800726 	beq	r3,r2,11ebc <alt_up_sd_card_write+0x538>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   11ea0:	d0a6e917 	ldw	r2,-25692(gp)
   11ea4:	100b883a 	mov	r5,r2
   11ea8:	e13ffa17 	ldw	r4,-24(fp)
   11eac:	000df000 	call	df00 <Read_Sector_Data>
   11eb0:	1000021e 	bne	r2,zero,11ebc <alt_up_sd_card_write+0x538>
                {
					return false;
   11eb4:	0005883a 	mov	r2,zero
   11eb8:	00003f06 	br	11fb8 <alt_up_sd_card_write+0x634>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   11ebc:	d0e6e817 	ldw	r3,-25696(gp)
   11ec0:	e0bffb0f 	ldh	r2,-20(fp)
   11ec4:	1885883a 	add	r2,r3,r2
   11ec8:	e0fffe07 	ldb	r3,-8(fp)
   11ecc:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   11ed0:	e13ffd0f 	ldh	r4,-12(fp)
   11ed4:	e0fffd0f 	ldh	r3,-12(fp)
   11ed8:	00800074 	movhi	r2,1
   11edc:	109e6004 	addi	r2,r2,31104
   11ee0:	180691ba 	slli	r3,r3,6
   11ee4:	10c5883a 	add	r2,r2,r3
   11ee8:	10800904 	addi	r2,r2,36
   11eec:	10800017 	ldw	r2,0(r2)
   11ef0:	10c00044 	addi	r3,r2,1
   11ef4:	00800074 	movhi	r2,1
   11ef8:	109e6004 	addi	r2,r2,31104
   11efc:	200891ba 	slli	r4,r4,6
   11f00:	1105883a 	add	r2,r2,r4
   11f04:	10800904 	addi	r2,r2,36
   11f08:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   11f0c:	e0fffd0f 	ldh	r3,-12(fp)
   11f10:	00800074 	movhi	r2,1
   11f14:	109e6004 	addi	r2,r2,31104
   11f18:	180691ba 	slli	r3,r3,6
   11f1c:	10c5883a 	add	r2,r2,r3
   11f20:	10800904 	addi	r2,r2,36
   11f24:	10c00017 	ldw	r3,0(r2)
   11f28:	e13ffd0f 	ldh	r4,-12(fp)
   11f2c:	00800074 	movhi	r2,1
   11f30:	109e6004 	addi	r2,r2,31104
   11f34:	200891ba 	slli	r4,r4,6
   11f38:	1105883a 	add	r2,r2,r4
   11f3c:	10800604 	addi	r2,r2,24
   11f40:	10800017 	ldw	r2,0(r2)
   11f44:	18801736 	bltu	r3,r2,11fa4 <alt_up_sd_card_write+0x620>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   11f48:	e13ffd0f 	ldh	r4,-12(fp)
   11f4c:	e0fffd0f 	ldh	r3,-12(fp)
   11f50:	00800074 	movhi	r2,1
   11f54:	109e6004 	addi	r2,r2,31104
   11f58:	180691ba 	slli	r3,r3,6
   11f5c:	10c5883a 	add	r2,r2,r3
   11f60:	10800604 	addi	r2,r2,24
   11f64:	10800017 	ldw	r2,0(r2)
   11f68:	10c00044 	addi	r3,r2,1
   11f6c:	00800074 	movhi	r2,1
   11f70:	109e6004 	addi	r2,r2,31104
   11f74:	200891ba 	slli	r4,r4,6
   11f78:	1105883a 	add	r2,r2,r4
   11f7c:	10800604 	addi	r2,r2,24
   11f80:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   11f84:	e0fffd0f 	ldh	r3,-12(fp)
   11f88:	00800074 	movhi	r2,1
   11f8c:	109e6004 	addi	r2,r2,31104
   11f90:	180691ba 	slli	r3,r3,6
   11f94:	10c5883a 	add	r2,r2,r3
   11f98:	10800e04 	addi	r2,r2,56
   11f9c:	00c00044 	movi	r3,1
   11fa0:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   11fa4:	00800044 	movi	r2,1
   11fa8:	d0a6ec15 	stw	r2,-25680(gp)
			result = true;
   11fac:	00800044 	movi	r2,1
   11fb0:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
   11fb4:	e0bff917 	ldw	r2,-28(fp)
}
   11fb8:	e6ffff04 	addi	sp,fp,-4
   11fbc:	dfc00217 	ldw	ra,8(sp)
   11fc0:	df000117 	ldw	fp,4(sp)
   11fc4:	dc000017 	ldw	r16,0(sp)
   11fc8:	dec00304 	addi	sp,sp,12
   11fcc:	f800283a 	ret

00011fd0 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   11fd0:	defffa04 	addi	sp,sp,-24
   11fd4:	dfc00515 	stw	ra,20(sp)
   11fd8:	df000415 	stw	fp,16(sp)
   11fdc:	dc000315 	stw	r16,12(sp)
   11fe0:	df000404 	addi	fp,sp,16
   11fe4:	2005883a 	mov	r2,r4
   11fe8:	e0bffe0d 	sth	r2,-8(fp)
    bool result = false;
   11fec:	e03ffc15 	stw	zero,-16(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   11ff0:	0010ba00 	call	10ba0 <alt_up_sd_card_is_Present>
   11ff4:	10006226 	beq	r2,zero,12180 <alt_up_sd_card_fclose+0x1b0>
   11ff8:	d0a6e217 	ldw	r2,-25720(gp)
   11ffc:	10006026 	beq	r2,zero,12180 <alt_up_sd_card_fclose+0x1b0>
    {
        if (active_files[file_handle].in_use) 
   12000:	e0fffe0f 	ldh	r3,-8(fp)
   12004:	00800074 	movhi	r2,1
   12008:	109e6004 	addi	r2,r2,31104
   1200c:	180691ba 	slli	r3,r3,6
   12010:	10c5883a 	add	r2,r2,r3
   12014:	10800f04 	addi	r2,r2,60
   12018:	10800017 	ldw	r2,0(r2)
   1201c:	10005826 	beq	r2,zero,12180 <alt_up_sd_card_fclose+0x1b0>
        {
			if (active_files[file_handle].modified)
   12020:	e0fffe0f 	ldh	r3,-8(fp)
   12024:	00800074 	movhi	r2,1
   12028:	109e6004 	addi	r2,r2,31104
   1202c:	180691ba 	slli	r3,r3,6
   12030:	10c5883a 	add	r2,r2,r3
   12034:	10800e04 	addi	r2,r2,56
   12038:	10800017 	ldw	r2,0(r2)
   1203c:	10004726 	beq	r2,zero,1215c <alt_up_sd_card_fclose+0x18c>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   12040:	e0fffe0f 	ldh	r3,-8(fp)
   12044:	00800074 	movhi	r2,1
   12048:	109e6004 	addi	r2,r2,31104
   1204c:	180691ba 	slli	r3,r3,6
   12050:	10c5883a 	add	r2,r2,r3
   12054:	10800b04 	addi	r2,r2,44
   12058:	10800017 	ldw	r2,0(r2)
   1205c:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   12060:	e0fffe0f 	ldh	r3,-8(fp)
   12064:	00800074 	movhi	r2,1
   12068:	109e6004 	addi	r2,r2,31104
   1206c:	180691ba 	slli	r3,r3,6
   12070:	10c5883a 	add	r2,r2,r3
   12074:	10800a04 	addi	r2,r2,40
   12078:	10800017 	ldw	r2,0(r2)
   1207c:	1000071e 	bne	r2,zero,1209c <alt_up_sd_card_fclose+0xcc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   12080:	00800074 	movhi	r2,1
   12084:	109e4b04 	addi	r2,r2,31020
   12088:	10801317 	ldw	r2,76(r2)
   1208c:	e0fffd17 	ldw	r3,-12(fp)
   12090:	1885883a 	add	r2,r3,r2
   12094:	e0bffd15 	stw	r2,-12(fp)
   12098:	00001606 	br	120f4 <alt_up_sd_card_fclose+0x124>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1209c:	00800074 	movhi	r2,1
   120a0:	109e4b04 	addi	r2,r2,31020
   120a4:	10c01417 	ldw	r3,80(r2)
   120a8:	e0bffd17 	ldw	r2,-12(fp)
   120ac:	18a1883a 	add	r16,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   120b0:	e0fffe0f 	ldh	r3,-8(fp)
   120b4:	00800074 	movhi	r2,1
   120b8:	109e6004 	addi	r2,r2,31104
   120bc:	180691ba 	slli	r3,r3,6
   120c0:	10c5883a 	add	r2,r2,r3
   120c4:	10800a04 	addi	r2,r2,40
   120c8:	10800017 	ldw	r2,0(r2)
   120cc:	10ffff84 	addi	r3,r2,-2
   120d0:	00800074 	movhi	r2,1
   120d4:	109e4b04 	addi	r2,r2,31020
   120d8:	10800383 	ldbu	r2,14(r2)
   120dc:	10803fcc 	andi	r2,r2,255
   120e0:	100b883a 	mov	r5,r2
   120e4:	1809883a 	mov	r4,r3
   120e8:	000aae00 	call	aae0 <__mulsi3>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   120ec:	8085883a 	add	r2,r16,r2
   120f0:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   120f4:	e0bffd17 	ldw	r2,-12(fp)
   120f8:	d0e6e917 	ldw	r3,-25692(gp)
   120fc:	180b883a 	mov	r5,r3
   12100:	1009883a 	mov	r4,r2
   12104:	000df000 	call	df00 <Read_Sector_Data>
   12108:	10001426 	beq	r2,zero,1215c <alt_up_sd_card_fclose+0x18c>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   1210c:	e0fffe0f 	ldh	r3,-8(fp)
   12110:	00800074 	movhi	r2,1
   12114:	109e6004 	addi	r2,r2,31104
   12118:	180691ba 	slli	r3,r3,6
   1211c:	10c5883a 	add	r2,r2,r3
   12120:	10800c04 	addi	r2,r2,48
   12124:	1080000b 	ldhu	r2,0(r2)
   12128:	113fffcc 	andi	r4,r2,65535
   1212c:	2120001c 	xori	r4,r4,32768
   12130:	21200004 	addi	r4,r4,-32768
   12134:	e0bffe0f 	ldh	r2,-8(fp)
   12138:	100691ba 	slli	r3,r2,6
   1213c:	00800074 	movhi	r2,1
   12140:	109e6004 	addi	r2,r2,31104
   12144:	1885883a 	add	r2,r3,r2
   12148:	100b883a 	mov	r5,r2
   1214c:	000e58c0 	call	e58c <Write_File_Record_At_Offset>
   12150:	10000226 	beq	r2,zero,1215c <alt_up_sd_card_fclose+0x18c>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   12154:	000deb40 	call	deb4 <Save_Modified_Sector>
   12158:	e0bffc15 	stw	r2,-16(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   1215c:	e0fffe0f 	ldh	r3,-8(fp)
   12160:	00800074 	movhi	r2,1
   12164:	109e6004 	addi	r2,r2,31104
   12168:	180691ba 	slli	r3,r3,6
   1216c:	10c5883a 	add	r2,r2,r3
   12170:	10800f04 	addi	r2,r2,60
   12174:	10000015 	stw	zero,0(r2)
			result = true;
   12178:	00800044 	movi	r2,1
   1217c:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    return result;
   12180:	e0bffc17 	ldw	r2,-16(fp)
}
   12184:	e6ffff04 	addi	sp,fp,-4
   12188:	dfc00217 	ldw	ra,8(sp)
   1218c:	df000117 	ldw	fp,4(sp)
   12190:	dc000017 	ldw	r16,0(sp)
   12194:	dec00304 	addi	sp,sp,12
   12198:	f800283a 	ret

0001219c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1219c:	defffa04 	addi	sp,sp,-24
   121a0:	dfc00515 	stw	ra,20(sp)
   121a4:	df000415 	stw	fp,16(sp)
   121a8:	df000404 	addi	fp,sp,16
   121ac:	e13ffd15 	stw	r4,-12(fp)
   121b0:	e17ffe15 	stw	r5,-8(fp)
   121b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   121b8:	e0bffd17 	ldw	r2,-12(fp)
   121bc:	10800017 	ldw	r2,0(r2)
   121c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   121c4:	e0bffc17 	ldw	r2,-16(fp)
   121c8:	10c00a04 	addi	r3,r2,40
   121cc:	e0bffd17 	ldw	r2,-12(fp)
   121d0:	10800217 	ldw	r2,8(r2)
   121d4:	100f883a 	mov	r7,r2
   121d8:	e1bfff17 	ldw	r6,-4(fp)
   121dc:	e17ffe17 	ldw	r5,-8(fp)
   121e0:	1809883a 	mov	r4,r3
   121e4:	00127c40 	call	127c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   121e8:	e037883a 	mov	sp,fp
   121ec:	dfc00117 	ldw	ra,4(sp)
   121f0:	df000017 	ldw	fp,0(sp)
   121f4:	dec00204 	addi	sp,sp,8
   121f8:	f800283a 	ret

000121fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   121fc:	defffa04 	addi	sp,sp,-24
   12200:	dfc00515 	stw	ra,20(sp)
   12204:	df000415 	stw	fp,16(sp)
   12208:	df000404 	addi	fp,sp,16
   1220c:	e13ffd15 	stw	r4,-12(fp)
   12210:	e17ffe15 	stw	r5,-8(fp)
   12214:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12218:	e0bffd17 	ldw	r2,-12(fp)
   1221c:	10800017 	ldw	r2,0(r2)
   12220:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12224:	e0bffc17 	ldw	r2,-16(fp)
   12228:	10c00a04 	addi	r3,r2,40
   1222c:	e0bffd17 	ldw	r2,-12(fp)
   12230:	10800217 	ldw	r2,8(r2)
   12234:	100f883a 	mov	r7,r2
   12238:	e1bfff17 	ldw	r6,-4(fp)
   1223c:	e17ffe17 	ldw	r5,-8(fp)
   12240:	1809883a 	mov	r4,r3
   12244:	00129e00 	call	129e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12248:	e037883a 	mov	sp,fp
   1224c:	dfc00117 	ldw	ra,4(sp)
   12250:	df000017 	ldw	fp,0(sp)
   12254:	dec00204 	addi	sp,sp,8
   12258:	f800283a 	ret

0001225c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1225c:	defffc04 	addi	sp,sp,-16
   12260:	dfc00315 	stw	ra,12(sp)
   12264:	df000215 	stw	fp,8(sp)
   12268:	df000204 	addi	fp,sp,8
   1226c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12270:	e0bfff17 	ldw	r2,-4(fp)
   12274:	10800017 	ldw	r2,0(r2)
   12278:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1227c:	e0bffe17 	ldw	r2,-8(fp)
   12280:	10c00a04 	addi	r3,r2,40
   12284:	e0bfff17 	ldw	r2,-4(fp)
   12288:	10800217 	ldw	r2,8(r2)
   1228c:	100b883a 	mov	r5,r2
   12290:	1809883a 	mov	r4,r3
   12294:	001266c0 	call	1266c <altera_avalon_jtag_uart_close>
}
   12298:	e037883a 	mov	sp,fp
   1229c:	dfc00117 	ldw	ra,4(sp)
   122a0:	df000017 	ldw	fp,0(sp)
   122a4:	dec00204 	addi	sp,sp,8
   122a8:	f800283a 	ret

000122ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   122ac:	defffa04 	addi	sp,sp,-24
   122b0:	dfc00515 	stw	ra,20(sp)
   122b4:	df000415 	stw	fp,16(sp)
   122b8:	df000404 	addi	fp,sp,16
   122bc:	e13ffd15 	stw	r4,-12(fp)
   122c0:	e17ffe15 	stw	r5,-8(fp)
   122c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   122c8:	e0bffd17 	ldw	r2,-12(fp)
   122cc:	10800017 	ldw	r2,0(r2)
   122d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   122d4:	e0bffc17 	ldw	r2,-16(fp)
   122d8:	10800a04 	addi	r2,r2,40
   122dc:	e1bfff17 	ldw	r6,-4(fp)
   122e0:	e17ffe17 	ldw	r5,-8(fp)
   122e4:	1009883a 	mov	r4,r2
   122e8:	00126d40 	call	126d4 <altera_avalon_jtag_uart_ioctl>
}
   122ec:	e037883a 	mov	sp,fp
   122f0:	dfc00117 	ldw	ra,4(sp)
   122f4:	df000017 	ldw	fp,0(sp)
   122f8:	dec00204 	addi	sp,sp,8
   122fc:	f800283a 	ret

00012300 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12300:	defffa04 	addi	sp,sp,-24
   12304:	dfc00515 	stw	ra,20(sp)
   12308:	df000415 	stw	fp,16(sp)
   1230c:	df000404 	addi	fp,sp,16
   12310:	e13ffd15 	stw	r4,-12(fp)
   12314:	e17ffe15 	stw	r5,-8(fp)
   12318:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1231c:	e0bffd17 	ldw	r2,-12(fp)
   12320:	00c00044 	movi	r3,1
   12324:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12328:	e0bffd17 	ldw	r2,-12(fp)
   1232c:	10800017 	ldw	r2,0(r2)
   12330:	10800104 	addi	r2,r2,4
   12334:	1007883a 	mov	r3,r2
   12338:	e0bffd17 	ldw	r2,-12(fp)
   1233c:	10800817 	ldw	r2,32(r2)
   12340:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12344:	e0bffe17 	ldw	r2,-8(fp)
   12348:	e0ffff17 	ldw	r3,-4(fp)
   1234c:	d8000015 	stw	zero,0(sp)
   12350:	e1fffd17 	ldw	r7,-12(fp)
   12354:	01800074 	movhi	r6,1
   12358:	3188f004 	addi	r6,r6,9152
   1235c:	180b883a 	mov	r5,r3
   12360:	1009883a 	mov	r4,r2
   12364:	0012fa00 	call	12fa0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   12368:	e0bffd17 	ldw	r2,-12(fp)
   1236c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12370:	e0bffd17 	ldw	r2,-12(fp)
   12374:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12378:	d0e6ef17 	ldw	r3,-25668(gp)
   1237c:	e1fffd17 	ldw	r7,-12(fp)
   12380:	01800074 	movhi	r6,1
   12384:	31897304 	addi	r6,r6,9676
   12388:	180b883a 	mov	r5,r3
   1238c:	1009883a 	mov	r4,r2
   12390:	0012c040 	call	12c04 <alt_alarm_start>
   12394:	1000040e 	bge	r2,zero,123a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12398:	e0fffd17 	ldw	r3,-12(fp)
   1239c:	00a00034 	movhi	r2,32768
   123a0:	10bfffc4 	addi	r2,r2,-1
   123a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   123a8:	0001883a 	nop
   123ac:	e037883a 	mov	sp,fp
   123b0:	dfc00117 	ldw	ra,4(sp)
   123b4:	df000017 	ldw	fp,0(sp)
   123b8:	dec00204 	addi	sp,sp,8
   123bc:	f800283a 	ret

000123c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   123c0:	defff804 	addi	sp,sp,-32
   123c4:	df000715 	stw	fp,28(sp)
   123c8:	df000704 	addi	fp,sp,28
   123cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   123d0:	e0bfff17 	ldw	r2,-4(fp)
   123d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   123d8:	e0bffb17 	ldw	r2,-20(fp)
   123dc:	10800017 	ldw	r2,0(r2)
   123e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   123e4:	e0bffc17 	ldw	r2,-16(fp)
   123e8:	10800104 	addi	r2,r2,4
   123ec:	10800037 	ldwio	r2,0(r2)
   123f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   123f4:	e0bffd17 	ldw	r2,-12(fp)
   123f8:	1080c00c 	andi	r2,r2,768
   123fc:	10006d26 	beq	r2,zero,125b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12400:	e0bffd17 	ldw	r2,-12(fp)
   12404:	1080400c 	andi	r2,r2,256
   12408:	10003526 	beq	r2,zero,124e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1240c:	00800074 	movhi	r2,1
   12410:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12414:	e0bffb17 	ldw	r2,-20(fp)
   12418:	10800a17 	ldw	r2,40(r2)
   1241c:	10800044 	addi	r2,r2,1
   12420:	1081ffcc 	andi	r2,r2,2047
   12424:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12428:	e0bffb17 	ldw	r2,-20(fp)
   1242c:	10c00b17 	ldw	r3,44(r2)
   12430:	e0bffe17 	ldw	r2,-8(fp)
   12434:	18801526 	beq	r3,r2,1248c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12438:	e0bffc17 	ldw	r2,-16(fp)
   1243c:	10800037 	ldwio	r2,0(r2)
   12440:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12444:	e0bff917 	ldw	r2,-28(fp)
   12448:	10a0000c 	andi	r2,r2,32768
   1244c:	10001126 	beq	r2,zero,12494 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12450:	e0bffb17 	ldw	r2,-20(fp)
   12454:	10800a17 	ldw	r2,40(r2)
   12458:	e0fff917 	ldw	r3,-28(fp)
   1245c:	1809883a 	mov	r4,r3
   12460:	e0fffb17 	ldw	r3,-20(fp)
   12464:	1885883a 	add	r2,r3,r2
   12468:	10800e04 	addi	r2,r2,56
   1246c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12470:	e0bffb17 	ldw	r2,-20(fp)
   12474:	10800a17 	ldw	r2,40(r2)
   12478:	10800044 	addi	r2,r2,1
   1247c:	10c1ffcc 	andi	r3,r2,2047
   12480:	e0bffb17 	ldw	r2,-20(fp)
   12484:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12488:	003fe206 	br	12414 <__alt_data_end+0xfffe0414>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1248c:	0001883a 	nop
   12490:	00000106 	br	12498 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   12494:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12498:	e0bff917 	ldw	r2,-28(fp)
   1249c:	10bfffec 	andhi	r2,r2,65535
   124a0:	10000f26 	beq	r2,zero,124e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   124a4:	e0bffb17 	ldw	r2,-20(fp)
   124a8:	10c00817 	ldw	r3,32(r2)
   124ac:	00bfff84 	movi	r2,-2
   124b0:	1886703a 	and	r3,r3,r2
   124b4:	e0bffb17 	ldw	r2,-20(fp)
   124b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   124bc:	e0bffc17 	ldw	r2,-16(fp)
   124c0:	10800104 	addi	r2,r2,4
   124c4:	1007883a 	mov	r3,r2
   124c8:	e0bffb17 	ldw	r2,-20(fp)
   124cc:	10800817 	ldw	r2,32(r2)
   124d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   124d4:	e0bffc17 	ldw	r2,-16(fp)
   124d8:	10800104 	addi	r2,r2,4
   124dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   124e0:	e0bffd17 	ldw	r2,-12(fp)
   124e4:	1080800c 	andi	r2,r2,512
   124e8:	103fbe26 	beq	r2,zero,123e4 <__alt_data_end+0xfffe03e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   124ec:	e0bffd17 	ldw	r2,-12(fp)
   124f0:	1004d43a 	srli	r2,r2,16
   124f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   124f8:	00001406 	br	1254c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   124fc:	e0bffc17 	ldw	r2,-16(fp)
   12500:	e0fffb17 	ldw	r3,-20(fp)
   12504:	18c00d17 	ldw	r3,52(r3)
   12508:	e13ffb17 	ldw	r4,-20(fp)
   1250c:	20c7883a 	add	r3,r4,r3
   12510:	18c20e04 	addi	r3,r3,2104
   12514:	18c00003 	ldbu	r3,0(r3)
   12518:	18c03fcc 	andi	r3,r3,255
   1251c:	18c0201c 	xori	r3,r3,128
   12520:	18ffe004 	addi	r3,r3,-128
   12524:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12528:	e0bffb17 	ldw	r2,-20(fp)
   1252c:	10800d17 	ldw	r2,52(r2)
   12530:	10800044 	addi	r2,r2,1
   12534:	10c1ffcc 	andi	r3,r2,2047
   12538:	e0bffb17 	ldw	r2,-20(fp)
   1253c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12540:	e0bffa17 	ldw	r2,-24(fp)
   12544:	10bfffc4 	addi	r2,r2,-1
   12548:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1254c:	e0bffa17 	ldw	r2,-24(fp)
   12550:	10000526 	beq	r2,zero,12568 <altera_avalon_jtag_uart_irq+0x1a8>
   12554:	e0bffb17 	ldw	r2,-20(fp)
   12558:	10c00d17 	ldw	r3,52(r2)
   1255c:	e0bffb17 	ldw	r2,-20(fp)
   12560:	10800c17 	ldw	r2,48(r2)
   12564:	18bfe51e 	bne	r3,r2,124fc <__alt_data_end+0xfffe04fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12568:	e0bffa17 	ldw	r2,-24(fp)
   1256c:	103f9d26 	beq	r2,zero,123e4 <__alt_data_end+0xfffe03e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12570:	e0bffb17 	ldw	r2,-20(fp)
   12574:	10c00817 	ldw	r3,32(r2)
   12578:	00bfff44 	movi	r2,-3
   1257c:	1886703a 	and	r3,r3,r2
   12580:	e0bffb17 	ldw	r2,-20(fp)
   12584:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12588:	e0bffb17 	ldw	r2,-20(fp)
   1258c:	10800017 	ldw	r2,0(r2)
   12590:	10800104 	addi	r2,r2,4
   12594:	1007883a 	mov	r3,r2
   12598:	e0bffb17 	ldw	r2,-20(fp)
   1259c:	10800817 	ldw	r2,32(r2)
   125a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   125a4:	e0bffc17 	ldw	r2,-16(fp)
   125a8:	10800104 	addi	r2,r2,4
   125ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   125b0:	003f8c06 	br	123e4 <__alt_data_end+0xfffe03e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   125b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   125b8:	0001883a 	nop
   125bc:	e037883a 	mov	sp,fp
   125c0:	df000017 	ldw	fp,0(sp)
   125c4:	dec00104 	addi	sp,sp,4
   125c8:	f800283a 	ret

000125cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   125cc:	defff804 	addi	sp,sp,-32
   125d0:	df000715 	stw	fp,28(sp)
   125d4:	df000704 	addi	fp,sp,28
   125d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   125dc:	e0bffb17 	ldw	r2,-20(fp)
   125e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   125e4:	e0bff917 	ldw	r2,-28(fp)
   125e8:	10800017 	ldw	r2,0(r2)
   125ec:	10800104 	addi	r2,r2,4
   125f0:	10800037 	ldwio	r2,0(r2)
   125f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   125f8:	e0bffa17 	ldw	r2,-24(fp)
   125fc:	1081000c 	andi	r2,r2,1024
   12600:	10000b26 	beq	r2,zero,12630 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12604:	e0bff917 	ldw	r2,-28(fp)
   12608:	10800017 	ldw	r2,0(r2)
   1260c:	10800104 	addi	r2,r2,4
   12610:	1007883a 	mov	r3,r2
   12614:	e0bff917 	ldw	r2,-28(fp)
   12618:	10800817 	ldw	r2,32(r2)
   1261c:	10810014 	ori	r2,r2,1024
   12620:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   12624:	e0bff917 	ldw	r2,-28(fp)
   12628:	10000915 	stw	zero,36(r2)
   1262c:	00000a06 	br	12658 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   12630:	e0bff917 	ldw	r2,-28(fp)
   12634:	10c00917 	ldw	r3,36(r2)
   12638:	00a00034 	movhi	r2,32768
   1263c:	10bfff04 	addi	r2,r2,-4
   12640:	10c00536 	bltu	r2,r3,12658 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   12644:	e0bff917 	ldw	r2,-28(fp)
   12648:	10800917 	ldw	r2,36(r2)
   1264c:	10c00044 	addi	r3,r2,1
   12650:	e0bff917 	ldw	r2,-28(fp)
   12654:	10c00915 	stw	r3,36(r2)
   12658:	d0a6ef17 	ldw	r2,-25668(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1265c:	e037883a 	mov	sp,fp
   12660:	df000017 	ldw	fp,0(sp)
   12664:	dec00104 	addi	sp,sp,4
   12668:	f800283a 	ret

0001266c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1266c:	defffd04 	addi	sp,sp,-12
   12670:	df000215 	stw	fp,8(sp)
   12674:	df000204 	addi	fp,sp,8
   12678:	e13ffe15 	stw	r4,-8(fp)
   1267c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12680:	00000506 	br	12698 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   12684:	e0bfff17 	ldw	r2,-4(fp)
   12688:	1090000c 	andi	r2,r2,16384
   1268c:	10000226 	beq	r2,zero,12698 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   12690:	00bffd44 	movi	r2,-11
   12694:	00000b06 	br	126c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12698:	e0bffe17 	ldw	r2,-8(fp)
   1269c:	10c00d17 	ldw	r3,52(r2)
   126a0:	e0bffe17 	ldw	r2,-8(fp)
   126a4:	10800c17 	ldw	r2,48(r2)
   126a8:	18800526 	beq	r3,r2,126c0 <altera_avalon_jtag_uart_close+0x54>
   126ac:	e0bffe17 	ldw	r2,-8(fp)
   126b0:	10c00917 	ldw	r3,36(r2)
   126b4:	e0bffe17 	ldw	r2,-8(fp)
   126b8:	10800117 	ldw	r2,4(r2)
   126bc:	18bff136 	bltu	r3,r2,12684 <__alt_data_end+0xfffe0684>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   126c0:	0005883a 	mov	r2,zero
}
   126c4:	e037883a 	mov	sp,fp
   126c8:	df000017 	ldw	fp,0(sp)
   126cc:	dec00104 	addi	sp,sp,4
   126d0:	f800283a 	ret

000126d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   126d4:	defffa04 	addi	sp,sp,-24
   126d8:	df000515 	stw	fp,20(sp)
   126dc:	df000504 	addi	fp,sp,20
   126e0:	e13ffd15 	stw	r4,-12(fp)
   126e4:	e17ffe15 	stw	r5,-8(fp)
   126e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   126ec:	00bff9c4 	movi	r2,-25
   126f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   126f4:	e0bffe17 	ldw	r2,-8(fp)
   126f8:	10da8060 	cmpeqi	r3,r2,27137
   126fc:	1800031e 	bne	r3,zero,1270c <altera_avalon_jtag_uart_ioctl+0x38>
   12700:	109a80a0 	cmpeqi	r2,r2,27138
   12704:	1000181e 	bne	r2,zero,12768 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   12708:	00002906 	br	127b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1270c:	e0bffd17 	ldw	r2,-12(fp)
   12710:	10c00117 	ldw	r3,4(r2)
   12714:	00a00034 	movhi	r2,32768
   12718:	10bfffc4 	addi	r2,r2,-1
   1271c:	18802126 	beq	r3,r2,127a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   12720:	e0bfff17 	ldw	r2,-4(fp)
   12724:	10800017 	ldw	r2,0(r2)
   12728:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1272c:	e0bffc17 	ldw	r2,-16(fp)
   12730:	10800090 	cmplti	r2,r2,2
   12734:	1000061e 	bne	r2,zero,12750 <altera_avalon_jtag_uart_ioctl+0x7c>
   12738:	e0fffc17 	ldw	r3,-16(fp)
   1273c:	00a00034 	movhi	r2,32768
   12740:	10bfffc4 	addi	r2,r2,-1
   12744:	18800226 	beq	r3,r2,12750 <altera_avalon_jtag_uart_ioctl+0x7c>
   12748:	e0bffc17 	ldw	r2,-16(fp)
   1274c:	00000206 	br	12758 <altera_avalon_jtag_uart_ioctl+0x84>
   12750:	00a00034 	movhi	r2,32768
   12754:	10bfff84 	addi	r2,r2,-2
   12758:	e0fffd17 	ldw	r3,-12(fp)
   1275c:	18800115 	stw	r2,4(r3)
      rc = 0;
   12760:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12764:	00000f06 	br	127a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12768:	e0bffd17 	ldw	r2,-12(fp)
   1276c:	10c00117 	ldw	r3,4(r2)
   12770:	00a00034 	movhi	r2,32768
   12774:	10bfffc4 	addi	r2,r2,-1
   12778:	18800c26 	beq	r3,r2,127ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1277c:	e0bffd17 	ldw	r2,-12(fp)
   12780:	10c00917 	ldw	r3,36(r2)
   12784:	e0bffd17 	ldw	r2,-12(fp)
   12788:	10800117 	ldw	r2,4(r2)
   1278c:	1885803a 	cmpltu	r2,r3,r2
   12790:	10c03fcc 	andi	r3,r2,255
   12794:	e0bfff17 	ldw	r2,-4(fp)
   12798:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1279c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   127a0:	00000206 	br	127ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   127a4:	0001883a 	nop
   127a8:	00000106 	br	127b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   127ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
   127b0:	e0bffb17 	ldw	r2,-20(fp)
}
   127b4:	e037883a 	mov	sp,fp
   127b8:	df000017 	ldw	fp,0(sp)
   127bc:	dec00104 	addi	sp,sp,4
   127c0:	f800283a 	ret

000127c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   127c4:	defff304 	addi	sp,sp,-52
   127c8:	dfc00c15 	stw	ra,48(sp)
   127cc:	df000b15 	stw	fp,44(sp)
   127d0:	df000b04 	addi	fp,sp,44
   127d4:	e13ffc15 	stw	r4,-16(fp)
   127d8:	e17ffd15 	stw	r5,-12(fp)
   127dc:	e1bffe15 	stw	r6,-8(fp)
   127e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   127e4:	e0bffd17 	ldw	r2,-12(fp)
   127e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   127ec:	00004706 	br	1290c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   127f0:	e0bffc17 	ldw	r2,-16(fp)
   127f4:	10800a17 	ldw	r2,40(r2)
   127f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   127fc:	e0bffc17 	ldw	r2,-16(fp)
   12800:	10800b17 	ldw	r2,44(r2)
   12804:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   12808:	e0fff717 	ldw	r3,-36(fp)
   1280c:	e0bff817 	ldw	r2,-32(fp)
   12810:	18800536 	bltu	r3,r2,12828 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12814:	e0fff717 	ldw	r3,-36(fp)
   12818:	e0bff817 	ldw	r2,-32(fp)
   1281c:	1885c83a 	sub	r2,r3,r2
   12820:	e0bff615 	stw	r2,-40(fp)
   12824:	00000406 	br	12838 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12828:	00c20004 	movi	r3,2048
   1282c:	e0bff817 	ldw	r2,-32(fp)
   12830:	1885c83a 	sub	r2,r3,r2
   12834:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12838:	e0bff617 	ldw	r2,-40(fp)
   1283c:	10001e26 	beq	r2,zero,128b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   12840:	e0fffe17 	ldw	r3,-8(fp)
   12844:	e0bff617 	ldw	r2,-40(fp)
   12848:	1880022e 	bgeu	r3,r2,12854 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12854:	e0bffc17 	ldw	r2,-16(fp)
   12858:	10c00e04 	addi	r3,r2,56
   1285c:	e0bff817 	ldw	r2,-32(fp)
   12860:	1885883a 	add	r2,r3,r2
   12864:	e1bff617 	ldw	r6,-40(fp)
   12868:	100b883a 	mov	r5,r2
   1286c:	e13ff517 	ldw	r4,-44(fp)
   12870:	00060600 	call	6060 <memcpy>
      ptr   += n;
   12874:	e0fff517 	ldw	r3,-44(fp)
   12878:	e0bff617 	ldw	r2,-40(fp)
   1287c:	1885883a 	add	r2,r3,r2
   12880:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   12884:	e0fffe17 	ldw	r3,-8(fp)
   12888:	e0bff617 	ldw	r2,-40(fp)
   1288c:	1885c83a 	sub	r2,r3,r2
   12890:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12894:	e0fff817 	ldw	r3,-32(fp)
   12898:	e0bff617 	ldw	r2,-40(fp)
   1289c:	1885883a 	add	r2,r3,r2
   128a0:	10c1ffcc 	andi	r3,r2,2047
   128a4:	e0bffc17 	ldw	r2,-16(fp)
   128a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   128ac:	e0bffe17 	ldw	r2,-8(fp)
   128b0:	00bfcf16 	blt	zero,r2,127f0 <__alt_data_end+0xfffe07f0>
   128b4:	00000106 	br	128bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   128b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   128bc:	e0fff517 	ldw	r3,-44(fp)
   128c0:	e0bffd17 	ldw	r2,-12(fp)
   128c4:	1880141e 	bne	r3,r2,12918 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   128c8:	e0bfff17 	ldw	r2,-4(fp)
   128cc:	1090000c 	andi	r2,r2,16384
   128d0:	1000131e 	bne	r2,zero,12920 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   128d4:	0001883a 	nop
   128d8:	e0bffc17 	ldw	r2,-16(fp)
   128dc:	10c00a17 	ldw	r3,40(r2)
   128e0:	e0bff717 	ldw	r2,-36(fp)
   128e4:	1880051e 	bne	r3,r2,128fc <altera_avalon_jtag_uart_read+0x138>
   128e8:	e0bffc17 	ldw	r2,-16(fp)
   128ec:	10c00917 	ldw	r3,36(r2)
   128f0:	e0bffc17 	ldw	r2,-16(fp)
   128f4:	10800117 	ldw	r2,4(r2)
   128f8:	18bff736 	bltu	r3,r2,128d8 <__alt_data_end+0xfffe08d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   128fc:	e0bffc17 	ldw	r2,-16(fp)
   12900:	10c00a17 	ldw	r3,40(r2)
   12904:	e0bff717 	ldw	r2,-36(fp)
   12908:	18800726 	beq	r3,r2,12928 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1290c:	e0bffe17 	ldw	r2,-8(fp)
   12910:	00bfb716 	blt	zero,r2,127f0 <__alt_data_end+0xfffe07f0>
   12914:	00000506 	br	1292c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   12918:	0001883a 	nop
   1291c:	00000306 	br	1292c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   12920:	0001883a 	nop
   12924:	00000106 	br	1292c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12928:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1292c:	e0fff517 	ldw	r3,-44(fp)
   12930:	e0bffd17 	ldw	r2,-12(fp)
   12934:	18801826 	beq	r3,r2,12998 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12938:	0005303a 	rdctl	r2,status
   1293c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12940:	e0fffb17 	ldw	r3,-20(fp)
   12944:	00bfff84 	movi	r2,-2
   12948:	1884703a 	and	r2,r3,r2
   1294c:	1001703a 	wrctl	status,r2
  
  return context;
   12950:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12954:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12958:	e0bffc17 	ldw	r2,-16(fp)
   1295c:	10800817 	ldw	r2,32(r2)
   12960:	10c00054 	ori	r3,r2,1
   12964:	e0bffc17 	ldw	r2,-16(fp)
   12968:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1296c:	e0bffc17 	ldw	r2,-16(fp)
   12970:	10800017 	ldw	r2,0(r2)
   12974:	10800104 	addi	r2,r2,4
   12978:	1007883a 	mov	r3,r2
   1297c:	e0bffc17 	ldw	r2,-16(fp)
   12980:	10800817 	ldw	r2,32(r2)
   12984:	18800035 	stwio	r2,0(r3)
   12988:	e0bffa17 	ldw	r2,-24(fp)
   1298c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12990:	e0bff917 	ldw	r2,-28(fp)
   12994:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12998:	e0fff517 	ldw	r3,-44(fp)
   1299c:	e0bffd17 	ldw	r2,-12(fp)
   129a0:	18800426 	beq	r3,r2,129b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   129a4:	e0fff517 	ldw	r3,-44(fp)
   129a8:	e0bffd17 	ldw	r2,-12(fp)
   129ac:	1885c83a 	sub	r2,r3,r2
   129b0:	00000606 	br	129cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   129b4:	e0bfff17 	ldw	r2,-4(fp)
   129b8:	1090000c 	andi	r2,r2,16384
   129bc:	10000226 	beq	r2,zero,129c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   129c0:	00bffd44 	movi	r2,-11
   129c4:	00000106 	br	129cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   129c8:	00bffec4 	movi	r2,-5
}
   129cc:	e037883a 	mov	sp,fp
   129d0:	dfc00117 	ldw	ra,4(sp)
   129d4:	df000017 	ldw	fp,0(sp)
   129d8:	dec00204 	addi	sp,sp,8
   129dc:	f800283a 	ret

000129e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   129e0:	defff304 	addi	sp,sp,-52
   129e4:	dfc00c15 	stw	ra,48(sp)
   129e8:	df000b15 	stw	fp,44(sp)
   129ec:	df000b04 	addi	fp,sp,44
   129f0:	e13ffc15 	stw	r4,-16(fp)
   129f4:	e17ffd15 	stw	r5,-12(fp)
   129f8:	e1bffe15 	stw	r6,-8(fp)
   129fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12a00:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12a04:	e0bffd17 	ldw	r2,-12(fp)
   12a08:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12a0c:	00003706 	br	12aec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12a10:	e0bffc17 	ldw	r2,-16(fp)
   12a14:	10800c17 	ldw	r2,48(r2)
   12a18:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   12a1c:	e0bffc17 	ldw	r2,-16(fp)
   12a20:	10800d17 	ldw	r2,52(r2)
   12a24:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12a28:	e0fff917 	ldw	r3,-28(fp)
   12a2c:	e0bff517 	ldw	r2,-44(fp)
   12a30:	1880062e 	bgeu	r3,r2,12a4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12a34:	e0fff517 	ldw	r3,-44(fp)
   12a38:	e0bff917 	ldw	r2,-28(fp)
   12a3c:	1885c83a 	sub	r2,r3,r2
   12a40:	10bfffc4 	addi	r2,r2,-1
   12a44:	e0bff615 	stw	r2,-40(fp)
   12a48:	00000b06 	br	12a78 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12a4c:	e0bff517 	ldw	r2,-44(fp)
   12a50:	10000526 	beq	r2,zero,12a68 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12a54:	00c20004 	movi	r3,2048
   12a58:	e0bff917 	ldw	r2,-28(fp)
   12a5c:	1885c83a 	sub	r2,r3,r2
   12a60:	e0bff615 	stw	r2,-40(fp)
   12a64:	00000406 	br	12a78 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12a68:	00c1ffc4 	movi	r3,2047
   12a6c:	e0bff917 	ldw	r2,-28(fp)
   12a70:	1885c83a 	sub	r2,r3,r2
   12a74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12a78:	e0bff617 	ldw	r2,-40(fp)
   12a7c:	10001e26 	beq	r2,zero,12af8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   12a80:	e0fffe17 	ldw	r3,-8(fp)
   12a84:	e0bff617 	ldw	r2,-40(fp)
   12a88:	1880022e 	bgeu	r3,r2,12a94 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12a8c:	e0bffe17 	ldw	r2,-8(fp)
   12a90:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12a94:	e0bffc17 	ldw	r2,-16(fp)
   12a98:	10c20e04 	addi	r3,r2,2104
   12a9c:	e0bff917 	ldw	r2,-28(fp)
   12aa0:	1885883a 	add	r2,r3,r2
   12aa4:	e1bff617 	ldw	r6,-40(fp)
   12aa8:	e17ffd17 	ldw	r5,-12(fp)
   12aac:	1009883a 	mov	r4,r2
   12ab0:	00060600 	call	6060 <memcpy>
      ptr   += n;
   12ab4:	e0fffd17 	ldw	r3,-12(fp)
   12ab8:	e0bff617 	ldw	r2,-40(fp)
   12abc:	1885883a 	add	r2,r3,r2
   12ac0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   12ac4:	e0fffe17 	ldw	r3,-8(fp)
   12ac8:	e0bff617 	ldw	r2,-40(fp)
   12acc:	1885c83a 	sub	r2,r3,r2
   12ad0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12ad4:	e0fff917 	ldw	r3,-28(fp)
   12ad8:	e0bff617 	ldw	r2,-40(fp)
   12adc:	1885883a 	add	r2,r3,r2
   12ae0:	10c1ffcc 	andi	r3,r2,2047
   12ae4:	e0bffc17 	ldw	r2,-16(fp)
   12ae8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12aec:	e0bffe17 	ldw	r2,-8(fp)
   12af0:	00bfc716 	blt	zero,r2,12a10 <__alt_data_end+0xfffe0a10>
   12af4:	00000106 	br	12afc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   12af8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12afc:	0005303a 	rdctl	r2,status
   12b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b04:	e0fffb17 	ldw	r3,-20(fp)
   12b08:	00bfff84 	movi	r2,-2
   12b0c:	1884703a 	and	r2,r3,r2
   12b10:	1001703a 	wrctl	status,r2
  
  return context;
   12b14:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12b18:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12b1c:	e0bffc17 	ldw	r2,-16(fp)
   12b20:	10800817 	ldw	r2,32(r2)
   12b24:	10c00094 	ori	r3,r2,2
   12b28:	e0bffc17 	ldw	r2,-16(fp)
   12b2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12b30:	e0bffc17 	ldw	r2,-16(fp)
   12b34:	10800017 	ldw	r2,0(r2)
   12b38:	10800104 	addi	r2,r2,4
   12b3c:	1007883a 	mov	r3,r2
   12b40:	e0bffc17 	ldw	r2,-16(fp)
   12b44:	10800817 	ldw	r2,32(r2)
   12b48:	18800035 	stwio	r2,0(r3)
   12b4c:	e0bffa17 	ldw	r2,-24(fp)
   12b50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b54:	e0bff817 	ldw	r2,-32(fp)
   12b58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12b5c:	e0bffe17 	ldw	r2,-8(fp)
   12b60:	0080100e 	bge	zero,r2,12ba4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12b64:	e0bfff17 	ldw	r2,-4(fp)
   12b68:	1090000c 	andi	r2,r2,16384
   12b6c:	1000101e 	bne	r2,zero,12bb0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12b70:	0001883a 	nop
   12b74:	e0bffc17 	ldw	r2,-16(fp)
   12b78:	10c00d17 	ldw	r3,52(r2)
   12b7c:	e0bff517 	ldw	r2,-44(fp)
   12b80:	1880051e 	bne	r3,r2,12b98 <altera_avalon_jtag_uart_write+0x1b8>
   12b84:	e0bffc17 	ldw	r2,-16(fp)
   12b88:	10c00917 	ldw	r3,36(r2)
   12b8c:	e0bffc17 	ldw	r2,-16(fp)
   12b90:	10800117 	ldw	r2,4(r2)
   12b94:	18bff736 	bltu	r3,r2,12b74 <__alt_data_end+0xfffe0b74>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   12b98:	e0bffc17 	ldw	r2,-16(fp)
   12b9c:	10800917 	ldw	r2,36(r2)
   12ba0:	1000051e 	bne	r2,zero,12bb8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   12ba4:	e0bffe17 	ldw	r2,-8(fp)
   12ba8:	00bfd016 	blt	zero,r2,12aec <__alt_data_end+0xfffe0aec>
   12bac:	00000306 	br	12bbc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   12bb0:	0001883a 	nop
   12bb4:	00000106 	br	12bbc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   12bb8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12bbc:	e0fffd17 	ldw	r3,-12(fp)
   12bc0:	e0bff717 	ldw	r2,-36(fp)
   12bc4:	18800426 	beq	r3,r2,12bd8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   12bc8:	e0fffd17 	ldw	r3,-12(fp)
   12bcc:	e0bff717 	ldw	r2,-36(fp)
   12bd0:	1885c83a 	sub	r2,r3,r2
   12bd4:	00000606 	br	12bf0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   12bd8:	e0bfff17 	ldw	r2,-4(fp)
   12bdc:	1090000c 	andi	r2,r2,16384
   12be0:	10000226 	beq	r2,zero,12bec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   12be4:	00bffd44 	movi	r2,-11
   12be8:	00000106 	br	12bf0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12bec:	00bffec4 	movi	r2,-5
}
   12bf0:	e037883a 	mov	sp,fp
   12bf4:	dfc00117 	ldw	ra,4(sp)
   12bf8:	df000017 	ldw	fp,0(sp)
   12bfc:	dec00204 	addi	sp,sp,8
   12c00:	f800283a 	ret

00012c04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12c04:	defff504 	addi	sp,sp,-44
   12c08:	df000a15 	stw	fp,40(sp)
   12c0c:	df000a04 	addi	fp,sp,40
   12c10:	e13ffc15 	stw	r4,-16(fp)
   12c14:	e17ffd15 	stw	r5,-12(fp)
   12c18:	e1bffe15 	stw	r6,-8(fp)
   12c1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   12c20:	e03ff615 	stw	zero,-40(fp)
   12c24:	d0a6ef17 	ldw	r2,-25668(gp)
  
  if (alt_ticks_per_second ())
   12c28:	10003c26 	beq	r2,zero,12d1c <alt_alarm_start+0x118>
  {
    if (alarm)
   12c2c:	e0bffc17 	ldw	r2,-16(fp)
   12c30:	10003826 	beq	r2,zero,12d14 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   12c34:	e0bffc17 	ldw	r2,-16(fp)
   12c38:	e0fffe17 	ldw	r3,-8(fp)
   12c3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   12c40:	e0bffc17 	ldw	r2,-16(fp)
   12c44:	e0ffff17 	ldw	r3,-4(fp)
   12c48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c4c:	0005303a 	rdctl	r2,status
   12c50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c54:	e0fff917 	ldw	r3,-28(fp)
   12c58:	00bfff84 	movi	r2,-2
   12c5c:	1884703a 	and	r2,r3,r2
   12c60:	1001703a 	wrctl	status,r2
  
  return context;
   12c64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   12c68:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12c6c:	d0a6f017 	ldw	r2,-25664(gp)
      
      current_nticks = alt_nticks();
   12c70:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12c74:	e0fffd17 	ldw	r3,-12(fp)
   12c78:	e0bff617 	ldw	r2,-40(fp)
   12c7c:	1885883a 	add	r2,r3,r2
   12c80:	10c00044 	addi	r3,r2,1
   12c84:	e0bffc17 	ldw	r2,-16(fp)
   12c88:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12c8c:	e0bffc17 	ldw	r2,-16(fp)
   12c90:	10c00217 	ldw	r3,8(r2)
   12c94:	e0bff617 	ldw	r2,-40(fp)
   12c98:	1880042e 	bgeu	r3,r2,12cac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   12c9c:	e0bffc17 	ldw	r2,-16(fp)
   12ca0:	00c00044 	movi	r3,1
   12ca4:	10c00405 	stb	r3,16(r2)
   12ca8:	00000206 	br	12cb4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   12cac:	e0bffc17 	ldw	r2,-16(fp)
   12cb0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   12cb4:	e0bffc17 	ldw	r2,-16(fp)
   12cb8:	d0e00e04 	addi	r3,gp,-32712
   12cbc:	e0fffa15 	stw	r3,-24(fp)
   12cc0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12cc4:	e0bffb17 	ldw	r2,-20(fp)
   12cc8:	e0fffa17 	ldw	r3,-24(fp)
   12ccc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12cd0:	e0bffa17 	ldw	r2,-24(fp)
   12cd4:	10c00017 	ldw	r3,0(r2)
   12cd8:	e0bffb17 	ldw	r2,-20(fp)
   12cdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12ce0:	e0bffa17 	ldw	r2,-24(fp)
   12ce4:	10800017 	ldw	r2,0(r2)
   12ce8:	e0fffb17 	ldw	r3,-20(fp)
   12cec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12cf0:	e0bffa17 	ldw	r2,-24(fp)
   12cf4:	e0fffb17 	ldw	r3,-20(fp)
   12cf8:	10c00015 	stw	r3,0(r2)
   12cfc:	e0bff817 	ldw	r2,-32(fp)
   12d00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d04:	e0bff717 	ldw	r2,-36(fp)
   12d08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12d0c:	0005883a 	mov	r2,zero
   12d10:	00000306 	br	12d20 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   12d14:	00bffa84 	movi	r2,-22
   12d18:	00000106 	br	12d20 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   12d1c:	00bfde84 	movi	r2,-134
  }
}
   12d20:	e037883a 	mov	sp,fp
   12d24:	df000017 	ldw	fp,0(sp)
   12d28:	dec00104 	addi	sp,sp,4
   12d2c:	f800283a 	ret

00012d30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12d30:	deffff04 	addi	sp,sp,-4
   12d34:	df000015 	stw	fp,0(sp)
   12d38:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12d3c:	0001883a 	nop
   12d40:	e037883a 	mov	sp,fp
   12d44:	df000017 	ldw	fp,0(sp)
   12d48:	dec00104 	addi	sp,sp,4
   12d4c:	f800283a 	ret

00012d50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d50:	defffe04 	addi	sp,sp,-8
   12d54:	dfc00115 	stw	ra,4(sp)
   12d58:	df000015 	stw	fp,0(sp)
   12d5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d60:	d0a00b17 	ldw	r2,-32724(gp)
   12d64:	10000326 	beq	r2,zero,12d74 <alt_get_errno+0x24>
   12d68:	d0a00b17 	ldw	r2,-32724(gp)
   12d6c:	103ee83a 	callr	r2
   12d70:	00000106 	br	12d78 <alt_get_errno+0x28>
   12d74:	d0a6dd04 	addi	r2,gp,-25740
}
   12d78:	e037883a 	mov	sp,fp
   12d7c:	dfc00117 	ldw	ra,4(sp)
   12d80:	df000017 	ldw	fp,0(sp)
   12d84:	dec00204 	addi	sp,sp,8
   12d88:	f800283a 	ret

00012d8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12d8c:	defffa04 	addi	sp,sp,-24
   12d90:	dfc00515 	stw	ra,20(sp)
   12d94:	df000415 	stw	fp,16(sp)
   12d98:	df000404 	addi	fp,sp,16
   12d9c:	e13ffe15 	stw	r4,-8(fp)
   12da0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12da4:	e0bffe17 	ldw	r2,-8(fp)
   12da8:	10000326 	beq	r2,zero,12db8 <alt_dev_llist_insert+0x2c>
   12dac:	e0bffe17 	ldw	r2,-8(fp)
   12db0:	10800217 	ldw	r2,8(r2)
   12db4:	1000061e 	bne	r2,zero,12dd0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   12db8:	0012d500 	call	12d50 <alt_get_errno>
   12dbc:	1007883a 	mov	r3,r2
   12dc0:	00800584 	movi	r2,22
   12dc4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12dc8:	00bffa84 	movi	r2,-22
   12dcc:	00001306 	br	12e1c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12dd0:	e0bffe17 	ldw	r2,-8(fp)
   12dd4:	e0ffff17 	ldw	r3,-4(fp)
   12dd8:	e0fffc15 	stw	r3,-16(fp)
   12ddc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12de0:	e0bffd17 	ldw	r2,-12(fp)
   12de4:	e0fffc17 	ldw	r3,-16(fp)
   12de8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12dec:	e0bffc17 	ldw	r2,-16(fp)
   12df0:	10c00017 	ldw	r3,0(r2)
   12df4:	e0bffd17 	ldw	r2,-12(fp)
   12df8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12dfc:	e0bffc17 	ldw	r2,-16(fp)
   12e00:	10800017 	ldw	r2,0(r2)
   12e04:	e0fffd17 	ldw	r3,-12(fp)
   12e08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12e0c:	e0bffc17 	ldw	r2,-16(fp)
   12e10:	e0fffd17 	ldw	r3,-12(fp)
   12e14:	10c00015 	stw	r3,0(r2)

  return 0;  
   12e18:	0005883a 	mov	r2,zero
}
   12e1c:	e037883a 	mov	sp,fp
   12e20:	dfc00117 	ldw	ra,4(sp)
   12e24:	df000017 	ldw	fp,0(sp)
   12e28:	dec00204 	addi	sp,sp,8
   12e2c:	f800283a 	ret

00012e30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12e30:	defffd04 	addi	sp,sp,-12
   12e34:	dfc00215 	stw	ra,8(sp)
   12e38:	df000115 	stw	fp,4(sp)
   12e3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12e40:	00800074 	movhi	r2,1
   12e44:	108f7904 	addi	r2,r2,15844
   12e48:	e0bfff15 	stw	r2,-4(fp)
   12e4c:	00000606 	br	12e68 <_do_ctors+0x38>
        (*ctor) (); 
   12e50:	e0bfff17 	ldw	r2,-4(fp)
   12e54:	10800017 	ldw	r2,0(r2)
   12e58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12e5c:	e0bfff17 	ldw	r2,-4(fp)
   12e60:	10bfff04 	addi	r2,r2,-4
   12e64:	e0bfff15 	stw	r2,-4(fp)
   12e68:	e0ffff17 	ldw	r3,-4(fp)
   12e6c:	00800074 	movhi	r2,1
   12e70:	108f7a04 	addi	r2,r2,15848
   12e74:	18bff62e 	bgeu	r3,r2,12e50 <__alt_data_end+0xfffe0e50>
        (*ctor) (); 
}
   12e78:	0001883a 	nop
   12e7c:	e037883a 	mov	sp,fp
   12e80:	dfc00117 	ldw	ra,4(sp)
   12e84:	df000017 	ldw	fp,0(sp)
   12e88:	dec00204 	addi	sp,sp,8
   12e8c:	f800283a 	ret

00012e90 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   12e90:	defffd04 	addi	sp,sp,-12
   12e94:	dfc00215 	stw	ra,8(sp)
   12e98:	df000115 	stw	fp,4(sp)
   12e9c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12ea0:	00800074 	movhi	r2,1
   12ea4:	108f7904 	addi	r2,r2,15844
   12ea8:	e0bfff15 	stw	r2,-4(fp)
   12eac:	00000606 	br	12ec8 <_do_dtors+0x38>
        (*dtor) (); 
   12eb0:	e0bfff17 	ldw	r2,-4(fp)
   12eb4:	10800017 	ldw	r2,0(r2)
   12eb8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12ebc:	e0bfff17 	ldw	r2,-4(fp)
   12ec0:	10bfff04 	addi	r2,r2,-4
   12ec4:	e0bfff15 	stw	r2,-4(fp)
   12ec8:	e0ffff17 	ldw	r3,-4(fp)
   12ecc:	00800074 	movhi	r2,1
   12ed0:	108f7a04 	addi	r2,r2,15848
   12ed4:	18bff62e 	bgeu	r3,r2,12eb0 <__alt_data_end+0xfffe0eb0>
        (*dtor) (); 
}
   12ed8:	0001883a 	nop
   12edc:	e037883a 	mov	sp,fp
   12ee0:	dfc00117 	ldw	ra,4(sp)
   12ee4:	df000017 	ldw	fp,0(sp)
   12ee8:	dec00204 	addi	sp,sp,8
   12eec:	f800283a 	ret

00012ef0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12ef0:	defffa04 	addi	sp,sp,-24
   12ef4:	dfc00515 	stw	ra,20(sp)
   12ef8:	df000415 	stw	fp,16(sp)
   12efc:	df000404 	addi	fp,sp,16
   12f00:	e13ffe15 	stw	r4,-8(fp)
   12f04:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12f08:	e0bfff17 	ldw	r2,-4(fp)
   12f0c:	10800017 	ldw	r2,0(r2)
   12f10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12f14:	e13ffe17 	ldw	r4,-8(fp)
   12f18:	00005ac0 	call	5ac <strlen>
   12f1c:	10800044 	addi	r2,r2,1
   12f20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12f24:	00000d06 	br	12f5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12f28:	e0bffc17 	ldw	r2,-16(fp)
   12f2c:	10800217 	ldw	r2,8(r2)
   12f30:	e0fffd17 	ldw	r3,-12(fp)
   12f34:	180d883a 	mov	r6,r3
   12f38:	e17ffe17 	ldw	r5,-8(fp)
   12f3c:	1009883a 	mov	r4,r2
   12f40:	0013aa00 	call	13aa0 <memcmp>
   12f44:	1000021e 	bne	r2,zero,12f50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12f48:	e0bffc17 	ldw	r2,-16(fp)
   12f4c:	00000706 	br	12f6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12f50:	e0bffc17 	ldw	r2,-16(fp)
   12f54:	10800017 	ldw	r2,0(r2)
   12f58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12f5c:	e0fffc17 	ldw	r3,-16(fp)
   12f60:	e0bfff17 	ldw	r2,-4(fp)
   12f64:	18bff01e 	bne	r3,r2,12f28 <__alt_data_end+0xfffe0f28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12f68:	0005883a 	mov	r2,zero
}
   12f6c:	e037883a 	mov	sp,fp
   12f70:	dfc00117 	ldw	ra,4(sp)
   12f74:	df000017 	ldw	fp,0(sp)
   12f78:	dec00204 	addi	sp,sp,8
   12f7c:	f800283a 	ret

00012f80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12f80:	deffff04 	addi	sp,sp,-4
   12f84:	df000015 	stw	fp,0(sp)
   12f88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12f8c:	0001883a 	nop
   12f90:	e037883a 	mov	sp,fp
   12f94:	df000017 	ldw	fp,0(sp)
   12f98:	dec00104 	addi	sp,sp,4
   12f9c:	f800283a 	ret

00012fa0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12fa0:	defff904 	addi	sp,sp,-28
   12fa4:	dfc00615 	stw	ra,24(sp)
   12fa8:	df000515 	stw	fp,20(sp)
   12fac:	df000504 	addi	fp,sp,20
   12fb0:	e13ffc15 	stw	r4,-16(fp)
   12fb4:	e17ffd15 	stw	r5,-12(fp)
   12fb8:	e1bffe15 	stw	r6,-8(fp)
   12fbc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12fc0:	e0800217 	ldw	r2,8(fp)
   12fc4:	d8800015 	stw	r2,0(sp)
   12fc8:	e1ffff17 	ldw	r7,-4(fp)
   12fcc:	e1bffe17 	ldw	r6,-8(fp)
   12fd0:	e17ffd17 	ldw	r5,-12(fp)
   12fd4:	e13ffc17 	ldw	r4,-16(fp)
   12fd8:	00131500 	call	13150 <alt_iic_isr_register>
}  
   12fdc:	e037883a 	mov	sp,fp
   12fe0:	dfc00117 	ldw	ra,4(sp)
   12fe4:	df000017 	ldw	fp,0(sp)
   12fe8:	dec00204 	addi	sp,sp,8
   12fec:	f800283a 	ret

00012ff0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12ff0:	defff904 	addi	sp,sp,-28
   12ff4:	df000615 	stw	fp,24(sp)
   12ff8:	df000604 	addi	fp,sp,24
   12ffc:	e13ffe15 	stw	r4,-8(fp)
   13000:	e17fff15 	stw	r5,-4(fp)
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1300c:	0005303a 	rdctl	r2,status
   13010:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13014:	e0fffb17 	ldw	r3,-20(fp)
   13018:	00bfff84 	movi	r2,-2
   1301c:	1884703a 	and	r2,r3,r2
   13020:	1001703a 	wrctl	status,r2
  
  return context;
   13024:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13028:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1302c:	00c00044 	movi	r3,1
   13030:	e0bffa17 	ldw	r2,-24(fp)
   13034:	1884983a 	sll	r2,r3,r2
   13038:	1007883a 	mov	r3,r2
   1303c:	d0a6ee17 	ldw	r2,-25672(gp)
   13040:	1884b03a 	or	r2,r3,r2
   13044:	d0a6ee15 	stw	r2,-25672(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13048:	d0a6ee17 	ldw	r2,-25672(gp)
   1304c:	100170fa 	wrctl	ienable,r2
   13050:	e0bffc17 	ldw	r2,-16(fp)
   13054:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13058:	e0bffd17 	ldw	r2,-12(fp)
   1305c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13060:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   13064:	0001883a 	nop
}
   13068:	e037883a 	mov	sp,fp
   1306c:	df000017 	ldw	fp,0(sp)
   13070:	dec00104 	addi	sp,sp,4
   13074:	f800283a 	ret

00013078 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13078:	defff904 	addi	sp,sp,-28
   1307c:	df000615 	stw	fp,24(sp)
   13080:	df000604 	addi	fp,sp,24
   13084:	e13ffe15 	stw	r4,-8(fp)
   13088:	e17fff15 	stw	r5,-4(fp)
   1308c:	e0bfff17 	ldw	r2,-4(fp)
   13090:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13094:	0005303a 	rdctl	r2,status
   13098:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1309c:	e0fffb17 	ldw	r3,-20(fp)
   130a0:	00bfff84 	movi	r2,-2
   130a4:	1884703a 	and	r2,r3,r2
   130a8:	1001703a 	wrctl	status,r2
  
  return context;
   130ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   130b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   130b4:	00c00044 	movi	r3,1
   130b8:	e0bffa17 	ldw	r2,-24(fp)
   130bc:	1884983a 	sll	r2,r3,r2
   130c0:	0084303a 	nor	r2,zero,r2
   130c4:	1007883a 	mov	r3,r2
   130c8:	d0a6ee17 	ldw	r2,-25672(gp)
   130cc:	1884703a 	and	r2,r3,r2
   130d0:	d0a6ee15 	stw	r2,-25672(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   130d4:	d0a6ee17 	ldw	r2,-25672(gp)
   130d8:	100170fa 	wrctl	ienable,r2
   130dc:	e0bffc17 	ldw	r2,-16(fp)
   130e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130e4:	e0bffd17 	ldw	r2,-12(fp)
   130e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   130ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   130f0:	0001883a 	nop
}
   130f4:	e037883a 	mov	sp,fp
   130f8:	df000017 	ldw	fp,0(sp)
   130fc:	dec00104 	addi	sp,sp,4
   13100:	f800283a 	ret

00013104 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13104:	defffc04 	addi	sp,sp,-16
   13108:	df000315 	stw	fp,12(sp)
   1310c:	df000304 	addi	fp,sp,12
   13110:	e13ffe15 	stw	r4,-8(fp)
   13114:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13118:	000530fa 	rdctl	r2,ienable
   1311c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13120:	00c00044 	movi	r3,1
   13124:	e0bfff17 	ldw	r2,-4(fp)
   13128:	1884983a 	sll	r2,r3,r2
   1312c:	1007883a 	mov	r3,r2
   13130:	e0bffd17 	ldw	r2,-12(fp)
   13134:	1884703a 	and	r2,r3,r2
   13138:	1004c03a 	cmpne	r2,r2,zero
   1313c:	10803fcc 	andi	r2,r2,255
}
   13140:	e037883a 	mov	sp,fp
   13144:	df000017 	ldw	fp,0(sp)
   13148:	dec00104 	addi	sp,sp,4
   1314c:	f800283a 	ret

00013150 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13150:	defff504 	addi	sp,sp,-44
   13154:	dfc00a15 	stw	ra,40(sp)
   13158:	df000915 	stw	fp,36(sp)
   1315c:	df000904 	addi	fp,sp,36
   13160:	e13ffc15 	stw	r4,-16(fp)
   13164:	e17ffd15 	stw	r5,-12(fp)
   13168:	e1bffe15 	stw	r6,-8(fp)
   1316c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13170:	00bffa84 	movi	r2,-22
   13174:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13178:	e0bffd17 	ldw	r2,-12(fp)
   1317c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13180:	e0bff817 	ldw	r2,-32(fp)
   13184:	10800808 	cmpgei	r2,r2,32
   13188:	1000271e 	bne	r2,zero,13228 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1318c:	0005303a 	rdctl	r2,status
   13190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13194:	e0fffb17 	ldw	r3,-20(fp)
   13198:	00bfff84 	movi	r2,-2
   1319c:	1884703a 	and	r2,r3,r2
   131a0:	1001703a 	wrctl	status,r2
  
  return context;
   131a4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   131a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   131ac:	00800074 	movhi	r2,1
   131b0:	109fa004 	addi	r2,r2,32384
   131b4:	e0fff817 	ldw	r3,-32(fp)
   131b8:	180690fa 	slli	r3,r3,3
   131bc:	10c5883a 	add	r2,r2,r3
   131c0:	e0fffe17 	ldw	r3,-8(fp)
   131c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   131c8:	00800074 	movhi	r2,1
   131cc:	109fa004 	addi	r2,r2,32384
   131d0:	e0fff817 	ldw	r3,-32(fp)
   131d4:	180690fa 	slli	r3,r3,3
   131d8:	10c5883a 	add	r2,r2,r3
   131dc:	10800104 	addi	r2,r2,4
   131e0:	e0ffff17 	ldw	r3,-4(fp)
   131e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   131e8:	e0bffe17 	ldw	r2,-8(fp)
   131ec:	10000526 	beq	r2,zero,13204 <alt_iic_isr_register+0xb4>
   131f0:	e0bff817 	ldw	r2,-32(fp)
   131f4:	100b883a 	mov	r5,r2
   131f8:	e13ffc17 	ldw	r4,-16(fp)
   131fc:	0012ff00 	call	12ff0 <alt_ic_irq_enable>
   13200:	00000406 	br	13214 <alt_iic_isr_register+0xc4>
   13204:	e0bff817 	ldw	r2,-32(fp)
   13208:	100b883a 	mov	r5,r2
   1320c:	e13ffc17 	ldw	r4,-16(fp)
   13210:	00130780 	call	13078 <alt_ic_irq_disable>
   13214:	e0bff715 	stw	r2,-36(fp)
   13218:	e0bffa17 	ldw	r2,-24(fp)
   1321c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13220:	e0bff917 	ldw	r2,-28(fp)
   13224:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13228:	e0bff717 	ldw	r2,-36(fp)
}
   1322c:	e037883a 	mov	sp,fp
   13230:	dfc00117 	ldw	ra,4(sp)
   13234:	df000017 	ldw	fp,0(sp)
   13238:	dec00204 	addi	sp,sp,8
   1323c:	f800283a 	ret

00013240 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13240:	defff804 	addi	sp,sp,-32
   13244:	dfc00715 	stw	ra,28(sp)
   13248:	df000615 	stw	fp,24(sp)
   1324c:	dc000515 	stw	r16,20(sp)
   13250:	df000604 	addi	fp,sp,24
   13254:	e13ffb15 	stw	r4,-20(fp)
   13258:	e17ffc15 	stw	r5,-16(fp)
   1325c:	e1bffd15 	stw	r6,-12(fp)
   13260:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   13264:	e1bffe17 	ldw	r6,-8(fp)
   13268:	e17ffd17 	ldw	r5,-12(fp)
   1326c:	e13ffc17 	ldw	r4,-16(fp)
   13270:	00134c80 	call	134c8 <open>
   13274:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   13278:	e0bffa17 	ldw	r2,-24(fp)
   1327c:	10002216 	blt	r2,zero,13308 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13280:	04000074 	movhi	r16,1
   13284:	8412c704 	addi	r16,r16,19228
   13288:	e0bffa17 	ldw	r2,-24(fp)
   1328c:	01400304 	movi	r5,12
   13290:	1009883a 	mov	r4,r2
   13294:	000aae00 	call	aae0 <__mulsi3>
   13298:	8085883a 	add	r2,r16,r2
   1329c:	10c00017 	ldw	r3,0(r2)
   132a0:	e0bffb17 	ldw	r2,-20(fp)
   132a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   132a8:	04000074 	movhi	r16,1
   132ac:	8412c704 	addi	r16,r16,19228
   132b0:	e0bffa17 	ldw	r2,-24(fp)
   132b4:	01400304 	movi	r5,12
   132b8:	1009883a 	mov	r4,r2
   132bc:	000aae00 	call	aae0 <__mulsi3>
   132c0:	8085883a 	add	r2,r16,r2
   132c4:	10800104 	addi	r2,r2,4
   132c8:	10c00017 	ldw	r3,0(r2)
   132cc:	e0bffb17 	ldw	r2,-20(fp)
   132d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   132d4:	04000074 	movhi	r16,1
   132d8:	8412c704 	addi	r16,r16,19228
   132dc:	e0bffa17 	ldw	r2,-24(fp)
   132e0:	01400304 	movi	r5,12
   132e4:	1009883a 	mov	r4,r2
   132e8:	000aae00 	call	aae0 <__mulsi3>
   132ec:	8085883a 	add	r2,r16,r2
   132f0:	10800204 	addi	r2,r2,8
   132f4:	10c00017 	ldw	r3,0(r2)
   132f8:	e0bffb17 	ldw	r2,-20(fp)
   132fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13300:	e13ffa17 	ldw	r4,-24(fp)
   13304:	000dad00 	call	dad0 <alt_release_fd>
  }
} 
   13308:	0001883a 	nop
   1330c:	e6ffff04 	addi	sp,fp,-4
   13310:	dfc00217 	ldw	ra,8(sp)
   13314:	df000117 	ldw	fp,4(sp)
   13318:	dc000017 	ldw	r16,0(sp)
   1331c:	dec00304 	addi	sp,sp,12
   13320:	f800283a 	ret

00013324 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13324:	defffb04 	addi	sp,sp,-20
   13328:	dfc00415 	stw	ra,16(sp)
   1332c:	df000315 	stw	fp,12(sp)
   13330:	df000304 	addi	fp,sp,12
   13334:	e13ffd15 	stw	r4,-12(fp)
   13338:	e17ffe15 	stw	r5,-8(fp)
   1333c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13340:	01c07fc4 	movi	r7,511
   13344:	01800044 	movi	r6,1
   13348:	e17ffd17 	ldw	r5,-12(fp)
   1334c:	01000074 	movhi	r4,1
   13350:	2112ca04 	addi	r4,r4,19240
   13354:	00132400 	call	13240 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13358:	01c07fc4 	movi	r7,511
   1335c:	000d883a 	mov	r6,zero
   13360:	e17ffe17 	ldw	r5,-8(fp)
   13364:	01000074 	movhi	r4,1
   13368:	2112c704 	addi	r4,r4,19228
   1336c:	00132400 	call	13240 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13370:	01c07fc4 	movi	r7,511
   13374:	01800044 	movi	r6,1
   13378:	e17fff17 	ldw	r5,-4(fp)
   1337c:	01000074 	movhi	r4,1
   13380:	2112cd04 	addi	r4,r4,19252
   13384:	00132400 	call	13240 <alt_open_fd>
}  
   13388:	0001883a 	nop
   1338c:	e037883a 	mov	sp,fp
   13390:	dfc00117 	ldw	ra,4(sp)
   13394:	df000017 	ldw	fp,0(sp)
   13398:	dec00204 	addi	sp,sp,8
   1339c:	f800283a 	ret

000133a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133a0:	defffe04 	addi	sp,sp,-8
   133a4:	dfc00115 	stw	ra,4(sp)
   133a8:	df000015 	stw	fp,0(sp)
   133ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133b0:	d0a00b17 	ldw	r2,-32724(gp)
   133b4:	10000326 	beq	r2,zero,133c4 <alt_get_errno+0x24>
   133b8:	d0a00b17 	ldw	r2,-32724(gp)
   133bc:	103ee83a 	callr	r2
   133c0:	00000106 	br	133c8 <alt_get_errno+0x28>
   133c4:	d0a6dd04 	addi	r2,gp,-25740
}
   133c8:	e037883a 	mov	sp,fp
   133cc:	dfc00117 	ldw	ra,4(sp)
   133d0:	df000017 	ldw	fp,0(sp)
   133d4:	dec00204 	addi	sp,sp,8
   133d8:	f800283a 	ret

000133dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   133dc:	defffb04 	addi	sp,sp,-20
   133e0:	dfc00415 	stw	ra,16(sp)
   133e4:	df000315 	stw	fp,12(sp)
   133e8:	dc000215 	stw	r16,8(sp)
   133ec:	df000304 	addi	fp,sp,12
   133f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   133f4:	e0bffe17 	ldw	r2,-8(fp)
   133f8:	10800217 	ldw	r2,8(r2)
   133fc:	10d00034 	orhi	r3,r2,16384
   13400:	e0bffe17 	ldw	r2,-8(fp)
   13404:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13408:	e03ffd15 	stw	zero,-12(fp)
   1340c:	00002306 	br	1349c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13410:	04000074 	movhi	r16,1
   13414:	8412c704 	addi	r16,r16,19228
   13418:	e0bffd17 	ldw	r2,-12(fp)
   1341c:	01400304 	movi	r5,12
   13420:	1009883a 	mov	r4,r2
   13424:	000aae00 	call	aae0 <__mulsi3>
   13428:	8085883a 	add	r2,r16,r2
   1342c:	10c00017 	ldw	r3,0(r2)
   13430:	e0bffe17 	ldw	r2,-8(fp)
   13434:	10800017 	ldw	r2,0(r2)
   13438:	1880151e 	bne	r3,r2,13490 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1343c:	04000074 	movhi	r16,1
   13440:	8412c704 	addi	r16,r16,19228
   13444:	e0bffd17 	ldw	r2,-12(fp)
   13448:	01400304 	movi	r5,12
   1344c:	1009883a 	mov	r4,r2
   13450:	000aae00 	call	aae0 <__mulsi3>
   13454:	8085883a 	add	r2,r16,r2
   13458:	10800204 	addi	r2,r2,8
   1345c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13460:	10000b0e 	bge	r2,zero,13490 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13464:	01400304 	movi	r5,12
   13468:	e13ffd17 	ldw	r4,-12(fp)
   1346c:	000aae00 	call	aae0 <__mulsi3>
   13470:	1007883a 	mov	r3,r2
   13474:	00800074 	movhi	r2,1
   13478:	1092c704 	addi	r2,r2,19228
   1347c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13480:	e0bffe17 	ldw	r2,-8(fp)
   13484:	18800226 	beq	r3,r2,13490 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13488:	00bffcc4 	movi	r2,-13
   1348c:	00000806 	br	134b0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13490:	e0bffd17 	ldw	r2,-12(fp)
   13494:	10800044 	addi	r2,r2,1
   13498:	e0bffd15 	stw	r2,-12(fp)
   1349c:	d0a00a17 	ldw	r2,-32728(gp)
   134a0:	1007883a 	mov	r3,r2
   134a4:	e0bffd17 	ldw	r2,-12(fp)
   134a8:	18bfd92e 	bgeu	r3,r2,13410 <__alt_data_end+0xfffe1410>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   134ac:	0005883a 	mov	r2,zero
}
   134b0:	e6ffff04 	addi	sp,fp,-4
   134b4:	dfc00217 	ldw	ra,8(sp)
   134b8:	df000117 	ldw	fp,4(sp)
   134bc:	dc000017 	ldw	r16,0(sp)
   134c0:	dec00304 	addi	sp,sp,12
   134c4:	f800283a 	ret

000134c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   134c8:	defff604 	addi	sp,sp,-40
   134cc:	dfc00915 	stw	ra,36(sp)
   134d0:	df000815 	stw	fp,32(sp)
   134d4:	df000804 	addi	fp,sp,32
   134d8:	e13ffd15 	stw	r4,-12(fp)
   134dc:	e17ffe15 	stw	r5,-8(fp)
   134e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   134e4:	00bfffc4 	movi	r2,-1
   134e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   134ec:	00bffb44 	movi	r2,-19
   134f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   134f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   134f8:	d1600804 	addi	r5,gp,-32736
   134fc:	e13ffd17 	ldw	r4,-12(fp)
   13500:	0012ef00 	call	12ef0 <alt_find_dev>
   13504:	e0bff815 	stw	r2,-32(fp)
   13508:	e0bff817 	ldw	r2,-32(fp)
   1350c:	1000051e 	bne	r2,zero,13524 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13510:	e13ffd17 	ldw	r4,-12(fp)
   13514:	00137ec0 	call	137ec <alt_find_file>
   13518:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1351c:	00800044 	movi	r2,1
   13520:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13524:	e0bff817 	ldw	r2,-32(fp)
   13528:	10002b26 	beq	r2,zero,135d8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1352c:	e13ff817 	ldw	r4,-32(fp)
   13530:	00138f40 	call	138f4 <alt_get_fd>
   13534:	e0bff915 	stw	r2,-28(fp)
   13538:	e0bff917 	ldw	r2,-28(fp)
   1353c:	1000030e 	bge	r2,zero,1354c <open+0x84>
    {
      status = index;
   13540:	e0bff917 	ldw	r2,-28(fp)
   13544:	e0bffa15 	stw	r2,-24(fp)
   13548:	00002506 	br	135e0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1354c:	01400304 	movi	r5,12
   13550:	e13ff917 	ldw	r4,-28(fp)
   13554:	000aae00 	call	aae0 <__mulsi3>
   13558:	1007883a 	mov	r3,r2
   1355c:	00800074 	movhi	r2,1
   13560:	1092c704 	addi	r2,r2,19228
   13564:	1885883a 	add	r2,r3,r2
   13568:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1356c:	e0fffe17 	ldw	r3,-8(fp)
   13570:	00900034 	movhi	r2,16384
   13574:	10bfffc4 	addi	r2,r2,-1
   13578:	1886703a 	and	r3,r3,r2
   1357c:	e0bffc17 	ldw	r2,-16(fp)
   13580:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13584:	e0bffb17 	ldw	r2,-20(fp)
   13588:	1000051e 	bne	r2,zero,135a0 <open+0xd8>
   1358c:	e13ffc17 	ldw	r4,-16(fp)
   13590:	00133dc0 	call	133dc <alt_file_locked>
   13594:	e0bffa15 	stw	r2,-24(fp)
   13598:	e0bffa17 	ldw	r2,-24(fp)
   1359c:	10001016 	blt	r2,zero,135e0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   135a0:	e0bff817 	ldw	r2,-32(fp)
   135a4:	10800317 	ldw	r2,12(r2)
   135a8:	10000826 	beq	r2,zero,135cc <open+0x104>
   135ac:	e0bff817 	ldw	r2,-32(fp)
   135b0:	10800317 	ldw	r2,12(r2)
   135b4:	e1ffff17 	ldw	r7,-4(fp)
   135b8:	e1bffe17 	ldw	r6,-8(fp)
   135bc:	e17ffd17 	ldw	r5,-12(fp)
   135c0:	e13ffc17 	ldw	r4,-16(fp)
   135c4:	103ee83a 	callr	r2
   135c8:	00000106 	br	135d0 <open+0x108>
   135cc:	0005883a 	mov	r2,zero
   135d0:	e0bffa15 	stw	r2,-24(fp)
   135d4:	00000206 	br	135e0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   135d8:	00bffb44 	movi	r2,-19
   135dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   135e0:	e0bffa17 	ldw	r2,-24(fp)
   135e4:	1000090e 	bge	r2,zero,1360c <open+0x144>
  {
    alt_release_fd (index);  
   135e8:	e13ff917 	ldw	r4,-28(fp)
   135ec:	000dad00 	call	dad0 <alt_release_fd>
    ALT_ERRNO = -status;
   135f0:	00133a00 	call	133a0 <alt_get_errno>
   135f4:	1007883a 	mov	r3,r2
   135f8:	e0bffa17 	ldw	r2,-24(fp)
   135fc:	0085c83a 	sub	r2,zero,r2
   13600:	18800015 	stw	r2,0(r3)
    return -1;
   13604:	00bfffc4 	movi	r2,-1
   13608:	00000106 	br	13610 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1360c:	e0bff917 	ldw	r2,-28(fp)
}
   13610:	e037883a 	mov	sp,fp
   13614:	dfc00117 	ldw	ra,4(sp)
   13618:	df000017 	ldw	fp,0(sp)
   1361c:	dec00204 	addi	sp,sp,8
   13620:	f800283a 	ret

00013624 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13624:	defffa04 	addi	sp,sp,-24
   13628:	df000515 	stw	fp,20(sp)
   1362c:	df000504 	addi	fp,sp,20
   13630:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13634:	0005303a 	rdctl	r2,status
   13638:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1363c:	e0fffc17 	ldw	r3,-16(fp)
   13640:	00bfff84 	movi	r2,-2
   13644:	1884703a 	and	r2,r3,r2
   13648:	1001703a 	wrctl	status,r2
  
  return context;
   1364c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13650:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13654:	e0bfff17 	ldw	r2,-4(fp)
   13658:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1365c:	e0bffd17 	ldw	r2,-12(fp)
   13660:	10800017 	ldw	r2,0(r2)
   13664:	e0fffd17 	ldw	r3,-12(fp)
   13668:	18c00117 	ldw	r3,4(r3)
   1366c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13670:	e0bffd17 	ldw	r2,-12(fp)
   13674:	10800117 	ldw	r2,4(r2)
   13678:	e0fffd17 	ldw	r3,-12(fp)
   1367c:	18c00017 	ldw	r3,0(r3)
   13680:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13684:	e0bffd17 	ldw	r2,-12(fp)
   13688:	e0fffd17 	ldw	r3,-12(fp)
   1368c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   13690:	e0bffd17 	ldw	r2,-12(fp)
   13694:	e0fffd17 	ldw	r3,-12(fp)
   13698:	10c00015 	stw	r3,0(r2)
   1369c:	e0bffb17 	ldw	r2,-20(fp)
   136a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136a4:	e0bffe17 	ldw	r2,-8(fp)
   136a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   136ac:	0001883a 	nop
   136b0:	e037883a 	mov	sp,fp
   136b4:	df000017 	ldw	fp,0(sp)
   136b8:	dec00104 	addi	sp,sp,4
   136bc:	f800283a 	ret

000136c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   136c0:	defffb04 	addi	sp,sp,-20
   136c4:	dfc00415 	stw	ra,16(sp)
   136c8:	df000315 	stw	fp,12(sp)
   136cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   136d0:	d0a00e17 	ldw	r2,-32712(gp)
   136d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   136d8:	d0a6f017 	ldw	r2,-25664(gp)
   136dc:	10800044 	addi	r2,r2,1
   136e0:	d0a6f015 	stw	r2,-25664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   136e4:	00002e06 	br	137a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   136e8:	e0bffd17 	ldw	r2,-12(fp)
   136ec:	10800017 	ldw	r2,0(r2)
   136f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   136f4:	e0bffd17 	ldw	r2,-12(fp)
   136f8:	10800403 	ldbu	r2,16(r2)
   136fc:	10803fcc 	andi	r2,r2,255
   13700:	10000426 	beq	r2,zero,13714 <alt_tick+0x54>
   13704:	d0a6f017 	ldw	r2,-25664(gp)
   13708:	1000021e 	bne	r2,zero,13714 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1370c:	e0bffd17 	ldw	r2,-12(fp)
   13710:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13714:	e0bffd17 	ldw	r2,-12(fp)
   13718:	10800217 	ldw	r2,8(r2)
   1371c:	d0e6f017 	ldw	r3,-25664(gp)
   13720:	18801d36 	bltu	r3,r2,13798 <alt_tick+0xd8>
   13724:	e0bffd17 	ldw	r2,-12(fp)
   13728:	10800403 	ldbu	r2,16(r2)
   1372c:	10803fcc 	andi	r2,r2,255
   13730:	1000191e 	bne	r2,zero,13798 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   13734:	e0bffd17 	ldw	r2,-12(fp)
   13738:	10800317 	ldw	r2,12(r2)
   1373c:	e0fffd17 	ldw	r3,-12(fp)
   13740:	18c00517 	ldw	r3,20(r3)
   13744:	1809883a 	mov	r4,r3
   13748:	103ee83a 	callr	r2
   1374c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13750:	e0bfff17 	ldw	r2,-4(fp)
   13754:	1000031e 	bne	r2,zero,13764 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   13758:	e13ffd17 	ldw	r4,-12(fp)
   1375c:	00136240 	call	13624 <alt_alarm_stop>
   13760:	00000d06 	br	13798 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   13764:	e0bffd17 	ldw	r2,-12(fp)
   13768:	10c00217 	ldw	r3,8(r2)
   1376c:	e0bfff17 	ldw	r2,-4(fp)
   13770:	1887883a 	add	r3,r3,r2
   13774:	e0bffd17 	ldw	r2,-12(fp)
   13778:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1377c:	e0bffd17 	ldw	r2,-12(fp)
   13780:	10c00217 	ldw	r3,8(r2)
   13784:	d0a6f017 	ldw	r2,-25664(gp)
   13788:	1880032e 	bgeu	r3,r2,13798 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1378c:	e0bffd17 	ldw	r2,-12(fp)
   13790:	00c00044 	movi	r3,1
   13794:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   13798:	e0bffe17 	ldw	r2,-8(fp)
   1379c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   137a0:	e0fffd17 	ldw	r3,-12(fp)
   137a4:	d0a00e04 	addi	r2,gp,-32712
   137a8:	18bfcf1e 	bne	r3,r2,136e8 <__alt_data_end+0xfffe16e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   137ac:	0001883a 	nop
}
   137b0:	0001883a 	nop
   137b4:	e037883a 	mov	sp,fp
   137b8:	dfc00117 	ldw	ra,4(sp)
   137bc:	df000017 	ldw	fp,0(sp)
   137c0:	dec00204 	addi	sp,sp,8
   137c4:	f800283a 	ret

000137c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   137c8:	deffff04 	addi	sp,sp,-4
   137cc:	df000015 	stw	fp,0(sp)
   137d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   137d4:	000170fa 	wrctl	ienable,zero
}
   137d8:	0001883a 	nop
   137dc:	e037883a 	mov	sp,fp
   137e0:	df000017 	ldw	fp,0(sp)
   137e4:	dec00104 	addi	sp,sp,4
   137e8:	f800283a 	ret

000137ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   137ec:	defffb04 	addi	sp,sp,-20
   137f0:	dfc00415 	stw	ra,16(sp)
   137f4:	df000315 	stw	fp,12(sp)
   137f8:	df000304 	addi	fp,sp,12
   137fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13800:	d0a00617 	ldw	r2,-32744(gp)
   13804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13808:	00003106 	br	138d0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1380c:	e0bffd17 	ldw	r2,-12(fp)
   13810:	10800217 	ldw	r2,8(r2)
   13814:	1009883a 	mov	r4,r2
   13818:	00005ac0 	call	5ac <strlen>
   1381c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   13820:	e0bffd17 	ldw	r2,-12(fp)
   13824:	10c00217 	ldw	r3,8(r2)
   13828:	e0bffe17 	ldw	r2,-8(fp)
   1382c:	10bfffc4 	addi	r2,r2,-1
   13830:	1885883a 	add	r2,r3,r2
   13834:	10800003 	ldbu	r2,0(r2)
   13838:	10803fcc 	andi	r2,r2,255
   1383c:	1080201c 	xori	r2,r2,128
   13840:	10bfe004 	addi	r2,r2,-128
   13844:	10800bd8 	cmpnei	r2,r2,47
   13848:	1000031e 	bne	r2,zero,13858 <alt_find_file+0x6c>
    {
      len -= 1;
   1384c:	e0bffe17 	ldw	r2,-8(fp)
   13850:	10bfffc4 	addi	r2,r2,-1
   13854:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13858:	e0bffe17 	ldw	r2,-8(fp)
   1385c:	e0ffff17 	ldw	r3,-4(fp)
   13860:	1885883a 	add	r2,r3,r2
   13864:	10800003 	ldbu	r2,0(r2)
   13868:	10803fcc 	andi	r2,r2,255
   1386c:	1080201c 	xori	r2,r2,128
   13870:	10bfe004 	addi	r2,r2,-128
   13874:	10800be0 	cmpeqi	r2,r2,47
   13878:	1000081e 	bne	r2,zero,1389c <alt_find_file+0xb0>
   1387c:	e0bffe17 	ldw	r2,-8(fp)
   13880:	e0ffff17 	ldw	r3,-4(fp)
   13884:	1885883a 	add	r2,r3,r2
   13888:	10800003 	ldbu	r2,0(r2)
   1388c:	10803fcc 	andi	r2,r2,255
   13890:	1080201c 	xori	r2,r2,128
   13894:	10bfe004 	addi	r2,r2,-128
   13898:	10000a1e 	bne	r2,zero,138c4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1389c:	e0bffd17 	ldw	r2,-12(fp)
   138a0:	10800217 	ldw	r2,8(r2)
   138a4:	e0fffe17 	ldw	r3,-8(fp)
   138a8:	180d883a 	mov	r6,r3
   138ac:	e17fff17 	ldw	r5,-4(fp)
   138b0:	1009883a 	mov	r4,r2
   138b4:	0013aa00 	call	13aa0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   138b8:	1000021e 	bne	r2,zero,138c4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   138bc:	e0bffd17 	ldw	r2,-12(fp)
   138c0:	00000706 	br	138e0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   138c4:	e0bffd17 	ldw	r2,-12(fp)
   138c8:	10800017 	ldw	r2,0(r2)
   138cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   138d0:	e0fffd17 	ldw	r3,-12(fp)
   138d4:	d0a00604 	addi	r2,gp,-32744
   138d8:	18bfcc1e 	bne	r3,r2,1380c <__alt_data_end+0xfffe180c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   138dc:	0005883a 	mov	r2,zero
}
   138e0:	e037883a 	mov	sp,fp
   138e4:	dfc00117 	ldw	ra,4(sp)
   138e8:	df000017 	ldw	fp,0(sp)
   138ec:	dec00204 	addi	sp,sp,8
   138f0:	f800283a 	ret

000138f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   138f4:	defffa04 	addi	sp,sp,-24
   138f8:	dfc00515 	stw	ra,20(sp)
   138fc:	df000415 	stw	fp,16(sp)
   13900:	dc000315 	stw	r16,12(sp)
   13904:	df000404 	addi	fp,sp,16
   13908:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1390c:	00bffa04 	movi	r2,-24
   13910:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13914:	e03ffc15 	stw	zero,-16(fp)
   13918:	00001d06 	br	13990 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1391c:	04000074 	movhi	r16,1
   13920:	8412c704 	addi	r16,r16,19228
   13924:	e0bffc17 	ldw	r2,-16(fp)
   13928:	01400304 	movi	r5,12
   1392c:	1009883a 	mov	r4,r2
   13930:	000aae00 	call	aae0 <__mulsi3>
   13934:	8085883a 	add	r2,r16,r2
   13938:	10800017 	ldw	r2,0(r2)
   1393c:	1000111e 	bne	r2,zero,13984 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   13940:	04000074 	movhi	r16,1
   13944:	8412c704 	addi	r16,r16,19228
   13948:	e0bffc17 	ldw	r2,-16(fp)
   1394c:	01400304 	movi	r5,12
   13950:	1009883a 	mov	r4,r2
   13954:	000aae00 	call	aae0 <__mulsi3>
   13958:	8085883a 	add	r2,r16,r2
   1395c:	e0fffe17 	ldw	r3,-8(fp)
   13960:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13964:	d0e00a17 	ldw	r3,-32728(gp)
   13968:	e0bffc17 	ldw	r2,-16(fp)
   1396c:	1880020e 	bge	r3,r2,13978 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   13970:	e0bffc17 	ldw	r2,-16(fp)
   13974:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   13978:	e0bffc17 	ldw	r2,-16(fp)
   1397c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   13980:	00000606 	br	1399c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13984:	e0bffc17 	ldw	r2,-16(fp)
   13988:	10800044 	addi	r2,r2,1
   1398c:	e0bffc15 	stw	r2,-16(fp)
   13990:	e0bffc17 	ldw	r2,-16(fp)
   13994:	10800810 	cmplti	r2,r2,32
   13998:	103fe01e 	bne	r2,zero,1391c <__alt_data_end+0xfffe191c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1399c:	e0bffd17 	ldw	r2,-12(fp)
}
   139a0:	e6ffff04 	addi	sp,fp,-4
   139a4:	dfc00217 	ldw	ra,8(sp)
   139a8:	df000117 	ldw	fp,4(sp)
   139ac:	dc000017 	ldw	r16,0(sp)
   139b0:	dec00304 	addi	sp,sp,12
   139b4:	f800283a 	ret

000139b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   139b8:	defffe04 	addi	sp,sp,-8
   139bc:	df000115 	stw	fp,4(sp)
   139c0:	df000104 	addi	fp,sp,4
   139c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   139c8:	e0bfff17 	ldw	r2,-4(fp)
   139cc:	10bffe84 	addi	r2,r2,-6
   139d0:	10c00428 	cmpgeui	r3,r2,16
   139d4:	18001a1e 	bne	r3,zero,13a40 <alt_exception_cause_generated_bad_addr+0x88>
   139d8:	100690ba 	slli	r3,r2,2
   139dc:	00800074 	movhi	r2,1
   139e0:	108e7c04 	addi	r2,r2,14832
   139e4:	1885883a 	add	r2,r3,r2
   139e8:	10800017 	ldw	r2,0(r2)
   139ec:	1000683a 	jmp	r2
   139f0:	00013a30 	cmpltui	zero,zero,1256
   139f4:	00013a30 	cmpltui	zero,zero,1256
   139f8:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   139fc:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   13a00:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   13a04:	00013a30 	cmpltui	zero,zero,1256
   13a08:	00013a38 	rdprs	zero,zero,1256
   13a0c:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   13a10:	00013a30 	cmpltui	zero,zero,1256
   13a14:	00013a30 	cmpltui	zero,zero,1256
   13a18:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   13a1c:	00013a30 	cmpltui	zero,zero,1256
   13a20:	00013a38 	rdprs	zero,zero,1256
   13a24:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   13a28:	00013a40 	call	13a4 <___vfprintf_internal_r+0xd60>
   13a2c:	00013a30 	cmpltui	zero,zero,1256
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   13a30:	00800044 	movi	r2,1
   13a34:	00000306 	br	13a44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   13a38:	0005883a 	mov	r2,zero
   13a3c:	00000106 	br	13a44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   13a40:	0005883a 	mov	r2,zero
  }
}
   13a44:	e037883a 	mov	sp,fp
   13a48:	df000017 	ldw	fp,0(sp)
   13a4c:	dec00104 	addi	sp,sp,4
   13a50:	f800283a 	ret

00013a54 <atexit>:
   13a54:	200b883a 	mov	r5,r4
   13a58:	000f883a 	mov	r7,zero
   13a5c:	000d883a 	mov	r6,zero
   13a60:	0009883a 	mov	r4,zero
   13a64:	0013b1c1 	jmpi	13b1c <__register_exitproc>

00013a68 <exit>:
   13a68:	defffe04 	addi	sp,sp,-8
   13a6c:	000b883a 	mov	r5,zero
   13a70:	dc000015 	stw	r16,0(sp)
   13a74:	dfc00115 	stw	ra,4(sp)
   13a78:	2021883a 	mov	r16,r4
   13a7c:	0013c340 	call	13c34 <__call_exitprocs>
   13a80:	00800074 	movhi	r2,1
   13a84:	10974a04 	addi	r2,r2,23848
   13a88:	11000017 	ldw	r4,0(r2)
   13a8c:	20800f17 	ldw	r2,60(r4)
   13a90:	10000126 	beq	r2,zero,13a98 <exit+0x30>
   13a94:	103ee83a 	callr	r2
   13a98:	8009883a 	mov	r4,r16
   13a9c:	0013db40 	call	13db4 <_exit>

00013aa0 <memcmp>:
   13aa0:	01c000c4 	movi	r7,3
   13aa4:	3980192e 	bgeu	r7,r6,13b0c <memcmp+0x6c>
   13aa8:	2144b03a 	or	r2,r4,r5
   13aac:	11c4703a 	and	r2,r2,r7
   13ab0:	10000f26 	beq	r2,zero,13af0 <memcmp+0x50>
   13ab4:	20800003 	ldbu	r2,0(r4)
   13ab8:	28c00003 	ldbu	r3,0(r5)
   13abc:	10c0151e 	bne	r2,r3,13b14 <memcmp+0x74>
   13ac0:	31bfff84 	addi	r6,r6,-2
   13ac4:	01ffffc4 	movi	r7,-1
   13ac8:	00000406 	br	13adc <memcmp+0x3c>
   13acc:	20800003 	ldbu	r2,0(r4)
   13ad0:	28c00003 	ldbu	r3,0(r5)
   13ad4:	31bfffc4 	addi	r6,r6,-1
   13ad8:	10c00e1e 	bne	r2,r3,13b14 <memcmp+0x74>
   13adc:	21000044 	addi	r4,r4,1
   13ae0:	29400044 	addi	r5,r5,1
   13ae4:	31fff91e 	bne	r6,r7,13acc <__alt_data_end+0xfffe1acc>
   13ae8:	0005883a 	mov	r2,zero
   13aec:	f800283a 	ret
   13af0:	20c00017 	ldw	r3,0(r4)
   13af4:	28800017 	ldw	r2,0(r5)
   13af8:	18bfee1e 	bne	r3,r2,13ab4 <__alt_data_end+0xfffe1ab4>
   13afc:	31bfff04 	addi	r6,r6,-4
   13b00:	21000104 	addi	r4,r4,4
   13b04:	29400104 	addi	r5,r5,4
   13b08:	39bff936 	bltu	r7,r6,13af0 <__alt_data_end+0xfffe1af0>
   13b0c:	303fe91e 	bne	r6,zero,13ab4 <__alt_data_end+0xfffe1ab4>
   13b10:	003ff506 	br	13ae8 <__alt_data_end+0xfffe1ae8>
   13b14:	10c5c83a 	sub	r2,r2,r3
   13b18:	f800283a 	ret

00013b1c <__register_exitproc>:
   13b1c:	defffa04 	addi	sp,sp,-24
   13b20:	dc000315 	stw	r16,12(sp)
   13b24:	04000074 	movhi	r16,1
   13b28:	84174a04 	addi	r16,r16,23848
   13b2c:	80c00017 	ldw	r3,0(r16)
   13b30:	dc400415 	stw	r17,16(sp)
   13b34:	dfc00515 	stw	ra,20(sp)
   13b38:	18805217 	ldw	r2,328(r3)
   13b3c:	2023883a 	mov	r17,r4
   13b40:	10003726 	beq	r2,zero,13c20 <__register_exitproc+0x104>
   13b44:	10c00117 	ldw	r3,4(r2)
   13b48:	010007c4 	movi	r4,31
   13b4c:	20c00e16 	blt	r4,r3,13b88 <__register_exitproc+0x6c>
   13b50:	1a000044 	addi	r8,r3,1
   13b54:	8800221e 	bne	r17,zero,13be0 <__register_exitproc+0xc4>
   13b58:	18c00084 	addi	r3,r3,2
   13b5c:	18c7883a 	add	r3,r3,r3
   13b60:	18c7883a 	add	r3,r3,r3
   13b64:	12000115 	stw	r8,4(r2)
   13b68:	10c7883a 	add	r3,r2,r3
   13b6c:	19400015 	stw	r5,0(r3)
   13b70:	0005883a 	mov	r2,zero
   13b74:	dfc00517 	ldw	ra,20(sp)
   13b78:	dc400417 	ldw	r17,16(sp)
   13b7c:	dc000317 	ldw	r16,12(sp)
   13b80:	dec00604 	addi	sp,sp,24
   13b84:	f800283a 	ret
   13b88:	00800034 	movhi	r2,0
   13b8c:	10800004 	addi	r2,r2,0
   13b90:	10002626 	beq	r2,zero,13c2c <__register_exitproc+0x110>
   13b94:	01006404 	movi	r4,400
   13b98:	d9400015 	stw	r5,0(sp)
   13b9c:	d9800115 	stw	r6,4(sp)
   13ba0:	d9c00215 	stw	r7,8(sp)
   13ba4:	00000000 	call	0 <__alt_mem_ram>
   13ba8:	d9400017 	ldw	r5,0(sp)
   13bac:	d9800117 	ldw	r6,4(sp)
   13bb0:	d9c00217 	ldw	r7,8(sp)
   13bb4:	10001d26 	beq	r2,zero,13c2c <__register_exitproc+0x110>
   13bb8:	81000017 	ldw	r4,0(r16)
   13bbc:	10000115 	stw	zero,4(r2)
   13bc0:	02000044 	movi	r8,1
   13bc4:	22405217 	ldw	r9,328(r4)
   13bc8:	0007883a 	mov	r3,zero
   13bcc:	12400015 	stw	r9,0(r2)
   13bd0:	20805215 	stw	r2,328(r4)
   13bd4:	10006215 	stw	zero,392(r2)
   13bd8:	10006315 	stw	zero,396(r2)
   13bdc:	883fde26 	beq	r17,zero,13b58 <__alt_data_end+0xfffe1b58>
   13be0:	18c9883a 	add	r4,r3,r3
   13be4:	2109883a 	add	r4,r4,r4
   13be8:	1109883a 	add	r4,r2,r4
   13bec:	21802215 	stw	r6,136(r4)
   13bf0:	01800044 	movi	r6,1
   13bf4:	12406217 	ldw	r9,392(r2)
   13bf8:	30cc983a 	sll	r6,r6,r3
   13bfc:	4992b03a 	or	r9,r9,r6
   13c00:	12406215 	stw	r9,392(r2)
   13c04:	21c04215 	stw	r7,264(r4)
   13c08:	01000084 	movi	r4,2
   13c0c:	893fd21e 	bne	r17,r4,13b58 <__alt_data_end+0xfffe1b58>
   13c10:	11006317 	ldw	r4,396(r2)
   13c14:	218cb03a 	or	r6,r4,r6
   13c18:	11806315 	stw	r6,396(r2)
   13c1c:	003fce06 	br	13b58 <__alt_data_end+0xfffe1b58>
   13c20:	18805304 	addi	r2,r3,332
   13c24:	18805215 	stw	r2,328(r3)
   13c28:	003fc606 	br	13b44 <__alt_data_end+0xfffe1b44>
   13c2c:	00bfffc4 	movi	r2,-1
   13c30:	003fd006 	br	13b74 <__alt_data_end+0xfffe1b74>

00013c34 <__call_exitprocs>:
   13c34:	defff504 	addi	sp,sp,-44
   13c38:	df000915 	stw	fp,36(sp)
   13c3c:	dd400615 	stw	r21,24(sp)
   13c40:	dc800315 	stw	r18,12(sp)
   13c44:	dfc00a15 	stw	ra,40(sp)
   13c48:	ddc00815 	stw	r23,32(sp)
   13c4c:	dd800715 	stw	r22,28(sp)
   13c50:	dd000515 	stw	r20,20(sp)
   13c54:	dcc00415 	stw	r19,16(sp)
   13c58:	dc400215 	stw	r17,8(sp)
   13c5c:	dc000115 	stw	r16,4(sp)
   13c60:	d9000015 	stw	r4,0(sp)
   13c64:	2839883a 	mov	fp,r5
   13c68:	04800044 	movi	r18,1
   13c6c:	057fffc4 	movi	r21,-1
   13c70:	00800074 	movhi	r2,1
   13c74:	10974a04 	addi	r2,r2,23848
   13c78:	12000017 	ldw	r8,0(r2)
   13c7c:	45005217 	ldw	r20,328(r8)
   13c80:	44c05204 	addi	r19,r8,328
   13c84:	a0001c26 	beq	r20,zero,13cf8 <__call_exitprocs+0xc4>
   13c88:	a0800117 	ldw	r2,4(r20)
   13c8c:	15ffffc4 	addi	r23,r2,-1
   13c90:	b8000d16 	blt	r23,zero,13cc8 <__call_exitprocs+0x94>
   13c94:	14000044 	addi	r16,r2,1
   13c98:	8421883a 	add	r16,r16,r16
   13c9c:	8421883a 	add	r16,r16,r16
   13ca0:	84402004 	addi	r17,r16,128
   13ca4:	a463883a 	add	r17,r20,r17
   13ca8:	a421883a 	add	r16,r20,r16
   13cac:	e0001e26 	beq	fp,zero,13d28 <__call_exitprocs+0xf4>
   13cb0:	80804017 	ldw	r2,256(r16)
   13cb4:	e0801c26 	beq	fp,r2,13d28 <__call_exitprocs+0xf4>
   13cb8:	bdffffc4 	addi	r23,r23,-1
   13cbc:	843fff04 	addi	r16,r16,-4
   13cc0:	8c7fff04 	addi	r17,r17,-4
   13cc4:	bd7ff91e 	bne	r23,r21,13cac <__alt_data_end+0xfffe1cac>
   13cc8:	00800034 	movhi	r2,0
   13ccc:	10800004 	addi	r2,r2,0
   13cd0:	10000926 	beq	r2,zero,13cf8 <__call_exitprocs+0xc4>
   13cd4:	a0800117 	ldw	r2,4(r20)
   13cd8:	1000301e 	bne	r2,zero,13d9c <__call_exitprocs+0x168>
   13cdc:	a0800017 	ldw	r2,0(r20)
   13ce0:	10003226 	beq	r2,zero,13dac <__call_exitprocs+0x178>
   13ce4:	a009883a 	mov	r4,r20
   13ce8:	98800015 	stw	r2,0(r19)
   13cec:	00000000 	call	0 <__alt_mem_ram>
   13cf0:	9d000017 	ldw	r20,0(r19)
   13cf4:	a03fe41e 	bne	r20,zero,13c88 <__alt_data_end+0xfffe1c88>
   13cf8:	dfc00a17 	ldw	ra,40(sp)
   13cfc:	df000917 	ldw	fp,36(sp)
   13d00:	ddc00817 	ldw	r23,32(sp)
   13d04:	dd800717 	ldw	r22,28(sp)
   13d08:	dd400617 	ldw	r21,24(sp)
   13d0c:	dd000517 	ldw	r20,20(sp)
   13d10:	dcc00417 	ldw	r19,16(sp)
   13d14:	dc800317 	ldw	r18,12(sp)
   13d18:	dc400217 	ldw	r17,8(sp)
   13d1c:	dc000117 	ldw	r16,4(sp)
   13d20:	dec00b04 	addi	sp,sp,44
   13d24:	f800283a 	ret
   13d28:	a0800117 	ldw	r2,4(r20)
   13d2c:	80c00017 	ldw	r3,0(r16)
   13d30:	10bfffc4 	addi	r2,r2,-1
   13d34:	15c01426 	beq	r2,r23,13d88 <__call_exitprocs+0x154>
   13d38:	80000015 	stw	zero,0(r16)
   13d3c:	183fde26 	beq	r3,zero,13cb8 <__alt_data_end+0xfffe1cb8>
   13d40:	95c8983a 	sll	r4,r18,r23
   13d44:	a0806217 	ldw	r2,392(r20)
   13d48:	a5800117 	ldw	r22,4(r20)
   13d4c:	2084703a 	and	r2,r4,r2
   13d50:	10000b26 	beq	r2,zero,13d80 <__call_exitprocs+0x14c>
   13d54:	a0806317 	ldw	r2,396(r20)
   13d58:	2088703a 	and	r4,r4,r2
   13d5c:	20000c1e 	bne	r4,zero,13d90 <__call_exitprocs+0x15c>
   13d60:	89400017 	ldw	r5,0(r17)
   13d64:	d9000017 	ldw	r4,0(sp)
   13d68:	183ee83a 	callr	r3
   13d6c:	a0800117 	ldw	r2,4(r20)
   13d70:	15bfbf1e 	bne	r2,r22,13c70 <__alt_data_end+0xfffe1c70>
   13d74:	98800017 	ldw	r2,0(r19)
   13d78:	153fcf26 	beq	r2,r20,13cb8 <__alt_data_end+0xfffe1cb8>
   13d7c:	003fbc06 	br	13c70 <__alt_data_end+0xfffe1c70>
   13d80:	183ee83a 	callr	r3
   13d84:	003ff906 	br	13d6c <__alt_data_end+0xfffe1d6c>
   13d88:	a5c00115 	stw	r23,4(r20)
   13d8c:	003feb06 	br	13d3c <__alt_data_end+0xfffe1d3c>
   13d90:	89000017 	ldw	r4,0(r17)
   13d94:	183ee83a 	callr	r3
   13d98:	003ff406 	br	13d6c <__alt_data_end+0xfffe1d6c>
   13d9c:	a0800017 	ldw	r2,0(r20)
   13da0:	a027883a 	mov	r19,r20
   13da4:	1029883a 	mov	r20,r2
   13da8:	003fb606 	br	13c84 <__alt_data_end+0xfffe1c84>
   13dac:	0005883a 	mov	r2,zero
   13db0:	003ffb06 	br	13da0 <__alt_data_end+0xfffe1da0>

00013db4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13db4:	defffd04 	addi	sp,sp,-12
   13db8:	df000215 	stw	fp,8(sp)
   13dbc:	df000204 	addi	fp,sp,8
   13dc0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13dc4:	0001883a 	nop
   13dc8:	e0bfff17 	ldw	r2,-4(fp)
   13dcc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13dd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13dd4:	10000226 	beq	r2,zero,13de0 <_exit+0x2c>
    ALT_SIM_FAIL();
   13dd8:	002af070 	cmpltui	zero,zero,43969
   13ddc:	00000106 	br	13de4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13de0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13de4:	003fff06 	br	13de4 <__alt_data_end+0xfffe1de4>

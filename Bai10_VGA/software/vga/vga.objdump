
vga.elf:     file format elf32-littlenios2
vga.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020230

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x000152f0 memsz 0x000152f0 flags r-x
    LOAD off    0x00017000 vaddr 0x00000000 paddr 0x04035310 align 2**12
         filesz 0x000020ac memsz 0x000027bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000150e0  04020230  04020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000540  00000000  04035310  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  00000540  04035850  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000710  000020ac  040373bc  000190ac  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  000027bc  000027bc  000190ac  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  040373bc  040373bc  000190ac  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000190ac  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f38  00000000  00000000  000190d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025cc4  00000000  00000000  0001a008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000094d4  00000000  00000000  0003fccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c55c  00000000  00000000  000491a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000028e8  00000000  00000000  000556fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047b5  00000000  00000000  00057fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  0005c799  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00074008  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001918  00000000  00000000  00074048  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007963e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00079641  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007964d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007964e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007964f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00079653  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00079657  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007965b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00079666  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00079671  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  0007967c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  0007967f  2**0
                  CONTENTS, READONLY
 30 .jdi          00003b92  00000000  00000000  000796a4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006c621  00000000  00000000  0007d236  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000540 l    d  .rwdata	00000000 .rwdata
000020ac l    d  .bss	00000000 .bss
000027bc l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
040373bc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_bsp//obj/HAL/src/crt0.o
04020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000023a l     O .rodata	00000010 zeroes.4404
04022a78 l     F .text	000000bc __sbprintf
0000024a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04022c88 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040247e0 l     F .text	00000008 __fp_unlock
040247f4 l     F .text	0000019c __sinit.part.1
04024990 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000540 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000984 l     O .rwdata	00000020 lc_ctype_charset
00000964 l     O .rwdata	00000020 lc_message_charset
000009a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000027c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04027e64 l     F .text	000000fc __sprint_r.part.0
000003a0 l     O .rodata	00000010 zeroes.4349
040294a0 l     F .text	000000bc __sbprintf
000003b0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0402d4e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0402d5fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0402d628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0402d71c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402d804 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402d8f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0402dacc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000209c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0402dd70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402deac l     F .text	00000034 alt_dev_reg
00000f8c l     O .rwdata	00001060 jtag_uart_0
00001fec l     O .rwdata	00000054 video_pixel_buffer_dma_0
00002040 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04032724 l     F .text	0000020c altera_avalon_jtag_uart_irq
04032930 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04032f68 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04034278 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04034768 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040348c8 l     F .text	0000003c alt_get_errno
04034904 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002128 g     O .bss	00000004 alt_instruction_exception_handler
000020f0 g     O .bss	00000004 aux_status_register
040274a8 g     F .text	00000074 _mprec_log10
04027594 g     F .text	0000008c __any_on
04029a54 g     F .text	00000054 _isatty_r
00000288 g     O .rodata	00000028 __mprec_tinytens
0402da08 g     F .text	0000007c alt_main
04033998 g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
04020614 g     F .text	000000c0 _puts_r
000026bc g     O .bss	00000100 alt_irq
04029aa8 g     F .text	00000060 _lseek_r
04035850 g       *ABS*	00000000 __flash_rwdata_start
0402bec0 g     F .text	00000088 .hidden __eqdf2
0402e4d0 g     F .text	000001a4 Check_for_Master_Boot_Record
000027bc g       *ABS*	00000000 __alt_heap_start
04032334 g     F .text	000001cc alt_up_sd_card_fclose
040205d8 g     F .text	0000003c printf
04029cc0 g     F .text	0000009c _wcrtomb_r
04027d24 g     F .text	0000005c __sseek
04024b40 g     F .text	00000010 __sinit
04029b68 g     F .text	00000140 __swbuf_r
04025614 g     F .text	0000007c _setlocale_r
04024998 g     F .text	00000078 __sfmoreglue
0402daa8 g     F .text	00000024 __malloc_unlock
00002114 g     O .bss	00000004 current_sector_modified
000020b4 g     O .bss	00000004 j
040262e4 g     F .text	0000015c memmove
04024b28 g     F .text	00000018 _cleanup
04026568 g     F .text	000000a8 _Balloc
04030f04 g     F .text	000000c4 alt_up_sd_card_is_Present
0402e218 g     F .text	0000004c Save_Modified_Sector
04033098 g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
0402bf48 g     F .text	000000dc .hidden __gtdf2
04034cf0 g     F .text	00000024 altera_nios2_gen2_irq_init
0403305c g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
04020000 g     F .entry	0000000c __reset
0000210c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
04020020 g       *ABS*	00000000 __flash_exceptions_start
040299f8 g     F .text	0000005c _fstat_r
000020d8 g     O .bss	00000004 errno
04027ca0 g     F .text	00000008 __seofread
000020e0 g     O .bss	00000004 alt_argv
0000a06c g       *ABS*	00000000 _gp
0402dd40 g     F .text	00000030 usleep
040314cc g     F .text	0000037c alt_up_sd_card_fopen
04031034 g     F .text	000000d0 alt_up_sd_card_find_first
04033240 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00002100 g     O .bss	00000004 command_argument_register
00000e0c g     O .rwdata	00000180 alt_fd_list
04030768 g     F .text	00000134 find_first_empty_record_in_root_directory
04034418 g     F .text	00000090 alt_find_dev
0402619c g     F .text	00000148 memcpy
040247e8 g     F .text	0000000c _cleanup_r
0402d300 g     F .text	000000dc .hidden __floatsidf
0403484c g     F .text	0000007c alt_io_redirect
0402c024 g     F .text	000000f4 .hidden __ltdf2
04035310 g       *ABS*	00000000 __DTOR_END__
040206d4 g     F .text	00000014 puts
04034ee0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04030358 g     F .text	000001bc find_first_empty_cluster
04027b84 g     F .text	00000074 __fpclassifyd
04027404 g     F .text	000000a4 __ratio
04030e48 g     F .text	000000bc alt_up_sd_card_open_dev
04029484 g     F .text	0000001c __vfiprintf_internal
040332fc g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
04032b28 g     F .text	0000021c altera_avalon_jtag_uart_read
040205a8 g     F .text	00000030 _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0402ab60 g     F .text	00000064 .hidden __udivsi3
0402d758 g     F .text	000000ac isatty
000002d8 g     O .rodata	000000c8 __mprec_tens
04033768 g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
04025690 g     F .text	0000000c __locale_charset
000020d4 g     O .bss	00000004 __malloc_top_pad
00002074 g     O .rwdata	00000004 __mb_cur_max
040256c0 g     F .text	0000000c _localeconv_r
0402699c g     F .text	0000003c __i2b
04024fc4 g     F .text	000004c8 __sfvwrite_r
0402f638 g     F .text	000000b8 get_dir_divider_location
04027bf8 g     F .text	00000054 _sbrk_r
04033ccc g     F .text	000000c0 helper_plot_pixel
0402f308 g     F .text	000000c4 filename_to_upper_case
04031848 g     F .text	00000088 alt_up_sd_card_set_attributes
0402e674 g     F .text	0000027c Read_File_Record_At_Offset
04029b08 g     F .text	00000060 _read_r
00002094 g     O .rwdata	00000004 alt_max_fd
0402fed4 g     F .text	00000484 find_file_in_directory
040296ec g     F .text	000000f0 _fclose_r
040247b0 g     F .text	00000030 fflush
000020d0 g     O .bss	00000004 __malloc_max_sbrked_mem
04030fc8 g     F .text	0000006c alt_up_sd_card_is_FAT16
0402ac44 g     F .text	000008ac .hidden __adddf3
040271ac g     F .text	0000010c __b2d
04033330 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
0402a4a4 g     F .text	000005c4 .hidden __umoddi3
0402d92c g     F .text	000000dc lseek
0000206c g     O .rwdata	00000004 _global_impure_ptr
0402f98c g     F .text	00000548 get_home_directory_cluster_for_file
04027620 g     F .text	00000564 _realloc_r
000027bc g       *ABS*	00000000 __bss_end
04034678 g     F .text	000000f0 alt_iic_isr_register
0403346c g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
04034be8 g     F .text	00000108 alt_tick
04029ea8 g     F .text	000005fc .hidden __udivdi3
04029954 g     F .text	00000024 _fputwc_r
000002b0 g     O .rodata	00000028 __mprec_bigtens
04026780 g     F .text	00000104 __s2b
0402d3dc g     F .text	000000a8 .hidden __floatunsidf
04026eec g     F .text	00000060 __mcmp
00002118 g     O .bss	00000004 current_sector_index
04024b60 g     F .text	00000018 __fp_lock_all
0403462c g     F .text	0000004c alt_ic_irq_enabled
04034b4c g     F .text	0000009c alt_alarm_stop
0402e3f0 g     F .text	000000e0 mark_cluster
0000211c g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
00000de4 g     O .rwdata	00000028 alt_dev_null
0403089c g     F .text	0000018c convert_filename_to_name_extension
04034258 g     F .text	00000020 alt_dcache_flush_all
04026884 g     F .text	00000068 __hi0bits
04033c04 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
000020ec g     O .bss	00000004 is_sd_card_formated_as_FAT16
0402d280 g     F .text	00000080 .hidden __fixdfsi
04030514 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
000020ac g       *ABS*	00000000 __ram_rwdata_end
0000208c g     O .rwdata	00000008 alt_dev_list
0402ddac g     F .text	00000100 write
000020ac g     O .bss	00000004 pixel1
00002110 g     O .bss	00000004 device_pointer
04033d8c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00000540 g       *ABS*	00000000 __ram_rodata_end
0402d664 g     F .text	000000b8 fstat
0402c024 g     F .text	000000f4 .hidden __ledf2
04026c64 g     F .text	00000140 __pow5mult
04027f78 g     F .text	0000150c ___vfiprintf_internal_r
000020c8 g     O .bss	00000004 __nlocale_changed
0402abc4 g     F .text	00000058 .hidden __umodsi3
000027bc g       *ABS*	00000000 end
04032664 g     F .text	000000c0 altera_avalon_jtag_uart_init
000020b0 g     O .bss	00000004 i
040201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04035310 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
04032fe0 g     F .text	0000007c alt_avalon_timer_sc_init
0402d484 g     F .text	00000064 .hidden __clzsi2
04032d44 g     F .text	00000224 altera_avalon_jtag_uart_write
04024b50 g     F .text	00000004 __sfp_lock_acquire
040260b8 g     F .text	000000e4 memchr
04020780 g     F .text	000022dc ___vfprintf_internal_r
04024cb4 g     F .text	00000310 _free_r
0402569c g     F .text	00000010 __locale_mb_cur_max
0403515c g     F .text	00000180 __call_exitprocs
000020c4 g     O .bss	00000004 __mlocale_changed
00002078 g     O .rwdata	00000004 __malloc_sbrk_base
04020230 g     F .text	0000003c _start
00002120 g     O .bss	00000004 _alt_tick_rate
000020bc g     O .bss	00000004 pixel
04026da4 g     F .text	00000148 __lshift
00002124 g     O .bss	00000004 _alt_nticks
0402db08 g     F .text	00000104 read
0402df18 g     F .text	0000024c alt_sys_init
04035044 g     F .text	00000118 __register_exitproc
040269d8 g     F .text	0000028c __multiply
040329d0 g     F .text	00000068 altera_avalon_jtag_uart_close
0402ac1c g     F .text	00000028 .hidden __mulsi3
00000540 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
0000212c g     O .bss	00000028 __malloc_current_mallinfo
040272b8 g     F .text	0000014c __d2b
000020e8 g     O .bss	00000004 initialized
04032500 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04034e1c g     F .text	000000c4 alt_get_fd
00002154 g     O .bss	00000014 search_data
04034100 g     F .text	00000158 alt_busy_sleep
040295bc g     F .text	00000054 _close_r
04034fc8 g     F .text	0000007c memcmp
040325c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000027bc g       *ABS*	00000000 __alt_stack_base
04032610 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04022b34 g     F .text	00000154 __swsetup_r
0402b4f0 g     F .text	000009d0 .hidden __divdf3
04024a10 g     F .text	00000118 __sfp
00002168 g     O .bss	00000054 boot_sector_data
0402751c g     F .text	00000078 __copybits
000009dc g     O .rwdata	00000408 __malloc_av_
04024b5c g     F .text	00000004 __sinit_lock_release
0402c118 g     F .text	0000086c .hidden __muldf3
04027c4c g     F .text	00000054 __sread
04034d14 g     F .text	00000108 alt_find_file
040342b4 g     F .text	000000a4 alt_dev_llist_insert
0402da84 g     F .text	00000024 __malloc_lock
0402dc90 g     F .text	000000b0 sbrk
04024754 g     F .text	0000005c _fflush_r
04029610 g     F .text	000000dc _calloc_r
000020ac g       *ABS*	00000000 __bss_start
04026440 g     F .text	00000128 memset
0402026c g     F .text	0000033c main
000020e4 g     O .bss	00000004 alt_envp
000020cc g     O .bss	00000004 __malloc_max_total_mem
0403329c g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
04032560 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04029ca8 g     F .text	00000018 __swbuf
040318d0 g     F .text	00000088 alt_up_sd_card_get_attributes
0402e164 g     F .text	000000b4 Write_Sector_Data
04031ce8 g     F .text	0000064c alt_up_sd_card_write
04027d80 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
040297dc g     F .text	00000014 fclose
04022eb0 g     F .text	00001688 _dtoa_r
040258ac g     F .text	0000080c _malloc_r
04029e1c g     F .text	00000030 __ascii_wctomb
00002098 g     O .rwdata	00000004 alt_errno
0402548c g     F .text	000000c4 _fwalk
0402aa68 g     F .text	00000084 .hidden __divsi3
04024b90 g     F .text	00000124 _malloc_trim_r
04035310 g       *ABS*	00000000 __CTOR_END__
000020f4 g     O .bss	00000004 status_register
04027d88 g     F .text	000000dc strcmp
000020fc g     O .bss	00000004 command_register
04035310 g       *ABS*	00000000 __flash_rodata_start
04035310 g       *ABS*	00000000 __DTOR_LIST__
000020b8 g     O .bss	00000004 count
0402bec0 g     F .text	00000088 .hidden __nedf2
0402dee0 g     F .text	00000038 alt_irq_init
0402dc0c g     F .text	00000084 alt_release_fd
0402e33c g     F .text	000000b4 get_cluster_flag
000003c0 g     O .rodata	00000100 .hidden __clz_tab
0402e8f0 g     F .text	0000028c Write_File_Record_At_Offset
000020c0 g     O .bss	00000004 _PathLocale
04034f7c g     F .text	00000014 atexit
0402955c g     F .text	00000060 _write_r
040256cc g     F .text	00000018 setlocale
0402eb7c g     F .text	000006a0 Check_for_DOS_FAT
04030a28 g     F .text	000002d8 create_file
00002070 g     O .rwdata	00000004 _impure_ptr
000020f8 g     O .bss	00000004 CSD_register_w0
000020dc g     O .bss	00000004 alt_argc
04024538 g     F .text	0000021c __sflush_r
040343b8 g     F .text	00000060 _do_dtors
040256b8 g     F .text	00000008 __locale_cjk_lang
04020020 g       .exceptions	00000000 alt_irq_entry
04027148 g     F .text	00000064 __ulp
04024b78 g     F .text	00000018 __fp_unlock_all
00002084 g     O .rwdata	00000008 alt_fs_list
0402f3cc g     F .text	0000026c check_file_name_for_FAT16_compliance
00002104 g     O .bss	00000004 buffer_memory
04020020 g       *ABS*	00000000 __ram_exceptions_start
040256e4 g     F .text	0000000c localeconv
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
040344c8 g     F .text	00000050 alt_ic_isr_register
00002108 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
000020ac g       *ABS*	00000000 _edata
000027bc g       *ABS*	00000000 _end
000021bc g     O .bss	00000500 active_files
040297f0 g     F .text	00000164 __fputwc
04020230 g       *ABS*	00000000 __ram_exceptions_end
04030d00 g     F .text	00000148 copy_file_record_name_to_string
04032a38 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0402f21c g     F .text	000000ec Look_for_FAT16
040345a0 g     F .text	0000008c alt_ic_irq_disable
04027ca8 g     F .text	0000007c __swrite
0000207c g     O .rwdata	00000004 __malloc_trim_threshold
040256ac g     F .text	0000000c __locale_msgcharset
04034f90 g     F .text	00000038 exit
04031104 g     F .text	000003c8 alt_up_sd_card_find_next
04025550 g     F .text	000000c4 _fwalk_reent
04026f4c g     F .text	000001fc __mdiff
0402aaec g     F .text	00000074 .hidden __modsi3
0402e264 g     F .text	000000d8 Read_Sector_Data
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04024b54 g     F .text	00000004 __sfp_lock_release
040352dc g     F .text	00000034 _exit
04033fd4 g     F .text	0000012c alt_alarm_start
04031958 g     F .text	00000390 alt_up_sd_card_read
040256f0 g     F .text	000001bc __smakebuf_r
040206e8 g     F .text	00000098 strlen
040349f0 g     F .text	0000015c open
0402bf48 g     F .text	000000dc .hidden __gedf2
00002080 g     O .rwdata	00000004 __wctomb
04027f60 g     F .text	00000018 __sprint_r
040344a8 g     F .text	00000020 alt_icache_flush_all
000020a0 g     O .rwdata	00000004 alt_priority_mask
04034518 g     F .text	00000088 alt_ic_irq_enable
04022a5c g     F .text	0000001c __vfprintf_internal
04029e4c g     F .text	0000005c _wctomb_r
0402c984 g     F .text	000008fc .hidden __subdf3
040268ec g     F .text	000000b0 __lo0bits
000020a4 g     O .rwdata	00000008 alt_alarm_list
04034358 g     F .text	00000060 _do_ctors
04029d5c g     F .text	000000c0 wcrtomb
0402d524 g     F .text	000000d8 close
0402d86c g     F .text	00000084 alt_load
0402f6f0 g     F .text	0000029c match_file_record_to_name_ext
04029978 g     F .text	00000080 fputwc
04024b58 g     F .text	00000004 __sinit_lock_acquire
04026638 g     F .text	00000148 __multadd
04026610 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020000:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020004:	08408c14 	ori	at,at,560
    jmp r1
 4020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	00800034 	movhi	r2,0
 4020140:	1089af04 	addi	r2,r2,9916
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	00800034 	movhi	r2,0
 4020158:	1089af04 	addi	r2,r2,9916
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__flash_rwdata_start+0xfffea8dc>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__flash_rwdata_start+0xfffea8d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40201e4:	00bfffc4 	movi	r2,-1
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40201f0:	d0a02f17 	ldw	r2,-32580(gp)
 40201f4:	10000726 	beq	r2,zero,4020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40201f8:	d0a02f17 	ldw	r2,-32580(gp)
 40201fc:	e0fffd17 	ldw	r3,-12(fp)
 4020200:	e1bffe17 	ldw	r6,-8(fp)
 4020204:	e17fff17 	ldw	r5,-4(fp)
 4020208:	1809883a 	mov	r4,r3
 402020c:	103ee83a 	callr	r2
 4020210:	00000206 	br	402021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020218:	0005883a 	mov	r2,zero
}
 402021c:	e037883a 	mov	sp,fp
 4020220:	dfc00117 	ldw	ra,4(sp)
 4020224:	df000017 	ldw	fp,0(sp)
 4020228:	dec00204 	addi	sp,sp,8
 402022c:	f800283a 	ret

Disassembly of section .text:

04020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4020234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4020238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 402023c:	d6a81b14 	ori	gp,gp,41068
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4020244:	10882b14 	ori	r2,r2,8364

    movhi r3, %hi(__bss_end)
 4020248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 402024c:	18c9ef14 	ori	r3,r3,10172

    beq r2, r3, 1f
 4020250:	10c00326 	beq	r2,r3,4020260 <_start+0x30>

0:
    stw zero, (r2)
 4020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 402025c:	10fffd36 	bltu	r2,r3,4020254 <__flash_rwdata_start+0xfffeaa04>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020260:	402d86c0 	call	402d86c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020264:	402da080 	call	402da08 <alt_main>

04020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020268:	003fff06 	br	4020268 <__flash_rwdata_start+0xfffeaa18>

0402026c <main>:
#include "Altera_UP_SD_Card_Avalon_Interface.h"

int pixel,pixel1=0,i=0,j=0;
int count = 0;
int main()
{
 402026c:	defff304 	addi	sp,sp,-52
 4020270:	dfc00c15 	stw	ra,48(sp)
 4020274:	df000b15 	stw	fp,44(sp)
 4020278:	df000b04 	addi	fp,sp,44
  printf("Hello from Nios II!\n");
 402027c:	01000034 	movhi	r4,0
 4020280:	21000004 	addi	r4,r4,0
 4020284:	40206d40 	call	40206d4 <puts>
  alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
  pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/video_pixel_buffer_dma_0");
 4020288:	01000034 	movhi	r4,0
 402028c:	21000504 	addi	r4,r4,20
 4020290:	403305c0 	call	403305c <alt_up_pixel_buffer_dma_open_dev>
 4020294:	e0bffa15 	stw	r2,-24(fp)

  if ( pixel_buf_dma_dev == NULL)
 4020298:	e0bffa17 	ldw	r2,-24(fp)
 402029c:	1000041e 	bne	r2,zero,40202b0 <main+0x44>
  printf ("Error: could not open pixel buffer device \n");
 40202a0:	01000034 	movhi	r4,0
 40202a4:	21000d04 	addi	r4,r4,52
 40202a8:	40206d40 	call	40206d4 <puts>
 40202ac:	00000306 	br	40202bc <main+0x50>
  else
  printf ("Opened pixel buffer device \n");
 40202b0:	01000034 	movhi	r4,0
 40202b4:	21001804 	addi	r4,r4,96
 40202b8:	40206d40 	call	40206d4 <puts>

  alt_up_pixel_buffer_dma_clear_screen (pixel_buf_dma_dev, 0);
 40202bc:	000b883a 	mov	r5,zero
 40202c0:	e13ffa17 	ldw	r4,-24(fp)
 40202c4:	40333300 	call	4033330 <alt_up_pixel_buffer_dma_clear_screen>
  usleep(1000000);// 1sec
 40202c8:	010003f4 	movhi	r4,15
 40202cc:	21109004 	addi	r4,r4,16960
 40202d0:	402dd400 	call	402dd40 <usleep>

  alt_up_sd_card_dev *device_reference = NULL;
 40202d4:	e03ffb15 	stw	zero,-20(fp)
  int connected = 0;
 40202d8:	e03ff815 	stw	zero,-32(fp)

  	    device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
 40202dc:	01000034 	movhi	r4,0
 40202e0:	21001f04 	addi	r4,r4,124
 40202e4:	4030e480 	call	4030e48 <alt_up_sd_card_open_dev>
 40202e8:	e0bffb15 	stw	r2,-20(fp)
  	    if (device_reference != NULL)
 40202ec:	e0bffb17 	ldw	r2,-20(fp)
 40202f0:	1000a726 	beq	r2,zero,4020590 <main+0x324>
  	    {
  		printf("Initialized. Waiting for SD card...\n");
 40202f4:	01000034 	movhi	r4,0
 40202f8:	21002a04 	addi	r4,r4,168
 40202fc:	40206d40 	call	40206d4 <puts>
  		while(1)
  			{
  			    if ((connected == 0) && (alt_up_sd_card_is_Present()))
 4020300:	e0bff817 	ldw	r2,-32(fp)
 4020304:	1000981e 	bne	r2,zero,4020568 <main+0x2fc>
 4020308:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 402030c:	10009626 	beq	r2,zero,4020568 <main+0x2fc>
  			    {
  			        printf("Card connected.\n");
 4020310:	01000034 	movhi	r4,0
 4020314:	21003304 	addi	r4,r4,204
 4020318:	40206d40 	call	40206d4 <puts>
  			        if (alt_up_sd_card_is_FAT16())
 402031c:	4030fc80 	call	4030fc8 <alt_up_sd_card_is_FAT16>
 4020320:	10008b26 	beq	r2,zero,4020550 <main+0x2e4>
  			        {
  				    printf("FAT16 file system detected.\n");
 4020324:	01000034 	movhi	r4,0
 4020328:	21003704 	addi	r4,r4,220
 402032c:	40206d40 	call	40206d4 <puts>

  				    printf("Looking for first file.\n");
 4020330:	01000034 	movhi	r4,0
 4020334:	21003e04 	addi	r4,r4,248
 4020338:	40206d40 	call	40206d4 <puts>
  				    char * firstFile = "filenameunchanged";
 402033c:	00800034 	movhi	r2,0
 4020340:	10804404 	addi	r2,r2,272
 4020344:	e0bffc15 	stw	r2,-16(fp)
  				    alt_up_sd_card_find_first(".", firstFile);
 4020348:	e17ffc17 	ldw	r5,-16(fp)
 402034c:	01000034 	movhi	r4,0
 4020350:	21004904 	addi	r4,r4,292
 4020354:	40310340 	call	4031034 <alt_up_sd_card_find_first>
  				    printf("Volume Name: '%s'\n\n", firstFile);
 4020358:	e17ffc17 	ldw	r5,-16(fp)
 402035c:	01000034 	movhi	r4,0
 4020360:	21004a04 	addi	r4,r4,296
 4020364:	40205d80 	call	40205d8 <printf>

  				    short file;
  				    while((file = alt_up_sd_card_find_next(firstFile)) != -1)
 4020368:	00006f06 	br	4020528 <main+0x2bc>
  				    {
  				        int contentCount = 0;
 402036c:	e03ff915 	stw	zero,-28(fp)
  				        printf("===========================\n");
 4020370:	01000034 	movhi	r4,0
 4020374:	21004f04 	addi	r4,r4,316
 4020378:	40206d40 	call	40206d4 <puts>
  				        printf("Found file: '%s'\n", firstFile);
 402037c:	e17ffc17 	ldw	r5,-16(fp)
 4020380:	01000034 	movhi	r4,0
 4020384:	21005604 	addi	r4,r4,344
 4020388:	40205d80 	call	40205d8 <printf>

  				        short fileHandle = alt_up_sd_card_fopen(firstFile,false);
 402038c:	000b883a 	mov	r5,zero
 4020390:	e13ffc17 	ldw	r4,-16(fp)
 4020394:	40314cc0 	call	40314cc <alt_up_sd_card_fopen>
 4020398:	e0bffd8d 	sth	r2,-10(fp)
  				        printf("File handle: %i\n", fileHandle);
 402039c:	e0bffd8f 	ldh	r2,-10(fp)
 40203a0:	100b883a 	mov	r5,r2
 40203a4:	01000034 	movhi	r4,0
 40203a8:	21005b04 	addi	r4,r4,364
 40203ac:	40205d80 	call	40205d8 <printf>

  				        printf("Contents:\n");
 40203b0:	01000034 	movhi	r4,0
 40203b4:	21006004 	addi	r4,r4,384
 40203b8:	40206d40 	call	40206d4 <puts>
  				        short int readCharacter;
  				        short int readCharacter1;
  				        short int readCharacter2;

  				        while ((readCharacter = alt_up_sd_card_read(fileHandle)) != -1)
 40203bc:	00004c06 	br	40204f0 <main+0x284>
  				        {
  				        	if(count <100)
 40203c0:	d0a01317 	ldw	r2,-32692(gp)
 40203c4:	10801908 	cmpgei	r2,r2,100
 40203c8:	10000c1e 	bne	r2,zero,40203fc <main+0x190>
  				        		{
  				        		readCharacter1 = alt_up_sd_card_read(fileHandle);
 40203cc:	e0bffd8f 	ldh	r2,-10(fp)
 40203d0:	1009883a 	mov	r4,r2
 40203d4:	40319580 	call	4031958 <alt_up_sd_card_read>
 40203d8:	e0bffe8d 	sth	r2,-6(fp)
  				        		readCharacter2 = alt_up_sd_card_read(fileHandle);
 40203dc:	e0bffd8f 	ldh	r2,-10(fp)
 40203e0:	1009883a 	mov	r4,r2
 40203e4:	40319580 	call	4031958 <alt_up_sd_card_read>
 40203e8:	e0bfff0d 	sth	r2,-4(fp)
  				        		count ++;
 40203ec:	d0a01317 	ldw	r2,-32692(gp)
 40203f0:	10800044 	addi	r2,r2,1
 40203f4:	d0a01315 	stw	r2,-32692(gp)
 40203f8:	00003d06 	br	40204f0 <main+0x284>
  				        		}
  				        	else
  				        	{
  				        		readCharacter1 = alt_up_sd_card_read(fileHandle);
 40203fc:	e0bffd8f 	ldh	r2,-10(fp)
 4020400:	1009883a 	mov	r4,r2
 4020404:	40319580 	call	4031958 <alt_up_sd_card_read>
 4020408:	e0bffe8d 	sth	r2,-6(fp)
  				        		pixel1 =  readCharacter1;
 402040c:	e0bffe8f 	ldh	r2,-6(fp)
 4020410:	d0a01015 	stw	r2,-32704(gp)

  				        		readCharacter2 = alt_up_sd_card_read(fileHandle);
 4020414:	e0bffd8f 	ldh	r2,-10(fp)
 4020418:	1009883a 	mov	r4,r2
 402041c:	40319580 	call	4031958 <alt_up_sd_card_read>
 4020420:	e0bfff0d 	sth	r2,-4(fp)

  				        		pixel = readCharacter2>>3;
 4020424:	e0bfff0f 	ldh	r2,-4(fp)
 4020428:	1005d0fa 	srai	r2,r2,3
 402042c:	10bfffcc 	andi	r2,r2,65535
 4020430:	10a0001c 	xori	r2,r2,32768
 4020434:	10a00004 	addi	r2,r2,-32768
 4020438:	d0a01415 	stw	r2,-32688(gp)
  				        		pixel = (pixel<<11)|((pixel1>>2)<<5);
 402043c:	d0a01417 	ldw	r2,-32688(gp)
 4020440:	100692fa 	slli	r3,r2,11
 4020444:	d0a01017 	ldw	r2,-32704(gp)
 4020448:	1005d0ba 	srai	r2,r2,2
 402044c:	1004917a 	slli	r2,r2,5
 4020450:	1884b03a 	or	r2,r3,r2
 4020454:	d0a01415 	stw	r2,-32688(gp)
  				        		pixel = pixel | (readCharacter>>3);
 4020458:	e0bffe0f 	ldh	r2,-8(fp)
 402045c:	1005d0fa 	srai	r2,r2,3
 4020460:	10ffffcc 	andi	r3,r2,65535
 4020464:	18e0001c 	xori	r3,r3,32768
 4020468:	18e00004 	addi	r3,r3,-32768
 402046c:	d0a01417 	ldw	r2,-32688(gp)
 4020470:	1884b03a 	or	r2,r3,r2
 4020474:	d0a01415 	stw	r2,-32688(gp)
  				        		++contentCount;
 4020478:	e0bff917 	ldw	r2,-28(fp)
 402047c:	10800044 	addi	r2,r2,1
 4020480:	e0bff915 	stw	r2,-28(fp)
  				        		j++;
 4020484:	d0a01217 	ldw	r2,-32696(gp)
 4020488:	10800044 	addi	r2,r2,1
 402048c:	d0a01215 	stw	r2,-32696(gp)
  				        		if(j>319){j = 0; i ++;}
 4020490:	d0a01217 	ldw	r2,-32696(gp)
 4020494:	10805010 	cmplti	r2,r2,320
 4020498:	1000041e 	bne	r2,zero,40204ac <main+0x240>
 402049c:	d0201215 	stw	zero,-32696(gp)
 40204a0:	d0a01117 	ldw	r2,-32700(gp)
 40204a4:	10800044 	addi	r2,r2,1
 40204a8:	d0a01115 	stw	r2,-32700(gp)
  				        		if(i>239)i = 0;
 40204ac:	d0a01117 	ldw	r2,-32700(gp)
 40204b0:	10803c10 	cmplti	r2,r2,240
 40204b4:	1000011e 	bne	r2,zero,40204bc <main+0x250>
 40204b8:	d0201115 	stw	zero,-32700(gp)
  				        		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev, j, i, j, i, pixel, 0);
 40204bc:	d1201217 	ldw	r4,-32696(gp)
 40204c0:	d1601117 	ldw	r5,-32700(gp)
 40204c4:	d1a01217 	ldw	r6,-32696(gp)
 40204c8:	d0a01117 	ldw	r2,-32700(gp)
 40204cc:	d0e01417 	ldw	r3,-32688(gp)
 40204d0:	d8000215 	stw	zero,8(sp)
 40204d4:	d8c00115 	stw	r3,4(sp)
 40204d8:	d8800015 	stw	r2,0(sp)
 40204dc:	300f883a 	mov	r7,r6
 40204e0:	280d883a 	mov	r6,r5
 40204e4:	200b883a 	mov	r5,r4
 40204e8:	e13ffa17 	ldw	r4,-24(fp)
 40204ec:	403346c0 	call	403346c <alt_up_pixel_buffer_dma_draw_box>
  				        printf("Contents:\n");
  				        short int readCharacter;
  				        short int readCharacter1;
  				        short int readCharacter2;

  				        while ((readCharacter = alt_up_sd_card_read(fileHandle)) != -1)
 40204f0:	e0bffd8f 	ldh	r2,-10(fp)
 40204f4:	1009883a 	mov	r4,r2
 40204f8:	40319580 	call	4031958 <alt_up_sd_card_read>
 40204fc:	e0bffe0d 	sth	r2,-8(fp)
 4020500:	e0bffe0f 	ldh	r2,-8(fp)
 4020504:	10bfffd8 	cmpnei	r2,r2,-1
 4020508:	103fad1e 	bne	r2,zero,40203c0 <__flash_rwdata_start+0xfffeab70>
  				        		if(j>319){j = 0; i ++;}
  				        		if(i>239)i = 0;
  				        		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev, j, i, j, i, pixel, 0);
  				        	}
  				        }
  				        printf("\nContent size: %i", contentCount);
 402050c:	e17ff917 	ldw	r5,-28(fp)
 4020510:	01000034 	movhi	r4,0
 4020514:	21006304 	addi	r4,r4,396
 4020518:	40205d80 	call	40205d8 <printf>
  				        printf("\n===========================\n\n");
 402051c:	01000034 	movhi	r4,0
 4020520:	21006804 	addi	r4,r4,416
 4020524:	40206d40 	call	40206d4 <puts>
  				    char * firstFile = "filenameunchanged";
  				    alt_up_sd_card_find_first(".", firstFile);
  				    printf("Volume Name: '%s'\n\n", firstFile);

  				    short file;
  				    while((file = alt_up_sd_card_find_next(firstFile)) != -1)
 4020528:	e13ffc17 	ldw	r4,-16(fp)
 402052c:	40311040 	call	4031104 <alt_up_sd_card_find_next>
 4020530:	e0bffd0d 	sth	r2,-12(fp)
 4020534:	e0bffd0f 	ldh	r2,-12(fp)
 4020538:	10bfffd8 	cmpnei	r2,r2,-1
 402053c:	103f8b1e 	bne	r2,zero,402036c <__flash_rwdata_start+0xfffeab1c>
  				        	}
  				        }
  				        printf("\nContent size: %i", contentCount);
  				        printf("\n===========================\n\n");
  				    }
  				    	printf("finish");
 4020540:	01000034 	movhi	r4,0
 4020544:	21007004 	addi	r4,r4,448
 4020548:	40205d80 	call	40205d8 <printf>
 402054c:	00000306 	br	402055c <main+0x2f0>
  			        }
  			        else
  			        {
  				    printf("Unknown file system.\n");
 4020550:	01000034 	movhi	r4,0
 4020554:	21007204 	addi	r4,r4,456
 4020558:	40206d40 	call	40206d4 <puts>
  			        }

  			        connected = 1;
 402055c:	00800044 	movi	r2,1
 4020560:	e0bff815 	stw	r2,-32(fp)
 4020564:	00000906 	br	402058c <main+0x320>
  			    }
  			    else if ((connected == 1) && (alt_up_sd_card_is_Present() == false))
 4020568:	e0bff817 	ldw	r2,-32(fp)
 402056c:	10800058 	cmpnei	r2,r2,1
 4020570:	103f631e 	bne	r2,zero,4020300 <__flash_rwdata_start+0xfffeaab0>
 4020574:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 4020578:	103f611e 	bne	r2,zero,4020300 <__flash_rwdata_start+0xfffeaab0>
  			    {
  			        printf("Card disconnected.\n");
 402057c:	01000034 	movhi	r4,0
 4020580:	21007804 	addi	r4,r4,480
 4020584:	40206d40 	call	40206d4 <puts>
  			        connected = 0;
 4020588:	e03ff815 	stw	zero,-32(fp)
  			    }
  			}
 402058c:	003f5c06 	br	4020300 <__flash_rwdata_start+0xfffeaab0>
//  alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev, 200, 150, 249, 199, 0x001F, 0);
////  alt_up_pixel_buffer_dma_draw_rectangle(pixel_buf_dma_dev, 100,	220, 250, 230, 0xF800, 0);
//  alt_up_pixel_buffer_dma_draw_box(pixel_buf_dma_dev, 100,	220, 250, 230, 0xF81F, 0);


  return 0;
 4020590:	0005883a 	mov	r2,zero
}
 4020594:	e037883a 	mov	sp,fp
 4020598:	dfc00117 	ldw	ra,4(sp)
 402059c:	df000017 	ldw	fp,0(sp)
 40205a0:	dec00204 	addi	sp,sp,8
 40205a4:	f800283a 	ret

040205a8 <_printf_r>:
 40205a8:	defffd04 	addi	sp,sp,-12
 40205ac:	2805883a 	mov	r2,r5
 40205b0:	dfc00015 	stw	ra,0(sp)
 40205b4:	d9800115 	stw	r6,4(sp)
 40205b8:	d9c00215 	stw	r7,8(sp)
 40205bc:	21400217 	ldw	r5,8(r4)
 40205c0:	d9c00104 	addi	r7,sp,4
 40205c4:	100d883a 	mov	r6,r2
 40205c8:	40207800 	call	4020780 <___vfprintf_internal_r>
 40205cc:	dfc00017 	ldw	ra,0(sp)
 40205d0:	dec00304 	addi	sp,sp,12
 40205d4:	f800283a 	ret

040205d8 <printf>:
 40205d8:	defffc04 	addi	sp,sp,-16
 40205dc:	dfc00015 	stw	ra,0(sp)
 40205e0:	d9400115 	stw	r5,4(sp)
 40205e4:	d9800215 	stw	r6,8(sp)
 40205e8:	d9c00315 	stw	r7,12(sp)
 40205ec:	00800034 	movhi	r2,0
 40205f0:	10881c04 	addi	r2,r2,8304
 40205f4:	10800017 	ldw	r2,0(r2)
 40205f8:	200b883a 	mov	r5,r4
 40205fc:	d9800104 	addi	r6,sp,4
 4020600:	11000217 	ldw	r4,8(r2)
 4020604:	4022a5c0 	call	4022a5c <__vfprintf_internal>
 4020608:	dfc00017 	ldw	ra,0(sp)
 402060c:	dec00404 	addi	sp,sp,16
 4020610:	f800283a 	ret

04020614 <_puts_r>:
 4020614:	defff604 	addi	sp,sp,-40
 4020618:	dc000715 	stw	r16,28(sp)
 402061c:	2021883a 	mov	r16,r4
 4020620:	2809883a 	mov	r4,r5
 4020624:	dc400815 	stw	r17,32(sp)
 4020628:	dfc00915 	stw	ra,36(sp)
 402062c:	2823883a 	mov	r17,r5
 4020630:	40206e80 	call	40206e8 <strlen>
 4020634:	10c00044 	addi	r3,r2,1
 4020638:	d8800115 	stw	r2,4(sp)
 402063c:	00800034 	movhi	r2,0
 4020640:	10807d04 	addi	r2,r2,500
 4020644:	d8800215 	stw	r2,8(sp)
 4020648:	00800044 	movi	r2,1
 402064c:	d8800315 	stw	r2,12(sp)
 4020650:	00800084 	movi	r2,2
 4020654:	dc400015 	stw	r17,0(sp)
 4020658:	d8c00615 	stw	r3,24(sp)
 402065c:	dec00415 	stw	sp,16(sp)
 4020660:	d8800515 	stw	r2,20(sp)
 4020664:	80000226 	beq	r16,zero,4020670 <_puts_r+0x5c>
 4020668:	80800e17 	ldw	r2,56(r16)
 402066c:	10001426 	beq	r2,zero,40206c0 <_puts_r+0xac>
 4020670:	81400217 	ldw	r5,8(r16)
 4020674:	2880030b 	ldhu	r2,12(r5)
 4020678:	10c8000c 	andi	r3,r2,8192
 402067c:	1800061e 	bne	r3,zero,4020698 <_puts_r+0x84>
 4020680:	29001917 	ldw	r4,100(r5)
 4020684:	00f7ffc4 	movi	r3,-8193
 4020688:	10880014 	ori	r2,r2,8192
 402068c:	20c6703a 	and	r3,r4,r3
 4020690:	2880030d 	sth	r2,12(r5)
 4020694:	28c01915 	stw	r3,100(r5)
 4020698:	d9800404 	addi	r6,sp,16
 402069c:	8009883a 	mov	r4,r16
 40206a0:	4024fc40 	call	4024fc4 <__sfvwrite_r>
 40206a4:	1000091e 	bne	r2,zero,40206cc <_puts_r+0xb8>
 40206a8:	00800284 	movi	r2,10
 40206ac:	dfc00917 	ldw	ra,36(sp)
 40206b0:	dc400817 	ldw	r17,32(sp)
 40206b4:	dc000717 	ldw	r16,28(sp)
 40206b8:	dec00a04 	addi	sp,sp,40
 40206bc:	f800283a 	ret
 40206c0:	8009883a 	mov	r4,r16
 40206c4:	4024b400 	call	4024b40 <__sinit>
 40206c8:	003fe906 	br	4020670 <__flash_rwdata_start+0xfffeae20>
 40206cc:	00bfffc4 	movi	r2,-1
 40206d0:	003ff606 	br	40206ac <__flash_rwdata_start+0xfffeae5c>

040206d4 <puts>:
 40206d4:	00800034 	movhi	r2,0
 40206d8:	10881c04 	addi	r2,r2,8304
 40206dc:	200b883a 	mov	r5,r4
 40206e0:	11000017 	ldw	r4,0(r2)
 40206e4:	40206141 	jmpi	4020614 <_puts_r>

040206e8 <strlen>:
 40206e8:	208000cc 	andi	r2,r4,3
 40206ec:	10002026 	beq	r2,zero,4020770 <strlen+0x88>
 40206f0:	20800007 	ldb	r2,0(r4)
 40206f4:	10002026 	beq	r2,zero,4020778 <strlen+0x90>
 40206f8:	2005883a 	mov	r2,r4
 40206fc:	00000206 	br	4020708 <strlen+0x20>
 4020700:	10c00007 	ldb	r3,0(r2)
 4020704:	18001826 	beq	r3,zero,4020768 <strlen+0x80>
 4020708:	10800044 	addi	r2,r2,1
 402070c:	10c000cc 	andi	r3,r2,3
 4020710:	183ffb1e 	bne	r3,zero,4020700 <__flash_rwdata_start+0xfffeaeb0>
 4020714:	10c00017 	ldw	r3,0(r2)
 4020718:	01ffbff4 	movhi	r7,65279
 402071c:	39ffbfc4 	addi	r7,r7,-257
 4020720:	00ca303a 	nor	r5,zero,r3
 4020724:	01a02074 	movhi	r6,32897
 4020728:	19c7883a 	add	r3,r3,r7
 402072c:	31a02004 	addi	r6,r6,-32640
 4020730:	1946703a 	and	r3,r3,r5
 4020734:	1986703a 	and	r3,r3,r6
 4020738:	1800091e 	bne	r3,zero,4020760 <strlen+0x78>
 402073c:	10800104 	addi	r2,r2,4
 4020740:	10c00017 	ldw	r3,0(r2)
 4020744:	19cb883a 	add	r5,r3,r7
 4020748:	00c6303a 	nor	r3,zero,r3
 402074c:	28c6703a 	and	r3,r5,r3
 4020750:	1986703a 	and	r3,r3,r6
 4020754:	183ff926 	beq	r3,zero,402073c <__flash_rwdata_start+0xfffeaeec>
 4020758:	00000106 	br	4020760 <strlen+0x78>
 402075c:	10800044 	addi	r2,r2,1
 4020760:	10c00007 	ldb	r3,0(r2)
 4020764:	183ffd1e 	bne	r3,zero,402075c <__flash_rwdata_start+0xfffeaf0c>
 4020768:	1105c83a 	sub	r2,r2,r4
 402076c:	f800283a 	ret
 4020770:	2005883a 	mov	r2,r4
 4020774:	003fe706 	br	4020714 <__flash_rwdata_start+0xfffeaec4>
 4020778:	0005883a 	mov	r2,zero
 402077c:	f800283a 	ret

04020780 <___vfprintf_internal_r>:
 4020780:	deffb804 	addi	sp,sp,-288
 4020784:	dfc04715 	stw	ra,284(sp)
 4020788:	ddc04515 	stw	r23,276(sp)
 402078c:	dd404315 	stw	r21,268(sp)
 4020790:	d9002d15 	stw	r4,180(sp)
 4020794:	282f883a 	mov	r23,r5
 4020798:	302b883a 	mov	r21,r6
 402079c:	d9c02e15 	stw	r7,184(sp)
 40207a0:	df004615 	stw	fp,280(sp)
 40207a4:	dd804415 	stw	r22,272(sp)
 40207a8:	dd004215 	stw	r20,264(sp)
 40207ac:	dcc04115 	stw	r19,260(sp)
 40207b0:	dc804015 	stw	r18,256(sp)
 40207b4:	dc403f15 	stw	r17,252(sp)
 40207b8:	dc003e15 	stw	r16,248(sp)
 40207bc:	40256c00 	call	40256c0 <_localeconv_r>
 40207c0:	10800017 	ldw	r2,0(r2)
 40207c4:	1009883a 	mov	r4,r2
 40207c8:	d8803415 	stw	r2,208(sp)
 40207cc:	40206e80 	call	40206e8 <strlen>
 40207d0:	d8803715 	stw	r2,220(sp)
 40207d4:	d8802d17 	ldw	r2,180(sp)
 40207d8:	10000226 	beq	r2,zero,40207e4 <___vfprintf_internal_r+0x64>
 40207dc:	10800e17 	ldw	r2,56(r2)
 40207e0:	1000fb26 	beq	r2,zero,4020bd0 <___vfprintf_internal_r+0x450>
 40207e4:	b880030b 	ldhu	r2,12(r23)
 40207e8:	10c8000c 	andi	r3,r2,8192
 40207ec:	1800061e 	bne	r3,zero,4020808 <___vfprintf_internal_r+0x88>
 40207f0:	b9001917 	ldw	r4,100(r23)
 40207f4:	00f7ffc4 	movi	r3,-8193
 40207f8:	10880014 	ori	r2,r2,8192
 40207fc:	20c6703a 	and	r3,r4,r3
 4020800:	b880030d 	sth	r2,12(r23)
 4020804:	b8c01915 	stw	r3,100(r23)
 4020808:	10c0020c 	andi	r3,r2,8
 402080c:	1800c326 	beq	r3,zero,4020b1c <___vfprintf_internal_r+0x39c>
 4020810:	b8c00417 	ldw	r3,16(r23)
 4020814:	1800c126 	beq	r3,zero,4020b1c <___vfprintf_internal_r+0x39c>
 4020818:	1080068c 	andi	r2,r2,26
 402081c:	00c00284 	movi	r3,10
 4020820:	10c0c626 	beq	r2,r3,4020b3c <___vfprintf_internal_r+0x3bc>
 4020824:	d8c00404 	addi	r3,sp,16
 4020828:	05000034 	movhi	r20,0
 402082c:	d9001e04 	addi	r4,sp,120
 4020830:	a5008e84 	addi	r20,r20,570
 4020834:	d8c01e15 	stw	r3,120(sp)
 4020838:	d8002015 	stw	zero,128(sp)
 402083c:	d8001f15 	stw	zero,124(sp)
 4020840:	d8003315 	stw	zero,204(sp)
 4020844:	d8003615 	stw	zero,216(sp)
 4020848:	d8003815 	stw	zero,224(sp)
 402084c:	1811883a 	mov	r8,r3
 4020850:	d8003915 	stw	zero,228(sp)
 4020854:	d8003a15 	stw	zero,232(sp)
 4020858:	d8002f15 	stw	zero,188(sp)
 402085c:	d9002815 	stw	r4,160(sp)
 4020860:	a8800007 	ldb	r2,0(r21)
 4020864:	10028b26 	beq	r2,zero,4021294 <___vfprintf_internal_r+0xb14>
 4020868:	00c00944 	movi	r3,37
 402086c:	a823883a 	mov	r17,r21
 4020870:	10c0021e 	bne	r2,r3,402087c <___vfprintf_internal_r+0xfc>
 4020874:	00001406 	br	40208c8 <___vfprintf_internal_r+0x148>
 4020878:	10c00326 	beq	r2,r3,4020888 <___vfprintf_internal_r+0x108>
 402087c:	8c400044 	addi	r17,r17,1
 4020880:	88800007 	ldb	r2,0(r17)
 4020884:	103ffc1e 	bne	r2,zero,4020878 <__flash_rwdata_start+0xfffeb028>
 4020888:	8d61c83a 	sub	r16,r17,r21
 402088c:	80000e26 	beq	r16,zero,40208c8 <___vfprintf_internal_r+0x148>
 4020890:	d8c02017 	ldw	r3,128(sp)
 4020894:	d8801f17 	ldw	r2,124(sp)
 4020898:	45400015 	stw	r21,0(r8)
 402089c:	1c07883a 	add	r3,r3,r16
 40208a0:	10800044 	addi	r2,r2,1
 40208a4:	d8c02015 	stw	r3,128(sp)
 40208a8:	44000115 	stw	r16,4(r8)
 40208ac:	d8801f15 	stw	r2,124(sp)
 40208b0:	00c001c4 	movi	r3,7
 40208b4:	1880a916 	blt	r3,r2,4020b5c <___vfprintf_internal_r+0x3dc>
 40208b8:	42000204 	addi	r8,r8,8
 40208bc:	d9402f17 	ldw	r5,188(sp)
 40208c0:	2c0b883a 	add	r5,r5,r16
 40208c4:	d9402f15 	stw	r5,188(sp)
 40208c8:	88800007 	ldb	r2,0(r17)
 40208cc:	1000aa26 	beq	r2,zero,4020b78 <___vfprintf_internal_r+0x3f8>
 40208d0:	8d400044 	addi	r21,r17,1
 40208d4:	8c400047 	ldb	r17,1(r17)
 40208d8:	0021883a 	mov	r16,zero
 40208dc:	00bfffc4 	movi	r2,-1
 40208e0:	0025883a 	mov	r18,zero
 40208e4:	dc002905 	stb	r16,164(sp)
 40208e8:	d8002785 	stb	zero,158(sp)
 40208ec:	d8002b05 	stb	zero,172(sp)
 40208f0:	d8802a15 	stw	r2,168(sp)
 40208f4:	d8003115 	stw	zero,196(sp)
 40208f8:	04c01604 	movi	r19,88
 40208fc:	05800244 	movi	r22,9
 4020900:	9021883a 	mov	r16,r18
 4020904:	4039883a 	mov	fp,r8
 4020908:	ad400044 	addi	r21,r21,1
 402090c:	88bff804 	addi	r2,r17,-32
 4020910:	98833236 	bltu	r19,r2,40215dc <___vfprintf_internal_r+0xe5c>
 4020914:	100490ba 	slli	r2,r2,2
 4020918:	00c100b4 	movhi	r3,1026
 402091c:	18c24b04 	addi	r3,r3,2348
 4020920:	10c5883a 	add	r2,r2,r3
 4020924:	10800017 	ldw	r2,0(r2)
 4020928:	1000683a 	jmp	r2
 402092c:	040214d4 	movui	r16,2131
 4020930:	040215dc 	xori	r16,zero,2135
 4020934:	040215dc 	xori	r16,zero,2135
 4020938:	040214f4 	movhi	r16,2131
 402093c:	040215dc 	xori	r16,zero,2135
 4020940:	040215dc 	xori	r16,zero,2135
 4020944:	040215dc 	xori	r16,zero,2135
 4020948:	040215dc 	xori	r16,zero,2135
 402094c:	040215dc 	xori	r16,zero,2135
 4020950:	040215dc 	xori	r16,zero,2135
 4020954:	04020bdc 	xori	r16,zero,2095
 4020958:	040213e4 	muli	r16,zero,2127
 402095c:	040215dc 	xori	r16,zero,2135
 4020960:	04020aa0 	cmpeqi	r16,zero,2090
 4020964:	04020c00 	call	4020c0 <_gp+0x3f8054>
 4020968:	040215dc 	xori	r16,zero,2135
 402096c:	04020c50 	cmplti	r16,zero,2097
 4020970:	04020c5c 	xori	r16,zero,2097
 4020974:	04020c5c 	xori	r16,zero,2097
 4020978:	04020c5c 	xori	r16,zero,2097
 402097c:	04020c5c 	xori	r16,zero,2097
 4020980:	04020c5c 	xori	r16,zero,2097
 4020984:	04020c5c 	xori	r16,zero,2097
 4020988:	04020c5c 	xori	r16,zero,2097
 402098c:	04020c5c 	xori	r16,zero,2097
 4020990:	04020c5c 	xori	r16,zero,2097
 4020994:	040215dc 	xori	r16,zero,2135
 4020998:	040215dc 	xori	r16,zero,2135
 402099c:	040215dc 	xori	r16,zero,2135
 40209a0:	040215dc 	xori	r16,zero,2135
 40209a4:	040215dc 	xori	r16,zero,2135
 40209a8:	040215dc 	xori	r16,zero,2135
 40209ac:	040215dc 	xori	r16,zero,2135
 40209b0:	040215dc 	xori	r16,zero,2135
 40209b4:	040215dc 	xori	r16,zero,2135
 40209b8:	040215dc 	xori	r16,zero,2135
 40209bc:	04020c98 	cmpnei	r16,zero,2098
 40209c0:	04020d60 	cmpeqi	r16,zero,2101
 40209c4:	040215dc 	xori	r16,zero,2135
 40209c8:	04020d60 	cmpeqi	r16,zero,2101
 40209cc:	040215dc 	xori	r16,zero,2135
 40209d0:	040215dc 	xori	r16,zero,2135
 40209d4:	040215dc 	xori	r16,zero,2135
 40209d8:	040215dc 	xori	r16,zero,2135
 40209dc:	04020e0c 	andi	r16,zero,2104
 40209e0:	040215dc 	xori	r16,zero,2135
 40209e4:	040215dc 	xori	r16,zero,2135
 40209e8:	04020e18 	cmpnei	r16,zero,2104
 40209ec:	040215dc 	xori	r16,zero,2135
 40209f0:	040215dc 	xori	r16,zero,2135
 40209f4:	040215dc 	xori	r16,zero,2135
 40209f8:	040215dc 	xori	r16,zero,2135
 40209fc:	040215dc 	xori	r16,zero,2135
 4020a00:	0402129c 	xori	r16,zero,2122
 4020a04:	040215dc 	xori	r16,zero,2135
 4020a08:	040215dc 	xori	r16,zero,2135
 4020a0c:	04021308 	cmpgei	r16,zero,2124
 4020a10:	040215dc 	xori	r16,zero,2135
 4020a14:	040215dc 	xori	r16,zero,2135
 4020a18:	040215dc 	xori	r16,zero,2135
 4020a1c:	040215dc 	xori	r16,zero,2135
 4020a20:	040215dc 	xori	r16,zero,2135
 4020a24:	040215dc 	xori	r16,zero,2135
 4020a28:	040215dc 	xori	r16,zero,2135
 4020a2c:	040215dc 	xori	r16,zero,2135
 4020a30:	040215dc 	xori	r16,zero,2135
 4020a34:	040215dc 	xori	r16,zero,2135
 4020a38:	04021580 	call	402158 <_gp+0x3f80ec>
 4020a3c:	04021500 	call	402150 <_gp+0x3f80e4>
 4020a40:	04020d60 	cmpeqi	r16,zero,2101
 4020a44:	04020d60 	cmpeqi	r16,zero,2101
 4020a48:	04020d60 	cmpeqi	r16,zero,2101
 4020a4c:	04021520 	cmpeqi	r16,zero,2132
 4020a50:	04021500 	call	402150 <_gp+0x3f80e4>
 4020a54:	040215dc 	xori	r16,zero,2135
 4020a58:	040215dc 	xori	r16,zero,2135
 4020a5c:	0402152c 	andhi	r16,zero,2132
 4020a60:	040215dc 	xori	r16,zero,2135
 4020a64:	04021540 	call	402154 <_gp+0x3f80e8>
 4020a68:	040213c4 	movi	r16,2127
 4020a6c:	04020aac 	andhi	r16,zero,2090
 4020a70:	040213fc 	xorhi	r16,zero,2127
 4020a74:	040215dc 	xori	r16,zero,2135
 4020a78:	04021408 	cmpgei	r16,zero,2128
 4020a7c:	040215dc 	xori	r16,zero,2135
 4020a80:	0402146c 	andhi	r16,zero,2129
 4020a84:	040215dc 	xori	r16,zero,2135
 4020a88:	040215dc 	xori	r16,zero,2135
 4020a8c:	0402148c 	andi	r16,zero,2130
 4020a90:	d8c03117 	ldw	r3,196(sp)
 4020a94:	d8802e15 	stw	r2,184(sp)
 4020a98:	00c7c83a 	sub	r3,zero,r3
 4020a9c:	d8c03115 	stw	r3,196(sp)
 4020aa0:	84000114 	ori	r16,r16,4
 4020aa4:	ac400007 	ldb	r17,0(r21)
 4020aa8:	003f9706 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4020aac:	00800c04 	movi	r2,48
 4020ab0:	d8802705 	stb	r2,156(sp)
 4020ab4:	00801e04 	movi	r2,120
 4020ab8:	d8802745 	stb	r2,157(sp)
 4020abc:	d9002a17 	ldw	r4,168(sp)
 4020ac0:	d8802e17 	ldw	r2,184(sp)
 4020ac4:	d8002785 	stb	zero,158(sp)
 4020ac8:	e011883a 	mov	r8,fp
 4020acc:	10c00104 	addi	r3,r2,4
 4020ad0:	14c00017 	ldw	r19,0(r2)
 4020ad4:	002d883a 	mov	r22,zero
 4020ad8:	80800094 	ori	r2,r16,2
 4020adc:	2002ca16 	blt	r4,zero,4021608 <___vfprintf_internal_r+0xe88>
 4020ae0:	00bfdfc4 	movi	r2,-129
 4020ae4:	80a4703a 	and	r18,r16,r2
 4020ae8:	d8c02e15 	stw	r3,184(sp)
 4020aec:	94800094 	ori	r18,r18,2
 4020af0:	9802b41e 	bne	r19,zero,40215c4 <___vfprintf_internal_r+0xe44>
 4020af4:	01400034 	movhi	r5,0
 4020af8:	29408704 	addi	r5,r5,540
 4020afc:	d9403915 	stw	r5,228(sp)
 4020b00:	04401e04 	movi	r17,120
 4020b04:	d8802a17 	ldw	r2,168(sp)
 4020b08:	0039883a 	mov	fp,zero
 4020b0c:	1001fa26 	beq	r2,zero,40212f8 <___vfprintf_internal_r+0xb78>
 4020b10:	0027883a 	mov	r19,zero
 4020b14:	002d883a 	mov	r22,zero
 4020b18:	00021906 	br	4021380 <___vfprintf_internal_r+0xc00>
 4020b1c:	d9002d17 	ldw	r4,180(sp)
 4020b20:	b80b883a 	mov	r5,r23
 4020b24:	4022b340 	call	4022b34 <__swsetup_r>
 4020b28:	1005dc1e 	bne	r2,zero,402229c <___vfprintf_internal_r+0x1b1c>
 4020b2c:	b880030b 	ldhu	r2,12(r23)
 4020b30:	00c00284 	movi	r3,10
 4020b34:	1080068c 	andi	r2,r2,26
 4020b38:	10ff3a1e 	bne	r2,r3,4020824 <__flash_rwdata_start+0xfffeafd4>
 4020b3c:	b880038f 	ldh	r2,14(r23)
 4020b40:	103f3816 	blt	r2,zero,4020824 <__flash_rwdata_start+0xfffeafd4>
 4020b44:	d9c02e17 	ldw	r7,184(sp)
 4020b48:	d9002d17 	ldw	r4,180(sp)
 4020b4c:	a80d883a 	mov	r6,r21
 4020b50:	b80b883a 	mov	r5,r23
 4020b54:	4022a780 	call	4022a78 <__sbprintf>
 4020b58:	00001106 	br	4020ba0 <___vfprintf_internal_r+0x420>
 4020b5c:	d9002d17 	ldw	r4,180(sp)
 4020b60:	d9801e04 	addi	r6,sp,120
 4020b64:	b80b883a 	mov	r5,r23
 4020b68:	4027f600 	call	4027f60 <__sprint_r>
 4020b6c:	1000081e 	bne	r2,zero,4020b90 <___vfprintf_internal_r+0x410>
 4020b70:	da000404 	addi	r8,sp,16
 4020b74:	003f5106 	br	40208bc <__flash_rwdata_start+0xfffeb06c>
 4020b78:	d8802017 	ldw	r2,128(sp)
 4020b7c:	10000426 	beq	r2,zero,4020b90 <___vfprintf_internal_r+0x410>
 4020b80:	d9002d17 	ldw	r4,180(sp)
 4020b84:	d9801e04 	addi	r6,sp,120
 4020b88:	b80b883a 	mov	r5,r23
 4020b8c:	4027f600 	call	4027f60 <__sprint_r>
 4020b90:	b880030b 	ldhu	r2,12(r23)
 4020b94:	1080100c 	andi	r2,r2,64
 4020b98:	1005c01e 	bne	r2,zero,402229c <___vfprintf_internal_r+0x1b1c>
 4020b9c:	d8802f17 	ldw	r2,188(sp)
 4020ba0:	dfc04717 	ldw	ra,284(sp)
 4020ba4:	df004617 	ldw	fp,280(sp)
 4020ba8:	ddc04517 	ldw	r23,276(sp)
 4020bac:	dd804417 	ldw	r22,272(sp)
 4020bb0:	dd404317 	ldw	r21,268(sp)
 4020bb4:	dd004217 	ldw	r20,264(sp)
 4020bb8:	dcc04117 	ldw	r19,260(sp)
 4020bbc:	dc804017 	ldw	r18,256(sp)
 4020bc0:	dc403f17 	ldw	r17,252(sp)
 4020bc4:	dc003e17 	ldw	r16,248(sp)
 4020bc8:	dec04804 	addi	sp,sp,288
 4020bcc:	f800283a 	ret
 4020bd0:	d9002d17 	ldw	r4,180(sp)
 4020bd4:	4024b400 	call	4024b40 <__sinit>
 4020bd8:	003f0206 	br	40207e4 <__flash_rwdata_start+0xfffeaf94>
 4020bdc:	d9002e17 	ldw	r4,184(sp)
 4020be0:	d9402e17 	ldw	r5,184(sp)
 4020be4:	21000017 	ldw	r4,0(r4)
 4020be8:	28800104 	addi	r2,r5,4
 4020bec:	d9003115 	stw	r4,196(sp)
 4020bf0:	203fa716 	blt	r4,zero,4020a90 <__flash_rwdata_start+0xfffeb240>
 4020bf4:	d8802e15 	stw	r2,184(sp)
 4020bf8:	ac400007 	ldb	r17,0(r21)
 4020bfc:	003f4206 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4020c00:	ac400007 	ldb	r17,0(r21)
 4020c04:	01000a84 	movi	r4,42
 4020c08:	a8c00044 	addi	r3,r21,1
 4020c0c:	89075826 	beq	r17,r4,4022970 <___vfprintf_internal_r+0x21f0>
 4020c10:	8cbff404 	addi	r18,r17,-48
 4020c14:	b486ae36 	bltu	r22,r18,40226d0 <___vfprintf_internal_r+0x1f50>
 4020c18:	0009883a 	mov	r4,zero
 4020c1c:	1823883a 	mov	r17,r3
 4020c20:	01400284 	movi	r5,10
 4020c24:	402ac1c0 	call	402ac1c <__mulsi3>
 4020c28:	88c00007 	ldb	r3,0(r17)
 4020c2c:	1489883a 	add	r4,r2,r18
 4020c30:	8d400044 	addi	r21,r17,1
 4020c34:	1cbff404 	addi	r18,r3,-48
 4020c38:	a823883a 	mov	r17,r21
 4020c3c:	b4bff82e 	bgeu	r22,r18,4020c20 <__flash_rwdata_start+0xfffeb3d0>
 4020c40:	1823883a 	mov	r17,r3
 4020c44:	2005f616 	blt	r4,zero,4022420 <___vfprintf_internal_r+0x1ca0>
 4020c48:	d9002a15 	stw	r4,168(sp)
 4020c4c:	003f2f06 	br	402090c <__flash_rwdata_start+0xfffeb0bc>
 4020c50:	84002014 	ori	r16,r16,128
 4020c54:	ac400007 	ldb	r17,0(r21)
 4020c58:	003f2b06 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4020c5c:	8cbff404 	addi	r18,r17,-48
 4020c60:	d8003115 	stw	zero,196(sp)
 4020c64:	0009883a 	mov	r4,zero
 4020c68:	a823883a 	mov	r17,r21
 4020c6c:	01400284 	movi	r5,10
 4020c70:	402ac1c0 	call	402ac1c <__mulsi3>
 4020c74:	88c00007 	ldb	r3,0(r17)
 4020c78:	9089883a 	add	r4,r18,r2
 4020c7c:	ad400044 	addi	r21,r21,1
 4020c80:	1cbff404 	addi	r18,r3,-48
 4020c84:	a823883a 	mov	r17,r21
 4020c88:	b4bff82e 	bgeu	r22,r18,4020c6c <__flash_rwdata_start+0xfffeb41c>
 4020c8c:	1823883a 	mov	r17,r3
 4020c90:	d9003115 	stw	r4,196(sp)
 4020c94:	003f1d06 	br	402090c <__flash_rwdata_start+0xfffeb0bc>
 4020c98:	8025883a 	mov	r18,r16
 4020c9c:	dc002903 	ldbu	r16,164(sp)
 4020ca0:	e011883a 	mov	r8,fp
 4020ca4:	84003fcc 	andi	r16,r16,255
 4020ca8:	8007531e 	bne	r16,zero,40229f8 <___vfprintf_internal_r+0x2278>
 4020cac:	94800414 	ori	r18,r18,16
 4020cb0:	9080080c 	andi	r2,r18,32
 4020cb4:	1003a326 	beq	r2,zero,4021b44 <___vfprintf_internal_r+0x13c4>
 4020cb8:	d9002e17 	ldw	r4,184(sp)
 4020cbc:	20800117 	ldw	r2,4(r4)
 4020cc0:	24c00017 	ldw	r19,0(r4)
 4020cc4:	21000204 	addi	r4,r4,8
 4020cc8:	d9002e15 	stw	r4,184(sp)
 4020ccc:	102d883a 	mov	r22,r2
 4020cd0:	10047316 	blt	r2,zero,4021ea0 <___vfprintf_internal_r+0x1720>
 4020cd4:	d9002a17 	ldw	r4,168(sp)
 4020cd8:	df002783 	ldbu	fp,158(sp)
 4020cdc:	2003e416 	blt	r4,zero,4021c70 <___vfprintf_internal_r+0x14f0>
 4020ce0:	00ffdfc4 	movi	r3,-129
 4020ce4:	9d84b03a 	or	r2,r19,r22
 4020ce8:	90e4703a 	and	r18,r18,r3
 4020cec:	10018026 	beq	r2,zero,40212f0 <___vfprintf_internal_r+0xb70>
 4020cf0:	b003ab26 	beq	r22,zero,4021ba0 <___vfprintf_internal_r+0x1420>
 4020cf4:	dc402915 	stw	r17,164(sp)
 4020cf8:	dc001e04 	addi	r16,sp,120
 4020cfc:	b023883a 	mov	r17,r22
 4020d00:	402d883a 	mov	r22,r8
 4020d04:	9809883a 	mov	r4,r19
 4020d08:	880b883a 	mov	r5,r17
 4020d0c:	01800284 	movi	r6,10
 4020d10:	000f883a 	mov	r7,zero
 4020d14:	402a4a40 	call	402a4a4 <__umoddi3>
 4020d18:	10800c04 	addi	r2,r2,48
 4020d1c:	843fffc4 	addi	r16,r16,-1
 4020d20:	9809883a 	mov	r4,r19
 4020d24:	880b883a 	mov	r5,r17
 4020d28:	80800005 	stb	r2,0(r16)
 4020d2c:	01800284 	movi	r6,10
 4020d30:	000f883a 	mov	r7,zero
 4020d34:	4029ea80 	call	4029ea8 <__udivdi3>
 4020d38:	1027883a 	mov	r19,r2
 4020d3c:	10c4b03a 	or	r2,r2,r3
 4020d40:	1823883a 	mov	r17,r3
 4020d44:	103fef1e 	bne	r2,zero,4020d04 <__flash_rwdata_start+0xfffeb4b4>
 4020d48:	d8c02817 	ldw	r3,160(sp)
 4020d4c:	dc402917 	ldw	r17,164(sp)
 4020d50:	b011883a 	mov	r8,r22
 4020d54:	1c07c83a 	sub	r3,r3,r16
 4020d58:	d8c02b15 	stw	r3,172(sp)
 4020d5c:	00005f06 	br	4020edc <___vfprintf_internal_r+0x75c>
 4020d60:	8025883a 	mov	r18,r16
 4020d64:	dc002903 	ldbu	r16,164(sp)
 4020d68:	e011883a 	mov	r8,fp
 4020d6c:	84003fcc 	andi	r16,r16,255
 4020d70:	80071e1e 	bne	r16,zero,40229ec <___vfprintf_internal_r+0x226c>
 4020d74:	9080020c 	andi	r2,r18,8
 4020d78:	1004af26 	beq	r2,zero,4022038 <___vfprintf_internal_r+0x18b8>
 4020d7c:	d9002e17 	ldw	r4,184(sp)
 4020d80:	d9402e17 	ldw	r5,184(sp)
 4020d84:	d8802e17 	ldw	r2,184(sp)
 4020d88:	21000017 	ldw	r4,0(r4)
 4020d8c:	29400117 	ldw	r5,4(r5)
 4020d90:	10800204 	addi	r2,r2,8
 4020d94:	d9003615 	stw	r4,216(sp)
 4020d98:	d9403815 	stw	r5,224(sp)
 4020d9c:	d8802e15 	stw	r2,184(sp)
 4020da0:	d9003617 	ldw	r4,216(sp)
 4020da4:	d9403817 	ldw	r5,224(sp)
 4020da8:	da003d15 	stw	r8,244(sp)
 4020dac:	04000044 	movi	r16,1
 4020db0:	4027b840 	call	4027b84 <__fpclassifyd>
 4020db4:	da003d17 	ldw	r8,244(sp)
 4020db8:	1404441e 	bne	r2,r16,4021ecc <___vfprintf_internal_r+0x174c>
 4020dbc:	d9003617 	ldw	r4,216(sp)
 4020dc0:	d9403817 	ldw	r5,224(sp)
 4020dc4:	000d883a 	mov	r6,zero
 4020dc8:	000f883a 	mov	r7,zero
 4020dcc:	402c0240 	call	402c024 <__ledf2>
 4020dd0:	da003d17 	ldw	r8,244(sp)
 4020dd4:	1005e316 	blt	r2,zero,4022564 <___vfprintf_internal_r+0x1de4>
 4020dd8:	df002783 	ldbu	fp,158(sp)
 4020ddc:	008011c4 	movi	r2,71
 4020de0:	1445580e 	bge	r2,r17,4022344 <___vfprintf_internal_r+0x1bc4>
 4020de4:	04000034 	movhi	r16,0
 4020de8:	84007f04 	addi	r16,r16,508
 4020dec:	00c000c4 	movi	r3,3
 4020df0:	00bfdfc4 	movi	r2,-129
 4020df4:	d8c02915 	stw	r3,164(sp)
 4020df8:	90a4703a 	and	r18,r18,r2
 4020dfc:	d8c02b15 	stw	r3,172(sp)
 4020e00:	d8002a15 	stw	zero,168(sp)
 4020e04:	d8003215 	stw	zero,200(sp)
 4020e08:	00003a06 	br	4020ef4 <___vfprintf_internal_r+0x774>
 4020e0c:	84000214 	ori	r16,r16,8
 4020e10:	ac400007 	ldb	r17,0(r21)
 4020e14:	003ebc06 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4020e18:	8025883a 	mov	r18,r16
 4020e1c:	dc002903 	ldbu	r16,164(sp)
 4020e20:	e011883a 	mov	r8,fp
 4020e24:	84003fcc 	andi	r16,r16,255
 4020e28:	8007001e 	bne	r16,zero,4022a2c <___vfprintf_internal_r+0x22ac>
 4020e2c:	94800414 	ori	r18,r18,16
 4020e30:	9080080c 	andi	r2,r18,32
 4020e34:	1002fa26 	beq	r2,zero,4021a20 <___vfprintf_internal_r+0x12a0>
 4020e38:	d9002e17 	ldw	r4,184(sp)
 4020e3c:	d9402a17 	ldw	r5,168(sp)
 4020e40:	d8002785 	stb	zero,158(sp)
 4020e44:	20800204 	addi	r2,r4,8
 4020e48:	24c00017 	ldw	r19,0(r4)
 4020e4c:	25800117 	ldw	r22,4(r4)
 4020e50:	2804b116 	blt	r5,zero,4022118 <___vfprintf_internal_r+0x1998>
 4020e54:	013fdfc4 	movi	r4,-129
 4020e58:	9d86b03a 	or	r3,r19,r22
 4020e5c:	d8802e15 	stw	r2,184(sp)
 4020e60:	9124703a 	and	r18,r18,r4
 4020e64:	1802fb1e 	bne	r3,zero,4021a54 <___vfprintf_internal_r+0x12d4>
 4020e68:	d8c02a17 	ldw	r3,168(sp)
 4020e6c:	0039883a 	mov	fp,zero
 4020e70:	1805e526 	beq	r3,zero,4022608 <___vfprintf_internal_r+0x1e88>
 4020e74:	0027883a 	mov	r19,zero
 4020e78:	002d883a 	mov	r22,zero
 4020e7c:	dc001e04 	addi	r16,sp,120
 4020e80:	9806d0fa 	srli	r3,r19,3
 4020e84:	b008977a 	slli	r4,r22,29
 4020e88:	b02cd0fa 	srli	r22,r22,3
 4020e8c:	9cc001cc 	andi	r19,r19,7
 4020e90:	98800c04 	addi	r2,r19,48
 4020e94:	843fffc4 	addi	r16,r16,-1
 4020e98:	20e6b03a 	or	r19,r4,r3
 4020e9c:	80800005 	stb	r2,0(r16)
 4020ea0:	9d86b03a 	or	r3,r19,r22
 4020ea4:	183ff61e 	bne	r3,zero,4020e80 <__flash_rwdata_start+0xfffeb630>
 4020ea8:	90c0004c 	andi	r3,r18,1
 4020eac:	18014126 	beq	r3,zero,40213b4 <___vfprintf_internal_r+0xc34>
 4020eb0:	10803fcc 	andi	r2,r2,255
 4020eb4:	1080201c 	xori	r2,r2,128
 4020eb8:	10bfe004 	addi	r2,r2,-128
 4020ebc:	00c00c04 	movi	r3,48
 4020ec0:	10c13c26 	beq	r2,r3,40213b4 <___vfprintf_internal_r+0xc34>
 4020ec4:	80ffffc5 	stb	r3,-1(r16)
 4020ec8:	d8c02817 	ldw	r3,160(sp)
 4020ecc:	80bfffc4 	addi	r2,r16,-1
 4020ed0:	1021883a 	mov	r16,r2
 4020ed4:	1887c83a 	sub	r3,r3,r2
 4020ed8:	d8c02b15 	stw	r3,172(sp)
 4020edc:	d8802b17 	ldw	r2,172(sp)
 4020ee0:	d9002a17 	ldw	r4,168(sp)
 4020ee4:	1100010e 	bge	r2,r4,4020eec <___vfprintf_internal_r+0x76c>
 4020ee8:	2005883a 	mov	r2,r4
 4020eec:	d8802915 	stw	r2,164(sp)
 4020ef0:	d8003215 	stw	zero,200(sp)
 4020ef4:	e7003fcc 	andi	fp,fp,255
 4020ef8:	e700201c 	xori	fp,fp,128
 4020efc:	e73fe004 	addi	fp,fp,-128
 4020f00:	e0000326 	beq	fp,zero,4020f10 <___vfprintf_internal_r+0x790>
 4020f04:	d8c02917 	ldw	r3,164(sp)
 4020f08:	18c00044 	addi	r3,r3,1
 4020f0c:	d8c02915 	stw	r3,164(sp)
 4020f10:	90c0008c 	andi	r3,r18,2
 4020f14:	d8c02c15 	stw	r3,176(sp)
 4020f18:	18000326 	beq	r3,zero,4020f28 <___vfprintf_internal_r+0x7a8>
 4020f1c:	d8c02917 	ldw	r3,164(sp)
 4020f20:	18c00084 	addi	r3,r3,2
 4020f24:	d8c02915 	stw	r3,164(sp)
 4020f28:	90c0210c 	andi	r3,r18,132
 4020f2c:	d8c03015 	stw	r3,192(sp)
 4020f30:	1801c51e 	bne	r3,zero,4021648 <___vfprintf_internal_r+0xec8>
 4020f34:	d9003117 	ldw	r4,196(sp)
 4020f38:	d8c02917 	ldw	r3,164(sp)
 4020f3c:	20e7c83a 	sub	r19,r4,r3
 4020f40:	04c1c10e 	bge	zero,r19,4021648 <___vfprintf_internal_r+0xec8>
 4020f44:	02400404 	movi	r9,16
 4020f48:	d8c02017 	ldw	r3,128(sp)
 4020f4c:	d8801f17 	ldw	r2,124(sp)
 4020f50:	4cc52f0e 	bge	r9,r19,4022410 <___vfprintf_internal_r+0x1c90>
 4020f54:	01400034 	movhi	r5,0
 4020f58:	29409284 	addi	r5,r5,586
 4020f5c:	dc403b15 	stw	r17,236(sp)
 4020f60:	d9403515 	stw	r5,212(sp)
 4020f64:	9823883a 	mov	r17,r19
 4020f68:	482d883a 	mov	r22,r9
 4020f6c:	9027883a 	mov	r19,r18
 4020f70:	070001c4 	movi	fp,7
 4020f74:	8025883a 	mov	r18,r16
 4020f78:	dc002d17 	ldw	r16,180(sp)
 4020f7c:	00000306 	br	4020f8c <___vfprintf_internal_r+0x80c>
 4020f80:	8c7ffc04 	addi	r17,r17,-16
 4020f84:	42000204 	addi	r8,r8,8
 4020f88:	b440130e 	bge	r22,r17,4020fd8 <___vfprintf_internal_r+0x858>
 4020f8c:	01000034 	movhi	r4,0
 4020f90:	18c00404 	addi	r3,r3,16
 4020f94:	10800044 	addi	r2,r2,1
 4020f98:	21009284 	addi	r4,r4,586
 4020f9c:	41000015 	stw	r4,0(r8)
 4020fa0:	45800115 	stw	r22,4(r8)
 4020fa4:	d8c02015 	stw	r3,128(sp)
 4020fa8:	d8801f15 	stw	r2,124(sp)
 4020fac:	e0bff40e 	bge	fp,r2,4020f80 <__flash_rwdata_start+0xfffeb730>
 4020fb0:	d9801e04 	addi	r6,sp,120
 4020fb4:	b80b883a 	mov	r5,r23
 4020fb8:	8009883a 	mov	r4,r16
 4020fbc:	4027f600 	call	4027f60 <__sprint_r>
 4020fc0:	103ef31e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4020fc4:	8c7ffc04 	addi	r17,r17,-16
 4020fc8:	d8c02017 	ldw	r3,128(sp)
 4020fcc:	d8801f17 	ldw	r2,124(sp)
 4020fd0:	da000404 	addi	r8,sp,16
 4020fd4:	b47fed16 	blt	r22,r17,4020f8c <__flash_rwdata_start+0xfffeb73c>
 4020fd8:	9021883a 	mov	r16,r18
 4020fdc:	9825883a 	mov	r18,r19
 4020fe0:	8827883a 	mov	r19,r17
 4020fe4:	dc403b17 	ldw	r17,236(sp)
 4020fe8:	d9403517 	ldw	r5,212(sp)
 4020fec:	98c7883a 	add	r3,r19,r3
 4020ff0:	10800044 	addi	r2,r2,1
 4020ff4:	41400015 	stw	r5,0(r8)
 4020ff8:	44c00115 	stw	r19,4(r8)
 4020ffc:	d8c02015 	stw	r3,128(sp)
 4021000:	d8801f15 	stw	r2,124(sp)
 4021004:	010001c4 	movi	r4,7
 4021008:	2082c516 	blt	r4,r2,4021b20 <___vfprintf_internal_r+0x13a0>
 402100c:	df002787 	ldb	fp,158(sp)
 4021010:	42000204 	addi	r8,r8,8
 4021014:	e0000c26 	beq	fp,zero,4021048 <___vfprintf_internal_r+0x8c8>
 4021018:	d8801f17 	ldw	r2,124(sp)
 402101c:	d9002784 	addi	r4,sp,158
 4021020:	18c00044 	addi	r3,r3,1
 4021024:	10800044 	addi	r2,r2,1
 4021028:	41000015 	stw	r4,0(r8)
 402102c:	01000044 	movi	r4,1
 4021030:	41000115 	stw	r4,4(r8)
 4021034:	d8c02015 	stw	r3,128(sp)
 4021038:	d8801f15 	stw	r2,124(sp)
 402103c:	010001c4 	movi	r4,7
 4021040:	20825e16 	blt	r4,r2,40219bc <___vfprintf_internal_r+0x123c>
 4021044:	42000204 	addi	r8,r8,8
 4021048:	d8802c17 	ldw	r2,176(sp)
 402104c:	10000c26 	beq	r2,zero,4021080 <___vfprintf_internal_r+0x900>
 4021050:	d8801f17 	ldw	r2,124(sp)
 4021054:	d9002704 	addi	r4,sp,156
 4021058:	18c00084 	addi	r3,r3,2
 402105c:	10800044 	addi	r2,r2,1
 4021060:	41000015 	stw	r4,0(r8)
 4021064:	01000084 	movi	r4,2
 4021068:	41000115 	stw	r4,4(r8)
 402106c:	d8c02015 	stw	r3,128(sp)
 4021070:	d8801f15 	stw	r2,124(sp)
 4021074:	010001c4 	movi	r4,7
 4021078:	20825816 	blt	r4,r2,40219dc <___vfprintf_internal_r+0x125c>
 402107c:	42000204 	addi	r8,r8,8
 4021080:	d9003017 	ldw	r4,192(sp)
 4021084:	00802004 	movi	r2,128
 4021088:	2081bb26 	beq	r4,r2,4021778 <___vfprintf_internal_r+0xff8>
 402108c:	d9402a17 	ldw	r5,168(sp)
 4021090:	d8802b17 	ldw	r2,172(sp)
 4021094:	28adc83a 	sub	r22,r5,r2
 4021098:	0580310e 	bge	zero,r22,4021160 <___vfprintf_internal_r+0x9e0>
 402109c:	07000404 	movi	fp,16
 40210a0:	d8801f17 	ldw	r2,124(sp)
 40210a4:	e584360e 	bge	fp,r22,4022180 <___vfprintf_internal_r+0x1a00>
 40210a8:	01400034 	movhi	r5,0
 40210ac:	29408e84 	addi	r5,r5,570
 40210b0:	dc402a15 	stw	r17,168(sp)
 40210b4:	d9402c15 	stw	r5,176(sp)
 40210b8:	b023883a 	mov	r17,r22
 40210bc:	04c001c4 	movi	r19,7
 40210c0:	a82d883a 	mov	r22,r21
 40210c4:	902b883a 	mov	r21,r18
 40210c8:	8025883a 	mov	r18,r16
 40210cc:	dc002d17 	ldw	r16,180(sp)
 40210d0:	00000306 	br	40210e0 <___vfprintf_internal_r+0x960>
 40210d4:	8c7ffc04 	addi	r17,r17,-16
 40210d8:	42000204 	addi	r8,r8,8
 40210dc:	e440110e 	bge	fp,r17,4021124 <___vfprintf_internal_r+0x9a4>
 40210e0:	18c00404 	addi	r3,r3,16
 40210e4:	10800044 	addi	r2,r2,1
 40210e8:	45000015 	stw	r20,0(r8)
 40210ec:	47000115 	stw	fp,4(r8)
 40210f0:	d8c02015 	stw	r3,128(sp)
 40210f4:	d8801f15 	stw	r2,124(sp)
 40210f8:	98bff60e 	bge	r19,r2,40210d4 <__flash_rwdata_start+0xfffeb884>
 40210fc:	d9801e04 	addi	r6,sp,120
 4021100:	b80b883a 	mov	r5,r23
 4021104:	8009883a 	mov	r4,r16
 4021108:	4027f600 	call	4027f60 <__sprint_r>
 402110c:	103ea01e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021110:	8c7ffc04 	addi	r17,r17,-16
 4021114:	d8c02017 	ldw	r3,128(sp)
 4021118:	d8801f17 	ldw	r2,124(sp)
 402111c:	da000404 	addi	r8,sp,16
 4021120:	e47fef16 	blt	fp,r17,40210e0 <__flash_rwdata_start+0xfffeb890>
 4021124:	9021883a 	mov	r16,r18
 4021128:	a825883a 	mov	r18,r21
 402112c:	b02b883a 	mov	r21,r22
 4021130:	882d883a 	mov	r22,r17
 4021134:	dc402a17 	ldw	r17,168(sp)
 4021138:	d9002c17 	ldw	r4,176(sp)
 402113c:	1d87883a 	add	r3,r3,r22
 4021140:	10800044 	addi	r2,r2,1
 4021144:	41000015 	stw	r4,0(r8)
 4021148:	45800115 	stw	r22,4(r8)
 402114c:	d8c02015 	stw	r3,128(sp)
 4021150:	d8801f15 	stw	r2,124(sp)
 4021154:	010001c4 	movi	r4,7
 4021158:	20821016 	blt	r4,r2,402199c <___vfprintf_internal_r+0x121c>
 402115c:	42000204 	addi	r8,r8,8
 4021160:	9080400c 	andi	r2,r18,256
 4021164:	10013a1e 	bne	r2,zero,4021650 <___vfprintf_internal_r+0xed0>
 4021168:	d9402b17 	ldw	r5,172(sp)
 402116c:	d8801f17 	ldw	r2,124(sp)
 4021170:	44000015 	stw	r16,0(r8)
 4021174:	1947883a 	add	r3,r3,r5
 4021178:	10800044 	addi	r2,r2,1
 402117c:	41400115 	stw	r5,4(r8)
 4021180:	d8c02015 	stw	r3,128(sp)
 4021184:	d8801f15 	stw	r2,124(sp)
 4021188:	010001c4 	movi	r4,7
 402118c:	2081f516 	blt	r4,r2,4021964 <___vfprintf_internal_r+0x11e4>
 4021190:	42000204 	addi	r8,r8,8
 4021194:	9480010c 	andi	r18,r18,4
 4021198:	90003226 	beq	r18,zero,4021264 <___vfprintf_internal_r+0xae4>
 402119c:	d9403117 	ldw	r5,196(sp)
 40211a0:	d8802917 	ldw	r2,164(sp)
 40211a4:	28a1c83a 	sub	r16,r5,r2
 40211a8:	04002e0e 	bge	zero,r16,4021264 <___vfprintf_internal_r+0xae4>
 40211ac:	04400404 	movi	r17,16
 40211b0:	d8801f17 	ldw	r2,124(sp)
 40211b4:	8c04c40e 	bge	r17,r16,40224c8 <___vfprintf_internal_r+0x1d48>
 40211b8:	01400034 	movhi	r5,0
 40211bc:	29409284 	addi	r5,r5,586
 40211c0:	d9403515 	stw	r5,212(sp)
 40211c4:	048001c4 	movi	r18,7
 40211c8:	dcc02d17 	ldw	r19,180(sp)
 40211cc:	00000306 	br	40211dc <___vfprintf_internal_r+0xa5c>
 40211d0:	843ffc04 	addi	r16,r16,-16
 40211d4:	42000204 	addi	r8,r8,8
 40211d8:	8c00130e 	bge	r17,r16,4021228 <___vfprintf_internal_r+0xaa8>
 40211dc:	01000034 	movhi	r4,0
 40211e0:	18c00404 	addi	r3,r3,16
 40211e4:	10800044 	addi	r2,r2,1
 40211e8:	21009284 	addi	r4,r4,586
 40211ec:	41000015 	stw	r4,0(r8)
 40211f0:	44400115 	stw	r17,4(r8)
 40211f4:	d8c02015 	stw	r3,128(sp)
 40211f8:	d8801f15 	stw	r2,124(sp)
 40211fc:	90bff40e 	bge	r18,r2,40211d0 <__flash_rwdata_start+0xfffeb980>
 4021200:	d9801e04 	addi	r6,sp,120
 4021204:	b80b883a 	mov	r5,r23
 4021208:	9809883a 	mov	r4,r19
 402120c:	4027f600 	call	4027f60 <__sprint_r>
 4021210:	103e5f1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021214:	843ffc04 	addi	r16,r16,-16
 4021218:	d8c02017 	ldw	r3,128(sp)
 402121c:	d8801f17 	ldw	r2,124(sp)
 4021220:	da000404 	addi	r8,sp,16
 4021224:	8c3fed16 	blt	r17,r16,40211dc <__flash_rwdata_start+0xfffeb98c>
 4021228:	d9403517 	ldw	r5,212(sp)
 402122c:	1c07883a 	add	r3,r3,r16
 4021230:	10800044 	addi	r2,r2,1
 4021234:	41400015 	stw	r5,0(r8)
 4021238:	44000115 	stw	r16,4(r8)
 402123c:	d8c02015 	stw	r3,128(sp)
 4021240:	d8801f15 	stw	r2,124(sp)
 4021244:	010001c4 	movi	r4,7
 4021248:	2080060e 	bge	r4,r2,4021264 <___vfprintf_internal_r+0xae4>
 402124c:	d9002d17 	ldw	r4,180(sp)
 4021250:	d9801e04 	addi	r6,sp,120
 4021254:	b80b883a 	mov	r5,r23
 4021258:	4027f600 	call	4027f60 <__sprint_r>
 402125c:	103e4c1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021260:	d8c02017 	ldw	r3,128(sp)
 4021264:	d8803117 	ldw	r2,196(sp)
 4021268:	d9002917 	ldw	r4,164(sp)
 402126c:	1100010e 	bge	r2,r4,4021274 <___vfprintf_internal_r+0xaf4>
 4021270:	2005883a 	mov	r2,r4
 4021274:	d9402f17 	ldw	r5,188(sp)
 4021278:	288b883a 	add	r5,r5,r2
 402127c:	d9402f15 	stw	r5,188(sp)
 4021280:	1801c01e 	bne	r3,zero,4021984 <___vfprintf_internal_r+0x1204>
 4021284:	a8800007 	ldb	r2,0(r21)
 4021288:	d8001f15 	stw	zero,124(sp)
 402128c:	da000404 	addi	r8,sp,16
 4021290:	103d751e 	bne	r2,zero,4020868 <__flash_rwdata_start+0xfffeb018>
 4021294:	a823883a 	mov	r17,r21
 4021298:	003d8b06 	br	40208c8 <__flash_rwdata_start+0xfffeb078>
 402129c:	8025883a 	mov	r18,r16
 40212a0:	dc002903 	ldbu	r16,164(sp)
 40212a4:	e011883a 	mov	r8,fp
 40212a8:	84003fcc 	andi	r16,r16,255
 40212ac:	8005e51e 	bne	r16,zero,4022a44 <___vfprintf_internal_r+0x22c4>
 40212b0:	94800414 	ori	r18,r18,16
 40212b4:	9080080c 	andi	r2,r18,32
 40212b8:	10022b26 	beq	r2,zero,4021b68 <___vfprintf_internal_r+0x13e8>
 40212bc:	d9002e17 	ldw	r4,184(sp)
 40212c0:	d9402a17 	ldw	r5,168(sp)
 40212c4:	d8002785 	stb	zero,158(sp)
 40212c8:	20c00204 	addi	r3,r4,8
 40212cc:	24c00017 	ldw	r19,0(r4)
 40212d0:	25800117 	ldw	r22,4(r4)
 40212d4:	28042e16 	blt	r5,zero,4022390 <___vfprintf_internal_r+0x1c10>
 40212d8:	013fdfc4 	movi	r4,-129
 40212dc:	9d84b03a 	or	r2,r19,r22
 40212e0:	d8c02e15 	stw	r3,184(sp)
 40212e4:	9124703a 	and	r18,r18,r4
 40212e8:	0039883a 	mov	fp,zero
 40212ec:	103e801e 	bne	r2,zero,4020cf0 <__flash_rwdata_start+0xfffeb4a0>
 40212f0:	d9002a17 	ldw	r4,168(sp)
 40212f4:	2002e01e 	bne	r4,zero,4021e78 <___vfprintf_internal_r+0x16f8>
 40212f8:	d8002a15 	stw	zero,168(sp)
 40212fc:	d8002b15 	stw	zero,172(sp)
 4021300:	dc001e04 	addi	r16,sp,120
 4021304:	003ef506 	br	4020edc <__flash_rwdata_start+0xfffeb68c>
 4021308:	8025883a 	mov	r18,r16
 402130c:	dc002903 	ldbu	r16,164(sp)
 4021310:	e011883a 	mov	r8,fp
 4021314:	84003fcc 	andi	r16,r16,255
 4021318:	8005ba1e 	bne	r16,zero,4022a04 <___vfprintf_internal_r+0x2284>
 402131c:	01000034 	movhi	r4,0
 4021320:	21008204 	addi	r4,r4,520
 4021324:	d9003915 	stw	r4,228(sp)
 4021328:	9080080c 	andi	r2,r18,32
 402132c:	10006126 	beq	r2,zero,40214b4 <___vfprintf_internal_r+0xd34>
 4021330:	d9402e17 	ldw	r5,184(sp)
 4021334:	2cc00017 	ldw	r19,0(r5)
 4021338:	2d800117 	ldw	r22,4(r5)
 402133c:	29400204 	addi	r5,r5,8
 4021340:	d9402e15 	stw	r5,184(sp)
 4021344:	9080004c 	andi	r2,r18,1
 4021348:	1001ac26 	beq	r2,zero,40219fc <___vfprintf_internal_r+0x127c>
 402134c:	9d84b03a 	or	r2,r19,r22
 4021350:	10038526 	beq	r2,zero,4022168 <___vfprintf_internal_r+0x19e8>
 4021354:	d8c02a17 	ldw	r3,168(sp)
 4021358:	00800c04 	movi	r2,48
 402135c:	d8802705 	stb	r2,156(sp)
 4021360:	dc402745 	stb	r17,157(sp)
 4021364:	d8002785 	stb	zero,158(sp)
 4021368:	90800094 	ori	r2,r18,2
 402136c:	18047916 	blt	r3,zero,4022554 <___vfprintf_internal_r+0x1dd4>
 4021370:	00bfdfc4 	movi	r2,-129
 4021374:	90a4703a 	and	r18,r18,r2
 4021378:	94800094 	ori	r18,r18,2
 402137c:	0039883a 	mov	fp,zero
 4021380:	d9003917 	ldw	r4,228(sp)
 4021384:	dc001e04 	addi	r16,sp,120
 4021388:	988003cc 	andi	r2,r19,15
 402138c:	b006973a 	slli	r3,r22,28
 4021390:	2085883a 	add	r2,r4,r2
 4021394:	9826d13a 	srli	r19,r19,4
 4021398:	10800003 	ldbu	r2,0(r2)
 402139c:	b02cd13a 	srli	r22,r22,4
 40213a0:	843fffc4 	addi	r16,r16,-1
 40213a4:	1ce6b03a 	or	r19,r3,r19
 40213a8:	80800005 	stb	r2,0(r16)
 40213ac:	9d84b03a 	or	r2,r19,r22
 40213b0:	103ff51e 	bne	r2,zero,4021388 <__flash_rwdata_start+0xfffebb38>
 40213b4:	d8c02817 	ldw	r3,160(sp)
 40213b8:	1c07c83a 	sub	r3,r3,r16
 40213bc:	d8c02b15 	stw	r3,172(sp)
 40213c0:	003ec606 	br	4020edc <__flash_rwdata_start+0xfffeb68c>
 40213c4:	8025883a 	mov	r18,r16
 40213c8:	dc002903 	ldbu	r16,164(sp)
 40213cc:	e011883a 	mov	r8,fp
 40213d0:	84003fcc 	andi	r16,r16,255
 40213d4:	803e9626 	beq	r16,zero,4020e30 <__flash_rwdata_start+0xfffeb5e0>
 40213d8:	d8c02b03 	ldbu	r3,172(sp)
 40213dc:	d8c02785 	stb	r3,158(sp)
 40213e0:	003e9306 	br	4020e30 <__flash_rwdata_start+0xfffeb5e0>
 40213e4:	00c00044 	movi	r3,1
 40213e8:	d8c02905 	stb	r3,164(sp)
 40213ec:	00c00ac4 	movi	r3,43
 40213f0:	d8c02b05 	stb	r3,172(sp)
 40213f4:	ac400007 	ldb	r17,0(r21)
 40213f8:	003d4306 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 40213fc:	84000814 	ori	r16,r16,32
 4021400:	ac400007 	ldb	r17,0(r21)
 4021404:	003d4006 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4021408:	d8802e17 	ldw	r2,184(sp)
 402140c:	8025883a 	mov	r18,r16
 4021410:	d8002785 	stb	zero,158(sp)
 4021414:	14000017 	ldw	r16,0(r2)
 4021418:	e011883a 	mov	r8,fp
 402141c:	14c00104 	addi	r19,r2,4
 4021420:	80042d26 	beq	r16,zero,40224d8 <___vfprintf_internal_r+0x1d58>
 4021424:	d8c02a17 	ldw	r3,168(sp)
 4021428:	1803e416 	blt	r3,zero,40223bc <___vfprintf_internal_r+0x1c3c>
 402142c:	180d883a 	mov	r6,r3
 4021430:	000b883a 	mov	r5,zero
 4021434:	8009883a 	mov	r4,r16
 4021438:	df003d15 	stw	fp,244(sp)
 402143c:	40260b80 	call	40260b8 <memchr>
 4021440:	da003d17 	ldw	r8,244(sp)
 4021444:	10046826 	beq	r2,zero,40225e8 <___vfprintf_internal_r+0x1e68>
 4021448:	1405c83a 	sub	r2,r2,r16
 402144c:	d8802b15 	stw	r2,172(sp)
 4021450:	1003e016 	blt	r2,zero,40223d4 <___vfprintf_internal_r+0x1c54>
 4021454:	df002783 	ldbu	fp,158(sp)
 4021458:	d8802915 	stw	r2,164(sp)
 402145c:	dcc02e15 	stw	r19,184(sp)
 4021460:	d8002a15 	stw	zero,168(sp)
 4021464:	d8003215 	stw	zero,200(sp)
 4021468:	003ea206 	br	4020ef4 <__flash_rwdata_start+0xfffeb6a4>
 402146c:	8025883a 	mov	r18,r16
 4021470:	dc002903 	ldbu	r16,164(sp)
 4021474:	e011883a 	mov	r8,fp
 4021478:	84003fcc 	andi	r16,r16,255
 402147c:	803f8d26 	beq	r16,zero,40212b4 <__flash_rwdata_start+0xfffeba64>
 4021480:	d8c02b03 	ldbu	r3,172(sp)
 4021484:	d8c02785 	stb	r3,158(sp)
 4021488:	003f8a06 	br	40212b4 <__flash_rwdata_start+0xfffeba64>
 402148c:	8025883a 	mov	r18,r16
 4021490:	dc002903 	ldbu	r16,164(sp)
 4021494:	e011883a 	mov	r8,fp
 4021498:	84003fcc 	andi	r16,r16,255
 402149c:	8005661e 	bne	r16,zero,4022a38 <___vfprintf_internal_r+0x22b8>
 40214a0:	01000034 	movhi	r4,0
 40214a4:	21008704 	addi	r4,r4,540
 40214a8:	d9003915 	stw	r4,228(sp)
 40214ac:	9080080c 	andi	r2,r18,32
 40214b0:	103f9f1e 	bne	r2,zero,4021330 <__flash_rwdata_start+0xfffebae0>
 40214b4:	9080040c 	andi	r2,r18,16
 40214b8:	1002eb26 	beq	r2,zero,4022068 <___vfprintf_internal_r+0x18e8>
 40214bc:	d8802e17 	ldw	r2,184(sp)
 40214c0:	002d883a 	mov	r22,zero
 40214c4:	14c00017 	ldw	r19,0(r2)
 40214c8:	10800104 	addi	r2,r2,4
 40214cc:	d8802e15 	stw	r2,184(sp)
 40214d0:	003f9c06 	br	4021344 <__flash_rwdata_start+0xfffebaf4>
 40214d4:	d8802b07 	ldb	r2,172(sp)
 40214d8:	1002e11e 	bne	r2,zero,4022060 <___vfprintf_internal_r+0x18e0>
 40214dc:	00c00044 	movi	r3,1
 40214e0:	d8c02905 	stb	r3,164(sp)
 40214e4:	00c00804 	movi	r3,32
 40214e8:	d8c02b05 	stb	r3,172(sp)
 40214ec:	ac400007 	ldb	r17,0(r21)
 40214f0:	003d0506 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 40214f4:	84000054 	ori	r16,r16,1
 40214f8:	ac400007 	ldb	r17,0(r21)
 40214fc:	003d0206 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4021500:	8025883a 	mov	r18,r16
 4021504:	dc002903 	ldbu	r16,164(sp)
 4021508:	e011883a 	mov	r8,fp
 402150c:	84003fcc 	andi	r16,r16,255
 4021510:	803de726 	beq	r16,zero,4020cb0 <__flash_rwdata_start+0xfffeb460>
 4021514:	d8c02b03 	ldbu	r3,172(sp)
 4021518:	d8c02785 	stb	r3,158(sp)
 402151c:	003de406 	br	4020cb0 <__flash_rwdata_start+0xfffeb460>
 4021520:	84001014 	ori	r16,r16,64
 4021524:	ac400007 	ldb	r17,0(r21)
 4021528:	003cf706 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 402152c:	ac400007 	ldb	r17,0(r21)
 4021530:	00801b04 	movi	r2,108
 4021534:	88838f26 	beq	r17,r2,4022374 <___vfprintf_internal_r+0x1bf4>
 4021538:	84000414 	ori	r16,r16,16
 402153c:	003cf206 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4021540:	8025883a 	mov	r18,r16
 4021544:	dc002903 	ldbu	r16,164(sp)
 4021548:	e011883a 	mov	r8,fp
 402154c:	84003fcc 	andi	r16,r16,255
 4021550:	80053f1e 	bne	r16,zero,4022a50 <___vfprintf_internal_r+0x22d0>
 4021554:	9080080c 	andi	r2,r18,32
 4021558:	1002d226 	beq	r2,zero,40220a4 <___vfprintf_internal_r+0x1924>
 402155c:	d9002e17 	ldw	r4,184(sp)
 4021560:	d9402f17 	ldw	r5,188(sp)
 4021564:	20800017 	ldw	r2,0(r4)
 4021568:	2807d7fa 	srai	r3,r5,31
 402156c:	21000104 	addi	r4,r4,4
 4021570:	d9002e15 	stw	r4,184(sp)
 4021574:	11400015 	stw	r5,0(r2)
 4021578:	10c00115 	stw	r3,4(r2)
 402157c:	003cb806 	br	4020860 <__flash_rwdata_start+0xfffeb010>
 4021580:	d8c02e17 	ldw	r3,184(sp)
 4021584:	d9002e17 	ldw	r4,184(sp)
 4021588:	8025883a 	mov	r18,r16
 402158c:	18800017 	ldw	r2,0(r3)
 4021590:	21000104 	addi	r4,r4,4
 4021594:	00c00044 	movi	r3,1
 4021598:	e011883a 	mov	r8,fp
 402159c:	d8c02915 	stw	r3,164(sp)
 40215a0:	d8002785 	stb	zero,158(sp)
 40215a4:	d8801405 	stb	r2,80(sp)
 40215a8:	d9002e15 	stw	r4,184(sp)
 40215ac:	d8c02b15 	stw	r3,172(sp)
 40215b0:	d8002a15 	stw	zero,168(sp)
 40215b4:	d8003215 	stw	zero,200(sp)
 40215b8:	dc001404 	addi	r16,sp,80
 40215bc:	0039883a 	mov	fp,zero
 40215c0:	003e5306 	br	4020f10 <__flash_rwdata_start+0xfffeb6c0>
 40215c4:	01000034 	movhi	r4,0
 40215c8:	21008704 	addi	r4,r4,540
 40215cc:	0039883a 	mov	fp,zero
 40215d0:	d9003915 	stw	r4,228(sp)
 40215d4:	04401e04 	movi	r17,120
 40215d8:	003f6906 	br	4021380 <__flash_rwdata_start+0xfffebb30>
 40215dc:	8025883a 	mov	r18,r16
 40215e0:	dc002903 	ldbu	r16,164(sp)
 40215e4:	e011883a 	mov	r8,fp
 40215e8:	84003fcc 	andi	r16,r16,255
 40215ec:	8005081e 	bne	r16,zero,4022a10 <___vfprintf_internal_r+0x2290>
 40215f0:	883d6126 	beq	r17,zero,4020b78 <__flash_rwdata_start+0xfffeb328>
 40215f4:	00c00044 	movi	r3,1
 40215f8:	d8c02915 	stw	r3,164(sp)
 40215fc:	dc401405 	stb	r17,80(sp)
 4021600:	d8002785 	stb	zero,158(sp)
 4021604:	003fe906 	br	40215ac <__flash_rwdata_start+0xfffebd5c>
 4021608:	01400034 	movhi	r5,0
 402160c:	29408704 	addi	r5,r5,540
 4021610:	d9403915 	stw	r5,228(sp)
 4021614:	d8c02e15 	stw	r3,184(sp)
 4021618:	1025883a 	mov	r18,r2
 402161c:	04401e04 	movi	r17,120
 4021620:	9d84b03a 	or	r2,r19,r22
 4021624:	1000fc1e 	bne	r2,zero,4021a18 <___vfprintf_internal_r+0x1298>
 4021628:	0039883a 	mov	fp,zero
 402162c:	00800084 	movi	r2,2
 4021630:	10803fcc 	andi	r2,r2,255
 4021634:	00c00044 	movi	r3,1
 4021638:	10c20f26 	beq	r2,r3,4021e78 <___vfprintf_internal_r+0x16f8>
 402163c:	00c00084 	movi	r3,2
 4021640:	10fd3326 	beq	r2,r3,4020b10 <__flash_rwdata_start+0xfffeb2c0>
 4021644:	003e0b06 	br	4020e74 <__flash_rwdata_start+0xfffeb624>
 4021648:	d8c02017 	ldw	r3,128(sp)
 402164c:	003e7106 	br	4021014 <__flash_rwdata_start+0xfffeb7c4>
 4021650:	00801944 	movi	r2,101
 4021654:	14407e0e 	bge	r2,r17,4021850 <___vfprintf_internal_r+0x10d0>
 4021658:	d9003617 	ldw	r4,216(sp)
 402165c:	d9403817 	ldw	r5,224(sp)
 4021660:	000d883a 	mov	r6,zero
 4021664:	000f883a 	mov	r7,zero
 4021668:	d8c03c15 	stw	r3,240(sp)
 402166c:	da003d15 	stw	r8,244(sp)
 4021670:	402bec00 	call	402bec0 <__eqdf2>
 4021674:	d8c03c17 	ldw	r3,240(sp)
 4021678:	da003d17 	ldw	r8,244(sp)
 402167c:	1000f71e 	bne	r2,zero,4021a5c <___vfprintf_internal_r+0x12dc>
 4021680:	d8801f17 	ldw	r2,124(sp)
 4021684:	01000034 	movhi	r4,0
 4021688:	21008e04 	addi	r4,r4,568
 402168c:	18c00044 	addi	r3,r3,1
 4021690:	10800044 	addi	r2,r2,1
 4021694:	41000015 	stw	r4,0(r8)
 4021698:	01000044 	movi	r4,1
 402169c:	41000115 	stw	r4,4(r8)
 40216a0:	d8c02015 	stw	r3,128(sp)
 40216a4:	d8801f15 	stw	r2,124(sp)
 40216a8:	010001c4 	movi	r4,7
 40216ac:	2082b816 	blt	r4,r2,4022190 <___vfprintf_internal_r+0x1a10>
 40216b0:	42000204 	addi	r8,r8,8
 40216b4:	d8802617 	ldw	r2,152(sp)
 40216b8:	d9403317 	ldw	r5,204(sp)
 40216bc:	11400216 	blt	r2,r5,40216c8 <___vfprintf_internal_r+0xf48>
 40216c0:	9080004c 	andi	r2,r18,1
 40216c4:	103eb326 	beq	r2,zero,4021194 <__flash_rwdata_start+0xfffeb944>
 40216c8:	d8803717 	ldw	r2,220(sp)
 40216cc:	d9003417 	ldw	r4,208(sp)
 40216d0:	d9403717 	ldw	r5,220(sp)
 40216d4:	1887883a 	add	r3,r3,r2
 40216d8:	d8801f17 	ldw	r2,124(sp)
 40216dc:	41000015 	stw	r4,0(r8)
 40216e0:	41400115 	stw	r5,4(r8)
 40216e4:	10800044 	addi	r2,r2,1
 40216e8:	d8c02015 	stw	r3,128(sp)
 40216ec:	d8801f15 	stw	r2,124(sp)
 40216f0:	010001c4 	movi	r4,7
 40216f4:	20832916 	blt	r4,r2,402239c <___vfprintf_internal_r+0x1c1c>
 40216f8:	42000204 	addi	r8,r8,8
 40216fc:	d8803317 	ldw	r2,204(sp)
 4021700:	143fffc4 	addi	r16,r2,-1
 4021704:	043ea30e 	bge	zero,r16,4021194 <__flash_rwdata_start+0xfffeb944>
 4021708:	04400404 	movi	r17,16
 402170c:	d8801f17 	ldw	r2,124(sp)
 4021710:	8c00880e 	bge	r17,r16,4021934 <___vfprintf_internal_r+0x11b4>
 4021714:	01400034 	movhi	r5,0
 4021718:	29408e84 	addi	r5,r5,570
 402171c:	d9402c15 	stw	r5,176(sp)
 4021720:	058001c4 	movi	r22,7
 4021724:	dcc02d17 	ldw	r19,180(sp)
 4021728:	00000306 	br	4021738 <___vfprintf_internal_r+0xfb8>
 402172c:	42000204 	addi	r8,r8,8
 4021730:	843ffc04 	addi	r16,r16,-16
 4021734:	8c00820e 	bge	r17,r16,4021940 <___vfprintf_internal_r+0x11c0>
 4021738:	18c00404 	addi	r3,r3,16
 402173c:	10800044 	addi	r2,r2,1
 4021740:	45000015 	stw	r20,0(r8)
 4021744:	44400115 	stw	r17,4(r8)
 4021748:	d8c02015 	stw	r3,128(sp)
 402174c:	d8801f15 	stw	r2,124(sp)
 4021750:	b0bff60e 	bge	r22,r2,402172c <__flash_rwdata_start+0xfffebedc>
 4021754:	d9801e04 	addi	r6,sp,120
 4021758:	b80b883a 	mov	r5,r23
 402175c:	9809883a 	mov	r4,r19
 4021760:	4027f600 	call	4027f60 <__sprint_r>
 4021764:	103d0a1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021768:	d8c02017 	ldw	r3,128(sp)
 402176c:	d8801f17 	ldw	r2,124(sp)
 4021770:	da000404 	addi	r8,sp,16
 4021774:	003fee06 	br	4021730 <__flash_rwdata_start+0xfffebee0>
 4021778:	d9403117 	ldw	r5,196(sp)
 402177c:	d8802917 	ldw	r2,164(sp)
 4021780:	28adc83a 	sub	r22,r5,r2
 4021784:	05be410e 	bge	zero,r22,402108c <__flash_rwdata_start+0xfffeb83c>
 4021788:	07000404 	movi	fp,16
 402178c:	d8801f17 	ldw	r2,124(sp)
 4021790:	e5838f0e 	bge	fp,r22,40225d0 <___vfprintf_internal_r+0x1e50>
 4021794:	01400034 	movhi	r5,0
 4021798:	29408e84 	addi	r5,r5,570
 402179c:	dc403015 	stw	r17,192(sp)
 40217a0:	d9402c15 	stw	r5,176(sp)
 40217a4:	b023883a 	mov	r17,r22
 40217a8:	04c001c4 	movi	r19,7
 40217ac:	a82d883a 	mov	r22,r21
 40217b0:	902b883a 	mov	r21,r18
 40217b4:	8025883a 	mov	r18,r16
 40217b8:	dc002d17 	ldw	r16,180(sp)
 40217bc:	00000306 	br	40217cc <___vfprintf_internal_r+0x104c>
 40217c0:	8c7ffc04 	addi	r17,r17,-16
 40217c4:	42000204 	addi	r8,r8,8
 40217c8:	e440110e 	bge	fp,r17,4021810 <___vfprintf_internal_r+0x1090>
 40217cc:	18c00404 	addi	r3,r3,16
 40217d0:	10800044 	addi	r2,r2,1
 40217d4:	45000015 	stw	r20,0(r8)
 40217d8:	47000115 	stw	fp,4(r8)
 40217dc:	d8c02015 	stw	r3,128(sp)
 40217e0:	d8801f15 	stw	r2,124(sp)
 40217e4:	98bff60e 	bge	r19,r2,40217c0 <__flash_rwdata_start+0xfffebf70>
 40217e8:	d9801e04 	addi	r6,sp,120
 40217ec:	b80b883a 	mov	r5,r23
 40217f0:	8009883a 	mov	r4,r16
 40217f4:	4027f600 	call	4027f60 <__sprint_r>
 40217f8:	103ce51e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40217fc:	8c7ffc04 	addi	r17,r17,-16
 4021800:	d8c02017 	ldw	r3,128(sp)
 4021804:	d8801f17 	ldw	r2,124(sp)
 4021808:	da000404 	addi	r8,sp,16
 402180c:	e47fef16 	blt	fp,r17,40217cc <__flash_rwdata_start+0xfffebf7c>
 4021810:	9021883a 	mov	r16,r18
 4021814:	a825883a 	mov	r18,r21
 4021818:	b02b883a 	mov	r21,r22
 402181c:	882d883a 	mov	r22,r17
 4021820:	dc403017 	ldw	r17,192(sp)
 4021824:	d9002c17 	ldw	r4,176(sp)
 4021828:	1d87883a 	add	r3,r3,r22
 402182c:	10800044 	addi	r2,r2,1
 4021830:	41000015 	stw	r4,0(r8)
 4021834:	45800115 	stw	r22,4(r8)
 4021838:	d8c02015 	stw	r3,128(sp)
 402183c:	d8801f15 	stw	r2,124(sp)
 4021840:	010001c4 	movi	r4,7
 4021844:	20818e16 	blt	r4,r2,4021e80 <___vfprintf_internal_r+0x1700>
 4021848:	42000204 	addi	r8,r8,8
 402184c:	003e0f06 	br	402108c <__flash_rwdata_start+0xfffeb83c>
 4021850:	d9403317 	ldw	r5,204(sp)
 4021854:	00800044 	movi	r2,1
 4021858:	18c00044 	addi	r3,r3,1
 402185c:	1141530e 	bge	r2,r5,4021dac <___vfprintf_internal_r+0x162c>
 4021860:	dc401f17 	ldw	r17,124(sp)
 4021864:	00800044 	movi	r2,1
 4021868:	40800115 	stw	r2,4(r8)
 402186c:	8c400044 	addi	r17,r17,1
 4021870:	44000015 	stw	r16,0(r8)
 4021874:	d8c02015 	stw	r3,128(sp)
 4021878:	dc401f15 	stw	r17,124(sp)
 402187c:	008001c4 	movi	r2,7
 4021880:	14416b16 	blt	r2,r17,4021e30 <___vfprintf_internal_r+0x16b0>
 4021884:	42000204 	addi	r8,r8,8
 4021888:	d8803717 	ldw	r2,220(sp)
 402188c:	d9003417 	ldw	r4,208(sp)
 4021890:	8c400044 	addi	r17,r17,1
 4021894:	10c7883a 	add	r3,r2,r3
 4021898:	40800115 	stw	r2,4(r8)
 402189c:	41000015 	stw	r4,0(r8)
 40218a0:	d8c02015 	stw	r3,128(sp)
 40218a4:	dc401f15 	stw	r17,124(sp)
 40218a8:	008001c4 	movi	r2,7
 40218ac:	14416916 	blt	r2,r17,4021e54 <___vfprintf_internal_r+0x16d4>
 40218b0:	45800204 	addi	r22,r8,8
 40218b4:	d9003617 	ldw	r4,216(sp)
 40218b8:	d9403817 	ldw	r5,224(sp)
 40218bc:	000d883a 	mov	r6,zero
 40218c0:	000f883a 	mov	r7,zero
 40218c4:	d8c03c15 	stw	r3,240(sp)
 40218c8:	402bec00 	call	402bec0 <__eqdf2>
 40218cc:	d8c03c17 	ldw	r3,240(sp)
 40218d0:	1000bc26 	beq	r2,zero,4021bc4 <___vfprintf_internal_r+0x1444>
 40218d4:	d9403317 	ldw	r5,204(sp)
 40218d8:	84000044 	addi	r16,r16,1
 40218dc:	8c400044 	addi	r17,r17,1
 40218e0:	28bfffc4 	addi	r2,r5,-1
 40218e4:	1887883a 	add	r3,r3,r2
 40218e8:	b0800115 	stw	r2,4(r22)
 40218ec:	b4000015 	stw	r16,0(r22)
 40218f0:	d8c02015 	stw	r3,128(sp)
 40218f4:	dc401f15 	stw	r17,124(sp)
 40218f8:	008001c4 	movi	r2,7
 40218fc:	14414316 	blt	r2,r17,4021e0c <___vfprintf_internal_r+0x168c>
 4021900:	b5800204 	addi	r22,r22,8
 4021904:	d9003a17 	ldw	r4,232(sp)
 4021908:	df0022c4 	addi	fp,sp,139
 402190c:	8c400044 	addi	r17,r17,1
 4021910:	20c7883a 	add	r3,r4,r3
 4021914:	b7000015 	stw	fp,0(r22)
 4021918:	b1000115 	stw	r4,4(r22)
 402191c:	d8c02015 	stw	r3,128(sp)
 4021920:	dc401f15 	stw	r17,124(sp)
 4021924:	008001c4 	movi	r2,7
 4021928:	14400e16 	blt	r2,r17,4021964 <___vfprintf_internal_r+0x11e4>
 402192c:	b2000204 	addi	r8,r22,8
 4021930:	003e1806 	br	4021194 <__flash_rwdata_start+0xfffeb944>
 4021934:	01000034 	movhi	r4,0
 4021938:	21008e84 	addi	r4,r4,570
 402193c:	d9002c15 	stw	r4,176(sp)
 4021940:	d9002c17 	ldw	r4,176(sp)
 4021944:	1c07883a 	add	r3,r3,r16
 4021948:	44000115 	stw	r16,4(r8)
 402194c:	41000015 	stw	r4,0(r8)
 4021950:	10800044 	addi	r2,r2,1
 4021954:	d8c02015 	stw	r3,128(sp)
 4021958:	d8801f15 	stw	r2,124(sp)
 402195c:	010001c4 	movi	r4,7
 4021960:	20be0b0e 	bge	r4,r2,4021190 <__flash_rwdata_start+0xfffeb940>
 4021964:	d9002d17 	ldw	r4,180(sp)
 4021968:	d9801e04 	addi	r6,sp,120
 402196c:	b80b883a 	mov	r5,r23
 4021970:	4027f600 	call	4027f60 <__sprint_r>
 4021974:	103c861e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021978:	d8c02017 	ldw	r3,128(sp)
 402197c:	da000404 	addi	r8,sp,16
 4021980:	003e0406 	br	4021194 <__flash_rwdata_start+0xfffeb944>
 4021984:	d9002d17 	ldw	r4,180(sp)
 4021988:	d9801e04 	addi	r6,sp,120
 402198c:	b80b883a 	mov	r5,r23
 4021990:	4027f600 	call	4027f60 <__sprint_r>
 4021994:	103e3b26 	beq	r2,zero,4021284 <__flash_rwdata_start+0xfffeba34>
 4021998:	003c7d06 	br	4020b90 <__flash_rwdata_start+0xfffeb340>
 402199c:	d9002d17 	ldw	r4,180(sp)
 40219a0:	d9801e04 	addi	r6,sp,120
 40219a4:	b80b883a 	mov	r5,r23
 40219a8:	4027f600 	call	4027f60 <__sprint_r>
 40219ac:	103c781e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40219b0:	d8c02017 	ldw	r3,128(sp)
 40219b4:	da000404 	addi	r8,sp,16
 40219b8:	003de906 	br	4021160 <__flash_rwdata_start+0xfffeb910>
 40219bc:	d9002d17 	ldw	r4,180(sp)
 40219c0:	d9801e04 	addi	r6,sp,120
 40219c4:	b80b883a 	mov	r5,r23
 40219c8:	4027f600 	call	4027f60 <__sprint_r>
 40219cc:	103c701e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40219d0:	d8c02017 	ldw	r3,128(sp)
 40219d4:	da000404 	addi	r8,sp,16
 40219d8:	003d9b06 	br	4021048 <__flash_rwdata_start+0xfffeb7f8>
 40219dc:	d9002d17 	ldw	r4,180(sp)
 40219e0:	d9801e04 	addi	r6,sp,120
 40219e4:	b80b883a 	mov	r5,r23
 40219e8:	4027f600 	call	4027f60 <__sprint_r>
 40219ec:	103c681e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40219f0:	d8c02017 	ldw	r3,128(sp)
 40219f4:	da000404 	addi	r8,sp,16
 40219f8:	003da106 	br	4021080 <__flash_rwdata_start+0xfffeb830>
 40219fc:	d9402a17 	ldw	r5,168(sp)
 4021a00:	d8002785 	stb	zero,158(sp)
 4021a04:	283f0616 	blt	r5,zero,4021620 <__flash_rwdata_start+0xfffebdd0>
 4021a08:	00ffdfc4 	movi	r3,-129
 4021a0c:	9d84b03a 	or	r2,r19,r22
 4021a10:	90e4703a 	and	r18,r18,r3
 4021a14:	103c3b26 	beq	r2,zero,4020b04 <__flash_rwdata_start+0xfffeb2b4>
 4021a18:	0039883a 	mov	fp,zero
 4021a1c:	003e5806 	br	4021380 <__flash_rwdata_start+0xfffebb30>
 4021a20:	9080040c 	andi	r2,r18,16
 4021a24:	1001b326 	beq	r2,zero,40220f4 <___vfprintf_internal_r+0x1974>
 4021a28:	d8c02e17 	ldw	r3,184(sp)
 4021a2c:	d9002a17 	ldw	r4,168(sp)
 4021a30:	d8002785 	stb	zero,158(sp)
 4021a34:	18800104 	addi	r2,r3,4
 4021a38:	1cc00017 	ldw	r19,0(r3)
 4021a3c:	002d883a 	mov	r22,zero
 4021a40:	2001b516 	blt	r4,zero,4022118 <___vfprintf_internal_r+0x1998>
 4021a44:	00ffdfc4 	movi	r3,-129
 4021a48:	d8802e15 	stw	r2,184(sp)
 4021a4c:	90e4703a 	and	r18,r18,r3
 4021a50:	983d0526 	beq	r19,zero,4020e68 <__flash_rwdata_start+0xfffeb618>
 4021a54:	0039883a 	mov	fp,zero
 4021a58:	003d0806 	br	4020e7c <__flash_rwdata_start+0xfffeb62c>
 4021a5c:	dc402617 	ldw	r17,152(sp)
 4021a60:	0441d30e 	bge	zero,r17,40221b0 <___vfprintf_internal_r+0x1a30>
 4021a64:	dc403217 	ldw	r17,200(sp)
 4021a68:	d8803317 	ldw	r2,204(sp)
 4021a6c:	1440010e 	bge	r2,r17,4021a74 <___vfprintf_internal_r+0x12f4>
 4021a70:	1023883a 	mov	r17,r2
 4021a74:	04400a0e 	bge	zero,r17,4021aa0 <___vfprintf_internal_r+0x1320>
 4021a78:	d8801f17 	ldw	r2,124(sp)
 4021a7c:	1c47883a 	add	r3,r3,r17
 4021a80:	44000015 	stw	r16,0(r8)
 4021a84:	10800044 	addi	r2,r2,1
 4021a88:	44400115 	stw	r17,4(r8)
 4021a8c:	d8c02015 	stw	r3,128(sp)
 4021a90:	d8801f15 	stw	r2,124(sp)
 4021a94:	010001c4 	movi	r4,7
 4021a98:	20826516 	blt	r4,r2,4022430 <___vfprintf_internal_r+0x1cb0>
 4021a9c:	42000204 	addi	r8,r8,8
 4021aa0:	88026116 	blt	r17,zero,4022428 <___vfprintf_internal_r+0x1ca8>
 4021aa4:	d9003217 	ldw	r4,200(sp)
 4021aa8:	2463c83a 	sub	r17,r4,r17
 4021aac:	04407b0e 	bge	zero,r17,4021c9c <___vfprintf_internal_r+0x151c>
 4021ab0:	05800404 	movi	r22,16
 4021ab4:	d8801f17 	ldw	r2,124(sp)
 4021ab8:	b4419d0e 	bge	r22,r17,4022130 <___vfprintf_internal_r+0x19b0>
 4021abc:	01000034 	movhi	r4,0
 4021ac0:	21008e84 	addi	r4,r4,570
 4021ac4:	d9002c15 	stw	r4,176(sp)
 4021ac8:	070001c4 	movi	fp,7
 4021acc:	dcc02d17 	ldw	r19,180(sp)
 4021ad0:	00000306 	br	4021ae0 <___vfprintf_internal_r+0x1360>
 4021ad4:	42000204 	addi	r8,r8,8
 4021ad8:	8c7ffc04 	addi	r17,r17,-16
 4021adc:	b441970e 	bge	r22,r17,402213c <___vfprintf_internal_r+0x19bc>
 4021ae0:	18c00404 	addi	r3,r3,16
 4021ae4:	10800044 	addi	r2,r2,1
 4021ae8:	45000015 	stw	r20,0(r8)
 4021aec:	45800115 	stw	r22,4(r8)
 4021af0:	d8c02015 	stw	r3,128(sp)
 4021af4:	d8801f15 	stw	r2,124(sp)
 4021af8:	e0bff60e 	bge	fp,r2,4021ad4 <__flash_rwdata_start+0xfffec284>
 4021afc:	d9801e04 	addi	r6,sp,120
 4021b00:	b80b883a 	mov	r5,r23
 4021b04:	9809883a 	mov	r4,r19
 4021b08:	4027f600 	call	4027f60 <__sprint_r>
 4021b0c:	103c201e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021b10:	d8c02017 	ldw	r3,128(sp)
 4021b14:	d8801f17 	ldw	r2,124(sp)
 4021b18:	da000404 	addi	r8,sp,16
 4021b1c:	003fee06 	br	4021ad8 <__flash_rwdata_start+0xfffec288>
 4021b20:	d9002d17 	ldw	r4,180(sp)
 4021b24:	d9801e04 	addi	r6,sp,120
 4021b28:	b80b883a 	mov	r5,r23
 4021b2c:	4027f600 	call	4027f60 <__sprint_r>
 4021b30:	103c171e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021b34:	d8c02017 	ldw	r3,128(sp)
 4021b38:	df002787 	ldb	fp,158(sp)
 4021b3c:	da000404 	addi	r8,sp,16
 4021b40:	003d3406 	br	4021014 <__flash_rwdata_start+0xfffeb7c4>
 4021b44:	9080040c 	andi	r2,r18,16
 4021b48:	10016126 	beq	r2,zero,40220d0 <___vfprintf_internal_r+0x1950>
 4021b4c:	d9402e17 	ldw	r5,184(sp)
 4021b50:	2cc00017 	ldw	r19,0(r5)
 4021b54:	29400104 	addi	r5,r5,4
 4021b58:	d9402e15 	stw	r5,184(sp)
 4021b5c:	982dd7fa 	srai	r22,r19,31
 4021b60:	b005883a 	mov	r2,r22
 4021b64:	003c5a06 	br	4020cd0 <__flash_rwdata_start+0xfffeb480>
 4021b68:	9080040c 	andi	r2,r18,16
 4021b6c:	10003526 	beq	r2,zero,4021c44 <___vfprintf_internal_r+0x14c4>
 4021b70:	d8c02e17 	ldw	r3,184(sp)
 4021b74:	d9002a17 	ldw	r4,168(sp)
 4021b78:	d8002785 	stb	zero,158(sp)
 4021b7c:	18800104 	addi	r2,r3,4
 4021b80:	1cc00017 	ldw	r19,0(r3)
 4021b84:	002d883a 	mov	r22,zero
 4021b88:	20003716 	blt	r4,zero,4021c68 <___vfprintf_internal_r+0x14e8>
 4021b8c:	00ffdfc4 	movi	r3,-129
 4021b90:	d8802e15 	stw	r2,184(sp)
 4021b94:	90e4703a 	and	r18,r18,r3
 4021b98:	0039883a 	mov	fp,zero
 4021b9c:	983dd426 	beq	r19,zero,40212f0 <__flash_rwdata_start+0xfffebaa0>
 4021ba0:	00800244 	movi	r2,9
 4021ba4:	14fc5336 	bltu	r2,r19,4020cf4 <__flash_rwdata_start+0xfffeb4a4>
 4021ba8:	d8c02817 	ldw	r3,160(sp)
 4021bac:	dc001dc4 	addi	r16,sp,119
 4021bb0:	9cc00c04 	addi	r19,r19,48
 4021bb4:	1c07c83a 	sub	r3,r3,r16
 4021bb8:	dcc01dc5 	stb	r19,119(sp)
 4021bbc:	d8c02b15 	stw	r3,172(sp)
 4021bc0:	003cc606 	br	4020edc <__flash_rwdata_start+0xfffeb68c>
 4021bc4:	d8803317 	ldw	r2,204(sp)
 4021bc8:	143fffc4 	addi	r16,r2,-1
 4021bcc:	043f4d0e 	bge	zero,r16,4021904 <__flash_rwdata_start+0xfffec0b4>
 4021bd0:	07000404 	movi	fp,16
 4021bd4:	e400810e 	bge	fp,r16,4021ddc <___vfprintf_internal_r+0x165c>
 4021bd8:	01400034 	movhi	r5,0
 4021bdc:	29408e84 	addi	r5,r5,570
 4021be0:	d9402c15 	stw	r5,176(sp)
 4021be4:	01c001c4 	movi	r7,7
 4021be8:	dcc02d17 	ldw	r19,180(sp)
 4021bec:	00000306 	br	4021bfc <___vfprintf_internal_r+0x147c>
 4021bf0:	b5800204 	addi	r22,r22,8
 4021bf4:	843ffc04 	addi	r16,r16,-16
 4021bf8:	e4007b0e 	bge	fp,r16,4021de8 <___vfprintf_internal_r+0x1668>
 4021bfc:	18c00404 	addi	r3,r3,16
 4021c00:	8c400044 	addi	r17,r17,1
 4021c04:	b5000015 	stw	r20,0(r22)
 4021c08:	b7000115 	stw	fp,4(r22)
 4021c0c:	d8c02015 	stw	r3,128(sp)
 4021c10:	dc401f15 	stw	r17,124(sp)
 4021c14:	3c7ff60e 	bge	r7,r17,4021bf0 <__flash_rwdata_start+0xfffec3a0>
 4021c18:	d9801e04 	addi	r6,sp,120
 4021c1c:	b80b883a 	mov	r5,r23
 4021c20:	9809883a 	mov	r4,r19
 4021c24:	d9c03c15 	stw	r7,240(sp)
 4021c28:	4027f600 	call	4027f60 <__sprint_r>
 4021c2c:	d9c03c17 	ldw	r7,240(sp)
 4021c30:	103bd71e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021c34:	d8c02017 	ldw	r3,128(sp)
 4021c38:	dc401f17 	ldw	r17,124(sp)
 4021c3c:	dd800404 	addi	r22,sp,16
 4021c40:	003fec06 	br	4021bf4 <__flash_rwdata_start+0xfffec3a4>
 4021c44:	9080100c 	andi	r2,r18,64
 4021c48:	d8002785 	stb	zero,158(sp)
 4021c4c:	10010e26 	beq	r2,zero,4022088 <___vfprintf_internal_r+0x1908>
 4021c50:	d9402e17 	ldw	r5,184(sp)
 4021c54:	d8c02a17 	ldw	r3,168(sp)
 4021c58:	002d883a 	mov	r22,zero
 4021c5c:	28800104 	addi	r2,r5,4
 4021c60:	2cc0000b 	ldhu	r19,0(r5)
 4021c64:	183fc90e 	bge	r3,zero,4021b8c <__flash_rwdata_start+0xfffec33c>
 4021c68:	d8802e15 	stw	r2,184(sp)
 4021c6c:	0039883a 	mov	fp,zero
 4021c70:	9d84b03a 	or	r2,r19,r22
 4021c74:	103c1e1e 	bne	r2,zero,4020cf0 <__flash_rwdata_start+0xfffeb4a0>
 4021c78:	00800044 	movi	r2,1
 4021c7c:	003e6c06 	br	4021630 <__flash_rwdata_start+0xfffebde0>
 4021c80:	d9002d17 	ldw	r4,180(sp)
 4021c84:	d9801e04 	addi	r6,sp,120
 4021c88:	b80b883a 	mov	r5,r23
 4021c8c:	4027f600 	call	4027f60 <__sprint_r>
 4021c90:	103bbf1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021c94:	d8c02017 	ldw	r3,128(sp)
 4021c98:	da000404 	addi	r8,sp,16
 4021c9c:	d9003217 	ldw	r4,200(sp)
 4021ca0:	d8802617 	ldw	r2,152(sp)
 4021ca4:	d9403317 	ldw	r5,204(sp)
 4021ca8:	8123883a 	add	r17,r16,r4
 4021cac:	11400216 	blt	r2,r5,4021cb8 <___vfprintf_internal_r+0x1538>
 4021cb0:	9100004c 	andi	r4,r18,1
 4021cb4:	20000d26 	beq	r4,zero,4021cec <___vfprintf_internal_r+0x156c>
 4021cb8:	d9003717 	ldw	r4,220(sp)
 4021cbc:	d9403417 	ldw	r5,208(sp)
 4021cc0:	1907883a 	add	r3,r3,r4
 4021cc4:	d9001f17 	ldw	r4,124(sp)
 4021cc8:	41400015 	stw	r5,0(r8)
 4021ccc:	d9403717 	ldw	r5,220(sp)
 4021cd0:	21000044 	addi	r4,r4,1
 4021cd4:	d8c02015 	stw	r3,128(sp)
 4021cd8:	41400115 	stw	r5,4(r8)
 4021cdc:	d9001f15 	stw	r4,124(sp)
 4021ce0:	014001c4 	movi	r5,7
 4021ce4:	2901e816 	blt	r5,r4,4022488 <___vfprintf_internal_r+0x1d08>
 4021ce8:	42000204 	addi	r8,r8,8
 4021cec:	d9003317 	ldw	r4,204(sp)
 4021cf0:	8121883a 	add	r16,r16,r4
 4021cf4:	2085c83a 	sub	r2,r4,r2
 4021cf8:	8461c83a 	sub	r16,r16,r17
 4021cfc:	1400010e 	bge	r2,r16,4021d04 <___vfprintf_internal_r+0x1584>
 4021d00:	1021883a 	mov	r16,r2
 4021d04:	04000a0e 	bge	zero,r16,4021d30 <___vfprintf_internal_r+0x15b0>
 4021d08:	d9001f17 	ldw	r4,124(sp)
 4021d0c:	1c07883a 	add	r3,r3,r16
 4021d10:	44400015 	stw	r17,0(r8)
 4021d14:	21000044 	addi	r4,r4,1
 4021d18:	44000115 	stw	r16,4(r8)
 4021d1c:	d8c02015 	stw	r3,128(sp)
 4021d20:	d9001f15 	stw	r4,124(sp)
 4021d24:	014001c4 	movi	r5,7
 4021d28:	2901fb16 	blt	r5,r4,4022518 <___vfprintf_internal_r+0x1d98>
 4021d2c:	42000204 	addi	r8,r8,8
 4021d30:	8001f716 	blt	r16,zero,4022510 <___vfprintf_internal_r+0x1d90>
 4021d34:	1421c83a 	sub	r16,r2,r16
 4021d38:	043d160e 	bge	zero,r16,4021194 <__flash_rwdata_start+0xfffeb944>
 4021d3c:	04400404 	movi	r17,16
 4021d40:	d8801f17 	ldw	r2,124(sp)
 4021d44:	8c3efb0e 	bge	r17,r16,4021934 <__flash_rwdata_start+0xfffec0e4>
 4021d48:	01400034 	movhi	r5,0
 4021d4c:	29408e84 	addi	r5,r5,570
 4021d50:	d9402c15 	stw	r5,176(sp)
 4021d54:	058001c4 	movi	r22,7
 4021d58:	dcc02d17 	ldw	r19,180(sp)
 4021d5c:	00000306 	br	4021d6c <___vfprintf_internal_r+0x15ec>
 4021d60:	42000204 	addi	r8,r8,8
 4021d64:	843ffc04 	addi	r16,r16,-16
 4021d68:	8c3ef50e 	bge	r17,r16,4021940 <__flash_rwdata_start+0xfffec0f0>
 4021d6c:	18c00404 	addi	r3,r3,16
 4021d70:	10800044 	addi	r2,r2,1
 4021d74:	45000015 	stw	r20,0(r8)
 4021d78:	44400115 	stw	r17,4(r8)
 4021d7c:	d8c02015 	stw	r3,128(sp)
 4021d80:	d8801f15 	stw	r2,124(sp)
 4021d84:	b0bff60e 	bge	r22,r2,4021d60 <__flash_rwdata_start+0xfffec510>
 4021d88:	d9801e04 	addi	r6,sp,120
 4021d8c:	b80b883a 	mov	r5,r23
 4021d90:	9809883a 	mov	r4,r19
 4021d94:	4027f600 	call	4027f60 <__sprint_r>
 4021d98:	103b7d1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021d9c:	d8c02017 	ldw	r3,128(sp)
 4021da0:	d8801f17 	ldw	r2,124(sp)
 4021da4:	da000404 	addi	r8,sp,16
 4021da8:	003fee06 	br	4021d64 <__flash_rwdata_start+0xfffec514>
 4021dac:	9088703a 	and	r4,r18,r2
 4021db0:	203eab1e 	bne	r4,zero,4021860 <__flash_rwdata_start+0xfffec010>
 4021db4:	dc401f17 	ldw	r17,124(sp)
 4021db8:	40800115 	stw	r2,4(r8)
 4021dbc:	44000015 	stw	r16,0(r8)
 4021dc0:	8c400044 	addi	r17,r17,1
 4021dc4:	d8c02015 	stw	r3,128(sp)
 4021dc8:	dc401f15 	stw	r17,124(sp)
 4021dcc:	008001c4 	movi	r2,7
 4021dd0:	14400e16 	blt	r2,r17,4021e0c <___vfprintf_internal_r+0x168c>
 4021dd4:	45800204 	addi	r22,r8,8
 4021dd8:	003eca06 	br	4021904 <__flash_rwdata_start+0xfffec0b4>
 4021ddc:	01000034 	movhi	r4,0
 4021de0:	21008e84 	addi	r4,r4,570
 4021de4:	d9002c15 	stw	r4,176(sp)
 4021de8:	d8802c17 	ldw	r2,176(sp)
 4021dec:	1c07883a 	add	r3,r3,r16
 4021df0:	8c400044 	addi	r17,r17,1
 4021df4:	b0800015 	stw	r2,0(r22)
 4021df8:	b4000115 	stw	r16,4(r22)
 4021dfc:	d8c02015 	stw	r3,128(sp)
 4021e00:	dc401f15 	stw	r17,124(sp)
 4021e04:	008001c4 	movi	r2,7
 4021e08:	147ebd0e 	bge	r2,r17,4021900 <__flash_rwdata_start+0xfffec0b0>
 4021e0c:	d9002d17 	ldw	r4,180(sp)
 4021e10:	d9801e04 	addi	r6,sp,120
 4021e14:	b80b883a 	mov	r5,r23
 4021e18:	4027f600 	call	4027f60 <__sprint_r>
 4021e1c:	103b5c1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021e20:	d8c02017 	ldw	r3,128(sp)
 4021e24:	dc401f17 	ldw	r17,124(sp)
 4021e28:	dd800404 	addi	r22,sp,16
 4021e2c:	003eb506 	br	4021904 <__flash_rwdata_start+0xfffec0b4>
 4021e30:	d9002d17 	ldw	r4,180(sp)
 4021e34:	d9801e04 	addi	r6,sp,120
 4021e38:	b80b883a 	mov	r5,r23
 4021e3c:	4027f600 	call	4027f60 <__sprint_r>
 4021e40:	103b531e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021e44:	d8c02017 	ldw	r3,128(sp)
 4021e48:	dc401f17 	ldw	r17,124(sp)
 4021e4c:	da000404 	addi	r8,sp,16
 4021e50:	003e8d06 	br	4021888 <__flash_rwdata_start+0xfffec038>
 4021e54:	d9002d17 	ldw	r4,180(sp)
 4021e58:	d9801e04 	addi	r6,sp,120
 4021e5c:	b80b883a 	mov	r5,r23
 4021e60:	4027f600 	call	4027f60 <__sprint_r>
 4021e64:	103b4a1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021e68:	d8c02017 	ldw	r3,128(sp)
 4021e6c:	dc401f17 	ldw	r17,124(sp)
 4021e70:	dd800404 	addi	r22,sp,16
 4021e74:	003e8f06 	br	40218b4 <__flash_rwdata_start+0xfffec064>
 4021e78:	0027883a 	mov	r19,zero
 4021e7c:	003f4a06 	br	4021ba8 <__flash_rwdata_start+0xfffec358>
 4021e80:	d9002d17 	ldw	r4,180(sp)
 4021e84:	d9801e04 	addi	r6,sp,120
 4021e88:	b80b883a 	mov	r5,r23
 4021e8c:	4027f600 	call	4027f60 <__sprint_r>
 4021e90:	103b3f1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4021e94:	d8c02017 	ldw	r3,128(sp)
 4021e98:	da000404 	addi	r8,sp,16
 4021e9c:	003c7b06 	br	402108c <__flash_rwdata_start+0xfffeb83c>
 4021ea0:	d9402a17 	ldw	r5,168(sp)
 4021ea4:	04e7c83a 	sub	r19,zero,r19
 4021ea8:	07000b44 	movi	fp,45
 4021eac:	9804c03a 	cmpne	r2,r19,zero
 4021eb0:	05adc83a 	sub	r22,zero,r22
 4021eb4:	df002785 	stb	fp,158(sp)
 4021eb8:	b0adc83a 	sub	r22,r22,r2
 4021ebc:	28017b16 	blt	r5,zero,40224ac <___vfprintf_internal_r+0x1d2c>
 4021ec0:	00bfdfc4 	movi	r2,-129
 4021ec4:	90a4703a 	and	r18,r18,r2
 4021ec8:	003b8906 	br	4020cf0 <__flash_rwdata_start+0xfffeb4a0>
 4021ecc:	d9003617 	ldw	r4,216(sp)
 4021ed0:	d9403817 	ldw	r5,224(sp)
 4021ed4:	da003d15 	stw	r8,244(sp)
 4021ed8:	4027b840 	call	4027b84 <__fpclassifyd>
 4021edc:	da003d17 	ldw	r8,244(sp)
 4021ee0:	1000f026 	beq	r2,zero,40222a4 <___vfprintf_internal_r+0x1b24>
 4021ee4:	d9002a17 	ldw	r4,168(sp)
 4021ee8:	05bff7c4 	movi	r22,-33
 4021eec:	00bfffc4 	movi	r2,-1
 4021ef0:	8dac703a 	and	r22,r17,r22
 4021ef4:	20820026 	beq	r4,r2,40226f8 <___vfprintf_internal_r+0x1f78>
 4021ef8:	008011c4 	movi	r2,71
 4021efc:	b081f726 	beq	r22,r2,40226dc <___vfprintf_internal_r+0x1f5c>
 4021f00:	d9003817 	ldw	r4,224(sp)
 4021f04:	90c04014 	ori	r3,r18,256
 4021f08:	d8c02c15 	stw	r3,176(sp)
 4021f0c:	20021516 	blt	r4,zero,4022764 <___vfprintf_internal_r+0x1fe4>
 4021f10:	dcc03817 	ldw	r19,224(sp)
 4021f14:	d8002905 	stb	zero,164(sp)
 4021f18:	00801984 	movi	r2,102
 4021f1c:	8881f926 	beq	r17,r2,4022704 <___vfprintf_internal_r+0x1f84>
 4021f20:	00801184 	movi	r2,70
 4021f24:	88821c26 	beq	r17,r2,4022798 <___vfprintf_internal_r+0x2018>
 4021f28:	00801144 	movi	r2,69
 4021f2c:	b081ef26 	beq	r22,r2,40226ec <___vfprintf_internal_r+0x1f6c>
 4021f30:	d8c02a17 	ldw	r3,168(sp)
 4021f34:	d8802104 	addi	r2,sp,132
 4021f38:	d8800315 	stw	r2,12(sp)
 4021f3c:	d9403617 	ldw	r5,216(sp)
 4021f40:	d8802504 	addi	r2,sp,148
 4021f44:	d9002d17 	ldw	r4,180(sp)
 4021f48:	d8800215 	stw	r2,8(sp)
 4021f4c:	d8802604 	addi	r2,sp,152
 4021f50:	d8c00015 	stw	r3,0(sp)
 4021f54:	d8800115 	stw	r2,4(sp)
 4021f58:	01c00084 	movi	r7,2
 4021f5c:	980d883a 	mov	r6,r19
 4021f60:	d8c03c15 	stw	r3,240(sp)
 4021f64:	da003d15 	stw	r8,244(sp)
 4021f68:	4022eb00 	call	4022eb0 <_dtoa_r>
 4021f6c:	1021883a 	mov	r16,r2
 4021f70:	008019c4 	movi	r2,103
 4021f74:	d8c03c17 	ldw	r3,240(sp)
 4021f78:	da003d17 	ldw	r8,244(sp)
 4021f7c:	88817126 	beq	r17,r2,4022544 <___vfprintf_internal_r+0x1dc4>
 4021f80:	008011c4 	movi	r2,71
 4021f84:	88829126 	beq	r17,r2,40229cc <___vfprintf_internal_r+0x224c>
 4021f88:	80f9883a 	add	fp,r16,r3
 4021f8c:	d9003617 	ldw	r4,216(sp)
 4021f90:	000d883a 	mov	r6,zero
 4021f94:	000f883a 	mov	r7,zero
 4021f98:	980b883a 	mov	r5,r19
 4021f9c:	da003d15 	stw	r8,244(sp)
 4021fa0:	402bec00 	call	402bec0 <__eqdf2>
 4021fa4:	da003d17 	ldw	r8,244(sp)
 4021fa8:	10018d26 	beq	r2,zero,40225e0 <___vfprintf_internal_r+0x1e60>
 4021fac:	d8802117 	ldw	r2,132(sp)
 4021fb0:	1700062e 	bgeu	r2,fp,4021fcc <___vfprintf_internal_r+0x184c>
 4021fb4:	01000c04 	movi	r4,48
 4021fb8:	10c00044 	addi	r3,r2,1
 4021fbc:	d8c02115 	stw	r3,132(sp)
 4021fc0:	11000005 	stb	r4,0(r2)
 4021fc4:	d8802117 	ldw	r2,132(sp)
 4021fc8:	173ffb36 	bltu	r2,fp,4021fb8 <__flash_rwdata_start+0xfffec768>
 4021fcc:	1405c83a 	sub	r2,r2,r16
 4021fd0:	d8803315 	stw	r2,204(sp)
 4021fd4:	008011c4 	movi	r2,71
 4021fd8:	b0817626 	beq	r22,r2,40225b4 <___vfprintf_internal_r+0x1e34>
 4021fdc:	00801944 	movi	r2,101
 4021fe0:	1442800e 	bge	r2,r17,40229e4 <___vfprintf_internal_r+0x2264>
 4021fe4:	d8c02617 	ldw	r3,152(sp)
 4021fe8:	00801984 	movi	r2,102
 4021fec:	d8c03215 	stw	r3,200(sp)
 4021ff0:	8881fe26 	beq	r17,r2,40227ec <___vfprintf_internal_r+0x206c>
 4021ff4:	d8c03217 	ldw	r3,200(sp)
 4021ff8:	d9003317 	ldw	r4,204(sp)
 4021ffc:	1901dd16 	blt	r3,r4,4022774 <___vfprintf_internal_r+0x1ff4>
 4022000:	9480004c 	andi	r18,r18,1
 4022004:	90022b1e 	bne	r18,zero,40228b4 <___vfprintf_internal_r+0x2134>
 4022008:	1805883a 	mov	r2,r3
 402200c:	18028316 	blt	r3,zero,4022a1c <___vfprintf_internal_r+0x229c>
 4022010:	d8c03217 	ldw	r3,200(sp)
 4022014:	044019c4 	movi	r17,103
 4022018:	d8c02b15 	stw	r3,172(sp)
 402201c:	df002907 	ldb	fp,164(sp)
 4022020:	e001531e 	bne	fp,zero,4022570 <___vfprintf_internal_r+0x1df0>
 4022024:	df002783 	ldbu	fp,158(sp)
 4022028:	d8802915 	stw	r2,164(sp)
 402202c:	dc802c17 	ldw	r18,176(sp)
 4022030:	d8002a15 	stw	zero,168(sp)
 4022034:	003baf06 	br	4020ef4 <__flash_rwdata_start+0xfffeb6a4>
 4022038:	d8c02e17 	ldw	r3,184(sp)
 402203c:	d9002e17 	ldw	r4,184(sp)
 4022040:	d9402e17 	ldw	r5,184(sp)
 4022044:	18c00017 	ldw	r3,0(r3)
 4022048:	21000117 	ldw	r4,4(r4)
 402204c:	29400204 	addi	r5,r5,8
 4022050:	d8c03615 	stw	r3,216(sp)
 4022054:	d9003815 	stw	r4,224(sp)
 4022058:	d9402e15 	stw	r5,184(sp)
 402205c:	003b5006 	br	4020da0 <__flash_rwdata_start+0xfffeb550>
 4022060:	ac400007 	ldb	r17,0(r21)
 4022064:	003a2806 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4022068:	9080100c 	andi	r2,r18,64
 402206c:	1000a826 	beq	r2,zero,4022310 <___vfprintf_internal_r+0x1b90>
 4022070:	d8c02e17 	ldw	r3,184(sp)
 4022074:	002d883a 	mov	r22,zero
 4022078:	1cc0000b 	ldhu	r19,0(r3)
 402207c:	18c00104 	addi	r3,r3,4
 4022080:	d8c02e15 	stw	r3,184(sp)
 4022084:	003caf06 	br	4021344 <__flash_rwdata_start+0xfffebaf4>
 4022088:	d9002e17 	ldw	r4,184(sp)
 402208c:	d9402a17 	ldw	r5,168(sp)
 4022090:	002d883a 	mov	r22,zero
 4022094:	20800104 	addi	r2,r4,4
 4022098:	24c00017 	ldw	r19,0(r4)
 402209c:	283ebb0e 	bge	r5,zero,4021b8c <__flash_rwdata_start+0xfffec33c>
 40220a0:	003ef106 	br	4021c68 <__flash_rwdata_start+0xfffec418>
 40220a4:	9080040c 	andi	r2,r18,16
 40220a8:	1000921e 	bne	r2,zero,40222f4 <___vfprintf_internal_r+0x1b74>
 40220ac:	9480100c 	andi	r18,r18,64
 40220b0:	90013926 	beq	r18,zero,4022598 <___vfprintf_internal_r+0x1e18>
 40220b4:	d9402e17 	ldw	r5,184(sp)
 40220b8:	d8c02f17 	ldw	r3,188(sp)
 40220bc:	28800017 	ldw	r2,0(r5)
 40220c0:	29400104 	addi	r5,r5,4
 40220c4:	d9402e15 	stw	r5,184(sp)
 40220c8:	10c0000d 	sth	r3,0(r2)
 40220cc:	0039e406 	br	4020860 <__flash_rwdata_start+0xfffeb010>
 40220d0:	9080100c 	andi	r2,r18,64
 40220d4:	10008026 	beq	r2,zero,40222d8 <___vfprintf_internal_r+0x1b58>
 40220d8:	d8802e17 	ldw	r2,184(sp)
 40220dc:	14c0000f 	ldh	r19,0(r2)
 40220e0:	10800104 	addi	r2,r2,4
 40220e4:	d8802e15 	stw	r2,184(sp)
 40220e8:	982dd7fa 	srai	r22,r19,31
 40220ec:	b005883a 	mov	r2,r22
 40220f0:	003af706 	br	4020cd0 <__flash_rwdata_start+0xfffeb480>
 40220f4:	9080100c 	andi	r2,r18,64
 40220f8:	d8002785 	stb	zero,158(sp)
 40220fc:	10008a1e 	bne	r2,zero,4022328 <___vfprintf_internal_r+0x1ba8>
 4022100:	d9002e17 	ldw	r4,184(sp)
 4022104:	d9402a17 	ldw	r5,168(sp)
 4022108:	002d883a 	mov	r22,zero
 402210c:	20800104 	addi	r2,r4,4
 4022110:	24c00017 	ldw	r19,0(r4)
 4022114:	283e4b0e 	bge	r5,zero,4021a44 <__flash_rwdata_start+0xfffec1f4>
 4022118:	9d86b03a 	or	r3,r19,r22
 402211c:	d8802e15 	stw	r2,184(sp)
 4022120:	183e4c1e 	bne	r3,zero,4021a54 <__flash_rwdata_start+0xfffec204>
 4022124:	0039883a 	mov	fp,zero
 4022128:	0005883a 	mov	r2,zero
 402212c:	003d4006 	br	4021630 <__flash_rwdata_start+0xfffebde0>
 4022130:	01400034 	movhi	r5,0
 4022134:	29408e84 	addi	r5,r5,570
 4022138:	d9402c15 	stw	r5,176(sp)
 402213c:	d9402c17 	ldw	r5,176(sp)
 4022140:	1c47883a 	add	r3,r3,r17
 4022144:	10800044 	addi	r2,r2,1
 4022148:	41400015 	stw	r5,0(r8)
 402214c:	44400115 	stw	r17,4(r8)
 4022150:	d8c02015 	stw	r3,128(sp)
 4022154:	d8801f15 	stw	r2,124(sp)
 4022158:	010001c4 	movi	r4,7
 402215c:	20bec816 	blt	r4,r2,4021c80 <__flash_rwdata_start+0xfffec430>
 4022160:	42000204 	addi	r8,r8,8
 4022164:	003ecd06 	br	4021c9c <__flash_rwdata_start+0xfffec44c>
 4022168:	d9002a17 	ldw	r4,168(sp)
 402216c:	d8002785 	stb	zero,158(sp)
 4022170:	203d2d16 	blt	r4,zero,4021628 <__flash_rwdata_start+0xfffebdd8>
 4022174:	00bfdfc4 	movi	r2,-129
 4022178:	90a4703a 	and	r18,r18,r2
 402217c:	003a6106 	br	4020b04 <__flash_rwdata_start+0xfffeb2b4>
 4022180:	01000034 	movhi	r4,0
 4022184:	21008e84 	addi	r4,r4,570
 4022188:	d9002c15 	stw	r4,176(sp)
 402218c:	003bea06 	br	4021138 <__flash_rwdata_start+0xfffeb8e8>
 4022190:	d9002d17 	ldw	r4,180(sp)
 4022194:	d9801e04 	addi	r6,sp,120
 4022198:	b80b883a 	mov	r5,r23
 402219c:	4027f600 	call	4027f60 <__sprint_r>
 40221a0:	103a7b1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40221a4:	d8c02017 	ldw	r3,128(sp)
 40221a8:	da000404 	addi	r8,sp,16
 40221ac:	003d4106 	br	40216b4 <__flash_rwdata_start+0xfffebe64>
 40221b0:	d8801f17 	ldw	r2,124(sp)
 40221b4:	01400034 	movhi	r5,0
 40221b8:	01000044 	movi	r4,1
 40221bc:	18c00044 	addi	r3,r3,1
 40221c0:	10800044 	addi	r2,r2,1
 40221c4:	29408e04 	addi	r5,r5,568
 40221c8:	41000115 	stw	r4,4(r8)
 40221cc:	41400015 	stw	r5,0(r8)
 40221d0:	d8c02015 	stw	r3,128(sp)
 40221d4:	d8801f15 	stw	r2,124(sp)
 40221d8:	010001c4 	movi	r4,7
 40221dc:	20805c16 	blt	r4,r2,4022350 <___vfprintf_internal_r+0x1bd0>
 40221e0:	42000204 	addi	r8,r8,8
 40221e4:	8800041e 	bne	r17,zero,40221f8 <___vfprintf_internal_r+0x1a78>
 40221e8:	d8803317 	ldw	r2,204(sp)
 40221ec:	1000021e 	bne	r2,zero,40221f8 <___vfprintf_internal_r+0x1a78>
 40221f0:	9080004c 	andi	r2,r18,1
 40221f4:	103be726 	beq	r2,zero,4021194 <__flash_rwdata_start+0xfffeb944>
 40221f8:	d9003717 	ldw	r4,220(sp)
 40221fc:	d8801f17 	ldw	r2,124(sp)
 4022200:	d9403417 	ldw	r5,208(sp)
 4022204:	20c7883a 	add	r3,r4,r3
 4022208:	10800044 	addi	r2,r2,1
 402220c:	41000115 	stw	r4,4(r8)
 4022210:	41400015 	stw	r5,0(r8)
 4022214:	d8c02015 	stw	r3,128(sp)
 4022218:	d8801f15 	stw	r2,124(sp)
 402221c:	010001c4 	movi	r4,7
 4022220:	20812116 	blt	r4,r2,40226a8 <___vfprintf_internal_r+0x1f28>
 4022224:	42000204 	addi	r8,r8,8
 4022228:	0463c83a 	sub	r17,zero,r17
 402222c:	0440730e 	bge	zero,r17,40223fc <___vfprintf_internal_r+0x1c7c>
 4022230:	05800404 	movi	r22,16
 4022234:	b440860e 	bge	r22,r17,4022450 <___vfprintf_internal_r+0x1cd0>
 4022238:	01400034 	movhi	r5,0
 402223c:	29408e84 	addi	r5,r5,570
 4022240:	d9402c15 	stw	r5,176(sp)
 4022244:	070001c4 	movi	fp,7
 4022248:	dcc02d17 	ldw	r19,180(sp)
 402224c:	00000306 	br	402225c <___vfprintf_internal_r+0x1adc>
 4022250:	42000204 	addi	r8,r8,8
 4022254:	8c7ffc04 	addi	r17,r17,-16
 4022258:	b440800e 	bge	r22,r17,402245c <___vfprintf_internal_r+0x1cdc>
 402225c:	18c00404 	addi	r3,r3,16
 4022260:	10800044 	addi	r2,r2,1
 4022264:	45000015 	stw	r20,0(r8)
 4022268:	45800115 	stw	r22,4(r8)
 402226c:	d8c02015 	stw	r3,128(sp)
 4022270:	d8801f15 	stw	r2,124(sp)
 4022274:	e0bff60e 	bge	fp,r2,4022250 <__flash_rwdata_start+0xfffeca00>
 4022278:	d9801e04 	addi	r6,sp,120
 402227c:	b80b883a 	mov	r5,r23
 4022280:	9809883a 	mov	r4,r19
 4022284:	4027f600 	call	4027f60 <__sprint_r>
 4022288:	103a411e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 402228c:	d8c02017 	ldw	r3,128(sp)
 4022290:	d8801f17 	ldw	r2,124(sp)
 4022294:	da000404 	addi	r8,sp,16
 4022298:	003fee06 	br	4022254 <__flash_rwdata_start+0xfffeca04>
 402229c:	00bfffc4 	movi	r2,-1
 40222a0:	003a3f06 	br	4020ba0 <__flash_rwdata_start+0xfffeb350>
 40222a4:	008011c4 	movi	r2,71
 40222a8:	1440b816 	blt	r2,r17,402258c <___vfprintf_internal_r+0x1e0c>
 40222ac:	04000034 	movhi	r16,0
 40222b0:	84008004 	addi	r16,r16,512
 40222b4:	00c000c4 	movi	r3,3
 40222b8:	00bfdfc4 	movi	r2,-129
 40222bc:	d8c02915 	stw	r3,164(sp)
 40222c0:	90a4703a 	and	r18,r18,r2
 40222c4:	df002783 	ldbu	fp,158(sp)
 40222c8:	d8c02b15 	stw	r3,172(sp)
 40222cc:	d8002a15 	stw	zero,168(sp)
 40222d0:	d8003215 	stw	zero,200(sp)
 40222d4:	003b0706 	br	4020ef4 <__flash_rwdata_start+0xfffeb6a4>
 40222d8:	d8c02e17 	ldw	r3,184(sp)
 40222dc:	1cc00017 	ldw	r19,0(r3)
 40222e0:	18c00104 	addi	r3,r3,4
 40222e4:	d8c02e15 	stw	r3,184(sp)
 40222e8:	982dd7fa 	srai	r22,r19,31
 40222ec:	b005883a 	mov	r2,r22
 40222f0:	003a7706 	br	4020cd0 <__flash_rwdata_start+0xfffeb480>
 40222f4:	d8c02e17 	ldw	r3,184(sp)
 40222f8:	d9002f17 	ldw	r4,188(sp)
 40222fc:	18800017 	ldw	r2,0(r3)
 4022300:	18c00104 	addi	r3,r3,4
 4022304:	d8c02e15 	stw	r3,184(sp)
 4022308:	11000015 	stw	r4,0(r2)
 402230c:	00395406 	br	4020860 <__flash_rwdata_start+0xfffeb010>
 4022310:	d9002e17 	ldw	r4,184(sp)
 4022314:	002d883a 	mov	r22,zero
 4022318:	24c00017 	ldw	r19,0(r4)
 402231c:	21000104 	addi	r4,r4,4
 4022320:	d9002e15 	stw	r4,184(sp)
 4022324:	003c0706 	br	4021344 <__flash_rwdata_start+0xfffebaf4>
 4022328:	d9402e17 	ldw	r5,184(sp)
 402232c:	d8c02a17 	ldw	r3,168(sp)
 4022330:	002d883a 	mov	r22,zero
 4022334:	28800104 	addi	r2,r5,4
 4022338:	2cc0000b 	ldhu	r19,0(r5)
 402233c:	183dc10e 	bge	r3,zero,4021a44 <__flash_rwdata_start+0xfffec1f4>
 4022340:	003f7506 	br	4022118 <__flash_rwdata_start+0xfffec8c8>
 4022344:	04000034 	movhi	r16,0
 4022348:	84007e04 	addi	r16,r16,504
 402234c:	003aa706 	br	4020dec <__flash_rwdata_start+0xfffeb59c>
 4022350:	d9002d17 	ldw	r4,180(sp)
 4022354:	d9801e04 	addi	r6,sp,120
 4022358:	b80b883a 	mov	r5,r23
 402235c:	4027f600 	call	4027f60 <__sprint_r>
 4022360:	103a0b1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4022364:	dc402617 	ldw	r17,152(sp)
 4022368:	d8c02017 	ldw	r3,128(sp)
 402236c:	da000404 	addi	r8,sp,16
 4022370:	003f9c06 	br	40221e4 <__flash_rwdata_start+0xfffec994>
 4022374:	ac400043 	ldbu	r17,1(r21)
 4022378:	84000814 	ori	r16,r16,32
 402237c:	ad400044 	addi	r21,r21,1
 4022380:	8c403fcc 	andi	r17,r17,255
 4022384:	8c40201c 	xori	r17,r17,128
 4022388:	8c7fe004 	addi	r17,r17,-128
 402238c:	00395e06 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 4022390:	d8c02e15 	stw	r3,184(sp)
 4022394:	0039883a 	mov	fp,zero
 4022398:	003e3506 	br	4021c70 <__flash_rwdata_start+0xfffec420>
 402239c:	d9002d17 	ldw	r4,180(sp)
 40223a0:	d9801e04 	addi	r6,sp,120
 40223a4:	b80b883a 	mov	r5,r23
 40223a8:	4027f600 	call	4027f60 <__sprint_r>
 40223ac:	1039f81e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40223b0:	d8c02017 	ldw	r3,128(sp)
 40223b4:	da000404 	addi	r8,sp,16
 40223b8:	003cd006 	br	40216fc <__flash_rwdata_start+0xfffebeac>
 40223bc:	8009883a 	mov	r4,r16
 40223c0:	df003d15 	stw	fp,244(sp)
 40223c4:	40206e80 	call	40206e8 <strlen>
 40223c8:	d8802b15 	stw	r2,172(sp)
 40223cc:	da003d17 	ldw	r8,244(sp)
 40223d0:	103c200e 	bge	r2,zero,4021454 <__flash_rwdata_start+0xfffebc04>
 40223d4:	0005883a 	mov	r2,zero
 40223d8:	003c1e06 	br	4021454 <__flash_rwdata_start+0xfffebc04>
 40223dc:	d9002d17 	ldw	r4,180(sp)
 40223e0:	d9801e04 	addi	r6,sp,120
 40223e4:	b80b883a 	mov	r5,r23
 40223e8:	4027f600 	call	4027f60 <__sprint_r>
 40223ec:	1039e81e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40223f0:	d8c02017 	ldw	r3,128(sp)
 40223f4:	d8801f17 	ldw	r2,124(sp)
 40223f8:	da000404 	addi	r8,sp,16
 40223fc:	d9403317 	ldw	r5,204(sp)
 4022400:	10800044 	addi	r2,r2,1
 4022404:	44000015 	stw	r16,0(r8)
 4022408:	28c7883a 	add	r3,r5,r3
 402240c:	003b5b06 	br	402117c <__flash_rwdata_start+0xfffeb92c>
 4022410:	01000034 	movhi	r4,0
 4022414:	21009284 	addi	r4,r4,586
 4022418:	d9003515 	stw	r4,212(sp)
 402241c:	003af206 	br	4020fe8 <__flash_rwdata_start+0xfffeb798>
 4022420:	013fffc4 	movi	r4,-1
 4022424:	003a0806 	br	4020c48 <__flash_rwdata_start+0xfffeb3f8>
 4022428:	0023883a 	mov	r17,zero
 402242c:	003d9d06 	br	4021aa4 <__flash_rwdata_start+0xfffec254>
 4022430:	d9002d17 	ldw	r4,180(sp)
 4022434:	d9801e04 	addi	r6,sp,120
 4022438:	b80b883a 	mov	r5,r23
 402243c:	4027f600 	call	4027f60 <__sprint_r>
 4022440:	1039d31e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 4022444:	d8c02017 	ldw	r3,128(sp)
 4022448:	da000404 	addi	r8,sp,16
 402244c:	003d9406 	br	4021aa0 <__flash_rwdata_start+0xfffec250>
 4022450:	01000034 	movhi	r4,0
 4022454:	21008e84 	addi	r4,r4,570
 4022458:	d9002c15 	stw	r4,176(sp)
 402245c:	d9002c17 	ldw	r4,176(sp)
 4022460:	1c47883a 	add	r3,r3,r17
 4022464:	10800044 	addi	r2,r2,1
 4022468:	41000015 	stw	r4,0(r8)
 402246c:	44400115 	stw	r17,4(r8)
 4022470:	d8c02015 	stw	r3,128(sp)
 4022474:	d8801f15 	stw	r2,124(sp)
 4022478:	010001c4 	movi	r4,7
 402247c:	20bfd716 	blt	r4,r2,40223dc <__flash_rwdata_start+0xfffecb8c>
 4022480:	42000204 	addi	r8,r8,8
 4022484:	003fdd06 	br	40223fc <__flash_rwdata_start+0xfffecbac>
 4022488:	d9002d17 	ldw	r4,180(sp)
 402248c:	d9801e04 	addi	r6,sp,120
 4022490:	b80b883a 	mov	r5,r23
 4022494:	4027f600 	call	4027f60 <__sprint_r>
 4022498:	1039bd1e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 402249c:	d8802617 	ldw	r2,152(sp)
 40224a0:	d8c02017 	ldw	r3,128(sp)
 40224a4:	da000404 	addi	r8,sp,16
 40224a8:	003e1006 	br	4021cec <__flash_rwdata_start+0xfffec49c>
 40224ac:	00800044 	movi	r2,1
 40224b0:	10803fcc 	andi	r2,r2,255
 40224b4:	00c00044 	movi	r3,1
 40224b8:	10fa0d26 	beq	r2,r3,4020cf0 <__flash_rwdata_start+0xfffeb4a0>
 40224bc:	00c00084 	movi	r3,2
 40224c0:	10fbaf26 	beq	r2,r3,4021380 <__flash_rwdata_start+0xfffebb30>
 40224c4:	003a6d06 	br	4020e7c <__flash_rwdata_start+0xfffeb62c>
 40224c8:	01000034 	movhi	r4,0
 40224cc:	21009284 	addi	r4,r4,586
 40224d0:	d9003515 	stw	r4,212(sp)
 40224d4:	003b5406 	br	4021228 <__flash_rwdata_start+0xfffeb9d8>
 40224d8:	d8802a17 	ldw	r2,168(sp)
 40224dc:	00c00184 	movi	r3,6
 40224e0:	1880012e 	bgeu	r3,r2,40224e8 <___vfprintf_internal_r+0x1d68>
 40224e4:	1805883a 	mov	r2,r3
 40224e8:	d8802b15 	stw	r2,172(sp)
 40224ec:	1000ef16 	blt	r2,zero,40228ac <___vfprintf_internal_r+0x212c>
 40224f0:	04000034 	movhi	r16,0
 40224f4:	d8802915 	stw	r2,164(sp)
 40224f8:	dcc02e15 	stw	r19,184(sp)
 40224fc:	d8002a15 	stw	zero,168(sp)
 4022500:	d8003215 	stw	zero,200(sp)
 4022504:	84008c04 	addi	r16,r16,560
 4022508:	0039883a 	mov	fp,zero
 402250c:	003a8006 	br	4020f10 <__flash_rwdata_start+0xfffeb6c0>
 4022510:	0021883a 	mov	r16,zero
 4022514:	003e0706 	br	4021d34 <__flash_rwdata_start+0xfffec4e4>
 4022518:	d9002d17 	ldw	r4,180(sp)
 402251c:	d9801e04 	addi	r6,sp,120
 4022520:	b80b883a 	mov	r5,r23
 4022524:	4027f600 	call	4027f60 <__sprint_r>
 4022528:	1039991e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 402252c:	d8802617 	ldw	r2,152(sp)
 4022530:	d9403317 	ldw	r5,204(sp)
 4022534:	d8c02017 	ldw	r3,128(sp)
 4022538:	da000404 	addi	r8,sp,16
 402253c:	2885c83a 	sub	r2,r5,r2
 4022540:	003dfb06 	br	4021d30 <__flash_rwdata_start+0xfffec4e0>
 4022544:	9080004c 	andi	r2,r18,1
 4022548:	103e8f1e 	bne	r2,zero,4021f88 <__flash_rwdata_start+0xfffec738>
 402254c:	d8802117 	ldw	r2,132(sp)
 4022550:	003e9e06 	br	4021fcc <__flash_rwdata_start+0xfffec77c>
 4022554:	1025883a 	mov	r18,r2
 4022558:	0039883a 	mov	fp,zero
 402255c:	00800084 	movi	r2,2
 4022560:	003fd306 	br	40224b0 <__flash_rwdata_start+0xfffecc60>
 4022564:	07000b44 	movi	fp,45
 4022568:	df002785 	stb	fp,158(sp)
 402256c:	003a1b06 	br	4020ddc <__flash_rwdata_start+0xfffeb58c>
 4022570:	00c00b44 	movi	r3,45
 4022574:	d8c02785 	stb	r3,158(sp)
 4022578:	d8802915 	stw	r2,164(sp)
 402257c:	dc802c17 	ldw	r18,176(sp)
 4022580:	d8002a15 	stw	zero,168(sp)
 4022584:	07000b44 	movi	fp,45
 4022588:	003a5e06 	br	4020f04 <__flash_rwdata_start+0xfffeb6b4>
 402258c:	04000034 	movhi	r16,0
 4022590:	84008104 	addi	r16,r16,516
 4022594:	003f4706 	br	40222b4 <__flash_rwdata_start+0xfffeca64>
 4022598:	d9002e17 	ldw	r4,184(sp)
 402259c:	d9402f17 	ldw	r5,188(sp)
 40225a0:	20800017 	ldw	r2,0(r4)
 40225a4:	21000104 	addi	r4,r4,4
 40225a8:	d9002e15 	stw	r4,184(sp)
 40225ac:	11400015 	stw	r5,0(r2)
 40225b0:	0038ab06 	br	4020860 <__flash_rwdata_start+0xfffeb010>
 40225b4:	dd802617 	ldw	r22,152(sp)
 40225b8:	00bfff44 	movi	r2,-3
 40225bc:	b0801c16 	blt	r22,r2,4022630 <___vfprintf_internal_r+0x1eb0>
 40225c0:	d9402a17 	ldw	r5,168(sp)
 40225c4:	2d801a16 	blt	r5,r22,4022630 <___vfprintf_internal_r+0x1eb0>
 40225c8:	dd803215 	stw	r22,200(sp)
 40225cc:	003e8906 	br	4021ff4 <__flash_rwdata_start+0xfffec7a4>
 40225d0:	01000034 	movhi	r4,0
 40225d4:	21008e84 	addi	r4,r4,570
 40225d8:	d9002c15 	stw	r4,176(sp)
 40225dc:	003c9106 	br	4021824 <__flash_rwdata_start+0xfffebfd4>
 40225e0:	e005883a 	mov	r2,fp
 40225e4:	003e7906 	br	4021fcc <__flash_rwdata_start+0xfffec77c>
 40225e8:	d9002a17 	ldw	r4,168(sp)
 40225ec:	df002783 	ldbu	fp,158(sp)
 40225f0:	dcc02e15 	stw	r19,184(sp)
 40225f4:	d9002915 	stw	r4,164(sp)
 40225f8:	d9002b15 	stw	r4,172(sp)
 40225fc:	d8002a15 	stw	zero,168(sp)
 4022600:	d8003215 	stw	zero,200(sp)
 4022604:	003a3b06 	br	4020ef4 <__flash_rwdata_start+0xfffeb6a4>
 4022608:	9080004c 	andi	r2,r18,1
 402260c:	0039883a 	mov	fp,zero
 4022610:	10000426 	beq	r2,zero,4022624 <___vfprintf_internal_r+0x1ea4>
 4022614:	00800c04 	movi	r2,48
 4022618:	dc001dc4 	addi	r16,sp,119
 402261c:	d8801dc5 	stb	r2,119(sp)
 4022620:	003b6406 	br	40213b4 <__flash_rwdata_start+0xfffebb64>
 4022624:	d8002b15 	stw	zero,172(sp)
 4022628:	dc001e04 	addi	r16,sp,120
 402262c:	003a2b06 	br	4020edc <__flash_rwdata_start+0xfffeb68c>
 4022630:	8c7fff84 	addi	r17,r17,-2
 4022634:	b5bfffc4 	addi	r22,r22,-1
 4022638:	dd802615 	stw	r22,152(sp)
 402263c:	dc4022c5 	stb	r17,139(sp)
 4022640:	b000bf16 	blt	r22,zero,4022940 <___vfprintf_internal_r+0x21c0>
 4022644:	00800ac4 	movi	r2,43
 4022648:	d8802305 	stb	r2,140(sp)
 402264c:	00800244 	movi	r2,9
 4022650:	15807016 	blt	r2,r22,4022814 <___vfprintf_internal_r+0x2094>
 4022654:	00800c04 	movi	r2,48
 4022658:	b5800c04 	addi	r22,r22,48
 402265c:	d8802345 	stb	r2,141(sp)
 4022660:	dd802385 	stb	r22,142(sp)
 4022664:	d88023c4 	addi	r2,sp,143
 4022668:	df0022c4 	addi	fp,sp,139
 402266c:	d8c03317 	ldw	r3,204(sp)
 4022670:	1739c83a 	sub	fp,r2,fp
 4022674:	d9003317 	ldw	r4,204(sp)
 4022678:	e0c7883a 	add	r3,fp,r3
 402267c:	df003a15 	stw	fp,232(sp)
 4022680:	d8c02b15 	stw	r3,172(sp)
 4022684:	00800044 	movi	r2,1
 4022688:	1100b30e 	bge	r2,r4,4022958 <___vfprintf_internal_r+0x21d8>
 402268c:	d8c02b17 	ldw	r3,172(sp)
 4022690:	18c00044 	addi	r3,r3,1
 4022694:	d8c02b15 	stw	r3,172(sp)
 4022698:	1805883a 	mov	r2,r3
 402269c:	1800ac16 	blt	r3,zero,4022950 <___vfprintf_internal_r+0x21d0>
 40226a0:	d8003215 	stw	zero,200(sp)
 40226a4:	003e5d06 	br	402201c <__flash_rwdata_start+0xfffec7cc>
 40226a8:	d9002d17 	ldw	r4,180(sp)
 40226ac:	d9801e04 	addi	r6,sp,120
 40226b0:	b80b883a 	mov	r5,r23
 40226b4:	4027f600 	call	4027f60 <__sprint_r>
 40226b8:	1039351e 	bne	r2,zero,4020b90 <__flash_rwdata_start+0xfffeb340>
 40226bc:	dc402617 	ldw	r17,152(sp)
 40226c0:	d8c02017 	ldw	r3,128(sp)
 40226c4:	d8801f17 	ldw	r2,124(sp)
 40226c8:	da000404 	addi	r8,sp,16
 40226cc:	003ed606 	br	4022228 <__flash_rwdata_start+0xfffec9d8>
 40226d0:	182b883a 	mov	r21,r3
 40226d4:	d8002a15 	stw	zero,168(sp)
 40226d8:	00388c06 	br	402090c <__flash_rwdata_start+0xfffeb0bc>
 40226dc:	d8802a17 	ldw	r2,168(sp)
 40226e0:	103e071e 	bne	r2,zero,4021f00 <__flash_rwdata_start+0xfffec6b0>
 40226e4:	dc002a15 	stw	r16,168(sp)
 40226e8:	003e0506 	br	4021f00 <__flash_rwdata_start+0xfffec6b0>
 40226ec:	d9002a17 	ldw	r4,168(sp)
 40226f0:	20c00044 	addi	r3,r4,1
 40226f4:	003e0f06 	br	4021f34 <__flash_rwdata_start+0xfffec6e4>
 40226f8:	01400184 	movi	r5,6
 40226fc:	d9402a15 	stw	r5,168(sp)
 4022700:	003dff06 	br	4021f00 <__flash_rwdata_start+0xfffec6b0>
 4022704:	d8802104 	addi	r2,sp,132
 4022708:	d8800315 	stw	r2,12(sp)
 402270c:	d8802504 	addi	r2,sp,148
 4022710:	d8800215 	stw	r2,8(sp)
 4022714:	d8802604 	addi	r2,sp,152
 4022718:	d8800115 	stw	r2,4(sp)
 402271c:	d8802a17 	ldw	r2,168(sp)
 4022720:	d9403617 	ldw	r5,216(sp)
 4022724:	d9002d17 	ldw	r4,180(sp)
 4022728:	d8800015 	stw	r2,0(sp)
 402272c:	01c000c4 	movi	r7,3
 4022730:	980d883a 	mov	r6,r19
 4022734:	da003d15 	stw	r8,244(sp)
 4022738:	4022eb00 	call	4022eb0 <_dtoa_r>
 402273c:	d8c02a17 	ldw	r3,168(sp)
 4022740:	da003d17 	ldw	r8,244(sp)
 4022744:	1021883a 	mov	r16,r2
 4022748:	10f9883a 	add	fp,r2,r3
 402274c:	81000007 	ldb	r4,0(r16)
 4022750:	00800c04 	movi	r2,48
 4022754:	20805e26 	beq	r4,r2,40228d0 <___vfprintf_internal_r+0x2150>
 4022758:	d8c02617 	ldw	r3,152(sp)
 402275c:	e0f9883a 	add	fp,fp,r3
 4022760:	003e0a06 	br	4021f8c <__flash_rwdata_start+0xfffec73c>
 4022764:	00c00b44 	movi	r3,45
 4022768:	24e0003c 	xorhi	r19,r4,32768
 402276c:	d8c02905 	stb	r3,164(sp)
 4022770:	003de906 	br	4021f18 <__flash_rwdata_start+0xfffec6c8>
 4022774:	d8c03217 	ldw	r3,200(sp)
 4022778:	00c07a0e 	bge	zero,r3,4022964 <___vfprintf_internal_r+0x21e4>
 402277c:	00800044 	movi	r2,1
 4022780:	d9003317 	ldw	r4,204(sp)
 4022784:	1105883a 	add	r2,r2,r4
 4022788:	d8802b15 	stw	r2,172(sp)
 402278c:	10004e16 	blt	r2,zero,40228c8 <___vfprintf_internal_r+0x2148>
 4022790:	044019c4 	movi	r17,103
 4022794:	003e2106 	br	402201c <__flash_rwdata_start+0xfffec7cc>
 4022798:	d9002a17 	ldw	r4,168(sp)
 402279c:	d8802104 	addi	r2,sp,132
 40227a0:	d8800315 	stw	r2,12(sp)
 40227a4:	d9000015 	stw	r4,0(sp)
 40227a8:	d8802504 	addi	r2,sp,148
 40227ac:	d9403617 	ldw	r5,216(sp)
 40227b0:	d9002d17 	ldw	r4,180(sp)
 40227b4:	d8800215 	stw	r2,8(sp)
 40227b8:	d8802604 	addi	r2,sp,152
 40227bc:	d8800115 	stw	r2,4(sp)
 40227c0:	01c000c4 	movi	r7,3
 40227c4:	980d883a 	mov	r6,r19
 40227c8:	da003d15 	stw	r8,244(sp)
 40227cc:	4022eb00 	call	4022eb0 <_dtoa_r>
 40227d0:	d8c02a17 	ldw	r3,168(sp)
 40227d4:	da003d17 	ldw	r8,244(sp)
 40227d8:	1021883a 	mov	r16,r2
 40227dc:	00801184 	movi	r2,70
 40227e0:	80f9883a 	add	fp,r16,r3
 40227e4:	88bfd926 	beq	r17,r2,402274c <__flash_rwdata_start+0xfffecefc>
 40227e8:	003de806 	br	4021f8c <__flash_rwdata_start+0xfffec73c>
 40227ec:	d9002a17 	ldw	r4,168(sp)
 40227f0:	00c04d0e 	bge	zero,r3,4022928 <___vfprintf_internal_r+0x21a8>
 40227f4:	2000441e 	bne	r4,zero,4022908 <___vfprintf_internal_r+0x2188>
 40227f8:	9480004c 	andi	r18,r18,1
 40227fc:	9000421e 	bne	r18,zero,4022908 <___vfprintf_internal_r+0x2188>
 4022800:	1805883a 	mov	r2,r3
 4022804:	18006f16 	blt	r3,zero,40229c4 <___vfprintf_internal_r+0x2244>
 4022808:	d8c03217 	ldw	r3,200(sp)
 402280c:	d8c02b15 	stw	r3,172(sp)
 4022810:	003e0206 	br	402201c <__flash_rwdata_start+0xfffec7cc>
 4022814:	df0022c4 	addi	fp,sp,139
 4022818:	dc002a15 	stw	r16,168(sp)
 402281c:	4027883a 	mov	r19,r8
 4022820:	e021883a 	mov	r16,fp
 4022824:	b009883a 	mov	r4,r22
 4022828:	01400284 	movi	r5,10
 402282c:	402aaec0 	call	402aaec <__modsi3>
 4022830:	10800c04 	addi	r2,r2,48
 4022834:	843fffc4 	addi	r16,r16,-1
 4022838:	b009883a 	mov	r4,r22
 402283c:	01400284 	movi	r5,10
 4022840:	80800005 	stb	r2,0(r16)
 4022844:	402aa680 	call	402aa68 <__divsi3>
 4022848:	102d883a 	mov	r22,r2
 402284c:	00800244 	movi	r2,9
 4022850:	15bff416 	blt	r2,r22,4022824 <__flash_rwdata_start+0xfffecfd4>
 4022854:	9811883a 	mov	r8,r19
 4022858:	b0800c04 	addi	r2,r22,48
 402285c:	8027883a 	mov	r19,r16
 4022860:	997fffc4 	addi	r5,r19,-1
 4022864:	98bfffc5 	stb	r2,-1(r19)
 4022868:	dc002a17 	ldw	r16,168(sp)
 402286c:	2f006d2e 	bgeu	r5,fp,4022a24 <___vfprintf_internal_r+0x22a4>
 4022870:	d9c02384 	addi	r7,sp,142
 4022874:	3ccfc83a 	sub	r7,r7,r19
 4022878:	d9002344 	addi	r4,sp,141
 402287c:	e1cf883a 	add	r7,fp,r7
 4022880:	00000106 	br	4022888 <___vfprintf_internal_r+0x2108>
 4022884:	28800003 	ldbu	r2,0(r5)
 4022888:	20800005 	stb	r2,0(r4)
 402288c:	21000044 	addi	r4,r4,1
 4022890:	29400044 	addi	r5,r5,1
 4022894:	393ffb1e 	bne	r7,r4,4022884 <__flash_rwdata_start+0xfffed034>
 4022898:	d8802304 	addi	r2,sp,140
 402289c:	14c5c83a 	sub	r2,r2,r19
 40228a0:	d8c02344 	addi	r3,sp,141
 40228a4:	1885883a 	add	r2,r3,r2
 40228a8:	003f7006 	br	402266c <__flash_rwdata_start+0xfffece1c>
 40228ac:	0005883a 	mov	r2,zero
 40228b0:	003f0f06 	br	40224f0 <__flash_rwdata_start+0xfffecca0>
 40228b4:	d8c03217 	ldw	r3,200(sp)
 40228b8:	18c00044 	addi	r3,r3,1
 40228bc:	d8c02b15 	stw	r3,172(sp)
 40228c0:	1805883a 	mov	r2,r3
 40228c4:	183fb20e 	bge	r3,zero,4022790 <__flash_rwdata_start+0xfffecf40>
 40228c8:	0005883a 	mov	r2,zero
 40228cc:	003fb006 	br	4022790 <__flash_rwdata_start+0xfffecf40>
 40228d0:	d9003617 	ldw	r4,216(sp)
 40228d4:	000d883a 	mov	r6,zero
 40228d8:	000f883a 	mov	r7,zero
 40228dc:	980b883a 	mov	r5,r19
 40228e0:	d8c03c15 	stw	r3,240(sp)
 40228e4:	da003d15 	stw	r8,244(sp)
 40228e8:	402bec00 	call	402bec0 <__eqdf2>
 40228ec:	d8c03c17 	ldw	r3,240(sp)
 40228f0:	da003d17 	ldw	r8,244(sp)
 40228f4:	103f9826 	beq	r2,zero,4022758 <__flash_rwdata_start+0xfffecf08>
 40228f8:	00800044 	movi	r2,1
 40228fc:	10c7c83a 	sub	r3,r2,r3
 4022900:	d8c02615 	stw	r3,152(sp)
 4022904:	003f9506 	br	402275c <__flash_rwdata_start+0xfffecf0c>
 4022908:	d9002a17 	ldw	r4,168(sp)
 402290c:	d8c03217 	ldw	r3,200(sp)
 4022910:	20800044 	addi	r2,r4,1
 4022914:	1885883a 	add	r2,r3,r2
 4022918:	d8802b15 	stw	r2,172(sp)
 402291c:	103dbf0e 	bge	r2,zero,402201c <__flash_rwdata_start+0xfffec7cc>
 4022920:	0005883a 	mov	r2,zero
 4022924:	003dbd06 	br	402201c <__flash_rwdata_start+0xfffec7cc>
 4022928:	2000201e 	bne	r4,zero,40229ac <___vfprintf_internal_r+0x222c>
 402292c:	9480004c 	andi	r18,r18,1
 4022930:	90001e1e 	bne	r18,zero,40229ac <___vfprintf_internal_r+0x222c>
 4022934:	00800044 	movi	r2,1
 4022938:	d8802b15 	stw	r2,172(sp)
 402293c:	003db706 	br	402201c <__flash_rwdata_start+0xfffec7cc>
 4022940:	00800b44 	movi	r2,45
 4022944:	05adc83a 	sub	r22,zero,r22
 4022948:	d8802305 	stb	r2,140(sp)
 402294c:	003f3f06 	br	402264c <__flash_rwdata_start+0xfffecdfc>
 4022950:	0005883a 	mov	r2,zero
 4022954:	003f5206 	br	40226a0 <__flash_rwdata_start+0xfffece50>
 4022958:	90a4703a 	and	r18,r18,r2
 402295c:	903f4e26 	beq	r18,zero,4022698 <__flash_rwdata_start+0xfffece48>
 4022960:	003f4a06 	br	402268c <__flash_rwdata_start+0xfffece3c>
 4022964:	00800084 	movi	r2,2
 4022968:	10c5c83a 	sub	r2,r2,r3
 402296c:	003f8406 	br	4022780 <__flash_rwdata_start+0xfffecf30>
 4022970:	d9402e17 	ldw	r5,184(sp)
 4022974:	d9002e17 	ldw	r4,184(sp)
 4022978:	ac400043 	ldbu	r17,1(r21)
 402297c:	29400017 	ldw	r5,0(r5)
 4022980:	20800104 	addi	r2,r4,4
 4022984:	d8802e15 	stw	r2,184(sp)
 4022988:	d9402a15 	stw	r5,168(sp)
 402298c:	182b883a 	mov	r21,r3
 4022990:	283e7b0e 	bge	r5,zero,4022380 <__flash_rwdata_start+0xfffecb30>
 4022994:	8c403fcc 	andi	r17,r17,255
 4022998:	017fffc4 	movi	r5,-1
 402299c:	8c40201c 	xori	r17,r17,128
 40229a0:	d9402a15 	stw	r5,168(sp)
 40229a4:	8c7fe004 	addi	r17,r17,-128
 40229a8:	0037d706 	br	4020908 <__flash_rwdata_start+0xfffeb0b8>
 40229ac:	d8c02a17 	ldw	r3,168(sp)
 40229b0:	18c00084 	addi	r3,r3,2
 40229b4:	d8c02b15 	stw	r3,172(sp)
 40229b8:	1805883a 	mov	r2,r3
 40229bc:	183d970e 	bge	r3,zero,402201c <__flash_rwdata_start+0xfffec7cc>
 40229c0:	003fd706 	br	4022920 <__flash_rwdata_start+0xfffed0d0>
 40229c4:	0005883a 	mov	r2,zero
 40229c8:	003f8f06 	br	4022808 <__flash_rwdata_start+0xfffecfb8>
 40229cc:	9080004c 	andi	r2,r18,1
 40229d0:	103f821e 	bne	r2,zero,40227dc <__flash_rwdata_start+0xfffecf8c>
 40229d4:	d8802117 	ldw	r2,132(sp)
 40229d8:	1405c83a 	sub	r2,r2,r16
 40229dc:	d8803315 	stw	r2,204(sp)
 40229e0:	b47ef426 	beq	r22,r17,40225b4 <__flash_rwdata_start+0xfffecd64>
 40229e4:	dd802617 	ldw	r22,152(sp)
 40229e8:	003f1206 	br	4022634 <__flash_rwdata_start+0xfffecde4>
 40229ec:	d8c02b03 	ldbu	r3,172(sp)
 40229f0:	d8c02785 	stb	r3,158(sp)
 40229f4:	0038df06 	br	4020d74 <__flash_rwdata_start+0xfffeb524>
 40229f8:	d8c02b03 	ldbu	r3,172(sp)
 40229fc:	d8c02785 	stb	r3,158(sp)
 4022a00:	0038aa06 	br	4020cac <__flash_rwdata_start+0xfffeb45c>
 4022a04:	d8c02b03 	ldbu	r3,172(sp)
 4022a08:	d8c02785 	stb	r3,158(sp)
 4022a0c:	003a4306 	br	402131c <__flash_rwdata_start+0xfffebacc>
 4022a10:	d8c02b03 	ldbu	r3,172(sp)
 4022a14:	d8c02785 	stb	r3,158(sp)
 4022a18:	003af506 	br	40215f0 <__flash_rwdata_start+0xfffebda0>
 4022a1c:	0005883a 	mov	r2,zero
 4022a20:	003d7b06 	br	4022010 <__flash_rwdata_start+0xfffec7c0>
 4022a24:	d8802344 	addi	r2,sp,141
 4022a28:	003f1006 	br	402266c <__flash_rwdata_start+0xfffece1c>
 4022a2c:	d8c02b03 	ldbu	r3,172(sp)
 4022a30:	d8c02785 	stb	r3,158(sp)
 4022a34:	0038fd06 	br	4020e2c <__flash_rwdata_start+0xfffeb5dc>
 4022a38:	d8c02b03 	ldbu	r3,172(sp)
 4022a3c:	d8c02785 	stb	r3,158(sp)
 4022a40:	003a9706 	br	40214a0 <__flash_rwdata_start+0xfffebc50>
 4022a44:	d8c02b03 	ldbu	r3,172(sp)
 4022a48:	d8c02785 	stb	r3,158(sp)
 4022a4c:	003a1806 	br	40212b0 <__flash_rwdata_start+0xfffeba60>
 4022a50:	d8c02b03 	ldbu	r3,172(sp)
 4022a54:	d8c02785 	stb	r3,158(sp)
 4022a58:	003abe06 	br	4021554 <__flash_rwdata_start+0xfffebd04>

04022a5c <__vfprintf_internal>:
 4022a5c:	00800034 	movhi	r2,0
 4022a60:	10881c04 	addi	r2,r2,8304
 4022a64:	300f883a 	mov	r7,r6
 4022a68:	280d883a 	mov	r6,r5
 4022a6c:	200b883a 	mov	r5,r4
 4022a70:	11000017 	ldw	r4,0(r2)
 4022a74:	40207801 	jmpi	4020780 <___vfprintf_internal_r>

04022a78 <__sbprintf>:
 4022a78:	2880030b 	ldhu	r2,12(r5)
 4022a7c:	2ac01917 	ldw	r11,100(r5)
 4022a80:	2a80038b 	ldhu	r10,14(r5)
 4022a84:	2a400717 	ldw	r9,28(r5)
 4022a88:	2a000917 	ldw	r8,36(r5)
 4022a8c:	defee204 	addi	sp,sp,-1144
 4022a90:	00c10004 	movi	r3,1024
 4022a94:	dc011a15 	stw	r16,1128(sp)
 4022a98:	10bfff4c 	andi	r2,r2,65533
 4022a9c:	2821883a 	mov	r16,r5
 4022aa0:	d8cb883a 	add	r5,sp,r3
 4022aa4:	dc811c15 	stw	r18,1136(sp)
 4022aa8:	dc411b15 	stw	r17,1132(sp)
 4022aac:	dfc11d15 	stw	ra,1140(sp)
 4022ab0:	2025883a 	mov	r18,r4
 4022ab4:	d881030d 	sth	r2,1036(sp)
 4022ab8:	dac11915 	stw	r11,1124(sp)
 4022abc:	da81038d 	sth	r10,1038(sp)
 4022ac0:	da410715 	stw	r9,1052(sp)
 4022ac4:	da010915 	stw	r8,1060(sp)
 4022ac8:	dec10015 	stw	sp,1024(sp)
 4022acc:	dec10415 	stw	sp,1040(sp)
 4022ad0:	d8c10215 	stw	r3,1032(sp)
 4022ad4:	d8c10515 	stw	r3,1044(sp)
 4022ad8:	d8010615 	stw	zero,1048(sp)
 4022adc:	40207800 	call	4020780 <___vfprintf_internal_r>
 4022ae0:	1023883a 	mov	r17,r2
 4022ae4:	10000416 	blt	r2,zero,4022af8 <__sbprintf+0x80>
 4022ae8:	d9410004 	addi	r5,sp,1024
 4022aec:	9009883a 	mov	r4,r18
 4022af0:	40247540 	call	4024754 <_fflush_r>
 4022af4:	10000d1e 	bne	r2,zero,4022b2c <__sbprintf+0xb4>
 4022af8:	d881030b 	ldhu	r2,1036(sp)
 4022afc:	1080100c 	andi	r2,r2,64
 4022b00:	10000326 	beq	r2,zero,4022b10 <__sbprintf+0x98>
 4022b04:	8080030b 	ldhu	r2,12(r16)
 4022b08:	10801014 	ori	r2,r2,64
 4022b0c:	8080030d 	sth	r2,12(r16)
 4022b10:	8805883a 	mov	r2,r17
 4022b14:	dfc11d17 	ldw	ra,1140(sp)
 4022b18:	dc811c17 	ldw	r18,1136(sp)
 4022b1c:	dc411b17 	ldw	r17,1132(sp)
 4022b20:	dc011a17 	ldw	r16,1128(sp)
 4022b24:	dec11e04 	addi	sp,sp,1144
 4022b28:	f800283a 	ret
 4022b2c:	047fffc4 	movi	r17,-1
 4022b30:	003ff106 	br	4022af8 <__flash_rwdata_start+0xfffed2a8>

04022b34 <__swsetup_r>:
 4022b34:	00800034 	movhi	r2,0
 4022b38:	defffd04 	addi	sp,sp,-12
 4022b3c:	10881c04 	addi	r2,r2,8304
 4022b40:	dc400115 	stw	r17,4(sp)
 4022b44:	2023883a 	mov	r17,r4
 4022b48:	11000017 	ldw	r4,0(r2)
 4022b4c:	dc000015 	stw	r16,0(sp)
 4022b50:	dfc00215 	stw	ra,8(sp)
 4022b54:	2821883a 	mov	r16,r5
 4022b58:	20000226 	beq	r4,zero,4022b64 <__swsetup_r+0x30>
 4022b5c:	20800e17 	ldw	r2,56(r4)
 4022b60:	10003126 	beq	r2,zero,4022c28 <__swsetup_r+0xf4>
 4022b64:	8080030b 	ldhu	r2,12(r16)
 4022b68:	10c0020c 	andi	r3,r2,8
 4022b6c:	1009883a 	mov	r4,r2
 4022b70:	18000f26 	beq	r3,zero,4022bb0 <__swsetup_r+0x7c>
 4022b74:	80c00417 	ldw	r3,16(r16)
 4022b78:	18001526 	beq	r3,zero,4022bd0 <__swsetup_r+0x9c>
 4022b7c:	1100004c 	andi	r4,r2,1
 4022b80:	20001c1e 	bne	r4,zero,4022bf4 <__swsetup_r+0xc0>
 4022b84:	1080008c 	andi	r2,r2,2
 4022b88:	1000291e 	bne	r2,zero,4022c30 <__swsetup_r+0xfc>
 4022b8c:	80800517 	ldw	r2,20(r16)
 4022b90:	80800215 	stw	r2,8(r16)
 4022b94:	18001c26 	beq	r3,zero,4022c08 <__swsetup_r+0xd4>
 4022b98:	0005883a 	mov	r2,zero
 4022b9c:	dfc00217 	ldw	ra,8(sp)
 4022ba0:	dc400117 	ldw	r17,4(sp)
 4022ba4:	dc000017 	ldw	r16,0(sp)
 4022ba8:	dec00304 	addi	sp,sp,12
 4022bac:	f800283a 	ret
 4022bb0:	2080040c 	andi	r2,r4,16
 4022bb4:	10002e26 	beq	r2,zero,4022c70 <__swsetup_r+0x13c>
 4022bb8:	2080010c 	andi	r2,r4,4
 4022bbc:	10001e1e 	bne	r2,zero,4022c38 <__swsetup_r+0x104>
 4022bc0:	80c00417 	ldw	r3,16(r16)
 4022bc4:	20800214 	ori	r2,r4,8
 4022bc8:	8080030d 	sth	r2,12(r16)
 4022bcc:	183feb1e 	bne	r3,zero,4022b7c <__flash_rwdata_start+0xfffed32c>
 4022bd0:	1100a00c 	andi	r4,r2,640
 4022bd4:	01408004 	movi	r5,512
 4022bd8:	217fe826 	beq	r4,r5,4022b7c <__flash_rwdata_start+0xfffed32c>
 4022bdc:	800b883a 	mov	r5,r16
 4022be0:	8809883a 	mov	r4,r17
 4022be4:	40256f00 	call	40256f0 <__smakebuf_r>
 4022be8:	8080030b 	ldhu	r2,12(r16)
 4022bec:	80c00417 	ldw	r3,16(r16)
 4022bf0:	003fe206 	br	4022b7c <__flash_rwdata_start+0xfffed32c>
 4022bf4:	80800517 	ldw	r2,20(r16)
 4022bf8:	80000215 	stw	zero,8(r16)
 4022bfc:	0085c83a 	sub	r2,zero,r2
 4022c00:	80800615 	stw	r2,24(r16)
 4022c04:	183fe41e 	bne	r3,zero,4022b98 <__flash_rwdata_start+0xfffed348>
 4022c08:	80c0030b 	ldhu	r3,12(r16)
 4022c0c:	0005883a 	mov	r2,zero
 4022c10:	1900200c 	andi	r4,r3,128
 4022c14:	203fe126 	beq	r4,zero,4022b9c <__flash_rwdata_start+0xfffed34c>
 4022c18:	18c01014 	ori	r3,r3,64
 4022c1c:	80c0030d 	sth	r3,12(r16)
 4022c20:	00bfffc4 	movi	r2,-1
 4022c24:	003fdd06 	br	4022b9c <__flash_rwdata_start+0xfffed34c>
 4022c28:	4024b400 	call	4024b40 <__sinit>
 4022c2c:	003fcd06 	br	4022b64 <__flash_rwdata_start+0xfffed314>
 4022c30:	0005883a 	mov	r2,zero
 4022c34:	003fd606 	br	4022b90 <__flash_rwdata_start+0xfffed340>
 4022c38:	81400c17 	ldw	r5,48(r16)
 4022c3c:	28000626 	beq	r5,zero,4022c58 <__swsetup_r+0x124>
 4022c40:	80801004 	addi	r2,r16,64
 4022c44:	28800326 	beq	r5,r2,4022c54 <__swsetup_r+0x120>
 4022c48:	8809883a 	mov	r4,r17
 4022c4c:	4024cb40 	call	4024cb4 <_free_r>
 4022c50:	8100030b 	ldhu	r4,12(r16)
 4022c54:	80000c15 	stw	zero,48(r16)
 4022c58:	80c00417 	ldw	r3,16(r16)
 4022c5c:	00bff6c4 	movi	r2,-37
 4022c60:	1108703a 	and	r4,r2,r4
 4022c64:	80000115 	stw	zero,4(r16)
 4022c68:	80c00015 	stw	r3,0(r16)
 4022c6c:	003fd506 	br	4022bc4 <__flash_rwdata_start+0xfffed374>
 4022c70:	00800244 	movi	r2,9
 4022c74:	88800015 	stw	r2,0(r17)
 4022c78:	20801014 	ori	r2,r4,64
 4022c7c:	8080030d 	sth	r2,12(r16)
 4022c80:	00bfffc4 	movi	r2,-1
 4022c84:	003fc506 	br	4022b9c <__flash_rwdata_start+0xfffed34c>

04022c88 <quorem>:
 4022c88:	defff204 	addi	sp,sp,-56
 4022c8c:	ddc00b15 	stw	r23,44(sp)
 4022c90:	20800417 	ldw	r2,16(r4)
 4022c94:	2dc00417 	ldw	r23,16(r5)
 4022c98:	dfc00d15 	stw	ra,52(sp)
 4022c9c:	df000c15 	stw	fp,48(sp)
 4022ca0:	dd800a15 	stw	r22,40(sp)
 4022ca4:	dd400915 	stw	r21,36(sp)
 4022ca8:	dd000815 	stw	r20,32(sp)
 4022cac:	dcc00715 	stw	r19,28(sp)
 4022cb0:	dc800615 	stw	r18,24(sp)
 4022cb4:	dc400515 	stw	r17,20(sp)
 4022cb8:	dc000415 	stw	r16,16(sp)
 4022cbc:	15c07a16 	blt	r2,r23,4022ea8 <quorem+0x220>
 4022cc0:	bdffffc4 	addi	r23,r23,-1
 4022cc4:	bde9883a 	add	r20,r23,r23
 4022cc8:	28c00504 	addi	r3,r5,20
 4022ccc:	a529883a 	add	r20,r20,r20
 4022cd0:	1d39883a 	add	fp,r3,r20
 4022cd4:	24c00504 	addi	r19,r4,20
 4022cd8:	d9400215 	stw	r5,8(sp)
 4022cdc:	9d29883a 	add	r20,r19,r20
 4022ce0:	e1400017 	ldw	r5,0(fp)
 4022ce4:	d9000015 	stw	r4,0(sp)
 4022ce8:	a1000017 	ldw	r4,0(r20)
 4022cec:	29400044 	addi	r5,r5,1
 4022cf0:	d8c00115 	stw	r3,4(sp)
 4022cf4:	dd000315 	stw	r20,12(sp)
 4022cf8:	402ab600 	call	402ab60 <__udivsi3>
 4022cfc:	1025883a 	mov	r18,r2
 4022d00:	10003026 	beq	r2,zero,4022dc4 <quorem+0x13c>
 4022d04:	dc400117 	ldw	r17,4(sp)
 4022d08:	9829883a 	mov	r20,r19
 4022d0c:	002d883a 	mov	r22,zero
 4022d10:	0021883a 	mov	r16,zero
 4022d14:	8d400017 	ldw	r21,0(r17)
 4022d18:	900b883a 	mov	r5,r18
 4022d1c:	8c400104 	addi	r17,r17,4
 4022d20:	a93fffcc 	andi	r4,r21,65535
 4022d24:	402ac1c0 	call	402ac1c <__mulsi3>
 4022d28:	a808d43a 	srli	r4,r21,16
 4022d2c:	900b883a 	mov	r5,r18
 4022d30:	15ad883a 	add	r22,r2,r22
 4022d34:	402ac1c0 	call	402ac1c <__mulsi3>
 4022d38:	a1000017 	ldw	r4,0(r20)
 4022d3c:	b00cd43a 	srli	r6,r22,16
 4022d40:	b0ffffcc 	andi	r3,r22,65535
 4022d44:	217fffcc 	andi	r5,r4,65535
 4022d48:	2c21883a 	add	r16,r5,r16
 4022d4c:	80c7c83a 	sub	r3,r16,r3
 4022d50:	2008d43a 	srli	r4,r4,16
 4022d54:	1185883a 	add	r2,r2,r6
 4022d58:	1821d43a 	srai	r16,r3,16
 4022d5c:	117fffcc 	andi	r5,r2,65535
 4022d60:	2149c83a 	sub	r4,r4,r5
 4022d64:	2421883a 	add	r16,r4,r16
 4022d68:	8008943a 	slli	r4,r16,16
 4022d6c:	18ffffcc 	andi	r3,r3,65535
 4022d70:	102cd43a 	srli	r22,r2,16
 4022d74:	20c8b03a 	or	r4,r4,r3
 4022d78:	a1000015 	stw	r4,0(r20)
 4022d7c:	8021d43a 	srai	r16,r16,16
 4022d80:	a5000104 	addi	r20,r20,4
 4022d84:	e47fe32e 	bgeu	fp,r17,4022d14 <__flash_rwdata_start+0xfffed4c4>
 4022d88:	d8c00317 	ldw	r3,12(sp)
 4022d8c:	18800017 	ldw	r2,0(r3)
 4022d90:	10000c1e 	bne	r2,zero,4022dc4 <quorem+0x13c>
 4022d94:	18bfff04 	addi	r2,r3,-4
 4022d98:	9880082e 	bgeu	r19,r2,4022dbc <quorem+0x134>
 4022d9c:	18ffff17 	ldw	r3,-4(r3)
 4022da0:	18000326 	beq	r3,zero,4022db0 <quorem+0x128>
 4022da4:	00000506 	br	4022dbc <quorem+0x134>
 4022da8:	10c00017 	ldw	r3,0(r2)
 4022dac:	1800031e 	bne	r3,zero,4022dbc <quorem+0x134>
 4022db0:	10bfff04 	addi	r2,r2,-4
 4022db4:	bdffffc4 	addi	r23,r23,-1
 4022db8:	98bffb36 	bltu	r19,r2,4022da8 <__flash_rwdata_start+0xfffed558>
 4022dbc:	d8c00017 	ldw	r3,0(sp)
 4022dc0:	1dc00415 	stw	r23,16(r3)
 4022dc4:	d9400217 	ldw	r5,8(sp)
 4022dc8:	d9000017 	ldw	r4,0(sp)
 4022dcc:	4026eec0 	call	4026eec <__mcmp>
 4022dd0:	10002816 	blt	r2,zero,4022e74 <quorem+0x1ec>
 4022dd4:	dc400117 	ldw	r17,4(sp)
 4022dd8:	94800044 	addi	r18,r18,1
 4022ddc:	980d883a 	mov	r6,r19
 4022de0:	0007883a 	mov	r3,zero
 4022de4:	31000017 	ldw	r4,0(r6)
 4022de8:	89400017 	ldw	r5,0(r17)
 4022dec:	31800104 	addi	r6,r6,4
 4022df0:	20bfffcc 	andi	r2,r4,65535
 4022df4:	10c7883a 	add	r3,r2,r3
 4022df8:	28bfffcc 	andi	r2,r5,65535
 4022dfc:	1885c83a 	sub	r2,r3,r2
 4022e00:	280ad43a 	srli	r5,r5,16
 4022e04:	2008d43a 	srli	r4,r4,16
 4022e08:	1007d43a 	srai	r3,r2,16
 4022e0c:	10bfffcc 	andi	r2,r2,65535
 4022e10:	2149c83a 	sub	r4,r4,r5
 4022e14:	20c9883a 	add	r4,r4,r3
 4022e18:	200a943a 	slli	r5,r4,16
 4022e1c:	8c400104 	addi	r17,r17,4
 4022e20:	2007d43a 	srai	r3,r4,16
 4022e24:	2884b03a 	or	r2,r5,r2
 4022e28:	30bfff15 	stw	r2,-4(r6)
 4022e2c:	e47fed2e 	bgeu	fp,r17,4022de4 <__flash_rwdata_start+0xfffed594>
 4022e30:	bdc5883a 	add	r2,r23,r23
 4022e34:	1085883a 	add	r2,r2,r2
 4022e38:	9887883a 	add	r3,r19,r2
 4022e3c:	18800017 	ldw	r2,0(r3)
 4022e40:	10000c1e 	bne	r2,zero,4022e74 <quorem+0x1ec>
 4022e44:	18bfff04 	addi	r2,r3,-4
 4022e48:	9880082e 	bgeu	r19,r2,4022e6c <quorem+0x1e4>
 4022e4c:	18ffff17 	ldw	r3,-4(r3)
 4022e50:	18000326 	beq	r3,zero,4022e60 <quorem+0x1d8>
 4022e54:	00000506 	br	4022e6c <quorem+0x1e4>
 4022e58:	10c00017 	ldw	r3,0(r2)
 4022e5c:	1800031e 	bne	r3,zero,4022e6c <quorem+0x1e4>
 4022e60:	10bfff04 	addi	r2,r2,-4
 4022e64:	bdffffc4 	addi	r23,r23,-1
 4022e68:	98bffb36 	bltu	r19,r2,4022e58 <__flash_rwdata_start+0xfffed608>
 4022e6c:	d8c00017 	ldw	r3,0(sp)
 4022e70:	1dc00415 	stw	r23,16(r3)
 4022e74:	9005883a 	mov	r2,r18
 4022e78:	dfc00d17 	ldw	ra,52(sp)
 4022e7c:	df000c17 	ldw	fp,48(sp)
 4022e80:	ddc00b17 	ldw	r23,44(sp)
 4022e84:	dd800a17 	ldw	r22,40(sp)
 4022e88:	dd400917 	ldw	r21,36(sp)
 4022e8c:	dd000817 	ldw	r20,32(sp)
 4022e90:	dcc00717 	ldw	r19,28(sp)
 4022e94:	dc800617 	ldw	r18,24(sp)
 4022e98:	dc400517 	ldw	r17,20(sp)
 4022e9c:	dc000417 	ldw	r16,16(sp)
 4022ea0:	dec00e04 	addi	sp,sp,56
 4022ea4:	f800283a 	ret
 4022ea8:	0005883a 	mov	r2,zero
 4022eac:	003ff206 	br	4022e78 <__flash_rwdata_start+0xfffed628>

04022eb0 <_dtoa_r>:
 4022eb0:	20801017 	ldw	r2,64(r4)
 4022eb4:	deffde04 	addi	sp,sp,-136
 4022eb8:	df002015 	stw	fp,128(sp)
 4022ebc:	dcc01b15 	stw	r19,108(sp)
 4022ec0:	dc801a15 	stw	r18,104(sp)
 4022ec4:	dc401915 	stw	r17,100(sp)
 4022ec8:	dc001815 	stw	r16,96(sp)
 4022ecc:	dfc02115 	stw	ra,132(sp)
 4022ed0:	ddc01f15 	stw	r23,124(sp)
 4022ed4:	dd801e15 	stw	r22,120(sp)
 4022ed8:	dd401d15 	stw	r21,116(sp)
 4022edc:	dd001c15 	stw	r20,112(sp)
 4022ee0:	d9c00315 	stw	r7,12(sp)
 4022ee4:	2039883a 	mov	fp,r4
 4022ee8:	3023883a 	mov	r17,r6
 4022eec:	2825883a 	mov	r18,r5
 4022ef0:	dc002417 	ldw	r16,144(sp)
 4022ef4:	3027883a 	mov	r19,r6
 4022ef8:	10000826 	beq	r2,zero,4022f1c <_dtoa_r+0x6c>
 4022efc:	21801117 	ldw	r6,68(r4)
 4022f00:	00c00044 	movi	r3,1
 4022f04:	100b883a 	mov	r5,r2
 4022f08:	1986983a 	sll	r3,r3,r6
 4022f0c:	11800115 	stw	r6,4(r2)
 4022f10:	10c00215 	stw	r3,8(r2)
 4022f14:	40266100 	call	4026610 <_Bfree>
 4022f18:	e0001015 	stw	zero,64(fp)
 4022f1c:	88002e16 	blt	r17,zero,4022fd8 <_dtoa_r+0x128>
 4022f20:	80000015 	stw	zero,0(r16)
 4022f24:	889ffc2c 	andhi	r2,r17,32752
 4022f28:	00dffc34 	movhi	r3,32752
 4022f2c:	10c01c26 	beq	r2,r3,4022fa0 <_dtoa_r+0xf0>
 4022f30:	000d883a 	mov	r6,zero
 4022f34:	000f883a 	mov	r7,zero
 4022f38:	9009883a 	mov	r4,r18
 4022f3c:	980b883a 	mov	r5,r19
 4022f40:	402bec00 	call	402bec0 <__eqdf2>
 4022f44:	10002b1e 	bne	r2,zero,4022ff4 <_dtoa_r+0x144>
 4022f48:	d9c02317 	ldw	r7,140(sp)
 4022f4c:	00800044 	movi	r2,1
 4022f50:	38800015 	stw	r2,0(r7)
 4022f54:	d8802517 	ldw	r2,148(sp)
 4022f58:	10019e26 	beq	r2,zero,40235d4 <_dtoa_r+0x724>
 4022f5c:	d8c02517 	ldw	r3,148(sp)
 4022f60:	00800034 	movhi	r2,0
 4022f64:	10808e44 	addi	r2,r2,569
 4022f68:	18800015 	stw	r2,0(r3)
 4022f6c:	10bfffc4 	addi	r2,r2,-1
 4022f70:	dfc02117 	ldw	ra,132(sp)
 4022f74:	df002017 	ldw	fp,128(sp)
 4022f78:	ddc01f17 	ldw	r23,124(sp)
 4022f7c:	dd801e17 	ldw	r22,120(sp)
 4022f80:	dd401d17 	ldw	r21,116(sp)
 4022f84:	dd001c17 	ldw	r20,112(sp)
 4022f88:	dcc01b17 	ldw	r19,108(sp)
 4022f8c:	dc801a17 	ldw	r18,104(sp)
 4022f90:	dc401917 	ldw	r17,100(sp)
 4022f94:	dc001817 	ldw	r16,96(sp)
 4022f98:	dec02204 	addi	sp,sp,136
 4022f9c:	f800283a 	ret
 4022fa0:	d8c02317 	ldw	r3,140(sp)
 4022fa4:	0089c3c4 	movi	r2,9999
 4022fa8:	18800015 	stw	r2,0(r3)
 4022fac:	90017726 	beq	r18,zero,402358c <_dtoa_r+0x6dc>
 4022fb0:	00800034 	movhi	r2,0
 4022fb4:	10809a04 	addi	r2,r2,616
 4022fb8:	d9002517 	ldw	r4,148(sp)
 4022fbc:	203fec26 	beq	r4,zero,4022f70 <__flash_rwdata_start+0xfffed720>
 4022fc0:	10c000c7 	ldb	r3,3(r2)
 4022fc4:	1801781e 	bne	r3,zero,40235a8 <_dtoa_r+0x6f8>
 4022fc8:	10c000c4 	addi	r3,r2,3
 4022fcc:	d9802517 	ldw	r6,148(sp)
 4022fd0:	30c00015 	stw	r3,0(r6)
 4022fd4:	003fe606 	br	4022f70 <__flash_rwdata_start+0xfffed720>
 4022fd8:	04e00034 	movhi	r19,32768
 4022fdc:	9cffffc4 	addi	r19,r19,-1
 4022fe0:	00800044 	movi	r2,1
 4022fe4:	8ce6703a 	and	r19,r17,r19
 4022fe8:	80800015 	stw	r2,0(r16)
 4022fec:	9823883a 	mov	r17,r19
 4022ff0:	003fcc06 	br	4022f24 <__flash_rwdata_start+0xfffed6d4>
 4022ff4:	d8800204 	addi	r2,sp,8
 4022ff8:	d8800015 	stw	r2,0(sp)
 4022ffc:	d9c00104 	addi	r7,sp,4
 4023000:	900b883a 	mov	r5,r18
 4023004:	980d883a 	mov	r6,r19
 4023008:	e009883a 	mov	r4,fp
 402300c:	8820d53a 	srli	r16,r17,20
 4023010:	40272b80 	call	40272b8 <__d2b>
 4023014:	d8800915 	stw	r2,36(sp)
 4023018:	8001651e 	bne	r16,zero,40235b0 <_dtoa_r+0x700>
 402301c:	dd800217 	ldw	r22,8(sp)
 4023020:	dc000117 	ldw	r16,4(sp)
 4023024:	00800804 	movi	r2,32
 4023028:	b421883a 	add	r16,r22,r16
 402302c:	80c10c84 	addi	r3,r16,1074
 4023030:	10c2d10e 	bge	r2,r3,4023b78 <_dtoa_r+0xcc8>
 4023034:	00801004 	movi	r2,64
 4023038:	81010484 	addi	r4,r16,1042
 402303c:	10c7c83a 	sub	r3,r2,r3
 4023040:	9108d83a 	srl	r4,r18,r4
 4023044:	88e2983a 	sll	r17,r17,r3
 4023048:	2448b03a 	or	r4,r4,r17
 402304c:	402d3dc0 	call	402d3dc <__floatunsidf>
 4023050:	017f8434 	movhi	r5,65040
 4023054:	01800044 	movi	r6,1
 4023058:	1009883a 	mov	r4,r2
 402305c:	194b883a 	add	r5,r3,r5
 4023060:	843fffc4 	addi	r16,r16,-1
 4023064:	d9801115 	stw	r6,68(sp)
 4023068:	000d883a 	mov	r6,zero
 402306c:	01cffe34 	movhi	r7,16376
 4023070:	402c9840 	call	402c984 <__subdf3>
 4023074:	0198dbf4 	movhi	r6,25455
 4023078:	01cff4f4 	movhi	r7,16339
 402307c:	3190d844 	addi	r6,r6,17249
 4023080:	39e1e9c4 	addi	r7,r7,-30809
 4023084:	1009883a 	mov	r4,r2
 4023088:	180b883a 	mov	r5,r3
 402308c:	402c1180 	call	402c118 <__muldf3>
 4023090:	01a2d874 	movhi	r6,35681
 4023094:	01cff1f4 	movhi	r7,16327
 4023098:	31b22cc4 	addi	r6,r6,-14157
 402309c:	39e28a04 	addi	r7,r7,-30168
 40230a0:	180b883a 	mov	r5,r3
 40230a4:	1009883a 	mov	r4,r2
 40230a8:	402ac440 	call	402ac44 <__adddf3>
 40230ac:	8009883a 	mov	r4,r16
 40230b0:	1029883a 	mov	r20,r2
 40230b4:	1823883a 	mov	r17,r3
 40230b8:	402d3000 	call	402d300 <__floatsidf>
 40230bc:	019427f4 	movhi	r6,20639
 40230c0:	01cff4f4 	movhi	r7,16339
 40230c4:	319e7ec4 	addi	r6,r6,31227
 40230c8:	39d104c4 	addi	r7,r7,17427
 40230cc:	1009883a 	mov	r4,r2
 40230d0:	180b883a 	mov	r5,r3
 40230d4:	402c1180 	call	402c118 <__muldf3>
 40230d8:	100d883a 	mov	r6,r2
 40230dc:	180f883a 	mov	r7,r3
 40230e0:	a009883a 	mov	r4,r20
 40230e4:	880b883a 	mov	r5,r17
 40230e8:	402ac440 	call	402ac44 <__adddf3>
 40230ec:	1009883a 	mov	r4,r2
 40230f0:	180b883a 	mov	r5,r3
 40230f4:	1029883a 	mov	r20,r2
 40230f8:	1823883a 	mov	r17,r3
 40230fc:	402d2800 	call	402d280 <__fixdfsi>
 4023100:	000d883a 	mov	r6,zero
 4023104:	000f883a 	mov	r7,zero
 4023108:	a009883a 	mov	r4,r20
 402310c:	880b883a 	mov	r5,r17
 4023110:	d8800515 	stw	r2,20(sp)
 4023114:	402c0240 	call	402c024 <__ledf2>
 4023118:	10028716 	blt	r2,zero,4023b38 <_dtoa_r+0xc88>
 402311c:	d8c00517 	ldw	r3,20(sp)
 4023120:	00800584 	movi	r2,22
 4023124:	10c27536 	bltu	r2,r3,4023afc <_dtoa_r+0xc4c>
 4023128:	180490fa 	slli	r2,r3,3
 402312c:	00c00034 	movhi	r3,0
 4023130:	18c0b604 	addi	r3,r3,728
 4023134:	1885883a 	add	r2,r3,r2
 4023138:	11000017 	ldw	r4,0(r2)
 402313c:	11400117 	ldw	r5,4(r2)
 4023140:	900d883a 	mov	r6,r18
 4023144:	980f883a 	mov	r7,r19
 4023148:	402bf480 	call	402bf48 <__gedf2>
 402314c:	00828d0e 	bge	zero,r2,4023b84 <_dtoa_r+0xcd4>
 4023150:	d9000517 	ldw	r4,20(sp)
 4023154:	d8000e15 	stw	zero,56(sp)
 4023158:	213fffc4 	addi	r4,r4,-1
 402315c:	d9000515 	stw	r4,20(sp)
 4023160:	b42dc83a 	sub	r22,r22,r16
 4023164:	b5bfffc4 	addi	r22,r22,-1
 4023168:	b0026f16 	blt	r22,zero,4023b28 <_dtoa_r+0xc78>
 402316c:	d8000815 	stw	zero,32(sp)
 4023170:	d9c00517 	ldw	r7,20(sp)
 4023174:	38026416 	blt	r7,zero,4023b08 <_dtoa_r+0xc58>
 4023178:	b1ed883a 	add	r22,r22,r7
 402317c:	d9c00d15 	stw	r7,52(sp)
 4023180:	d8000a15 	stw	zero,40(sp)
 4023184:	d9800317 	ldw	r6,12(sp)
 4023188:	00800244 	movi	r2,9
 402318c:	11811436 	bltu	r2,r6,40235e0 <_dtoa_r+0x730>
 4023190:	00800144 	movi	r2,5
 4023194:	1184e10e 	bge	r2,r6,402451c <_dtoa_r+0x166c>
 4023198:	31bfff04 	addi	r6,r6,-4
 402319c:	d9800315 	stw	r6,12(sp)
 40231a0:	0023883a 	mov	r17,zero
 40231a4:	d9800317 	ldw	r6,12(sp)
 40231a8:	008000c4 	movi	r2,3
 40231ac:	30836726 	beq	r6,r2,4023f4c <_dtoa_r+0x109c>
 40231b0:	1183410e 	bge	r2,r6,4023eb8 <_dtoa_r+0x1008>
 40231b4:	d9c00317 	ldw	r7,12(sp)
 40231b8:	00800104 	movi	r2,4
 40231bc:	38827c26 	beq	r7,r2,4023bb0 <_dtoa_r+0xd00>
 40231c0:	00800144 	movi	r2,5
 40231c4:	3884c41e 	bne	r7,r2,40244d8 <_dtoa_r+0x1628>
 40231c8:	00800044 	movi	r2,1
 40231cc:	d8800b15 	stw	r2,44(sp)
 40231d0:	d8c00517 	ldw	r3,20(sp)
 40231d4:	d9002217 	ldw	r4,136(sp)
 40231d8:	1907883a 	add	r3,r3,r4
 40231dc:	19800044 	addi	r6,r3,1
 40231e0:	d8c00c15 	stw	r3,48(sp)
 40231e4:	d9800615 	stw	r6,24(sp)
 40231e8:	0183a40e 	bge	zero,r6,402407c <_dtoa_r+0x11cc>
 40231ec:	d9800617 	ldw	r6,24(sp)
 40231f0:	3021883a 	mov	r16,r6
 40231f4:	e0001115 	stw	zero,68(fp)
 40231f8:	008005c4 	movi	r2,23
 40231fc:	1184c92e 	bgeu	r2,r6,4024524 <_dtoa_r+0x1674>
 4023200:	00c00044 	movi	r3,1
 4023204:	00800104 	movi	r2,4
 4023208:	1085883a 	add	r2,r2,r2
 402320c:	11000504 	addi	r4,r2,20
 4023210:	180b883a 	mov	r5,r3
 4023214:	18c00044 	addi	r3,r3,1
 4023218:	313ffb2e 	bgeu	r6,r4,4023208 <__flash_rwdata_start+0xfffed9b8>
 402321c:	e1401115 	stw	r5,68(fp)
 4023220:	e009883a 	mov	r4,fp
 4023224:	40265680 	call	4026568 <_Balloc>
 4023228:	d8800715 	stw	r2,28(sp)
 402322c:	e0801015 	stw	r2,64(fp)
 4023230:	00800384 	movi	r2,14
 4023234:	1400f736 	bltu	r2,r16,4023614 <_dtoa_r+0x764>
 4023238:	8800f626 	beq	r17,zero,4023614 <_dtoa_r+0x764>
 402323c:	d9c00517 	ldw	r7,20(sp)
 4023240:	01c39a0e 	bge	zero,r7,40240ac <_dtoa_r+0x11fc>
 4023244:	388003cc 	andi	r2,r7,15
 4023248:	100490fa 	slli	r2,r2,3
 402324c:	382bd13a 	srai	r21,r7,4
 4023250:	00c00034 	movhi	r3,0
 4023254:	18c0b604 	addi	r3,r3,728
 4023258:	1885883a 	add	r2,r3,r2
 402325c:	a8c0040c 	andi	r3,r21,16
 4023260:	12400017 	ldw	r9,0(r2)
 4023264:	12000117 	ldw	r8,4(r2)
 4023268:	18037926 	beq	r3,zero,4024050 <_dtoa_r+0x11a0>
 402326c:	00800034 	movhi	r2,0
 4023270:	1080ac04 	addi	r2,r2,688
 4023274:	11800817 	ldw	r6,32(r2)
 4023278:	11c00917 	ldw	r7,36(r2)
 402327c:	9009883a 	mov	r4,r18
 4023280:	980b883a 	mov	r5,r19
 4023284:	da001715 	stw	r8,92(sp)
 4023288:	da401615 	stw	r9,88(sp)
 402328c:	402b4f00 	call	402b4f0 <__divdf3>
 4023290:	da001717 	ldw	r8,92(sp)
 4023294:	da401617 	ldw	r9,88(sp)
 4023298:	ad4003cc 	andi	r21,r21,15
 402329c:	040000c4 	movi	r16,3
 40232a0:	1023883a 	mov	r17,r2
 40232a4:	1829883a 	mov	r20,r3
 40232a8:	a8001126 	beq	r21,zero,40232f0 <_dtoa_r+0x440>
 40232ac:	05c00034 	movhi	r23,0
 40232b0:	bdc0ac04 	addi	r23,r23,688
 40232b4:	4805883a 	mov	r2,r9
 40232b8:	4007883a 	mov	r3,r8
 40232bc:	a980004c 	andi	r6,r21,1
 40232c0:	1009883a 	mov	r4,r2
 40232c4:	a82bd07a 	srai	r21,r21,1
 40232c8:	180b883a 	mov	r5,r3
 40232cc:	30000426 	beq	r6,zero,40232e0 <_dtoa_r+0x430>
 40232d0:	b9800017 	ldw	r6,0(r23)
 40232d4:	b9c00117 	ldw	r7,4(r23)
 40232d8:	84000044 	addi	r16,r16,1
 40232dc:	402c1180 	call	402c118 <__muldf3>
 40232e0:	bdc00204 	addi	r23,r23,8
 40232e4:	a83ff51e 	bne	r21,zero,40232bc <__flash_rwdata_start+0xfffeda6c>
 40232e8:	1013883a 	mov	r9,r2
 40232ec:	1811883a 	mov	r8,r3
 40232f0:	480d883a 	mov	r6,r9
 40232f4:	400f883a 	mov	r7,r8
 40232f8:	8809883a 	mov	r4,r17
 40232fc:	a00b883a 	mov	r5,r20
 4023300:	402b4f00 	call	402b4f0 <__divdf3>
 4023304:	d8800f15 	stw	r2,60(sp)
 4023308:	d8c01015 	stw	r3,64(sp)
 402330c:	d8c00e17 	ldw	r3,56(sp)
 4023310:	18000626 	beq	r3,zero,402332c <_dtoa_r+0x47c>
 4023314:	d9000f17 	ldw	r4,60(sp)
 4023318:	d9401017 	ldw	r5,64(sp)
 402331c:	000d883a 	mov	r6,zero
 4023320:	01cffc34 	movhi	r7,16368
 4023324:	402c0240 	call	402c024 <__ledf2>
 4023328:	10040b16 	blt	r2,zero,4024358 <_dtoa_r+0x14a8>
 402332c:	8009883a 	mov	r4,r16
 4023330:	402d3000 	call	402d300 <__floatsidf>
 4023334:	d9800f17 	ldw	r6,60(sp)
 4023338:	d9c01017 	ldw	r7,64(sp)
 402333c:	1009883a 	mov	r4,r2
 4023340:	180b883a 	mov	r5,r3
 4023344:	402c1180 	call	402c118 <__muldf3>
 4023348:	000d883a 	mov	r6,zero
 402334c:	01d00734 	movhi	r7,16412
 4023350:	1009883a 	mov	r4,r2
 4023354:	180b883a 	mov	r5,r3
 4023358:	402ac440 	call	402ac44 <__adddf3>
 402335c:	1021883a 	mov	r16,r2
 4023360:	d8800617 	ldw	r2,24(sp)
 4023364:	047f3034 	movhi	r17,64704
 4023368:	1c63883a 	add	r17,r3,r17
 402336c:	10031826 	beq	r2,zero,4023fd0 <_dtoa_r+0x1120>
 4023370:	d8c00517 	ldw	r3,20(sp)
 4023374:	db000617 	ldw	r12,24(sp)
 4023378:	d8c01315 	stw	r3,76(sp)
 402337c:	d9000b17 	ldw	r4,44(sp)
 4023380:	20038f26 	beq	r4,zero,40241c0 <_dtoa_r+0x1310>
 4023384:	60bfffc4 	addi	r2,r12,-1
 4023388:	100490fa 	slli	r2,r2,3
 402338c:	00c00034 	movhi	r3,0
 4023390:	18c0b604 	addi	r3,r3,728
 4023394:	1885883a 	add	r2,r3,r2
 4023398:	11800017 	ldw	r6,0(r2)
 402339c:	11c00117 	ldw	r7,4(r2)
 40233a0:	d8800717 	ldw	r2,28(sp)
 40233a4:	0009883a 	mov	r4,zero
 40233a8:	014ff834 	movhi	r5,16352
 40233ac:	db001615 	stw	r12,88(sp)
 40233b0:	15c00044 	addi	r23,r2,1
 40233b4:	402b4f00 	call	402b4f0 <__divdf3>
 40233b8:	800d883a 	mov	r6,r16
 40233bc:	880f883a 	mov	r7,r17
 40233c0:	1009883a 	mov	r4,r2
 40233c4:	180b883a 	mov	r5,r3
 40233c8:	402c9840 	call	402c984 <__subdf3>
 40233cc:	d9401017 	ldw	r5,64(sp)
 40233d0:	d9000f17 	ldw	r4,60(sp)
 40233d4:	102b883a 	mov	r21,r2
 40233d8:	d8c01215 	stw	r3,72(sp)
 40233dc:	402d2800 	call	402d280 <__fixdfsi>
 40233e0:	1009883a 	mov	r4,r2
 40233e4:	1029883a 	mov	r20,r2
 40233e8:	402d3000 	call	402d300 <__floatsidf>
 40233ec:	d9000f17 	ldw	r4,60(sp)
 40233f0:	d9401017 	ldw	r5,64(sp)
 40233f4:	100d883a 	mov	r6,r2
 40233f8:	180f883a 	mov	r7,r3
 40233fc:	402c9840 	call	402c984 <__subdf3>
 4023400:	1823883a 	mov	r17,r3
 4023404:	d8c00717 	ldw	r3,28(sp)
 4023408:	d9401217 	ldw	r5,72(sp)
 402340c:	a2000c04 	addi	r8,r20,48
 4023410:	1021883a 	mov	r16,r2
 4023414:	1a000005 	stb	r8,0(r3)
 4023418:	800d883a 	mov	r6,r16
 402341c:	880f883a 	mov	r7,r17
 4023420:	a809883a 	mov	r4,r21
 4023424:	4029883a 	mov	r20,r8
 4023428:	402bf480 	call	402bf48 <__gedf2>
 402342c:	00841d16 	blt	zero,r2,40244a4 <_dtoa_r+0x15f4>
 4023430:	800d883a 	mov	r6,r16
 4023434:	880f883a 	mov	r7,r17
 4023438:	0009883a 	mov	r4,zero
 402343c:	014ffc34 	movhi	r5,16368
 4023440:	402c9840 	call	402c984 <__subdf3>
 4023444:	d9401217 	ldw	r5,72(sp)
 4023448:	100d883a 	mov	r6,r2
 402344c:	180f883a 	mov	r7,r3
 4023450:	a809883a 	mov	r4,r21
 4023454:	402bf480 	call	402bf48 <__gedf2>
 4023458:	db001617 	ldw	r12,88(sp)
 402345c:	00840e16 	blt	zero,r2,4024498 <_dtoa_r+0x15e8>
 4023460:	00800044 	movi	r2,1
 4023464:	13006b0e 	bge	r2,r12,4023614 <_dtoa_r+0x764>
 4023468:	d9000717 	ldw	r4,28(sp)
 402346c:	dd800f15 	stw	r22,60(sp)
 4023470:	dcc01015 	stw	r19,64(sp)
 4023474:	2319883a 	add	r12,r4,r12
 4023478:	dcc01217 	ldw	r19,72(sp)
 402347c:	602d883a 	mov	r22,r12
 4023480:	dc801215 	stw	r18,72(sp)
 4023484:	b825883a 	mov	r18,r23
 4023488:	00000906 	br	40234b0 <_dtoa_r+0x600>
 402348c:	402c9840 	call	402c984 <__subdf3>
 4023490:	a80d883a 	mov	r6,r21
 4023494:	980f883a 	mov	r7,r19
 4023498:	1009883a 	mov	r4,r2
 402349c:	180b883a 	mov	r5,r3
 40234a0:	402c0240 	call	402c024 <__ledf2>
 40234a4:	1003e816 	blt	r2,zero,4024448 <_dtoa_r+0x1598>
 40234a8:	b825883a 	mov	r18,r23
 40234ac:	bd83e926 	beq	r23,r22,4024454 <_dtoa_r+0x15a4>
 40234b0:	a809883a 	mov	r4,r21
 40234b4:	980b883a 	mov	r5,r19
 40234b8:	000d883a 	mov	r6,zero
 40234bc:	01d00934 	movhi	r7,16420
 40234c0:	402c1180 	call	402c118 <__muldf3>
 40234c4:	000d883a 	mov	r6,zero
 40234c8:	01d00934 	movhi	r7,16420
 40234cc:	8009883a 	mov	r4,r16
 40234d0:	880b883a 	mov	r5,r17
 40234d4:	102b883a 	mov	r21,r2
 40234d8:	1827883a 	mov	r19,r3
 40234dc:	402c1180 	call	402c118 <__muldf3>
 40234e0:	180b883a 	mov	r5,r3
 40234e4:	1009883a 	mov	r4,r2
 40234e8:	1821883a 	mov	r16,r3
 40234ec:	1023883a 	mov	r17,r2
 40234f0:	402d2800 	call	402d280 <__fixdfsi>
 40234f4:	1009883a 	mov	r4,r2
 40234f8:	1029883a 	mov	r20,r2
 40234fc:	402d3000 	call	402d300 <__floatsidf>
 4023500:	8809883a 	mov	r4,r17
 4023504:	800b883a 	mov	r5,r16
 4023508:	100d883a 	mov	r6,r2
 402350c:	180f883a 	mov	r7,r3
 4023510:	402c9840 	call	402c984 <__subdf3>
 4023514:	a5000c04 	addi	r20,r20,48
 4023518:	a80d883a 	mov	r6,r21
 402351c:	980f883a 	mov	r7,r19
 4023520:	1009883a 	mov	r4,r2
 4023524:	180b883a 	mov	r5,r3
 4023528:	95000005 	stb	r20,0(r18)
 402352c:	1021883a 	mov	r16,r2
 4023530:	1823883a 	mov	r17,r3
 4023534:	402c0240 	call	402c024 <__ledf2>
 4023538:	bdc00044 	addi	r23,r23,1
 402353c:	800d883a 	mov	r6,r16
 4023540:	880f883a 	mov	r7,r17
 4023544:	0009883a 	mov	r4,zero
 4023548:	014ffc34 	movhi	r5,16368
 402354c:	103fcf0e 	bge	r2,zero,402348c <__flash_rwdata_start+0xfffedc3c>
 4023550:	d8c01317 	ldw	r3,76(sp)
 4023554:	d8c00515 	stw	r3,20(sp)
 4023558:	d9400917 	ldw	r5,36(sp)
 402355c:	e009883a 	mov	r4,fp
 4023560:	40266100 	call	4026610 <_Bfree>
 4023564:	d9000517 	ldw	r4,20(sp)
 4023568:	d9802317 	ldw	r6,140(sp)
 402356c:	d9c02517 	ldw	r7,148(sp)
 4023570:	b8000005 	stb	zero,0(r23)
 4023574:	20800044 	addi	r2,r4,1
 4023578:	30800015 	stw	r2,0(r6)
 402357c:	3802aa26 	beq	r7,zero,4024028 <_dtoa_r+0x1178>
 4023580:	3dc00015 	stw	r23,0(r7)
 4023584:	d8800717 	ldw	r2,28(sp)
 4023588:	003e7906 	br	4022f70 <__flash_rwdata_start+0xfffed720>
 402358c:	00800434 	movhi	r2,16
 4023590:	10bfffc4 	addi	r2,r2,-1
 4023594:	88a2703a 	and	r17,r17,r2
 4023598:	883e851e 	bne	r17,zero,4022fb0 <__flash_rwdata_start+0xfffed760>
 402359c:	00800034 	movhi	r2,0
 40235a0:	10809704 	addi	r2,r2,604
 40235a4:	003e8406 	br	4022fb8 <__flash_rwdata_start+0xfffed768>
 40235a8:	10c00204 	addi	r3,r2,8
 40235ac:	003e8706 	br	4022fcc <__flash_rwdata_start+0xfffed77c>
 40235b0:	01400434 	movhi	r5,16
 40235b4:	297fffc4 	addi	r5,r5,-1
 40235b8:	994a703a 	and	r5,r19,r5
 40235bc:	9009883a 	mov	r4,r18
 40235c0:	843f0044 	addi	r16,r16,-1023
 40235c4:	294ffc34 	orhi	r5,r5,16368
 40235c8:	dd800217 	ldw	r22,8(sp)
 40235cc:	d8001115 	stw	zero,68(sp)
 40235d0:	003ea506 	br	4023068 <__flash_rwdata_start+0xfffed818>
 40235d4:	00800034 	movhi	r2,0
 40235d8:	10808e04 	addi	r2,r2,568
 40235dc:	003e6406 	br	4022f70 <__flash_rwdata_start+0xfffed720>
 40235e0:	e0001115 	stw	zero,68(fp)
 40235e4:	000b883a 	mov	r5,zero
 40235e8:	e009883a 	mov	r4,fp
 40235ec:	40265680 	call	4026568 <_Balloc>
 40235f0:	01bfffc4 	movi	r6,-1
 40235f4:	01c00044 	movi	r7,1
 40235f8:	d8800715 	stw	r2,28(sp)
 40235fc:	d9800c15 	stw	r6,48(sp)
 4023600:	e0801015 	stw	r2,64(fp)
 4023604:	d8000315 	stw	zero,12(sp)
 4023608:	d9c00b15 	stw	r7,44(sp)
 402360c:	d9800615 	stw	r6,24(sp)
 4023610:	d8002215 	stw	zero,136(sp)
 4023614:	d8800117 	ldw	r2,4(sp)
 4023618:	10008916 	blt	r2,zero,4023840 <_dtoa_r+0x990>
 402361c:	d9000517 	ldw	r4,20(sp)
 4023620:	00c00384 	movi	r3,14
 4023624:	19008616 	blt	r3,r4,4023840 <_dtoa_r+0x990>
 4023628:	200490fa 	slli	r2,r4,3
 402362c:	00c00034 	movhi	r3,0
 4023630:	d9802217 	ldw	r6,136(sp)
 4023634:	18c0b604 	addi	r3,r3,728
 4023638:	1885883a 	add	r2,r3,r2
 402363c:	14000017 	ldw	r16,0(r2)
 4023640:	14400117 	ldw	r17,4(r2)
 4023644:	30016316 	blt	r6,zero,4023bd4 <_dtoa_r+0xd24>
 4023648:	800d883a 	mov	r6,r16
 402364c:	880f883a 	mov	r7,r17
 4023650:	9009883a 	mov	r4,r18
 4023654:	980b883a 	mov	r5,r19
 4023658:	402b4f00 	call	402b4f0 <__divdf3>
 402365c:	180b883a 	mov	r5,r3
 4023660:	1009883a 	mov	r4,r2
 4023664:	402d2800 	call	402d280 <__fixdfsi>
 4023668:	1009883a 	mov	r4,r2
 402366c:	102b883a 	mov	r21,r2
 4023670:	402d3000 	call	402d300 <__floatsidf>
 4023674:	800d883a 	mov	r6,r16
 4023678:	880f883a 	mov	r7,r17
 402367c:	1009883a 	mov	r4,r2
 4023680:	180b883a 	mov	r5,r3
 4023684:	402c1180 	call	402c118 <__muldf3>
 4023688:	100d883a 	mov	r6,r2
 402368c:	180f883a 	mov	r7,r3
 4023690:	9009883a 	mov	r4,r18
 4023694:	980b883a 	mov	r5,r19
 4023698:	402c9840 	call	402c984 <__subdf3>
 402369c:	d9c00717 	ldw	r7,28(sp)
 40236a0:	1009883a 	mov	r4,r2
 40236a4:	a8800c04 	addi	r2,r21,48
 40236a8:	38800005 	stb	r2,0(r7)
 40236ac:	3dc00044 	addi	r23,r7,1
 40236b0:	d9c00617 	ldw	r7,24(sp)
 40236b4:	01800044 	movi	r6,1
 40236b8:	180b883a 	mov	r5,r3
 40236bc:	2005883a 	mov	r2,r4
 40236c0:	39803826 	beq	r7,r6,40237a4 <_dtoa_r+0x8f4>
 40236c4:	000d883a 	mov	r6,zero
 40236c8:	01d00934 	movhi	r7,16420
 40236cc:	402c1180 	call	402c118 <__muldf3>
 40236d0:	000d883a 	mov	r6,zero
 40236d4:	000f883a 	mov	r7,zero
 40236d8:	1009883a 	mov	r4,r2
 40236dc:	180b883a 	mov	r5,r3
 40236e0:	1025883a 	mov	r18,r2
 40236e4:	1827883a 	mov	r19,r3
 40236e8:	402bec00 	call	402bec0 <__eqdf2>
 40236ec:	103f9a26 	beq	r2,zero,4023558 <__flash_rwdata_start+0xfffedd08>
 40236f0:	d9c00617 	ldw	r7,24(sp)
 40236f4:	d8c00717 	ldw	r3,28(sp)
 40236f8:	b829883a 	mov	r20,r23
 40236fc:	38bfffc4 	addi	r2,r7,-1
 4023700:	18ad883a 	add	r22,r3,r2
 4023704:	00000a06 	br	4023730 <_dtoa_r+0x880>
 4023708:	402c1180 	call	402c118 <__muldf3>
 402370c:	000d883a 	mov	r6,zero
 4023710:	000f883a 	mov	r7,zero
 4023714:	1009883a 	mov	r4,r2
 4023718:	180b883a 	mov	r5,r3
 402371c:	1025883a 	mov	r18,r2
 4023720:	1827883a 	mov	r19,r3
 4023724:	b829883a 	mov	r20,r23
 4023728:	402bec00 	call	402bec0 <__eqdf2>
 402372c:	103f8a26 	beq	r2,zero,4023558 <__flash_rwdata_start+0xfffedd08>
 4023730:	800d883a 	mov	r6,r16
 4023734:	880f883a 	mov	r7,r17
 4023738:	9009883a 	mov	r4,r18
 402373c:	980b883a 	mov	r5,r19
 4023740:	402b4f00 	call	402b4f0 <__divdf3>
 4023744:	180b883a 	mov	r5,r3
 4023748:	1009883a 	mov	r4,r2
 402374c:	402d2800 	call	402d280 <__fixdfsi>
 4023750:	1009883a 	mov	r4,r2
 4023754:	102b883a 	mov	r21,r2
 4023758:	402d3000 	call	402d300 <__floatsidf>
 402375c:	800d883a 	mov	r6,r16
 4023760:	880f883a 	mov	r7,r17
 4023764:	1009883a 	mov	r4,r2
 4023768:	180b883a 	mov	r5,r3
 402376c:	402c1180 	call	402c118 <__muldf3>
 4023770:	100d883a 	mov	r6,r2
 4023774:	180f883a 	mov	r7,r3
 4023778:	9009883a 	mov	r4,r18
 402377c:	980b883a 	mov	r5,r19
 4023780:	402c9840 	call	402c984 <__subdf3>
 4023784:	aa000c04 	addi	r8,r21,48
 4023788:	a2000005 	stb	r8,0(r20)
 402378c:	000d883a 	mov	r6,zero
 4023790:	01d00934 	movhi	r7,16420
 4023794:	1009883a 	mov	r4,r2
 4023798:	180b883a 	mov	r5,r3
 402379c:	a5c00044 	addi	r23,r20,1
 40237a0:	b53fd91e 	bne	r22,r20,4023708 <__flash_rwdata_start+0xfffedeb8>
 40237a4:	100d883a 	mov	r6,r2
 40237a8:	180f883a 	mov	r7,r3
 40237ac:	1009883a 	mov	r4,r2
 40237b0:	180b883a 	mov	r5,r3
 40237b4:	402ac440 	call	402ac44 <__adddf3>
 40237b8:	100d883a 	mov	r6,r2
 40237bc:	180f883a 	mov	r7,r3
 40237c0:	8009883a 	mov	r4,r16
 40237c4:	880b883a 	mov	r5,r17
 40237c8:	1027883a 	mov	r19,r2
 40237cc:	1825883a 	mov	r18,r3
 40237d0:	402c0240 	call	402c024 <__ledf2>
 40237d4:	10000816 	blt	r2,zero,40237f8 <_dtoa_r+0x948>
 40237d8:	980d883a 	mov	r6,r19
 40237dc:	900f883a 	mov	r7,r18
 40237e0:	8009883a 	mov	r4,r16
 40237e4:	880b883a 	mov	r5,r17
 40237e8:	402bec00 	call	402bec0 <__eqdf2>
 40237ec:	103f5a1e 	bne	r2,zero,4023558 <__flash_rwdata_start+0xfffedd08>
 40237f0:	ad40004c 	andi	r21,r21,1
 40237f4:	a83f5826 	beq	r21,zero,4023558 <__flash_rwdata_start+0xfffedd08>
 40237f8:	bd3fffc3 	ldbu	r20,-1(r23)
 40237fc:	b8bfffc4 	addi	r2,r23,-1
 4023800:	1007883a 	mov	r3,r2
 4023804:	01400e44 	movi	r5,57
 4023808:	d9800717 	ldw	r6,28(sp)
 402380c:	00000506 	br	4023824 <_dtoa_r+0x974>
 4023810:	18ffffc4 	addi	r3,r3,-1
 4023814:	11824726 	beq	r2,r6,4024134 <_dtoa_r+0x1284>
 4023818:	1d000003 	ldbu	r20,0(r3)
 402381c:	102f883a 	mov	r23,r2
 4023820:	10bfffc4 	addi	r2,r2,-1
 4023824:	a1003fcc 	andi	r4,r20,255
 4023828:	2100201c 	xori	r4,r4,128
 402382c:	213fe004 	addi	r4,r4,-128
 4023830:	217ff726 	beq	r4,r5,4023810 <__flash_rwdata_start+0xfffedfc0>
 4023834:	a2000044 	addi	r8,r20,1
 4023838:	12000005 	stb	r8,0(r2)
 402383c:	003f4606 	br	4023558 <__flash_rwdata_start+0xfffedd08>
 4023840:	d9000b17 	ldw	r4,44(sp)
 4023844:	2000c826 	beq	r4,zero,4023b68 <_dtoa_r+0xcb8>
 4023848:	d9800317 	ldw	r6,12(sp)
 402384c:	00c00044 	movi	r3,1
 4023850:	1980f90e 	bge	r3,r6,4023c38 <_dtoa_r+0xd88>
 4023854:	d8800617 	ldw	r2,24(sp)
 4023858:	d8c00a17 	ldw	r3,40(sp)
 402385c:	157fffc4 	addi	r21,r2,-1
 4023860:	1d41f316 	blt	r3,r21,4024030 <_dtoa_r+0x1180>
 4023864:	1d6bc83a 	sub	r21,r3,r21
 4023868:	d9c00617 	ldw	r7,24(sp)
 402386c:	3802aa16 	blt	r7,zero,4024318 <_dtoa_r+0x1468>
 4023870:	dd000817 	ldw	r20,32(sp)
 4023874:	d8800617 	ldw	r2,24(sp)
 4023878:	d8c00817 	ldw	r3,32(sp)
 402387c:	01400044 	movi	r5,1
 4023880:	e009883a 	mov	r4,fp
 4023884:	1887883a 	add	r3,r3,r2
 4023888:	d8c00815 	stw	r3,32(sp)
 402388c:	b0ad883a 	add	r22,r22,r2
 4023890:	402699c0 	call	402699c <__i2b>
 4023894:	1023883a 	mov	r17,r2
 4023898:	a0000826 	beq	r20,zero,40238bc <_dtoa_r+0xa0c>
 402389c:	0580070e 	bge	zero,r22,40238bc <_dtoa_r+0xa0c>
 40238a0:	a005883a 	mov	r2,r20
 40238a4:	b500b916 	blt	r22,r20,4023b8c <_dtoa_r+0xcdc>
 40238a8:	d9000817 	ldw	r4,32(sp)
 40238ac:	a0a9c83a 	sub	r20,r20,r2
 40238b0:	b0adc83a 	sub	r22,r22,r2
 40238b4:	2089c83a 	sub	r4,r4,r2
 40238b8:	d9000815 	stw	r4,32(sp)
 40238bc:	d9800a17 	ldw	r6,40(sp)
 40238c0:	0181810e 	bge	zero,r6,4023ec8 <_dtoa_r+0x1018>
 40238c4:	d9c00b17 	ldw	r7,44(sp)
 40238c8:	3800b326 	beq	r7,zero,4023b98 <_dtoa_r+0xce8>
 40238cc:	a800b226 	beq	r21,zero,4023b98 <_dtoa_r+0xce8>
 40238d0:	880b883a 	mov	r5,r17
 40238d4:	a80d883a 	mov	r6,r21
 40238d8:	e009883a 	mov	r4,fp
 40238dc:	4026c640 	call	4026c64 <__pow5mult>
 40238e0:	d9800917 	ldw	r6,36(sp)
 40238e4:	100b883a 	mov	r5,r2
 40238e8:	e009883a 	mov	r4,fp
 40238ec:	1023883a 	mov	r17,r2
 40238f0:	40269d80 	call	40269d8 <__multiply>
 40238f4:	1021883a 	mov	r16,r2
 40238f8:	d8800a17 	ldw	r2,40(sp)
 40238fc:	d9400917 	ldw	r5,36(sp)
 4023900:	e009883a 	mov	r4,fp
 4023904:	1545c83a 	sub	r2,r2,r21
 4023908:	d8800a15 	stw	r2,40(sp)
 402390c:	40266100 	call	4026610 <_Bfree>
 4023910:	d8c00a17 	ldw	r3,40(sp)
 4023914:	18009f1e 	bne	r3,zero,4023b94 <_dtoa_r+0xce4>
 4023918:	05c00044 	movi	r23,1
 402391c:	e009883a 	mov	r4,fp
 4023920:	b80b883a 	mov	r5,r23
 4023924:	402699c0 	call	402699c <__i2b>
 4023928:	d9000d17 	ldw	r4,52(sp)
 402392c:	102b883a 	mov	r21,r2
 4023930:	2000ce26 	beq	r4,zero,4023c6c <_dtoa_r+0xdbc>
 4023934:	200d883a 	mov	r6,r4
 4023938:	100b883a 	mov	r5,r2
 402393c:	e009883a 	mov	r4,fp
 4023940:	4026c640 	call	4026c64 <__pow5mult>
 4023944:	d9800317 	ldw	r6,12(sp)
 4023948:	102b883a 	mov	r21,r2
 402394c:	b981810e 	bge	r23,r6,4023f54 <_dtoa_r+0x10a4>
 4023950:	0027883a 	mov	r19,zero
 4023954:	a8800417 	ldw	r2,16(r21)
 4023958:	05c00804 	movi	r23,32
 402395c:	10800104 	addi	r2,r2,4
 4023960:	1085883a 	add	r2,r2,r2
 4023964:	1085883a 	add	r2,r2,r2
 4023968:	a885883a 	add	r2,r21,r2
 402396c:	11000017 	ldw	r4,0(r2)
 4023970:	40268840 	call	4026884 <__hi0bits>
 4023974:	b885c83a 	sub	r2,r23,r2
 4023978:	1585883a 	add	r2,r2,r22
 402397c:	108007cc 	andi	r2,r2,31
 4023980:	1000b326 	beq	r2,zero,4023c50 <_dtoa_r+0xda0>
 4023984:	00c00804 	movi	r3,32
 4023988:	1887c83a 	sub	r3,r3,r2
 402398c:	01000104 	movi	r4,4
 4023990:	20c2cd0e 	bge	r4,r3,40244c8 <_dtoa_r+0x1618>
 4023994:	00c00704 	movi	r3,28
 4023998:	1885c83a 	sub	r2,r3,r2
 402399c:	d8c00817 	ldw	r3,32(sp)
 40239a0:	a0a9883a 	add	r20,r20,r2
 40239a4:	b0ad883a 	add	r22,r22,r2
 40239a8:	1887883a 	add	r3,r3,r2
 40239ac:	d8c00815 	stw	r3,32(sp)
 40239b0:	d9800817 	ldw	r6,32(sp)
 40239b4:	0180040e 	bge	zero,r6,40239c8 <_dtoa_r+0xb18>
 40239b8:	800b883a 	mov	r5,r16
 40239bc:	e009883a 	mov	r4,fp
 40239c0:	4026da40 	call	4026da4 <__lshift>
 40239c4:	1021883a 	mov	r16,r2
 40239c8:	0580050e 	bge	zero,r22,40239e0 <_dtoa_r+0xb30>
 40239cc:	a80b883a 	mov	r5,r21
 40239d0:	b00d883a 	mov	r6,r22
 40239d4:	e009883a 	mov	r4,fp
 40239d8:	4026da40 	call	4026da4 <__lshift>
 40239dc:	102b883a 	mov	r21,r2
 40239e0:	d9c00e17 	ldw	r7,56(sp)
 40239e4:	3801211e 	bne	r7,zero,4023e6c <_dtoa_r+0xfbc>
 40239e8:	d9800617 	ldw	r6,24(sp)
 40239ec:	0181380e 	bge	zero,r6,4023ed0 <_dtoa_r+0x1020>
 40239f0:	d8c00b17 	ldw	r3,44(sp)
 40239f4:	1800ab1e 	bne	r3,zero,4023ca4 <_dtoa_r+0xdf4>
 40239f8:	dc800717 	ldw	r18,28(sp)
 40239fc:	dcc00617 	ldw	r19,24(sp)
 4023a00:	9029883a 	mov	r20,r18
 4023a04:	00000206 	br	4023a10 <_dtoa_r+0xb60>
 4023a08:	40266380 	call	4026638 <__multadd>
 4023a0c:	1021883a 	mov	r16,r2
 4023a10:	a80b883a 	mov	r5,r21
 4023a14:	8009883a 	mov	r4,r16
 4023a18:	4022c880 	call	4022c88 <quorem>
 4023a1c:	10800c04 	addi	r2,r2,48
 4023a20:	90800005 	stb	r2,0(r18)
 4023a24:	94800044 	addi	r18,r18,1
 4023a28:	9507c83a 	sub	r3,r18,r20
 4023a2c:	000f883a 	mov	r7,zero
 4023a30:	01800284 	movi	r6,10
 4023a34:	800b883a 	mov	r5,r16
 4023a38:	e009883a 	mov	r4,fp
 4023a3c:	1cfff216 	blt	r3,r19,4023a08 <__flash_rwdata_start+0xfffee1b8>
 4023a40:	1011883a 	mov	r8,r2
 4023a44:	d8800617 	ldw	r2,24(sp)
 4023a48:	0082370e 	bge	zero,r2,4024328 <_dtoa_r+0x1478>
 4023a4c:	d9000717 	ldw	r4,28(sp)
 4023a50:	0025883a 	mov	r18,zero
 4023a54:	20af883a 	add	r23,r4,r2
 4023a58:	01800044 	movi	r6,1
 4023a5c:	800b883a 	mov	r5,r16
 4023a60:	e009883a 	mov	r4,fp
 4023a64:	da001715 	stw	r8,92(sp)
 4023a68:	4026da40 	call	4026da4 <__lshift>
 4023a6c:	a80b883a 	mov	r5,r21
 4023a70:	1009883a 	mov	r4,r2
 4023a74:	d8800915 	stw	r2,36(sp)
 4023a78:	4026eec0 	call	4026eec <__mcmp>
 4023a7c:	da001717 	ldw	r8,92(sp)
 4023a80:	0081800e 	bge	zero,r2,4024084 <_dtoa_r+0x11d4>
 4023a84:	b93fffc3 	ldbu	r4,-1(r23)
 4023a88:	b8bfffc4 	addi	r2,r23,-1
 4023a8c:	1007883a 	mov	r3,r2
 4023a90:	01800e44 	movi	r6,57
 4023a94:	d9c00717 	ldw	r7,28(sp)
 4023a98:	00000506 	br	4023ab0 <_dtoa_r+0xc00>
 4023a9c:	18ffffc4 	addi	r3,r3,-1
 4023aa0:	11c12326 	beq	r2,r7,4023f30 <_dtoa_r+0x1080>
 4023aa4:	19000003 	ldbu	r4,0(r3)
 4023aa8:	102f883a 	mov	r23,r2
 4023aac:	10bfffc4 	addi	r2,r2,-1
 4023ab0:	21403fcc 	andi	r5,r4,255
 4023ab4:	2940201c 	xori	r5,r5,128
 4023ab8:	297fe004 	addi	r5,r5,-128
 4023abc:	29bff726 	beq	r5,r6,4023a9c <__flash_rwdata_start+0xfffee24c>
 4023ac0:	21000044 	addi	r4,r4,1
 4023ac4:	11000005 	stb	r4,0(r2)
 4023ac8:	a80b883a 	mov	r5,r21
 4023acc:	e009883a 	mov	r4,fp
 4023ad0:	40266100 	call	4026610 <_Bfree>
 4023ad4:	883ea026 	beq	r17,zero,4023558 <__flash_rwdata_start+0xfffedd08>
 4023ad8:	90000426 	beq	r18,zero,4023aec <_dtoa_r+0xc3c>
 4023adc:	94400326 	beq	r18,r17,4023aec <_dtoa_r+0xc3c>
 4023ae0:	900b883a 	mov	r5,r18
 4023ae4:	e009883a 	mov	r4,fp
 4023ae8:	40266100 	call	4026610 <_Bfree>
 4023aec:	880b883a 	mov	r5,r17
 4023af0:	e009883a 	mov	r4,fp
 4023af4:	40266100 	call	4026610 <_Bfree>
 4023af8:	003e9706 	br	4023558 <__flash_rwdata_start+0xfffedd08>
 4023afc:	01800044 	movi	r6,1
 4023b00:	d9800e15 	stw	r6,56(sp)
 4023b04:	003d9606 	br	4023160 <__flash_rwdata_start+0xfffed910>
 4023b08:	d8800817 	ldw	r2,32(sp)
 4023b0c:	d8c00517 	ldw	r3,20(sp)
 4023b10:	d8000d15 	stw	zero,52(sp)
 4023b14:	10c5c83a 	sub	r2,r2,r3
 4023b18:	00c9c83a 	sub	r4,zero,r3
 4023b1c:	d8800815 	stw	r2,32(sp)
 4023b20:	d9000a15 	stw	r4,40(sp)
 4023b24:	003d9706 	br	4023184 <__flash_rwdata_start+0xfffed934>
 4023b28:	05adc83a 	sub	r22,zero,r22
 4023b2c:	dd800815 	stw	r22,32(sp)
 4023b30:	002d883a 	mov	r22,zero
 4023b34:	003d8e06 	br	4023170 <__flash_rwdata_start+0xfffed920>
 4023b38:	d9000517 	ldw	r4,20(sp)
 4023b3c:	402d3000 	call	402d300 <__floatsidf>
 4023b40:	100d883a 	mov	r6,r2
 4023b44:	180f883a 	mov	r7,r3
 4023b48:	a009883a 	mov	r4,r20
 4023b4c:	880b883a 	mov	r5,r17
 4023b50:	402bec00 	call	402bec0 <__eqdf2>
 4023b54:	103d7126 	beq	r2,zero,402311c <__flash_rwdata_start+0xfffed8cc>
 4023b58:	d9c00517 	ldw	r7,20(sp)
 4023b5c:	39ffffc4 	addi	r7,r7,-1
 4023b60:	d9c00515 	stw	r7,20(sp)
 4023b64:	003d6d06 	br	402311c <__flash_rwdata_start+0xfffed8cc>
 4023b68:	dd400a17 	ldw	r21,40(sp)
 4023b6c:	dd000817 	ldw	r20,32(sp)
 4023b70:	0023883a 	mov	r17,zero
 4023b74:	003f4806 	br	4023898 <__flash_rwdata_start+0xfffee048>
 4023b78:	10e3c83a 	sub	r17,r2,r3
 4023b7c:	9448983a 	sll	r4,r18,r17
 4023b80:	003d3206 	br	402304c <__flash_rwdata_start+0xfffed7fc>
 4023b84:	d8000e15 	stw	zero,56(sp)
 4023b88:	003d7506 	br	4023160 <__flash_rwdata_start+0xfffed910>
 4023b8c:	b005883a 	mov	r2,r22
 4023b90:	003f4506 	br	40238a8 <__flash_rwdata_start+0xfffee058>
 4023b94:	dc000915 	stw	r16,36(sp)
 4023b98:	d9800a17 	ldw	r6,40(sp)
 4023b9c:	d9400917 	ldw	r5,36(sp)
 4023ba0:	e009883a 	mov	r4,fp
 4023ba4:	4026c640 	call	4026c64 <__pow5mult>
 4023ba8:	1021883a 	mov	r16,r2
 4023bac:	003f5a06 	br	4023918 <__flash_rwdata_start+0xfffee0c8>
 4023bb0:	01c00044 	movi	r7,1
 4023bb4:	d9c00b15 	stw	r7,44(sp)
 4023bb8:	d8802217 	ldw	r2,136(sp)
 4023bbc:	0081280e 	bge	zero,r2,4024060 <_dtoa_r+0x11b0>
 4023bc0:	100d883a 	mov	r6,r2
 4023bc4:	1021883a 	mov	r16,r2
 4023bc8:	d8800c15 	stw	r2,48(sp)
 4023bcc:	d8800615 	stw	r2,24(sp)
 4023bd0:	003d8806 	br	40231f4 <__flash_rwdata_start+0xfffed9a4>
 4023bd4:	d8800617 	ldw	r2,24(sp)
 4023bd8:	00be9b16 	blt	zero,r2,4023648 <__flash_rwdata_start+0xfffeddf8>
 4023bdc:	10010f1e 	bne	r2,zero,402401c <_dtoa_r+0x116c>
 4023be0:	880b883a 	mov	r5,r17
 4023be4:	000d883a 	mov	r6,zero
 4023be8:	01d00534 	movhi	r7,16404
 4023bec:	8009883a 	mov	r4,r16
 4023bf0:	402c1180 	call	402c118 <__muldf3>
 4023bf4:	900d883a 	mov	r6,r18
 4023bf8:	980f883a 	mov	r7,r19
 4023bfc:	1009883a 	mov	r4,r2
 4023c00:	180b883a 	mov	r5,r3
 4023c04:	402bf480 	call	402bf48 <__gedf2>
 4023c08:	002b883a 	mov	r21,zero
 4023c0c:	0023883a 	mov	r17,zero
 4023c10:	1000bf16 	blt	r2,zero,4023f10 <_dtoa_r+0x1060>
 4023c14:	d9802217 	ldw	r6,136(sp)
 4023c18:	ddc00717 	ldw	r23,28(sp)
 4023c1c:	018c303a 	nor	r6,zero,r6
 4023c20:	d9800515 	stw	r6,20(sp)
 4023c24:	a80b883a 	mov	r5,r21
 4023c28:	e009883a 	mov	r4,fp
 4023c2c:	40266100 	call	4026610 <_Bfree>
 4023c30:	883e4926 	beq	r17,zero,4023558 <__flash_rwdata_start+0xfffedd08>
 4023c34:	003fad06 	br	4023aec <__flash_rwdata_start+0xfffee29c>
 4023c38:	d9c01117 	ldw	r7,68(sp)
 4023c3c:	3801bc26 	beq	r7,zero,4024330 <_dtoa_r+0x1480>
 4023c40:	10810cc4 	addi	r2,r2,1075
 4023c44:	dd400a17 	ldw	r21,40(sp)
 4023c48:	dd000817 	ldw	r20,32(sp)
 4023c4c:	003f0a06 	br	4023878 <__flash_rwdata_start+0xfffee028>
 4023c50:	00800704 	movi	r2,28
 4023c54:	d9000817 	ldw	r4,32(sp)
 4023c58:	a0a9883a 	add	r20,r20,r2
 4023c5c:	b0ad883a 	add	r22,r22,r2
 4023c60:	2089883a 	add	r4,r4,r2
 4023c64:	d9000815 	stw	r4,32(sp)
 4023c68:	003f5106 	br	40239b0 <__flash_rwdata_start+0xfffee160>
 4023c6c:	d8c00317 	ldw	r3,12(sp)
 4023c70:	b8c1fc0e 	bge	r23,r3,4024464 <_dtoa_r+0x15b4>
 4023c74:	0027883a 	mov	r19,zero
 4023c78:	b805883a 	mov	r2,r23
 4023c7c:	003f3e06 	br	4023978 <__flash_rwdata_start+0xfffee128>
 4023c80:	880b883a 	mov	r5,r17
 4023c84:	e009883a 	mov	r4,fp
 4023c88:	000f883a 	mov	r7,zero
 4023c8c:	01800284 	movi	r6,10
 4023c90:	40266380 	call	4026638 <__multadd>
 4023c94:	d9000c17 	ldw	r4,48(sp)
 4023c98:	1023883a 	mov	r17,r2
 4023c9c:	0102040e 	bge	zero,r4,40244b0 <_dtoa_r+0x1600>
 4023ca0:	d9000615 	stw	r4,24(sp)
 4023ca4:	0500050e 	bge	zero,r20,4023cbc <_dtoa_r+0xe0c>
 4023ca8:	880b883a 	mov	r5,r17
 4023cac:	a00d883a 	mov	r6,r20
 4023cb0:	e009883a 	mov	r4,fp
 4023cb4:	4026da40 	call	4026da4 <__lshift>
 4023cb8:	1023883a 	mov	r17,r2
 4023cbc:	9801241e 	bne	r19,zero,4024150 <_dtoa_r+0x12a0>
 4023cc0:	8829883a 	mov	r20,r17
 4023cc4:	d9000617 	ldw	r4,24(sp)
 4023cc8:	dcc00717 	ldw	r19,28(sp)
 4023ccc:	9480004c 	andi	r18,r18,1
 4023cd0:	20bfffc4 	addi	r2,r4,-1
 4023cd4:	9885883a 	add	r2,r19,r2
 4023cd8:	d8800415 	stw	r2,16(sp)
 4023cdc:	dc800615 	stw	r18,24(sp)
 4023ce0:	a80b883a 	mov	r5,r21
 4023ce4:	8009883a 	mov	r4,r16
 4023ce8:	4022c880 	call	4022c88 <quorem>
 4023cec:	880b883a 	mov	r5,r17
 4023cf0:	8009883a 	mov	r4,r16
 4023cf4:	102f883a 	mov	r23,r2
 4023cf8:	4026eec0 	call	4026eec <__mcmp>
 4023cfc:	a80b883a 	mov	r5,r21
 4023d00:	a00d883a 	mov	r6,r20
 4023d04:	e009883a 	mov	r4,fp
 4023d08:	102d883a 	mov	r22,r2
 4023d0c:	4026f4c0 	call	4026f4c <__mdiff>
 4023d10:	1007883a 	mov	r3,r2
 4023d14:	10800317 	ldw	r2,12(r2)
 4023d18:	bc800c04 	addi	r18,r23,48
 4023d1c:	180b883a 	mov	r5,r3
 4023d20:	10004e1e 	bne	r2,zero,4023e5c <_dtoa_r+0xfac>
 4023d24:	8009883a 	mov	r4,r16
 4023d28:	d8c01615 	stw	r3,88(sp)
 4023d2c:	4026eec0 	call	4026eec <__mcmp>
 4023d30:	d8c01617 	ldw	r3,88(sp)
 4023d34:	e009883a 	mov	r4,fp
 4023d38:	d8801615 	stw	r2,88(sp)
 4023d3c:	180b883a 	mov	r5,r3
 4023d40:	40266100 	call	4026610 <_Bfree>
 4023d44:	d8801617 	ldw	r2,88(sp)
 4023d48:	1000041e 	bne	r2,zero,4023d5c <_dtoa_r+0xeac>
 4023d4c:	d9800317 	ldw	r6,12(sp)
 4023d50:	3000021e 	bne	r6,zero,4023d5c <_dtoa_r+0xeac>
 4023d54:	d8c00617 	ldw	r3,24(sp)
 4023d58:	18003726 	beq	r3,zero,4023e38 <_dtoa_r+0xf88>
 4023d5c:	b0002016 	blt	r22,zero,4023de0 <_dtoa_r+0xf30>
 4023d60:	b000041e 	bne	r22,zero,4023d74 <_dtoa_r+0xec4>
 4023d64:	d9000317 	ldw	r4,12(sp)
 4023d68:	2000021e 	bne	r4,zero,4023d74 <_dtoa_r+0xec4>
 4023d6c:	d8c00617 	ldw	r3,24(sp)
 4023d70:	18001b26 	beq	r3,zero,4023de0 <_dtoa_r+0xf30>
 4023d74:	00810716 	blt	zero,r2,4024194 <_dtoa_r+0x12e4>
 4023d78:	d8c00417 	ldw	r3,16(sp)
 4023d7c:	9d800044 	addi	r22,r19,1
 4023d80:	9c800005 	stb	r18,0(r19)
 4023d84:	b02f883a 	mov	r23,r22
 4023d88:	98c10626 	beq	r19,r3,40241a4 <_dtoa_r+0x12f4>
 4023d8c:	800b883a 	mov	r5,r16
 4023d90:	000f883a 	mov	r7,zero
 4023d94:	01800284 	movi	r6,10
 4023d98:	e009883a 	mov	r4,fp
 4023d9c:	40266380 	call	4026638 <__multadd>
 4023da0:	1021883a 	mov	r16,r2
 4023da4:	000f883a 	mov	r7,zero
 4023da8:	01800284 	movi	r6,10
 4023dac:	880b883a 	mov	r5,r17
 4023db0:	e009883a 	mov	r4,fp
 4023db4:	8d002526 	beq	r17,r20,4023e4c <_dtoa_r+0xf9c>
 4023db8:	40266380 	call	4026638 <__multadd>
 4023dbc:	a00b883a 	mov	r5,r20
 4023dc0:	000f883a 	mov	r7,zero
 4023dc4:	01800284 	movi	r6,10
 4023dc8:	e009883a 	mov	r4,fp
 4023dcc:	1023883a 	mov	r17,r2
 4023dd0:	40266380 	call	4026638 <__multadd>
 4023dd4:	1029883a 	mov	r20,r2
 4023dd8:	b027883a 	mov	r19,r22
 4023ddc:	003fc006 	br	4023ce0 <__flash_rwdata_start+0xfffee490>
 4023de0:	9011883a 	mov	r8,r18
 4023de4:	00800e0e 	bge	zero,r2,4023e20 <_dtoa_r+0xf70>
 4023de8:	800b883a 	mov	r5,r16
 4023dec:	01800044 	movi	r6,1
 4023df0:	e009883a 	mov	r4,fp
 4023df4:	da001715 	stw	r8,92(sp)
 4023df8:	4026da40 	call	4026da4 <__lshift>
 4023dfc:	a80b883a 	mov	r5,r21
 4023e00:	1009883a 	mov	r4,r2
 4023e04:	1021883a 	mov	r16,r2
 4023e08:	4026eec0 	call	4026eec <__mcmp>
 4023e0c:	da001717 	ldw	r8,92(sp)
 4023e10:	0081960e 	bge	zero,r2,402446c <_dtoa_r+0x15bc>
 4023e14:	00800e44 	movi	r2,57
 4023e18:	40817026 	beq	r8,r2,40243dc <_dtoa_r+0x152c>
 4023e1c:	ba000c44 	addi	r8,r23,49
 4023e20:	8825883a 	mov	r18,r17
 4023e24:	9dc00044 	addi	r23,r19,1
 4023e28:	9a000005 	stb	r8,0(r19)
 4023e2c:	a023883a 	mov	r17,r20
 4023e30:	dc000915 	stw	r16,36(sp)
 4023e34:	003f2406 	br	4023ac8 <__flash_rwdata_start+0xfffee278>
 4023e38:	00800e44 	movi	r2,57
 4023e3c:	9011883a 	mov	r8,r18
 4023e40:	90816626 	beq	r18,r2,40243dc <_dtoa_r+0x152c>
 4023e44:	05bff516 	blt	zero,r22,4023e1c <__flash_rwdata_start+0xfffee5cc>
 4023e48:	003ff506 	br	4023e20 <__flash_rwdata_start+0xfffee5d0>
 4023e4c:	40266380 	call	4026638 <__multadd>
 4023e50:	1023883a 	mov	r17,r2
 4023e54:	1029883a 	mov	r20,r2
 4023e58:	003fdf06 	br	4023dd8 <__flash_rwdata_start+0xfffee588>
 4023e5c:	e009883a 	mov	r4,fp
 4023e60:	40266100 	call	4026610 <_Bfree>
 4023e64:	00800044 	movi	r2,1
 4023e68:	003fbc06 	br	4023d5c <__flash_rwdata_start+0xfffee50c>
 4023e6c:	a80b883a 	mov	r5,r21
 4023e70:	8009883a 	mov	r4,r16
 4023e74:	4026eec0 	call	4026eec <__mcmp>
 4023e78:	103edb0e 	bge	r2,zero,40239e8 <__flash_rwdata_start+0xfffee198>
 4023e7c:	800b883a 	mov	r5,r16
 4023e80:	000f883a 	mov	r7,zero
 4023e84:	01800284 	movi	r6,10
 4023e88:	e009883a 	mov	r4,fp
 4023e8c:	40266380 	call	4026638 <__multadd>
 4023e90:	1021883a 	mov	r16,r2
 4023e94:	d8800517 	ldw	r2,20(sp)
 4023e98:	d8c00b17 	ldw	r3,44(sp)
 4023e9c:	10bfffc4 	addi	r2,r2,-1
 4023ea0:	d8800515 	stw	r2,20(sp)
 4023ea4:	183f761e 	bne	r3,zero,4023c80 <__flash_rwdata_start+0xfffee430>
 4023ea8:	d9000c17 	ldw	r4,48(sp)
 4023eac:	0101730e 	bge	zero,r4,402447c <_dtoa_r+0x15cc>
 4023eb0:	d9000615 	stw	r4,24(sp)
 4023eb4:	003ed006 	br	40239f8 <__flash_rwdata_start+0xfffee1a8>
 4023eb8:	00800084 	movi	r2,2
 4023ebc:	3081861e 	bne	r6,r2,40244d8 <_dtoa_r+0x1628>
 4023ec0:	d8000b15 	stw	zero,44(sp)
 4023ec4:	003f3c06 	br	4023bb8 <__flash_rwdata_start+0xfffee368>
 4023ec8:	dc000917 	ldw	r16,36(sp)
 4023ecc:	003e9206 	br	4023918 <__flash_rwdata_start+0xfffee0c8>
 4023ed0:	d9c00317 	ldw	r7,12(sp)
 4023ed4:	00800084 	movi	r2,2
 4023ed8:	11fec50e 	bge	r2,r7,40239f0 <__flash_rwdata_start+0xfffee1a0>
 4023edc:	d9000617 	ldw	r4,24(sp)
 4023ee0:	20013c1e 	bne	r4,zero,40243d4 <_dtoa_r+0x1524>
 4023ee4:	a80b883a 	mov	r5,r21
 4023ee8:	000f883a 	mov	r7,zero
 4023eec:	01800144 	movi	r6,5
 4023ef0:	e009883a 	mov	r4,fp
 4023ef4:	40266380 	call	4026638 <__multadd>
 4023ef8:	100b883a 	mov	r5,r2
 4023efc:	8009883a 	mov	r4,r16
 4023f00:	102b883a 	mov	r21,r2
 4023f04:	4026eec0 	call	4026eec <__mcmp>
 4023f08:	dc000915 	stw	r16,36(sp)
 4023f0c:	00bf410e 	bge	zero,r2,4023c14 <__flash_rwdata_start+0xfffee3c4>
 4023f10:	d9c00717 	ldw	r7,28(sp)
 4023f14:	00800c44 	movi	r2,49
 4023f18:	38800005 	stb	r2,0(r7)
 4023f1c:	d8800517 	ldw	r2,20(sp)
 4023f20:	3dc00044 	addi	r23,r7,1
 4023f24:	10800044 	addi	r2,r2,1
 4023f28:	d8800515 	stw	r2,20(sp)
 4023f2c:	003f3d06 	br	4023c24 <__flash_rwdata_start+0xfffee3d4>
 4023f30:	d9800517 	ldw	r6,20(sp)
 4023f34:	d9c00717 	ldw	r7,28(sp)
 4023f38:	00800c44 	movi	r2,49
 4023f3c:	31800044 	addi	r6,r6,1
 4023f40:	d9800515 	stw	r6,20(sp)
 4023f44:	38800005 	stb	r2,0(r7)
 4023f48:	003edf06 	br	4023ac8 <__flash_rwdata_start+0xfffee278>
 4023f4c:	d8000b15 	stw	zero,44(sp)
 4023f50:	003c9f06 	br	40231d0 <__flash_rwdata_start+0xfffed980>
 4023f54:	903e7e1e 	bne	r18,zero,4023950 <__flash_rwdata_start+0xfffee100>
 4023f58:	00800434 	movhi	r2,16
 4023f5c:	10bfffc4 	addi	r2,r2,-1
 4023f60:	9884703a 	and	r2,r19,r2
 4023f64:	1000ea1e 	bne	r2,zero,4024310 <_dtoa_r+0x1460>
 4023f68:	9cdffc2c 	andhi	r19,r19,32752
 4023f6c:	9800e826 	beq	r19,zero,4024310 <_dtoa_r+0x1460>
 4023f70:	d9c00817 	ldw	r7,32(sp)
 4023f74:	b5800044 	addi	r22,r22,1
 4023f78:	04c00044 	movi	r19,1
 4023f7c:	39c00044 	addi	r7,r7,1
 4023f80:	d9c00815 	stw	r7,32(sp)
 4023f84:	d8800d17 	ldw	r2,52(sp)
 4023f88:	103e721e 	bne	r2,zero,4023954 <__flash_rwdata_start+0xfffee104>
 4023f8c:	00800044 	movi	r2,1
 4023f90:	003e7906 	br	4023978 <__flash_rwdata_start+0xfffee128>
 4023f94:	8009883a 	mov	r4,r16
 4023f98:	402d3000 	call	402d300 <__floatsidf>
 4023f9c:	d9800f17 	ldw	r6,60(sp)
 4023fa0:	d9c01017 	ldw	r7,64(sp)
 4023fa4:	1009883a 	mov	r4,r2
 4023fa8:	180b883a 	mov	r5,r3
 4023fac:	402c1180 	call	402c118 <__muldf3>
 4023fb0:	000d883a 	mov	r6,zero
 4023fb4:	01d00734 	movhi	r7,16412
 4023fb8:	1009883a 	mov	r4,r2
 4023fbc:	180b883a 	mov	r5,r3
 4023fc0:	402ac440 	call	402ac44 <__adddf3>
 4023fc4:	047f3034 	movhi	r17,64704
 4023fc8:	1021883a 	mov	r16,r2
 4023fcc:	1c63883a 	add	r17,r3,r17
 4023fd0:	d9000f17 	ldw	r4,60(sp)
 4023fd4:	d9401017 	ldw	r5,64(sp)
 4023fd8:	000d883a 	mov	r6,zero
 4023fdc:	01d00534 	movhi	r7,16404
 4023fe0:	402c9840 	call	402c984 <__subdf3>
 4023fe4:	800d883a 	mov	r6,r16
 4023fe8:	880f883a 	mov	r7,r17
 4023fec:	1009883a 	mov	r4,r2
 4023ff0:	180b883a 	mov	r5,r3
 4023ff4:	102b883a 	mov	r21,r2
 4023ff8:	1829883a 	mov	r20,r3
 4023ffc:	402bf480 	call	402bf48 <__gedf2>
 4024000:	00806c16 	blt	zero,r2,40241b4 <_dtoa_r+0x1304>
 4024004:	89e0003c 	xorhi	r7,r17,32768
 4024008:	800d883a 	mov	r6,r16
 402400c:	a809883a 	mov	r4,r21
 4024010:	a00b883a 	mov	r5,r20
 4024014:	402c0240 	call	402c024 <__ledf2>
 4024018:	103d7e0e 	bge	r2,zero,4023614 <__flash_rwdata_start+0xfffeddc4>
 402401c:	002b883a 	mov	r21,zero
 4024020:	0023883a 	mov	r17,zero
 4024024:	003efb06 	br	4023c14 <__flash_rwdata_start+0xfffee3c4>
 4024028:	d8800717 	ldw	r2,28(sp)
 402402c:	003bd006 	br	4022f70 <__flash_rwdata_start+0xfffed720>
 4024030:	d9000a17 	ldw	r4,40(sp)
 4024034:	d9800d17 	ldw	r6,52(sp)
 4024038:	dd400a15 	stw	r21,40(sp)
 402403c:	a905c83a 	sub	r2,r21,r4
 4024040:	308d883a 	add	r6,r6,r2
 4024044:	d9800d15 	stw	r6,52(sp)
 4024048:	002b883a 	mov	r21,zero
 402404c:	003e0606 	br	4023868 <__flash_rwdata_start+0xfffee018>
 4024050:	9023883a 	mov	r17,r18
 4024054:	9829883a 	mov	r20,r19
 4024058:	04000084 	movi	r16,2
 402405c:	003c9206 	br	40232a8 <__flash_rwdata_start+0xfffeda58>
 4024060:	04000044 	movi	r16,1
 4024064:	dc000c15 	stw	r16,48(sp)
 4024068:	dc000615 	stw	r16,24(sp)
 402406c:	dc002215 	stw	r16,136(sp)
 4024070:	e0001115 	stw	zero,68(fp)
 4024074:	000b883a 	mov	r5,zero
 4024078:	003c6906 	br	4023220 <__flash_rwdata_start+0xfffed9d0>
 402407c:	3021883a 	mov	r16,r6
 4024080:	003ffb06 	br	4024070 <__flash_rwdata_start+0xfffee820>
 4024084:	1000021e 	bne	r2,zero,4024090 <_dtoa_r+0x11e0>
 4024088:	4200004c 	andi	r8,r8,1
 402408c:	403e7d1e 	bne	r8,zero,4023a84 <__flash_rwdata_start+0xfffee234>
 4024090:	01000c04 	movi	r4,48
 4024094:	00000106 	br	402409c <_dtoa_r+0x11ec>
 4024098:	102f883a 	mov	r23,r2
 402409c:	b8bfffc4 	addi	r2,r23,-1
 40240a0:	10c00007 	ldb	r3,0(r2)
 40240a4:	193ffc26 	beq	r3,r4,4024098 <__flash_rwdata_start+0xfffee848>
 40240a8:	003e8706 	br	4023ac8 <__flash_rwdata_start+0xfffee278>
 40240ac:	d8800517 	ldw	r2,20(sp)
 40240b0:	00a3c83a 	sub	r17,zero,r2
 40240b4:	8800a426 	beq	r17,zero,4024348 <_dtoa_r+0x1498>
 40240b8:	888003cc 	andi	r2,r17,15
 40240bc:	100490fa 	slli	r2,r2,3
 40240c0:	00c00034 	movhi	r3,0
 40240c4:	18c0b604 	addi	r3,r3,728
 40240c8:	1885883a 	add	r2,r3,r2
 40240cc:	11800017 	ldw	r6,0(r2)
 40240d0:	11c00117 	ldw	r7,4(r2)
 40240d4:	9009883a 	mov	r4,r18
 40240d8:	980b883a 	mov	r5,r19
 40240dc:	8823d13a 	srai	r17,r17,4
 40240e0:	402c1180 	call	402c118 <__muldf3>
 40240e4:	d8800f15 	stw	r2,60(sp)
 40240e8:	d8c01015 	stw	r3,64(sp)
 40240ec:	8800e826 	beq	r17,zero,4024490 <_dtoa_r+0x15e0>
 40240f0:	05000034 	movhi	r20,0
 40240f4:	a500ac04 	addi	r20,r20,688
 40240f8:	04000084 	movi	r16,2
 40240fc:	8980004c 	andi	r6,r17,1
 4024100:	1009883a 	mov	r4,r2
 4024104:	8823d07a 	srai	r17,r17,1
 4024108:	180b883a 	mov	r5,r3
 402410c:	30000426 	beq	r6,zero,4024120 <_dtoa_r+0x1270>
 4024110:	a1800017 	ldw	r6,0(r20)
 4024114:	a1c00117 	ldw	r7,4(r20)
 4024118:	84000044 	addi	r16,r16,1
 402411c:	402c1180 	call	402c118 <__muldf3>
 4024120:	a5000204 	addi	r20,r20,8
 4024124:	883ff51e 	bne	r17,zero,40240fc <__flash_rwdata_start+0xfffee8ac>
 4024128:	d8800f15 	stw	r2,60(sp)
 402412c:	d8c01015 	stw	r3,64(sp)
 4024130:	003c7606 	br	402330c <__flash_rwdata_start+0xfffedabc>
 4024134:	00c00c04 	movi	r3,48
 4024138:	10c00005 	stb	r3,0(r2)
 402413c:	d8c00517 	ldw	r3,20(sp)
 4024140:	bd3fffc3 	ldbu	r20,-1(r23)
 4024144:	18c00044 	addi	r3,r3,1
 4024148:	d8c00515 	stw	r3,20(sp)
 402414c:	003db906 	br	4023834 <__flash_rwdata_start+0xfffedfe4>
 4024150:	89400117 	ldw	r5,4(r17)
 4024154:	e009883a 	mov	r4,fp
 4024158:	40265680 	call	4026568 <_Balloc>
 402415c:	89800417 	ldw	r6,16(r17)
 4024160:	89400304 	addi	r5,r17,12
 4024164:	11000304 	addi	r4,r2,12
 4024168:	31800084 	addi	r6,r6,2
 402416c:	318d883a 	add	r6,r6,r6
 4024170:	318d883a 	add	r6,r6,r6
 4024174:	1027883a 	mov	r19,r2
 4024178:	402619c0 	call	402619c <memcpy>
 402417c:	01800044 	movi	r6,1
 4024180:	980b883a 	mov	r5,r19
 4024184:	e009883a 	mov	r4,fp
 4024188:	4026da40 	call	4026da4 <__lshift>
 402418c:	1029883a 	mov	r20,r2
 4024190:	003ecc06 	br	4023cc4 <__flash_rwdata_start+0xfffee474>
 4024194:	00800e44 	movi	r2,57
 4024198:	90809026 	beq	r18,r2,40243dc <_dtoa_r+0x152c>
 402419c:	92000044 	addi	r8,r18,1
 40241a0:	003f1f06 	br	4023e20 <__flash_rwdata_start+0xfffee5d0>
 40241a4:	9011883a 	mov	r8,r18
 40241a8:	8825883a 	mov	r18,r17
 40241ac:	a023883a 	mov	r17,r20
 40241b0:	003e2906 	br	4023a58 <__flash_rwdata_start+0xfffee208>
 40241b4:	002b883a 	mov	r21,zero
 40241b8:	0023883a 	mov	r17,zero
 40241bc:	003f5406 	br	4023f10 <__flash_rwdata_start+0xfffee6c0>
 40241c0:	61bfffc4 	addi	r6,r12,-1
 40241c4:	300490fa 	slli	r2,r6,3
 40241c8:	00c00034 	movhi	r3,0
 40241cc:	18c0b604 	addi	r3,r3,728
 40241d0:	1885883a 	add	r2,r3,r2
 40241d4:	11000017 	ldw	r4,0(r2)
 40241d8:	11400117 	ldw	r5,4(r2)
 40241dc:	d8800717 	ldw	r2,28(sp)
 40241e0:	880f883a 	mov	r7,r17
 40241e4:	d9801215 	stw	r6,72(sp)
 40241e8:	800d883a 	mov	r6,r16
 40241ec:	db001615 	stw	r12,88(sp)
 40241f0:	15c00044 	addi	r23,r2,1
 40241f4:	402c1180 	call	402c118 <__muldf3>
 40241f8:	d9401017 	ldw	r5,64(sp)
 40241fc:	d9000f17 	ldw	r4,60(sp)
 4024200:	d8c01515 	stw	r3,84(sp)
 4024204:	d8801415 	stw	r2,80(sp)
 4024208:	402d2800 	call	402d280 <__fixdfsi>
 402420c:	1009883a 	mov	r4,r2
 4024210:	1021883a 	mov	r16,r2
 4024214:	402d3000 	call	402d300 <__floatsidf>
 4024218:	d9000f17 	ldw	r4,60(sp)
 402421c:	d9401017 	ldw	r5,64(sp)
 4024220:	100d883a 	mov	r6,r2
 4024224:	180f883a 	mov	r7,r3
 4024228:	402c9840 	call	402c984 <__subdf3>
 402422c:	1829883a 	mov	r20,r3
 4024230:	d8c00717 	ldw	r3,28(sp)
 4024234:	84000c04 	addi	r16,r16,48
 4024238:	1023883a 	mov	r17,r2
 402423c:	1c000005 	stb	r16,0(r3)
 4024240:	db001617 	ldw	r12,88(sp)
 4024244:	00800044 	movi	r2,1
 4024248:	60802226 	beq	r12,r2,40242d4 <_dtoa_r+0x1424>
 402424c:	d9c00717 	ldw	r7,28(sp)
 4024250:	8805883a 	mov	r2,r17
 4024254:	b82b883a 	mov	r21,r23
 4024258:	3b19883a 	add	r12,r7,r12
 402425c:	6023883a 	mov	r17,r12
 4024260:	a007883a 	mov	r3,r20
 4024264:	dc800f15 	stw	r18,60(sp)
 4024268:	000d883a 	mov	r6,zero
 402426c:	01d00934 	movhi	r7,16420
 4024270:	1009883a 	mov	r4,r2
 4024274:	180b883a 	mov	r5,r3
 4024278:	402c1180 	call	402c118 <__muldf3>
 402427c:	180b883a 	mov	r5,r3
 4024280:	1009883a 	mov	r4,r2
 4024284:	1829883a 	mov	r20,r3
 4024288:	1025883a 	mov	r18,r2
 402428c:	402d2800 	call	402d280 <__fixdfsi>
 4024290:	1009883a 	mov	r4,r2
 4024294:	1021883a 	mov	r16,r2
 4024298:	402d3000 	call	402d300 <__floatsidf>
 402429c:	100d883a 	mov	r6,r2
 40242a0:	180f883a 	mov	r7,r3
 40242a4:	9009883a 	mov	r4,r18
 40242a8:	a00b883a 	mov	r5,r20
 40242ac:	84000c04 	addi	r16,r16,48
 40242b0:	402c9840 	call	402c984 <__subdf3>
 40242b4:	ad400044 	addi	r21,r21,1
 40242b8:	ac3fffc5 	stb	r16,-1(r21)
 40242bc:	ac7fea1e 	bne	r21,r17,4024268 <__flash_rwdata_start+0xfffeea18>
 40242c0:	1023883a 	mov	r17,r2
 40242c4:	d8801217 	ldw	r2,72(sp)
 40242c8:	dc800f17 	ldw	r18,60(sp)
 40242cc:	1829883a 	mov	r20,r3
 40242d0:	b8af883a 	add	r23,r23,r2
 40242d4:	d9001417 	ldw	r4,80(sp)
 40242d8:	d9401517 	ldw	r5,84(sp)
 40242dc:	000d883a 	mov	r6,zero
 40242e0:	01cff834 	movhi	r7,16352
 40242e4:	402ac440 	call	402ac44 <__adddf3>
 40242e8:	880d883a 	mov	r6,r17
 40242ec:	a00f883a 	mov	r7,r20
 40242f0:	1009883a 	mov	r4,r2
 40242f4:	180b883a 	mov	r5,r3
 40242f8:	402c0240 	call	402c024 <__ledf2>
 40242fc:	10003e0e 	bge	r2,zero,40243f8 <_dtoa_r+0x1548>
 4024300:	d9001317 	ldw	r4,76(sp)
 4024304:	bd3fffc3 	ldbu	r20,-1(r23)
 4024308:	d9000515 	stw	r4,20(sp)
 402430c:	003d3b06 	br	40237fc <__flash_rwdata_start+0xfffedfac>
 4024310:	0027883a 	mov	r19,zero
 4024314:	003f1b06 	br	4023f84 <__flash_rwdata_start+0xfffee734>
 4024318:	d8800817 	ldw	r2,32(sp)
 402431c:	11e9c83a 	sub	r20,r2,r7
 4024320:	0005883a 	mov	r2,zero
 4024324:	003d5406 	br	4023878 <__flash_rwdata_start+0xfffee028>
 4024328:	00800044 	movi	r2,1
 402432c:	003dc706 	br	4023a4c <__flash_rwdata_start+0xfffee1fc>
 4024330:	d8c00217 	ldw	r3,8(sp)
 4024334:	00800d84 	movi	r2,54
 4024338:	dd400a17 	ldw	r21,40(sp)
 402433c:	10c5c83a 	sub	r2,r2,r3
 4024340:	dd000817 	ldw	r20,32(sp)
 4024344:	003d4c06 	br	4023878 <__flash_rwdata_start+0xfffee028>
 4024348:	dc800f15 	stw	r18,60(sp)
 402434c:	dcc01015 	stw	r19,64(sp)
 4024350:	04000084 	movi	r16,2
 4024354:	003bed06 	br	402330c <__flash_rwdata_start+0xfffedabc>
 4024358:	d9000617 	ldw	r4,24(sp)
 402435c:	203f0d26 	beq	r4,zero,4023f94 <__flash_rwdata_start+0xfffee744>
 4024360:	d9800c17 	ldw	r6,48(sp)
 4024364:	01bcab0e 	bge	zero,r6,4023614 <__flash_rwdata_start+0xfffeddc4>
 4024368:	d9401017 	ldw	r5,64(sp)
 402436c:	d9000f17 	ldw	r4,60(sp)
 4024370:	000d883a 	mov	r6,zero
 4024374:	01d00934 	movhi	r7,16420
 4024378:	402c1180 	call	402c118 <__muldf3>
 402437c:	81000044 	addi	r4,r16,1
 4024380:	d8800f15 	stw	r2,60(sp)
 4024384:	d8c01015 	stw	r3,64(sp)
 4024388:	402d3000 	call	402d300 <__floatsidf>
 402438c:	d9800f17 	ldw	r6,60(sp)
 4024390:	d9c01017 	ldw	r7,64(sp)
 4024394:	1009883a 	mov	r4,r2
 4024398:	180b883a 	mov	r5,r3
 402439c:	402c1180 	call	402c118 <__muldf3>
 40243a0:	01d00734 	movhi	r7,16412
 40243a4:	000d883a 	mov	r6,zero
 40243a8:	1009883a 	mov	r4,r2
 40243ac:	180b883a 	mov	r5,r3
 40243b0:	402ac440 	call	402ac44 <__adddf3>
 40243b4:	d9c00517 	ldw	r7,20(sp)
 40243b8:	047f3034 	movhi	r17,64704
 40243bc:	1021883a 	mov	r16,r2
 40243c0:	39ffffc4 	addi	r7,r7,-1
 40243c4:	d9c01315 	stw	r7,76(sp)
 40243c8:	1c63883a 	add	r17,r3,r17
 40243cc:	db000c17 	ldw	r12,48(sp)
 40243d0:	003bea06 	br	402337c <__flash_rwdata_start+0xfffedb2c>
 40243d4:	dc000915 	stw	r16,36(sp)
 40243d8:	003e0e06 	br	4023c14 <__flash_rwdata_start+0xfffee3c4>
 40243dc:	01000e44 	movi	r4,57
 40243e0:	8825883a 	mov	r18,r17
 40243e4:	9dc00044 	addi	r23,r19,1
 40243e8:	99000005 	stb	r4,0(r19)
 40243ec:	a023883a 	mov	r17,r20
 40243f0:	dc000915 	stw	r16,36(sp)
 40243f4:	003da406 	br	4023a88 <__flash_rwdata_start+0xfffee238>
 40243f8:	d9801417 	ldw	r6,80(sp)
 40243fc:	d9c01517 	ldw	r7,84(sp)
 4024400:	0009883a 	mov	r4,zero
 4024404:	014ff834 	movhi	r5,16352
 4024408:	402c9840 	call	402c984 <__subdf3>
 402440c:	880d883a 	mov	r6,r17
 4024410:	a00f883a 	mov	r7,r20
 4024414:	1009883a 	mov	r4,r2
 4024418:	180b883a 	mov	r5,r3
 402441c:	402bf480 	call	402bf48 <__gedf2>
 4024420:	00bc7c0e 	bge	zero,r2,4023614 <__flash_rwdata_start+0xfffeddc4>
 4024424:	01000c04 	movi	r4,48
 4024428:	00000106 	br	4024430 <_dtoa_r+0x1580>
 402442c:	102f883a 	mov	r23,r2
 4024430:	b8bfffc4 	addi	r2,r23,-1
 4024434:	10c00007 	ldb	r3,0(r2)
 4024438:	193ffc26 	beq	r3,r4,402442c <__flash_rwdata_start+0xfffeebdc>
 402443c:	d9801317 	ldw	r6,76(sp)
 4024440:	d9800515 	stw	r6,20(sp)
 4024444:	003c4406 	br	4023558 <__flash_rwdata_start+0xfffedd08>
 4024448:	d9801317 	ldw	r6,76(sp)
 402444c:	d9800515 	stw	r6,20(sp)
 4024450:	003cea06 	br	40237fc <__flash_rwdata_start+0xfffedfac>
 4024454:	dd800f17 	ldw	r22,60(sp)
 4024458:	dcc01017 	ldw	r19,64(sp)
 402445c:	dc801217 	ldw	r18,72(sp)
 4024460:	003c6c06 	br	4023614 <__flash_rwdata_start+0xfffeddc4>
 4024464:	903e031e 	bne	r18,zero,4023c74 <__flash_rwdata_start+0xfffee424>
 4024468:	003ebb06 	br	4023f58 <__flash_rwdata_start+0xfffee708>
 402446c:	103e6c1e 	bne	r2,zero,4023e20 <__flash_rwdata_start+0xfffee5d0>
 4024470:	4080004c 	andi	r2,r8,1
 4024474:	103e6a26 	beq	r2,zero,4023e20 <__flash_rwdata_start+0xfffee5d0>
 4024478:	003e6606 	br	4023e14 <__flash_rwdata_start+0xfffee5c4>
 402447c:	d8c00317 	ldw	r3,12(sp)
 4024480:	00800084 	movi	r2,2
 4024484:	10c02916 	blt	r2,r3,402452c <_dtoa_r+0x167c>
 4024488:	d9000c17 	ldw	r4,48(sp)
 402448c:	003e8806 	br	4023eb0 <__flash_rwdata_start+0xfffee660>
 4024490:	04000084 	movi	r16,2
 4024494:	003b9d06 	br	402330c <__flash_rwdata_start+0xfffedabc>
 4024498:	d9001317 	ldw	r4,76(sp)
 402449c:	d9000515 	stw	r4,20(sp)
 40244a0:	003cd606 	br	40237fc <__flash_rwdata_start+0xfffedfac>
 40244a4:	d8801317 	ldw	r2,76(sp)
 40244a8:	d8800515 	stw	r2,20(sp)
 40244ac:	003c2a06 	br	4023558 <__flash_rwdata_start+0xfffedd08>
 40244b0:	d9800317 	ldw	r6,12(sp)
 40244b4:	00800084 	movi	r2,2
 40244b8:	11801516 	blt	r2,r6,4024510 <_dtoa_r+0x1660>
 40244bc:	d9c00c17 	ldw	r7,48(sp)
 40244c0:	d9c00615 	stw	r7,24(sp)
 40244c4:	003df706 	br	4023ca4 <__flash_rwdata_start+0xfffee454>
 40244c8:	193d3926 	beq	r3,r4,40239b0 <__flash_rwdata_start+0xfffee160>
 40244cc:	00c00f04 	movi	r3,60
 40244d0:	1885c83a 	sub	r2,r3,r2
 40244d4:	003ddf06 	br	4023c54 <__flash_rwdata_start+0xfffee404>
 40244d8:	e009883a 	mov	r4,fp
 40244dc:	e0001115 	stw	zero,68(fp)
 40244e0:	000b883a 	mov	r5,zero
 40244e4:	40265680 	call	4026568 <_Balloc>
 40244e8:	d8800715 	stw	r2,28(sp)
 40244ec:	d8c00717 	ldw	r3,28(sp)
 40244f0:	00bfffc4 	movi	r2,-1
 40244f4:	01000044 	movi	r4,1
 40244f8:	d8800c15 	stw	r2,48(sp)
 40244fc:	e0c01015 	stw	r3,64(fp)
 4024500:	d9000b15 	stw	r4,44(sp)
 4024504:	d8800615 	stw	r2,24(sp)
 4024508:	d8002215 	stw	zero,136(sp)
 402450c:	003c4106 	br	4023614 <__flash_rwdata_start+0xfffeddc4>
 4024510:	d8c00c17 	ldw	r3,48(sp)
 4024514:	d8c00615 	stw	r3,24(sp)
 4024518:	003e7006 	br	4023edc <__flash_rwdata_start+0xfffee68c>
 402451c:	04400044 	movi	r17,1
 4024520:	003b2006 	br	40231a4 <__flash_rwdata_start+0xfffed954>
 4024524:	000b883a 	mov	r5,zero
 4024528:	003b3d06 	br	4023220 <__flash_rwdata_start+0xfffed9d0>
 402452c:	d8800c17 	ldw	r2,48(sp)
 4024530:	d8800615 	stw	r2,24(sp)
 4024534:	003e6906 	br	4023edc <__flash_rwdata_start+0xfffee68c>

04024538 <__sflush_r>:
 4024538:	2880030b 	ldhu	r2,12(r5)
 402453c:	defffb04 	addi	sp,sp,-20
 4024540:	dcc00315 	stw	r19,12(sp)
 4024544:	dc400115 	stw	r17,4(sp)
 4024548:	dfc00415 	stw	ra,16(sp)
 402454c:	dc800215 	stw	r18,8(sp)
 4024550:	dc000015 	stw	r16,0(sp)
 4024554:	10c0020c 	andi	r3,r2,8
 4024558:	2823883a 	mov	r17,r5
 402455c:	2027883a 	mov	r19,r4
 4024560:	1800311e 	bne	r3,zero,4024628 <__sflush_r+0xf0>
 4024564:	28c00117 	ldw	r3,4(r5)
 4024568:	10820014 	ori	r2,r2,2048
 402456c:	2880030d 	sth	r2,12(r5)
 4024570:	00c04b0e 	bge	zero,r3,40246a0 <__sflush_r+0x168>
 4024574:	8a000a17 	ldw	r8,40(r17)
 4024578:	40002326 	beq	r8,zero,4024608 <__sflush_r+0xd0>
 402457c:	9c000017 	ldw	r16,0(r19)
 4024580:	10c4000c 	andi	r3,r2,4096
 4024584:	98000015 	stw	zero,0(r19)
 4024588:	18004826 	beq	r3,zero,40246ac <__sflush_r+0x174>
 402458c:	89801417 	ldw	r6,80(r17)
 4024590:	10c0010c 	andi	r3,r2,4
 4024594:	18000626 	beq	r3,zero,40245b0 <__sflush_r+0x78>
 4024598:	88c00117 	ldw	r3,4(r17)
 402459c:	88800c17 	ldw	r2,48(r17)
 40245a0:	30cdc83a 	sub	r6,r6,r3
 40245a4:	10000226 	beq	r2,zero,40245b0 <__sflush_r+0x78>
 40245a8:	88800f17 	ldw	r2,60(r17)
 40245ac:	308dc83a 	sub	r6,r6,r2
 40245b0:	89400717 	ldw	r5,28(r17)
 40245b4:	000f883a 	mov	r7,zero
 40245b8:	9809883a 	mov	r4,r19
 40245bc:	403ee83a 	callr	r8
 40245c0:	00ffffc4 	movi	r3,-1
 40245c4:	10c04426 	beq	r2,r3,40246d8 <__sflush_r+0x1a0>
 40245c8:	88c0030b 	ldhu	r3,12(r17)
 40245cc:	89000417 	ldw	r4,16(r17)
 40245d0:	88000115 	stw	zero,4(r17)
 40245d4:	197dffcc 	andi	r5,r3,63487
 40245d8:	8940030d 	sth	r5,12(r17)
 40245dc:	89000015 	stw	r4,0(r17)
 40245e0:	18c4000c 	andi	r3,r3,4096
 40245e4:	18002c1e 	bne	r3,zero,4024698 <__sflush_r+0x160>
 40245e8:	89400c17 	ldw	r5,48(r17)
 40245ec:	9c000015 	stw	r16,0(r19)
 40245f0:	28000526 	beq	r5,zero,4024608 <__sflush_r+0xd0>
 40245f4:	88801004 	addi	r2,r17,64
 40245f8:	28800226 	beq	r5,r2,4024604 <__sflush_r+0xcc>
 40245fc:	9809883a 	mov	r4,r19
 4024600:	4024cb40 	call	4024cb4 <_free_r>
 4024604:	88000c15 	stw	zero,48(r17)
 4024608:	0005883a 	mov	r2,zero
 402460c:	dfc00417 	ldw	ra,16(sp)
 4024610:	dcc00317 	ldw	r19,12(sp)
 4024614:	dc800217 	ldw	r18,8(sp)
 4024618:	dc400117 	ldw	r17,4(sp)
 402461c:	dc000017 	ldw	r16,0(sp)
 4024620:	dec00504 	addi	sp,sp,20
 4024624:	f800283a 	ret
 4024628:	2c800417 	ldw	r18,16(r5)
 402462c:	903ff626 	beq	r18,zero,4024608 <__flash_rwdata_start+0xfffeedb8>
 4024630:	2c000017 	ldw	r16,0(r5)
 4024634:	108000cc 	andi	r2,r2,3
 4024638:	2c800015 	stw	r18,0(r5)
 402463c:	84a1c83a 	sub	r16,r16,r18
 4024640:	1000131e 	bne	r2,zero,4024690 <__sflush_r+0x158>
 4024644:	28800517 	ldw	r2,20(r5)
 4024648:	88800215 	stw	r2,8(r17)
 402464c:	04000316 	blt	zero,r16,402465c <__sflush_r+0x124>
 4024650:	003fed06 	br	4024608 <__flash_rwdata_start+0xfffeedb8>
 4024654:	90a5883a 	add	r18,r18,r2
 4024658:	043feb0e 	bge	zero,r16,4024608 <__flash_rwdata_start+0xfffeedb8>
 402465c:	88800917 	ldw	r2,36(r17)
 4024660:	89400717 	ldw	r5,28(r17)
 4024664:	800f883a 	mov	r7,r16
 4024668:	900d883a 	mov	r6,r18
 402466c:	9809883a 	mov	r4,r19
 4024670:	103ee83a 	callr	r2
 4024674:	80a1c83a 	sub	r16,r16,r2
 4024678:	00bff616 	blt	zero,r2,4024654 <__flash_rwdata_start+0xfffeee04>
 402467c:	88c0030b 	ldhu	r3,12(r17)
 4024680:	00bfffc4 	movi	r2,-1
 4024684:	18c01014 	ori	r3,r3,64
 4024688:	88c0030d 	sth	r3,12(r17)
 402468c:	003fdf06 	br	402460c <__flash_rwdata_start+0xfffeedbc>
 4024690:	0005883a 	mov	r2,zero
 4024694:	003fec06 	br	4024648 <__flash_rwdata_start+0xfffeedf8>
 4024698:	88801415 	stw	r2,80(r17)
 402469c:	003fd206 	br	40245e8 <__flash_rwdata_start+0xfffeed98>
 40246a0:	28c00f17 	ldw	r3,60(r5)
 40246a4:	00ffb316 	blt	zero,r3,4024574 <__flash_rwdata_start+0xfffeed24>
 40246a8:	003fd706 	br	4024608 <__flash_rwdata_start+0xfffeedb8>
 40246ac:	89400717 	ldw	r5,28(r17)
 40246b0:	000d883a 	mov	r6,zero
 40246b4:	01c00044 	movi	r7,1
 40246b8:	9809883a 	mov	r4,r19
 40246bc:	403ee83a 	callr	r8
 40246c0:	100d883a 	mov	r6,r2
 40246c4:	00bfffc4 	movi	r2,-1
 40246c8:	30801426 	beq	r6,r2,402471c <__sflush_r+0x1e4>
 40246cc:	8880030b 	ldhu	r2,12(r17)
 40246d0:	8a000a17 	ldw	r8,40(r17)
 40246d4:	003fae06 	br	4024590 <__flash_rwdata_start+0xfffeed40>
 40246d8:	98c00017 	ldw	r3,0(r19)
 40246dc:	183fba26 	beq	r3,zero,40245c8 <__flash_rwdata_start+0xfffeed78>
 40246e0:	01000744 	movi	r4,29
 40246e4:	19000626 	beq	r3,r4,4024700 <__sflush_r+0x1c8>
 40246e8:	01000584 	movi	r4,22
 40246ec:	19000426 	beq	r3,r4,4024700 <__sflush_r+0x1c8>
 40246f0:	88c0030b 	ldhu	r3,12(r17)
 40246f4:	18c01014 	ori	r3,r3,64
 40246f8:	88c0030d 	sth	r3,12(r17)
 40246fc:	003fc306 	br	402460c <__flash_rwdata_start+0xfffeedbc>
 4024700:	8880030b 	ldhu	r2,12(r17)
 4024704:	88c00417 	ldw	r3,16(r17)
 4024708:	88000115 	stw	zero,4(r17)
 402470c:	10bdffcc 	andi	r2,r2,63487
 4024710:	8880030d 	sth	r2,12(r17)
 4024714:	88c00015 	stw	r3,0(r17)
 4024718:	003fb306 	br	40245e8 <__flash_rwdata_start+0xfffeed98>
 402471c:	98800017 	ldw	r2,0(r19)
 4024720:	103fea26 	beq	r2,zero,40246cc <__flash_rwdata_start+0xfffeee7c>
 4024724:	00c00744 	movi	r3,29
 4024728:	10c00226 	beq	r2,r3,4024734 <__sflush_r+0x1fc>
 402472c:	00c00584 	movi	r3,22
 4024730:	10c0031e 	bne	r2,r3,4024740 <__sflush_r+0x208>
 4024734:	9c000015 	stw	r16,0(r19)
 4024738:	0005883a 	mov	r2,zero
 402473c:	003fb306 	br	402460c <__flash_rwdata_start+0xfffeedbc>
 4024740:	88c0030b 	ldhu	r3,12(r17)
 4024744:	3005883a 	mov	r2,r6
 4024748:	18c01014 	ori	r3,r3,64
 402474c:	88c0030d 	sth	r3,12(r17)
 4024750:	003fae06 	br	402460c <__flash_rwdata_start+0xfffeedbc>

04024754 <_fflush_r>:
 4024754:	defffd04 	addi	sp,sp,-12
 4024758:	dc000115 	stw	r16,4(sp)
 402475c:	dfc00215 	stw	ra,8(sp)
 4024760:	2021883a 	mov	r16,r4
 4024764:	20000226 	beq	r4,zero,4024770 <_fflush_r+0x1c>
 4024768:	20800e17 	ldw	r2,56(r4)
 402476c:	10000c26 	beq	r2,zero,40247a0 <_fflush_r+0x4c>
 4024770:	2880030f 	ldh	r2,12(r5)
 4024774:	1000051e 	bne	r2,zero,402478c <_fflush_r+0x38>
 4024778:	0005883a 	mov	r2,zero
 402477c:	dfc00217 	ldw	ra,8(sp)
 4024780:	dc000117 	ldw	r16,4(sp)
 4024784:	dec00304 	addi	sp,sp,12
 4024788:	f800283a 	ret
 402478c:	8009883a 	mov	r4,r16
 4024790:	dfc00217 	ldw	ra,8(sp)
 4024794:	dc000117 	ldw	r16,4(sp)
 4024798:	dec00304 	addi	sp,sp,12
 402479c:	40245381 	jmpi	4024538 <__sflush_r>
 40247a0:	d9400015 	stw	r5,0(sp)
 40247a4:	4024b400 	call	4024b40 <__sinit>
 40247a8:	d9400017 	ldw	r5,0(sp)
 40247ac:	003ff006 	br	4024770 <__flash_rwdata_start+0xfffeef20>

040247b0 <fflush>:
 40247b0:	20000526 	beq	r4,zero,40247c8 <fflush+0x18>
 40247b4:	00800034 	movhi	r2,0
 40247b8:	10881c04 	addi	r2,r2,8304
 40247bc:	200b883a 	mov	r5,r4
 40247c0:	11000017 	ldw	r4,0(r2)
 40247c4:	40247541 	jmpi	4024754 <_fflush_r>
 40247c8:	00800034 	movhi	r2,0
 40247cc:	10881b04 	addi	r2,r2,8300
 40247d0:	11000017 	ldw	r4,0(r2)
 40247d4:	014100b4 	movhi	r5,1026
 40247d8:	2951d504 	addi	r5,r5,18260
 40247dc:	40255501 	jmpi	4025550 <_fwalk_reent>

040247e0 <__fp_unlock>:
 40247e0:	0005883a 	mov	r2,zero
 40247e4:	f800283a 	ret

040247e8 <_cleanup_r>:
 40247e8:	014100f4 	movhi	r5,1027
 40247ec:	2965bb04 	addi	r5,r5,-26900
 40247f0:	40255501 	jmpi	4025550 <_fwalk_reent>

040247f4 <__sinit.part.1>:
 40247f4:	defff704 	addi	sp,sp,-36
 40247f8:	00c100b4 	movhi	r3,1026
 40247fc:	dfc00815 	stw	ra,32(sp)
 4024800:	ddc00715 	stw	r23,28(sp)
 4024804:	dd800615 	stw	r22,24(sp)
 4024808:	dd400515 	stw	r21,20(sp)
 402480c:	dd000415 	stw	r20,16(sp)
 4024810:	dcc00315 	stw	r19,12(sp)
 4024814:	dc800215 	stw	r18,8(sp)
 4024818:	dc400115 	stw	r17,4(sp)
 402481c:	dc000015 	stw	r16,0(sp)
 4024820:	18d1fa04 	addi	r3,r3,18408
 4024824:	24000117 	ldw	r16,4(r4)
 4024828:	20c00f15 	stw	r3,60(r4)
 402482c:	2080bb04 	addi	r2,r4,748
 4024830:	00c000c4 	movi	r3,3
 4024834:	20c0b915 	stw	r3,740(r4)
 4024838:	2080ba15 	stw	r2,744(r4)
 402483c:	2000b815 	stw	zero,736(r4)
 4024840:	05c00204 	movi	r23,8
 4024844:	00800104 	movi	r2,4
 4024848:	2025883a 	mov	r18,r4
 402484c:	b80d883a 	mov	r6,r23
 4024850:	81001704 	addi	r4,r16,92
 4024854:	000b883a 	mov	r5,zero
 4024858:	80000015 	stw	zero,0(r16)
 402485c:	80000115 	stw	zero,4(r16)
 4024860:	80000215 	stw	zero,8(r16)
 4024864:	8080030d 	sth	r2,12(r16)
 4024868:	80001915 	stw	zero,100(r16)
 402486c:	8000038d 	sth	zero,14(r16)
 4024870:	80000415 	stw	zero,16(r16)
 4024874:	80000515 	stw	zero,20(r16)
 4024878:	80000615 	stw	zero,24(r16)
 402487c:	40264400 	call	4026440 <memset>
 4024880:	058100b4 	movhi	r22,1026
 4024884:	94400217 	ldw	r17,8(r18)
 4024888:	054100b4 	movhi	r21,1026
 402488c:	050100b4 	movhi	r20,1026
 4024890:	04c100b4 	movhi	r19,1026
 4024894:	b59f1304 	addi	r22,r22,31820
 4024898:	ad5f2a04 	addi	r21,r21,31912
 402489c:	a51f4904 	addi	r20,r20,32036
 40248a0:	9cdf6004 	addi	r19,r19,32128
 40248a4:	85800815 	stw	r22,32(r16)
 40248a8:	85400915 	stw	r21,36(r16)
 40248ac:	85000a15 	stw	r20,40(r16)
 40248b0:	84c00b15 	stw	r19,44(r16)
 40248b4:	84000715 	stw	r16,28(r16)
 40248b8:	00800284 	movi	r2,10
 40248bc:	8880030d 	sth	r2,12(r17)
 40248c0:	00800044 	movi	r2,1
 40248c4:	b80d883a 	mov	r6,r23
 40248c8:	89001704 	addi	r4,r17,92
 40248cc:	000b883a 	mov	r5,zero
 40248d0:	88000015 	stw	zero,0(r17)
 40248d4:	88000115 	stw	zero,4(r17)
 40248d8:	88000215 	stw	zero,8(r17)
 40248dc:	88001915 	stw	zero,100(r17)
 40248e0:	8880038d 	sth	r2,14(r17)
 40248e4:	88000415 	stw	zero,16(r17)
 40248e8:	88000515 	stw	zero,20(r17)
 40248ec:	88000615 	stw	zero,24(r17)
 40248f0:	40264400 	call	4026440 <memset>
 40248f4:	94000317 	ldw	r16,12(r18)
 40248f8:	00800484 	movi	r2,18
 40248fc:	8c400715 	stw	r17,28(r17)
 4024900:	8d800815 	stw	r22,32(r17)
 4024904:	8d400915 	stw	r21,36(r17)
 4024908:	8d000a15 	stw	r20,40(r17)
 402490c:	8cc00b15 	stw	r19,44(r17)
 4024910:	8080030d 	sth	r2,12(r16)
 4024914:	00800084 	movi	r2,2
 4024918:	80000015 	stw	zero,0(r16)
 402491c:	80000115 	stw	zero,4(r16)
 4024920:	80000215 	stw	zero,8(r16)
 4024924:	80001915 	stw	zero,100(r16)
 4024928:	8080038d 	sth	r2,14(r16)
 402492c:	80000415 	stw	zero,16(r16)
 4024930:	80000515 	stw	zero,20(r16)
 4024934:	80000615 	stw	zero,24(r16)
 4024938:	b80d883a 	mov	r6,r23
 402493c:	000b883a 	mov	r5,zero
 4024940:	81001704 	addi	r4,r16,92
 4024944:	40264400 	call	4026440 <memset>
 4024948:	00800044 	movi	r2,1
 402494c:	84000715 	stw	r16,28(r16)
 4024950:	85800815 	stw	r22,32(r16)
 4024954:	85400915 	stw	r21,36(r16)
 4024958:	85000a15 	stw	r20,40(r16)
 402495c:	84c00b15 	stw	r19,44(r16)
 4024960:	90800e15 	stw	r2,56(r18)
 4024964:	dfc00817 	ldw	ra,32(sp)
 4024968:	ddc00717 	ldw	r23,28(sp)
 402496c:	dd800617 	ldw	r22,24(sp)
 4024970:	dd400517 	ldw	r21,20(sp)
 4024974:	dd000417 	ldw	r20,16(sp)
 4024978:	dcc00317 	ldw	r19,12(sp)
 402497c:	dc800217 	ldw	r18,8(sp)
 4024980:	dc400117 	ldw	r17,4(sp)
 4024984:	dc000017 	ldw	r16,0(sp)
 4024988:	dec00904 	addi	sp,sp,36
 402498c:	f800283a 	ret

04024990 <__fp_lock>:
 4024990:	0005883a 	mov	r2,zero
 4024994:	f800283a 	ret

04024998 <__sfmoreglue>:
 4024998:	defffc04 	addi	sp,sp,-16
 402499c:	dc800215 	stw	r18,8(sp)
 40249a0:	2825883a 	mov	r18,r5
 40249a4:	dc000015 	stw	r16,0(sp)
 40249a8:	01401a04 	movi	r5,104
 40249ac:	2021883a 	mov	r16,r4
 40249b0:	913fffc4 	addi	r4,r18,-1
 40249b4:	dfc00315 	stw	ra,12(sp)
 40249b8:	dc400115 	stw	r17,4(sp)
 40249bc:	402ac1c0 	call	402ac1c <__mulsi3>
 40249c0:	8009883a 	mov	r4,r16
 40249c4:	11401d04 	addi	r5,r2,116
 40249c8:	1023883a 	mov	r17,r2
 40249cc:	40258ac0 	call	40258ac <_malloc_r>
 40249d0:	1021883a 	mov	r16,r2
 40249d4:	10000726 	beq	r2,zero,40249f4 <__sfmoreglue+0x5c>
 40249d8:	11000304 	addi	r4,r2,12
 40249dc:	10000015 	stw	zero,0(r2)
 40249e0:	14800115 	stw	r18,4(r2)
 40249e4:	11000215 	stw	r4,8(r2)
 40249e8:	89801a04 	addi	r6,r17,104
 40249ec:	000b883a 	mov	r5,zero
 40249f0:	40264400 	call	4026440 <memset>
 40249f4:	8005883a 	mov	r2,r16
 40249f8:	dfc00317 	ldw	ra,12(sp)
 40249fc:	dc800217 	ldw	r18,8(sp)
 4024a00:	dc400117 	ldw	r17,4(sp)
 4024a04:	dc000017 	ldw	r16,0(sp)
 4024a08:	dec00404 	addi	sp,sp,16
 4024a0c:	f800283a 	ret

04024a10 <__sfp>:
 4024a10:	defffb04 	addi	sp,sp,-20
 4024a14:	dc000015 	stw	r16,0(sp)
 4024a18:	04000034 	movhi	r16,0
 4024a1c:	84081b04 	addi	r16,r16,8300
 4024a20:	dcc00315 	stw	r19,12(sp)
 4024a24:	2027883a 	mov	r19,r4
 4024a28:	81000017 	ldw	r4,0(r16)
 4024a2c:	dfc00415 	stw	ra,16(sp)
 4024a30:	dc800215 	stw	r18,8(sp)
 4024a34:	20800e17 	ldw	r2,56(r4)
 4024a38:	dc400115 	stw	r17,4(sp)
 4024a3c:	1000021e 	bne	r2,zero,4024a48 <__sfp+0x38>
 4024a40:	40247f40 	call	40247f4 <__sinit.part.1>
 4024a44:	81000017 	ldw	r4,0(r16)
 4024a48:	2480b804 	addi	r18,r4,736
 4024a4c:	047fffc4 	movi	r17,-1
 4024a50:	91000117 	ldw	r4,4(r18)
 4024a54:	94000217 	ldw	r16,8(r18)
 4024a58:	213fffc4 	addi	r4,r4,-1
 4024a5c:	20000a16 	blt	r4,zero,4024a88 <__sfp+0x78>
 4024a60:	8080030f 	ldh	r2,12(r16)
 4024a64:	10000c26 	beq	r2,zero,4024a98 <__sfp+0x88>
 4024a68:	80c01d04 	addi	r3,r16,116
 4024a6c:	00000206 	br	4024a78 <__sfp+0x68>
 4024a70:	18bfe60f 	ldh	r2,-104(r3)
 4024a74:	10000826 	beq	r2,zero,4024a98 <__sfp+0x88>
 4024a78:	213fffc4 	addi	r4,r4,-1
 4024a7c:	1c3ffd04 	addi	r16,r3,-12
 4024a80:	18c01a04 	addi	r3,r3,104
 4024a84:	247ffa1e 	bne	r4,r17,4024a70 <__flash_rwdata_start+0xfffef220>
 4024a88:	90800017 	ldw	r2,0(r18)
 4024a8c:	10001d26 	beq	r2,zero,4024b04 <__sfp+0xf4>
 4024a90:	1025883a 	mov	r18,r2
 4024a94:	003fee06 	br	4024a50 <__flash_rwdata_start+0xfffef200>
 4024a98:	00bfffc4 	movi	r2,-1
 4024a9c:	8080038d 	sth	r2,14(r16)
 4024aa0:	00800044 	movi	r2,1
 4024aa4:	8080030d 	sth	r2,12(r16)
 4024aa8:	80001915 	stw	zero,100(r16)
 4024aac:	80000015 	stw	zero,0(r16)
 4024ab0:	80000215 	stw	zero,8(r16)
 4024ab4:	80000115 	stw	zero,4(r16)
 4024ab8:	80000415 	stw	zero,16(r16)
 4024abc:	80000515 	stw	zero,20(r16)
 4024ac0:	80000615 	stw	zero,24(r16)
 4024ac4:	01800204 	movi	r6,8
 4024ac8:	000b883a 	mov	r5,zero
 4024acc:	81001704 	addi	r4,r16,92
 4024ad0:	40264400 	call	4026440 <memset>
 4024ad4:	8005883a 	mov	r2,r16
 4024ad8:	80000c15 	stw	zero,48(r16)
 4024adc:	80000d15 	stw	zero,52(r16)
 4024ae0:	80001115 	stw	zero,68(r16)
 4024ae4:	80001215 	stw	zero,72(r16)
 4024ae8:	dfc00417 	ldw	ra,16(sp)
 4024aec:	dcc00317 	ldw	r19,12(sp)
 4024af0:	dc800217 	ldw	r18,8(sp)
 4024af4:	dc400117 	ldw	r17,4(sp)
 4024af8:	dc000017 	ldw	r16,0(sp)
 4024afc:	dec00504 	addi	sp,sp,20
 4024b00:	f800283a 	ret
 4024b04:	01400104 	movi	r5,4
 4024b08:	9809883a 	mov	r4,r19
 4024b0c:	40249980 	call	4024998 <__sfmoreglue>
 4024b10:	90800015 	stw	r2,0(r18)
 4024b14:	103fde1e 	bne	r2,zero,4024a90 <__flash_rwdata_start+0xfffef240>
 4024b18:	00800304 	movi	r2,12
 4024b1c:	98800015 	stw	r2,0(r19)
 4024b20:	0005883a 	mov	r2,zero
 4024b24:	003ff006 	br	4024ae8 <__flash_rwdata_start+0xfffef298>

04024b28 <_cleanup>:
 4024b28:	00800034 	movhi	r2,0
 4024b2c:	10881b04 	addi	r2,r2,8300
 4024b30:	11000017 	ldw	r4,0(r2)
 4024b34:	014100f4 	movhi	r5,1027
 4024b38:	2965bb04 	addi	r5,r5,-26900
 4024b3c:	40255501 	jmpi	4025550 <_fwalk_reent>

04024b40 <__sinit>:
 4024b40:	20800e17 	ldw	r2,56(r4)
 4024b44:	10000126 	beq	r2,zero,4024b4c <__sinit+0xc>
 4024b48:	f800283a 	ret
 4024b4c:	40247f41 	jmpi	40247f4 <__sinit.part.1>

04024b50 <__sfp_lock_acquire>:
 4024b50:	f800283a 	ret

04024b54 <__sfp_lock_release>:
 4024b54:	f800283a 	ret

04024b58 <__sinit_lock_acquire>:
 4024b58:	f800283a 	ret

04024b5c <__sinit_lock_release>:
 4024b5c:	f800283a 	ret

04024b60 <__fp_lock_all>:
 4024b60:	00800034 	movhi	r2,0
 4024b64:	10881c04 	addi	r2,r2,8304
 4024b68:	11000017 	ldw	r4,0(r2)
 4024b6c:	014100b4 	movhi	r5,1026
 4024b70:	29526404 	addi	r5,r5,18832
 4024b74:	402548c1 	jmpi	402548c <_fwalk>

04024b78 <__fp_unlock_all>:
 4024b78:	00800034 	movhi	r2,0
 4024b7c:	10881c04 	addi	r2,r2,8304
 4024b80:	11000017 	ldw	r4,0(r2)
 4024b84:	014100b4 	movhi	r5,1026
 4024b88:	2951f804 	addi	r5,r5,18400
 4024b8c:	402548c1 	jmpi	402548c <_fwalk>

04024b90 <_malloc_trim_r>:
 4024b90:	defffb04 	addi	sp,sp,-20
 4024b94:	dcc00315 	stw	r19,12(sp)
 4024b98:	04c00034 	movhi	r19,0
 4024b9c:	dc800215 	stw	r18,8(sp)
 4024ba0:	dc400115 	stw	r17,4(sp)
 4024ba4:	dc000015 	stw	r16,0(sp)
 4024ba8:	dfc00415 	stw	ra,16(sp)
 4024bac:	2821883a 	mov	r16,r5
 4024bb0:	9cc27704 	addi	r19,r19,2524
 4024bb4:	2025883a 	mov	r18,r4
 4024bb8:	402da840 	call	402da84 <__malloc_lock>
 4024bbc:	98800217 	ldw	r2,8(r19)
 4024bc0:	14400117 	ldw	r17,4(r2)
 4024bc4:	00bfff04 	movi	r2,-4
 4024bc8:	88a2703a 	and	r17,r17,r2
 4024bcc:	8c21c83a 	sub	r16,r17,r16
 4024bd0:	8403fbc4 	addi	r16,r16,4079
 4024bd4:	8020d33a 	srli	r16,r16,12
 4024bd8:	0083ffc4 	movi	r2,4095
 4024bdc:	843fffc4 	addi	r16,r16,-1
 4024be0:	8020933a 	slli	r16,r16,12
 4024be4:	1400060e 	bge	r2,r16,4024c00 <_malloc_trim_r+0x70>
 4024be8:	000b883a 	mov	r5,zero
 4024bec:	9009883a 	mov	r4,r18
 4024bf0:	4027bf80 	call	4027bf8 <_sbrk_r>
 4024bf4:	98c00217 	ldw	r3,8(r19)
 4024bf8:	1c47883a 	add	r3,r3,r17
 4024bfc:	10c00a26 	beq	r2,r3,4024c28 <_malloc_trim_r+0x98>
 4024c00:	9009883a 	mov	r4,r18
 4024c04:	402daa80 	call	402daa8 <__malloc_unlock>
 4024c08:	0005883a 	mov	r2,zero
 4024c0c:	dfc00417 	ldw	ra,16(sp)
 4024c10:	dcc00317 	ldw	r19,12(sp)
 4024c14:	dc800217 	ldw	r18,8(sp)
 4024c18:	dc400117 	ldw	r17,4(sp)
 4024c1c:	dc000017 	ldw	r16,0(sp)
 4024c20:	dec00504 	addi	sp,sp,20
 4024c24:	f800283a 	ret
 4024c28:	040bc83a 	sub	r5,zero,r16
 4024c2c:	9009883a 	mov	r4,r18
 4024c30:	4027bf80 	call	4027bf8 <_sbrk_r>
 4024c34:	00ffffc4 	movi	r3,-1
 4024c38:	10c00d26 	beq	r2,r3,4024c70 <_malloc_trim_r+0xe0>
 4024c3c:	00c00034 	movhi	r3,0
 4024c40:	18c84b04 	addi	r3,r3,8492
 4024c44:	18800017 	ldw	r2,0(r3)
 4024c48:	99000217 	ldw	r4,8(r19)
 4024c4c:	8c23c83a 	sub	r17,r17,r16
 4024c50:	8c400054 	ori	r17,r17,1
 4024c54:	1421c83a 	sub	r16,r2,r16
 4024c58:	24400115 	stw	r17,4(r4)
 4024c5c:	9009883a 	mov	r4,r18
 4024c60:	1c000015 	stw	r16,0(r3)
 4024c64:	402daa80 	call	402daa8 <__malloc_unlock>
 4024c68:	00800044 	movi	r2,1
 4024c6c:	003fe706 	br	4024c0c <__flash_rwdata_start+0xfffef3bc>
 4024c70:	000b883a 	mov	r5,zero
 4024c74:	9009883a 	mov	r4,r18
 4024c78:	4027bf80 	call	4027bf8 <_sbrk_r>
 4024c7c:	99000217 	ldw	r4,8(r19)
 4024c80:	014003c4 	movi	r5,15
 4024c84:	1107c83a 	sub	r3,r2,r4
 4024c88:	28ffdd0e 	bge	r5,r3,4024c00 <__flash_rwdata_start+0xfffef3b0>
 4024c8c:	01400034 	movhi	r5,0
 4024c90:	29481e04 	addi	r5,r5,8312
 4024c94:	29400017 	ldw	r5,0(r5)
 4024c98:	18c00054 	ori	r3,r3,1
 4024c9c:	20c00115 	stw	r3,4(r4)
 4024ca0:	00c00034 	movhi	r3,0
 4024ca4:	1145c83a 	sub	r2,r2,r5
 4024ca8:	18c84b04 	addi	r3,r3,8492
 4024cac:	18800015 	stw	r2,0(r3)
 4024cb0:	003fd306 	br	4024c00 <__flash_rwdata_start+0xfffef3b0>

04024cb4 <_free_r>:
 4024cb4:	28004126 	beq	r5,zero,4024dbc <_free_r+0x108>
 4024cb8:	defffd04 	addi	sp,sp,-12
 4024cbc:	dc400115 	stw	r17,4(sp)
 4024cc0:	dc000015 	stw	r16,0(sp)
 4024cc4:	2023883a 	mov	r17,r4
 4024cc8:	2821883a 	mov	r16,r5
 4024ccc:	dfc00215 	stw	ra,8(sp)
 4024cd0:	402da840 	call	402da84 <__malloc_lock>
 4024cd4:	81ffff17 	ldw	r7,-4(r16)
 4024cd8:	00bfff84 	movi	r2,-2
 4024cdc:	01000034 	movhi	r4,0
 4024ce0:	81bffe04 	addi	r6,r16,-8
 4024ce4:	3884703a 	and	r2,r7,r2
 4024ce8:	21027704 	addi	r4,r4,2524
 4024cec:	308b883a 	add	r5,r6,r2
 4024cf0:	2a400117 	ldw	r9,4(r5)
 4024cf4:	22000217 	ldw	r8,8(r4)
 4024cf8:	00ffff04 	movi	r3,-4
 4024cfc:	48c6703a 	and	r3,r9,r3
 4024d00:	2a005726 	beq	r5,r8,4024e60 <_free_r+0x1ac>
 4024d04:	28c00115 	stw	r3,4(r5)
 4024d08:	39c0004c 	andi	r7,r7,1
 4024d0c:	3800091e 	bne	r7,zero,4024d34 <_free_r+0x80>
 4024d10:	823ffe17 	ldw	r8,-8(r16)
 4024d14:	22400204 	addi	r9,r4,8
 4024d18:	320dc83a 	sub	r6,r6,r8
 4024d1c:	31c00217 	ldw	r7,8(r6)
 4024d20:	1205883a 	add	r2,r2,r8
 4024d24:	3a406526 	beq	r7,r9,4024ebc <_free_r+0x208>
 4024d28:	32000317 	ldw	r8,12(r6)
 4024d2c:	3a000315 	stw	r8,12(r7)
 4024d30:	41c00215 	stw	r7,8(r8)
 4024d34:	28cf883a 	add	r7,r5,r3
 4024d38:	39c00117 	ldw	r7,4(r7)
 4024d3c:	39c0004c 	andi	r7,r7,1
 4024d40:	38003a26 	beq	r7,zero,4024e2c <_free_r+0x178>
 4024d44:	10c00054 	ori	r3,r2,1
 4024d48:	30c00115 	stw	r3,4(r6)
 4024d4c:	3087883a 	add	r3,r6,r2
 4024d50:	18800015 	stw	r2,0(r3)
 4024d54:	00c07fc4 	movi	r3,511
 4024d58:	18801936 	bltu	r3,r2,4024dc0 <_free_r+0x10c>
 4024d5c:	1004d0fa 	srli	r2,r2,3
 4024d60:	01c00044 	movi	r7,1
 4024d64:	21400117 	ldw	r5,4(r4)
 4024d68:	10c00044 	addi	r3,r2,1
 4024d6c:	18c7883a 	add	r3,r3,r3
 4024d70:	1005d0ba 	srai	r2,r2,2
 4024d74:	18c7883a 	add	r3,r3,r3
 4024d78:	18c7883a 	add	r3,r3,r3
 4024d7c:	1907883a 	add	r3,r3,r4
 4024d80:	3884983a 	sll	r2,r7,r2
 4024d84:	19c00017 	ldw	r7,0(r3)
 4024d88:	1a3ffe04 	addi	r8,r3,-8
 4024d8c:	1144b03a 	or	r2,r2,r5
 4024d90:	32000315 	stw	r8,12(r6)
 4024d94:	31c00215 	stw	r7,8(r6)
 4024d98:	20800115 	stw	r2,4(r4)
 4024d9c:	19800015 	stw	r6,0(r3)
 4024da0:	39800315 	stw	r6,12(r7)
 4024da4:	8809883a 	mov	r4,r17
 4024da8:	dfc00217 	ldw	ra,8(sp)
 4024dac:	dc400117 	ldw	r17,4(sp)
 4024db0:	dc000017 	ldw	r16,0(sp)
 4024db4:	dec00304 	addi	sp,sp,12
 4024db8:	402daa81 	jmpi	402daa8 <__malloc_unlock>
 4024dbc:	f800283a 	ret
 4024dc0:	100ad27a 	srli	r5,r2,9
 4024dc4:	00c00104 	movi	r3,4
 4024dc8:	19404a36 	bltu	r3,r5,4024ef4 <_free_r+0x240>
 4024dcc:	100ad1ba 	srli	r5,r2,6
 4024dd0:	28c00e44 	addi	r3,r5,57
 4024dd4:	18c7883a 	add	r3,r3,r3
 4024dd8:	29400e04 	addi	r5,r5,56
 4024ddc:	18c7883a 	add	r3,r3,r3
 4024de0:	18c7883a 	add	r3,r3,r3
 4024de4:	1909883a 	add	r4,r3,r4
 4024de8:	20c00017 	ldw	r3,0(r4)
 4024dec:	01c00034 	movhi	r7,0
 4024df0:	213ffe04 	addi	r4,r4,-8
 4024df4:	39c27704 	addi	r7,r7,2524
 4024df8:	20c04426 	beq	r4,r3,4024f0c <_free_r+0x258>
 4024dfc:	01ffff04 	movi	r7,-4
 4024e00:	19400117 	ldw	r5,4(r3)
 4024e04:	29ca703a 	and	r5,r5,r7
 4024e08:	1140022e 	bgeu	r2,r5,4024e14 <_free_r+0x160>
 4024e0c:	18c00217 	ldw	r3,8(r3)
 4024e10:	20fffb1e 	bne	r4,r3,4024e00 <__flash_rwdata_start+0xfffef5b0>
 4024e14:	19000317 	ldw	r4,12(r3)
 4024e18:	31000315 	stw	r4,12(r6)
 4024e1c:	30c00215 	stw	r3,8(r6)
 4024e20:	21800215 	stw	r6,8(r4)
 4024e24:	19800315 	stw	r6,12(r3)
 4024e28:	003fde06 	br	4024da4 <__flash_rwdata_start+0xfffef554>
 4024e2c:	29c00217 	ldw	r7,8(r5)
 4024e30:	10c5883a 	add	r2,r2,r3
 4024e34:	00c00034 	movhi	r3,0
 4024e38:	18c27904 	addi	r3,r3,2532
 4024e3c:	38c03b26 	beq	r7,r3,4024f2c <_free_r+0x278>
 4024e40:	2a000317 	ldw	r8,12(r5)
 4024e44:	11400054 	ori	r5,r2,1
 4024e48:	3087883a 	add	r3,r6,r2
 4024e4c:	3a000315 	stw	r8,12(r7)
 4024e50:	41c00215 	stw	r7,8(r8)
 4024e54:	31400115 	stw	r5,4(r6)
 4024e58:	18800015 	stw	r2,0(r3)
 4024e5c:	003fbd06 	br	4024d54 <__flash_rwdata_start+0xfffef504>
 4024e60:	39c0004c 	andi	r7,r7,1
 4024e64:	10c5883a 	add	r2,r2,r3
 4024e68:	3800071e 	bne	r7,zero,4024e88 <_free_r+0x1d4>
 4024e6c:	81fffe17 	ldw	r7,-8(r16)
 4024e70:	31cdc83a 	sub	r6,r6,r7
 4024e74:	30c00317 	ldw	r3,12(r6)
 4024e78:	31400217 	ldw	r5,8(r6)
 4024e7c:	11c5883a 	add	r2,r2,r7
 4024e80:	28c00315 	stw	r3,12(r5)
 4024e84:	19400215 	stw	r5,8(r3)
 4024e88:	10c00054 	ori	r3,r2,1
 4024e8c:	30c00115 	stw	r3,4(r6)
 4024e90:	00c00034 	movhi	r3,0
 4024e94:	18c81f04 	addi	r3,r3,8316
 4024e98:	18c00017 	ldw	r3,0(r3)
 4024e9c:	21800215 	stw	r6,8(r4)
 4024ea0:	10ffc036 	bltu	r2,r3,4024da4 <__flash_rwdata_start+0xfffef554>
 4024ea4:	00800034 	movhi	r2,0
 4024ea8:	10883504 	addi	r2,r2,8404
 4024eac:	11400017 	ldw	r5,0(r2)
 4024eb0:	8809883a 	mov	r4,r17
 4024eb4:	4024b900 	call	4024b90 <_malloc_trim_r>
 4024eb8:	003fba06 	br	4024da4 <__flash_rwdata_start+0xfffef554>
 4024ebc:	28c9883a 	add	r4,r5,r3
 4024ec0:	21000117 	ldw	r4,4(r4)
 4024ec4:	2100004c 	andi	r4,r4,1
 4024ec8:	2000391e 	bne	r4,zero,4024fb0 <_free_r+0x2fc>
 4024ecc:	29c00217 	ldw	r7,8(r5)
 4024ed0:	29000317 	ldw	r4,12(r5)
 4024ed4:	1885883a 	add	r2,r3,r2
 4024ed8:	10c00054 	ori	r3,r2,1
 4024edc:	39000315 	stw	r4,12(r7)
 4024ee0:	21c00215 	stw	r7,8(r4)
 4024ee4:	30c00115 	stw	r3,4(r6)
 4024ee8:	308d883a 	add	r6,r6,r2
 4024eec:	30800015 	stw	r2,0(r6)
 4024ef0:	003fac06 	br	4024da4 <__flash_rwdata_start+0xfffef554>
 4024ef4:	00c00504 	movi	r3,20
 4024ef8:	19401536 	bltu	r3,r5,4024f50 <_free_r+0x29c>
 4024efc:	28c01704 	addi	r3,r5,92
 4024f00:	18c7883a 	add	r3,r3,r3
 4024f04:	294016c4 	addi	r5,r5,91
 4024f08:	003fb406 	br	4024ddc <__flash_rwdata_start+0xfffef58c>
 4024f0c:	280bd0ba 	srai	r5,r5,2
 4024f10:	00c00044 	movi	r3,1
 4024f14:	38800117 	ldw	r2,4(r7)
 4024f18:	194a983a 	sll	r5,r3,r5
 4024f1c:	2007883a 	mov	r3,r4
 4024f20:	2884b03a 	or	r2,r5,r2
 4024f24:	38800115 	stw	r2,4(r7)
 4024f28:	003fbb06 	br	4024e18 <__flash_rwdata_start+0xfffef5c8>
 4024f2c:	21800515 	stw	r6,20(r4)
 4024f30:	21800415 	stw	r6,16(r4)
 4024f34:	10c00054 	ori	r3,r2,1
 4024f38:	31c00315 	stw	r7,12(r6)
 4024f3c:	31c00215 	stw	r7,8(r6)
 4024f40:	30c00115 	stw	r3,4(r6)
 4024f44:	308d883a 	add	r6,r6,r2
 4024f48:	30800015 	stw	r2,0(r6)
 4024f4c:	003f9506 	br	4024da4 <__flash_rwdata_start+0xfffef554>
 4024f50:	00c01504 	movi	r3,84
 4024f54:	19400536 	bltu	r3,r5,4024f6c <_free_r+0x2b8>
 4024f58:	100ad33a 	srli	r5,r2,12
 4024f5c:	28c01bc4 	addi	r3,r5,111
 4024f60:	18c7883a 	add	r3,r3,r3
 4024f64:	29401b84 	addi	r5,r5,110
 4024f68:	003f9c06 	br	4024ddc <__flash_rwdata_start+0xfffef58c>
 4024f6c:	00c05504 	movi	r3,340
 4024f70:	19400536 	bltu	r3,r5,4024f88 <_free_r+0x2d4>
 4024f74:	100ad3fa 	srli	r5,r2,15
 4024f78:	28c01e04 	addi	r3,r5,120
 4024f7c:	18c7883a 	add	r3,r3,r3
 4024f80:	29401dc4 	addi	r5,r5,119
 4024f84:	003f9506 	br	4024ddc <__flash_rwdata_start+0xfffef58c>
 4024f88:	00c15504 	movi	r3,1364
 4024f8c:	19400536 	bltu	r3,r5,4024fa4 <_free_r+0x2f0>
 4024f90:	100ad4ba 	srli	r5,r2,18
 4024f94:	28c01f44 	addi	r3,r5,125
 4024f98:	18c7883a 	add	r3,r3,r3
 4024f9c:	29401f04 	addi	r5,r5,124
 4024fa0:	003f8e06 	br	4024ddc <__flash_rwdata_start+0xfffef58c>
 4024fa4:	00c03f84 	movi	r3,254
 4024fa8:	01401f84 	movi	r5,126
 4024fac:	003f8b06 	br	4024ddc <__flash_rwdata_start+0xfffef58c>
 4024fb0:	10c00054 	ori	r3,r2,1
 4024fb4:	30c00115 	stw	r3,4(r6)
 4024fb8:	308d883a 	add	r6,r6,r2
 4024fbc:	30800015 	stw	r2,0(r6)
 4024fc0:	003f7806 	br	4024da4 <__flash_rwdata_start+0xfffef554>

04024fc4 <__sfvwrite_r>:
 4024fc4:	30800217 	ldw	r2,8(r6)
 4024fc8:	10006726 	beq	r2,zero,4025168 <__sfvwrite_r+0x1a4>
 4024fcc:	28c0030b 	ldhu	r3,12(r5)
 4024fd0:	defff404 	addi	sp,sp,-48
 4024fd4:	dd400715 	stw	r21,28(sp)
 4024fd8:	dd000615 	stw	r20,24(sp)
 4024fdc:	dc000215 	stw	r16,8(sp)
 4024fe0:	dfc00b15 	stw	ra,44(sp)
 4024fe4:	df000a15 	stw	fp,40(sp)
 4024fe8:	ddc00915 	stw	r23,36(sp)
 4024fec:	dd800815 	stw	r22,32(sp)
 4024ff0:	dcc00515 	stw	r19,20(sp)
 4024ff4:	dc800415 	stw	r18,16(sp)
 4024ff8:	dc400315 	stw	r17,12(sp)
 4024ffc:	1880020c 	andi	r2,r3,8
 4025000:	2821883a 	mov	r16,r5
 4025004:	202b883a 	mov	r21,r4
 4025008:	3029883a 	mov	r20,r6
 402500c:	10002726 	beq	r2,zero,40250ac <__sfvwrite_r+0xe8>
 4025010:	28800417 	ldw	r2,16(r5)
 4025014:	10002526 	beq	r2,zero,40250ac <__sfvwrite_r+0xe8>
 4025018:	1880008c 	andi	r2,r3,2
 402501c:	a4400017 	ldw	r17,0(r20)
 4025020:	10002a26 	beq	r2,zero,40250cc <__sfvwrite_r+0x108>
 4025024:	05a00034 	movhi	r22,32768
 4025028:	0027883a 	mov	r19,zero
 402502c:	0025883a 	mov	r18,zero
 4025030:	b5bf0004 	addi	r22,r22,-1024
 4025034:	980d883a 	mov	r6,r19
 4025038:	a809883a 	mov	r4,r21
 402503c:	90004626 	beq	r18,zero,4025158 <__sfvwrite_r+0x194>
 4025040:	900f883a 	mov	r7,r18
 4025044:	b480022e 	bgeu	r22,r18,4025050 <__sfvwrite_r+0x8c>
 4025048:	01e00034 	movhi	r7,32768
 402504c:	39ff0004 	addi	r7,r7,-1024
 4025050:	80800917 	ldw	r2,36(r16)
 4025054:	81400717 	ldw	r5,28(r16)
 4025058:	103ee83a 	callr	r2
 402505c:	00805a0e 	bge	zero,r2,40251c8 <__sfvwrite_r+0x204>
 4025060:	a0c00217 	ldw	r3,8(r20)
 4025064:	98a7883a 	add	r19,r19,r2
 4025068:	90a5c83a 	sub	r18,r18,r2
 402506c:	1885c83a 	sub	r2,r3,r2
 4025070:	a0800215 	stw	r2,8(r20)
 4025074:	103fef1e 	bne	r2,zero,4025034 <__flash_rwdata_start+0xfffef7e4>
 4025078:	0005883a 	mov	r2,zero
 402507c:	dfc00b17 	ldw	ra,44(sp)
 4025080:	df000a17 	ldw	fp,40(sp)
 4025084:	ddc00917 	ldw	r23,36(sp)
 4025088:	dd800817 	ldw	r22,32(sp)
 402508c:	dd400717 	ldw	r21,28(sp)
 4025090:	dd000617 	ldw	r20,24(sp)
 4025094:	dcc00517 	ldw	r19,20(sp)
 4025098:	dc800417 	ldw	r18,16(sp)
 402509c:	dc400317 	ldw	r17,12(sp)
 40250a0:	dc000217 	ldw	r16,8(sp)
 40250a4:	dec00c04 	addi	sp,sp,48
 40250a8:	f800283a 	ret
 40250ac:	800b883a 	mov	r5,r16
 40250b0:	a809883a 	mov	r4,r21
 40250b4:	4022b340 	call	4022b34 <__swsetup_r>
 40250b8:	1000ee1e 	bne	r2,zero,4025474 <__sfvwrite_r+0x4b0>
 40250bc:	80c0030b 	ldhu	r3,12(r16)
 40250c0:	a4400017 	ldw	r17,0(r20)
 40250c4:	1880008c 	andi	r2,r3,2
 40250c8:	103fd61e 	bne	r2,zero,4025024 <__flash_rwdata_start+0xfffef7d4>
 40250cc:	1880004c 	andi	r2,r3,1
 40250d0:	1000421e 	bne	r2,zero,40251dc <__sfvwrite_r+0x218>
 40250d4:	0039883a 	mov	fp,zero
 40250d8:	0025883a 	mov	r18,zero
 40250dc:	90001a26 	beq	r18,zero,4025148 <__sfvwrite_r+0x184>
 40250e0:	1880800c 	andi	r2,r3,512
 40250e4:	84c00217 	ldw	r19,8(r16)
 40250e8:	10002126 	beq	r2,zero,4025170 <__sfvwrite_r+0x1ac>
 40250ec:	982f883a 	mov	r23,r19
 40250f0:	94c09636 	bltu	r18,r19,402534c <__sfvwrite_r+0x388>
 40250f4:	1881200c 	andi	r2,r3,1152
 40250f8:	1000a11e 	bne	r2,zero,4025380 <__sfvwrite_r+0x3bc>
 40250fc:	81000017 	ldw	r4,0(r16)
 4025100:	b80d883a 	mov	r6,r23
 4025104:	e00b883a 	mov	r5,fp
 4025108:	40262e40 	call	40262e4 <memmove>
 402510c:	80c00217 	ldw	r3,8(r16)
 4025110:	81000017 	ldw	r4,0(r16)
 4025114:	9005883a 	mov	r2,r18
 4025118:	1ce7c83a 	sub	r19,r3,r19
 402511c:	25cf883a 	add	r7,r4,r23
 4025120:	84c00215 	stw	r19,8(r16)
 4025124:	81c00015 	stw	r7,0(r16)
 4025128:	a0c00217 	ldw	r3,8(r20)
 402512c:	e0b9883a 	add	fp,fp,r2
 4025130:	90a5c83a 	sub	r18,r18,r2
 4025134:	18a7c83a 	sub	r19,r3,r2
 4025138:	a4c00215 	stw	r19,8(r20)
 402513c:	983fce26 	beq	r19,zero,4025078 <__flash_rwdata_start+0xfffef828>
 4025140:	80c0030b 	ldhu	r3,12(r16)
 4025144:	903fe61e 	bne	r18,zero,40250e0 <__flash_rwdata_start+0xfffef890>
 4025148:	8f000017 	ldw	fp,0(r17)
 402514c:	8c800117 	ldw	r18,4(r17)
 4025150:	8c400204 	addi	r17,r17,8
 4025154:	003fe106 	br	40250dc <__flash_rwdata_start+0xfffef88c>
 4025158:	8cc00017 	ldw	r19,0(r17)
 402515c:	8c800117 	ldw	r18,4(r17)
 4025160:	8c400204 	addi	r17,r17,8
 4025164:	003fb306 	br	4025034 <__flash_rwdata_start+0xfffef7e4>
 4025168:	0005883a 	mov	r2,zero
 402516c:	f800283a 	ret
 4025170:	81000017 	ldw	r4,0(r16)
 4025174:	80800417 	ldw	r2,16(r16)
 4025178:	11005a36 	bltu	r2,r4,40252e4 <__sfvwrite_r+0x320>
 402517c:	85c00517 	ldw	r23,20(r16)
 4025180:	95c05836 	bltu	r18,r23,40252e4 <__sfvwrite_r+0x320>
 4025184:	00a00034 	movhi	r2,32768
 4025188:	10bfffc4 	addi	r2,r2,-1
 402518c:	9009883a 	mov	r4,r18
 4025190:	1480012e 	bgeu	r2,r18,4025198 <__sfvwrite_r+0x1d4>
 4025194:	1009883a 	mov	r4,r2
 4025198:	b80b883a 	mov	r5,r23
 402519c:	402aa680 	call	402aa68 <__divsi3>
 40251a0:	b80b883a 	mov	r5,r23
 40251a4:	1009883a 	mov	r4,r2
 40251a8:	402ac1c0 	call	402ac1c <__mulsi3>
 40251ac:	81400717 	ldw	r5,28(r16)
 40251b0:	80c00917 	ldw	r3,36(r16)
 40251b4:	100f883a 	mov	r7,r2
 40251b8:	e00d883a 	mov	r6,fp
 40251bc:	a809883a 	mov	r4,r21
 40251c0:	183ee83a 	callr	r3
 40251c4:	00bfd816 	blt	zero,r2,4025128 <__flash_rwdata_start+0xfffef8d8>
 40251c8:	8080030b 	ldhu	r2,12(r16)
 40251cc:	10801014 	ori	r2,r2,64
 40251d0:	8080030d 	sth	r2,12(r16)
 40251d4:	00bfffc4 	movi	r2,-1
 40251d8:	003fa806 	br	402507c <__flash_rwdata_start+0xfffef82c>
 40251dc:	0027883a 	mov	r19,zero
 40251e0:	0011883a 	mov	r8,zero
 40251e4:	0039883a 	mov	fp,zero
 40251e8:	0025883a 	mov	r18,zero
 40251ec:	90001f26 	beq	r18,zero,402526c <__sfvwrite_r+0x2a8>
 40251f0:	40005a26 	beq	r8,zero,402535c <__sfvwrite_r+0x398>
 40251f4:	982d883a 	mov	r22,r19
 40251f8:	94c0012e 	bgeu	r18,r19,4025200 <__sfvwrite_r+0x23c>
 40251fc:	902d883a 	mov	r22,r18
 4025200:	81000017 	ldw	r4,0(r16)
 4025204:	80800417 	ldw	r2,16(r16)
 4025208:	b02f883a 	mov	r23,r22
 402520c:	81c00517 	ldw	r7,20(r16)
 4025210:	1100032e 	bgeu	r2,r4,4025220 <__sfvwrite_r+0x25c>
 4025214:	80c00217 	ldw	r3,8(r16)
 4025218:	38c7883a 	add	r3,r7,r3
 402521c:	1d801816 	blt	r3,r22,4025280 <__sfvwrite_r+0x2bc>
 4025220:	b1c03e16 	blt	r22,r7,402531c <__sfvwrite_r+0x358>
 4025224:	80800917 	ldw	r2,36(r16)
 4025228:	81400717 	ldw	r5,28(r16)
 402522c:	e00d883a 	mov	r6,fp
 4025230:	da000115 	stw	r8,4(sp)
 4025234:	a809883a 	mov	r4,r21
 4025238:	103ee83a 	callr	r2
 402523c:	102f883a 	mov	r23,r2
 4025240:	da000117 	ldw	r8,4(sp)
 4025244:	00bfe00e 	bge	zero,r2,40251c8 <__flash_rwdata_start+0xfffef978>
 4025248:	9de7c83a 	sub	r19,r19,r23
 402524c:	98001f26 	beq	r19,zero,40252cc <__sfvwrite_r+0x308>
 4025250:	a0800217 	ldw	r2,8(r20)
 4025254:	e5f9883a 	add	fp,fp,r23
 4025258:	95e5c83a 	sub	r18,r18,r23
 402525c:	15efc83a 	sub	r23,r2,r23
 4025260:	a5c00215 	stw	r23,8(r20)
 4025264:	b83f8426 	beq	r23,zero,4025078 <__flash_rwdata_start+0xfffef828>
 4025268:	903fe11e 	bne	r18,zero,40251f0 <__flash_rwdata_start+0xfffef9a0>
 402526c:	8f000017 	ldw	fp,0(r17)
 4025270:	8c800117 	ldw	r18,4(r17)
 4025274:	0011883a 	mov	r8,zero
 4025278:	8c400204 	addi	r17,r17,8
 402527c:	003fdb06 	br	40251ec <__flash_rwdata_start+0xfffef99c>
 4025280:	180d883a 	mov	r6,r3
 4025284:	e00b883a 	mov	r5,fp
 4025288:	da000115 	stw	r8,4(sp)
 402528c:	d8c00015 	stw	r3,0(sp)
 4025290:	40262e40 	call	40262e4 <memmove>
 4025294:	d8c00017 	ldw	r3,0(sp)
 4025298:	80800017 	ldw	r2,0(r16)
 402529c:	800b883a 	mov	r5,r16
 40252a0:	a809883a 	mov	r4,r21
 40252a4:	10c5883a 	add	r2,r2,r3
 40252a8:	80800015 	stw	r2,0(r16)
 40252ac:	d8c00015 	stw	r3,0(sp)
 40252b0:	40247540 	call	4024754 <_fflush_r>
 40252b4:	d8c00017 	ldw	r3,0(sp)
 40252b8:	da000117 	ldw	r8,4(sp)
 40252bc:	103fc21e 	bne	r2,zero,40251c8 <__flash_rwdata_start+0xfffef978>
 40252c0:	182f883a 	mov	r23,r3
 40252c4:	9de7c83a 	sub	r19,r19,r23
 40252c8:	983fe11e 	bne	r19,zero,4025250 <__flash_rwdata_start+0xfffefa00>
 40252cc:	800b883a 	mov	r5,r16
 40252d0:	a809883a 	mov	r4,r21
 40252d4:	40247540 	call	4024754 <_fflush_r>
 40252d8:	103fbb1e 	bne	r2,zero,40251c8 <__flash_rwdata_start+0xfffef978>
 40252dc:	0011883a 	mov	r8,zero
 40252e0:	003fdb06 	br	4025250 <__flash_rwdata_start+0xfffefa00>
 40252e4:	94c0012e 	bgeu	r18,r19,40252ec <__sfvwrite_r+0x328>
 40252e8:	9027883a 	mov	r19,r18
 40252ec:	980d883a 	mov	r6,r19
 40252f0:	e00b883a 	mov	r5,fp
 40252f4:	40262e40 	call	40262e4 <memmove>
 40252f8:	80800217 	ldw	r2,8(r16)
 40252fc:	80c00017 	ldw	r3,0(r16)
 4025300:	14c5c83a 	sub	r2,r2,r19
 4025304:	1cc7883a 	add	r3,r3,r19
 4025308:	80800215 	stw	r2,8(r16)
 402530c:	80c00015 	stw	r3,0(r16)
 4025310:	10004326 	beq	r2,zero,4025420 <__sfvwrite_r+0x45c>
 4025314:	9805883a 	mov	r2,r19
 4025318:	003f8306 	br	4025128 <__flash_rwdata_start+0xfffef8d8>
 402531c:	b00d883a 	mov	r6,r22
 4025320:	e00b883a 	mov	r5,fp
 4025324:	da000115 	stw	r8,4(sp)
 4025328:	40262e40 	call	40262e4 <memmove>
 402532c:	80800217 	ldw	r2,8(r16)
 4025330:	80c00017 	ldw	r3,0(r16)
 4025334:	da000117 	ldw	r8,4(sp)
 4025338:	1585c83a 	sub	r2,r2,r22
 402533c:	1dad883a 	add	r22,r3,r22
 4025340:	80800215 	stw	r2,8(r16)
 4025344:	85800015 	stw	r22,0(r16)
 4025348:	003fbf06 	br	4025248 <__flash_rwdata_start+0xfffef9f8>
 402534c:	81000017 	ldw	r4,0(r16)
 4025350:	9027883a 	mov	r19,r18
 4025354:	902f883a 	mov	r23,r18
 4025358:	003f6906 	br	4025100 <__flash_rwdata_start+0xfffef8b0>
 402535c:	900d883a 	mov	r6,r18
 4025360:	01400284 	movi	r5,10
 4025364:	e009883a 	mov	r4,fp
 4025368:	40260b80 	call	40260b8 <memchr>
 402536c:	10003e26 	beq	r2,zero,4025468 <__sfvwrite_r+0x4a4>
 4025370:	10800044 	addi	r2,r2,1
 4025374:	1727c83a 	sub	r19,r2,fp
 4025378:	02000044 	movi	r8,1
 402537c:	003f9d06 	br	40251f4 <__flash_rwdata_start+0xfffef9a4>
 4025380:	80800517 	ldw	r2,20(r16)
 4025384:	81400417 	ldw	r5,16(r16)
 4025388:	81c00017 	ldw	r7,0(r16)
 402538c:	10a7883a 	add	r19,r2,r2
 4025390:	9885883a 	add	r2,r19,r2
 4025394:	1026d7fa 	srli	r19,r2,31
 4025398:	396dc83a 	sub	r22,r7,r5
 402539c:	b1000044 	addi	r4,r22,1
 40253a0:	9885883a 	add	r2,r19,r2
 40253a4:	1027d07a 	srai	r19,r2,1
 40253a8:	2485883a 	add	r2,r4,r18
 40253ac:	980d883a 	mov	r6,r19
 40253b0:	9880022e 	bgeu	r19,r2,40253bc <__sfvwrite_r+0x3f8>
 40253b4:	1027883a 	mov	r19,r2
 40253b8:	100d883a 	mov	r6,r2
 40253bc:	18c1000c 	andi	r3,r3,1024
 40253c0:	18001c26 	beq	r3,zero,4025434 <__sfvwrite_r+0x470>
 40253c4:	300b883a 	mov	r5,r6
 40253c8:	a809883a 	mov	r4,r21
 40253cc:	40258ac0 	call	40258ac <_malloc_r>
 40253d0:	102f883a 	mov	r23,r2
 40253d4:	10002926 	beq	r2,zero,402547c <__sfvwrite_r+0x4b8>
 40253d8:	81400417 	ldw	r5,16(r16)
 40253dc:	b00d883a 	mov	r6,r22
 40253e0:	1009883a 	mov	r4,r2
 40253e4:	402619c0 	call	402619c <memcpy>
 40253e8:	8080030b 	ldhu	r2,12(r16)
 40253ec:	00fedfc4 	movi	r3,-1153
 40253f0:	10c4703a 	and	r2,r2,r3
 40253f4:	10802014 	ori	r2,r2,128
 40253f8:	8080030d 	sth	r2,12(r16)
 40253fc:	bd89883a 	add	r4,r23,r22
 4025400:	9d8fc83a 	sub	r7,r19,r22
 4025404:	85c00415 	stw	r23,16(r16)
 4025408:	84c00515 	stw	r19,20(r16)
 402540c:	81000015 	stw	r4,0(r16)
 4025410:	9027883a 	mov	r19,r18
 4025414:	81c00215 	stw	r7,8(r16)
 4025418:	902f883a 	mov	r23,r18
 402541c:	003f3806 	br	4025100 <__flash_rwdata_start+0xfffef8b0>
 4025420:	800b883a 	mov	r5,r16
 4025424:	a809883a 	mov	r4,r21
 4025428:	40247540 	call	4024754 <_fflush_r>
 402542c:	103fb926 	beq	r2,zero,4025314 <__flash_rwdata_start+0xfffefac4>
 4025430:	003f6506 	br	40251c8 <__flash_rwdata_start+0xfffef978>
 4025434:	a809883a 	mov	r4,r21
 4025438:	40276200 	call	4027620 <_realloc_r>
 402543c:	102f883a 	mov	r23,r2
 4025440:	103fee1e 	bne	r2,zero,40253fc <__flash_rwdata_start+0xfffefbac>
 4025444:	81400417 	ldw	r5,16(r16)
 4025448:	a809883a 	mov	r4,r21
 402544c:	4024cb40 	call	4024cb4 <_free_r>
 4025450:	8080030b 	ldhu	r2,12(r16)
 4025454:	00ffdfc4 	movi	r3,-129
 4025458:	1884703a 	and	r2,r3,r2
 402545c:	00c00304 	movi	r3,12
 4025460:	a8c00015 	stw	r3,0(r21)
 4025464:	003f5906 	br	40251cc <__flash_rwdata_start+0xfffef97c>
 4025468:	94c00044 	addi	r19,r18,1
 402546c:	02000044 	movi	r8,1
 4025470:	003f6006 	br	40251f4 <__flash_rwdata_start+0xfffef9a4>
 4025474:	00bfffc4 	movi	r2,-1
 4025478:	003f0006 	br	402507c <__flash_rwdata_start+0xfffef82c>
 402547c:	00800304 	movi	r2,12
 4025480:	a8800015 	stw	r2,0(r21)
 4025484:	8080030b 	ldhu	r2,12(r16)
 4025488:	003f5006 	br	40251cc <__flash_rwdata_start+0xfffef97c>

0402548c <_fwalk>:
 402548c:	defff704 	addi	sp,sp,-36
 4025490:	dd000415 	stw	r20,16(sp)
 4025494:	dfc00815 	stw	ra,32(sp)
 4025498:	ddc00715 	stw	r23,28(sp)
 402549c:	dd800615 	stw	r22,24(sp)
 40254a0:	dd400515 	stw	r21,20(sp)
 40254a4:	dcc00315 	stw	r19,12(sp)
 40254a8:	dc800215 	stw	r18,8(sp)
 40254ac:	dc400115 	stw	r17,4(sp)
 40254b0:	dc000015 	stw	r16,0(sp)
 40254b4:	2500b804 	addi	r20,r4,736
 40254b8:	a0002326 	beq	r20,zero,4025548 <_fwalk+0xbc>
 40254bc:	282b883a 	mov	r21,r5
 40254c0:	002f883a 	mov	r23,zero
 40254c4:	05800044 	movi	r22,1
 40254c8:	04ffffc4 	movi	r19,-1
 40254cc:	a4400117 	ldw	r17,4(r20)
 40254d0:	a4800217 	ldw	r18,8(r20)
 40254d4:	8c7fffc4 	addi	r17,r17,-1
 40254d8:	88000d16 	blt	r17,zero,4025510 <_fwalk+0x84>
 40254dc:	94000304 	addi	r16,r18,12
 40254e0:	94800384 	addi	r18,r18,14
 40254e4:	8080000b 	ldhu	r2,0(r16)
 40254e8:	8c7fffc4 	addi	r17,r17,-1
 40254ec:	813ffd04 	addi	r4,r16,-12
 40254f0:	b080042e 	bgeu	r22,r2,4025504 <_fwalk+0x78>
 40254f4:	9080000f 	ldh	r2,0(r18)
 40254f8:	14c00226 	beq	r2,r19,4025504 <_fwalk+0x78>
 40254fc:	a83ee83a 	callr	r21
 4025500:	b8aeb03a 	or	r23,r23,r2
 4025504:	84001a04 	addi	r16,r16,104
 4025508:	94801a04 	addi	r18,r18,104
 402550c:	8cfff51e 	bne	r17,r19,40254e4 <__flash_rwdata_start+0xfffefc94>
 4025510:	a5000017 	ldw	r20,0(r20)
 4025514:	a03fed1e 	bne	r20,zero,40254cc <__flash_rwdata_start+0xfffefc7c>
 4025518:	b805883a 	mov	r2,r23
 402551c:	dfc00817 	ldw	ra,32(sp)
 4025520:	ddc00717 	ldw	r23,28(sp)
 4025524:	dd800617 	ldw	r22,24(sp)
 4025528:	dd400517 	ldw	r21,20(sp)
 402552c:	dd000417 	ldw	r20,16(sp)
 4025530:	dcc00317 	ldw	r19,12(sp)
 4025534:	dc800217 	ldw	r18,8(sp)
 4025538:	dc400117 	ldw	r17,4(sp)
 402553c:	dc000017 	ldw	r16,0(sp)
 4025540:	dec00904 	addi	sp,sp,36
 4025544:	f800283a 	ret
 4025548:	002f883a 	mov	r23,zero
 402554c:	003ff206 	br	4025518 <__flash_rwdata_start+0xfffefcc8>

04025550 <_fwalk_reent>:
 4025550:	defff704 	addi	sp,sp,-36
 4025554:	dd000415 	stw	r20,16(sp)
 4025558:	dfc00815 	stw	ra,32(sp)
 402555c:	ddc00715 	stw	r23,28(sp)
 4025560:	dd800615 	stw	r22,24(sp)
 4025564:	dd400515 	stw	r21,20(sp)
 4025568:	dcc00315 	stw	r19,12(sp)
 402556c:	dc800215 	stw	r18,8(sp)
 4025570:	dc400115 	stw	r17,4(sp)
 4025574:	dc000015 	stw	r16,0(sp)
 4025578:	2500b804 	addi	r20,r4,736
 402557c:	a0002326 	beq	r20,zero,402560c <_fwalk_reent+0xbc>
 4025580:	282b883a 	mov	r21,r5
 4025584:	2027883a 	mov	r19,r4
 4025588:	002f883a 	mov	r23,zero
 402558c:	05800044 	movi	r22,1
 4025590:	04bfffc4 	movi	r18,-1
 4025594:	a4400117 	ldw	r17,4(r20)
 4025598:	a4000217 	ldw	r16,8(r20)
 402559c:	8c7fffc4 	addi	r17,r17,-1
 40255a0:	88000c16 	blt	r17,zero,40255d4 <_fwalk_reent+0x84>
 40255a4:	84000304 	addi	r16,r16,12
 40255a8:	8080000b 	ldhu	r2,0(r16)
 40255ac:	8c7fffc4 	addi	r17,r17,-1
 40255b0:	817ffd04 	addi	r5,r16,-12
 40255b4:	b080052e 	bgeu	r22,r2,40255cc <_fwalk_reent+0x7c>
 40255b8:	8080008f 	ldh	r2,2(r16)
 40255bc:	9809883a 	mov	r4,r19
 40255c0:	14800226 	beq	r2,r18,40255cc <_fwalk_reent+0x7c>
 40255c4:	a83ee83a 	callr	r21
 40255c8:	b8aeb03a 	or	r23,r23,r2
 40255cc:	84001a04 	addi	r16,r16,104
 40255d0:	8cbff51e 	bne	r17,r18,40255a8 <__flash_rwdata_start+0xfffefd58>
 40255d4:	a5000017 	ldw	r20,0(r20)
 40255d8:	a03fee1e 	bne	r20,zero,4025594 <__flash_rwdata_start+0xfffefd44>
 40255dc:	b805883a 	mov	r2,r23
 40255e0:	dfc00817 	ldw	ra,32(sp)
 40255e4:	ddc00717 	ldw	r23,28(sp)
 40255e8:	dd800617 	ldw	r22,24(sp)
 40255ec:	dd400517 	ldw	r21,20(sp)
 40255f0:	dd000417 	ldw	r20,16(sp)
 40255f4:	dcc00317 	ldw	r19,12(sp)
 40255f8:	dc800217 	ldw	r18,8(sp)
 40255fc:	dc400117 	ldw	r17,4(sp)
 4025600:	dc000017 	ldw	r16,0(sp)
 4025604:	dec00904 	addi	sp,sp,36
 4025608:	f800283a 	ret
 402560c:	002f883a 	mov	r23,zero
 4025610:	003ff206 	br	40255dc <__flash_rwdata_start+0xfffefd8c>

04025614 <_setlocale_r>:
 4025614:	30001b26 	beq	r6,zero,4025684 <_setlocale_r+0x70>
 4025618:	01400034 	movhi	r5,0
 402561c:	defffe04 	addi	sp,sp,-8
 4025620:	29409c04 	addi	r5,r5,624
 4025624:	3009883a 	mov	r4,r6
 4025628:	dc000015 	stw	r16,0(sp)
 402562c:	dfc00115 	stw	ra,4(sp)
 4025630:	3021883a 	mov	r16,r6
 4025634:	4027d880 	call	4027d88 <strcmp>
 4025638:	1000061e 	bne	r2,zero,4025654 <_setlocale_r+0x40>
 402563c:	00800034 	movhi	r2,0
 4025640:	10809b04 	addi	r2,r2,620
 4025644:	dfc00117 	ldw	ra,4(sp)
 4025648:	dc000017 	ldw	r16,0(sp)
 402564c:	dec00204 	addi	sp,sp,8
 4025650:	f800283a 	ret
 4025654:	01400034 	movhi	r5,0
 4025658:	29409b04 	addi	r5,r5,620
 402565c:	8009883a 	mov	r4,r16
 4025660:	4027d880 	call	4027d88 <strcmp>
 4025664:	103ff526 	beq	r2,zero,402563c <__flash_rwdata_start+0xfffefdec>
 4025668:	01400034 	movhi	r5,0
 402566c:	29408604 	addi	r5,r5,536
 4025670:	8009883a 	mov	r4,r16
 4025674:	4027d880 	call	4027d88 <strcmp>
 4025678:	103ff026 	beq	r2,zero,402563c <__flash_rwdata_start+0xfffefdec>
 402567c:	0005883a 	mov	r2,zero
 4025680:	003ff006 	br	4025644 <__flash_rwdata_start+0xfffefdf4>
 4025684:	00800034 	movhi	r2,0
 4025688:	10809b04 	addi	r2,r2,620
 402568c:	f800283a 	ret

04025690 <__locale_charset>:
 4025690:	00800034 	movhi	r2,0
 4025694:	10826104 	addi	r2,r2,2436
 4025698:	f800283a 	ret

0402569c <__locale_mb_cur_max>:
 402569c:	00800034 	movhi	r2,0
 40256a0:	10881d04 	addi	r2,r2,8308
 40256a4:	10800017 	ldw	r2,0(r2)
 40256a8:	f800283a 	ret

040256ac <__locale_msgcharset>:
 40256ac:	00800034 	movhi	r2,0
 40256b0:	10825904 	addi	r2,r2,2404
 40256b4:	f800283a 	ret

040256b8 <__locale_cjk_lang>:
 40256b8:	0005883a 	mov	r2,zero
 40256bc:	f800283a 	ret

040256c0 <_localeconv_r>:
 40256c0:	00800034 	movhi	r2,0
 40256c4:	10826904 	addi	r2,r2,2468
 40256c8:	f800283a 	ret

040256cc <setlocale>:
 40256cc:	00800034 	movhi	r2,0
 40256d0:	10881c04 	addi	r2,r2,8304
 40256d4:	280d883a 	mov	r6,r5
 40256d8:	200b883a 	mov	r5,r4
 40256dc:	11000017 	ldw	r4,0(r2)
 40256e0:	40256141 	jmpi	4025614 <_setlocale_r>

040256e4 <localeconv>:
 40256e4:	00800034 	movhi	r2,0
 40256e8:	10826904 	addi	r2,r2,2468
 40256ec:	f800283a 	ret

040256f0 <__smakebuf_r>:
 40256f0:	2880030b 	ldhu	r2,12(r5)
 40256f4:	10c0008c 	andi	r3,r2,2
 40256f8:	1800411e 	bne	r3,zero,4025800 <__smakebuf_r+0x110>
 40256fc:	deffec04 	addi	sp,sp,-80
 4025700:	dc000f15 	stw	r16,60(sp)
 4025704:	2821883a 	mov	r16,r5
 4025708:	2940038f 	ldh	r5,14(r5)
 402570c:	dc401015 	stw	r17,64(sp)
 4025710:	dfc01315 	stw	ra,76(sp)
 4025714:	dcc01215 	stw	r19,72(sp)
 4025718:	dc801115 	stw	r18,68(sp)
 402571c:	2023883a 	mov	r17,r4
 4025720:	28001c16 	blt	r5,zero,4025794 <__smakebuf_r+0xa4>
 4025724:	d80d883a 	mov	r6,sp
 4025728:	40299f80 	call	40299f8 <_fstat_r>
 402572c:	10001816 	blt	r2,zero,4025790 <__smakebuf_r+0xa0>
 4025730:	d8800117 	ldw	r2,4(sp)
 4025734:	00e00014 	movui	r3,32768
 4025738:	10bc000c 	andi	r2,r2,61440
 402573c:	14c80020 	cmpeqi	r19,r2,8192
 4025740:	10c03726 	beq	r2,r3,4025820 <__smakebuf_r+0x130>
 4025744:	80c0030b 	ldhu	r3,12(r16)
 4025748:	18c20014 	ori	r3,r3,2048
 402574c:	80c0030d 	sth	r3,12(r16)
 4025750:	00c80004 	movi	r3,8192
 4025754:	10c0521e 	bne	r2,r3,40258a0 <__smakebuf_r+0x1b0>
 4025758:	8140038f 	ldh	r5,14(r16)
 402575c:	8809883a 	mov	r4,r17
 4025760:	4029a540 	call	4029a54 <_isatty_r>
 4025764:	10004c26 	beq	r2,zero,4025898 <__smakebuf_r+0x1a8>
 4025768:	8080030b 	ldhu	r2,12(r16)
 402576c:	80c010c4 	addi	r3,r16,67
 4025770:	80c00015 	stw	r3,0(r16)
 4025774:	10800054 	ori	r2,r2,1
 4025778:	8080030d 	sth	r2,12(r16)
 402577c:	00800044 	movi	r2,1
 4025780:	80c00415 	stw	r3,16(r16)
 4025784:	80800515 	stw	r2,20(r16)
 4025788:	04810004 	movi	r18,1024
 402578c:	00000706 	br	40257ac <__smakebuf_r+0xbc>
 4025790:	8080030b 	ldhu	r2,12(r16)
 4025794:	10c0200c 	andi	r3,r2,128
 4025798:	18001f1e 	bne	r3,zero,4025818 <__smakebuf_r+0x128>
 402579c:	04810004 	movi	r18,1024
 40257a0:	10820014 	ori	r2,r2,2048
 40257a4:	8080030d 	sth	r2,12(r16)
 40257a8:	0027883a 	mov	r19,zero
 40257ac:	900b883a 	mov	r5,r18
 40257b0:	8809883a 	mov	r4,r17
 40257b4:	40258ac0 	call	40258ac <_malloc_r>
 40257b8:	10002c26 	beq	r2,zero,402586c <__smakebuf_r+0x17c>
 40257bc:	80c0030b 	ldhu	r3,12(r16)
 40257c0:	010100b4 	movhi	r4,1026
 40257c4:	2111fa04 	addi	r4,r4,18408
 40257c8:	89000f15 	stw	r4,60(r17)
 40257cc:	18c02014 	ori	r3,r3,128
 40257d0:	80c0030d 	sth	r3,12(r16)
 40257d4:	80800015 	stw	r2,0(r16)
 40257d8:	80800415 	stw	r2,16(r16)
 40257dc:	84800515 	stw	r18,20(r16)
 40257e0:	98001a1e 	bne	r19,zero,402584c <__smakebuf_r+0x15c>
 40257e4:	dfc01317 	ldw	ra,76(sp)
 40257e8:	dcc01217 	ldw	r19,72(sp)
 40257ec:	dc801117 	ldw	r18,68(sp)
 40257f0:	dc401017 	ldw	r17,64(sp)
 40257f4:	dc000f17 	ldw	r16,60(sp)
 40257f8:	dec01404 	addi	sp,sp,80
 40257fc:	f800283a 	ret
 4025800:	288010c4 	addi	r2,r5,67
 4025804:	28800015 	stw	r2,0(r5)
 4025808:	28800415 	stw	r2,16(r5)
 402580c:	00800044 	movi	r2,1
 4025810:	28800515 	stw	r2,20(r5)
 4025814:	f800283a 	ret
 4025818:	04801004 	movi	r18,64
 402581c:	003fe006 	br	40257a0 <__flash_rwdata_start+0xfffeff50>
 4025820:	81000a17 	ldw	r4,40(r16)
 4025824:	00c100b4 	movhi	r3,1026
 4025828:	18df4904 	addi	r3,r3,32036
 402582c:	20ffc51e 	bne	r4,r3,4025744 <__flash_rwdata_start+0xfffefef4>
 4025830:	8080030b 	ldhu	r2,12(r16)
 4025834:	04810004 	movi	r18,1024
 4025838:	84801315 	stw	r18,76(r16)
 402583c:	1484b03a 	or	r2,r2,r18
 4025840:	8080030d 	sth	r2,12(r16)
 4025844:	0027883a 	mov	r19,zero
 4025848:	003fd806 	br	40257ac <__flash_rwdata_start+0xfffeff5c>
 402584c:	8140038f 	ldh	r5,14(r16)
 4025850:	8809883a 	mov	r4,r17
 4025854:	4029a540 	call	4029a54 <_isatty_r>
 4025858:	103fe226 	beq	r2,zero,40257e4 <__flash_rwdata_start+0xfffeff94>
 402585c:	8080030b 	ldhu	r2,12(r16)
 4025860:	10800054 	ori	r2,r2,1
 4025864:	8080030d 	sth	r2,12(r16)
 4025868:	003fde06 	br	40257e4 <__flash_rwdata_start+0xfffeff94>
 402586c:	8080030b 	ldhu	r2,12(r16)
 4025870:	10c0800c 	andi	r3,r2,512
 4025874:	183fdb1e 	bne	r3,zero,40257e4 <__flash_rwdata_start+0xfffeff94>
 4025878:	10800094 	ori	r2,r2,2
 402587c:	80c010c4 	addi	r3,r16,67
 4025880:	8080030d 	sth	r2,12(r16)
 4025884:	00800044 	movi	r2,1
 4025888:	80c00015 	stw	r3,0(r16)
 402588c:	80c00415 	stw	r3,16(r16)
 4025890:	80800515 	stw	r2,20(r16)
 4025894:	003fd306 	br	40257e4 <__flash_rwdata_start+0xfffeff94>
 4025898:	04810004 	movi	r18,1024
 402589c:	003fc306 	br	40257ac <__flash_rwdata_start+0xfffeff5c>
 40258a0:	0027883a 	mov	r19,zero
 40258a4:	04810004 	movi	r18,1024
 40258a8:	003fc006 	br	40257ac <__flash_rwdata_start+0xfffeff5c>

040258ac <_malloc_r>:
 40258ac:	defff504 	addi	sp,sp,-44
 40258b0:	dc800315 	stw	r18,12(sp)
 40258b4:	dfc00a15 	stw	ra,40(sp)
 40258b8:	df000915 	stw	fp,36(sp)
 40258bc:	ddc00815 	stw	r23,32(sp)
 40258c0:	dd800715 	stw	r22,28(sp)
 40258c4:	dd400615 	stw	r21,24(sp)
 40258c8:	dd000515 	stw	r20,20(sp)
 40258cc:	dcc00415 	stw	r19,16(sp)
 40258d0:	dc400215 	stw	r17,8(sp)
 40258d4:	dc000115 	stw	r16,4(sp)
 40258d8:	288002c4 	addi	r2,r5,11
 40258dc:	00c00584 	movi	r3,22
 40258e0:	2025883a 	mov	r18,r4
 40258e4:	18807f2e 	bgeu	r3,r2,4025ae4 <_malloc_r+0x238>
 40258e8:	047ffe04 	movi	r17,-8
 40258ec:	1462703a 	and	r17,r2,r17
 40258f0:	8800a316 	blt	r17,zero,4025b80 <_malloc_r+0x2d4>
 40258f4:	8940a236 	bltu	r17,r5,4025b80 <_malloc_r+0x2d4>
 40258f8:	402da840 	call	402da84 <__malloc_lock>
 40258fc:	00807dc4 	movi	r2,503
 4025900:	1441e92e 	bgeu	r2,r17,40260a8 <_malloc_r+0x7fc>
 4025904:	8804d27a 	srli	r2,r17,9
 4025908:	1000a126 	beq	r2,zero,4025b90 <_malloc_r+0x2e4>
 402590c:	00c00104 	movi	r3,4
 4025910:	18811e36 	bltu	r3,r2,4025d8c <_malloc_r+0x4e0>
 4025914:	8804d1ba 	srli	r2,r17,6
 4025918:	12000e44 	addi	r8,r2,57
 402591c:	11c00e04 	addi	r7,r2,56
 4025920:	4209883a 	add	r4,r8,r8
 4025924:	04c00034 	movhi	r19,0
 4025928:	2109883a 	add	r4,r4,r4
 402592c:	9cc27704 	addi	r19,r19,2524
 4025930:	2109883a 	add	r4,r4,r4
 4025934:	9909883a 	add	r4,r19,r4
 4025938:	24000117 	ldw	r16,4(r4)
 402593c:	213ffe04 	addi	r4,r4,-8
 4025940:	24009726 	beq	r4,r16,4025ba0 <_malloc_r+0x2f4>
 4025944:	80800117 	ldw	r2,4(r16)
 4025948:	01bfff04 	movi	r6,-4
 402594c:	014003c4 	movi	r5,15
 4025950:	1184703a 	and	r2,r2,r6
 4025954:	1447c83a 	sub	r3,r2,r17
 4025958:	28c00716 	blt	r5,r3,4025978 <_malloc_r+0xcc>
 402595c:	1800920e 	bge	r3,zero,4025ba8 <_malloc_r+0x2fc>
 4025960:	84000317 	ldw	r16,12(r16)
 4025964:	24008e26 	beq	r4,r16,4025ba0 <_malloc_r+0x2f4>
 4025968:	80800117 	ldw	r2,4(r16)
 402596c:	1184703a 	and	r2,r2,r6
 4025970:	1447c83a 	sub	r3,r2,r17
 4025974:	28fff90e 	bge	r5,r3,402595c <__flash_rwdata_start+0xffff010c>
 4025978:	3809883a 	mov	r4,r7
 402597c:	01800034 	movhi	r6,0
 4025980:	9c000417 	ldw	r16,16(r19)
 4025984:	31827704 	addi	r6,r6,2524
 4025988:	32000204 	addi	r8,r6,8
 402598c:	82013426 	beq	r16,r8,4025e60 <_malloc_r+0x5b4>
 4025990:	80c00117 	ldw	r3,4(r16)
 4025994:	00bfff04 	movi	r2,-4
 4025998:	188e703a 	and	r7,r3,r2
 402599c:	3c45c83a 	sub	r2,r7,r17
 40259a0:	00c003c4 	movi	r3,15
 40259a4:	18811f16 	blt	r3,r2,4025e24 <_malloc_r+0x578>
 40259a8:	32000515 	stw	r8,20(r6)
 40259ac:	32000415 	stw	r8,16(r6)
 40259b0:	10007f0e 	bge	r2,zero,4025bb0 <_malloc_r+0x304>
 40259b4:	00807fc4 	movi	r2,511
 40259b8:	11c0fd36 	bltu	r2,r7,4025db0 <_malloc_r+0x504>
 40259bc:	3806d0fa 	srli	r3,r7,3
 40259c0:	01c00044 	movi	r7,1
 40259c4:	30800117 	ldw	r2,4(r6)
 40259c8:	19400044 	addi	r5,r3,1
 40259cc:	294b883a 	add	r5,r5,r5
 40259d0:	1807d0ba 	srai	r3,r3,2
 40259d4:	294b883a 	add	r5,r5,r5
 40259d8:	294b883a 	add	r5,r5,r5
 40259dc:	298b883a 	add	r5,r5,r6
 40259e0:	38c6983a 	sll	r3,r7,r3
 40259e4:	29c00017 	ldw	r7,0(r5)
 40259e8:	2a7ffe04 	addi	r9,r5,-8
 40259ec:	1886b03a 	or	r3,r3,r2
 40259f0:	82400315 	stw	r9,12(r16)
 40259f4:	81c00215 	stw	r7,8(r16)
 40259f8:	30c00115 	stw	r3,4(r6)
 40259fc:	2c000015 	stw	r16,0(r5)
 4025a00:	3c000315 	stw	r16,12(r7)
 4025a04:	2005d0ba 	srai	r2,r4,2
 4025a08:	01400044 	movi	r5,1
 4025a0c:	288a983a 	sll	r5,r5,r2
 4025a10:	19406f36 	bltu	r3,r5,4025bd0 <_malloc_r+0x324>
 4025a14:	28c4703a 	and	r2,r5,r3
 4025a18:	10000a1e 	bne	r2,zero,4025a44 <_malloc_r+0x198>
 4025a1c:	00bfff04 	movi	r2,-4
 4025a20:	294b883a 	add	r5,r5,r5
 4025a24:	2088703a 	and	r4,r4,r2
 4025a28:	28c4703a 	and	r2,r5,r3
 4025a2c:	21000104 	addi	r4,r4,4
 4025a30:	1000041e 	bne	r2,zero,4025a44 <_malloc_r+0x198>
 4025a34:	294b883a 	add	r5,r5,r5
 4025a38:	28c4703a 	and	r2,r5,r3
 4025a3c:	21000104 	addi	r4,r4,4
 4025a40:	103ffc26 	beq	r2,zero,4025a34 <__flash_rwdata_start+0xffff01e4>
 4025a44:	02bfff04 	movi	r10,-4
 4025a48:	024003c4 	movi	r9,15
 4025a4c:	21800044 	addi	r6,r4,1
 4025a50:	318d883a 	add	r6,r6,r6
 4025a54:	318d883a 	add	r6,r6,r6
 4025a58:	318d883a 	add	r6,r6,r6
 4025a5c:	998d883a 	add	r6,r19,r6
 4025a60:	333ffe04 	addi	r12,r6,-8
 4025a64:	2017883a 	mov	r11,r4
 4025a68:	31800104 	addi	r6,r6,4
 4025a6c:	34000017 	ldw	r16,0(r6)
 4025a70:	31fffd04 	addi	r7,r6,-12
 4025a74:	81c0041e 	bne	r16,r7,4025a88 <_malloc_r+0x1dc>
 4025a78:	0000fb06 	br	4025e68 <_malloc_r+0x5bc>
 4025a7c:	1801030e 	bge	r3,zero,4025e8c <_malloc_r+0x5e0>
 4025a80:	84000317 	ldw	r16,12(r16)
 4025a84:	81c0f826 	beq	r16,r7,4025e68 <_malloc_r+0x5bc>
 4025a88:	80800117 	ldw	r2,4(r16)
 4025a8c:	1284703a 	and	r2,r2,r10
 4025a90:	1447c83a 	sub	r3,r2,r17
 4025a94:	48fff90e 	bge	r9,r3,4025a7c <__flash_rwdata_start+0xffff022c>
 4025a98:	80800317 	ldw	r2,12(r16)
 4025a9c:	81000217 	ldw	r4,8(r16)
 4025aa0:	89400054 	ori	r5,r17,1
 4025aa4:	81400115 	stw	r5,4(r16)
 4025aa8:	20800315 	stw	r2,12(r4)
 4025aac:	11000215 	stw	r4,8(r2)
 4025ab0:	8463883a 	add	r17,r16,r17
 4025ab4:	9c400515 	stw	r17,20(r19)
 4025ab8:	9c400415 	stw	r17,16(r19)
 4025abc:	18800054 	ori	r2,r3,1
 4025ac0:	88800115 	stw	r2,4(r17)
 4025ac4:	8a000315 	stw	r8,12(r17)
 4025ac8:	8a000215 	stw	r8,8(r17)
 4025acc:	88e3883a 	add	r17,r17,r3
 4025ad0:	88c00015 	stw	r3,0(r17)
 4025ad4:	9009883a 	mov	r4,r18
 4025ad8:	402daa80 	call	402daa8 <__malloc_unlock>
 4025adc:	80800204 	addi	r2,r16,8
 4025ae0:	00001b06 	br	4025b50 <_malloc_r+0x2a4>
 4025ae4:	04400404 	movi	r17,16
 4025ae8:	89402536 	bltu	r17,r5,4025b80 <_malloc_r+0x2d4>
 4025aec:	402da840 	call	402da84 <__malloc_lock>
 4025af0:	00800184 	movi	r2,6
 4025af4:	01000084 	movi	r4,2
 4025af8:	04c00034 	movhi	r19,0
 4025afc:	1085883a 	add	r2,r2,r2
 4025b00:	9cc27704 	addi	r19,r19,2524
 4025b04:	1085883a 	add	r2,r2,r2
 4025b08:	9885883a 	add	r2,r19,r2
 4025b0c:	14000117 	ldw	r16,4(r2)
 4025b10:	10fffe04 	addi	r3,r2,-8
 4025b14:	80c0d926 	beq	r16,r3,4025e7c <_malloc_r+0x5d0>
 4025b18:	80c00117 	ldw	r3,4(r16)
 4025b1c:	81000317 	ldw	r4,12(r16)
 4025b20:	00bfff04 	movi	r2,-4
 4025b24:	1884703a 	and	r2,r3,r2
 4025b28:	81400217 	ldw	r5,8(r16)
 4025b2c:	8085883a 	add	r2,r16,r2
 4025b30:	10c00117 	ldw	r3,4(r2)
 4025b34:	29000315 	stw	r4,12(r5)
 4025b38:	21400215 	stw	r5,8(r4)
 4025b3c:	18c00054 	ori	r3,r3,1
 4025b40:	10c00115 	stw	r3,4(r2)
 4025b44:	9009883a 	mov	r4,r18
 4025b48:	402daa80 	call	402daa8 <__malloc_unlock>
 4025b4c:	80800204 	addi	r2,r16,8
 4025b50:	dfc00a17 	ldw	ra,40(sp)
 4025b54:	df000917 	ldw	fp,36(sp)
 4025b58:	ddc00817 	ldw	r23,32(sp)
 4025b5c:	dd800717 	ldw	r22,28(sp)
 4025b60:	dd400617 	ldw	r21,24(sp)
 4025b64:	dd000517 	ldw	r20,20(sp)
 4025b68:	dcc00417 	ldw	r19,16(sp)
 4025b6c:	dc800317 	ldw	r18,12(sp)
 4025b70:	dc400217 	ldw	r17,8(sp)
 4025b74:	dc000117 	ldw	r16,4(sp)
 4025b78:	dec00b04 	addi	sp,sp,44
 4025b7c:	f800283a 	ret
 4025b80:	00800304 	movi	r2,12
 4025b84:	90800015 	stw	r2,0(r18)
 4025b88:	0005883a 	mov	r2,zero
 4025b8c:	003ff006 	br	4025b50 <__flash_rwdata_start+0xffff0300>
 4025b90:	01002004 	movi	r4,128
 4025b94:	02001004 	movi	r8,64
 4025b98:	01c00fc4 	movi	r7,63
 4025b9c:	003f6106 	br	4025924 <__flash_rwdata_start+0xffff00d4>
 4025ba0:	4009883a 	mov	r4,r8
 4025ba4:	003f7506 	br	402597c <__flash_rwdata_start+0xffff012c>
 4025ba8:	81000317 	ldw	r4,12(r16)
 4025bac:	003fde06 	br	4025b28 <__flash_rwdata_start+0xffff02d8>
 4025bb0:	81c5883a 	add	r2,r16,r7
 4025bb4:	11400117 	ldw	r5,4(r2)
 4025bb8:	9009883a 	mov	r4,r18
 4025bbc:	29400054 	ori	r5,r5,1
 4025bc0:	11400115 	stw	r5,4(r2)
 4025bc4:	402daa80 	call	402daa8 <__malloc_unlock>
 4025bc8:	80800204 	addi	r2,r16,8
 4025bcc:	003fe006 	br	4025b50 <__flash_rwdata_start+0xffff0300>
 4025bd0:	9c000217 	ldw	r16,8(r19)
 4025bd4:	00bfff04 	movi	r2,-4
 4025bd8:	85800117 	ldw	r22,4(r16)
 4025bdc:	b0ac703a 	and	r22,r22,r2
 4025be0:	b4400336 	bltu	r22,r17,4025bf0 <_malloc_r+0x344>
 4025be4:	b445c83a 	sub	r2,r22,r17
 4025be8:	00c003c4 	movi	r3,15
 4025bec:	18805d16 	blt	r3,r2,4025d64 <_malloc_r+0x4b8>
 4025bf0:	05c00034 	movhi	r23,0
 4025bf4:	00800034 	movhi	r2,0
 4025bf8:	10883504 	addi	r2,r2,8404
 4025bfc:	bdc81e04 	addi	r23,r23,8312
 4025c00:	15400017 	ldw	r21,0(r2)
 4025c04:	b8c00017 	ldw	r3,0(r23)
 4025c08:	00bfffc4 	movi	r2,-1
 4025c0c:	858d883a 	add	r6,r16,r22
 4025c10:	8d6b883a 	add	r21,r17,r21
 4025c14:	1880ea26 	beq	r3,r2,4025fc0 <_malloc_r+0x714>
 4025c18:	ad4403c4 	addi	r21,r21,4111
 4025c1c:	00bc0004 	movi	r2,-4096
 4025c20:	a8aa703a 	and	r21,r21,r2
 4025c24:	a80b883a 	mov	r5,r21
 4025c28:	9009883a 	mov	r4,r18
 4025c2c:	d9800015 	stw	r6,0(sp)
 4025c30:	4027bf80 	call	4027bf8 <_sbrk_r>
 4025c34:	1029883a 	mov	r20,r2
 4025c38:	00bfffc4 	movi	r2,-1
 4025c3c:	d9800017 	ldw	r6,0(sp)
 4025c40:	a080e826 	beq	r20,r2,4025fe4 <_malloc_r+0x738>
 4025c44:	a180a636 	bltu	r20,r6,4025ee0 <_malloc_r+0x634>
 4025c48:	07000034 	movhi	fp,0
 4025c4c:	e7084b04 	addi	fp,fp,8492
 4025c50:	e0800017 	ldw	r2,0(fp)
 4025c54:	a887883a 	add	r3,r21,r2
 4025c58:	e0c00015 	stw	r3,0(fp)
 4025c5c:	3500e626 	beq	r6,r20,4025ff8 <_malloc_r+0x74c>
 4025c60:	b9000017 	ldw	r4,0(r23)
 4025c64:	00bfffc4 	movi	r2,-1
 4025c68:	2080ee26 	beq	r4,r2,4026024 <_malloc_r+0x778>
 4025c6c:	a185c83a 	sub	r2,r20,r6
 4025c70:	10c5883a 	add	r2,r2,r3
 4025c74:	e0800015 	stw	r2,0(fp)
 4025c78:	a0c001cc 	andi	r3,r20,7
 4025c7c:	1800bc26 	beq	r3,zero,4025f70 <_malloc_r+0x6c4>
 4025c80:	a0e9c83a 	sub	r20,r20,r3
 4025c84:	00840204 	movi	r2,4104
 4025c88:	a5000204 	addi	r20,r20,8
 4025c8c:	10c7c83a 	sub	r3,r2,r3
 4025c90:	a545883a 	add	r2,r20,r21
 4025c94:	1083ffcc 	andi	r2,r2,4095
 4025c98:	18abc83a 	sub	r21,r3,r2
 4025c9c:	a80b883a 	mov	r5,r21
 4025ca0:	9009883a 	mov	r4,r18
 4025ca4:	4027bf80 	call	4027bf8 <_sbrk_r>
 4025ca8:	00ffffc4 	movi	r3,-1
 4025cac:	10c0e126 	beq	r2,r3,4026034 <_malloc_r+0x788>
 4025cb0:	1505c83a 	sub	r2,r2,r20
 4025cb4:	1545883a 	add	r2,r2,r21
 4025cb8:	10800054 	ori	r2,r2,1
 4025cbc:	e0c00017 	ldw	r3,0(fp)
 4025cc0:	9d000215 	stw	r20,8(r19)
 4025cc4:	a0800115 	stw	r2,4(r20)
 4025cc8:	a8c7883a 	add	r3,r21,r3
 4025ccc:	e0c00015 	stw	r3,0(fp)
 4025cd0:	84c00e26 	beq	r16,r19,4025d0c <_malloc_r+0x460>
 4025cd4:	018003c4 	movi	r6,15
 4025cd8:	3580a72e 	bgeu	r6,r22,4025f78 <_malloc_r+0x6cc>
 4025cdc:	81400117 	ldw	r5,4(r16)
 4025ce0:	013ffe04 	movi	r4,-8
 4025ce4:	b0bffd04 	addi	r2,r22,-12
 4025ce8:	1104703a 	and	r2,r2,r4
 4025cec:	2900004c 	andi	r4,r5,1
 4025cf0:	2088b03a 	or	r4,r4,r2
 4025cf4:	81000115 	stw	r4,4(r16)
 4025cf8:	01400144 	movi	r5,5
 4025cfc:	8089883a 	add	r4,r16,r2
 4025d00:	21400115 	stw	r5,4(r4)
 4025d04:	21400215 	stw	r5,8(r4)
 4025d08:	3080cd36 	bltu	r6,r2,4026040 <_malloc_r+0x794>
 4025d0c:	00800034 	movhi	r2,0
 4025d10:	10883404 	addi	r2,r2,8400
 4025d14:	11000017 	ldw	r4,0(r2)
 4025d18:	20c0012e 	bgeu	r4,r3,4025d20 <_malloc_r+0x474>
 4025d1c:	10c00015 	stw	r3,0(r2)
 4025d20:	00800034 	movhi	r2,0
 4025d24:	10883304 	addi	r2,r2,8396
 4025d28:	11000017 	ldw	r4,0(r2)
 4025d2c:	9c000217 	ldw	r16,8(r19)
 4025d30:	20c0012e 	bgeu	r4,r3,4025d38 <_malloc_r+0x48c>
 4025d34:	10c00015 	stw	r3,0(r2)
 4025d38:	80c00117 	ldw	r3,4(r16)
 4025d3c:	00bfff04 	movi	r2,-4
 4025d40:	1886703a 	and	r3,r3,r2
 4025d44:	1c45c83a 	sub	r2,r3,r17
 4025d48:	1c400236 	bltu	r3,r17,4025d54 <_malloc_r+0x4a8>
 4025d4c:	00c003c4 	movi	r3,15
 4025d50:	18800416 	blt	r3,r2,4025d64 <_malloc_r+0x4b8>
 4025d54:	9009883a 	mov	r4,r18
 4025d58:	402daa80 	call	402daa8 <__malloc_unlock>
 4025d5c:	0005883a 	mov	r2,zero
 4025d60:	003f7b06 	br	4025b50 <__flash_rwdata_start+0xffff0300>
 4025d64:	88c00054 	ori	r3,r17,1
 4025d68:	80c00115 	stw	r3,4(r16)
 4025d6c:	8463883a 	add	r17,r16,r17
 4025d70:	10800054 	ori	r2,r2,1
 4025d74:	9c400215 	stw	r17,8(r19)
 4025d78:	88800115 	stw	r2,4(r17)
 4025d7c:	9009883a 	mov	r4,r18
 4025d80:	402daa80 	call	402daa8 <__malloc_unlock>
 4025d84:	80800204 	addi	r2,r16,8
 4025d88:	003f7106 	br	4025b50 <__flash_rwdata_start+0xffff0300>
 4025d8c:	00c00504 	movi	r3,20
 4025d90:	18804a2e 	bgeu	r3,r2,4025ebc <_malloc_r+0x610>
 4025d94:	00c01504 	movi	r3,84
 4025d98:	18806e36 	bltu	r3,r2,4025f54 <_malloc_r+0x6a8>
 4025d9c:	8804d33a 	srli	r2,r17,12
 4025da0:	12001bc4 	addi	r8,r2,111
 4025da4:	11c01b84 	addi	r7,r2,110
 4025da8:	4209883a 	add	r4,r8,r8
 4025dac:	003edd06 	br	4025924 <__flash_rwdata_start+0xffff00d4>
 4025db0:	3804d27a 	srli	r2,r7,9
 4025db4:	00c00104 	movi	r3,4
 4025db8:	1880442e 	bgeu	r3,r2,4025ecc <_malloc_r+0x620>
 4025dbc:	00c00504 	movi	r3,20
 4025dc0:	18808136 	bltu	r3,r2,4025fc8 <_malloc_r+0x71c>
 4025dc4:	11401704 	addi	r5,r2,92
 4025dc8:	10c016c4 	addi	r3,r2,91
 4025dcc:	294b883a 	add	r5,r5,r5
 4025dd0:	294b883a 	add	r5,r5,r5
 4025dd4:	294b883a 	add	r5,r5,r5
 4025dd8:	994b883a 	add	r5,r19,r5
 4025ddc:	28800017 	ldw	r2,0(r5)
 4025de0:	01800034 	movhi	r6,0
 4025de4:	297ffe04 	addi	r5,r5,-8
 4025de8:	31827704 	addi	r6,r6,2524
 4025dec:	28806526 	beq	r5,r2,4025f84 <_malloc_r+0x6d8>
 4025df0:	01bfff04 	movi	r6,-4
 4025df4:	10c00117 	ldw	r3,4(r2)
 4025df8:	1986703a 	and	r3,r3,r6
 4025dfc:	38c0022e 	bgeu	r7,r3,4025e08 <_malloc_r+0x55c>
 4025e00:	10800217 	ldw	r2,8(r2)
 4025e04:	28bffb1e 	bne	r5,r2,4025df4 <__flash_rwdata_start+0xffff05a4>
 4025e08:	11400317 	ldw	r5,12(r2)
 4025e0c:	98c00117 	ldw	r3,4(r19)
 4025e10:	81400315 	stw	r5,12(r16)
 4025e14:	80800215 	stw	r2,8(r16)
 4025e18:	2c000215 	stw	r16,8(r5)
 4025e1c:	14000315 	stw	r16,12(r2)
 4025e20:	003ef806 	br	4025a04 <__flash_rwdata_start+0xffff01b4>
 4025e24:	88c00054 	ori	r3,r17,1
 4025e28:	80c00115 	stw	r3,4(r16)
 4025e2c:	8463883a 	add	r17,r16,r17
 4025e30:	34400515 	stw	r17,20(r6)
 4025e34:	34400415 	stw	r17,16(r6)
 4025e38:	10c00054 	ori	r3,r2,1
 4025e3c:	8a000315 	stw	r8,12(r17)
 4025e40:	8a000215 	stw	r8,8(r17)
 4025e44:	88c00115 	stw	r3,4(r17)
 4025e48:	88a3883a 	add	r17,r17,r2
 4025e4c:	88800015 	stw	r2,0(r17)
 4025e50:	9009883a 	mov	r4,r18
 4025e54:	402daa80 	call	402daa8 <__malloc_unlock>
 4025e58:	80800204 	addi	r2,r16,8
 4025e5c:	003f3c06 	br	4025b50 <__flash_rwdata_start+0xffff0300>
 4025e60:	30c00117 	ldw	r3,4(r6)
 4025e64:	003ee706 	br	4025a04 <__flash_rwdata_start+0xffff01b4>
 4025e68:	5ac00044 	addi	r11,r11,1
 4025e6c:	588000cc 	andi	r2,r11,3
 4025e70:	31800204 	addi	r6,r6,8
 4025e74:	103efd1e 	bne	r2,zero,4025a6c <__flash_rwdata_start+0xffff021c>
 4025e78:	00002406 	br	4025f0c <_malloc_r+0x660>
 4025e7c:	14000317 	ldw	r16,12(r2)
 4025e80:	143f251e 	bne	r2,r16,4025b18 <__flash_rwdata_start+0xffff02c8>
 4025e84:	21000084 	addi	r4,r4,2
 4025e88:	003ebc06 	br	402597c <__flash_rwdata_start+0xffff012c>
 4025e8c:	8085883a 	add	r2,r16,r2
 4025e90:	10c00117 	ldw	r3,4(r2)
 4025e94:	81000317 	ldw	r4,12(r16)
 4025e98:	81400217 	ldw	r5,8(r16)
 4025e9c:	18c00054 	ori	r3,r3,1
 4025ea0:	10c00115 	stw	r3,4(r2)
 4025ea4:	29000315 	stw	r4,12(r5)
 4025ea8:	21400215 	stw	r5,8(r4)
 4025eac:	9009883a 	mov	r4,r18
 4025eb0:	402daa80 	call	402daa8 <__malloc_unlock>
 4025eb4:	80800204 	addi	r2,r16,8
 4025eb8:	003f2506 	br	4025b50 <__flash_rwdata_start+0xffff0300>
 4025ebc:	12001704 	addi	r8,r2,92
 4025ec0:	11c016c4 	addi	r7,r2,91
 4025ec4:	4209883a 	add	r4,r8,r8
 4025ec8:	003e9606 	br	4025924 <__flash_rwdata_start+0xffff00d4>
 4025ecc:	3804d1ba 	srli	r2,r7,6
 4025ed0:	11400e44 	addi	r5,r2,57
 4025ed4:	10c00e04 	addi	r3,r2,56
 4025ed8:	294b883a 	add	r5,r5,r5
 4025edc:	003fbc06 	br	4025dd0 <__flash_rwdata_start+0xffff0580>
 4025ee0:	84ff5926 	beq	r16,r19,4025c48 <__flash_rwdata_start+0xffff03f8>
 4025ee4:	00800034 	movhi	r2,0
 4025ee8:	10827704 	addi	r2,r2,2524
 4025eec:	14000217 	ldw	r16,8(r2)
 4025ef0:	00bfff04 	movi	r2,-4
 4025ef4:	80c00117 	ldw	r3,4(r16)
 4025ef8:	1886703a 	and	r3,r3,r2
 4025efc:	003f9106 	br	4025d44 <__flash_rwdata_start+0xffff04f4>
 4025f00:	60800217 	ldw	r2,8(r12)
 4025f04:	213fffc4 	addi	r4,r4,-1
 4025f08:	1300651e 	bne	r2,r12,40260a0 <_malloc_r+0x7f4>
 4025f0c:	208000cc 	andi	r2,r4,3
 4025f10:	633ffe04 	addi	r12,r12,-8
 4025f14:	103ffa1e 	bne	r2,zero,4025f00 <__flash_rwdata_start+0xffff06b0>
 4025f18:	98800117 	ldw	r2,4(r19)
 4025f1c:	0146303a 	nor	r3,zero,r5
 4025f20:	1884703a 	and	r2,r3,r2
 4025f24:	98800115 	stw	r2,4(r19)
 4025f28:	294b883a 	add	r5,r5,r5
 4025f2c:	117f2836 	bltu	r2,r5,4025bd0 <__flash_rwdata_start+0xffff0380>
 4025f30:	283f2726 	beq	r5,zero,4025bd0 <__flash_rwdata_start+0xffff0380>
 4025f34:	2886703a 	and	r3,r5,r2
 4025f38:	5809883a 	mov	r4,r11
 4025f3c:	183ec31e 	bne	r3,zero,4025a4c <__flash_rwdata_start+0xffff01fc>
 4025f40:	294b883a 	add	r5,r5,r5
 4025f44:	2886703a 	and	r3,r5,r2
 4025f48:	21000104 	addi	r4,r4,4
 4025f4c:	183ffc26 	beq	r3,zero,4025f40 <__flash_rwdata_start+0xffff06f0>
 4025f50:	003ebe06 	br	4025a4c <__flash_rwdata_start+0xffff01fc>
 4025f54:	00c05504 	movi	r3,340
 4025f58:	18801236 	bltu	r3,r2,4025fa4 <_malloc_r+0x6f8>
 4025f5c:	8804d3fa 	srli	r2,r17,15
 4025f60:	12001e04 	addi	r8,r2,120
 4025f64:	11c01dc4 	addi	r7,r2,119
 4025f68:	4209883a 	add	r4,r8,r8
 4025f6c:	003e6d06 	br	4025924 <__flash_rwdata_start+0xffff00d4>
 4025f70:	00c40004 	movi	r3,4096
 4025f74:	003f4606 	br	4025c90 <__flash_rwdata_start+0xffff0440>
 4025f78:	00800044 	movi	r2,1
 4025f7c:	a0800115 	stw	r2,4(r20)
 4025f80:	003f7406 	br	4025d54 <__flash_rwdata_start+0xffff0504>
 4025f84:	1805d0ba 	srai	r2,r3,2
 4025f88:	01c00044 	movi	r7,1
 4025f8c:	30c00117 	ldw	r3,4(r6)
 4025f90:	388e983a 	sll	r7,r7,r2
 4025f94:	2805883a 	mov	r2,r5
 4025f98:	38c6b03a 	or	r3,r7,r3
 4025f9c:	30c00115 	stw	r3,4(r6)
 4025fa0:	003f9b06 	br	4025e10 <__flash_rwdata_start+0xffff05c0>
 4025fa4:	00c15504 	movi	r3,1364
 4025fa8:	18801a36 	bltu	r3,r2,4026014 <_malloc_r+0x768>
 4025fac:	8804d4ba 	srli	r2,r17,18
 4025fb0:	12001f44 	addi	r8,r2,125
 4025fb4:	11c01f04 	addi	r7,r2,124
 4025fb8:	4209883a 	add	r4,r8,r8
 4025fbc:	003e5906 	br	4025924 <__flash_rwdata_start+0xffff00d4>
 4025fc0:	ad400404 	addi	r21,r21,16
 4025fc4:	003f1706 	br	4025c24 <__flash_rwdata_start+0xffff03d4>
 4025fc8:	00c01504 	movi	r3,84
 4025fcc:	18802336 	bltu	r3,r2,402605c <_malloc_r+0x7b0>
 4025fd0:	3804d33a 	srli	r2,r7,12
 4025fd4:	11401bc4 	addi	r5,r2,111
 4025fd8:	10c01b84 	addi	r3,r2,110
 4025fdc:	294b883a 	add	r5,r5,r5
 4025fe0:	003f7b06 	br	4025dd0 <__flash_rwdata_start+0xffff0580>
 4025fe4:	9c000217 	ldw	r16,8(r19)
 4025fe8:	00bfff04 	movi	r2,-4
 4025fec:	80c00117 	ldw	r3,4(r16)
 4025ff0:	1886703a 	and	r3,r3,r2
 4025ff4:	003f5306 	br	4025d44 <__flash_rwdata_start+0xffff04f4>
 4025ff8:	3083ffcc 	andi	r2,r6,4095
 4025ffc:	103f181e 	bne	r2,zero,4025c60 <__flash_rwdata_start+0xffff0410>
 4026000:	99000217 	ldw	r4,8(r19)
 4026004:	b545883a 	add	r2,r22,r21
 4026008:	10800054 	ori	r2,r2,1
 402600c:	20800115 	stw	r2,4(r4)
 4026010:	003f3e06 	br	4025d0c <__flash_rwdata_start+0xffff04bc>
 4026014:	01003f84 	movi	r4,254
 4026018:	02001fc4 	movi	r8,127
 402601c:	01c01f84 	movi	r7,126
 4026020:	003e4006 	br	4025924 <__flash_rwdata_start+0xffff00d4>
 4026024:	00800034 	movhi	r2,0
 4026028:	10881e04 	addi	r2,r2,8312
 402602c:	15000015 	stw	r20,0(r2)
 4026030:	003f1106 	br	4025c78 <__flash_rwdata_start+0xffff0428>
 4026034:	00800044 	movi	r2,1
 4026038:	002b883a 	mov	r21,zero
 402603c:	003f1f06 	br	4025cbc <__flash_rwdata_start+0xffff046c>
 4026040:	81400204 	addi	r5,r16,8
 4026044:	9009883a 	mov	r4,r18
 4026048:	4024cb40 	call	4024cb4 <_free_r>
 402604c:	00800034 	movhi	r2,0
 4026050:	10884b04 	addi	r2,r2,8492
 4026054:	10c00017 	ldw	r3,0(r2)
 4026058:	003f2c06 	br	4025d0c <__flash_rwdata_start+0xffff04bc>
 402605c:	00c05504 	movi	r3,340
 4026060:	18800536 	bltu	r3,r2,4026078 <_malloc_r+0x7cc>
 4026064:	3804d3fa 	srli	r2,r7,15
 4026068:	11401e04 	addi	r5,r2,120
 402606c:	10c01dc4 	addi	r3,r2,119
 4026070:	294b883a 	add	r5,r5,r5
 4026074:	003f5606 	br	4025dd0 <__flash_rwdata_start+0xffff0580>
 4026078:	00c15504 	movi	r3,1364
 402607c:	18800536 	bltu	r3,r2,4026094 <_malloc_r+0x7e8>
 4026080:	3804d4ba 	srli	r2,r7,18
 4026084:	11401f44 	addi	r5,r2,125
 4026088:	10c01f04 	addi	r3,r2,124
 402608c:	294b883a 	add	r5,r5,r5
 4026090:	003f4f06 	br	4025dd0 <__flash_rwdata_start+0xffff0580>
 4026094:	01403f84 	movi	r5,254
 4026098:	00c01f84 	movi	r3,126
 402609c:	003f4c06 	br	4025dd0 <__flash_rwdata_start+0xffff0580>
 40260a0:	98800117 	ldw	r2,4(r19)
 40260a4:	003fa006 	br	4025f28 <__flash_rwdata_start+0xffff06d8>
 40260a8:	8808d0fa 	srli	r4,r17,3
 40260ac:	20800044 	addi	r2,r4,1
 40260b0:	1085883a 	add	r2,r2,r2
 40260b4:	003e9006 	br	4025af8 <__flash_rwdata_start+0xffff02a8>

040260b8 <memchr>:
 40260b8:	208000cc 	andi	r2,r4,3
 40260bc:	280f883a 	mov	r7,r5
 40260c0:	10003426 	beq	r2,zero,4026194 <memchr+0xdc>
 40260c4:	30bfffc4 	addi	r2,r6,-1
 40260c8:	30001a26 	beq	r6,zero,4026134 <memchr+0x7c>
 40260cc:	20c00003 	ldbu	r3,0(r4)
 40260d0:	29803fcc 	andi	r6,r5,255
 40260d4:	30c0051e 	bne	r6,r3,40260ec <memchr+0x34>
 40260d8:	00001806 	br	402613c <memchr+0x84>
 40260dc:	10001526 	beq	r2,zero,4026134 <memchr+0x7c>
 40260e0:	20c00003 	ldbu	r3,0(r4)
 40260e4:	10bfffc4 	addi	r2,r2,-1
 40260e8:	30c01426 	beq	r6,r3,402613c <memchr+0x84>
 40260ec:	21000044 	addi	r4,r4,1
 40260f0:	20c000cc 	andi	r3,r4,3
 40260f4:	183ff91e 	bne	r3,zero,40260dc <__flash_rwdata_start+0xffff088c>
 40260f8:	020000c4 	movi	r8,3
 40260fc:	40801136 	bltu	r8,r2,4026144 <memchr+0x8c>
 4026100:	10000c26 	beq	r2,zero,4026134 <memchr+0x7c>
 4026104:	20c00003 	ldbu	r3,0(r4)
 4026108:	29403fcc 	andi	r5,r5,255
 402610c:	28c00b26 	beq	r5,r3,402613c <memchr+0x84>
 4026110:	20c00044 	addi	r3,r4,1
 4026114:	39803fcc 	andi	r6,r7,255
 4026118:	2089883a 	add	r4,r4,r2
 402611c:	00000306 	br	402612c <memchr+0x74>
 4026120:	18c00044 	addi	r3,r3,1
 4026124:	197fffc3 	ldbu	r5,-1(r3)
 4026128:	31400526 	beq	r6,r5,4026140 <memchr+0x88>
 402612c:	1805883a 	mov	r2,r3
 4026130:	20fffb1e 	bne	r4,r3,4026120 <__flash_rwdata_start+0xffff08d0>
 4026134:	0005883a 	mov	r2,zero
 4026138:	f800283a 	ret
 402613c:	2005883a 	mov	r2,r4
 4026140:	f800283a 	ret
 4026144:	28c03fcc 	andi	r3,r5,255
 4026148:	1812923a 	slli	r9,r3,8
 402614c:	02ffbff4 	movhi	r11,65279
 4026150:	02a02074 	movhi	r10,32897
 4026154:	48d2b03a 	or	r9,r9,r3
 4026158:	4806943a 	slli	r3,r9,16
 402615c:	5affbfc4 	addi	r11,r11,-257
 4026160:	52a02004 	addi	r10,r10,-32640
 4026164:	48d2b03a 	or	r9,r9,r3
 4026168:	20c00017 	ldw	r3,0(r4)
 402616c:	48c6f03a 	xor	r3,r9,r3
 4026170:	1acd883a 	add	r6,r3,r11
 4026174:	00c6303a 	nor	r3,zero,r3
 4026178:	30c6703a 	and	r3,r6,r3
 402617c:	1a86703a 	and	r3,r3,r10
 4026180:	183fe01e 	bne	r3,zero,4026104 <__flash_rwdata_start+0xffff08b4>
 4026184:	10bfff04 	addi	r2,r2,-4
 4026188:	21000104 	addi	r4,r4,4
 402618c:	40bff636 	bltu	r8,r2,4026168 <__flash_rwdata_start+0xffff0918>
 4026190:	003fdb06 	br	4026100 <__flash_rwdata_start+0xffff08b0>
 4026194:	3005883a 	mov	r2,r6
 4026198:	003fd706 	br	40260f8 <__flash_rwdata_start+0xffff08a8>

0402619c <memcpy>:
 402619c:	defffd04 	addi	sp,sp,-12
 40261a0:	dfc00215 	stw	ra,8(sp)
 40261a4:	dc400115 	stw	r17,4(sp)
 40261a8:	dc000015 	stw	r16,0(sp)
 40261ac:	00c003c4 	movi	r3,15
 40261b0:	2005883a 	mov	r2,r4
 40261b4:	1980452e 	bgeu	r3,r6,40262cc <memcpy+0x130>
 40261b8:	2906b03a 	or	r3,r5,r4
 40261bc:	18c000cc 	andi	r3,r3,3
 40261c0:	1800441e 	bne	r3,zero,40262d4 <memcpy+0x138>
 40261c4:	347ffc04 	addi	r17,r6,-16
 40261c8:	8822d13a 	srli	r17,r17,4
 40261cc:	28c00104 	addi	r3,r5,4
 40261d0:	23400104 	addi	r13,r4,4
 40261d4:	8820913a 	slli	r16,r17,4
 40261d8:	2b000204 	addi	r12,r5,8
 40261dc:	22c00204 	addi	r11,r4,8
 40261e0:	84000504 	addi	r16,r16,20
 40261e4:	2a800304 	addi	r10,r5,12
 40261e8:	22400304 	addi	r9,r4,12
 40261ec:	2c21883a 	add	r16,r5,r16
 40261f0:	2811883a 	mov	r8,r5
 40261f4:	200f883a 	mov	r7,r4
 40261f8:	41000017 	ldw	r4,0(r8)
 40261fc:	1fc00017 	ldw	ra,0(r3)
 4026200:	63c00017 	ldw	r15,0(r12)
 4026204:	39000015 	stw	r4,0(r7)
 4026208:	53800017 	ldw	r14,0(r10)
 402620c:	6fc00015 	stw	ra,0(r13)
 4026210:	5bc00015 	stw	r15,0(r11)
 4026214:	4b800015 	stw	r14,0(r9)
 4026218:	18c00404 	addi	r3,r3,16
 402621c:	39c00404 	addi	r7,r7,16
 4026220:	42000404 	addi	r8,r8,16
 4026224:	6b400404 	addi	r13,r13,16
 4026228:	63000404 	addi	r12,r12,16
 402622c:	5ac00404 	addi	r11,r11,16
 4026230:	52800404 	addi	r10,r10,16
 4026234:	4a400404 	addi	r9,r9,16
 4026238:	1c3fef1e 	bne	r3,r16,40261f8 <__flash_rwdata_start+0xffff09a8>
 402623c:	89c00044 	addi	r7,r17,1
 4026240:	380e913a 	slli	r7,r7,4
 4026244:	310003cc 	andi	r4,r6,15
 4026248:	02c000c4 	movi	r11,3
 402624c:	11c7883a 	add	r3,r2,r7
 4026250:	29cb883a 	add	r5,r5,r7
 4026254:	5900212e 	bgeu	r11,r4,40262dc <memcpy+0x140>
 4026258:	1813883a 	mov	r9,r3
 402625c:	2811883a 	mov	r8,r5
 4026260:	200f883a 	mov	r7,r4
 4026264:	42800017 	ldw	r10,0(r8)
 4026268:	4a400104 	addi	r9,r9,4
 402626c:	39ffff04 	addi	r7,r7,-4
 4026270:	4abfff15 	stw	r10,-4(r9)
 4026274:	42000104 	addi	r8,r8,4
 4026278:	59fffa36 	bltu	r11,r7,4026264 <__flash_rwdata_start+0xffff0a14>
 402627c:	213fff04 	addi	r4,r4,-4
 4026280:	2008d0ba 	srli	r4,r4,2
 4026284:	318000cc 	andi	r6,r6,3
 4026288:	21000044 	addi	r4,r4,1
 402628c:	2109883a 	add	r4,r4,r4
 4026290:	2109883a 	add	r4,r4,r4
 4026294:	1907883a 	add	r3,r3,r4
 4026298:	290b883a 	add	r5,r5,r4
 402629c:	30000626 	beq	r6,zero,40262b8 <memcpy+0x11c>
 40262a0:	198d883a 	add	r6,r3,r6
 40262a4:	29c00003 	ldbu	r7,0(r5)
 40262a8:	18c00044 	addi	r3,r3,1
 40262ac:	29400044 	addi	r5,r5,1
 40262b0:	19ffffc5 	stb	r7,-1(r3)
 40262b4:	19bffb1e 	bne	r3,r6,40262a4 <__flash_rwdata_start+0xffff0a54>
 40262b8:	dfc00217 	ldw	ra,8(sp)
 40262bc:	dc400117 	ldw	r17,4(sp)
 40262c0:	dc000017 	ldw	r16,0(sp)
 40262c4:	dec00304 	addi	sp,sp,12
 40262c8:	f800283a 	ret
 40262cc:	2007883a 	mov	r3,r4
 40262d0:	003ff206 	br	402629c <__flash_rwdata_start+0xffff0a4c>
 40262d4:	2007883a 	mov	r3,r4
 40262d8:	003ff106 	br	40262a0 <__flash_rwdata_start+0xffff0a50>
 40262dc:	200d883a 	mov	r6,r4
 40262e0:	003fee06 	br	402629c <__flash_rwdata_start+0xffff0a4c>

040262e4 <memmove>:
 40262e4:	2005883a 	mov	r2,r4
 40262e8:	29000b2e 	bgeu	r5,r4,4026318 <memmove+0x34>
 40262ec:	298f883a 	add	r7,r5,r6
 40262f0:	21c0092e 	bgeu	r4,r7,4026318 <memmove+0x34>
 40262f4:	2187883a 	add	r3,r4,r6
 40262f8:	198bc83a 	sub	r5,r3,r6
 40262fc:	30004826 	beq	r6,zero,4026420 <memmove+0x13c>
 4026300:	39ffffc4 	addi	r7,r7,-1
 4026304:	39000003 	ldbu	r4,0(r7)
 4026308:	18ffffc4 	addi	r3,r3,-1
 402630c:	19000005 	stb	r4,0(r3)
 4026310:	28fffb1e 	bne	r5,r3,4026300 <__flash_rwdata_start+0xffff0ab0>
 4026314:	f800283a 	ret
 4026318:	00c003c4 	movi	r3,15
 402631c:	1980412e 	bgeu	r3,r6,4026424 <memmove+0x140>
 4026320:	2886b03a 	or	r3,r5,r2
 4026324:	18c000cc 	andi	r3,r3,3
 4026328:	1800401e 	bne	r3,zero,402642c <memmove+0x148>
 402632c:	33fffc04 	addi	r15,r6,-16
 4026330:	781ed13a 	srli	r15,r15,4
 4026334:	28c00104 	addi	r3,r5,4
 4026338:	13400104 	addi	r13,r2,4
 402633c:	781c913a 	slli	r14,r15,4
 4026340:	2b000204 	addi	r12,r5,8
 4026344:	12c00204 	addi	r11,r2,8
 4026348:	73800504 	addi	r14,r14,20
 402634c:	2a800304 	addi	r10,r5,12
 4026350:	12400304 	addi	r9,r2,12
 4026354:	2b9d883a 	add	r14,r5,r14
 4026358:	2811883a 	mov	r8,r5
 402635c:	100f883a 	mov	r7,r2
 4026360:	41000017 	ldw	r4,0(r8)
 4026364:	39c00404 	addi	r7,r7,16
 4026368:	18c00404 	addi	r3,r3,16
 402636c:	393ffc15 	stw	r4,-16(r7)
 4026370:	193ffc17 	ldw	r4,-16(r3)
 4026374:	6b400404 	addi	r13,r13,16
 4026378:	5ac00404 	addi	r11,r11,16
 402637c:	693ffc15 	stw	r4,-16(r13)
 4026380:	61000017 	ldw	r4,0(r12)
 4026384:	4a400404 	addi	r9,r9,16
 4026388:	42000404 	addi	r8,r8,16
 402638c:	593ffc15 	stw	r4,-16(r11)
 4026390:	51000017 	ldw	r4,0(r10)
 4026394:	63000404 	addi	r12,r12,16
 4026398:	52800404 	addi	r10,r10,16
 402639c:	493ffc15 	stw	r4,-16(r9)
 40263a0:	1bbfef1e 	bne	r3,r14,4026360 <__flash_rwdata_start+0xffff0b10>
 40263a4:	79000044 	addi	r4,r15,1
 40263a8:	2008913a 	slli	r4,r4,4
 40263ac:	328003cc 	andi	r10,r6,15
 40263b0:	02c000c4 	movi	r11,3
 40263b4:	1107883a 	add	r3,r2,r4
 40263b8:	290b883a 	add	r5,r5,r4
 40263bc:	5a801e2e 	bgeu	r11,r10,4026438 <memmove+0x154>
 40263c0:	1813883a 	mov	r9,r3
 40263c4:	2811883a 	mov	r8,r5
 40263c8:	500f883a 	mov	r7,r10
 40263cc:	41000017 	ldw	r4,0(r8)
 40263d0:	4a400104 	addi	r9,r9,4
 40263d4:	39ffff04 	addi	r7,r7,-4
 40263d8:	493fff15 	stw	r4,-4(r9)
 40263dc:	42000104 	addi	r8,r8,4
 40263e0:	59fffa36 	bltu	r11,r7,40263cc <__flash_rwdata_start+0xffff0b7c>
 40263e4:	513fff04 	addi	r4,r10,-4
 40263e8:	2008d0ba 	srli	r4,r4,2
 40263ec:	318000cc 	andi	r6,r6,3
 40263f0:	21000044 	addi	r4,r4,1
 40263f4:	2109883a 	add	r4,r4,r4
 40263f8:	2109883a 	add	r4,r4,r4
 40263fc:	1907883a 	add	r3,r3,r4
 4026400:	290b883a 	add	r5,r5,r4
 4026404:	30000b26 	beq	r6,zero,4026434 <memmove+0x150>
 4026408:	198d883a 	add	r6,r3,r6
 402640c:	29c00003 	ldbu	r7,0(r5)
 4026410:	18c00044 	addi	r3,r3,1
 4026414:	29400044 	addi	r5,r5,1
 4026418:	19ffffc5 	stb	r7,-1(r3)
 402641c:	19bffb1e 	bne	r3,r6,402640c <__flash_rwdata_start+0xffff0bbc>
 4026420:	f800283a 	ret
 4026424:	1007883a 	mov	r3,r2
 4026428:	003ff606 	br	4026404 <__flash_rwdata_start+0xffff0bb4>
 402642c:	1007883a 	mov	r3,r2
 4026430:	003ff506 	br	4026408 <__flash_rwdata_start+0xffff0bb8>
 4026434:	f800283a 	ret
 4026438:	500d883a 	mov	r6,r10
 402643c:	003ff106 	br	4026404 <__flash_rwdata_start+0xffff0bb4>

04026440 <memset>:
 4026440:	20c000cc 	andi	r3,r4,3
 4026444:	2005883a 	mov	r2,r4
 4026448:	18004426 	beq	r3,zero,402655c <memset+0x11c>
 402644c:	31ffffc4 	addi	r7,r6,-1
 4026450:	30004026 	beq	r6,zero,4026554 <memset+0x114>
 4026454:	2813883a 	mov	r9,r5
 4026458:	200d883a 	mov	r6,r4
 402645c:	2007883a 	mov	r3,r4
 4026460:	00000406 	br	4026474 <memset+0x34>
 4026464:	3a3fffc4 	addi	r8,r7,-1
 4026468:	31800044 	addi	r6,r6,1
 402646c:	38003926 	beq	r7,zero,4026554 <memset+0x114>
 4026470:	400f883a 	mov	r7,r8
 4026474:	18c00044 	addi	r3,r3,1
 4026478:	32400005 	stb	r9,0(r6)
 402647c:	1a0000cc 	andi	r8,r3,3
 4026480:	403ff81e 	bne	r8,zero,4026464 <__flash_rwdata_start+0xffff0c14>
 4026484:	010000c4 	movi	r4,3
 4026488:	21c02d2e 	bgeu	r4,r7,4026540 <memset+0x100>
 402648c:	29003fcc 	andi	r4,r5,255
 4026490:	200c923a 	slli	r6,r4,8
 4026494:	3108b03a 	or	r4,r6,r4
 4026498:	200c943a 	slli	r6,r4,16
 402649c:	218cb03a 	or	r6,r4,r6
 40264a0:	010003c4 	movi	r4,15
 40264a4:	21c0182e 	bgeu	r4,r7,4026508 <memset+0xc8>
 40264a8:	3b3ffc04 	addi	r12,r7,-16
 40264ac:	6018d13a 	srli	r12,r12,4
 40264b0:	1a000104 	addi	r8,r3,4
 40264b4:	1ac00204 	addi	r11,r3,8
 40264b8:	6008913a 	slli	r4,r12,4
 40264bc:	1a800304 	addi	r10,r3,12
 40264c0:	1813883a 	mov	r9,r3
 40264c4:	21000504 	addi	r4,r4,20
 40264c8:	1909883a 	add	r4,r3,r4
 40264cc:	49800015 	stw	r6,0(r9)
 40264d0:	41800015 	stw	r6,0(r8)
 40264d4:	59800015 	stw	r6,0(r11)
 40264d8:	51800015 	stw	r6,0(r10)
 40264dc:	42000404 	addi	r8,r8,16
 40264e0:	4a400404 	addi	r9,r9,16
 40264e4:	5ac00404 	addi	r11,r11,16
 40264e8:	52800404 	addi	r10,r10,16
 40264ec:	413ff71e 	bne	r8,r4,40264cc <__flash_rwdata_start+0xffff0c7c>
 40264f0:	63000044 	addi	r12,r12,1
 40264f4:	6018913a 	slli	r12,r12,4
 40264f8:	39c003cc 	andi	r7,r7,15
 40264fc:	010000c4 	movi	r4,3
 4026500:	1b07883a 	add	r3,r3,r12
 4026504:	21c00e2e 	bgeu	r4,r7,4026540 <memset+0x100>
 4026508:	1813883a 	mov	r9,r3
 402650c:	3811883a 	mov	r8,r7
 4026510:	010000c4 	movi	r4,3
 4026514:	49800015 	stw	r6,0(r9)
 4026518:	423fff04 	addi	r8,r8,-4
 402651c:	4a400104 	addi	r9,r9,4
 4026520:	223ffc36 	bltu	r4,r8,4026514 <__flash_rwdata_start+0xffff0cc4>
 4026524:	393fff04 	addi	r4,r7,-4
 4026528:	2008d0ba 	srli	r4,r4,2
 402652c:	39c000cc 	andi	r7,r7,3
 4026530:	21000044 	addi	r4,r4,1
 4026534:	2109883a 	add	r4,r4,r4
 4026538:	2109883a 	add	r4,r4,r4
 402653c:	1907883a 	add	r3,r3,r4
 4026540:	38000526 	beq	r7,zero,4026558 <memset+0x118>
 4026544:	19cf883a 	add	r7,r3,r7
 4026548:	19400005 	stb	r5,0(r3)
 402654c:	18c00044 	addi	r3,r3,1
 4026550:	38fffd1e 	bne	r7,r3,4026548 <__flash_rwdata_start+0xffff0cf8>
 4026554:	f800283a 	ret
 4026558:	f800283a 	ret
 402655c:	2007883a 	mov	r3,r4
 4026560:	300f883a 	mov	r7,r6
 4026564:	003fc706 	br	4026484 <__flash_rwdata_start+0xffff0c34>

04026568 <_Balloc>:
 4026568:	20801317 	ldw	r2,76(r4)
 402656c:	defffc04 	addi	sp,sp,-16
 4026570:	dc400115 	stw	r17,4(sp)
 4026574:	dc000015 	stw	r16,0(sp)
 4026578:	dfc00315 	stw	ra,12(sp)
 402657c:	dc800215 	stw	r18,8(sp)
 4026580:	2023883a 	mov	r17,r4
 4026584:	2821883a 	mov	r16,r5
 4026588:	10000f26 	beq	r2,zero,40265c8 <_Balloc+0x60>
 402658c:	8407883a 	add	r3,r16,r16
 4026590:	18c7883a 	add	r3,r3,r3
 4026594:	10c7883a 	add	r3,r2,r3
 4026598:	18800017 	ldw	r2,0(r3)
 402659c:	10001126 	beq	r2,zero,40265e4 <_Balloc+0x7c>
 40265a0:	11000017 	ldw	r4,0(r2)
 40265a4:	19000015 	stw	r4,0(r3)
 40265a8:	10000415 	stw	zero,16(r2)
 40265ac:	10000315 	stw	zero,12(r2)
 40265b0:	dfc00317 	ldw	ra,12(sp)
 40265b4:	dc800217 	ldw	r18,8(sp)
 40265b8:	dc400117 	ldw	r17,4(sp)
 40265bc:	dc000017 	ldw	r16,0(sp)
 40265c0:	dec00404 	addi	sp,sp,16
 40265c4:	f800283a 	ret
 40265c8:	01800844 	movi	r6,33
 40265cc:	01400104 	movi	r5,4
 40265d0:	40296100 	call	4029610 <_calloc_r>
 40265d4:	88801315 	stw	r2,76(r17)
 40265d8:	103fec1e 	bne	r2,zero,402658c <__flash_rwdata_start+0xffff0d3c>
 40265dc:	0005883a 	mov	r2,zero
 40265e0:	003ff306 	br	40265b0 <__flash_rwdata_start+0xffff0d60>
 40265e4:	01400044 	movi	r5,1
 40265e8:	2c24983a 	sll	r18,r5,r16
 40265ec:	8809883a 	mov	r4,r17
 40265f0:	91800144 	addi	r6,r18,5
 40265f4:	318d883a 	add	r6,r6,r6
 40265f8:	318d883a 	add	r6,r6,r6
 40265fc:	40296100 	call	4029610 <_calloc_r>
 4026600:	103ff626 	beq	r2,zero,40265dc <__flash_rwdata_start+0xffff0d8c>
 4026604:	14000115 	stw	r16,4(r2)
 4026608:	14800215 	stw	r18,8(r2)
 402660c:	003fe606 	br	40265a8 <__flash_rwdata_start+0xffff0d58>

04026610 <_Bfree>:
 4026610:	28000826 	beq	r5,zero,4026634 <_Bfree+0x24>
 4026614:	28c00117 	ldw	r3,4(r5)
 4026618:	20801317 	ldw	r2,76(r4)
 402661c:	18c7883a 	add	r3,r3,r3
 4026620:	18c7883a 	add	r3,r3,r3
 4026624:	10c5883a 	add	r2,r2,r3
 4026628:	10c00017 	ldw	r3,0(r2)
 402662c:	28c00015 	stw	r3,0(r5)
 4026630:	11400015 	stw	r5,0(r2)
 4026634:	f800283a 	ret

04026638 <__multadd>:
 4026638:	defff704 	addi	sp,sp,-36
 402663c:	dc800215 	stw	r18,8(sp)
 4026640:	2c800417 	ldw	r18,16(r5)
 4026644:	dd800615 	stw	r22,24(sp)
 4026648:	dd400515 	stw	r21,20(sp)
 402664c:	dd000415 	stw	r20,16(sp)
 4026650:	dcc00315 	stw	r19,12(sp)
 4026654:	dc400115 	stw	r17,4(sp)
 4026658:	dc000015 	stw	r16,0(sp)
 402665c:	dfc00815 	stw	ra,32(sp)
 4026660:	ddc00715 	stw	r23,28(sp)
 4026664:	2827883a 	mov	r19,r5
 4026668:	2029883a 	mov	r20,r4
 402666c:	3023883a 	mov	r17,r6
 4026670:	3821883a 	mov	r16,r7
 4026674:	2d400504 	addi	r21,r5,20
 4026678:	002d883a 	mov	r22,zero
 402667c:	adc00017 	ldw	r23,0(r21)
 4026680:	880b883a 	mov	r5,r17
 4026684:	ad400104 	addi	r21,r21,4
 4026688:	b93fffcc 	andi	r4,r23,65535
 402668c:	402ac1c0 	call	402ac1c <__mulsi3>
 4026690:	b808d43a 	srli	r4,r23,16
 4026694:	880b883a 	mov	r5,r17
 4026698:	1421883a 	add	r16,r2,r16
 402669c:	402ac1c0 	call	402ac1c <__mulsi3>
 40266a0:	800ed43a 	srli	r7,r16,16
 40266a4:	80ffffcc 	andi	r3,r16,65535
 40266a8:	b5800044 	addi	r22,r22,1
 40266ac:	11c5883a 	add	r2,r2,r7
 40266b0:	100e943a 	slli	r7,r2,16
 40266b4:	1020d43a 	srli	r16,r2,16
 40266b8:	38c7883a 	add	r3,r7,r3
 40266bc:	a8ffff15 	stw	r3,-4(r21)
 40266c0:	b4bfee16 	blt	r22,r18,402667c <__flash_rwdata_start+0xffff0e2c>
 40266c4:	80000926 	beq	r16,zero,40266ec <__multadd+0xb4>
 40266c8:	98800217 	ldw	r2,8(r19)
 40266cc:	9080130e 	bge	r18,r2,402671c <__multadd+0xe4>
 40266d0:	90800144 	addi	r2,r18,5
 40266d4:	1085883a 	add	r2,r2,r2
 40266d8:	1085883a 	add	r2,r2,r2
 40266dc:	9885883a 	add	r2,r19,r2
 40266e0:	14000015 	stw	r16,0(r2)
 40266e4:	94800044 	addi	r18,r18,1
 40266e8:	9c800415 	stw	r18,16(r19)
 40266ec:	9805883a 	mov	r2,r19
 40266f0:	dfc00817 	ldw	ra,32(sp)
 40266f4:	ddc00717 	ldw	r23,28(sp)
 40266f8:	dd800617 	ldw	r22,24(sp)
 40266fc:	dd400517 	ldw	r21,20(sp)
 4026700:	dd000417 	ldw	r20,16(sp)
 4026704:	dcc00317 	ldw	r19,12(sp)
 4026708:	dc800217 	ldw	r18,8(sp)
 402670c:	dc400117 	ldw	r17,4(sp)
 4026710:	dc000017 	ldw	r16,0(sp)
 4026714:	dec00904 	addi	sp,sp,36
 4026718:	f800283a 	ret
 402671c:	99400117 	ldw	r5,4(r19)
 4026720:	a009883a 	mov	r4,r20
 4026724:	29400044 	addi	r5,r5,1
 4026728:	40265680 	call	4026568 <_Balloc>
 402672c:	99800417 	ldw	r6,16(r19)
 4026730:	99400304 	addi	r5,r19,12
 4026734:	11000304 	addi	r4,r2,12
 4026738:	31800084 	addi	r6,r6,2
 402673c:	318d883a 	add	r6,r6,r6
 4026740:	318d883a 	add	r6,r6,r6
 4026744:	1023883a 	mov	r17,r2
 4026748:	402619c0 	call	402619c <memcpy>
 402674c:	98000a26 	beq	r19,zero,4026778 <__multadd+0x140>
 4026750:	98c00117 	ldw	r3,4(r19)
 4026754:	a0801317 	ldw	r2,76(r20)
 4026758:	18c7883a 	add	r3,r3,r3
 402675c:	18c7883a 	add	r3,r3,r3
 4026760:	10c5883a 	add	r2,r2,r3
 4026764:	10c00017 	ldw	r3,0(r2)
 4026768:	98c00015 	stw	r3,0(r19)
 402676c:	14c00015 	stw	r19,0(r2)
 4026770:	8827883a 	mov	r19,r17
 4026774:	003fd606 	br	40266d0 <__flash_rwdata_start+0xffff0e80>
 4026778:	8827883a 	mov	r19,r17
 402677c:	003fd406 	br	40266d0 <__flash_rwdata_start+0xffff0e80>

04026780 <__s2b>:
 4026780:	defff904 	addi	sp,sp,-28
 4026784:	dc400115 	stw	r17,4(sp)
 4026788:	dc000015 	stw	r16,0(sp)
 402678c:	2023883a 	mov	r17,r4
 4026790:	2821883a 	mov	r16,r5
 4026794:	39000204 	addi	r4,r7,8
 4026798:	01400244 	movi	r5,9
 402679c:	dcc00315 	stw	r19,12(sp)
 40267a0:	dc800215 	stw	r18,8(sp)
 40267a4:	dfc00615 	stw	ra,24(sp)
 40267a8:	dd400515 	stw	r21,20(sp)
 40267ac:	dd000415 	stw	r20,16(sp)
 40267b0:	3825883a 	mov	r18,r7
 40267b4:	3027883a 	mov	r19,r6
 40267b8:	402aa680 	call	402aa68 <__divsi3>
 40267bc:	00c00044 	movi	r3,1
 40267c0:	000b883a 	mov	r5,zero
 40267c4:	1880030e 	bge	r3,r2,40267d4 <__s2b+0x54>
 40267c8:	18c7883a 	add	r3,r3,r3
 40267cc:	29400044 	addi	r5,r5,1
 40267d0:	18bffd16 	blt	r3,r2,40267c8 <__flash_rwdata_start+0xffff0f78>
 40267d4:	8809883a 	mov	r4,r17
 40267d8:	40265680 	call	4026568 <_Balloc>
 40267dc:	d8c00717 	ldw	r3,28(sp)
 40267e0:	10c00515 	stw	r3,20(r2)
 40267e4:	00c00044 	movi	r3,1
 40267e8:	10c00415 	stw	r3,16(r2)
 40267ec:	00c00244 	movi	r3,9
 40267f0:	1cc0210e 	bge	r3,r19,4026878 <__s2b+0xf8>
 40267f4:	80eb883a 	add	r21,r16,r3
 40267f8:	a829883a 	mov	r20,r21
 40267fc:	84e1883a 	add	r16,r16,r19
 4026800:	a1c00007 	ldb	r7,0(r20)
 4026804:	01800284 	movi	r6,10
 4026808:	a5000044 	addi	r20,r20,1
 402680c:	100b883a 	mov	r5,r2
 4026810:	39fff404 	addi	r7,r7,-48
 4026814:	8809883a 	mov	r4,r17
 4026818:	40266380 	call	4026638 <__multadd>
 402681c:	a43ff81e 	bne	r20,r16,4026800 <__flash_rwdata_start+0xffff0fb0>
 4026820:	ace1883a 	add	r16,r21,r19
 4026824:	843ffe04 	addi	r16,r16,-8
 4026828:	9c800a0e 	bge	r19,r18,4026854 <__s2b+0xd4>
 402682c:	94e5c83a 	sub	r18,r18,r19
 4026830:	84a5883a 	add	r18,r16,r18
 4026834:	81c00007 	ldb	r7,0(r16)
 4026838:	01800284 	movi	r6,10
 402683c:	84000044 	addi	r16,r16,1
 4026840:	100b883a 	mov	r5,r2
 4026844:	39fff404 	addi	r7,r7,-48
 4026848:	8809883a 	mov	r4,r17
 402684c:	40266380 	call	4026638 <__multadd>
 4026850:	84bff81e 	bne	r16,r18,4026834 <__flash_rwdata_start+0xffff0fe4>
 4026854:	dfc00617 	ldw	ra,24(sp)
 4026858:	dd400517 	ldw	r21,20(sp)
 402685c:	dd000417 	ldw	r20,16(sp)
 4026860:	dcc00317 	ldw	r19,12(sp)
 4026864:	dc800217 	ldw	r18,8(sp)
 4026868:	dc400117 	ldw	r17,4(sp)
 402686c:	dc000017 	ldw	r16,0(sp)
 4026870:	dec00704 	addi	sp,sp,28
 4026874:	f800283a 	ret
 4026878:	84000284 	addi	r16,r16,10
 402687c:	1827883a 	mov	r19,r3
 4026880:	003fe906 	br	4026828 <__flash_rwdata_start+0xffff0fd8>

04026884 <__hi0bits>:
 4026884:	20bfffec 	andhi	r2,r4,65535
 4026888:	1000141e 	bne	r2,zero,40268dc <__hi0bits+0x58>
 402688c:	2008943a 	slli	r4,r4,16
 4026890:	00800404 	movi	r2,16
 4026894:	20ffc02c 	andhi	r3,r4,65280
 4026898:	1800021e 	bne	r3,zero,40268a4 <__hi0bits+0x20>
 402689c:	2008923a 	slli	r4,r4,8
 40268a0:	10800204 	addi	r2,r2,8
 40268a4:	20fc002c 	andhi	r3,r4,61440
 40268a8:	1800021e 	bne	r3,zero,40268b4 <__hi0bits+0x30>
 40268ac:	2008913a 	slli	r4,r4,4
 40268b0:	10800104 	addi	r2,r2,4
 40268b4:	20f0002c 	andhi	r3,r4,49152
 40268b8:	1800031e 	bne	r3,zero,40268c8 <__hi0bits+0x44>
 40268bc:	2109883a 	add	r4,r4,r4
 40268c0:	10800084 	addi	r2,r2,2
 40268c4:	2109883a 	add	r4,r4,r4
 40268c8:	20000316 	blt	r4,zero,40268d8 <__hi0bits+0x54>
 40268cc:	2110002c 	andhi	r4,r4,16384
 40268d0:	2000041e 	bne	r4,zero,40268e4 <__hi0bits+0x60>
 40268d4:	00800804 	movi	r2,32
 40268d8:	f800283a 	ret
 40268dc:	0005883a 	mov	r2,zero
 40268e0:	003fec06 	br	4026894 <__flash_rwdata_start+0xffff1044>
 40268e4:	10800044 	addi	r2,r2,1
 40268e8:	f800283a 	ret

040268ec <__lo0bits>:
 40268ec:	20c00017 	ldw	r3,0(r4)
 40268f0:	188001cc 	andi	r2,r3,7
 40268f4:	10000826 	beq	r2,zero,4026918 <__lo0bits+0x2c>
 40268f8:	1880004c 	andi	r2,r3,1
 40268fc:	1000211e 	bne	r2,zero,4026984 <__lo0bits+0x98>
 4026900:	1880008c 	andi	r2,r3,2
 4026904:	1000211e 	bne	r2,zero,402698c <__lo0bits+0xa0>
 4026908:	1806d0ba 	srli	r3,r3,2
 402690c:	00800084 	movi	r2,2
 4026910:	20c00015 	stw	r3,0(r4)
 4026914:	f800283a 	ret
 4026918:	18bfffcc 	andi	r2,r3,65535
 402691c:	10001326 	beq	r2,zero,402696c <__lo0bits+0x80>
 4026920:	0005883a 	mov	r2,zero
 4026924:	19403fcc 	andi	r5,r3,255
 4026928:	2800021e 	bne	r5,zero,4026934 <__lo0bits+0x48>
 402692c:	1806d23a 	srli	r3,r3,8
 4026930:	10800204 	addi	r2,r2,8
 4026934:	194003cc 	andi	r5,r3,15
 4026938:	2800021e 	bne	r5,zero,4026944 <__lo0bits+0x58>
 402693c:	1806d13a 	srli	r3,r3,4
 4026940:	10800104 	addi	r2,r2,4
 4026944:	194000cc 	andi	r5,r3,3
 4026948:	2800021e 	bne	r5,zero,4026954 <__lo0bits+0x68>
 402694c:	1806d0ba 	srli	r3,r3,2
 4026950:	10800084 	addi	r2,r2,2
 4026954:	1940004c 	andi	r5,r3,1
 4026958:	2800081e 	bne	r5,zero,402697c <__lo0bits+0x90>
 402695c:	1806d07a 	srli	r3,r3,1
 4026960:	1800051e 	bne	r3,zero,4026978 <__lo0bits+0x8c>
 4026964:	00800804 	movi	r2,32
 4026968:	f800283a 	ret
 402696c:	1806d43a 	srli	r3,r3,16
 4026970:	00800404 	movi	r2,16
 4026974:	003feb06 	br	4026924 <__flash_rwdata_start+0xffff10d4>
 4026978:	10800044 	addi	r2,r2,1
 402697c:	20c00015 	stw	r3,0(r4)
 4026980:	f800283a 	ret
 4026984:	0005883a 	mov	r2,zero
 4026988:	f800283a 	ret
 402698c:	1806d07a 	srli	r3,r3,1
 4026990:	00800044 	movi	r2,1
 4026994:	20c00015 	stw	r3,0(r4)
 4026998:	f800283a 	ret

0402699c <__i2b>:
 402699c:	defffd04 	addi	sp,sp,-12
 40269a0:	dc000015 	stw	r16,0(sp)
 40269a4:	04000044 	movi	r16,1
 40269a8:	dc400115 	stw	r17,4(sp)
 40269ac:	2823883a 	mov	r17,r5
 40269b0:	800b883a 	mov	r5,r16
 40269b4:	dfc00215 	stw	ra,8(sp)
 40269b8:	40265680 	call	4026568 <_Balloc>
 40269bc:	14400515 	stw	r17,20(r2)
 40269c0:	14000415 	stw	r16,16(r2)
 40269c4:	dfc00217 	ldw	ra,8(sp)
 40269c8:	dc400117 	ldw	r17,4(sp)
 40269cc:	dc000017 	ldw	r16,0(sp)
 40269d0:	dec00304 	addi	sp,sp,12
 40269d4:	f800283a 	ret

040269d8 <__multiply>:
 40269d8:	deffef04 	addi	sp,sp,-68
 40269dc:	dc400815 	stw	r17,32(sp)
 40269e0:	dc000715 	stw	r16,28(sp)
 40269e4:	34400417 	ldw	r17,16(r6)
 40269e8:	2c000417 	ldw	r16,16(r5)
 40269ec:	dd800d15 	stw	r22,52(sp)
 40269f0:	dc800915 	stw	r18,36(sp)
 40269f4:	dfc01015 	stw	ra,64(sp)
 40269f8:	df000f15 	stw	fp,60(sp)
 40269fc:	ddc00e15 	stw	r23,56(sp)
 4026a00:	dd400c15 	stw	r21,48(sp)
 4026a04:	dd000b15 	stw	r20,44(sp)
 4026a08:	dcc00a15 	stw	r19,40(sp)
 4026a0c:	2825883a 	mov	r18,r5
 4026a10:	302d883a 	mov	r22,r6
 4026a14:	8440050e 	bge	r16,r17,4026a2c <__multiply+0x54>
 4026a18:	8007883a 	mov	r3,r16
 4026a1c:	3025883a 	mov	r18,r6
 4026a20:	8821883a 	mov	r16,r17
 4026a24:	282d883a 	mov	r22,r5
 4026a28:	1823883a 	mov	r17,r3
 4026a2c:	90800217 	ldw	r2,8(r18)
 4026a30:	8447883a 	add	r3,r16,r17
 4026a34:	d8c00215 	stw	r3,8(sp)
 4026a38:	91400117 	ldw	r5,4(r18)
 4026a3c:	10c0010e 	bge	r2,r3,4026a44 <__multiply+0x6c>
 4026a40:	29400044 	addi	r5,r5,1
 4026a44:	40265680 	call	4026568 <_Balloc>
 4026a48:	d8c00217 	ldw	r3,8(sp)
 4026a4c:	d8800615 	stw	r2,24(sp)
 4026a50:	18eb883a 	add	r21,r3,r3
 4026a54:	ad6b883a 	add	r21,r21,r21
 4026a58:	10c00504 	addi	r3,r2,20
 4026a5c:	1d6b883a 	add	r21,r3,r21
 4026a60:	d8c00115 	stw	r3,4(sp)
 4026a64:	dd400315 	stw	r21,12(sp)
 4026a68:	1805883a 	mov	r2,r3
 4026a6c:	1d40042e 	bgeu	r3,r21,4026a80 <__multiply+0xa8>
 4026a70:	d8c00317 	ldw	r3,12(sp)
 4026a74:	10000015 	stw	zero,0(r2)
 4026a78:	10800104 	addi	r2,r2,4
 4026a7c:	10fffc36 	bltu	r2,r3,4026a70 <__flash_rwdata_start+0xffff1220>
 4026a80:	8c63883a 	add	r17,r17,r17
 4026a84:	b5800504 	addi	r22,r22,20
 4026a88:	8c63883a 	add	r17,r17,r17
 4026a8c:	94800504 	addi	r18,r18,20
 4026a90:	8421883a 	add	r16,r16,r16
 4026a94:	b463883a 	add	r17,r22,r17
 4026a98:	8421883a 	add	r16,r16,r16
 4026a9c:	dd800015 	stw	r22,0(sp)
 4026aa0:	dc800415 	stw	r18,16(sp)
 4026aa4:	dc400515 	stw	r17,20(sp)
 4026aa8:	9429883a 	add	r20,r18,r16
 4026aac:	b4404f2e 	bgeu	r22,r17,4026bec <__multiply+0x214>
 4026ab0:	d8c00017 	ldw	r3,0(sp)
 4026ab4:	1c800017 	ldw	r18,0(r3)
 4026ab8:	947fffcc 	andi	r17,r18,65535
 4026abc:	88001e26 	beq	r17,zero,4026b38 <__multiply+0x160>
 4026ac0:	dd800117 	ldw	r22,4(sp)
 4026ac4:	dd400417 	ldw	r21,16(sp)
 4026ac8:	0027883a 	mov	r19,zero
 4026acc:	ac800017 	ldw	r18,0(r21)
 4026ad0:	b4000017 	ldw	r16,0(r22)
 4026ad4:	880b883a 	mov	r5,r17
 4026ad8:	913fffcc 	andi	r4,r18,65535
 4026adc:	402ac1c0 	call	402ac1c <__mulsi3>
 4026ae0:	9008d43a 	srli	r4,r18,16
 4026ae4:	84bfffcc 	andi	r18,r16,65535
 4026ae8:	1485883a 	add	r2,r2,r18
 4026aec:	14e5883a 	add	r18,r2,r19
 4026af0:	8020d43a 	srli	r16,r16,16
 4026af4:	9026d43a 	srli	r19,r18,16
 4026af8:	880b883a 	mov	r5,r17
 4026afc:	402ac1c0 	call	402ac1c <__mulsi3>
 4026b00:	1405883a 	add	r2,r2,r16
 4026b04:	14e1883a 	add	r16,r2,r19
 4026b08:	90ffffcc 	andi	r3,r18,65535
 4026b0c:	8024943a 	slli	r18,r16,16
 4026b10:	ad400104 	addi	r21,r21,4
 4026b14:	b005883a 	mov	r2,r22
 4026b18:	90c6b03a 	or	r3,r18,r3
 4026b1c:	b0c00015 	stw	r3,0(r22)
 4026b20:	8026d43a 	srli	r19,r16,16
 4026b24:	b5800104 	addi	r22,r22,4
 4026b28:	ad3fe836 	bltu	r21,r20,4026acc <__flash_rwdata_start+0xffff127c>
 4026b2c:	d8c00017 	ldw	r3,0(sp)
 4026b30:	14c00115 	stw	r19,4(r2)
 4026b34:	1c800017 	ldw	r18,0(r3)
 4026b38:	9024d43a 	srli	r18,r18,16
 4026b3c:	90002226 	beq	r18,zero,4026bc8 <__multiply+0x1f0>
 4026b40:	d8c00117 	ldw	r3,4(sp)
 4026b44:	dd800417 	ldw	r22,16(sp)
 4026b48:	002f883a 	mov	r23,zero
 4026b4c:	1f000017 	ldw	fp,0(r3)
 4026b50:	1823883a 	mov	r17,r3
 4026b54:	182b883a 	mov	r21,r3
 4026b58:	e021883a 	mov	r16,fp
 4026b5c:	00000106 	br	4026b64 <__multiply+0x18c>
 4026b60:	982b883a 	mov	r21,r19
 4026b64:	b100000b 	ldhu	r4,0(r22)
 4026b68:	8020d43a 	srli	r16,r16,16
 4026b6c:	900b883a 	mov	r5,r18
 4026b70:	402ac1c0 	call	402ac1c <__mulsi3>
 4026b74:	1405883a 	add	r2,r2,r16
 4026b78:	15ef883a 	add	r23,r2,r23
 4026b7c:	b804943a 	slli	r2,r23,16
 4026b80:	e0ffffcc 	andi	r3,fp,65535
 4026b84:	8c400104 	addi	r17,r17,4
 4026b88:	10c6b03a 	or	r3,r2,r3
 4026b8c:	88ffff15 	stw	r3,-4(r17)
 4026b90:	b5800104 	addi	r22,r22,4
 4026b94:	b13fff17 	ldw	r4,-4(r22)
 4026b98:	acc00104 	addi	r19,r21,4
 4026b9c:	900b883a 	mov	r5,r18
 4026ba0:	2008d43a 	srli	r4,r4,16
 4026ba4:	9c000017 	ldw	r16,0(r19)
 4026ba8:	402ac1c0 	call	402ac1c <__mulsi3>
 4026bac:	b806d43a 	srli	r3,r23,16
 4026bb0:	813fffcc 	andi	r4,r16,65535
 4026bb4:	1105883a 	add	r2,r2,r4
 4026bb8:	10f9883a 	add	fp,r2,r3
 4026bbc:	e02ed43a 	srli	r23,fp,16
 4026bc0:	b53fe736 	bltu	r22,r20,4026b60 <__flash_rwdata_start+0xffff1310>
 4026bc4:	af000115 	stw	fp,4(r21)
 4026bc8:	d8c00017 	ldw	r3,0(sp)
 4026bcc:	d9000517 	ldw	r4,20(sp)
 4026bd0:	18c00104 	addi	r3,r3,4
 4026bd4:	d8c00015 	stw	r3,0(sp)
 4026bd8:	d8c00117 	ldw	r3,4(sp)
 4026bdc:	18c00104 	addi	r3,r3,4
 4026be0:	d8c00115 	stw	r3,4(sp)
 4026be4:	d8c00017 	ldw	r3,0(sp)
 4026be8:	193fb136 	bltu	r3,r4,4026ab0 <__flash_rwdata_start+0xffff1260>
 4026bec:	d8c00217 	ldw	r3,8(sp)
 4026bf0:	00c00c0e 	bge	zero,r3,4026c24 <__multiply+0x24c>
 4026bf4:	d8c00317 	ldw	r3,12(sp)
 4026bf8:	18bfff17 	ldw	r2,-4(r3)
 4026bfc:	1d7fff04 	addi	r21,r3,-4
 4026c00:	10000326 	beq	r2,zero,4026c10 <__multiply+0x238>
 4026c04:	00000706 	br	4026c24 <__multiply+0x24c>
 4026c08:	a8800017 	ldw	r2,0(r21)
 4026c0c:	1000051e 	bne	r2,zero,4026c24 <__multiply+0x24c>
 4026c10:	d8c00217 	ldw	r3,8(sp)
 4026c14:	ad7fff04 	addi	r21,r21,-4
 4026c18:	18ffffc4 	addi	r3,r3,-1
 4026c1c:	d8c00215 	stw	r3,8(sp)
 4026c20:	183ff91e 	bne	r3,zero,4026c08 <__flash_rwdata_start+0xffff13b8>
 4026c24:	d8c00617 	ldw	r3,24(sp)
 4026c28:	d9000217 	ldw	r4,8(sp)
 4026c2c:	1805883a 	mov	r2,r3
 4026c30:	19000415 	stw	r4,16(r3)
 4026c34:	dfc01017 	ldw	ra,64(sp)
 4026c38:	df000f17 	ldw	fp,60(sp)
 4026c3c:	ddc00e17 	ldw	r23,56(sp)
 4026c40:	dd800d17 	ldw	r22,52(sp)
 4026c44:	dd400c17 	ldw	r21,48(sp)
 4026c48:	dd000b17 	ldw	r20,44(sp)
 4026c4c:	dcc00a17 	ldw	r19,40(sp)
 4026c50:	dc800917 	ldw	r18,36(sp)
 4026c54:	dc400817 	ldw	r17,32(sp)
 4026c58:	dc000717 	ldw	r16,28(sp)
 4026c5c:	dec01104 	addi	sp,sp,68
 4026c60:	f800283a 	ret

04026c64 <__pow5mult>:
 4026c64:	defffa04 	addi	sp,sp,-24
 4026c68:	dcc00315 	stw	r19,12(sp)
 4026c6c:	dc000015 	stw	r16,0(sp)
 4026c70:	dfc00515 	stw	ra,20(sp)
 4026c74:	dd000415 	stw	r20,16(sp)
 4026c78:	dc800215 	stw	r18,8(sp)
 4026c7c:	dc400115 	stw	r17,4(sp)
 4026c80:	308000cc 	andi	r2,r6,3
 4026c84:	3021883a 	mov	r16,r6
 4026c88:	2027883a 	mov	r19,r4
 4026c8c:	10002f1e 	bne	r2,zero,4026d4c <__pow5mult+0xe8>
 4026c90:	2825883a 	mov	r18,r5
 4026c94:	8021d0ba 	srai	r16,r16,2
 4026c98:	80001a26 	beq	r16,zero,4026d04 <__pow5mult+0xa0>
 4026c9c:	9c401217 	ldw	r17,72(r19)
 4026ca0:	8800061e 	bne	r17,zero,4026cbc <__pow5mult+0x58>
 4026ca4:	00003406 	br	4026d78 <__pow5mult+0x114>
 4026ca8:	8021d07a 	srai	r16,r16,1
 4026cac:	80001526 	beq	r16,zero,4026d04 <__pow5mult+0xa0>
 4026cb0:	88800017 	ldw	r2,0(r17)
 4026cb4:	10001c26 	beq	r2,zero,4026d28 <__pow5mult+0xc4>
 4026cb8:	1023883a 	mov	r17,r2
 4026cbc:	8080004c 	andi	r2,r16,1
 4026cc0:	103ff926 	beq	r2,zero,4026ca8 <__flash_rwdata_start+0xffff1458>
 4026cc4:	880d883a 	mov	r6,r17
 4026cc8:	900b883a 	mov	r5,r18
 4026ccc:	9809883a 	mov	r4,r19
 4026cd0:	40269d80 	call	40269d8 <__multiply>
 4026cd4:	90001b26 	beq	r18,zero,4026d44 <__pow5mult+0xe0>
 4026cd8:	91000117 	ldw	r4,4(r18)
 4026cdc:	98c01317 	ldw	r3,76(r19)
 4026ce0:	8021d07a 	srai	r16,r16,1
 4026ce4:	2109883a 	add	r4,r4,r4
 4026ce8:	2109883a 	add	r4,r4,r4
 4026cec:	1907883a 	add	r3,r3,r4
 4026cf0:	19000017 	ldw	r4,0(r3)
 4026cf4:	91000015 	stw	r4,0(r18)
 4026cf8:	1c800015 	stw	r18,0(r3)
 4026cfc:	1025883a 	mov	r18,r2
 4026d00:	803feb1e 	bne	r16,zero,4026cb0 <__flash_rwdata_start+0xffff1460>
 4026d04:	9005883a 	mov	r2,r18
 4026d08:	dfc00517 	ldw	ra,20(sp)
 4026d0c:	dd000417 	ldw	r20,16(sp)
 4026d10:	dcc00317 	ldw	r19,12(sp)
 4026d14:	dc800217 	ldw	r18,8(sp)
 4026d18:	dc400117 	ldw	r17,4(sp)
 4026d1c:	dc000017 	ldw	r16,0(sp)
 4026d20:	dec00604 	addi	sp,sp,24
 4026d24:	f800283a 	ret
 4026d28:	880d883a 	mov	r6,r17
 4026d2c:	880b883a 	mov	r5,r17
 4026d30:	9809883a 	mov	r4,r19
 4026d34:	40269d80 	call	40269d8 <__multiply>
 4026d38:	88800015 	stw	r2,0(r17)
 4026d3c:	10000015 	stw	zero,0(r2)
 4026d40:	003fdd06 	br	4026cb8 <__flash_rwdata_start+0xffff1468>
 4026d44:	1025883a 	mov	r18,r2
 4026d48:	003fd706 	br	4026ca8 <__flash_rwdata_start+0xffff1458>
 4026d4c:	10bfffc4 	addi	r2,r2,-1
 4026d50:	1085883a 	add	r2,r2,r2
 4026d54:	00c00034 	movhi	r3,0
 4026d58:	18c09f04 	addi	r3,r3,636
 4026d5c:	1085883a 	add	r2,r2,r2
 4026d60:	1885883a 	add	r2,r3,r2
 4026d64:	11800017 	ldw	r6,0(r2)
 4026d68:	000f883a 	mov	r7,zero
 4026d6c:	40266380 	call	4026638 <__multadd>
 4026d70:	1025883a 	mov	r18,r2
 4026d74:	003fc706 	br	4026c94 <__flash_rwdata_start+0xffff1444>
 4026d78:	05000044 	movi	r20,1
 4026d7c:	a00b883a 	mov	r5,r20
 4026d80:	9809883a 	mov	r4,r19
 4026d84:	40265680 	call	4026568 <_Balloc>
 4026d88:	1023883a 	mov	r17,r2
 4026d8c:	00809c44 	movi	r2,625
 4026d90:	88800515 	stw	r2,20(r17)
 4026d94:	8d000415 	stw	r20,16(r17)
 4026d98:	9c401215 	stw	r17,72(r19)
 4026d9c:	88000015 	stw	zero,0(r17)
 4026da0:	003fc606 	br	4026cbc <__flash_rwdata_start+0xffff146c>

04026da4 <__lshift>:
 4026da4:	defff904 	addi	sp,sp,-28
 4026da8:	dd400515 	stw	r21,20(sp)
 4026dac:	dcc00315 	stw	r19,12(sp)
 4026db0:	302bd17a 	srai	r21,r6,5
 4026db4:	2cc00417 	ldw	r19,16(r5)
 4026db8:	28800217 	ldw	r2,8(r5)
 4026dbc:	dd000415 	stw	r20,16(sp)
 4026dc0:	ace7883a 	add	r19,r21,r19
 4026dc4:	dc800215 	stw	r18,8(sp)
 4026dc8:	dc400115 	stw	r17,4(sp)
 4026dcc:	dc000015 	stw	r16,0(sp)
 4026dd0:	dfc00615 	stw	ra,24(sp)
 4026dd4:	9c000044 	addi	r16,r19,1
 4026dd8:	2823883a 	mov	r17,r5
 4026ddc:	3029883a 	mov	r20,r6
 4026de0:	2025883a 	mov	r18,r4
 4026de4:	29400117 	ldw	r5,4(r5)
 4026de8:	1400030e 	bge	r2,r16,4026df8 <__lshift+0x54>
 4026dec:	1085883a 	add	r2,r2,r2
 4026df0:	29400044 	addi	r5,r5,1
 4026df4:	143ffd16 	blt	r2,r16,4026dec <__flash_rwdata_start+0xffff159c>
 4026df8:	9009883a 	mov	r4,r18
 4026dfc:	40265680 	call	4026568 <_Balloc>
 4026e00:	10c00504 	addi	r3,r2,20
 4026e04:	0540070e 	bge	zero,r21,4026e24 <__lshift+0x80>
 4026e08:	ad6b883a 	add	r21,r21,r21
 4026e0c:	ad6b883a 	add	r21,r21,r21
 4026e10:	1809883a 	mov	r4,r3
 4026e14:	1d47883a 	add	r3,r3,r21
 4026e18:	20000015 	stw	zero,0(r4)
 4026e1c:	21000104 	addi	r4,r4,4
 4026e20:	193ffd1e 	bne	r3,r4,4026e18 <__flash_rwdata_start+0xffff15c8>
 4026e24:	8a000417 	ldw	r8,16(r17)
 4026e28:	89000504 	addi	r4,r17,20
 4026e2c:	a18007cc 	andi	r6,r20,31
 4026e30:	4211883a 	add	r8,r8,r8
 4026e34:	4211883a 	add	r8,r8,r8
 4026e38:	2211883a 	add	r8,r4,r8
 4026e3c:	30002326 	beq	r6,zero,4026ecc <__lshift+0x128>
 4026e40:	02400804 	movi	r9,32
 4026e44:	4993c83a 	sub	r9,r9,r6
 4026e48:	000b883a 	mov	r5,zero
 4026e4c:	21c00017 	ldw	r7,0(r4)
 4026e50:	1815883a 	mov	r10,r3
 4026e54:	18c00104 	addi	r3,r3,4
 4026e58:	398e983a 	sll	r7,r7,r6
 4026e5c:	21000104 	addi	r4,r4,4
 4026e60:	394ab03a 	or	r5,r7,r5
 4026e64:	197fff15 	stw	r5,-4(r3)
 4026e68:	217fff17 	ldw	r5,-4(r4)
 4026e6c:	2a4ad83a 	srl	r5,r5,r9
 4026e70:	223ff636 	bltu	r4,r8,4026e4c <__flash_rwdata_start+0xffff15fc>
 4026e74:	51400115 	stw	r5,4(r10)
 4026e78:	28001a1e 	bne	r5,zero,4026ee4 <__lshift+0x140>
 4026e7c:	843fffc4 	addi	r16,r16,-1
 4026e80:	14000415 	stw	r16,16(r2)
 4026e84:	88000826 	beq	r17,zero,4026ea8 <__lshift+0x104>
 4026e88:	89000117 	ldw	r4,4(r17)
 4026e8c:	90c01317 	ldw	r3,76(r18)
 4026e90:	2109883a 	add	r4,r4,r4
 4026e94:	2109883a 	add	r4,r4,r4
 4026e98:	1907883a 	add	r3,r3,r4
 4026e9c:	19000017 	ldw	r4,0(r3)
 4026ea0:	89000015 	stw	r4,0(r17)
 4026ea4:	1c400015 	stw	r17,0(r3)
 4026ea8:	dfc00617 	ldw	ra,24(sp)
 4026eac:	dd400517 	ldw	r21,20(sp)
 4026eb0:	dd000417 	ldw	r20,16(sp)
 4026eb4:	dcc00317 	ldw	r19,12(sp)
 4026eb8:	dc800217 	ldw	r18,8(sp)
 4026ebc:	dc400117 	ldw	r17,4(sp)
 4026ec0:	dc000017 	ldw	r16,0(sp)
 4026ec4:	dec00704 	addi	sp,sp,28
 4026ec8:	f800283a 	ret
 4026ecc:	21400017 	ldw	r5,0(r4)
 4026ed0:	18c00104 	addi	r3,r3,4
 4026ed4:	21000104 	addi	r4,r4,4
 4026ed8:	197fff15 	stw	r5,-4(r3)
 4026edc:	223ffb36 	bltu	r4,r8,4026ecc <__flash_rwdata_start+0xffff167c>
 4026ee0:	003fe606 	br	4026e7c <__flash_rwdata_start+0xffff162c>
 4026ee4:	9c000084 	addi	r16,r19,2
 4026ee8:	003fe406 	br	4026e7c <__flash_rwdata_start+0xffff162c>

04026eec <__mcmp>:
 4026eec:	20800417 	ldw	r2,16(r4)
 4026ef0:	28c00417 	ldw	r3,16(r5)
 4026ef4:	10c5c83a 	sub	r2,r2,r3
 4026ef8:	1000111e 	bne	r2,zero,4026f40 <__mcmp+0x54>
 4026efc:	18c7883a 	add	r3,r3,r3
 4026f00:	18c7883a 	add	r3,r3,r3
 4026f04:	21000504 	addi	r4,r4,20
 4026f08:	29400504 	addi	r5,r5,20
 4026f0c:	20c5883a 	add	r2,r4,r3
 4026f10:	28cb883a 	add	r5,r5,r3
 4026f14:	00000106 	br	4026f1c <__mcmp+0x30>
 4026f18:	20800a2e 	bgeu	r4,r2,4026f44 <__mcmp+0x58>
 4026f1c:	10bfff04 	addi	r2,r2,-4
 4026f20:	297fff04 	addi	r5,r5,-4
 4026f24:	11800017 	ldw	r6,0(r2)
 4026f28:	28c00017 	ldw	r3,0(r5)
 4026f2c:	30fffa26 	beq	r6,r3,4026f18 <__flash_rwdata_start+0xffff16c8>
 4026f30:	30c00236 	bltu	r6,r3,4026f3c <__mcmp+0x50>
 4026f34:	00800044 	movi	r2,1
 4026f38:	f800283a 	ret
 4026f3c:	00bfffc4 	movi	r2,-1
 4026f40:	f800283a 	ret
 4026f44:	0005883a 	mov	r2,zero
 4026f48:	f800283a 	ret

04026f4c <__mdiff>:
 4026f4c:	28c00417 	ldw	r3,16(r5)
 4026f50:	30800417 	ldw	r2,16(r6)
 4026f54:	defffa04 	addi	sp,sp,-24
 4026f58:	dcc00315 	stw	r19,12(sp)
 4026f5c:	dc800215 	stw	r18,8(sp)
 4026f60:	dfc00515 	stw	ra,20(sp)
 4026f64:	dd000415 	stw	r20,16(sp)
 4026f68:	dc400115 	stw	r17,4(sp)
 4026f6c:	dc000015 	stw	r16,0(sp)
 4026f70:	1887c83a 	sub	r3,r3,r2
 4026f74:	2825883a 	mov	r18,r5
 4026f78:	3027883a 	mov	r19,r6
 4026f7c:	1800141e 	bne	r3,zero,4026fd0 <__mdiff+0x84>
 4026f80:	1085883a 	add	r2,r2,r2
 4026f84:	1085883a 	add	r2,r2,r2
 4026f88:	2a000504 	addi	r8,r5,20
 4026f8c:	34000504 	addi	r16,r6,20
 4026f90:	4087883a 	add	r3,r8,r2
 4026f94:	8085883a 	add	r2,r16,r2
 4026f98:	00000106 	br	4026fa0 <__mdiff+0x54>
 4026f9c:	40c0592e 	bgeu	r8,r3,4027104 <__mdiff+0x1b8>
 4026fa0:	18ffff04 	addi	r3,r3,-4
 4026fa4:	10bfff04 	addi	r2,r2,-4
 4026fa8:	19c00017 	ldw	r7,0(r3)
 4026fac:	11400017 	ldw	r5,0(r2)
 4026fb0:	397ffa26 	beq	r7,r5,4026f9c <__flash_rwdata_start+0xffff174c>
 4026fb4:	3940592e 	bgeu	r7,r5,402711c <__mdiff+0x1d0>
 4026fb8:	9005883a 	mov	r2,r18
 4026fbc:	4023883a 	mov	r17,r8
 4026fc0:	9825883a 	mov	r18,r19
 4026fc4:	05000044 	movi	r20,1
 4026fc8:	1027883a 	mov	r19,r2
 4026fcc:	00000406 	br	4026fe0 <__mdiff+0x94>
 4026fd0:	18005616 	blt	r3,zero,402712c <__mdiff+0x1e0>
 4026fd4:	34400504 	addi	r17,r6,20
 4026fd8:	2c000504 	addi	r16,r5,20
 4026fdc:	0029883a 	mov	r20,zero
 4026fe0:	91400117 	ldw	r5,4(r18)
 4026fe4:	40265680 	call	4026568 <_Balloc>
 4026fe8:	92400417 	ldw	r9,16(r18)
 4026fec:	9b000417 	ldw	r12,16(r19)
 4026ff0:	12c00504 	addi	r11,r2,20
 4026ff4:	4a51883a 	add	r8,r9,r9
 4026ff8:	6319883a 	add	r12,r12,r12
 4026ffc:	4211883a 	add	r8,r8,r8
 4027000:	6319883a 	add	r12,r12,r12
 4027004:	15000315 	stw	r20,12(r2)
 4027008:	8211883a 	add	r8,r16,r8
 402700c:	8b19883a 	add	r12,r17,r12
 4027010:	0007883a 	mov	r3,zero
 4027014:	81400017 	ldw	r5,0(r16)
 4027018:	89c00017 	ldw	r7,0(r17)
 402701c:	59800104 	addi	r6,r11,4
 4027020:	293fffcc 	andi	r4,r5,65535
 4027024:	20c7883a 	add	r3,r4,r3
 4027028:	393fffcc 	andi	r4,r7,65535
 402702c:	1909c83a 	sub	r4,r3,r4
 4027030:	280ad43a 	srli	r5,r5,16
 4027034:	380ed43a 	srli	r7,r7,16
 4027038:	2007d43a 	srai	r3,r4,16
 402703c:	213fffcc 	andi	r4,r4,65535
 4027040:	29cbc83a 	sub	r5,r5,r7
 4027044:	28c7883a 	add	r3,r5,r3
 4027048:	180a943a 	slli	r5,r3,16
 402704c:	8c400104 	addi	r17,r17,4
 4027050:	84000104 	addi	r16,r16,4
 4027054:	2908b03a 	or	r4,r5,r4
 4027058:	59000015 	stw	r4,0(r11)
 402705c:	1807d43a 	srai	r3,r3,16
 4027060:	3015883a 	mov	r10,r6
 4027064:	3017883a 	mov	r11,r6
 4027068:	8b3fea36 	bltu	r17,r12,4027014 <__flash_rwdata_start+0xffff17c4>
 402706c:	8200162e 	bgeu	r16,r8,40270c8 <__mdiff+0x17c>
 4027070:	8017883a 	mov	r11,r16
 4027074:	59400017 	ldw	r5,0(r11)
 4027078:	31800104 	addi	r6,r6,4
 402707c:	5ac00104 	addi	r11,r11,4
 4027080:	293fffcc 	andi	r4,r5,65535
 4027084:	20c7883a 	add	r3,r4,r3
 4027088:	280ed43a 	srli	r7,r5,16
 402708c:	180bd43a 	srai	r5,r3,16
 4027090:	193fffcc 	andi	r4,r3,65535
 4027094:	3947883a 	add	r3,r7,r5
 4027098:	180a943a 	slli	r5,r3,16
 402709c:	1807d43a 	srai	r3,r3,16
 40270a0:	2908b03a 	or	r4,r5,r4
 40270a4:	313fff15 	stw	r4,-4(r6)
 40270a8:	5a3ff236 	bltu	r11,r8,4027074 <__flash_rwdata_start+0xffff1824>
 40270ac:	0406303a 	nor	r3,zero,r16
 40270b0:	1a07883a 	add	r3,r3,r8
 40270b4:	1806d0ba 	srli	r3,r3,2
 40270b8:	18c00044 	addi	r3,r3,1
 40270bc:	18c7883a 	add	r3,r3,r3
 40270c0:	18c7883a 	add	r3,r3,r3
 40270c4:	50d5883a 	add	r10,r10,r3
 40270c8:	50ffff04 	addi	r3,r10,-4
 40270cc:	2000041e 	bne	r4,zero,40270e0 <__mdiff+0x194>
 40270d0:	18ffff04 	addi	r3,r3,-4
 40270d4:	19000017 	ldw	r4,0(r3)
 40270d8:	4a7fffc4 	addi	r9,r9,-1
 40270dc:	203ffc26 	beq	r4,zero,40270d0 <__flash_rwdata_start+0xffff1880>
 40270e0:	12400415 	stw	r9,16(r2)
 40270e4:	dfc00517 	ldw	ra,20(sp)
 40270e8:	dd000417 	ldw	r20,16(sp)
 40270ec:	dcc00317 	ldw	r19,12(sp)
 40270f0:	dc800217 	ldw	r18,8(sp)
 40270f4:	dc400117 	ldw	r17,4(sp)
 40270f8:	dc000017 	ldw	r16,0(sp)
 40270fc:	dec00604 	addi	sp,sp,24
 4027100:	f800283a 	ret
 4027104:	000b883a 	mov	r5,zero
 4027108:	40265680 	call	4026568 <_Balloc>
 402710c:	00c00044 	movi	r3,1
 4027110:	10c00415 	stw	r3,16(r2)
 4027114:	10000515 	stw	zero,20(r2)
 4027118:	003ff206 	br	40270e4 <__flash_rwdata_start+0xffff1894>
 402711c:	8023883a 	mov	r17,r16
 4027120:	0029883a 	mov	r20,zero
 4027124:	4021883a 	mov	r16,r8
 4027128:	003fad06 	br	4026fe0 <__flash_rwdata_start+0xffff1790>
 402712c:	9005883a 	mov	r2,r18
 4027130:	94400504 	addi	r17,r18,20
 4027134:	9c000504 	addi	r16,r19,20
 4027138:	9825883a 	mov	r18,r19
 402713c:	05000044 	movi	r20,1
 4027140:	1027883a 	mov	r19,r2
 4027144:	003fa606 	br	4026fe0 <__flash_rwdata_start+0xffff1790>

04027148 <__ulp>:
 4027148:	295ffc2c 	andhi	r5,r5,32752
 402714c:	00bf3034 	movhi	r2,64704
 4027150:	2887883a 	add	r3,r5,r2
 4027154:	00c0020e 	bge	zero,r3,4027160 <__ulp+0x18>
 4027158:	0005883a 	mov	r2,zero
 402715c:	f800283a 	ret
 4027160:	00c7c83a 	sub	r3,zero,r3
 4027164:	1807d53a 	srai	r3,r3,20
 4027168:	008004c4 	movi	r2,19
 402716c:	10c00b0e 	bge	r2,r3,402719c <__ulp+0x54>
 4027170:	18bffb04 	addi	r2,r3,-20
 4027174:	01000784 	movi	r4,30
 4027178:	0007883a 	mov	r3,zero
 402717c:	20800516 	blt	r4,r2,4027194 <__ulp+0x4c>
 4027180:	010007c4 	movi	r4,31
 4027184:	2089c83a 	sub	r4,r4,r2
 4027188:	00800044 	movi	r2,1
 402718c:	1104983a 	sll	r2,r2,r4
 4027190:	f800283a 	ret
 4027194:	00800044 	movi	r2,1
 4027198:	f800283a 	ret
 402719c:	01400234 	movhi	r5,8
 40271a0:	28c7d83a 	sra	r3,r5,r3
 40271a4:	0005883a 	mov	r2,zero
 40271a8:	f800283a 	ret

040271ac <__b2d>:
 40271ac:	defffa04 	addi	sp,sp,-24
 40271b0:	dc000015 	stw	r16,0(sp)
 40271b4:	24000417 	ldw	r16,16(r4)
 40271b8:	dc400115 	stw	r17,4(sp)
 40271bc:	24400504 	addi	r17,r4,20
 40271c0:	8421883a 	add	r16,r16,r16
 40271c4:	8421883a 	add	r16,r16,r16
 40271c8:	8c21883a 	add	r16,r17,r16
 40271cc:	dc800215 	stw	r18,8(sp)
 40271d0:	84bfff17 	ldw	r18,-4(r16)
 40271d4:	dd000415 	stw	r20,16(sp)
 40271d8:	dcc00315 	stw	r19,12(sp)
 40271dc:	9009883a 	mov	r4,r18
 40271e0:	2829883a 	mov	r20,r5
 40271e4:	dfc00515 	stw	ra,20(sp)
 40271e8:	40268840 	call	4026884 <__hi0bits>
 40271ec:	00c00804 	movi	r3,32
 40271f0:	1889c83a 	sub	r4,r3,r2
 40271f4:	a1000015 	stw	r4,0(r20)
 40271f8:	01000284 	movi	r4,10
 40271fc:	84ffff04 	addi	r19,r16,-4
 4027200:	20801216 	blt	r4,r2,402724c <__b2d+0xa0>
 4027204:	018002c4 	movi	r6,11
 4027208:	308dc83a 	sub	r6,r6,r2
 402720c:	9186d83a 	srl	r3,r18,r6
 4027210:	18cffc34 	orhi	r3,r3,16368
 4027214:	8cc0212e 	bgeu	r17,r19,402729c <__b2d+0xf0>
 4027218:	813ffe17 	ldw	r4,-8(r16)
 402721c:	218cd83a 	srl	r6,r4,r6
 4027220:	10800544 	addi	r2,r2,21
 4027224:	9084983a 	sll	r2,r18,r2
 4027228:	1184b03a 	or	r2,r2,r6
 402722c:	dfc00517 	ldw	ra,20(sp)
 4027230:	dd000417 	ldw	r20,16(sp)
 4027234:	dcc00317 	ldw	r19,12(sp)
 4027238:	dc800217 	ldw	r18,8(sp)
 402723c:	dc400117 	ldw	r17,4(sp)
 4027240:	dc000017 	ldw	r16,0(sp)
 4027244:	dec00604 	addi	sp,sp,24
 4027248:	f800283a 	ret
 402724c:	8cc00f2e 	bgeu	r17,r19,402728c <__b2d+0xe0>
 4027250:	117ffd44 	addi	r5,r2,-11
 4027254:	80bffe17 	ldw	r2,-8(r16)
 4027258:	28000e26 	beq	r5,zero,4027294 <__b2d+0xe8>
 402725c:	1949c83a 	sub	r4,r3,r5
 4027260:	9164983a 	sll	r18,r18,r5
 4027264:	1106d83a 	srl	r3,r2,r4
 4027268:	81bffe04 	addi	r6,r16,-8
 402726c:	948ffc34 	orhi	r18,r18,16368
 4027270:	90c6b03a 	or	r3,r18,r3
 4027274:	89800e2e 	bgeu	r17,r6,40272b0 <__b2d+0x104>
 4027278:	81bffd17 	ldw	r6,-12(r16)
 402727c:	1144983a 	sll	r2,r2,r5
 4027280:	310ad83a 	srl	r5,r6,r4
 4027284:	2884b03a 	or	r2,r5,r2
 4027288:	003fe806 	br	402722c <__flash_rwdata_start+0xffff19dc>
 402728c:	10bffd44 	addi	r2,r2,-11
 4027290:	1000041e 	bne	r2,zero,40272a4 <__b2d+0xf8>
 4027294:	90cffc34 	orhi	r3,r18,16368
 4027298:	003fe406 	br	402722c <__flash_rwdata_start+0xffff19dc>
 402729c:	000d883a 	mov	r6,zero
 40272a0:	003fdf06 	br	4027220 <__flash_rwdata_start+0xffff19d0>
 40272a4:	90a4983a 	sll	r18,r18,r2
 40272a8:	0005883a 	mov	r2,zero
 40272ac:	003ff906 	br	4027294 <__flash_rwdata_start+0xffff1a44>
 40272b0:	1144983a 	sll	r2,r2,r5
 40272b4:	003fdd06 	br	402722c <__flash_rwdata_start+0xffff19dc>

040272b8 <__d2b>:
 40272b8:	defff804 	addi	sp,sp,-32
 40272bc:	dc000215 	stw	r16,8(sp)
 40272c0:	3021883a 	mov	r16,r6
 40272c4:	dc400315 	stw	r17,12(sp)
 40272c8:	8022907a 	slli	r17,r16,1
 40272cc:	dd000615 	stw	r20,24(sp)
 40272d0:	2829883a 	mov	r20,r5
 40272d4:	01400044 	movi	r5,1
 40272d8:	dcc00515 	stw	r19,20(sp)
 40272dc:	dc800415 	stw	r18,16(sp)
 40272e0:	dfc00715 	stw	ra,28(sp)
 40272e4:	3825883a 	mov	r18,r7
 40272e8:	8822d57a 	srli	r17,r17,21
 40272ec:	40265680 	call	4026568 <_Balloc>
 40272f0:	1027883a 	mov	r19,r2
 40272f4:	00800434 	movhi	r2,16
 40272f8:	10bfffc4 	addi	r2,r2,-1
 40272fc:	808c703a 	and	r6,r16,r2
 4027300:	88000126 	beq	r17,zero,4027308 <__d2b+0x50>
 4027304:	31800434 	orhi	r6,r6,16
 4027308:	d9800015 	stw	r6,0(sp)
 402730c:	a0002426 	beq	r20,zero,40273a0 <__d2b+0xe8>
 4027310:	d9000104 	addi	r4,sp,4
 4027314:	dd000115 	stw	r20,4(sp)
 4027318:	40268ec0 	call	40268ec <__lo0bits>
 402731c:	d8c00017 	ldw	r3,0(sp)
 4027320:	10002f1e 	bne	r2,zero,40273e0 <__d2b+0x128>
 4027324:	d9000117 	ldw	r4,4(sp)
 4027328:	99000515 	stw	r4,20(r19)
 402732c:	1821003a 	cmpeq	r16,r3,zero
 4027330:	01000084 	movi	r4,2
 4027334:	2421c83a 	sub	r16,r4,r16
 4027338:	98c00615 	stw	r3,24(r19)
 402733c:	9c000415 	stw	r16,16(r19)
 4027340:	88001f1e 	bne	r17,zero,40273c0 <__d2b+0x108>
 4027344:	10bef384 	addi	r2,r2,-1074
 4027348:	90800015 	stw	r2,0(r18)
 402734c:	00900034 	movhi	r2,16384
 4027350:	10bfffc4 	addi	r2,r2,-1
 4027354:	8085883a 	add	r2,r16,r2
 4027358:	1085883a 	add	r2,r2,r2
 402735c:	1085883a 	add	r2,r2,r2
 4027360:	9885883a 	add	r2,r19,r2
 4027364:	11000517 	ldw	r4,20(r2)
 4027368:	8020917a 	slli	r16,r16,5
 402736c:	40268840 	call	4026884 <__hi0bits>
 4027370:	d8c00817 	ldw	r3,32(sp)
 4027374:	8085c83a 	sub	r2,r16,r2
 4027378:	18800015 	stw	r2,0(r3)
 402737c:	9805883a 	mov	r2,r19
 4027380:	dfc00717 	ldw	ra,28(sp)
 4027384:	dd000617 	ldw	r20,24(sp)
 4027388:	dcc00517 	ldw	r19,20(sp)
 402738c:	dc800417 	ldw	r18,16(sp)
 4027390:	dc400317 	ldw	r17,12(sp)
 4027394:	dc000217 	ldw	r16,8(sp)
 4027398:	dec00804 	addi	sp,sp,32
 402739c:	f800283a 	ret
 40273a0:	d809883a 	mov	r4,sp
 40273a4:	40268ec0 	call	40268ec <__lo0bits>
 40273a8:	d8c00017 	ldw	r3,0(sp)
 40273ac:	04000044 	movi	r16,1
 40273b0:	9c000415 	stw	r16,16(r19)
 40273b4:	98c00515 	stw	r3,20(r19)
 40273b8:	10800804 	addi	r2,r2,32
 40273bc:	883fe126 	beq	r17,zero,4027344 <__flash_rwdata_start+0xffff1af4>
 40273c0:	00c00d44 	movi	r3,53
 40273c4:	8c7ef344 	addi	r17,r17,-1075
 40273c8:	88a3883a 	add	r17,r17,r2
 40273cc:	1885c83a 	sub	r2,r3,r2
 40273d0:	d8c00817 	ldw	r3,32(sp)
 40273d4:	94400015 	stw	r17,0(r18)
 40273d8:	18800015 	stw	r2,0(r3)
 40273dc:	003fe706 	br	402737c <__flash_rwdata_start+0xffff1b2c>
 40273e0:	01000804 	movi	r4,32
 40273e4:	2089c83a 	sub	r4,r4,r2
 40273e8:	1908983a 	sll	r4,r3,r4
 40273ec:	d9400117 	ldw	r5,4(sp)
 40273f0:	1886d83a 	srl	r3,r3,r2
 40273f4:	2148b03a 	or	r4,r4,r5
 40273f8:	99000515 	stw	r4,20(r19)
 40273fc:	d8c00015 	stw	r3,0(sp)
 4027400:	003fca06 	br	402732c <__flash_rwdata_start+0xffff1adc>

04027404 <__ratio>:
 4027404:	defff904 	addi	sp,sp,-28
 4027408:	dc400315 	stw	r17,12(sp)
 402740c:	2823883a 	mov	r17,r5
 4027410:	d9400104 	addi	r5,sp,4
 4027414:	dfc00615 	stw	ra,24(sp)
 4027418:	dcc00515 	stw	r19,20(sp)
 402741c:	dc800415 	stw	r18,16(sp)
 4027420:	2027883a 	mov	r19,r4
 4027424:	dc000215 	stw	r16,8(sp)
 4027428:	40271ac0 	call	40271ac <__b2d>
 402742c:	d80b883a 	mov	r5,sp
 4027430:	8809883a 	mov	r4,r17
 4027434:	1025883a 	mov	r18,r2
 4027438:	1821883a 	mov	r16,r3
 402743c:	40271ac0 	call	40271ac <__b2d>
 4027440:	8a000417 	ldw	r8,16(r17)
 4027444:	99000417 	ldw	r4,16(r19)
 4027448:	d9400117 	ldw	r5,4(sp)
 402744c:	2209c83a 	sub	r4,r4,r8
 4027450:	2010917a 	slli	r8,r4,5
 4027454:	d9000017 	ldw	r4,0(sp)
 4027458:	2909c83a 	sub	r4,r5,r4
 402745c:	4109883a 	add	r4,r8,r4
 4027460:	01000e0e 	bge	zero,r4,402749c <__ratio+0x98>
 4027464:	2008953a 	slli	r4,r4,20
 4027468:	2421883a 	add	r16,r4,r16
 402746c:	100d883a 	mov	r6,r2
 4027470:	180f883a 	mov	r7,r3
 4027474:	9009883a 	mov	r4,r18
 4027478:	800b883a 	mov	r5,r16
 402747c:	402b4f00 	call	402b4f0 <__divdf3>
 4027480:	dfc00617 	ldw	ra,24(sp)
 4027484:	dcc00517 	ldw	r19,20(sp)
 4027488:	dc800417 	ldw	r18,16(sp)
 402748c:	dc400317 	ldw	r17,12(sp)
 4027490:	dc000217 	ldw	r16,8(sp)
 4027494:	dec00704 	addi	sp,sp,28
 4027498:	f800283a 	ret
 402749c:	2008953a 	slli	r4,r4,20
 40274a0:	1907c83a 	sub	r3,r3,r4
 40274a4:	003ff106 	br	402746c <__flash_rwdata_start+0xffff1c1c>

040274a8 <_mprec_log10>:
 40274a8:	defffe04 	addi	sp,sp,-8
 40274ac:	dc000015 	stw	r16,0(sp)
 40274b0:	dfc00115 	stw	ra,4(sp)
 40274b4:	008005c4 	movi	r2,23
 40274b8:	2021883a 	mov	r16,r4
 40274bc:	11000d0e 	bge	r2,r4,40274f4 <_mprec_log10+0x4c>
 40274c0:	0005883a 	mov	r2,zero
 40274c4:	00cffc34 	movhi	r3,16368
 40274c8:	843fffc4 	addi	r16,r16,-1
 40274cc:	000d883a 	mov	r6,zero
 40274d0:	01d00934 	movhi	r7,16420
 40274d4:	1009883a 	mov	r4,r2
 40274d8:	180b883a 	mov	r5,r3
 40274dc:	402c1180 	call	402c118 <__muldf3>
 40274e0:	803ff91e 	bne	r16,zero,40274c8 <__flash_rwdata_start+0xffff1c78>
 40274e4:	dfc00117 	ldw	ra,4(sp)
 40274e8:	dc000017 	ldw	r16,0(sp)
 40274ec:	dec00204 	addi	sp,sp,8
 40274f0:	f800283a 	ret
 40274f4:	202090fa 	slli	r16,r4,3
 40274f8:	00800034 	movhi	r2,0
 40274fc:	1080b604 	addi	r2,r2,728
 4027500:	1421883a 	add	r16,r2,r16
 4027504:	80800017 	ldw	r2,0(r16)
 4027508:	80c00117 	ldw	r3,4(r16)
 402750c:	dfc00117 	ldw	ra,4(sp)
 4027510:	dc000017 	ldw	r16,0(sp)
 4027514:	dec00204 	addi	sp,sp,8
 4027518:	f800283a 	ret

0402751c <__copybits>:
 402751c:	297fffc4 	addi	r5,r5,-1
 4027520:	280fd17a 	srai	r7,r5,5
 4027524:	30c00417 	ldw	r3,16(r6)
 4027528:	30800504 	addi	r2,r6,20
 402752c:	39c00044 	addi	r7,r7,1
 4027530:	18c7883a 	add	r3,r3,r3
 4027534:	39cf883a 	add	r7,r7,r7
 4027538:	18c7883a 	add	r3,r3,r3
 402753c:	39cf883a 	add	r7,r7,r7
 4027540:	10c7883a 	add	r3,r2,r3
 4027544:	21cf883a 	add	r7,r4,r7
 4027548:	10c00d2e 	bgeu	r2,r3,4027580 <__copybits+0x64>
 402754c:	200b883a 	mov	r5,r4
 4027550:	12000017 	ldw	r8,0(r2)
 4027554:	29400104 	addi	r5,r5,4
 4027558:	10800104 	addi	r2,r2,4
 402755c:	2a3fff15 	stw	r8,-4(r5)
 4027560:	10fffb36 	bltu	r2,r3,4027550 <__flash_rwdata_start+0xffff1d00>
 4027564:	1985c83a 	sub	r2,r3,r6
 4027568:	10bffac4 	addi	r2,r2,-21
 402756c:	1004d0ba 	srli	r2,r2,2
 4027570:	10800044 	addi	r2,r2,1
 4027574:	1085883a 	add	r2,r2,r2
 4027578:	1085883a 	add	r2,r2,r2
 402757c:	2089883a 	add	r4,r4,r2
 4027580:	21c0032e 	bgeu	r4,r7,4027590 <__copybits+0x74>
 4027584:	20000015 	stw	zero,0(r4)
 4027588:	21000104 	addi	r4,r4,4
 402758c:	21fffd36 	bltu	r4,r7,4027584 <__flash_rwdata_start+0xffff1d34>
 4027590:	f800283a 	ret

04027594 <__any_on>:
 4027594:	20c00417 	ldw	r3,16(r4)
 4027598:	2805d17a 	srai	r2,r5,5
 402759c:	21000504 	addi	r4,r4,20
 40275a0:	18800d0e 	bge	r3,r2,40275d8 <__any_on+0x44>
 40275a4:	18c7883a 	add	r3,r3,r3
 40275a8:	18c7883a 	add	r3,r3,r3
 40275ac:	20c7883a 	add	r3,r4,r3
 40275b0:	20c0192e 	bgeu	r4,r3,4027618 <__any_on+0x84>
 40275b4:	18bfff17 	ldw	r2,-4(r3)
 40275b8:	18ffff04 	addi	r3,r3,-4
 40275bc:	1000041e 	bne	r2,zero,40275d0 <__any_on+0x3c>
 40275c0:	20c0142e 	bgeu	r4,r3,4027614 <__any_on+0x80>
 40275c4:	18ffff04 	addi	r3,r3,-4
 40275c8:	19400017 	ldw	r5,0(r3)
 40275cc:	283ffc26 	beq	r5,zero,40275c0 <__flash_rwdata_start+0xffff1d70>
 40275d0:	00800044 	movi	r2,1
 40275d4:	f800283a 	ret
 40275d8:	10c00a0e 	bge	r2,r3,4027604 <__any_on+0x70>
 40275dc:	1085883a 	add	r2,r2,r2
 40275e0:	1085883a 	add	r2,r2,r2
 40275e4:	294007cc 	andi	r5,r5,31
 40275e8:	2087883a 	add	r3,r4,r2
 40275ec:	283ff026 	beq	r5,zero,40275b0 <__flash_rwdata_start+0xffff1d60>
 40275f0:	19800017 	ldw	r6,0(r3)
 40275f4:	3144d83a 	srl	r2,r6,r5
 40275f8:	114a983a 	sll	r5,r2,r5
 40275fc:	317ff41e 	bne	r6,r5,40275d0 <__flash_rwdata_start+0xffff1d80>
 4027600:	003feb06 	br	40275b0 <__flash_rwdata_start+0xffff1d60>
 4027604:	1085883a 	add	r2,r2,r2
 4027608:	1085883a 	add	r2,r2,r2
 402760c:	2087883a 	add	r3,r4,r2
 4027610:	003fe706 	br	40275b0 <__flash_rwdata_start+0xffff1d60>
 4027614:	f800283a 	ret
 4027618:	0005883a 	mov	r2,zero
 402761c:	f800283a 	ret

04027620 <_realloc_r>:
 4027620:	defff604 	addi	sp,sp,-40
 4027624:	dc800215 	stw	r18,8(sp)
 4027628:	dfc00915 	stw	ra,36(sp)
 402762c:	df000815 	stw	fp,32(sp)
 4027630:	ddc00715 	stw	r23,28(sp)
 4027634:	dd800615 	stw	r22,24(sp)
 4027638:	dd400515 	stw	r21,20(sp)
 402763c:	dd000415 	stw	r20,16(sp)
 4027640:	dcc00315 	stw	r19,12(sp)
 4027644:	dc400115 	stw	r17,4(sp)
 4027648:	dc000015 	stw	r16,0(sp)
 402764c:	3025883a 	mov	r18,r6
 4027650:	2800b726 	beq	r5,zero,4027930 <_realloc_r+0x310>
 4027654:	282b883a 	mov	r21,r5
 4027658:	2029883a 	mov	r20,r4
 402765c:	402da840 	call	402da84 <__malloc_lock>
 4027660:	a8bfff17 	ldw	r2,-4(r21)
 4027664:	043fff04 	movi	r16,-4
 4027668:	90c002c4 	addi	r3,r18,11
 402766c:	01000584 	movi	r4,22
 4027670:	acfffe04 	addi	r19,r21,-8
 4027674:	1420703a 	and	r16,r2,r16
 4027678:	20c0332e 	bgeu	r4,r3,4027748 <_realloc_r+0x128>
 402767c:	047ffe04 	movi	r17,-8
 4027680:	1c62703a 	and	r17,r3,r17
 4027684:	8807883a 	mov	r3,r17
 4027688:	88005816 	blt	r17,zero,40277ec <_realloc_r+0x1cc>
 402768c:	8c805736 	bltu	r17,r18,40277ec <_realloc_r+0x1cc>
 4027690:	80c0300e 	bge	r16,r3,4027754 <_realloc_r+0x134>
 4027694:	07000034 	movhi	fp,0
 4027698:	e7027704 	addi	fp,fp,2524
 402769c:	e1c00217 	ldw	r7,8(fp)
 40276a0:	9c09883a 	add	r4,r19,r16
 40276a4:	22000117 	ldw	r8,4(r4)
 40276a8:	21c06326 	beq	r4,r7,4027838 <_realloc_r+0x218>
 40276ac:	017fff84 	movi	r5,-2
 40276b0:	414a703a 	and	r5,r8,r5
 40276b4:	214b883a 	add	r5,r4,r5
 40276b8:	29800117 	ldw	r6,4(r5)
 40276bc:	3180004c 	andi	r6,r6,1
 40276c0:	30003f26 	beq	r6,zero,40277c0 <_realloc_r+0x1a0>
 40276c4:	1080004c 	andi	r2,r2,1
 40276c8:	10008326 	beq	r2,zero,40278d8 <_realloc_r+0x2b8>
 40276cc:	900b883a 	mov	r5,r18
 40276d0:	a009883a 	mov	r4,r20
 40276d4:	40258ac0 	call	40258ac <_malloc_r>
 40276d8:	1025883a 	mov	r18,r2
 40276dc:	10011e26 	beq	r2,zero,4027b58 <_realloc_r+0x538>
 40276e0:	a93fff17 	ldw	r4,-4(r21)
 40276e4:	10fffe04 	addi	r3,r2,-8
 40276e8:	00bfff84 	movi	r2,-2
 40276ec:	2084703a 	and	r2,r4,r2
 40276f0:	9885883a 	add	r2,r19,r2
 40276f4:	1880ee26 	beq	r3,r2,4027ab0 <_realloc_r+0x490>
 40276f8:	81bfff04 	addi	r6,r16,-4
 40276fc:	00800904 	movi	r2,36
 4027700:	1180b836 	bltu	r2,r6,40279e4 <_realloc_r+0x3c4>
 4027704:	00c004c4 	movi	r3,19
 4027708:	19809636 	bltu	r3,r6,4027964 <_realloc_r+0x344>
 402770c:	9005883a 	mov	r2,r18
 4027710:	a807883a 	mov	r3,r21
 4027714:	19000017 	ldw	r4,0(r3)
 4027718:	11000015 	stw	r4,0(r2)
 402771c:	19000117 	ldw	r4,4(r3)
 4027720:	11000115 	stw	r4,4(r2)
 4027724:	18c00217 	ldw	r3,8(r3)
 4027728:	10c00215 	stw	r3,8(r2)
 402772c:	a80b883a 	mov	r5,r21
 4027730:	a009883a 	mov	r4,r20
 4027734:	4024cb40 	call	4024cb4 <_free_r>
 4027738:	a009883a 	mov	r4,r20
 402773c:	402daa80 	call	402daa8 <__malloc_unlock>
 4027740:	9005883a 	mov	r2,r18
 4027744:	00001206 	br	4027790 <_realloc_r+0x170>
 4027748:	00c00404 	movi	r3,16
 402774c:	1823883a 	mov	r17,r3
 4027750:	003fce06 	br	402768c <__flash_rwdata_start+0xffff1e3c>
 4027754:	a825883a 	mov	r18,r21
 4027758:	8445c83a 	sub	r2,r16,r17
 402775c:	00c003c4 	movi	r3,15
 4027760:	18802636 	bltu	r3,r2,40277fc <_realloc_r+0x1dc>
 4027764:	99800117 	ldw	r6,4(r19)
 4027768:	9c07883a 	add	r3,r19,r16
 402776c:	3180004c 	andi	r6,r6,1
 4027770:	3420b03a 	or	r16,r6,r16
 4027774:	9c000115 	stw	r16,4(r19)
 4027778:	18800117 	ldw	r2,4(r3)
 402777c:	10800054 	ori	r2,r2,1
 4027780:	18800115 	stw	r2,4(r3)
 4027784:	a009883a 	mov	r4,r20
 4027788:	402daa80 	call	402daa8 <__malloc_unlock>
 402778c:	9005883a 	mov	r2,r18
 4027790:	dfc00917 	ldw	ra,36(sp)
 4027794:	df000817 	ldw	fp,32(sp)
 4027798:	ddc00717 	ldw	r23,28(sp)
 402779c:	dd800617 	ldw	r22,24(sp)
 40277a0:	dd400517 	ldw	r21,20(sp)
 40277a4:	dd000417 	ldw	r20,16(sp)
 40277a8:	dcc00317 	ldw	r19,12(sp)
 40277ac:	dc800217 	ldw	r18,8(sp)
 40277b0:	dc400117 	ldw	r17,4(sp)
 40277b4:	dc000017 	ldw	r16,0(sp)
 40277b8:	dec00a04 	addi	sp,sp,40
 40277bc:	f800283a 	ret
 40277c0:	017fff04 	movi	r5,-4
 40277c4:	414a703a 	and	r5,r8,r5
 40277c8:	814d883a 	add	r6,r16,r5
 40277cc:	30c01f16 	blt	r6,r3,402784c <_realloc_r+0x22c>
 40277d0:	20800317 	ldw	r2,12(r4)
 40277d4:	20c00217 	ldw	r3,8(r4)
 40277d8:	a825883a 	mov	r18,r21
 40277dc:	3021883a 	mov	r16,r6
 40277e0:	18800315 	stw	r2,12(r3)
 40277e4:	10c00215 	stw	r3,8(r2)
 40277e8:	003fdb06 	br	4027758 <__flash_rwdata_start+0xffff1f08>
 40277ec:	00800304 	movi	r2,12
 40277f0:	a0800015 	stw	r2,0(r20)
 40277f4:	0005883a 	mov	r2,zero
 40277f8:	003fe506 	br	4027790 <__flash_rwdata_start+0xffff1f40>
 40277fc:	98c00117 	ldw	r3,4(r19)
 4027800:	9c4b883a 	add	r5,r19,r17
 4027804:	11000054 	ori	r4,r2,1
 4027808:	18c0004c 	andi	r3,r3,1
 402780c:	1c62b03a 	or	r17,r3,r17
 4027810:	9c400115 	stw	r17,4(r19)
 4027814:	29000115 	stw	r4,4(r5)
 4027818:	2885883a 	add	r2,r5,r2
 402781c:	10c00117 	ldw	r3,4(r2)
 4027820:	29400204 	addi	r5,r5,8
 4027824:	a009883a 	mov	r4,r20
 4027828:	18c00054 	ori	r3,r3,1
 402782c:	10c00115 	stw	r3,4(r2)
 4027830:	4024cb40 	call	4024cb4 <_free_r>
 4027834:	003fd306 	br	4027784 <__flash_rwdata_start+0xffff1f34>
 4027838:	017fff04 	movi	r5,-4
 402783c:	414a703a 	and	r5,r8,r5
 4027840:	89800404 	addi	r6,r17,16
 4027844:	8151883a 	add	r8,r16,r5
 4027848:	4180590e 	bge	r8,r6,40279b0 <_realloc_r+0x390>
 402784c:	1080004c 	andi	r2,r2,1
 4027850:	103f9e1e 	bne	r2,zero,40276cc <__flash_rwdata_start+0xffff1e7c>
 4027854:	adbffe17 	ldw	r22,-8(r21)
 4027858:	00bfff04 	movi	r2,-4
 402785c:	9dadc83a 	sub	r22,r19,r22
 4027860:	b1800117 	ldw	r6,4(r22)
 4027864:	3084703a 	and	r2,r6,r2
 4027868:	20002026 	beq	r4,zero,40278ec <_realloc_r+0x2cc>
 402786c:	80af883a 	add	r23,r16,r2
 4027870:	b96f883a 	add	r23,r23,r5
 4027874:	21c05f26 	beq	r4,r7,40279f4 <_realloc_r+0x3d4>
 4027878:	b8c01c16 	blt	r23,r3,40278ec <_realloc_r+0x2cc>
 402787c:	20800317 	ldw	r2,12(r4)
 4027880:	20c00217 	ldw	r3,8(r4)
 4027884:	81bfff04 	addi	r6,r16,-4
 4027888:	01000904 	movi	r4,36
 402788c:	18800315 	stw	r2,12(r3)
 4027890:	10c00215 	stw	r3,8(r2)
 4027894:	b0c00217 	ldw	r3,8(r22)
 4027898:	b0800317 	ldw	r2,12(r22)
 402789c:	b4800204 	addi	r18,r22,8
 40278a0:	18800315 	stw	r2,12(r3)
 40278a4:	10c00215 	stw	r3,8(r2)
 40278a8:	21801b36 	bltu	r4,r6,4027918 <_realloc_r+0x2f8>
 40278ac:	008004c4 	movi	r2,19
 40278b0:	1180352e 	bgeu	r2,r6,4027988 <_realloc_r+0x368>
 40278b4:	a8800017 	ldw	r2,0(r21)
 40278b8:	b0800215 	stw	r2,8(r22)
 40278bc:	a8800117 	ldw	r2,4(r21)
 40278c0:	b0800315 	stw	r2,12(r22)
 40278c4:	008006c4 	movi	r2,27
 40278c8:	11807f36 	bltu	r2,r6,4027ac8 <_realloc_r+0x4a8>
 40278cc:	b0800404 	addi	r2,r22,16
 40278d0:	ad400204 	addi	r21,r21,8
 40278d4:	00002d06 	br	402798c <_realloc_r+0x36c>
 40278d8:	adbffe17 	ldw	r22,-8(r21)
 40278dc:	00bfff04 	movi	r2,-4
 40278e0:	9dadc83a 	sub	r22,r19,r22
 40278e4:	b1000117 	ldw	r4,4(r22)
 40278e8:	2084703a 	and	r2,r4,r2
 40278ec:	b03f7726 	beq	r22,zero,40276cc <__flash_rwdata_start+0xffff1e7c>
 40278f0:	80af883a 	add	r23,r16,r2
 40278f4:	b8ff7516 	blt	r23,r3,40276cc <__flash_rwdata_start+0xffff1e7c>
 40278f8:	b0800317 	ldw	r2,12(r22)
 40278fc:	b0c00217 	ldw	r3,8(r22)
 4027900:	81bfff04 	addi	r6,r16,-4
 4027904:	01000904 	movi	r4,36
 4027908:	18800315 	stw	r2,12(r3)
 402790c:	10c00215 	stw	r3,8(r2)
 4027910:	b4800204 	addi	r18,r22,8
 4027914:	21bfe52e 	bgeu	r4,r6,40278ac <__flash_rwdata_start+0xffff205c>
 4027918:	a80b883a 	mov	r5,r21
 402791c:	9009883a 	mov	r4,r18
 4027920:	40262e40 	call	40262e4 <memmove>
 4027924:	b821883a 	mov	r16,r23
 4027928:	b027883a 	mov	r19,r22
 402792c:	003f8a06 	br	4027758 <__flash_rwdata_start+0xffff1f08>
 4027930:	300b883a 	mov	r5,r6
 4027934:	dfc00917 	ldw	ra,36(sp)
 4027938:	df000817 	ldw	fp,32(sp)
 402793c:	ddc00717 	ldw	r23,28(sp)
 4027940:	dd800617 	ldw	r22,24(sp)
 4027944:	dd400517 	ldw	r21,20(sp)
 4027948:	dd000417 	ldw	r20,16(sp)
 402794c:	dcc00317 	ldw	r19,12(sp)
 4027950:	dc800217 	ldw	r18,8(sp)
 4027954:	dc400117 	ldw	r17,4(sp)
 4027958:	dc000017 	ldw	r16,0(sp)
 402795c:	dec00a04 	addi	sp,sp,40
 4027960:	40258ac1 	jmpi	40258ac <_malloc_r>
 4027964:	a8c00017 	ldw	r3,0(r21)
 4027968:	90c00015 	stw	r3,0(r18)
 402796c:	a8c00117 	ldw	r3,4(r21)
 4027970:	90c00115 	stw	r3,4(r18)
 4027974:	00c006c4 	movi	r3,27
 4027978:	19804536 	bltu	r3,r6,4027a90 <_realloc_r+0x470>
 402797c:	90800204 	addi	r2,r18,8
 4027980:	a8c00204 	addi	r3,r21,8
 4027984:	003f6306 	br	4027714 <__flash_rwdata_start+0xffff1ec4>
 4027988:	9005883a 	mov	r2,r18
 402798c:	a8c00017 	ldw	r3,0(r21)
 4027990:	b821883a 	mov	r16,r23
 4027994:	b027883a 	mov	r19,r22
 4027998:	10c00015 	stw	r3,0(r2)
 402799c:	a8c00117 	ldw	r3,4(r21)
 40279a0:	10c00115 	stw	r3,4(r2)
 40279a4:	a8c00217 	ldw	r3,8(r21)
 40279a8:	10c00215 	stw	r3,8(r2)
 40279ac:	003f6a06 	br	4027758 <__flash_rwdata_start+0xffff1f08>
 40279b0:	9c67883a 	add	r19,r19,r17
 40279b4:	4445c83a 	sub	r2,r8,r17
 40279b8:	e4c00215 	stw	r19,8(fp)
 40279bc:	10800054 	ori	r2,r2,1
 40279c0:	98800115 	stw	r2,4(r19)
 40279c4:	a8bfff17 	ldw	r2,-4(r21)
 40279c8:	a009883a 	mov	r4,r20
 40279cc:	1080004c 	andi	r2,r2,1
 40279d0:	1462b03a 	or	r17,r2,r17
 40279d4:	ac7fff15 	stw	r17,-4(r21)
 40279d8:	402daa80 	call	402daa8 <__malloc_unlock>
 40279dc:	a805883a 	mov	r2,r21
 40279e0:	003f6b06 	br	4027790 <__flash_rwdata_start+0xffff1f40>
 40279e4:	a80b883a 	mov	r5,r21
 40279e8:	9009883a 	mov	r4,r18
 40279ec:	40262e40 	call	40262e4 <memmove>
 40279f0:	003f4e06 	br	402772c <__flash_rwdata_start+0xffff1edc>
 40279f4:	89000404 	addi	r4,r17,16
 40279f8:	b93fbc16 	blt	r23,r4,40278ec <__flash_rwdata_start+0xffff209c>
 40279fc:	b0800317 	ldw	r2,12(r22)
 4027a00:	b0c00217 	ldw	r3,8(r22)
 4027a04:	81bfff04 	addi	r6,r16,-4
 4027a08:	01000904 	movi	r4,36
 4027a0c:	18800315 	stw	r2,12(r3)
 4027a10:	10c00215 	stw	r3,8(r2)
 4027a14:	b4800204 	addi	r18,r22,8
 4027a18:	21804336 	bltu	r4,r6,4027b28 <_realloc_r+0x508>
 4027a1c:	008004c4 	movi	r2,19
 4027a20:	11803f2e 	bgeu	r2,r6,4027b20 <_realloc_r+0x500>
 4027a24:	a8800017 	ldw	r2,0(r21)
 4027a28:	b0800215 	stw	r2,8(r22)
 4027a2c:	a8800117 	ldw	r2,4(r21)
 4027a30:	b0800315 	stw	r2,12(r22)
 4027a34:	008006c4 	movi	r2,27
 4027a38:	11803f36 	bltu	r2,r6,4027b38 <_realloc_r+0x518>
 4027a3c:	b0800404 	addi	r2,r22,16
 4027a40:	ad400204 	addi	r21,r21,8
 4027a44:	a8c00017 	ldw	r3,0(r21)
 4027a48:	10c00015 	stw	r3,0(r2)
 4027a4c:	a8c00117 	ldw	r3,4(r21)
 4027a50:	10c00115 	stw	r3,4(r2)
 4027a54:	a8c00217 	ldw	r3,8(r21)
 4027a58:	10c00215 	stw	r3,8(r2)
 4027a5c:	b447883a 	add	r3,r22,r17
 4027a60:	bc45c83a 	sub	r2,r23,r17
 4027a64:	e0c00215 	stw	r3,8(fp)
 4027a68:	10800054 	ori	r2,r2,1
 4027a6c:	18800115 	stw	r2,4(r3)
 4027a70:	b0800117 	ldw	r2,4(r22)
 4027a74:	a009883a 	mov	r4,r20
 4027a78:	1080004c 	andi	r2,r2,1
 4027a7c:	1462b03a 	or	r17,r2,r17
 4027a80:	b4400115 	stw	r17,4(r22)
 4027a84:	402daa80 	call	402daa8 <__malloc_unlock>
 4027a88:	9005883a 	mov	r2,r18
 4027a8c:	003f4006 	br	4027790 <__flash_rwdata_start+0xffff1f40>
 4027a90:	a8c00217 	ldw	r3,8(r21)
 4027a94:	90c00215 	stw	r3,8(r18)
 4027a98:	a8c00317 	ldw	r3,12(r21)
 4027a9c:	90c00315 	stw	r3,12(r18)
 4027aa0:	30801126 	beq	r6,r2,4027ae8 <_realloc_r+0x4c8>
 4027aa4:	90800404 	addi	r2,r18,16
 4027aa8:	a8c00404 	addi	r3,r21,16
 4027aac:	003f1906 	br	4027714 <__flash_rwdata_start+0xffff1ec4>
 4027ab0:	90ffff17 	ldw	r3,-4(r18)
 4027ab4:	00bfff04 	movi	r2,-4
 4027ab8:	a825883a 	mov	r18,r21
 4027abc:	1884703a 	and	r2,r3,r2
 4027ac0:	80a1883a 	add	r16,r16,r2
 4027ac4:	003f2406 	br	4027758 <__flash_rwdata_start+0xffff1f08>
 4027ac8:	a8800217 	ldw	r2,8(r21)
 4027acc:	b0800415 	stw	r2,16(r22)
 4027ad0:	a8800317 	ldw	r2,12(r21)
 4027ad4:	b0800515 	stw	r2,20(r22)
 4027ad8:	31000a26 	beq	r6,r4,4027b04 <_realloc_r+0x4e4>
 4027adc:	b0800604 	addi	r2,r22,24
 4027ae0:	ad400404 	addi	r21,r21,16
 4027ae4:	003fa906 	br	402798c <__flash_rwdata_start+0xffff213c>
 4027ae8:	a9000417 	ldw	r4,16(r21)
 4027aec:	90800604 	addi	r2,r18,24
 4027af0:	a8c00604 	addi	r3,r21,24
 4027af4:	91000415 	stw	r4,16(r18)
 4027af8:	a9000517 	ldw	r4,20(r21)
 4027afc:	91000515 	stw	r4,20(r18)
 4027b00:	003f0406 	br	4027714 <__flash_rwdata_start+0xffff1ec4>
 4027b04:	a8c00417 	ldw	r3,16(r21)
 4027b08:	ad400604 	addi	r21,r21,24
 4027b0c:	b0800804 	addi	r2,r22,32
 4027b10:	b0c00615 	stw	r3,24(r22)
 4027b14:	a8ffff17 	ldw	r3,-4(r21)
 4027b18:	b0c00715 	stw	r3,28(r22)
 4027b1c:	003f9b06 	br	402798c <__flash_rwdata_start+0xffff213c>
 4027b20:	9005883a 	mov	r2,r18
 4027b24:	003fc706 	br	4027a44 <__flash_rwdata_start+0xffff21f4>
 4027b28:	a80b883a 	mov	r5,r21
 4027b2c:	9009883a 	mov	r4,r18
 4027b30:	40262e40 	call	40262e4 <memmove>
 4027b34:	003fc906 	br	4027a5c <__flash_rwdata_start+0xffff220c>
 4027b38:	a8800217 	ldw	r2,8(r21)
 4027b3c:	b0800415 	stw	r2,16(r22)
 4027b40:	a8800317 	ldw	r2,12(r21)
 4027b44:	b0800515 	stw	r2,20(r22)
 4027b48:	31000726 	beq	r6,r4,4027b68 <_realloc_r+0x548>
 4027b4c:	b0800604 	addi	r2,r22,24
 4027b50:	ad400404 	addi	r21,r21,16
 4027b54:	003fbb06 	br	4027a44 <__flash_rwdata_start+0xffff21f4>
 4027b58:	a009883a 	mov	r4,r20
 4027b5c:	402daa80 	call	402daa8 <__malloc_unlock>
 4027b60:	0005883a 	mov	r2,zero
 4027b64:	003f0a06 	br	4027790 <__flash_rwdata_start+0xffff1f40>
 4027b68:	a8c00417 	ldw	r3,16(r21)
 4027b6c:	ad400604 	addi	r21,r21,24
 4027b70:	b0800804 	addi	r2,r22,32
 4027b74:	b0c00615 	stw	r3,24(r22)
 4027b78:	a8ffff17 	ldw	r3,-4(r21)
 4027b7c:	b0c00715 	stw	r3,28(r22)
 4027b80:	003fb006 	br	4027a44 <__flash_rwdata_start+0xffff21f4>

04027b84 <__fpclassifyd>:
 4027b84:	00a00034 	movhi	r2,32768
 4027b88:	10bfffc4 	addi	r2,r2,-1
 4027b8c:	2884703a 	and	r2,r5,r2
 4027b90:	10000726 	beq	r2,zero,4027bb0 <__fpclassifyd+0x2c>
 4027b94:	00fffc34 	movhi	r3,65520
 4027b98:	019ff834 	movhi	r6,32736
 4027b9c:	28c7883a 	add	r3,r5,r3
 4027ba0:	31bfffc4 	addi	r6,r6,-1
 4027ba4:	30c00536 	bltu	r6,r3,4027bbc <__fpclassifyd+0x38>
 4027ba8:	00800104 	movi	r2,4
 4027bac:	f800283a 	ret
 4027bb0:	2000021e 	bne	r4,zero,4027bbc <__fpclassifyd+0x38>
 4027bb4:	00800084 	movi	r2,2
 4027bb8:	f800283a 	ret
 4027bbc:	00dffc34 	movhi	r3,32752
 4027bc0:	019ff834 	movhi	r6,32736
 4027bc4:	28cb883a 	add	r5,r5,r3
 4027bc8:	31bfffc4 	addi	r6,r6,-1
 4027bcc:	317ff62e 	bgeu	r6,r5,4027ba8 <__flash_rwdata_start+0xffff2358>
 4027bd0:	01400434 	movhi	r5,16
 4027bd4:	297fffc4 	addi	r5,r5,-1
 4027bd8:	28800236 	bltu	r5,r2,4027be4 <__fpclassifyd+0x60>
 4027bdc:	008000c4 	movi	r2,3
 4027be0:	f800283a 	ret
 4027be4:	10c00226 	beq	r2,r3,4027bf0 <__fpclassifyd+0x6c>
 4027be8:	0005883a 	mov	r2,zero
 4027bec:	f800283a 	ret
 4027bf0:	2005003a 	cmpeq	r2,r4,zero
 4027bf4:	f800283a 	ret

04027bf8 <_sbrk_r>:
 4027bf8:	defffd04 	addi	sp,sp,-12
 4027bfc:	dc000015 	stw	r16,0(sp)
 4027c00:	04000034 	movhi	r16,0
 4027c04:	dc400115 	stw	r17,4(sp)
 4027c08:	84083604 	addi	r16,r16,8408
 4027c0c:	2023883a 	mov	r17,r4
 4027c10:	2809883a 	mov	r4,r5
 4027c14:	dfc00215 	stw	ra,8(sp)
 4027c18:	80000015 	stw	zero,0(r16)
 4027c1c:	402dc900 	call	402dc90 <sbrk>
 4027c20:	00ffffc4 	movi	r3,-1
 4027c24:	10c00526 	beq	r2,r3,4027c3c <_sbrk_r+0x44>
 4027c28:	dfc00217 	ldw	ra,8(sp)
 4027c2c:	dc400117 	ldw	r17,4(sp)
 4027c30:	dc000017 	ldw	r16,0(sp)
 4027c34:	dec00304 	addi	sp,sp,12
 4027c38:	f800283a 	ret
 4027c3c:	80c00017 	ldw	r3,0(r16)
 4027c40:	183ff926 	beq	r3,zero,4027c28 <__flash_rwdata_start+0xffff23d8>
 4027c44:	88c00015 	stw	r3,0(r17)
 4027c48:	003ff706 	br	4027c28 <__flash_rwdata_start+0xffff23d8>

04027c4c <__sread>:
 4027c4c:	defffe04 	addi	sp,sp,-8
 4027c50:	dc000015 	stw	r16,0(sp)
 4027c54:	2821883a 	mov	r16,r5
 4027c58:	2940038f 	ldh	r5,14(r5)
 4027c5c:	dfc00115 	stw	ra,4(sp)
 4027c60:	4029b080 	call	4029b08 <_read_r>
 4027c64:	10000716 	blt	r2,zero,4027c84 <__sread+0x38>
 4027c68:	80c01417 	ldw	r3,80(r16)
 4027c6c:	1887883a 	add	r3,r3,r2
 4027c70:	80c01415 	stw	r3,80(r16)
 4027c74:	dfc00117 	ldw	ra,4(sp)
 4027c78:	dc000017 	ldw	r16,0(sp)
 4027c7c:	dec00204 	addi	sp,sp,8
 4027c80:	f800283a 	ret
 4027c84:	80c0030b 	ldhu	r3,12(r16)
 4027c88:	18fbffcc 	andi	r3,r3,61439
 4027c8c:	80c0030d 	sth	r3,12(r16)
 4027c90:	dfc00117 	ldw	ra,4(sp)
 4027c94:	dc000017 	ldw	r16,0(sp)
 4027c98:	dec00204 	addi	sp,sp,8
 4027c9c:	f800283a 	ret

04027ca0 <__seofread>:
 4027ca0:	0005883a 	mov	r2,zero
 4027ca4:	f800283a 	ret

04027ca8 <__swrite>:
 4027ca8:	2880030b 	ldhu	r2,12(r5)
 4027cac:	defffb04 	addi	sp,sp,-20
 4027cb0:	dcc00315 	stw	r19,12(sp)
 4027cb4:	dc800215 	stw	r18,8(sp)
 4027cb8:	dc400115 	stw	r17,4(sp)
 4027cbc:	dc000015 	stw	r16,0(sp)
 4027cc0:	dfc00415 	stw	ra,16(sp)
 4027cc4:	10c0400c 	andi	r3,r2,256
 4027cc8:	2821883a 	mov	r16,r5
 4027ccc:	2023883a 	mov	r17,r4
 4027cd0:	3025883a 	mov	r18,r6
 4027cd4:	3827883a 	mov	r19,r7
 4027cd8:	18000526 	beq	r3,zero,4027cf0 <__swrite+0x48>
 4027cdc:	2940038f 	ldh	r5,14(r5)
 4027ce0:	01c00084 	movi	r7,2
 4027ce4:	000d883a 	mov	r6,zero
 4027ce8:	4029aa80 	call	4029aa8 <_lseek_r>
 4027cec:	8080030b 	ldhu	r2,12(r16)
 4027cf0:	8140038f 	ldh	r5,14(r16)
 4027cf4:	10bbffcc 	andi	r2,r2,61439
 4027cf8:	980f883a 	mov	r7,r19
 4027cfc:	900d883a 	mov	r6,r18
 4027d00:	8809883a 	mov	r4,r17
 4027d04:	8080030d 	sth	r2,12(r16)
 4027d08:	dfc00417 	ldw	ra,16(sp)
 4027d0c:	dcc00317 	ldw	r19,12(sp)
 4027d10:	dc800217 	ldw	r18,8(sp)
 4027d14:	dc400117 	ldw	r17,4(sp)
 4027d18:	dc000017 	ldw	r16,0(sp)
 4027d1c:	dec00504 	addi	sp,sp,20
 4027d20:	402955c1 	jmpi	402955c <_write_r>

04027d24 <__sseek>:
 4027d24:	defffe04 	addi	sp,sp,-8
 4027d28:	dc000015 	stw	r16,0(sp)
 4027d2c:	2821883a 	mov	r16,r5
 4027d30:	2940038f 	ldh	r5,14(r5)
 4027d34:	dfc00115 	stw	ra,4(sp)
 4027d38:	4029aa80 	call	4029aa8 <_lseek_r>
 4027d3c:	00ffffc4 	movi	r3,-1
 4027d40:	10c00826 	beq	r2,r3,4027d64 <__sseek+0x40>
 4027d44:	80c0030b 	ldhu	r3,12(r16)
 4027d48:	80801415 	stw	r2,80(r16)
 4027d4c:	18c40014 	ori	r3,r3,4096
 4027d50:	80c0030d 	sth	r3,12(r16)
 4027d54:	dfc00117 	ldw	ra,4(sp)
 4027d58:	dc000017 	ldw	r16,0(sp)
 4027d5c:	dec00204 	addi	sp,sp,8
 4027d60:	f800283a 	ret
 4027d64:	80c0030b 	ldhu	r3,12(r16)
 4027d68:	18fbffcc 	andi	r3,r3,61439
 4027d6c:	80c0030d 	sth	r3,12(r16)
 4027d70:	dfc00117 	ldw	ra,4(sp)
 4027d74:	dc000017 	ldw	r16,0(sp)
 4027d78:	dec00204 	addi	sp,sp,8
 4027d7c:	f800283a 	ret

04027d80 <__sclose>:
 4027d80:	2940038f 	ldh	r5,14(r5)
 4027d84:	40295bc1 	jmpi	40295bc <_close_r>

04027d88 <strcmp>:
 4027d88:	2144b03a 	or	r2,r4,r5
 4027d8c:	108000cc 	andi	r2,r2,3
 4027d90:	1000171e 	bne	r2,zero,4027df0 <strcmp+0x68>
 4027d94:	20800017 	ldw	r2,0(r4)
 4027d98:	28c00017 	ldw	r3,0(r5)
 4027d9c:	10c0141e 	bne	r2,r3,4027df0 <strcmp+0x68>
 4027da0:	027fbff4 	movhi	r9,65279
 4027da4:	4a7fbfc4 	addi	r9,r9,-257
 4027da8:	0086303a 	nor	r3,zero,r2
 4027dac:	02202074 	movhi	r8,32897
 4027db0:	1245883a 	add	r2,r2,r9
 4027db4:	42202004 	addi	r8,r8,-32640
 4027db8:	10c4703a 	and	r2,r2,r3
 4027dbc:	1204703a 	and	r2,r2,r8
 4027dc0:	10000226 	beq	r2,zero,4027dcc <strcmp+0x44>
 4027dc4:	00002306 	br	4027e54 <strcmp+0xcc>
 4027dc8:	1000221e 	bne	r2,zero,4027e54 <strcmp+0xcc>
 4027dcc:	21000104 	addi	r4,r4,4
 4027dd0:	20c00017 	ldw	r3,0(r4)
 4027dd4:	29400104 	addi	r5,r5,4
 4027dd8:	29800017 	ldw	r6,0(r5)
 4027ddc:	1a4f883a 	add	r7,r3,r9
 4027de0:	00c4303a 	nor	r2,zero,r3
 4027de4:	3884703a 	and	r2,r7,r2
 4027de8:	1204703a 	and	r2,r2,r8
 4027dec:	19bff626 	beq	r3,r6,4027dc8 <__flash_rwdata_start+0xffff2578>
 4027df0:	20800003 	ldbu	r2,0(r4)
 4027df4:	10c03fcc 	andi	r3,r2,255
 4027df8:	18c0201c 	xori	r3,r3,128
 4027dfc:	18ffe004 	addi	r3,r3,-128
 4027e00:	18000c26 	beq	r3,zero,4027e34 <strcmp+0xac>
 4027e04:	29800007 	ldb	r6,0(r5)
 4027e08:	19800326 	beq	r3,r6,4027e18 <strcmp+0x90>
 4027e0c:	00001306 	br	4027e5c <strcmp+0xd4>
 4027e10:	29800007 	ldb	r6,0(r5)
 4027e14:	11800b1e 	bne	r2,r6,4027e44 <strcmp+0xbc>
 4027e18:	21000044 	addi	r4,r4,1
 4027e1c:	20c00003 	ldbu	r3,0(r4)
 4027e20:	29400044 	addi	r5,r5,1
 4027e24:	18803fcc 	andi	r2,r3,255
 4027e28:	1080201c 	xori	r2,r2,128
 4027e2c:	10bfe004 	addi	r2,r2,-128
 4027e30:	103ff71e 	bne	r2,zero,4027e10 <__flash_rwdata_start+0xffff25c0>
 4027e34:	0007883a 	mov	r3,zero
 4027e38:	28800003 	ldbu	r2,0(r5)
 4027e3c:	1885c83a 	sub	r2,r3,r2
 4027e40:	f800283a 	ret
 4027e44:	28800003 	ldbu	r2,0(r5)
 4027e48:	18c03fcc 	andi	r3,r3,255
 4027e4c:	1885c83a 	sub	r2,r3,r2
 4027e50:	f800283a 	ret
 4027e54:	0005883a 	mov	r2,zero
 4027e58:	f800283a 	ret
 4027e5c:	10c03fcc 	andi	r3,r2,255
 4027e60:	003ff506 	br	4027e38 <__flash_rwdata_start+0xffff25e8>

04027e64 <__sprint_r.part.0>:
 4027e64:	28801917 	ldw	r2,100(r5)
 4027e68:	defff604 	addi	sp,sp,-40
 4027e6c:	dd400515 	stw	r21,20(sp)
 4027e70:	dfc00915 	stw	ra,36(sp)
 4027e74:	df000815 	stw	fp,32(sp)
 4027e78:	ddc00715 	stw	r23,28(sp)
 4027e7c:	dd800615 	stw	r22,24(sp)
 4027e80:	dd000415 	stw	r20,16(sp)
 4027e84:	dcc00315 	stw	r19,12(sp)
 4027e88:	dc800215 	stw	r18,8(sp)
 4027e8c:	dc400115 	stw	r17,4(sp)
 4027e90:	dc000015 	stw	r16,0(sp)
 4027e94:	1088000c 	andi	r2,r2,8192
 4027e98:	302b883a 	mov	r21,r6
 4027e9c:	10002e26 	beq	r2,zero,4027f58 <__sprint_r.part.0+0xf4>
 4027ea0:	30800217 	ldw	r2,8(r6)
 4027ea4:	35800017 	ldw	r22,0(r6)
 4027ea8:	10002926 	beq	r2,zero,4027f50 <__sprint_r.part.0+0xec>
 4027eac:	2827883a 	mov	r19,r5
 4027eb0:	2029883a 	mov	r20,r4
 4027eb4:	b5c00104 	addi	r23,r22,4
 4027eb8:	04bfffc4 	movi	r18,-1
 4027ebc:	bc400017 	ldw	r17,0(r23)
 4027ec0:	b4000017 	ldw	r16,0(r22)
 4027ec4:	0039883a 	mov	fp,zero
 4027ec8:	8822d0ba 	srli	r17,r17,2
 4027ecc:	8800031e 	bne	r17,zero,4027edc <__sprint_r.part.0+0x78>
 4027ed0:	00001806 	br	4027f34 <__sprint_r.part.0+0xd0>
 4027ed4:	84000104 	addi	r16,r16,4
 4027ed8:	8f001526 	beq	r17,fp,4027f30 <__sprint_r.part.0+0xcc>
 4027edc:	81400017 	ldw	r5,0(r16)
 4027ee0:	980d883a 	mov	r6,r19
 4027ee4:	a009883a 	mov	r4,r20
 4027ee8:	40299540 	call	4029954 <_fputwc_r>
 4027eec:	e7000044 	addi	fp,fp,1
 4027ef0:	14bff81e 	bne	r2,r18,4027ed4 <__flash_rwdata_start+0xffff2684>
 4027ef4:	9005883a 	mov	r2,r18
 4027ef8:	a8000215 	stw	zero,8(r21)
 4027efc:	a8000115 	stw	zero,4(r21)
 4027f00:	dfc00917 	ldw	ra,36(sp)
 4027f04:	df000817 	ldw	fp,32(sp)
 4027f08:	ddc00717 	ldw	r23,28(sp)
 4027f0c:	dd800617 	ldw	r22,24(sp)
 4027f10:	dd400517 	ldw	r21,20(sp)
 4027f14:	dd000417 	ldw	r20,16(sp)
 4027f18:	dcc00317 	ldw	r19,12(sp)
 4027f1c:	dc800217 	ldw	r18,8(sp)
 4027f20:	dc400117 	ldw	r17,4(sp)
 4027f24:	dc000017 	ldw	r16,0(sp)
 4027f28:	dec00a04 	addi	sp,sp,40
 4027f2c:	f800283a 	ret
 4027f30:	a8800217 	ldw	r2,8(r21)
 4027f34:	8c63883a 	add	r17,r17,r17
 4027f38:	8c63883a 	add	r17,r17,r17
 4027f3c:	1445c83a 	sub	r2,r2,r17
 4027f40:	a8800215 	stw	r2,8(r21)
 4027f44:	b5800204 	addi	r22,r22,8
 4027f48:	bdc00204 	addi	r23,r23,8
 4027f4c:	103fdb1e 	bne	r2,zero,4027ebc <__flash_rwdata_start+0xffff266c>
 4027f50:	0005883a 	mov	r2,zero
 4027f54:	003fe806 	br	4027ef8 <__flash_rwdata_start+0xffff26a8>
 4027f58:	4024fc40 	call	4024fc4 <__sfvwrite_r>
 4027f5c:	003fe606 	br	4027ef8 <__flash_rwdata_start+0xffff26a8>

04027f60 <__sprint_r>:
 4027f60:	30c00217 	ldw	r3,8(r6)
 4027f64:	18000126 	beq	r3,zero,4027f6c <__sprint_r+0xc>
 4027f68:	4027e641 	jmpi	4027e64 <__sprint_r.part.0>
 4027f6c:	30000115 	stw	zero,4(r6)
 4027f70:	0005883a 	mov	r2,zero
 4027f74:	f800283a 	ret

04027f78 <___vfiprintf_internal_r>:
 4027f78:	deffca04 	addi	sp,sp,-216
 4027f7c:	dd403115 	stw	r21,196(sp)
 4027f80:	dfc03515 	stw	ra,212(sp)
 4027f84:	df003415 	stw	fp,208(sp)
 4027f88:	ddc03315 	stw	r23,204(sp)
 4027f8c:	dd803215 	stw	r22,200(sp)
 4027f90:	dd003015 	stw	r20,192(sp)
 4027f94:	dcc02f15 	stw	r19,188(sp)
 4027f98:	dc802e15 	stw	r18,184(sp)
 4027f9c:	dc402d15 	stw	r17,180(sp)
 4027fa0:	dc002c15 	stw	r16,176(sp)
 4027fa4:	d9002115 	stw	r4,132(sp)
 4027fa8:	d9402015 	stw	r5,128(sp)
 4027fac:	d9c02215 	stw	r7,136(sp)
 4027fb0:	302b883a 	mov	r21,r6
 4027fb4:	20000226 	beq	r4,zero,4027fc0 <___vfiprintf_internal_r+0x48>
 4027fb8:	20800e17 	ldw	r2,56(r4)
 4027fbc:	1000cf26 	beq	r2,zero,40282fc <___vfiprintf_internal_r+0x384>
 4027fc0:	d8c02017 	ldw	r3,128(sp)
 4027fc4:	1880030b 	ldhu	r2,12(r3)
 4027fc8:	10c8000c 	andi	r3,r2,8192
 4027fcc:	1800071e 	bne	r3,zero,4027fec <___vfiprintf_internal_r+0x74>
 4027fd0:	d9402017 	ldw	r5,128(sp)
 4027fd4:	00f7ffc4 	movi	r3,-8193
 4027fd8:	10880014 	ori	r2,r2,8192
 4027fdc:	29001917 	ldw	r4,100(r5)
 4027fe0:	2880030d 	sth	r2,12(r5)
 4027fe4:	20c6703a 	and	r3,r4,r3
 4027fe8:	28c01915 	stw	r3,100(r5)
 4027fec:	10c0020c 	andi	r3,r2,8
 4027ff0:	1800a526 	beq	r3,zero,4028288 <___vfiprintf_internal_r+0x310>
 4027ff4:	d9002017 	ldw	r4,128(sp)
 4027ff8:	20c00417 	ldw	r3,16(r4)
 4027ffc:	1800a226 	beq	r3,zero,4028288 <___vfiprintf_internal_r+0x310>
 4028000:	1080068c 	andi	r2,r2,26
 4028004:	00c00284 	movi	r3,10
 4028008:	10c0a826 	beq	r2,r3,40282ac <___vfiprintf_internal_r+0x334>
 402800c:	d9001a04 	addi	r4,sp,104
 4028010:	d94019c4 	addi	r5,sp,103
 4028014:	04800034 	movhi	r18,0
 4028018:	2145c83a 	sub	r2,r4,r5
 402801c:	9480e804 	addi	r18,r18,928
 4028020:	d9001e15 	stw	r4,120(sp)
 4028024:	d9401f15 	stw	r5,124(sp)
 4028028:	dec01a15 	stw	sp,104(sp)
 402802c:	d8001c15 	stw	zero,112(sp)
 4028030:	d8001b15 	stw	zero,108(sp)
 4028034:	d811883a 	mov	r8,sp
 4028038:	d8002615 	stw	zero,152(sp)
 402803c:	d8002415 	stw	zero,144(sp)
 4028040:	d8802815 	stw	r2,160(sp)
 4028044:	a82d883a 	mov	r22,r21
 4028048:	b0800007 	ldb	r2,0(r22)
 402804c:	10040d26 	beq	r2,zero,4029084 <___vfiprintf_internal_r+0x110c>
 4028050:	00c00944 	movi	r3,37
 4028054:	b029883a 	mov	r20,r22
 4028058:	10c0021e 	bne	r2,r3,4028064 <___vfiprintf_internal_r+0xec>
 402805c:	00001606 	br	40280b8 <___vfiprintf_internal_r+0x140>
 4028060:	10c00326 	beq	r2,r3,4028070 <___vfiprintf_internal_r+0xf8>
 4028064:	a5000044 	addi	r20,r20,1
 4028068:	a0800007 	ldb	r2,0(r20)
 402806c:	103ffc1e 	bne	r2,zero,4028060 <__flash_rwdata_start+0xffff2810>
 4028070:	a5a1c83a 	sub	r16,r20,r22
 4028074:	80001026 	beq	r16,zero,40280b8 <___vfiprintf_internal_r+0x140>
 4028078:	d8c01c17 	ldw	r3,112(sp)
 402807c:	d8801b17 	ldw	r2,108(sp)
 4028080:	45800015 	stw	r22,0(r8)
 4028084:	80c7883a 	add	r3,r16,r3
 4028088:	10800044 	addi	r2,r2,1
 402808c:	44000115 	stw	r16,4(r8)
 4028090:	d8c01c15 	stw	r3,112(sp)
 4028094:	d8801b15 	stw	r2,108(sp)
 4028098:	010001c4 	movi	r4,7
 402809c:	2080750e 	bge	r4,r2,4028274 <___vfiprintf_internal_r+0x2fc>
 40280a0:	1803951e 	bne	r3,zero,4028ef8 <___vfiprintf_internal_r+0xf80>
 40280a4:	d8c02417 	ldw	r3,144(sp)
 40280a8:	d8001b15 	stw	zero,108(sp)
 40280ac:	d811883a 	mov	r8,sp
 40280b0:	1c07883a 	add	r3,r3,r16
 40280b4:	d8c02415 	stw	r3,144(sp)
 40280b8:	a0800007 	ldb	r2,0(r20)
 40280bc:	1002e026 	beq	r2,zero,4028c40 <___vfiprintf_internal_r+0xcc8>
 40280c0:	a5800044 	addi	r22,r20,1
 40280c4:	a0c00047 	ldb	r3,1(r20)
 40280c8:	d8001d85 	stb	zero,118(sp)
 40280cc:	0027883a 	mov	r19,zero
 40280d0:	d8002305 	stb	zero,140(sp)
 40280d4:	043fffc4 	movi	r16,-1
 40280d8:	d8002515 	stw	zero,148(sp)
 40280dc:	0023883a 	mov	r17,zero
 40280e0:	05001604 	movi	r20,88
 40280e4:	05400244 	movi	r21,9
 40280e8:	402f883a 	mov	r23,r8
 40280ec:	b5800044 	addi	r22,r22,1
 40280f0:	18bff804 	addi	r2,r3,-32
 40280f4:	a0827736 	bltu	r20,r2,4028ad4 <___vfiprintf_internal_r+0xb5c>
 40280f8:	100490ba 	slli	r2,r2,2
 40280fc:	010100f4 	movhi	r4,1027
 4028100:	21204404 	addi	r4,r4,-32496
 4028104:	1105883a 	add	r2,r2,r4
 4028108:	10800017 	ldw	r2,0(r2)
 402810c:	1000683a 	jmp	r2
 4028110:	040287d4 	movui	r16,2591
 4028114:	04028ad4 	movui	r16,2603
 4028118:	04028ad4 	movui	r16,2603
 402811c:	040287f0 	cmpltui	r16,zero,2591
 4028120:	04028ad4 	movui	r16,2603
 4028124:	04028ad4 	movui	r16,2603
 4028128:	04028ad4 	movui	r16,2603
 402812c:	04028ad4 	movui	r16,2603
 4028130:	04028ad4 	movui	r16,2603
 4028134:	04028ad4 	movui	r16,2603
 4028138:	040289f8 	rdprs	r16,zero,2599
 402813c:	04028a1c 	xori	r16,zero,2600
 4028140:	04028ad4 	movui	r16,2603
 4028144:	04028314 	movui	r16,2572
 4028148:	04028a30 	cmpltui	r16,zero,2600
 402814c:	04028ad4 	movui	r16,2603
 4028150:	040287fc 	xorhi	r16,zero,2591
 4028154:	04028808 	cmpgei	r16,zero,2592
 4028158:	04028808 	cmpgei	r16,zero,2592
 402815c:	04028808 	cmpgei	r16,zero,2592
 4028160:	04028808 	cmpgei	r16,zero,2592
 4028164:	04028808 	cmpgei	r16,zero,2592
 4028168:	04028808 	cmpgei	r16,zero,2592
 402816c:	04028808 	cmpgei	r16,zero,2592
 4028170:	04028808 	cmpgei	r16,zero,2592
 4028174:	04028808 	cmpgei	r16,zero,2592
 4028178:	04028ad4 	movui	r16,2603
 402817c:	04028ad4 	movui	r16,2603
 4028180:	04028ad4 	movui	r16,2603
 4028184:	04028ad4 	movui	r16,2603
 4028188:	04028ad4 	movui	r16,2603
 402818c:	04028ad4 	movui	r16,2603
 4028190:	04028ad4 	movui	r16,2603
 4028194:	04028ad4 	movui	r16,2603
 4028198:	04028ad4 	movui	r16,2603
 402819c:	04028ad4 	movui	r16,2603
 40281a0:	04028848 	cmpgei	r16,zero,2593
 40281a4:	04028ad4 	movui	r16,2603
 40281a8:	04028ad4 	movui	r16,2603
 40281ac:	04028ad4 	movui	r16,2603
 40281b0:	04028ad4 	movui	r16,2603
 40281b4:	04028ad4 	movui	r16,2603
 40281b8:	04028ad4 	movui	r16,2603
 40281bc:	04028ad4 	movui	r16,2603
 40281c0:	04028ad4 	movui	r16,2603
 40281c4:	04028ad4 	movui	r16,2603
 40281c8:	04028ad4 	movui	r16,2603
 40281cc:	04028884 	movi	r16,2594
 40281d0:	04028ad4 	movui	r16,2603
 40281d4:	04028ad4 	movui	r16,2603
 40281d8:	04028ad4 	movui	r16,2603
 40281dc:	04028ad4 	movui	r16,2603
 40281e0:	04028ad4 	movui	r16,2603
 40281e4:	040288e0 	cmpeqi	r16,zero,2595
 40281e8:	04028ad4 	movui	r16,2603
 40281ec:	04028ad4 	movui	r16,2603
 40281f0:	04028954 	movui	r16,2597
 40281f4:	04028ad4 	movui	r16,2603
 40281f8:	04028ad4 	movui	r16,2603
 40281fc:	04028ad4 	movui	r16,2603
 4028200:	04028ad4 	movui	r16,2603
 4028204:	04028ad4 	movui	r16,2603
 4028208:	04028ad4 	movui	r16,2603
 402820c:	04028ad4 	movui	r16,2603
 4028210:	04028ad4 	movui	r16,2603
 4028214:	04028ad4 	movui	r16,2603
 4028218:	04028ad4 	movui	r16,2603
 402821c:	040286fc 	xorhi	r16,zero,2587
 4028220:	0402872c 	andhi	r16,zero,2588
 4028224:	04028ad4 	movui	r16,2603
 4028228:	04028ad4 	movui	r16,2603
 402822c:	04028ad4 	movui	r16,2603
 4028230:	04028a7c 	xorhi	r16,zero,2601
 4028234:	0402872c 	andhi	r16,zero,2588
 4028238:	04028ad4 	movui	r16,2603
 402823c:	04028ad4 	movui	r16,2603
 4028240:	040285d4 	movui	r16,2583
 4028244:	04028ad4 	movui	r16,2603
 4028248:	040285e8 	cmpgeui	r16,zero,2583
 402824c:	04028620 	cmpeqi	r16,zero,2584
 4028250:	04028320 	cmpeqi	r16,zero,2572
 4028254:	040285c8 	cmpgei	r16,zero,2583
 4028258:	04028ad4 	movui	r16,2603
 402825c:	04028994 	movui	r16,2598
 4028260:	04028ad4 	movui	r16,2603
 4028264:	040289e0 	cmpeqi	r16,zero,2599
 4028268:	04028ad4 	movui	r16,2603
 402826c:	04028ad4 	movui	r16,2603
 4028270:	040286a4 	muli	r16,zero,2586
 4028274:	42000204 	addi	r8,r8,8
 4028278:	d8c02417 	ldw	r3,144(sp)
 402827c:	1c07883a 	add	r3,r3,r16
 4028280:	d8c02415 	stw	r3,144(sp)
 4028284:	003f8c06 	br	40280b8 <__flash_rwdata_start+0xffff2868>
 4028288:	d9402017 	ldw	r5,128(sp)
 402828c:	d9002117 	ldw	r4,132(sp)
 4028290:	4022b340 	call	4022b34 <__swsetup_r>
 4028294:	1003c11e 	bne	r2,zero,402919c <___vfiprintf_internal_r+0x1224>
 4028298:	d9402017 	ldw	r5,128(sp)
 402829c:	00c00284 	movi	r3,10
 40282a0:	2880030b 	ldhu	r2,12(r5)
 40282a4:	1080068c 	andi	r2,r2,26
 40282a8:	10ff581e 	bne	r2,r3,402800c <__flash_rwdata_start+0xffff27bc>
 40282ac:	d8c02017 	ldw	r3,128(sp)
 40282b0:	1880038f 	ldh	r2,14(r3)
 40282b4:	103f5516 	blt	r2,zero,402800c <__flash_rwdata_start+0xffff27bc>
 40282b8:	d9c02217 	ldw	r7,136(sp)
 40282bc:	d9002117 	ldw	r4,132(sp)
 40282c0:	a80d883a 	mov	r6,r21
 40282c4:	180b883a 	mov	r5,r3
 40282c8:	40294a00 	call	40294a0 <__sbprintf>
 40282cc:	dfc03517 	ldw	ra,212(sp)
 40282d0:	df003417 	ldw	fp,208(sp)
 40282d4:	ddc03317 	ldw	r23,204(sp)
 40282d8:	dd803217 	ldw	r22,200(sp)
 40282dc:	dd403117 	ldw	r21,196(sp)
 40282e0:	dd003017 	ldw	r20,192(sp)
 40282e4:	dcc02f17 	ldw	r19,188(sp)
 40282e8:	dc802e17 	ldw	r18,184(sp)
 40282ec:	dc402d17 	ldw	r17,180(sp)
 40282f0:	dc002c17 	ldw	r16,176(sp)
 40282f4:	dec03604 	addi	sp,sp,216
 40282f8:	f800283a 	ret
 40282fc:	4024b400 	call	4024b40 <__sinit>
 4028300:	003f2f06 	br	4027fc0 <__flash_rwdata_start+0xffff2770>
 4028304:	d8c02517 	ldw	r3,148(sp)
 4028308:	d8802215 	stw	r2,136(sp)
 402830c:	00c7c83a 	sub	r3,zero,r3
 4028310:	d8c02515 	stw	r3,148(sp)
 4028314:	8c400114 	ori	r17,r17,4
 4028318:	b0c00007 	ldb	r3,0(r22)
 402831c:	003f7306 	br	40280ec <__flash_rwdata_start+0xffff289c>
 4028320:	00800c04 	movi	r2,48
 4028324:	d9402217 	ldw	r5,136(sp)
 4028328:	d8801d05 	stb	r2,116(sp)
 402832c:	00801e04 	movi	r2,120
 4028330:	d8801d45 	stb	r2,117(sp)
 4028334:	d8001d85 	stb	zero,118(sp)
 4028338:	b811883a 	mov	r8,r23
 402833c:	28c00104 	addi	r3,r5,4
 4028340:	2cc00017 	ldw	r19,0(r5)
 4028344:	0029883a 	mov	r20,zero
 4028348:	88800094 	ori	r2,r17,2
 402834c:	80032516 	blt	r16,zero,4028fe4 <___vfiprintf_internal_r+0x106c>
 4028350:	00bfdfc4 	movi	r2,-129
 4028354:	88a2703a 	and	r17,r17,r2
 4028358:	d8c02215 	stw	r3,136(sp)
 402835c:	8c400094 	ori	r17,r17,2
 4028360:	98032a1e 	bne	r19,zero,402900c <___vfiprintf_internal_r+0x1094>
 4028364:	00800034 	movhi	r2,0
 4028368:	10808704 	addi	r2,r2,540
 402836c:	d8802615 	stw	r2,152(sp)
 4028370:	002b883a 	mov	r21,zero
 4028374:	8001741e 	bne	r16,zero,4028948 <___vfiprintf_internal_r+0x9d0>
 4028378:	0021883a 	mov	r16,zero
 402837c:	0029883a 	mov	r20,zero
 4028380:	ddc01a04 	addi	r23,sp,104
 4028384:	8027883a 	mov	r19,r16
 4028388:	8500010e 	bge	r16,r20,4028390 <___vfiprintf_internal_r+0x418>
 402838c:	a027883a 	mov	r19,r20
 4028390:	ad403fcc 	andi	r21,r21,255
 4028394:	ad40201c 	xori	r21,r21,128
 4028398:	ad7fe004 	addi	r21,r21,-128
 402839c:	a8000126 	beq	r21,zero,40283a4 <___vfiprintf_internal_r+0x42c>
 40283a0:	9cc00044 	addi	r19,r19,1
 40283a4:	89c0008c 	andi	r7,r17,2
 40283a8:	38000126 	beq	r7,zero,40283b0 <___vfiprintf_internal_r+0x438>
 40283ac:	9cc00084 	addi	r19,r19,2
 40283b0:	88c0210c 	andi	r3,r17,132
 40283b4:	1801dd1e 	bne	r3,zero,4028b2c <___vfiprintf_internal_r+0xbb4>
 40283b8:	d9402517 	ldw	r5,148(sp)
 40283bc:	2cebc83a 	sub	r21,r5,r19
 40283c0:	0541da0e 	bge	zero,r21,4028b2c <___vfiprintf_internal_r+0xbb4>
 40283c4:	07000404 	movi	fp,16
 40283c8:	d8801c17 	ldw	r2,112(sp)
 40283cc:	e543be0e 	bge	fp,r21,40292c8 <___vfiprintf_internal_r+0x1350>
 40283d0:	01400034 	movhi	r5,0
 40283d4:	2940ec04 	addi	r5,r5,944
 40283d8:	dc002715 	stw	r16,156(sp)
 40283dc:	d9801b17 	ldw	r6,108(sp)
 40283e0:	a821883a 	mov	r16,r21
 40283e4:	d9402315 	stw	r5,140(sp)
 40283e8:	028001c4 	movi	r10,7
 40283ec:	d9c02915 	stw	r7,164(sp)
 40283f0:	182b883a 	mov	r21,r3
 40283f4:	00000506 	br	402840c <___vfiprintf_internal_r+0x494>
 40283f8:	31000084 	addi	r4,r6,2
 40283fc:	42000204 	addi	r8,r8,8
 4028400:	180d883a 	mov	r6,r3
 4028404:	843ffc04 	addi	r16,r16,-16
 4028408:	e4000f0e 	bge	fp,r16,4028448 <___vfiprintf_internal_r+0x4d0>
 402840c:	01000034 	movhi	r4,0
 4028410:	10800404 	addi	r2,r2,16
 4028414:	30c00044 	addi	r3,r6,1
 4028418:	2100ec04 	addi	r4,r4,944
 402841c:	41000015 	stw	r4,0(r8)
 4028420:	47000115 	stw	fp,4(r8)
 4028424:	d8801c15 	stw	r2,112(sp)
 4028428:	d8c01b15 	stw	r3,108(sp)
 402842c:	50fff20e 	bge	r10,r3,40283f8 <__flash_rwdata_start+0xffff2ba8>
 4028430:	1001b21e 	bne	r2,zero,4028afc <___vfiprintf_internal_r+0xb84>
 4028434:	843ffc04 	addi	r16,r16,-16
 4028438:	000d883a 	mov	r6,zero
 402843c:	01000044 	movi	r4,1
 4028440:	d811883a 	mov	r8,sp
 4028444:	e43ff116 	blt	fp,r16,402840c <__flash_rwdata_start+0xffff2bbc>
 4028448:	a807883a 	mov	r3,r21
 402844c:	d9c02917 	ldw	r7,164(sp)
 4028450:	802b883a 	mov	r21,r16
 4028454:	dc002717 	ldw	r16,156(sp)
 4028458:	d9402317 	ldw	r5,140(sp)
 402845c:	a885883a 	add	r2,r21,r2
 4028460:	45400115 	stw	r21,4(r8)
 4028464:	41400015 	stw	r5,0(r8)
 4028468:	d8801c15 	stw	r2,112(sp)
 402846c:	d9001b15 	stw	r4,108(sp)
 4028470:	014001c4 	movi	r5,7
 4028474:	29026216 	blt	r5,r4,4028e00 <___vfiprintf_internal_r+0xe88>
 4028478:	d9801d87 	ldb	r6,118(sp)
 402847c:	42000204 	addi	r8,r8,8
 4028480:	21400044 	addi	r5,r4,1
 4028484:	3001ae1e 	bne	r6,zero,4028b40 <___vfiprintf_internal_r+0xbc8>
 4028488:	3801bb26 	beq	r7,zero,4028b78 <___vfiprintf_internal_r+0xc00>
 402848c:	d9001d04 	addi	r4,sp,116
 4028490:	10800084 	addi	r2,r2,2
 4028494:	41000015 	stw	r4,0(r8)
 4028498:	01000084 	movi	r4,2
 402849c:	41000115 	stw	r4,4(r8)
 40284a0:	d8801c15 	stw	r2,112(sp)
 40284a4:	d9401b15 	stw	r5,108(sp)
 40284a8:	010001c4 	movi	r4,7
 40284ac:	2142680e 	bge	r4,r5,4028e50 <___vfiprintf_internal_r+0xed8>
 40284b0:	1002b11e 	bne	r2,zero,4028f78 <___vfiprintf_internal_r+0x1000>
 40284b4:	01802004 	movi	r6,128
 40284b8:	01400044 	movi	r5,1
 40284bc:	0009883a 	mov	r4,zero
 40284c0:	d811883a 	mov	r8,sp
 40284c4:	1981ae1e 	bne	r3,r6,4028b80 <___vfiprintf_internal_r+0xc08>
 40284c8:	d8c02517 	ldw	r3,148(sp)
 40284cc:	1cf9c83a 	sub	fp,r3,r19
 40284d0:	0701ab0e 	bge	zero,fp,4028b80 <___vfiprintf_internal_r+0xc08>
 40284d4:	05400404 	movi	r21,16
 40284d8:	af03a90e 	bge	r21,fp,4029380 <___vfiprintf_internal_r+0x1408>
 40284dc:	01400034 	movhi	r5,0
 40284e0:	2940e804 	addi	r5,r5,928
 40284e4:	d9402315 	stw	r5,140(sp)
 40284e8:	01c001c4 	movi	r7,7
 40284ec:	00000506 	br	4028504 <___vfiprintf_internal_r+0x58c>
 40284f0:	21800084 	addi	r6,r4,2
 40284f4:	42000204 	addi	r8,r8,8
 40284f8:	1809883a 	mov	r4,r3
 40284fc:	e73ffc04 	addi	fp,fp,-16
 4028500:	af000d0e 	bge	r21,fp,4028538 <___vfiprintf_internal_r+0x5c0>
 4028504:	10800404 	addi	r2,r2,16
 4028508:	20c00044 	addi	r3,r4,1
 402850c:	44800015 	stw	r18,0(r8)
 4028510:	45400115 	stw	r21,4(r8)
 4028514:	d8801c15 	stw	r2,112(sp)
 4028518:	d8c01b15 	stw	r3,108(sp)
 402851c:	38fff40e 	bge	r7,r3,40284f0 <__flash_rwdata_start+0xffff2ca0>
 4028520:	10022b1e 	bne	r2,zero,4028dd0 <___vfiprintf_internal_r+0xe58>
 4028524:	e73ffc04 	addi	fp,fp,-16
 4028528:	01800044 	movi	r6,1
 402852c:	0009883a 	mov	r4,zero
 4028530:	d811883a 	mov	r8,sp
 4028534:	af3ff316 	blt	r21,fp,4028504 <__flash_rwdata_start+0xffff2cb4>
 4028538:	d8c02317 	ldw	r3,140(sp)
 402853c:	1705883a 	add	r2,r2,fp
 4028540:	47000115 	stw	fp,4(r8)
 4028544:	40c00015 	stw	r3,0(r8)
 4028548:	d8801c15 	stw	r2,112(sp)
 402854c:	d9801b15 	stw	r6,108(sp)
 4028550:	00c001c4 	movi	r3,7
 4028554:	19829416 	blt	r3,r6,4028fa8 <___vfiprintf_internal_r+0x1030>
 4028558:	8521c83a 	sub	r16,r16,r20
 402855c:	42000204 	addi	r8,r8,8
 4028560:	31400044 	addi	r5,r6,1
 4028564:	3009883a 	mov	r4,r6
 4028568:	04018716 	blt	zero,r16,4028b88 <___vfiprintf_internal_r+0xc10>
 402856c:	a085883a 	add	r2,r20,r2
 4028570:	45c00015 	stw	r23,0(r8)
 4028574:	45000115 	stw	r20,4(r8)
 4028578:	d8801c15 	stw	r2,112(sp)
 402857c:	d9401b15 	stw	r5,108(sp)
 4028580:	00c001c4 	movi	r3,7
 4028584:	1941c20e 	bge	r3,r5,4028c90 <___vfiprintf_internal_r+0xd18>
 4028588:	1002531e 	bne	r2,zero,4028ed8 <___vfiprintf_internal_r+0xf60>
 402858c:	d8001b15 	stw	zero,108(sp)
 4028590:	8c40010c 	andi	r17,r17,4
 4028594:	88023226 	beq	r17,zero,4028e60 <___vfiprintf_internal_r+0xee8>
 4028598:	d9002517 	ldw	r4,148(sp)
 402859c:	24e3c83a 	sub	r17,r4,r19
 40285a0:	04432916 	blt	zero,r17,4029248 <___vfiprintf_internal_r+0x12d0>
 40285a4:	d8802517 	ldw	r2,148(sp)
 40285a8:	14c0010e 	bge	r2,r19,40285b0 <___vfiprintf_internal_r+0x638>
 40285ac:	9805883a 	mov	r2,r19
 40285b0:	d8c02417 	ldw	r3,144(sp)
 40285b4:	1887883a 	add	r3,r3,r2
 40285b8:	d8c02415 	stw	r3,144(sp)
 40285bc:	d8001b15 	stw	zero,108(sp)
 40285c0:	d811883a 	mov	r8,sp
 40285c4:	003ea006 	br	4028048 <__flash_rwdata_start+0xffff27f8>
 40285c8:	8c400814 	ori	r17,r17,32
 40285cc:	b0c00007 	ldb	r3,0(r22)
 40285d0:	003ec606 	br	40280ec <__flash_rwdata_start+0xffff289c>
 40285d4:	b0c00007 	ldb	r3,0(r22)
 40285d8:	00801b04 	movi	r2,108
 40285dc:	18832026 	beq	r3,r2,4029260 <___vfiprintf_internal_r+0x12e8>
 40285e0:	8c400414 	ori	r17,r17,16
 40285e4:	003ec106 	br	40280ec <__flash_rwdata_start+0xffff289c>
 40285e8:	9cc03fcc 	andi	r19,r19,255
 40285ec:	b811883a 	mov	r8,r23
 40285f0:	9803981e 	bne	r19,zero,4029454 <___vfiprintf_internal_r+0x14dc>
 40285f4:	8880080c 	andi	r2,r17,32
 40285f8:	1002be26 	beq	r2,zero,40290f4 <___vfiprintf_internal_r+0x117c>
 40285fc:	d9002217 	ldw	r4,136(sp)
 4028600:	d9402417 	ldw	r5,144(sp)
 4028604:	20800017 	ldw	r2,0(r4)
 4028608:	2807d7fa 	srai	r3,r5,31
 402860c:	21000104 	addi	r4,r4,4
 4028610:	d9002215 	stw	r4,136(sp)
 4028614:	11400015 	stw	r5,0(r2)
 4028618:	10c00115 	stw	r3,4(r2)
 402861c:	003e8a06 	br	4028048 <__flash_rwdata_start+0xffff27f8>
 4028620:	9cc03fcc 	andi	r19,r19,255
 4028624:	b811883a 	mov	r8,r23
 4028628:	9803871e 	bne	r19,zero,4029448 <___vfiprintf_internal_r+0x14d0>
 402862c:	8880080c 	andi	r2,r17,32
 4028630:	10009a26 	beq	r2,zero,402889c <___vfiprintf_internal_r+0x924>
 4028634:	d9002217 	ldw	r4,136(sp)
 4028638:	d8001d85 	stb	zero,118(sp)
 402863c:	20800204 	addi	r2,r4,8
 4028640:	24c00017 	ldw	r19,0(r4)
 4028644:	25000117 	ldw	r20,4(r4)
 4028648:	8002a416 	blt	r16,zero,40290dc <___vfiprintf_internal_r+0x1164>
 402864c:	013fdfc4 	movi	r4,-129
 4028650:	9d06b03a 	or	r3,r19,r20
 4028654:	d8802215 	stw	r2,136(sp)
 4028658:	8922703a 	and	r17,r17,r4
 402865c:	18009b26 	beq	r3,zero,40288cc <___vfiprintf_internal_r+0x954>
 4028660:	002b883a 	mov	r21,zero
 4028664:	ddc01a04 	addi	r23,sp,104
 4028668:	9806d0fa 	srli	r3,r19,3
 402866c:	a008977a 	slli	r4,r20,29
 4028670:	a028d0fa 	srli	r20,r20,3
 4028674:	9cc001cc 	andi	r19,r19,7
 4028678:	98800c04 	addi	r2,r19,48
 402867c:	bdffffc4 	addi	r23,r23,-1
 4028680:	20e6b03a 	or	r19,r4,r3
 4028684:	b8800005 	stb	r2,0(r23)
 4028688:	9d06b03a 	or	r3,r19,r20
 402868c:	183ff61e 	bne	r3,zero,4028668 <__flash_rwdata_start+0xffff2e18>
 4028690:	88c0004c 	andi	r3,r17,1
 4028694:	18021f1e 	bne	r3,zero,4028f14 <___vfiprintf_internal_r+0xf9c>
 4028698:	d9401e17 	ldw	r5,120(sp)
 402869c:	2de9c83a 	sub	r20,r5,r23
 40286a0:	003f3806 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 40286a4:	9cc03fcc 	andi	r19,r19,255
 40286a8:	b811883a 	mov	r8,r23
 40286ac:	98034f1e 	bne	r19,zero,40293ec <___vfiprintf_internal_r+0x1474>
 40286b0:	00800034 	movhi	r2,0
 40286b4:	10808704 	addi	r2,r2,540
 40286b8:	d8802615 	stw	r2,152(sp)
 40286bc:	8880080c 	andi	r2,r17,32
 40286c0:	1000ac26 	beq	r2,zero,4028974 <___vfiprintf_internal_r+0x9fc>
 40286c4:	d9002217 	ldw	r4,136(sp)
 40286c8:	24c00017 	ldw	r19,0(r4)
 40286cc:	25000117 	ldw	r20,4(r4)
 40286d0:	21000204 	addi	r4,r4,8
 40286d4:	d9002215 	stw	r4,136(sp)
 40286d8:	8880004c 	andi	r2,r17,1
 40286dc:	1001e726 	beq	r2,zero,4028e7c <___vfiprintf_internal_r+0xf04>
 40286e0:	9d04b03a 	or	r2,r19,r20
 40286e4:	10025c1e 	bne	r2,zero,4029058 <___vfiprintf_internal_r+0x10e0>
 40286e8:	d8001d85 	stb	zero,118(sp)
 40286ec:	80024416 	blt	r16,zero,4029000 <___vfiprintf_internal_r+0x1088>
 40286f0:	00bfdfc4 	movi	r2,-129
 40286f4:	88a2703a 	and	r17,r17,r2
 40286f8:	003f1d06 	br	4028370 <__flash_rwdata_start+0xffff2b20>
 40286fc:	d8c02217 	ldw	r3,136(sp)
 4028700:	04c00044 	movi	r19,1
 4028704:	b811883a 	mov	r8,r23
 4028708:	18800017 	ldw	r2,0(r3)
 402870c:	18c00104 	addi	r3,r3,4
 4028710:	d8001d85 	stb	zero,118(sp)
 4028714:	d8801005 	stb	r2,64(sp)
 4028718:	d8c02215 	stw	r3,136(sp)
 402871c:	9829883a 	mov	r20,r19
 4028720:	ddc01004 	addi	r23,sp,64
 4028724:	0021883a 	mov	r16,zero
 4028728:	003f1e06 	br	40283a4 <__flash_rwdata_start+0xffff2b54>
 402872c:	9cc03fcc 	andi	r19,r19,255
 4028730:	b811883a 	mov	r8,r23
 4028734:	9803331e 	bne	r19,zero,4029404 <___vfiprintf_internal_r+0x148c>
 4028738:	8880080c 	andi	r2,r17,32
 402873c:	10004826 	beq	r2,zero,4028860 <___vfiprintf_internal_r+0x8e8>
 4028740:	d9002217 	ldw	r4,136(sp)
 4028744:	20800117 	ldw	r2,4(r4)
 4028748:	24c00017 	ldw	r19,0(r4)
 402874c:	21000204 	addi	r4,r4,8
 4028750:	d9002215 	stw	r4,136(sp)
 4028754:	1029883a 	mov	r20,r2
 4028758:	10024c16 	blt	r2,zero,402908c <___vfiprintf_internal_r+0x1114>
 402875c:	dd401d83 	ldbu	r21,118(sp)
 4028760:	80007116 	blt	r16,zero,4028928 <___vfiprintf_internal_r+0x9b0>
 4028764:	00ffdfc4 	movi	r3,-129
 4028768:	9d04b03a 	or	r2,r19,r20
 402876c:	88e2703a 	and	r17,r17,r3
 4028770:	1000d126 	beq	r2,zero,4028ab8 <___vfiprintf_internal_r+0xb40>
 4028774:	a0023526 	beq	r20,zero,402904c <___vfiprintf_internal_r+0x10d4>
 4028778:	ddc01a04 	addi	r23,sp,104
 402877c:	4039883a 	mov	fp,r8
 4028780:	9809883a 	mov	r4,r19
 4028784:	a00b883a 	mov	r5,r20
 4028788:	01800284 	movi	r6,10
 402878c:	000f883a 	mov	r7,zero
 4028790:	402a4a40 	call	402a4a4 <__umoddi3>
 4028794:	10800c04 	addi	r2,r2,48
 4028798:	bdffffc4 	addi	r23,r23,-1
 402879c:	9809883a 	mov	r4,r19
 40287a0:	a00b883a 	mov	r5,r20
 40287a4:	b8800005 	stb	r2,0(r23)
 40287a8:	01800284 	movi	r6,10
 40287ac:	000f883a 	mov	r7,zero
 40287b0:	4029ea80 	call	4029ea8 <__udivdi3>
 40287b4:	1027883a 	mov	r19,r2
 40287b8:	10c4b03a 	or	r2,r2,r3
 40287bc:	1829883a 	mov	r20,r3
 40287c0:	103fef1e 	bne	r2,zero,4028780 <__flash_rwdata_start+0xffff2f30>
 40287c4:	d9001e17 	ldw	r4,120(sp)
 40287c8:	e011883a 	mov	r8,fp
 40287cc:	25e9c83a 	sub	r20,r4,r23
 40287d0:	003eec06 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 40287d4:	d8802307 	ldb	r2,140(sp)
 40287d8:	1002361e 	bne	r2,zero,40290b4 <___vfiprintf_internal_r+0x113c>
 40287dc:	00c00804 	movi	r3,32
 40287e0:	d8c02305 	stb	r3,140(sp)
 40287e4:	04c00044 	movi	r19,1
 40287e8:	b0c00007 	ldb	r3,0(r22)
 40287ec:	003e3f06 	br	40280ec <__flash_rwdata_start+0xffff289c>
 40287f0:	8c400054 	ori	r17,r17,1
 40287f4:	b0c00007 	ldb	r3,0(r22)
 40287f8:	003e3c06 	br	40280ec <__flash_rwdata_start+0xffff289c>
 40287fc:	8c402014 	ori	r17,r17,128
 4028800:	b0c00007 	ldb	r3,0(r22)
 4028804:	003e3906 	br	40280ec <__flash_rwdata_start+0xffff289c>
 4028808:	dc002715 	stw	r16,156(sp)
 402880c:	d8002515 	stw	zero,148(sp)
 4028810:	1f3ff404 	addi	fp,r3,-48
 4028814:	0009883a 	mov	r4,zero
 4028818:	b021883a 	mov	r16,r22
 402881c:	01400284 	movi	r5,10
 4028820:	402ac1c0 	call	402ac1c <__mulsi3>
 4028824:	80c00007 	ldb	r3,0(r16)
 4028828:	e089883a 	add	r4,fp,r2
 402882c:	b5800044 	addi	r22,r22,1
 4028830:	1f3ff404 	addi	fp,r3,-48
 4028834:	b021883a 	mov	r16,r22
 4028838:	af3ff82e 	bgeu	r21,fp,402881c <__flash_rwdata_start+0xffff2fcc>
 402883c:	d9002515 	stw	r4,148(sp)
 4028840:	dc002717 	ldw	r16,156(sp)
 4028844:	003e2a06 	br	40280f0 <__flash_rwdata_start+0xffff28a0>
 4028848:	9cc03fcc 	andi	r19,r19,255
 402884c:	b811883a 	mov	r8,r23
 4028850:	9802e91e 	bne	r19,zero,40293f8 <___vfiprintf_internal_r+0x1480>
 4028854:	8c400414 	ori	r17,r17,16
 4028858:	8880080c 	andi	r2,r17,32
 402885c:	103fb81e 	bne	r2,zero,4028740 <__flash_rwdata_start+0xffff2ef0>
 4028860:	8880040c 	andi	r2,r17,16
 4028864:	10022e26 	beq	r2,zero,4029120 <___vfiprintf_internal_r+0x11a8>
 4028868:	d9402217 	ldw	r5,136(sp)
 402886c:	2cc00017 	ldw	r19,0(r5)
 4028870:	29400104 	addi	r5,r5,4
 4028874:	d9402215 	stw	r5,136(sp)
 4028878:	9829d7fa 	srai	r20,r19,31
 402887c:	a005883a 	mov	r2,r20
 4028880:	003fb506 	br	4028758 <__flash_rwdata_start+0xffff2f08>
 4028884:	9cc03fcc 	andi	r19,r19,255
 4028888:	b811883a 	mov	r8,r23
 402888c:	9802fa1e 	bne	r19,zero,4029478 <___vfiprintf_internal_r+0x1500>
 4028890:	8c400414 	ori	r17,r17,16
 4028894:	8880080c 	andi	r2,r17,32
 4028898:	103f661e 	bne	r2,zero,4028634 <__flash_rwdata_start+0xffff2de4>
 402889c:	8880040c 	andi	r2,r17,16
 40288a0:	10020626 	beq	r2,zero,40290bc <___vfiprintf_internal_r+0x1144>
 40288a4:	d9402217 	ldw	r5,136(sp)
 40288a8:	d8001d85 	stb	zero,118(sp)
 40288ac:	0029883a 	mov	r20,zero
 40288b0:	28800104 	addi	r2,r5,4
 40288b4:	2cc00017 	ldw	r19,0(r5)
 40288b8:	80020816 	blt	r16,zero,40290dc <___vfiprintf_internal_r+0x1164>
 40288bc:	00ffdfc4 	movi	r3,-129
 40288c0:	d8802215 	stw	r2,136(sp)
 40288c4:	88e2703a 	and	r17,r17,r3
 40288c8:	983f651e 	bne	r19,zero,4028660 <__flash_rwdata_start+0xffff2e10>
 40288cc:	002b883a 	mov	r21,zero
 40288d0:	8002cf26 	beq	r16,zero,4029410 <___vfiprintf_internal_r+0x1498>
 40288d4:	0027883a 	mov	r19,zero
 40288d8:	0029883a 	mov	r20,zero
 40288dc:	003f6106 	br	4028664 <__flash_rwdata_start+0xffff2e14>
 40288e0:	9cc03fcc 	andi	r19,r19,255
 40288e4:	b811883a 	mov	r8,r23
 40288e8:	9802e01e 	bne	r19,zero,402946c <___vfiprintf_internal_r+0x14f4>
 40288ec:	8c400414 	ori	r17,r17,16
 40288f0:	8880080c 	andi	r2,r17,32
 40288f4:	1000641e 	bne	r2,zero,4028a88 <___vfiprintf_internal_r+0xb10>
 40288f8:	8880040c 	andi	r2,r17,16
 40288fc:	1001c81e 	bne	r2,zero,4029020 <___vfiprintf_internal_r+0x10a8>
 4028900:	8880100c 	andi	r2,r17,64
 4028904:	d8001d85 	stb	zero,118(sp)
 4028908:	1002281e 	bne	r2,zero,40291ac <___vfiprintf_internal_r+0x1234>
 402890c:	d9002217 	ldw	r4,136(sp)
 4028910:	0029883a 	mov	r20,zero
 4028914:	20800104 	addi	r2,r4,4
 4028918:	24c00017 	ldw	r19,0(r4)
 402891c:	8001c60e 	bge	r16,zero,4029038 <___vfiprintf_internal_r+0x10c0>
 4028920:	d8802215 	stw	r2,136(sp)
 4028924:	002b883a 	mov	r21,zero
 4028928:	9d04b03a 	or	r2,r19,r20
 402892c:	103f911e 	bne	r2,zero,4028774 <__flash_rwdata_start+0xffff2f24>
 4028930:	00800044 	movi	r2,1
 4028934:	10803fcc 	andi	r2,r2,255
 4028938:	00c00044 	movi	r3,1
 402893c:	10c05f26 	beq	r2,r3,4028abc <___vfiprintf_internal_r+0xb44>
 4028940:	00c00084 	movi	r3,2
 4028944:	10ffe31e 	bne	r2,r3,40288d4 <__flash_rwdata_start+0xffff3084>
 4028948:	0027883a 	mov	r19,zero
 402894c:	0029883a 	mov	r20,zero
 4028950:	00015106 	br	4028e98 <___vfiprintf_internal_r+0xf20>
 4028954:	9cc03fcc 	andi	r19,r19,255
 4028958:	b811883a 	mov	r8,r23
 402895c:	9802c01e 	bne	r19,zero,4029460 <___vfiprintf_internal_r+0x14e8>
 4028960:	01400034 	movhi	r5,0
 4028964:	29408204 	addi	r5,r5,520
 4028968:	d9402615 	stw	r5,152(sp)
 402896c:	8880080c 	andi	r2,r17,32
 4028970:	103f541e 	bne	r2,zero,40286c4 <__flash_rwdata_start+0xffff2e74>
 4028974:	8880040c 	andi	r2,r17,16
 4028978:	1001f226 	beq	r2,zero,4029144 <___vfiprintf_internal_r+0x11cc>
 402897c:	d9402217 	ldw	r5,136(sp)
 4028980:	0029883a 	mov	r20,zero
 4028984:	2cc00017 	ldw	r19,0(r5)
 4028988:	29400104 	addi	r5,r5,4
 402898c:	d9402215 	stw	r5,136(sp)
 4028990:	003f5106 	br	40286d8 <__flash_rwdata_start+0xffff2e88>
 4028994:	d8c02217 	ldw	r3,136(sp)
 4028998:	b811883a 	mov	r8,r23
 402899c:	d8001d85 	stb	zero,118(sp)
 40289a0:	1dc00017 	ldw	r23,0(r3)
 40289a4:	1f000104 	addi	fp,r3,4
 40289a8:	b8025926 	beq	r23,zero,4029310 <___vfiprintf_internal_r+0x1398>
 40289ac:	80023316 	blt	r16,zero,402927c <___vfiprintf_internal_r+0x1304>
 40289b0:	800d883a 	mov	r6,r16
 40289b4:	000b883a 	mov	r5,zero
 40289b8:	b809883a 	mov	r4,r23
 40289bc:	da002a15 	stw	r8,168(sp)
 40289c0:	40260b80 	call	40260b8 <memchr>
 40289c4:	da002a17 	ldw	r8,168(sp)
 40289c8:	10026826 	beq	r2,zero,402936c <___vfiprintf_internal_r+0x13f4>
 40289cc:	15e9c83a 	sub	r20,r2,r23
 40289d0:	dd401d83 	ldbu	r21,118(sp)
 40289d4:	df002215 	stw	fp,136(sp)
 40289d8:	0021883a 	mov	r16,zero
 40289dc:	003e6906 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 40289e0:	9cc03fcc 	andi	r19,r19,255
 40289e4:	b811883a 	mov	r8,r23
 40289e8:	983fc126 	beq	r19,zero,40288f0 <__flash_rwdata_start+0xffff30a0>
 40289ec:	d8c02303 	ldbu	r3,140(sp)
 40289f0:	d8c01d85 	stb	r3,118(sp)
 40289f4:	003fbe06 	br	40288f0 <__flash_rwdata_start+0xffff30a0>
 40289f8:	d9002217 	ldw	r4,136(sp)
 40289fc:	d9402217 	ldw	r5,136(sp)
 4028a00:	21000017 	ldw	r4,0(r4)
 4028a04:	28800104 	addi	r2,r5,4
 4028a08:	d9002515 	stw	r4,148(sp)
 4028a0c:	203e3d16 	blt	r4,zero,4028304 <__flash_rwdata_start+0xffff2ab4>
 4028a10:	d8802215 	stw	r2,136(sp)
 4028a14:	b0c00007 	ldb	r3,0(r22)
 4028a18:	003db406 	br	40280ec <__flash_rwdata_start+0xffff289c>
 4028a1c:	00c00ac4 	movi	r3,43
 4028a20:	d8c02305 	stb	r3,140(sp)
 4028a24:	04c00044 	movi	r19,1
 4028a28:	b0c00007 	ldb	r3,0(r22)
 4028a2c:	003daf06 	br	40280ec <__flash_rwdata_start+0xffff289c>
 4028a30:	b0c00007 	ldb	r3,0(r22)
 4028a34:	01000a84 	movi	r4,42
 4028a38:	b4000044 	addi	r16,r22,1
 4028a3c:	19025e26 	beq	r3,r4,40293b8 <___vfiprintf_internal_r+0x1440>
 4028a40:	1f3ff404 	addi	fp,r3,-48
 4028a44:	0009883a 	mov	r4,zero
 4028a48:	af025236 	bltu	r21,fp,4029394 <___vfiprintf_internal_r+0x141c>
 4028a4c:	01400284 	movi	r5,10
 4028a50:	402ac1c0 	call	402ac1c <__mulsi3>
 4028a54:	80c00007 	ldb	r3,0(r16)
 4028a58:	1709883a 	add	r4,r2,fp
 4028a5c:	85800044 	addi	r22,r16,1
 4028a60:	1f3ff404 	addi	fp,r3,-48
 4028a64:	b021883a 	mov	r16,r22
 4028a68:	af3ff82e 	bgeu	r21,fp,4028a4c <__flash_rwdata_start+0xffff31fc>
 4028a6c:	2021883a 	mov	r16,r4
 4028a70:	203d9f0e 	bge	r4,zero,40280f0 <__flash_rwdata_start+0xffff28a0>
 4028a74:	043fffc4 	movi	r16,-1
 4028a78:	003d9d06 	br	40280f0 <__flash_rwdata_start+0xffff28a0>
 4028a7c:	8c401014 	ori	r17,r17,64
 4028a80:	b0c00007 	ldb	r3,0(r22)
 4028a84:	003d9906 	br	40280ec <__flash_rwdata_start+0xffff289c>
 4028a88:	d9002217 	ldw	r4,136(sp)
 4028a8c:	d8001d85 	stb	zero,118(sp)
 4028a90:	20c00204 	addi	r3,r4,8
 4028a94:	24c00017 	ldw	r19,0(r4)
 4028a98:	25000117 	ldw	r20,4(r4)
 4028a9c:	8001e716 	blt	r16,zero,402923c <___vfiprintf_internal_r+0x12c4>
 4028aa0:	013fdfc4 	movi	r4,-129
 4028aa4:	9d04b03a 	or	r2,r19,r20
 4028aa8:	d8c02215 	stw	r3,136(sp)
 4028aac:	8922703a 	and	r17,r17,r4
 4028ab0:	002b883a 	mov	r21,zero
 4028ab4:	103f2f1e 	bne	r2,zero,4028774 <__flash_rwdata_start+0xffff2f24>
 4028ab8:	803e2f26 	beq	r16,zero,4028378 <__flash_rwdata_start+0xffff2b28>
 4028abc:	0027883a 	mov	r19,zero
 4028ac0:	9cc00c04 	addi	r19,r19,48
 4028ac4:	dcc019c5 	stb	r19,103(sp)
 4028ac8:	dd002817 	ldw	r20,160(sp)
 4028acc:	ddc019c4 	addi	r23,sp,103
 4028ad0:	003e2c06 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 4028ad4:	9cc03fcc 	andi	r19,r19,255
 4028ad8:	b811883a 	mov	r8,r23
 4028adc:	9802571e 	bne	r19,zero,402943c <___vfiprintf_internal_r+0x14c4>
 4028ae0:	18005726 	beq	r3,zero,4028c40 <___vfiprintf_internal_r+0xcc8>
 4028ae4:	04c00044 	movi	r19,1
 4028ae8:	d8c01005 	stb	r3,64(sp)
 4028aec:	d8001d85 	stb	zero,118(sp)
 4028af0:	9829883a 	mov	r20,r19
 4028af4:	ddc01004 	addi	r23,sp,64
 4028af8:	003f0a06 	br	4028724 <__flash_rwdata_start+0xffff2ed4>
 4028afc:	d9402017 	ldw	r5,128(sp)
 4028b00:	d9002117 	ldw	r4,132(sp)
 4028b04:	d9801a04 	addi	r6,sp,104
 4028b08:	da802a15 	stw	r10,168(sp)
 4028b0c:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028b10:	da802a17 	ldw	r10,168(sp)
 4028b14:	1000501e 	bne	r2,zero,4028c58 <___vfiprintf_internal_r+0xce0>
 4028b18:	d9801b17 	ldw	r6,108(sp)
 4028b1c:	d8801c17 	ldw	r2,112(sp)
 4028b20:	d811883a 	mov	r8,sp
 4028b24:	31000044 	addi	r4,r6,1
 4028b28:	003e3606 	br	4028404 <__flash_rwdata_start+0xffff2bb4>
 4028b2c:	d9001b17 	ldw	r4,108(sp)
 4028b30:	d8801c17 	ldw	r2,112(sp)
 4028b34:	21400044 	addi	r5,r4,1
 4028b38:	d9801d87 	ldb	r6,118(sp)
 4028b3c:	303e5226 	beq	r6,zero,4028488 <__flash_rwdata_start+0xffff2c38>
 4028b40:	01800044 	movi	r6,1
 4028b44:	d9001d84 	addi	r4,sp,118
 4028b48:	1185883a 	add	r2,r2,r6
 4028b4c:	41000015 	stw	r4,0(r8)
 4028b50:	41800115 	stw	r6,4(r8)
 4028b54:	d8801c15 	stw	r2,112(sp)
 4028b58:	d9401b15 	stw	r5,108(sp)
 4028b5c:	010001c4 	movi	r4,7
 4028b60:	2140b00e 	bge	r4,r5,4028e24 <___vfiprintf_internal_r+0xeac>
 4028b64:	1000f61e 	bne	r2,zero,4028f40 <___vfiprintf_internal_r+0xfc8>
 4028b68:	3800b31e 	bne	r7,zero,4028e38 <___vfiprintf_internal_r+0xec0>
 4028b6c:	0009883a 	mov	r4,zero
 4028b70:	300b883a 	mov	r5,r6
 4028b74:	d811883a 	mov	r8,sp
 4028b78:	01802004 	movi	r6,128
 4028b7c:	19be5226 	beq	r3,r6,40284c8 <__flash_rwdata_start+0xffff2c78>
 4028b80:	8521c83a 	sub	r16,r16,r20
 4028b84:	043e790e 	bge	zero,r16,402856c <__flash_rwdata_start+0xffff2d1c>
 4028b88:	05400404 	movi	r21,16
 4028b8c:	ac01b00e 	bge	r21,r16,4029250 <___vfiprintf_internal_r+0x12d8>
 4028b90:	01400034 	movhi	r5,0
 4028b94:	2940e804 	addi	r5,r5,928
 4028b98:	d9402315 	stw	r5,140(sp)
 4028b9c:	070001c4 	movi	fp,7
 4028ba0:	00000506 	br	4028bb8 <___vfiprintf_internal_r+0xc40>
 4028ba4:	21400084 	addi	r5,r4,2
 4028ba8:	42000204 	addi	r8,r8,8
 4028bac:	1809883a 	mov	r4,r3
 4028bb0:	843ffc04 	addi	r16,r16,-16
 4028bb4:	ac000d0e 	bge	r21,r16,4028bec <___vfiprintf_internal_r+0xc74>
 4028bb8:	10800404 	addi	r2,r2,16
 4028bbc:	20c00044 	addi	r3,r4,1
 4028bc0:	44800015 	stw	r18,0(r8)
 4028bc4:	45400115 	stw	r21,4(r8)
 4028bc8:	d8801c15 	stw	r2,112(sp)
 4028bcc:	d8c01b15 	stw	r3,108(sp)
 4028bd0:	e0fff40e 	bge	fp,r3,4028ba4 <__flash_rwdata_start+0xffff3354>
 4028bd4:	1000101e 	bne	r2,zero,4028c18 <___vfiprintf_internal_r+0xca0>
 4028bd8:	843ffc04 	addi	r16,r16,-16
 4028bdc:	01400044 	movi	r5,1
 4028be0:	0009883a 	mov	r4,zero
 4028be4:	d811883a 	mov	r8,sp
 4028be8:	ac3ff316 	blt	r21,r16,4028bb8 <__flash_rwdata_start+0xffff3368>
 4028bec:	d8c02317 	ldw	r3,140(sp)
 4028bf0:	1405883a 	add	r2,r2,r16
 4028bf4:	44000115 	stw	r16,4(r8)
 4028bf8:	40c00015 	stw	r3,0(r8)
 4028bfc:	d8801c15 	stw	r2,112(sp)
 4028c00:	d9401b15 	stw	r5,108(sp)
 4028c04:	00c001c4 	movi	r3,7
 4028c08:	19401916 	blt	r3,r5,4028c70 <___vfiprintf_internal_r+0xcf8>
 4028c0c:	42000204 	addi	r8,r8,8
 4028c10:	29400044 	addi	r5,r5,1
 4028c14:	003e5506 	br	402856c <__flash_rwdata_start+0xffff2d1c>
 4028c18:	d9402017 	ldw	r5,128(sp)
 4028c1c:	d9002117 	ldw	r4,132(sp)
 4028c20:	d9801a04 	addi	r6,sp,104
 4028c24:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028c28:	10000b1e 	bne	r2,zero,4028c58 <___vfiprintf_internal_r+0xce0>
 4028c2c:	d9001b17 	ldw	r4,108(sp)
 4028c30:	d8801c17 	ldw	r2,112(sp)
 4028c34:	d811883a 	mov	r8,sp
 4028c38:	21400044 	addi	r5,r4,1
 4028c3c:	003fdc06 	br	4028bb0 <__flash_rwdata_start+0xffff3360>
 4028c40:	d8801c17 	ldw	r2,112(sp)
 4028c44:	10000426 	beq	r2,zero,4028c58 <___vfiprintf_internal_r+0xce0>
 4028c48:	d9402017 	ldw	r5,128(sp)
 4028c4c:	d9002117 	ldw	r4,132(sp)
 4028c50:	d9801a04 	addi	r6,sp,104
 4028c54:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028c58:	d9402017 	ldw	r5,128(sp)
 4028c5c:	2880030b 	ldhu	r2,12(r5)
 4028c60:	1080100c 	andi	r2,r2,64
 4028c64:	10014d1e 	bne	r2,zero,402919c <___vfiprintf_internal_r+0x1224>
 4028c68:	d8802417 	ldw	r2,144(sp)
 4028c6c:	003d9706 	br	40282cc <__flash_rwdata_start+0xffff2a7c>
 4028c70:	1000d21e 	bne	r2,zero,4028fbc <___vfiprintf_internal_r+0x1044>
 4028c74:	00c00044 	movi	r3,1
 4028c78:	a005883a 	mov	r2,r20
 4028c7c:	ddc00015 	stw	r23,0(sp)
 4028c80:	dd000115 	stw	r20,4(sp)
 4028c84:	dd001c15 	stw	r20,112(sp)
 4028c88:	d8c01b15 	stw	r3,108(sp)
 4028c8c:	d811883a 	mov	r8,sp
 4028c90:	42000204 	addi	r8,r8,8
 4028c94:	8c40010c 	andi	r17,r17,4
 4028c98:	88004026 	beq	r17,zero,4028d9c <___vfiprintf_internal_r+0xe24>
 4028c9c:	d9002517 	ldw	r4,148(sp)
 4028ca0:	24e3c83a 	sub	r17,r4,r19
 4028ca4:	04403d0e 	bge	zero,r17,4028d9c <___vfiprintf_internal_r+0xe24>
 4028ca8:	04000404 	movi	r16,16
 4028cac:	8441a90e 	bge	r16,r17,4029354 <___vfiprintf_internal_r+0x13dc>
 4028cb0:	00c00034 	movhi	r3,0
 4028cb4:	18c0ec04 	addi	r3,r3,944
 4028cb8:	d9001b17 	ldw	r4,108(sp)
 4028cbc:	d8c02315 	stw	r3,140(sp)
 4028cc0:	050001c4 	movi	r20,7
 4028cc4:	dd402117 	ldw	r21,132(sp)
 4028cc8:	ddc02017 	ldw	r23,128(sp)
 4028ccc:	00000506 	br	4028ce4 <___vfiprintf_internal_r+0xd6c>
 4028cd0:	21400084 	addi	r5,r4,2
 4028cd4:	42000204 	addi	r8,r8,8
 4028cd8:	1809883a 	mov	r4,r3
 4028cdc:	8c7ffc04 	addi	r17,r17,-16
 4028ce0:	84400f0e 	bge	r16,r17,4028d20 <___vfiprintf_internal_r+0xda8>
 4028ce4:	01400034 	movhi	r5,0
 4028ce8:	10800404 	addi	r2,r2,16
 4028cec:	20c00044 	addi	r3,r4,1
 4028cf0:	2940ec04 	addi	r5,r5,944
 4028cf4:	41400015 	stw	r5,0(r8)
 4028cf8:	44000115 	stw	r16,4(r8)
 4028cfc:	d8801c15 	stw	r2,112(sp)
 4028d00:	d8c01b15 	stw	r3,108(sp)
 4028d04:	a0fff20e 	bge	r20,r3,4028cd0 <__flash_rwdata_start+0xffff3480>
 4028d08:	1000141e 	bne	r2,zero,4028d5c <___vfiprintf_internal_r+0xde4>
 4028d0c:	8c7ffc04 	addi	r17,r17,-16
 4028d10:	01400044 	movi	r5,1
 4028d14:	0009883a 	mov	r4,zero
 4028d18:	d811883a 	mov	r8,sp
 4028d1c:	847ff116 	blt	r16,r17,4028ce4 <__flash_rwdata_start+0xffff3494>
 4028d20:	d8c02317 	ldw	r3,140(sp)
 4028d24:	1445883a 	add	r2,r2,r17
 4028d28:	44400115 	stw	r17,4(r8)
 4028d2c:	40c00015 	stw	r3,0(r8)
 4028d30:	d8801c15 	stw	r2,112(sp)
 4028d34:	d9401b15 	stw	r5,108(sp)
 4028d38:	00c001c4 	movi	r3,7
 4028d3c:	1940170e 	bge	r3,r5,4028d9c <___vfiprintf_internal_r+0xe24>
 4028d40:	1000101e 	bne	r2,zero,4028d84 <___vfiprintf_internal_r+0xe0c>
 4028d44:	d8802517 	ldw	r2,148(sp)
 4028d48:	14c11616 	blt	r2,r19,40291a4 <___vfiprintf_internal_r+0x122c>
 4028d4c:	d9002417 	ldw	r4,144(sp)
 4028d50:	2089883a 	add	r4,r4,r2
 4028d54:	d9002415 	stw	r4,144(sp)
 4028d58:	003e1806 	br	40285bc <__flash_rwdata_start+0xffff2d6c>
 4028d5c:	d9801a04 	addi	r6,sp,104
 4028d60:	b80b883a 	mov	r5,r23
 4028d64:	a809883a 	mov	r4,r21
 4028d68:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028d6c:	103fba1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028d70:	d9001b17 	ldw	r4,108(sp)
 4028d74:	d8801c17 	ldw	r2,112(sp)
 4028d78:	d811883a 	mov	r8,sp
 4028d7c:	21400044 	addi	r5,r4,1
 4028d80:	003fd606 	br	4028cdc <__flash_rwdata_start+0xffff348c>
 4028d84:	d9402017 	ldw	r5,128(sp)
 4028d88:	d9002117 	ldw	r4,132(sp)
 4028d8c:	d9801a04 	addi	r6,sp,104
 4028d90:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028d94:	103fb01e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028d98:	d8801c17 	ldw	r2,112(sp)
 4028d9c:	d8c02517 	ldw	r3,148(sp)
 4028da0:	1cc0010e 	bge	r3,r19,4028da8 <___vfiprintf_internal_r+0xe30>
 4028da4:	9807883a 	mov	r3,r19
 4028da8:	d9002417 	ldw	r4,144(sp)
 4028dac:	20c9883a 	add	r4,r4,r3
 4028db0:	d9002415 	stw	r4,144(sp)
 4028db4:	103e0126 	beq	r2,zero,40285bc <__flash_rwdata_start+0xffff2d6c>
 4028db8:	d9402017 	ldw	r5,128(sp)
 4028dbc:	d9002117 	ldw	r4,132(sp)
 4028dc0:	d9801a04 	addi	r6,sp,104
 4028dc4:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028dc8:	103dfc26 	beq	r2,zero,40285bc <__flash_rwdata_start+0xffff2d6c>
 4028dcc:	003fa206 	br	4028c58 <__flash_rwdata_start+0xffff3408>
 4028dd0:	d9402017 	ldw	r5,128(sp)
 4028dd4:	d9002117 	ldw	r4,132(sp)
 4028dd8:	d9801a04 	addi	r6,sp,104
 4028ddc:	d9c02b15 	stw	r7,172(sp)
 4028de0:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028de4:	d9c02b17 	ldw	r7,172(sp)
 4028de8:	103f9b1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028dec:	d9001b17 	ldw	r4,108(sp)
 4028df0:	d8801c17 	ldw	r2,112(sp)
 4028df4:	d811883a 	mov	r8,sp
 4028df8:	21800044 	addi	r6,r4,1
 4028dfc:	003dbf06 	br	40284fc <__flash_rwdata_start+0xffff2cac>
 4028e00:	1000d81e 	bne	r2,zero,4029164 <___vfiprintf_internal_r+0x11ec>
 4028e04:	d9001d87 	ldb	r4,118(sp)
 4028e08:	20000a26 	beq	r4,zero,4028e34 <___vfiprintf_internal_r+0xebc>
 4028e0c:	00800044 	movi	r2,1
 4028e10:	d9001d84 	addi	r4,sp,118
 4028e14:	100b883a 	mov	r5,r2
 4028e18:	d9000015 	stw	r4,0(sp)
 4028e1c:	d8800115 	stw	r2,4(sp)
 4028e20:	d811883a 	mov	r8,sp
 4028e24:	2809883a 	mov	r4,r5
 4028e28:	42000204 	addi	r8,r8,8
 4028e2c:	29400044 	addi	r5,r5,1
 4028e30:	003d9506 	br	4028488 <__flash_rwdata_start+0xffff2c38>
 4028e34:	3800fd26 	beq	r7,zero,402922c <___vfiprintf_internal_r+0x12b4>
 4028e38:	00800084 	movi	r2,2
 4028e3c:	d9001d04 	addi	r4,sp,116
 4028e40:	d9000015 	stw	r4,0(sp)
 4028e44:	d8800115 	stw	r2,4(sp)
 4028e48:	01400044 	movi	r5,1
 4028e4c:	d811883a 	mov	r8,sp
 4028e50:	2809883a 	mov	r4,r5
 4028e54:	42000204 	addi	r8,r8,8
 4028e58:	29400044 	addi	r5,r5,1
 4028e5c:	003f4606 	br	4028b78 <__flash_rwdata_start+0xffff3328>
 4028e60:	d8802517 	ldw	r2,148(sp)
 4028e64:	14c0010e 	bge	r2,r19,4028e6c <___vfiprintf_internal_r+0xef4>
 4028e68:	9805883a 	mov	r2,r19
 4028e6c:	d9402417 	ldw	r5,144(sp)
 4028e70:	288b883a 	add	r5,r5,r2
 4028e74:	d9402415 	stw	r5,144(sp)
 4028e78:	003dd006 	br	40285bc <__flash_rwdata_start+0xffff2d6c>
 4028e7c:	d8001d85 	stb	zero,118(sp)
 4028e80:	80005d16 	blt	r16,zero,4028ff8 <___vfiprintf_internal_r+0x1080>
 4028e84:	00ffdfc4 	movi	r3,-129
 4028e88:	9d04b03a 	or	r2,r19,r20
 4028e8c:	88e2703a 	and	r17,r17,r3
 4028e90:	103d3726 	beq	r2,zero,4028370 <__flash_rwdata_start+0xffff2b20>
 4028e94:	002b883a 	mov	r21,zero
 4028e98:	d9002617 	ldw	r4,152(sp)
 4028e9c:	ddc01a04 	addi	r23,sp,104
 4028ea0:	988003cc 	andi	r2,r19,15
 4028ea4:	a006973a 	slli	r3,r20,28
 4028ea8:	2085883a 	add	r2,r4,r2
 4028eac:	9826d13a 	srli	r19,r19,4
 4028eb0:	10800003 	ldbu	r2,0(r2)
 4028eb4:	a028d13a 	srli	r20,r20,4
 4028eb8:	bdffffc4 	addi	r23,r23,-1
 4028ebc:	1ce6b03a 	or	r19,r3,r19
 4028ec0:	b8800005 	stb	r2,0(r23)
 4028ec4:	9d04b03a 	or	r2,r19,r20
 4028ec8:	103ff51e 	bne	r2,zero,4028ea0 <__flash_rwdata_start+0xffff3650>
 4028ecc:	d8801e17 	ldw	r2,120(sp)
 4028ed0:	15e9c83a 	sub	r20,r2,r23
 4028ed4:	003d2b06 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 4028ed8:	d9402017 	ldw	r5,128(sp)
 4028edc:	d9002117 	ldw	r4,132(sp)
 4028ee0:	d9801a04 	addi	r6,sp,104
 4028ee4:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028ee8:	103f5b1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028eec:	d8801c17 	ldw	r2,112(sp)
 4028ef0:	d811883a 	mov	r8,sp
 4028ef4:	003f6706 	br	4028c94 <__flash_rwdata_start+0xffff3444>
 4028ef8:	d9402017 	ldw	r5,128(sp)
 4028efc:	d9002117 	ldw	r4,132(sp)
 4028f00:	d9801a04 	addi	r6,sp,104
 4028f04:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028f08:	103f531e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028f0c:	d811883a 	mov	r8,sp
 4028f10:	003cd906 	br	4028278 <__flash_rwdata_start+0xffff2a28>
 4028f14:	10803fcc 	andi	r2,r2,255
 4028f18:	1080201c 	xori	r2,r2,128
 4028f1c:	10bfe004 	addi	r2,r2,-128
 4028f20:	00c00c04 	movi	r3,48
 4028f24:	10ffe926 	beq	r2,r3,4028ecc <__flash_rwdata_start+0xffff367c>
 4028f28:	b8ffffc5 	stb	r3,-1(r23)
 4028f2c:	d8c01e17 	ldw	r3,120(sp)
 4028f30:	b8bfffc4 	addi	r2,r23,-1
 4028f34:	102f883a 	mov	r23,r2
 4028f38:	18a9c83a 	sub	r20,r3,r2
 4028f3c:	003d1106 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 4028f40:	d9402017 	ldw	r5,128(sp)
 4028f44:	d9002117 	ldw	r4,132(sp)
 4028f48:	d9801a04 	addi	r6,sp,104
 4028f4c:	d8c02a15 	stw	r3,168(sp)
 4028f50:	d9c02b15 	stw	r7,172(sp)
 4028f54:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028f58:	d8c02a17 	ldw	r3,168(sp)
 4028f5c:	d9c02b17 	ldw	r7,172(sp)
 4028f60:	103f3d1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028f64:	d9001b17 	ldw	r4,108(sp)
 4028f68:	d8801c17 	ldw	r2,112(sp)
 4028f6c:	d811883a 	mov	r8,sp
 4028f70:	21400044 	addi	r5,r4,1
 4028f74:	003d4406 	br	4028488 <__flash_rwdata_start+0xffff2c38>
 4028f78:	d9402017 	ldw	r5,128(sp)
 4028f7c:	d9002117 	ldw	r4,132(sp)
 4028f80:	d9801a04 	addi	r6,sp,104
 4028f84:	d8c02a15 	stw	r3,168(sp)
 4028f88:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028f8c:	d8c02a17 	ldw	r3,168(sp)
 4028f90:	103f311e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028f94:	d9001b17 	ldw	r4,108(sp)
 4028f98:	d8801c17 	ldw	r2,112(sp)
 4028f9c:	d811883a 	mov	r8,sp
 4028fa0:	21400044 	addi	r5,r4,1
 4028fa4:	003ef406 	br	4028b78 <__flash_rwdata_start+0xffff3328>
 4028fa8:	1000bd1e 	bne	r2,zero,40292a0 <___vfiprintf_internal_r+0x1328>
 4028fac:	01400044 	movi	r5,1
 4028fb0:	0009883a 	mov	r4,zero
 4028fb4:	d811883a 	mov	r8,sp
 4028fb8:	003ef106 	br	4028b80 <__flash_rwdata_start+0xffff3330>
 4028fbc:	d9402017 	ldw	r5,128(sp)
 4028fc0:	d9002117 	ldw	r4,132(sp)
 4028fc4:	d9801a04 	addi	r6,sp,104
 4028fc8:	4027e640 	call	4027e64 <__sprint_r.part.0>
 4028fcc:	103f221e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4028fd0:	d9401b17 	ldw	r5,108(sp)
 4028fd4:	d8801c17 	ldw	r2,112(sp)
 4028fd8:	d811883a 	mov	r8,sp
 4028fdc:	29400044 	addi	r5,r5,1
 4028fe0:	003d6206 	br	402856c <__flash_rwdata_start+0xffff2d1c>
 4028fe4:	01400034 	movhi	r5,0
 4028fe8:	29408704 	addi	r5,r5,540
 4028fec:	d9402615 	stw	r5,152(sp)
 4028ff0:	d8c02215 	stw	r3,136(sp)
 4028ff4:	1023883a 	mov	r17,r2
 4028ff8:	9d04b03a 	or	r2,r19,r20
 4028ffc:	103fa51e 	bne	r2,zero,4028e94 <__flash_rwdata_start+0xffff3644>
 4029000:	002b883a 	mov	r21,zero
 4029004:	00800084 	movi	r2,2
 4029008:	003e4a06 	br	4028934 <__flash_rwdata_start+0xffff30e4>
 402900c:	01400034 	movhi	r5,0
 4029010:	29408704 	addi	r5,r5,540
 4029014:	002b883a 	mov	r21,zero
 4029018:	d9402615 	stw	r5,152(sp)
 402901c:	003f9e06 	br	4028e98 <__flash_rwdata_start+0xffff3648>
 4029020:	d9402217 	ldw	r5,136(sp)
 4029024:	d8001d85 	stb	zero,118(sp)
 4029028:	0029883a 	mov	r20,zero
 402902c:	28800104 	addi	r2,r5,4
 4029030:	2cc00017 	ldw	r19,0(r5)
 4029034:	803e3a16 	blt	r16,zero,4028920 <__flash_rwdata_start+0xffff30d0>
 4029038:	00ffdfc4 	movi	r3,-129
 402903c:	d8802215 	stw	r2,136(sp)
 4029040:	88e2703a 	and	r17,r17,r3
 4029044:	002b883a 	mov	r21,zero
 4029048:	983e9b26 	beq	r19,zero,4028ab8 <__flash_rwdata_start+0xffff3268>
 402904c:	00800244 	movi	r2,9
 4029050:	14fdc936 	bltu	r2,r19,4028778 <__flash_rwdata_start+0xffff2f28>
 4029054:	003e9a06 	br	4028ac0 <__flash_rwdata_start+0xffff3270>
 4029058:	00800c04 	movi	r2,48
 402905c:	d8c01d45 	stb	r3,117(sp)
 4029060:	d8801d05 	stb	r2,116(sp)
 4029064:	d8001d85 	stb	zero,118(sp)
 4029068:	88c00094 	ori	r3,r17,2
 402906c:	80009c16 	blt	r16,zero,40292e0 <___vfiprintf_internal_r+0x1368>
 4029070:	00bfdfc4 	movi	r2,-129
 4029074:	88a2703a 	and	r17,r17,r2
 4029078:	8c400094 	ori	r17,r17,2
 402907c:	002b883a 	mov	r21,zero
 4029080:	003f8506 	br	4028e98 <__flash_rwdata_start+0xffff3648>
 4029084:	b029883a 	mov	r20,r22
 4029088:	003c0b06 	br	40280b8 <__flash_rwdata_start+0xffff2868>
 402908c:	04e7c83a 	sub	r19,zero,r19
 4029090:	05400b44 	movi	r21,45
 4029094:	9804c03a 	cmpne	r2,r19,zero
 4029098:	0529c83a 	sub	r20,zero,r20
 402909c:	dd401d85 	stb	r21,118(sp)
 40290a0:	a0a9c83a 	sub	r20,r20,r2
 40290a4:	80009716 	blt	r16,zero,4029304 <___vfiprintf_internal_r+0x138c>
 40290a8:	00bfdfc4 	movi	r2,-129
 40290ac:	88a2703a 	and	r17,r17,r2
 40290b0:	003db006 	br	4028774 <__flash_rwdata_start+0xffff2f24>
 40290b4:	b0c00007 	ldb	r3,0(r22)
 40290b8:	003c0c06 	br	40280ec <__flash_rwdata_start+0xffff289c>
 40290bc:	8880100c 	andi	r2,r17,64
 40290c0:	d8001d85 	stb	zero,118(sp)
 40290c4:	1000461e 	bne	r2,zero,40291e0 <___vfiprintf_internal_r+0x1268>
 40290c8:	d9002217 	ldw	r4,136(sp)
 40290cc:	0029883a 	mov	r20,zero
 40290d0:	20800104 	addi	r2,r4,4
 40290d4:	24c00017 	ldw	r19,0(r4)
 40290d8:	803df80e 	bge	r16,zero,40288bc <__flash_rwdata_start+0xffff306c>
 40290dc:	9d06b03a 	or	r3,r19,r20
 40290e0:	d8802215 	stw	r2,136(sp)
 40290e4:	183d5e1e 	bne	r3,zero,4028660 <__flash_rwdata_start+0xffff2e10>
 40290e8:	002b883a 	mov	r21,zero
 40290ec:	0005883a 	mov	r2,zero
 40290f0:	003e1006 	br	4028934 <__flash_rwdata_start+0xffff30e4>
 40290f4:	8880040c 	andi	r2,r17,16
 40290f8:	1000321e 	bne	r2,zero,40291c4 <___vfiprintf_internal_r+0x124c>
 40290fc:	8c40100c 	andi	r17,r17,64
 4029100:	88008d26 	beq	r17,zero,4029338 <___vfiprintf_internal_r+0x13c0>
 4029104:	d9402217 	ldw	r5,136(sp)
 4029108:	d8c02417 	ldw	r3,144(sp)
 402910c:	28800017 	ldw	r2,0(r5)
 4029110:	29400104 	addi	r5,r5,4
 4029114:	d9402215 	stw	r5,136(sp)
 4029118:	10c0000d 	sth	r3,0(r2)
 402911c:	003bca06 	br	4028048 <__flash_rwdata_start+0xffff27f8>
 4029120:	8880100c 	andi	r2,r17,64
 4029124:	10003a26 	beq	r2,zero,4029210 <___vfiprintf_internal_r+0x1298>
 4029128:	d8802217 	ldw	r2,136(sp)
 402912c:	14c0000f 	ldh	r19,0(r2)
 4029130:	10800104 	addi	r2,r2,4
 4029134:	d8802215 	stw	r2,136(sp)
 4029138:	9829d7fa 	srai	r20,r19,31
 402913c:	a005883a 	mov	r2,r20
 4029140:	003d8506 	br	4028758 <__flash_rwdata_start+0xffff2f08>
 4029144:	8880100c 	andi	r2,r17,64
 4029148:	10002b26 	beq	r2,zero,40291f8 <___vfiprintf_internal_r+0x1280>
 402914c:	d8802217 	ldw	r2,136(sp)
 4029150:	0029883a 	mov	r20,zero
 4029154:	14c0000b 	ldhu	r19,0(r2)
 4029158:	10800104 	addi	r2,r2,4
 402915c:	d8802215 	stw	r2,136(sp)
 4029160:	003d5d06 	br	40286d8 <__flash_rwdata_start+0xffff2e88>
 4029164:	d9402017 	ldw	r5,128(sp)
 4029168:	d9002117 	ldw	r4,132(sp)
 402916c:	d9801a04 	addi	r6,sp,104
 4029170:	d8c02a15 	stw	r3,168(sp)
 4029174:	d9c02b15 	stw	r7,172(sp)
 4029178:	4027e640 	call	4027e64 <__sprint_r.part.0>
 402917c:	d8c02a17 	ldw	r3,168(sp)
 4029180:	d9c02b17 	ldw	r7,172(sp)
 4029184:	103eb41e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 4029188:	d9001b17 	ldw	r4,108(sp)
 402918c:	d8801c17 	ldw	r2,112(sp)
 4029190:	d811883a 	mov	r8,sp
 4029194:	21400044 	addi	r5,r4,1
 4029198:	003e6706 	br	4028b38 <__flash_rwdata_start+0xffff32e8>
 402919c:	00bfffc4 	movi	r2,-1
 40291a0:	003c4a06 	br	40282cc <__flash_rwdata_start+0xffff2a7c>
 40291a4:	9805883a 	mov	r2,r19
 40291a8:	003ee806 	br	4028d4c <__flash_rwdata_start+0xffff34fc>
 40291ac:	d8c02217 	ldw	r3,136(sp)
 40291b0:	0029883a 	mov	r20,zero
 40291b4:	18800104 	addi	r2,r3,4
 40291b8:	1cc0000b 	ldhu	r19,0(r3)
 40291bc:	803f9e0e 	bge	r16,zero,4029038 <__flash_rwdata_start+0xffff37e8>
 40291c0:	003dd706 	br	4028920 <__flash_rwdata_start+0xffff30d0>
 40291c4:	d8c02217 	ldw	r3,136(sp)
 40291c8:	d9002417 	ldw	r4,144(sp)
 40291cc:	18800017 	ldw	r2,0(r3)
 40291d0:	18c00104 	addi	r3,r3,4
 40291d4:	d8c02215 	stw	r3,136(sp)
 40291d8:	11000015 	stw	r4,0(r2)
 40291dc:	003b9a06 	br	4028048 <__flash_rwdata_start+0xffff27f8>
 40291e0:	d8c02217 	ldw	r3,136(sp)
 40291e4:	0029883a 	mov	r20,zero
 40291e8:	18800104 	addi	r2,r3,4
 40291ec:	1cc0000b 	ldhu	r19,0(r3)
 40291f0:	803db20e 	bge	r16,zero,40288bc <__flash_rwdata_start+0xffff306c>
 40291f4:	003fb906 	br	40290dc <__flash_rwdata_start+0xffff388c>
 40291f8:	d9002217 	ldw	r4,136(sp)
 40291fc:	0029883a 	mov	r20,zero
 4029200:	24c00017 	ldw	r19,0(r4)
 4029204:	21000104 	addi	r4,r4,4
 4029208:	d9002215 	stw	r4,136(sp)
 402920c:	003d3206 	br	40286d8 <__flash_rwdata_start+0xffff2e88>
 4029210:	d8c02217 	ldw	r3,136(sp)
 4029214:	1cc00017 	ldw	r19,0(r3)
 4029218:	18c00104 	addi	r3,r3,4
 402921c:	d8c02215 	stw	r3,136(sp)
 4029220:	9829d7fa 	srai	r20,r19,31
 4029224:	a005883a 	mov	r2,r20
 4029228:	003d4b06 	br	4028758 <__flash_rwdata_start+0xffff2f08>
 402922c:	0009883a 	mov	r4,zero
 4029230:	01400044 	movi	r5,1
 4029234:	d811883a 	mov	r8,sp
 4029238:	003e4f06 	br	4028b78 <__flash_rwdata_start+0xffff3328>
 402923c:	d8c02215 	stw	r3,136(sp)
 4029240:	002b883a 	mov	r21,zero
 4029244:	003db806 	br	4028928 <__flash_rwdata_start+0xffff30d8>
 4029248:	d811883a 	mov	r8,sp
 402924c:	003e9606 	br	4028ca8 <__flash_rwdata_start+0xffff3458>
 4029250:	01000034 	movhi	r4,0
 4029254:	2100e804 	addi	r4,r4,928
 4029258:	d9002315 	stw	r4,140(sp)
 402925c:	003e6306 	br	4028bec <__flash_rwdata_start+0xffff339c>
 4029260:	b0c00043 	ldbu	r3,1(r22)
 4029264:	8c400814 	ori	r17,r17,32
 4029268:	b5800044 	addi	r22,r22,1
 402926c:	18c03fcc 	andi	r3,r3,255
 4029270:	18c0201c 	xori	r3,r3,128
 4029274:	18ffe004 	addi	r3,r3,-128
 4029278:	003b9c06 	br	40280ec <__flash_rwdata_start+0xffff289c>
 402927c:	b809883a 	mov	r4,r23
 4029280:	da002a15 	stw	r8,168(sp)
 4029284:	40206e80 	call	40206e8 <strlen>
 4029288:	1029883a 	mov	r20,r2
 402928c:	dd401d83 	ldbu	r21,118(sp)
 4029290:	df002215 	stw	fp,136(sp)
 4029294:	0021883a 	mov	r16,zero
 4029298:	da002a17 	ldw	r8,168(sp)
 402929c:	003c3906 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 40292a0:	d9402017 	ldw	r5,128(sp)
 40292a4:	d9002117 	ldw	r4,132(sp)
 40292a8:	d9801a04 	addi	r6,sp,104
 40292ac:	4027e640 	call	4027e64 <__sprint_r.part.0>
 40292b0:	103e691e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff3408>
 40292b4:	d9001b17 	ldw	r4,108(sp)
 40292b8:	d8801c17 	ldw	r2,112(sp)
 40292bc:	d811883a 	mov	r8,sp
 40292c0:	21400044 	addi	r5,r4,1
 40292c4:	003e2e06 	br	4028b80 <__flash_rwdata_start+0xffff3330>
 40292c8:	01000034 	movhi	r4,0
 40292cc:	2100ec04 	addi	r4,r4,944
 40292d0:	d9002315 	stw	r4,140(sp)
 40292d4:	d9001b17 	ldw	r4,108(sp)
 40292d8:	21000044 	addi	r4,r4,1
 40292dc:	003c5e06 	br	4028458 <__flash_rwdata_start+0xffff2c08>
 40292e0:	002b883a 	mov	r21,zero
 40292e4:	00800084 	movi	r2,2
 40292e8:	10803fcc 	andi	r2,r2,255
 40292ec:	01000044 	movi	r4,1
 40292f0:	11002b26 	beq	r2,r4,40293a0 <___vfiprintf_internal_r+0x1428>
 40292f4:	01000084 	movi	r4,2
 40292f8:	11002b1e 	bne	r2,r4,40293a8 <___vfiprintf_internal_r+0x1430>
 40292fc:	1823883a 	mov	r17,r3
 4029300:	003ee506 	br	4028e98 <__flash_rwdata_start+0xffff3648>
 4029304:	8807883a 	mov	r3,r17
 4029308:	00800044 	movi	r2,1
 402930c:	003ff606 	br	40292e8 <__flash_rwdata_start+0xffff3a98>
 4029310:	00800184 	movi	r2,6
 4029314:	1400012e 	bgeu	r2,r16,402931c <___vfiprintf_internal_r+0x13a4>
 4029318:	1021883a 	mov	r16,r2
 402931c:	8029883a 	mov	r20,r16
 4029320:	8027883a 	mov	r19,r16
 4029324:	80002216 	blt	r16,zero,40293b0 <___vfiprintf_internal_r+0x1438>
 4029328:	05c00034 	movhi	r23,0
 402932c:	df002215 	stw	fp,136(sp)
 4029330:	bdc08c04 	addi	r23,r23,560
 4029334:	003cfb06 	br	4028724 <__flash_rwdata_start+0xffff2ed4>
 4029338:	d9002217 	ldw	r4,136(sp)
 402933c:	d9402417 	ldw	r5,144(sp)
 4029340:	20800017 	ldw	r2,0(r4)
 4029344:	21000104 	addi	r4,r4,4
 4029348:	d9002215 	stw	r4,136(sp)
 402934c:	11400015 	stw	r5,0(r2)
 4029350:	003b3d06 	br	4028048 <__flash_rwdata_start+0xffff27f8>
 4029354:	01400034 	movhi	r5,0
 4029358:	2940ec04 	addi	r5,r5,944
 402935c:	d9402315 	stw	r5,140(sp)
 4029360:	d9401b17 	ldw	r5,108(sp)
 4029364:	29400044 	addi	r5,r5,1
 4029368:	003e6d06 	br	4028d20 <__flash_rwdata_start+0xffff34d0>
 402936c:	8029883a 	mov	r20,r16
 4029370:	dd401d83 	ldbu	r21,118(sp)
 4029374:	df002215 	stw	fp,136(sp)
 4029378:	0021883a 	mov	r16,zero
 402937c:	003c0106 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 4029380:	00c00034 	movhi	r3,0
 4029384:	18c0e804 	addi	r3,r3,928
 4029388:	d8c02315 	stw	r3,140(sp)
 402938c:	280d883a 	mov	r6,r5
 4029390:	003c6906 	br	4028538 <__flash_rwdata_start+0xffff2ce8>
 4029394:	802d883a 	mov	r22,r16
 4029398:	0021883a 	mov	r16,zero
 402939c:	003b5406 	br	40280f0 <__flash_rwdata_start+0xffff28a0>
 40293a0:	1823883a 	mov	r17,r3
 40293a4:	003cf306 	br	4028774 <__flash_rwdata_start+0xffff2f24>
 40293a8:	1823883a 	mov	r17,r3
 40293ac:	003cad06 	br	4028664 <__flash_rwdata_start+0xffff2e14>
 40293b0:	0027883a 	mov	r19,zero
 40293b4:	003fdc06 	br	4029328 <__flash_rwdata_start+0xffff3ad8>
 40293b8:	d9402217 	ldw	r5,136(sp)
 40293bc:	8005883a 	mov	r2,r16
 40293c0:	b0c00043 	ldbu	r3,1(r22)
 40293c4:	2c000017 	ldw	r16,0(r5)
 40293c8:	29000104 	addi	r4,r5,4
 40293cc:	d9002215 	stw	r4,136(sp)
 40293d0:	102d883a 	mov	r22,r2
 40293d4:	803fa50e 	bge	r16,zero,402926c <__flash_rwdata_start+0xffff3a1c>
 40293d8:	18c03fcc 	andi	r3,r3,255
 40293dc:	18c0201c 	xori	r3,r3,128
 40293e0:	043fffc4 	movi	r16,-1
 40293e4:	18ffe004 	addi	r3,r3,-128
 40293e8:	003b4006 	br	40280ec <__flash_rwdata_start+0xffff289c>
 40293ec:	d9402303 	ldbu	r5,140(sp)
 40293f0:	d9401d85 	stb	r5,118(sp)
 40293f4:	003cae06 	br	40286b0 <__flash_rwdata_start+0xffff2e60>
 40293f8:	d8c02303 	ldbu	r3,140(sp)
 40293fc:	d8c01d85 	stb	r3,118(sp)
 4029400:	003d1406 	br	4028854 <__flash_rwdata_start+0xffff3004>
 4029404:	d8c02303 	ldbu	r3,140(sp)
 4029408:	d8c01d85 	stb	r3,118(sp)
 402940c:	003cca06 	br	4028738 <__flash_rwdata_start+0xffff2ee8>
 4029410:	8880004c 	andi	r2,r17,1
 4029414:	002b883a 	mov	r21,zero
 4029418:	10000526 	beq	r2,zero,4029430 <___vfiprintf_internal_r+0x14b8>
 402941c:	00800c04 	movi	r2,48
 4029420:	d88019c5 	stb	r2,103(sp)
 4029424:	dd002817 	ldw	r20,160(sp)
 4029428:	ddc019c4 	addi	r23,sp,103
 402942c:	003bd506 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 4029430:	0029883a 	mov	r20,zero
 4029434:	ddc01a04 	addi	r23,sp,104
 4029438:	003bd206 	br	4028384 <__flash_rwdata_start+0xffff2b34>
 402943c:	d9002303 	ldbu	r4,140(sp)
 4029440:	d9001d85 	stb	r4,118(sp)
 4029444:	003da606 	br	4028ae0 <__flash_rwdata_start+0xffff3290>
 4029448:	d8c02303 	ldbu	r3,140(sp)
 402944c:	d8c01d85 	stb	r3,118(sp)
 4029450:	003c7606 	br	402862c <__flash_rwdata_start+0xffff2ddc>
 4029454:	d8c02303 	ldbu	r3,140(sp)
 4029458:	d8c01d85 	stb	r3,118(sp)
 402945c:	003c6506 	br	40285f4 <__flash_rwdata_start+0xffff2da4>
 4029460:	d9002303 	ldbu	r4,140(sp)
 4029464:	d9001d85 	stb	r4,118(sp)
 4029468:	003d3d06 	br	4028960 <__flash_rwdata_start+0xffff3110>
 402946c:	d8c02303 	ldbu	r3,140(sp)
 4029470:	d8c01d85 	stb	r3,118(sp)
 4029474:	003d1d06 	br	40288ec <__flash_rwdata_start+0xffff309c>
 4029478:	d8c02303 	ldbu	r3,140(sp)
 402947c:	d8c01d85 	stb	r3,118(sp)
 4029480:	003d0306 	br	4028890 <__flash_rwdata_start+0xffff3040>

04029484 <__vfiprintf_internal>:
 4029484:	00800034 	movhi	r2,0
 4029488:	10881c04 	addi	r2,r2,8304
 402948c:	300f883a 	mov	r7,r6
 4029490:	280d883a 	mov	r6,r5
 4029494:	200b883a 	mov	r5,r4
 4029498:	11000017 	ldw	r4,0(r2)
 402949c:	4027f781 	jmpi	4027f78 <___vfiprintf_internal_r>

040294a0 <__sbprintf>:
 40294a0:	2880030b 	ldhu	r2,12(r5)
 40294a4:	2ac01917 	ldw	r11,100(r5)
 40294a8:	2a80038b 	ldhu	r10,14(r5)
 40294ac:	2a400717 	ldw	r9,28(r5)
 40294b0:	2a000917 	ldw	r8,36(r5)
 40294b4:	defee204 	addi	sp,sp,-1144
 40294b8:	00c10004 	movi	r3,1024
 40294bc:	dc011a15 	stw	r16,1128(sp)
 40294c0:	10bfff4c 	andi	r2,r2,65533
 40294c4:	2821883a 	mov	r16,r5
 40294c8:	d8cb883a 	add	r5,sp,r3
 40294cc:	dc811c15 	stw	r18,1136(sp)
 40294d0:	dc411b15 	stw	r17,1132(sp)
 40294d4:	dfc11d15 	stw	ra,1140(sp)
 40294d8:	2025883a 	mov	r18,r4
 40294dc:	d881030d 	sth	r2,1036(sp)
 40294e0:	dac11915 	stw	r11,1124(sp)
 40294e4:	da81038d 	sth	r10,1038(sp)
 40294e8:	da410715 	stw	r9,1052(sp)
 40294ec:	da010915 	stw	r8,1060(sp)
 40294f0:	dec10015 	stw	sp,1024(sp)
 40294f4:	dec10415 	stw	sp,1040(sp)
 40294f8:	d8c10215 	stw	r3,1032(sp)
 40294fc:	d8c10515 	stw	r3,1044(sp)
 4029500:	d8010615 	stw	zero,1048(sp)
 4029504:	4027f780 	call	4027f78 <___vfiprintf_internal_r>
 4029508:	1023883a 	mov	r17,r2
 402950c:	10000416 	blt	r2,zero,4029520 <__sbprintf+0x80>
 4029510:	d9410004 	addi	r5,sp,1024
 4029514:	9009883a 	mov	r4,r18
 4029518:	40247540 	call	4024754 <_fflush_r>
 402951c:	10000d1e 	bne	r2,zero,4029554 <__sbprintf+0xb4>
 4029520:	d881030b 	ldhu	r2,1036(sp)
 4029524:	1080100c 	andi	r2,r2,64
 4029528:	10000326 	beq	r2,zero,4029538 <__sbprintf+0x98>
 402952c:	8080030b 	ldhu	r2,12(r16)
 4029530:	10801014 	ori	r2,r2,64
 4029534:	8080030d 	sth	r2,12(r16)
 4029538:	8805883a 	mov	r2,r17
 402953c:	dfc11d17 	ldw	ra,1140(sp)
 4029540:	dc811c17 	ldw	r18,1136(sp)
 4029544:	dc411b17 	ldw	r17,1132(sp)
 4029548:	dc011a17 	ldw	r16,1128(sp)
 402954c:	dec11e04 	addi	sp,sp,1144
 4029550:	f800283a 	ret
 4029554:	047fffc4 	movi	r17,-1
 4029558:	003ff106 	br	4029520 <__flash_rwdata_start+0xffff3cd0>

0402955c <_write_r>:
 402955c:	defffd04 	addi	sp,sp,-12
 4029560:	2805883a 	mov	r2,r5
 4029564:	dc000015 	stw	r16,0(sp)
 4029568:	04000034 	movhi	r16,0
 402956c:	dc400115 	stw	r17,4(sp)
 4029570:	300b883a 	mov	r5,r6
 4029574:	84083604 	addi	r16,r16,8408
 4029578:	2023883a 	mov	r17,r4
 402957c:	380d883a 	mov	r6,r7
 4029580:	1009883a 	mov	r4,r2
 4029584:	dfc00215 	stw	ra,8(sp)
 4029588:	80000015 	stw	zero,0(r16)
 402958c:	402ddac0 	call	402ddac <write>
 4029590:	00ffffc4 	movi	r3,-1
 4029594:	10c00526 	beq	r2,r3,40295ac <_write_r+0x50>
 4029598:	dfc00217 	ldw	ra,8(sp)
 402959c:	dc400117 	ldw	r17,4(sp)
 40295a0:	dc000017 	ldw	r16,0(sp)
 40295a4:	dec00304 	addi	sp,sp,12
 40295a8:	f800283a 	ret
 40295ac:	80c00017 	ldw	r3,0(r16)
 40295b0:	183ff926 	beq	r3,zero,4029598 <__flash_rwdata_start+0xffff3d48>
 40295b4:	88c00015 	stw	r3,0(r17)
 40295b8:	003ff706 	br	4029598 <__flash_rwdata_start+0xffff3d48>

040295bc <_close_r>:
 40295bc:	defffd04 	addi	sp,sp,-12
 40295c0:	dc000015 	stw	r16,0(sp)
 40295c4:	04000034 	movhi	r16,0
 40295c8:	dc400115 	stw	r17,4(sp)
 40295cc:	84083604 	addi	r16,r16,8408
 40295d0:	2023883a 	mov	r17,r4
 40295d4:	2809883a 	mov	r4,r5
 40295d8:	dfc00215 	stw	ra,8(sp)
 40295dc:	80000015 	stw	zero,0(r16)
 40295e0:	402d5240 	call	402d524 <close>
 40295e4:	00ffffc4 	movi	r3,-1
 40295e8:	10c00526 	beq	r2,r3,4029600 <_close_r+0x44>
 40295ec:	dfc00217 	ldw	ra,8(sp)
 40295f0:	dc400117 	ldw	r17,4(sp)
 40295f4:	dc000017 	ldw	r16,0(sp)
 40295f8:	dec00304 	addi	sp,sp,12
 40295fc:	f800283a 	ret
 4029600:	80c00017 	ldw	r3,0(r16)
 4029604:	183ff926 	beq	r3,zero,40295ec <__flash_rwdata_start+0xffff3d9c>
 4029608:	88c00015 	stw	r3,0(r17)
 402960c:	003ff706 	br	40295ec <__flash_rwdata_start+0xffff3d9c>

04029610 <_calloc_r>:
 4029610:	defffe04 	addi	sp,sp,-8
 4029614:	2805883a 	mov	r2,r5
 4029618:	dc000015 	stw	r16,0(sp)
 402961c:	300b883a 	mov	r5,r6
 4029620:	2021883a 	mov	r16,r4
 4029624:	1009883a 	mov	r4,r2
 4029628:	dfc00115 	stw	ra,4(sp)
 402962c:	402ac1c0 	call	402ac1c <__mulsi3>
 4029630:	100b883a 	mov	r5,r2
 4029634:	8009883a 	mov	r4,r16
 4029638:	40258ac0 	call	40258ac <_malloc_r>
 402963c:	10002926 	beq	r2,zero,40296e4 <_calloc_r+0xd4>
 4029640:	11bfff17 	ldw	r6,-4(r2)
 4029644:	1021883a 	mov	r16,r2
 4029648:	00bfff04 	movi	r2,-4
 402964c:	308c703a 	and	r6,r6,r2
 4029650:	00c00904 	movi	r3,36
 4029654:	308d883a 	add	r6,r6,r2
 4029658:	19801636 	bltu	r3,r6,40296b4 <_calloc_r+0xa4>
 402965c:	008004c4 	movi	r2,19
 4029660:	11800b2e 	bgeu	r2,r6,4029690 <_calloc_r+0x80>
 4029664:	80000015 	stw	zero,0(r16)
 4029668:	80000115 	stw	zero,4(r16)
 402966c:	008006c4 	movi	r2,27
 4029670:	11801a2e 	bgeu	r2,r6,40296dc <_calloc_r+0xcc>
 4029674:	80000215 	stw	zero,8(r16)
 4029678:	80000315 	stw	zero,12(r16)
 402967c:	30c0151e 	bne	r6,r3,40296d4 <_calloc_r+0xc4>
 4029680:	80000415 	stw	zero,16(r16)
 4029684:	80800604 	addi	r2,r16,24
 4029688:	80000515 	stw	zero,20(r16)
 402968c:	00000106 	br	4029694 <_calloc_r+0x84>
 4029690:	8005883a 	mov	r2,r16
 4029694:	10000015 	stw	zero,0(r2)
 4029698:	10000115 	stw	zero,4(r2)
 402969c:	10000215 	stw	zero,8(r2)
 40296a0:	8005883a 	mov	r2,r16
 40296a4:	dfc00117 	ldw	ra,4(sp)
 40296a8:	dc000017 	ldw	r16,0(sp)
 40296ac:	dec00204 	addi	sp,sp,8
 40296b0:	f800283a 	ret
 40296b4:	000b883a 	mov	r5,zero
 40296b8:	8009883a 	mov	r4,r16
 40296bc:	40264400 	call	4026440 <memset>
 40296c0:	8005883a 	mov	r2,r16
 40296c4:	dfc00117 	ldw	ra,4(sp)
 40296c8:	dc000017 	ldw	r16,0(sp)
 40296cc:	dec00204 	addi	sp,sp,8
 40296d0:	f800283a 	ret
 40296d4:	80800404 	addi	r2,r16,16
 40296d8:	003fee06 	br	4029694 <__flash_rwdata_start+0xffff3e44>
 40296dc:	80800204 	addi	r2,r16,8
 40296e0:	003fec06 	br	4029694 <__flash_rwdata_start+0xffff3e44>
 40296e4:	0005883a 	mov	r2,zero
 40296e8:	003fee06 	br	40296a4 <__flash_rwdata_start+0xffff3e54>

040296ec <_fclose_r>:
 40296ec:	28003926 	beq	r5,zero,40297d4 <_fclose_r+0xe8>
 40296f0:	defffc04 	addi	sp,sp,-16
 40296f4:	dc400115 	stw	r17,4(sp)
 40296f8:	dc000015 	stw	r16,0(sp)
 40296fc:	dfc00315 	stw	ra,12(sp)
 4029700:	dc800215 	stw	r18,8(sp)
 4029704:	2023883a 	mov	r17,r4
 4029708:	2821883a 	mov	r16,r5
 402970c:	20000226 	beq	r4,zero,4029718 <_fclose_r+0x2c>
 4029710:	20800e17 	ldw	r2,56(r4)
 4029714:	10002726 	beq	r2,zero,40297b4 <_fclose_r+0xc8>
 4029718:	8080030f 	ldh	r2,12(r16)
 402971c:	1000071e 	bne	r2,zero,402973c <_fclose_r+0x50>
 4029720:	0005883a 	mov	r2,zero
 4029724:	dfc00317 	ldw	ra,12(sp)
 4029728:	dc800217 	ldw	r18,8(sp)
 402972c:	dc400117 	ldw	r17,4(sp)
 4029730:	dc000017 	ldw	r16,0(sp)
 4029734:	dec00404 	addi	sp,sp,16
 4029738:	f800283a 	ret
 402973c:	800b883a 	mov	r5,r16
 4029740:	8809883a 	mov	r4,r17
 4029744:	40245380 	call	4024538 <__sflush_r>
 4029748:	1025883a 	mov	r18,r2
 402974c:	80800b17 	ldw	r2,44(r16)
 4029750:	10000426 	beq	r2,zero,4029764 <_fclose_r+0x78>
 4029754:	81400717 	ldw	r5,28(r16)
 4029758:	8809883a 	mov	r4,r17
 402975c:	103ee83a 	callr	r2
 4029760:	10001616 	blt	r2,zero,40297bc <_fclose_r+0xd0>
 4029764:	8080030b 	ldhu	r2,12(r16)
 4029768:	1080200c 	andi	r2,r2,128
 402976c:	1000151e 	bne	r2,zero,40297c4 <_fclose_r+0xd8>
 4029770:	81400c17 	ldw	r5,48(r16)
 4029774:	28000526 	beq	r5,zero,402978c <_fclose_r+0xa0>
 4029778:	80801004 	addi	r2,r16,64
 402977c:	28800226 	beq	r5,r2,4029788 <_fclose_r+0x9c>
 4029780:	8809883a 	mov	r4,r17
 4029784:	4024cb40 	call	4024cb4 <_free_r>
 4029788:	80000c15 	stw	zero,48(r16)
 402978c:	81401117 	ldw	r5,68(r16)
 4029790:	28000326 	beq	r5,zero,40297a0 <_fclose_r+0xb4>
 4029794:	8809883a 	mov	r4,r17
 4029798:	4024cb40 	call	4024cb4 <_free_r>
 402979c:	80001115 	stw	zero,68(r16)
 40297a0:	4024b500 	call	4024b50 <__sfp_lock_acquire>
 40297a4:	8000030d 	sth	zero,12(r16)
 40297a8:	4024b540 	call	4024b54 <__sfp_lock_release>
 40297ac:	9005883a 	mov	r2,r18
 40297b0:	003fdc06 	br	4029724 <__flash_rwdata_start+0xffff3ed4>
 40297b4:	4024b400 	call	4024b40 <__sinit>
 40297b8:	003fd706 	br	4029718 <__flash_rwdata_start+0xffff3ec8>
 40297bc:	04bfffc4 	movi	r18,-1
 40297c0:	003fe806 	br	4029764 <__flash_rwdata_start+0xffff3f14>
 40297c4:	81400417 	ldw	r5,16(r16)
 40297c8:	8809883a 	mov	r4,r17
 40297cc:	4024cb40 	call	4024cb4 <_free_r>
 40297d0:	003fe706 	br	4029770 <__flash_rwdata_start+0xffff3f20>
 40297d4:	0005883a 	mov	r2,zero
 40297d8:	f800283a 	ret

040297dc <fclose>:
 40297dc:	00800034 	movhi	r2,0
 40297e0:	10881c04 	addi	r2,r2,8304
 40297e4:	200b883a 	mov	r5,r4
 40297e8:	11000017 	ldw	r4,0(r2)
 40297ec:	40296ec1 	jmpi	40296ec <_fclose_r>

040297f0 <__fputwc>:
 40297f0:	defff804 	addi	sp,sp,-32
 40297f4:	dcc00415 	stw	r19,16(sp)
 40297f8:	dc800315 	stw	r18,12(sp)
 40297fc:	dc000115 	stw	r16,4(sp)
 4029800:	dfc00715 	stw	ra,28(sp)
 4029804:	dd400615 	stw	r21,24(sp)
 4029808:	dd000515 	stw	r20,20(sp)
 402980c:	dc400215 	stw	r17,8(sp)
 4029810:	2027883a 	mov	r19,r4
 4029814:	2825883a 	mov	r18,r5
 4029818:	3021883a 	mov	r16,r6
 402981c:	402569c0 	call	402569c <__locale_mb_cur_max>
 4029820:	00c00044 	movi	r3,1
 4029824:	10c03e26 	beq	r2,r3,4029920 <__fputwc+0x130>
 4029828:	81c01704 	addi	r7,r16,92
 402982c:	900d883a 	mov	r6,r18
 4029830:	d80b883a 	mov	r5,sp
 4029834:	9809883a 	mov	r4,r19
 4029838:	4029cc00 	call	4029cc0 <_wcrtomb_r>
 402983c:	1029883a 	mov	r20,r2
 4029840:	00bfffc4 	movi	r2,-1
 4029844:	a0802026 	beq	r20,r2,40298c8 <__fputwc+0xd8>
 4029848:	d9400003 	ldbu	r5,0(sp)
 402984c:	a0001c26 	beq	r20,zero,40298c0 <__fputwc+0xd0>
 4029850:	0023883a 	mov	r17,zero
 4029854:	05400284 	movi	r21,10
 4029858:	00000906 	br	4029880 <__fputwc+0x90>
 402985c:	80800017 	ldw	r2,0(r16)
 4029860:	11400005 	stb	r5,0(r2)
 4029864:	80c00017 	ldw	r3,0(r16)
 4029868:	18c00044 	addi	r3,r3,1
 402986c:	80c00015 	stw	r3,0(r16)
 4029870:	8c400044 	addi	r17,r17,1
 4029874:	dc45883a 	add	r2,sp,r17
 4029878:	8d00112e 	bgeu	r17,r20,40298c0 <__fputwc+0xd0>
 402987c:	11400003 	ldbu	r5,0(r2)
 4029880:	80c00217 	ldw	r3,8(r16)
 4029884:	18ffffc4 	addi	r3,r3,-1
 4029888:	80c00215 	stw	r3,8(r16)
 402988c:	183ff30e 	bge	r3,zero,402985c <__flash_rwdata_start+0xffff400c>
 4029890:	80800617 	ldw	r2,24(r16)
 4029894:	18801916 	blt	r3,r2,40298fc <__fputwc+0x10c>
 4029898:	80800017 	ldw	r2,0(r16)
 402989c:	11400005 	stb	r5,0(r2)
 40298a0:	80800017 	ldw	r2,0(r16)
 40298a4:	10c00003 	ldbu	r3,0(r2)
 40298a8:	10800044 	addi	r2,r2,1
 40298ac:	1d402326 	beq	r3,r21,402993c <__fputwc+0x14c>
 40298b0:	80800015 	stw	r2,0(r16)
 40298b4:	8c400044 	addi	r17,r17,1
 40298b8:	dc45883a 	add	r2,sp,r17
 40298bc:	8d3fef36 	bltu	r17,r20,402987c <__flash_rwdata_start+0xffff402c>
 40298c0:	9005883a 	mov	r2,r18
 40298c4:	00000406 	br	40298d8 <__fputwc+0xe8>
 40298c8:	80c0030b 	ldhu	r3,12(r16)
 40298cc:	a005883a 	mov	r2,r20
 40298d0:	18c01014 	ori	r3,r3,64
 40298d4:	80c0030d 	sth	r3,12(r16)
 40298d8:	dfc00717 	ldw	ra,28(sp)
 40298dc:	dd400617 	ldw	r21,24(sp)
 40298e0:	dd000517 	ldw	r20,20(sp)
 40298e4:	dcc00417 	ldw	r19,16(sp)
 40298e8:	dc800317 	ldw	r18,12(sp)
 40298ec:	dc400217 	ldw	r17,8(sp)
 40298f0:	dc000117 	ldw	r16,4(sp)
 40298f4:	dec00804 	addi	sp,sp,32
 40298f8:	f800283a 	ret
 40298fc:	800d883a 	mov	r6,r16
 4029900:	29403fcc 	andi	r5,r5,255
 4029904:	9809883a 	mov	r4,r19
 4029908:	4029b680 	call	4029b68 <__swbuf_r>
 402990c:	10bfffe0 	cmpeqi	r2,r2,-1
 4029910:	10803fcc 	andi	r2,r2,255
 4029914:	103fd626 	beq	r2,zero,4029870 <__flash_rwdata_start+0xffff4020>
 4029918:	00bfffc4 	movi	r2,-1
 402991c:	003fee06 	br	40298d8 <__flash_rwdata_start+0xffff4088>
 4029920:	90ffffc4 	addi	r3,r18,-1
 4029924:	01003f84 	movi	r4,254
 4029928:	20ffbf36 	bltu	r4,r3,4029828 <__flash_rwdata_start+0xffff3fd8>
 402992c:	900b883a 	mov	r5,r18
 4029930:	dc800005 	stb	r18,0(sp)
 4029934:	1029883a 	mov	r20,r2
 4029938:	003fc506 	br	4029850 <__flash_rwdata_start+0xffff4000>
 402993c:	800d883a 	mov	r6,r16
 4029940:	a80b883a 	mov	r5,r21
 4029944:	9809883a 	mov	r4,r19
 4029948:	4029b680 	call	4029b68 <__swbuf_r>
 402994c:	10bfffe0 	cmpeqi	r2,r2,-1
 4029950:	003fef06 	br	4029910 <__flash_rwdata_start+0xffff40c0>

04029954 <_fputwc_r>:
 4029954:	3080030b 	ldhu	r2,12(r6)
 4029958:	10c8000c 	andi	r3,r2,8192
 402995c:	1800051e 	bne	r3,zero,4029974 <_fputwc_r+0x20>
 4029960:	30c01917 	ldw	r3,100(r6)
 4029964:	10880014 	ori	r2,r2,8192
 4029968:	3080030d 	sth	r2,12(r6)
 402996c:	18880014 	ori	r2,r3,8192
 4029970:	30801915 	stw	r2,100(r6)
 4029974:	40297f01 	jmpi	40297f0 <__fputwc>

04029978 <fputwc>:
 4029978:	00800034 	movhi	r2,0
 402997c:	defffc04 	addi	sp,sp,-16
 4029980:	10881c04 	addi	r2,r2,8304
 4029984:	dc000115 	stw	r16,4(sp)
 4029988:	14000017 	ldw	r16,0(r2)
 402998c:	dc400215 	stw	r17,8(sp)
 4029990:	dfc00315 	stw	ra,12(sp)
 4029994:	2023883a 	mov	r17,r4
 4029998:	80000226 	beq	r16,zero,40299a4 <fputwc+0x2c>
 402999c:	80800e17 	ldw	r2,56(r16)
 40299a0:	10001026 	beq	r2,zero,40299e4 <fputwc+0x6c>
 40299a4:	2880030b 	ldhu	r2,12(r5)
 40299a8:	10c8000c 	andi	r3,r2,8192
 40299ac:	1800051e 	bne	r3,zero,40299c4 <fputwc+0x4c>
 40299b0:	28c01917 	ldw	r3,100(r5)
 40299b4:	10880014 	ori	r2,r2,8192
 40299b8:	2880030d 	sth	r2,12(r5)
 40299bc:	18880014 	ori	r2,r3,8192
 40299c0:	28801915 	stw	r2,100(r5)
 40299c4:	280d883a 	mov	r6,r5
 40299c8:	8009883a 	mov	r4,r16
 40299cc:	880b883a 	mov	r5,r17
 40299d0:	dfc00317 	ldw	ra,12(sp)
 40299d4:	dc400217 	ldw	r17,8(sp)
 40299d8:	dc000117 	ldw	r16,4(sp)
 40299dc:	dec00404 	addi	sp,sp,16
 40299e0:	40297f01 	jmpi	40297f0 <__fputwc>
 40299e4:	8009883a 	mov	r4,r16
 40299e8:	d9400015 	stw	r5,0(sp)
 40299ec:	4024b400 	call	4024b40 <__sinit>
 40299f0:	d9400017 	ldw	r5,0(sp)
 40299f4:	003feb06 	br	40299a4 <__flash_rwdata_start+0xffff4154>

040299f8 <_fstat_r>:
 40299f8:	defffd04 	addi	sp,sp,-12
 40299fc:	2805883a 	mov	r2,r5
 4029a00:	dc000015 	stw	r16,0(sp)
 4029a04:	04000034 	movhi	r16,0
 4029a08:	dc400115 	stw	r17,4(sp)
 4029a0c:	84083604 	addi	r16,r16,8408
 4029a10:	2023883a 	mov	r17,r4
 4029a14:	300b883a 	mov	r5,r6
 4029a18:	1009883a 	mov	r4,r2
 4029a1c:	dfc00215 	stw	ra,8(sp)
 4029a20:	80000015 	stw	zero,0(r16)
 4029a24:	402d6640 	call	402d664 <fstat>
 4029a28:	00ffffc4 	movi	r3,-1
 4029a2c:	10c00526 	beq	r2,r3,4029a44 <_fstat_r+0x4c>
 4029a30:	dfc00217 	ldw	ra,8(sp)
 4029a34:	dc400117 	ldw	r17,4(sp)
 4029a38:	dc000017 	ldw	r16,0(sp)
 4029a3c:	dec00304 	addi	sp,sp,12
 4029a40:	f800283a 	ret
 4029a44:	80c00017 	ldw	r3,0(r16)
 4029a48:	183ff926 	beq	r3,zero,4029a30 <__flash_rwdata_start+0xffff41e0>
 4029a4c:	88c00015 	stw	r3,0(r17)
 4029a50:	003ff706 	br	4029a30 <__flash_rwdata_start+0xffff41e0>

04029a54 <_isatty_r>:
 4029a54:	defffd04 	addi	sp,sp,-12
 4029a58:	dc000015 	stw	r16,0(sp)
 4029a5c:	04000034 	movhi	r16,0
 4029a60:	dc400115 	stw	r17,4(sp)
 4029a64:	84083604 	addi	r16,r16,8408
 4029a68:	2023883a 	mov	r17,r4
 4029a6c:	2809883a 	mov	r4,r5
 4029a70:	dfc00215 	stw	ra,8(sp)
 4029a74:	80000015 	stw	zero,0(r16)
 4029a78:	402d7580 	call	402d758 <isatty>
 4029a7c:	00ffffc4 	movi	r3,-1
 4029a80:	10c00526 	beq	r2,r3,4029a98 <_isatty_r+0x44>
 4029a84:	dfc00217 	ldw	ra,8(sp)
 4029a88:	dc400117 	ldw	r17,4(sp)
 4029a8c:	dc000017 	ldw	r16,0(sp)
 4029a90:	dec00304 	addi	sp,sp,12
 4029a94:	f800283a 	ret
 4029a98:	80c00017 	ldw	r3,0(r16)
 4029a9c:	183ff926 	beq	r3,zero,4029a84 <__flash_rwdata_start+0xffff4234>
 4029aa0:	88c00015 	stw	r3,0(r17)
 4029aa4:	003ff706 	br	4029a84 <__flash_rwdata_start+0xffff4234>

04029aa8 <_lseek_r>:
 4029aa8:	defffd04 	addi	sp,sp,-12
 4029aac:	2805883a 	mov	r2,r5
 4029ab0:	dc000015 	stw	r16,0(sp)
 4029ab4:	04000034 	movhi	r16,0
 4029ab8:	dc400115 	stw	r17,4(sp)
 4029abc:	300b883a 	mov	r5,r6
 4029ac0:	84083604 	addi	r16,r16,8408
 4029ac4:	2023883a 	mov	r17,r4
 4029ac8:	380d883a 	mov	r6,r7
 4029acc:	1009883a 	mov	r4,r2
 4029ad0:	dfc00215 	stw	ra,8(sp)
 4029ad4:	80000015 	stw	zero,0(r16)
 4029ad8:	402d92c0 	call	402d92c <lseek>
 4029adc:	00ffffc4 	movi	r3,-1
 4029ae0:	10c00526 	beq	r2,r3,4029af8 <_lseek_r+0x50>
 4029ae4:	dfc00217 	ldw	ra,8(sp)
 4029ae8:	dc400117 	ldw	r17,4(sp)
 4029aec:	dc000017 	ldw	r16,0(sp)
 4029af0:	dec00304 	addi	sp,sp,12
 4029af4:	f800283a 	ret
 4029af8:	80c00017 	ldw	r3,0(r16)
 4029afc:	183ff926 	beq	r3,zero,4029ae4 <__flash_rwdata_start+0xffff4294>
 4029b00:	88c00015 	stw	r3,0(r17)
 4029b04:	003ff706 	br	4029ae4 <__flash_rwdata_start+0xffff4294>

04029b08 <_read_r>:
 4029b08:	defffd04 	addi	sp,sp,-12
 4029b0c:	2805883a 	mov	r2,r5
 4029b10:	dc000015 	stw	r16,0(sp)
 4029b14:	04000034 	movhi	r16,0
 4029b18:	dc400115 	stw	r17,4(sp)
 4029b1c:	300b883a 	mov	r5,r6
 4029b20:	84083604 	addi	r16,r16,8408
 4029b24:	2023883a 	mov	r17,r4
 4029b28:	380d883a 	mov	r6,r7
 4029b2c:	1009883a 	mov	r4,r2
 4029b30:	dfc00215 	stw	ra,8(sp)
 4029b34:	80000015 	stw	zero,0(r16)
 4029b38:	402db080 	call	402db08 <read>
 4029b3c:	00ffffc4 	movi	r3,-1
 4029b40:	10c00526 	beq	r2,r3,4029b58 <_read_r+0x50>
 4029b44:	dfc00217 	ldw	ra,8(sp)
 4029b48:	dc400117 	ldw	r17,4(sp)
 4029b4c:	dc000017 	ldw	r16,0(sp)
 4029b50:	dec00304 	addi	sp,sp,12
 4029b54:	f800283a 	ret
 4029b58:	80c00017 	ldw	r3,0(r16)
 4029b5c:	183ff926 	beq	r3,zero,4029b44 <__flash_rwdata_start+0xffff42f4>
 4029b60:	88c00015 	stw	r3,0(r17)
 4029b64:	003ff706 	br	4029b44 <__flash_rwdata_start+0xffff42f4>

04029b68 <__swbuf_r>:
 4029b68:	defffb04 	addi	sp,sp,-20
 4029b6c:	dcc00315 	stw	r19,12(sp)
 4029b70:	dc800215 	stw	r18,8(sp)
 4029b74:	dc000015 	stw	r16,0(sp)
 4029b78:	dfc00415 	stw	ra,16(sp)
 4029b7c:	dc400115 	stw	r17,4(sp)
 4029b80:	2025883a 	mov	r18,r4
 4029b84:	2827883a 	mov	r19,r5
 4029b88:	3021883a 	mov	r16,r6
 4029b8c:	20000226 	beq	r4,zero,4029b98 <__swbuf_r+0x30>
 4029b90:	20800e17 	ldw	r2,56(r4)
 4029b94:	10004226 	beq	r2,zero,4029ca0 <__swbuf_r+0x138>
 4029b98:	80800617 	ldw	r2,24(r16)
 4029b9c:	8100030b 	ldhu	r4,12(r16)
 4029ba0:	80800215 	stw	r2,8(r16)
 4029ba4:	2080020c 	andi	r2,r4,8
 4029ba8:	10003626 	beq	r2,zero,4029c84 <__swbuf_r+0x11c>
 4029bac:	80c00417 	ldw	r3,16(r16)
 4029bb0:	18003426 	beq	r3,zero,4029c84 <__swbuf_r+0x11c>
 4029bb4:	2088000c 	andi	r2,r4,8192
 4029bb8:	9c403fcc 	andi	r17,r19,255
 4029bbc:	10001a26 	beq	r2,zero,4029c28 <__swbuf_r+0xc0>
 4029bc0:	80800017 	ldw	r2,0(r16)
 4029bc4:	81000517 	ldw	r4,20(r16)
 4029bc8:	10c7c83a 	sub	r3,r2,r3
 4029bcc:	1900200e 	bge	r3,r4,4029c50 <__swbuf_r+0xe8>
 4029bd0:	18c00044 	addi	r3,r3,1
 4029bd4:	81000217 	ldw	r4,8(r16)
 4029bd8:	11400044 	addi	r5,r2,1
 4029bdc:	81400015 	stw	r5,0(r16)
 4029be0:	213fffc4 	addi	r4,r4,-1
 4029be4:	81000215 	stw	r4,8(r16)
 4029be8:	14c00005 	stb	r19,0(r2)
 4029bec:	80800517 	ldw	r2,20(r16)
 4029bf0:	10c01e26 	beq	r2,r3,4029c6c <__swbuf_r+0x104>
 4029bf4:	8080030b 	ldhu	r2,12(r16)
 4029bf8:	1080004c 	andi	r2,r2,1
 4029bfc:	10000226 	beq	r2,zero,4029c08 <__swbuf_r+0xa0>
 4029c00:	00800284 	movi	r2,10
 4029c04:	88801926 	beq	r17,r2,4029c6c <__swbuf_r+0x104>
 4029c08:	8805883a 	mov	r2,r17
 4029c0c:	dfc00417 	ldw	ra,16(sp)
 4029c10:	dcc00317 	ldw	r19,12(sp)
 4029c14:	dc800217 	ldw	r18,8(sp)
 4029c18:	dc400117 	ldw	r17,4(sp)
 4029c1c:	dc000017 	ldw	r16,0(sp)
 4029c20:	dec00504 	addi	sp,sp,20
 4029c24:	f800283a 	ret
 4029c28:	81401917 	ldw	r5,100(r16)
 4029c2c:	00b7ffc4 	movi	r2,-8193
 4029c30:	21080014 	ori	r4,r4,8192
 4029c34:	2884703a 	and	r2,r5,r2
 4029c38:	80801915 	stw	r2,100(r16)
 4029c3c:	80800017 	ldw	r2,0(r16)
 4029c40:	8100030d 	sth	r4,12(r16)
 4029c44:	81000517 	ldw	r4,20(r16)
 4029c48:	10c7c83a 	sub	r3,r2,r3
 4029c4c:	193fe016 	blt	r3,r4,4029bd0 <__flash_rwdata_start+0xffff4380>
 4029c50:	800b883a 	mov	r5,r16
 4029c54:	9009883a 	mov	r4,r18
 4029c58:	40247540 	call	4024754 <_fflush_r>
 4029c5c:	1000071e 	bne	r2,zero,4029c7c <__swbuf_r+0x114>
 4029c60:	80800017 	ldw	r2,0(r16)
 4029c64:	00c00044 	movi	r3,1
 4029c68:	003fda06 	br	4029bd4 <__flash_rwdata_start+0xffff4384>
 4029c6c:	800b883a 	mov	r5,r16
 4029c70:	9009883a 	mov	r4,r18
 4029c74:	40247540 	call	4024754 <_fflush_r>
 4029c78:	103fe326 	beq	r2,zero,4029c08 <__flash_rwdata_start+0xffff43b8>
 4029c7c:	00bfffc4 	movi	r2,-1
 4029c80:	003fe206 	br	4029c0c <__flash_rwdata_start+0xffff43bc>
 4029c84:	800b883a 	mov	r5,r16
 4029c88:	9009883a 	mov	r4,r18
 4029c8c:	4022b340 	call	4022b34 <__swsetup_r>
 4029c90:	103ffa1e 	bne	r2,zero,4029c7c <__flash_rwdata_start+0xffff442c>
 4029c94:	8100030b 	ldhu	r4,12(r16)
 4029c98:	80c00417 	ldw	r3,16(r16)
 4029c9c:	003fc506 	br	4029bb4 <__flash_rwdata_start+0xffff4364>
 4029ca0:	4024b400 	call	4024b40 <__sinit>
 4029ca4:	003fbc06 	br	4029b98 <__flash_rwdata_start+0xffff4348>

04029ca8 <__swbuf>:
 4029ca8:	00800034 	movhi	r2,0
 4029cac:	10881c04 	addi	r2,r2,8304
 4029cb0:	280d883a 	mov	r6,r5
 4029cb4:	200b883a 	mov	r5,r4
 4029cb8:	11000017 	ldw	r4,0(r2)
 4029cbc:	4029b681 	jmpi	4029b68 <__swbuf_r>

04029cc0 <_wcrtomb_r>:
 4029cc0:	defff604 	addi	sp,sp,-40
 4029cc4:	00800034 	movhi	r2,0
 4029cc8:	dc800815 	stw	r18,32(sp)
 4029ccc:	dc400715 	stw	r17,28(sp)
 4029cd0:	dc000615 	stw	r16,24(sp)
 4029cd4:	10882004 	addi	r2,r2,8320
 4029cd8:	dfc00915 	stw	ra,36(sp)
 4029cdc:	2021883a 	mov	r16,r4
 4029ce0:	3823883a 	mov	r17,r7
 4029ce4:	14800017 	ldw	r18,0(r2)
 4029ce8:	28001426 	beq	r5,zero,4029d3c <_wcrtomb_r+0x7c>
 4029cec:	d9400415 	stw	r5,16(sp)
 4029cf0:	d9800515 	stw	r6,20(sp)
 4029cf4:	40256900 	call	4025690 <__locale_charset>
 4029cf8:	d9800517 	ldw	r6,20(sp)
 4029cfc:	d9400417 	ldw	r5,16(sp)
 4029d00:	100f883a 	mov	r7,r2
 4029d04:	dc400015 	stw	r17,0(sp)
 4029d08:	8009883a 	mov	r4,r16
 4029d0c:	903ee83a 	callr	r18
 4029d10:	00ffffc4 	movi	r3,-1
 4029d14:	10c0031e 	bne	r2,r3,4029d24 <_wcrtomb_r+0x64>
 4029d18:	88000015 	stw	zero,0(r17)
 4029d1c:	00c02284 	movi	r3,138
 4029d20:	80c00015 	stw	r3,0(r16)
 4029d24:	dfc00917 	ldw	ra,36(sp)
 4029d28:	dc800817 	ldw	r18,32(sp)
 4029d2c:	dc400717 	ldw	r17,28(sp)
 4029d30:	dc000617 	ldw	r16,24(sp)
 4029d34:	dec00a04 	addi	sp,sp,40
 4029d38:	f800283a 	ret
 4029d3c:	40256900 	call	4025690 <__locale_charset>
 4029d40:	100f883a 	mov	r7,r2
 4029d44:	dc400015 	stw	r17,0(sp)
 4029d48:	000d883a 	mov	r6,zero
 4029d4c:	d9400104 	addi	r5,sp,4
 4029d50:	8009883a 	mov	r4,r16
 4029d54:	903ee83a 	callr	r18
 4029d58:	003fed06 	br	4029d10 <__flash_rwdata_start+0xffff44c0>

04029d5c <wcrtomb>:
 4029d5c:	defff604 	addi	sp,sp,-40
 4029d60:	00800034 	movhi	r2,0
 4029d64:	dc800615 	stw	r18,24(sp)
 4029d68:	dc400515 	stw	r17,20(sp)
 4029d6c:	10881c04 	addi	r2,r2,8304
 4029d70:	dfc00915 	stw	ra,36(sp)
 4029d74:	dd000815 	stw	r20,32(sp)
 4029d78:	dcc00715 	stw	r19,28(sp)
 4029d7c:	dc000415 	stw	r16,16(sp)
 4029d80:	3025883a 	mov	r18,r6
 4029d84:	14400017 	ldw	r17,0(r2)
 4029d88:	20001926 	beq	r4,zero,4029df0 <wcrtomb+0x94>
 4029d8c:	00800034 	movhi	r2,0
 4029d90:	10882004 	addi	r2,r2,8320
 4029d94:	15000017 	ldw	r20,0(r2)
 4029d98:	2021883a 	mov	r16,r4
 4029d9c:	2827883a 	mov	r19,r5
 4029da0:	40256900 	call	4025690 <__locale_charset>
 4029da4:	100f883a 	mov	r7,r2
 4029da8:	dc800015 	stw	r18,0(sp)
 4029dac:	980d883a 	mov	r6,r19
 4029db0:	800b883a 	mov	r5,r16
 4029db4:	8809883a 	mov	r4,r17
 4029db8:	a03ee83a 	callr	r20
 4029dbc:	00ffffc4 	movi	r3,-1
 4029dc0:	10c0031e 	bne	r2,r3,4029dd0 <wcrtomb+0x74>
 4029dc4:	90000015 	stw	zero,0(r18)
 4029dc8:	00c02284 	movi	r3,138
 4029dcc:	88c00015 	stw	r3,0(r17)
 4029dd0:	dfc00917 	ldw	ra,36(sp)
 4029dd4:	dd000817 	ldw	r20,32(sp)
 4029dd8:	dcc00717 	ldw	r19,28(sp)
 4029ddc:	dc800617 	ldw	r18,24(sp)
 4029de0:	dc400517 	ldw	r17,20(sp)
 4029de4:	dc000417 	ldw	r16,16(sp)
 4029de8:	dec00a04 	addi	sp,sp,40
 4029dec:	f800283a 	ret
 4029df0:	00800034 	movhi	r2,0
 4029df4:	10882004 	addi	r2,r2,8320
 4029df8:	14000017 	ldw	r16,0(r2)
 4029dfc:	40256900 	call	4025690 <__locale_charset>
 4029e00:	100f883a 	mov	r7,r2
 4029e04:	dc800015 	stw	r18,0(sp)
 4029e08:	000d883a 	mov	r6,zero
 4029e0c:	d9400104 	addi	r5,sp,4
 4029e10:	8809883a 	mov	r4,r17
 4029e14:	803ee83a 	callr	r16
 4029e18:	003fe806 	br	4029dbc <__flash_rwdata_start+0xffff456c>

04029e1c <__ascii_wctomb>:
 4029e1c:	28000526 	beq	r5,zero,4029e34 <__ascii_wctomb+0x18>
 4029e20:	00803fc4 	movi	r2,255
 4029e24:	11800536 	bltu	r2,r6,4029e3c <__ascii_wctomb+0x20>
 4029e28:	29800005 	stb	r6,0(r5)
 4029e2c:	00800044 	movi	r2,1
 4029e30:	f800283a 	ret
 4029e34:	0005883a 	mov	r2,zero
 4029e38:	f800283a 	ret
 4029e3c:	00802284 	movi	r2,138
 4029e40:	20800015 	stw	r2,0(r4)
 4029e44:	00bfffc4 	movi	r2,-1
 4029e48:	f800283a 	ret

04029e4c <_wctomb_r>:
 4029e4c:	00800034 	movhi	r2,0
 4029e50:	defff904 	addi	sp,sp,-28
 4029e54:	10882004 	addi	r2,r2,8320
 4029e58:	dfc00615 	stw	ra,24(sp)
 4029e5c:	dc400515 	stw	r17,20(sp)
 4029e60:	dc000415 	stw	r16,16(sp)
 4029e64:	3823883a 	mov	r17,r7
 4029e68:	14000017 	ldw	r16,0(r2)
 4029e6c:	d9000115 	stw	r4,4(sp)
 4029e70:	d9400215 	stw	r5,8(sp)
 4029e74:	d9800315 	stw	r6,12(sp)
 4029e78:	40256900 	call	4025690 <__locale_charset>
 4029e7c:	d9800317 	ldw	r6,12(sp)
 4029e80:	d9400217 	ldw	r5,8(sp)
 4029e84:	d9000117 	ldw	r4,4(sp)
 4029e88:	100f883a 	mov	r7,r2
 4029e8c:	dc400015 	stw	r17,0(sp)
 4029e90:	803ee83a 	callr	r16
 4029e94:	dfc00617 	ldw	ra,24(sp)
 4029e98:	dc400517 	ldw	r17,20(sp)
 4029e9c:	dc000417 	ldw	r16,16(sp)
 4029ea0:	dec00704 	addi	sp,sp,28
 4029ea4:	f800283a 	ret

04029ea8 <__udivdi3>:
 4029ea8:	defff404 	addi	sp,sp,-48
 4029eac:	dcc00515 	stw	r19,20(sp)
 4029eb0:	dc000215 	stw	r16,8(sp)
 4029eb4:	dfc00b15 	stw	ra,44(sp)
 4029eb8:	df000a15 	stw	fp,40(sp)
 4029ebc:	ddc00915 	stw	r23,36(sp)
 4029ec0:	dd800815 	stw	r22,32(sp)
 4029ec4:	dd400715 	stw	r21,28(sp)
 4029ec8:	dd000615 	stw	r20,24(sp)
 4029ecc:	dc800415 	stw	r18,16(sp)
 4029ed0:	dc400315 	stw	r17,12(sp)
 4029ed4:	2027883a 	mov	r19,r4
 4029ed8:	2821883a 	mov	r16,r5
 4029edc:	3800461e 	bne	r7,zero,4029ff8 <__udivdi3+0x150>
 4029ee0:	3023883a 	mov	r17,r6
 4029ee4:	2025883a 	mov	r18,r4
 4029ee8:	2980572e 	bgeu	r5,r6,402a048 <__udivdi3+0x1a0>
 4029eec:	00bfffd4 	movui	r2,65535
 4029ef0:	282d883a 	mov	r22,r5
 4029ef4:	1180b236 	bltu	r2,r6,402a1c0 <__udivdi3+0x318>
 4029ef8:	00803fc4 	movi	r2,255
 4029efc:	1185803a 	cmpltu	r2,r2,r6
 4029f00:	100490fa 	slli	r2,r2,3
 4029f04:	3086d83a 	srl	r3,r6,r2
 4029f08:	01000034 	movhi	r4,0
 4029f0c:	2100f004 	addi	r4,r4,960
 4029f10:	20c7883a 	add	r3,r4,r3
 4029f14:	18c00003 	ldbu	r3,0(r3)
 4029f18:	1885883a 	add	r2,r3,r2
 4029f1c:	00c00804 	movi	r3,32
 4029f20:	1887c83a 	sub	r3,r3,r2
 4029f24:	18000526 	beq	r3,zero,4029f3c <__udivdi3+0x94>
 4029f28:	80e0983a 	sll	r16,r16,r3
 4029f2c:	9884d83a 	srl	r2,r19,r2
 4029f30:	30e2983a 	sll	r17,r6,r3
 4029f34:	98e4983a 	sll	r18,r19,r3
 4029f38:	142cb03a 	or	r22,r2,r16
 4029f3c:	882ad43a 	srli	r21,r17,16
 4029f40:	b009883a 	mov	r4,r22
 4029f44:	8d3fffcc 	andi	r20,r17,65535
 4029f48:	a80b883a 	mov	r5,r21
 4029f4c:	402abc40 	call	402abc4 <__umodsi3>
 4029f50:	b009883a 	mov	r4,r22
 4029f54:	a80b883a 	mov	r5,r21
 4029f58:	1027883a 	mov	r19,r2
 4029f5c:	402ab600 	call	402ab60 <__udivsi3>
 4029f60:	100b883a 	mov	r5,r2
 4029f64:	a009883a 	mov	r4,r20
 4029f68:	102d883a 	mov	r22,r2
 4029f6c:	402ac1c0 	call	402ac1c <__mulsi3>
 4029f70:	9826943a 	slli	r19,r19,16
 4029f74:	9006d43a 	srli	r3,r18,16
 4029f78:	1cc6b03a 	or	r3,r3,r19
 4029f7c:	1880052e 	bgeu	r3,r2,4029f94 <__udivdi3+0xec>
 4029f80:	1c47883a 	add	r3,r3,r17
 4029f84:	b13fffc4 	addi	r4,r22,-1
 4029f88:	1c400136 	bltu	r3,r17,4029f90 <__udivdi3+0xe8>
 4029f8c:	18814236 	bltu	r3,r2,402a498 <__udivdi3+0x5f0>
 4029f90:	202d883a 	mov	r22,r4
 4029f94:	18a1c83a 	sub	r16,r3,r2
 4029f98:	8009883a 	mov	r4,r16
 4029f9c:	a80b883a 	mov	r5,r21
 4029fa0:	402abc40 	call	402abc4 <__umodsi3>
 4029fa4:	1027883a 	mov	r19,r2
 4029fa8:	8009883a 	mov	r4,r16
 4029fac:	a80b883a 	mov	r5,r21
 4029fb0:	9826943a 	slli	r19,r19,16
 4029fb4:	402ab600 	call	402ab60 <__udivsi3>
 4029fb8:	100b883a 	mov	r5,r2
 4029fbc:	a009883a 	mov	r4,r20
 4029fc0:	94bfffcc 	andi	r18,r18,65535
 4029fc4:	1021883a 	mov	r16,r2
 4029fc8:	94e4b03a 	or	r18,r18,r19
 4029fcc:	402ac1c0 	call	402ac1c <__mulsi3>
 4029fd0:	9080052e 	bgeu	r18,r2,4029fe8 <__udivdi3+0x140>
 4029fd4:	8ca5883a 	add	r18,r17,r18
 4029fd8:	80ffffc4 	addi	r3,r16,-1
 4029fdc:	94410c36 	bltu	r18,r17,402a410 <__udivdi3+0x568>
 4029fe0:	90810b2e 	bgeu	r18,r2,402a410 <__udivdi3+0x568>
 4029fe4:	843fff84 	addi	r16,r16,-2
 4029fe8:	b004943a 	slli	r2,r22,16
 4029fec:	0007883a 	mov	r3,zero
 4029ff0:	1404b03a 	or	r2,r2,r16
 4029ff4:	00005e06 	br	402a170 <__udivdi3+0x2c8>
 4029ff8:	29c05b36 	bltu	r5,r7,402a168 <__udivdi3+0x2c0>
 4029ffc:	00bfffd4 	movui	r2,65535
 402a000:	11c0672e 	bgeu	r2,r7,402a1a0 <__udivdi3+0x2f8>
 402a004:	00804034 	movhi	r2,256
 402a008:	10bfffc4 	addi	r2,r2,-1
 402a00c:	11c10a36 	bltu	r2,r7,402a438 <__udivdi3+0x590>
 402a010:	00800404 	movi	r2,16
 402a014:	3886d83a 	srl	r3,r7,r2
 402a018:	01000034 	movhi	r4,0
 402a01c:	2100f004 	addi	r4,r4,960
 402a020:	20c7883a 	add	r3,r4,r3
 402a024:	18c00003 	ldbu	r3,0(r3)
 402a028:	05c00804 	movi	r23,32
 402a02c:	1885883a 	add	r2,r3,r2
 402a030:	b8afc83a 	sub	r23,r23,r2
 402a034:	b800671e 	bne	r23,zero,402a1d4 <__udivdi3+0x32c>
 402a038:	3c010536 	bltu	r7,r16,402a450 <__udivdi3+0x5a8>
 402a03c:	9985403a 	cmpgeu	r2,r19,r6
 402a040:	0007883a 	mov	r3,zero
 402a044:	00004a06 	br	402a170 <__udivdi3+0x2c8>
 402a048:	3000041e 	bne	r6,zero,402a05c <__udivdi3+0x1b4>
 402a04c:	000b883a 	mov	r5,zero
 402a050:	01000044 	movi	r4,1
 402a054:	402ab600 	call	402ab60 <__udivsi3>
 402a058:	1023883a 	mov	r17,r2
 402a05c:	00bfffd4 	movui	r2,65535
 402a060:	1440532e 	bgeu	r2,r17,402a1b0 <__udivdi3+0x308>
 402a064:	00804034 	movhi	r2,256
 402a068:	10bfffc4 	addi	r2,r2,-1
 402a06c:	1440f436 	bltu	r2,r17,402a440 <__udivdi3+0x598>
 402a070:	00800404 	movi	r2,16
 402a074:	8886d83a 	srl	r3,r17,r2
 402a078:	01000034 	movhi	r4,0
 402a07c:	2100f004 	addi	r4,r4,960
 402a080:	20c7883a 	add	r3,r4,r3
 402a084:	18c00003 	ldbu	r3,0(r3)
 402a088:	1885883a 	add	r2,r3,r2
 402a08c:	00c00804 	movi	r3,32
 402a090:	1887c83a 	sub	r3,r3,r2
 402a094:	1800a51e 	bne	r3,zero,402a32c <__udivdi3+0x484>
 402a098:	882ad43a 	srli	r21,r17,16
 402a09c:	8461c83a 	sub	r16,r16,r17
 402a0a0:	8d3fffcc 	andi	r20,r17,65535
 402a0a4:	00c00044 	movi	r3,1
 402a0a8:	a80b883a 	mov	r5,r21
 402a0ac:	8009883a 	mov	r4,r16
 402a0b0:	d8c00115 	stw	r3,4(sp)
 402a0b4:	402abc40 	call	402abc4 <__umodsi3>
 402a0b8:	a80b883a 	mov	r5,r21
 402a0bc:	8009883a 	mov	r4,r16
 402a0c0:	1027883a 	mov	r19,r2
 402a0c4:	402ab600 	call	402ab60 <__udivsi3>
 402a0c8:	a00b883a 	mov	r5,r20
 402a0cc:	1009883a 	mov	r4,r2
 402a0d0:	102d883a 	mov	r22,r2
 402a0d4:	402ac1c0 	call	402ac1c <__mulsi3>
 402a0d8:	9826943a 	slli	r19,r19,16
 402a0dc:	900ed43a 	srli	r7,r18,16
 402a0e0:	d8c00117 	ldw	r3,4(sp)
 402a0e4:	3cceb03a 	or	r7,r7,r19
 402a0e8:	3880052e 	bgeu	r7,r2,402a100 <__udivdi3+0x258>
 402a0ec:	3c4f883a 	add	r7,r7,r17
 402a0f0:	b13fffc4 	addi	r4,r22,-1
 402a0f4:	3c400136 	bltu	r7,r17,402a0fc <__udivdi3+0x254>
 402a0f8:	3880e436 	bltu	r7,r2,402a48c <__udivdi3+0x5e4>
 402a0fc:	202d883a 	mov	r22,r4
 402a100:	38a1c83a 	sub	r16,r7,r2
 402a104:	8009883a 	mov	r4,r16
 402a108:	a80b883a 	mov	r5,r21
 402a10c:	d8c00115 	stw	r3,4(sp)
 402a110:	402abc40 	call	402abc4 <__umodsi3>
 402a114:	1027883a 	mov	r19,r2
 402a118:	8009883a 	mov	r4,r16
 402a11c:	a80b883a 	mov	r5,r21
 402a120:	9826943a 	slli	r19,r19,16
 402a124:	402ab600 	call	402ab60 <__udivsi3>
 402a128:	a00b883a 	mov	r5,r20
 402a12c:	1009883a 	mov	r4,r2
 402a130:	94bfffcc 	andi	r18,r18,65535
 402a134:	1021883a 	mov	r16,r2
 402a138:	94e4b03a 	or	r18,r18,r19
 402a13c:	402ac1c0 	call	402ac1c <__mulsi3>
 402a140:	d8c00117 	ldw	r3,4(sp)
 402a144:	9080052e 	bgeu	r18,r2,402a15c <__udivdi3+0x2b4>
 402a148:	8ca5883a 	add	r18,r17,r18
 402a14c:	813fffc4 	addi	r4,r16,-1
 402a150:	9440ad36 	bltu	r18,r17,402a408 <__udivdi3+0x560>
 402a154:	9080ac2e 	bgeu	r18,r2,402a408 <__udivdi3+0x560>
 402a158:	843fff84 	addi	r16,r16,-2
 402a15c:	b004943a 	slli	r2,r22,16
 402a160:	1404b03a 	or	r2,r2,r16
 402a164:	00000206 	br	402a170 <__udivdi3+0x2c8>
 402a168:	0007883a 	mov	r3,zero
 402a16c:	0005883a 	mov	r2,zero
 402a170:	dfc00b17 	ldw	ra,44(sp)
 402a174:	df000a17 	ldw	fp,40(sp)
 402a178:	ddc00917 	ldw	r23,36(sp)
 402a17c:	dd800817 	ldw	r22,32(sp)
 402a180:	dd400717 	ldw	r21,28(sp)
 402a184:	dd000617 	ldw	r20,24(sp)
 402a188:	dcc00517 	ldw	r19,20(sp)
 402a18c:	dc800417 	ldw	r18,16(sp)
 402a190:	dc400317 	ldw	r17,12(sp)
 402a194:	dc000217 	ldw	r16,8(sp)
 402a198:	dec00c04 	addi	sp,sp,48
 402a19c:	f800283a 	ret
 402a1a0:	00803fc4 	movi	r2,255
 402a1a4:	11c5803a 	cmpltu	r2,r2,r7
 402a1a8:	100490fa 	slli	r2,r2,3
 402a1ac:	003f9906 	br	402a014 <__flash_rwdata_start+0xffff47c4>
 402a1b0:	00803fc4 	movi	r2,255
 402a1b4:	1445803a 	cmpltu	r2,r2,r17
 402a1b8:	100490fa 	slli	r2,r2,3
 402a1bc:	003fad06 	br	402a074 <__flash_rwdata_start+0xffff4824>
 402a1c0:	00804034 	movhi	r2,256
 402a1c4:	10bfffc4 	addi	r2,r2,-1
 402a1c8:	11809f36 	bltu	r2,r6,402a448 <__udivdi3+0x5a0>
 402a1cc:	00800404 	movi	r2,16
 402a1d0:	003f4c06 	br	4029f04 <__flash_rwdata_start+0xffff46b4>
 402a1d4:	3dce983a 	sll	r7,r7,r23
 402a1d8:	30b8d83a 	srl	fp,r6,r2
 402a1dc:	80a2d83a 	srl	r17,r16,r2
 402a1e0:	35cc983a 	sll	r6,r6,r23
 402a1e4:	3f38b03a 	or	fp,r7,fp
 402a1e8:	e024d43a 	srli	r18,fp,16
 402a1ec:	9884d83a 	srl	r2,r19,r2
 402a1f0:	85e0983a 	sll	r16,r16,r23
 402a1f4:	8809883a 	mov	r4,r17
 402a1f8:	900b883a 	mov	r5,r18
 402a1fc:	d9800015 	stw	r6,0(sp)
 402a200:	1420b03a 	or	r16,r2,r16
 402a204:	402abc40 	call	402abc4 <__umodsi3>
 402a208:	900b883a 	mov	r5,r18
 402a20c:	8809883a 	mov	r4,r17
 402a210:	1029883a 	mov	r20,r2
 402a214:	e5bfffcc 	andi	r22,fp,65535
 402a218:	402ab600 	call	402ab60 <__udivsi3>
 402a21c:	100b883a 	mov	r5,r2
 402a220:	b009883a 	mov	r4,r22
 402a224:	102b883a 	mov	r21,r2
 402a228:	402ac1c0 	call	402ac1c <__mulsi3>
 402a22c:	a028943a 	slli	r20,r20,16
 402a230:	8006d43a 	srli	r3,r16,16
 402a234:	1d06b03a 	or	r3,r3,r20
 402a238:	1880042e 	bgeu	r3,r2,402a24c <__udivdi3+0x3a4>
 402a23c:	1f07883a 	add	r3,r3,fp
 402a240:	a93fffc4 	addi	r4,r21,-1
 402a244:	1f00892e 	bgeu	r3,fp,402a46c <__udivdi3+0x5c4>
 402a248:	202b883a 	mov	r21,r4
 402a24c:	18a3c83a 	sub	r17,r3,r2
 402a250:	8809883a 	mov	r4,r17
 402a254:	900b883a 	mov	r5,r18
 402a258:	402abc40 	call	402abc4 <__umodsi3>
 402a25c:	1029883a 	mov	r20,r2
 402a260:	8809883a 	mov	r4,r17
 402a264:	900b883a 	mov	r5,r18
 402a268:	a028943a 	slli	r20,r20,16
 402a26c:	402ab600 	call	402ab60 <__udivsi3>
 402a270:	100b883a 	mov	r5,r2
 402a274:	b009883a 	mov	r4,r22
 402a278:	843fffcc 	andi	r16,r16,65535
 402a27c:	1023883a 	mov	r17,r2
 402a280:	8520b03a 	or	r16,r16,r20
 402a284:	402ac1c0 	call	402ac1c <__mulsi3>
 402a288:	8080042e 	bgeu	r16,r2,402a29c <__udivdi3+0x3f4>
 402a28c:	8721883a 	add	r16,r16,fp
 402a290:	88ffffc4 	addi	r3,r17,-1
 402a294:	8700712e 	bgeu	r16,fp,402a45c <__udivdi3+0x5b4>
 402a298:	1823883a 	mov	r17,r3
 402a29c:	a80e943a 	slli	r7,r21,16
 402a2a0:	d8c00017 	ldw	r3,0(sp)
 402a2a4:	80a1c83a 	sub	r16,r16,r2
 402a2a8:	3c64b03a 	or	r18,r7,r17
 402a2ac:	1d3fffcc 	andi	r20,r3,65535
 402a2b0:	9022d43a 	srli	r17,r18,16
 402a2b4:	95bfffcc 	andi	r22,r18,65535
 402a2b8:	a00b883a 	mov	r5,r20
 402a2bc:	b009883a 	mov	r4,r22
 402a2c0:	182ad43a 	srli	r21,r3,16
 402a2c4:	402ac1c0 	call	402ac1c <__mulsi3>
 402a2c8:	a00b883a 	mov	r5,r20
 402a2cc:	8809883a 	mov	r4,r17
 402a2d0:	1039883a 	mov	fp,r2
 402a2d4:	402ac1c0 	call	402ac1c <__mulsi3>
 402a2d8:	8809883a 	mov	r4,r17
 402a2dc:	a80b883a 	mov	r5,r21
 402a2e0:	1029883a 	mov	r20,r2
 402a2e4:	402ac1c0 	call	402ac1c <__mulsi3>
 402a2e8:	a80b883a 	mov	r5,r21
 402a2ec:	b009883a 	mov	r4,r22
 402a2f0:	1023883a 	mov	r17,r2
 402a2f4:	402ac1c0 	call	402ac1c <__mulsi3>
 402a2f8:	e006d43a 	srli	r3,fp,16
 402a2fc:	1505883a 	add	r2,r2,r20
 402a300:	1887883a 	add	r3,r3,r2
 402a304:	1d00022e 	bgeu	r3,r20,402a310 <__udivdi3+0x468>
 402a308:	00800074 	movhi	r2,1
 402a30c:	88a3883a 	add	r17,r17,r2
 402a310:	1804d43a 	srli	r2,r3,16
 402a314:	1463883a 	add	r17,r2,r17
 402a318:	84404436 	bltu	r16,r17,402a42c <__udivdi3+0x584>
 402a31c:	84403e26 	beq	r16,r17,402a418 <__udivdi3+0x570>
 402a320:	9005883a 	mov	r2,r18
 402a324:	0007883a 	mov	r3,zero
 402a328:	003f9106 	br	402a170 <__flash_rwdata_start+0xffff4920>
 402a32c:	88e2983a 	sll	r17,r17,r3
 402a330:	80aed83a 	srl	r23,r16,r2
 402a334:	80e0983a 	sll	r16,r16,r3
 402a338:	882ad43a 	srli	r21,r17,16
 402a33c:	9884d83a 	srl	r2,r19,r2
 402a340:	b809883a 	mov	r4,r23
 402a344:	a80b883a 	mov	r5,r21
 402a348:	98e4983a 	sll	r18,r19,r3
 402a34c:	142cb03a 	or	r22,r2,r16
 402a350:	402abc40 	call	402abc4 <__umodsi3>
 402a354:	b809883a 	mov	r4,r23
 402a358:	a80b883a 	mov	r5,r21
 402a35c:	1027883a 	mov	r19,r2
 402a360:	8d3fffcc 	andi	r20,r17,65535
 402a364:	402ab600 	call	402ab60 <__udivsi3>
 402a368:	a009883a 	mov	r4,r20
 402a36c:	100b883a 	mov	r5,r2
 402a370:	102f883a 	mov	r23,r2
 402a374:	402ac1c0 	call	402ac1c <__mulsi3>
 402a378:	9826943a 	slli	r19,r19,16
 402a37c:	b008d43a 	srli	r4,r22,16
 402a380:	24c8b03a 	or	r4,r4,r19
 402a384:	2080062e 	bgeu	r4,r2,402a3a0 <__udivdi3+0x4f8>
 402a388:	2449883a 	add	r4,r4,r17
 402a38c:	b8ffffc4 	addi	r3,r23,-1
 402a390:	24403c36 	bltu	r4,r17,402a484 <__udivdi3+0x5dc>
 402a394:	20803b2e 	bgeu	r4,r2,402a484 <__udivdi3+0x5dc>
 402a398:	bdffff84 	addi	r23,r23,-2
 402a39c:	2449883a 	add	r4,r4,r17
 402a3a0:	20a1c83a 	sub	r16,r4,r2
 402a3a4:	a80b883a 	mov	r5,r21
 402a3a8:	8009883a 	mov	r4,r16
 402a3ac:	402abc40 	call	402abc4 <__umodsi3>
 402a3b0:	a80b883a 	mov	r5,r21
 402a3b4:	8009883a 	mov	r4,r16
 402a3b8:	1027883a 	mov	r19,r2
 402a3bc:	402ab600 	call	402ab60 <__udivsi3>
 402a3c0:	a009883a 	mov	r4,r20
 402a3c4:	100b883a 	mov	r5,r2
 402a3c8:	9826943a 	slli	r19,r19,16
 402a3cc:	1039883a 	mov	fp,r2
 402a3d0:	402ac1c0 	call	402ac1c <__mulsi3>
 402a3d4:	b13fffcc 	andi	r4,r22,65535
 402a3d8:	24c8b03a 	or	r4,r4,r19
 402a3dc:	2080062e 	bgeu	r4,r2,402a3f8 <__udivdi3+0x550>
 402a3e0:	2449883a 	add	r4,r4,r17
 402a3e4:	e0ffffc4 	addi	r3,fp,-1
 402a3e8:	24402436 	bltu	r4,r17,402a47c <__udivdi3+0x5d4>
 402a3ec:	2080232e 	bgeu	r4,r2,402a47c <__udivdi3+0x5d4>
 402a3f0:	e73fff84 	addi	fp,fp,-2
 402a3f4:	2449883a 	add	r4,r4,r17
 402a3f8:	b82e943a 	slli	r23,r23,16
 402a3fc:	20a1c83a 	sub	r16,r4,r2
 402a400:	bf06b03a 	or	r3,r23,fp
 402a404:	003f2806 	br	402a0a8 <__flash_rwdata_start+0xffff4858>
 402a408:	2021883a 	mov	r16,r4
 402a40c:	003f5306 	br	402a15c <__flash_rwdata_start+0xffff490c>
 402a410:	1821883a 	mov	r16,r3
 402a414:	003ef406 	br	4029fe8 <__flash_rwdata_start+0xffff4798>
 402a418:	1806943a 	slli	r3,r3,16
 402a41c:	9de6983a 	sll	r19,r19,r23
 402a420:	e73fffcc 	andi	fp,fp,65535
 402a424:	1f07883a 	add	r3,r3,fp
 402a428:	98ffbd2e 	bgeu	r19,r3,402a320 <__flash_rwdata_start+0xffff4ad0>
 402a42c:	90bfffc4 	addi	r2,r18,-1
 402a430:	0007883a 	mov	r3,zero
 402a434:	003f4e06 	br	402a170 <__flash_rwdata_start+0xffff4920>
 402a438:	00800604 	movi	r2,24
 402a43c:	003ef506 	br	402a014 <__flash_rwdata_start+0xffff47c4>
 402a440:	00800604 	movi	r2,24
 402a444:	003f0b06 	br	402a074 <__flash_rwdata_start+0xffff4824>
 402a448:	00800604 	movi	r2,24
 402a44c:	003ead06 	br	4029f04 <__flash_rwdata_start+0xffff46b4>
 402a450:	0007883a 	mov	r3,zero
 402a454:	00800044 	movi	r2,1
 402a458:	003f4506 	br	402a170 <__flash_rwdata_start+0xffff4920>
 402a45c:	80bf8e2e 	bgeu	r16,r2,402a298 <__flash_rwdata_start+0xffff4a48>
 402a460:	8c7fff84 	addi	r17,r17,-2
 402a464:	8721883a 	add	r16,r16,fp
 402a468:	003f8c06 	br	402a29c <__flash_rwdata_start+0xffff4a4c>
 402a46c:	18bf762e 	bgeu	r3,r2,402a248 <__flash_rwdata_start+0xffff49f8>
 402a470:	ad7fff84 	addi	r21,r21,-2
 402a474:	1f07883a 	add	r3,r3,fp
 402a478:	003f7406 	br	402a24c <__flash_rwdata_start+0xffff49fc>
 402a47c:	1839883a 	mov	fp,r3
 402a480:	003fdd06 	br	402a3f8 <__flash_rwdata_start+0xffff4ba8>
 402a484:	182f883a 	mov	r23,r3
 402a488:	003fc506 	br	402a3a0 <__flash_rwdata_start+0xffff4b50>
 402a48c:	b5bfff84 	addi	r22,r22,-2
 402a490:	3c4f883a 	add	r7,r7,r17
 402a494:	003f1a06 	br	402a100 <__flash_rwdata_start+0xffff48b0>
 402a498:	b5bfff84 	addi	r22,r22,-2
 402a49c:	1c47883a 	add	r3,r3,r17
 402a4a0:	003ebc06 	br	4029f94 <__flash_rwdata_start+0xffff4744>

0402a4a4 <__umoddi3>:
 402a4a4:	defff304 	addi	sp,sp,-52
 402a4a8:	df000b15 	stw	fp,44(sp)
 402a4ac:	dc400415 	stw	r17,16(sp)
 402a4b0:	dc000315 	stw	r16,12(sp)
 402a4b4:	dfc00c15 	stw	ra,48(sp)
 402a4b8:	ddc00a15 	stw	r23,40(sp)
 402a4bc:	dd800915 	stw	r22,36(sp)
 402a4c0:	dd400815 	stw	r21,32(sp)
 402a4c4:	dd000715 	stw	r20,28(sp)
 402a4c8:	dcc00615 	stw	r19,24(sp)
 402a4cc:	dc800515 	stw	r18,20(sp)
 402a4d0:	2021883a 	mov	r16,r4
 402a4d4:	2823883a 	mov	r17,r5
 402a4d8:	2839883a 	mov	fp,r5
 402a4dc:	3800401e 	bne	r7,zero,402a5e0 <__umoddi3+0x13c>
 402a4e0:	3027883a 	mov	r19,r6
 402a4e4:	2029883a 	mov	r20,r4
 402a4e8:	2980552e 	bgeu	r5,r6,402a640 <__umoddi3+0x19c>
 402a4ec:	00bfffd4 	movui	r2,65535
 402a4f0:	1180a236 	bltu	r2,r6,402a77c <__umoddi3+0x2d8>
 402a4f4:	01003fc4 	movi	r4,255
 402a4f8:	2189803a 	cmpltu	r4,r4,r6
 402a4fc:	200890fa 	slli	r4,r4,3
 402a500:	3104d83a 	srl	r2,r6,r4
 402a504:	00c00034 	movhi	r3,0
 402a508:	18c0f004 	addi	r3,r3,960
 402a50c:	1885883a 	add	r2,r3,r2
 402a510:	10c00003 	ldbu	r3,0(r2)
 402a514:	00800804 	movi	r2,32
 402a518:	1909883a 	add	r4,r3,r4
 402a51c:	1125c83a 	sub	r18,r2,r4
 402a520:	90000526 	beq	r18,zero,402a538 <__umoddi3+0x94>
 402a524:	8ca2983a 	sll	r17,r17,r18
 402a528:	8108d83a 	srl	r4,r16,r4
 402a52c:	34a6983a 	sll	r19,r6,r18
 402a530:	84a8983a 	sll	r20,r16,r18
 402a534:	2478b03a 	or	fp,r4,r17
 402a538:	982cd43a 	srli	r22,r19,16
 402a53c:	e009883a 	mov	r4,fp
 402a540:	9dffffcc 	andi	r23,r19,65535
 402a544:	b00b883a 	mov	r5,r22
 402a548:	402abc40 	call	402abc4 <__umodsi3>
 402a54c:	b00b883a 	mov	r5,r22
 402a550:	e009883a 	mov	r4,fp
 402a554:	102b883a 	mov	r21,r2
 402a558:	402ab600 	call	402ab60 <__udivsi3>
 402a55c:	100b883a 	mov	r5,r2
 402a560:	b809883a 	mov	r4,r23
 402a564:	402ac1c0 	call	402ac1c <__mulsi3>
 402a568:	a82a943a 	slli	r21,r21,16
 402a56c:	a006d43a 	srli	r3,r20,16
 402a570:	1d46b03a 	or	r3,r3,r21
 402a574:	1880032e 	bgeu	r3,r2,402a584 <__umoddi3+0xe0>
 402a578:	1cc7883a 	add	r3,r3,r19
 402a57c:	1cc00136 	bltu	r3,r19,402a584 <__umoddi3+0xe0>
 402a580:	18813136 	bltu	r3,r2,402aa48 <__umoddi3+0x5a4>
 402a584:	18a1c83a 	sub	r16,r3,r2
 402a588:	b00b883a 	mov	r5,r22
 402a58c:	8009883a 	mov	r4,r16
 402a590:	402abc40 	call	402abc4 <__umodsi3>
 402a594:	b00b883a 	mov	r5,r22
 402a598:	8009883a 	mov	r4,r16
 402a59c:	1023883a 	mov	r17,r2
 402a5a0:	402ab600 	call	402ab60 <__udivsi3>
 402a5a4:	100b883a 	mov	r5,r2
 402a5a8:	b809883a 	mov	r4,r23
 402a5ac:	8822943a 	slli	r17,r17,16
 402a5b0:	402ac1c0 	call	402ac1c <__mulsi3>
 402a5b4:	a0ffffcc 	andi	r3,r20,65535
 402a5b8:	1c46b03a 	or	r3,r3,r17
 402a5bc:	1880042e 	bgeu	r3,r2,402a5d0 <__umoddi3+0x12c>
 402a5c0:	1cc7883a 	add	r3,r3,r19
 402a5c4:	1cc00236 	bltu	r3,r19,402a5d0 <__umoddi3+0x12c>
 402a5c8:	1880012e 	bgeu	r3,r2,402a5d0 <__umoddi3+0x12c>
 402a5cc:	1cc7883a 	add	r3,r3,r19
 402a5d0:	1885c83a 	sub	r2,r3,r2
 402a5d4:	1484d83a 	srl	r2,r2,r18
 402a5d8:	0007883a 	mov	r3,zero
 402a5dc:	00005306 	br	402a72c <__umoddi3+0x288>
 402a5e0:	29c05036 	bltu	r5,r7,402a724 <__umoddi3+0x280>
 402a5e4:	00bfffd4 	movui	r2,65535
 402a5e8:	11c05c2e 	bgeu	r2,r7,402a75c <__umoddi3+0x2b8>
 402a5ec:	00804034 	movhi	r2,256
 402a5f0:	10bfffc4 	addi	r2,r2,-1
 402a5f4:	11c10636 	bltu	r2,r7,402aa10 <__umoddi3+0x56c>
 402a5f8:	01000404 	movi	r4,16
 402a5fc:	3904d83a 	srl	r2,r7,r4
 402a600:	00c00034 	movhi	r3,0
 402a604:	18c0f004 	addi	r3,r3,960
 402a608:	1885883a 	add	r2,r3,r2
 402a60c:	14c00003 	ldbu	r19,0(r2)
 402a610:	00c00804 	movi	r3,32
 402a614:	9927883a 	add	r19,r19,r4
 402a618:	1ce9c83a 	sub	r20,r3,r19
 402a61c:	a0005c1e 	bne	r20,zero,402a790 <__umoddi3+0x2ec>
 402a620:	3c400136 	bltu	r7,r17,402a628 <__umoddi3+0x184>
 402a624:	81810a36 	bltu	r16,r6,402aa50 <__umoddi3+0x5ac>
 402a628:	8185c83a 	sub	r2,r16,r6
 402a62c:	89e3c83a 	sub	r17,r17,r7
 402a630:	8089803a 	cmpltu	r4,r16,r2
 402a634:	8939c83a 	sub	fp,r17,r4
 402a638:	e007883a 	mov	r3,fp
 402a63c:	00003b06 	br	402a72c <__umoddi3+0x288>
 402a640:	3000041e 	bne	r6,zero,402a654 <__umoddi3+0x1b0>
 402a644:	000b883a 	mov	r5,zero
 402a648:	01000044 	movi	r4,1
 402a64c:	402ab600 	call	402ab60 <__udivsi3>
 402a650:	1027883a 	mov	r19,r2
 402a654:	00bfffd4 	movui	r2,65535
 402a658:	14c0442e 	bgeu	r2,r19,402a76c <__umoddi3+0x2c8>
 402a65c:	00804034 	movhi	r2,256
 402a660:	10bfffc4 	addi	r2,r2,-1
 402a664:	14c0ec36 	bltu	r2,r19,402aa18 <__umoddi3+0x574>
 402a668:	00800404 	movi	r2,16
 402a66c:	9886d83a 	srl	r3,r19,r2
 402a670:	01000034 	movhi	r4,0
 402a674:	2100f004 	addi	r4,r4,960
 402a678:	20c7883a 	add	r3,r4,r3
 402a67c:	18c00003 	ldbu	r3,0(r3)
 402a680:	1887883a 	add	r3,r3,r2
 402a684:	00800804 	movi	r2,32
 402a688:	10e5c83a 	sub	r18,r2,r3
 402a68c:	9000ab1e 	bne	r18,zero,402a93c <__umoddi3+0x498>
 402a690:	982cd43a 	srli	r22,r19,16
 402a694:	8ce3c83a 	sub	r17,r17,r19
 402a698:	9dffffcc 	andi	r23,r19,65535
 402a69c:	b00b883a 	mov	r5,r22
 402a6a0:	8809883a 	mov	r4,r17
 402a6a4:	402abc40 	call	402abc4 <__umodsi3>
 402a6a8:	b00b883a 	mov	r5,r22
 402a6ac:	8809883a 	mov	r4,r17
 402a6b0:	102b883a 	mov	r21,r2
 402a6b4:	402ab600 	call	402ab60 <__udivsi3>
 402a6b8:	b80b883a 	mov	r5,r23
 402a6bc:	1009883a 	mov	r4,r2
 402a6c0:	402ac1c0 	call	402ac1c <__mulsi3>
 402a6c4:	a82a943a 	slli	r21,r21,16
 402a6c8:	a006d43a 	srli	r3,r20,16
 402a6cc:	1d46b03a 	or	r3,r3,r21
 402a6d0:	1880042e 	bgeu	r3,r2,402a6e4 <__umoddi3+0x240>
 402a6d4:	1cc7883a 	add	r3,r3,r19
 402a6d8:	1cc00236 	bltu	r3,r19,402a6e4 <__umoddi3+0x240>
 402a6dc:	1880012e 	bgeu	r3,r2,402a6e4 <__umoddi3+0x240>
 402a6e0:	1cc7883a 	add	r3,r3,r19
 402a6e4:	18a1c83a 	sub	r16,r3,r2
 402a6e8:	b00b883a 	mov	r5,r22
 402a6ec:	8009883a 	mov	r4,r16
 402a6f0:	402abc40 	call	402abc4 <__umodsi3>
 402a6f4:	1023883a 	mov	r17,r2
 402a6f8:	b00b883a 	mov	r5,r22
 402a6fc:	8009883a 	mov	r4,r16
 402a700:	402ab600 	call	402ab60 <__udivsi3>
 402a704:	8822943a 	slli	r17,r17,16
 402a708:	b80b883a 	mov	r5,r23
 402a70c:	1009883a 	mov	r4,r2
 402a710:	402ac1c0 	call	402ac1c <__mulsi3>
 402a714:	a53fffcc 	andi	r20,r20,65535
 402a718:	a446b03a 	or	r3,r20,r17
 402a71c:	18bfac2e 	bgeu	r3,r2,402a5d0 <__flash_rwdata_start+0xffff4d80>
 402a720:	003fa706 	br	402a5c0 <__flash_rwdata_start+0xffff4d70>
 402a724:	2005883a 	mov	r2,r4
 402a728:	2807883a 	mov	r3,r5
 402a72c:	dfc00c17 	ldw	ra,48(sp)
 402a730:	df000b17 	ldw	fp,44(sp)
 402a734:	ddc00a17 	ldw	r23,40(sp)
 402a738:	dd800917 	ldw	r22,36(sp)
 402a73c:	dd400817 	ldw	r21,32(sp)
 402a740:	dd000717 	ldw	r20,28(sp)
 402a744:	dcc00617 	ldw	r19,24(sp)
 402a748:	dc800517 	ldw	r18,20(sp)
 402a74c:	dc400417 	ldw	r17,16(sp)
 402a750:	dc000317 	ldw	r16,12(sp)
 402a754:	dec00d04 	addi	sp,sp,52
 402a758:	f800283a 	ret
 402a75c:	04c03fc4 	movi	r19,255
 402a760:	99c9803a 	cmpltu	r4,r19,r7
 402a764:	200890fa 	slli	r4,r4,3
 402a768:	003fa406 	br	402a5fc <__flash_rwdata_start+0xffff4dac>
 402a76c:	00803fc4 	movi	r2,255
 402a770:	14c5803a 	cmpltu	r2,r2,r19
 402a774:	100490fa 	slli	r2,r2,3
 402a778:	003fbc06 	br	402a66c <__flash_rwdata_start+0xffff4e1c>
 402a77c:	00804034 	movhi	r2,256
 402a780:	10bfffc4 	addi	r2,r2,-1
 402a784:	1180a636 	bltu	r2,r6,402aa20 <__umoddi3+0x57c>
 402a788:	01000404 	movi	r4,16
 402a78c:	003f5c06 	br	402a500 <__flash_rwdata_start+0xffff4cb0>
 402a790:	3d0e983a 	sll	r7,r7,r20
 402a794:	34ead83a 	srl	r21,r6,r19
 402a798:	8cc6d83a 	srl	r3,r17,r19
 402a79c:	8d10983a 	sll	r8,r17,r20
 402a7a0:	3d6ab03a 	or	r21,r7,r21
 402a7a4:	a82cd43a 	srli	r22,r21,16
 402a7a8:	84e2d83a 	srl	r17,r16,r19
 402a7ac:	1809883a 	mov	r4,r3
 402a7b0:	b00b883a 	mov	r5,r22
 402a7b4:	8a22b03a 	or	r17,r17,r8
 402a7b8:	3524983a 	sll	r18,r6,r20
 402a7bc:	dc400015 	stw	r17,0(sp)
 402a7c0:	d8c00115 	stw	r3,4(sp)
 402a7c4:	402abc40 	call	402abc4 <__umodsi3>
 402a7c8:	d8c00117 	ldw	r3,4(sp)
 402a7cc:	b00b883a 	mov	r5,r22
 402a7d0:	1039883a 	mov	fp,r2
 402a7d4:	1809883a 	mov	r4,r3
 402a7d8:	402ab600 	call	402ab60 <__udivsi3>
 402a7dc:	adffffcc 	andi	r23,r21,65535
 402a7e0:	100b883a 	mov	r5,r2
 402a7e4:	b809883a 	mov	r4,r23
 402a7e8:	1023883a 	mov	r17,r2
 402a7ec:	402ac1c0 	call	402ac1c <__mulsi3>
 402a7f0:	d9400017 	ldw	r5,0(sp)
 402a7f4:	e008943a 	slli	r4,fp,16
 402a7f8:	8520983a 	sll	r16,r16,r20
 402a7fc:	2806d43a 	srli	r3,r5,16
 402a800:	1906b03a 	or	r3,r3,r4
 402a804:	1880042e 	bgeu	r3,r2,402a818 <__umoddi3+0x374>
 402a808:	1d47883a 	add	r3,r3,r21
 402a80c:	893fffc4 	addi	r4,r17,-1
 402a810:	1d40892e 	bgeu	r3,r21,402aa38 <__umoddi3+0x594>
 402a814:	2023883a 	mov	r17,r4
 402a818:	18b9c83a 	sub	fp,r3,r2
 402a81c:	b00b883a 	mov	r5,r22
 402a820:	e009883a 	mov	r4,fp
 402a824:	402abc40 	call	402abc4 <__umodsi3>
 402a828:	b00b883a 	mov	r5,r22
 402a82c:	e009883a 	mov	r4,fp
 402a830:	d8800215 	stw	r2,8(sp)
 402a834:	402ab600 	call	402ab60 <__udivsi3>
 402a838:	100b883a 	mov	r5,r2
 402a83c:	b809883a 	mov	r4,r23
 402a840:	102d883a 	mov	r22,r2
 402a844:	402ac1c0 	call	402ac1c <__mulsi3>
 402a848:	d9800217 	ldw	r6,8(sp)
 402a84c:	d8c00017 	ldw	r3,0(sp)
 402a850:	300c943a 	slli	r6,r6,16
 402a854:	1a3fffcc 	andi	r8,r3,65535
 402a858:	4190b03a 	or	r8,r8,r6
 402a85c:	4080042e 	bgeu	r8,r2,402a870 <__umoddi3+0x3cc>
 402a860:	4551883a 	add	r8,r8,r21
 402a864:	b0ffffc4 	addi	r3,r22,-1
 402a868:	45406f2e 	bgeu	r8,r21,402aa28 <__umoddi3+0x584>
 402a86c:	182d883a 	mov	r22,r3
 402a870:	880e943a 	slli	r7,r17,16
 402a874:	9006d43a 	srli	r3,r18,16
 402a878:	91bfffcc 	andi	r6,r18,65535
 402a87c:	3dacb03a 	or	r22,r7,r22
 402a880:	b02ed43a 	srli	r23,r22,16
 402a884:	b5bfffcc 	andi	r22,r22,65535
 402a888:	300b883a 	mov	r5,r6
 402a88c:	b009883a 	mov	r4,r22
 402a890:	40a3c83a 	sub	r17,r8,r2
 402a894:	d8c00115 	stw	r3,4(sp)
 402a898:	d9800215 	stw	r6,8(sp)
 402a89c:	402ac1c0 	call	402ac1c <__mulsi3>
 402a8a0:	d9800217 	ldw	r6,8(sp)
 402a8a4:	b809883a 	mov	r4,r23
 402a8a8:	1039883a 	mov	fp,r2
 402a8ac:	300b883a 	mov	r5,r6
 402a8b0:	402ac1c0 	call	402ac1c <__mulsi3>
 402a8b4:	d8c00117 	ldw	r3,4(sp)
 402a8b8:	b809883a 	mov	r4,r23
 402a8bc:	d8800215 	stw	r2,8(sp)
 402a8c0:	180b883a 	mov	r5,r3
 402a8c4:	402ac1c0 	call	402ac1c <__mulsi3>
 402a8c8:	d8c00117 	ldw	r3,4(sp)
 402a8cc:	b009883a 	mov	r4,r22
 402a8d0:	102f883a 	mov	r23,r2
 402a8d4:	180b883a 	mov	r5,r3
 402a8d8:	402ac1c0 	call	402ac1c <__mulsi3>
 402a8dc:	d9800217 	ldw	r6,8(sp)
 402a8e0:	e006d43a 	srli	r3,fp,16
 402a8e4:	1185883a 	add	r2,r2,r6
 402a8e8:	1885883a 	add	r2,r3,r2
 402a8ec:	1180022e 	bgeu	r2,r6,402a8f8 <__umoddi3+0x454>
 402a8f0:	00c00074 	movhi	r3,1
 402a8f4:	b8ef883a 	add	r23,r23,r3
 402a8f8:	1006d43a 	srli	r3,r2,16
 402a8fc:	1004943a 	slli	r2,r2,16
 402a900:	e73fffcc 	andi	fp,fp,65535
 402a904:	1dc7883a 	add	r3,r3,r23
 402a908:	1739883a 	add	fp,r2,fp
 402a90c:	88c03a36 	bltu	r17,r3,402a9f8 <__umoddi3+0x554>
 402a910:	88c05126 	beq	r17,r3,402aa58 <__umoddi3+0x5b4>
 402a914:	88c9c83a 	sub	r4,r17,r3
 402a918:	e00f883a 	mov	r7,fp
 402a91c:	81cfc83a 	sub	r7,r16,r7
 402a920:	81c7803a 	cmpltu	r3,r16,r7
 402a924:	20c7c83a 	sub	r3,r4,r3
 402a928:	1cc4983a 	sll	r2,r3,r19
 402a92c:	3d0ed83a 	srl	r7,r7,r20
 402a930:	1d06d83a 	srl	r3,r3,r20
 402a934:	11c4b03a 	or	r2,r2,r7
 402a938:	003f7c06 	br	402a72c <__flash_rwdata_start+0xffff4edc>
 402a93c:	9ca6983a 	sll	r19,r19,r18
 402a940:	88f8d83a 	srl	fp,r17,r3
 402a944:	80c4d83a 	srl	r2,r16,r3
 402a948:	982cd43a 	srli	r22,r19,16
 402a94c:	8ca2983a 	sll	r17,r17,r18
 402a950:	e009883a 	mov	r4,fp
 402a954:	b00b883a 	mov	r5,r22
 402a958:	146ab03a 	or	r21,r2,r17
 402a95c:	402abc40 	call	402abc4 <__umodsi3>
 402a960:	b00b883a 	mov	r5,r22
 402a964:	e009883a 	mov	r4,fp
 402a968:	1029883a 	mov	r20,r2
 402a96c:	9dffffcc 	andi	r23,r19,65535
 402a970:	402ab600 	call	402ab60 <__udivsi3>
 402a974:	b809883a 	mov	r4,r23
 402a978:	100b883a 	mov	r5,r2
 402a97c:	402ac1c0 	call	402ac1c <__mulsi3>
 402a980:	a008943a 	slli	r4,r20,16
 402a984:	a806d43a 	srli	r3,r21,16
 402a988:	84a8983a 	sll	r20,r16,r18
 402a98c:	1906b03a 	or	r3,r3,r4
 402a990:	1880042e 	bgeu	r3,r2,402a9a4 <__umoddi3+0x500>
 402a994:	1cc7883a 	add	r3,r3,r19
 402a998:	1cc00236 	bltu	r3,r19,402a9a4 <__umoddi3+0x500>
 402a99c:	1880012e 	bgeu	r3,r2,402a9a4 <__umoddi3+0x500>
 402a9a0:	1cc7883a 	add	r3,r3,r19
 402a9a4:	18a3c83a 	sub	r17,r3,r2
 402a9a8:	b00b883a 	mov	r5,r22
 402a9ac:	8809883a 	mov	r4,r17
 402a9b0:	402abc40 	call	402abc4 <__umodsi3>
 402a9b4:	b00b883a 	mov	r5,r22
 402a9b8:	8809883a 	mov	r4,r17
 402a9bc:	1021883a 	mov	r16,r2
 402a9c0:	402ab600 	call	402ab60 <__udivsi3>
 402a9c4:	100b883a 	mov	r5,r2
 402a9c8:	b809883a 	mov	r4,r23
 402a9cc:	8020943a 	slli	r16,r16,16
 402a9d0:	402ac1c0 	call	402ac1c <__mulsi3>
 402a9d4:	a8ffffcc 	andi	r3,r21,65535
 402a9d8:	1c06b03a 	or	r3,r3,r16
 402a9dc:	1880042e 	bgeu	r3,r2,402a9f0 <__umoddi3+0x54c>
 402a9e0:	1cc7883a 	add	r3,r3,r19
 402a9e4:	1cc00236 	bltu	r3,r19,402a9f0 <__umoddi3+0x54c>
 402a9e8:	1880012e 	bgeu	r3,r2,402a9f0 <__umoddi3+0x54c>
 402a9ec:	1cc7883a 	add	r3,r3,r19
 402a9f0:	18a3c83a 	sub	r17,r3,r2
 402a9f4:	003f2906 	br	402a69c <__flash_rwdata_start+0xffff4e4c>
 402a9f8:	e48fc83a 	sub	r7,fp,r18
 402a9fc:	1d49c83a 	sub	r4,r3,r21
 402aa00:	e1f9803a 	cmpltu	fp,fp,r7
 402aa04:	2739c83a 	sub	fp,r4,fp
 402aa08:	8f09c83a 	sub	r4,r17,fp
 402aa0c:	003fc306 	br	402a91c <__flash_rwdata_start+0xffff50cc>
 402aa10:	01000604 	movi	r4,24
 402aa14:	003ef906 	br	402a5fc <__flash_rwdata_start+0xffff4dac>
 402aa18:	00800604 	movi	r2,24
 402aa1c:	003f1306 	br	402a66c <__flash_rwdata_start+0xffff4e1c>
 402aa20:	01000604 	movi	r4,24
 402aa24:	003eb606 	br	402a500 <__flash_rwdata_start+0xffff4cb0>
 402aa28:	40bf902e 	bgeu	r8,r2,402a86c <__flash_rwdata_start+0xffff501c>
 402aa2c:	b5bfff84 	addi	r22,r22,-2
 402aa30:	4551883a 	add	r8,r8,r21
 402aa34:	003f8e06 	br	402a870 <__flash_rwdata_start+0xffff5020>
 402aa38:	18bf762e 	bgeu	r3,r2,402a814 <__flash_rwdata_start+0xffff4fc4>
 402aa3c:	8c7fff84 	addi	r17,r17,-2
 402aa40:	1d47883a 	add	r3,r3,r21
 402aa44:	003f7406 	br	402a818 <__flash_rwdata_start+0xffff4fc8>
 402aa48:	1cc7883a 	add	r3,r3,r19
 402aa4c:	003ecd06 	br	402a584 <__flash_rwdata_start+0xffff4d34>
 402aa50:	8005883a 	mov	r2,r16
 402aa54:	003ef806 	br	402a638 <__flash_rwdata_start+0xffff4de8>
 402aa58:	873fe736 	bltu	r16,fp,402a9f8 <__flash_rwdata_start+0xffff51a8>
 402aa5c:	e00f883a 	mov	r7,fp
 402aa60:	0009883a 	mov	r4,zero
 402aa64:	003fad06 	br	402a91c <__flash_rwdata_start+0xffff50cc>

0402aa68 <__divsi3>:
 402aa68:	20001b16 	blt	r4,zero,402aad8 <__divsi3+0x70>
 402aa6c:	000f883a 	mov	r7,zero
 402aa70:	28001616 	blt	r5,zero,402aacc <__divsi3+0x64>
 402aa74:	200d883a 	mov	r6,r4
 402aa78:	29001a2e 	bgeu	r5,r4,402aae4 <__divsi3+0x7c>
 402aa7c:	00800804 	movi	r2,32
 402aa80:	00c00044 	movi	r3,1
 402aa84:	00000106 	br	402aa8c <__divsi3+0x24>
 402aa88:	10000d26 	beq	r2,zero,402aac0 <__divsi3+0x58>
 402aa8c:	294b883a 	add	r5,r5,r5
 402aa90:	10bfffc4 	addi	r2,r2,-1
 402aa94:	18c7883a 	add	r3,r3,r3
 402aa98:	293ffb36 	bltu	r5,r4,402aa88 <__flash_rwdata_start+0xffff5238>
 402aa9c:	0005883a 	mov	r2,zero
 402aaa0:	18000726 	beq	r3,zero,402aac0 <__divsi3+0x58>
 402aaa4:	0005883a 	mov	r2,zero
 402aaa8:	31400236 	bltu	r6,r5,402aab4 <__divsi3+0x4c>
 402aaac:	314dc83a 	sub	r6,r6,r5
 402aab0:	10c4b03a 	or	r2,r2,r3
 402aab4:	1806d07a 	srli	r3,r3,1
 402aab8:	280ad07a 	srli	r5,r5,1
 402aabc:	183ffa1e 	bne	r3,zero,402aaa8 <__flash_rwdata_start+0xffff5258>
 402aac0:	38000126 	beq	r7,zero,402aac8 <__divsi3+0x60>
 402aac4:	0085c83a 	sub	r2,zero,r2
 402aac8:	f800283a 	ret
 402aacc:	014bc83a 	sub	r5,zero,r5
 402aad0:	39c0005c 	xori	r7,r7,1
 402aad4:	003fe706 	br	402aa74 <__flash_rwdata_start+0xffff5224>
 402aad8:	0109c83a 	sub	r4,zero,r4
 402aadc:	01c00044 	movi	r7,1
 402aae0:	003fe306 	br	402aa70 <__flash_rwdata_start+0xffff5220>
 402aae4:	00c00044 	movi	r3,1
 402aae8:	003fee06 	br	402aaa4 <__flash_rwdata_start+0xffff5254>

0402aaec <__modsi3>:
 402aaec:	20001716 	blt	r4,zero,402ab4c <__modsi3+0x60>
 402aaf0:	000f883a 	mov	r7,zero
 402aaf4:	2005883a 	mov	r2,r4
 402aaf8:	28001216 	blt	r5,zero,402ab44 <__modsi3+0x58>
 402aafc:	2900162e 	bgeu	r5,r4,402ab58 <__modsi3+0x6c>
 402ab00:	01800804 	movi	r6,32
 402ab04:	00c00044 	movi	r3,1
 402ab08:	00000106 	br	402ab10 <__modsi3+0x24>
 402ab0c:	30000a26 	beq	r6,zero,402ab38 <__modsi3+0x4c>
 402ab10:	294b883a 	add	r5,r5,r5
 402ab14:	31bfffc4 	addi	r6,r6,-1
 402ab18:	18c7883a 	add	r3,r3,r3
 402ab1c:	293ffb36 	bltu	r5,r4,402ab0c <__flash_rwdata_start+0xffff52bc>
 402ab20:	18000526 	beq	r3,zero,402ab38 <__modsi3+0x4c>
 402ab24:	1806d07a 	srli	r3,r3,1
 402ab28:	11400136 	bltu	r2,r5,402ab30 <__modsi3+0x44>
 402ab2c:	1145c83a 	sub	r2,r2,r5
 402ab30:	280ad07a 	srli	r5,r5,1
 402ab34:	183ffb1e 	bne	r3,zero,402ab24 <__flash_rwdata_start+0xffff52d4>
 402ab38:	38000126 	beq	r7,zero,402ab40 <__modsi3+0x54>
 402ab3c:	0085c83a 	sub	r2,zero,r2
 402ab40:	f800283a 	ret
 402ab44:	014bc83a 	sub	r5,zero,r5
 402ab48:	003fec06 	br	402aafc <__flash_rwdata_start+0xffff52ac>
 402ab4c:	0109c83a 	sub	r4,zero,r4
 402ab50:	01c00044 	movi	r7,1
 402ab54:	003fe706 	br	402aaf4 <__flash_rwdata_start+0xffff52a4>
 402ab58:	00c00044 	movi	r3,1
 402ab5c:	003ff106 	br	402ab24 <__flash_rwdata_start+0xffff52d4>

0402ab60 <__udivsi3>:
 402ab60:	200d883a 	mov	r6,r4
 402ab64:	2900152e 	bgeu	r5,r4,402abbc <__udivsi3+0x5c>
 402ab68:	28001416 	blt	r5,zero,402abbc <__udivsi3+0x5c>
 402ab6c:	00800804 	movi	r2,32
 402ab70:	00c00044 	movi	r3,1
 402ab74:	00000206 	br	402ab80 <__udivsi3+0x20>
 402ab78:	10000e26 	beq	r2,zero,402abb4 <__udivsi3+0x54>
 402ab7c:	28000516 	blt	r5,zero,402ab94 <__udivsi3+0x34>
 402ab80:	294b883a 	add	r5,r5,r5
 402ab84:	10bfffc4 	addi	r2,r2,-1
 402ab88:	18c7883a 	add	r3,r3,r3
 402ab8c:	293ffa36 	bltu	r5,r4,402ab78 <__flash_rwdata_start+0xffff5328>
 402ab90:	18000826 	beq	r3,zero,402abb4 <__udivsi3+0x54>
 402ab94:	0005883a 	mov	r2,zero
 402ab98:	31400236 	bltu	r6,r5,402aba4 <__udivsi3+0x44>
 402ab9c:	314dc83a 	sub	r6,r6,r5
 402aba0:	10c4b03a 	or	r2,r2,r3
 402aba4:	1806d07a 	srli	r3,r3,1
 402aba8:	280ad07a 	srli	r5,r5,1
 402abac:	183ffa1e 	bne	r3,zero,402ab98 <__flash_rwdata_start+0xffff5348>
 402abb0:	f800283a 	ret
 402abb4:	0005883a 	mov	r2,zero
 402abb8:	f800283a 	ret
 402abbc:	00c00044 	movi	r3,1
 402abc0:	003ff406 	br	402ab94 <__flash_rwdata_start+0xffff5344>

0402abc4 <__umodsi3>:
 402abc4:	2005883a 	mov	r2,r4
 402abc8:	2900122e 	bgeu	r5,r4,402ac14 <__umodsi3+0x50>
 402abcc:	28001116 	blt	r5,zero,402ac14 <__umodsi3+0x50>
 402abd0:	01800804 	movi	r6,32
 402abd4:	00c00044 	movi	r3,1
 402abd8:	00000206 	br	402abe4 <__umodsi3+0x20>
 402abdc:	30000c26 	beq	r6,zero,402ac10 <__umodsi3+0x4c>
 402abe0:	28000516 	blt	r5,zero,402abf8 <__umodsi3+0x34>
 402abe4:	294b883a 	add	r5,r5,r5
 402abe8:	31bfffc4 	addi	r6,r6,-1
 402abec:	18c7883a 	add	r3,r3,r3
 402abf0:	293ffa36 	bltu	r5,r4,402abdc <__flash_rwdata_start+0xffff538c>
 402abf4:	18000626 	beq	r3,zero,402ac10 <__umodsi3+0x4c>
 402abf8:	1806d07a 	srli	r3,r3,1
 402abfc:	11400136 	bltu	r2,r5,402ac04 <__umodsi3+0x40>
 402ac00:	1145c83a 	sub	r2,r2,r5
 402ac04:	280ad07a 	srli	r5,r5,1
 402ac08:	183ffb1e 	bne	r3,zero,402abf8 <__flash_rwdata_start+0xffff53a8>
 402ac0c:	f800283a 	ret
 402ac10:	f800283a 	ret
 402ac14:	00c00044 	movi	r3,1
 402ac18:	003ff706 	br	402abf8 <__flash_rwdata_start+0xffff53a8>

0402ac1c <__mulsi3>:
 402ac1c:	0005883a 	mov	r2,zero
 402ac20:	20000726 	beq	r4,zero,402ac40 <__mulsi3+0x24>
 402ac24:	20c0004c 	andi	r3,r4,1
 402ac28:	2008d07a 	srli	r4,r4,1
 402ac2c:	18000126 	beq	r3,zero,402ac34 <__mulsi3+0x18>
 402ac30:	1145883a 	add	r2,r2,r5
 402ac34:	294b883a 	add	r5,r5,r5
 402ac38:	203ffa1e 	bne	r4,zero,402ac24 <__flash_rwdata_start+0xffff53d4>
 402ac3c:	f800283a 	ret
 402ac40:	f800283a 	ret

0402ac44 <__adddf3>:
 402ac44:	02c00434 	movhi	r11,16
 402ac48:	5affffc4 	addi	r11,r11,-1
 402ac4c:	2806d7fa 	srli	r3,r5,31
 402ac50:	2ad4703a 	and	r10,r5,r11
 402ac54:	3ad2703a 	and	r9,r7,r11
 402ac58:	3804d53a 	srli	r2,r7,20
 402ac5c:	3018d77a 	srli	r12,r6,29
 402ac60:	280ad53a 	srli	r5,r5,20
 402ac64:	501490fa 	slli	r10,r10,3
 402ac68:	2010d77a 	srli	r8,r4,29
 402ac6c:	481290fa 	slli	r9,r9,3
 402ac70:	380ed7fa 	srli	r7,r7,31
 402ac74:	defffb04 	addi	sp,sp,-20
 402ac78:	dc800215 	stw	r18,8(sp)
 402ac7c:	dc400115 	stw	r17,4(sp)
 402ac80:	dc000015 	stw	r16,0(sp)
 402ac84:	dfc00415 	stw	ra,16(sp)
 402ac88:	dcc00315 	stw	r19,12(sp)
 402ac8c:	1c803fcc 	andi	r18,r3,255
 402ac90:	2c01ffcc 	andi	r16,r5,2047
 402ac94:	5210b03a 	or	r8,r10,r8
 402ac98:	202290fa 	slli	r17,r4,3
 402ac9c:	1081ffcc 	andi	r2,r2,2047
 402aca0:	4b12b03a 	or	r9,r9,r12
 402aca4:	300c90fa 	slli	r6,r6,3
 402aca8:	91c07526 	beq	r18,r7,402ae80 <__adddf3+0x23c>
 402acac:	8087c83a 	sub	r3,r16,r2
 402acb0:	00c0ab0e 	bge	zero,r3,402af60 <__adddf3+0x31c>
 402acb4:	10002a1e 	bne	r2,zero,402ad60 <__adddf3+0x11c>
 402acb8:	4984b03a 	or	r2,r9,r6
 402acbc:	1000961e 	bne	r2,zero,402af18 <__adddf3+0x2d4>
 402acc0:	888001cc 	andi	r2,r17,7
 402acc4:	10000726 	beq	r2,zero,402ace4 <__adddf3+0xa0>
 402acc8:	888003cc 	andi	r2,r17,15
 402accc:	00c00104 	movi	r3,4
 402acd0:	10c00426 	beq	r2,r3,402ace4 <__adddf3+0xa0>
 402acd4:	88c7883a 	add	r3,r17,r3
 402acd8:	1c63803a 	cmpltu	r17,r3,r17
 402acdc:	4451883a 	add	r8,r8,r17
 402ace0:	1823883a 	mov	r17,r3
 402ace4:	4080202c 	andhi	r2,r8,128
 402ace8:	10005926 	beq	r2,zero,402ae50 <__adddf3+0x20c>
 402acec:	84000044 	addi	r16,r16,1
 402acf0:	0081ffc4 	movi	r2,2047
 402acf4:	8080ba26 	beq	r16,r2,402afe0 <__adddf3+0x39c>
 402acf8:	00bfe034 	movhi	r2,65408
 402acfc:	10bfffc4 	addi	r2,r2,-1
 402ad00:	4090703a 	and	r8,r8,r2
 402ad04:	4004977a 	slli	r2,r8,29
 402ad08:	4010927a 	slli	r8,r8,9
 402ad0c:	8822d0fa 	srli	r17,r17,3
 402ad10:	8401ffcc 	andi	r16,r16,2047
 402ad14:	4010d33a 	srli	r8,r8,12
 402ad18:	9007883a 	mov	r3,r18
 402ad1c:	1444b03a 	or	r2,r2,r17
 402ad20:	8401ffcc 	andi	r16,r16,2047
 402ad24:	8020953a 	slli	r16,r16,20
 402ad28:	18c03fcc 	andi	r3,r3,255
 402ad2c:	01000434 	movhi	r4,16
 402ad30:	213fffc4 	addi	r4,r4,-1
 402ad34:	180697fa 	slli	r3,r3,31
 402ad38:	4110703a 	and	r8,r8,r4
 402ad3c:	4410b03a 	or	r8,r8,r16
 402ad40:	40c6b03a 	or	r3,r8,r3
 402ad44:	dfc00417 	ldw	ra,16(sp)
 402ad48:	dcc00317 	ldw	r19,12(sp)
 402ad4c:	dc800217 	ldw	r18,8(sp)
 402ad50:	dc400117 	ldw	r17,4(sp)
 402ad54:	dc000017 	ldw	r16,0(sp)
 402ad58:	dec00504 	addi	sp,sp,20
 402ad5c:	f800283a 	ret
 402ad60:	0081ffc4 	movi	r2,2047
 402ad64:	80bfd626 	beq	r16,r2,402acc0 <__flash_rwdata_start+0xffff5470>
 402ad68:	4a402034 	orhi	r9,r9,128
 402ad6c:	00800e04 	movi	r2,56
 402ad70:	10c09f16 	blt	r2,r3,402aff0 <__adddf3+0x3ac>
 402ad74:	008007c4 	movi	r2,31
 402ad78:	10c0c216 	blt	r2,r3,402b084 <__adddf3+0x440>
 402ad7c:	00800804 	movi	r2,32
 402ad80:	10c5c83a 	sub	r2,r2,r3
 402ad84:	488a983a 	sll	r5,r9,r2
 402ad88:	30c8d83a 	srl	r4,r6,r3
 402ad8c:	3084983a 	sll	r2,r6,r2
 402ad90:	48c6d83a 	srl	r3,r9,r3
 402ad94:	290cb03a 	or	r6,r5,r4
 402ad98:	1004c03a 	cmpne	r2,r2,zero
 402ad9c:	308cb03a 	or	r6,r6,r2
 402ada0:	898dc83a 	sub	r6,r17,r6
 402ada4:	89a3803a 	cmpltu	r17,r17,r6
 402ada8:	40d1c83a 	sub	r8,r8,r3
 402adac:	4451c83a 	sub	r8,r8,r17
 402adb0:	3023883a 	mov	r17,r6
 402adb4:	4080202c 	andhi	r2,r8,128
 402adb8:	10002326 	beq	r2,zero,402ae48 <__adddf3+0x204>
 402adbc:	04c02034 	movhi	r19,128
 402adc0:	9cffffc4 	addi	r19,r19,-1
 402adc4:	44e6703a 	and	r19,r8,r19
 402adc8:	98007626 	beq	r19,zero,402afa4 <__adddf3+0x360>
 402adcc:	9809883a 	mov	r4,r19
 402add0:	402d4840 	call	402d484 <__clzsi2>
 402add4:	10fffe04 	addi	r3,r2,-8
 402add8:	010007c4 	movi	r4,31
 402addc:	20c07716 	blt	r4,r3,402afbc <__adddf3+0x378>
 402ade0:	00800804 	movi	r2,32
 402ade4:	10c5c83a 	sub	r2,r2,r3
 402ade8:	8884d83a 	srl	r2,r17,r2
 402adec:	98d0983a 	sll	r8,r19,r3
 402adf0:	88e2983a 	sll	r17,r17,r3
 402adf4:	1204b03a 	or	r2,r2,r8
 402adf8:	1c007416 	blt	r3,r16,402afcc <__adddf3+0x388>
 402adfc:	1c21c83a 	sub	r16,r3,r16
 402ae00:	82000044 	addi	r8,r16,1
 402ae04:	00c007c4 	movi	r3,31
 402ae08:	1a009116 	blt	r3,r8,402b050 <__adddf3+0x40c>
 402ae0c:	00c00804 	movi	r3,32
 402ae10:	1a07c83a 	sub	r3,r3,r8
 402ae14:	8a08d83a 	srl	r4,r17,r8
 402ae18:	88e2983a 	sll	r17,r17,r3
 402ae1c:	10c6983a 	sll	r3,r2,r3
 402ae20:	1210d83a 	srl	r8,r2,r8
 402ae24:	8804c03a 	cmpne	r2,r17,zero
 402ae28:	1906b03a 	or	r3,r3,r4
 402ae2c:	18a2b03a 	or	r17,r3,r2
 402ae30:	0021883a 	mov	r16,zero
 402ae34:	003fa206 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402ae38:	1890b03a 	or	r8,r3,r2
 402ae3c:	40017d26 	beq	r8,zero,402b434 <__adddf3+0x7f0>
 402ae40:	1011883a 	mov	r8,r2
 402ae44:	1823883a 	mov	r17,r3
 402ae48:	888001cc 	andi	r2,r17,7
 402ae4c:	103f9e1e 	bne	r2,zero,402acc8 <__flash_rwdata_start+0xffff5478>
 402ae50:	4004977a 	slli	r2,r8,29
 402ae54:	8822d0fa 	srli	r17,r17,3
 402ae58:	4010d0fa 	srli	r8,r8,3
 402ae5c:	9007883a 	mov	r3,r18
 402ae60:	1444b03a 	or	r2,r2,r17
 402ae64:	0101ffc4 	movi	r4,2047
 402ae68:	81002426 	beq	r16,r4,402aefc <__adddf3+0x2b8>
 402ae6c:	8120703a 	and	r16,r16,r4
 402ae70:	01000434 	movhi	r4,16
 402ae74:	213fffc4 	addi	r4,r4,-1
 402ae78:	4110703a 	and	r8,r8,r4
 402ae7c:	003fa806 	br	402ad20 <__flash_rwdata_start+0xffff54d0>
 402ae80:	8089c83a 	sub	r4,r16,r2
 402ae84:	01005e0e 	bge	zero,r4,402b000 <__adddf3+0x3bc>
 402ae88:	10002b26 	beq	r2,zero,402af38 <__adddf3+0x2f4>
 402ae8c:	0081ffc4 	movi	r2,2047
 402ae90:	80bf8b26 	beq	r16,r2,402acc0 <__flash_rwdata_start+0xffff5470>
 402ae94:	4a402034 	orhi	r9,r9,128
 402ae98:	00800e04 	movi	r2,56
 402ae9c:	1100a40e 	bge	r2,r4,402b130 <__adddf3+0x4ec>
 402aea0:	498cb03a 	or	r6,r9,r6
 402aea4:	300ac03a 	cmpne	r5,r6,zero
 402aea8:	0013883a 	mov	r9,zero
 402aeac:	2c4b883a 	add	r5,r5,r17
 402aeb0:	2c63803a 	cmpltu	r17,r5,r17
 402aeb4:	4a11883a 	add	r8,r9,r8
 402aeb8:	8a11883a 	add	r8,r17,r8
 402aebc:	2823883a 	mov	r17,r5
 402aec0:	4080202c 	andhi	r2,r8,128
 402aec4:	103fe026 	beq	r2,zero,402ae48 <__flash_rwdata_start+0xffff55f8>
 402aec8:	84000044 	addi	r16,r16,1
 402aecc:	0081ffc4 	movi	r2,2047
 402aed0:	8080d226 	beq	r16,r2,402b21c <__adddf3+0x5d8>
 402aed4:	00bfe034 	movhi	r2,65408
 402aed8:	10bfffc4 	addi	r2,r2,-1
 402aedc:	4090703a 	and	r8,r8,r2
 402aee0:	880ad07a 	srli	r5,r17,1
 402aee4:	400897fa 	slli	r4,r8,31
 402aee8:	88c0004c 	andi	r3,r17,1
 402aeec:	28e2b03a 	or	r17,r5,r3
 402aef0:	4010d07a 	srli	r8,r8,1
 402aef4:	2462b03a 	or	r17,r4,r17
 402aef8:	003f7106 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402aefc:	4088b03a 	or	r4,r8,r2
 402af00:	20014526 	beq	r4,zero,402b418 <__adddf3+0x7d4>
 402af04:	01000434 	movhi	r4,16
 402af08:	42000234 	orhi	r8,r8,8
 402af0c:	213fffc4 	addi	r4,r4,-1
 402af10:	4110703a 	and	r8,r8,r4
 402af14:	003f8206 	br	402ad20 <__flash_rwdata_start+0xffff54d0>
 402af18:	18ffffc4 	addi	r3,r3,-1
 402af1c:	1800491e 	bne	r3,zero,402b044 <__adddf3+0x400>
 402af20:	898bc83a 	sub	r5,r17,r6
 402af24:	8963803a 	cmpltu	r17,r17,r5
 402af28:	4251c83a 	sub	r8,r8,r9
 402af2c:	4451c83a 	sub	r8,r8,r17
 402af30:	2823883a 	mov	r17,r5
 402af34:	003f9f06 	br	402adb4 <__flash_rwdata_start+0xffff5564>
 402af38:	4984b03a 	or	r2,r9,r6
 402af3c:	103f6026 	beq	r2,zero,402acc0 <__flash_rwdata_start+0xffff5470>
 402af40:	213fffc4 	addi	r4,r4,-1
 402af44:	2000931e 	bne	r4,zero,402b194 <__adddf3+0x550>
 402af48:	898d883a 	add	r6,r17,r6
 402af4c:	3463803a 	cmpltu	r17,r6,r17
 402af50:	4251883a 	add	r8,r8,r9
 402af54:	8a11883a 	add	r8,r17,r8
 402af58:	3023883a 	mov	r17,r6
 402af5c:	003fd806 	br	402aec0 <__flash_rwdata_start+0xffff5670>
 402af60:	1800541e 	bne	r3,zero,402b0b4 <__adddf3+0x470>
 402af64:	80800044 	addi	r2,r16,1
 402af68:	1081ffcc 	andi	r2,r2,2047
 402af6c:	00c00044 	movi	r3,1
 402af70:	1880a00e 	bge	r3,r2,402b1f4 <__adddf3+0x5b0>
 402af74:	8989c83a 	sub	r4,r17,r6
 402af78:	8905803a 	cmpltu	r2,r17,r4
 402af7c:	4267c83a 	sub	r19,r8,r9
 402af80:	98a7c83a 	sub	r19,r19,r2
 402af84:	9880202c 	andhi	r2,r19,128
 402af88:	10006326 	beq	r2,zero,402b118 <__adddf3+0x4d4>
 402af8c:	3463c83a 	sub	r17,r6,r17
 402af90:	4a07c83a 	sub	r3,r9,r8
 402af94:	344d803a 	cmpltu	r6,r6,r17
 402af98:	19a7c83a 	sub	r19,r3,r6
 402af9c:	3825883a 	mov	r18,r7
 402afa0:	983f8a1e 	bne	r19,zero,402adcc <__flash_rwdata_start+0xffff557c>
 402afa4:	8809883a 	mov	r4,r17
 402afa8:	402d4840 	call	402d484 <__clzsi2>
 402afac:	10800804 	addi	r2,r2,32
 402afb0:	10fffe04 	addi	r3,r2,-8
 402afb4:	010007c4 	movi	r4,31
 402afb8:	20ff890e 	bge	r4,r3,402ade0 <__flash_rwdata_start+0xffff5590>
 402afbc:	10bff604 	addi	r2,r2,-40
 402afc0:	8884983a 	sll	r2,r17,r2
 402afc4:	0023883a 	mov	r17,zero
 402afc8:	1c3f8c0e 	bge	r3,r16,402adfc <__flash_rwdata_start+0xffff55ac>
 402afcc:	023fe034 	movhi	r8,65408
 402afd0:	423fffc4 	addi	r8,r8,-1
 402afd4:	80e1c83a 	sub	r16,r16,r3
 402afd8:	1210703a 	and	r8,r2,r8
 402afdc:	003f3806 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402afe0:	9007883a 	mov	r3,r18
 402afe4:	0011883a 	mov	r8,zero
 402afe8:	0005883a 	mov	r2,zero
 402afec:	003f4c06 	br	402ad20 <__flash_rwdata_start+0xffff54d0>
 402aff0:	498cb03a 	or	r6,r9,r6
 402aff4:	300cc03a 	cmpne	r6,r6,zero
 402aff8:	0007883a 	mov	r3,zero
 402affc:	003f6806 	br	402ada0 <__flash_rwdata_start+0xffff5550>
 402b000:	20009c1e 	bne	r4,zero,402b274 <__adddf3+0x630>
 402b004:	80800044 	addi	r2,r16,1
 402b008:	1141ffcc 	andi	r5,r2,2047
 402b00c:	01000044 	movi	r4,1
 402b010:	2140670e 	bge	r4,r5,402b1b0 <__adddf3+0x56c>
 402b014:	0101ffc4 	movi	r4,2047
 402b018:	11007f26 	beq	r2,r4,402b218 <__adddf3+0x5d4>
 402b01c:	898d883a 	add	r6,r17,r6
 402b020:	4247883a 	add	r3,r8,r9
 402b024:	3451803a 	cmpltu	r8,r6,r17
 402b028:	40d1883a 	add	r8,r8,r3
 402b02c:	402297fa 	slli	r17,r8,31
 402b030:	300cd07a 	srli	r6,r6,1
 402b034:	4010d07a 	srli	r8,r8,1
 402b038:	1021883a 	mov	r16,r2
 402b03c:	89a2b03a 	or	r17,r17,r6
 402b040:	003f1f06 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b044:	0081ffc4 	movi	r2,2047
 402b048:	80bf481e 	bne	r16,r2,402ad6c <__flash_rwdata_start+0xffff551c>
 402b04c:	003f1c06 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b050:	843ff844 	addi	r16,r16,-31
 402b054:	01000804 	movi	r4,32
 402b058:	1406d83a 	srl	r3,r2,r16
 402b05c:	41005026 	beq	r8,r4,402b1a0 <__adddf3+0x55c>
 402b060:	01001004 	movi	r4,64
 402b064:	2211c83a 	sub	r8,r4,r8
 402b068:	1204983a 	sll	r2,r2,r8
 402b06c:	88a2b03a 	or	r17,r17,r2
 402b070:	8822c03a 	cmpne	r17,r17,zero
 402b074:	1c62b03a 	or	r17,r3,r17
 402b078:	0011883a 	mov	r8,zero
 402b07c:	0021883a 	mov	r16,zero
 402b080:	003f7106 	br	402ae48 <__flash_rwdata_start+0xffff55f8>
 402b084:	193ff804 	addi	r4,r3,-32
 402b088:	00800804 	movi	r2,32
 402b08c:	4908d83a 	srl	r4,r9,r4
 402b090:	18804526 	beq	r3,r2,402b1a8 <__adddf3+0x564>
 402b094:	00801004 	movi	r2,64
 402b098:	10c5c83a 	sub	r2,r2,r3
 402b09c:	4886983a 	sll	r3,r9,r2
 402b0a0:	198cb03a 	or	r6,r3,r6
 402b0a4:	300cc03a 	cmpne	r6,r6,zero
 402b0a8:	218cb03a 	or	r6,r4,r6
 402b0ac:	0007883a 	mov	r3,zero
 402b0b0:	003f3b06 	br	402ada0 <__flash_rwdata_start+0xffff5550>
 402b0b4:	80002a26 	beq	r16,zero,402b160 <__adddf3+0x51c>
 402b0b8:	0101ffc4 	movi	r4,2047
 402b0bc:	11006826 	beq	r2,r4,402b260 <__adddf3+0x61c>
 402b0c0:	00c7c83a 	sub	r3,zero,r3
 402b0c4:	42002034 	orhi	r8,r8,128
 402b0c8:	01000e04 	movi	r4,56
 402b0cc:	20c07c16 	blt	r4,r3,402b2c0 <__adddf3+0x67c>
 402b0d0:	010007c4 	movi	r4,31
 402b0d4:	20c0da16 	blt	r4,r3,402b440 <__adddf3+0x7fc>
 402b0d8:	01000804 	movi	r4,32
 402b0dc:	20c9c83a 	sub	r4,r4,r3
 402b0e0:	4114983a 	sll	r10,r8,r4
 402b0e4:	88cad83a 	srl	r5,r17,r3
 402b0e8:	8908983a 	sll	r4,r17,r4
 402b0ec:	40c6d83a 	srl	r3,r8,r3
 402b0f0:	5162b03a 	or	r17,r10,r5
 402b0f4:	2008c03a 	cmpne	r4,r4,zero
 402b0f8:	8922b03a 	or	r17,r17,r4
 402b0fc:	3463c83a 	sub	r17,r6,r17
 402b100:	48c7c83a 	sub	r3,r9,r3
 402b104:	344d803a 	cmpltu	r6,r6,r17
 402b108:	1991c83a 	sub	r8,r3,r6
 402b10c:	1021883a 	mov	r16,r2
 402b110:	3825883a 	mov	r18,r7
 402b114:	003f2706 	br	402adb4 <__flash_rwdata_start+0xffff5564>
 402b118:	24d0b03a 	or	r8,r4,r19
 402b11c:	40001b1e 	bne	r8,zero,402b18c <__adddf3+0x548>
 402b120:	0005883a 	mov	r2,zero
 402b124:	0007883a 	mov	r3,zero
 402b128:	0021883a 	mov	r16,zero
 402b12c:	003f4d06 	br	402ae64 <__flash_rwdata_start+0xffff5614>
 402b130:	008007c4 	movi	r2,31
 402b134:	11003c16 	blt	r2,r4,402b228 <__adddf3+0x5e4>
 402b138:	00800804 	movi	r2,32
 402b13c:	1105c83a 	sub	r2,r2,r4
 402b140:	488e983a 	sll	r7,r9,r2
 402b144:	310ad83a 	srl	r5,r6,r4
 402b148:	3084983a 	sll	r2,r6,r2
 402b14c:	4912d83a 	srl	r9,r9,r4
 402b150:	394ab03a 	or	r5,r7,r5
 402b154:	1004c03a 	cmpne	r2,r2,zero
 402b158:	288ab03a 	or	r5,r5,r2
 402b15c:	003f5306 	br	402aeac <__flash_rwdata_start+0xffff565c>
 402b160:	4448b03a 	or	r4,r8,r17
 402b164:	20003e26 	beq	r4,zero,402b260 <__adddf3+0x61c>
 402b168:	00c6303a 	nor	r3,zero,r3
 402b16c:	18003a1e 	bne	r3,zero,402b258 <__adddf3+0x614>
 402b170:	3463c83a 	sub	r17,r6,r17
 402b174:	4a07c83a 	sub	r3,r9,r8
 402b178:	344d803a 	cmpltu	r6,r6,r17
 402b17c:	1991c83a 	sub	r8,r3,r6
 402b180:	1021883a 	mov	r16,r2
 402b184:	3825883a 	mov	r18,r7
 402b188:	003f0a06 	br	402adb4 <__flash_rwdata_start+0xffff5564>
 402b18c:	2023883a 	mov	r17,r4
 402b190:	003f0d06 	br	402adc8 <__flash_rwdata_start+0xffff5578>
 402b194:	0081ffc4 	movi	r2,2047
 402b198:	80bf3f1e 	bne	r16,r2,402ae98 <__flash_rwdata_start+0xffff5648>
 402b19c:	003ec806 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b1a0:	0005883a 	mov	r2,zero
 402b1a4:	003fb106 	br	402b06c <__flash_rwdata_start+0xffff581c>
 402b1a8:	0007883a 	mov	r3,zero
 402b1ac:	003fbc06 	br	402b0a0 <__flash_rwdata_start+0xffff5850>
 402b1b0:	4444b03a 	or	r2,r8,r17
 402b1b4:	8000871e 	bne	r16,zero,402b3d4 <__adddf3+0x790>
 402b1b8:	1000ba26 	beq	r2,zero,402b4a4 <__adddf3+0x860>
 402b1bc:	4984b03a 	or	r2,r9,r6
 402b1c0:	103ebf26 	beq	r2,zero,402acc0 <__flash_rwdata_start+0xffff5470>
 402b1c4:	8985883a 	add	r2,r17,r6
 402b1c8:	4247883a 	add	r3,r8,r9
 402b1cc:	1451803a 	cmpltu	r8,r2,r17
 402b1d0:	40d1883a 	add	r8,r8,r3
 402b1d4:	40c0202c 	andhi	r3,r8,128
 402b1d8:	1023883a 	mov	r17,r2
 402b1dc:	183f1a26 	beq	r3,zero,402ae48 <__flash_rwdata_start+0xffff55f8>
 402b1e0:	00bfe034 	movhi	r2,65408
 402b1e4:	10bfffc4 	addi	r2,r2,-1
 402b1e8:	2021883a 	mov	r16,r4
 402b1ec:	4090703a 	and	r8,r8,r2
 402b1f0:	003eb306 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b1f4:	4444b03a 	or	r2,r8,r17
 402b1f8:	8000291e 	bne	r16,zero,402b2a0 <__adddf3+0x65c>
 402b1fc:	10004b1e 	bne	r2,zero,402b32c <__adddf3+0x6e8>
 402b200:	4990b03a 	or	r8,r9,r6
 402b204:	40008b26 	beq	r8,zero,402b434 <__adddf3+0x7f0>
 402b208:	4811883a 	mov	r8,r9
 402b20c:	3023883a 	mov	r17,r6
 402b210:	3825883a 	mov	r18,r7
 402b214:	003eaa06 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b218:	1021883a 	mov	r16,r2
 402b21c:	0011883a 	mov	r8,zero
 402b220:	0005883a 	mov	r2,zero
 402b224:	003f0f06 	br	402ae64 <__flash_rwdata_start+0xffff5614>
 402b228:	217ff804 	addi	r5,r4,-32
 402b22c:	00800804 	movi	r2,32
 402b230:	494ad83a 	srl	r5,r9,r5
 402b234:	20807d26 	beq	r4,r2,402b42c <__adddf3+0x7e8>
 402b238:	00801004 	movi	r2,64
 402b23c:	1109c83a 	sub	r4,r2,r4
 402b240:	4912983a 	sll	r9,r9,r4
 402b244:	498cb03a 	or	r6,r9,r6
 402b248:	300cc03a 	cmpne	r6,r6,zero
 402b24c:	298ab03a 	or	r5,r5,r6
 402b250:	0013883a 	mov	r9,zero
 402b254:	003f1506 	br	402aeac <__flash_rwdata_start+0xffff565c>
 402b258:	0101ffc4 	movi	r4,2047
 402b25c:	113f9a1e 	bne	r2,r4,402b0c8 <__flash_rwdata_start+0xffff5878>
 402b260:	4811883a 	mov	r8,r9
 402b264:	3023883a 	mov	r17,r6
 402b268:	1021883a 	mov	r16,r2
 402b26c:	3825883a 	mov	r18,r7
 402b270:	003e9306 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b274:	8000161e 	bne	r16,zero,402b2d0 <__adddf3+0x68c>
 402b278:	444ab03a 	or	r5,r8,r17
 402b27c:	28005126 	beq	r5,zero,402b3c4 <__adddf3+0x780>
 402b280:	0108303a 	nor	r4,zero,r4
 402b284:	20004d1e 	bne	r4,zero,402b3bc <__adddf3+0x778>
 402b288:	89a3883a 	add	r17,r17,r6
 402b28c:	4253883a 	add	r9,r8,r9
 402b290:	898d803a 	cmpltu	r6,r17,r6
 402b294:	3251883a 	add	r8,r6,r9
 402b298:	1021883a 	mov	r16,r2
 402b29c:	003f0806 	br	402aec0 <__flash_rwdata_start+0xffff5670>
 402b2a0:	1000301e 	bne	r2,zero,402b364 <__adddf3+0x720>
 402b2a4:	4984b03a 	or	r2,r9,r6
 402b2a8:	10007126 	beq	r2,zero,402b470 <__adddf3+0x82c>
 402b2ac:	4811883a 	mov	r8,r9
 402b2b0:	3023883a 	mov	r17,r6
 402b2b4:	3825883a 	mov	r18,r7
 402b2b8:	0401ffc4 	movi	r16,2047
 402b2bc:	003e8006 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b2c0:	4462b03a 	or	r17,r8,r17
 402b2c4:	8822c03a 	cmpne	r17,r17,zero
 402b2c8:	0007883a 	mov	r3,zero
 402b2cc:	003f8b06 	br	402b0fc <__flash_rwdata_start+0xffff58ac>
 402b2d0:	0141ffc4 	movi	r5,2047
 402b2d4:	11403b26 	beq	r2,r5,402b3c4 <__adddf3+0x780>
 402b2d8:	0109c83a 	sub	r4,zero,r4
 402b2dc:	42002034 	orhi	r8,r8,128
 402b2e0:	01400e04 	movi	r5,56
 402b2e4:	29006716 	blt	r5,r4,402b484 <__adddf3+0x840>
 402b2e8:	014007c4 	movi	r5,31
 402b2ec:	29007016 	blt	r5,r4,402b4b0 <__adddf3+0x86c>
 402b2f0:	01400804 	movi	r5,32
 402b2f4:	290bc83a 	sub	r5,r5,r4
 402b2f8:	4154983a 	sll	r10,r8,r5
 402b2fc:	890ed83a 	srl	r7,r17,r4
 402b300:	894a983a 	sll	r5,r17,r5
 402b304:	4108d83a 	srl	r4,r8,r4
 402b308:	51e2b03a 	or	r17,r10,r7
 402b30c:	280ac03a 	cmpne	r5,r5,zero
 402b310:	8962b03a 	or	r17,r17,r5
 402b314:	89a3883a 	add	r17,r17,r6
 402b318:	2253883a 	add	r9,r4,r9
 402b31c:	898d803a 	cmpltu	r6,r17,r6
 402b320:	3251883a 	add	r8,r6,r9
 402b324:	1021883a 	mov	r16,r2
 402b328:	003ee506 	br	402aec0 <__flash_rwdata_start+0xffff5670>
 402b32c:	4984b03a 	or	r2,r9,r6
 402b330:	103e6326 	beq	r2,zero,402acc0 <__flash_rwdata_start+0xffff5470>
 402b334:	8987c83a 	sub	r3,r17,r6
 402b338:	88c9803a 	cmpltu	r4,r17,r3
 402b33c:	4245c83a 	sub	r2,r8,r9
 402b340:	1105c83a 	sub	r2,r2,r4
 402b344:	1100202c 	andhi	r4,r2,128
 402b348:	203ebb26 	beq	r4,zero,402ae38 <__flash_rwdata_start+0xffff55e8>
 402b34c:	3463c83a 	sub	r17,r6,r17
 402b350:	4a07c83a 	sub	r3,r9,r8
 402b354:	344d803a 	cmpltu	r6,r6,r17
 402b358:	1991c83a 	sub	r8,r3,r6
 402b35c:	3825883a 	mov	r18,r7
 402b360:	003e5706 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b364:	4984b03a 	or	r2,r9,r6
 402b368:	10002e26 	beq	r2,zero,402b424 <__adddf3+0x7e0>
 402b36c:	4004d0fa 	srli	r2,r8,3
 402b370:	8822d0fa 	srli	r17,r17,3
 402b374:	4010977a 	slli	r8,r8,29
 402b378:	10c0022c 	andhi	r3,r2,8
 402b37c:	4462b03a 	or	r17,r8,r17
 402b380:	18000826 	beq	r3,zero,402b3a4 <__adddf3+0x760>
 402b384:	4808d0fa 	srli	r4,r9,3
 402b388:	20c0022c 	andhi	r3,r4,8
 402b38c:	1800051e 	bne	r3,zero,402b3a4 <__adddf3+0x760>
 402b390:	300cd0fa 	srli	r6,r6,3
 402b394:	4806977a 	slli	r3,r9,29
 402b398:	2005883a 	mov	r2,r4
 402b39c:	3825883a 	mov	r18,r7
 402b3a0:	19a2b03a 	or	r17,r3,r6
 402b3a4:	8810d77a 	srli	r8,r17,29
 402b3a8:	100490fa 	slli	r2,r2,3
 402b3ac:	882290fa 	slli	r17,r17,3
 402b3b0:	0401ffc4 	movi	r16,2047
 402b3b4:	4090b03a 	or	r8,r8,r2
 402b3b8:	003e4106 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b3bc:	0141ffc4 	movi	r5,2047
 402b3c0:	117fc71e 	bne	r2,r5,402b2e0 <__flash_rwdata_start+0xffff5a90>
 402b3c4:	4811883a 	mov	r8,r9
 402b3c8:	3023883a 	mov	r17,r6
 402b3cc:	1021883a 	mov	r16,r2
 402b3d0:	003e3b06 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b3d4:	10002f26 	beq	r2,zero,402b494 <__adddf3+0x850>
 402b3d8:	4984b03a 	or	r2,r9,r6
 402b3dc:	10001126 	beq	r2,zero,402b424 <__adddf3+0x7e0>
 402b3e0:	4004d0fa 	srli	r2,r8,3
 402b3e4:	8822d0fa 	srli	r17,r17,3
 402b3e8:	4010977a 	slli	r8,r8,29
 402b3ec:	10c0022c 	andhi	r3,r2,8
 402b3f0:	4462b03a 	or	r17,r8,r17
 402b3f4:	183feb26 	beq	r3,zero,402b3a4 <__flash_rwdata_start+0xffff5b54>
 402b3f8:	4808d0fa 	srli	r4,r9,3
 402b3fc:	20c0022c 	andhi	r3,r4,8
 402b400:	183fe81e 	bne	r3,zero,402b3a4 <__flash_rwdata_start+0xffff5b54>
 402b404:	300cd0fa 	srli	r6,r6,3
 402b408:	4806977a 	slli	r3,r9,29
 402b40c:	2005883a 	mov	r2,r4
 402b410:	19a2b03a 	or	r17,r3,r6
 402b414:	003fe306 	br	402b3a4 <__flash_rwdata_start+0xffff5b54>
 402b418:	0011883a 	mov	r8,zero
 402b41c:	0005883a 	mov	r2,zero
 402b420:	003e3f06 	br	402ad20 <__flash_rwdata_start+0xffff54d0>
 402b424:	0401ffc4 	movi	r16,2047
 402b428:	003e2506 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b42c:	0013883a 	mov	r9,zero
 402b430:	003f8406 	br	402b244 <__flash_rwdata_start+0xffff59f4>
 402b434:	0005883a 	mov	r2,zero
 402b438:	0007883a 	mov	r3,zero
 402b43c:	003e8906 	br	402ae64 <__flash_rwdata_start+0xffff5614>
 402b440:	197ff804 	addi	r5,r3,-32
 402b444:	01000804 	movi	r4,32
 402b448:	414ad83a 	srl	r5,r8,r5
 402b44c:	19002426 	beq	r3,r4,402b4e0 <__adddf3+0x89c>
 402b450:	01001004 	movi	r4,64
 402b454:	20c7c83a 	sub	r3,r4,r3
 402b458:	40c6983a 	sll	r3,r8,r3
 402b45c:	1c46b03a 	or	r3,r3,r17
 402b460:	1806c03a 	cmpne	r3,r3,zero
 402b464:	28e2b03a 	or	r17,r5,r3
 402b468:	0007883a 	mov	r3,zero
 402b46c:	003f2306 	br	402b0fc <__flash_rwdata_start+0xffff58ac>
 402b470:	0007883a 	mov	r3,zero
 402b474:	5811883a 	mov	r8,r11
 402b478:	00bfffc4 	movi	r2,-1
 402b47c:	0401ffc4 	movi	r16,2047
 402b480:	003e7806 	br	402ae64 <__flash_rwdata_start+0xffff5614>
 402b484:	4462b03a 	or	r17,r8,r17
 402b488:	8822c03a 	cmpne	r17,r17,zero
 402b48c:	0009883a 	mov	r4,zero
 402b490:	003fa006 	br	402b314 <__flash_rwdata_start+0xffff5ac4>
 402b494:	4811883a 	mov	r8,r9
 402b498:	3023883a 	mov	r17,r6
 402b49c:	0401ffc4 	movi	r16,2047
 402b4a0:	003e0706 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b4a4:	4811883a 	mov	r8,r9
 402b4a8:	3023883a 	mov	r17,r6
 402b4ac:	003e0406 	br	402acc0 <__flash_rwdata_start+0xffff5470>
 402b4b0:	21fff804 	addi	r7,r4,-32
 402b4b4:	01400804 	movi	r5,32
 402b4b8:	41ced83a 	srl	r7,r8,r7
 402b4bc:	21400a26 	beq	r4,r5,402b4e8 <__adddf3+0x8a4>
 402b4c0:	01401004 	movi	r5,64
 402b4c4:	2909c83a 	sub	r4,r5,r4
 402b4c8:	4108983a 	sll	r4,r8,r4
 402b4cc:	2448b03a 	or	r4,r4,r17
 402b4d0:	2008c03a 	cmpne	r4,r4,zero
 402b4d4:	3922b03a 	or	r17,r7,r4
 402b4d8:	0009883a 	mov	r4,zero
 402b4dc:	003f8d06 	br	402b314 <__flash_rwdata_start+0xffff5ac4>
 402b4e0:	0007883a 	mov	r3,zero
 402b4e4:	003fdd06 	br	402b45c <__flash_rwdata_start+0xffff5c0c>
 402b4e8:	0009883a 	mov	r4,zero
 402b4ec:	003ff706 	br	402b4cc <__flash_rwdata_start+0xffff5c7c>

0402b4f0 <__divdf3>:
 402b4f0:	defff004 	addi	sp,sp,-64
 402b4f4:	dc800815 	stw	r18,32(sp)
 402b4f8:	2824d53a 	srli	r18,r5,20
 402b4fc:	dd800c15 	stw	r22,48(sp)
 402b500:	282cd7fa 	srli	r22,r5,31
 402b504:	dc000615 	stw	r16,24(sp)
 402b508:	04000434 	movhi	r16,16
 402b50c:	843fffc4 	addi	r16,r16,-1
 402b510:	dfc00f15 	stw	ra,60(sp)
 402b514:	df000e15 	stw	fp,56(sp)
 402b518:	ddc00d15 	stw	r23,52(sp)
 402b51c:	dd400b15 	stw	r21,44(sp)
 402b520:	dd000a15 	stw	r20,40(sp)
 402b524:	dcc00915 	stw	r19,36(sp)
 402b528:	dc400715 	stw	r17,28(sp)
 402b52c:	9481ffcc 	andi	r18,r18,2047
 402b530:	2c20703a 	and	r16,r5,r16
 402b534:	b2003fcc 	andi	r8,r22,255
 402b538:	90006126 	beq	r18,zero,402b6c0 <__divdf3+0x1d0>
 402b53c:	0081ffc4 	movi	r2,2047
 402b540:	202b883a 	mov	r21,r4
 402b544:	90803726 	beq	r18,r2,402b624 <__divdf3+0x134>
 402b548:	80800434 	orhi	r2,r16,16
 402b54c:	100490fa 	slli	r2,r2,3
 402b550:	2020d77a 	srli	r16,r4,29
 402b554:	202a90fa 	slli	r21,r4,3
 402b558:	94bf0044 	addi	r18,r18,-1023
 402b55c:	80a0b03a 	or	r16,r16,r2
 402b560:	0013883a 	mov	r9,zero
 402b564:	000b883a 	mov	r5,zero
 402b568:	3806d53a 	srli	r3,r7,20
 402b56c:	382ed7fa 	srli	r23,r7,31
 402b570:	04400434 	movhi	r17,16
 402b574:	8c7fffc4 	addi	r17,r17,-1
 402b578:	18c1ffcc 	andi	r3,r3,2047
 402b57c:	3029883a 	mov	r20,r6
 402b580:	3c62703a 	and	r17,r7,r17
 402b584:	bf003fcc 	andi	fp,r23,255
 402b588:	18006e26 	beq	r3,zero,402b744 <__divdf3+0x254>
 402b58c:	0081ffc4 	movi	r2,2047
 402b590:	18806626 	beq	r3,r2,402b72c <__divdf3+0x23c>
 402b594:	88800434 	orhi	r2,r17,16
 402b598:	100490fa 	slli	r2,r2,3
 402b59c:	3022d77a 	srli	r17,r6,29
 402b5a0:	302890fa 	slli	r20,r6,3
 402b5a4:	18ff0044 	addi	r3,r3,-1023
 402b5a8:	88a2b03a 	or	r17,r17,r2
 402b5ac:	000f883a 	mov	r7,zero
 402b5b0:	b5e6f03a 	xor	r19,r22,r23
 402b5b4:	3a4cb03a 	or	r6,r7,r9
 402b5b8:	008003c4 	movi	r2,15
 402b5bc:	9809883a 	mov	r4,r19
 402b5c0:	90c7c83a 	sub	r3,r18,r3
 402b5c4:	9cc03fcc 	andi	r19,r19,255
 402b5c8:	11809636 	bltu	r2,r6,402b824 <__divdf3+0x334>
 402b5cc:	300c90ba 	slli	r6,r6,2
 402b5d0:	008100f4 	movhi	r2,1027
 402b5d4:	10ad7904 	addi	r2,r2,-18972
 402b5d8:	308d883a 	add	r6,r6,r2
 402b5dc:	30800017 	ldw	r2,0(r6)
 402b5e0:	1000683a 	jmp	r2
 402b5e4:	0402b824 	muli	r16,zero,2784
 402b5e8:	0402b65c 	xori	r16,zero,2777
 402b5ec:	0402b814 	movui	r16,2784
 402b5f0:	0402b650 	cmplti	r16,zero,2777
 402b5f4:	0402b814 	movui	r16,2784
 402b5f8:	0402b7e8 	cmpgeui	r16,zero,2783
 402b5fc:	0402b814 	movui	r16,2784
 402b600:	0402b650 	cmplti	r16,zero,2777
 402b604:	0402b65c 	xori	r16,zero,2777
 402b608:	0402b65c 	xori	r16,zero,2777
 402b60c:	0402b7e8 	cmpgeui	r16,zero,2783
 402b610:	0402b650 	cmplti	r16,zero,2777
 402b614:	0402b640 	call	402b64 <_gp+0x3f8af8>
 402b618:	0402b640 	call	402b64 <_gp+0x3f8af8>
 402b61c:	0402b640 	call	402b64 <_gp+0x3f8af8>
 402b620:	0402bbac 	andhi	r16,zero,2798
 402b624:	2404b03a 	or	r2,r4,r16
 402b628:	10006c1e 	bne	r2,zero,402b7dc <__divdf3+0x2ec>
 402b62c:	02400204 	movi	r9,8
 402b630:	0021883a 	mov	r16,zero
 402b634:	002b883a 	mov	r21,zero
 402b638:	01400084 	movi	r5,2
 402b63c:	003fca06 	br	402b568 <__flash_rwdata_start+0xffff5d18>
 402b640:	8023883a 	mov	r17,r16
 402b644:	a829883a 	mov	r20,r21
 402b648:	4039883a 	mov	fp,r8
 402b64c:	280f883a 	mov	r7,r5
 402b650:	00800084 	movi	r2,2
 402b654:	3881601e 	bne	r7,r2,402bbd8 <__divdf3+0x6e8>
 402b658:	e027883a 	mov	r19,fp
 402b65c:	9900004c 	andi	r4,r19,1
 402b660:	0081ffc4 	movi	r2,2047
 402b664:	0021883a 	mov	r16,zero
 402b668:	002b883a 	mov	r21,zero
 402b66c:	1004953a 	slli	r2,r2,20
 402b670:	20c03fcc 	andi	r3,r4,255
 402b674:	01400434 	movhi	r5,16
 402b678:	297fffc4 	addi	r5,r5,-1
 402b67c:	180697fa 	slli	r3,r3,31
 402b680:	8160703a 	and	r16,r16,r5
 402b684:	80a0b03a 	or	r16,r16,r2
 402b688:	80c6b03a 	or	r3,r16,r3
 402b68c:	a805883a 	mov	r2,r21
 402b690:	dfc00f17 	ldw	ra,60(sp)
 402b694:	df000e17 	ldw	fp,56(sp)
 402b698:	ddc00d17 	ldw	r23,52(sp)
 402b69c:	dd800c17 	ldw	r22,48(sp)
 402b6a0:	dd400b17 	ldw	r21,44(sp)
 402b6a4:	dd000a17 	ldw	r20,40(sp)
 402b6a8:	dcc00917 	ldw	r19,36(sp)
 402b6ac:	dc800817 	ldw	r18,32(sp)
 402b6b0:	dc400717 	ldw	r17,28(sp)
 402b6b4:	dc000617 	ldw	r16,24(sp)
 402b6b8:	dec01004 	addi	sp,sp,64
 402b6bc:	f800283a 	ret
 402b6c0:	2404b03a 	or	r2,r4,r16
 402b6c4:	2023883a 	mov	r17,r4
 402b6c8:	10003f26 	beq	r2,zero,402b7c8 <__divdf3+0x2d8>
 402b6cc:	80015e26 	beq	r16,zero,402bc48 <__divdf3+0x758>
 402b6d0:	8009883a 	mov	r4,r16
 402b6d4:	d9800215 	stw	r6,8(sp)
 402b6d8:	d9c00515 	stw	r7,20(sp)
 402b6dc:	da000415 	stw	r8,16(sp)
 402b6e0:	402d4840 	call	402d484 <__clzsi2>
 402b6e4:	d9800217 	ldw	r6,8(sp)
 402b6e8:	d9c00517 	ldw	r7,20(sp)
 402b6ec:	da000417 	ldw	r8,16(sp)
 402b6f0:	113ffd44 	addi	r4,r2,-11
 402b6f4:	00c00704 	movi	r3,28
 402b6f8:	19014f16 	blt	r3,r4,402bc38 <__divdf3+0x748>
 402b6fc:	00c00744 	movi	r3,29
 402b700:	157ffe04 	addi	r21,r2,-8
 402b704:	1907c83a 	sub	r3,r3,r4
 402b708:	8560983a 	sll	r16,r16,r21
 402b70c:	88c6d83a 	srl	r3,r17,r3
 402b710:	8d6a983a 	sll	r21,r17,r21
 402b714:	1c20b03a 	or	r16,r3,r16
 402b718:	1080fcc4 	addi	r2,r2,1011
 402b71c:	00a5c83a 	sub	r18,zero,r2
 402b720:	0013883a 	mov	r9,zero
 402b724:	000b883a 	mov	r5,zero
 402b728:	003f8f06 	br	402b568 <__flash_rwdata_start+0xffff5d18>
 402b72c:	3444b03a 	or	r2,r6,r17
 402b730:	1000231e 	bne	r2,zero,402b7c0 <__divdf3+0x2d0>
 402b734:	0023883a 	mov	r17,zero
 402b738:	0029883a 	mov	r20,zero
 402b73c:	01c00084 	movi	r7,2
 402b740:	003f9b06 	br	402b5b0 <__flash_rwdata_start+0xffff5d60>
 402b744:	3444b03a 	or	r2,r6,r17
 402b748:	10001926 	beq	r2,zero,402b7b0 <__divdf3+0x2c0>
 402b74c:	88014b26 	beq	r17,zero,402bc7c <__divdf3+0x78c>
 402b750:	8809883a 	mov	r4,r17
 402b754:	d9400115 	stw	r5,4(sp)
 402b758:	d9800215 	stw	r6,8(sp)
 402b75c:	da000415 	stw	r8,16(sp)
 402b760:	da400315 	stw	r9,12(sp)
 402b764:	402d4840 	call	402d484 <__clzsi2>
 402b768:	d9400117 	ldw	r5,4(sp)
 402b76c:	d9800217 	ldw	r6,8(sp)
 402b770:	da000417 	ldw	r8,16(sp)
 402b774:	da400317 	ldw	r9,12(sp)
 402b778:	113ffd44 	addi	r4,r2,-11
 402b77c:	00c00704 	movi	r3,28
 402b780:	19013a16 	blt	r3,r4,402bc6c <__divdf3+0x77c>
 402b784:	00c00744 	movi	r3,29
 402b788:	153ffe04 	addi	r20,r2,-8
 402b78c:	1907c83a 	sub	r3,r3,r4
 402b790:	8d22983a 	sll	r17,r17,r20
 402b794:	30c6d83a 	srl	r3,r6,r3
 402b798:	3528983a 	sll	r20,r6,r20
 402b79c:	1c62b03a 	or	r17,r3,r17
 402b7a0:	1080fcc4 	addi	r2,r2,1011
 402b7a4:	0087c83a 	sub	r3,zero,r2
 402b7a8:	000f883a 	mov	r7,zero
 402b7ac:	003f8006 	br	402b5b0 <__flash_rwdata_start+0xffff5d60>
 402b7b0:	0023883a 	mov	r17,zero
 402b7b4:	0029883a 	mov	r20,zero
 402b7b8:	01c00044 	movi	r7,1
 402b7bc:	003f7c06 	br	402b5b0 <__flash_rwdata_start+0xffff5d60>
 402b7c0:	01c000c4 	movi	r7,3
 402b7c4:	003f7a06 	br	402b5b0 <__flash_rwdata_start+0xffff5d60>
 402b7c8:	02400104 	movi	r9,4
 402b7cc:	0021883a 	mov	r16,zero
 402b7d0:	002b883a 	mov	r21,zero
 402b7d4:	01400044 	movi	r5,1
 402b7d8:	003f6306 	br	402b568 <__flash_rwdata_start+0xffff5d18>
 402b7dc:	02400304 	movi	r9,12
 402b7e0:	014000c4 	movi	r5,3
 402b7e4:	003f6006 	br	402b568 <__flash_rwdata_start+0xffff5d18>
 402b7e8:	04000434 	movhi	r16,16
 402b7ec:	0009883a 	mov	r4,zero
 402b7f0:	843fffc4 	addi	r16,r16,-1
 402b7f4:	057fffc4 	movi	r21,-1
 402b7f8:	0081ffc4 	movi	r2,2047
 402b7fc:	003f9b06 	br	402b66c <__flash_rwdata_start+0xffff5e1c>
 402b800:	00c00044 	movi	r3,1
 402b804:	1887c83a 	sub	r3,r3,r2
 402b808:	01000e04 	movi	r4,56
 402b80c:	20c1530e 	bge	r4,r3,402bd5c <__divdf3+0x86c>
 402b810:	9900004c 	andi	r4,r19,1
 402b814:	0005883a 	mov	r2,zero
 402b818:	0021883a 	mov	r16,zero
 402b81c:	002b883a 	mov	r21,zero
 402b820:	003f9206 	br	402b66c <__flash_rwdata_start+0xffff5e1c>
 402b824:	8c012e36 	bltu	r17,r16,402bce0 <__divdf3+0x7f0>
 402b828:	84412c26 	beq	r16,r17,402bcdc <__divdf3+0x7ec>
 402b82c:	a82f883a 	mov	r23,r21
 402b830:	18ffffc4 	addi	r3,r3,-1
 402b834:	002b883a 	mov	r21,zero
 402b838:	a004d63a 	srli	r2,r20,24
 402b83c:	8822923a 	slli	r17,r17,8
 402b840:	a028923a 	slli	r20,r20,8
 402b844:	8009883a 	mov	r4,r16
 402b848:	88acb03a 	or	r22,r17,r2
 402b84c:	dd000015 	stw	r20,0(sp)
 402b850:	b028d43a 	srli	r20,r22,16
 402b854:	d8c00215 	stw	r3,8(sp)
 402b858:	b4bfffcc 	andi	r18,r22,65535
 402b85c:	a00b883a 	mov	r5,r20
 402b860:	402ab600 	call	402ab60 <__udivsi3>
 402b864:	100b883a 	mov	r5,r2
 402b868:	9009883a 	mov	r4,r18
 402b86c:	1023883a 	mov	r17,r2
 402b870:	402ac1c0 	call	402ac1c <__mulsi3>
 402b874:	8009883a 	mov	r4,r16
 402b878:	a00b883a 	mov	r5,r20
 402b87c:	1039883a 	mov	fp,r2
 402b880:	402abc40 	call	402abc4 <__umodsi3>
 402b884:	1004943a 	slli	r2,r2,16
 402b888:	b808d43a 	srli	r4,r23,16
 402b88c:	d8c00217 	ldw	r3,8(sp)
 402b890:	2084b03a 	or	r2,r4,r2
 402b894:	1700062e 	bgeu	r2,fp,402b8b0 <__divdf3+0x3c0>
 402b898:	1585883a 	add	r2,r2,r22
 402b89c:	893fffc4 	addi	r4,r17,-1
 402b8a0:	15811d36 	bltu	r2,r22,402bd18 <__divdf3+0x828>
 402b8a4:	17011c2e 	bgeu	r2,fp,402bd18 <__divdf3+0x828>
 402b8a8:	8c7fff84 	addi	r17,r17,-2
 402b8ac:	1585883a 	add	r2,r2,r22
 402b8b0:	1739c83a 	sub	fp,r2,fp
 402b8b4:	a00b883a 	mov	r5,r20
 402b8b8:	e009883a 	mov	r4,fp
 402b8bc:	d8c00215 	stw	r3,8(sp)
 402b8c0:	402ab600 	call	402ab60 <__udivsi3>
 402b8c4:	100b883a 	mov	r5,r2
 402b8c8:	9009883a 	mov	r4,r18
 402b8cc:	1021883a 	mov	r16,r2
 402b8d0:	402ac1c0 	call	402ac1c <__mulsi3>
 402b8d4:	a00b883a 	mov	r5,r20
 402b8d8:	e009883a 	mov	r4,fp
 402b8dc:	d8800415 	stw	r2,16(sp)
 402b8e0:	402abc40 	call	402abc4 <__umodsi3>
 402b8e4:	1004943a 	slli	r2,r2,16
 402b8e8:	da000417 	ldw	r8,16(sp)
 402b8ec:	bdffffcc 	andi	r23,r23,65535
 402b8f0:	b884b03a 	or	r2,r23,r2
 402b8f4:	d8c00217 	ldw	r3,8(sp)
 402b8f8:	1200062e 	bgeu	r2,r8,402b914 <__divdf3+0x424>
 402b8fc:	1585883a 	add	r2,r2,r22
 402b900:	813fffc4 	addi	r4,r16,-1
 402b904:	15810236 	bltu	r2,r22,402bd10 <__divdf3+0x820>
 402b908:	1201012e 	bgeu	r2,r8,402bd10 <__divdf3+0x820>
 402b90c:	843fff84 	addi	r16,r16,-2
 402b910:	1585883a 	add	r2,r2,r22
 402b914:	8822943a 	slli	r17,r17,16
 402b918:	d9800017 	ldw	r6,0(sp)
 402b91c:	1211c83a 	sub	r8,r2,r8
 402b920:	8c22b03a 	or	r17,r17,r16
 402b924:	373fffcc 	andi	fp,r6,65535
 402b928:	8abfffcc 	andi	r10,r17,65535
 402b92c:	8820d43a 	srli	r16,r17,16
 402b930:	5009883a 	mov	r4,r10
 402b934:	e00b883a 	mov	r5,fp
 402b938:	302ed43a 	srli	r23,r6,16
 402b93c:	d8c00215 	stw	r3,8(sp)
 402b940:	da000415 	stw	r8,16(sp)
 402b944:	da800115 	stw	r10,4(sp)
 402b948:	402ac1c0 	call	402ac1c <__mulsi3>
 402b94c:	800b883a 	mov	r5,r16
 402b950:	e009883a 	mov	r4,fp
 402b954:	d8800515 	stw	r2,20(sp)
 402b958:	402ac1c0 	call	402ac1c <__mulsi3>
 402b95c:	8009883a 	mov	r4,r16
 402b960:	b80b883a 	mov	r5,r23
 402b964:	d8800315 	stw	r2,12(sp)
 402b968:	402ac1c0 	call	402ac1c <__mulsi3>
 402b96c:	da800117 	ldw	r10,4(sp)
 402b970:	b80b883a 	mov	r5,r23
 402b974:	1021883a 	mov	r16,r2
 402b978:	5009883a 	mov	r4,r10
 402b97c:	402ac1c0 	call	402ac1c <__mulsi3>
 402b980:	d9c00517 	ldw	r7,20(sp)
 402b984:	da400317 	ldw	r9,12(sp)
 402b988:	d8c00217 	ldw	r3,8(sp)
 402b98c:	3808d43a 	srli	r4,r7,16
 402b990:	1245883a 	add	r2,r2,r9
 402b994:	da000417 	ldw	r8,16(sp)
 402b998:	2085883a 	add	r2,r4,r2
 402b99c:	1240022e 	bgeu	r2,r9,402b9a8 <__divdf3+0x4b8>
 402b9a0:	01000074 	movhi	r4,1
 402b9a4:	8121883a 	add	r16,r16,r4
 402b9a8:	1008d43a 	srli	r4,r2,16
 402b9ac:	1004943a 	slli	r2,r2,16
 402b9b0:	39ffffcc 	andi	r7,r7,65535
 402b9b4:	2409883a 	add	r4,r4,r16
 402b9b8:	11c5883a 	add	r2,r2,r7
 402b9bc:	4100bb36 	bltu	r8,r4,402bcac <__divdf3+0x7bc>
 402b9c0:	4100d726 	beq	r8,r4,402bd20 <__divdf3+0x830>
 402b9c4:	4109c83a 	sub	r4,r8,r4
 402b9c8:	a8a1c83a 	sub	r16,r21,r2
 402b9cc:	ac2b803a 	cmpltu	r21,r21,r16
 402b9d0:	256bc83a 	sub	r21,r4,r21
 402b9d4:	b540d926 	beq	r22,r21,402bd3c <__divdf3+0x84c>
 402b9d8:	a00b883a 	mov	r5,r20
 402b9dc:	a809883a 	mov	r4,r21
 402b9e0:	d8c00215 	stw	r3,8(sp)
 402b9e4:	402ab600 	call	402ab60 <__udivsi3>
 402b9e8:	100b883a 	mov	r5,r2
 402b9ec:	9009883a 	mov	r4,r18
 402b9f0:	d8800515 	stw	r2,20(sp)
 402b9f4:	402ac1c0 	call	402ac1c <__mulsi3>
 402b9f8:	a809883a 	mov	r4,r21
 402b9fc:	a00b883a 	mov	r5,r20
 402ba00:	d8800415 	stw	r2,16(sp)
 402ba04:	402abc40 	call	402abc4 <__umodsi3>
 402ba08:	1004943a 	slli	r2,r2,16
 402ba0c:	8008d43a 	srli	r4,r16,16
 402ba10:	da000417 	ldw	r8,16(sp)
 402ba14:	d8c00217 	ldw	r3,8(sp)
 402ba18:	2084b03a 	or	r2,r4,r2
 402ba1c:	d9c00517 	ldw	r7,20(sp)
 402ba20:	1200062e 	bgeu	r2,r8,402ba3c <__divdf3+0x54c>
 402ba24:	1585883a 	add	r2,r2,r22
 402ba28:	393fffc4 	addi	r4,r7,-1
 402ba2c:	1580c536 	bltu	r2,r22,402bd44 <__divdf3+0x854>
 402ba30:	1200c42e 	bgeu	r2,r8,402bd44 <__divdf3+0x854>
 402ba34:	39ffff84 	addi	r7,r7,-2
 402ba38:	1585883a 	add	r2,r2,r22
 402ba3c:	122bc83a 	sub	r21,r2,r8
 402ba40:	a00b883a 	mov	r5,r20
 402ba44:	a809883a 	mov	r4,r21
 402ba48:	d8c00215 	stw	r3,8(sp)
 402ba4c:	d9c00515 	stw	r7,20(sp)
 402ba50:	402ab600 	call	402ab60 <__udivsi3>
 402ba54:	9009883a 	mov	r4,r18
 402ba58:	100b883a 	mov	r5,r2
 402ba5c:	d8800415 	stw	r2,16(sp)
 402ba60:	402ac1c0 	call	402ac1c <__mulsi3>
 402ba64:	a809883a 	mov	r4,r21
 402ba68:	a00b883a 	mov	r5,r20
 402ba6c:	1025883a 	mov	r18,r2
 402ba70:	402abc40 	call	402abc4 <__umodsi3>
 402ba74:	1004943a 	slli	r2,r2,16
 402ba78:	813fffcc 	andi	r4,r16,65535
 402ba7c:	d8c00217 	ldw	r3,8(sp)
 402ba80:	20a0b03a 	or	r16,r4,r2
 402ba84:	d9c00517 	ldw	r7,20(sp)
 402ba88:	da000417 	ldw	r8,16(sp)
 402ba8c:	8480062e 	bgeu	r16,r18,402baa8 <__divdf3+0x5b8>
 402ba90:	85a1883a 	add	r16,r16,r22
 402ba94:	40bfffc4 	addi	r2,r8,-1
 402ba98:	8580ac36 	bltu	r16,r22,402bd4c <__divdf3+0x85c>
 402ba9c:	8480ab2e 	bgeu	r16,r18,402bd4c <__divdf3+0x85c>
 402baa0:	423fff84 	addi	r8,r8,-2
 402baa4:	85a1883a 	add	r16,r16,r22
 402baa8:	3804943a 	slli	r2,r7,16
 402baac:	84a1c83a 	sub	r16,r16,r18
 402bab0:	e009883a 	mov	r4,fp
 402bab4:	1228b03a 	or	r20,r2,r8
 402bab8:	a1ffffcc 	andi	r7,r20,65535
 402babc:	a024d43a 	srli	r18,r20,16
 402bac0:	380b883a 	mov	r5,r7
 402bac4:	d8c00215 	stw	r3,8(sp)
 402bac8:	d9c00515 	stw	r7,20(sp)
 402bacc:	402ac1c0 	call	402ac1c <__mulsi3>
 402bad0:	900b883a 	mov	r5,r18
 402bad4:	e009883a 	mov	r4,fp
 402bad8:	102b883a 	mov	r21,r2
 402badc:	402ac1c0 	call	402ac1c <__mulsi3>
 402bae0:	900b883a 	mov	r5,r18
 402bae4:	b809883a 	mov	r4,r23
 402bae8:	1039883a 	mov	fp,r2
 402baec:	402ac1c0 	call	402ac1c <__mulsi3>
 402baf0:	d9c00517 	ldw	r7,20(sp)
 402baf4:	b80b883a 	mov	r5,r23
 402baf8:	1025883a 	mov	r18,r2
 402bafc:	3809883a 	mov	r4,r7
 402bb00:	402ac1c0 	call	402ac1c <__mulsi3>
 402bb04:	a808d43a 	srli	r4,r21,16
 402bb08:	1705883a 	add	r2,r2,fp
 402bb0c:	d8c00217 	ldw	r3,8(sp)
 402bb10:	2085883a 	add	r2,r4,r2
 402bb14:	1700022e 	bgeu	r2,fp,402bb20 <__divdf3+0x630>
 402bb18:	01000074 	movhi	r4,1
 402bb1c:	9125883a 	add	r18,r18,r4
 402bb20:	1008d43a 	srli	r4,r2,16
 402bb24:	1004943a 	slli	r2,r2,16
 402bb28:	ad7fffcc 	andi	r21,r21,65535
 402bb2c:	2489883a 	add	r4,r4,r18
 402bb30:	1545883a 	add	r2,r2,r21
 402bb34:	81003836 	bltu	r16,r4,402bc18 <__divdf3+0x728>
 402bb38:	81003626 	beq	r16,r4,402bc14 <__divdf3+0x724>
 402bb3c:	a5000054 	ori	r20,r20,1
 402bb40:	1880ffc4 	addi	r2,r3,1023
 402bb44:	00bf2e0e 	bge	zero,r2,402b800 <__flash_rwdata_start+0xffff5fb0>
 402bb48:	a10001cc 	andi	r4,r20,7
 402bb4c:	20000726 	beq	r4,zero,402bb6c <__divdf3+0x67c>
 402bb50:	a10003cc 	andi	r4,r20,15
 402bb54:	01400104 	movi	r5,4
 402bb58:	21400426 	beq	r4,r5,402bb6c <__divdf3+0x67c>
 402bb5c:	a149883a 	add	r4,r20,r5
 402bb60:	2529803a 	cmpltu	r20,r4,r20
 402bb64:	8d23883a 	add	r17,r17,r20
 402bb68:	2029883a 	mov	r20,r4
 402bb6c:	8900402c 	andhi	r4,r17,256
 402bb70:	20000426 	beq	r4,zero,402bb84 <__divdf3+0x694>
 402bb74:	18810004 	addi	r2,r3,1024
 402bb78:	00ffc034 	movhi	r3,65280
 402bb7c:	18ffffc4 	addi	r3,r3,-1
 402bb80:	88e2703a 	and	r17,r17,r3
 402bb84:	00c1ff84 	movi	r3,2046
 402bb88:	18beb416 	blt	r3,r2,402b65c <__flash_rwdata_start+0xffff5e0c>
 402bb8c:	a028d0fa 	srli	r20,r20,3
 402bb90:	882a977a 	slli	r21,r17,29
 402bb94:	8820927a 	slli	r16,r17,9
 402bb98:	1081ffcc 	andi	r2,r2,2047
 402bb9c:	ad2ab03a 	or	r21,r21,r20
 402bba0:	8020d33a 	srli	r16,r16,12
 402bba4:	9900004c 	andi	r4,r19,1
 402bba8:	003eb006 	br	402b66c <__flash_rwdata_start+0xffff5e1c>
 402bbac:	8080022c 	andhi	r2,r16,8
 402bbb0:	10001226 	beq	r2,zero,402bbfc <__divdf3+0x70c>
 402bbb4:	8880022c 	andhi	r2,r17,8
 402bbb8:	1000101e 	bne	r2,zero,402bbfc <__divdf3+0x70c>
 402bbbc:	00800434 	movhi	r2,16
 402bbc0:	8c000234 	orhi	r16,r17,8
 402bbc4:	10bfffc4 	addi	r2,r2,-1
 402bbc8:	b809883a 	mov	r4,r23
 402bbcc:	80a0703a 	and	r16,r16,r2
 402bbd0:	a02b883a 	mov	r21,r20
 402bbd4:	003f0806 	br	402b7f8 <__flash_rwdata_start+0xffff5fa8>
 402bbd8:	008000c4 	movi	r2,3
 402bbdc:	3880b126 	beq	r7,r2,402bea4 <__divdf3+0x9b4>
 402bbe0:	00800044 	movi	r2,1
 402bbe4:	38805b1e 	bne	r7,r2,402bd54 <__divdf3+0x864>
 402bbe8:	e009883a 	mov	r4,fp
 402bbec:	0005883a 	mov	r2,zero
 402bbf0:	0021883a 	mov	r16,zero
 402bbf4:	002b883a 	mov	r21,zero
 402bbf8:	003e9c06 	br	402b66c <__flash_rwdata_start+0xffff5e1c>
 402bbfc:	00800434 	movhi	r2,16
 402bc00:	84000234 	orhi	r16,r16,8
 402bc04:	10bfffc4 	addi	r2,r2,-1
 402bc08:	b009883a 	mov	r4,r22
 402bc0c:	80a0703a 	and	r16,r16,r2
 402bc10:	003ef906 	br	402b7f8 <__flash_rwdata_start+0xffff5fa8>
 402bc14:	103fca26 	beq	r2,zero,402bb40 <__flash_rwdata_start+0xffff62f0>
 402bc18:	b421883a 	add	r16,r22,r16
 402bc1c:	a17fffc4 	addi	r5,r20,-1
 402bc20:	8580422e 	bgeu	r16,r22,402bd2c <__divdf3+0x83c>
 402bc24:	2829883a 	mov	r20,r5
 402bc28:	813fc41e 	bne	r16,r4,402bb3c <__flash_rwdata_start+0xffff62ec>
 402bc2c:	d9800017 	ldw	r6,0(sp)
 402bc30:	30bfc21e 	bne	r6,r2,402bb3c <__flash_rwdata_start+0xffff62ec>
 402bc34:	003fc206 	br	402bb40 <__flash_rwdata_start+0xffff62f0>
 402bc38:	143ff604 	addi	r16,r2,-40
 402bc3c:	8c20983a 	sll	r16,r17,r16
 402bc40:	002b883a 	mov	r21,zero
 402bc44:	003eb406 	br	402b718 <__flash_rwdata_start+0xffff5ec8>
 402bc48:	d9800215 	stw	r6,8(sp)
 402bc4c:	d9c00515 	stw	r7,20(sp)
 402bc50:	da000415 	stw	r8,16(sp)
 402bc54:	402d4840 	call	402d484 <__clzsi2>
 402bc58:	10800804 	addi	r2,r2,32
 402bc5c:	da000417 	ldw	r8,16(sp)
 402bc60:	d9c00517 	ldw	r7,20(sp)
 402bc64:	d9800217 	ldw	r6,8(sp)
 402bc68:	003ea106 	br	402b6f0 <__flash_rwdata_start+0xffff5ea0>
 402bc6c:	147ff604 	addi	r17,r2,-40
 402bc70:	3462983a 	sll	r17,r6,r17
 402bc74:	0029883a 	mov	r20,zero
 402bc78:	003ec906 	br	402b7a0 <__flash_rwdata_start+0xffff5f50>
 402bc7c:	3009883a 	mov	r4,r6
 402bc80:	d9400115 	stw	r5,4(sp)
 402bc84:	d9800215 	stw	r6,8(sp)
 402bc88:	da000415 	stw	r8,16(sp)
 402bc8c:	da400315 	stw	r9,12(sp)
 402bc90:	402d4840 	call	402d484 <__clzsi2>
 402bc94:	10800804 	addi	r2,r2,32
 402bc98:	da400317 	ldw	r9,12(sp)
 402bc9c:	da000417 	ldw	r8,16(sp)
 402bca0:	d9800217 	ldw	r6,8(sp)
 402bca4:	d9400117 	ldw	r5,4(sp)
 402bca8:	003eb306 	br	402b778 <__flash_rwdata_start+0xffff5f28>
 402bcac:	d9800017 	ldw	r6,0(sp)
 402bcb0:	a9ab883a 	add	r21,r21,r6
 402bcb4:	a98b803a 	cmpltu	r5,r21,r6
 402bcb8:	2d8b883a 	add	r5,r5,r22
 402bcbc:	2a11883a 	add	r8,r5,r8
 402bcc0:	897fffc4 	addi	r5,r17,-1
 402bcc4:	b2000c2e 	bgeu	r22,r8,402bcf8 <__divdf3+0x808>
 402bcc8:	41003f36 	bltu	r8,r4,402bdc8 <__divdf3+0x8d8>
 402bccc:	22006c26 	beq	r4,r8,402be80 <__divdf3+0x990>
 402bcd0:	4109c83a 	sub	r4,r8,r4
 402bcd4:	2823883a 	mov	r17,r5
 402bcd8:	003f3b06 	br	402b9c8 <__flash_rwdata_start+0xffff6178>
 402bcdc:	ad3ed336 	bltu	r21,r20,402b82c <__flash_rwdata_start+0xffff5fdc>
 402bce0:	a804d07a 	srli	r2,r21,1
 402bce4:	802e97fa 	slli	r23,r16,31
 402bce8:	a82a97fa 	slli	r21,r21,31
 402bcec:	8020d07a 	srli	r16,r16,1
 402bcf0:	b8aeb03a 	or	r23,r23,r2
 402bcf4:	003ed006 	br	402b838 <__flash_rwdata_start+0xffff5fe8>
 402bcf8:	b23ff51e 	bne	r22,r8,402bcd0 <__flash_rwdata_start+0xffff6480>
 402bcfc:	d9800017 	ldw	r6,0(sp)
 402bd00:	a9bff12e 	bgeu	r21,r6,402bcc8 <__flash_rwdata_start+0xffff6478>
 402bd04:	b109c83a 	sub	r4,r22,r4
 402bd08:	2823883a 	mov	r17,r5
 402bd0c:	003f2e06 	br	402b9c8 <__flash_rwdata_start+0xffff6178>
 402bd10:	2021883a 	mov	r16,r4
 402bd14:	003eff06 	br	402b914 <__flash_rwdata_start+0xffff60c4>
 402bd18:	2023883a 	mov	r17,r4
 402bd1c:	003ee406 	br	402b8b0 <__flash_rwdata_start+0xffff6060>
 402bd20:	a8bfe236 	bltu	r21,r2,402bcac <__flash_rwdata_start+0xffff645c>
 402bd24:	0009883a 	mov	r4,zero
 402bd28:	003f2706 	br	402b9c8 <__flash_rwdata_start+0xffff6178>
 402bd2c:	81002d36 	bltu	r16,r4,402bde4 <__divdf3+0x8f4>
 402bd30:	24005626 	beq	r4,r16,402be8c <__divdf3+0x99c>
 402bd34:	2829883a 	mov	r20,r5
 402bd38:	003f8006 	br	402bb3c <__flash_rwdata_start+0xffff62ec>
 402bd3c:	053fffc4 	movi	r20,-1
 402bd40:	003f7f06 	br	402bb40 <__flash_rwdata_start+0xffff62f0>
 402bd44:	200f883a 	mov	r7,r4
 402bd48:	003f3c06 	br	402ba3c <__flash_rwdata_start+0xffff61ec>
 402bd4c:	1011883a 	mov	r8,r2
 402bd50:	003f5506 	br	402baa8 <__flash_rwdata_start+0xffff6258>
 402bd54:	e027883a 	mov	r19,fp
 402bd58:	003f7906 	br	402bb40 <__flash_rwdata_start+0xffff62f0>
 402bd5c:	010007c4 	movi	r4,31
 402bd60:	20c02816 	blt	r4,r3,402be04 <__divdf3+0x914>
 402bd64:	00800804 	movi	r2,32
 402bd68:	10c5c83a 	sub	r2,r2,r3
 402bd6c:	888a983a 	sll	r5,r17,r2
 402bd70:	a0c8d83a 	srl	r4,r20,r3
 402bd74:	a084983a 	sll	r2,r20,r2
 402bd78:	88e2d83a 	srl	r17,r17,r3
 402bd7c:	2906b03a 	or	r3,r5,r4
 402bd80:	1004c03a 	cmpne	r2,r2,zero
 402bd84:	1886b03a 	or	r3,r3,r2
 402bd88:	188001cc 	andi	r2,r3,7
 402bd8c:	10000726 	beq	r2,zero,402bdac <__divdf3+0x8bc>
 402bd90:	188003cc 	andi	r2,r3,15
 402bd94:	01000104 	movi	r4,4
 402bd98:	11000426 	beq	r2,r4,402bdac <__divdf3+0x8bc>
 402bd9c:	1805883a 	mov	r2,r3
 402bda0:	10c00104 	addi	r3,r2,4
 402bda4:	1885803a 	cmpltu	r2,r3,r2
 402bda8:	88a3883a 	add	r17,r17,r2
 402bdac:	8880202c 	andhi	r2,r17,128
 402bdb0:	10002926 	beq	r2,zero,402be58 <__divdf3+0x968>
 402bdb4:	9900004c 	andi	r4,r19,1
 402bdb8:	00800044 	movi	r2,1
 402bdbc:	0021883a 	mov	r16,zero
 402bdc0:	002b883a 	mov	r21,zero
 402bdc4:	003e2906 	br	402b66c <__flash_rwdata_start+0xffff5e1c>
 402bdc8:	d9800017 	ldw	r6,0(sp)
 402bdcc:	8c7fff84 	addi	r17,r17,-2
 402bdd0:	a9ab883a 	add	r21,r21,r6
 402bdd4:	a98b803a 	cmpltu	r5,r21,r6
 402bdd8:	2d8b883a 	add	r5,r5,r22
 402bddc:	2a11883a 	add	r8,r5,r8
 402bde0:	003ef806 	br	402b9c4 <__flash_rwdata_start+0xffff6174>
 402bde4:	d9800017 	ldw	r6,0(sp)
 402bde8:	318f883a 	add	r7,r6,r6
 402bdec:	398b803a 	cmpltu	r5,r7,r6
 402bdf0:	2d8d883a 	add	r6,r5,r22
 402bdf4:	81a1883a 	add	r16,r16,r6
 402bdf8:	a17fff84 	addi	r5,r20,-2
 402bdfc:	d9c00015 	stw	r7,0(sp)
 402be00:	003f8806 	br	402bc24 <__flash_rwdata_start+0xffff63d4>
 402be04:	013ff844 	movi	r4,-31
 402be08:	2085c83a 	sub	r2,r4,r2
 402be0c:	8888d83a 	srl	r4,r17,r2
 402be10:	00800804 	movi	r2,32
 402be14:	18802126 	beq	r3,r2,402be9c <__divdf3+0x9ac>
 402be18:	04001004 	movi	r16,64
 402be1c:	80c7c83a 	sub	r3,r16,r3
 402be20:	88e0983a 	sll	r16,r17,r3
 402be24:	8504b03a 	or	r2,r16,r20
 402be28:	1004c03a 	cmpne	r2,r2,zero
 402be2c:	2084b03a 	or	r2,r4,r2
 402be30:	144001cc 	andi	r17,r2,7
 402be34:	88000d1e 	bne	r17,zero,402be6c <__divdf3+0x97c>
 402be38:	0021883a 	mov	r16,zero
 402be3c:	102ad0fa 	srli	r21,r2,3
 402be40:	9900004c 	andi	r4,r19,1
 402be44:	0005883a 	mov	r2,zero
 402be48:	ac6ab03a 	or	r21,r21,r17
 402be4c:	003e0706 	br	402b66c <__flash_rwdata_start+0xffff5e1c>
 402be50:	1007883a 	mov	r3,r2
 402be54:	0023883a 	mov	r17,zero
 402be58:	8820927a 	slli	r16,r17,9
 402be5c:	1805883a 	mov	r2,r3
 402be60:	8822977a 	slli	r17,r17,29
 402be64:	8020d33a 	srli	r16,r16,12
 402be68:	003ff406 	br	402be3c <__flash_rwdata_start+0xffff65ec>
 402be6c:	10c003cc 	andi	r3,r2,15
 402be70:	01000104 	movi	r4,4
 402be74:	193ff626 	beq	r3,r4,402be50 <__flash_rwdata_start+0xffff6600>
 402be78:	0023883a 	mov	r17,zero
 402be7c:	003fc806 	br	402bda0 <__flash_rwdata_start+0xffff6550>
 402be80:	a8bfd136 	bltu	r21,r2,402bdc8 <__flash_rwdata_start+0xffff6578>
 402be84:	2823883a 	mov	r17,r5
 402be88:	003fa606 	br	402bd24 <__flash_rwdata_start+0xffff64d4>
 402be8c:	d9800017 	ldw	r6,0(sp)
 402be90:	30bfd436 	bltu	r6,r2,402bde4 <__flash_rwdata_start+0xffff6594>
 402be94:	2829883a 	mov	r20,r5
 402be98:	003f6406 	br	402bc2c <__flash_rwdata_start+0xffff63dc>
 402be9c:	0021883a 	mov	r16,zero
 402bea0:	003fe006 	br	402be24 <__flash_rwdata_start+0xffff65d4>
 402bea4:	00800434 	movhi	r2,16
 402bea8:	8c000234 	orhi	r16,r17,8
 402beac:	10bfffc4 	addi	r2,r2,-1
 402beb0:	e009883a 	mov	r4,fp
 402beb4:	80a0703a 	and	r16,r16,r2
 402beb8:	a02b883a 	mov	r21,r20
 402bebc:	003e4e06 	br	402b7f8 <__flash_rwdata_start+0xffff5fa8>

0402bec0 <__eqdf2>:
 402bec0:	2804d53a 	srli	r2,r5,20
 402bec4:	3806d53a 	srli	r3,r7,20
 402bec8:	02000434 	movhi	r8,16
 402becc:	423fffc4 	addi	r8,r8,-1
 402bed0:	1081ffcc 	andi	r2,r2,2047
 402bed4:	0281ffc4 	movi	r10,2047
 402bed8:	2a12703a 	and	r9,r5,r8
 402bedc:	18c1ffcc 	andi	r3,r3,2047
 402bee0:	3a10703a 	and	r8,r7,r8
 402bee4:	280ad7fa 	srli	r5,r5,31
 402bee8:	380ed7fa 	srli	r7,r7,31
 402beec:	12801026 	beq	r2,r10,402bf30 <__eqdf2+0x70>
 402bef0:	0281ffc4 	movi	r10,2047
 402bef4:	1a800a26 	beq	r3,r10,402bf20 <__eqdf2+0x60>
 402bef8:	10c00226 	beq	r2,r3,402bf04 <__eqdf2+0x44>
 402befc:	00800044 	movi	r2,1
 402bf00:	f800283a 	ret
 402bf04:	4a3ffd1e 	bne	r9,r8,402befc <__flash_rwdata_start+0xffff66ac>
 402bf08:	21bffc1e 	bne	r4,r6,402befc <__flash_rwdata_start+0xffff66ac>
 402bf0c:	29c00c26 	beq	r5,r7,402bf40 <__eqdf2+0x80>
 402bf10:	103ffa1e 	bne	r2,zero,402befc <__flash_rwdata_start+0xffff66ac>
 402bf14:	2244b03a 	or	r2,r4,r9
 402bf18:	1004c03a 	cmpne	r2,r2,zero
 402bf1c:	f800283a 	ret
 402bf20:	3214b03a 	or	r10,r6,r8
 402bf24:	503ff426 	beq	r10,zero,402bef8 <__flash_rwdata_start+0xffff66a8>
 402bf28:	00800044 	movi	r2,1
 402bf2c:	f800283a 	ret
 402bf30:	2254b03a 	or	r10,r4,r9
 402bf34:	503fee26 	beq	r10,zero,402bef0 <__flash_rwdata_start+0xffff66a0>
 402bf38:	00800044 	movi	r2,1
 402bf3c:	f800283a 	ret
 402bf40:	0005883a 	mov	r2,zero
 402bf44:	f800283a 	ret

0402bf48 <__gedf2>:
 402bf48:	2804d53a 	srli	r2,r5,20
 402bf4c:	3806d53a 	srli	r3,r7,20
 402bf50:	02000434 	movhi	r8,16
 402bf54:	423fffc4 	addi	r8,r8,-1
 402bf58:	1081ffcc 	andi	r2,r2,2047
 402bf5c:	0241ffc4 	movi	r9,2047
 402bf60:	2a14703a 	and	r10,r5,r8
 402bf64:	18c1ffcc 	andi	r3,r3,2047
 402bf68:	3a10703a 	and	r8,r7,r8
 402bf6c:	280ad7fa 	srli	r5,r5,31
 402bf70:	380ed7fa 	srli	r7,r7,31
 402bf74:	12401d26 	beq	r2,r9,402bfec <__gedf2+0xa4>
 402bf78:	0241ffc4 	movi	r9,2047
 402bf7c:	1a401226 	beq	r3,r9,402bfc8 <__gedf2+0x80>
 402bf80:	1000081e 	bne	r2,zero,402bfa4 <__gedf2+0x5c>
 402bf84:	2296b03a 	or	r11,r4,r10
 402bf88:	5813003a 	cmpeq	r9,r11,zero
 402bf8c:	1800091e 	bne	r3,zero,402bfb4 <__gedf2+0x6c>
 402bf90:	3218b03a 	or	r12,r6,r8
 402bf94:	6000071e 	bne	r12,zero,402bfb4 <__gedf2+0x6c>
 402bf98:	0005883a 	mov	r2,zero
 402bf9c:	5800101e 	bne	r11,zero,402bfe0 <__gedf2+0x98>
 402bfa0:	f800283a 	ret
 402bfa4:	18000c1e 	bne	r3,zero,402bfd8 <__gedf2+0x90>
 402bfa8:	3212b03a 	or	r9,r6,r8
 402bfac:	48000c26 	beq	r9,zero,402bfe0 <__gedf2+0x98>
 402bfb0:	0013883a 	mov	r9,zero
 402bfb4:	39c03fcc 	andi	r7,r7,255
 402bfb8:	48000826 	beq	r9,zero,402bfdc <__gedf2+0x94>
 402bfbc:	38000926 	beq	r7,zero,402bfe4 <__gedf2+0x9c>
 402bfc0:	00800044 	movi	r2,1
 402bfc4:	f800283a 	ret
 402bfc8:	3212b03a 	or	r9,r6,r8
 402bfcc:	483fec26 	beq	r9,zero,402bf80 <__flash_rwdata_start+0xffff6730>
 402bfd0:	00bfff84 	movi	r2,-2
 402bfd4:	f800283a 	ret
 402bfd8:	39c03fcc 	andi	r7,r7,255
 402bfdc:	29c00626 	beq	r5,r7,402bff8 <__gedf2+0xb0>
 402bfe0:	283ff726 	beq	r5,zero,402bfc0 <__flash_rwdata_start+0xffff6770>
 402bfe4:	00bfffc4 	movi	r2,-1
 402bfe8:	f800283a 	ret
 402bfec:	2292b03a 	or	r9,r4,r10
 402bff0:	483fe126 	beq	r9,zero,402bf78 <__flash_rwdata_start+0xffff6728>
 402bff4:	003ff606 	br	402bfd0 <__flash_rwdata_start+0xffff6780>
 402bff8:	18bff916 	blt	r3,r2,402bfe0 <__flash_rwdata_start+0xffff6790>
 402bffc:	10c00316 	blt	r2,r3,402c00c <__gedf2+0xc4>
 402c000:	42bff736 	bltu	r8,r10,402bfe0 <__flash_rwdata_start+0xffff6790>
 402c004:	52000326 	beq	r10,r8,402c014 <__gedf2+0xcc>
 402c008:	5200042e 	bgeu	r10,r8,402c01c <__gedf2+0xd4>
 402c00c:	283fec1e 	bne	r5,zero,402bfc0 <__flash_rwdata_start+0xffff6770>
 402c010:	003ff406 	br	402bfe4 <__flash_rwdata_start+0xffff6794>
 402c014:	313ff236 	bltu	r6,r4,402bfe0 <__flash_rwdata_start+0xffff6790>
 402c018:	21bffc36 	bltu	r4,r6,402c00c <__flash_rwdata_start+0xffff67bc>
 402c01c:	0005883a 	mov	r2,zero
 402c020:	f800283a 	ret

0402c024 <__ledf2>:
 402c024:	2804d53a 	srli	r2,r5,20
 402c028:	3810d53a 	srli	r8,r7,20
 402c02c:	00c00434 	movhi	r3,16
 402c030:	18ffffc4 	addi	r3,r3,-1
 402c034:	1081ffcc 	andi	r2,r2,2047
 402c038:	0241ffc4 	movi	r9,2047
 402c03c:	28d4703a 	and	r10,r5,r3
 402c040:	4201ffcc 	andi	r8,r8,2047
 402c044:	38c6703a 	and	r3,r7,r3
 402c048:	280ad7fa 	srli	r5,r5,31
 402c04c:	380ed7fa 	srli	r7,r7,31
 402c050:	12401f26 	beq	r2,r9,402c0d0 <__ledf2+0xac>
 402c054:	0241ffc4 	movi	r9,2047
 402c058:	42401426 	beq	r8,r9,402c0ac <__ledf2+0x88>
 402c05c:	1000091e 	bne	r2,zero,402c084 <__ledf2+0x60>
 402c060:	2296b03a 	or	r11,r4,r10
 402c064:	5813003a 	cmpeq	r9,r11,zero
 402c068:	29403fcc 	andi	r5,r5,255
 402c06c:	40000a1e 	bne	r8,zero,402c098 <__ledf2+0x74>
 402c070:	30d8b03a 	or	r12,r6,r3
 402c074:	6000081e 	bne	r12,zero,402c098 <__ledf2+0x74>
 402c078:	0005883a 	mov	r2,zero
 402c07c:	5800111e 	bne	r11,zero,402c0c4 <__ledf2+0xa0>
 402c080:	f800283a 	ret
 402c084:	29403fcc 	andi	r5,r5,255
 402c088:	40000c1e 	bne	r8,zero,402c0bc <__ledf2+0x98>
 402c08c:	30d2b03a 	or	r9,r6,r3
 402c090:	48000c26 	beq	r9,zero,402c0c4 <__ledf2+0xa0>
 402c094:	0013883a 	mov	r9,zero
 402c098:	39c03fcc 	andi	r7,r7,255
 402c09c:	48000826 	beq	r9,zero,402c0c0 <__ledf2+0x9c>
 402c0a0:	38001126 	beq	r7,zero,402c0e8 <__ledf2+0xc4>
 402c0a4:	00800044 	movi	r2,1
 402c0a8:	f800283a 	ret
 402c0ac:	30d2b03a 	or	r9,r6,r3
 402c0b0:	483fea26 	beq	r9,zero,402c05c <__flash_rwdata_start+0xffff680c>
 402c0b4:	00800084 	movi	r2,2
 402c0b8:	f800283a 	ret
 402c0bc:	39c03fcc 	andi	r7,r7,255
 402c0c0:	39400726 	beq	r7,r5,402c0e0 <__ledf2+0xbc>
 402c0c4:	2800081e 	bne	r5,zero,402c0e8 <__ledf2+0xc4>
 402c0c8:	00800044 	movi	r2,1
 402c0cc:	f800283a 	ret
 402c0d0:	2292b03a 	or	r9,r4,r10
 402c0d4:	483fdf26 	beq	r9,zero,402c054 <__flash_rwdata_start+0xffff6804>
 402c0d8:	00800084 	movi	r2,2
 402c0dc:	f800283a 	ret
 402c0e0:	4080030e 	bge	r8,r2,402c0f0 <__ledf2+0xcc>
 402c0e4:	383fef26 	beq	r7,zero,402c0a4 <__flash_rwdata_start+0xffff6854>
 402c0e8:	00bfffc4 	movi	r2,-1
 402c0ec:	f800283a 	ret
 402c0f0:	123feb16 	blt	r2,r8,402c0a0 <__flash_rwdata_start+0xffff6850>
 402c0f4:	1abff336 	bltu	r3,r10,402c0c4 <__flash_rwdata_start+0xffff6874>
 402c0f8:	50c00326 	beq	r10,r3,402c108 <__ledf2+0xe4>
 402c0fc:	50c0042e 	bgeu	r10,r3,402c110 <__ledf2+0xec>
 402c100:	283fe81e 	bne	r5,zero,402c0a4 <__flash_rwdata_start+0xffff6854>
 402c104:	003ff806 	br	402c0e8 <__flash_rwdata_start+0xffff6898>
 402c108:	313fee36 	bltu	r6,r4,402c0c4 <__flash_rwdata_start+0xffff6874>
 402c10c:	21bffc36 	bltu	r4,r6,402c100 <__flash_rwdata_start+0xffff68b0>
 402c110:	0005883a 	mov	r2,zero
 402c114:	f800283a 	ret

0402c118 <__muldf3>:
 402c118:	deffee04 	addi	sp,sp,-72
 402c11c:	dd000c15 	stw	r20,48(sp)
 402c120:	2828d53a 	srli	r20,r5,20
 402c124:	ddc00f15 	stw	r23,60(sp)
 402c128:	282ed7fa 	srli	r23,r5,31
 402c12c:	dc000815 	stw	r16,32(sp)
 402c130:	04000434 	movhi	r16,16
 402c134:	dcc00b15 	stw	r19,44(sp)
 402c138:	843fffc4 	addi	r16,r16,-1
 402c13c:	dfc01115 	stw	ra,68(sp)
 402c140:	df001015 	stw	fp,64(sp)
 402c144:	dd800e15 	stw	r22,56(sp)
 402c148:	dd400d15 	stw	r21,52(sp)
 402c14c:	dc800a15 	stw	r18,40(sp)
 402c150:	dc400915 	stw	r17,36(sp)
 402c154:	a501ffcc 	andi	r20,r20,2047
 402c158:	2c20703a 	and	r16,r5,r16
 402c15c:	b827883a 	mov	r19,r23
 402c160:	ba403fcc 	andi	r9,r23,255
 402c164:	a0006026 	beq	r20,zero,402c2e8 <__muldf3+0x1d0>
 402c168:	0081ffc4 	movi	r2,2047
 402c16c:	202d883a 	mov	r22,r4
 402c170:	a0803626 	beq	r20,r2,402c24c <__muldf3+0x134>
 402c174:	84000434 	orhi	r16,r16,16
 402c178:	200ad77a 	srli	r5,r4,29
 402c17c:	800490fa 	slli	r2,r16,3
 402c180:	202c90fa 	slli	r22,r4,3
 402c184:	a53f0044 	addi	r20,r20,-1023
 402c188:	28a0b03a 	or	r16,r5,r2
 402c18c:	002b883a 	mov	r21,zero
 402c190:	000b883a 	mov	r5,zero
 402c194:	3804d53a 	srli	r2,r7,20
 402c198:	3838d7fa 	srli	fp,r7,31
 402c19c:	04400434 	movhi	r17,16
 402c1a0:	8c7fffc4 	addi	r17,r17,-1
 402c1a4:	1081ffcc 	andi	r2,r2,2047
 402c1a8:	3025883a 	mov	r18,r6
 402c1ac:	3c62703a 	and	r17,r7,r17
 402c1b0:	e2803fcc 	andi	r10,fp,255
 402c1b4:	10006d26 	beq	r2,zero,402c36c <__muldf3+0x254>
 402c1b8:	00c1ffc4 	movi	r3,2047
 402c1bc:	10c06526 	beq	r2,r3,402c354 <__muldf3+0x23c>
 402c1c0:	8c400434 	orhi	r17,r17,16
 402c1c4:	300ed77a 	srli	r7,r6,29
 402c1c8:	880690fa 	slli	r3,r17,3
 402c1cc:	302490fa 	slli	r18,r6,3
 402c1d0:	10bf0044 	addi	r2,r2,-1023
 402c1d4:	38e2b03a 	or	r17,r7,r3
 402c1d8:	000f883a 	mov	r7,zero
 402c1dc:	a087883a 	add	r3,r20,r2
 402c1e0:	010003c4 	movi	r4,15
 402c1e4:	3d44b03a 	or	r2,r7,r21
 402c1e8:	e5ccf03a 	xor	r6,fp,r23
 402c1ec:	1a000044 	addi	r8,r3,1
 402c1f0:	20809b36 	bltu	r4,r2,402c460 <__muldf3+0x348>
 402c1f4:	100490ba 	slli	r2,r2,2
 402c1f8:	010100f4 	movhi	r4,1027
 402c1fc:	21308304 	addi	r4,r4,-15860
 402c200:	1105883a 	add	r2,r2,r4
 402c204:	10800017 	ldw	r2,0(r2)
 402c208:	1000683a 	jmp	r2
 402c20c:	0402c460 	cmpeqi	r16,zero,2833
 402c210:	0402c26c 	andhi	r16,zero,2825
 402c214:	0402c26c 	andhi	r16,zero,2825
 402c218:	0402c268 	cmpgeui	r16,zero,2825
 402c21c:	0402c43c 	xorhi	r16,zero,2832
 402c220:	0402c43c 	xorhi	r16,zero,2832
 402c224:	0402c424 	muli	r16,zero,2832
 402c228:	0402c268 	cmpgeui	r16,zero,2825
 402c22c:	0402c43c 	xorhi	r16,zero,2832
 402c230:	0402c424 	muli	r16,zero,2832
 402c234:	0402c43c 	xorhi	r16,zero,2832
 402c238:	0402c268 	cmpgeui	r16,zero,2825
 402c23c:	0402c44c 	andi	r16,zero,2833
 402c240:	0402c44c 	andi	r16,zero,2833
 402c244:	0402c44c 	andi	r16,zero,2833
 402c248:	0402c7ac 	andhi	r16,zero,2846
 402c24c:	2404b03a 	or	r2,r4,r16
 402c250:	1000711e 	bne	r2,zero,402c418 <__muldf3+0x300>
 402c254:	05400204 	movi	r21,8
 402c258:	0021883a 	mov	r16,zero
 402c25c:	002d883a 	mov	r22,zero
 402c260:	01400084 	movi	r5,2
 402c264:	003fcb06 	br	402c194 <__flash_rwdata_start+0xffff6944>
 402c268:	500d883a 	mov	r6,r10
 402c26c:	00800084 	movi	r2,2
 402c270:	38805926 	beq	r7,r2,402c3d8 <__muldf3+0x2c0>
 402c274:	008000c4 	movi	r2,3
 402c278:	3881bb26 	beq	r7,r2,402c968 <__muldf3+0x850>
 402c27c:	00800044 	movi	r2,1
 402c280:	3881961e 	bne	r7,r2,402c8dc <__muldf3+0x7c4>
 402c284:	3027883a 	mov	r19,r6
 402c288:	0005883a 	mov	r2,zero
 402c28c:	0021883a 	mov	r16,zero
 402c290:	002d883a 	mov	r22,zero
 402c294:	1004953a 	slli	r2,r2,20
 402c298:	98c03fcc 	andi	r3,r19,255
 402c29c:	04400434 	movhi	r17,16
 402c2a0:	8c7fffc4 	addi	r17,r17,-1
 402c2a4:	180697fa 	slli	r3,r3,31
 402c2a8:	8460703a 	and	r16,r16,r17
 402c2ac:	80a0b03a 	or	r16,r16,r2
 402c2b0:	80c6b03a 	or	r3,r16,r3
 402c2b4:	b005883a 	mov	r2,r22
 402c2b8:	dfc01117 	ldw	ra,68(sp)
 402c2bc:	df001017 	ldw	fp,64(sp)
 402c2c0:	ddc00f17 	ldw	r23,60(sp)
 402c2c4:	dd800e17 	ldw	r22,56(sp)
 402c2c8:	dd400d17 	ldw	r21,52(sp)
 402c2cc:	dd000c17 	ldw	r20,48(sp)
 402c2d0:	dcc00b17 	ldw	r19,44(sp)
 402c2d4:	dc800a17 	ldw	r18,40(sp)
 402c2d8:	dc400917 	ldw	r17,36(sp)
 402c2dc:	dc000817 	ldw	r16,32(sp)
 402c2e0:	dec01204 	addi	sp,sp,72
 402c2e4:	f800283a 	ret
 402c2e8:	2404b03a 	or	r2,r4,r16
 402c2ec:	202b883a 	mov	r21,r4
 402c2f0:	10004426 	beq	r2,zero,402c404 <__muldf3+0x2ec>
 402c2f4:	80015126 	beq	r16,zero,402c83c <__muldf3+0x724>
 402c2f8:	8009883a 	mov	r4,r16
 402c2fc:	d9800715 	stw	r6,28(sp)
 402c300:	d9c00215 	stw	r7,8(sp)
 402c304:	da400415 	stw	r9,16(sp)
 402c308:	402d4840 	call	402d484 <__clzsi2>
 402c30c:	d9800717 	ldw	r6,28(sp)
 402c310:	d9c00217 	ldw	r7,8(sp)
 402c314:	da400417 	ldw	r9,16(sp)
 402c318:	113ffd44 	addi	r4,r2,-11
 402c31c:	00c00704 	movi	r3,28
 402c320:	19014216 	blt	r3,r4,402c82c <__muldf3+0x714>
 402c324:	00c00744 	movi	r3,29
 402c328:	15bffe04 	addi	r22,r2,-8
 402c32c:	1907c83a 	sub	r3,r3,r4
 402c330:	85a0983a 	sll	r16,r16,r22
 402c334:	a8c6d83a 	srl	r3,r21,r3
 402c338:	adac983a 	sll	r22,r21,r22
 402c33c:	1c20b03a 	or	r16,r3,r16
 402c340:	1080fcc4 	addi	r2,r2,1011
 402c344:	00a9c83a 	sub	r20,zero,r2
 402c348:	002b883a 	mov	r21,zero
 402c34c:	000b883a 	mov	r5,zero
 402c350:	003f9006 	br	402c194 <__flash_rwdata_start+0xffff6944>
 402c354:	3446b03a 	or	r3,r6,r17
 402c358:	1800281e 	bne	r3,zero,402c3fc <__muldf3+0x2e4>
 402c35c:	0023883a 	mov	r17,zero
 402c360:	0025883a 	mov	r18,zero
 402c364:	01c00084 	movi	r7,2
 402c368:	003f9c06 	br	402c1dc <__flash_rwdata_start+0xffff698c>
 402c36c:	3446b03a 	or	r3,r6,r17
 402c370:	18001e26 	beq	r3,zero,402c3ec <__muldf3+0x2d4>
 402c374:	88012126 	beq	r17,zero,402c7fc <__muldf3+0x6e4>
 402c378:	8809883a 	mov	r4,r17
 402c37c:	d9400215 	stw	r5,8(sp)
 402c380:	d9800715 	stw	r6,28(sp)
 402c384:	da400415 	stw	r9,16(sp)
 402c388:	da800315 	stw	r10,12(sp)
 402c38c:	402d4840 	call	402d484 <__clzsi2>
 402c390:	d9400217 	ldw	r5,8(sp)
 402c394:	d9800717 	ldw	r6,28(sp)
 402c398:	da400417 	ldw	r9,16(sp)
 402c39c:	da800317 	ldw	r10,12(sp)
 402c3a0:	113ffd44 	addi	r4,r2,-11
 402c3a4:	00c00704 	movi	r3,28
 402c3a8:	19011016 	blt	r3,r4,402c7ec <__muldf3+0x6d4>
 402c3ac:	00c00744 	movi	r3,29
 402c3b0:	14bffe04 	addi	r18,r2,-8
 402c3b4:	1907c83a 	sub	r3,r3,r4
 402c3b8:	8ca2983a 	sll	r17,r17,r18
 402c3bc:	30c6d83a 	srl	r3,r6,r3
 402c3c0:	34a4983a 	sll	r18,r6,r18
 402c3c4:	1c62b03a 	or	r17,r3,r17
 402c3c8:	1080fcc4 	addi	r2,r2,1011
 402c3cc:	0085c83a 	sub	r2,zero,r2
 402c3d0:	000f883a 	mov	r7,zero
 402c3d4:	003f8106 	br	402c1dc <__flash_rwdata_start+0xffff698c>
 402c3d8:	3027883a 	mov	r19,r6
 402c3dc:	0081ffc4 	movi	r2,2047
 402c3e0:	0021883a 	mov	r16,zero
 402c3e4:	002d883a 	mov	r22,zero
 402c3e8:	003faa06 	br	402c294 <__flash_rwdata_start+0xffff6a44>
 402c3ec:	0023883a 	mov	r17,zero
 402c3f0:	0025883a 	mov	r18,zero
 402c3f4:	01c00044 	movi	r7,1
 402c3f8:	003f7806 	br	402c1dc <__flash_rwdata_start+0xffff698c>
 402c3fc:	01c000c4 	movi	r7,3
 402c400:	003f7606 	br	402c1dc <__flash_rwdata_start+0xffff698c>
 402c404:	05400104 	movi	r21,4
 402c408:	0021883a 	mov	r16,zero
 402c40c:	002d883a 	mov	r22,zero
 402c410:	01400044 	movi	r5,1
 402c414:	003f5f06 	br	402c194 <__flash_rwdata_start+0xffff6944>
 402c418:	05400304 	movi	r21,12
 402c41c:	014000c4 	movi	r5,3
 402c420:	003f5c06 	br	402c194 <__flash_rwdata_start+0xffff6944>
 402c424:	04000434 	movhi	r16,16
 402c428:	0027883a 	mov	r19,zero
 402c42c:	843fffc4 	addi	r16,r16,-1
 402c430:	05bfffc4 	movi	r22,-1
 402c434:	0081ffc4 	movi	r2,2047
 402c438:	003f9606 	br	402c294 <__flash_rwdata_start+0xffff6a44>
 402c43c:	8023883a 	mov	r17,r16
 402c440:	b025883a 	mov	r18,r22
 402c444:	280f883a 	mov	r7,r5
 402c448:	003f8806 	br	402c26c <__flash_rwdata_start+0xffff6a1c>
 402c44c:	8023883a 	mov	r17,r16
 402c450:	b025883a 	mov	r18,r22
 402c454:	480d883a 	mov	r6,r9
 402c458:	280f883a 	mov	r7,r5
 402c45c:	003f8306 	br	402c26c <__flash_rwdata_start+0xffff6a1c>
 402c460:	b026d43a 	srli	r19,r22,16
 402c464:	902ed43a 	srli	r23,r18,16
 402c468:	b5bfffcc 	andi	r22,r22,65535
 402c46c:	94bfffcc 	andi	r18,r18,65535
 402c470:	b00b883a 	mov	r5,r22
 402c474:	9009883a 	mov	r4,r18
 402c478:	d8c00515 	stw	r3,20(sp)
 402c47c:	d9800715 	stw	r6,28(sp)
 402c480:	da000615 	stw	r8,24(sp)
 402c484:	402ac1c0 	call	402ac1c <__mulsi3>
 402c488:	980b883a 	mov	r5,r19
 402c48c:	9009883a 	mov	r4,r18
 402c490:	1029883a 	mov	r20,r2
 402c494:	402ac1c0 	call	402ac1c <__mulsi3>
 402c498:	b80b883a 	mov	r5,r23
 402c49c:	9809883a 	mov	r4,r19
 402c4a0:	102b883a 	mov	r21,r2
 402c4a4:	402ac1c0 	call	402ac1c <__mulsi3>
 402c4a8:	b809883a 	mov	r4,r23
 402c4ac:	b00b883a 	mov	r5,r22
 402c4b0:	1039883a 	mov	fp,r2
 402c4b4:	402ac1c0 	call	402ac1c <__mulsi3>
 402c4b8:	a008d43a 	srli	r4,r20,16
 402c4bc:	1545883a 	add	r2,r2,r21
 402c4c0:	d8c00517 	ldw	r3,20(sp)
 402c4c4:	2085883a 	add	r2,r4,r2
 402c4c8:	d9800717 	ldw	r6,28(sp)
 402c4cc:	da000617 	ldw	r8,24(sp)
 402c4d0:	1540022e 	bgeu	r2,r21,402c4dc <__muldf3+0x3c4>
 402c4d4:	01000074 	movhi	r4,1
 402c4d8:	e139883a 	add	fp,fp,r4
 402c4dc:	100e943a 	slli	r7,r2,16
 402c4e0:	1004d43a 	srli	r2,r2,16
 402c4e4:	882ad43a 	srli	r21,r17,16
 402c4e8:	a53fffcc 	andi	r20,r20,65535
 402c4ec:	8c7fffcc 	andi	r17,r17,65535
 402c4f0:	3d29883a 	add	r20,r7,r20
 402c4f4:	b00b883a 	mov	r5,r22
 402c4f8:	8809883a 	mov	r4,r17
 402c4fc:	d8c00515 	stw	r3,20(sp)
 402c500:	d9800715 	stw	r6,28(sp)
 402c504:	da000615 	stw	r8,24(sp)
 402c508:	dd000115 	stw	r20,4(sp)
 402c50c:	d8800015 	stw	r2,0(sp)
 402c510:	402ac1c0 	call	402ac1c <__mulsi3>
 402c514:	980b883a 	mov	r5,r19
 402c518:	8809883a 	mov	r4,r17
 402c51c:	d8800215 	stw	r2,8(sp)
 402c520:	402ac1c0 	call	402ac1c <__mulsi3>
 402c524:	9809883a 	mov	r4,r19
 402c528:	a80b883a 	mov	r5,r21
 402c52c:	1029883a 	mov	r20,r2
 402c530:	402ac1c0 	call	402ac1c <__mulsi3>
 402c534:	b00b883a 	mov	r5,r22
 402c538:	a809883a 	mov	r4,r21
 402c53c:	d8800415 	stw	r2,16(sp)
 402c540:	402ac1c0 	call	402ac1c <__mulsi3>
 402c544:	d9c00217 	ldw	r7,8(sp)
 402c548:	1505883a 	add	r2,r2,r20
 402c54c:	d8c00517 	ldw	r3,20(sp)
 402c550:	3826d43a 	srli	r19,r7,16
 402c554:	d9800717 	ldw	r6,28(sp)
 402c558:	da000617 	ldw	r8,24(sp)
 402c55c:	9885883a 	add	r2,r19,r2
 402c560:	da400417 	ldw	r9,16(sp)
 402c564:	1500022e 	bgeu	r2,r20,402c570 <__muldf3+0x458>
 402c568:	01000074 	movhi	r4,1
 402c56c:	4913883a 	add	r9,r9,r4
 402c570:	1028d43a 	srli	r20,r2,16
 402c574:	1004943a 	slli	r2,r2,16
 402c578:	802cd43a 	srli	r22,r16,16
 402c57c:	843fffcc 	andi	r16,r16,65535
 402c580:	3cffffcc 	andi	r19,r7,65535
 402c584:	9009883a 	mov	r4,r18
 402c588:	800b883a 	mov	r5,r16
 402c58c:	a269883a 	add	r20,r20,r9
 402c590:	d8c00515 	stw	r3,20(sp)
 402c594:	d9800715 	stw	r6,28(sp)
 402c598:	da000615 	stw	r8,24(sp)
 402c59c:	14e7883a 	add	r19,r2,r19
 402c5a0:	402ac1c0 	call	402ac1c <__mulsi3>
 402c5a4:	9009883a 	mov	r4,r18
 402c5a8:	b00b883a 	mov	r5,r22
 402c5ac:	d8800315 	stw	r2,12(sp)
 402c5b0:	402ac1c0 	call	402ac1c <__mulsi3>
 402c5b4:	b809883a 	mov	r4,r23
 402c5b8:	b00b883a 	mov	r5,r22
 402c5bc:	d8800215 	stw	r2,8(sp)
 402c5c0:	402ac1c0 	call	402ac1c <__mulsi3>
 402c5c4:	b80b883a 	mov	r5,r23
 402c5c8:	8009883a 	mov	r4,r16
 402c5cc:	d8800415 	stw	r2,16(sp)
 402c5d0:	402ac1c0 	call	402ac1c <__mulsi3>
 402c5d4:	da800317 	ldw	r10,12(sp)
 402c5d8:	d9c00217 	ldw	r7,8(sp)
 402c5dc:	d9000017 	ldw	r4,0(sp)
 402c5e0:	502ed43a 	srli	r23,r10,16
 402c5e4:	11c5883a 	add	r2,r2,r7
 402c5e8:	24e5883a 	add	r18,r4,r19
 402c5ec:	b885883a 	add	r2,r23,r2
 402c5f0:	d8c00517 	ldw	r3,20(sp)
 402c5f4:	d9800717 	ldw	r6,28(sp)
 402c5f8:	da000617 	ldw	r8,24(sp)
 402c5fc:	da400417 	ldw	r9,16(sp)
 402c600:	11c0022e 	bgeu	r2,r7,402c60c <__muldf3+0x4f4>
 402c604:	01000074 	movhi	r4,1
 402c608:	4913883a 	add	r9,r9,r4
 402c60c:	100ed43a 	srli	r7,r2,16
 402c610:	1004943a 	slli	r2,r2,16
 402c614:	55ffffcc 	andi	r23,r10,65535
 402c618:	3a53883a 	add	r9,r7,r9
 402c61c:	8809883a 	mov	r4,r17
 402c620:	800b883a 	mov	r5,r16
 402c624:	d8c00515 	stw	r3,20(sp)
 402c628:	d9800715 	stw	r6,28(sp)
 402c62c:	da000615 	stw	r8,24(sp)
 402c630:	da400415 	stw	r9,16(sp)
 402c634:	15ef883a 	add	r23,r2,r23
 402c638:	402ac1c0 	call	402ac1c <__mulsi3>
 402c63c:	8809883a 	mov	r4,r17
 402c640:	b00b883a 	mov	r5,r22
 402c644:	d8800215 	stw	r2,8(sp)
 402c648:	402ac1c0 	call	402ac1c <__mulsi3>
 402c64c:	b00b883a 	mov	r5,r22
 402c650:	a809883a 	mov	r4,r21
 402c654:	d8800315 	stw	r2,12(sp)
 402c658:	402ac1c0 	call	402ac1c <__mulsi3>
 402c65c:	8009883a 	mov	r4,r16
 402c660:	a80b883a 	mov	r5,r21
 402c664:	1023883a 	mov	r17,r2
 402c668:	402ac1c0 	call	402ac1c <__mulsi3>
 402c66c:	d9c00217 	ldw	r7,8(sp)
 402c670:	da800317 	ldw	r10,12(sp)
 402c674:	d8c00517 	ldw	r3,20(sp)
 402c678:	3808d43a 	srli	r4,r7,16
 402c67c:	1285883a 	add	r2,r2,r10
 402c680:	d9800717 	ldw	r6,28(sp)
 402c684:	2085883a 	add	r2,r4,r2
 402c688:	da000617 	ldw	r8,24(sp)
 402c68c:	da400417 	ldw	r9,16(sp)
 402c690:	1280022e 	bgeu	r2,r10,402c69c <__muldf3+0x584>
 402c694:	01000074 	movhi	r4,1
 402c698:	8923883a 	add	r17,r17,r4
 402c69c:	1008943a 	slli	r4,r2,16
 402c6a0:	39ffffcc 	andi	r7,r7,65535
 402c6a4:	e4b9883a 	add	fp,fp,r18
 402c6a8:	21cf883a 	add	r7,r4,r7
 402c6ac:	e4e7803a 	cmpltu	r19,fp,r19
 402c6b0:	3d0f883a 	add	r7,r7,r20
 402c6b4:	bf39883a 	add	fp,r23,fp
 402c6b8:	99c9883a 	add	r4,r19,r7
 402c6bc:	e5ef803a 	cmpltu	r23,fp,r23
 402c6c0:	490b883a 	add	r5,r9,r4
 402c6c4:	1004d43a 	srli	r2,r2,16
 402c6c8:	b965883a 	add	r18,r23,r5
 402c6cc:	24c9803a 	cmpltu	r4,r4,r19
 402c6d0:	3d29803a 	cmpltu	r20,r7,r20
 402c6d4:	a128b03a 	or	r20,r20,r4
 402c6d8:	95ef803a 	cmpltu	r23,r18,r23
 402c6dc:	2a53803a 	cmpltu	r9,r5,r9
 402c6e0:	a0a9883a 	add	r20,r20,r2
 402c6e4:	4deeb03a 	or	r23,r9,r23
 402c6e8:	a5ef883a 	add	r23,r20,r23
 402c6ec:	bc63883a 	add	r17,r23,r17
 402c6f0:	e004927a 	slli	r2,fp,9
 402c6f4:	d9000117 	ldw	r4,4(sp)
 402c6f8:	882e927a 	slli	r23,r17,9
 402c6fc:	9022d5fa 	srli	r17,r18,23
 402c700:	e038d5fa 	srli	fp,fp,23
 402c704:	1104b03a 	or	r2,r2,r4
 402c708:	9024927a 	slli	r18,r18,9
 402c70c:	1004c03a 	cmpne	r2,r2,zero
 402c710:	bc62b03a 	or	r17,r23,r17
 402c714:	1738b03a 	or	fp,r2,fp
 402c718:	8880402c 	andhi	r2,r17,256
 402c71c:	e4a4b03a 	or	r18,fp,r18
 402c720:	10000726 	beq	r2,zero,402c740 <__muldf3+0x628>
 402c724:	9006d07a 	srli	r3,r18,1
 402c728:	880497fa 	slli	r2,r17,31
 402c72c:	9480004c 	andi	r18,r18,1
 402c730:	8822d07a 	srli	r17,r17,1
 402c734:	1ca4b03a 	or	r18,r3,r18
 402c738:	14a4b03a 	or	r18,r2,r18
 402c73c:	4007883a 	mov	r3,r8
 402c740:	1880ffc4 	addi	r2,r3,1023
 402c744:	0080460e 	bge	zero,r2,402c860 <__muldf3+0x748>
 402c748:	910001cc 	andi	r4,r18,7
 402c74c:	20000726 	beq	r4,zero,402c76c <__muldf3+0x654>
 402c750:	910003cc 	andi	r4,r18,15
 402c754:	01400104 	movi	r5,4
 402c758:	21400426 	beq	r4,r5,402c76c <__muldf3+0x654>
 402c75c:	9149883a 	add	r4,r18,r5
 402c760:	24a5803a 	cmpltu	r18,r4,r18
 402c764:	8ca3883a 	add	r17,r17,r18
 402c768:	2025883a 	mov	r18,r4
 402c76c:	8900402c 	andhi	r4,r17,256
 402c770:	20000426 	beq	r4,zero,402c784 <__muldf3+0x66c>
 402c774:	18810004 	addi	r2,r3,1024
 402c778:	00ffc034 	movhi	r3,65280
 402c77c:	18ffffc4 	addi	r3,r3,-1
 402c780:	88e2703a 	and	r17,r17,r3
 402c784:	00c1ff84 	movi	r3,2046
 402c788:	18bf1316 	blt	r3,r2,402c3d8 <__flash_rwdata_start+0xffff6b88>
 402c78c:	882c977a 	slli	r22,r17,29
 402c790:	9024d0fa 	srli	r18,r18,3
 402c794:	8822927a 	slli	r17,r17,9
 402c798:	1081ffcc 	andi	r2,r2,2047
 402c79c:	b4acb03a 	or	r22,r22,r18
 402c7a0:	8820d33a 	srli	r16,r17,12
 402c7a4:	3027883a 	mov	r19,r6
 402c7a8:	003eba06 	br	402c294 <__flash_rwdata_start+0xffff6a44>
 402c7ac:	8080022c 	andhi	r2,r16,8
 402c7b0:	10000926 	beq	r2,zero,402c7d8 <__muldf3+0x6c0>
 402c7b4:	8880022c 	andhi	r2,r17,8
 402c7b8:	1000071e 	bne	r2,zero,402c7d8 <__muldf3+0x6c0>
 402c7bc:	00800434 	movhi	r2,16
 402c7c0:	8c000234 	orhi	r16,r17,8
 402c7c4:	10bfffc4 	addi	r2,r2,-1
 402c7c8:	e027883a 	mov	r19,fp
 402c7cc:	80a0703a 	and	r16,r16,r2
 402c7d0:	902d883a 	mov	r22,r18
 402c7d4:	003f1706 	br	402c434 <__flash_rwdata_start+0xffff6be4>
 402c7d8:	00800434 	movhi	r2,16
 402c7dc:	84000234 	orhi	r16,r16,8
 402c7e0:	10bfffc4 	addi	r2,r2,-1
 402c7e4:	80a0703a 	and	r16,r16,r2
 402c7e8:	003f1206 	br	402c434 <__flash_rwdata_start+0xffff6be4>
 402c7ec:	147ff604 	addi	r17,r2,-40
 402c7f0:	3462983a 	sll	r17,r6,r17
 402c7f4:	0025883a 	mov	r18,zero
 402c7f8:	003ef306 	br	402c3c8 <__flash_rwdata_start+0xffff6b78>
 402c7fc:	3009883a 	mov	r4,r6
 402c800:	d9400215 	stw	r5,8(sp)
 402c804:	d9800715 	stw	r6,28(sp)
 402c808:	da400415 	stw	r9,16(sp)
 402c80c:	da800315 	stw	r10,12(sp)
 402c810:	402d4840 	call	402d484 <__clzsi2>
 402c814:	10800804 	addi	r2,r2,32
 402c818:	da800317 	ldw	r10,12(sp)
 402c81c:	da400417 	ldw	r9,16(sp)
 402c820:	d9800717 	ldw	r6,28(sp)
 402c824:	d9400217 	ldw	r5,8(sp)
 402c828:	003edd06 	br	402c3a0 <__flash_rwdata_start+0xffff6b50>
 402c82c:	143ff604 	addi	r16,r2,-40
 402c830:	ac20983a 	sll	r16,r21,r16
 402c834:	002d883a 	mov	r22,zero
 402c838:	003ec106 	br	402c340 <__flash_rwdata_start+0xffff6af0>
 402c83c:	d9800715 	stw	r6,28(sp)
 402c840:	d9c00215 	stw	r7,8(sp)
 402c844:	da400415 	stw	r9,16(sp)
 402c848:	402d4840 	call	402d484 <__clzsi2>
 402c84c:	10800804 	addi	r2,r2,32
 402c850:	da400417 	ldw	r9,16(sp)
 402c854:	d9c00217 	ldw	r7,8(sp)
 402c858:	d9800717 	ldw	r6,28(sp)
 402c85c:	003eae06 	br	402c318 <__flash_rwdata_start+0xffff6ac8>
 402c860:	00c00044 	movi	r3,1
 402c864:	1887c83a 	sub	r3,r3,r2
 402c868:	01000e04 	movi	r4,56
 402c86c:	20fe8516 	blt	r4,r3,402c284 <__flash_rwdata_start+0xffff6a34>
 402c870:	010007c4 	movi	r4,31
 402c874:	20c01b16 	blt	r4,r3,402c8e4 <__muldf3+0x7cc>
 402c878:	00800804 	movi	r2,32
 402c87c:	10c5c83a 	sub	r2,r2,r3
 402c880:	888a983a 	sll	r5,r17,r2
 402c884:	90c8d83a 	srl	r4,r18,r3
 402c888:	9084983a 	sll	r2,r18,r2
 402c88c:	88e2d83a 	srl	r17,r17,r3
 402c890:	2906b03a 	or	r3,r5,r4
 402c894:	1004c03a 	cmpne	r2,r2,zero
 402c898:	1886b03a 	or	r3,r3,r2
 402c89c:	188001cc 	andi	r2,r3,7
 402c8a0:	10000726 	beq	r2,zero,402c8c0 <__muldf3+0x7a8>
 402c8a4:	188003cc 	andi	r2,r3,15
 402c8a8:	01000104 	movi	r4,4
 402c8ac:	11000426 	beq	r2,r4,402c8c0 <__muldf3+0x7a8>
 402c8b0:	1805883a 	mov	r2,r3
 402c8b4:	10c00104 	addi	r3,r2,4
 402c8b8:	1885803a 	cmpltu	r2,r3,r2
 402c8bc:	88a3883a 	add	r17,r17,r2
 402c8c0:	8880202c 	andhi	r2,r17,128
 402c8c4:	10001c26 	beq	r2,zero,402c938 <__muldf3+0x820>
 402c8c8:	3027883a 	mov	r19,r6
 402c8cc:	00800044 	movi	r2,1
 402c8d0:	0021883a 	mov	r16,zero
 402c8d4:	002d883a 	mov	r22,zero
 402c8d8:	003e6e06 	br	402c294 <__flash_rwdata_start+0xffff6a44>
 402c8dc:	4007883a 	mov	r3,r8
 402c8e0:	003f9706 	br	402c740 <__flash_rwdata_start+0xffff6ef0>
 402c8e4:	017ff844 	movi	r5,-31
 402c8e8:	2885c83a 	sub	r2,r5,r2
 402c8ec:	888ad83a 	srl	r5,r17,r2
 402c8f0:	00800804 	movi	r2,32
 402c8f4:	18801a26 	beq	r3,r2,402c960 <__muldf3+0x848>
 402c8f8:	01001004 	movi	r4,64
 402c8fc:	20c7c83a 	sub	r3,r4,r3
 402c900:	88e2983a 	sll	r17,r17,r3
 402c904:	8ca4b03a 	or	r18,r17,r18
 402c908:	9004c03a 	cmpne	r2,r18,zero
 402c90c:	2884b03a 	or	r2,r5,r2
 402c910:	144001cc 	andi	r17,r2,7
 402c914:	88000d1e 	bne	r17,zero,402c94c <__muldf3+0x834>
 402c918:	0021883a 	mov	r16,zero
 402c91c:	102cd0fa 	srli	r22,r2,3
 402c920:	3027883a 	mov	r19,r6
 402c924:	0005883a 	mov	r2,zero
 402c928:	b46cb03a 	or	r22,r22,r17
 402c92c:	003e5906 	br	402c294 <__flash_rwdata_start+0xffff6a44>
 402c930:	1007883a 	mov	r3,r2
 402c934:	0023883a 	mov	r17,zero
 402c938:	8820927a 	slli	r16,r17,9
 402c93c:	1805883a 	mov	r2,r3
 402c940:	8822977a 	slli	r17,r17,29
 402c944:	8020d33a 	srli	r16,r16,12
 402c948:	003ff406 	br	402c91c <__flash_rwdata_start+0xffff70cc>
 402c94c:	10c003cc 	andi	r3,r2,15
 402c950:	01000104 	movi	r4,4
 402c954:	193ff626 	beq	r3,r4,402c930 <__flash_rwdata_start+0xffff70e0>
 402c958:	0023883a 	mov	r17,zero
 402c95c:	003fd506 	br	402c8b4 <__flash_rwdata_start+0xffff7064>
 402c960:	0023883a 	mov	r17,zero
 402c964:	003fe706 	br	402c904 <__flash_rwdata_start+0xffff70b4>
 402c968:	00800434 	movhi	r2,16
 402c96c:	8c000234 	orhi	r16,r17,8
 402c970:	10bfffc4 	addi	r2,r2,-1
 402c974:	3027883a 	mov	r19,r6
 402c978:	80a0703a 	and	r16,r16,r2
 402c97c:	902d883a 	mov	r22,r18
 402c980:	003eac06 	br	402c434 <__flash_rwdata_start+0xffff6be4>

0402c984 <__subdf3>:
 402c984:	02000434 	movhi	r8,16
 402c988:	423fffc4 	addi	r8,r8,-1
 402c98c:	defffb04 	addi	sp,sp,-20
 402c990:	2a14703a 	and	r10,r5,r8
 402c994:	3812d53a 	srli	r9,r7,20
 402c998:	3a10703a 	and	r8,r7,r8
 402c99c:	2006d77a 	srli	r3,r4,29
 402c9a0:	3004d77a 	srli	r2,r6,29
 402c9a4:	dc000015 	stw	r16,0(sp)
 402c9a8:	501490fa 	slli	r10,r10,3
 402c9ac:	2820d53a 	srli	r16,r5,20
 402c9b0:	401090fa 	slli	r8,r8,3
 402c9b4:	dc800215 	stw	r18,8(sp)
 402c9b8:	dc400115 	stw	r17,4(sp)
 402c9bc:	dfc00415 	stw	ra,16(sp)
 402c9c0:	202290fa 	slli	r17,r4,3
 402c9c4:	dcc00315 	stw	r19,12(sp)
 402c9c8:	4a41ffcc 	andi	r9,r9,2047
 402c9cc:	0101ffc4 	movi	r4,2047
 402c9d0:	2824d7fa 	srli	r18,r5,31
 402c9d4:	8401ffcc 	andi	r16,r16,2047
 402c9d8:	50c6b03a 	or	r3,r10,r3
 402c9dc:	380ed7fa 	srli	r7,r7,31
 402c9e0:	408ab03a 	or	r5,r8,r2
 402c9e4:	300c90fa 	slli	r6,r6,3
 402c9e8:	49009626 	beq	r9,r4,402cc44 <__subdf3+0x2c0>
 402c9ec:	39c0005c 	xori	r7,r7,1
 402c9f0:	8245c83a 	sub	r2,r16,r9
 402c9f4:	3c807426 	beq	r7,r18,402cbc8 <__subdf3+0x244>
 402c9f8:	0080af0e 	bge	zero,r2,402ccb8 <__subdf3+0x334>
 402c9fc:	48002a1e 	bne	r9,zero,402caa8 <__subdf3+0x124>
 402ca00:	2988b03a 	or	r4,r5,r6
 402ca04:	20009a1e 	bne	r4,zero,402cc70 <__subdf3+0x2ec>
 402ca08:	888001cc 	andi	r2,r17,7
 402ca0c:	10000726 	beq	r2,zero,402ca2c <__subdf3+0xa8>
 402ca10:	888003cc 	andi	r2,r17,15
 402ca14:	01000104 	movi	r4,4
 402ca18:	11000426 	beq	r2,r4,402ca2c <__subdf3+0xa8>
 402ca1c:	890b883a 	add	r5,r17,r4
 402ca20:	2c63803a 	cmpltu	r17,r5,r17
 402ca24:	1c47883a 	add	r3,r3,r17
 402ca28:	2823883a 	mov	r17,r5
 402ca2c:	1880202c 	andhi	r2,r3,128
 402ca30:	10005926 	beq	r2,zero,402cb98 <__subdf3+0x214>
 402ca34:	84000044 	addi	r16,r16,1
 402ca38:	0081ffc4 	movi	r2,2047
 402ca3c:	8080be26 	beq	r16,r2,402cd38 <__subdf3+0x3b4>
 402ca40:	017fe034 	movhi	r5,65408
 402ca44:	297fffc4 	addi	r5,r5,-1
 402ca48:	1946703a 	and	r3,r3,r5
 402ca4c:	1804977a 	slli	r2,r3,29
 402ca50:	1806927a 	slli	r3,r3,9
 402ca54:	8822d0fa 	srli	r17,r17,3
 402ca58:	8401ffcc 	andi	r16,r16,2047
 402ca5c:	180ad33a 	srli	r5,r3,12
 402ca60:	9100004c 	andi	r4,r18,1
 402ca64:	1444b03a 	or	r2,r2,r17
 402ca68:	80c1ffcc 	andi	r3,r16,2047
 402ca6c:	1820953a 	slli	r16,r3,20
 402ca70:	20c03fcc 	andi	r3,r4,255
 402ca74:	180897fa 	slli	r4,r3,31
 402ca78:	00c00434 	movhi	r3,16
 402ca7c:	18ffffc4 	addi	r3,r3,-1
 402ca80:	28c6703a 	and	r3,r5,r3
 402ca84:	1c06b03a 	or	r3,r3,r16
 402ca88:	1906b03a 	or	r3,r3,r4
 402ca8c:	dfc00417 	ldw	ra,16(sp)
 402ca90:	dcc00317 	ldw	r19,12(sp)
 402ca94:	dc800217 	ldw	r18,8(sp)
 402ca98:	dc400117 	ldw	r17,4(sp)
 402ca9c:	dc000017 	ldw	r16,0(sp)
 402caa0:	dec00504 	addi	sp,sp,20
 402caa4:	f800283a 	ret
 402caa8:	0101ffc4 	movi	r4,2047
 402caac:	813fd626 	beq	r16,r4,402ca08 <__flash_rwdata_start+0xffff71b8>
 402cab0:	29402034 	orhi	r5,r5,128
 402cab4:	01000e04 	movi	r4,56
 402cab8:	2080a316 	blt	r4,r2,402cd48 <__subdf3+0x3c4>
 402cabc:	010007c4 	movi	r4,31
 402cac0:	2080c616 	blt	r4,r2,402cddc <__subdf3+0x458>
 402cac4:	01000804 	movi	r4,32
 402cac8:	2089c83a 	sub	r4,r4,r2
 402cacc:	2910983a 	sll	r8,r5,r4
 402cad0:	308ed83a 	srl	r7,r6,r2
 402cad4:	3108983a 	sll	r4,r6,r4
 402cad8:	2884d83a 	srl	r2,r5,r2
 402cadc:	41ccb03a 	or	r6,r8,r7
 402cae0:	2008c03a 	cmpne	r4,r4,zero
 402cae4:	310cb03a 	or	r6,r6,r4
 402cae8:	898dc83a 	sub	r6,r17,r6
 402caec:	89a3803a 	cmpltu	r17,r17,r6
 402caf0:	1887c83a 	sub	r3,r3,r2
 402caf4:	1c47c83a 	sub	r3,r3,r17
 402caf8:	3023883a 	mov	r17,r6
 402cafc:	1880202c 	andhi	r2,r3,128
 402cb00:	10002326 	beq	r2,zero,402cb90 <__subdf3+0x20c>
 402cb04:	04c02034 	movhi	r19,128
 402cb08:	9cffffc4 	addi	r19,r19,-1
 402cb0c:	1ce6703a 	and	r19,r3,r19
 402cb10:	98007a26 	beq	r19,zero,402ccfc <__subdf3+0x378>
 402cb14:	9809883a 	mov	r4,r19
 402cb18:	402d4840 	call	402d484 <__clzsi2>
 402cb1c:	113ffe04 	addi	r4,r2,-8
 402cb20:	00c007c4 	movi	r3,31
 402cb24:	19007b16 	blt	r3,r4,402cd14 <__subdf3+0x390>
 402cb28:	00800804 	movi	r2,32
 402cb2c:	1105c83a 	sub	r2,r2,r4
 402cb30:	8884d83a 	srl	r2,r17,r2
 402cb34:	9906983a 	sll	r3,r19,r4
 402cb38:	8922983a 	sll	r17,r17,r4
 402cb3c:	10c4b03a 	or	r2,r2,r3
 402cb40:	24007816 	blt	r4,r16,402cd24 <__subdf3+0x3a0>
 402cb44:	2421c83a 	sub	r16,r4,r16
 402cb48:	80c00044 	addi	r3,r16,1
 402cb4c:	010007c4 	movi	r4,31
 402cb50:	20c09516 	blt	r4,r3,402cda8 <__subdf3+0x424>
 402cb54:	01400804 	movi	r5,32
 402cb58:	28cbc83a 	sub	r5,r5,r3
 402cb5c:	88c8d83a 	srl	r4,r17,r3
 402cb60:	8962983a 	sll	r17,r17,r5
 402cb64:	114a983a 	sll	r5,r2,r5
 402cb68:	10c6d83a 	srl	r3,r2,r3
 402cb6c:	8804c03a 	cmpne	r2,r17,zero
 402cb70:	290ab03a 	or	r5,r5,r4
 402cb74:	28a2b03a 	or	r17,r5,r2
 402cb78:	0021883a 	mov	r16,zero
 402cb7c:	003fa206 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cb80:	2090b03a 	or	r8,r4,r2
 402cb84:	40018e26 	beq	r8,zero,402d1c0 <__subdf3+0x83c>
 402cb88:	1007883a 	mov	r3,r2
 402cb8c:	2023883a 	mov	r17,r4
 402cb90:	888001cc 	andi	r2,r17,7
 402cb94:	103f9e1e 	bne	r2,zero,402ca10 <__flash_rwdata_start+0xffff71c0>
 402cb98:	1804977a 	slli	r2,r3,29
 402cb9c:	8822d0fa 	srli	r17,r17,3
 402cba0:	1810d0fa 	srli	r8,r3,3
 402cba4:	9100004c 	andi	r4,r18,1
 402cba8:	1444b03a 	or	r2,r2,r17
 402cbac:	00c1ffc4 	movi	r3,2047
 402cbb0:	80c02826 	beq	r16,r3,402cc54 <__subdf3+0x2d0>
 402cbb4:	01400434 	movhi	r5,16
 402cbb8:	297fffc4 	addi	r5,r5,-1
 402cbbc:	80e0703a 	and	r16,r16,r3
 402cbc0:	414a703a 	and	r5,r8,r5
 402cbc4:	003fa806 	br	402ca68 <__flash_rwdata_start+0xffff7218>
 402cbc8:	0080630e 	bge	zero,r2,402cd58 <__subdf3+0x3d4>
 402cbcc:	48003026 	beq	r9,zero,402cc90 <__subdf3+0x30c>
 402cbd0:	0101ffc4 	movi	r4,2047
 402cbd4:	813f8c26 	beq	r16,r4,402ca08 <__flash_rwdata_start+0xffff71b8>
 402cbd8:	29402034 	orhi	r5,r5,128
 402cbdc:	01000e04 	movi	r4,56
 402cbe0:	2080a90e 	bge	r4,r2,402ce88 <__subdf3+0x504>
 402cbe4:	298cb03a 	or	r6,r5,r6
 402cbe8:	3012c03a 	cmpne	r9,r6,zero
 402cbec:	0005883a 	mov	r2,zero
 402cbf0:	4c53883a 	add	r9,r9,r17
 402cbf4:	4c63803a 	cmpltu	r17,r9,r17
 402cbf8:	10c7883a 	add	r3,r2,r3
 402cbfc:	88c7883a 	add	r3,r17,r3
 402cc00:	4823883a 	mov	r17,r9
 402cc04:	1880202c 	andhi	r2,r3,128
 402cc08:	1000d026 	beq	r2,zero,402cf4c <__subdf3+0x5c8>
 402cc0c:	84000044 	addi	r16,r16,1
 402cc10:	0081ffc4 	movi	r2,2047
 402cc14:	8080fe26 	beq	r16,r2,402d010 <__subdf3+0x68c>
 402cc18:	00bfe034 	movhi	r2,65408
 402cc1c:	10bfffc4 	addi	r2,r2,-1
 402cc20:	1886703a 	and	r3,r3,r2
 402cc24:	880ad07a 	srli	r5,r17,1
 402cc28:	180497fa 	slli	r2,r3,31
 402cc2c:	8900004c 	andi	r4,r17,1
 402cc30:	2922b03a 	or	r17,r5,r4
 402cc34:	1806d07a 	srli	r3,r3,1
 402cc38:	1462b03a 	or	r17,r2,r17
 402cc3c:	3825883a 	mov	r18,r7
 402cc40:	003f7106 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cc44:	2984b03a 	or	r2,r5,r6
 402cc48:	103f6826 	beq	r2,zero,402c9ec <__flash_rwdata_start+0xffff719c>
 402cc4c:	39c03fcc 	andi	r7,r7,255
 402cc50:	003f6706 	br	402c9f0 <__flash_rwdata_start+0xffff71a0>
 402cc54:	4086b03a 	or	r3,r8,r2
 402cc58:	18015226 	beq	r3,zero,402d1a4 <__subdf3+0x820>
 402cc5c:	00c00434 	movhi	r3,16
 402cc60:	41400234 	orhi	r5,r8,8
 402cc64:	18ffffc4 	addi	r3,r3,-1
 402cc68:	28ca703a 	and	r5,r5,r3
 402cc6c:	003f7e06 	br	402ca68 <__flash_rwdata_start+0xffff7218>
 402cc70:	10bfffc4 	addi	r2,r2,-1
 402cc74:	1000491e 	bne	r2,zero,402cd9c <__subdf3+0x418>
 402cc78:	898fc83a 	sub	r7,r17,r6
 402cc7c:	89e3803a 	cmpltu	r17,r17,r7
 402cc80:	1947c83a 	sub	r3,r3,r5
 402cc84:	1c47c83a 	sub	r3,r3,r17
 402cc88:	3823883a 	mov	r17,r7
 402cc8c:	003f9b06 	br	402cafc <__flash_rwdata_start+0xffff72ac>
 402cc90:	2988b03a 	or	r4,r5,r6
 402cc94:	203f5c26 	beq	r4,zero,402ca08 <__flash_rwdata_start+0xffff71b8>
 402cc98:	10bfffc4 	addi	r2,r2,-1
 402cc9c:	1000931e 	bne	r2,zero,402ceec <__subdf3+0x568>
 402cca0:	898d883a 	add	r6,r17,r6
 402cca4:	3463803a 	cmpltu	r17,r6,r17
 402cca8:	1947883a 	add	r3,r3,r5
 402ccac:	88c7883a 	add	r3,r17,r3
 402ccb0:	3023883a 	mov	r17,r6
 402ccb4:	003fd306 	br	402cc04 <__flash_rwdata_start+0xffff73b4>
 402ccb8:	1000541e 	bne	r2,zero,402ce0c <__subdf3+0x488>
 402ccbc:	80800044 	addi	r2,r16,1
 402ccc0:	1081ffcc 	andi	r2,r2,2047
 402ccc4:	01000044 	movi	r4,1
 402ccc8:	2080a20e 	bge	r4,r2,402cf54 <__subdf3+0x5d0>
 402cccc:	8989c83a 	sub	r4,r17,r6
 402ccd0:	8905803a 	cmpltu	r2,r17,r4
 402ccd4:	1967c83a 	sub	r19,r3,r5
 402ccd8:	98a7c83a 	sub	r19,r19,r2
 402ccdc:	9880202c 	andhi	r2,r19,128
 402cce0:	10006326 	beq	r2,zero,402ce70 <__subdf3+0x4ec>
 402cce4:	3463c83a 	sub	r17,r6,r17
 402cce8:	28c7c83a 	sub	r3,r5,r3
 402ccec:	344d803a 	cmpltu	r6,r6,r17
 402ccf0:	19a7c83a 	sub	r19,r3,r6
 402ccf4:	3825883a 	mov	r18,r7
 402ccf8:	983f861e 	bne	r19,zero,402cb14 <__flash_rwdata_start+0xffff72c4>
 402ccfc:	8809883a 	mov	r4,r17
 402cd00:	402d4840 	call	402d484 <__clzsi2>
 402cd04:	10800804 	addi	r2,r2,32
 402cd08:	113ffe04 	addi	r4,r2,-8
 402cd0c:	00c007c4 	movi	r3,31
 402cd10:	193f850e 	bge	r3,r4,402cb28 <__flash_rwdata_start+0xffff72d8>
 402cd14:	10bff604 	addi	r2,r2,-40
 402cd18:	8884983a 	sll	r2,r17,r2
 402cd1c:	0023883a 	mov	r17,zero
 402cd20:	243f880e 	bge	r4,r16,402cb44 <__flash_rwdata_start+0xffff72f4>
 402cd24:	00ffe034 	movhi	r3,65408
 402cd28:	18ffffc4 	addi	r3,r3,-1
 402cd2c:	8121c83a 	sub	r16,r16,r4
 402cd30:	10c6703a 	and	r3,r2,r3
 402cd34:	003f3406 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cd38:	9100004c 	andi	r4,r18,1
 402cd3c:	000b883a 	mov	r5,zero
 402cd40:	0005883a 	mov	r2,zero
 402cd44:	003f4806 	br	402ca68 <__flash_rwdata_start+0xffff7218>
 402cd48:	298cb03a 	or	r6,r5,r6
 402cd4c:	300cc03a 	cmpne	r6,r6,zero
 402cd50:	0005883a 	mov	r2,zero
 402cd54:	003f6406 	br	402cae8 <__flash_rwdata_start+0xffff7298>
 402cd58:	10009a1e 	bne	r2,zero,402cfc4 <__subdf3+0x640>
 402cd5c:	82400044 	addi	r9,r16,1
 402cd60:	4881ffcc 	andi	r2,r9,2047
 402cd64:	02800044 	movi	r10,1
 402cd68:	5080670e 	bge	r10,r2,402cf08 <__subdf3+0x584>
 402cd6c:	0081ffc4 	movi	r2,2047
 402cd70:	4880af26 	beq	r9,r2,402d030 <__subdf3+0x6ac>
 402cd74:	898d883a 	add	r6,r17,r6
 402cd78:	1945883a 	add	r2,r3,r5
 402cd7c:	3447803a 	cmpltu	r3,r6,r17
 402cd80:	1887883a 	add	r3,r3,r2
 402cd84:	182297fa 	slli	r17,r3,31
 402cd88:	300cd07a 	srli	r6,r6,1
 402cd8c:	1806d07a 	srli	r3,r3,1
 402cd90:	4821883a 	mov	r16,r9
 402cd94:	89a2b03a 	or	r17,r17,r6
 402cd98:	003f1b06 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cd9c:	0101ffc4 	movi	r4,2047
 402cda0:	813f441e 	bne	r16,r4,402cab4 <__flash_rwdata_start+0xffff7264>
 402cda4:	003f1806 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cda8:	843ff844 	addi	r16,r16,-31
 402cdac:	01400804 	movi	r5,32
 402cdb0:	1408d83a 	srl	r4,r2,r16
 402cdb4:	19405026 	beq	r3,r5,402cef8 <__subdf3+0x574>
 402cdb8:	01401004 	movi	r5,64
 402cdbc:	28c7c83a 	sub	r3,r5,r3
 402cdc0:	10c4983a 	sll	r2,r2,r3
 402cdc4:	88a2b03a 	or	r17,r17,r2
 402cdc8:	8822c03a 	cmpne	r17,r17,zero
 402cdcc:	2462b03a 	or	r17,r4,r17
 402cdd0:	0007883a 	mov	r3,zero
 402cdd4:	0021883a 	mov	r16,zero
 402cdd8:	003f6d06 	br	402cb90 <__flash_rwdata_start+0xffff7340>
 402cddc:	11fff804 	addi	r7,r2,-32
 402cde0:	01000804 	movi	r4,32
 402cde4:	29ced83a 	srl	r7,r5,r7
 402cde8:	11004526 	beq	r2,r4,402cf00 <__subdf3+0x57c>
 402cdec:	01001004 	movi	r4,64
 402cdf0:	2089c83a 	sub	r4,r4,r2
 402cdf4:	2904983a 	sll	r2,r5,r4
 402cdf8:	118cb03a 	or	r6,r2,r6
 402cdfc:	300cc03a 	cmpne	r6,r6,zero
 402ce00:	398cb03a 	or	r6,r7,r6
 402ce04:	0005883a 	mov	r2,zero
 402ce08:	003f3706 	br	402cae8 <__flash_rwdata_start+0xffff7298>
 402ce0c:	80002a26 	beq	r16,zero,402ceb8 <__subdf3+0x534>
 402ce10:	0101ffc4 	movi	r4,2047
 402ce14:	49006626 	beq	r9,r4,402cfb0 <__subdf3+0x62c>
 402ce18:	0085c83a 	sub	r2,zero,r2
 402ce1c:	18c02034 	orhi	r3,r3,128
 402ce20:	01000e04 	movi	r4,56
 402ce24:	20807e16 	blt	r4,r2,402d020 <__subdf3+0x69c>
 402ce28:	010007c4 	movi	r4,31
 402ce2c:	2080e716 	blt	r4,r2,402d1cc <__subdf3+0x848>
 402ce30:	01000804 	movi	r4,32
 402ce34:	2089c83a 	sub	r4,r4,r2
 402ce38:	1914983a 	sll	r10,r3,r4
 402ce3c:	8890d83a 	srl	r8,r17,r2
 402ce40:	8908983a 	sll	r4,r17,r4
 402ce44:	1884d83a 	srl	r2,r3,r2
 402ce48:	5222b03a 	or	r17,r10,r8
 402ce4c:	2006c03a 	cmpne	r3,r4,zero
 402ce50:	88e2b03a 	or	r17,r17,r3
 402ce54:	3463c83a 	sub	r17,r6,r17
 402ce58:	2885c83a 	sub	r2,r5,r2
 402ce5c:	344d803a 	cmpltu	r6,r6,r17
 402ce60:	1187c83a 	sub	r3,r2,r6
 402ce64:	4821883a 	mov	r16,r9
 402ce68:	3825883a 	mov	r18,r7
 402ce6c:	003f2306 	br	402cafc <__flash_rwdata_start+0xffff72ac>
 402ce70:	24d0b03a 	or	r8,r4,r19
 402ce74:	40001b1e 	bne	r8,zero,402cee4 <__subdf3+0x560>
 402ce78:	0005883a 	mov	r2,zero
 402ce7c:	0009883a 	mov	r4,zero
 402ce80:	0021883a 	mov	r16,zero
 402ce84:	003f4906 	br	402cbac <__flash_rwdata_start+0xffff735c>
 402ce88:	010007c4 	movi	r4,31
 402ce8c:	20803a16 	blt	r4,r2,402cf78 <__subdf3+0x5f4>
 402ce90:	01000804 	movi	r4,32
 402ce94:	2089c83a 	sub	r4,r4,r2
 402ce98:	2912983a 	sll	r9,r5,r4
 402ce9c:	3090d83a 	srl	r8,r6,r2
 402cea0:	3108983a 	sll	r4,r6,r4
 402cea4:	2884d83a 	srl	r2,r5,r2
 402cea8:	4a12b03a 	or	r9,r9,r8
 402ceac:	2008c03a 	cmpne	r4,r4,zero
 402ceb0:	4912b03a 	or	r9,r9,r4
 402ceb4:	003f4e06 	br	402cbf0 <__flash_rwdata_start+0xffff73a0>
 402ceb8:	1c48b03a 	or	r4,r3,r17
 402cebc:	20003c26 	beq	r4,zero,402cfb0 <__subdf3+0x62c>
 402cec0:	0084303a 	nor	r2,zero,r2
 402cec4:	1000381e 	bne	r2,zero,402cfa8 <__subdf3+0x624>
 402cec8:	3463c83a 	sub	r17,r6,r17
 402cecc:	28c5c83a 	sub	r2,r5,r3
 402ced0:	344d803a 	cmpltu	r6,r6,r17
 402ced4:	1187c83a 	sub	r3,r2,r6
 402ced8:	4821883a 	mov	r16,r9
 402cedc:	3825883a 	mov	r18,r7
 402cee0:	003f0606 	br	402cafc <__flash_rwdata_start+0xffff72ac>
 402cee4:	2023883a 	mov	r17,r4
 402cee8:	003f0906 	br	402cb10 <__flash_rwdata_start+0xffff72c0>
 402ceec:	0101ffc4 	movi	r4,2047
 402cef0:	813f3a1e 	bne	r16,r4,402cbdc <__flash_rwdata_start+0xffff738c>
 402cef4:	003ec406 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cef8:	0005883a 	mov	r2,zero
 402cefc:	003fb106 	br	402cdc4 <__flash_rwdata_start+0xffff7574>
 402cf00:	0005883a 	mov	r2,zero
 402cf04:	003fbc06 	br	402cdf8 <__flash_rwdata_start+0xffff75a8>
 402cf08:	1c44b03a 	or	r2,r3,r17
 402cf0c:	80008e1e 	bne	r16,zero,402d148 <__subdf3+0x7c4>
 402cf10:	1000c826 	beq	r2,zero,402d234 <__subdf3+0x8b0>
 402cf14:	2984b03a 	or	r2,r5,r6
 402cf18:	103ebb26 	beq	r2,zero,402ca08 <__flash_rwdata_start+0xffff71b8>
 402cf1c:	8989883a 	add	r4,r17,r6
 402cf20:	1945883a 	add	r2,r3,r5
 402cf24:	2447803a 	cmpltu	r3,r4,r17
 402cf28:	1887883a 	add	r3,r3,r2
 402cf2c:	1880202c 	andhi	r2,r3,128
 402cf30:	2023883a 	mov	r17,r4
 402cf34:	103f1626 	beq	r2,zero,402cb90 <__flash_rwdata_start+0xffff7340>
 402cf38:	00bfe034 	movhi	r2,65408
 402cf3c:	10bfffc4 	addi	r2,r2,-1
 402cf40:	5021883a 	mov	r16,r10
 402cf44:	1886703a 	and	r3,r3,r2
 402cf48:	003eaf06 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cf4c:	3825883a 	mov	r18,r7
 402cf50:	003f0f06 	br	402cb90 <__flash_rwdata_start+0xffff7340>
 402cf54:	1c44b03a 	or	r2,r3,r17
 402cf58:	8000251e 	bne	r16,zero,402cff0 <__subdf3+0x66c>
 402cf5c:	1000661e 	bne	r2,zero,402d0f8 <__subdf3+0x774>
 402cf60:	2990b03a 	or	r8,r5,r6
 402cf64:	40009626 	beq	r8,zero,402d1c0 <__subdf3+0x83c>
 402cf68:	2807883a 	mov	r3,r5
 402cf6c:	3023883a 	mov	r17,r6
 402cf70:	3825883a 	mov	r18,r7
 402cf74:	003ea406 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cf78:	127ff804 	addi	r9,r2,-32
 402cf7c:	01000804 	movi	r4,32
 402cf80:	2a52d83a 	srl	r9,r5,r9
 402cf84:	11008c26 	beq	r2,r4,402d1b8 <__subdf3+0x834>
 402cf88:	01001004 	movi	r4,64
 402cf8c:	2085c83a 	sub	r2,r4,r2
 402cf90:	2884983a 	sll	r2,r5,r2
 402cf94:	118cb03a 	or	r6,r2,r6
 402cf98:	300cc03a 	cmpne	r6,r6,zero
 402cf9c:	4992b03a 	or	r9,r9,r6
 402cfa0:	0005883a 	mov	r2,zero
 402cfa4:	003f1206 	br	402cbf0 <__flash_rwdata_start+0xffff73a0>
 402cfa8:	0101ffc4 	movi	r4,2047
 402cfac:	493f9c1e 	bne	r9,r4,402ce20 <__flash_rwdata_start+0xffff75d0>
 402cfb0:	2807883a 	mov	r3,r5
 402cfb4:	3023883a 	mov	r17,r6
 402cfb8:	4821883a 	mov	r16,r9
 402cfbc:	3825883a 	mov	r18,r7
 402cfc0:	003e9106 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402cfc4:	80001f1e 	bne	r16,zero,402d044 <__subdf3+0x6c0>
 402cfc8:	1c48b03a 	or	r4,r3,r17
 402cfcc:	20005a26 	beq	r4,zero,402d138 <__subdf3+0x7b4>
 402cfd0:	0084303a 	nor	r2,zero,r2
 402cfd4:	1000561e 	bne	r2,zero,402d130 <__subdf3+0x7ac>
 402cfd8:	89a3883a 	add	r17,r17,r6
 402cfdc:	1945883a 	add	r2,r3,r5
 402cfe0:	898d803a 	cmpltu	r6,r17,r6
 402cfe4:	3087883a 	add	r3,r6,r2
 402cfe8:	4821883a 	mov	r16,r9
 402cfec:	003f0506 	br	402cc04 <__flash_rwdata_start+0xffff73b4>
 402cff0:	10002b1e 	bne	r2,zero,402d0a0 <__subdf3+0x71c>
 402cff4:	2984b03a 	or	r2,r5,r6
 402cff8:	10008026 	beq	r2,zero,402d1fc <__subdf3+0x878>
 402cffc:	2807883a 	mov	r3,r5
 402d000:	3023883a 	mov	r17,r6
 402d004:	3825883a 	mov	r18,r7
 402d008:	0401ffc4 	movi	r16,2047
 402d00c:	003e7e06 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d010:	3809883a 	mov	r4,r7
 402d014:	0011883a 	mov	r8,zero
 402d018:	0005883a 	mov	r2,zero
 402d01c:	003ee306 	br	402cbac <__flash_rwdata_start+0xffff735c>
 402d020:	1c62b03a 	or	r17,r3,r17
 402d024:	8822c03a 	cmpne	r17,r17,zero
 402d028:	0005883a 	mov	r2,zero
 402d02c:	003f8906 	br	402ce54 <__flash_rwdata_start+0xffff7604>
 402d030:	3809883a 	mov	r4,r7
 402d034:	4821883a 	mov	r16,r9
 402d038:	0011883a 	mov	r8,zero
 402d03c:	0005883a 	mov	r2,zero
 402d040:	003eda06 	br	402cbac <__flash_rwdata_start+0xffff735c>
 402d044:	0101ffc4 	movi	r4,2047
 402d048:	49003b26 	beq	r9,r4,402d138 <__subdf3+0x7b4>
 402d04c:	0085c83a 	sub	r2,zero,r2
 402d050:	18c02034 	orhi	r3,r3,128
 402d054:	01000e04 	movi	r4,56
 402d058:	20806e16 	blt	r4,r2,402d214 <__subdf3+0x890>
 402d05c:	010007c4 	movi	r4,31
 402d060:	20807716 	blt	r4,r2,402d240 <__subdf3+0x8bc>
 402d064:	01000804 	movi	r4,32
 402d068:	2089c83a 	sub	r4,r4,r2
 402d06c:	1914983a 	sll	r10,r3,r4
 402d070:	8890d83a 	srl	r8,r17,r2
 402d074:	8908983a 	sll	r4,r17,r4
 402d078:	1884d83a 	srl	r2,r3,r2
 402d07c:	5222b03a 	or	r17,r10,r8
 402d080:	2006c03a 	cmpne	r3,r4,zero
 402d084:	88e2b03a 	or	r17,r17,r3
 402d088:	89a3883a 	add	r17,r17,r6
 402d08c:	1145883a 	add	r2,r2,r5
 402d090:	898d803a 	cmpltu	r6,r17,r6
 402d094:	3087883a 	add	r3,r6,r2
 402d098:	4821883a 	mov	r16,r9
 402d09c:	003ed906 	br	402cc04 <__flash_rwdata_start+0xffff73b4>
 402d0a0:	2984b03a 	or	r2,r5,r6
 402d0a4:	10004226 	beq	r2,zero,402d1b0 <__subdf3+0x82c>
 402d0a8:	1808d0fa 	srli	r4,r3,3
 402d0ac:	8822d0fa 	srli	r17,r17,3
 402d0b0:	1806977a 	slli	r3,r3,29
 402d0b4:	2080022c 	andhi	r2,r4,8
 402d0b8:	1c62b03a 	or	r17,r3,r17
 402d0bc:	10000826 	beq	r2,zero,402d0e0 <__subdf3+0x75c>
 402d0c0:	2812d0fa 	srli	r9,r5,3
 402d0c4:	4880022c 	andhi	r2,r9,8
 402d0c8:	1000051e 	bne	r2,zero,402d0e0 <__subdf3+0x75c>
 402d0cc:	300cd0fa 	srli	r6,r6,3
 402d0d0:	2804977a 	slli	r2,r5,29
 402d0d4:	4809883a 	mov	r4,r9
 402d0d8:	3825883a 	mov	r18,r7
 402d0dc:	11a2b03a 	or	r17,r2,r6
 402d0e0:	8806d77a 	srli	r3,r17,29
 402d0e4:	200890fa 	slli	r4,r4,3
 402d0e8:	882290fa 	slli	r17,r17,3
 402d0ec:	0401ffc4 	movi	r16,2047
 402d0f0:	1906b03a 	or	r3,r3,r4
 402d0f4:	003e4406 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d0f8:	2984b03a 	or	r2,r5,r6
 402d0fc:	103e4226 	beq	r2,zero,402ca08 <__flash_rwdata_start+0xffff71b8>
 402d100:	8989c83a 	sub	r4,r17,r6
 402d104:	8911803a 	cmpltu	r8,r17,r4
 402d108:	1945c83a 	sub	r2,r3,r5
 402d10c:	1205c83a 	sub	r2,r2,r8
 402d110:	1200202c 	andhi	r8,r2,128
 402d114:	403e9a26 	beq	r8,zero,402cb80 <__flash_rwdata_start+0xffff7330>
 402d118:	3463c83a 	sub	r17,r6,r17
 402d11c:	28c5c83a 	sub	r2,r5,r3
 402d120:	344d803a 	cmpltu	r6,r6,r17
 402d124:	1187c83a 	sub	r3,r2,r6
 402d128:	3825883a 	mov	r18,r7
 402d12c:	003e3606 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d130:	0101ffc4 	movi	r4,2047
 402d134:	493fc71e 	bne	r9,r4,402d054 <__flash_rwdata_start+0xffff7804>
 402d138:	2807883a 	mov	r3,r5
 402d13c:	3023883a 	mov	r17,r6
 402d140:	4821883a 	mov	r16,r9
 402d144:	003e3006 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d148:	10003626 	beq	r2,zero,402d224 <__subdf3+0x8a0>
 402d14c:	2984b03a 	or	r2,r5,r6
 402d150:	10001726 	beq	r2,zero,402d1b0 <__subdf3+0x82c>
 402d154:	1808d0fa 	srli	r4,r3,3
 402d158:	8822d0fa 	srli	r17,r17,3
 402d15c:	1806977a 	slli	r3,r3,29
 402d160:	2080022c 	andhi	r2,r4,8
 402d164:	1c62b03a 	or	r17,r3,r17
 402d168:	10000726 	beq	r2,zero,402d188 <__subdf3+0x804>
 402d16c:	2812d0fa 	srli	r9,r5,3
 402d170:	4880022c 	andhi	r2,r9,8
 402d174:	1000041e 	bne	r2,zero,402d188 <__subdf3+0x804>
 402d178:	300cd0fa 	srli	r6,r6,3
 402d17c:	2804977a 	slli	r2,r5,29
 402d180:	4809883a 	mov	r4,r9
 402d184:	11a2b03a 	or	r17,r2,r6
 402d188:	8806d77a 	srli	r3,r17,29
 402d18c:	200890fa 	slli	r4,r4,3
 402d190:	882290fa 	slli	r17,r17,3
 402d194:	3825883a 	mov	r18,r7
 402d198:	1906b03a 	or	r3,r3,r4
 402d19c:	0401ffc4 	movi	r16,2047
 402d1a0:	003e1906 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d1a4:	000b883a 	mov	r5,zero
 402d1a8:	0005883a 	mov	r2,zero
 402d1ac:	003e2e06 	br	402ca68 <__flash_rwdata_start+0xffff7218>
 402d1b0:	0401ffc4 	movi	r16,2047
 402d1b4:	003e1406 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d1b8:	0005883a 	mov	r2,zero
 402d1bc:	003f7506 	br	402cf94 <__flash_rwdata_start+0xffff7744>
 402d1c0:	0005883a 	mov	r2,zero
 402d1c4:	0009883a 	mov	r4,zero
 402d1c8:	003e7806 	br	402cbac <__flash_rwdata_start+0xffff735c>
 402d1cc:	123ff804 	addi	r8,r2,-32
 402d1d0:	01000804 	movi	r4,32
 402d1d4:	1a10d83a 	srl	r8,r3,r8
 402d1d8:	11002526 	beq	r2,r4,402d270 <__subdf3+0x8ec>
 402d1dc:	01001004 	movi	r4,64
 402d1e0:	2085c83a 	sub	r2,r4,r2
 402d1e4:	1884983a 	sll	r2,r3,r2
 402d1e8:	1444b03a 	or	r2,r2,r17
 402d1ec:	1004c03a 	cmpne	r2,r2,zero
 402d1f0:	40a2b03a 	or	r17,r8,r2
 402d1f4:	0005883a 	mov	r2,zero
 402d1f8:	003f1606 	br	402ce54 <__flash_rwdata_start+0xffff7604>
 402d1fc:	02000434 	movhi	r8,16
 402d200:	0009883a 	mov	r4,zero
 402d204:	423fffc4 	addi	r8,r8,-1
 402d208:	00bfffc4 	movi	r2,-1
 402d20c:	0401ffc4 	movi	r16,2047
 402d210:	003e6606 	br	402cbac <__flash_rwdata_start+0xffff735c>
 402d214:	1c62b03a 	or	r17,r3,r17
 402d218:	8822c03a 	cmpne	r17,r17,zero
 402d21c:	0005883a 	mov	r2,zero
 402d220:	003f9906 	br	402d088 <__flash_rwdata_start+0xffff7838>
 402d224:	2807883a 	mov	r3,r5
 402d228:	3023883a 	mov	r17,r6
 402d22c:	0401ffc4 	movi	r16,2047
 402d230:	003df506 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d234:	2807883a 	mov	r3,r5
 402d238:	3023883a 	mov	r17,r6
 402d23c:	003df206 	br	402ca08 <__flash_rwdata_start+0xffff71b8>
 402d240:	123ff804 	addi	r8,r2,-32
 402d244:	01000804 	movi	r4,32
 402d248:	1a10d83a 	srl	r8,r3,r8
 402d24c:	11000a26 	beq	r2,r4,402d278 <__subdf3+0x8f4>
 402d250:	01001004 	movi	r4,64
 402d254:	2085c83a 	sub	r2,r4,r2
 402d258:	1884983a 	sll	r2,r3,r2
 402d25c:	1444b03a 	or	r2,r2,r17
 402d260:	1004c03a 	cmpne	r2,r2,zero
 402d264:	40a2b03a 	or	r17,r8,r2
 402d268:	0005883a 	mov	r2,zero
 402d26c:	003f8606 	br	402d088 <__flash_rwdata_start+0xffff7838>
 402d270:	0005883a 	mov	r2,zero
 402d274:	003fdc06 	br	402d1e8 <__flash_rwdata_start+0xffff7998>
 402d278:	0005883a 	mov	r2,zero
 402d27c:	003ff706 	br	402d25c <__flash_rwdata_start+0xffff7a0c>

0402d280 <__fixdfsi>:
 402d280:	280cd53a 	srli	r6,r5,20
 402d284:	00c00434 	movhi	r3,16
 402d288:	18ffffc4 	addi	r3,r3,-1
 402d28c:	3181ffcc 	andi	r6,r6,2047
 402d290:	01c0ff84 	movi	r7,1022
 402d294:	28c6703a 	and	r3,r5,r3
 402d298:	280ad7fa 	srli	r5,r5,31
 402d29c:	3980120e 	bge	r7,r6,402d2e8 <__fixdfsi+0x68>
 402d2a0:	00810744 	movi	r2,1053
 402d2a4:	11800c16 	blt	r2,r6,402d2d8 <__fixdfsi+0x58>
 402d2a8:	00810cc4 	movi	r2,1075
 402d2ac:	1185c83a 	sub	r2,r2,r6
 402d2b0:	01c007c4 	movi	r7,31
 402d2b4:	18c00434 	orhi	r3,r3,16
 402d2b8:	38800d16 	blt	r7,r2,402d2f0 <__fixdfsi+0x70>
 402d2bc:	31befb44 	addi	r6,r6,-1043
 402d2c0:	2084d83a 	srl	r2,r4,r2
 402d2c4:	1986983a 	sll	r3,r3,r6
 402d2c8:	1884b03a 	or	r2,r3,r2
 402d2cc:	28000726 	beq	r5,zero,402d2ec <__fixdfsi+0x6c>
 402d2d0:	0085c83a 	sub	r2,zero,r2
 402d2d4:	f800283a 	ret
 402d2d8:	00a00034 	movhi	r2,32768
 402d2dc:	10bfffc4 	addi	r2,r2,-1
 402d2e0:	2885883a 	add	r2,r5,r2
 402d2e4:	f800283a 	ret
 402d2e8:	0005883a 	mov	r2,zero
 402d2ec:	f800283a 	ret
 402d2f0:	008104c4 	movi	r2,1043
 402d2f4:	1185c83a 	sub	r2,r2,r6
 402d2f8:	1884d83a 	srl	r2,r3,r2
 402d2fc:	003ff306 	br	402d2cc <__flash_rwdata_start+0xffff7a7c>

0402d300 <__floatsidf>:
 402d300:	defffd04 	addi	sp,sp,-12
 402d304:	dfc00215 	stw	ra,8(sp)
 402d308:	dc400115 	stw	r17,4(sp)
 402d30c:	dc000015 	stw	r16,0(sp)
 402d310:	20002b26 	beq	r4,zero,402d3c0 <__floatsidf+0xc0>
 402d314:	2023883a 	mov	r17,r4
 402d318:	2020d7fa 	srli	r16,r4,31
 402d31c:	20002d16 	blt	r4,zero,402d3d4 <__floatsidf+0xd4>
 402d320:	8809883a 	mov	r4,r17
 402d324:	402d4840 	call	402d484 <__clzsi2>
 402d328:	01410784 	movi	r5,1054
 402d32c:	288bc83a 	sub	r5,r5,r2
 402d330:	01010cc4 	movi	r4,1075
 402d334:	2149c83a 	sub	r4,r4,r5
 402d338:	00c007c4 	movi	r3,31
 402d33c:	1900160e 	bge	r3,r4,402d398 <__floatsidf+0x98>
 402d340:	00c104c4 	movi	r3,1043
 402d344:	1947c83a 	sub	r3,r3,r5
 402d348:	88c6983a 	sll	r3,r17,r3
 402d34c:	00800434 	movhi	r2,16
 402d350:	10bfffc4 	addi	r2,r2,-1
 402d354:	1886703a 	and	r3,r3,r2
 402d358:	2941ffcc 	andi	r5,r5,2047
 402d35c:	800d883a 	mov	r6,r16
 402d360:	0005883a 	mov	r2,zero
 402d364:	280a953a 	slli	r5,r5,20
 402d368:	31803fcc 	andi	r6,r6,255
 402d36c:	01000434 	movhi	r4,16
 402d370:	300c97fa 	slli	r6,r6,31
 402d374:	213fffc4 	addi	r4,r4,-1
 402d378:	1906703a 	and	r3,r3,r4
 402d37c:	1946b03a 	or	r3,r3,r5
 402d380:	1986b03a 	or	r3,r3,r6
 402d384:	dfc00217 	ldw	ra,8(sp)
 402d388:	dc400117 	ldw	r17,4(sp)
 402d38c:	dc000017 	ldw	r16,0(sp)
 402d390:	dec00304 	addi	sp,sp,12
 402d394:	f800283a 	ret
 402d398:	00c002c4 	movi	r3,11
 402d39c:	1887c83a 	sub	r3,r3,r2
 402d3a0:	88c6d83a 	srl	r3,r17,r3
 402d3a4:	8904983a 	sll	r2,r17,r4
 402d3a8:	01000434 	movhi	r4,16
 402d3ac:	213fffc4 	addi	r4,r4,-1
 402d3b0:	2941ffcc 	andi	r5,r5,2047
 402d3b4:	1906703a 	and	r3,r3,r4
 402d3b8:	800d883a 	mov	r6,r16
 402d3bc:	003fe906 	br	402d364 <__flash_rwdata_start+0xffff7b14>
 402d3c0:	000d883a 	mov	r6,zero
 402d3c4:	000b883a 	mov	r5,zero
 402d3c8:	0007883a 	mov	r3,zero
 402d3cc:	0005883a 	mov	r2,zero
 402d3d0:	003fe406 	br	402d364 <__flash_rwdata_start+0xffff7b14>
 402d3d4:	0123c83a 	sub	r17,zero,r4
 402d3d8:	003fd106 	br	402d320 <__flash_rwdata_start+0xffff7ad0>

0402d3dc <__floatunsidf>:
 402d3dc:	defffe04 	addi	sp,sp,-8
 402d3e0:	dc000015 	stw	r16,0(sp)
 402d3e4:	dfc00115 	stw	ra,4(sp)
 402d3e8:	2021883a 	mov	r16,r4
 402d3ec:	20002226 	beq	r4,zero,402d478 <__floatunsidf+0x9c>
 402d3f0:	402d4840 	call	402d484 <__clzsi2>
 402d3f4:	01010784 	movi	r4,1054
 402d3f8:	2089c83a 	sub	r4,r4,r2
 402d3fc:	01810cc4 	movi	r6,1075
 402d400:	310dc83a 	sub	r6,r6,r4
 402d404:	00c007c4 	movi	r3,31
 402d408:	1980120e 	bge	r3,r6,402d454 <__floatunsidf+0x78>
 402d40c:	00c104c4 	movi	r3,1043
 402d410:	1907c83a 	sub	r3,r3,r4
 402d414:	80ca983a 	sll	r5,r16,r3
 402d418:	00800434 	movhi	r2,16
 402d41c:	10bfffc4 	addi	r2,r2,-1
 402d420:	2101ffcc 	andi	r4,r4,2047
 402d424:	0021883a 	mov	r16,zero
 402d428:	288a703a 	and	r5,r5,r2
 402d42c:	2008953a 	slli	r4,r4,20
 402d430:	00c00434 	movhi	r3,16
 402d434:	18ffffc4 	addi	r3,r3,-1
 402d438:	28c6703a 	and	r3,r5,r3
 402d43c:	8005883a 	mov	r2,r16
 402d440:	1906b03a 	or	r3,r3,r4
 402d444:	dfc00117 	ldw	ra,4(sp)
 402d448:	dc000017 	ldw	r16,0(sp)
 402d44c:	dec00204 	addi	sp,sp,8
 402d450:	f800283a 	ret
 402d454:	00c002c4 	movi	r3,11
 402d458:	188bc83a 	sub	r5,r3,r2
 402d45c:	814ad83a 	srl	r5,r16,r5
 402d460:	00c00434 	movhi	r3,16
 402d464:	18ffffc4 	addi	r3,r3,-1
 402d468:	81a0983a 	sll	r16,r16,r6
 402d46c:	2101ffcc 	andi	r4,r4,2047
 402d470:	28ca703a 	and	r5,r5,r3
 402d474:	003fed06 	br	402d42c <__flash_rwdata_start+0xffff7bdc>
 402d478:	0009883a 	mov	r4,zero
 402d47c:	000b883a 	mov	r5,zero
 402d480:	003fea06 	br	402d42c <__flash_rwdata_start+0xffff7bdc>

0402d484 <__clzsi2>:
 402d484:	00bfffd4 	movui	r2,65535
 402d488:	11000536 	bltu	r2,r4,402d4a0 <__clzsi2+0x1c>
 402d48c:	00803fc4 	movi	r2,255
 402d490:	11000f36 	bltu	r2,r4,402d4d0 <__clzsi2+0x4c>
 402d494:	00800804 	movi	r2,32
 402d498:	0007883a 	mov	r3,zero
 402d49c:	00000506 	br	402d4b4 <__clzsi2+0x30>
 402d4a0:	00804034 	movhi	r2,256
 402d4a4:	10bfffc4 	addi	r2,r2,-1
 402d4a8:	11000c2e 	bgeu	r2,r4,402d4dc <__clzsi2+0x58>
 402d4ac:	00800204 	movi	r2,8
 402d4b0:	00c00604 	movi	r3,24
 402d4b4:	20c8d83a 	srl	r4,r4,r3
 402d4b8:	00c00034 	movhi	r3,0
 402d4bc:	18c0f004 	addi	r3,r3,960
 402d4c0:	1909883a 	add	r4,r3,r4
 402d4c4:	20c00003 	ldbu	r3,0(r4)
 402d4c8:	10c5c83a 	sub	r2,r2,r3
 402d4cc:	f800283a 	ret
 402d4d0:	00800604 	movi	r2,24
 402d4d4:	00c00204 	movi	r3,8
 402d4d8:	003ff606 	br	402d4b4 <__flash_rwdata_start+0xffff7c64>
 402d4dc:	00800404 	movi	r2,16
 402d4e0:	1007883a 	mov	r3,r2
 402d4e4:	003ff306 	br	402d4b4 <__flash_rwdata_start+0xffff7c64>

0402d4e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d4e8:	defffe04 	addi	sp,sp,-8
 402d4ec:	dfc00115 	stw	ra,4(sp)
 402d4f0:	df000015 	stw	fp,0(sp)
 402d4f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d4f8:	d0a00b17 	ldw	r2,-32724(gp)
 402d4fc:	10000326 	beq	r2,zero,402d50c <alt_get_errno+0x24>
 402d500:	d0a00b17 	ldw	r2,-32724(gp)
 402d504:	103ee83a 	callr	r2
 402d508:	00000106 	br	402d510 <alt_get_errno+0x28>
 402d50c:	d0a01b04 	addi	r2,gp,-32660
}
 402d510:	e037883a 	mov	sp,fp
 402d514:	dfc00117 	ldw	ra,4(sp)
 402d518:	df000017 	ldw	fp,0(sp)
 402d51c:	dec00204 	addi	sp,sp,8
 402d520:	f800283a 	ret

0402d524 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402d524:	defffb04 	addi	sp,sp,-20
 402d528:	dfc00415 	stw	ra,16(sp)
 402d52c:	df000315 	stw	fp,12(sp)
 402d530:	df000304 	addi	fp,sp,12
 402d534:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 402d538:	e0bfff17 	ldw	r2,-4(fp)
 402d53c:	10000816 	blt	r2,zero,402d560 <close+0x3c>
 402d540:	01400304 	movi	r5,12
 402d544:	e13fff17 	ldw	r4,-4(fp)
 402d548:	402ac1c0 	call	402ac1c <__mulsi3>
 402d54c:	1007883a 	mov	r3,r2
 402d550:	00800034 	movhi	r2,0
 402d554:	10838304 	addi	r2,r2,3596
 402d558:	1885883a 	add	r2,r3,r2
 402d55c:	00000106 	br	402d564 <close+0x40>
 402d560:	0005883a 	mov	r2,zero
 402d564:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402d568:	e0bffd17 	ldw	r2,-12(fp)
 402d56c:	10001926 	beq	r2,zero,402d5d4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402d570:	e0bffd17 	ldw	r2,-12(fp)
 402d574:	10800017 	ldw	r2,0(r2)
 402d578:	10800417 	ldw	r2,16(r2)
 402d57c:	10000626 	beq	r2,zero,402d598 <close+0x74>
 402d580:	e0bffd17 	ldw	r2,-12(fp)
 402d584:	10800017 	ldw	r2,0(r2)
 402d588:	10800417 	ldw	r2,16(r2)
 402d58c:	e13ffd17 	ldw	r4,-12(fp)
 402d590:	103ee83a 	callr	r2
 402d594:	00000106 	br	402d59c <close+0x78>
 402d598:	0005883a 	mov	r2,zero
 402d59c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402d5a0:	e13fff17 	ldw	r4,-4(fp)
 402d5a4:	402dc0c0 	call	402dc0c <alt_release_fd>
    if (rval < 0)
 402d5a8:	e0bffe17 	ldw	r2,-8(fp)
 402d5ac:	1000070e 	bge	r2,zero,402d5cc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 402d5b0:	402d4e80 	call	402d4e8 <alt_get_errno>
 402d5b4:	1007883a 	mov	r3,r2
 402d5b8:	e0bffe17 	ldw	r2,-8(fp)
 402d5bc:	0085c83a 	sub	r2,zero,r2
 402d5c0:	18800015 	stw	r2,0(r3)
      return -1;
 402d5c4:	00bfffc4 	movi	r2,-1
 402d5c8:	00000706 	br	402d5e8 <close+0xc4>
    }
    return 0;
 402d5cc:	0005883a 	mov	r2,zero
 402d5d0:	00000506 	br	402d5e8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d5d4:	402d4e80 	call	402d4e8 <alt_get_errno>
 402d5d8:	1007883a 	mov	r3,r2
 402d5dc:	00801444 	movi	r2,81
 402d5e0:	18800015 	stw	r2,0(r3)
    return -1;
 402d5e4:	00bfffc4 	movi	r2,-1
  }
}
 402d5e8:	e037883a 	mov	sp,fp
 402d5ec:	dfc00117 	ldw	ra,4(sp)
 402d5f0:	df000017 	ldw	fp,0(sp)
 402d5f4:	dec00204 	addi	sp,sp,8
 402d5f8:	f800283a 	ret

0402d5fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402d5fc:	defffc04 	addi	sp,sp,-16
 402d600:	df000315 	stw	fp,12(sp)
 402d604:	df000304 	addi	fp,sp,12
 402d608:	e13ffd15 	stw	r4,-12(fp)
 402d60c:	e17ffe15 	stw	r5,-8(fp)
 402d610:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402d614:	e0bfff17 	ldw	r2,-4(fp)
}
 402d618:	e037883a 	mov	sp,fp
 402d61c:	df000017 	ldw	fp,0(sp)
 402d620:	dec00104 	addi	sp,sp,4
 402d624:	f800283a 	ret

0402d628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d628:	defffe04 	addi	sp,sp,-8
 402d62c:	dfc00115 	stw	ra,4(sp)
 402d630:	df000015 	stw	fp,0(sp)
 402d634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d638:	d0a00b17 	ldw	r2,-32724(gp)
 402d63c:	10000326 	beq	r2,zero,402d64c <alt_get_errno+0x24>
 402d640:	d0a00b17 	ldw	r2,-32724(gp)
 402d644:	103ee83a 	callr	r2
 402d648:	00000106 	br	402d650 <alt_get_errno+0x28>
 402d64c:	d0a01b04 	addi	r2,gp,-32660
}
 402d650:	e037883a 	mov	sp,fp
 402d654:	dfc00117 	ldw	ra,4(sp)
 402d658:	df000017 	ldw	fp,0(sp)
 402d65c:	dec00204 	addi	sp,sp,8
 402d660:	f800283a 	ret

0402d664 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 402d664:	defffb04 	addi	sp,sp,-20
 402d668:	dfc00415 	stw	ra,16(sp)
 402d66c:	df000315 	stw	fp,12(sp)
 402d670:	df000304 	addi	fp,sp,12
 402d674:	e13ffe15 	stw	r4,-8(fp)
 402d678:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d67c:	e0bffe17 	ldw	r2,-8(fp)
 402d680:	10000816 	blt	r2,zero,402d6a4 <fstat+0x40>
 402d684:	01400304 	movi	r5,12
 402d688:	e13ffe17 	ldw	r4,-8(fp)
 402d68c:	402ac1c0 	call	402ac1c <__mulsi3>
 402d690:	1007883a 	mov	r3,r2
 402d694:	00800034 	movhi	r2,0
 402d698:	10838304 	addi	r2,r2,3596
 402d69c:	1885883a 	add	r2,r3,r2
 402d6a0:	00000106 	br	402d6a8 <fstat+0x44>
 402d6a4:	0005883a 	mov	r2,zero
 402d6a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 402d6ac:	e0bffd17 	ldw	r2,-12(fp)
 402d6b0:	10001026 	beq	r2,zero,402d6f4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402d6b4:	e0bffd17 	ldw	r2,-12(fp)
 402d6b8:	10800017 	ldw	r2,0(r2)
 402d6bc:	10800817 	ldw	r2,32(r2)
 402d6c0:	10000726 	beq	r2,zero,402d6e0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 402d6c4:	e0bffd17 	ldw	r2,-12(fp)
 402d6c8:	10800017 	ldw	r2,0(r2)
 402d6cc:	10800817 	ldw	r2,32(r2)
 402d6d0:	e17fff17 	ldw	r5,-4(fp)
 402d6d4:	e13ffd17 	ldw	r4,-12(fp)
 402d6d8:	103ee83a 	callr	r2
 402d6dc:	00000a06 	br	402d708 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402d6e0:	e0bfff17 	ldw	r2,-4(fp)
 402d6e4:	00c80004 	movi	r3,8192
 402d6e8:	10c00115 	stw	r3,4(r2)
      return 0;
 402d6ec:	0005883a 	mov	r2,zero
 402d6f0:	00000506 	br	402d708 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d6f4:	402d6280 	call	402d628 <alt_get_errno>
 402d6f8:	1007883a 	mov	r3,r2
 402d6fc:	00801444 	movi	r2,81
 402d700:	18800015 	stw	r2,0(r3)
    return -1;
 402d704:	00bfffc4 	movi	r2,-1
  }
}
 402d708:	e037883a 	mov	sp,fp
 402d70c:	dfc00117 	ldw	ra,4(sp)
 402d710:	df000017 	ldw	fp,0(sp)
 402d714:	dec00204 	addi	sp,sp,8
 402d718:	f800283a 	ret

0402d71c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d71c:	defffe04 	addi	sp,sp,-8
 402d720:	dfc00115 	stw	ra,4(sp)
 402d724:	df000015 	stw	fp,0(sp)
 402d728:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d72c:	d0a00b17 	ldw	r2,-32724(gp)
 402d730:	10000326 	beq	r2,zero,402d740 <alt_get_errno+0x24>
 402d734:	d0a00b17 	ldw	r2,-32724(gp)
 402d738:	103ee83a 	callr	r2
 402d73c:	00000106 	br	402d744 <alt_get_errno+0x28>
 402d740:	d0a01b04 	addi	r2,gp,-32660
}
 402d744:	e037883a 	mov	sp,fp
 402d748:	dfc00117 	ldw	ra,4(sp)
 402d74c:	df000017 	ldw	fp,0(sp)
 402d750:	dec00204 	addi	sp,sp,8
 402d754:	f800283a 	ret

0402d758 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402d758:	deffed04 	addi	sp,sp,-76
 402d75c:	dfc01215 	stw	ra,72(sp)
 402d760:	df001115 	stw	fp,68(sp)
 402d764:	df001104 	addi	fp,sp,68
 402d768:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d76c:	e0bfff17 	ldw	r2,-4(fp)
 402d770:	10000816 	blt	r2,zero,402d794 <isatty+0x3c>
 402d774:	01400304 	movi	r5,12
 402d778:	e13fff17 	ldw	r4,-4(fp)
 402d77c:	402ac1c0 	call	402ac1c <__mulsi3>
 402d780:	1007883a 	mov	r3,r2
 402d784:	00800034 	movhi	r2,0
 402d788:	10838304 	addi	r2,r2,3596
 402d78c:	1885883a 	add	r2,r3,r2
 402d790:	00000106 	br	402d798 <isatty+0x40>
 402d794:	0005883a 	mov	r2,zero
 402d798:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 402d79c:	e0bfef17 	ldw	r2,-68(fp)
 402d7a0:	10000e26 	beq	r2,zero,402d7dc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402d7a4:	e0bfef17 	ldw	r2,-68(fp)
 402d7a8:	10800017 	ldw	r2,0(r2)
 402d7ac:	10800817 	ldw	r2,32(r2)
 402d7b0:	1000021e 	bne	r2,zero,402d7bc <isatty+0x64>
    {
      return 1;
 402d7b4:	00800044 	movi	r2,1
 402d7b8:	00000d06 	br	402d7f0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 402d7bc:	e0bff004 	addi	r2,fp,-64
 402d7c0:	100b883a 	mov	r5,r2
 402d7c4:	e13fff17 	ldw	r4,-4(fp)
 402d7c8:	402d6640 	call	402d664 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 402d7cc:	e0bff117 	ldw	r2,-60(fp)
 402d7d0:	10880020 	cmpeqi	r2,r2,8192
 402d7d4:	10803fcc 	andi	r2,r2,255
 402d7d8:	00000506 	br	402d7f0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d7dc:	402d71c0 	call	402d71c <alt_get_errno>
 402d7e0:	1007883a 	mov	r3,r2
 402d7e4:	00801444 	movi	r2,81
 402d7e8:	18800015 	stw	r2,0(r3)
    return 0;
 402d7ec:	0005883a 	mov	r2,zero
  }
}
 402d7f0:	e037883a 	mov	sp,fp
 402d7f4:	dfc00117 	ldw	ra,4(sp)
 402d7f8:	df000017 	ldw	fp,0(sp)
 402d7fc:	dec00204 	addi	sp,sp,8
 402d800:	f800283a 	ret

0402d804 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 402d804:	defffc04 	addi	sp,sp,-16
 402d808:	df000315 	stw	fp,12(sp)
 402d80c:	df000304 	addi	fp,sp,12
 402d810:	e13ffd15 	stw	r4,-12(fp)
 402d814:	e17ffe15 	stw	r5,-8(fp)
 402d818:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402d81c:	e0fffe17 	ldw	r3,-8(fp)
 402d820:	e0bffd17 	ldw	r2,-12(fp)
 402d824:	18800c26 	beq	r3,r2,402d858 <alt_load_section+0x54>
  {
    while( to != end )
 402d828:	00000806 	br	402d84c <alt_load_section+0x48>
    {
      *to++ = *from++;
 402d82c:	e0bffe17 	ldw	r2,-8(fp)
 402d830:	10c00104 	addi	r3,r2,4
 402d834:	e0fffe15 	stw	r3,-8(fp)
 402d838:	e0fffd17 	ldw	r3,-12(fp)
 402d83c:	19000104 	addi	r4,r3,4
 402d840:	e13ffd15 	stw	r4,-12(fp)
 402d844:	18c00017 	ldw	r3,0(r3)
 402d848:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402d84c:	e0fffe17 	ldw	r3,-8(fp)
 402d850:	e0bfff17 	ldw	r2,-4(fp)
 402d854:	18bff51e 	bne	r3,r2,402d82c <__flash_rwdata_start+0xffff7fdc>
    {
      *to++ = *from++;
    }
  }
}
 402d858:	0001883a 	nop
 402d85c:	e037883a 	mov	sp,fp
 402d860:	df000017 	ldw	fp,0(sp)
 402d864:	dec00104 	addi	sp,sp,4
 402d868:	f800283a 	ret

0402d86c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 402d86c:	defffe04 	addi	sp,sp,-8
 402d870:	dfc00115 	stw	ra,4(sp)
 402d874:	df000015 	stw	fp,0(sp)
 402d878:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 402d87c:	01800034 	movhi	r6,0
 402d880:	31882b04 	addi	r6,r6,8364
 402d884:	01400034 	movhi	r5,0
 402d888:	29415004 	addi	r5,r5,1344
 402d88c:	010100f4 	movhi	r4,1027
 402d890:	21161404 	addi	r4,r4,22608
 402d894:	402d8040 	call	402d804 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 402d898:	018100b4 	movhi	r6,1026
 402d89c:	31808c04 	addi	r6,r6,560
 402d8a0:	014100b4 	movhi	r5,1026
 402d8a4:	29400804 	addi	r5,r5,32
 402d8a8:	010100b4 	movhi	r4,1026
 402d8ac:	21000804 	addi	r4,r4,32
 402d8b0:	402d8040 	call	402d804 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402d8b4:	01800034 	movhi	r6,0
 402d8b8:	31815004 	addi	r6,r6,1344
 402d8bc:	01400034 	movhi	r5,0
 402d8c0:	29400004 	addi	r5,r5,0
 402d8c4:	010100f4 	movhi	r4,1027
 402d8c8:	2114c404 	addi	r4,r4,21264
 402d8cc:	402d8040 	call	402d804 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402d8d0:	40342580 	call	4034258 <alt_dcache_flush_all>
  alt_icache_flush_all();
 402d8d4:	40344a80 	call	40344a8 <alt_icache_flush_all>
}
 402d8d8:	0001883a 	nop
 402d8dc:	e037883a 	mov	sp,fp
 402d8e0:	dfc00117 	ldw	ra,4(sp)
 402d8e4:	df000017 	ldw	fp,0(sp)
 402d8e8:	dec00204 	addi	sp,sp,8
 402d8ec:	f800283a 	ret

0402d8f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d8f0:	defffe04 	addi	sp,sp,-8
 402d8f4:	dfc00115 	stw	ra,4(sp)
 402d8f8:	df000015 	stw	fp,0(sp)
 402d8fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d900:	d0a00b17 	ldw	r2,-32724(gp)
 402d904:	10000326 	beq	r2,zero,402d914 <alt_get_errno+0x24>
 402d908:	d0a00b17 	ldw	r2,-32724(gp)
 402d90c:	103ee83a 	callr	r2
 402d910:	00000106 	br	402d918 <alt_get_errno+0x28>
 402d914:	d0a01b04 	addi	r2,gp,-32660
}
 402d918:	e037883a 	mov	sp,fp
 402d91c:	dfc00117 	ldw	ra,4(sp)
 402d920:	df000017 	ldw	fp,0(sp)
 402d924:	dec00204 	addi	sp,sp,8
 402d928:	f800283a 	ret

0402d92c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 402d92c:	defff904 	addi	sp,sp,-28
 402d930:	dfc00615 	stw	ra,24(sp)
 402d934:	df000515 	stw	fp,20(sp)
 402d938:	df000504 	addi	fp,sp,20
 402d93c:	e13ffd15 	stw	r4,-12(fp)
 402d940:	e17ffe15 	stw	r5,-8(fp)
 402d944:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402d948:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d94c:	e0bffd17 	ldw	r2,-12(fp)
 402d950:	10000816 	blt	r2,zero,402d974 <lseek+0x48>
 402d954:	01400304 	movi	r5,12
 402d958:	e13ffd17 	ldw	r4,-12(fp)
 402d95c:	402ac1c0 	call	402ac1c <__mulsi3>
 402d960:	1007883a 	mov	r3,r2
 402d964:	00800034 	movhi	r2,0
 402d968:	10838304 	addi	r2,r2,3596
 402d96c:	1885883a 	add	r2,r3,r2
 402d970:	00000106 	br	402d978 <lseek+0x4c>
 402d974:	0005883a 	mov	r2,zero
 402d978:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 402d97c:	e0bffc17 	ldw	r2,-16(fp)
 402d980:	10001026 	beq	r2,zero,402d9c4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 402d984:	e0bffc17 	ldw	r2,-16(fp)
 402d988:	10800017 	ldw	r2,0(r2)
 402d98c:	10800717 	ldw	r2,28(r2)
 402d990:	10000926 	beq	r2,zero,402d9b8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402d994:	e0bffc17 	ldw	r2,-16(fp)
 402d998:	10800017 	ldw	r2,0(r2)
 402d99c:	10800717 	ldw	r2,28(r2)
 402d9a0:	e1bfff17 	ldw	r6,-4(fp)
 402d9a4:	e17ffe17 	ldw	r5,-8(fp)
 402d9a8:	e13ffc17 	ldw	r4,-16(fp)
 402d9ac:	103ee83a 	callr	r2
 402d9b0:	e0bffb15 	stw	r2,-20(fp)
 402d9b4:	00000506 	br	402d9cc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 402d9b8:	00bfde84 	movi	r2,-134
 402d9bc:	e0bffb15 	stw	r2,-20(fp)
 402d9c0:	00000206 	br	402d9cc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 402d9c4:	00bfebc4 	movi	r2,-81
 402d9c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 402d9cc:	e0bffb17 	ldw	r2,-20(fp)
 402d9d0:	1000070e 	bge	r2,zero,402d9f0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 402d9d4:	402d8f00 	call	402d8f0 <alt_get_errno>
 402d9d8:	1007883a 	mov	r3,r2
 402d9dc:	e0bffb17 	ldw	r2,-20(fp)
 402d9e0:	0085c83a 	sub	r2,zero,r2
 402d9e4:	18800015 	stw	r2,0(r3)
    rc = -1;
 402d9e8:	00bfffc4 	movi	r2,-1
 402d9ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402d9f0:	e0bffb17 	ldw	r2,-20(fp)
}
 402d9f4:	e037883a 	mov	sp,fp
 402d9f8:	dfc00117 	ldw	ra,4(sp)
 402d9fc:	df000017 	ldw	fp,0(sp)
 402da00:	dec00204 	addi	sp,sp,8
 402da04:	f800283a 	ret

0402da08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402da08:	defffd04 	addi	sp,sp,-12
 402da0c:	dfc00215 	stw	ra,8(sp)
 402da10:	df000115 	stw	fp,4(sp)
 402da14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402da18:	0009883a 	mov	r4,zero
 402da1c:	402dee00 	call	402dee0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402da20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402da24:	402df180 	call	402df18 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402da28:	01800034 	movhi	r6,0
 402da2c:	31813304 	addi	r6,r6,1228
 402da30:	01400034 	movhi	r5,0
 402da34:	29413304 	addi	r5,r5,1228
 402da38:	01000034 	movhi	r4,0
 402da3c:	21013304 	addi	r4,r4,1228
 402da40:	403484c0 	call	403484c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402da44:	40343580 	call	4034358 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402da48:	010100f4 	movhi	r4,1027
 402da4c:	2110ee04 	addi	r4,r4,17336
 402da50:	4034f7c0 	call	4034f7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402da54:	d0a01c17 	ldw	r2,-32656(gp)
 402da58:	d0e01d17 	ldw	r3,-32652(gp)
 402da5c:	d1201e17 	ldw	r4,-32648(gp)
 402da60:	200d883a 	mov	r6,r4
 402da64:	180b883a 	mov	r5,r3
 402da68:	1009883a 	mov	r4,r2
 402da6c:	402026c0 	call	402026c <main>
 402da70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402da74:	01000044 	movi	r4,1
 402da78:	402d5240 	call	402d524 <close>
  exit (result);
 402da7c:	e13fff17 	ldw	r4,-4(fp)
 402da80:	4034f900 	call	4034f90 <exit>

0402da84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 402da84:	defffe04 	addi	sp,sp,-8
 402da88:	df000115 	stw	fp,4(sp)
 402da8c:	df000104 	addi	fp,sp,4
 402da90:	e13fff15 	stw	r4,-4(fp)
}
 402da94:	0001883a 	nop
 402da98:	e037883a 	mov	sp,fp
 402da9c:	df000017 	ldw	fp,0(sp)
 402daa0:	dec00104 	addi	sp,sp,4
 402daa4:	f800283a 	ret

0402daa8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 402daa8:	defffe04 	addi	sp,sp,-8
 402daac:	df000115 	stw	fp,4(sp)
 402dab0:	df000104 	addi	fp,sp,4
 402dab4:	e13fff15 	stw	r4,-4(fp)
}
 402dab8:	0001883a 	nop
 402dabc:	e037883a 	mov	sp,fp
 402dac0:	df000017 	ldw	fp,0(sp)
 402dac4:	dec00104 	addi	sp,sp,4
 402dac8:	f800283a 	ret

0402dacc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402dacc:	defffe04 	addi	sp,sp,-8
 402dad0:	dfc00115 	stw	ra,4(sp)
 402dad4:	df000015 	stw	fp,0(sp)
 402dad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402dadc:	d0a00b17 	ldw	r2,-32724(gp)
 402dae0:	10000326 	beq	r2,zero,402daf0 <alt_get_errno+0x24>
 402dae4:	d0a00b17 	ldw	r2,-32724(gp)
 402dae8:	103ee83a 	callr	r2
 402daec:	00000106 	br	402daf4 <alt_get_errno+0x28>
 402daf0:	d0a01b04 	addi	r2,gp,-32660
}
 402daf4:	e037883a 	mov	sp,fp
 402daf8:	dfc00117 	ldw	ra,4(sp)
 402dafc:	df000017 	ldw	fp,0(sp)
 402db00:	dec00204 	addi	sp,sp,8
 402db04:	f800283a 	ret

0402db08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 402db08:	defff904 	addi	sp,sp,-28
 402db0c:	dfc00615 	stw	ra,24(sp)
 402db10:	df000515 	stw	fp,20(sp)
 402db14:	df000504 	addi	fp,sp,20
 402db18:	e13ffd15 	stw	r4,-12(fp)
 402db1c:	e17ffe15 	stw	r5,-8(fp)
 402db20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402db24:	e0bffd17 	ldw	r2,-12(fp)
 402db28:	10000816 	blt	r2,zero,402db4c <read+0x44>
 402db2c:	01400304 	movi	r5,12
 402db30:	e13ffd17 	ldw	r4,-12(fp)
 402db34:	402ac1c0 	call	402ac1c <__mulsi3>
 402db38:	1007883a 	mov	r3,r2
 402db3c:	00800034 	movhi	r2,0
 402db40:	10838304 	addi	r2,r2,3596
 402db44:	1885883a 	add	r2,r3,r2
 402db48:	00000106 	br	402db50 <read+0x48>
 402db4c:	0005883a 	mov	r2,zero
 402db50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402db54:	e0bffb17 	ldw	r2,-20(fp)
 402db58:	10002226 	beq	r2,zero,402dbe4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402db5c:	e0bffb17 	ldw	r2,-20(fp)
 402db60:	10800217 	ldw	r2,8(r2)
 402db64:	108000cc 	andi	r2,r2,3
 402db68:	10800060 	cmpeqi	r2,r2,1
 402db6c:	1000181e 	bne	r2,zero,402dbd0 <read+0xc8>
        (fd->dev->read))
 402db70:	e0bffb17 	ldw	r2,-20(fp)
 402db74:	10800017 	ldw	r2,0(r2)
 402db78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402db7c:	10001426 	beq	r2,zero,402dbd0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 402db80:	e0bffb17 	ldw	r2,-20(fp)
 402db84:	10800017 	ldw	r2,0(r2)
 402db88:	10800517 	ldw	r2,20(r2)
 402db8c:	e0ffff17 	ldw	r3,-4(fp)
 402db90:	180d883a 	mov	r6,r3
 402db94:	e17ffe17 	ldw	r5,-8(fp)
 402db98:	e13ffb17 	ldw	r4,-20(fp)
 402db9c:	103ee83a 	callr	r2
 402dba0:	e0bffc15 	stw	r2,-16(fp)
 402dba4:	e0bffc17 	ldw	r2,-16(fp)
 402dba8:	1000070e 	bge	r2,zero,402dbc8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 402dbac:	402dacc0 	call	402dacc <alt_get_errno>
 402dbb0:	1007883a 	mov	r3,r2
 402dbb4:	e0bffc17 	ldw	r2,-16(fp)
 402dbb8:	0085c83a 	sub	r2,zero,r2
 402dbbc:	18800015 	stw	r2,0(r3)
          return -1;
 402dbc0:	00bfffc4 	movi	r2,-1
 402dbc4:	00000c06 	br	402dbf8 <read+0xf0>
        }
        return rval;
 402dbc8:	e0bffc17 	ldw	r2,-16(fp)
 402dbcc:	00000a06 	br	402dbf8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 402dbd0:	402dacc0 	call	402dacc <alt_get_errno>
 402dbd4:	1007883a 	mov	r3,r2
 402dbd8:	00800344 	movi	r2,13
 402dbdc:	18800015 	stw	r2,0(r3)
 402dbe0:	00000406 	br	402dbf4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402dbe4:	402dacc0 	call	402dacc <alt_get_errno>
 402dbe8:	1007883a 	mov	r3,r2
 402dbec:	00801444 	movi	r2,81
 402dbf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402dbf4:	00bfffc4 	movi	r2,-1
}
 402dbf8:	e037883a 	mov	sp,fp
 402dbfc:	dfc00117 	ldw	ra,4(sp)
 402dc00:	df000017 	ldw	fp,0(sp)
 402dc04:	dec00204 	addi	sp,sp,8
 402dc08:	f800283a 	ret

0402dc0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 402dc0c:	defffc04 	addi	sp,sp,-16
 402dc10:	dfc00315 	stw	ra,12(sp)
 402dc14:	df000215 	stw	fp,8(sp)
 402dc18:	dc000115 	stw	r16,4(sp)
 402dc1c:	df000204 	addi	fp,sp,8
 402dc20:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 402dc24:	e0bffe17 	ldw	r2,-8(fp)
 402dc28:	108000d0 	cmplti	r2,r2,3
 402dc2c:	1000111e 	bne	r2,zero,402dc74 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 402dc30:	04000034 	movhi	r16,0
 402dc34:	84038304 	addi	r16,r16,3596
 402dc38:	e0bffe17 	ldw	r2,-8(fp)
 402dc3c:	01400304 	movi	r5,12
 402dc40:	1009883a 	mov	r4,r2
 402dc44:	402ac1c0 	call	402ac1c <__mulsi3>
 402dc48:	8085883a 	add	r2,r16,r2
 402dc4c:	10800204 	addi	r2,r2,8
 402dc50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 402dc54:	04000034 	movhi	r16,0
 402dc58:	84038304 	addi	r16,r16,3596
 402dc5c:	e0bffe17 	ldw	r2,-8(fp)
 402dc60:	01400304 	movi	r5,12
 402dc64:	1009883a 	mov	r4,r2
 402dc68:	402ac1c0 	call	402ac1c <__mulsi3>
 402dc6c:	8085883a 	add	r2,r16,r2
 402dc70:	10000015 	stw	zero,0(r2)
  }
}
 402dc74:	0001883a 	nop
 402dc78:	e6ffff04 	addi	sp,fp,-4
 402dc7c:	dfc00217 	ldw	ra,8(sp)
 402dc80:	df000117 	ldw	fp,4(sp)
 402dc84:	dc000017 	ldw	r16,0(sp)
 402dc88:	dec00304 	addi	sp,sp,12
 402dc8c:	f800283a 	ret

0402dc90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 402dc90:	defff904 	addi	sp,sp,-28
 402dc94:	df000615 	stw	fp,24(sp)
 402dc98:	df000604 	addi	fp,sp,24
 402dc9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402dca0:	0005303a 	rdctl	r2,status
 402dca4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402dca8:	e0fffe17 	ldw	r3,-8(fp)
 402dcac:	00bfff84 	movi	r2,-2
 402dcb0:	1884703a 	and	r2,r3,r2
 402dcb4:	1001703a 	wrctl	status,r2
  
  return context;
 402dcb8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 402dcbc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 402dcc0:	d0a00c17 	ldw	r2,-32720(gp)
 402dcc4:	10c000c4 	addi	r3,r2,3
 402dcc8:	00bfff04 	movi	r2,-4
 402dccc:	1884703a 	and	r2,r3,r2
 402dcd0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402dcd4:	d0e00c17 	ldw	r3,-32720(gp)
 402dcd8:	e0bfff17 	ldw	r2,-4(fp)
 402dcdc:	1887883a 	add	r3,r3,r2
 402dce0:	00810034 	movhi	r2,1024
 402dce4:	10800004 	addi	r2,r2,0
 402dce8:	10c0062e 	bgeu	r2,r3,402dd04 <sbrk+0x74>
 402dcec:	e0bffb17 	ldw	r2,-20(fp)
 402dcf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402dcf4:	e0bffa17 	ldw	r2,-24(fp)
 402dcf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 402dcfc:	00bfffc4 	movi	r2,-1
 402dd00:	00000b06 	br	402dd30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402dd04:	d0a00c17 	ldw	r2,-32720(gp)
 402dd08:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 402dd0c:	d0e00c17 	ldw	r3,-32720(gp)
 402dd10:	e0bfff17 	ldw	r2,-4(fp)
 402dd14:	1885883a 	add	r2,r3,r2
 402dd18:	d0a00c15 	stw	r2,-32720(gp)
 402dd1c:	e0bffb17 	ldw	r2,-20(fp)
 402dd20:	e0bffc15 	stw	r2,-16(fp)
 402dd24:	e0bffc17 	ldw	r2,-16(fp)
 402dd28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 402dd2c:	e0bffd17 	ldw	r2,-12(fp)
} 
 402dd30:	e037883a 	mov	sp,fp
 402dd34:	df000017 	ldw	fp,0(sp)
 402dd38:	dec00104 	addi	sp,sp,4
 402dd3c:	f800283a 	ret

0402dd40 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 402dd40:	defffd04 	addi	sp,sp,-12
 402dd44:	dfc00215 	stw	ra,8(sp)
 402dd48:	df000115 	stw	fp,4(sp)
 402dd4c:	df000104 	addi	fp,sp,4
 402dd50:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 402dd54:	e13fff17 	ldw	r4,-4(fp)
 402dd58:	40341000 	call	4034100 <alt_busy_sleep>
}
 402dd5c:	e037883a 	mov	sp,fp
 402dd60:	dfc00117 	ldw	ra,4(sp)
 402dd64:	df000017 	ldw	fp,0(sp)
 402dd68:	dec00204 	addi	sp,sp,8
 402dd6c:	f800283a 	ret

0402dd70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402dd70:	defffe04 	addi	sp,sp,-8
 402dd74:	dfc00115 	stw	ra,4(sp)
 402dd78:	df000015 	stw	fp,0(sp)
 402dd7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402dd80:	d0a00b17 	ldw	r2,-32724(gp)
 402dd84:	10000326 	beq	r2,zero,402dd94 <alt_get_errno+0x24>
 402dd88:	d0a00b17 	ldw	r2,-32724(gp)
 402dd8c:	103ee83a 	callr	r2
 402dd90:	00000106 	br	402dd98 <alt_get_errno+0x28>
 402dd94:	d0a01b04 	addi	r2,gp,-32660
}
 402dd98:	e037883a 	mov	sp,fp
 402dd9c:	dfc00117 	ldw	ra,4(sp)
 402dda0:	df000017 	ldw	fp,0(sp)
 402dda4:	dec00204 	addi	sp,sp,8
 402dda8:	f800283a 	ret

0402ddac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 402ddac:	defff904 	addi	sp,sp,-28
 402ddb0:	dfc00615 	stw	ra,24(sp)
 402ddb4:	df000515 	stw	fp,20(sp)
 402ddb8:	df000504 	addi	fp,sp,20
 402ddbc:	e13ffd15 	stw	r4,-12(fp)
 402ddc0:	e17ffe15 	stw	r5,-8(fp)
 402ddc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402ddc8:	e0bffd17 	ldw	r2,-12(fp)
 402ddcc:	10000816 	blt	r2,zero,402ddf0 <write+0x44>
 402ddd0:	01400304 	movi	r5,12
 402ddd4:	e13ffd17 	ldw	r4,-12(fp)
 402ddd8:	402ac1c0 	call	402ac1c <__mulsi3>
 402dddc:	1007883a 	mov	r3,r2
 402dde0:	00800034 	movhi	r2,0
 402dde4:	10838304 	addi	r2,r2,3596
 402dde8:	1885883a 	add	r2,r3,r2
 402ddec:	00000106 	br	402ddf4 <write+0x48>
 402ddf0:	0005883a 	mov	r2,zero
 402ddf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402ddf8:	e0bffb17 	ldw	r2,-20(fp)
 402ddfc:	10002126 	beq	r2,zero,402de84 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402de00:	e0bffb17 	ldw	r2,-20(fp)
 402de04:	10800217 	ldw	r2,8(r2)
 402de08:	108000cc 	andi	r2,r2,3
 402de0c:	10001826 	beq	r2,zero,402de70 <write+0xc4>
 402de10:	e0bffb17 	ldw	r2,-20(fp)
 402de14:	10800017 	ldw	r2,0(r2)
 402de18:	10800617 	ldw	r2,24(r2)
 402de1c:	10001426 	beq	r2,zero,402de70 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402de20:	e0bffb17 	ldw	r2,-20(fp)
 402de24:	10800017 	ldw	r2,0(r2)
 402de28:	10800617 	ldw	r2,24(r2)
 402de2c:	e0ffff17 	ldw	r3,-4(fp)
 402de30:	180d883a 	mov	r6,r3
 402de34:	e17ffe17 	ldw	r5,-8(fp)
 402de38:	e13ffb17 	ldw	r4,-20(fp)
 402de3c:	103ee83a 	callr	r2
 402de40:	e0bffc15 	stw	r2,-16(fp)
 402de44:	e0bffc17 	ldw	r2,-16(fp)
 402de48:	1000070e 	bge	r2,zero,402de68 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 402de4c:	402dd700 	call	402dd70 <alt_get_errno>
 402de50:	1007883a 	mov	r3,r2
 402de54:	e0bffc17 	ldw	r2,-16(fp)
 402de58:	0085c83a 	sub	r2,zero,r2
 402de5c:	18800015 	stw	r2,0(r3)
        return -1;
 402de60:	00bfffc4 	movi	r2,-1
 402de64:	00000c06 	br	402de98 <write+0xec>
      }
      return rval;
 402de68:	e0bffc17 	ldw	r2,-16(fp)
 402de6c:	00000a06 	br	402de98 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402de70:	402dd700 	call	402dd70 <alt_get_errno>
 402de74:	1007883a 	mov	r3,r2
 402de78:	00800344 	movi	r2,13
 402de7c:	18800015 	stw	r2,0(r3)
 402de80:	00000406 	br	402de94 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 402de84:	402dd700 	call	402dd70 <alt_get_errno>
 402de88:	1007883a 	mov	r3,r2
 402de8c:	00801444 	movi	r2,81
 402de90:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402de94:	00bfffc4 	movi	r2,-1
}
 402de98:	e037883a 	mov	sp,fp
 402de9c:	dfc00117 	ldw	ra,4(sp)
 402dea0:	df000017 	ldw	fp,0(sp)
 402dea4:	dec00204 	addi	sp,sp,8
 402dea8:	f800283a 	ret

0402deac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402deac:	defffd04 	addi	sp,sp,-12
 402deb0:	dfc00215 	stw	ra,8(sp)
 402deb4:	df000115 	stw	fp,4(sp)
 402deb8:	df000104 	addi	fp,sp,4
 402debc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402dec0:	d1600804 	addi	r5,gp,-32736
 402dec4:	e13fff17 	ldw	r4,-4(fp)
 402dec8:	40342b40 	call	40342b4 <alt_dev_llist_insert>
}
 402decc:	e037883a 	mov	sp,fp
 402ded0:	dfc00117 	ldw	ra,4(sp)
 402ded4:	df000017 	ldw	fp,0(sp)
 402ded8:	dec00204 	addi	sp,sp,8
 402dedc:	f800283a 	ret

0402dee0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402dee0:	defffd04 	addi	sp,sp,-12
 402dee4:	dfc00215 	stw	ra,8(sp)
 402dee8:	df000115 	stw	fp,4(sp)
 402deec:	df000104 	addi	fp,sp,4
 402def0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 402def4:	4034cf00 	call	4034cf0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402def8:	00800044 	movi	r2,1
 402defc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402df00:	0001883a 	nop
 402df04:	e037883a 	mov	sp,fp
 402df08:	dfc00117 	ldw	ra,4(sp)
 402df0c:	df000017 	ldw	fp,0(sp)
 402df10:	dec00204 	addi	sp,sp,8
 402df14:	f800283a 	ret

0402df18 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402df18:	defffd04 	addi	sp,sp,-12
 402df1c:	dfc00215 	stw	ra,8(sp)
 402df20:	df000115 	stw	fp,4(sp)
 402df24:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 402df28:	01c0fa04 	movi	r7,1000
 402df2c:	01800044 	movi	r6,1
 402df30:	000b883a 	mov	r5,zero
 402df34:	01010134 	movhi	r4,1028
 402df38:	21060004 	addi	r4,r4,6144
 402df3c:	4032fe00 	call	4032fe0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 402df40:	01800404 	movi	r6,16
 402df44:	000b883a 	mov	r5,zero
 402df48:	01000034 	movhi	r4,0
 402df4c:	2103ed04 	addi	r4,r4,4020
 402df50:	40326640 	call	4032664 <altera_avalon_jtag_uart_init>
 402df54:	01000034 	movhi	r4,0
 402df58:	2103e304 	addi	r4,r4,3980
 402df5c:	402deac0 	call	402deac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 402df60:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 402df64:	00800034 	movhi	r2,0
 402df68:	1087fb04 	addi	r2,r2,8172
 402df6c:	10800a17 	ldw	r2,40(r2)
 402df70:	10800017 	ldw	r2,0(r2)
 402df74:	1007883a 	mov	r3,r2
 402df78:	00800034 	movhi	r2,0
 402df7c:	1087fb04 	addi	r2,r2,8172
 402df80:	10c00b15 	stw	r3,44(r2)
 402df84:	00800034 	movhi	r2,0
 402df88:	1087fb04 	addi	r2,r2,8172
 402df8c:	10800a17 	ldw	r2,40(r2)
 402df90:	10800104 	addi	r2,r2,4
 402df94:	10800017 	ldw	r2,0(r2)
 402df98:	1007883a 	mov	r3,r2
 402df9c:	00800034 	movhi	r2,0
 402dfa0:	1087fb04 	addi	r2,r2,8172
 402dfa4:	10c00c15 	stw	r3,48(r2)
 402dfa8:	00800034 	movhi	r2,0
 402dfac:	1087fb04 	addi	r2,r2,8172
 402dfb0:	10800a17 	ldw	r2,40(r2)
 402dfb4:	10800204 	addi	r2,r2,8
 402dfb8:	10800017 	ldw	r2,0(r2)
 402dfbc:	10ffffcc 	andi	r3,r2,65535
 402dfc0:	00800034 	movhi	r2,0
 402dfc4:	1087fb04 	addi	r2,r2,8172
 402dfc8:	10c00f15 	stw	r3,60(r2)
 402dfcc:	00800034 	movhi	r2,0
 402dfd0:	1087fb04 	addi	r2,r2,8172
 402dfd4:	10800a17 	ldw	r2,40(r2)
 402dfd8:	10800204 	addi	r2,r2,8
 402dfdc:	10800017 	ldw	r2,0(r2)
 402dfe0:	1006d43a 	srli	r3,r2,16
 402dfe4:	00800034 	movhi	r2,0
 402dfe8:	1087fb04 	addi	r2,r2,8172
 402dfec:	10c01015 	stw	r3,64(r2)
 402dff0:	00800034 	movhi	r2,0
 402dff4:	1087fb04 	addi	r2,r2,8172
 402dff8:	10800a17 	ldw	r2,40(r2)
 402dffc:	10800304 	addi	r2,r2,12
 402e000:	10800017 	ldw	r2,0(r2)
 402e004:	1005d07a 	srai	r2,r2,1
 402e008:	10c0004c 	andi	r3,r2,1
 402e00c:	00800034 	movhi	r2,0
 402e010:	1087fb04 	addi	r2,r2,8172
 402e014:	10c00d15 	stw	r3,52(r2)
 402e018:	00800034 	movhi	r2,0
 402e01c:	1087fb04 	addi	r2,r2,8172
 402e020:	10800a17 	ldw	r2,40(r2)
 402e024:	10800304 	addi	r2,r2,12
 402e028:	10800017 	ldw	r2,0(r2)
 402e02c:	1005d13a 	srai	r2,r2,4
 402e030:	10c003cc 	andi	r3,r2,15
 402e034:	00800034 	movhi	r2,0
 402e038:	1087fb04 	addi	r2,r2,8172
 402e03c:	10c00e15 	stw	r3,56(r2)
 402e040:	00800034 	movhi	r2,0
 402e044:	1087fb04 	addi	r2,r2,8172
 402e048:	10800a17 	ldw	r2,40(r2)
 402e04c:	10800304 	addi	r2,r2,12
 402e050:	10800017 	ldw	r2,0(r2)
 402e054:	1005d43a 	srai	r2,r2,16
 402e058:	e0bfff05 	stb	r2,-4(fp)
 402e05c:	00800034 	movhi	r2,0
 402e060:	1087fb04 	addi	r2,r2,8172
 402e064:	10800a17 	ldw	r2,40(r2)
 402e068:	10800304 	addi	r2,r2,12
 402e06c:	10800017 	ldw	r2,0(r2)
 402e070:	1004d63a 	srli	r2,r2,24
 402e074:	e0bfff45 	stb	r2,-3(fp)
 402e078:	00800034 	movhi	r2,0
 402e07c:	1087fb04 	addi	r2,r2,8172
 402e080:	10800e17 	ldw	r2,56(r2)
 402e084:	10800058 	cmpnei	r2,r2,1
 402e088:	1000041e 	bne	r2,zero,402e09c <alt_sys_init+0x184>
 402e08c:	00800034 	movhi	r2,0
 402e090:	1087fb04 	addi	r2,r2,8172
 402e094:	10001115 	stw	zero,68(r2)
 402e098:	00000e06 	br	402e0d4 <alt_sys_init+0x1bc>
 402e09c:	00800034 	movhi	r2,0
 402e0a0:	1087fb04 	addi	r2,r2,8172
 402e0a4:	10800e17 	ldw	r2,56(r2)
 402e0a8:	10800098 	cmpnei	r2,r2,2
 402e0ac:	1000051e 	bne	r2,zero,402e0c4 <alt_sys_init+0x1ac>
 402e0b0:	00800034 	movhi	r2,0
 402e0b4:	1087fb04 	addi	r2,r2,8172
 402e0b8:	00c00044 	movi	r3,1
 402e0bc:	10c01115 	stw	r3,68(r2)
 402e0c0:	00000406 	br	402e0d4 <alt_sys_init+0x1bc>
 402e0c4:	00800034 	movhi	r2,0
 402e0c8:	1087fb04 	addi	r2,r2,8172
 402e0cc:	00c00084 	movi	r3,2
 402e0d0:	10c01115 	stw	r3,68(r2)
 402e0d4:	e0bfff03 	ldbu	r2,-4(fp)
 402e0d8:	00c00804 	movi	r3,32
 402e0dc:	1885c83a 	sub	r2,r3,r2
 402e0e0:	00ffffc4 	movi	r3,-1
 402e0e4:	1886d83a 	srl	r3,r3,r2
 402e0e8:	00800034 	movhi	r2,0
 402e0ec:	1087fb04 	addi	r2,r2,8172
 402e0f0:	10c01215 	stw	r3,72(r2)
 402e0f4:	e0ffff03 	ldbu	r3,-4(fp)
 402e0f8:	00800034 	movhi	r2,0
 402e0fc:	1087fb04 	addi	r2,r2,8172
 402e100:	10801117 	ldw	r2,68(r2)
 402e104:	1887883a 	add	r3,r3,r2
 402e108:	00800034 	movhi	r2,0
 402e10c:	1087fb04 	addi	r2,r2,8172
 402e110:	10c01315 	stw	r3,76(r2)
 402e114:	e0bfff43 	ldbu	r2,-3(fp)
 402e118:	00c00804 	movi	r3,32
 402e11c:	1885c83a 	sub	r2,r3,r2
 402e120:	00ffffc4 	movi	r3,-1
 402e124:	1886d83a 	srl	r3,r3,r2
 402e128:	00800034 	movhi	r2,0
 402e12c:	1087fb04 	addi	r2,r2,8172
 402e130:	10c01415 	stw	r3,80(r2)
 402e134:	01000034 	movhi	r4,0
 402e138:	2107fb04 	addi	r4,r4,8172
 402e13c:	402deac0 	call	402deac <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 402e140:	01000034 	movhi	r4,0
 402e144:	21081004 	addi	r4,r4,8256
 402e148:	402deac0 	call	402deac <alt_dev_reg>
}
 402e14c:	0001883a 	nop
 402e150:	e037883a 	mov	sp,fp
 402e154:	dfc00117 	ldw	ra,4(sp)
 402e158:	df000017 	ldw	fp,0(sp)
 402e15c:	dec00204 	addi	sp,sp,8
 402e160:	f800283a 	ret

0402e164 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 402e164:	defffa04 	addi	sp,sp,-24
 402e168:	dfc00515 	stw	ra,20(sp)
 402e16c:	df000415 	stw	fp,16(sp)
 402e170:	df000404 	addi	fp,sp,16
 402e174:	e13ffe15 	stw	r4,-8(fp)
 402e178:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 402e17c:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
 402e180:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 402e184:	10001e26 	beq	r2,zero,402e200 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
 402e188:	00803fc4 	movi	r2,255
 402e18c:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 402e190:	d0a02517 	ldw	r2,-32620(gp)
 402e194:	e13ffe17 	ldw	r4,-8(fp)
 402e198:	e0ffff17 	ldw	r3,-4(fp)
 402e19c:	20c7883a 	add	r3,r4,r3
 402e1a0:	1806927a 	slli	r3,r3,9
 402e1a4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 402e1a8:	d0a02417 	ldw	r2,-32624(gp)
 402e1ac:	00c00604 	movi	r3,24
 402e1b0:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 402e1b4:	d0a02117 	ldw	r2,-32636(gp)
 402e1b8:	1080002b 	ldhuio	r2,0(r2)
 402e1bc:	10bfffcc 	andi	r2,r2,65535
 402e1c0:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
 402e1c4:	e0bffd0b 	ldhu	r2,-12(fp)
 402e1c8:	10bfffcc 	andi	r2,r2,65535
 402e1cc:	1080010c 	andi	r2,r2,4
 402e1d0:	103ff81e 	bne	r2,zero,402e1b4 <__flash_rwdata_start+0xffff8964>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 402e1d4:	e0bffd0b 	ldhu	r2,-12(fp)
 402e1d8:	10bfffcc 	andi	r2,r2,65535
 402e1dc:	1080040c 	andi	r2,r2,16
 402e1e0:	1000071e 	bne	r2,zero,402e200 <Write_Sector_Data+0x9c>
        {
            result = true;
 402e1e4:	00800044 	movi	r2,1
 402e1e8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 402e1ec:	d0202a15 	stw	zero,-32600(gp)
            current_sector_index = sector_index+partition_offset;
 402e1f0:	e0fffe17 	ldw	r3,-8(fp)
 402e1f4:	e0bfff17 	ldw	r2,-4(fp)
 402e1f8:	1885883a 	add	r2,r3,r2
 402e1fc:	d0a02b15 	stw	r2,-32596(gp)
        }
    }
    return result;
 402e200:	e0bffc17 	ldw	r2,-16(fp)
}
 402e204:	e037883a 	mov	sp,fp
 402e208:	dfc00117 	ldw	ra,4(sp)
 402e20c:	df000017 	ldw	fp,0(sp)
 402e210:	dec00204 	addi	sp,sp,8
 402e214:	f800283a 	ret

0402e218 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 402e218:	defffd04 	addi	sp,sp,-12
 402e21c:	dfc00215 	stw	ra,8(sp)
 402e220:	df000115 	stw	fp,4(sp)
 402e224:	df000104 	addi	fp,sp,4
    bool result = true;
 402e228:	00800044 	movi	r2,1
 402e22c:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 402e230:	d0a02a17 	ldw	r2,-32600(gp)
 402e234:	10000526 	beq	r2,zero,402e24c <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 402e238:	d0a02b17 	ldw	r2,-32596(gp)
 402e23c:	000b883a 	mov	r5,zero
 402e240:	1009883a 	mov	r4,r2
 402e244:	402e1640 	call	402e164 <Write_Sector_Data>
 402e248:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 402e24c:	e0bfff17 	ldw	r2,-4(fp)
}
 402e250:	e037883a 	mov	sp,fp
 402e254:	dfc00117 	ldw	ra,4(sp)
 402e258:	df000017 	ldw	fp,0(sp)
 402e25c:	dec00204 	addi	sp,sp,8
 402e260:	f800283a 	ret

0402e264 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 402e264:	defffa04 	addi	sp,sp,-24
 402e268:	dfc00515 	stw	ra,20(sp)
 402e26c:	df000415 	stw	fp,16(sp)
 402e270:	df000404 	addi	fp,sp,16
 402e274:	e13ffe15 	stw	r4,-8(fp)
 402e278:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 402e27c:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 402e280:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 402e284:	10002726 	beq	r2,zero,402e324 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
 402e288:	00803fc4 	movi	r2,255
 402e28c:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 402e290:	d0a02a17 	ldw	r2,-32600(gp)
 402e294:	10000726 	beq	r2,zero,402e2b4 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 402e298:	d0a02b17 	ldw	r2,-32596(gp)
 402e29c:	000b883a 	mov	r5,zero
 402e2a0:	1009883a 	mov	r4,r2
 402e2a4:	402e1640 	call	402e164 <Write_Sector_Data>
 402e2a8:	1000021e 	bne	r2,zero,402e2b4 <Read_Sector_Data+0x50>
            {
                return false;
 402e2ac:	0005883a 	mov	r2,zero
 402e2b0:	00001d06 	br	402e328 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 402e2b4:	d0a02517 	ldw	r2,-32620(gp)
 402e2b8:	e13ffe17 	ldw	r4,-8(fp)
 402e2bc:	e0ffff17 	ldw	r3,-4(fp)
 402e2c0:	20c7883a 	add	r3,r4,r3
 402e2c4:	1806927a 	slli	r3,r3,9
 402e2c8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 402e2cc:	d0a02417 	ldw	r2,-32624(gp)
 402e2d0:	00c00444 	movi	r3,17
 402e2d4:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 402e2d8:	d0a02117 	ldw	r2,-32636(gp)
 402e2dc:	1080002b 	ldhuio	r2,0(r2)
 402e2e0:	10bfffcc 	andi	r2,r2,65535
 402e2e4:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
 402e2e8:	e0bffd0b 	ldhu	r2,-12(fp)
 402e2ec:	10bfffcc 	andi	r2,r2,65535
 402e2f0:	1080010c 	andi	r2,r2,4
 402e2f4:	103ff81e 	bne	r2,zero,402e2d8 <__flash_rwdata_start+0xffff8a88>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 402e2f8:	e0bffd0b 	ldhu	r2,-12(fp)
 402e2fc:	10bfffcc 	andi	r2,r2,65535
 402e300:	1080040c 	andi	r2,r2,16
 402e304:	1000071e 	bne	r2,zero,402e324 <Read_Sector_Data+0xc0>
		{
			result = true;
 402e308:	00800044 	movi	r2,1
 402e30c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 402e310:	d0202a15 	stw	zero,-32600(gp)
            current_sector_index = sector_index+partition_offset;
 402e314:	e0fffe17 	ldw	r3,-8(fp)
 402e318:	e0bfff17 	ldw	r2,-4(fp)
 402e31c:	1885883a 	add	r2,r3,r2
 402e320:	d0a02b15 	stw	r2,-32596(gp)
		}
	}
	return result;
 402e324:	e0bffc17 	ldw	r2,-16(fp)
}
 402e328:	e037883a 	mov	sp,fp
 402e32c:	dfc00117 	ldw	ra,4(sp)
 402e330:	df000017 	ldw	fp,0(sp)
 402e334:	dec00204 	addi	sp,sp,8
 402e338:	f800283a 	ret

0402e33c <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 402e33c:	defffb04 	addi	sp,sp,-20
 402e340:	dfc00415 	stw	ra,16(sp)
 402e344:	df000315 	stw	fp,12(sp)
 402e348:	df000304 	addi	fp,sp,12
 402e34c:	e13ffe15 	stw	r4,-8(fp)
 402e350:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 402e354:	e0bffe17 	ldw	r2,-8(fp)
 402e358:	1004d23a 	srli	r2,r2,8
 402e35c:	d0e02717 	ldw	r3,-32612(gp)
 402e360:	10c5883a 	add	r2,r2,r3
 402e364:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 402e368:	00800034 	movhi	r2,0
 402e36c:	10885a04 	addi	r2,r2,8552
 402e370:	10801117 	ldw	r2,68(r2)
 402e374:	e0fffd17 	ldw	r3,-12(fp)
 402e378:	1885883a 	add	r2,r3,r2
 402e37c:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
 402e380:	d0a02b17 	ldw	r2,-32596(gp)
 402e384:	e0fffd17 	ldw	r3,-12(fp)
 402e388:	18800726 	beq	r3,r2,402e3a8 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 402e38c:	e0bffd17 	ldw	r2,-12(fp)
 402e390:	000b883a 	mov	r5,zero
 402e394:	1009883a 	mov	r4,r2
 402e398:	402e2640 	call	402e264 <Read_Sector_Data>
 402e39c:	1000021e 	bne	r2,zero,402e3a8 <get_cluster_flag+0x6c>
        {
            return false;
 402e3a0:	0005883a 	mov	r2,zero
 402e3a4:	00000d06 	br	402e3dc <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 402e3a8:	e0bffe17 	ldw	r2,-8(fp)
 402e3ac:	10803fcc 	andi	r2,r2,255
 402e3b0:	1085883a 	add	r2,r2,r2
 402e3b4:	1007883a 	mov	r3,r2
 402e3b8:	d0a02917 	ldw	r2,-32604(gp)
 402e3bc:	10800a17 	ldw	r2,40(r2)
 402e3c0:	1885883a 	add	r2,r3,r2
 402e3c4:	1080002b 	ldhuio	r2,0(r2)
 402e3c8:	10bfffcc 	andi	r2,r2,65535
 402e3cc:	1007883a 	mov	r3,r2
 402e3d0:	e0bfff17 	ldw	r2,-4(fp)
 402e3d4:	10c0000d 	sth	r3,0(r2)
    return true;
 402e3d8:	00800044 	movi	r2,1
}
 402e3dc:	e037883a 	mov	sp,fp
 402e3e0:	dfc00117 	ldw	ra,4(sp)
 402e3e4:	df000017 	ldw	fp,0(sp)
 402e3e8:	dec00204 	addi	sp,sp,8
 402e3ec:	f800283a 	ret

0402e3f0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 402e3f0:	defffa04 	addi	sp,sp,-24
 402e3f4:	dfc00515 	stw	ra,20(sp)
 402e3f8:	df000415 	stw	fp,16(sp)
 402e3fc:	df000404 	addi	fp,sp,16
 402e400:	e13ffd15 	stw	r4,-12(fp)
 402e404:	2805883a 	mov	r2,r5
 402e408:	e1bfff15 	stw	r6,-4(fp)
 402e40c:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 402e410:	e0bffd17 	ldw	r2,-12(fp)
 402e414:	1004d23a 	srli	r2,r2,8
 402e418:	d0e02717 	ldw	r3,-32612(gp)
 402e41c:	10c5883a 	add	r2,r2,r3
 402e420:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
 402e424:	e0bfff17 	ldw	r2,-4(fp)
 402e428:	10000726 	beq	r2,zero,402e448 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 402e42c:	00800034 	movhi	r2,0
 402e430:	10885a04 	addi	r2,r2,8552
 402e434:	10801117 	ldw	r2,68(r2)
 402e438:	e0fffc17 	ldw	r3,-16(fp)
 402e43c:	1885883a 	add	r2,r3,r2
 402e440:	e0bffc15 	stw	r2,-16(fp)
 402e444:	00000606 	br	402e460 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 402e448:	00800034 	movhi	r2,0
 402e44c:	10885a04 	addi	r2,r2,8552
 402e450:	10801217 	ldw	r2,72(r2)
 402e454:	e0fffc17 	ldw	r3,-16(fp)
 402e458:	1885883a 	add	r2,r3,r2
 402e45c:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
 402e460:	d0a02b17 	ldw	r2,-32596(gp)
 402e464:	e0fffc17 	ldw	r3,-16(fp)
 402e468:	18800726 	beq	r3,r2,402e488 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 402e46c:	e0bffc17 	ldw	r2,-16(fp)
 402e470:	000b883a 	mov	r5,zero
 402e474:	1009883a 	mov	r4,r2
 402e478:	402e2640 	call	402e264 <Read_Sector_Data>
 402e47c:	1000021e 	bne	r2,zero,402e488 <mark_cluster+0x98>
        {
            return false;
 402e480:	0005883a 	mov	r2,zero
 402e484:	00000d06 	br	402e4bc <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 402e488:	e0bffd17 	ldw	r2,-12(fp)
 402e48c:	10803fcc 	andi	r2,r2,255
 402e490:	1085883a 	add	r2,r2,r2
 402e494:	1007883a 	mov	r3,r2
 402e498:	d0a02917 	ldw	r2,-32604(gp)
 402e49c:	10800a17 	ldw	r2,40(r2)
 402e4a0:	1885883a 	add	r2,r3,r2
 402e4a4:	1007883a 	mov	r3,r2
 402e4a8:	e0bffe0f 	ldh	r2,-8(fp)
 402e4ac:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
 402e4b0:	00800044 	movi	r2,1
 402e4b4:	d0a02a15 	stw	r2,-32600(gp)
    return true;
 402e4b8:	00800044 	movi	r2,1
}
 402e4bc:	e037883a 	mov	sp,fp
 402e4c0:	dfc00117 	ldw	ra,4(sp)
 402e4c4:	df000017 	ldw	fp,0(sp)
 402e4c8:	dec00204 	addi	sp,sp,8
 402e4cc:	f800283a 	ret

0402e4d0 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 402e4d0:	defff704 	addi	sp,sp,-36
 402e4d4:	dfc00815 	stw	ra,32(sp)
 402e4d8:	df000715 	stw	fp,28(sp)
 402e4dc:	df000704 	addi	fp,sp,28
	bool result = false;
 402e4e0:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 402e4e4:	000b883a 	mov	r5,zero
 402e4e8:	0009883a 	mov	r4,zero
 402e4ec:	402e2640 	call	402e264 <Read_Sector_Data>
 402e4f0:	10005a26 	beq	r2,zero,402e65c <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 402e4f4:	d0a02917 	ldw	r2,-32604(gp)
 402e4f8:	10800a17 	ldw	r2,40(r2)
 402e4fc:	10807f84 	addi	r2,r2,510
 402e500:	1080002b 	ldhuio	r2,0(r2)
 402e504:	10bfffcc 	andi	r2,r2,65535
 402e508:	10bfffcc 	andi	r2,r2,65535
 402e50c:	10a0001c 	xori	r2,r2,32768
 402e510:	10a00004 	addi	r2,r2,-32768
 402e514:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 402e518:	e0bffb17 	ldw	r2,-20(fp)
 402e51c:	10ffffcc 	andi	r3,r2,65535
 402e520:	00aa9554 	movui	r2,43605
 402e524:	18804d1e 	bne	r3,r2,402e65c <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 402e528:	e03ffa15 	stw	zero,-24(fp)
 402e52c:	00004806 	br	402e650 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 402e530:	e0bffa17 	ldw	r2,-24(fp)
 402e534:	1004913a 	slli	r2,r2,4
 402e538:	10806f84 	addi	r2,r2,446
 402e53c:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 402e540:	d0a02917 	ldw	r2,-32604(gp)
 402e544:	10c00a17 	ldw	r3,40(r2)
 402e548:	e0bffc17 	ldw	r2,-16(fp)
 402e54c:	1885883a 	add	r2,r3,r2
 402e550:	10800104 	addi	r2,r2,4
 402e554:	10800023 	ldbuio	r2,0(r2)
 402e558:	10803fcc 	andi	r2,r2,255
 402e55c:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 402e560:	e0bffd07 	ldb	r2,-12(fp)
 402e564:	10800060 	cmpeqi	r2,r2,1
 402e568:	1000091e 	bne	r2,zero,402e590 <Check_for_Master_Boot_Record+0xc0>
 402e56c:	e0bffd07 	ldb	r2,-12(fp)
 402e570:	10800120 	cmpeqi	r2,r2,4
 402e574:	1000061e 	bne	r2,zero,402e590 <Check_for_Master_Boot_Record+0xc0>
 402e578:	e0bffd07 	ldb	r2,-12(fp)
 402e57c:	108001a0 	cmpeqi	r2,r2,6
 402e580:	1000031e 	bne	r2,zero,402e590 <Check_for_Master_Boot_Record+0xc0>
 402e584:	e0bffd07 	ldb	r2,-12(fp)
 402e588:	10800398 	cmpnei	r2,r2,14
 402e58c:	10002d1e 	bne	r2,zero,402e644 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 402e590:	d0a02917 	ldw	r2,-32604(gp)
 402e594:	10c00a17 	ldw	r3,40(r2)
 402e598:	e0bffc17 	ldw	r2,-16(fp)
 402e59c:	1885883a 	add	r2,r3,r2
 402e5a0:	10800284 	addi	r2,r2,10
 402e5a4:	1080002b 	ldhuio	r2,0(r2)
 402e5a8:	10bfffcc 	andi	r2,r2,65535
 402e5ac:	1006943a 	slli	r3,r2,16
 402e5b0:	d0a02917 	ldw	r2,-32604(gp)
 402e5b4:	11000a17 	ldw	r4,40(r2)
 402e5b8:	e0bffc17 	ldw	r2,-16(fp)
 402e5bc:	2085883a 	add	r2,r4,r2
 402e5c0:	10800204 	addi	r2,r2,8
 402e5c4:	1080002b 	ldhuio	r2,0(r2)
 402e5c8:	10bfffcc 	andi	r2,r2,65535
 402e5cc:	10bfffcc 	andi	r2,r2,65535
 402e5d0:	1884b03a 	or	r2,r3,r2
 402e5d4:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 402e5d8:	d0a02917 	ldw	r2,-32604(gp)
 402e5dc:	10c00a17 	ldw	r3,40(r2)
 402e5e0:	e0bffc17 	ldw	r2,-16(fp)
 402e5e4:	1885883a 	add	r2,r3,r2
 402e5e8:	10800384 	addi	r2,r2,14
 402e5ec:	1080002b 	ldhuio	r2,0(r2)
 402e5f0:	10bfffcc 	andi	r2,r2,65535
 402e5f4:	1006943a 	slli	r3,r2,16
 402e5f8:	d0a02917 	ldw	r2,-32604(gp)
 402e5fc:	11000a17 	ldw	r4,40(r2)
 402e600:	e0bffc17 	ldw	r2,-16(fp)
 402e604:	2085883a 	add	r2,r4,r2
 402e608:	10800304 	addi	r2,r2,12
 402e60c:	1080002b 	ldhuio	r2,0(r2)
 402e610:	10bfffcc 	andi	r2,r2,65535
 402e614:	10bfffcc 	andi	r2,r2,65535
 402e618:	1884b03a 	or	r2,r3,r2
 402e61c:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 402e620:	e0bfff17 	ldw	r2,-4(fp)
 402e624:	0080070e 	bge	zero,r2,402e644 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
 402e628:	00800044 	movi	r2,1
 402e62c:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 402e630:	e0bfff17 	ldw	r2,-4(fp)
 402e634:	d0a02815 	stw	r2,-32608(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 402e638:	e0bffe17 	ldw	r2,-8(fp)
 402e63c:	d0a02715 	stw	r2,-32612(gp)
						break;
 402e640:	00000606 	br	402e65c <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 402e644:	e0bffa17 	ldw	r2,-24(fp)
 402e648:	10800044 	addi	r2,r2,1
 402e64c:	e0bffa15 	stw	r2,-24(fp)
 402e650:	e0bffa17 	ldw	r2,-24(fp)
 402e654:	10800110 	cmplti	r2,r2,4
 402e658:	103fb51e 	bne	r2,zero,402e530 <__flash_rwdata_start+0xffff8ce0>
				}
			}
		}
	}

	return result;
 402e65c:	e0bff917 	ldw	r2,-28(fp)
}
 402e660:	e037883a 	mov	sp,fp
 402e664:	dfc00117 	ldw	ra,4(sp)
 402e668:	df000017 	ldw	fp,0(sp)
 402e66c:	dec00204 	addi	sp,sp,8
 402e670:	f800283a 	ret

0402e674 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 402e674:	defff804 	addi	sp,sp,-32
 402e678:	dfc00715 	stw	ra,28(sp)
 402e67c:	df000615 	stw	fp,24(sp)
 402e680:	df000604 	addi	fp,sp,24
 402e684:	e13ffc15 	stw	r4,-16(fp)
 402e688:	e17ffd15 	stw	r5,-12(fp)
 402e68c:	e1bffe15 	stw	r6,-8(fp)
 402e690:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 402e694:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 402e698:	e0bffc17 	ldw	r2,-16(fp)
 402e69c:	108007cc 	andi	r2,r2,31
 402e6a0:	10008d1e 	bne	r2,zero,402e8d8 <Read_File_Record_At_Offset+0x264>
 402e6a4:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 402e6a8:	10008b26 	beq	r2,zero,402e8d8 <Read_File_Record_At_Offset+0x264>
 402e6ac:	d0a02017 	ldw	r2,-32640(gp)
 402e6b0:	10008926 	beq	r2,zero,402e8d8 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 402e6b4:	e03ffb15 	stw	zero,-20(fp)
 402e6b8:	00001106 	br	402e700 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 402e6bc:	e0fffc17 	ldw	r3,-16(fp)
 402e6c0:	e0bffb17 	ldw	r2,-20(fp)
 402e6c4:	1885883a 	add	r2,r3,r2
 402e6c8:	1007883a 	mov	r3,r2
 402e6cc:	d0a02917 	ldw	r2,-32604(gp)
 402e6d0:	10800a17 	ldw	r2,40(r2)
 402e6d4:	1885883a 	add	r2,r3,r2
 402e6d8:	10800023 	ldbuio	r2,0(r2)
 402e6dc:	10803fcc 	andi	r2,r2,255
 402e6e0:	1009883a 	mov	r4,r2
 402e6e4:	e0fffd17 	ldw	r3,-12(fp)
 402e6e8:	e0bffb17 	ldw	r2,-20(fp)
 402e6ec:	1885883a 	add	r2,r3,r2
 402e6f0:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 402e6f4:	e0bffb17 	ldw	r2,-20(fp)
 402e6f8:	10800044 	addi	r2,r2,1
 402e6fc:	e0bffb15 	stw	r2,-20(fp)
 402e700:	e0bffb17 	ldw	r2,-20(fp)
 402e704:	10800210 	cmplti	r2,r2,8
 402e708:	103fec1e 	bne	r2,zero,402e6bc <__flash_rwdata_start+0xffff8e6c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 402e70c:	e03ffb15 	stw	zero,-20(fp)
 402e710:	00001306 	br	402e760 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 402e714:	e0fffc17 	ldw	r3,-16(fp)
 402e718:	e0bffb17 	ldw	r2,-20(fp)
 402e71c:	1885883a 	add	r2,r3,r2
 402e720:	1007883a 	mov	r3,r2
 402e724:	d0a02917 	ldw	r2,-32604(gp)
 402e728:	10800a17 	ldw	r2,40(r2)
 402e72c:	1885883a 	add	r2,r3,r2
 402e730:	10800204 	addi	r2,r2,8
 402e734:	10800023 	ldbuio	r2,0(r2)
 402e738:	10803fcc 	andi	r2,r2,255
 402e73c:	1009883a 	mov	r4,r2
 402e740:	e0fffd17 	ldw	r3,-12(fp)
 402e744:	e0bffb17 	ldw	r2,-20(fp)
 402e748:	1885883a 	add	r2,r3,r2
 402e74c:	10800204 	addi	r2,r2,8
 402e750:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 402e754:	e0bffb17 	ldw	r2,-20(fp)
 402e758:	10800044 	addi	r2,r2,1
 402e75c:	e0bffb15 	stw	r2,-20(fp)
 402e760:	e0bffb17 	ldw	r2,-20(fp)
 402e764:	108000d0 	cmplti	r2,r2,3
 402e768:	103fea1e 	bne	r2,zero,402e714 <__flash_rwdata_start+0xffff8ec4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 402e76c:	d0a02917 	ldw	r2,-32604(gp)
 402e770:	10c00a17 	ldw	r3,40(r2)
 402e774:	e0bffc17 	ldw	r2,-16(fp)
 402e778:	1885883a 	add	r2,r3,r2
 402e77c:	108002c4 	addi	r2,r2,11
 402e780:	10800023 	ldbuio	r2,0(r2)
 402e784:	10803fcc 	andi	r2,r2,255
 402e788:	1007883a 	mov	r3,r2
 402e78c:	e0bffd17 	ldw	r2,-12(fp)
 402e790:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 402e794:	d0a02917 	ldw	r2,-32604(gp)
 402e798:	10c00a17 	ldw	r3,40(r2)
 402e79c:	e0bffc17 	ldw	r2,-16(fp)
 402e7a0:	1885883a 	add	r2,r3,r2
 402e7a4:	10800384 	addi	r2,r2,14
 402e7a8:	1080002b 	ldhuio	r2,0(r2)
 402e7ac:	10bfffcc 	andi	r2,r2,65535
 402e7b0:	1007883a 	mov	r3,r2
 402e7b4:	e0bffd17 	ldw	r2,-12(fp)
 402e7b8:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 402e7bc:	d0a02917 	ldw	r2,-32604(gp)
 402e7c0:	10c00a17 	ldw	r3,40(r2)
 402e7c4:	e0bffc17 	ldw	r2,-16(fp)
 402e7c8:	1885883a 	add	r2,r3,r2
 402e7cc:	10800404 	addi	r2,r2,16
 402e7d0:	1080002b 	ldhuio	r2,0(r2)
 402e7d4:	10bfffcc 	andi	r2,r2,65535
 402e7d8:	1007883a 	mov	r3,r2
 402e7dc:	e0bffd17 	ldw	r2,-12(fp)
 402e7e0:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 402e7e4:	d0a02917 	ldw	r2,-32604(gp)
 402e7e8:	10c00a17 	ldw	r3,40(r2)
 402e7ec:	e0bffc17 	ldw	r2,-16(fp)
 402e7f0:	1885883a 	add	r2,r3,r2
 402e7f4:	10800484 	addi	r2,r2,18
 402e7f8:	1080002b 	ldhuio	r2,0(r2)
 402e7fc:	10bfffcc 	andi	r2,r2,65535
 402e800:	1007883a 	mov	r3,r2
 402e804:	e0bffd17 	ldw	r2,-12(fp)
 402e808:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 402e80c:	d0a02917 	ldw	r2,-32604(gp)
 402e810:	10c00a17 	ldw	r3,40(r2)
 402e814:	e0bffc17 	ldw	r2,-16(fp)
 402e818:	1885883a 	add	r2,r3,r2
 402e81c:	10800584 	addi	r2,r2,22
 402e820:	1080002b 	ldhuio	r2,0(r2)
 402e824:	10bfffcc 	andi	r2,r2,65535
 402e828:	1007883a 	mov	r3,r2
 402e82c:	e0bffd17 	ldw	r2,-12(fp)
 402e830:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 402e834:	d0a02917 	ldw	r2,-32604(gp)
 402e838:	10c00a17 	ldw	r3,40(r2)
 402e83c:	e0bffc17 	ldw	r2,-16(fp)
 402e840:	1885883a 	add	r2,r3,r2
 402e844:	10800604 	addi	r2,r2,24
 402e848:	1080002b 	ldhuio	r2,0(r2)
 402e84c:	10bfffcc 	andi	r2,r2,65535
 402e850:	1007883a 	mov	r3,r2
 402e854:	e0bffd17 	ldw	r2,-12(fp)
 402e858:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 402e85c:	d0a02917 	ldw	r2,-32604(gp)
 402e860:	10c00a17 	ldw	r3,40(r2)
 402e864:	e0bffc17 	ldw	r2,-16(fp)
 402e868:	1885883a 	add	r2,r3,r2
 402e86c:	10800684 	addi	r2,r2,26
 402e870:	1080002b 	ldhuio	r2,0(r2)
 402e874:	10bfffcc 	andi	r2,r2,65535
 402e878:	1007883a 	mov	r3,r2
 402e87c:	e0bffd17 	ldw	r2,-12(fp)
 402e880:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 402e884:	d0a02917 	ldw	r2,-32604(gp)
 402e888:	10c00a17 	ldw	r3,40(r2)
 402e88c:	e0bffc17 	ldw	r2,-16(fp)
 402e890:	1885883a 	add	r2,r3,r2
 402e894:	10800704 	addi	r2,r2,28
 402e898:	10800037 	ldwio	r2,0(r2)
 402e89c:	1007883a 	mov	r3,r2
 402e8a0:	e0bffd17 	ldw	r2,-12(fp)
 402e8a4:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 402e8a8:	e0bffd17 	ldw	r2,-12(fp)
 402e8ac:	e0fffe17 	ldw	r3,-8(fp)
 402e8b0:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
 402e8b4:	e0bffd17 	ldw	r2,-12(fp)
 402e8b8:	e0ffff17 	ldw	r3,-4(fp)
 402e8bc:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
 402e8c0:	e0bffc17 	ldw	r2,-16(fp)
 402e8c4:	1007883a 	mov	r3,r2
 402e8c8:	e0bffd17 	ldw	r2,-12(fp)
 402e8cc:	10c00c0d 	sth	r3,48(r2)
		result = true;
 402e8d0:	00800044 	movi	r2,1
 402e8d4:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
 402e8d8:	e0bffa17 	ldw	r2,-24(fp)
}
 402e8dc:	e037883a 	mov	sp,fp
 402e8e0:	dfc00117 	ldw	ra,4(sp)
 402e8e4:	df000017 	ldw	fp,0(sp)
 402e8e8:	dec00204 	addi	sp,sp,8
 402e8ec:	f800283a 	ret

0402e8f0 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 402e8f0:	defff904 	addi	sp,sp,-28
 402e8f4:	dfc00615 	stw	ra,24(sp)
 402e8f8:	df000515 	stw	fp,20(sp)
 402e8fc:	df000504 	addi	fp,sp,20
 402e900:	e13ffe15 	stw	r4,-8(fp)
 402e904:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 402e908:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 402e90c:	e0bffe17 	ldw	r2,-8(fp)
 402e910:	108007cc 	andi	r2,r2,31
 402e914:	1000931e 	bne	r2,zero,402eb64 <Write_File_Record_At_Offset+0x274>
 402e918:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 402e91c:	10009126 	beq	r2,zero,402eb64 <Write_File_Record_At_Offset+0x274>
 402e920:	d0a02017 	ldw	r2,-32640(gp)
 402e924:	10008f26 	beq	r2,zero,402eb64 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 402e928:	e03ffc15 	stw	zero,-16(fp)
 402e92c:	00001f06 	br	402e9ac <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
 402e930:	e0bffc17 	ldw	r2,-16(fp)
 402e934:	10800044 	addi	r2,r2,1
 402e938:	e0ffff17 	ldw	r3,-4(fp)
 402e93c:	1885883a 	add	r2,r3,r2
 402e940:	10800003 	ldbu	r2,0(r2)
 402e944:	10803fcc 	andi	r2,r2,255
 402e948:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
 402e94c:	e0bffd0f 	ldh	r2,-12(fp)
 402e950:	1004923a 	slli	r2,r2,8
 402e954:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
 402e958:	e0ffff17 	ldw	r3,-4(fp)
 402e95c:	e0bffc17 	ldw	r2,-16(fp)
 402e960:	1885883a 	add	r2,r3,r2
 402e964:	10800003 	ldbu	r2,0(r2)
 402e968:	10c03fcc 	andi	r3,r2,255
 402e96c:	e0bffd0b 	ldhu	r2,-12(fp)
 402e970:	1884b03a 	or	r2,r3,r2
 402e974:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 402e978:	e0fffe17 	ldw	r3,-8(fp)
 402e97c:	e0bffc17 	ldw	r2,-16(fp)
 402e980:	1885883a 	add	r2,r3,r2
 402e984:	1007883a 	mov	r3,r2
 402e988:	d0a02917 	ldw	r2,-32604(gp)
 402e98c:	10800a17 	ldw	r2,40(r2)
 402e990:	1885883a 	add	r2,r3,r2
 402e994:	1007883a 	mov	r3,r2
 402e998:	e0bffd0f 	ldh	r2,-12(fp)
 402e99c:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 402e9a0:	e0bffc17 	ldw	r2,-16(fp)
 402e9a4:	10800084 	addi	r2,r2,2
 402e9a8:	e0bffc15 	stw	r2,-16(fp)
 402e9ac:	e0bffc17 	ldw	r2,-16(fp)
 402e9b0:	10800210 	cmplti	r2,r2,8
 402e9b4:	103fde1e 	bne	r2,zero,402e930 <__flash_rwdata_start+0xffff90e0>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 402e9b8:	e03ffc15 	stw	zero,-16(fp)
 402e9bc:	00001306 	br	402ea0c <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 402e9c0:	e0fffe17 	ldw	r3,-8(fp)
 402e9c4:	e0bffc17 	ldw	r2,-16(fp)
 402e9c8:	1885883a 	add	r2,r3,r2
 402e9cc:	1007883a 	mov	r3,r2
 402e9d0:	d0a02917 	ldw	r2,-32604(gp)
 402e9d4:	10800a17 	ldw	r2,40(r2)
 402e9d8:	1885883a 	add	r2,r3,r2
 402e9dc:	10800204 	addi	r2,r2,8
 402e9e0:	1009883a 	mov	r4,r2
 402e9e4:	e0ffff17 	ldw	r3,-4(fp)
 402e9e8:	e0bffc17 	ldw	r2,-16(fp)
 402e9ec:	1885883a 	add	r2,r3,r2
 402e9f0:	10800204 	addi	r2,r2,8
 402e9f4:	10800003 	ldbu	r2,0(r2)
 402e9f8:	10803fcc 	andi	r2,r2,255
 402e9fc:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 402ea00:	e0bffc17 	ldw	r2,-16(fp)
 402ea04:	10800044 	addi	r2,r2,1
 402ea08:	e0bffc15 	stw	r2,-16(fp)
 402ea0c:	e0bffc17 	ldw	r2,-16(fp)
 402ea10:	108000d0 	cmplti	r2,r2,3
 402ea14:	103fea1e 	bne	r2,zero,402e9c0 <__flash_rwdata_start+0xffff9170>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 402ea18:	d0a02917 	ldw	r2,-32604(gp)
 402ea1c:	10c00a17 	ldw	r3,40(r2)
 402ea20:	e0bffe17 	ldw	r2,-8(fp)
 402ea24:	1885883a 	add	r2,r3,r2
 402ea28:	108002c4 	addi	r2,r2,11
 402ea2c:	1007883a 	mov	r3,r2
 402ea30:	e0bfff17 	ldw	r2,-4(fp)
 402ea34:	108002c3 	ldbu	r2,11(r2)
 402ea38:	10803fcc 	andi	r2,r2,255
 402ea3c:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 402ea40:	d0a02917 	ldw	r2,-32604(gp)
 402ea44:	10c00a17 	ldw	r3,40(r2)
 402ea48:	e0bffe17 	ldw	r2,-8(fp)
 402ea4c:	1885883a 	add	r2,r3,r2
 402ea50:	10800384 	addi	r2,r2,14
 402ea54:	1007883a 	mov	r3,r2
 402ea58:	e0bfff17 	ldw	r2,-4(fp)
 402ea5c:	1080030b 	ldhu	r2,12(r2)
 402ea60:	10bfffcc 	andi	r2,r2,65535
 402ea64:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 402ea68:	d0a02917 	ldw	r2,-32604(gp)
 402ea6c:	10c00a17 	ldw	r3,40(r2)
 402ea70:	e0bffe17 	ldw	r2,-8(fp)
 402ea74:	1885883a 	add	r2,r3,r2
 402ea78:	10800404 	addi	r2,r2,16
 402ea7c:	1007883a 	mov	r3,r2
 402ea80:	e0bfff17 	ldw	r2,-4(fp)
 402ea84:	1080038b 	ldhu	r2,14(r2)
 402ea88:	10bfffcc 	andi	r2,r2,65535
 402ea8c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 402ea90:	d0a02917 	ldw	r2,-32604(gp)
 402ea94:	10c00a17 	ldw	r3,40(r2)
 402ea98:	e0bffe17 	ldw	r2,-8(fp)
 402ea9c:	1885883a 	add	r2,r3,r2
 402eaa0:	10800484 	addi	r2,r2,18
 402eaa4:	1007883a 	mov	r3,r2
 402eaa8:	e0bfff17 	ldw	r2,-4(fp)
 402eaac:	1080040b 	ldhu	r2,16(r2)
 402eab0:	10bfffcc 	andi	r2,r2,65535
 402eab4:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 402eab8:	d0a02917 	ldw	r2,-32604(gp)
 402eabc:	10c00a17 	ldw	r3,40(r2)
 402eac0:	e0bffe17 	ldw	r2,-8(fp)
 402eac4:	1885883a 	add	r2,r3,r2
 402eac8:	10800584 	addi	r2,r2,22
 402eacc:	1007883a 	mov	r3,r2
 402ead0:	e0bfff17 	ldw	r2,-4(fp)
 402ead4:	1080048b 	ldhu	r2,18(r2)
 402ead8:	10bfffcc 	andi	r2,r2,65535
 402eadc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 402eae0:	d0a02917 	ldw	r2,-32604(gp)
 402eae4:	10c00a17 	ldw	r3,40(r2)
 402eae8:	e0bffe17 	ldw	r2,-8(fp)
 402eaec:	1885883a 	add	r2,r3,r2
 402eaf0:	10800604 	addi	r2,r2,24
 402eaf4:	1007883a 	mov	r3,r2
 402eaf8:	e0bfff17 	ldw	r2,-4(fp)
 402eafc:	1080050b 	ldhu	r2,20(r2)
 402eb00:	10bfffcc 	andi	r2,r2,65535
 402eb04:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 402eb08:	d0a02917 	ldw	r2,-32604(gp)
 402eb0c:	10c00a17 	ldw	r3,40(r2)
 402eb10:	e0bffe17 	ldw	r2,-8(fp)
 402eb14:	1885883a 	add	r2,r3,r2
 402eb18:	10800684 	addi	r2,r2,26
 402eb1c:	1007883a 	mov	r3,r2
 402eb20:	e0bfff17 	ldw	r2,-4(fp)
 402eb24:	1080058b 	ldhu	r2,22(r2)
 402eb28:	10bfffcc 	andi	r2,r2,65535
 402eb2c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 402eb30:	d0a02917 	ldw	r2,-32604(gp)
 402eb34:	10c00a17 	ldw	r3,40(r2)
 402eb38:	e0bffe17 	ldw	r2,-8(fp)
 402eb3c:	1885883a 	add	r2,r3,r2
 402eb40:	10800704 	addi	r2,r2,28
 402eb44:	1007883a 	mov	r3,r2
 402eb48:	e0bfff17 	ldw	r2,-4(fp)
 402eb4c:	10800617 	ldw	r2,24(r2)
 402eb50:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
 402eb54:	00800044 	movi	r2,1
 402eb58:	d0a02a15 	stw	r2,-32600(gp)
        result = true;
 402eb5c:	00800044 	movi	r2,1
 402eb60:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 402eb64:	e0bffb17 	ldw	r2,-20(fp)
}
 402eb68:	e037883a 	mov	sp,fp
 402eb6c:	dfc00117 	ldw	ra,4(sp)
 402eb70:	df000017 	ldw	fp,0(sp)
 402eb74:	dec00204 	addi	sp,sp,8
 402eb78:	f800283a 	ret

0402eb7c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 402eb7c:	defff804 	addi	sp,sp,-32
 402eb80:	dfc00715 	stw	ra,28(sp)
 402eb84:	df000615 	stw	fp,24(sp)
 402eb88:	dc000515 	stw	r16,20(sp)
 402eb8c:	df000604 	addi	fp,sp,24
 402eb90:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
 402eb94:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
 402eb98:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 402eb9c:	e17ffe17 	ldw	r5,-8(fp)
 402eba0:	0009883a 	mov	r4,zero
 402eba4:	402e2640 	call	402e264 <Read_Sector_Data>
 402eba8:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 402ebac:	d0a02917 	ldw	r2,-32604(gp)
 402ebb0:	10800a17 	ldw	r2,40(r2)
 402ebb4:	10807f84 	addi	r2,r2,510
 402ebb8:	1080002b 	ldhuio	r2,0(r2)
 402ebbc:	10bfffcc 	andi	r2,r2,65535
 402ebc0:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 402ebc4:	e0bffd0f 	ldh	r2,-12(fp)
 402ebc8:	10ffffcc 	andi	r3,r2,65535
 402ebcc:	00aa9554 	movui	r2,43605
 402ebd0:	18818a1e 	bne	r3,r2,402f1fc <Check_for_DOS_FAT+0x680>
 402ebd4:	e0bffa17 	ldw	r2,-24(fp)
 402ebd8:	10018826 	beq	r2,zero,402f1fc <Check_for_DOS_FAT+0x680>
	{
		int num_clusters = 0;
 402ebdc:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 402ebe0:	d0a02917 	ldw	r2,-32604(gp)
 402ebe4:	10800a17 	ldw	r2,40(r2)
 402ebe8:	10800023 	ldbuio	r2,0(r2)
 402ebec:	10803fcc 	andi	r2,r2,255
 402ebf0:	1007883a 	mov	r3,r2
 402ebf4:	00800034 	movhi	r2,0
 402ebf8:	10885a04 	addi	r2,r2,8552
 402ebfc:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 402ec00:	d0a02917 	ldw	r2,-32604(gp)
 402ec04:	10800a17 	ldw	r2,40(r2)
 402ec08:	10800044 	addi	r2,r2,1
 402ec0c:	10800023 	ldbuio	r2,0(r2)
 402ec10:	10803fcc 	andi	r2,r2,255
 402ec14:	1007883a 	mov	r3,r2
 402ec18:	00800034 	movhi	r2,0
 402ec1c:	10885a04 	addi	r2,r2,8552
 402ec20:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 402ec24:	d0a02917 	ldw	r2,-32604(gp)
 402ec28:	10800a17 	ldw	r2,40(r2)
 402ec2c:	10800084 	addi	r2,r2,2
 402ec30:	10800023 	ldbuio	r2,0(r2)
 402ec34:	10803fcc 	andi	r2,r2,255
 402ec38:	1007883a 	mov	r3,r2
 402ec3c:	00800034 	movhi	r2,0
 402ec40:	10885a04 	addi	r2,r2,8552
 402ec44:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 402ec48:	e03ffb15 	stw	zero,-20(fp)
 402ec4c:	00001106 	br	402ec94 <Check_for_DOS_FAT+0x118>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 402ec50:	d0a02917 	ldw	r2,-32604(gp)
 402ec54:	10c00a17 	ldw	r3,40(r2)
 402ec58:	e0bffb17 	ldw	r2,-20(fp)
 402ec5c:	1885883a 	add	r2,r3,r2
 402ec60:	108000c4 	addi	r2,r2,3
 402ec64:	10800023 	ldbuio	r2,0(r2)
 402ec68:	10803fcc 	andi	r2,r2,255
 402ec6c:	1009883a 	mov	r4,r2
 402ec70:	00800034 	movhi	r2,0
 402ec74:	10885a04 	addi	r2,r2,8552
 402ec78:	e0fffb17 	ldw	r3,-20(fp)
 402ec7c:	10c5883a 	add	r2,r2,r3
 402ec80:	108000c4 	addi	r2,r2,3
 402ec84:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 402ec88:	e0bffb17 	ldw	r2,-20(fp)
 402ec8c:	10800044 	addi	r2,r2,1
 402ec90:	e0bffb15 	stw	r2,-20(fp)
 402ec94:	e0bffb17 	ldw	r2,-20(fp)
 402ec98:	10800210 	cmplti	r2,r2,8
 402ec9c:	103fec1e 	bne	r2,zero,402ec50 <__flash_rwdata_start+0xffff9400>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 402eca0:	d0a02917 	ldw	r2,-32604(gp)
 402eca4:	10800a17 	ldw	r2,40(r2)
 402eca8:	10800304 	addi	r2,r2,12
 402ecac:	10800023 	ldbuio	r2,0(r2)
 402ecb0:	10803fcc 	andi	r2,r2,255
 402ecb4:	1004923a 	slli	r2,r2,8
 402ecb8:	1007883a 	mov	r3,r2
 402ecbc:	d0a02917 	ldw	r2,-32604(gp)
 402ecc0:	10800a17 	ldw	r2,40(r2)
 402ecc4:	108002c4 	addi	r2,r2,11
 402ecc8:	10800023 	ldbuio	r2,0(r2)
 402eccc:	10803fcc 	andi	r2,r2,255
 402ecd0:	10803fcc 	andi	r2,r2,255
 402ecd4:	1080201c 	xori	r2,r2,128
 402ecd8:	10bfe004 	addi	r2,r2,-128
 402ecdc:	1884b03a 	or	r2,r3,r2
 402ece0:	1007883a 	mov	r3,r2
 402ece4:	00800034 	movhi	r2,0
 402ece8:	10885a04 	addi	r2,r2,8552
 402ecec:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 402ecf0:	d0a02917 	ldw	r2,-32604(gp)
 402ecf4:	10800a17 	ldw	r2,40(r2)
 402ecf8:	10800344 	addi	r2,r2,13
 402ecfc:	10800023 	ldbuio	r2,0(r2)
 402ed00:	10803fcc 	andi	r2,r2,255
 402ed04:	1007883a 	mov	r3,r2
 402ed08:	00800034 	movhi	r2,0
 402ed0c:	10885a04 	addi	r2,r2,8552
 402ed10:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 402ed14:	d0a02917 	ldw	r2,-32604(gp)
 402ed18:	10800a17 	ldw	r2,40(r2)
 402ed1c:	10800384 	addi	r2,r2,14
 402ed20:	1080002b 	ldhuio	r2,0(r2)
 402ed24:	10bfffcc 	andi	r2,r2,65535
 402ed28:	1007883a 	mov	r3,r2
 402ed2c:	00800034 	movhi	r2,0
 402ed30:	10885a04 	addi	r2,r2,8552
 402ed34:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 402ed38:	d0a02917 	ldw	r2,-32604(gp)
 402ed3c:	10800a17 	ldw	r2,40(r2)
 402ed40:	10800404 	addi	r2,r2,16
 402ed44:	10800023 	ldbuio	r2,0(r2)
 402ed48:	10803fcc 	andi	r2,r2,255
 402ed4c:	1007883a 	mov	r3,r2
 402ed50:	00800034 	movhi	r2,0
 402ed54:	10885a04 	addi	r2,r2,8552
 402ed58:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 402ed5c:	d0a02917 	ldw	r2,-32604(gp)
 402ed60:	10800a17 	ldw	r2,40(r2)
 402ed64:	10800484 	addi	r2,r2,18
 402ed68:	10800023 	ldbuio	r2,0(r2)
 402ed6c:	10803fcc 	andi	r2,r2,255
 402ed70:	1004923a 	slli	r2,r2,8
 402ed74:	1007883a 	mov	r3,r2
 402ed78:	d0a02917 	ldw	r2,-32604(gp)
 402ed7c:	10800a17 	ldw	r2,40(r2)
 402ed80:	10800444 	addi	r2,r2,17
 402ed84:	10800023 	ldbuio	r2,0(r2)
 402ed88:	10803fcc 	andi	r2,r2,255
 402ed8c:	10803fcc 	andi	r2,r2,255
 402ed90:	1884b03a 	or	r2,r3,r2
 402ed94:	1007883a 	mov	r3,r2
 402ed98:	00800034 	movhi	r2,0
 402ed9c:	10885a04 	addi	r2,r2,8552
 402eda0:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 402eda4:	d0a02917 	ldw	r2,-32604(gp)
 402eda8:	10800a17 	ldw	r2,40(r2)
 402edac:	10800504 	addi	r2,r2,20
 402edb0:	10800023 	ldbuio	r2,0(r2)
 402edb4:	10803fcc 	andi	r2,r2,255
 402edb8:	1004923a 	slli	r2,r2,8
 402edbc:	1007883a 	mov	r3,r2
 402edc0:	d0a02917 	ldw	r2,-32604(gp)
 402edc4:	10800a17 	ldw	r2,40(r2)
 402edc8:	108004c4 	addi	r2,r2,19
 402edcc:	10800023 	ldbuio	r2,0(r2)
 402edd0:	10803fcc 	andi	r2,r2,255
 402edd4:	10803fcc 	andi	r2,r2,255
 402edd8:	1884b03a 	or	r2,r3,r2
 402eddc:	1007883a 	mov	r3,r2
 402ede0:	00800034 	movhi	r2,0
 402ede4:	10885a04 	addi	r2,r2,8552
 402ede8:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 402edec:	d0a02917 	ldw	r2,-32604(gp)
 402edf0:	10800a17 	ldw	r2,40(r2)
 402edf4:	10800544 	addi	r2,r2,21
 402edf8:	10800023 	ldbuio	r2,0(r2)
 402edfc:	10803fcc 	andi	r2,r2,255
 402ee00:	1007883a 	mov	r3,r2
 402ee04:	00800034 	movhi	r2,0
 402ee08:	10885a04 	addi	r2,r2,8552
 402ee0c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 402ee10:	d0a02917 	ldw	r2,-32604(gp)
 402ee14:	10800a17 	ldw	r2,40(r2)
 402ee18:	10800584 	addi	r2,r2,22
 402ee1c:	1080002b 	ldhuio	r2,0(r2)
 402ee20:	10bfffcc 	andi	r2,r2,65535
 402ee24:	1007883a 	mov	r3,r2
 402ee28:	00800034 	movhi	r2,0
 402ee2c:	10885a04 	addi	r2,r2,8552
 402ee30:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 402ee34:	d0a02917 	ldw	r2,-32604(gp)
 402ee38:	10800a17 	ldw	r2,40(r2)
 402ee3c:	10800604 	addi	r2,r2,24
 402ee40:	1080002b 	ldhuio	r2,0(r2)
 402ee44:	10bfffcc 	andi	r2,r2,65535
 402ee48:	1007883a 	mov	r3,r2
 402ee4c:	00800034 	movhi	r2,0
 402ee50:	10885a04 	addi	r2,r2,8552
 402ee54:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 402ee58:	d0a02917 	ldw	r2,-32604(gp)
 402ee5c:	10800a17 	ldw	r2,40(r2)
 402ee60:	10800684 	addi	r2,r2,26
 402ee64:	1080002b 	ldhuio	r2,0(r2)
 402ee68:	10bfffcc 	andi	r2,r2,65535
 402ee6c:	1007883a 	mov	r3,r2
 402ee70:	00800034 	movhi	r2,0
 402ee74:	10885a04 	addi	r2,r2,8552
 402ee78:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 402ee7c:	d0a02917 	ldw	r2,-32604(gp)
 402ee80:	10800a17 	ldw	r2,40(r2)
 402ee84:	10800704 	addi	r2,r2,28
 402ee88:	10800037 	ldwio	r2,0(r2)
 402ee8c:	1007883a 	mov	r3,r2
 402ee90:	00800034 	movhi	r2,0
 402ee94:	10885a04 	addi	r2,r2,8552
 402ee98:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 402ee9c:	d0a02917 	ldw	r2,-32604(gp)
 402eea0:	10800a17 	ldw	r2,40(r2)
 402eea4:	10800804 	addi	r2,r2,32
 402eea8:	10800037 	ldwio	r2,0(r2)
 402eeac:	1007883a 	mov	r3,r2
 402eeb0:	00800034 	movhi	r2,0
 402eeb4:	10885a04 	addi	r2,r2,8552
 402eeb8:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 402eebc:	d0a02917 	ldw	r2,-32604(gp)
 402eec0:	10800a17 	ldw	r2,40(r2)
 402eec4:	10800904 	addi	r2,r2,36
 402eec8:	10800023 	ldbuio	r2,0(r2)
 402eecc:	10803fcc 	andi	r2,r2,255
 402eed0:	1007883a 	mov	r3,r2
 402eed4:	00800034 	movhi	r2,0
 402eed8:	10885a04 	addi	r2,r2,8552
 402eedc:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 402eee0:	d0a02917 	ldw	r2,-32604(gp)
 402eee4:	10800a17 	ldw	r2,40(r2)
 402eee8:	10800944 	addi	r2,r2,37
 402eeec:	10800023 	ldbuio	r2,0(r2)
 402eef0:	10803fcc 	andi	r2,r2,255
 402eef4:	1007883a 	mov	r3,r2
 402eef8:	00800034 	movhi	r2,0
 402eefc:	10885a04 	addi	r2,r2,8552
 402ef00:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 402ef04:	d0a02917 	ldw	r2,-32604(gp)
 402ef08:	10800a17 	ldw	r2,40(r2)
 402ef0c:	10800984 	addi	r2,r2,38
 402ef10:	10800023 	ldbuio	r2,0(r2)
 402ef14:	10803fcc 	andi	r2,r2,255
 402ef18:	1007883a 	mov	r3,r2
 402ef1c:	00800034 	movhi	r2,0
 402ef20:	10885a04 	addi	r2,r2,8552
 402ef24:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 402ef28:	00800034 	movhi	r2,0
 402ef2c:	10885a04 	addi	r2,r2,8552
 402ef30:	1080040b 	ldhu	r2,16(r2)
 402ef34:	10ffffcc 	andi	r3,r2,65535
 402ef38:	00800034 	movhi	r2,0
 402ef3c:	10885a04 	addi	r2,r2,8552
 402ef40:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 402ef44:	00800034 	movhi	r2,0
 402ef48:	10885a04 	addi	r2,r2,8552
 402ef4c:	10c01117 	ldw	r3,68(r2)
 402ef50:	00800034 	movhi	r2,0
 402ef54:	10885a04 	addi	r2,r2,8552
 402ef58:	1080068b 	ldhu	r2,26(r2)
 402ef5c:	10bfffcc 	andi	r2,r2,65535
 402ef60:	1887883a 	add	r3,r3,r2
 402ef64:	00800034 	movhi	r2,0
 402ef68:	10885a04 	addi	r2,r2,8552
 402ef6c:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 402ef70:	00800034 	movhi	r2,0
 402ef74:	10885a04 	addi	r2,r2,8552
 402ef78:	10c01217 	ldw	r3,72(r2)
 402ef7c:	00800034 	movhi	r2,0
 402ef80:	10885a04 	addi	r2,r2,8552
 402ef84:	1080068b 	ldhu	r2,26(r2)
 402ef88:	10bfffcc 	andi	r2,r2,65535
 402ef8c:	1887883a 	add	r3,r3,r2
 402ef90:	00800034 	movhi	r2,0
 402ef94:	10885a04 	addi	r2,r2,8552
 402ef98:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 402ef9c:	00800034 	movhi	r2,0
 402efa0:	10885a04 	addi	r2,r2,8552
 402efa4:	14001317 	ldw	r16,76(r2)
 402efa8:	00800034 	movhi	r2,0
 402efac:	10885a04 	addi	r2,r2,8552
 402efb0:	1080050b 	ldhu	r2,20(r2)
 402efb4:	10bfffcc 	andi	r2,r2,65535
 402efb8:	1006917a 	slli	r3,r2,5
 402efbc:	00800034 	movhi	r2,0
 402efc0:	10885a04 	addi	r2,r2,8552
 402efc4:	1080030b 	ldhu	r2,12(r2)
 402efc8:	10bfffcc 	andi	r2,r2,65535
 402efcc:	100b883a 	mov	r5,r2
 402efd0:	1809883a 	mov	r4,r3
 402efd4:	402aa680 	call	402aa68 <__divsi3>
 402efd8:	8087883a 	add	r3,r16,r2
 402efdc:	00800034 	movhi	r2,0
 402efe0:	10885a04 	addi	r2,r2,8552
 402efe4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 402efe8:	00800034 	movhi	r2,0
 402efec:	10885a04 	addi	r2,r2,8552
 402eff0:	1080058b 	ldhu	r2,22(r2)
 402eff4:	10bfffcc 	andi	r2,r2,65535
 402eff8:	10000d26 	beq	r2,zero,402f030 <Check_for_DOS_FAT+0x4b4>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 402effc:	00800034 	movhi	r2,0
 402f000:	10885a04 	addi	r2,r2,8552
 402f004:	1080058b 	ldhu	r2,22(r2)
 402f008:	10ffffcc 	andi	r3,r2,65535
 402f00c:	00800034 	movhi	r2,0
 402f010:	10885a04 	addi	r2,r2,8552
 402f014:	10800383 	ldbu	r2,14(r2)
 402f018:	10803fcc 	andi	r2,r2,255
 402f01c:	100b883a 	mov	r5,r2
 402f020:	1809883a 	mov	r4,r3
 402f024:	402aa680 	call	402aa68 <__divsi3>
 402f028:	e0bffc15 	stw	r2,-16(fp)
 402f02c:	00000b06 	br	402f05c <Check_for_DOS_FAT+0x4e0>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 402f030:	00800034 	movhi	r2,0
 402f034:	10885a04 	addi	r2,r2,8552
 402f038:	10c00917 	ldw	r3,36(r2)
 402f03c:	00800034 	movhi	r2,0
 402f040:	10885a04 	addi	r2,r2,8552
 402f044:	10800383 	ldbu	r2,14(r2)
 402f048:	10803fcc 	andi	r2,r2,255
 402f04c:	100b883a 	mov	r5,r2
 402f050:	1809883a 	mov	r4,r3
 402f054:	402ab600 	call	402ab60 <__udivsi3>
 402f058:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
 402f05c:	e0bffc17 	ldw	r2,-16(fp)
 402f060:	1083fdc8 	cmpgei	r2,r2,4087
 402f064:	1000051e 	bne	r2,zero,402f07c <Check_for_DOS_FAT+0x500>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 402f068:	00800034 	movhi	r2,0
 402f06c:	10885a04 	addi	r2,r2,8552
 402f070:	00c00304 	movi	r3,12
 402f074:	10c01085 	stb	r3,66(r2)
 402f078:	00000c06 	br	402f0ac <Check_for_DOS_FAT+0x530>
		}
		else if (num_clusters <= 65517)
 402f07c:	e0bffc17 	ldw	r2,-16(fp)
 402f080:	00fffb54 	movui	r3,65517
 402f084:	18800516 	blt	r3,r2,402f09c <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 402f088:	00800034 	movhi	r2,0
 402f08c:	10885a04 	addi	r2,r2,8552
 402f090:	00c00404 	movi	r3,16
 402f094:	10c01085 	stb	r3,66(r2)
 402f098:	00000406 	br	402f0ac <Check_for_DOS_FAT+0x530>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 402f09c:	00800034 	movhi	r2,0
 402f0a0:	10885a04 	addi	r2,r2,8552
 402f0a4:	00c00804 	movi	r3,32
 402f0a8:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
 402f0ac:	e03ffb15 	stw	zero,-20(fp)
 402f0b0:	00001106 	br	402f0f8 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 402f0b4:	d0a02917 	ldw	r2,-32604(gp)
 402f0b8:	10c00a17 	ldw	r3,40(r2)
 402f0bc:	e0bffb17 	ldw	r2,-20(fp)
 402f0c0:	1885883a 	add	r2,r3,r2
 402f0c4:	108009c4 	addi	r2,r2,39
 402f0c8:	10800023 	ldbuio	r2,0(r2)
 402f0cc:	10803fcc 	andi	r2,r2,255
 402f0d0:	1009883a 	mov	r4,r2
 402f0d4:	00800034 	movhi	r2,0
 402f0d8:	10885a04 	addi	r2,r2,8552
 402f0dc:	e0fffb17 	ldw	r3,-20(fp)
 402f0e0:	10c5883a 	add	r2,r2,r3
 402f0e4:	10800ac4 	addi	r2,r2,43
 402f0e8:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 402f0ec:	e0bffb17 	ldw	r2,-20(fp)
 402f0f0:	10800044 	addi	r2,r2,1
 402f0f4:	e0bffb15 	stw	r2,-20(fp)
 402f0f8:	e0bffb17 	ldw	r2,-20(fp)
 402f0fc:	10800110 	cmplti	r2,r2,4
 402f100:	103fec1e 	bne	r2,zero,402f0b4 <__flash_rwdata_start+0xffff9864>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 402f104:	e03ffb15 	stw	zero,-20(fp)
 402f108:	00001106 	br	402f150 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 402f10c:	d0a02917 	ldw	r2,-32604(gp)
 402f110:	10c00a17 	ldw	r3,40(r2)
 402f114:	e0bffb17 	ldw	r2,-20(fp)
 402f118:	1885883a 	add	r2,r3,r2
 402f11c:	10800ac4 	addi	r2,r2,43
 402f120:	10800023 	ldbuio	r2,0(r2)
 402f124:	10803fcc 	andi	r2,r2,255
 402f128:	1009883a 	mov	r4,r2
 402f12c:	00800034 	movhi	r2,0
 402f130:	10885a04 	addi	r2,r2,8552
 402f134:	e0fffb17 	ldw	r3,-20(fp)
 402f138:	10c5883a 	add	r2,r2,r3
 402f13c:	10800bc4 	addi	r2,r2,47
 402f140:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 402f144:	e0bffb17 	ldw	r2,-20(fp)
 402f148:	10800044 	addi	r2,r2,1
 402f14c:	e0bffb15 	stw	r2,-20(fp)
 402f150:	e0bffb17 	ldw	r2,-20(fp)
 402f154:	108002d0 	cmplti	r2,r2,11
 402f158:	103fec1e 	bne	r2,zero,402f10c <__flash_rwdata_start+0xffff98bc>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 402f15c:	e03ffb15 	stw	zero,-20(fp)
 402f160:	00001106 	br	402f1a8 <Check_for_DOS_FAT+0x62c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 402f164:	d0a02917 	ldw	r2,-32604(gp)
 402f168:	10c00a17 	ldw	r3,40(r2)
 402f16c:	e0bffb17 	ldw	r2,-20(fp)
 402f170:	1885883a 	add	r2,r3,r2
 402f174:	10800d84 	addi	r2,r2,54
 402f178:	10800023 	ldbuio	r2,0(r2)
 402f17c:	10803fcc 	andi	r2,r2,255
 402f180:	1009883a 	mov	r4,r2
 402f184:	00800034 	movhi	r2,0
 402f188:	10885a04 	addi	r2,r2,8552
 402f18c:	e0fffb17 	ldw	r3,-20(fp)
 402f190:	10c5883a 	add	r2,r2,r3
 402f194:	10800e84 	addi	r2,r2,58
 402f198:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 402f19c:	e0bffb17 	ldw	r2,-20(fp)
 402f1a0:	10800044 	addi	r2,r2,1
 402f1a4:	e0bffb15 	stw	r2,-20(fp)
 402f1a8:	e0bffb17 	ldw	r2,-20(fp)
 402f1ac:	10800210 	cmplti	r2,r2,8
 402f1b0:	103fec1e 	bne	r2,zero,402f164 <__flash_rwdata_start+0xffff9914>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 402f1b4:	e03ffb15 	stw	zero,-20(fp)
 402f1b8:	00000a06 	br	402f1e4 <Check_for_DOS_FAT+0x668>
		{
			active_files[counter].in_use = false;
 402f1bc:	00800034 	movhi	r2,0
 402f1c0:	10886f04 	addi	r2,r2,8636
 402f1c4:	e0fffb17 	ldw	r3,-20(fp)
 402f1c8:	180691ba 	slli	r3,r3,6
 402f1cc:	10c5883a 	add	r2,r2,r3
 402f1d0:	10800f04 	addi	r2,r2,60
 402f1d4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 402f1d8:	e0bffb17 	ldw	r2,-20(fp)
 402f1dc:	10800044 	addi	r2,r2,1
 402f1e0:	e0bffb15 	stw	r2,-20(fp)
 402f1e4:	e0bffb17 	ldw	r2,-20(fp)
 402f1e8:	10800510 	cmplti	r2,r2,20
 402f1ec:	103ff31e 	bne	r2,zero,402f1bc <__flash_rwdata_start+0xffff996c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 402f1f0:	00800044 	movi	r2,1
 402f1f4:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
 402f1f8:	00000106 	br	402f200 <Check_for_DOS_FAT+0x684>
		}
		result = true;
	}
    else
    {
        result = false;
 402f1fc:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
 402f200:	e0bffa17 	ldw	r2,-24(fp)
}
 402f204:	e6ffff04 	addi	sp,fp,-4
 402f208:	dfc00217 	ldw	ra,8(sp)
 402f20c:	df000117 	ldw	fp,4(sp)
 402f210:	dc000017 	ldw	r16,0(sp)
 402f214:	dec00304 	addi	sp,sp,12
 402f218:	f800283a 	ret

0402f21c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 402f21c:	defffc04 	addi	sp,sp,-16
 402f220:	dfc00315 	stw	ra,12(sp)
 402f224:	df000215 	stw	fp,8(sp)
 402f228:	df000204 	addi	fp,sp,8
	bool result = false;
 402f22c:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
 402f230:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 402f234:	10002e26 	beq	r2,zero,402f2f0 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
 402f238:	d0a02317 	ldw	r2,-32628(gp)
 402f23c:	1080000b 	ldhu	r2,0(r2)
 402f240:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 402f244:	d0202715 	stw	zero,-32612(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 402f248:	d0202815 	stw	zero,-32608(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 402f24c:	e0bfff0f 	ldh	r2,-4(fp)
 402f250:	10002716 	blt	r2,zero,402f2f0 <Look_for_FAT16+0xd4>
 402f254:	e0bfff0b 	ldhu	r2,-4(fp)
 402f258:	10bfffcc 	andi	r2,r2,65535
 402f25c:	1083000c 	andi	r2,r2,3072
 402f260:	10830020 	cmpeqi	r2,r2,3072
 402f264:	1000221e 	bne	r2,zero,402f2f0 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 402f268:	e0bfff0b 	ldhu	r2,-4(fp)
 402f26c:	10bfffcc 	andi	r2,r2,65535
 402f270:	1083000c 	andi	r2,r2,3072
 402f274:	10810018 	cmpnei	r2,r2,1024
 402f278:	1000031e 	bne	r2,zero,402f288 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 402f27c:	0009883a 	mov	r4,zero
 402f280:	402eb7c0 	call	402eb7c <Check_for_DOS_FAT>
 402f284:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 402f288:	e0bfff0b 	ldhu	r2,-4(fp)
 402f28c:	10bfffcc 	andi	r2,r2,65535
 402f290:	1083000c 	andi	r2,r2,3072
 402f294:	1000061e 	bne	r2,zero,402f2b0 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 402f298:	402e4d00 	call	402e4d0 <Check_for_Master_Boot_Record>
 402f29c:	10000426 	beq	r2,zero,402f2b0 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 402f2a0:	d0a02717 	ldw	r2,-32612(gp)
 402f2a4:	1009883a 	mov	r4,r2
 402f2a8:	402eb7c0 	call	402eb7c <Check_for_DOS_FAT>
 402f2ac:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
 402f2b0:	e0bffe17 	ldw	r2,-8(fp)
 402f2b4:	10800058 	cmpnei	r2,r2,1
 402f2b8:	10000d1e 	bne	r2,zero,402f2f0 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 402f2bc:	00800034 	movhi	r2,0
 402f2c0:	10885a04 	addi	r2,r2,8552
 402f2c4:	10801083 	ldbu	r2,66(r2)
 402f2c8:	10803fcc 	andi	r2,r2,255
 402f2cc:	10800420 	cmpeqi	r2,r2,16
 402f2d0:	1000021e 	bne	r2,zero,402f2dc <Look_for_FAT16+0xc0>
				{
					result = false;
 402f2d4:	e03ffe15 	stw	zero,-8(fp)
 402f2d8:	00000506 	br	402f2f0 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 402f2dc:	00800034 	movhi	r2,0
 402f2e0:	10885a04 	addi	r2,r2,8552
 402f2e4:	1080058b 	ldhu	r2,22(r2)
 402f2e8:	10bfffcc 	andi	r2,r2,65535
 402f2ec:	d0a02815 	stw	r2,-32608(gp)
				}
			}
		}
	}
	return result;
 402f2f0:	e0bffe17 	ldw	r2,-8(fp)
}
 402f2f4:	e037883a 	mov	sp,fp
 402f2f8:	dfc00117 	ldw	ra,4(sp)
 402f2fc:	df000017 	ldw	fp,0(sp)
 402f300:	dec00204 	addi	sp,sp,8
 402f304:	f800283a 	ret

0402f308 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 402f308:	defffb04 	addi	sp,sp,-20
 402f30c:	dfc00415 	stw	ra,16(sp)
 402f310:	df000315 	stw	fp,12(sp)
 402f314:	df000304 	addi	fp,sp,12
 402f318:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 402f31c:	e13fff17 	ldw	r4,-4(fp)
 402f320:	40206e80 	call	40206e8 <strlen>
 402f324:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
 402f328:	e03ffd15 	stw	zero,-12(fp)
 402f32c:	00001e06 	br	402f3a8 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 402f330:	e0bffd17 	ldw	r2,-12(fp)
 402f334:	e0ffff17 	ldw	r3,-4(fp)
 402f338:	1885883a 	add	r2,r3,r2
 402f33c:	10800003 	ldbu	r2,0(r2)
 402f340:	10803fcc 	andi	r2,r2,255
 402f344:	1080201c 	xori	r2,r2,128
 402f348:	10bfe004 	addi	r2,r2,-128
 402f34c:	10801850 	cmplti	r2,r2,97
 402f350:	1000121e 	bne	r2,zero,402f39c <filename_to_upper_case+0x94>
 402f354:	e0bffd17 	ldw	r2,-12(fp)
 402f358:	e0ffff17 	ldw	r3,-4(fp)
 402f35c:	1885883a 	add	r2,r3,r2
 402f360:	10800003 	ldbu	r2,0(r2)
 402f364:	10803fcc 	andi	r2,r2,255
 402f368:	1080201c 	xori	r2,r2,128
 402f36c:	10bfe004 	addi	r2,r2,-128
 402f370:	10801ec8 	cmpgei	r2,r2,123
 402f374:	1000091e 	bne	r2,zero,402f39c <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 402f378:	e0bffd17 	ldw	r2,-12(fp)
 402f37c:	e0ffff17 	ldw	r3,-4(fp)
 402f380:	1885883a 	add	r2,r3,r2
 402f384:	e0fffd17 	ldw	r3,-12(fp)
 402f388:	e13fff17 	ldw	r4,-4(fp)
 402f38c:	20c7883a 	add	r3,r4,r3
 402f390:	18c00003 	ldbu	r3,0(r3)
 402f394:	18fff804 	addi	r3,r3,-32
 402f398:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 402f39c:	e0bffd17 	ldw	r2,-12(fp)
 402f3a0:	10800044 	addi	r2,r2,1
 402f3a4:	e0bffd15 	stw	r2,-12(fp)
 402f3a8:	e0fffd17 	ldw	r3,-12(fp)
 402f3ac:	e0bffe17 	ldw	r2,-8(fp)
 402f3b0:	18bfdf16 	blt	r3,r2,402f330 <__flash_rwdata_start+0xffff9ae0>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 402f3b4:	0001883a 	nop
 402f3b8:	e037883a 	mov	sp,fp
 402f3bc:	dfc00117 	ldw	ra,4(sp)
 402f3c0:	df000017 	ldw	fp,0(sp)
 402f3c4:	dec00204 	addi	sp,sp,8
 402f3c8:	f800283a 	ret

0402f3cc <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 402f3cc:	defff804 	addi	sp,sp,-32
 402f3d0:	dfc00715 	stw	ra,28(sp)
 402f3d4:	df000615 	stw	fp,24(sp)
 402f3d8:	df000604 	addi	fp,sp,24
 402f3dc:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 402f3e0:	e13fff17 	ldw	r4,-4(fp)
 402f3e4:	40206e80 	call	40206e8 <strlen>
 402f3e8:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 402f3ec:	00bfffc4 	movi	r2,-1
 402f3f0:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
 402f3f4:	00bfffc4 	movi	r2,-1
 402f3f8:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
 402f3fc:	00800044 	movi	r2,1
 402f400:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 402f404:	e03ffa15 	stw	zero,-24(fp)
 402f408:	00006d06 	br	402f5c0 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
 402f40c:	e0bffa17 	ldw	r2,-24(fp)
 402f410:	e0ffff17 	ldw	r3,-4(fp)
 402f414:	1885883a 	add	r2,r3,r2
 402f418:	10800003 	ldbu	r2,0(r2)
 402f41c:	10803fcc 	andi	r2,r2,255
 402f420:	1080201c 	xori	r2,r2,128
 402f424:	10bfe004 	addi	r2,r2,-128
 402f428:	10800820 	cmpeqi	r2,r2,32
 402f42c:	10003e1e 	bne	r2,zero,402f528 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 402f430:	e0bffa17 	ldw	r2,-24(fp)
 402f434:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
 402f438:	e0bffb17 	ldw	r2,-20(fp)
 402f43c:	1880121e 	bne	r3,r2,402f488 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 402f440:	e0bffa17 	ldw	r2,-24(fp)
 402f444:	e0ffff17 	ldw	r3,-4(fp)
 402f448:	1885883a 	add	r2,r3,r2
 402f44c:	10800003 	ldbu	r2,0(r2)
 402f450:	10803fcc 	andi	r2,r2,255
 402f454:	1080201c 	xori	r2,r2,128
 402f458:	10bfe004 	addi	r2,r2,-128
 402f45c:	10801720 	cmpeqi	r2,r2,92
 402f460:	1000311e 	bne	r2,zero,402f528 <check_file_name_for_FAT16_compliance+0x15c>
 402f464:	e0bffa17 	ldw	r2,-24(fp)
 402f468:	e0ffff17 	ldw	r3,-4(fp)
 402f46c:	1885883a 	add	r2,r3,r2
 402f470:	10800003 	ldbu	r2,0(r2)
 402f474:	10803fcc 	andi	r2,r2,255
 402f478:	1080201c 	xori	r2,r2,128
 402f47c:	10bfe004 	addi	r2,r2,-128
 402f480:	10800be0 	cmpeqi	r2,r2,47
 402f484:	1000281e 	bne	r2,zero,402f528 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 402f488:	e0fffa17 	ldw	r3,-24(fp)
 402f48c:	e0bffc17 	ldw	r2,-16(fp)
 402f490:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 402f494:	10800258 	cmpnei	r2,r2,9
 402f498:	1000091e 	bne	r2,zero,402f4c0 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 402f49c:	e0bffa17 	ldw	r2,-24(fp)
 402f4a0:	e0ffff17 	ldw	r3,-4(fp)
 402f4a4:	1885883a 	add	r2,r3,r2
 402f4a8:	10800003 	ldbu	r2,0(r2)
 402f4ac:	10803fcc 	andi	r2,r2,255
 402f4b0:	1080201c 	xori	r2,r2,128
 402f4b4:	10bfe004 	addi	r2,r2,-128
 402f4b8:	10800b98 	cmpnei	r2,r2,46
 402f4bc:	10001a1e 	bne	r2,zero,402f528 <check_file_name_for_FAT16_compliance+0x15c>
 402f4c0:	e0fffb17 	ldw	r3,-20(fp)
 402f4c4:	e0bffc17 	ldw	r2,-16(fp)
 402f4c8:	18801926 	beq	r3,r2,402f530 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 402f4cc:	e0fffa17 	ldw	r3,-24(fp)
 402f4d0:	e0bffc17 	ldw	r2,-16(fp)
 402f4d4:	1885c83a 	sub	r2,r3,r2
 402f4d8:	10800110 	cmplti	r2,r2,4
 402f4dc:	1000141e 	bne	r2,zero,402f530 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 402f4e0:	e0bffa17 	ldw	r2,-24(fp)
 402f4e4:	e0ffff17 	ldw	r3,-4(fp)
 402f4e8:	1885883a 	add	r2,r3,r2
 402f4ec:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 402f4f0:	10803fcc 	andi	r2,r2,255
 402f4f4:	1080201c 	xori	r2,r2,128
 402f4f8:	10bfe004 	addi	r2,r2,-128
 402f4fc:	10801720 	cmpeqi	r2,r2,92
 402f500:	10000b1e 	bne	r2,zero,402f530 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 402f504:	e0bffa17 	ldw	r2,-24(fp)
 402f508:	e0ffff17 	ldw	r3,-4(fp)
 402f50c:	1885883a 	add	r2,r3,r2
 402f510:	10800003 	ldbu	r2,0(r2)
 402f514:	10803fcc 	andi	r2,r2,255
 402f518:	1080201c 	xori	r2,r2,128
 402f51c:	10bfe004 	addi	r2,r2,-128
 402f520:	10800be0 	cmpeqi	r2,r2,47
 402f524:	1000021e 	bne	r2,zero,402f530 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
 402f528:	e03ffd15 	stw	zero,-12(fp)
            break;
 402f52c:	00002706 	br	402f5cc <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 402f530:	e0bffa17 	ldw	r2,-24(fp)
 402f534:	e0ffff17 	ldw	r3,-4(fp)
 402f538:	1885883a 	add	r2,r3,r2
 402f53c:	10800003 	ldbu	r2,0(r2)
 402f540:	10803fcc 	andi	r2,r2,255
 402f544:	1080201c 	xori	r2,r2,128
 402f548:	10bfe004 	addi	r2,r2,-128
 402f54c:	10801720 	cmpeqi	r2,r2,92
 402f550:	1000091e 	bne	r2,zero,402f578 <check_file_name_for_FAT16_compliance+0x1ac>
 402f554:	e0bffa17 	ldw	r2,-24(fp)
 402f558:	e0ffff17 	ldw	r3,-4(fp)
 402f55c:	1885883a 	add	r2,r3,r2
 402f560:	10800003 	ldbu	r2,0(r2)
 402f564:	10803fcc 	andi	r2,r2,255
 402f568:	1080201c 	xori	r2,r2,128
 402f56c:	10bfe004 	addi	r2,r2,-128
 402f570:	10800bd8 	cmpnei	r2,r2,47
 402f574:	1000041e 	bne	r2,zero,402f588 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
 402f578:	e0bffa17 	ldw	r2,-24(fp)
 402f57c:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
 402f580:	e0bffa17 	ldw	r2,-24(fp)
 402f584:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
 402f588:	e0bffa17 	ldw	r2,-24(fp)
 402f58c:	e0ffff17 	ldw	r3,-4(fp)
 402f590:	1885883a 	add	r2,r3,r2
 402f594:	10800003 	ldbu	r2,0(r2)
 402f598:	10803fcc 	andi	r2,r2,255
 402f59c:	1080201c 	xori	r2,r2,128
 402f5a0:	10bfe004 	addi	r2,r2,-128
 402f5a4:	10800b98 	cmpnei	r2,r2,46
 402f5a8:	1000021e 	bne	r2,zero,402f5b4 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
 402f5ac:	e0bffa17 	ldw	r2,-24(fp)
 402f5b0:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 402f5b4:	e0bffa17 	ldw	r2,-24(fp)
 402f5b8:	10800044 	addi	r2,r2,1
 402f5bc:	e0bffa15 	stw	r2,-24(fp)
 402f5c0:	e0fffa17 	ldw	r3,-24(fp)
 402f5c4:	e0bffe17 	ldw	r2,-8(fp)
 402f5c8:	18bf9016 	blt	r3,r2,402f40c <__flash_rwdata_start+0xffff9bbc>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 402f5cc:	e0bffe17 	ldw	r2,-8(fp)
 402f5d0:	10bfffc4 	addi	r2,r2,-1
 402f5d4:	e0ffff17 	ldw	r3,-4(fp)
 402f5d8:	1885883a 	add	r2,r3,r2
 402f5dc:	10800003 	ldbu	r2,0(r2)
 402f5e0:	10803fcc 	andi	r2,r2,255
 402f5e4:	1080201c 	xori	r2,r2,128
 402f5e8:	10bfe004 	addi	r2,r2,-128
 402f5ec:	10801720 	cmpeqi	r2,r2,92
 402f5f0:	10000a1e 	bne	r2,zero,402f61c <check_file_name_for_FAT16_compliance+0x250>
 402f5f4:	e0bffe17 	ldw	r2,-8(fp)
 402f5f8:	10bfffc4 	addi	r2,r2,-1
 402f5fc:	e0ffff17 	ldw	r3,-4(fp)
 402f600:	1885883a 	add	r2,r3,r2
 402f604:	10800003 	ldbu	r2,0(r2)
 402f608:	10803fcc 	andi	r2,r2,255
 402f60c:	1080201c 	xori	r2,r2,128
 402f610:	10bfe004 	addi	r2,r2,-128
 402f614:	10800bd8 	cmpnei	r2,r2,47
 402f618:	1000011e 	bne	r2,zero,402f620 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
 402f61c:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
 402f620:	e0bffd17 	ldw	r2,-12(fp)
}
 402f624:	e037883a 	mov	sp,fp
 402f628:	dfc00117 	ldw	ra,4(sp)
 402f62c:	df000017 	ldw	fp,0(sp)
 402f630:	dec00204 	addi	sp,sp,8
 402f634:	f800283a 	ret

0402f638 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 402f638:	defffb04 	addi	sp,sp,-20
 402f63c:	dfc00415 	stw	ra,16(sp)
 402f640:	df000315 	stw	fp,12(sp)
 402f644:	df000304 	addi	fp,sp,12
 402f648:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 402f64c:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
 402f650:	e13fff17 	ldw	r4,-4(fp)
 402f654:	40206e80 	call	40206e8 <strlen>
 402f658:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
 402f65c:	e03ffd15 	stw	zero,-12(fp)
 402f660:	00001506 	br	402f6b8 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 402f664:	e0bffd17 	ldw	r2,-12(fp)
 402f668:	e0ffff17 	ldw	r3,-4(fp)
 402f66c:	1885883a 	add	r2,r3,r2
 402f670:	10800003 	ldbu	r2,0(r2)
 402f674:	10803fcc 	andi	r2,r2,255
 402f678:	1080201c 	xori	r2,r2,128
 402f67c:	10bfe004 	addi	r2,r2,-128
 402f680:	10801720 	cmpeqi	r2,r2,92
 402f684:	10000f1e 	bne	r2,zero,402f6c4 <get_dir_divider_location+0x8c>
 402f688:	e0bffd17 	ldw	r2,-12(fp)
 402f68c:	e0ffff17 	ldw	r3,-4(fp)
 402f690:	1885883a 	add	r2,r3,r2
 402f694:	10800003 	ldbu	r2,0(r2)
 402f698:	10803fcc 	andi	r2,r2,255
 402f69c:	1080201c 	xori	r2,r2,128
 402f6a0:	10bfe004 	addi	r2,r2,-128
 402f6a4:	10800be0 	cmpeqi	r2,r2,47
 402f6a8:	1000061e 	bne	r2,zero,402f6c4 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 402f6ac:	e0bffd17 	ldw	r2,-12(fp)
 402f6b0:	10800044 	addi	r2,r2,1
 402f6b4:	e0bffd15 	stw	r2,-12(fp)
 402f6b8:	e0fffd17 	ldw	r3,-12(fp)
 402f6bc:	e0bffe17 	ldw	r2,-8(fp)
 402f6c0:	18bfe816 	blt	r3,r2,402f664 <__flash_rwdata_start+0xffff9e14>
        {
            break;
        }
    }
    
    if (index == length)
 402f6c4:	e0fffd17 	ldw	r3,-12(fp)
 402f6c8:	e0bffe17 	ldw	r2,-8(fp)
 402f6cc:	1880021e 	bne	r3,r2,402f6d8 <get_dir_divider_location+0xa0>
    {
        index = -1;
 402f6d0:	00bfffc4 	movi	r2,-1
 402f6d4:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
 402f6d8:	e0bffd17 	ldw	r2,-12(fp)
}
 402f6dc:	e037883a 	mov	sp,fp
 402f6e0:	dfc00117 	ldw	ra,4(sp)
 402f6e4:	df000017 	ldw	fp,0(sp)
 402f6e8:	dec00204 	addi	sp,sp,8
 402f6ec:	f800283a 	ret

0402f6f0 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 402f6f0:	defffa04 	addi	sp,sp,-24
 402f6f4:	df000515 	stw	fp,20(sp)
 402f6f8:	df000504 	addi	fp,sp,20
 402f6fc:	e13ffd15 	stw	r4,-12(fp)
 402f700:	e17ffe15 	stw	r5,-8(fp)
 402f704:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
 402f708:	00800044 	movi	r2,1
 402f70c:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
 402f710:	e03ffc15 	stw	zero,-16(fp)
 402f714:	00004606 	br	402f830 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 402f718:	e0fffd17 	ldw	r3,-12(fp)
 402f71c:	e0bffc17 	ldw	r2,-16(fp)
 402f720:	1885883a 	add	r2,r3,r2
 402f724:	10800003 	ldbu	r2,0(r2)
 402f728:	10803fcc 	andi	r2,r2,255
 402f72c:	10801870 	cmpltui	r2,r2,97
 402f730:	1000101e 	bne	r2,zero,402f774 <match_file_record_to_name_ext+0x84>
 402f734:	e0fffd17 	ldw	r3,-12(fp)
 402f738:	e0bffc17 	ldw	r2,-16(fp)
 402f73c:	1885883a 	add	r2,r3,r2
 402f740:	10800003 	ldbu	r2,0(r2)
 402f744:	10803fcc 	andi	r2,r2,255
 402f748:	10801ee8 	cmpgeui	r2,r2,123
 402f74c:	1000091e 	bne	r2,zero,402f774 <match_file_record_to_name_ext+0x84>
 402f750:	e0fffd17 	ldw	r3,-12(fp)
 402f754:	e0bffc17 	ldw	r2,-16(fp)
 402f758:	1885883a 	add	r2,r3,r2
 402f75c:	10800003 	ldbu	r2,0(r2)
 402f760:	10bff804 	addi	r2,r2,-32
 402f764:	10c03fcc 	andi	r3,r2,255
 402f768:	18c0201c 	xori	r3,r3,128
 402f76c:	18ffe004 	addi	r3,r3,-128
 402f770:	00000706 	br	402f790 <match_file_record_to_name_ext+0xa0>
 402f774:	e0fffd17 	ldw	r3,-12(fp)
 402f778:	e0bffc17 	ldw	r2,-16(fp)
 402f77c:	1885883a 	add	r2,r3,r2
 402f780:	10800003 	ldbu	r2,0(r2)
 402f784:	10c03fcc 	andi	r3,r2,255
 402f788:	18c0201c 	xori	r3,r3,128
 402f78c:	18ffe004 	addi	r3,r3,-128
 402f790:	e0bffc17 	ldw	r2,-16(fp)
 402f794:	e13ffe17 	ldw	r4,-8(fp)
 402f798:	2085883a 	add	r2,r4,r2
 402f79c:	10800003 	ldbu	r2,0(r2)
 402f7a0:	10803fcc 	andi	r2,r2,255
 402f7a4:	1080201c 	xori	r2,r2,128
 402f7a8:	10bfe004 	addi	r2,r2,-128
 402f7ac:	10801850 	cmplti	r2,r2,97
 402f7b0:	1000121e 	bne	r2,zero,402f7fc <match_file_record_to_name_ext+0x10c>
 402f7b4:	e0bffc17 	ldw	r2,-16(fp)
 402f7b8:	e13ffe17 	ldw	r4,-8(fp)
 402f7bc:	2085883a 	add	r2,r4,r2
 402f7c0:	10800003 	ldbu	r2,0(r2)
 402f7c4:	10803fcc 	andi	r2,r2,255
 402f7c8:	1080201c 	xori	r2,r2,128
 402f7cc:	10bfe004 	addi	r2,r2,-128
 402f7d0:	10801ec8 	cmpgei	r2,r2,123
 402f7d4:	1000091e 	bne	r2,zero,402f7fc <match_file_record_to_name_ext+0x10c>
 402f7d8:	e0bffc17 	ldw	r2,-16(fp)
 402f7dc:	e13ffe17 	ldw	r4,-8(fp)
 402f7e0:	2085883a 	add	r2,r4,r2
 402f7e4:	10800003 	ldbu	r2,0(r2)
 402f7e8:	10bff804 	addi	r2,r2,-32
 402f7ec:	10803fcc 	andi	r2,r2,255
 402f7f0:	1080201c 	xori	r2,r2,128
 402f7f4:	10bfe004 	addi	r2,r2,-128
 402f7f8:	00000706 	br	402f818 <match_file_record_to_name_ext+0x128>
 402f7fc:	e0bffc17 	ldw	r2,-16(fp)
 402f800:	e13ffe17 	ldw	r4,-8(fp)
 402f804:	2085883a 	add	r2,r4,r2
 402f808:	10800003 	ldbu	r2,0(r2)
 402f80c:	10803fcc 	andi	r2,r2,255
 402f810:	1080201c 	xori	r2,r2,128
 402f814:	10bfe004 	addi	r2,r2,-128
 402f818:	18800226 	beq	r3,r2,402f824 <match_file_record_to_name_ext+0x134>
        {
            match = false;
 402f81c:	e03ffb15 	stw	zero,-20(fp)
			break;
 402f820:	00000606 	br	402f83c <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 402f824:	e0bffc17 	ldw	r2,-16(fp)
 402f828:	10800044 	addi	r2,r2,1
 402f82c:	e0bffc15 	stw	r2,-16(fp)
 402f830:	e0bffc17 	ldw	r2,-16(fp)
 402f834:	10800210 	cmplti	r2,r2,8
 402f838:	103fb71e 	bne	r2,zero,402f718 <__flash_rwdata_start+0xffff9ec8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 402f83c:	e03ffc15 	stw	zero,-16(fp)
 402f840:	00004a06 	br	402f96c <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 402f844:	e0fffd17 	ldw	r3,-12(fp)
 402f848:	e0bffc17 	ldw	r2,-16(fp)
 402f84c:	1885883a 	add	r2,r3,r2
 402f850:	10800204 	addi	r2,r2,8
 402f854:	10800003 	ldbu	r2,0(r2)
 402f858:	10803fcc 	andi	r2,r2,255
 402f85c:	10801870 	cmpltui	r2,r2,97
 402f860:	1000121e 	bne	r2,zero,402f8ac <match_file_record_to_name_ext+0x1bc>
 402f864:	e0fffd17 	ldw	r3,-12(fp)
 402f868:	e0bffc17 	ldw	r2,-16(fp)
 402f86c:	1885883a 	add	r2,r3,r2
 402f870:	10800204 	addi	r2,r2,8
 402f874:	10800003 	ldbu	r2,0(r2)
 402f878:	10803fcc 	andi	r2,r2,255
 402f87c:	10801ee8 	cmpgeui	r2,r2,123
 402f880:	10000a1e 	bne	r2,zero,402f8ac <match_file_record_to_name_ext+0x1bc>
 402f884:	e0fffd17 	ldw	r3,-12(fp)
 402f888:	e0bffc17 	ldw	r2,-16(fp)
 402f88c:	1885883a 	add	r2,r3,r2
 402f890:	10800204 	addi	r2,r2,8
 402f894:	10800003 	ldbu	r2,0(r2)
 402f898:	10bff804 	addi	r2,r2,-32
 402f89c:	10c03fcc 	andi	r3,r2,255
 402f8a0:	18c0201c 	xori	r3,r3,128
 402f8a4:	18ffe004 	addi	r3,r3,-128
 402f8a8:	00000806 	br	402f8cc <match_file_record_to_name_ext+0x1dc>
 402f8ac:	e0fffd17 	ldw	r3,-12(fp)
 402f8b0:	e0bffc17 	ldw	r2,-16(fp)
 402f8b4:	1885883a 	add	r2,r3,r2
 402f8b8:	10800204 	addi	r2,r2,8
 402f8bc:	10800003 	ldbu	r2,0(r2)
 402f8c0:	10c03fcc 	andi	r3,r2,255
 402f8c4:	18c0201c 	xori	r3,r3,128
 402f8c8:	18ffe004 	addi	r3,r3,-128
 402f8cc:	e0bffc17 	ldw	r2,-16(fp)
 402f8d0:	e13fff17 	ldw	r4,-4(fp)
 402f8d4:	2085883a 	add	r2,r4,r2
 402f8d8:	10800003 	ldbu	r2,0(r2)
 402f8dc:	10803fcc 	andi	r2,r2,255
 402f8e0:	1080201c 	xori	r2,r2,128
 402f8e4:	10bfe004 	addi	r2,r2,-128
 402f8e8:	10801850 	cmplti	r2,r2,97
 402f8ec:	1000121e 	bne	r2,zero,402f938 <match_file_record_to_name_ext+0x248>
 402f8f0:	e0bffc17 	ldw	r2,-16(fp)
 402f8f4:	e13fff17 	ldw	r4,-4(fp)
 402f8f8:	2085883a 	add	r2,r4,r2
 402f8fc:	10800003 	ldbu	r2,0(r2)
 402f900:	10803fcc 	andi	r2,r2,255
 402f904:	1080201c 	xori	r2,r2,128
 402f908:	10bfe004 	addi	r2,r2,-128
 402f90c:	10801ec8 	cmpgei	r2,r2,123
 402f910:	1000091e 	bne	r2,zero,402f938 <match_file_record_to_name_ext+0x248>
 402f914:	e0bffc17 	ldw	r2,-16(fp)
 402f918:	e13fff17 	ldw	r4,-4(fp)
 402f91c:	2085883a 	add	r2,r4,r2
 402f920:	10800003 	ldbu	r2,0(r2)
 402f924:	10bff804 	addi	r2,r2,-32
 402f928:	10803fcc 	andi	r2,r2,255
 402f92c:	1080201c 	xori	r2,r2,128
 402f930:	10bfe004 	addi	r2,r2,-128
 402f934:	00000706 	br	402f954 <match_file_record_to_name_ext+0x264>
 402f938:	e0bffc17 	ldw	r2,-16(fp)
 402f93c:	e13fff17 	ldw	r4,-4(fp)
 402f940:	2085883a 	add	r2,r4,r2
 402f944:	10800003 	ldbu	r2,0(r2)
 402f948:	10803fcc 	andi	r2,r2,255
 402f94c:	1080201c 	xori	r2,r2,128
 402f950:	10bfe004 	addi	r2,r2,-128
 402f954:	18800226 	beq	r3,r2,402f960 <match_file_record_to_name_ext+0x270>
        {
            match = false;
 402f958:	e03ffb15 	stw	zero,-20(fp)
			break;
 402f95c:	00000606 	br	402f978 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 402f960:	e0bffc17 	ldw	r2,-16(fp)
 402f964:	10800044 	addi	r2,r2,1
 402f968:	e0bffc15 	stw	r2,-16(fp)
 402f96c:	e0bffc17 	ldw	r2,-16(fp)
 402f970:	108000d0 	cmplti	r2,r2,3
 402f974:	103fb31e 	bne	r2,zero,402f844 <__flash_rwdata_start+0xffff9ff4>
        {
            match = false;
			break;
        }
    }
	return match;
 402f978:	e0bffb17 	ldw	r2,-20(fp)
}
 402f97c:	e037883a 	mov	sp,fp
 402f980:	df000017 	ldw	fp,0(sp)
 402f984:	dec00104 	addi	sp,sp,4
 402f988:	f800283a 	ret

0402f98c <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 402f98c:	deffe704 	addi	sp,sp,-100
 402f990:	dfc01815 	stw	ra,96(sp)
 402f994:	df001715 	stw	fp,92(sp)
 402f998:	df001704 	addi	fp,sp,92
 402f99c:	e13ffd15 	stw	r4,-12(fp)
 402f9a0:	e17ffe15 	stw	r5,-8(fp)
 402f9a4:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
 402f9a8:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
 402f9ac:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
 402f9b0:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 402f9b4:	e13ffd17 	ldw	r4,-12(fp)
 402f9b8:	402f6380 	call	402f638 <get_dir_divider_location>
 402f9bc:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
 402f9c0:	00013306 	br	402fe90 <get_home_directory_cluster_for_file+0x504>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 402f9c4:	00800804 	movi	r2,32
 402f9c8:	e0bff905 	stb	r2,-28(fp)
 402f9cc:	00800804 	movi	r2,32
 402f9d0:	e0bff945 	stb	r2,-27(fp)
 402f9d4:	00800804 	movi	r2,32
 402f9d8:	e0bff985 	stb	r2,-26(fp)
 402f9dc:	00800804 	movi	r2,32
 402f9e0:	e0bff9c5 	stb	r2,-25(fp)
 402f9e4:	00800804 	movi	r2,32
 402f9e8:	e0bffa05 	stb	r2,-24(fp)
 402f9ec:	00800804 	movi	r2,32
 402f9f0:	e0bffa45 	stb	r2,-23(fp)
 402f9f4:	00800804 	movi	r2,32
 402f9f8:	e0bffa85 	stb	r2,-22(fp)
 402f9fc:	00800804 	movi	r2,32
 402fa00:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
 402fa04:	00800804 	movi	r2,32
 402fa08:	e0bffb05 	stb	r2,-20(fp)
 402fa0c:	00800804 	movi	r2,32
 402fa10:	e0bffb45 	stb	r2,-19(fp)
 402fa14:	00800804 	movi	r2,32
 402fa18:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
 402fa1c:	00bfffc4 	movi	r2,-1
 402fa20:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
 402fa24:	e0bfea17 	ldw	r2,-88(fp)
 402fa28:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 402fa2c:	e03fec15 	stw	zero,-80(fp)
 402fa30:	00002d06 	br	402fae8 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
 402fa34:	e0ffec17 	ldw	r3,-80(fp)
 402fa38:	e0bfed17 	ldw	r2,-76(fp)
 402fa3c:	1885883a 	add	r2,r3,r2
 402fa40:	1007883a 	mov	r3,r2
 402fa44:	e0bffd17 	ldw	r2,-12(fp)
 402fa48:	10c5883a 	add	r2,r2,r3
 402fa4c:	10800003 	ldbu	r2,0(r2)
 402fa50:	10803fcc 	andi	r2,r2,255
 402fa54:	1080201c 	xori	r2,r2,128
 402fa58:	10bfe004 	addi	r2,r2,-128
 402fa5c:	10800b98 	cmpnei	r2,r2,46
 402fa60:	1000031e 	bne	r2,zero,402fa70 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 402fa64:	e0bfec17 	ldw	r2,-80(fp)
 402fa68:	e0bfee15 	stw	r2,-72(fp)
 402fa6c:	00001b06 	br	402fadc <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
 402fa70:	e0bfee17 	ldw	r2,-72(fp)
 402fa74:	10000c0e 	bge	r2,zero,402faa8 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
 402fa78:	e0ffec17 	ldw	r3,-80(fp)
 402fa7c:	e0bfed17 	ldw	r2,-76(fp)
 402fa80:	1885883a 	add	r2,r3,r2
 402fa84:	1007883a 	mov	r3,r2
 402fa88:	e0bffd17 	ldw	r2,-12(fp)
 402fa8c:	10c5883a 	add	r2,r2,r3
 402fa90:	10c00003 	ldbu	r3,0(r2)
 402fa94:	e13ff904 	addi	r4,fp,-28
 402fa98:	e0bfec17 	ldw	r2,-80(fp)
 402fa9c:	2085883a 	add	r2,r4,r2
 402faa0:	10c00005 	stb	r3,0(r2)
 402faa4:	00000d06 	br	402fadc <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 402faa8:	e0ffec17 	ldw	r3,-80(fp)
 402faac:	e0bfee17 	ldw	r2,-72(fp)
 402fab0:	1885c83a 	sub	r2,r3,r2
 402fab4:	e13fec17 	ldw	r4,-80(fp)
 402fab8:	e0ffed17 	ldw	r3,-76(fp)
 402fabc:	20c7883a 	add	r3,r4,r3
 402fac0:	1809883a 	mov	r4,r3
 402fac4:	e0fffd17 	ldw	r3,-12(fp)
 402fac8:	1907883a 	add	r3,r3,r4
 402facc:	18c00003 	ldbu	r3,0(r3)
 402fad0:	e13ffb04 	addi	r4,fp,-20
 402fad4:	2085883a 	add	r2,r4,r2
 402fad8:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 402fadc:	e0bfec17 	ldw	r2,-80(fp)
 402fae0:	10800044 	addi	r2,r2,1
 402fae4:	e0bfec15 	stw	r2,-80(fp)
 402fae8:	e0ffec17 	ldw	r3,-80(fp)
 402faec:	e0bfeb17 	ldw	r2,-84(fp)
 402faf0:	18bfd016 	blt	r3,r2,402fa34 <__flash_rwdata_start+0xffffa1e4>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 402faf4:	e0bfea17 	ldw	r2,-88(fp)
 402faf8:	10005e1e 	bne	r2,zero,402fc74 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 402fafc:	00800034 	movhi	r2,0
 402fb00:	10885a04 	addi	r2,r2,8552
 402fb04:	1080050b 	ldhu	r2,20(r2)
 402fb08:	10bfffcc 	andi	r2,r2,65535
 402fb0c:	1006917a 	slli	r3,r2,5
 402fb10:	00800034 	movhi	r2,0
 402fb14:	10885a04 	addi	r2,r2,8552
 402fb18:	1080030b 	ldhu	r2,12(r2)
 402fb1c:	10bfffcc 	andi	r2,r2,65535
 402fb20:	100b883a 	mov	r5,r2
 402fb24:	1809883a 	mov	r4,r3
 402fb28:	402aa680 	call	402aa68 <__divsi3>
 402fb2c:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 402fb30:	e03ff015 	stw	zero,-64(fp)
 402fb34:	00003b06 	br	402fc24 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 402fb38:	00800034 	movhi	r2,0
 402fb3c:	10885a04 	addi	r2,r2,8552
 402fb40:	10c01317 	ldw	r3,76(r2)
 402fb44:	e0bff017 	ldw	r2,-64(fp)
 402fb48:	1885883a 	add	r2,r3,r2
 402fb4c:	1007883a 	mov	r3,r2
 402fb50:	d0a02717 	ldw	r2,-32612(gp)
 402fb54:	100b883a 	mov	r5,r2
 402fb58:	1809883a 	mov	r4,r3
 402fb5c:	402e2640 	call	402e264 <Read_Sector_Data>
 402fb60:	10003426 	beq	r2,zero,402fc34 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 402fb64:	e03ff115 	stw	zero,-60(fp)
 402fb68:	00002506 	br	402fc00 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 402fb6c:	e0bff117 	ldw	r2,-60(fp)
 402fb70:	1004917a 	slli	r2,r2,5
 402fb74:	e0fff017 	ldw	r3,-64(fp)
 402fb78:	180f883a 	mov	r7,r3
 402fb7c:	000d883a 	mov	r6,zero
 402fb80:	e17fff17 	ldw	r5,-4(fp)
 402fb84:	1009883a 	mov	r4,r2
 402fb88:	402e6740 	call	402e674 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 402fb8c:	e0bfff17 	ldw	r2,-4(fp)
 402fb90:	10800003 	ldbu	r2,0(r2)
 402fb94:	10803fcc 	andi	r2,r2,255
 402fb98:	10803960 	cmpeqi	r2,r2,229
 402fb9c:	1000151e 	bne	r2,zero,402fbf4 <get_home_directory_cluster_for_file+0x268>
 402fba0:	e0bfff17 	ldw	r2,-4(fp)
 402fba4:	10800003 	ldbu	r2,0(r2)
 402fba8:	10803fcc 	andi	r2,r2,255
 402fbac:	10001126 	beq	r2,zero,402fbf4 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 402fbb0:	e0fffb04 	addi	r3,fp,-20
 402fbb4:	e0bff904 	addi	r2,fp,-28
 402fbb8:	180d883a 	mov	r6,r3
 402fbbc:	100b883a 	mov	r5,r2
 402fbc0:	e13fff17 	ldw	r4,-4(fp)
 402fbc4:	402f6f00 	call	402f6f0 <match_file_record_to_name_ext>
 402fbc8:	e0bff815 	stw	r2,-32(fp)
                            if (match)
 402fbcc:	e0bff817 	ldw	r2,-32(fp)
 402fbd0:	10000826 	beq	r2,zero,402fbf4 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
 402fbd4:	e0bfff17 	ldw	r2,-4(fp)
 402fbd8:	1080058b 	ldhu	r2,22(r2)
 402fbdc:	10bfffcc 	andi	r2,r2,65535
 402fbe0:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 402fbe4:	e0bfff17 	ldw	r2,-4(fp)
 402fbe8:	00c00044 	movi	r3,1
 402fbec:	10c00a15 	stw	r3,40(r2)
                                break;
 402fbf0:	00000606 	br	402fc0c <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 402fbf4:	e0bff117 	ldw	r2,-60(fp)
 402fbf8:	10800044 	addi	r2,r2,1
 402fbfc:	e0bff115 	stw	r2,-60(fp)
 402fc00:	e0bff117 	ldw	r2,-60(fp)
 402fc04:	10800410 	cmplti	r2,r2,16
 402fc08:	103fd81e 	bne	r2,zero,402fb6c <__flash_rwdata_start+0xffffa31c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 402fc0c:	e0ffef17 	ldw	r3,-68(fp)
 402fc10:	e0bfea17 	ldw	r2,-88(fp)
 402fc14:	1880091e 	bne	r3,r2,402fc3c <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 402fc18:	e0bff017 	ldw	r2,-64(fp)
 402fc1c:	10800044 	addi	r2,r2,1
 402fc20:	e0bff015 	stw	r2,-64(fp)
 402fc24:	e0fff017 	ldw	r3,-64(fp)
 402fc28:	e0bff717 	ldw	r2,-36(fp)
 402fc2c:	18bfc216 	blt	r3,r2,402fb38 <__flash_rwdata_start+0xffffa2e8>
 402fc30:	00000306 	br	402fc40 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
 402fc34:	0001883a 	nop
 402fc38:	00000106 	br	402fc40 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
 402fc3c:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
 402fc40:	e0ffef17 	ldw	r3,-68(fp)
 402fc44:	e0bfea17 	ldw	r2,-88(fp)
 402fc48:	18800826 	beq	r3,r2,402fc6c <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 402fc4c:	e0bfef17 	ldw	r2,-68(fp)
 402fc50:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 402fc54:	e0ffed17 	ldw	r3,-76(fp)
 402fc58:	e0bfeb17 	ldw	r2,-84(fp)
 402fc5c:	1885883a 	add	r2,r3,r2
 402fc60:	10800044 	addi	r2,r2,1
 402fc64:	e0bfed15 	stw	r2,-76(fp)
 402fc68:	00007f06 	br	402fe68 <get_home_directory_cluster_for_file+0x4dc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 402fc6c:	0005883a 	mov	r2,zero
 402fc70:	00009306 	br	402fec0 <get_home_directory_cluster_for_file+0x534>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 402fc74:	e0bfea17 	ldw	r2,-88(fp)
 402fc78:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 402fc7c:	e0bff417 	ldw	r2,-48(fp)
 402fc80:	10ffff84 	addi	r3,r2,-2
 402fc84:	00800034 	movhi	r2,0
 402fc88:	10885a04 	addi	r2,r2,8552
 402fc8c:	10800383 	ldbu	r2,14(r2)
 402fc90:	10803fcc 	andi	r2,r2,255
 402fc94:	100b883a 	mov	r5,r2
 402fc98:	1809883a 	mov	r4,r3
 402fc9c:	402ac1c0 	call	402ac1c <__mulsi3>
 402fca0:	1007883a 	mov	r3,r2
 402fca4:	00800034 	movhi	r2,0
 402fca8:	10885a04 	addi	r2,r2,8552
 402fcac:	10801417 	ldw	r2,80(r2)
 402fcb0:	1885883a 	add	r2,r3,r2
 402fcb4:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 402fcb8:	e03ff215 	stw	zero,-56(fp)
 402fcbc:	00003606 	br	402fd98 <get_home_directory_cluster_for_file+0x40c>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 402fcc0:	e0fff217 	ldw	r3,-56(fp)
 402fcc4:	e0bff517 	ldw	r2,-44(fp)
 402fcc8:	1885883a 	add	r2,r3,r2
 402fccc:	d0e02717 	ldw	r3,-32612(gp)
 402fcd0:	180b883a 	mov	r5,r3
 402fcd4:	1009883a 	mov	r4,r2
 402fcd8:	402e2640 	call	402e264 <Read_Sector_Data>
 402fcdc:	10003526 	beq	r2,zero,402fdb4 <get_home_directory_cluster_for_file+0x428>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 402fce0:	e03ff315 	stw	zero,-52(fp)
 402fce4:	00002306 	br	402fd74 <get_home_directory_cluster_for_file+0x3e8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 402fce8:	e0bff317 	ldw	r2,-52(fp)
 402fcec:	1004917a 	slli	r2,r2,5
 402fcf0:	e0fff417 	ldw	r3,-48(fp)
 402fcf4:	e13ff217 	ldw	r4,-56(fp)
 402fcf8:	200f883a 	mov	r7,r4
 402fcfc:	180d883a 	mov	r6,r3
 402fd00:	e17fff17 	ldw	r5,-4(fp)
 402fd04:	1009883a 	mov	r4,r2
 402fd08:	402e6740 	call	402e674 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 402fd0c:	e0bfff17 	ldw	r2,-4(fp)
 402fd10:	10800003 	ldbu	r2,0(r2)
 402fd14:	10803fcc 	andi	r2,r2,255
 402fd18:	10803960 	cmpeqi	r2,r2,229
 402fd1c:	1000121e 	bne	r2,zero,402fd68 <get_home_directory_cluster_for_file+0x3dc>
 402fd20:	e0bfff17 	ldw	r2,-4(fp)
 402fd24:	10800003 	ldbu	r2,0(r2)
 402fd28:	10803fcc 	andi	r2,r2,255
 402fd2c:	10000e26 	beq	r2,zero,402fd68 <get_home_directory_cluster_for_file+0x3dc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 402fd30:	e0fffb04 	addi	r3,fp,-20
 402fd34:	e0bff904 	addi	r2,fp,-28
 402fd38:	180d883a 	mov	r6,r3
 402fd3c:	100b883a 	mov	r5,r2
 402fd40:	e13fff17 	ldw	r4,-4(fp)
 402fd44:	402f6f00 	call	402f6f0 <match_file_record_to_name_ext>
 402fd48:	e0bff615 	stw	r2,-40(fp)
                                if (match)
 402fd4c:	e0bff617 	ldw	r2,-40(fp)
 402fd50:	10000526 	beq	r2,zero,402fd68 <get_home_directory_cluster_for_file+0x3dc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 402fd54:	e0bfff17 	ldw	r2,-4(fp)
 402fd58:	1080058b 	ldhu	r2,22(r2)
 402fd5c:	10bfffcc 	andi	r2,r2,65535
 402fd60:	e0bfef15 	stw	r2,-68(fp)
                                    break;
 402fd64:	00000606 	br	402fd80 <get_home_directory_cluster_for_file+0x3f4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 402fd68:	e0bff317 	ldw	r2,-52(fp)
 402fd6c:	10800044 	addi	r2,r2,1
 402fd70:	e0bff315 	stw	r2,-52(fp)
 402fd74:	e0bff317 	ldw	r2,-52(fp)
 402fd78:	10800410 	cmplti	r2,r2,16
 402fd7c:	103fda1e 	bne	r2,zero,402fce8 <__flash_rwdata_start+0xffffa498>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 402fd80:	e0ffef17 	ldw	r3,-68(fp)
 402fd84:	e0bfea17 	ldw	r2,-88(fp)
 402fd88:	18800c1e 	bne	r3,r2,402fdbc <get_home_directory_cluster_for_file+0x430>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 402fd8c:	e0bff217 	ldw	r2,-56(fp)
 402fd90:	10800044 	addi	r2,r2,1
 402fd94:	e0bff215 	stw	r2,-56(fp)
 402fd98:	00800034 	movhi	r2,0
 402fd9c:	10885a04 	addi	r2,r2,8552
 402fda0:	10800383 	ldbu	r2,14(r2)
 402fda4:	10803fcc 	andi	r2,r2,255
 402fda8:	e0fff217 	ldw	r3,-56(fp)
 402fdac:	18bfc416 	blt	r3,r2,402fcc0 <__flash_rwdata_start+0xffffa470>
 402fdb0:	00000306 	br	402fdc0 <get_home_directory_cluster_for_file+0x434>
                            }
                        }
                    }
                    else
                    {
                        break;
 402fdb4:	0001883a 	nop
 402fdb8:	00000106 	br	402fdc0 <get_home_directory_cluster_for_file+0x434>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
 402fdbc:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 402fdc0:	e0ffef17 	ldw	r3,-68(fp)
 402fdc4:	e0bfea17 	ldw	r2,-88(fp)
 402fdc8:	1880141e 	bne	r3,r2,402fe1c <get_home_directory_cluster_for_file+0x490>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 402fdcc:	e0bfef17 	ldw	r2,-68(fp)
 402fdd0:	e0fffc04 	addi	r3,fp,-16
 402fdd4:	180b883a 	mov	r5,r3
 402fdd8:	1009883a 	mov	r4,r2
 402fddc:	402e33c0 	call	402e33c <get_cluster_flag>
 402fde0:	10000c26 	beq	r2,zero,402fe14 <get_home_directory_cluster_for_file+0x488>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 402fde4:	e0bffc0b 	ldhu	r2,-16(fp)
 402fde8:	10bfffcc 	andi	r2,r2,65535
 402fdec:	10fffe0c 	andi	r3,r2,65528
 402fdf0:	00bffe14 	movui	r2,65528
 402fdf4:	1880021e 	bne	r3,r2,402fe00 <get_home_directory_cluster_for_file+0x474>
						{
							return false;
 402fdf8:	0005883a 	mov	r2,zero
 402fdfc:	00003006 	br	402fec0 <get_home_directory_cluster_for_file+0x534>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 402fe00:	e0bffc0b 	ldhu	r2,-16(fp)
 402fe04:	10bfffcc 	andi	r2,r2,65535
 402fe08:	10bffe0c 	andi	r2,r2,65528
 402fe0c:	e0bfef15 	stw	r2,-68(fp)
 402fe10:	00000206 	br	402fe1c <get_home_directory_cluster_for_file+0x490>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 402fe14:	0005883a 	mov	r2,zero
 402fe18:	00002906 	br	402fec0 <get_home_directory_cluster_for_file+0x534>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 402fe1c:	e0bff417 	ldw	r2,-48(fp)
 402fe20:	00fffdd4 	movui	r3,65527
 402fe24:	18800316 	blt	r3,r2,402fe34 <get_home_directory_cluster_for_file+0x4a8>
 402fe28:	e0ffef17 	ldw	r3,-68(fp)
 402fe2c:	e0bfea17 	ldw	r2,-88(fp)
 402fe30:	18bf9226 	beq	r3,r2,402fc7c <__flash_rwdata_start+0xffffa42c>
            if (new_cluster != home_dir_cluster)
 402fe34:	e0ffef17 	ldw	r3,-68(fp)
 402fe38:	e0bfea17 	ldw	r2,-88(fp)
 402fe3c:	18800826 	beq	r3,r2,402fe60 <get_home_directory_cluster_for_file+0x4d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 402fe40:	e0bfef17 	ldw	r2,-68(fp)
 402fe44:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 402fe48:	e0ffed17 	ldw	r3,-76(fp)
 402fe4c:	e0bfeb17 	ldw	r2,-84(fp)
 402fe50:	1885883a 	add	r2,r3,r2
 402fe54:	10800044 	addi	r2,r2,1
 402fe58:	e0bfed15 	stw	r2,-76(fp)
 402fe5c:	00000206 	br	402fe68 <get_home_directory_cluster_for_file+0x4dc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 402fe60:	0005883a 	mov	r2,zero
 402fe64:	00001606 	br	402fec0 <get_home_directory_cluster_for_file+0x534>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 402fe68:	e0bfed17 	ldw	r2,-76(fp)
 402fe6c:	e0fffd17 	ldw	r3,-12(fp)
 402fe70:	1885883a 	add	r2,r3,r2
 402fe74:	1009883a 	mov	r4,r2
 402fe78:	402f6380 	call	402f638 <get_dir_divider_location>
 402fe7c:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
 402fe80:	e0bfeb17 	ldw	r2,-84(fp)
 402fe84:	1000020e 	bge	r2,zero,402fe90 <get_home_directory_cluster_for_file+0x504>
        {
            // Directory has been located.
            result = true;
 402fe88:	00800044 	movi	r2,1
 402fe8c:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 402fe90:	e0bfeb17 	ldw	r2,-84(fp)
 402fe94:	00becb16 	blt	zero,r2,402f9c4 <__flash_rwdata_start+0xffffa174>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 402fe98:	e0bffe17 	ldw	r2,-8(fp)
 402fe9c:	e0ffea17 	ldw	r3,-88(fp)
 402fea0:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
 402fea4:	e0bfea17 	ldw	r2,-88(fp)
 402fea8:	1000041e 	bne	r2,zero,402febc <get_home_directory_cluster_for_file+0x530>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 402feac:	e0bfff17 	ldw	r2,-4(fp)
 402feb0:	10000a15 	stw	zero,40(r2)
		result = true;
 402feb4:	00800044 	movi	r2,1
 402feb8:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
 402febc:	e0bfe917 	ldw	r2,-92(fp)
}
 402fec0:	e037883a 	mov	sp,fp
 402fec4:	dfc00117 	ldw	ra,4(sp)
 402fec8:	df000017 	ldw	fp,0(sp)
 402fecc:	dec00204 	addi	sp,sp,8
 402fed0:	f800283a 	ret

0402fed4 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 402fed4:	deffe804 	addi	sp,sp,-96
 402fed8:	dfc01715 	stw	ra,92(sp)
 402fedc:	df001615 	stw	fp,88(sp)
 402fee0:	df001604 	addi	fp,sp,88
 402fee4:	e13ffd15 	stw	r4,-12(fp)
 402fee8:	e17ffe15 	stw	r5,-8(fp)
 402feec:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
 402fef0:	e13ffe17 	ldw	r4,-8(fp)
 402fef4:	402f6380 	call	402f638 <get_dir_divider_location>
 402fef8:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
 402fefc:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 402ff00:	00800804 	movi	r2,32
 402ff04:	e0bff905 	stb	r2,-28(fp)
 402ff08:	00800804 	movi	r2,32
 402ff0c:	e0bff945 	stb	r2,-27(fp)
 402ff10:	00800804 	movi	r2,32
 402ff14:	e0bff985 	stb	r2,-26(fp)
 402ff18:	00800804 	movi	r2,32
 402ff1c:	e0bff9c5 	stb	r2,-25(fp)
 402ff20:	00800804 	movi	r2,32
 402ff24:	e0bffa05 	stb	r2,-24(fp)
 402ff28:	00800804 	movi	r2,32
 402ff2c:	e0bffa45 	stb	r2,-23(fp)
 402ff30:	00800804 	movi	r2,32
 402ff34:	e0bffa85 	stb	r2,-22(fp)
 402ff38:	00800804 	movi	r2,32
 402ff3c:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
 402ff40:	00800804 	movi	r2,32
 402ff44:	e0bffb05 	stb	r2,-20(fp)
 402ff48:	00800804 	movi	r2,32
 402ff4c:	e0bffb45 	stb	r2,-19(fp)
 402ff50:	00800804 	movi	r2,32
 402ff54:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
 402ff58:	00bfffc4 	movi	r2,-1
 402ff5c:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
 402ff60:	e0bffd17 	ldw	r2,-12(fp)
 402ff64:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
 402ff68:	e13ffe17 	ldw	r4,-8(fp)
 402ff6c:	40206e80 	call	40206e8 <strlen>
 402ff70:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
 402ff74:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 402ff78:	00000b06 	br	402ffa8 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 402ff7c:	e0ffeb17 	ldw	r3,-84(fp)
 402ff80:	e0bfea17 	ldw	r2,-88(fp)
 402ff84:	1885883a 	add	r2,r3,r2
 402ff88:	10800044 	addi	r2,r2,1
 402ff8c:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 402ff90:	e0bfeb17 	ldw	r2,-84(fp)
 402ff94:	e0fffe17 	ldw	r3,-8(fp)
 402ff98:	1885883a 	add	r2,r3,r2
 402ff9c:	1009883a 	mov	r4,r2
 402ffa0:	402f6380 	call	402f638 <get_dir_divider_location>
 402ffa4:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 402ffa8:	e0bfea17 	ldw	r2,-88(fp)
 402ffac:	00bff316 	blt	zero,r2,402ff7c <__flash_rwdata_start+0xffffa72c>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 402ffb0:	e0bfeb17 	ldw	r2,-84(fp)
 402ffb4:	e0bfee15 	stw	r2,-72(fp)
 402ffb8:	00002706 	br	4030058 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
 402ffbc:	e0bfee17 	ldw	r2,-72(fp)
 402ffc0:	e0fffe17 	ldw	r3,-8(fp)
 402ffc4:	1885883a 	add	r2,r3,r2
 402ffc8:	10800003 	ldbu	r2,0(r2)
 402ffcc:	10803fcc 	andi	r2,r2,255
 402ffd0:	1080201c 	xori	r2,r2,128
 402ffd4:	10bfe004 	addi	r2,r2,-128
 402ffd8:	10800b98 	cmpnei	r2,r2,46
 402ffdc:	1000031e 	bne	r2,zero,402ffec <find_file_in_directory+0x118>
        {
            ext_index = index;
 402ffe0:	e0bfee17 	ldw	r2,-72(fp)
 402ffe4:	e0bfec15 	stw	r2,-80(fp)
 402ffe8:	00001806 	br	403004c <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
 402ffec:	e0bfec17 	ldw	r2,-80(fp)
 402fff0:	10000b0e 	bge	r2,zero,4030020 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
 402fff4:	e0ffee17 	ldw	r3,-72(fp)
 402fff8:	e0bfeb17 	ldw	r2,-84(fp)
 402fffc:	1885c83a 	sub	r2,r3,r2
 4030000:	e0ffee17 	ldw	r3,-72(fp)
 4030004:	e13ffe17 	ldw	r4,-8(fp)
 4030008:	20c7883a 	add	r3,r4,r3
 403000c:	18c00003 	ldbu	r3,0(r3)
 4030010:	e13ff904 	addi	r4,fp,-28
 4030014:	2085883a 	add	r2,r4,r2
 4030018:	10c00005 	stb	r3,0(r2)
 403001c:	00000b06 	br	403004c <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 4030020:	e0ffee17 	ldw	r3,-72(fp)
 4030024:	e0bfec17 	ldw	r2,-80(fp)
 4030028:	1885c83a 	sub	r2,r3,r2
 403002c:	10bfffc4 	addi	r2,r2,-1
 4030030:	e0ffee17 	ldw	r3,-72(fp)
 4030034:	e13ffe17 	ldw	r4,-8(fp)
 4030038:	20c7883a 	add	r3,r4,r3
 403003c:	18c00003 	ldbu	r3,0(r3)
 4030040:	e13ffb04 	addi	r4,fp,-20
 4030044:	2085883a 	add	r2,r4,r2
 4030048:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 403004c:	e0bfee17 	ldw	r2,-72(fp)
 4030050:	10800044 	addi	r2,r2,1
 4030054:	e0bfee15 	stw	r2,-72(fp)
 4030058:	e0ffee17 	ldw	r3,-72(fp)
 403005c:	e0bff417 	ldw	r2,-48(fp)
 4030060:	18bfd616 	blt	r3,r2,402ffbc <__flash_rwdata_start+0xffffa76c>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 4030064:	e0bffd17 	ldw	r2,-12(fp)
 4030068:	1000481e 	bne	r2,zero,403018c <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 403006c:	00800034 	movhi	r2,0
 4030070:	10885a04 	addi	r2,r2,8552
 4030074:	1080050b 	ldhu	r2,20(r2)
 4030078:	10bfffcc 	andi	r2,r2,65535
 403007c:	1006917a 	slli	r3,r2,5
 4030080:	00800034 	movhi	r2,0
 4030084:	10885a04 	addi	r2,r2,8552
 4030088:	1080030b 	ldhu	r2,12(r2)
 403008c:	10bfffcc 	andi	r2,r2,65535
 4030090:	100b883a 	mov	r5,r2
 4030094:	1809883a 	mov	r4,r3
 4030098:	402aa680 	call	402aa68 <__divsi3>
 403009c:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 40300a0:	e03ff015 	stw	zero,-64(fp)
 40300a4:	00003506 	br	403017c <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 40300a8:	00800034 	movhi	r2,0
 40300ac:	10885a04 	addi	r2,r2,8552
 40300b0:	10c01317 	ldw	r3,76(r2)
 40300b4:	e0bff017 	ldw	r2,-64(fp)
 40300b8:	1885883a 	add	r2,r3,r2
 40300bc:	1007883a 	mov	r3,r2
 40300c0:	d0a02717 	ldw	r2,-32612(gp)
 40300c4:	100b883a 	mov	r5,r2
 40300c8:	1809883a 	mov	r4,r3
 40300cc:	402e2640 	call	402e264 <Read_Sector_Data>
 40300d0:	10009826 	beq	r2,zero,4030334 <find_file_in_directory+0x460>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 40300d4:	e03ff115 	stw	zero,-60(fp)
 40300d8:	00002006 	br	403015c <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 40300dc:	e0bff117 	ldw	r2,-60(fp)
 40300e0:	1004917a 	slli	r2,r2,5
 40300e4:	e0fff017 	ldw	r3,-64(fp)
 40300e8:	180f883a 	mov	r7,r3
 40300ec:	000d883a 	mov	r6,zero
 40300f0:	e17fff17 	ldw	r5,-4(fp)
 40300f4:	1009883a 	mov	r4,r2
 40300f8:	402e6740 	call	402e674 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 40300fc:	e0bfff17 	ldw	r2,-4(fp)
 4030100:	10800003 	ldbu	r2,0(r2)
 4030104:	10803fcc 	andi	r2,r2,255
 4030108:	10803960 	cmpeqi	r2,r2,229
 403010c:	1000101e 	bne	r2,zero,4030150 <find_file_in_directory+0x27c>
 4030110:	e0bfff17 	ldw	r2,-4(fp)
 4030114:	10800003 	ldbu	r2,0(r2)
 4030118:	10803fcc 	andi	r2,r2,255
 403011c:	10000c26 	beq	r2,zero,4030150 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 4030120:	e0fffb04 	addi	r3,fp,-20
 4030124:	e0bff904 	addi	r2,fp,-28
 4030128:	180d883a 	mov	r6,r3
 403012c:	100b883a 	mov	r5,r2
 4030130:	e13fff17 	ldw	r4,-4(fp)
 4030134:	402f6f00 	call	402f6f0 <match_file_record_to_name_ext>
 4030138:	e0bff815 	stw	r2,-32(fp)

                        if (match)
 403013c:	e0bff817 	ldw	r2,-32(fp)
 4030140:	10000326 	beq	r2,zero,4030150 <find_file_in_directory+0x27c>
                        {
                            result = true;
 4030144:	00800044 	movi	r2,1
 4030148:	e0bfef15 	stw	r2,-68(fp)
                            break;
 403014c:	00000606 	br	4030168 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 4030150:	e0bff117 	ldw	r2,-60(fp)
 4030154:	10800044 	addi	r2,r2,1
 4030158:	e0bff115 	stw	r2,-60(fp)
 403015c:	e0bff117 	ldw	r2,-60(fp)
 4030160:	10800410 	cmplti	r2,r2,16
 4030164:	103fdd1e 	bne	r2,zero,40300dc <__flash_rwdata_start+0xffffa88c>
            }
            else
            {
                break;
            }
            if (result)
 4030168:	e0bfef17 	ldw	r2,-68(fp)
 403016c:	1000731e 	bne	r2,zero,403033c <find_file_in_directory+0x468>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 4030170:	e0bff017 	ldw	r2,-64(fp)
 4030174:	10800044 	addi	r2,r2,1
 4030178:	e0bff015 	stw	r2,-64(fp)
 403017c:	e0fff017 	ldw	r3,-64(fp)
 4030180:	e0bff717 	ldw	r2,-36(fp)
 4030184:	18bfc816 	blt	r3,r2,40300a8 <__flash_rwdata_start+0xffffa858>
 4030188:	00006d06 	br	4030340 <find_file_in_directory+0x46c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 403018c:	e0bfed17 	ldw	r2,-76(fp)
 4030190:	10ffff84 	addi	r3,r2,-2
 4030194:	00800034 	movhi	r2,0
 4030198:	10885a04 	addi	r2,r2,8552
 403019c:	10800383 	ldbu	r2,14(r2)
 40301a0:	10803fcc 	andi	r2,r2,255
 40301a4:	100b883a 	mov	r5,r2
 40301a8:	1809883a 	mov	r4,r3
 40301ac:	402ac1c0 	call	402ac1c <__mulsi3>
 40301b0:	1007883a 	mov	r3,r2
 40301b4:	00800034 	movhi	r2,0
 40301b8:	10885a04 	addi	r2,r2,8552
 40301bc:	10801417 	ldw	r2,80(r2)
 40301c0:	1885883a 	add	r2,r3,r2
 40301c4:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 40301c8:	e03ff215 	stw	zero,-56(fp)
 40301cc:	00003306 	br	403029c <find_file_in_directory+0x3c8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 40301d0:	e0fff217 	ldw	r3,-56(fp)
 40301d4:	e0bff517 	ldw	r2,-44(fp)
 40301d8:	1885883a 	add	r2,r3,r2
 40301dc:	d0e02717 	ldw	r3,-32612(gp)
 40301e0:	180b883a 	mov	r5,r3
 40301e4:	1009883a 	mov	r4,r2
 40301e8:	402e2640 	call	402e264 <Read_Sector_Data>
 40301ec:	10003226 	beq	r2,zero,40302b8 <find_file_in_directory+0x3e4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 40301f0:	e03ff315 	stw	zero,-52(fp)
 40301f4:	00002106 	br	403027c <find_file_in_directory+0x3a8>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 40301f8:	e0bff317 	ldw	r2,-52(fp)
 40301fc:	1004917a 	slli	r2,r2,5
 4030200:	e0ffed17 	ldw	r3,-76(fp)
 4030204:	e13ff217 	ldw	r4,-56(fp)
 4030208:	200f883a 	mov	r7,r4
 403020c:	180d883a 	mov	r6,r3
 4030210:	e17fff17 	ldw	r5,-4(fp)
 4030214:	1009883a 	mov	r4,r2
 4030218:	402e6740 	call	402e674 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 403021c:	e0bfff17 	ldw	r2,-4(fp)
 4030220:	10800003 	ldbu	r2,0(r2)
 4030224:	10803fcc 	andi	r2,r2,255
 4030228:	10803960 	cmpeqi	r2,r2,229
 403022c:	1000101e 	bne	r2,zero,4030270 <find_file_in_directory+0x39c>
 4030230:	e0bfff17 	ldw	r2,-4(fp)
 4030234:	10800003 	ldbu	r2,0(r2)
 4030238:	10803fcc 	andi	r2,r2,255
 403023c:	10000c26 	beq	r2,zero,4030270 <find_file_in_directory+0x39c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 4030240:	e0fffb04 	addi	r3,fp,-20
 4030244:	e0bff904 	addi	r2,fp,-28
 4030248:	180d883a 	mov	r6,r3
 403024c:	100b883a 	mov	r5,r2
 4030250:	e13fff17 	ldw	r4,-4(fp)
 4030254:	402f6f00 	call	402f6f0 <match_file_record_to_name_ext>
 4030258:	e0bff615 	stw	r2,-40(fp)

                            if (match)
 403025c:	e0bff617 	ldw	r2,-40(fp)
 4030260:	10000326 	beq	r2,zero,4030270 <find_file_in_directory+0x39c>
                            {                               
                                result = true;
 4030264:	00800044 	movi	r2,1
 4030268:	e0bfef15 	stw	r2,-68(fp)
                                break;
 403026c:	00000606 	br	4030288 <find_file_in_directory+0x3b4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 4030270:	e0bff317 	ldw	r2,-52(fp)
 4030274:	10800044 	addi	r2,r2,1
 4030278:	e0bff315 	stw	r2,-52(fp)
 403027c:	e0bff317 	ldw	r2,-52(fp)
 4030280:	10800410 	cmplti	r2,r2,16
 4030284:	103fdc1e 	bne	r2,zero,40301f8 <__flash_rwdata_start+0xffffa9a8>
                }
                else
                {
                    break;
                }
                if (result)
 4030288:	e0bfef17 	ldw	r2,-68(fp)
 403028c:	10000c1e 	bne	r2,zero,40302c0 <find_file_in_directory+0x3ec>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 4030290:	e0bff217 	ldw	r2,-56(fp)
 4030294:	10800044 	addi	r2,r2,1
 4030298:	e0bff215 	stw	r2,-56(fp)
 403029c:	00800034 	movhi	r2,0
 40302a0:	10885a04 	addi	r2,r2,8552
 40302a4:	10800383 	ldbu	r2,14(r2)
 40302a8:	10803fcc 	andi	r2,r2,255
 40302ac:	e0fff217 	ldw	r3,-56(fp)
 40302b0:	18bfc716 	blt	r3,r2,40301d0 <__flash_rwdata_start+0xffffa980>
 40302b4:	00000306 	br	40302c4 <find_file_in_directory+0x3f0>
                        }
                    }
                }
                else
                {
                    break;
 40302b8:	0001883a 	nop
 40302bc:	00000106 	br	40302c4 <find_file_in_directory+0x3f0>
                }
                if (result)
                {
                    break;
 40302c0:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 40302c4:	e0bfef17 	ldw	r2,-68(fp)
 40302c8:	1000141e 	bne	r2,zero,403031c <find_file_in_directory+0x448>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 40302cc:	e0bfed17 	ldw	r2,-76(fp)
 40302d0:	e0fffc04 	addi	r3,fp,-16
 40302d4:	180b883a 	mov	r5,r3
 40302d8:	1009883a 	mov	r4,r2
 40302dc:	402e33c0 	call	402e33c <get_cluster_flag>
 40302e0:	10000c26 	beq	r2,zero,4030314 <find_file_in_directory+0x440>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 40302e4:	e0bffc0b 	ldhu	r2,-16(fp)
 40302e8:	10bfffcc 	andi	r2,r2,65535
 40302ec:	10fffe0c 	andi	r3,r2,65528
 40302f0:	00bffe14 	movui	r2,65528
 40302f4:	1880021e 	bne	r3,r2,4030300 <find_file_in_directory+0x42c>
					{
						return false;
 40302f8:	0005883a 	mov	r2,zero
 40302fc:	00001106 	br	4030344 <find_file_in_directory+0x470>
					}
					cluster = (new_cluster & 0x0000fff8);
 4030300:	e0bffc0b 	ldhu	r2,-16(fp)
 4030304:	10bfffcc 	andi	r2,r2,65535
 4030308:	10bffe0c 	andi	r2,r2,65528
 403030c:	e0bfed15 	stw	r2,-76(fp)
 4030310:	00000206 	br	403031c <find_file_in_directory+0x448>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 4030314:	0005883a 	mov	r2,zero
 4030318:	00000a06 	br	4030344 <find_file_in_directory+0x470>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 403031c:	e0bfed17 	ldw	r2,-76(fp)
 4030320:	00fffdd4 	movui	r3,65527
 4030324:	18800616 	blt	r3,r2,4030340 <find_file_in_directory+0x46c>
 4030328:	e0bfef17 	ldw	r2,-68(fp)
 403032c:	103f9726 	beq	r2,zero,403018c <__flash_rwdata_start+0xffffa93c>
 4030330:	00000306 	br	4030340 <find_file_in_directory+0x46c>
                    }
                }
            }
            else
            {
                break;
 4030334:	0001883a 	nop
 4030338:	00000106 	br	4030340 <find_file_in_directory+0x46c>
            }
            if (result)
            {
                break;
 403033c:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
 4030340:	e0bfef17 	ldw	r2,-68(fp)
}
 4030344:	e037883a 	mov	sp,fp
 4030348:	dfc00117 	ldw	ra,4(sp)
 403034c:	df000017 	ldw	fp,0(sp)
 4030350:	dec00204 	addi	sp,sp,8
 4030354:	f800283a 	ret

04030358 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 4030358:	defff504 	addi	sp,sp,-44
 403035c:	dfc00a15 	stw	ra,40(sp)
 4030360:	df000915 	stw	fp,36(sp)
 4030364:	df000904 	addi	fp,sp,36
 4030368:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 403036c:	00800034 	movhi	r2,0
 4030370:	10885a04 	addi	r2,r2,8552
 4030374:	10801117 	ldw	r2,68(r2)
 4030378:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
 403037c:	00800084 	movi	r2,2
 4030380:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
 4030384:	00bfffc4 	movi	r2,-1
 4030388:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
 403038c:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
 4030390:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 4030394:	00800034 	movhi	r2,0
 4030398:	10885a04 	addi	r2,r2,8552
 403039c:	10801417 	ldw	r2,80(r2)
 40303a0:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 40303a4:	00800034 	movhi	r2,0
 40303a8:	10885a04 	addi	r2,r2,8552
 40303ac:	1080058b 	ldhu	r2,22(r2)
 40303b0:	10bfffcc 	andi	r2,r2,65535
 40303b4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 40303b8:	00800034 	movhi	r2,0
 40303bc:	10885a04 	addi	r2,r2,8552
 40303c0:	10800917 	ldw	r2,36(r2)
 40303c4:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
 40303c8:	e0bffd17 	ldw	r2,-12(fp)
 40303cc:	e0fffe17 	ldw	r3,-8(fp)
 40303d0:	18800d2e 	bgeu	r3,r2,4030408 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 40303d4:	e0fffd17 	ldw	r3,-12(fp)
 40303d8:	e0bffc17 	ldw	r2,-16(fp)
 40303dc:	1887c83a 	sub	r3,r3,r2
 40303e0:	00800034 	movhi	r2,0
 40303e4:	10885a04 	addi	r2,r2,8552
 40303e8:	10800383 	ldbu	r2,14(r2)
 40303ec:	10803fcc 	andi	r2,r2,255
 40303f0:	100b883a 	mov	r5,r2
 40303f4:	1809883a 	mov	r4,r3
 40303f8:	402ab600 	call	402ab60 <__udivsi3>
 40303fc:	10800044 	addi	r2,r2,1
 4030400:	e0bffb15 	stw	r2,-20(fp)
 4030404:	00002c06 	br	40304b8 <find_first_empty_cluster+0x160>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 4030408:	e0fffe17 	ldw	r3,-8(fp)
 403040c:	e0bffc17 	ldw	r2,-16(fp)
 4030410:	1887c83a 	sub	r3,r3,r2
 4030414:	00800034 	movhi	r2,0
 4030418:	10885a04 	addi	r2,r2,8552
 403041c:	10800383 	ldbu	r2,14(r2)
 4030420:	10803fcc 	andi	r2,r2,255
 4030424:	100b883a 	mov	r5,r2
 4030428:	1809883a 	mov	r4,r3
 403042c:	402ab600 	call	402ab60 <__udivsi3>
 4030430:	10800044 	addi	r2,r2,1
 4030434:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 4030438:	00001f06 	br	40304b8 <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 403043c:	e0bff717 	ldw	r2,-36(fp)
 4030440:	d0e02717 	ldw	r3,-32612(gp)
 4030444:	180b883a 	mov	r5,r3
 4030448:	1009883a 	mov	r4,r2
 403044c:	402e2640 	call	402e264 <Read_Sector_Data>
 4030450:	10001426 	beq	r2,zero,40304a4 <find_first_empty_cluster+0x14c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 4030454:	e0bff817 	ldw	r2,-32(fp)
 4030458:	10803fcc 	andi	r2,r2,255
 403045c:	1085883a 	add	r2,r2,r2
 4030460:	1007883a 	mov	r3,r2
 4030464:	d0a02917 	ldw	r2,-32604(gp)
 4030468:	10800a17 	ldw	r2,40(r2)
 403046c:	1885883a 	add	r2,r3,r2
 4030470:	1080002b 	ldhuio	r2,0(r2)
 4030474:	10bfffcc 	andi	r2,r2,65535
 4030478:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
 403047c:	e0bff90f 	ldh	r2,-28(fp)
 4030480:	10000726 	beq	r2,zero,40304a0 <find_first_empty_cluster+0x148>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
 4030484:	e0bff817 	ldw	r2,-32(fp)
 4030488:	10800044 	addi	r2,r2,1
 403048c:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
 4030490:	e0bff817 	ldw	r2,-32(fp)
 4030494:	10803fcc 	andi	r2,r2,255
 4030498:	103fee1e 	bne	r2,zero,4030454 <__flash_rwdata_start+0xffffac04>
 403049c:	00000106 	br	40304a4 <find_first_empty_cluster+0x14c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
 40304a0:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
 40304a4:	e0bff90f 	ldh	r2,-28(fp)
 40304a8:	10000926 	beq	r2,zero,40304d0 <find_first_empty_cluster+0x178>
        {
            break;
        }
        sector++;
 40304ac:	e0bff717 	ldw	r2,-36(fp)
 40304b0:	10800044 	addi	r2,r2,1
 40304b4:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 40304b8:	00800034 	movhi	r2,0
 40304bc:	10885a04 	addi	r2,r2,8552
 40304c0:	10c01217 	ldw	r3,72(r2)
 40304c4:	e0bff717 	ldw	r2,-36(fp)
 40304c8:	18bfdc1e 	bne	r3,r2,403043c <__flash_rwdata_start+0xffffabec>
 40304cc:	00000106 	br	40304d4 <find_first_empty_cluster+0x17c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
 40304d0:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 40304d4:	e0bff90f 	ldh	r2,-28(fp)
 40304d8:	1000081e 	bne	r2,zero,40304fc <find_first_empty_cluster+0x1a4>
 40304dc:	e0bff90f 	ldh	r2,-28(fp)
 40304e0:	e0fffb17 	ldw	r3,-20(fp)
 40304e4:	18800536 	bltu	r3,r2,40304fc <find_first_empty_cluster+0x1a4>
    {
        *cluster_number = cluster_index;
 40304e8:	e0bfff17 	ldw	r2,-4(fp)
 40304ec:	e0fff817 	ldw	r3,-32(fp)
 40304f0:	10c00015 	stw	r3,0(r2)
		result = true;
 40304f4:	00800044 	movi	r2,1
 40304f8:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
 40304fc:	e0bffa17 	ldw	r2,-24(fp)
}
 4030500:	e037883a 	mov	sp,fp
 4030504:	dfc00117 	ldw	ra,4(sp)
 4030508:	df000017 	ldw	fp,0(sp)
 403050c:	dec00204 	addi	sp,sp,8
 4030510:	f800283a 	ret

04030514 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 4030514:	defff604 	addi	sp,sp,-40
 4030518:	dfc00915 	stw	ra,36(sp)
 403051c:	df000815 	stw	fp,32(sp)
 4030520:	df000804 	addi	fp,sp,32
 4030524:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
 4030528:	00bfffc4 	movi	r2,-1
 403052c:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
 4030530:	e0bfff17 	ldw	r2,-4(fp)
 4030534:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 4030538:	e0bff917 	ldw	r2,-28(fp)
 403053c:	10ffff84 	addi	r3,r2,-2
 4030540:	00800034 	movhi	r2,0
 4030544:	10885a04 	addi	r2,r2,8552
 4030548:	10800383 	ldbu	r2,14(r2)
 403054c:	10803fcc 	andi	r2,r2,255
 4030550:	100b883a 	mov	r5,r2
 4030554:	1809883a 	mov	r4,r3
 4030558:	402ac1c0 	call	402ac1c <__mulsi3>
 403055c:	1007883a 	mov	r3,r2
 4030560:	00800034 	movhi	r2,0
 4030564:	10885a04 	addi	r2,r2,8552
 4030568:	10801417 	ldw	r2,80(r2)
 403056c:	1885883a 	add	r2,r3,r2
 4030570:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 4030574:	e03ffa15 	stw	zero,-24(fp)
 4030578:	00002c06 	br	403062c <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 403057c:	e0fffa17 	ldw	r3,-24(fp)
 4030580:	e0bffc17 	ldw	r2,-16(fp)
 4030584:	1885883a 	add	r2,r3,r2
 4030588:	d0e02717 	ldw	r3,-32612(gp)
 403058c:	180b883a 	mov	r5,r3
 4030590:	1009883a 	mov	r4,r2
 4030594:	402e2640 	call	402e264 <Read_Sector_Data>
 4030598:	10002b26 	beq	r2,zero,4030648 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 403059c:	e03ffb15 	stw	zero,-20(fp)
 40305a0:	00001c06 	br	4030614 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 40305a4:	e0bffb17 	ldw	r2,-20(fp)
 40305a8:	1004917a 	slli	r2,r2,5
 40305ac:	1007883a 	mov	r3,r2
 40305b0:	d0a02917 	ldw	r2,-32604(gp)
 40305b4:	10800a17 	ldw	r2,40(r2)
 40305b8:	1885883a 	add	r2,r3,r2
 40305bc:	10800023 	ldbuio	r2,0(r2)
 40305c0:	10803fcc 	andi	r2,r2,255
 40305c4:	10803fcc 	andi	r2,r2,255
 40305c8:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 40305cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40305d0:	10803960 	cmpeqi	r2,r2,229
 40305d4:	1000021e 	bne	r2,zero,40305e0 <find_first_empty_record_in_a_subdirectory+0xcc>
 40305d8:	e0bffd0b 	ldhu	r2,-12(fp)
 40305dc:	10000a1e 	bne	r2,zero,4030608 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 40305e0:	e0bffa17 	ldw	r2,-24(fp)
 40305e4:	1006913a 	slli	r3,r2,4
 40305e8:	e0bffb17 	ldw	r2,-20(fp)
 40305ec:	1885883a 	add	r2,r3,r2
 40305f0:	1006943a 	slli	r3,r2,16
 40305f4:	e0bff917 	ldw	r2,-28(fp)
 40305f8:	1884b03a 	or	r2,r3,r2
 40305fc:	e0bff815 	stw	r2,-32(fp)
                        return result;
 4030600:	e0bff817 	ldw	r2,-32(fp)
 4030604:	00005306 	br	4030754 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 4030608:	e0bffb17 	ldw	r2,-20(fp)
 403060c:	10800044 	addi	r2,r2,1
 4030610:	e0bffb15 	stw	r2,-20(fp)
 4030614:	e0bffb17 	ldw	r2,-20(fp)
 4030618:	10800410 	cmplti	r2,r2,16
 403061c:	103fe11e 	bne	r2,zero,40305a4 <__flash_rwdata_start+0xffffad54>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 4030620:	e0bffa17 	ldw	r2,-24(fp)
 4030624:	10800044 	addi	r2,r2,1
 4030628:	e0bffa15 	stw	r2,-24(fp)
 403062c:	00800034 	movhi	r2,0
 4030630:	10885a04 	addi	r2,r2,8552
 4030634:	10800383 	ldbu	r2,14(r2)
 4030638:	10803fcc 	andi	r2,r2,255
 403063c:	e0fffa17 	ldw	r3,-24(fp)
 4030640:	18bfce16 	blt	r3,r2,403057c <__flash_rwdata_start+0xffffad2c>
 4030644:	00000106 	br	403064c <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
 4030648:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 403064c:	e0bff817 	ldw	r2,-32(fp)
 4030650:	1000390e 	bge	r2,zero,4030738 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 4030654:	e0bff917 	ldw	r2,-28(fp)
 4030658:	e0fffd84 	addi	r3,fp,-10
 403065c:	180b883a 	mov	r5,r3
 4030660:	1009883a 	mov	r4,r2
 4030664:	402e33c0 	call	402e33c <get_cluster_flag>
 4030668:	10003126 	beq	r2,zero,4030730 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 403066c:	e0bffd8b 	ldhu	r2,-10(fp)
 4030670:	10bfffcc 	andi	r2,r2,65535
 4030674:	10fffe0c 	andi	r3,r2,65528
 4030678:	00bffe14 	movui	r2,65528
 403067c:	18802e1e 	bne	r3,r2,4030738 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 4030680:	e0bffe04 	addi	r2,fp,-8
 4030684:	1009883a 	mov	r4,r2
 4030688:	40303580 	call	4030358 <find_first_empty_cluster>
 403068c:	10002326 	beq	r2,zero,403071c <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 4030690:	e0bff917 	ldw	r2,-28(fp)
 4030694:	e0fffe17 	ldw	r3,-8(fp)
 4030698:	18ffffcc 	andi	r3,r3,65535
 403069c:	18e0001c 	xori	r3,r3,32768
 40306a0:	18e00004 	addi	r3,r3,-32768
 40306a4:	01800044 	movi	r6,1
 40306a8:	180b883a 	mov	r5,r3
 40306ac:	1009883a 	mov	r4,r2
 40306b0:	402e3f00 	call	402e3f0 <mark_cluster>
 40306b4:	10001926 	beq	r2,zero,403071c <find_first_empty_record_in_a_subdirectory+0x208>
 40306b8:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 40306bc:	01800044 	movi	r6,1
 40306c0:	017fffc4 	movi	r5,-1
 40306c4:	1009883a 	mov	r4,r2
 40306c8:	402e3f00 	call	402e3f0 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 40306cc:	10001326 	beq	r2,zero,403071c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 40306d0:	e0bff917 	ldw	r2,-28(fp)
 40306d4:	e0fffe17 	ldw	r3,-8(fp)
 40306d8:	18ffffcc 	andi	r3,r3,65535
 40306dc:	18e0001c 	xori	r3,r3,32768
 40306e0:	18e00004 	addi	r3,r3,-32768
 40306e4:	000d883a 	mov	r6,zero
 40306e8:	180b883a 	mov	r5,r3
 40306ec:	1009883a 	mov	r4,r2
 40306f0:	402e3f00 	call	402e3f0 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 40306f4:	10000926 	beq	r2,zero,403071c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 40306f8:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
 40306fc:	000d883a 	mov	r6,zero
 4030700:	017fffc4 	movi	r5,-1
 4030704:	1009883a 	mov	r4,r2
 4030708:	402e3f00 	call	402e3f0 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 403070c:	10000326 	beq	r2,zero,403071c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 4030710:	402e2180 	call	402e218 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 4030714:	e0bffe17 	ldw	r2,-8(fp)
 4030718:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 403071c:	e0bffd8b 	ldhu	r2,-10(fp)
 4030720:	10bfffcc 	andi	r2,r2,65535
 4030724:	10bffe0c 	andi	r2,r2,65528
 4030728:	e0bff915 	stw	r2,-28(fp)
 403072c:	00000206 	br	4030738 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 4030730:	00bfffc4 	movi	r2,-1
 4030734:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 4030738:	e0bff917 	ldw	r2,-28(fp)
 403073c:	00fffdd4 	movui	r3,65527
 4030740:	18800316 	blt	r3,r2,4030750 <find_first_empty_record_in_a_subdirectory+0x23c>
 4030744:	e0bff817 	ldw	r2,-32(fp)
 4030748:	10bfffe0 	cmpeqi	r2,r2,-1
 403074c:	103f7a1e 	bne	r2,zero,4030538 <__flash_rwdata_start+0xfffface8>
    return result; 
 4030750:	e0bff817 	ldw	r2,-32(fp)
}
 4030754:	e037883a 	mov	sp,fp
 4030758:	dfc00117 	ldw	ra,4(sp)
 403075c:	df000017 	ldw	fp,0(sp)
 4030760:	dec00204 	addi	sp,sp,8
 4030764:	f800283a 	ret

04030768 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 4030768:	defff904 	addi	sp,sp,-28
 403076c:	dfc00615 	stw	ra,24(sp)
 4030770:	df000515 	stw	fp,20(sp)
 4030774:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 4030778:	00800034 	movhi	r2,0
 403077c:	10885a04 	addi	r2,r2,8552
 4030780:	1080050b 	ldhu	r2,20(r2)
 4030784:	10bfffcc 	andi	r2,r2,65535
 4030788:	1006917a 	slli	r3,r2,5
 403078c:	00800034 	movhi	r2,0
 4030790:	10885a04 	addi	r2,r2,8552
 4030794:	1080030b 	ldhu	r2,12(r2)
 4030798:	10bfffcc 	andi	r2,r2,65535
 403079c:	100b883a 	mov	r5,r2
 40307a0:	1809883a 	mov	r4,r3
 40307a4:	402aa680 	call	402aa68 <__divsi3>
 40307a8:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
 40307ac:	00bfffc4 	movi	r2,-1
 40307b0:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 40307b4:	e03ffb15 	stw	zero,-20(fp)
 40307b8:	00002d06 	br	4030870 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 40307bc:	00800034 	movhi	r2,0
 40307c0:	10885a04 	addi	r2,r2,8552
 40307c4:	10c01317 	ldw	r3,76(r2)
 40307c8:	e0bffb17 	ldw	r2,-20(fp)
 40307cc:	1885883a 	add	r2,r3,r2
 40307d0:	1007883a 	mov	r3,r2
 40307d4:	d0a02717 	ldw	r2,-32612(gp)
 40307d8:	100b883a 	mov	r5,r2
 40307dc:	1809883a 	mov	r4,r3
 40307e0:	402e2640 	call	402e264 <Read_Sector_Data>
 40307e4:	10002626 	beq	r2,zero,4030880 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 40307e8:	e03ffc15 	stw	zero,-16(fp)
 40307ec:	00001a06 	br	4030858 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 40307f0:	e0bffc17 	ldw	r2,-16(fp)
 40307f4:	1004917a 	slli	r2,r2,5
 40307f8:	1007883a 	mov	r3,r2
 40307fc:	d0a02917 	ldw	r2,-32604(gp)
 4030800:	10800a17 	ldw	r2,40(r2)
 4030804:	1885883a 	add	r2,r3,r2
 4030808:	10800023 	ldbuio	r2,0(r2)
 403080c:	10803fcc 	andi	r2,r2,255
 4030810:	10803fcc 	andi	r2,r2,255
 4030814:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 4030818:	e0bfff0b 	ldhu	r2,-4(fp)
 403081c:	10803960 	cmpeqi	r2,r2,229
 4030820:	1000021e 	bne	r2,zero,403082c <find_first_empty_record_in_root_directory+0xc4>
 4030824:	e0bfff0b 	ldhu	r2,-4(fp)
 4030828:	1000081e 	bne	r2,zero,403084c <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
 403082c:	e0bffb17 	ldw	r2,-20(fp)
 4030830:	1006913a 	slli	r3,r2,4
 4030834:	e0bffc17 	ldw	r2,-16(fp)
 4030838:	1885883a 	add	r2,r3,r2
 403083c:	1004943a 	slli	r2,r2,16
 4030840:	e0bffe15 	stw	r2,-8(fp)
                    return result;
 4030844:	e0bffe17 	ldw	r2,-8(fp)
 4030848:	00000f06 	br	4030888 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 403084c:	e0bffc17 	ldw	r2,-16(fp)
 4030850:	10800044 	addi	r2,r2,1
 4030854:	e0bffc15 	stw	r2,-16(fp)
 4030858:	e0bffc17 	ldw	r2,-16(fp)
 403085c:	10800410 	cmplti	r2,r2,16
 4030860:	103fe31e 	bne	r2,zero,40307f0 <__flash_rwdata_start+0xffffafa0>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 4030864:	e0bffb17 	ldw	r2,-20(fp)
 4030868:	10800044 	addi	r2,r2,1
 403086c:	e0bffb15 	stw	r2,-20(fp)
 4030870:	e0fffb17 	ldw	r3,-20(fp)
 4030874:	e0bffd17 	ldw	r2,-12(fp)
 4030878:	18bfd016 	blt	r3,r2,40307bc <__flash_rwdata_start+0xffffaf6c>
 403087c:	00000106 	br	4030884 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
 4030880:	0001883a 	nop
        }
    }
    return result;
 4030884:	e0bffe17 	ldw	r2,-8(fp)
}
 4030888:	e037883a 	mov	sp,fp
 403088c:	dfc00117 	ldw	ra,4(sp)
 4030890:	df000017 	ldw	fp,0(sp)
 4030894:	dec00204 	addi	sp,sp,8
 4030898:	f800283a 	ret

0403089c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 403089c:	defffa04 	addi	sp,sp,-24
 40308a0:	df000515 	stw	fp,20(sp)
 40308a4:	df000504 	addi	fp,sp,20
 40308a8:	e13ffd15 	stw	r4,-12(fp)
 40308ac:	e17ffe15 	stw	r5,-8(fp)
 40308b0:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 40308b4:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
 40308b8:	e03ffb15 	stw	zero,-20(fp)
 40308bc:	00002506 	br	4030954 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
 40308c0:	e0bffc17 	ldw	r2,-16(fp)
 40308c4:	e0fffd17 	ldw	r3,-12(fp)
 40308c8:	1885883a 	add	r2,r3,r2
 40308cc:	10800003 	ldbu	r2,0(r2)
 40308d0:	10803fcc 	andi	r2,r2,255
 40308d4:	1080201c 	xori	r2,r2,128
 40308d8:	10bfe004 	addi	r2,r2,-128
 40308dc:	10800ba0 	cmpeqi	r2,r2,46
 40308e0:	1000141e 	bne	r2,zero,4030934 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
 40308e4:	e0bffb17 	ldw	r2,-20(fp)
 40308e8:	e0fffe17 	ldw	r3,-8(fp)
 40308ec:	1885883a 	add	r2,r3,r2
 40308f0:	e0fffc17 	ldw	r3,-16(fp)
 40308f4:	e13ffd17 	ldw	r4,-12(fp)
 40308f8:	20c7883a 	add	r3,r4,r3
 40308fc:	18c00003 	ldbu	r3,0(r3)
 4030900:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
 4030904:	e0bffc17 	ldw	r2,-16(fp)
 4030908:	e0fffd17 	ldw	r3,-12(fp)
 403090c:	1885883a 	add	r2,r3,r2
 4030910:	10800003 	ldbu	r2,0(r2)
 4030914:	10803fcc 	andi	r2,r2,255
 4030918:	1080201c 	xori	r2,r2,128
 403091c:	10bfe004 	addi	r2,r2,-128
 4030920:	10000926 	beq	r2,zero,4030948 <convert_filename_to_name_extension+0xac>
 4030924:	e0bffc17 	ldw	r2,-16(fp)
 4030928:	10800044 	addi	r2,r2,1
 403092c:	e0bffc15 	stw	r2,-16(fp)
 4030930:	00000506 	br	4030948 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
 4030934:	e0bffb17 	ldw	r2,-20(fp)
 4030938:	e0fffe17 	ldw	r3,-8(fp)
 403093c:	1885883a 	add	r2,r3,r2
 4030940:	00c00804 	movi	r3,32
 4030944:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 4030948:	e0bffb17 	ldw	r2,-20(fp)
 403094c:	10800044 	addi	r2,r2,1
 4030950:	e0bffb15 	stw	r2,-20(fp)
 4030954:	e0bffb17 	ldw	r2,-20(fp)
 4030958:	10800210 	cmplti	r2,r2,8
 403095c:	103fd81e 	bne	r2,zero,40308c0 <__flash_rwdata_start+0xffffb070>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 4030960:	e0bffc17 	ldw	r2,-16(fp)
 4030964:	e0fffd17 	ldw	r3,-12(fp)
 4030968:	1885883a 	add	r2,r3,r2
 403096c:	10800003 	ldbu	r2,0(r2)
 4030970:	10803fcc 	andi	r2,r2,255
 4030974:	1080201c 	xori	r2,r2,128
 4030978:	10bfe004 	addi	r2,r2,-128
 403097c:	10800b98 	cmpnei	r2,r2,46
 4030980:	1000031e 	bne	r2,zero,4030990 <convert_filename_to_name_extension+0xf4>
 4030984:	e0bffc17 	ldw	r2,-16(fp)
 4030988:	10800044 	addi	r2,r2,1
 403098c:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
 4030990:	e03ffb15 	stw	zero,-20(fp)
 4030994:	00001c06 	br	4030a08 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
 4030998:	e0bffc17 	ldw	r2,-16(fp)
 403099c:	e0fffd17 	ldw	r3,-12(fp)
 40309a0:	1885883a 	add	r2,r3,r2
 40309a4:	10800003 	ldbu	r2,0(r2)
 40309a8:	10803fcc 	andi	r2,r2,255
 40309ac:	1080201c 	xori	r2,r2,128
 40309b0:	10bfe004 	addi	r2,r2,-128
 40309b4:	10000c26 	beq	r2,zero,40309e8 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
 40309b8:	e0bffb17 	ldw	r2,-20(fp)
 40309bc:	e0ffff17 	ldw	r3,-4(fp)
 40309c0:	1885883a 	add	r2,r3,r2
 40309c4:	e0fffc17 	ldw	r3,-16(fp)
 40309c8:	e13ffd17 	ldw	r4,-12(fp)
 40309cc:	20c7883a 	add	r3,r4,r3
 40309d0:	18c00003 	ldbu	r3,0(r3)
 40309d4:	10c00005 	stb	r3,0(r2)
            local++;
 40309d8:	e0bffc17 	ldw	r2,-16(fp)
 40309dc:	10800044 	addi	r2,r2,1
 40309e0:	e0bffc15 	stw	r2,-16(fp)
 40309e4:	00000506 	br	40309fc <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
 40309e8:	e0bffb17 	ldw	r2,-20(fp)
 40309ec:	e0ffff17 	ldw	r3,-4(fp)
 40309f0:	1885883a 	add	r2,r3,r2
 40309f4:	00c00804 	movi	r3,32
 40309f8:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 40309fc:	e0bffb17 	ldw	r2,-20(fp)
 4030a00:	10800044 	addi	r2,r2,1
 4030a04:	e0bffb15 	stw	r2,-20(fp)
 4030a08:	e0bffb17 	ldw	r2,-20(fp)
 4030a0c:	108000d0 	cmplti	r2,r2,3
 4030a10:	103fe11e 	bne	r2,zero,4030998 <__flash_rwdata_start+0xffffb148>
        {
            extension[counter] = ' ';
        }
    }

}
 4030a14:	0001883a 	nop
 4030a18:	e037883a 	mov	sp,fp
 4030a1c:	df000017 	ldw	fp,0(sp)
 4030a20:	dec00104 	addi	sp,sp,4
 4030a24:	f800283a 	ret

04030a28 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 4030a28:	defff404 	addi	sp,sp,-48
 4030a2c:	dfc00b15 	stw	ra,44(sp)
 4030a30:	df000a15 	stw	fp,40(sp)
 4030a34:	dc000915 	stw	r16,36(sp)
 4030a38:	df000a04 	addi	fp,sp,40
 4030a3c:	e13ffc15 	stw	r4,-16(fp)
 4030a40:	e17ffd15 	stw	r5,-12(fp)
 4030a44:	e1bffe15 	stw	r6,-8(fp)
    unsigned int cluster_number;
    bool result = false;
 4030a48:	e03ff615 	stw	zero,-40(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 4030a4c:	e0bffb04 	addi	r2,fp,-20
 4030a50:	1009883a 	mov	r4,r2
 4030a54:	40303580 	call	4030358 <find_first_empty_cluster>
 4030a58:	1000a226 	beq	r2,zero,4030ce4 <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 4030a5c:	e0bffe17 	ldw	r2,-8(fp)
 4030a60:	10800a17 	ldw	r2,40(r2)
 4030a64:	1000031e 	bne	r2,zero,4030a74 <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 4030a68:	40307680 	call	4030768 <find_first_empty_record_in_root_directory>
 4030a6c:	e0bff715 	stw	r2,-36(fp)
 4030a70:	00000606 	br	4030a8c <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 4030a74:	e0bffe17 	ldw	r2,-8(fp)
 4030a78:	1080058b 	ldhu	r2,22(r2)
 4030a7c:	10bfffcc 	andi	r2,r2,65535
 4030a80:	1009883a 	mov	r4,r2
 4030a84:	40305140 	call	4030514 <find_first_empty_record_in_a_subdirectory>
 4030a88:	e0bff715 	stw	r2,-36(fp)
        }
        if (record_index >= 0)
 4030a8c:	e0bff717 	ldw	r2,-36(fp)
 4030a90:	10009416 	blt	r2,zero,4030ce4 <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 4030a94:	e13ffc17 	ldw	r4,-16(fp)
 4030a98:	402f6380 	call	402f638 <get_dir_divider_location>
 4030a9c:	e0bff815 	stw	r2,-32(fp)
            int last_dir_separator = 0;
 4030aa0:	e03ff915 	stw	zero,-28(fp)

            // Skip through all directory separators.
            while (location > 0)
 4030aa4:	00000b06 	br	4030ad4 <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
 4030aa8:	e0fff917 	ldw	r3,-28(fp)
 4030aac:	e0bff817 	ldw	r2,-32(fp)
 4030ab0:	1885883a 	add	r2,r3,r2
 4030ab4:	10800044 	addi	r2,r2,1
 4030ab8:	e0bff915 	stw	r2,-28(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 4030abc:	e0bff917 	ldw	r2,-28(fp)
 4030ac0:	e0fffc17 	ldw	r3,-16(fp)
 4030ac4:	1885883a 	add	r2,r3,r2
 4030ac8:	1009883a 	mov	r4,r2
 4030acc:	402f6380 	call	402f638 <get_dir_divider_location>
 4030ad0:	e0bff815 	stw	r2,-32(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 4030ad4:	e0bff817 	ldw	r2,-32(fp)
 4030ad8:	00bff316 	blt	zero,r2,4030aa8 <__flash_rwdata_start+0xffffb258>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
 4030adc:	e0bff917 	ldw	r2,-28(fp)
 4030ae0:	e0fffc17 	ldw	r3,-16(fp)
 4030ae4:	1887883a 	add	r3,r3,r2
 4030ae8:	e13ffd17 	ldw	r4,-12(fp)
 4030aec:	e0bffd17 	ldw	r2,-12(fp)
 4030af0:	10800204 	addi	r2,r2,8
 4030af4:	100d883a 	mov	r6,r2
 4030af8:	200b883a 	mov	r5,r4
 4030afc:	1809883a 	mov	r4,r3
 4030b00:	403089c0 	call	403089c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 4030b04:	e0bffd17 	ldw	r2,-12(fp)
 4030b08:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 4030b0c:	e0bffd17 	ldw	r2,-12(fp)
 4030b10:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 4030b14:	e0bffd17 	ldw	r2,-12(fp)
 4030b18:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 4030b1c:	e0bffd17 	ldw	r2,-12(fp)
 4030b20:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 4030b24:	e0bffd17 	ldw	r2,-12(fp)
 4030b28:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 4030b2c:	e0bffd17 	ldw	r2,-12(fp)
 4030b30:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 4030b34:	e0bffb17 	ldw	r2,-20(fp)
 4030b38:	1007883a 	mov	r3,r2
 4030b3c:	e0bffd17 	ldw	r2,-12(fp)
 4030b40:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 4030b44:	e0bffd17 	ldw	r2,-12(fp)
 4030b48:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 4030b4c:	e0fffb17 	ldw	r3,-20(fp)
 4030b50:	e0bffd17 	ldw	r2,-12(fp)
 4030b54:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 4030b58:	e0bffd17 	ldw	r2,-12(fp)
 4030b5c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 4030b60:	e0bffd17 	ldw	r2,-12(fp)
 4030b64:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 4030b68:	e0bff717 	ldw	r2,-36(fp)
 4030b6c:	10ffffcc 	andi	r3,r2,65535
 4030b70:	e0bffd17 	ldw	r2,-12(fp)
 4030b74:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 4030b78:	e0bff717 	ldw	r2,-36(fp)
 4030b7c:	1004d43a 	srli	r2,r2,16
 4030b80:	1000010e 	bge	r2,zero,4030b88 <create_file+0x160>
 4030b84:	108003c4 	addi	r2,r2,15
 4030b88:	1005d13a 	srai	r2,r2,4
 4030b8c:	1007883a 	mov	r3,r2
 4030b90:	e0bffd17 	ldw	r2,-12(fp)
 4030b94:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 4030b98:	e0bff717 	ldw	r2,-36(fp)
 4030b9c:	1004d43a 	srli	r2,r2,16
 4030ba0:	1007883a 	mov	r3,r2
 4030ba4:	00a00034 	movhi	r2,32768
 4030ba8:	108003c4 	addi	r2,r2,15
 4030bac:	1884703a 	and	r2,r3,r2
 4030bb0:	1000040e 	bge	r2,zero,4030bc4 <create_file+0x19c>
 4030bb4:	10bfffc4 	addi	r2,r2,-1
 4030bb8:	00fffc04 	movi	r3,-16
 4030bbc:	10c4b03a 	or	r2,r2,r3
 4030bc0:	10800044 	addi	r2,r2,1
 4030bc4:	1004917a 	slli	r2,r2,5
 4030bc8:	1007883a 	mov	r3,r2
 4030bcc:	e0bffd17 	ldw	r2,-12(fp)
 4030bd0:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 4030bd4:	e0bffe17 	ldw	r2,-8(fp)
 4030bd8:	1080058b 	ldhu	r2,22(r2)
 4030bdc:	10ffffcc 	andi	r3,r2,65535
 4030be0:	e0bffd17 	ldw	r2,-12(fp)
 4030be4:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 4030be8:	e0bffd17 	ldw	r2,-12(fp)
 4030bec:	00c00044 	movi	r3,1
 4030bf0:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
 4030bf4:	e0bffd17 	ldw	r2,-12(fp)
 4030bf8:	00c00044 	movi	r3,1
 4030bfc:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 4030c00:	e0bffd17 	ldw	r2,-12(fp)
 4030c04:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 4030c08:	1000071e 	bne	r2,zero,4030c28 <create_file+0x200>
 4030c0c:	00800034 	movhi	r2,0
 4030c10:	10885a04 	addi	r2,r2,8552
 4030c14:	10c01317 	ldw	r3,76(r2)
 4030c18:	e0bffd17 	ldw	r2,-12(fp)
 4030c1c:	10800b17 	ldw	r2,44(r2)
 4030c20:	1885883a 	add	r2,r3,r2
 4030c24:	00001106 	br	4030c6c <create_file+0x244>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
 4030c28:	00800034 	movhi	r2,0
 4030c2c:	10885a04 	addi	r2,r2,8552
 4030c30:	14001417 	ldw	r16,80(r2)
 4030c34:	e0bffd17 	ldw	r2,-12(fp)
 4030c38:	10800a17 	ldw	r2,40(r2)
 4030c3c:	10ffff84 	addi	r3,r2,-2
 4030c40:	00800034 	movhi	r2,0
 4030c44:	10885a04 	addi	r2,r2,8552
 4030c48:	10800383 	ldbu	r2,14(r2)
 4030c4c:	10803fcc 	andi	r2,r2,255
 4030c50:	100b883a 	mov	r5,r2
 4030c54:	1809883a 	mov	r4,r3
 4030c58:	402ac1c0 	call	402ac1c <__mulsi3>
 4030c5c:	8087883a 	add	r3,r16,r2
                                     file_record->file_record_sector_in_cluster);
 4030c60:	e0bffd17 	ldw	r2,-12(fp)
 4030c64:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 4030c68:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 4030c6c:	e0bffa15 	stw	r2,-24(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 4030c70:	e0bffa17 	ldw	r2,-24(fp)
 4030c74:	d0e02717 	ldw	r3,-32612(gp)
 4030c78:	180b883a 	mov	r5,r3
 4030c7c:	1009883a 	mov	r4,r2
 4030c80:	402e2640 	call	402e264 <Read_Sector_Data>
 4030c84:	10001726 	beq	r2,zero,4030ce4 <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 4030c88:	e0bffd17 	ldw	r2,-12(fp)
 4030c8c:	10800c0b 	ldhu	r2,48(r2)
 4030c90:	10bfffcc 	andi	r2,r2,65535
 4030c94:	10a0001c 	xori	r2,r2,32768
 4030c98:	10a00004 	addi	r2,r2,-32768
 4030c9c:	e17ffd17 	ldw	r5,-12(fp)
 4030ca0:	1009883a 	mov	r4,r2
 4030ca4:	402e8f00 	call	402e8f0 <Write_File_Record_At_Offset>
 4030ca8:	10000e26 	beq	r2,zero,4030ce4 <create_file+0x2bc>
                {
                    Save_Modified_Sector();
 4030cac:	402e2180 	call	402e218 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 4030cb0:	e0bffb17 	ldw	r2,-20(fp)
 4030cb4:	01800044 	movi	r6,1
 4030cb8:	017fffc4 	movi	r5,-1
 4030cbc:	1009883a 	mov	r4,r2
 4030cc0:	402e3f00 	call	402e3f0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 4030cc4:	e0bffb17 	ldw	r2,-20(fp)
 4030cc8:	000d883a 	mov	r6,zero
 4030ccc:	017fffc4 	movi	r5,-1
 4030cd0:	1009883a 	mov	r4,r2
 4030cd4:	402e3f00 	call	402e3f0 <mark_cluster>
 4030cd8:	10000226 	beq	r2,zero,4030ce4 <create_file+0x2bc>
                    {
                        result = true;
 4030cdc:	00800044 	movi	r2,1
 4030ce0:	e0bff615 	stw	r2,-40(fp)
                }
            }
        }

    }
    return result;           
 4030ce4:	e0bff617 	ldw	r2,-40(fp)
}
 4030ce8:	e6ffff04 	addi	sp,fp,-4
 4030cec:	dfc00217 	ldw	ra,8(sp)
 4030cf0:	df000117 	ldw	fp,4(sp)
 4030cf4:	dc000017 	ldw	r16,0(sp)
 4030cf8:	dec00304 	addi	sp,sp,12
 4030cfc:	f800283a 	ret

04030d00 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 4030d00:	defffb04 	addi	sp,sp,-20
 4030d04:	df000415 	stw	fp,16(sp)
 4030d08:	df000404 	addi	fp,sp,16
 4030d0c:	e13ffe15 	stw	r4,-8(fp)
 4030d10:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 4030d14:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 4030d18:	e03ffc15 	stw	zero,-16(fp)
 4030d1c:	00001506 	br	4030d74 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
 4030d20:	e0fffe17 	ldw	r3,-8(fp)
 4030d24:	e0bffc17 	ldw	r2,-16(fp)
 4030d28:	1885883a 	add	r2,r3,r2
 4030d2c:	10800003 	ldbu	r2,0(r2)
 4030d30:	10803fcc 	andi	r2,r2,255
 4030d34:	10800820 	cmpeqi	r2,r2,32
 4030d38:	10000b1e 	bne	r2,zero,4030d68 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
 4030d3c:	e0bffd17 	ldw	r2,-12(fp)
 4030d40:	e0ffff17 	ldw	r3,-4(fp)
 4030d44:	1885883a 	add	r2,r3,r2
 4030d48:	e13ffe17 	ldw	r4,-8(fp)
 4030d4c:	e0fffc17 	ldw	r3,-16(fp)
 4030d50:	20c7883a 	add	r3,r4,r3
 4030d54:	18c00003 	ldbu	r3,0(r3)
 4030d58:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
 4030d5c:	e0bffd17 	ldw	r2,-12(fp)
 4030d60:	10800044 	addi	r2,r2,1
 4030d64:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 4030d68:	e0bffc17 	ldw	r2,-16(fp)
 4030d6c:	10800044 	addi	r2,r2,1
 4030d70:	e0bffc15 	stw	r2,-16(fp)
 4030d74:	e0bffc17 	ldw	r2,-16(fp)
 4030d78:	10800210 	cmplti	r2,r2,8
 4030d7c:	103fe81e 	bne	r2,zero,4030d20 <__flash_rwdata_start+0xffffb4d0>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 4030d80:	e0bffe17 	ldw	r2,-8(fp)
 4030d84:	10800203 	ldbu	r2,8(r2)
 4030d88:	10803fcc 	andi	r2,r2,255
 4030d8c:	10800820 	cmpeqi	r2,r2,32
 4030d90:	1000241e 	bne	r2,zero,4030e24 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
 4030d94:	e0bffd17 	ldw	r2,-12(fp)
 4030d98:	e0ffff17 	ldw	r3,-4(fp)
 4030d9c:	1885883a 	add	r2,r3,r2
 4030da0:	00c00b84 	movi	r3,46
 4030da4:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
 4030da8:	e0bffd17 	ldw	r2,-12(fp)
 4030dac:	10800044 	addi	r2,r2,1
 4030db0:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
 4030db4:	e03ffc15 	stw	zero,-16(fp)
 4030db8:	00001706 	br	4030e18 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
 4030dbc:	e0fffe17 	ldw	r3,-8(fp)
 4030dc0:	e0bffc17 	ldw	r2,-16(fp)
 4030dc4:	1885883a 	add	r2,r3,r2
 4030dc8:	10800204 	addi	r2,r2,8
 4030dcc:	10800003 	ldbu	r2,0(r2)
 4030dd0:	10803fcc 	andi	r2,r2,255
 4030dd4:	10800820 	cmpeqi	r2,r2,32
 4030dd8:	10000c1e 	bne	r2,zero,4030e0c <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
 4030ddc:	e0bffd17 	ldw	r2,-12(fp)
 4030de0:	e0ffff17 	ldw	r3,-4(fp)
 4030de4:	1885883a 	add	r2,r3,r2
 4030de8:	e13ffe17 	ldw	r4,-8(fp)
 4030dec:	e0fffc17 	ldw	r3,-16(fp)
 4030df0:	20c7883a 	add	r3,r4,r3
 4030df4:	18c00204 	addi	r3,r3,8
 4030df8:	18c00003 	ldbu	r3,0(r3)
 4030dfc:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
 4030e00:	e0bffd17 	ldw	r2,-12(fp)
 4030e04:	10800044 	addi	r2,r2,1
 4030e08:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 4030e0c:	e0bffc17 	ldw	r2,-16(fp)
 4030e10:	10800044 	addi	r2,r2,1
 4030e14:	e0bffc15 	stw	r2,-16(fp)
 4030e18:	e0bffc17 	ldw	r2,-16(fp)
 4030e1c:	108000d0 	cmplti	r2,r2,3
 4030e20:	103fe61e 	bne	r2,zero,4030dbc <__flash_rwdata_start+0xffffb56c>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 4030e24:	e0bffd17 	ldw	r2,-12(fp)
 4030e28:	e0ffff17 	ldw	r3,-4(fp)
 4030e2c:	1885883a 	add	r2,r3,r2
 4030e30:	10000005 	stb	zero,0(r2)
}
 4030e34:	0001883a 	nop
 4030e38:	e037883a 	mov	sp,fp
 4030e3c:	df000017 	ldw	fp,0(sp)
 4030e40:	dec00104 	addi	sp,sp,4
 4030e44:	f800283a 	ret

04030e48 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 4030e48:	defffc04 	addi	sp,sp,-16
 4030e4c:	dfc00315 	stw	ra,12(sp)
 4030e50:	df000215 	stw	fp,8(sp)
 4030e54:	df000204 	addi	fp,sp,8
 4030e58:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 4030e5c:	d1600804 	addi	r5,gp,-32736
 4030e60:	e13fff17 	ldw	r4,-4(fp)
 4030e64:	40344180 	call	4034418 <alt_find_dev>
 4030e68:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 4030e6c:	e0bffe17 	ldw	r2,-8(fp)
 4030e70:	10001e26 	beq	r2,zero,4030eec <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 4030e74:	e0bffe17 	ldw	r2,-8(fp)
 4030e78:	10800a17 	ldw	r2,40(r2)
 4030e7c:	10808d04 	addi	r2,r2,564
 4030e80:	d0a02115 	stw	r2,-32636(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 4030e84:	e0bffe17 	ldw	r2,-8(fp)
 4030e88:	10800a17 	ldw	r2,40(r2)
 4030e8c:	10808904 	addi	r2,r2,548
 4030e90:	d0a02215 	stw	r2,-32632(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 4030e94:	e0bffe17 	ldw	r2,-8(fp)
 4030e98:	10800a17 	ldw	r2,40(r2)
 4030e9c:	10808404 	addi	r2,r2,528
 4030ea0:	d0a02315 	stw	r2,-32628(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 4030ea4:	e0bffe17 	ldw	r2,-8(fp)
 4030ea8:	10800a17 	ldw	r2,40(r2)
 4030eac:	10808c04 	addi	r2,r2,560
 4030eb0:	d0a02415 	stw	r2,-32624(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 4030eb4:	e0bffe17 	ldw	r2,-8(fp)
 4030eb8:	10800a17 	ldw	r2,40(r2)
 4030ebc:	10808b04 	addi	r2,r2,556
 4030ec0:	d0a02515 	stw	r2,-32620(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 4030ec4:	e0bffe17 	ldw	r2,-8(fp)
 4030ec8:	10800a17 	ldw	r2,40(r2)
 4030ecc:	d0a02615 	stw	r2,-32616(gp)
		device_pointer = dev;
 4030ed0:	e0bffe17 	ldw	r2,-8(fp)
 4030ed4:	d0a02915 	stw	r2,-32604(gp)
		initialized = false;
 4030ed8:	d0201f15 	stw	zero,-32644(gp)
		is_sd_card_formated_as_FAT16 = false;
 4030edc:	d0202015 	stw	zero,-32640(gp)
		search_data.valid = false;
 4030ee0:	00800034 	movhi	r2,0
 4030ee4:	10885504 	addi	r2,r2,8532
 4030ee8:	10000415 	stw	zero,16(r2)
	}
	return dev;
 4030eec:	e0bffe17 	ldw	r2,-8(fp)
}
 4030ef0:	e037883a 	mov	sp,fp
 4030ef4:	dfc00117 	ldw	ra,4(sp)
 4030ef8:	df000017 	ldw	fp,0(sp)
 4030efc:	dec00204 	addi	sp,sp,8
 4030f00:	f800283a 	ret

04030f04 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 4030f04:	defffd04 	addi	sp,sp,-12
 4030f08:	df000215 	stw	fp,8(sp)
 4030f0c:	df000204 	addi	fp,sp,8
    bool result = false;
 4030f10:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 4030f14:	d0a02917 	ldw	r2,-32604(gp)
 4030f18:	10000826 	beq	r2,zero,4030f3c <alt_up_sd_card_is_Present+0x38>
 4030f1c:	d0a02117 	ldw	r2,-32636(gp)
 4030f20:	1080002b 	ldhuio	r2,0(r2)
 4030f24:	10bfffcc 	andi	r2,r2,65535
 4030f28:	1080008c 	andi	r2,r2,2
 4030f2c:	10000326 	beq	r2,zero,4030f3c <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
 4030f30:	00800044 	movi	r2,1
 4030f34:	e0bffe15 	stw	r2,-8(fp)
 4030f38:	00001e06 	br	4030fb4 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
 4030f3c:	d0a01f17 	ldw	r2,-32644(gp)
 4030f40:	10800058 	cmpnei	r2,r2,1
 4030f44:	10001b1e 	bne	r2,zero,4030fb4 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
 4030f48:	d0201f15 	stw	zero,-32644(gp)
		search_data.valid = false;
 4030f4c:	00800034 	movhi	r2,0
 4030f50:	10885504 	addi	r2,r2,8532
 4030f54:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 4030f58:	d0202015 	stw	zero,-32640(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 4030f5c:	e03fff15 	stw	zero,-4(fp)
 4030f60:	00001106 	br	4030fa8 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
 4030f64:	00800034 	movhi	r2,0
 4030f68:	10886f04 	addi	r2,r2,8636
 4030f6c:	e0ffff17 	ldw	r3,-4(fp)
 4030f70:	180691ba 	slli	r3,r3,6
 4030f74:	10c5883a 	add	r2,r2,r3
 4030f78:	10800f04 	addi	r2,r2,60
 4030f7c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 4030f80:	00800034 	movhi	r2,0
 4030f84:	10886f04 	addi	r2,r2,8636
 4030f88:	e0ffff17 	ldw	r3,-4(fp)
 4030f8c:	180691ba 	slli	r3,r3,6
 4030f90:	10c5883a 	add	r2,r2,r3
 4030f94:	10800e04 	addi	r2,r2,56
 4030f98:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 4030f9c:	e0bfff17 	ldw	r2,-4(fp)
 4030fa0:	10800044 	addi	r2,r2,1
 4030fa4:	e0bfff15 	stw	r2,-4(fp)
 4030fa8:	e0bfff17 	ldw	r2,-4(fp)
 4030fac:	10800510 	cmplti	r2,r2,20
 4030fb0:	103fec1e 	bne	r2,zero,4030f64 <__flash_rwdata_start+0xffffb714>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 4030fb4:	e0bffe17 	ldw	r2,-8(fp)
}
 4030fb8:	e037883a 	mov	sp,fp
 4030fbc:	df000017 	ldw	fp,0(sp)
 4030fc0:	dec00104 	addi	sp,sp,4
 4030fc4:	f800283a 	ret

04030fc8 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 4030fc8:	defffd04 	addi	sp,sp,-12
 4030fcc:	dfc00215 	stw	ra,8(sp)
 4030fd0:	df000115 	stw	fp,4(sp)
 4030fd4:	df000104 	addi	fp,sp,4
	bool result = false;
 4030fd8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 4030fdc:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 4030fe0:	10000c26 	beq	r2,zero,4031014 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 4030fe4:	d0a01f17 	ldw	r2,-32644(gp)
 4030fe8:	1000071e 	bne	r2,zero,4031008 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 4030fec:	402f21c0 	call	402f21c <Look_for_FAT16>
 4030ff0:	d0a02015 	stw	r2,-32640(gp)
			initialized = is_sd_card_formated_as_FAT16;
 4030ff4:	d0a02017 	ldw	r2,-32640(gp)
 4030ff8:	d0a01f15 	stw	r2,-32644(gp)
			search_data.valid = false;
 4030ffc:	00800034 	movhi	r2,0
 4031000:	10885504 	addi	r2,r2,8532
 4031004:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 4031008:	d0a02017 	ldw	r2,-32640(gp)
 403100c:	e0bfff15 	stw	r2,-4(fp)
 4031010:	00000206 	br	403101c <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 4031014:	d0201f15 	stw	zero,-32644(gp)
		is_sd_card_formated_as_FAT16 = false;
 4031018:	d0202015 	stw	zero,-32640(gp)
	}

	return result;
 403101c:	e0bfff17 	ldw	r2,-4(fp)
}
 4031020:	e037883a 	mov	sp,fp
 4031024:	dfc00117 	ldw	ra,4(sp)
 4031028:	df000017 	ldw	fp,0(sp)
 403102c:	dec00204 	addi	sp,sp,8
 4031030:	f800283a 	ret

04031034 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 4031034:	deffea04 	addi	sp,sp,-88
 4031038:	dfc01515 	stw	ra,84(sp)
 403103c:	df001415 	stw	fp,80(sp)
 4031040:	df001404 	addi	fp,sp,80
 4031044:	e13ffe15 	stw	r4,-8(fp)
 4031048:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 403104c:	00800084 	movi	r2,2
 4031050:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 4031054:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 4031058:	10002426 	beq	r2,zero,40310ec <alt_up_sd_card_find_first+0xb8>
 403105c:	d0a02017 	ldw	r2,-32640(gp)
 4031060:	10002226 	beq	r2,zero,40310ec <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 4031064:	e0ffee04 	addi	r3,fp,-72
 4031068:	e0bfed04 	addi	r2,fp,-76
 403106c:	180d883a 	mov	r6,r3
 4031070:	100b883a 	mov	r5,r2
 4031074:	e13ffe17 	ldw	r4,-8(fp)
 4031078:	402f98c0 	call	402f98c <get_home_directory_cluster_for_file>
 403107c:	10001926 	beq	r2,zero,40310e4 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 4031080:	e0bfed17 	ldw	r2,-76(fp)
 4031084:	1007883a 	mov	r3,r2
 4031088:	00800034 	movhi	r2,0
 403108c:	10885504 	addi	r2,r2,8532
 4031090:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 4031094:	e0bfed17 	ldw	r2,-76(fp)
 4031098:	1007883a 	mov	r3,r2
 403109c:	00800034 	movhi	r2,0
 40310a0:	10885504 	addi	r2,r2,8532
 40310a4:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 40310a8:	00800034 	movhi	r2,0
 40310ac:	10885504 	addi	r2,r2,8532
 40310b0:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 40310b4:	00800034 	movhi	r2,0
 40310b8:	10885504 	addi	r2,r2,8532
 40310bc:	00ffffc4 	movi	r3,-1
 40310c0:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
 40310c4:	00800034 	movhi	r2,0
 40310c8:	10885504 	addi	r2,r2,8532
 40310cc:	00c00044 	movi	r3,1
 40310d0:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
 40310d4:	e13fff17 	ldw	r4,-4(fp)
 40310d8:	40311040 	call	4031104 <alt_up_sd_card_find_next>
 40310dc:	e0bfec0d 	sth	r2,-80(fp)
 40310e0:	00000206 	br	40310ec <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
 40310e4:	00800044 	movi	r2,1
 40310e8:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 40310ec:	e0bfec0b 	ldhu	r2,-80(fp)
}
 40310f0:	e037883a 	mov	sp,fp
 40310f4:	dfc00117 	ldw	ra,4(sp)
 40310f8:	df000017 	ldw	fp,0(sp)
 40310fc:	dec00204 	addi	sp,sp,8
 4031100:	f800283a 	ret

04031104 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 4031104:	deffe404 	addi	sp,sp,-112
 4031108:	dfc01b15 	stw	ra,108(sp)
 403110c:	df001a15 	stw	fp,104(sp)
 4031110:	df001a04 	addi	fp,sp,104
 4031114:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
 4031118:	00800084 	movi	r2,2
 403111c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 4031120:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 4031124:	1000e326 	beq	r2,zero,40314b4 <alt_up_sd_card_find_next+0x3b0>
 4031128:	d0a02017 	ldw	r2,-32640(gp)
 403112c:	1000e126 	beq	r2,zero,40314b4 <alt_up_sd_card_find_next+0x3b0>
	{
		if (search_data.valid)
 4031130:	00800034 	movhi	r2,0
 4031134:	10885504 	addi	r2,r2,8532
 4031138:	10800417 	ldw	r2,16(r2)
 403113c:	1000db26 	beq	r2,zero,40314ac <alt_up_sd_card_find_next+0x3a8>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 4031140:	00800034 	movhi	r2,0
 4031144:	10885504 	addi	r2,r2,8532
 4031148:	10800117 	ldw	r2,4(r2)
 403114c:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
 4031150:	e0bfe717 	ldw	r2,-100(fp)
 4031154:	1000581e 	bne	r2,zero,40312b8 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 4031158:	00800034 	movhi	r2,0
 403115c:	10885a04 	addi	r2,r2,8552
 4031160:	1080050b 	ldhu	r2,20(r2)
 4031164:	10bfffcc 	andi	r2,r2,65535
 4031168:	1006917a 	slli	r3,r2,5
 403116c:	00800034 	movhi	r2,0
 4031170:	10885a04 	addi	r2,r2,8552
 4031174:	1080030b 	ldhu	r2,12(r2)
 4031178:	10bfffcc 	andi	r2,r2,65535
 403117c:	100b883a 	mov	r5,r2
 4031180:	1809883a 	mov	r4,r3
 4031184:	402aa680 	call	402aa68 <__divsi3>
 4031188:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
 403118c:	00800034 	movhi	r2,0
 4031190:	10885504 	addi	r2,r2,8532
 4031194:	10800217 	ldw	r2,8(r2)
 4031198:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
 403119c:	00800034 	movhi	r2,0
 40311a0:	10885504 	addi	r2,r2,8532
 40311a4:	1080030b 	ldhu	r2,12(r2)
 40311a8:	10bfffcc 	andi	r2,r2,65535
 40311ac:	10a0001c 	xori	r2,r2,32768
 40311b0:	10a00004 	addi	r2,r2,-32768
 40311b4:	10800044 	addi	r2,r2,1
 40311b8:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 40311bc:	00003606 	br	4031298 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 40311c0:	00800034 	movhi	r2,0
 40311c4:	10885a04 	addi	r2,r2,8552
 40311c8:	10c01317 	ldw	r3,76(r2)
 40311cc:	e0bfe817 	ldw	r2,-96(fp)
 40311d0:	1885883a 	add	r2,r3,r2
 40311d4:	1007883a 	mov	r3,r2
 40311d8:	d0a02717 	ldw	r2,-32612(gp)
 40311dc:	100b883a 	mov	r5,r2
 40311e0:	1809883a 	mov	r4,r3
 40311e4:	402e2640 	call	402e264 <Read_Sector_Data>
 40311e8:	10002f26 	beq	r2,zero,40312a8 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 40311ec:	00002306 	br	403127c <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 40311f0:	e0bfe917 	ldw	r2,-92(fp)
 40311f4:	1004917a 	slli	r2,r2,5
 40311f8:	e13fe817 	ldw	r4,-96(fp)
 40311fc:	e0ffef04 	addi	r3,fp,-68
 4031200:	200f883a 	mov	r7,r4
 4031204:	000d883a 	mov	r6,zero
 4031208:	180b883a 	mov	r5,r3
 403120c:	1009883a 	mov	r4,r2
 4031210:	402e6740 	call	402e674 <Read_File_Record_At_Offset>
 4031214:	10001626 	beq	r2,zero,4031270 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 4031218:	e0bfef03 	ldbu	r2,-68(fp)
 403121c:	10803fcc 	andi	r2,r2,255
 4031220:	10001326 	beq	r2,zero,4031270 <alt_up_sd_card_find_next+0x16c>
 4031224:	e0bfef03 	ldbu	r2,-68(fp)
 4031228:	10803fcc 	andi	r2,r2,255
 403122c:	10803960 	cmpeqi	r2,r2,229
 4031230:	10000f1e 	bne	r2,zero,4031270 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 4031234:	e0bfe917 	ldw	r2,-92(fp)
 4031238:	1007883a 	mov	r3,r2
 403123c:	00800034 	movhi	r2,0
 4031240:	10885504 	addi	r2,r2,8532
 4031244:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 4031248:	e0ffe817 	ldw	r3,-96(fp)
 403124c:	00800034 	movhi	r2,0
 4031250:	10885504 	addi	r2,r2,8532
 4031254:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 4031258:	e0bfef04 	addi	r2,fp,-68
 403125c:	e17fff17 	ldw	r5,-4(fp)
 4031260:	1009883a 	mov	r4,r2
 4031264:	4030d000 	call	4030d00 <copy_file_record_name_to_string>
									return 0;
 4031268:	0005883a 	mov	r2,zero
 403126c:	00009206 	br	40314b8 <alt_up_sd_card_find_next+0x3b4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 4031270:	e0bfe917 	ldw	r2,-92(fp)
 4031274:	10800044 	addi	r2,r2,1
 4031278:	e0bfe915 	stw	r2,-92(fp)
 403127c:	e0bfe917 	ldw	r2,-92(fp)
 4031280:	10800410 	cmplti	r2,r2,16
 4031284:	103fda1e 	bne	r2,zero,40311f0 <__flash_rwdata_start+0xffffb9a0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 4031288:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 403128c:	e0bfe817 	ldw	r2,-96(fp)
 4031290:	10800044 	addi	r2,r2,1
 4031294:	e0bfe815 	stw	r2,-96(fp)
 4031298:	e0ffe817 	ldw	r3,-96(fp)
 403129c:	e0bfec17 	ldw	r2,-80(fp)
 40312a0:	18bfc716 	blt	r3,r2,40311c0 <__flash_rwdata_start+0xffffb970>
 40312a4:	00000106 	br	40312ac <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
 40312a8:	0001883a 	nop
					}
				}
				result = -1;
 40312ac:	00bfffc4 	movi	r2,-1
 40312b0:	e0bfe60d 	sth	r2,-104(fp)
 40312b4:	00007f06 	br	40314b4 <alt_up_sd_card_find_next+0x3b0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 40312b8:	00800034 	movhi	r2,0
 40312bc:	10885504 	addi	r2,r2,8532
 40312c0:	1080030b 	ldhu	r2,12(r2)
 40312c4:	10bfffcc 	andi	r2,r2,65535
 40312c8:	10a0001c 	xori	r2,r2,32768
 40312cc:	10a00004 	addi	r2,r2,-32768
 40312d0:	10800044 	addi	r2,r2,1
 40312d4:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 40312d8:	e0bfe717 	ldw	r2,-100(fp)
 40312dc:	10ffff84 	addi	r3,r2,-2
 40312e0:	00800034 	movhi	r2,0
 40312e4:	10885a04 	addi	r2,r2,8552
 40312e8:	10800383 	ldbu	r2,14(r2)
 40312ec:	10803fcc 	andi	r2,r2,255
 40312f0:	100b883a 	mov	r5,r2
 40312f4:	1809883a 	mov	r4,r3
 40312f8:	402ac1c0 	call	402ac1c <__mulsi3>
 40312fc:	1007883a 	mov	r3,r2
 4031300:	00800034 	movhi	r2,0
 4031304:	10885a04 	addi	r2,r2,8552
 4031308:	10801417 	ldw	r2,80(r2)
 403130c:	1885883a 	add	r2,r3,r2
 4031310:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
 4031314:	00800034 	movhi	r2,0
 4031318:	10885504 	addi	r2,r2,8532
 403131c:	10800217 	ldw	r2,8(r2)
 4031320:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 4031324:	00003806 	br	4031408 <alt_up_sd_card_find_next+0x304>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 4031328:	e0ffeb17 	ldw	r3,-84(fp)
 403132c:	e0bfed17 	ldw	r2,-76(fp)
 4031330:	1885883a 	add	r2,r3,r2
 4031334:	d0e02717 	ldw	r3,-32612(gp)
 4031338:	180b883a 	mov	r5,r3
 403133c:	1009883a 	mov	r4,r2
 4031340:	402e2640 	call	402e264 <Read_Sector_Data>
 4031344:	10003726 	beq	r2,zero,4031424 <alt_up_sd_card_find_next+0x320>
						{        
							for (; file_counter < 16; file_counter++)
 4031348:	00002806 	br	40313ec <alt_up_sd_card_find_next+0x2e8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 403134c:	e0bfea17 	ldw	r2,-88(fp)
 4031350:	1004917a 	slli	r2,r2,5
 4031354:	e13fe717 	ldw	r4,-100(fp)
 4031358:	e17feb17 	ldw	r5,-84(fp)
 403135c:	e0ffef04 	addi	r3,fp,-68
 4031360:	280f883a 	mov	r7,r5
 4031364:	200d883a 	mov	r6,r4
 4031368:	180b883a 	mov	r5,r3
 403136c:	1009883a 	mov	r4,r2
 4031370:	402e6740 	call	402e674 <Read_File_Record_At_Offset>
 4031374:	10001a26 	beq	r2,zero,40313e0 <alt_up_sd_card_find_next+0x2dc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 4031378:	e0bfef03 	ldbu	r2,-68(fp)
 403137c:	10803fcc 	andi	r2,r2,255
 4031380:	10001726 	beq	r2,zero,40313e0 <alt_up_sd_card_find_next+0x2dc>
 4031384:	e0bfef03 	ldbu	r2,-68(fp)
 4031388:	10803fcc 	andi	r2,r2,255
 403138c:	10803960 	cmpeqi	r2,r2,229
 4031390:	1000131e 	bne	r2,zero,40313e0 <alt_up_sd_card_find_next+0x2dc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 4031394:	e0ffe717 	ldw	r3,-100(fp)
 4031398:	00800034 	movhi	r2,0
 403139c:	10885504 	addi	r2,r2,8532
 40313a0:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 40313a4:	e0bfea17 	ldw	r2,-88(fp)
 40313a8:	1007883a 	mov	r3,r2
 40313ac:	00800034 	movhi	r2,0
 40313b0:	10885504 	addi	r2,r2,8532
 40313b4:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 40313b8:	e0ffeb17 	ldw	r3,-84(fp)
 40313bc:	00800034 	movhi	r2,0
 40313c0:	10885504 	addi	r2,r2,8532
 40313c4:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 40313c8:	e0bfef04 	addi	r2,fp,-68
 40313cc:	e17fff17 	ldw	r5,-4(fp)
 40313d0:	1009883a 	mov	r4,r2
 40313d4:	4030d000 	call	4030d00 <copy_file_record_name_to_string>
										return 0;
 40313d8:	0005883a 	mov	r2,zero
 40313dc:	00003606 	br	40314b8 <alt_up_sd_card_find_next+0x3b4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 40313e0:	e0bfea17 	ldw	r2,-88(fp)
 40313e4:	10800044 	addi	r2,r2,1
 40313e8:	e0bfea15 	stw	r2,-88(fp)
 40313ec:	e0bfea17 	ldw	r2,-88(fp)
 40313f0:	10800410 	cmplti	r2,r2,16
 40313f4:	103fd51e 	bne	r2,zero,403134c <__flash_rwdata_start+0xffffbafc>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 40313f8:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 40313fc:	e0bfeb17 	ldw	r2,-84(fp)
 4031400:	10800044 	addi	r2,r2,1
 4031404:	e0bfeb15 	stw	r2,-84(fp)
 4031408:	00800034 	movhi	r2,0
 403140c:	10885a04 	addi	r2,r2,8552
 4031410:	10800383 	ldbu	r2,14(r2)
 4031414:	10803fcc 	andi	r2,r2,255
 4031418:	e0ffeb17 	ldw	r3,-84(fp)
 403141c:	18bfc216 	blt	r3,r2,4031328 <__flash_rwdata_start+0xffffbad8>
 4031420:	00000106 	br	4031428 <alt_up_sd_card_find_next+0x324>
							}
							file_counter = 0;
						}
						else
						{
							break;
 4031424:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 4031428:	00800034 	movhi	r2,0
 403142c:	10885a04 	addi	r2,r2,8552
 4031430:	10800383 	ldbu	r2,14(r2)
 4031434:	10803fcc 	andi	r2,r2,255
 4031438:	e0ffeb17 	ldw	r3,-84(fp)
 403143c:	18801716 	blt	r3,r2,403149c <alt_up_sd_card_find_next+0x398>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 4031440:	e0bfe717 	ldw	r2,-100(fp)
 4031444:	e0ffee04 	addi	r3,fp,-72
 4031448:	180b883a 	mov	r5,r3
 403144c:	1009883a 	mov	r4,r2
 4031450:	402e33c0 	call	402e33c <get_cluster_flag>
 4031454:	10000f26 	beq	r2,zero,4031494 <alt_up_sd_card_find_next+0x390>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 4031458:	e0bfee0b 	ldhu	r2,-72(fp)
 403145c:	10bfffcc 	andi	r2,r2,65535
 4031460:	10fffe0c 	andi	r3,r2,65528
 4031464:	00bffe14 	movui	r2,65528
 4031468:	1880051e 	bne	r3,r2,4031480 <alt_up_sd_card_find_next+0x37c>
							{
								result = -1;
 403146c:	00bfffc4 	movi	r2,-1
 4031470:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
 4031474:	00800034 	movhi	r2,0
 4031478:	10885504 	addi	r2,r2,8532
 403147c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 4031480:	e0bfee0b 	ldhu	r2,-72(fp)
 4031484:	10bfffcc 	andi	r2,r2,65535
 4031488:	10bffe0c 	andi	r2,r2,65528
 403148c:	e0bfe715 	stw	r2,-100(fp)
 4031490:	00000206 	br	403149c <alt_up_sd_card_find_next+0x398>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 4031494:	00bfffc4 	movi	r2,-1
 4031498:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 403149c:	e0bfe717 	ldw	r2,-100(fp)
 40314a0:	00fffdd4 	movui	r3,65527
 40314a4:	18bf8c0e 	bge	r3,r2,40312d8 <__flash_rwdata_start+0xffffba88>
 40314a8:	00000206 	br	40314b4 <alt_up_sd_card_find_next+0x3b0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 40314ac:	008000c4 	movi	r2,3
 40314b0:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
 40314b4:	e0bfe60b 	ldhu	r2,-104(fp)
}
 40314b8:	e037883a 	mov	sp,fp
 40314bc:	dfc00117 	ldw	ra,4(sp)
 40314c0:	df000017 	ldw	fp,0(sp)
 40314c4:	dec00204 	addi	sp,sp,8
 40314c8:	f800283a 	ret

040314cc <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 40314cc:	deffe904 	addi	sp,sp,-92
 40314d0:	dfc01615 	stw	ra,88(sp)
 40314d4:	df001515 	stw	fp,84(sp)
 40314d8:	df001504 	addi	fp,sp,84
 40314dc:	e13ffe15 	stw	r4,-8(fp)
 40314e0:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
 40314e4:	00bfffc4 	movi	r2,-1
 40314e8:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 40314ec:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 40314f0:	1000cf26 	beq	r2,zero,4031830 <alt_up_sd_card_fopen+0x364>
 40314f4:	d0a02017 	ldw	r2,-32640(gp)
 40314f8:	1000cd26 	beq	r2,zero,4031830 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
 40314fc:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 4031500:	e13ffe17 	ldw	r4,-8(fp)
 4031504:	402f3080 	call	402f308 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 4031508:	e13ffe17 	ldw	r4,-8(fp)
 403150c:	402f3cc0 	call	402f3cc <check_file_name_for_FAT16_compliance>
 4031510:	1000c726 	beq	r2,zero,4031830 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
 4031514:	e0ffee04 	addi	r3,fp,-72
 4031518:	e0bfed04 	addi	r2,fp,-76
 403151c:	180d883a 	mov	r6,r3
 4031520:	100b883a 	mov	r5,r2
 4031524:	e13ffe17 	ldw	r4,-8(fp)
 4031528:	402f98c0 	call	402f98c <get_home_directory_cluster_for_file>
 403152c:	1000021e 	bne	r2,zero,4031538 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
 4031530:	e0bfeb0b 	ldhu	r2,-84(fp)
 4031534:	0000bf06 	br	4031834 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 4031538:	e03fec15 	stw	zero,-80(fp)
 403153c:	00000e06 	br	4031578 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
 4031540:	00800034 	movhi	r2,0
 4031544:	10886f04 	addi	r2,r2,8636
 4031548:	e0ffec17 	ldw	r3,-80(fp)
 403154c:	180691ba 	slli	r3,r3,6
 4031550:	10c5883a 	add	r2,r2,r3
 4031554:	10800f04 	addi	r2,r2,60
 4031558:	10800017 	ldw	r2,0(r2)
 403155c:	1000031e 	bne	r2,zero,403156c <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
 4031560:	e0bfec17 	ldw	r2,-80(fp)
 4031564:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 4031568:	00000606 	br	4031584 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 403156c:	e0bfec17 	ldw	r2,-80(fp)
 4031570:	10800044 	addi	r2,r2,1
 4031574:	e0bfec15 	stw	r2,-80(fp)
 4031578:	e0bfec17 	ldw	r2,-80(fp)
 403157c:	10800510 	cmplti	r2,r2,20
 4031580:	103fef1e 	bne	r2,zero,4031540 <__flash_rwdata_start+0xffffbcf0>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 4031584:	e0bfeb0f 	ldh	r2,-84(fp)
 4031588:	1000a916 	blt	r2,zero,4031830 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 403158c:	e0bfed17 	ldw	r2,-76(fp)
 4031590:	1009883a 	mov	r4,r2
 4031594:	e0bfeb0f 	ldh	r2,-84(fp)
 4031598:	100691ba 	slli	r3,r2,6
 403159c:	00800034 	movhi	r2,0
 40315a0:	10886f04 	addi	r2,r2,8636
 40315a4:	1885883a 	add	r2,r3,r2
 40315a8:	100d883a 	mov	r6,r2
 40315ac:	e17ffe17 	ldw	r5,-8(fp)
 40315b0:	402fed40 	call	402fed4 <find_file_in_directory>
 40315b4:	10007b26 	beq	r2,zero,40317a4 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
 40315b8:	e0bfff17 	ldw	r2,-4(fp)
 40315bc:	10000226 	beq	r2,zero,40315c8 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 40315c0:	00bfffc4 	movi	r2,-1
 40315c4:	00009b06 	br	4031834 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 40315c8:	e13feb0f 	ldh	r4,-84(fp)
 40315cc:	e0ffeb0f 	ldh	r3,-84(fp)
 40315d0:	00800034 	movhi	r2,0
 40315d4:	10886f04 	addi	r2,r2,8636
 40315d8:	180691ba 	slli	r3,r3,6
 40315dc:	10c5883a 	add	r2,r2,r3
 40315e0:	10800584 	addi	r2,r2,22
 40315e4:	1080000b 	ldhu	r2,0(r2)
 40315e8:	10ffffcc 	andi	r3,r2,65535
 40315ec:	00800034 	movhi	r2,0
 40315f0:	10886f04 	addi	r2,r2,8636
 40315f4:	200891ba 	slli	r4,r4,6
 40315f8:	1105883a 	add	r2,r2,r4
 40315fc:	10800704 	addi	r2,r2,28
 4031600:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 4031604:	e0ffeb0f 	ldh	r3,-84(fp)
 4031608:	00800034 	movhi	r2,0
 403160c:	10886f04 	addi	r2,r2,8636
 4031610:	180691ba 	slli	r3,r3,6
 4031614:	10c5883a 	add	r2,r2,r3
 4031618:	10800804 	addi	r2,r2,32
 403161c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 4031620:	e0ffeb0f 	ldh	r3,-84(fp)
 4031624:	00800034 	movhi	r2,0
 4031628:	10886f04 	addi	r2,r2,8636
 403162c:	180691ba 	slli	r3,r3,6
 4031630:	10c5883a 	add	r2,r2,r3
 4031634:	10800904 	addi	r2,r2,36
 4031638:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 403163c:	e0ffeb0f 	ldh	r3,-84(fp)
 4031640:	00800034 	movhi	r2,0
 4031644:	10886f04 	addi	r2,r2,8636
 4031648:	180691ba 	slli	r3,r3,6
 403164c:	10c5883a 	add	r2,r2,r3
 4031650:	10800f04 	addi	r2,r2,60
 4031654:	00c00044 	movi	r3,1
 4031658:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
 403165c:	e0ffeb0f 	ldh	r3,-84(fp)
 4031660:	00800034 	movhi	r2,0
 4031664:	10886f04 	addi	r2,r2,8636
 4031668:	180691ba 	slli	r3,r3,6
 403166c:	10c5883a 	add	r2,r2,r3
 4031670:	10800e04 	addi	r2,r2,56
 4031674:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 4031678:	e03fec15 	stw	zero,-80(fp)
 403167c:	00004506 	br	4031794 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 4031680:	e0ffeb0f 	ldh	r3,-84(fp)
 4031684:	e0bfec17 	ldw	r2,-80(fp)
 4031688:	18803f26 	beq	r3,r2,4031788 <alt_up_sd_card_fopen+0x2bc>
 403168c:	00800034 	movhi	r2,0
 4031690:	10886f04 	addi	r2,r2,8636
 4031694:	e0ffec17 	ldw	r3,-80(fp)
 4031698:	180691ba 	slli	r3,r3,6
 403169c:	10c5883a 	add	r2,r2,r3
 40316a0:	10800f04 	addi	r2,r2,60
 40316a4:	10800017 	ldw	r2,0(r2)
 40316a8:	10800058 	cmpnei	r2,r2,1
 40316ac:	1000361e 	bne	r2,zero,4031788 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 40316b0:	e0ffeb0f 	ldh	r3,-84(fp)
 40316b4:	00800034 	movhi	r2,0
 40316b8:	10886f04 	addi	r2,r2,8636
 40316bc:	180691ba 	slli	r3,r3,6
 40316c0:	10c5883a 	add	r2,r2,r3
 40316c4:	10800a04 	addi	r2,r2,40
 40316c8:	10c00017 	ldw	r3,0(r2)
 40316cc:	00800034 	movhi	r2,0
 40316d0:	10886f04 	addi	r2,r2,8636
 40316d4:	e13fec17 	ldw	r4,-80(fp)
 40316d8:	200891ba 	slli	r4,r4,6
 40316dc:	1105883a 	add	r2,r2,r4
 40316e0:	10800a04 	addi	r2,r2,40
 40316e4:	10800017 	ldw	r2,0(r2)
 40316e8:	1880271e 	bne	r3,r2,4031788 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 40316ec:	e0ffeb0f 	ldh	r3,-84(fp)
 40316f0:	00800034 	movhi	r2,0
 40316f4:	10886f04 	addi	r2,r2,8636
 40316f8:	180691ba 	slli	r3,r3,6
 40316fc:	10c5883a 	add	r2,r2,r3
 4031700:	10800b04 	addi	r2,r2,44
 4031704:	10c00017 	ldw	r3,0(r2)
 4031708:	00800034 	movhi	r2,0
 403170c:	10886f04 	addi	r2,r2,8636
 4031710:	e13fec17 	ldw	r4,-80(fp)
 4031714:	200891ba 	slli	r4,r4,6
 4031718:	1105883a 	add	r2,r2,r4
 403171c:	10800b04 	addi	r2,r2,44
 4031720:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 4031724:	1880181e 	bne	r3,r2,4031788 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
 4031728:	e0ffeb0f 	ldh	r3,-84(fp)
 403172c:	00800034 	movhi	r2,0
 4031730:	10886f04 	addi	r2,r2,8636
 4031734:	180691ba 	slli	r3,r3,6
 4031738:	10c5883a 	add	r2,r2,r3
 403173c:	10800c04 	addi	r2,r2,48
 4031740:	1100000b 	ldhu	r4,0(r2)
 4031744:	00800034 	movhi	r2,0
 4031748:	10886f04 	addi	r2,r2,8636
 403174c:	e0ffec17 	ldw	r3,-80(fp)
 4031750:	180691ba 	slli	r3,r3,6
 4031754:	10c5883a 	add	r2,r2,r3
 4031758:	10800c04 	addi	r2,r2,48
 403175c:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 4031760:	20ffffcc 	andi	r3,r4,65535
 4031764:	18e0001c 	xori	r3,r3,32768
 4031768:	18e00004 	addi	r3,r3,-32768
 403176c:	10bfffcc 	andi	r2,r2,65535
 4031770:	10a0001c 	xori	r2,r2,32768
 4031774:	10a00004 	addi	r2,r2,-32768
 4031778:	1880031e 	bne	r3,r2,4031788 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 403177c:	00bfff84 	movi	r2,-2
 4031780:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 4031784:	00002a06 	br	4031830 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 4031788:	e0bfec17 	ldw	r2,-80(fp)
 403178c:	10800044 	addi	r2,r2,1
 4031790:	e0bfec15 	stw	r2,-80(fp)
 4031794:	e0bfec17 	ldw	r2,-80(fp)
 4031798:	10800510 	cmplti	r2,r2,20
 403179c:	103fb81e 	bne	r2,zero,4031680 <__flash_rwdata_start+0xffffbe30>
 40317a0:	00002306 	br	4031830 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
 40317a4:	e0bfff17 	ldw	r2,-4(fp)
 40317a8:	10001f26 	beq	r2,zero,4031828 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 40317ac:	e0bfeb0f 	ldh	r2,-84(fp)
 40317b0:	100691ba 	slli	r3,r2,6
 40317b4:	00800034 	movhi	r2,0
 40317b8:	10886f04 	addi	r2,r2,8636
 40317bc:	1885883a 	add	r2,r3,r2
 40317c0:	e0ffee04 	addi	r3,fp,-72
 40317c4:	180d883a 	mov	r6,r3
 40317c8:	100b883a 	mov	r5,r2
 40317cc:	e13ffe17 	ldw	r4,-8(fp)
 40317d0:	4030a280 	call	4030a28 <create_file>
 40317d4:	10001126 	beq	r2,zero,403181c <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
 40317d8:	e0ffeb0f 	ldh	r3,-84(fp)
 40317dc:	00800034 	movhi	r2,0
 40317e0:	10886f04 	addi	r2,r2,8636
 40317e4:	180691ba 	slli	r3,r3,6
 40317e8:	10c5883a 	add	r2,r2,r3
 40317ec:	10800f04 	addi	r2,r2,60
 40317f0:	00c00044 	movi	r3,1
 40317f4:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
 40317f8:	e0ffeb0f 	ldh	r3,-84(fp)
 40317fc:	00800034 	movhi	r2,0
 4031800:	10886f04 	addi	r2,r2,8636
 4031804:	180691ba 	slli	r3,r3,6
 4031808:	10c5883a 	add	r2,r2,r3
 403180c:	10800e04 	addi	r2,r2,56
 4031810:	00c00044 	movi	r3,1
 4031814:	10c00015 	stw	r3,0(r2)
 4031818:	00000506 	br	4031830 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 403181c:	00bfffc4 	movi	r2,-1
 4031820:	e0bfeb0d 	sth	r2,-84(fp)
 4031824:	00000206 	br	4031830 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 4031828:	00bfffc4 	movi	r2,-1
 403182c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
 4031830:	e0bfeb0b 	ldhu	r2,-84(fp)
}
 4031834:	e037883a 	mov	sp,fp
 4031838:	dfc00117 	ldw	ra,4(sp)
 403183c:	df000017 	ldw	fp,0(sp)
 4031840:	dec00204 	addi	sp,sp,8
 4031844:	f800283a 	ret

04031848 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 4031848:	defffd04 	addi	sp,sp,-12
 403184c:	df000215 	stw	fp,8(sp)
 4031850:	df000204 	addi	fp,sp,8
 4031854:	2007883a 	mov	r3,r4
 4031858:	2805883a 	mov	r2,r5
 403185c:	e0fffe0d 	sth	r3,-8(fp)
 4031860:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 4031864:	e0bffe0f 	ldh	r2,-8(fp)
 4031868:	10001416 	blt	r2,zero,40318bc <alt_up_sd_card_set_attributes+0x74>
 403186c:	e0bffe0f 	ldh	r2,-8(fp)
 4031870:	10800508 	cmpgei	r2,r2,20
 4031874:	1000111e 	bne	r2,zero,40318bc <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 4031878:	e0fffe0f 	ldh	r3,-8(fp)
 403187c:	00800034 	movhi	r2,0
 4031880:	10886f04 	addi	r2,r2,8636
 4031884:	180691ba 	slli	r3,r3,6
 4031888:	10c5883a 	add	r2,r2,r3
 403188c:	10800f04 	addi	r2,r2,60
 4031890:	10800017 	ldw	r2,0(r2)
 4031894:	10000926 	beq	r2,zero,40318bc <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 4031898:	e0fffe0f 	ldh	r3,-8(fp)
 403189c:	e0bfff0b 	ldhu	r2,-4(fp)
 40318a0:	1009883a 	mov	r4,r2
 40318a4:	00800034 	movhi	r2,0
 40318a8:	10886f04 	addi	r2,r2,8636
 40318ac:	180691ba 	slli	r3,r3,6
 40318b0:	10c5883a 	add	r2,r2,r3
 40318b4:	108002c4 	addi	r2,r2,11
 40318b8:	11000005 	stb	r4,0(r2)
        }
    }
}
 40318bc:	0001883a 	nop
 40318c0:	e037883a 	mov	sp,fp
 40318c4:	df000017 	ldw	fp,0(sp)
 40318c8:	dec00104 	addi	sp,sp,4
 40318cc:	f800283a 	ret

040318d0 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 40318d0:	defffd04 	addi	sp,sp,-12
 40318d4:	df000215 	stw	fp,8(sp)
 40318d8:	df000204 	addi	fp,sp,8
 40318dc:	2005883a 	mov	r2,r4
 40318e0:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
 40318e4:	00bfffc4 	movi	r2,-1
 40318e8:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 40318ec:	e0bfff0f 	ldh	r2,-4(fp)
 40318f0:	10001416 	blt	r2,zero,4031944 <alt_up_sd_card_get_attributes+0x74>
 40318f4:	e0bfff0f 	ldh	r2,-4(fp)
 40318f8:	10800508 	cmpgei	r2,r2,20
 40318fc:	1000111e 	bne	r2,zero,4031944 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 4031900:	e0ffff0f 	ldh	r3,-4(fp)
 4031904:	00800034 	movhi	r2,0
 4031908:	10886f04 	addi	r2,r2,8636
 403190c:	180691ba 	slli	r3,r3,6
 4031910:	10c5883a 	add	r2,r2,r3
 4031914:	10800f04 	addi	r2,r2,60
 4031918:	10800017 	ldw	r2,0(r2)
 403191c:	10000926 	beq	r2,zero,4031944 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 4031920:	e0ffff0f 	ldh	r3,-4(fp)
 4031924:	00800034 	movhi	r2,0
 4031928:	10886f04 	addi	r2,r2,8636
 403192c:	180691ba 	slli	r3,r3,6
 4031930:	10c5883a 	add	r2,r2,r3
 4031934:	108002c4 	addi	r2,r2,11
 4031938:	10800003 	ldbu	r2,0(r2)
 403193c:	10803fcc 	andi	r2,r2,255
 4031940:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 4031944:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4031948:	e037883a 	mov	sp,fp
 403194c:	df000017 	ldw	fp,0(sp)
 4031950:	dec00104 	addi	sp,sp,4
 4031954:	f800283a 	ret

04031958 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 4031958:	defff904 	addi	sp,sp,-28
 403195c:	dfc00615 	stw	ra,24(sp)
 4031960:	df000515 	stw	fp,20(sp)
 4031964:	dc000415 	stw	r16,16(sp)
 4031968:	df000504 	addi	fp,sp,20
 403196c:	2005883a 	mov	r2,r4
 4031970:	e0bffe0d 	sth	r2,-8(fp)
    short int ch = -1;
 4031974:	00bfffc4 	movi	r2,-1
 4031978:	e0bffb0d 	sth	r2,-20(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 403197c:	e0bffe0f 	ldh	r2,-8(fp)
 4031980:	1000d216 	blt	r2,zero,4031ccc <alt_up_sd_card_read+0x374>
 4031984:	e0bffe0f 	ldh	r2,-8(fp)
 4031988:	10800508 	cmpgei	r2,r2,20
 403198c:	1000cf1e 	bne	r2,zero,4031ccc <alt_up_sd_card_read+0x374>
    {
        if (active_files[file_handle].in_use)
 4031990:	e0fffe0f 	ldh	r3,-8(fp)
 4031994:	00800034 	movhi	r2,0
 4031998:	10886f04 	addi	r2,r2,8636
 403199c:	180691ba 	slli	r3,r3,6
 40319a0:	10c5883a 	add	r2,r2,r3
 40319a4:	10800f04 	addi	r2,r2,60
 40319a8:	10800017 	ldw	r2,0(r2)
 40319ac:	1000c726 	beq	r2,zero,4031ccc <alt_up_sd_card_read+0x374>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 40319b0:	e0fffe0f 	ldh	r3,-8(fp)
 40319b4:	00800034 	movhi	r2,0
 40319b8:	10886f04 	addi	r2,r2,8636
 40319bc:	180691ba 	slli	r3,r3,6
 40319c0:	10c5883a 	add	r2,r2,r3
 40319c4:	10800904 	addi	r2,r2,36
 40319c8:	10c00017 	ldw	r3,0(r2)
 40319cc:	e13ffe0f 	ldh	r4,-8(fp)
 40319d0:	00800034 	movhi	r2,0
 40319d4:	10886f04 	addi	r2,r2,8636
 40319d8:	200891ba 	slli	r4,r4,6
 40319dc:	1105883a 	add	r2,r2,r4
 40319e0:	10800604 	addi	r2,r2,24
 40319e4:	10800017 	ldw	r2,0(r2)
 40319e8:	1880b82e 	bgeu	r3,r2,4031ccc <alt_up_sd_card_read+0x374>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 40319ec:	00800034 	movhi	r2,0
 40319f0:	10885a04 	addi	r2,r2,8552
 40319f4:	14001417 	ldw	r16,80(r2)
 40319f8:	e0fffe0f 	ldh	r3,-8(fp)
 40319fc:	00800034 	movhi	r2,0
 4031a00:	10886f04 	addi	r2,r2,8636
 4031a04:	180691ba 	slli	r3,r3,6
 4031a08:	10c5883a 	add	r2,r2,r3
 4031a0c:	10800704 	addi	r2,r2,28
 4031a10:	10800017 	ldw	r2,0(r2)
 4031a14:	10ffff84 	addi	r3,r2,-2
 4031a18:	00800034 	movhi	r2,0
 4031a1c:	10885a04 	addi	r2,r2,8552
 4031a20:	10800383 	ldbu	r2,14(r2)
 4031a24:	10803fcc 	andi	r2,r2,255
 4031a28:	100b883a 	mov	r5,r2
 4031a2c:	1809883a 	mov	r4,r3
 4031a30:	402ac1c0 	call	402ac1c <__mulsi3>
 4031a34:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;
 4031a38:	e13ffe0f 	ldh	r4,-8(fp)
 4031a3c:	00800034 	movhi	r2,0
 4031a40:	10886f04 	addi	r2,r2,8636
 4031a44:	200891ba 	slli	r4,r4,6
 4031a48:	1105883a 	add	r2,r2,r4
 4031a4c:	10800804 	addi	r2,r2,32
 4031a50:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031a54:	1885883a 	add	r2,r3,r2
 4031a58:	e0bffc15 	stw	r2,-16(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 4031a5c:	e0fffe0f 	ldh	r3,-8(fp)
 4031a60:	00800034 	movhi	r2,0
 4031a64:	10886f04 	addi	r2,r2,8636
 4031a68:	180691ba 	slli	r3,r3,6
 4031a6c:	10c5883a 	add	r2,r2,r3
 4031a70:	10800904 	addi	r2,r2,36
 4031a74:	10800017 	ldw	r2,0(r2)
 4031a78:	10006a26 	beq	r2,zero,4031c24 <alt_up_sd_card_read+0x2cc>
 4031a7c:	e0fffe0f 	ldh	r3,-8(fp)
 4031a80:	00800034 	movhi	r2,0
 4031a84:	10886f04 	addi	r2,r2,8636
 4031a88:	180691ba 	slli	r3,r3,6
 4031a8c:	10c5883a 	add	r2,r2,r3
 4031a90:	10800904 	addi	r2,r2,36
 4031a94:	10800017 	ldw	r2,0(r2)
 4031a98:	10807fcc 	andi	r2,r2,511
 4031a9c:	1000611e 	bne	r2,zero,4031c24 <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 4031aa0:	e0fffe0f 	ldh	r3,-8(fp)
 4031aa4:	00800034 	movhi	r2,0
 4031aa8:	10886f04 	addi	r2,r2,8636
 4031aac:	180691ba 	slli	r3,r3,6
 4031ab0:	10c5883a 	add	r2,r2,r3
 4031ab4:	10800804 	addi	r2,r2,32
 4031ab8:	10c00017 	ldw	r3,0(r2)
 4031abc:	00800034 	movhi	r2,0
 4031ac0:	10885a04 	addi	r2,r2,8552
 4031ac4:	10800383 	ldbu	r2,14(r2)
 4031ac8:	10803fcc 	andi	r2,r2,255
 4031acc:	10bfffc4 	addi	r2,r2,-1
 4031ad0:	1880421e 	bne	r3,r2,4031bdc <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 4031ad4:	e0fffe0f 	ldh	r3,-8(fp)
 4031ad8:	00800034 	movhi	r2,0
 4031adc:	10886f04 	addi	r2,r2,8636
 4031ae0:	180691ba 	slli	r3,r3,6
 4031ae4:	10c5883a 	add	r2,r2,r3
 4031ae8:	10800704 	addi	r2,r2,28
 4031aec:	10800017 	ldw	r2,0(r2)
 4031af0:	e0fffd04 	addi	r3,fp,-12
 4031af4:	180b883a 	mov	r5,r3
 4031af8:	1009883a 	mov	r4,r2
 4031afc:	402e33c0 	call	402e33c <get_cluster_flag>
 4031b00:	10003426 	beq	r2,zero,4031bd4 <alt_up_sd_card_read+0x27c>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 4031b04:	e0bffd0b 	ldhu	r2,-12(fp)
 4031b08:	10bfffcc 	andi	r2,r2,65535
 4031b0c:	10fffe0c 	andi	r3,r2,65528
 4031b10:	00bffe14 	movui	r2,65528
 4031b14:	1880021e 	bne	r3,r2,4031b20 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
 4031b18:	00bfffc4 	movi	r2,-1
 4031b1c:	00006c06 	br	4031cd0 <alt_up_sd_card_read+0x378>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 4031b20:	e13ffe0f 	ldh	r4,-8(fp)
 4031b24:	e0bffd0b 	ldhu	r2,-12(fp)
 4031b28:	10ffffcc 	andi	r3,r2,65535
 4031b2c:	00800034 	movhi	r2,0
 4031b30:	10886f04 	addi	r2,r2,8636
 4031b34:	200891ba 	slli	r4,r4,6
 4031b38:	1105883a 	add	r2,r2,r4
 4031b3c:	10800704 	addi	r2,r2,28
 4031b40:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 4031b44:	e0fffe0f 	ldh	r3,-8(fp)
 4031b48:	00800034 	movhi	r2,0
 4031b4c:	10886f04 	addi	r2,r2,8636
 4031b50:	180691ba 	slli	r3,r3,6
 4031b54:	10c5883a 	add	r2,r2,r3
 4031b58:	10800804 	addi	r2,r2,32
 4031b5c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031b60:	00800034 	movhi	r2,0
 4031b64:	10885a04 	addi	r2,r2,8552
 4031b68:	14001417 	ldw	r16,80(r2)
 4031b6c:	e0fffe0f 	ldh	r3,-8(fp)
 4031b70:	00800034 	movhi	r2,0
 4031b74:	10886f04 	addi	r2,r2,8636
 4031b78:	180691ba 	slli	r3,r3,6
 4031b7c:	10c5883a 	add	r2,r2,r3
 4031b80:	10800704 	addi	r2,r2,28
 4031b84:	10800017 	ldw	r2,0(r2)
 4031b88:	10ffff84 	addi	r3,r2,-2
 4031b8c:	00800034 	movhi	r2,0
 4031b90:	10885a04 	addi	r2,r2,8552
 4031b94:	10800383 	ldbu	r2,14(r2)
 4031b98:	10803fcc 	andi	r2,r2,255
 4031b9c:	100b883a 	mov	r5,r2
 4031ba0:	1809883a 	mov	r4,r3
 4031ba4:	402ac1c0 	call	402ac1c <__mulsi3>
 4031ba8:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 4031bac:	e13ffe0f 	ldh	r4,-8(fp)
 4031bb0:	00800034 	movhi	r2,0
 4031bb4:	10886f04 	addi	r2,r2,8636
 4031bb8:	200891ba 	slli	r4,r4,6
 4031bbc:	1105883a 	add	r2,r2,r4
 4031bc0:	10800804 	addi	r2,r2,32
 4031bc4:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031bc8:	1885883a 	add	r2,r3,r2
 4031bcc:	e0bffc15 	stw	r2,-16(fp)
 4031bd0:	00001406 	br	4031c24 <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 4031bd4:	00bfff84 	movi	r2,-2
 4031bd8:	00003d06 	br	4031cd0 <alt_up_sd_card_read+0x378>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 4031bdc:	e13ffe0f 	ldh	r4,-8(fp)
 4031be0:	e0fffe0f 	ldh	r3,-8(fp)
 4031be4:	00800034 	movhi	r2,0
 4031be8:	10886f04 	addi	r2,r2,8636
 4031bec:	180691ba 	slli	r3,r3,6
 4031bf0:	10c5883a 	add	r2,r2,r3
 4031bf4:	10800804 	addi	r2,r2,32
 4031bf8:	10800017 	ldw	r2,0(r2)
 4031bfc:	10c00044 	addi	r3,r2,1
 4031c00:	00800034 	movhi	r2,0
 4031c04:	10886f04 	addi	r2,r2,8636
 4031c08:	200891ba 	slli	r4,r4,6
 4031c0c:	1105883a 	add	r2,r2,r4
 4031c10:	10800804 	addi	r2,r2,32
 4031c14:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 4031c18:	e0bffc17 	ldw	r2,-16(fp)
 4031c1c:	10800044 	addi	r2,r2,1
 4031c20:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 4031c24:	d0e02717 	ldw	r3,-32612(gp)
 4031c28:	e0bffc17 	ldw	r2,-16(fp)
 4031c2c:	1885883a 	add	r2,r3,r2
 4031c30:	1007883a 	mov	r3,r2
 4031c34:	d0a02b17 	ldw	r2,-32596(gp)
 4031c38:	18800726 	beq	r3,r2,4031c58 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 4031c3c:	d0a02717 	ldw	r2,-32612(gp)
 4031c40:	100b883a 	mov	r5,r2
 4031c44:	e13ffc17 	ldw	r4,-16(fp)
 4031c48:	402e2640 	call	402e264 <Read_Sector_Data>
 4031c4c:	1000021e 	bne	r2,zero,4031c58 <alt_up_sd_card_read+0x300>
                    {
						return -2;
 4031c50:	00bfff84 	movi	r2,-2
 4031c54:	00001e06 	br	4031cd0 <alt_up_sd_card_read+0x378>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 4031c58:	d0e02617 	ldw	r3,-32616(gp)
 4031c5c:	e13ffe0f 	ldh	r4,-8(fp)
 4031c60:	00800034 	movhi	r2,0
 4031c64:	10886f04 	addi	r2,r2,8636
 4031c68:	200891ba 	slli	r4,r4,6
 4031c6c:	1105883a 	add	r2,r2,r4
 4031c70:	10800904 	addi	r2,r2,36
 4031c74:	10800017 	ldw	r2,0(r2)
 4031c78:	10807fcc 	andi	r2,r2,511
 4031c7c:	1885883a 	add	r2,r3,r2
 4031c80:	10800023 	ldbuio	r2,0(r2)
 4031c84:	10803fcc 	andi	r2,r2,255
 4031c88:	10803fcc 	andi	r2,r2,255
 4031c8c:	e0bffb0d 	sth	r2,-20(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 4031c90:	e13ffe0f 	ldh	r4,-8(fp)
 4031c94:	e0fffe0f 	ldh	r3,-8(fp)
 4031c98:	00800034 	movhi	r2,0
 4031c9c:	10886f04 	addi	r2,r2,8636
 4031ca0:	180691ba 	slli	r3,r3,6
 4031ca4:	10c5883a 	add	r2,r2,r3
 4031ca8:	10800904 	addi	r2,r2,36
 4031cac:	10800017 	ldw	r2,0(r2)
 4031cb0:	10c00044 	addi	r3,r2,1
 4031cb4:	00800034 	movhi	r2,0
 4031cb8:	10886f04 	addi	r2,r2,8636
 4031cbc:	200891ba 	slli	r4,r4,6
 4031cc0:	1105883a 	add	r2,r2,r4
 4031cc4:	10800904 	addi	r2,r2,36
 4031cc8:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
 4031ccc:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4031cd0:	e6ffff04 	addi	sp,fp,-4
 4031cd4:	dfc00217 	ldw	ra,8(sp)
 4031cd8:	df000117 	ldw	fp,4(sp)
 4031cdc:	dc000017 	ldw	r16,0(sp)
 4031ce0:	dec00304 	addi	sp,sp,12
 4031ce4:	f800283a 	ret

04031ce8 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 4031ce8:	defff704 	addi	sp,sp,-36
 4031cec:	dfc00815 	stw	ra,32(sp)
 4031cf0:	df000715 	stw	fp,28(sp)
 4031cf4:	dc000615 	stw	r16,24(sp)
 4031cf8:	df000704 	addi	fp,sp,28
 4031cfc:	2007883a 	mov	r3,r4
 4031d00:	2805883a 	mov	r2,r5
 4031d04:	e0fffd0d 	sth	r3,-12(fp)
 4031d08:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
 4031d0c:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 4031d10:	e0bffd0f 	ldh	r2,-12(fp)
 4031d14:	10018016 	blt	r2,zero,4032318 <alt_up_sd_card_write+0x630>
 4031d18:	e0bffd0f 	ldh	r2,-12(fp)
 4031d1c:	10800508 	cmpgei	r2,r2,20
 4031d20:	10017d1e 	bne	r2,zero,4032318 <alt_up_sd_card_write+0x630>
    {
        if (active_files[file_handle].in_use)
 4031d24:	e0fffd0f 	ldh	r3,-12(fp)
 4031d28:	00800034 	movhi	r2,0
 4031d2c:	10886f04 	addi	r2,r2,8636
 4031d30:	180691ba 	slli	r3,r3,6
 4031d34:	10c5883a 	add	r2,r2,r3
 4031d38:	10800f04 	addi	r2,r2,60
 4031d3c:	10800017 	ldw	r2,0(r2)
 4031d40:	10017526 	beq	r2,zero,4032318 <alt_up_sd_card_write+0x630>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031d44:	00800034 	movhi	r2,0
 4031d48:	10885a04 	addi	r2,r2,8552
 4031d4c:	14001417 	ldw	r16,80(r2)
 4031d50:	e0fffd0f 	ldh	r3,-12(fp)
 4031d54:	00800034 	movhi	r2,0
 4031d58:	10886f04 	addi	r2,r2,8636
 4031d5c:	180691ba 	slli	r3,r3,6
 4031d60:	10c5883a 	add	r2,r2,r3
 4031d64:	10800704 	addi	r2,r2,28
 4031d68:	10800017 	ldw	r2,0(r2)
 4031d6c:	10ffff84 	addi	r3,r2,-2
 4031d70:	00800034 	movhi	r2,0
 4031d74:	10885a04 	addi	r2,r2,8552
 4031d78:	10800383 	ldbu	r2,14(r2)
 4031d7c:	10803fcc 	andi	r2,r2,255
 4031d80:	100b883a 	mov	r5,r2
 4031d84:	1809883a 	mov	r4,r3
 4031d88:	402ac1c0 	call	402ac1c <__mulsi3>
 4031d8c:	8087883a 	add	r3,r16,r2
                              active_files[file_handle].current_sector_in_cluster;
 4031d90:	e13ffd0f 	ldh	r4,-12(fp)
 4031d94:	00800034 	movhi	r2,0
 4031d98:	10886f04 	addi	r2,r2,8636
 4031d9c:	200891ba 	slli	r4,r4,6
 4031da0:	1105883a 	add	r2,r2,r4
 4031da4:	10800804 	addi	r2,r2,32
 4031da8:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031dac:	1885883a 	add	r2,r3,r2
 4031db0:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 4031db4:	e0fffd0f 	ldh	r3,-12(fp)
 4031db8:	00800034 	movhi	r2,0
 4031dbc:	10886f04 	addi	r2,r2,8636
 4031dc0:	180691ba 	slli	r3,r3,6
 4031dc4:	10c5883a 	add	r2,r2,r3
 4031dc8:	10800904 	addi	r2,r2,36
 4031dcc:	10c00017 	ldw	r3,0(r2)
 4031dd0:	00800034 	movhi	r2,0
 4031dd4:	10885a04 	addi	r2,r2,8552
 4031dd8:	1080030b 	ldhu	r2,12(r2)
 4031ddc:	10bfffcc 	andi	r2,r2,65535
 4031de0:	100b883a 	mov	r5,r2
 4031de4:	1809883a 	mov	r4,r3
 4031de8:	402abc40 	call	402abc4 <__umodsi3>
 4031dec:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 4031df0:	e0fffd0f 	ldh	r3,-12(fp)
 4031df4:	00800034 	movhi	r2,0
 4031df8:	10886f04 	addi	r2,r2,8636
 4031dfc:	180691ba 	slli	r3,r3,6
 4031e00:	10c5883a 	add	r2,r2,r3
 4031e04:	10800904 	addi	r2,r2,36
 4031e08:	10c00017 	ldw	r3,0(r2)
 4031e0c:	e13ffd0f 	ldh	r4,-12(fp)
 4031e10:	00800034 	movhi	r2,0
 4031e14:	10886f04 	addi	r2,r2,8636
 4031e18:	200891ba 	slli	r4,r4,6
 4031e1c:	1105883a 	add	r2,r2,r4
 4031e20:	10800604 	addi	r2,r2,24
 4031e24:	10800017 	ldw	r2,0(r2)
 4031e28:	1880692e 	bgeu	r3,r2,4031fd0 <alt_up_sd_card_write+0x2e8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 4031e2c:	e0fffd0f 	ldh	r3,-12(fp)
 4031e30:	00800034 	movhi	r2,0
 4031e34:	10886f04 	addi	r2,r2,8636
 4031e38:	180691ba 	slli	r3,r3,6
 4031e3c:	10c5883a 	add	r2,r2,r3
 4031e40:	10800904 	addi	r2,r2,36
 4031e44:	10800017 	ldw	r2,0(r2)
 4031e48:	1000e826 	beq	r2,zero,40321ec <alt_up_sd_card_write+0x504>
 4031e4c:	e0bffb0f 	ldh	r2,-20(fp)
 4031e50:	1000e61e 	bne	r2,zero,40321ec <alt_up_sd_card_write+0x504>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 4031e54:	e0fffd0f 	ldh	r3,-12(fp)
 4031e58:	00800034 	movhi	r2,0
 4031e5c:	10886f04 	addi	r2,r2,8636
 4031e60:	180691ba 	slli	r3,r3,6
 4031e64:	10c5883a 	add	r2,r2,r3
 4031e68:	10800804 	addi	r2,r2,32
 4031e6c:	10c00017 	ldw	r3,0(r2)
 4031e70:	00800034 	movhi	r2,0
 4031e74:	10885a04 	addi	r2,r2,8552
 4031e78:	10800383 	ldbu	r2,14(r2)
 4031e7c:	10803fcc 	andi	r2,r2,255
 4031e80:	10bfffc4 	addi	r2,r2,-1
 4031e84:	18803f1e 	bne	r3,r2,4031f84 <alt_up_sd_card_write+0x29c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 4031e88:	e0fffd0f 	ldh	r3,-12(fp)
 4031e8c:	00800034 	movhi	r2,0
 4031e90:	10886f04 	addi	r2,r2,8636
 4031e94:	180691ba 	slli	r3,r3,6
 4031e98:	10c5883a 	add	r2,r2,r3
 4031e9c:	10800704 	addi	r2,r2,28
 4031ea0:	10800017 	ldw	r2,0(r2)
 4031ea4:	e0fffb84 	addi	r3,fp,-18
 4031ea8:	180b883a 	mov	r5,r3
 4031eac:	1009883a 	mov	r4,r2
 4031eb0:	402e33c0 	call	402e33c <get_cluster_flag>
 4031eb4:	10003126 	beq	r2,zero,4031f7c <alt_up_sd_card_write+0x294>
                        {
                            if (next_cluster < 0x0000fff8)
 4031eb8:	e0bffb8b 	ldhu	r2,-18(fp)
 4031ebc:	10bfffcc 	andi	r2,r2,65535
 4031ec0:	10bffe28 	cmpgeui	r2,r2,65528
 4031ec4:	1000c91e 	bne	r2,zero,40321ec <alt_up_sd_card_write+0x504>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 4031ec8:	e13ffd0f 	ldh	r4,-12(fp)
 4031ecc:	e0bffb8b 	ldhu	r2,-18(fp)
 4031ed0:	10ffffcc 	andi	r3,r2,65535
 4031ed4:	00800034 	movhi	r2,0
 4031ed8:	10886f04 	addi	r2,r2,8636
 4031edc:	200891ba 	slli	r4,r4,6
 4031ee0:	1105883a 	add	r2,r2,r4
 4031ee4:	10800704 	addi	r2,r2,28
 4031ee8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 4031eec:	e0fffd0f 	ldh	r3,-12(fp)
 4031ef0:	00800034 	movhi	r2,0
 4031ef4:	10886f04 	addi	r2,r2,8636
 4031ef8:	180691ba 	slli	r3,r3,6
 4031efc:	10c5883a 	add	r2,r2,r3
 4031f00:	10800804 	addi	r2,r2,32
 4031f04:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031f08:	00800034 	movhi	r2,0
 4031f0c:	10885a04 	addi	r2,r2,8552
 4031f10:	14001417 	ldw	r16,80(r2)
 4031f14:	e0fffd0f 	ldh	r3,-12(fp)
 4031f18:	00800034 	movhi	r2,0
 4031f1c:	10886f04 	addi	r2,r2,8636
 4031f20:	180691ba 	slli	r3,r3,6
 4031f24:	10c5883a 	add	r2,r2,r3
 4031f28:	10800704 	addi	r2,r2,28
 4031f2c:	10800017 	ldw	r2,0(r2)
 4031f30:	10ffff84 	addi	r3,r2,-2
 4031f34:	00800034 	movhi	r2,0
 4031f38:	10885a04 	addi	r2,r2,8552
 4031f3c:	10800383 	ldbu	r2,14(r2)
 4031f40:	10803fcc 	andi	r2,r2,255
 4031f44:	100b883a 	mov	r5,r2
 4031f48:	1809883a 	mov	r4,r3
 4031f4c:	402ac1c0 	call	402ac1c <__mulsi3>
 4031f50:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 4031f54:	e13ffd0f 	ldh	r4,-12(fp)
 4031f58:	00800034 	movhi	r2,0
 4031f5c:	10886f04 	addi	r2,r2,8636
 4031f60:	200891ba 	slli	r4,r4,6
 4031f64:	1105883a 	add	r2,r2,r4
 4031f68:	10800804 	addi	r2,r2,32
 4031f6c:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 4031f70:	1885883a 	add	r2,r3,r2
 4031f74:	e0bffa15 	stw	r2,-24(fp)
 4031f78:	00009c06 	br	40321ec <alt_up_sd_card_write+0x504>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 4031f7c:	0005883a 	mov	r2,zero
 4031f80:	0000e606 	br	403231c <alt_up_sd_card_write+0x634>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 4031f84:	e13ffd0f 	ldh	r4,-12(fp)
 4031f88:	e0fffd0f 	ldh	r3,-12(fp)
 4031f8c:	00800034 	movhi	r2,0
 4031f90:	10886f04 	addi	r2,r2,8636
 4031f94:	180691ba 	slli	r3,r3,6
 4031f98:	10c5883a 	add	r2,r2,r3
 4031f9c:	10800804 	addi	r2,r2,32
 4031fa0:	10800017 	ldw	r2,0(r2)
 4031fa4:	10c00044 	addi	r3,r2,1
 4031fa8:	00800034 	movhi	r2,0
 4031fac:	10886f04 	addi	r2,r2,8636
 4031fb0:	200891ba 	slli	r4,r4,6
 4031fb4:	1105883a 	add	r2,r2,r4
 4031fb8:	10800804 	addi	r2,r2,32
 4031fbc:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 4031fc0:	e0bffa17 	ldw	r2,-24(fp)
 4031fc4:	10800044 	addi	r2,r2,1
 4031fc8:	e0bffa15 	stw	r2,-24(fp)
 4031fcc:	00008706 	br	40321ec <alt_up_sd_card_write+0x504>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 4031fd0:	e0fffd0f 	ldh	r3,-12(fp)
 4031fd4:	00800034 	movhi	r2,0
 4031fd8:	10886f04 	addi	r2,r2,8636
 4031fdc:	180691ba 	slli	r3,r3,6
 4031fe0:	10c5883a 	add	r2,r2,r3
 4031fe4:	10800904 	addi	r2,r2,36
 4031fe8:	10800017 	ldw	r2,0(r2)
 4031fec:	10007f26 	beq	r2,zero,40321ec <alt_up_sd_card_write+0x504>
 4031ff0:	e0bffb0f 	ldh	r2,-20(fp)
 4031ff4:	10007d1e 	bne	r2,zero,40321ec <alt_up_sd_card_write+0x504>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 4031ff8:	e0fffd0f 	ldh	r3,-12(fp)
 4031ffc:	00800034 	movhi	r2,0
 4032000:	10886f04 	addi	r2,r2,8636
 4032004:	180691ba 	slli	r3,r3,6
 4032008:	10c5883a 	add	r2,r2,r3
 403200c:	10800804 	addi	r2,r2,32
 4032010:	10c00017 	ldw	r3,0(r2)
 4032014:	00800034 	movhi	r2,0
 4032018:	10885a04 	addi	r2,r2,8552
 403201c:	10800383 	ldbu	r2,14(r2)
 4032020:	10803fcc 	andi	r2,r2,255
 4032024:	10bfffc4 	addi	r2,r2,-1
 4032028:	18803e1e 	bne	r3,r2,4032124 <alt_up_sd_card_write+0x43c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 403202c:	e0bffc04 	addi	r2,fp,-16
 4032030:	1009883a 	mov	r4,r2
 4032034:	40303580 	call	4030358 <find_first_empty_cluster>
 4032038:	10003826 	beq	r2,zero,403211c <alt_up_sd_card_write+0x434>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 403203c:	e0fffd0f 	ldh	r3,-12(fp)
 4032040:	00800034 	movhi	r2,0
 4032044:	10886f04 	addi	r2,r2,8636
 4032048:	180691ba 	slli	r3,r3,6
 403204c:	10c5883a 	add	r2,r2,r3
 4032050:	10800704 	addi	r2,r2,28
 4032054:	10800017 	ldw	r2,0(r2)
 4032058:	e0fffc17 	ldw	r3,-16(fp)
 403205c:	18ffffcc 	andi	r3,r3,65535
 4032060:	18e0001c 	xori	r3,r3,32768
 4032064:	18e00004 	addi	r3,r3,-32768
 4032068:	01800044 	movi	r6,1
 403206c:	180b883a 	mov	r5,r3
 4032070:	1009883a 	mov	r4,r2
 4032074:	402e3f00 	call	402e3f0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 4032078:	e0bffc17 	ldw	r2,-16(fp)
 403207c:	01800044 	movi	r6,1
 4032080:	017fffc4 	movi	r5,-1
 4032084:	1009883a 	mov	r4,r2
 4032088:	402e3f00 	call	402e3f0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 403208c:	e0fffd0f 	ldh	r3,-12(fp)
 4032090:	00800034 	movhi	r2,0
 4032094:	10886f04 	addi	r2,r2,8636
 4032098:	180691ba 	slli	r3,r3,6
 403209c:	10c5883a 	add	r2,r2,r3
 40320a0:	10800704 	addi	r2,r2,28
 40320a4:	10800017 	ldw	r2,0(r2)
 40320a8:	e0fffc17 	ldw	r3,-16(fp)
 40320ac:	18ffffcc 	andi	r3,r3,65535
 40320b0:	18e0001c 	xori	r3,r3,32768
 40320b4:	18e00004 	addi	r3,r3,-32768
 40320b8:	000d883a 	mov	r6,zero
 40320bc:	180b883a 	mov	r5,r3
 40320c0:	1009883a 	mov	r4,r2
 40320c4:	402e3f00 	call	402e3f0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 40320c8:	e0bffc17 	ldw	r2,-16(fp)
 40320cc:	000d883a 	mov	r6,zero
 40320d0:	017fffc4 	movi	r5,-1
 40320d4:	1009883a 	mov	r4,r2
 40320d8:	402e3f00 	call	402e3f0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 40320dc:	e13ffd0f 	ldh	r4,-12(fp)
 40320e0:	e0fffc17 	ldw	r3,-16(fp)
 40320e4:	00800034 	movhi	r2,0
 40320e8:	10886f04 	addi	r2,r2,8636
 40320ec:	200891ba 	slli	r4,r4,6
 40320f0:	1105883a 	add	r2,r2,r4
 40320f4:	10800704 	addi	r2,r2,28
 40320f8:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 40320fc:	e0fffd0f 	ldh	r3,-12(fp)
 4032100:	00800034 	movhi	r2,0
 4032104:	10886f04 	addi	r2,r2,8636
 4032108:	180691ba 	slli	r3,r3,6
 403210c:	10c5883a 	add	r2,r2,r3
 4032110:	10800804 	addi	r2,r2,32
 4032114:	10000015 	stw	zero,0(r2)
 4032118:	00001806 	br	403217c <alt_up_sd_card_write+0x494>
						}
						else
						{
							return false;
 403211c:	0005883a 	mov	r2,zero
 4032120:	00007e06 	br	403231c <alt_up_sd_card_write+0x634>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 4032124:	e43ffd0f 	ldh	r16,-12(fp)
 4032128:	e0fffd0f 	ldh	r3,-12(fp)
 403212c:	00800034 	movhi	r2,0
 4032130:	10886f04 	addi	r2,r2,8636
 4032134:	180691ba 	slli	r3,r3,6
 4032138:	10c5883a 	add	r2,r2,r3
 403213c:	10800904 	addi	r2,r2,36
 4032140:	10c00017 	ldw	r3,0(r2)
 4032144:	00800034 	movhi	r2,0
 4032148:	10885a04 	addi	r2,r2,8552
 403214c:	1080030b 	ldhu	r2,12(r2)
 4032150:	10bfffcc 	andi	r2,r2,65535
 4032154:	100b883a 	mov	r5,r2
 4032158:	1809883a 	mov	r4,r3
 403215c:	402ab600 	call	402ab60 <__udivsi3>
 4032160:	1009883a 	mov	r4,r2
 4032164:	00800034 	movhi	r2,0
 4032168:	10886f04 	addi	r2,r2,8636
 403216c:	800691ba 	slli	r3,r16,6
 4032170:	10c5883a 	add	r2,r2,r3
 4032174:	10800804 	addi	r2,r2,32
 4032178:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 403217c:	00800034 	movhi	r2,0
 4032180:	10885a04 	addi	r2,r2,8552
 4032184:	14001417 	ldw	r16,80(r2)
 4032188:	e0fffd0f 	ldh	r3,-12(fp)
 403218c:	00800034 	movhi	r2,0
 4032190:	10886f04 	addi	r2,r2,8636
 4032194:	180691ba 	slli	r3,r3,6
 4032198:	10c5883a 	add	r2,r2,r3
 403219c:	10800704 	addi	r2,r2,28
 40321a0:	10800017 	ldw	r2,0(r2)
 40321a4:	10ffff84 	addi	r3,r2,-2
 40321a8:	00800034 	movhi	r2,0
 40321ac:	10885a04 	addi	r2,r2,8552
 40321b0:	10800383 	ldbu	r2,14(r2)
 40321b4:	10803fcc 	andi	r2,r2,255
 40321b8:	100b883a 	mov	r5,r2
 40321bc:	1809883a 	mov	r4,r3
 40321c0:	402ac1c0 	call	402ac1c <__mulsi3>
 40321c4:	8087883a 	add	r3,r16,r2
                          active_files[file_handle].current_sector_in_cluster;
 40321c8:	e13ffd0f 	ldh	r4,-12(fp)
 40321cc:	00800034 	movhi	r2,0
 40321d0:	10886f04 	addi	r2,r2,8636
 40321d4:	200891ba 	slli	r4,r4,6
 40321d8:	1105883a 	add	r2,r2,r4
 40321dc:	10800804 	addi	r2,r2,32
 40321e0:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 40321e4:	1885883a 	add	r2,r3,r2
 40321e8:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 40321ec:	d0e02717 	ldw	r3,-32612(gp)
 40321f0:	e0bffa17 	ldw	r2,-24(fp)
 40321f4:	1885883a 	add	r2,r3,r2
 40321f8:	1007883a 	mov	r3,r2
 40321fc:	d0a02b17 	ldw	r2,-32596(gp)
 4032200:	18800726 	beq	r3,r2,4032220 <alt_up_sd_card_write+0x538>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 4032204:	d0a02717 	ldw	r2,-32612(gp)
 4032208:	100b883a 	mov	r5,r2
 403220c:	e13ffa17 	ldw	r4,-24(fp)
 4032210:	402e2640 	call	402e264 <Read_Sector_Data>
 4032214:	1000021e 	bne	r2,zero,4032220 <alt_up_sd_card_write+0x538>
                {
					return false;
 4032218:	0005883a 	mov	r2,zero
 403221c:	00003f06 	br	403231c <alt_up_sd_card_write+0x634>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 4032220:	d0e02617 	ldw	r3,-32616(gp)
 4032224:	e0bffb0f 	ldh	r2,-20(fp)
 4032228:	1885883a 	add	r2,r3,r2
 403222c:	e0fffe07 	ldb	r3,-8(fp)
 4032230:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 4032234:	e13ffd0f 	ldh	r4,-12(fp)
 4032238:	e0fffd0f 	ldh	r3,-12(fp)
 403223c:	00800034 	movhi	r2,0
 4032240:	10886f04 	addi	r2,r2,8636
 4032244:	180691ba 	slli	r3,r3,6
 4032248:	10c5883a 	add	r2,r2,r3
 403224c:	10800904 	addi	r2,r2,36
 4032250:	10800017 	ldw	r2,0(r2)
 4032254:	10c00044 	addi	r3,r2,1
 4032258:	00800034 	movhi	r2,0
 403225c:	10886f04 	addi	r2,r2,8636
 4032260:	200891ba 	slli	r4,r4,6
 4032264:	1105883a 	add	r2,r2,r4
 4032268:	10800904 	addi	r2,r2,36
 403226c:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 4032270:	e0fffd0f 	ldh	r3,-12(fp)
 4032274:	00800034 	movhi	r2,0
 4032278:	10886f04 	addi	r2,r2,8636
 403227c:	180691ba 	slli	r3,r3,6
 4032280:	10c5883a 	add	r2,r2,r3
 4032284:	10800904 	addi	r2,r2,36
 4032288:	10c00017 	ldw	r3,0(r2)
 403228c:	e13ffd0f 	ldh	r4,-12(fp)
 4032290:	00800034 	movhi	r2,0
 4032294:	10886f04 	addi	r2,r2,8636
 4032298:	200891ba 	slli	r4,r4,6
 403229c:	1105883a 	add	r2,r2,r4
 40322a0:	10800604 	addi	r2,r2,24
 40322a4:	10800017 	ldw	r2,0(r2)
 40322a8:	18801736 	bltu	r3,r2,4032308 <alt_up_sd_card_write+0x620>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 40322ac:	e13ffd0f 	ldh	r4,-12(fp)
 40322b0:	e0fffd0f 	ldh	r3,-12(fp)
 40322b4:	00800034 	movhi	r2,0
 40322b8:	10886f04 	addi	r2,r2,8636
 40322bc:	180691ba 	slli	r3,r3,6
 40322c0:	10c5883a 	add	r2,r2,r3
 40322c4:	10800604 	addi	r2,r2,24
 40322c8:	10800017 	ldw	r2,0(r2)
 40322cc:	10c00044 	addi	r3,r2,1
 40322d0:	00800034 	movhi	r2,0
 40322d4:	10886f04 	addi	r2,r2,8636
 40322d8:	200891ba 	slli	r4,r4,6
 40322dc:	1105883a 	add	r2,r2,r4
 40322e0:	10800604 	addi	r2,r2,24
 40322e4:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
 40322e8:	e0fffd0f 	ldh	r3,-12(fp)
 40322ec:	00800034 	movhi	r2,0
 40322f0:	10886f04 	addi	r2,r2,8636
 40322f4:	180691ba 	slli	r3,r3,6
 40322f8:	10c5883a 	add	r2,r2,r3
 40322fc:	10800e04 	addi	r2,r2,56
 4032300:	00c00044 	movi	r3,1
 4032304:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 4032308:	00800044 	movi	r2,1
 403230c:	d0a02a15 	stw	r2,-32600(gp)
			result = true;
 4032310:	00800044 	movi	r2,1
 4032314:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
 4032318:	e0bff917 	ldw	r2,-28(fp)
}
 403231c:	e6ffff04 	addi	sp,fp,-4
 4032320:	dfc00217 	ldw	ra,8(sp)
 4032324:	df000117 	ldw	fp,4(sp)
 4032328:	dc000017 	ldw	r16,0(sp)
 403232c:	dec00304 	addi	sp,sp,12
 4032330:	f800283a 	ret

04032334 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 4032334:	defffa04 	addi	sp,sp,-24
 4032338:	dfc00515 	stw	ra,20(sp)
 403233c:	df000415 	stw	fp,16(sp)
 4032340:	dc000315 	stw	r16,12(sp)
 4032344:	df000404 	addi	fp,sp,16
 4032348:	2005883a 	mov	r2,r4
 403234c:	e0bffe0d 	sth	r2,-8(fp)
    bool result = false;
 4032350:	e03ffc15 	stw	zero,-16(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 4032354:	4030f040 	call	4030f04 <alt_up_sd_card_is_Present>
 4032358:	10006226 	beq	r2,zero,40324e4 <alt_up_sd_card_fclose+0x1b0>
 403235c:	d0a02017 	ldw	r2,-32640(gp)
 4032360:	10006026 	beq	r2,zero,40324e4 <alt_up_sd_card_fclose+0x1b0>
    {
        if (active_files[file_handle].in_use) 
 4032364:	e0fffe0f 	ldh	r3,-8(fp)
 4032368:	00800034 	movhi	r2,0
 403236c:	10886f04 	addi	r2,r2,8636
 4032370:	180691ba 	slli	r3,r3,6
 4032374:	10c5883a 	add	r2,r2,r3
 4032378:	10800f04 	addi	r2,r2,60
 403237c:	10800017 	ldw	r2,0(r2)
 4032380:	10005826 	beq	r2,zero,40324e4 <alt_up_sd_card_fclose+0x1b0>
        {
			if (active_files[file_handle].modified)
 4032384:	e0fffe0f 	ldh	r3,-8(fp)
 4032388:	00800034 	movhi	r2,0
 403238c:	10886f04 	addi	r2,r2,8636
 4032390:	180691ba 	slli	r3,r3,6
 4032394:	10c5883a 	add	r2,r2,r3
 4032398:	10800e04 	addi	r2,r2,56
 403239c:	10800017 	ldw	r2,0(r2)
 40323a0:	10004726 	beq	r2,zero,40324c0 <alt_up_sd_card_fclose+0x18c>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 40323a4:	e0fffe0f 	ldh	r3,-8(fp)
 40323a8:	00800034 	movhi	r2,0
 40323ac:	10886f04 	addi	r2,r2,8636
 40323b0:	180691ba 	slli	r3,r3,6
 40323b4:	10c5883a 	add	r2,r2,r3
 40323b8:	10800b04 	addi	r2,r2,44
 40323bc:	10800017 	ldw	r2,0(r2)
 40323c0:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 40323c4:	e0fffe0f 	ldh	r3,-8(fp)
 40323c8:	00800034 	movhi	r2,0
 40323cc:	10886f04 	addi	r2,r2,8636
 40323d0:	180691ba 	slli	r3,r3,6
 40323d4:	10c5883a 	add	r2,r2,r3
 40323d8:	10800a04 	addi	r2,r2,40
 40323dc:	10800017 	ldw	r2,0(r2)
 40323e0:	1000071e 	bne	r2,zero,4032400 <alt_up_sd_card_fclose+0xcc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 40323e4:	00800034 	movhi	r2,0
 40323e8:	10885a04 	addi	r2,r2,8552
 40323ec:	10801317 	ldw	r2,76(r2)
 40323f0:	e0fffd17 	ldw	r3,-12(fp)
 40323f4:	1885883a 	add	r2,r3,r2
 40323f8:	e0bffd15 	stw	r2,-12(fp)
 40323fc:	00001606 	br	4032458 <alt_up_sd_card_fclose+0x124>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 4032400:	00800034 	movhi	r2,0
 4032404:	10885a04 	addi	r2,r2,8552
 4032408:	10c01417 	ldw	r3,80(r2)
 403240c:	e0bffd17 	ldw	r2,-12(fp)
 4032410:	18a1883a 	add	r16,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
 4032414:	e0fffe0f 	ldh	r3,-8(fp)
 4032418:	00800034 	movhi	r2,0
 403241c:	10886f04 	addi	r2,r2,8636
 4032420:	180691ba 	slli	r3,r3,6
 4032424:	10c5883a 	add	r2,r2,r3
 4032428:	10800a04 	addi	r2,r2,40
 403242c:	10800017 	ldw	r2,0(r2)
 4032430:	10ffff84 	addi	r3,r2,-2
 4032434:	00800034 	movhi	r2,0
 4032438:	10885a04 	addi	r2,r2,8552
 403243c:	10800383 	ldbu	r2,14(r2)
 4032440:	10803fcc 	andi	r2,r2,255
 4032444:	100b883a 	mov	r5,r2
 4032448:	1809883a 	mov	r4,r3
 403244c:	402ac1c0 	call	402ac1c <__mulsi3>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 4032450:	8085883a 	add	r2,r16,r2
 4032454:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 4032458:	e0bffd17 	ldw	r2,-12(fp)
 403245c:	d0e02717 	ldw	r3,-32612(gp)
 4032460:	180b883a 	mov	r5,r3
 4032464:	1009883a 	mov	r4,r2
 4032468:	402e2640 	call	402e264 <Read_Sector_Data>
 403246c:	10001426 	beq	r2,zero,40324c0 <alt_up_sd_card_fclose+0x18c>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 4032470:	e0fffe0f 	ldh	r3,-8(fp)
 4032474:	00800034 	movhi	r2,0
 4032478:	10886f04 	addi	r2,r2,8636
 403247c:	180691ba 	slli	r3,r3,6
 4032480:	10c5883a 	add	r2,r2,r3
 4032484:	10800c04 	addi	r2,r2,48
 4032488:	1080000b 	ldhu	r2,0(r2)
 403248c:	113fffcc 	andi	r4,r2,65535
 4032490:	2120001c 	xori	r4,r4,32768
 4032494:	21200004 	addi	r4,r4,-32768
 4032498:	e0bffe0f 	ldh	r2,-8(fp)
 403249c:	100691ba 	slli	r3,r2,6
 40324a0:	00800034 	movhi	r2,0
 40324a4:	10886f04 	addi	r2,r2,8636
 40324a8:	1885883a 	add	r2,r3,r2
 40324ac:	100b883a 	mov	r5,r2
 40324b0:	402e8f00 	call	402e8f0 <Write_File_Record_At_Offset>
 40324b4:	10000226 	beq	r2,zero,40324c0 <alt_up_sd_card_fclose+0x18c>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 40324b8:	402e2180 	call	402e218 <Save_Modified_Sector>
 40324bc:	e0bffc15 	stw	r2,-16(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 40324c0:	e0fffe0f 	ldh	r3,-8(fp)
 40324c4:	00800034 	movhi	r2,0
 40324c8:	10886f04 	addi	r2,r2,8636
 40324cc:	180691ba 	slli	r3,r3,6
 40324d0:	10c5883a 	add	r2,r2,r3
 40324d4:	10800f04 	addi	r2,r2,60
 40324d8:	10000015 	stw	zero,0(r2)
			result = true;
 40324dc:	00800044 	movi	r2,1
 40324e0:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    return result;
 40324e4:	e0bffc17 	ldw	r2,-16(fp)
}
 40324e8:	e6ffff04 	addi	sp,fp,-4
 40324ec:	dfc00217 	ldw	ra,8(sp)
 40324f0:	df000117 	ldw	fp,4(sp)
 40324f4:	dc000017 	ldw	r16,0(sp)
 40324f8:	dec00304 	addi	sp,sp,12
 40324fc:	f800283a 	ret

04032500 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4032500:	defffa04 	addi	sp,sp,-24
 4032504:	dfc00515 	stw	ra,20(sp)
 4032508:	df000415 	stw	fp,16(sp)
 403250c:	df000404 	addi	fp,sp,16
 4032510:	e13ffd15 	stw	r4,-12(fp)
 4032514:	e17ffe15 	stw	r5,-8(fp)
 4032518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 403251c:	e0bffd17 	ldw	r2,-12(fp)
 4032520:	10800017 	ldw	r2,0(r2)
 4032524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4032528:	e0bffc17 	ldw	r2,-16(fp)
 403252c:	10c00a04 	addi	r3,r2,40
 4032530:	e0bffd17 	ldw	r2,-12(fp)
 4032534:	10800217 	ldw	r2,8(r2)
 4032538:	100f883a 	mov	r7,r2
 403253c:	e1bfff17 	ldw	r6,-4(fp)
 4032540:	e17ffe17 	ldw	r5,-8(fp)
 4032544:	1809883a 	mov	r4,r3
 4032548:	4032b280 	call	4032b28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 403254c:	e037883a 	mov	sp,fp
 4032550:	dfc00117 	ldw	ra,4(sp)
 4032554:	df000017 	ldw	fp,0(sp)
 4032558:	dec00204 	addi	sp,sp,8
 403255c:	f800283a 	ret

04032560 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4032560:	defffa04 	addi	sp,sp,-24
 4032564:	dfc00515 	stw	ra,20(sp)
 4032568:	df000415 	stw	fp,16(sp)
 403256c:	df000404 	addi	fp,sp,16
 4032570:	e13ffd15 	stw	r4,-12(fp)
 4032574:	e17ffe15 	stw	r5,-8(fp)
 4032578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 403257c:	e0bffd17 	ldw	r2,-12(fp)
 4032580:	10800017 	ldw	r2,0(r2)
 4032584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4032588:	e0bffc17 	ldw	r2,-16(fp)
 403258c:	10c00a04 	addi	r3,r2,40
 4032590:	e0bffd17 	ldw	r2,-12(fp)
 4032594:	10800217 	ldw	r2,8(r2)
 4032598:	100f883a 	mov	r7,r2
 403259c:	e1bfff17 	ldw	r6,-4(fp)
 40325a0:	e17ffe17 	ldw	r5,-8(fp)
 40325a4:	1809883a 	mov	r4,r3
 40325a8:	4032d440 	call	4032d44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40325ac:	e037883a 	mov	sp,fp
 40325b0:	dfc00117 	ldw	ra,4(sp)
 40325b4:	df000017 	ldw	fp,0(sp)
 40325b8:	dec00204 	addi	sp,sp,8
 40325bc:	f800283a 	ret

040325c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40325c0:	defffc04 	addi	sp,sp,-16
 40325c4:	dfc00315 	stw	ra,12(sp)
 40325c8:	df000215 	stw	fp,8(sp)
 40325cc:	df000204 	addi	fp,sp,8
 40325d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40325d4:	e0bfff17 	ldw	r2,-4(fp)
 40325d8:	10800017 	ldw	r2,0(r2)
 40325dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40325e0:	e0bffe17 	ldw	r2,-8(fp)
 40325e4:	10c00a04 	addi	r3,r2,40
 40325e8:	e0bfff17 	ldw	r2,-4(fp)
 40325ec:	10800217 	ldw	r2,8(r2)
 40325f0:	100b883a 	mov	r5,r2
 40325f4:	1809883a 	mov	r4,r3
 40325f8:	40329d00 	call	40329d0 <altera_avalon_jtag_uart_close>
}
 40325fc:	e037883a 	mov	sp,fp
 4032600:	dfc00117 	ldw	ra,4(sp)
 4032604:	df000017 	ldw	fp,0(sp)
 4032608:	dec00204 	addi	sp,sp,8
 403260c:	f800283a 	ret

04032610 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4032610:	defffa04 	addi	sp,sp,-24
 4032614:	dfc00515 	stw	ra,20(sp)
 4032618:	df000415 	stw	fp,16(sp)
 403261c:	df000404 	addi	fp,sp,16
 4032620:	e13ffd15 	stw	r4,-12(fp)
 4032624:	e17ffe15 	stw	r5,-8(fp)
 4032628:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 403262c:	e0bffd17 	ldw	r2,-12(fp)
 4032630:	10800017 	ldw	r2,0(r2)
 4032634:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4032638:	e0bffc17 	ldw	r2,-16(fp)
 403263c:	10800a04 	addi	r2,r2,40
 4032640:	e1bfff17 	ldw	r6,-4(fp)
 4032644:	e17ffe17 	ldw	r5,-8(fp)
 4032648:	1009883a 	mov	r4,r2
 403264c:	4032a380 	call	4032a38 <altera_avalon_jtag_uart_ioctl>
}
 4032650:	e037883a 	mov	sp,fp
 4032654:	dfc00117 	ldw	ra,4(sp)
 4032658:	df000017 	ldw	fp,0(sp)
 403265c:	dec00204 	addi	sp,sp,8
 4032660:	f800283a 	ret

04032664 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4032664:	defffa04 	addi	sp,sp,-24
 4032668:	dfc00515 	stw	ra,20(sp)
 403266c:	df000415 	stw	fp,16(sp)
 4032670:	df000404 	addi	fp,sp,16
 4032674:	e13ffd15 	stw	r4,-12(fp)
 4032678:	e17ffe15 	stw	r5,-8(fp)
 403267c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4032680:	e0bffd17 	ldw	r2,-12(fp)
 4032684:	00c00044 	movi	r3,1
 4032688:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 403268c:	e0bffd17 	ldw	r2,-12(fp)
 4032690:	10800017 	ldw	r2,0(r2)
 4032694:	10800104 	addi	r2,r2,4
 4032698:	1007883a 	mov	r3,r2
 403269c:	e0bffd17 	ldw	r2,-12(fp)
 40326a0:	10800817 	ldw	r2,32(r2)
 40326a4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40326a8:	e0bffe17 	ldw	r2,-8(fp)
 40326ac:	e0ffff17 	ldw	r3,-4(fp)
 40326b0:	d8000015 	stw	zero,0(sp)
 40326b4:	e1fffd17 	ldw	r7,-12(fp)
 40326b8:	018100f4 	movhi	r6,1027
 40326bc:	3189c904 	addi	r6,r6,10020
 40326c0:	180b883a 	mov	r5,r3
 40326c4:	1009883a 	mov	r4,r2
 40326c8:	40344c80 	call	40344c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40326cc:	e0bffd17 	ldw	r2,-12(fp)
 40326d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40326d4:	e0bffd17 	ldw	r2,-12(fp)
 40326d8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40326dc:	d0e02d17 	ldw	r3,-32588(gp)
 40326e0:	e1fffd17 	ldw	r7,-12(fp)
 40326e4:	018100f4 	movhi	r6,1027
 40326e8:	318a4c04 	addi	r6,r6,10544
 40326ec:	180b883a 	mov	r5,r3
 40326f0:	1009883a 	mov	r4,r2
 40326f4:	4033fd40 	call	4033fd4 <alt_alarm_start>
 40326f8:	1000040e 	bge	r2,zero,403270c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40326fc:	e0fffd17 	ldw	r3,-12(fp)
 4032700:	00a00034 	movhi	r2,32768
 4032704:	10bfffc4 	addi	r2,r2,-1
 4032708:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 403270c:	0001883a 	nop
 4032710:	e037883a 	mov	sp,fp
 4032714:	dfc00117 	ldw	ra,4(sp)
 4032718:	df000017 	ldw	fp,0(sp)
 403271c:	dec00204 	addi	sp,sp,8
 4032720:	f800283a 	ret

04032724 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4032724:	defff804 	addi	sp,sp,-32
 4032728:	df000715 	stw	fp,28(sp)
 403272c:	df000704 	addi	fp,sp,28
 4032730:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4032734:	e0bfff17 	ldw	r2,-4(fp)
 4032738:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 403273c:	e0bffb17 	ldw	r2,-20(fp)
 4032740:	10800017 	ldw	r2,0(r2)
 4032744:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4032748:	e0bffc17 	ldw	r2,-16(fp)
 403274c:	10800104 	addi	r2,r2,4
 4032750:	10800037 	ldwio	r2,0(r2)
 4032754:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4032758:	e0bffd17 	ldw	r2,-12(fp)
 403275c:	1080c00c 	andi	r2,r2,768
 4032760:	10006d26 	beq	r2,zero,4032918 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4032764:	e0bffd17 	ldw	r2,-12(fp)
 4032768:	1080400c 	andi	r2,r2,256
 403276c:	10003526 	beq	r2,zero,4032844 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4032770:	00800074 	movhi	r2,1
 4032774:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4032778:	e0bffb17 	ldw	r2,-20(fp)
 403277c:	10800a17 	ldw	r2,40(r2)
 4032780:	10800044 	addi	r2,r2,1
 4032784:	1081ffcc 	andi	r2,r2,2047
 4032788:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 403278c:	e0bffb17 	ldw	r2,-20(fp)
 4032790:	10c00b17 	ldw	r3,44(r2)
 4032794:	e0bffe17 	ldw	r2,-8(fp)
 4032798:	18801526 	beq	r3,r2,40327f0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 403279c:	e0bffc17 	ldw	r2,-16(fp)
 40327a0:	10800037 	ldwio	r2,0(r2)
 40327a4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40327a8:	e0bff917 	ldw	r2,-28(fp)
 40327ac:	10a0000c 	andi	r2,r2,32768
 40327b0:	10001126 	beq	r2,zero,40327f8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40327b4:	e0bffb17 	ldw	r2,-20(fp)
 40327b8:	10800a17 	ldw	r2,40(r2)
 40327bc:	e0fff917 	ldw	r3,-28(fp)
 40327c0:	1809883a 	mov	r4,r3
 40327c4:	e0fffb17 	ldw	r3,-20(fp)
 40327c8:	1885883a 	add	r2,r3,r2
 40327cc:	10800e04 	addi	r2,r2,56
 40327d0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40327d4:	e0bffb17 	ldw	r2,-20(fp)
 40327d8:	10800a17 	ldw	r2,40(r2)
 40327dc:	10800044 	addi	r2,r2,1
 40327e0:	10c1ffcc 	andi	r3,r2,2047
 40327e4:	e0bffb17 	ldw	r2,-20(fp)
 40327e8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40327ec:	003fe206 	br	4032778 <__flash_rwdata_start+0xffffcf28>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40327f0:	0001883a 	nop
 40327f4:	00000106 	br	40327fc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40327f8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40327fc:	e0bff917 	ldw	r2,-28(fp)
 4032800:	10bfffec 	andhi	r2,r2,65535
 4032804:	10000f26 	beq	r2,zero,4032844 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4032808:	e0bffb17 	ldw	r2,-20(fp)
 403280c:	10c00817 	ldw	r3,32(r2)
 4032810:	00bfff84 	movi	r2,-2
 4032814:	1886703a 	and	r3,r3,r2
 4032818:	e0bffb17 	ldw	r2,-20(fp)
 403281c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4032820:	e0bffc17 	ldw	r2,-16(fp)
 4032824:	10800104 	addi	r2,r2,4
 4032828:	1007883a 	mov	r3,r2
 403282c:	e0bffb17 	ldw	r2,-20(fp)
 4032830:	10800817 	ldw	r2,32(r2)
 4032834:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4032838:	e0bffc17 	ldw	r2,-16(fp)
 403283c:	10800104 	addi	r2,r2,4
 4032840:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4032844:	e0bffd17 	ldw	r2,-12(fp)
 4032848:	1080800c 	andi	r2,r2,512
 403284c:	103fbe26 	beq	r2,zero,4032748 <__flash_rwdata_start+0xffffcef8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4032850:	e0bffd17 	ldw	r2,-12(fp)
 4032854:	1004d43a 	srli	r2,r2,16
 4032858:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 403285c:	00001406 	br	40328b0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4032860:	e0bffc17 	ldw	r2,-16(fp)
 4032864:	e0fffb17 	ldw	r3,-20(fp)
 4032868:	18c00d17 	ldw	r3,52(r3)
 403286c:	e13ffb17 	ldw	r4,-20(fp)
 4032870:	20c7883a 	add	r3,r4,r3
 4032874:	18c20e04 	addi	r3,r3,2104
 4032878:	18c00003 	ldbu	r3,0(r3)
 403287c:	18c03fcc 	andi	r3,r3,255
 4032880:	18c0201c 	xori	r3,r3,128
 4032884:	18ffe004 	addi	r3,r3,-128
 4032888:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 403288c:	e0bffb17 	ldw	r2,-20(fp)
 4032890:	10800d17 	ldw	r2,52(r2)
 4032894:	10800044 	addi	r2,r2,1
 4032898:	10c1ffcc 	andi	r3,r2,2047
 403289c:	e0bffb17 	ldw	r2,-20(fp)
 40328a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40328a4:	e0bffa17 	ldw	r2,-24(fp)
 40328a8:	10bfffc4 	addi	r2,r2,-1
 40328ac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40328b0:	e0bffa17 	ldw	r2,-24(fp)
 40328b4:	10000526 	beq	r2,zero,40328cc <altera_avalon_jtag_uart_irq+0x1a8>
 40328b8:	e0bffb17 	ldw	r2,-20(fp)
 40328bc:	10c00d17 	ldw	r3,52(r2)
 40328c0:	e0bffb17 	ldw	r2,-20(fp)
 40328c4:	10800c17 	ldw	r2,48(r2)
 40328c8:	18bfe51e 	bne	r3,r2,4032860 <__flash_rwdata_start+0xffffd010>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40328cc:	e0bffa17 	ldw	r2,-24(fp)
 40328d0:	103f9d26 	beq	r2,zero,4032748 <__flash_rwdata_start+0xffffcef8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40328d4:	e0bffb17 	ldw	r2,-20(fp)
 40328d8:	10c00817 	ldw	r3,32(r2)
 40328dc:	00bfff44 	movi	r2,-3
 40328e0:	1886703a 	and	r3,r3,r2
 40328e4:	e0bffb17 	ldw	r2,-20(fp)
 40328e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40328ec:	e0bffb17 	ldw	r2,-20(fp)
 40328f0:	10800017 	ldw	r2,0(r2)
 40328f4:	10800104 	addi	r2,r2,4
 40328f8:	1007883a 	mov	r3,r2
 40328fc:	e0bffb17 	ldw	r2,-20(fp)
 4032900:	10800817 	ldw	r2,32(r2)
 4032904:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4032908:	e0bffc17 	ldw	r2,-16(fp)
 403290c:	10800104 	addi	r2,r2,4
 4032910:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4032914:	003f8c06 	br	4032748 <__flash_rwdata_start+0xffffcef8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4032918:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 403291c:	0001883a 	nop
 4032920:	e037883a 	mov	sp,fp
 4032924:	df000017 	ldw	fp,0(sp)
 4032928:	dec00104 	addi	sp,sp,4
 403292c:	f800283a 	ret

04032930 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4032930:	defff804 	addi	sp,sp,-32
 4032934:	df000715 	stw	fp,28(sp)
 4032938:	df000704 	addi	fp,sp,28
 403293c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4032940:	e0bffb17 	ldw	r2,-20(fp)
 4032944:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4032948:	e0bff917 	ldw	r2,-28(fp)
 403294c:	10800017 	ldw	r2,0(r2)
 4032950:	10800104 	addi	r2,r2,4
 4032954:	10800037 	ldwio	r2,0(r2)
 4032958:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 403295c:	e0bffa17 	ldw	r2,-24(fp)
 4032960:	1081000c 	andi	r2,r2,1024
 4032964:	10000b26 	beq	r2,zero,4032994 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4032968:	e0bff917 	ldw	r2,-28(fp)
 403296c:	10800017 	ldw	r2,0(r2)
 4032970:	10800104 	addi	r2,r2,4
 4032974:	1007883a 	mov	r3,r2
 4032978:	e0bff917 	ldw	r2,-28(fp)
 403297c:	10800817 	ldw	r2,32(r2)
 4032980:	10810014 	ori	r2,r2,1024
 4032984:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4032988:	e0bff917 	ldw	r2,-28(fp)
 403298c:	10000915 	stw	zero,36(r2)
 4032990:	00000a06 	br	40329bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4032994:	e0bff917 	ldw	r2,-28(fp)
 4032998:	10c00917 	ldw	r3,36(r2)
 403299c:	00a00034 	movhi	r2,32768
 40329a0:	10bfff04 	addi	r2,r2,-4
 40329a4:	10c00536 	bltu	r2,r3,40329bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40329a8:	e0bff917 	ldw	r2,-28(fp)
 40329ac:	10800917 	ldw	r2,36(r2)
 40329b0:	10c00044 	addi	r3,r2,1
 40329b4:	e0bff917 	ldw	r2,-28(fp)
 40329b8:	10c00915 	stw	r3,36(r2)
 40329bc:	d0a02d17 	ldw	r2,-32588(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40329c0:	e037883a 	mov	sp,fp
 40329c4:	df000017 	ldw	fp,0(sp)
 40329c8:	dec00104 	addi	sp,sp,4
 40329cc:	f800283a 	ret

040329d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40329d0:	defffd04 	addi	sp,sp,-12
 40329d4:	df000215 	stw	fp,8(sp)
 40329d8:	df000204 	addi	fp,sp,8
 40329dc:	e13ffe15 	stw	r4,-8(fp)
 40329e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40329e4:	00000506 	br	40329fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40329e8:	e0bfff17 	ldw	r2,-4(fp)
 40329ec:	1090000c 	andi	r2,r2,16384
 40329f0:	10000226 	beq	r2,zero,40329fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40329f4:	00bffd44 	movi	r2,-11
 40329f8:	00000b06 	br	4032a28 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40329fc:	e0bffe17 	ldw	r2,-8(fp)
 4032a00:	10c00d17 	ldw	r3,52(r2)
 4032a04:	e0bffe17 	ldw	r2,-8(fp)
 4032a08:	10800c17 	ldw	r2,48(r2)
 4032a0c:	18800526 	beq	r3,r2,4032a24 <altera_avalon_jtag_uart_close+0x54>
 4032a10:	e0bffe17 	ldw	r2,-8(fp)
 4032a14:	10c00917 	ldw	r3,36(r2)
 4032a18:	e0bffe17 	ldw	r2,-8(fp)
 4032a1c:	10800117 	ldw	r2,4(r2)
 4032a20:	18bff136 	bltu	r3,r2,40329e8 <__flash_rwdata_start+0xffffd198>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4032a24:	0005883a 	mov	r2,zero
}
 4032a28:	e037883a 	mov	sp,fp
 4032a2c:	df000017 	ldw	fp,0(sp)
 4032a30:	dec00104 	addi	sp,sp,4
 4032a34:	f800283a 	ret

04032a38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4032a38:	defffa04 	addi	sp,sp,-24
 4032a3c:	df000515 	stw	fp,20(sp)
 4032a40:	df000504 	addi	fp,sp,20
 4032a44:	e13ffd15 	stw	r4,-12(fp)
 4032a48:	e17ffe15 	stw	r5,-8(fp)
 4032a4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4032a50:	00bff9c4 	movi	r2,-25
 4032a54:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4032a58:	e0bffe17 	ldw	r2,-8(fp)
 4032a5c:	10da8060 	cmpeqi	r3,r2,27137
 4032a60:	1800031e 	bne	r3,zero,4032a70 <altera_avalon_jtag_uart_ioctl+0x38>
 4032a64:	109a80a0 	cmpeqi	r2,r2,27138
 4032a68:	1000181e 	bne	r2,zero,4032acc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4032a6c:	00002906 	br	4032b14 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4032a70:	e0bffd17 	ldw	r2,-12(fp)
 4032a74:	10c00117 	ldw	r3,4(r2)
 4032a78:	00a00034 	movhi	r2,32768
 4032a7c:	10bfffc4 	addi	r2,r2,-1
 4032a80:	18802126 	beq	r3,r2,4032b08 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4032a84:	e0bfff17 	ldw	r2,-4(fp)
 4032a88:	10800017 	ldw	r2,0(r2)
 4032a8c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4032a90:	e0bffc17 	ldw	r2,-16(fp)
 4032a94:	10800090 	cmplti	r2,r2,2
 4032a98:	1000061e 	bne	r2,zero,4032ab4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4032a9c:	e0fffc17 	ldw	r3,-16(fp)
 4032aa0:	00a00034 	movhi	r2,32768
 4032aa4:	10bfffc4 	addi	r2,r2,-1
 4032aa8:	18800226 	beq	r3,r2,4032ab4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4032aac:	e0bffc17 	ldw	r2,-16(fp)
 4032ab0:	00000206 	br	4032abc <altera_avalon_jtag_uart_ioctl+0x84>
 4032ab4:	00a00034 	movhi	r2,32768
 4032ab8:	10bfff84 	addi	r2,r2,-2
 4032abc:	e0fffd17 	ldw	r3,-12(fp)
 4032ac0:	18800115 	stw	r2,4(r3)
      rc = 0;
 4032ac4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4032ac8:	00000f06 	br	4032b08 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4032acc:	e0bffd17 	ldw	r2,-12(fp)
 4032ad0:	10c00117 	ldw	r3,4(r2)
 4032ad4:	00a00034 	movhi	r2,32768
 4032ad8:	10bfffc4 	addi	r2,r2,-1
 4032adc:	18800c26 	beq	r3,r2,4032b10 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4032ae0:	e0bffd17 	ldw	r2,-12(fp)
 4032ae4:	10c00917 	ldw	r3,36(r2)
 4032ae8:	e0bffd17 	ldw	r2,-12(fp)
 4032aec:	10800117 	ldw	r2,4(r2)
 4032af0:	1885803a 	cmpltu	r2,r3,r2
 4032af4:	10c03fcc 	andi	r3,r2,255
 4032af8:	e0bfff17 	ldw	r2,-4(fp)
 4032afc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4032b00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4032b04:	00000206 	br	4032b10 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4032b08:	0001883a 	nop
 4032b0c:	00000106 	br	4032b14 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4032b10:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4032b14:	e0bffb17 	ldw	r2,-20(fp)
}
 4032b18:	e037883a 	mov	sp,fp
 4032b1c:	df000017 	ldw	fp,0(sp)
 4032b20:	dec00104 	addi	sp,sp,4
 4032b24:	f800283a 	ret

04032b28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4032b28:	defff304 	addi	sp,sp,-52
 4032b2c:	dfc00c15 	stw	ra,48(sp)
 4032b30:	df000b15 	stw	fp,44(sp)
 4032b34:	df000b04 	addi	fp,sp,44
 4032b38:	e13ffc15 	stw	r4,-16(fp)
 4032b3c:	e17ffd15 	stw	r5,-12(fp)
 4032b40:	e1bffe15 	stw	r6,-8(fp)
 4032b44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4032b48:	e0bffd17 	ldw	r2,-12(fp)
 4032b4c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4032b50:	00004706 	br	4032c70 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4032b54:	e0bffc17 	ldw	r2,-16(fp)
 4032b58:	10800a17 	ldw	r2,40(r2)
 4032b5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4032b60:	e0bffc17 	ldw	r2,-16(fp)
 4032b64:	10800b17 	ldw	r2,44(r2)
 4032b68:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4032b6c:	e0fff717 	ldw	r3,-36(fp)
 4032b70:	e0bff817 	ldw	r2,-32(fp)
 4032b74:	18800536 	bltu	r3,r2,4032b8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4032b78:	e0fff717 	ldw	r3,-36(fp)
 4032b7c:	e0bff817 	ldw	r2,-32(fp)
 4032b80:	1885c83a 	sub	r2,r3,r2
 4032b84:	e0bff615 	stw	r2,-40(fp)
 4032b88:	00000406 	br	4032b9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4032b8c:	00c20004 	movi	r3,2048
 4032b90:	e0bff817 	ldw	r2,-32(fp)
 4032b94:	1885c83a 	sub	r2,r3,r2
 4032b98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4032b9c:	e0bff617 	ldw	r2,-40(fp)
 4032ba0:	10001e26 	beq	r2,zero,4032c1c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4032ba4:	e0fffe17 	ldw	r3,-8(fp)
 4032ba8:	e0bff617 	ldw	r2,-40(fp)
 4032bac:	1880022e 	bgeu	r3,r2,4032bb8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4032bb0:	e0bffe17 	ldw	r2,-8(fp)
 4032bb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4032bb8:	e0bffc17 	ldw	r2,-16(fp)
 4032bbc:	10c00e04 	addi	r3,r2,56
 4032bc0:	e0bff817 	ldw	r2,-32(fp)
 4032bc4:	1885883a 	add	r2,r3,r2
 4032bc8:	e1bff617 	ldw	r6,-40(fp)
 4032bcc:	100b883a 	mov	r5,r2
 4032bd0:	e13ff517 	ldw	r4,-44(fp)
 4032bd4:	402619c0 	call	402619c <memcpy>
      ptr   += n;
 4032bd8:	e0fff517 	ldw	r3,-44(fp)
 4032bdc:	e0bff617 	ldw	r2,-40(fp)
 4032be0:	1885883a 	add	r2,r3,r2
 4032be4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4032be8:	e0fffe17 	ldw	r3,-8(fp)
 4032bec:	e0bff617 	ldw	r2,-40(fp)
 4032bf0:	1885c83a 	sub	r2,r3,r2
 4032bf4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4032bf8:	e0fff817 	ldw	r3,-32(fp)
 4032bfc:	e0bff617 	ldw	r2,-40(fp)
 4032c00:	1885883a 	add	r2,r3,r2
 4032c04:	10c1ffcc 	andi	r3,r2,2047
 4032c08:	e0bffc17 	ldw	r2,-16(fp)
 4032c0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4032c10:	e0bffe17 	ldw	r2,-8(fp)
 4032c14:	00bfcf16 	blt	zero,r2,4032b54 <__flash_rwdata_start+0xffffd304>
 4032c18:	00000106 	br	4032c20 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4032c1c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4032c20:	e0fff517 	ldw	r3,-44(fp)
 4032c24:	e0bffd17 	ldw	r2,-12(fp)
 4032c28:	1880141e 	bne	r3,r2,4032c7c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4032c2c:	e0bfff17 	ldw	r2,-4(fp)
 4032c30:	1090000c 	andi	r2,r2,16384
 4032c34:	1000131e 	bne	r2,zero,4032c84 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4032c38:	0001883a 	nop
 4032c3c:	e0bffc17 	ldw	r2,-16(fp)
 4032c40:	10c00a17 	ldw	r3,40(r2)
 4032c44:	e0bff717 	ldw	r2,-36(fp)
 4032c48:	1880051e 	bne	r3,r2,4032c60 <altera_avalon_jtag_uart_read+0x138>
 4032c4c:	e0bffc17 	ldw	r2,-16(fp)
 4032c50:	10c00917 	ldw	r3,36(r2)
 4032c54:	e0bffc17 	ldw	r2,-16(fp)
 4032c58:	10800117 	ldw	r2,4(r2)
 4032c5c:	18bff736 	bltu	r3,r2,4032c3c <__flash_rwdata_start+0xffffd3ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4032c60:	e0bffc17 	ldw	r2,-16(fp)
 4032c64:	10c00a17 	ldw	r3,40(r2)
 4032c68:	e0bff717 	ldw	r2,-36(fp)
 4032c6c:	18800726 	beq	r3,r2,4032c8c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4032c70:	e0bffe17 	ldw	r2,-8(fp)
 4032c74:	00bfb716 	blt	zero,r2,4032b54 <__flash_rwdata_start+0xffffd304>
 4032c78:	00000506 	br	4032c90 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4032c7c:	0001883a 	nop
 4032c80:	00000306 	br	4032c90 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4032c84:	0001883a 	nop
 4032c88:	00000106 	br	4032c90 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4032c8c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4032c90:	e0fff517 	ldw	r3,-44(fp)
 4032c94:	e0bffd17 	ldw	r2,-12(fp)
 4032c98:	18801826 	beq	r3,r2,4032cfc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4032c9c:	0005303a 	rdctl	r2,status
 4032ca0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4032ca4:	e0fffb17 	ldw	r3,-20(fp)
 4032ca8:	00bfff84 	movi	r2,-2
 4032cac:	1884703a 	and	r2,r3,r2
 4032cb0:	1001703a 	wrctl	status,r2
  
  return context;
 4032cb4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4032cb8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4032cbc:	e0bffc17 	ldw	r2,-16(fp)
 4032cc0:	10800817 	ldw	r2,32(r2)
 4032cc4:	10c00054 	ori	r3,r2,1
 4032cc8:	e0bffc17 	ldw	r2,-16(fp)
 4032ccc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4032cd0:	e0bffc17 	ldw	r2,-16(fp)
 4032cd4:	10800017 	ldw	r2,0(r2)
 4032cd8:	10800104 	addi	r2,r2,4
 4032cdc:	1007883a 	mov	r3,r2
 4032ce0:	e0bffc17 	ldw	r2,-16(fp)
 4032ce4:	10800817 	ldw	r2,32(r2)
 4032ce8:	18800035 	stwio	r2,0(r3)
 4032cec:	e0bffa17 	ldw	r2,-24(fp)
 4032cf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4032cf4:	e0bff917 	ldw	r2,-28(fp)
 4032cf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4032cfc:	e0fff517 	ldw	r3,-44(fp)
 4032d00:	e0bffd17 	ldw	r2,-12(fp)
 4032d04:	18800426 	beq	r3,r2,4032d18 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4032d08:	e0fff517 	ldw	r3,-44(fp)
 4032d0c:	e0bffd17 	ldw	r2,-12(fp)
 4032d10:	1885c83a 	sub	r2,r3,r2
 4032d14:	00000606 	br	4032d30 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4032d18:	e0bfff17 	ldw	r2,-4(fp)
 4032d1c:	1090000c 	andi	r2,r2,16384
 4032d20:	10000226 	beq	r2,zero,4032d2c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4032d24:	00bffd44 	movi	r2,-11
 4032d28:	00000106 	br	4032d30 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4032d2c:	00bffec4 	movi	r2,-5
}
 4032d30:	e037883a 	mov	sp,fp
 4032d34:	dfc00117 	ldw	ra,4(sp)
 4032d38:	df000017 	ldw	fp,0(sp)
 4032d3c:	dec00204 	addi	sp,sp,8
 4032d40:	f800283a 	ret

04032d44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4032d44:	defff304 	addi	sp,sp,-52
 4032d48:	dfc00c15 	stw	ra,48(sp)
 4032d4c:	df000b15 	stw	fp,44(sp)
 4032d50:	df000b04 	addi	fp,sp,44
 4032d54:	e13ffc15 	stw	r4,-16(fp)
 4032d58:	e17ffd15 	stw	r5,-12(fp)
 4032d5c:	e1bffe15 	stw	r6,-8(fp)
 4032d60:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4032d64:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4032d68:	e0bffd17 	ldw	r2,-12(fp)
 4032d6c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4032d70:	00003706 	br	4032e50 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4032d74:	e0bffc17 	ldw	r2,-16(fp)
 4032d78:	10800c17 	ldw	r2,48(r2)
 4032d7c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4032d80:	e0bffc17 	ldw	r2,-16(fp)
 4032d84:	10800d17 	ldw	r2,52(r2)
 4032d88:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4032d8c:	e0fff917 	ldw	r3,-28(fp)
 4032d90:	e0bff517 	ldw	r2,-44(fp)
 4032d94:	1880062e 	bgeu	r3,r2,4032db0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4032d98:	e0fff517 	ldw	r3,-44(fp)
 4032d9c:	e0bff917 	ldw	r2,-28(fp)
 4032da0:	1885c83a 	sub	r2,r3,r2
 4032da4:	10bfffc4 	addi	r2,r2,-1
 4032da8:	e0bff615 	stw	r2,-40(fp)
 4032dac:	00000b06 	br	4032ddc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4032db0:	e0bff517 	ldw	r2,-44(fp)
 4032db4:	10000526 	beq	r2,zero,4032dcc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4032db8:	00c20004 	movi	r3,2048
 4032dbc:	e0bff917 	ldw	r2,-28(fp)
 4032dc0:	1885c83a 	sub	r2,r3,r2
 4032dc4:	e0bff615 	stw	r2,-40(fp)
 4032dc8:	00000406 	br	4032ddc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4032dcc:	00c1ffc4 	movi	r3,2047
 4032dd0:	e0bff917 	ldw	r2,-28(fp)
 4032dd4:	1885c83a 	sub	r2,r3,r2
 4032dd8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4032ddc:	e0bff617 	ldw	r2,-40(fp)
 4032de0:	10001e26 	beq	r2,zero,4032e5c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4032de4:	e0fffe17 	ldw	r3,-8(fp)
 4032de8:	e0bff617 	ldw	r2,-40(fp)
 4032dec:	1880022e 	bgeu	r3,r2,4032df8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4032df0:	e0bffe17 	ldw	r2,-8(fp)
 4032df4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4032df8:	e0bffc17 	ldw	r2,-16(fp)
 4032dfc:	10c20e04 	addi	r3,r2,2104
 4032e00:	e0bff917 	ldw	r2,-28(fp)
 4032e04:	1885883a 	add	r2,r3,r2
 4032e08:	e1bff617 	ldw	r6,-40(fp)
 4032e0c:	e17ffd17 	ldw	r5,-12(fp)
 4032e10:	1009883a 	mov	r4,r2
 4032e14:	402619c0 	call	402619c <memcpy>
      ptr   += n;
 4032e18:	e0fffd17 	ldw	r3,-12(fp)
 4032e1c:	e0bff617 	ldw	r2,-40(fp)
 4032e20:	1885883a 	add	r2,r3,r2
 4032e24:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4032e28:	e0fffe17 	ldw	r3,-8(fp)
 4032e2c:	e0bff617 	ldw	r2,-40(fp)
 4032e30:	1885c83a 	sub	r2,r3,r2
 4032e34:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4032e38:	e0fff917 	ldw	r3,-28(fp)
 4032e3c:	e0bff617 	ldw	r2,-40(fp)
 4032e40:	1885883a 	add	r2,r3,r2
 4032e44:	10c1ffcc 	andi	r3,r2,2047
 4032e48:	e0bffc17 	ldw	r2,-16(fp)
 4032e4c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4032e50:	e0bffe17 	ldw	r2,-8(fp)
 4032e54:	00bfc716 	blt	zero,r2,4032d74 <__flash_rwdata_start+0xffffd524>
 4032e58:	00000106 	br	4032e60 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4032e5c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4032e60:	0005303a 	rdctl	r2,status
 4032e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4032e68:	e0fffb17 	ldw	r3,-20(fp)
 4032e6c:	00bfff84 	movi	r2,-2
 4032e70:	1884703a 	and	r2,r3,r2
 4032e74:	1001703a 	wrctl	status,r2
  
  return context;
 4032e78:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4032e7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4032e80:	e0bffc17 	ldw	r2,-16(fp)
 4032e84:	10800817 	ldw	r2,32(r2)
 4032e88:	10c00094 	ori	r3,r2,2
 4032e8c:	e0bffc17 	ldw	r2,-16(fp)
 4032e90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4032e94:	e0bffc17 	ldw	r2,-16(fp)
 4032e98:	10800017 	ldw	r2,0(r2)
 4032e9c:	10800104 	addi	r2,r2,4
 4032ea0:	1007883a 	mov	r3,r2
 4032ea4:	e0bffc17 	ldw	r2,-16(fp)
 4032ea8:	10800817 	ldw	r2,32(r2)
 4032eac:	18800035 	stwio	r2,0(r3)
 4032eb0:	e0bffa17 	ldw	r2,-24(fp)
 4032eb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4032eb8:	e0bff817 	ldw	r2,-32(fp)
 4032ebc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4032ec0:	e0bffe17 	ldw	r2,-8(fp)
 4032ec4:	0080100e 	bge	zero,r2,4032f08 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4032ec8:	e0bfff17 	ldw	r2,-4(fp)
 4032ecc:	1090000c 	andi	r2,r2,16384
 4032ed0:	1000101e 	bne	r2,zero,4032f14 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4032ed4:	0001883a 	nop
 4032ed8:	e0bffc17 	ldw	r2,-16(fp)
 4032edc:	10c00d17 	ldw	r3,52(r2)
 4032ee0:	e0bff517 	ldw	r2,-44(fp)
 4032ee4:	1880051e 	bne	r3,r2,4032efc <altera_avalon_jtag_uart_write+0x1b8>
 4032ee8:	e0bffc17 	ldw	r2,-16(fp)
 4032eec:	10c00917 	ldw	r3,36(r2)
 4032ef0:	e0bffc17 	ldw	r2,-16(fp)
 4032ef4:	10800117 	ldw	r2,4(r2)
 4032ef8:	18bff736 	bltu	r3,r2,4032ed8 <__flash_rwdata_start+0xffffd688>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4032efc:	e0bffc17 	ldw	r2,-16(fp)
 4032f00:	10800917 	ldw	r2,36(r2)
 4032f04:	1000051e 	bne	r2,zero,4032f1c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4032f08:	e0bffe17 	ldw	r2,-8(fp)
 4032f0c:	00bfd016 	blt	zero,r2,4032e50 <__flash_rwdata_start+0xffffd600>
 4032f10:	00000306 	br	4032f20 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4032f14:	0001883a 	nop
 4032f18:	00000106 	br	4032f20 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4032f1c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4032f20:	e0fffd17 	ldw	r3,-12(fp)
 4032f24:	e0bff717 	ldw	r2,-36(fp)
 4032f28:	18800426 	beq	r3,r2,4032f3c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4032f2c:	e0fffd17 	ldw	r3,-12(fp)
 4032f30:	e0bff717 	ldw	r2,-36(fp)
 4032f34:	1885c83a 	sub	r2,r3,r2
 4032f38:	00000606 	br	4032f54 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4032f3c:	e0bfff17 	ldw	r2,-4(fp)
 4032f40:	1090000c 	andi	r2,r2,16384
 4032f44:	10000226 	beq	r2,zero,4032f50 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4032f48:	00bffd44 	movi	r2,-11
 4032f4c:	00000106 	br	4032f54 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4032f50:	00bffec4 	movi	r2,-5
}
 4032f54:	e037883a 	mov	sp,fp
 4032f58:	dfc00117 	ldw	ra,4(sp)
 4032f5c:	df000017 	ldw	fp,0(sp)
 4032f60:	dec00204 	addi	sp,sp,8
 4032f64:	f800283a 	ret

04032f68 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4032f68:	defffa04 	addi	sp,sp,-24
 4032f6c:	dfc00515 	stw	ra,20(sp)
 4032f70:	df000415 	stw	fp,16(sp)
 4032f74:	df000404 	addi	fp,sp,16
 4032f78:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4032f7c:	0007883a 	mov	r3,zero
 4032f80:	e0bfff17 	ldw	r2,-4(fp)
 4032f84:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4032f88:	e0bfff17 	ldw	r2,-4(fp)
 4032f8c:	10800104 	addi	r2,r2,4
 4032f90:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4032f94:	0005303a 	rdctl	r2,status
 4032f98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4032f9c:	e0fffd17 	ldw	r3,-12(fp)
 4032fa0:	00bfff84 	movi	r2,-2
 4032fa4:	1884703a 	and	r2,r3,r2
 4032fa8:	1001703a 	wrctl	status,r2
  
  return context;
 4032fac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4032fb0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4032fb4:	4034be80 	call	4034be8 <alt_tick>
 4032fb8:	e0bffc17 	ldw	r2,-16(fp)
 4032fbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4032fc0:	e0bffe17 	ldw	r2,-8(fp)
 4032fc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4032fc8:	0001883a 	nop
 4032fcc:	e037883a 	mov	sp,fp
 4032fd0:	dfc00117 	ldw	ra,4(sp)
 4032fd4:	df000017 	ldw	fp,0(sp)
 4032fd8:	dec00204 	addi	sp,sp,8
 4032fdc:	f800283a 	ret

04032fe0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4032fe0:	defff804 	addi	sp,sp,-32
 4032fe4:	dfc00715 	stw	ra,28(sp)
 4032fe8:	df000615 	stw	fp,24(sp)
 4032fec:	df000604 	addi	fp,sp,24
 4032ff0:	e13ffc15 	stw	r4,-16(fp)
 4032ff4:	e17ffd15 	stw	r5,-12(fp)
 4032ff8:	e1bffe15 	stw	r6,-8(fp)
 4032ffc:	e1ffff15 	stw	r7,-4(fp)
 4033000:	e0bfff17 	ldw	r2,-4(fp)
 4033004:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4033008:	d0a02d17 	ldw	r2,-32588(gp)
 403300c:	1000021e 	bne	r2,zero,4033018 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4033010:	e0bffb17 	ldw	r2,-20(fp)
 4033014:	d0a02d15 	stw	r2,-32588(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4033018:	e0bffc17 	ldw	r2,-16(fp)
 403301c:	10800104 	addi	r2,r2,4
 4033020:	00c001c4 	movi	r3,7
 4033024:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4033028:	d8000015 	stw	zero,0(sp)
 403302c:	e1fffc17 	ldw	r7,-16(fp)
 4033030:	018100f4 	movhi	r6,1027
 4033034:	318bda04 	addi	r6,r6,12136
 4033038:	e17ffe17 	ldw	r5,-8(fp)
 403303c:	e13ffd17 	ldw	r4,-12(fp)
 4033040:	40344c80 	call	40344c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4033044:	0001883a 	nop
 4033048:	e037883a 	mov	sp,fp
 403304c:	dfc00117 	ldw	ra,4(sp)
 4033050:	df000017 	ldw	fp,0(sp)
 4033054:	dec00204 	addi	sp,sp,8
 4033058:	f800283a 	ret

0403305c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 403305c:	defffc04 	addi	sp,sp,-16
 4033060:	dfc00315 	stw	ra,12(sp)
 4033064:	df000215 	stw	fp,8(sp)
 4033068:	df000204 	addi	fp,sp,8
 403306c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 4033070:	d1600804 	addi	r5,gp,-32736
 4033074:	e13fff17 	ldw	r4,-4(fp)
 4033078:	40344180 	call	4034418 <alt_find_dev>
 403307c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4033080:	e0bffe17 	ldw	r2,-8(fp)
}
 4033084:	e037883a 	mov	sp,fp
 4033088:	dfc00117 	ldw	ra,4(sp)
 403308c:	df000017 	ldw	fp,0(sp)
 4033090:	dec00204 	addi	sp,sp,8
 4033094:	f800283a 	ret

04033098 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 4033098:	defff904 	addi	sp,sp,-28
 403309c:	dfc00615 	stw	ra,24(sp)
 40330a0:	df000515 	stw	fp,20(sp)
 40330a4:	df000504 	addi	fp,sp,20
 40330a8:	e13ffc15 	stw	r4,-16(fp)
 40330ac:	e17ffd15 	stw	r5,-12(fp)
 40330b0:	e1bffe15 	stw	r6,-8(fp)
 40330b4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 40330b8:	e0bffc17 	ldw	r2,-16(fp)
 40330bc:	10800f17 	ldw	r2,60(r2)
 40330c0:	e0fffe17 	ldw	r3,-8(fp)
 40330c4:	1880042e 	bgeu	r3,r2,40330d8 <alt_up_pixel_buffer_dma_draw+0x40>
 40330c8:	e0bffc17 	ldw	r2,-16(fp)
 40330cc:	10801017 	ldw	r2,64(r2)
 40330d0:	e0ffff17 	ldw	r3,-4(fp)
 40330d4:	18800236 	bltu	r3,r2,40330e0 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 40330d8:	00bfffc4 	movi	r2,-1
 40330dc:	00005306 	br	403322c <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 40330e0:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40330e4:	e0bffc17 	ldw	r2,-16(fp)
 40330e8:	10800d17 	ldw	r2,52(r2)
 40330ec:	1000151e 	bne	r2,zero,4033144 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 40330f0:	e0bffc17 	ldw	r2,-16(fp)
 40330f4:	10c01217 	ldw	r3,72(r2)
 40330f8:	e0bffe17 	ldw	r2,-8(fp)
 40330fc:	1886703a 	and	r3,r3,r2
 4033100:	e0bffc17 	ldw	r2,-16(fp)
 4033104:	10801117 	ldw	r2,68(r2)
 4033108:	1884983a 	sll	r2,r3,r2
 403310c:	e0fffb17 	ldw	r3,-20(fp)
 4033110:	1885883a 	add	r2,r3,r2
 4033114:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 4033118:	e0bffc17 	ldw	r2,-16(fp)
 403311c:	10c01417 	ldw	r3,80(r2)
 4033120:	e0bfff17 	ldw	r2,-4(fp)
 4033124:	1886703a 	and	r3,r3,r2
 4033128:	e0bffc17 	ldw	r2,-16(fp)
 403312c:	10801317 	ldw	r2,76(r2)
 4033130:	1884983a 	sll	r2,r3,r2
 4033134:	e0fffb17 	ldw	r3,-20(fp)
 4033138:	1885883a 	add	r2,r3,r2
 403313c:	e0bffb15 	stw	r2,-20(fp)
 4033140:	00001a06 	br	40331ac <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4033144:	e0bffc17 	ldw	r2,-16(fp)
 4033148:	10c01217 	ldw	r3,72(r2)
 403314c:	e0bffe17 	ldw	r2,-8(fp)
 4033150:	1886703a 	and	r3,r3,r2
 4033154:	e0bffc17 	ldw	r2,-16(fp)
 4033158:	10801117 	ldw	r2,68(r2)
 403315c:	1884983a 	sll	r2,r3,r2
 4033160:	e0fffb17 	ldw	r3,-20(fp)
 4033164:	1885883a 	add	r2,r3,r2
 4033168:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 403316c:	e0bffc17 	ldw	r2,-16(fp)
 4033170:	10c01417 	ldw	r3,80(r2)
 4033174:	e0bfff17 	ldw	r2,-4(fp)
 4033178:	1886703a 	and	r3,r3,r2
 403317c:	e0bffc17 	ldw	r2,-16(fp)
 4033180:	10800f17 	ldw	r2,60(r2)
 4033184:	100b883a 	mov	r5,r2
 4033188:	1809883a 	mov	r4,r3
 403318c:	402ac1c0 	call	402ac1c <__mulsi3>
 4033190:	1007883a 	mov	r3,r2
 4033194:	e0bffc17 	ldw	r2,-16(fp)
 4033198:	10801117 	ldw	r2,68(r2)
 403319c:	1884983a 	sll	r2,r3,r2
 40331a0:	e0fffb17 	ldw	r3,-20(fp)
 40331a4:	1885883a 	add	r2,r3,r2
 40331a8:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40331ac:	e0bffc17 	ldw	r2,-16(fp)
 40331b0:	10800e17 	ldw	r2,56(r2)
 40331b4:	10800058 	cmpnei	r2,r2,1
 40331b8:	1000081e 	bne	r2,zero,40331dc <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40331bc:	e0bffc17 	ldw	r2,-16(fp)
 40331c0:	10c00c17 	ldw	r3,48(r2)
 40331c4:	e0bffb17 	ldw	r2,-20(fp)
 40331c8:	1885883a 	add	r2,r3,r2
 40331cc:	1007883a 	mov	r3,r2
 40331d0:	e0bffd17 	ldw	r2,-12(fp)
 40331d4:	18800025 	stbio	r2,0(r3)
 40331d8:	00001306 	br	4033228 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40331dc:	e0bffc17 	ldw	r2,-16(fp)
 40331e0:	10800e17 	ldw	r2,56(r2)
 40331e4:	10800098 	cmpnei	r2,r2,2
 40331e8:	1000081e 	bne	r2,zero,403320c <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40331ec:	e0bffc17 	ldw	r2,-16(fp)
 40331f0:	10c00c17 	ldw	r3,48(r2)
 40331f4:	e0bffb17 	ldw	r2,-20(fp)
 40331f8:	1885883a 	add	r2,r3,r2
 40331fc:	1007883a 	mov	r3,r2
 4033200:	e0bffd17 	ldw	r2,-12(fp)
 4033204:	1880002d 	sthio	r2,0(r3)
 4033208:	00000706 	br	4033228 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 403320c:	e0bffc17 	ldw	r2,-16(fp)
 4033210:	10c00c17 	ldw	r3,48(r2)
 4033214:	e0bffb17 	ldw	r2,-20(fp)
 4033218:	1885883a 	add	r2,r3,r2
 403321c:	1007883a 	mov	r3,r2
 4033220:	e0bffd17 	ldw	r2,-12(fp)
 4033224:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 4033228:	0005883a 	mov	r2,zero
}
 403322c:	e037883a 	mov	sp,fp
 4033230:	dfc00117 	ldw	ra,4(sp)
 4033234:	df000017 	ldw	fp,0(sp)
 4033238:	dec00204 	addi	sp,sp,8
 403323c:	f800283a 	ret

04033240 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 4033240:	defffd04 	addi	sp,sp,-12
 4033244:	df000215 	stw	fp,8(sp)
 4033248:	df000204 	addi	fp,sp,8
 403324c:	e13ffe15 	stw	r4,-8(fp)
 4033250:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 4033254:	e0bffe17 	ldw	r2,-8(fp)
 4033258:	10800a17 	ldw	r2,40(r2)
 403325c:	10800104 	addi	r2,r2,4
 4033260:	1007883a 	mov	r3,r2
 4033264:	e0bfff17 	ldw	r2,-4(fp)
 4033268:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 403326c:	e0bffe17 	ldw	r2,-8(fp)
 4033270:	10800a17 	ldw	r2,40(r2)
 4033274:	10800104 	addi	r2,r2,4
 4033278:	10800037 	ldwio	r2,0(r2)
 403327c:	1007883a 	mov	r3,r2
 4033280:	e0bffe17 	ldw	r2,-8(fp)
 4033284:	10c00c15 	stw	r3,48(r2)
	return 0;
 4033288:	0005883a 	mov	r2,zero
}
 403328c:	e037883a 	mov	sp,fp
 4033290:	df000017 	ldw	fp,0(sp)
 4033294:	dec00104 	addi	sp,sp,4
 4033298:	f800283a 	ret

0403329c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 403329c:	defffd04 	addi	sp,sp,-12
 40332a0:	df000215 	stw	fp,8(sp)
 40332a4:	dc000115 	stw	r16,4(sp)
 40332a8:	df000204 	addi	fp,sp,8
 40332ac:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 40332b0:	e0bffe17 	ldw	r2,-8(fp)
 40332b4:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 40332b8:	e0bffe17 	ldw	r2,-8(fp)
 40332bc:	10800a17 	ldw	r2,40(r2)
 40332c0:	1007883a 	mov	r3,r2
 40332c4:	00800044 	movi	r2,1
 40332c8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 40332cc:	e0bffe17 	ldw	r2,-8(fp)
 40332d0:	10c00b17 	ldw	r3,44(r2)
 40332d4:	e0bffe17 	ldw	r2,-8(fp)
 40332d8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 40332dc:	e0bffe17 	ldw	r2,-8(fp)
 40332e0:	14000b15 	stw	r16,44(r2)
	return 0;
 40332e4:	0005883a 	mov	r2,zero
}
 40332e8:	e6ffff04 	addi	sp,fp,-4
 40332ec:	df000117 	ldw	fp,4(sp)
 40332f0:	dc000017 	ldw	r16,0(sp)
 40332f4:	dec00204 	addi	sp,sp,8
 40332f8:	f800283a 	ret

040332fc <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 40332fc:	defffe04 	addi	sp,sp,-8
 4033300:	df000115 	stw	fp,4(sp)
 4033304:	df000104 	addi	fp,sp,4
 4033308:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 403330c:	e0bfff17 	ldw	r2,-4(fp)
 4033310:	10800a17 	ldw	r2,40(r2)
 4033314:	10800304 	addi	r2,r2,12
 4033318:	10800037 	ldwio	r2,0(r2)
 403331c:	1080004c 	andi	r2,r2,1
}
 4033320:	e037883a 	mov	sp,fp
 4033324:	df000017 	ldw	fp,0(sp)
 4033328:	dec00104 	addi	sp,sp,4
 403332c:	f800283a 	ret

04033330 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 4033330:	defff604 	addi	sp,sp,-40
 4033334:	dfc00915 	stw	ra,36(sp)
 4033338:	df000815 	stw	fp,32(sp)
 403333c:	dd400715 	stw	r21,28(sp)
 4033340:	dd000615 	stw	r20,24(sp)
 4033344:	dcc00515 	stw	r19,20(sp)
 4033348:	dc800415 	stw	r18,16(sp)
 403334c:	dc400315 	stw	r17,12(sp)
 4033350:	dc000215 	stw	r16,8(sp)
 4033354:	df000804 	addi	fp,sp,32
 4033358:	e13ff815 	stw	r4,-32(fp)
 403335c:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4033360:	e0bff917 	ldw	r2,-28(fp)
 4033364:	10800058 	cmpnei	r2,r2,1
 4033368:	1000031e 	bne	r2,zero,4033378 <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 403336c:	e0bff817 	ldw	r2,-32(fp)
 4033370:	14400c17 	ldw	r17,48(r2)
 4033374:	00000206 	br	4033380 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 4033378:	e0bff817 	ldw	r2,-32(fp)
 403337c:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 4033380:	e0bff817 	ldw	r2,-32(fp)
 4033384:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4033388:	e0bff817 	ldw	r2,-32(fp)
 403338c:	10800e17 	ldw	r2,56(r2)
 4033390:	10800098 	cmpnei	r2,r2,2
 4033394:	1000031e 	bne	r2,zero,40333a4 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 4033398:	8405883a 	add	r2,r16,r16
 403339c:	1021883a 	mov	r16,r2
 40333a0:	00000306 	br	40333b0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 40333a4:	8405883a 	add	r2,r16,r16
 40333a8:	1085883a 	add	r2,r2,r2
 40333ac:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 40333b0:	e0bff817 	ldw	r2,-32(fp)
 40333b4:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40333b8:	e0bff817 	ldw	r2,-32(fp)
 40333bc:	10800d17 	ldw	r2,52(r2)
 40333c0:	1000111e 	bne	r2,zero,4033408 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 40333c4:	e0bff817 	ldw	r2,-32(fp)
 40333c8:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 40333cc:	0029883a 	mov	r20,zero
 40333d0:	00000b06 	br	4033400 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 40333d4:	0025883a 	mov	r18,zero
 40333d8:	00000406 	br	40333ec <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 40333dc:	9445883a 	add	r2,r18,r17
 40333e0:	0007883a 	mov	r3,zero
 40333e4:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 40333e8:	94800104 	addi	r18,r18,4
 40333ec:	943ffb36 	bltu	r18,r16,40333dc <__flash_rwdata_start+0xffffdb8c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 40333f0:	00800044 	movi	r2,1
 40333f4:	1544983a 	sll	r2,r2,r21
 40333f8:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 40333fc:	a5000044 	addi	r20,r20,1
 4033400:	a4fff436 	bltu	r20,r19,40333d4 <__flash_rwdata_start+0xffffdb84>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4033404:	00000d06 	br	403343c <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 4033408:	800b883a 	mov	r5,r16
 403340c:	9809883a 	mov	r4,r19
 4033410:	402ac1c0 	call	402ac1c <__mulsi3>
 4033414:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 4033418:	0021883a 	mov	r16,zero
 403341c:	00000506 	br	4033434 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 4033420:	8005883a 	mov	r2,r16
 4033424:	1445883a 	add	r2,r2,r17
 4033428:	0007883a 	mov	r3,zero
 403342c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 4033430:	84000104 	addi	r16,r16,4
 4033434:	8005883a 	mov	r2,r16
 4033438:	14fff936 	bltu	r2,r19,4033420 <__flash_rwdata_start+0xffffdbd0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 403343c:	0001883a 	nop
 4033440:	e6fffa04 	addi	sp,fp,-24
 4033444:	dfc00717 	ldw	ra,28(sp)
 4033448:	df000617 	ldw	fp,24(sp)
 403344c:	dd400517 	ldw	r21,20(sp)
 4033450:	dd000417 	ldw	r20,16(sp)
 4033454:	dcc00317 	ldw	r19,12(sp)
 4033458:	dc800217 	ldw	r18,8(sp)
 403345c:	dc400117 	ldw	r17,4(sp)
 4033460:	dc000017 	ldw	r16,0(sp)
 4033464:	dec00804 	addi	sp,sp,32
 4033468:	f800283a 	ret

0403346c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 403346c:	defff204 	addi	sp,sp,-56
 4033470:	dfc00d15 	stw	ra,52(sp)
 4033474:	df000c15 	stw	fp,48(sp)
 4033478:	ddc00b15 	stw	r23,44(sp)
 403347c:	dd800a15 	stw	r22,40(sp)
 4033480:	dd400915 	stw	r21,36(sp)
 4033484:	dd000815 	stw	r20,32(sp)
 4033488:	dcc00715 	stw	r19,28(sp)
 403348c:	dc800615 	stw	r18,24(sp)
 4033490:	dc400515 	stw	r17,20(sp)
 4033494:	dc000415 	stw	r16,16(sp)
 4033498:	df000c04 	addi	fp,sp,48
 403349c:	e13ff415 	stw	r4,-48(fp)
 40334a0:	e17ff515 	stw	r5,-44(fp)
 40334a4:	e1bff615 	stw	r6,-40(fp)
 40334a8:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40334ac:	e0bff417 	ldw	r2,-48(fp)
 40334b0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 40334b4:	e0bff417 	ldw	r2,-48(fp)
 40334b8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 40334bc:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 40334c0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 40334c4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 40334c8:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 40334cc:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 40334d0:	a580032e 	bgeu	r20,r22,40334e0 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 40334d4:	b02b883a 	mov	r21,r22
		l_x = r_x;
 40334d8:	a02d883a 	mov	r22,r20
		r_x = temp;
 40334dc:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 40334e0:	9c40032e 	bgeu	r19,r17,40334f0 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 40334e4:	882b883a 	mov	r21,r17
		t_y = b_y;
 40334e8:	9823883a 	mov	r17,r19
		b_y = temp;
 40334ec:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 40334f0:	b4808f2e 	bgeu	r22,r18,4033730 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 40334f4:	8c008e2e 	bgeu	r17,r16,4033730 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 40334f8:	a4800136 	bltu	r20,r18,4033500 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 40334fc:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4033500:	9c000136 	bltu	r19,r16,4033508 <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 4033504:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4033508:	e0800417 	ldw	r2,16(fp)
 403350c:	10800058 	cmpnei	r2,r2,1
 4033510:	1000031e 	bne	r2,zero,4033520 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 4033514:	e0bff417 	ldw	r2,-48(fp)
 4033518:	14000c17 	ldw	r16,48(r2)
 403351c:	00000206 	br	4033528 <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 4033520:	e0bff417 	ldw	r2,-48(fp)
 4033524:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4033528:	e0bff417 	ldw	r2,-48(fp)
 403352c:	10800d17 	ldw	r2,52(r2)
 4033530:	10003c1e 	bne	r2,zero,4033624 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4033534:	e0bff417 	ldw	r2,-48(fp)
 4033538:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 403353c:	8d44983a 	sll	r2,r17,r21
 4033540:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4033544:	e0bff417 	ldw	r2,-48(fp)
 4033548:	10800e17 	ldw	r2,56(r2)
 403354c:	10800058 	cmpnei	r2,r2,1
 4033550:	10000f1e 	bne	r2,zero,4033590 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 4033554:	8825883a 	mov	r18,r17
 4033558:	00000b06 	br	4033588 <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 403355c:	b023883a 	mov	r17,r22
 4033560:	00000406 	br	4033574 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4033564:	8c05883a 	add	r2,r17,r16
 4033568:	b807883a 	mov	r3,r23
 403356c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4033570:	8c400044 	addi	r17,r17,1
 4033574:	a47ffb2e 	bgeu	r20,r17,4033564 <__flash_rwdata_start+0xffffdd14>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 4033578:	00800044 	movi	r2,1
 403357c:	1544983a 	sll	r2,r2,r21
 4033580:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4033584:	94800044 	addi	r18,r18,1
 4033588:	9cbff42e 	bgeu	r19,r18,403355c <__flash_rwdata_start+0xffffdd0c>
 403358c:	00006906 	br	4033734 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4033590:	e0bff417 	ldw	r2,-48(fp)
 4033594:	10800e17 	ldw	r2,56(r2)
 4033598:	10800098 	cmpnei	r2,r2,2
 403359c:	1000101e 	bne	r2,zero,40335e0 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 40335a0:	8825883a 	mov	r18,r17
 40335a4:	00000c06 	br	40335d8 <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 40335a8:	b023883a 	mov	r17,r22
 40335ac:	00000506 	br	40335c4 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 40335b0:	8c45883a 	add	r2,r17,r17
 40335b4:	1405883a 	add	r2,r2,r16
 40335b8:	b807883a 	mov	r3,r23
 40335bc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40335c0:	8c400044 	addi	r17,r17,1
 40335c4:	a47ffa2e 	bgeu	r20,r17,40335b0 <__flash_rwdata_start+0xffffdd60>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 40335c8:	00800044 	movi	r2,1
 40335cc:	1544983a 	sll	r2,r2,r21
 40335d0:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 40335d4:	94800044 	addi	r18,r18,1
 40335d8:	9cbff32e 	bgeu	r19,r18,40335a8 <__flash_rwdata_start+0xffffdd58>
 40335dc:	00005506 	br	4033734 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40335e0:	8825883a 	mov	r18,r17
 40335e4:	00000d06 	br	403361c <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 40335e8:	b023883a 	mov	r17,r22
 40335ec:	00000606 	br	4033608 <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 40335f0:	8c45883a 	add	r2,r17,r17
 40335f4:	1085883a 	add	r2,r2,r2
 40335f8:	1405883a 	add	r2,r2,r16
 40335fc:	b807883a 	mov	r3,r23
 4033600:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4033604:	8c400044 	addi	r17,r17,1
 4033608:	a47ff92e 	bgeu	r20,r17,40335f0 <__flash_rwdata_start+0xffffdda0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 403360c:	00800044 	movi	r2,1
 4033610:	1544983a 	sll	r2,r2,r21
 4033614:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4033618:	94800044 	addi	r18,r18,1
 403361c:	9cbff22e 	bgeu	r19,r18,40335e8 <__flash_rwdata_start+0xffffdd98>
 4033620:	00004406 	br	4033734 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4033624:	e0bff417 	ldw	r2,-48(fp)
 4033628:	10800e17 	ldw	r2,56(r2)
 403362c:	10800058 	cmpnei	r2,r2,1
 4033630:	1000111e 	bne	r2,zero,4033678 <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 4033634:	900b883a 	mov	r5,r18
 4033638:	8809883a 	mov	r4,r17
 403363c:	402ac1c0 	call	402ac1c <__mulsi3>
 4033640:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4033644:	882b883a 	mov	r21,r17
 4033648:	00000906 	br	4033670 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 403364c:	b023883a 	mov	r17,r22
 4033650:	00000406 	br	4033664 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4033654:	8c05883a 	add	r2,r17,r16
 4033658:	b807883a 	mov	r3,r23
 403365c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4033660:	8c400044 	addi	r17,r17,1
 4033664:	a47ffb2e 	bgeu	r20,r17,4033654 <__flash_rwdata_start+0xffffde04>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 4033668:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 403366c:	ad400044 	addi	r21,r21,1
 4033670:	9d7ff62e 	bgeu	r19,r21,403364c <__flash_rwdata_start+0xffffddfc>
 4033674:	00002f06 	br	4033734 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4033678:	e0bff417 	ldw	r2,-48(fp)
 403367c:	10800e17 	ldw	r2,56(r2)
 4033680:	10800098 	cmpnei	r2,r2,2
 4033684:	1000141e 	bne	r2,zero,40336d8 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 4033688:	9485883a 	add	r2,r18,r18
 403368c:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4033690:	900b883a 	mov	r5,r18
 4033694:	8809883a 	mov	r4,r17
 4033698:	402ac1c0 	call	402ac1c <__mulsi3>
 403369c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40336a0:	882b883a 	mov	r21,r17
 40336a4:	00000a06 	br	40336d0 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 40336a8:	b023883a 	mov	r17,r22
 40336ac:	00000506 	br	40336c4 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 40336b0:	8c45883a 	add	r2,r17,r17
 40336b4:	1405883a 	add	r2,r2,r16
 40336b8:	b807883a 	mov	r3,r23
 40336bc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40336c0:	8c400044 	addi	r17,r17,1
 40336c4:	a47ffa2e 	bgeu	r20,r17,40336b0 <__flash_rwdata_start+0xffffde60>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 40336c8:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40336cc:	ad400044 	addi	r21,r21,1
 40336d0:	9d7ff52e 	bgeu	r19,r21,40336a8 <__flash_rwdata_start+0xffffde58>
 40336d4:	00001706 	br	4033734 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 40336d8:	9485883a 	add	r2,r18,r18
 40336dc:	1085883a 	add	r2,r2,r2
 40336e0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 40336e4:	900b883a 	mov	r5,r18
 40336e8:	8809883a 	mov	r4,r17
 40336ec:	402ac1c0 	call	402ac1c <__mulsi3>
 40336f0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40336f4:	882b883a 	mov	r21,r17
 40336f8:	00000b06 	br	4033728 <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 40336fc:	b023883a 	mov	r17,r22
 4033700:	00000606 	br	403371c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4033704:	8c45883a 	add	r2,r17,r17
 4033708:	1085883a 	add	r2,r2,r2
 403370c:	1405883a 	add	r2,r2,r16
 4033710:	b807883a 	mov	r3,r23
 4033714:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4033718:	8c400044 	addi	r17,r17,1
 403371c:	a47ff92e 	bgeu	r20,r17,4033704 <__flash_rwdata_start+0xffffdeb4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 4033720:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4033724:	ad400044 	addi	r21,r21,1
 4033728:	9d7ff42e 	bgeu	r19,r21,40336fc <__flash_rwdata_start+0xffffdeac>
 403372c:	00000106 	br	4033734 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4033730:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 4033734:	e6fff804 	addi	sp,fp,-32
 4033738:	dfc00917 	ldw	ra,36(sp)
 403373c:	df000817 	ldw	fp,32(sp)
 4033740:	ddc00717 	ldw	r23,28(sp)
 4033744:	dd800617 	ldw	r22,24(sp)
 4033748:	dd400517 	ldw	r21,20(sp)
 403374c:	dd000417 	ldw	r20,16(sp)
 4033750:	dcc00317 	ldw	r19,12(sp)
 4033754:	dc800217 	ldw	r18,8(sp)
 4033758:	dc400117 	ldw	r17,4(sp)
 403375c:	dc000017 	ldw	r16,0(sp)
 4033760:	dec00a04 	addi	sp,sp,40
 4033764:	f800283a 	ret

04033768 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 4033768:	defff304 	addi	sp,sp,-52
 403376c:	dfc00c15 	stw	ra,48(sp)
 4033770:	df000b15 	stw	fp,44(sp)
 4033774:	dd800a15 	stw	r22,40(sp)
 4033778:	dd400915 	stw	r21,36(sp)
 403377c:	dd000815 	stw	r20,32(sp)
 4033780:	dcc00715 	stw	r19,28(sp)
 4033784:	dc800615 	stw	r18,24(sp)
 4033788:	dc400515 	stw	r17,20(sp)
 403378c:	dc000415 	stw	r16,16(sp)
 4033790:	df000b04 	addi	fp,sp,44
 4033794:	e13ff515 	stw	r4,-44(fp)
 4033798:	e17ff615 	stw	r5,-40(fp)
 403379c:	e1bff715 	stw	r6,-36(fp)
 40337a0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40337a4:	e0bff517 	ldw	r2,-44(fp)
 40337a8:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 40337ac:	e0bff517 	ldw	r2,-44(fp)
 40337b0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 40337b4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 40337b8:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 40337bc:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 40337c0:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 40337c4:	9440032e 	bgeu	r18,r17,40337d4 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 40337c8:	882d883a 	mov	r22,r17
		l_x = r_x;
 40337cc:	9023883a 	mov	r17,r18
		r_x = temp;
 40337d0:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 40337d4:	8cc0632e 	bgeu	r17,r19,4033964 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 40337d8:	a400622e 	bgeu	r20,r16,4033964 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 40337dc:	94c00136 	bltu	r18,r19,40337e4 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 40337e0:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40337e4:	e0800317 	ldw	r2,12(fp)
 40337e8:	10800058 	cmpnei	r2,r2,1
 40337ec:	1000031e 	bne	r2,zero,40337fc <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 40337f0:	e0bff517 	ldw	r2,-44(fp)
 40337f4:	14000c17 	ldw	r16,48(r2)
 40337f8:	00000206 	br	4033804 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 40337fc:	e0bff517 	ldw	r2,-44(fp)
 4033800:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4033804:	e0bff517 	ldw	r2,-44(fp)
 4033808:	10800d17 	ldw	r2,52(r2)
 403380c:	1000231e 	bne	r2,zero,403389c <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4033810:	e0bff517 	ldw	r2,-44(fp)
 4033814:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 4033818:	a4c4983a 	sll	r2,r20,r19
 403381c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4033820:	e0bff517 	ldw	r2,-44(fp)
 4033824:	10800e17 	ldw	r2,56(r2)
 4033828:	10800058 	cmpnei	r2,r2,1
 403382c:	1000071e 	bne	r2,zero,403384c <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 4033830:	00000406 	br	4033844 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4033834:	8c05883a 	add	r2,r17,r16
 4033838:	a807883a 	mov	r3,r21
 403383c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4033840:	8c400044 	addi	r17,r17,1
 4033844:	947ffb2e 	bgeu	r18,r17,4033834 <__flash_rwdata_start+0xffffdfe4>
 4033848:	00004706 	br	4033968 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 403384c:	e0bff517 	ldw	r2,-44(fp)
 4033850:	10800e17 	ldw	r2,56(r2)
 4033854:	10800098 	cmpnei	r2,r2,2
 4033858:	10000e1e 	bne	r2,zero,4033894 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 403385c:	00000506 	br	4033874 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4033860:	8c45883a 	add	r2,r17,r17
 4033864:	1405883a 	add	r2,r2,r16
 4033868:	a807883a 	mov	r3,r21
 403386c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4033870:	8c400044 	addi	r17,r17,1
 4033874:	947ffa2e 	bgeu	r18,r17,4033860 <__flash_rwdata_start+0xffffe010>
 4033878:	00003b06 	br	4033968 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 403387c:	8c45883a 	add	r2,r17,r17
 4033880:	1085883a 	add	r2,r2,r2
 4033884:	1405883a 	add	r2,r2,r16
 4033888:	a807883a 	mov	r3,r21
 403388c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4033890:	8c400044 	addi	r17,r17,1
 4033894:	947ff92e 	bgeu	r18,r17,403387c <__flash_rwdata_start+0xffffe02c>
 4033898:	00003306 	br	4033968 <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 403389c:	e0bff517 	ldw	r2,-44(fp)
 40338a0:	10800e17 	ldw	r2,56(r2)
 40338a4:	10800058 	cmpnei	r2,r2,1
 40338a8:	10000b1e 	bne	r2,zero,40338d8 <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 40338ac:	980b883a 	mov	r5,r19
 40338b0:	a009883a 	mov	r4,r20
 40338b4:	402ac1c0 	call	402ac1c <__mulsi3>
 40338b8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 40338bc:	00000406 	br	40338d0 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 40338c0:	8c05883a 	add	r2,r17,r16
 40338c4:	a807883a 	mov	r3,r21
 40338c8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 40338cc:	8c400044 	addi	r17,r17,1
 40338d0:	947ffb2e 	bgeu	r18,r17,40338c0 <__flash_rwdata_start+0xffffe070>
 40338d4:	00002406 	br	4033968 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40338d8:	e0bff517 	ldw	r2,-44(fp)
 40338dc:	10800e17 	ldw	r2,56(r2)
 40338e0:	10800098 	cmpnei	r2,r2,2
 40338e4:	10000e1e 	bne	r2,zero,4033920 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 40338e8:	9cc5883a 	add	r2,r19,r19
 40338ec:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 40338f0:	980b883a 	mov	r5,r19
 40338f4:	a009883a 	mov	r4,r20
 40338f8:	402ac1c0 	call	402ac1c <__mulsi3>
 40338fc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4033900:	00000506 	br	4033918 <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4033904:	8c45883a 	add	r2,r17,r17
 4033908:	1405883a 	add	r2,r2,r16
 403390c:	a807883a 	mov	r3,r21
 4033910:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4033914:	8c400044 	addi	r17,r17,1
 4033918:	947ffa2e 	bgeu	r18,r17,4033904 <__flash_rwdata_start+0xffffe0b4>
 403391c:	00001206 	br	4033968 <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4033920:	9cc5883a 	add	r2,r19,r19
 4033924:	1085883a 	add	r2,r2,r2
 4033928:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 403392c:	980b883a 	mov	r5,r19
 4033930:	a009883a 	mov	r4,r20
 4033934:	402ac1c0 	call	402ac1c <__mulsi3>
 4033938:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 403393c:	00000606 	br	4033958 <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4033940:	8c45883a 	add	r2,r17,r17
 4033944:	1085883a 	add	r2,r2,r2
 4033948:	1405883a 	add	r2,r2,r16
 403394c:	a807883a 	mov	r3,r21
 4033950:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4033954:	8c400044 	addi	r17,r17,1
 4033958:	947ff92e 	bgeu	r18,r17,4033940 <__flash_rwdata_start+0xffffe0f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 403395c:	84e1883a 	add	r16,r16,r19
 4033960:	00000106 	br	4033968 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4033964:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 4033968:	e6fff904 	addi	sp,fp,-28
 403396c:	dfc00817 	ldw	ra,32(sp)
 4033970:	df000717 	ldw	fp,28(sp)
 4033974:	dd800617 	ldw	r22,24(sp)
 4033978:	dd400517 	ldw	r21,20(sp)
 403397c:	dd000417 	ldw	r20,16(sp)
 4033980:	dcc00317 	ldw	r19,12(sp)
 4033984:	dc800217 	ldw	r18,8(sp)
 4033988:	dc400117 	ldw	r17,4(sp)
 403398c:	dc000017 	ldw	r16,0(sp)
 4033990:	dec00904 	addi	sp,sp,36
 4033994:	f800283a 	ret

04033998 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4033998:	defff304 	addi	sp,sp,-52
 403399c:	dfc00c15 	stw	ra,48(sp)
 40339a0:	df000b15 	stw	fp,44(sp)
 40339a4:	dd800a15 	stw	r22,40(sp)
 40339a8:	dd400915 	stw	r21,36(sp)
 40339ac:	dd000815 	stw	r20,32(sp)
 40339b0:	dcc00715 	stw	r19,28(sp)
 40339b4:	dc800615 	stw	r18,24(sp)
 40339b8:	dc400515 	stw	r17,20(sp)
 40339bc:	dc000415 	stw	r16,16(sp)
 40339c0:	df000b04 	addi	fp,sp,44
 40339c4:	e13ff515 	stw	r4,-44(fp)
 40339c8:	e17ff615 	stw	r5,-40(fp)
 40339cc:	e1bff715 	stw	r6,-36(fp)
 40339d0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40339d4:	e0bff517 	ldw	r2,-44(fp)
 40339d8:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 40339dc:	e0bff517 	ldw	r2,-44(fp)
 40339e0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 40339e4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 40339e8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 40339ec:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 40339f0:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 40339f4:	9500032e 	bgeu	r18,r20,4033a04 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 40339f8:	a02b883a 	mov	r21,r20
		t_y = b_y;
 40339fc:	9029883a 	mov	r20,r18
		b_y = temp;
 4033a00:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4033a04:	8cc0722e 	bgeu	r17,r19,4033bd0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 4033a08:	a400712e 	bgeu	r20,r16,4033bd0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4033a0c:	94000136 	bltu	r18,r16,4033a14 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 4033a10:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4033a14:	e0800317 	ldw	r2,12(fp)
 4033a18:	10800058 	cmpnei	r2,r2,1
 4033a1c:	1000031e 	bne	r2,zero,4033a2c <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 4033a20:	e0bff517 	ldw	r2,-44(fp)
 4033a24:	14000c17 	ldw	r16,48(r2)
 4033a28:	00000206 	br	4033a34 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 4033a2c:	e0bff517 	ldw	r2,-44(fp)
 4033a30:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4033a34:	e0bff517 	ldw	r2,-44(fp)
 4033a38:	10800d17 	ldw	r2,52(r2)
 4033a3c:	1000301e 	bne	r2,zero,4033b00 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4033a40:	e0bff517 	ldw	r2,-44(fp)
 4033a44:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 4033a48:	a544983a 	sll	r2,r20,r21
 4033a4c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4033a50:	e0bff517 	ldw	r2,-44(fp)
 4033a54:	10800e17 	ldw	r2,56(r2)
 4033a58:	10800058 	cmpnei	r2,r2,1
 4033a5c:	10000b1e 	bne	r2,zero,4033a8c <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 4033a60:	a027883a 	mov	r19,r20
 4033a64:	00000706 	br	4033a84 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4033a68:	8c05883a 	add	r2,r17,r16
 4033a6c:	b007883a 	mov	r3,r22
 4033a70:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4033a74:	00800044 	movi	r2,1
 4033a78:	1544983a 	sll	r2,r2,r21
 4033a7c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4033a80:	9cc00044 	addi	r19,r19,1
 4033a84:	94fff82e 	bgeu	r18,r19,4033a68 <__flash_rwdata_start+0xffffe218>
 4033a88:	00005206 	br	4033bd4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4033a8c:	e0bff517 	ldw	r2,-44(fp)
 4033a90:	10800e17 	ldw	r2,56(r2)
 4033a94:	10800098 	cmpnei	r2,r2,2
 4033a98:	10000c1e 	bne	r2,zero,4033acc <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 4033a9c:	a027883a 	mov	r19,r20
 4033aa0:	00000806 	br	4033ac4 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4033aa4:	8c45883a 	add	r2,r17,r17
 4033aa8:	1405883a 	add	r2,r2,r16
 4033aac:	b007883a 	mov	r3,r22
 4033ab0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4033ab4:	00800044 	movi	r2,1
 4033ab8:	1544983a 	sll	r2,r2,r21
 4033abc:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4033ac0:	9cc00044 	addi	r19,r19,1
 4033ac4:	94fff72e 	bgeu	r18,r19,4033aa4 <__flash_rwdata_start+0xffffe254>
 4033ac8:	00004206 	br	4033bd4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4033acc:	a027883a 	mov	r19,r20
 4033ad0:	00000906 	br	4033af8 <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4033ad4:	8c45883a 	add	r2,r17,r17
 4033ad8:	1085883a 	add	r2,r2,r2
 4033adc:	1405883a 	add	r2,r2,r16
 4033ae0:	b007883a 	mov	r3,r22
 4033ae4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4033ae8:	00800044 	movi	r2,1
 4033aec:	1544983a 	sll	r2,r2,r21
 4033af0:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4033af4:	9cc00044 	addi	r19,r19,1
 4033af8:	94fff62e 	bgeu	r18,r19,4033ad4 <__flash_rwdata_start+0xffffe284>
 4033afc:	00003506 	br	4033bd4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4033b00:	e0bff517 	ldw	r2,-44(fp)
 4033b04:	10800e17 	ldw	r2,56(r2)
 4033b08:	10800058 	cmpnei	r2,r2,1
 4033b0c:	10000c1e 	bne	r2,zero,4033b40 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 4033b10:	980b883a 	mov	r5,r19
 4033b14:	a009883a 	mov	r4,r20
 4033b18:	402ac1c0 	call	402ac1c <__mulsi3>
 4033b1c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4033b20:	00000506 	br	4033b38 <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4033b24:	8c05883a 	add	r2,r17,r16
 4033b28:	b007883a 	mov	r3,r22
 4033b2c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 4033b30:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4033b34:	a5000044 	addi	r20,r20,1
 4033b38:	953ffa2e 	bgeu	r18,r20,4033b24 <__flash_rwdata_start+0xffffe2d4>
 4033b3c:	00002506 	br	4033bd4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4033b40:	e0bff517 	ldw	r2,-44(fp)
 4033b44:	10800e17 	ldw	r2,56(r2)
 4033b48:	10800098 	cmpnei	r2,r2,2
 4033b4c:	10000f1e 	bne	r2,zero,4033b8c <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 4033b50:	9cc5883a 	add	r2,r19,r19
 4033b54:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 4033b58:	980b883a 	mov	r5,r19
 4033b5c:	a009883a 	mov	r4,r20
 4033b60:	402ac1c0 	call	402ac1c <__mulsi3>
 4033b64:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4033b68:	00000606 	br	4033b84 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4033b6c:	8c45883a 	add	r2,r17,r17
 4033b70:	1405883a 	add	r2,r2,r16
 4033b74:	b007883a 	mov	r3,r22
 4033b78:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 4033b7c:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4033b80:	a5000044 	addi	r20,r20,1
 4033b84:	953ff92e 	bgeu	r18,r20,4033b6c <__flash_rwdata_start+0xffffe31c>
 4033b88:	00001206 	br	4033bd4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4033b8c:	9cc5883a 	add	r2,r19,r19
 4033b90:	1085883a 	add	r2,r2,r2
 4033b94:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 4033b98:	980b883a 	mov	r5,r19
 4033b9c:	a009883a 	mov	r4,r20
 4033ba0:	402ac1c0 	call	402ac1c <__mulsi3>
 4033ba4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4033ba8:	00000706 	br	4033bc8 <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4033bac:	8c45883a 	add	r2,r17,r17
 4033bb0:	1085883a 	add	r2,r2,r2
 4033bb4:	1405883a 	add	r2,r2,r16
 4033bb8:	b007883a 	mov	r3,r22
 4033bbc:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 4033bc0:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4033bc4:	a5000044 	addi	r20,r20,1
 4033bc8:	953ff82e 	bgeu	r18,r20,4033bac <__flash_rwdata_start+0xffffe35c>
 4033bcc:	00000106 	br	4033bd4 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4033bd0:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 4033bd4:	e6fff904 	addi	sp,fp,-28
 4033bd8:	dfc00817 	ldw	ra,32(sp)
 4033bdc:	df000717 	ldw	fp,28(sp)
 4033be0:	dd800617 	ldw	r22,24(sp)
 4033be4:	dd400517 	ldw	r21,20(sp)
 4033be8:	dd000417 	ldw	r20,16(sp)
 4033bec:	dcc00317 	ldw	r19,12(sp)
 4033bf0:	dc800217 	ldw	r18,8(sp)
 4033bf4:	dc400117 	ldw	r17,4(sp)
 4033bf8:	dc000017 	ldw	r16,0(sp)
 4033bfc:	dec00904 	addi	sp,sp,36
 4033c00:	f800283a 	ret

04033c04 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4033c04:	defff804 	addi	sp,sp,-32
 4033c08:	dfc00715 	stw	ra,28(sp)
 4033c0c:	df000615 	stw	fp,24(sp)
 4033c10:	df000604 	addi	fp,sp,24
 4033c14:	e13ffc15 	stw	r4,-16(fp)
 4033c18:	e17ffd15 	stw	r5,-12(fp)
 4033c1c:	e1bffe15 	stw	r6,-8(fp)
 4033c20:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4033c24:	e0800417 	ldw	r2,16(fp)
 4033c28:	d8800115 	stw	r2,4(sp)
 4033c2c:	e0800317 	ldw	r2,12(fp)
 4033c30:	d8800015 	stw	r2,0(sp)
 4033c34:	e1fffe17 	ldw	r7,-8(fp)
 4033c38:	e1bfff17 	ldw	r6,-4(fp)
 4033c3c:	e17ffd17 	ldw	r5,-12(fp)
 4033c40:	e13ffc17 	ldw	r4,-16(fp)
 4033c44:	40337680 	call	4033768 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4033c48:	e0800417 	ldw	r2,16(fp)
 4033c4c:	d8800115 	stw	r2,4(sp)
 4033c50:	e0800317 	ldw	r2,12(fp)
 4033c54:	d8800015 	stw	r2,0(sp)
 4033c58:	e1c00217 	ldw	r7,8(fp)
 4033c5c:	e1bfff17 	ldw	r6,-4(fp)
 4033c60:	e17ffd17 	ldw	r5,-12(fp)
 4033c64:	e13ffc17 	ldw	r4,-16(fp)
 4033c68:	40337680 	call	4033768 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 4033c6c:	e0800417 	ldw	r2,16(fp)
 4033c70:	d8800115 	stw	r2,4(sp)
 4033c74:	e0800317 	ldw	r2,12(fp)
 4033c78:	d8800015 	stw	r2,0(sp)
 4033c7c:	e1c00217 	ldw	r7,8(fp)
 4033c80:	e1bffe17 	ldw	r6,-8(fp)
 4033c84:	e17ffd17 	ldw	r5,-12(fp)
 4033c88:	e13ffc17 	ldw	r4,-16(fp)
 4033c8c:	40339980 	call	4033998 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4033c90:	e0800417 	ldw	r2,16(fp)
 4033c94:	d8800115 	stw	r2,4(sp)
 4033c98:	e0800317 	ldw	r2,12(fp)
 4033c9c:	d8800015 	stw	r2,0(sp)
 4033ca0:	e1c00217 	ldw	r7,8(fp)
 4033ca4:	e1bffe17 	ldw	r6,-8(fp)
 4033ca8:	e17fff17 	ldw	r5,-4(fp)
 4033cac:	e13ffc17 	ldw	r4,-16(fp)
 4033cb0:	40339980 	call	4033998 <alt_up_pixel_buffer_dma_draw_vline>
}
 4033cb4:	0001883a 	nop
 4033cb8:	e037883a 	mov	sp,fp
 4033cbc:	dfc00117 	ldw	ra,4(sp)
 4033cc0:	df000017 	ldw	fp,0(sp)
 4033cc4:	dec00204 	addi	sp,sp,8
 4033cc8:	f800283a 	ret

04033ccc <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4033ccc:	defffb04 	addi	sp,sp,-20
 4033cd0:	dfc00415 	stw	ra,16(sp)
 4033cd4:	df000315 	stw	fp,12(sp)
 4033cd8:	dc800215 	stw	r18,8(sp)
 4033cdc:	dc400115 	stw	r17,4(sp)
 4033ce0:	dc000015 	stw	r16,0(sp)
 4033ce4:	df000304 	addi	fp,sp,12
 4033ce8:	2021883a 	mov	r16,r4
 4033cec:	2807883a 	mov	r3,r5
 4033cf0:	3023883a 	mov	r17,r6
 4033cf4:	3809883a 	mov	r4,r7
 4033cf8:	e4800217 	ldw	r18,8(fp)
 4033cfc:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 4033d00:	1000071e 	bne	r2,zero,4033d20 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4033d04:	200b883a 	mov	r5,r4
 4033d08:	1809883a 	mov	r4,r3
 4033d0c:	402ac1c0 	call	402ac1c <__mulsi3>
 4033d10:	1445883a 	add	r2,r2,r17
 4033d14:	1405883a 	add	r2,r2,r16
 4033d18:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4033d1c:	00001206 	br	4033d68 <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4033d20:	10800058 	cmpnei	r2,r2,1
 4033d24:	1000081e 	bne	r2,zero,4033d48 <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4033d28:	200b883a 	mov	r5,r4
 4033d2c:	1809883a 	mov	r4,r3
 4033d30:	402ac1c0 	call	402ac1c <__mulsi3>
 4033d34:	1445883a 	add	r2,r2,r17
 4033d38:	1085883a 	add	r2,r2,r2
 4033d3c:	1405883a 	add	r2,r2,r16
 4033d40:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4033d44:	00000806 	br	4033d68 <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 4033d48:	200b883a 	mov	r5,r4
 4033d4c:	1809883a 	mov	r4,r3
 4033d50:	402ac1c0 	call	402ac1c <__mulsi3>
 4033d54:	1445883a 	add	r2,r2,r17
 4033d58:	1085883a 	add	r2,r2,r2
 4033d5c:	1085883a 	add	r2,r2,r2
 4033d60:	1405883a 	add	r2,r2,r16
 4033d64:	14800035 	stwio	r18,0(r2)
}
 4033d68:	0001883a 	nop
 4033d6c:	e6fffd04 	addi	sp,fp,-12
 4033d70:	dfc00417 	ldw	ra,16(sp)
 4033d74:	df000317 	ldw	fp,12(sp)
 4033d78:	dc800217 	ldw	r18,8(sp)
 4033d7c:	dc400117 	ldw	r17,4(sp)
 4033d80:	dc000017 	ldw	r16,0(sp)
 4033d84:	dec00504 	addi	sp,sp,20
 4033d88:	f800283a 	ret

04033d8c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4033d8c:	deffeb04 	addi	sp,sp,-84
 4033d90:	dfc01415 	stw	ra,80(sp)
 4033d94:	df001315 	stw	fp,76(sp)
 4033d98:	ddc01215 	stw	r23,72(sp)
 4033d9c:	dd801115 	stw	r22,68(sp)
 4033da0:	dd401015 	stw	r21,64(sp)
 4033da4:	dd000f15 	stw	r20,60(sp)
 4033da8:	dcc00e15 	stw	r19,56(sp)
 4033dac:	dc800d15 	stw	r18,52(sp)
 4033db0:	dc400c15 	stw	r17,48(sp)
 4033db4:	dc000b15 	stw	r16,44(sp)
 4033db8:	df001304 	addi	fp,sp,76
 4033dbc:	e13fef15 	stw	r4,-68(fp)
 4033dc0:	e17ff015 	stw	r5,-64(fp)
 4033dc4:	e1bff115 	stw	r6,-60(fp)
 4033dc8:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 4033dcc:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 4033dd0:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 4033dd4:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 4033dd8:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4033ddc:	a4c5c83a 	sub	r2,r20,r19
 4033de0:	1000010e 	bge	r2,zero,4033de8 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 4033de4:	0085c83a 	sub	r2,zero,r2
 4033de8:	1007883a 	mov	r3,r2
 4033dec:	9445c83a 	sub	r2,r18,r17
 4033df0:	1000010e 	bge	r2,zero,4033df8 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 4033df4:	0085c83a 	sub	r2,zero,r2
 4033df8:	10c4803a 	cmplt	r2,r2,r3
 4033dfc:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4033e00:	e0bfef17 	ldw	r2,-68(fp)
 4033e04:	10800e17 	ldw	r2,56(r2)
 4033e08:	10800060 	cmpeqi	r2,r2,1
 4033e0c:	1000081e 	bne	r2,zero,4033e30 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 4033e10:	e0bfef17 	ldw	r2,-68(fp)
 4033e14:	10800e17 	ldw	r2,56(r2)
 4033e18:	10800098 	cmpnei	r2,r2,2
 4033e1c:	1000021e 	bne	r2,zero,4033e28 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 4033e20:	00800044 	movi	r2,1
 4033e24:	00000306 	br	4033e34 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 4033e28:	00800084 	movi	r2,2
 4033e2c:	00000106 	br	4033e34 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4033e30:	0005883a 	mov	r2,zero
 4033e34:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 4033e38:	e0800317 	ldw	r2,12(fp)
 4033e3c:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 4033e40:	e0bfef17 	ldw	r2,-68(fp)
 4033e44:	10800d17 	ldw	r2,52(r2)
 4033e48:	1000071e 	bne	r2,zero,4033e68 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 4033e4c:	e0bfef17 	ldw	r2,-68(fp)
 4033e50:	10801317 	ldw	r2,76(r2)
 4033e54:	e0fff417 	ldw	r3,-48(fp)
 4033e58:	10c5c83a 	sub	r2,r2,r3
 4033e5c:	00c00044 	movi	r3,1
 4033e60:	1884983a 	sll	r2,r3,r2
 4033e64:	00000206 	br	4033e70 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 4033e68:	e0bfef17 	ldw	r2,-68(fp)
 4033e6c:	10800f17 	ldw	r2,60(r2)
 4033e70:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 4033e74:	e0800417 	ldw	r2,16(fp)
 4033e78:	10800058 	cmpnei	r2,r2,1
 4033e7c:	1000031e 	bne	r2,zero,4033e8c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4033e80:	e0bfef17 	ldw	r2,-68(fp)
 4033e84:	15c00c17 	ldw	r23,48(r2)
 4033e88:	00000206 	br	4033e94 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 4033e8c:	e0bfef17 	ldw	r2,-68(fp)
 4033e90:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 4033e94:	e0bff307 	ldb	r2,-52(fp)
 4033e98:	0080060e 	bge	zero,r2,4033eb4 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 4033e9c:	8821883a 	mov	r16,r17
		x_0 = y_0;
 4033ea0:	9823883a 	mov	r17,r19
		y_0 = error;
 4033ea4:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 4033ea8:	9021883a 	mov	r16,r18
		x_1 = y_1;
 4033eac:	a025883a 	mov	r18,r20
		y_1 = error;
 4033eb0:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 4033eb4:	9440060e 	bge	r18,r17,4033ed0 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 4033eb8:	8821883a 	mov	r16,r17
		x_0 = x_1;
 4033ebc:	9023883a 	mov	r17,r18
		x_1 = error;
 4033ec0:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 4033ec4:	9821883a 	mov	r16,r19
		y_0 = y_1;
 4033ec8:	a027883a 	mov	r19,r20
		y_1 = error;
 4033ecc:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4033ed0:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 4033ed4:	a4c5c83a 	sub	r2,r20,r19
 4033ed8:	1000010e 	bge	r2,zero,4033ee0 <alt_up_pixel_buffer_dma_draw_line+0x154>
 4033edc:	0085c83a 	sub	r2,zero,r2
 4033ee0:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 4033ee4:	a804d7fa 	srli	r2,r21,31
 4033ee8:	1545883a 	add	r2,r2,r21
 4033eec:	1005d07a 	srai	r2,r2,1
 4033ef0:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4033ef4:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 4033ef8:	9d00020e 	bge	r19,r20,4033f04 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 4033efc:	04c00044 	movi	r19,1
 4033f00:	00000106 	br	4033f08 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 4033f04:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4033f08:	e0bff307 	ldb	r2,-52(fp)
 4033f0c:	10800058 	cmpnei	r2,r2,1
 4033f10:	1000211e 	bne	r2,zero,4033f98 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 4033f14:	00000f06 	br	4033f54 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4033f18:	e0bff417 	ldw	r2,-48(fp)
 4033f1c:	d8800115 	stw	r2,4(sp)
 4033f20:	e0bff517 	ldw	r2,-44(fp)
 4033f24:	d8800015 	stw	r2,0(sp)
 4033f28:	880f883a 	mov	r7,r17
 4033f2c:	b00d883a 	mov	r6,r22
 4033f30:	e17ff617 	ldw	r5,-40(fp)
 4033f34:	b809883a 	mov	r4,r23
 4033f38:	4033ccc0 	call	4033ccc <helper_plot_pixel>
			error = error + deltay;
 4033f3c:	e0bff717 	ldw	r2,-36(fp)
 4033f40:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4033f44:	0400020e 	bge	zero,r16,4033f50 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 4033f48:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4033f4c:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 4033f50:	8c400044 	addi	r17,r17,1
 4033f54:	947ff00e 	bge	r18,r17,4033f18 <__flash_rwdata_start+0xffffe6c8>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4033f58:	00001006 	br	4033f9c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4033f5c:	e0bff417 	ldw	r2,-48(fp)
 4033f60:	d8800115 	stw	r2,4(sp)
 4033f64:	e0bff517 	ldw	r2,-44(fp)
 4033f68:	d8800015 	stw	r2,0(sp)
 4033f6c:	b00f883a 	mov	r7,r22
 4033f70:	880d883a 	mov	r6,r17
 4033f74:	e17ff617 	ldw	r5,-40(fp)
 4033f78:	b809883a 	mov	r4,r23
 4033f7c:	4033ccc0 	call	4033ccc <helper_plot_pixel>
			error = error + deltay;
 4033f80:	e0bff717 	ldw	r2,-36(fp)
 4033f84:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4033f88:	0400020e 	bge	zero,r16,4033f94 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 4033f8c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4033f90:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4033f94:	8c400044 	addi	r17,r17,1
 4033f98:	947ff00e 	bge	r18,r17,4033f5c <__flash_rwdata_start+0xffffe70c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4033f9c:	0001883a 	nop
 4033fa0:	e6fff804 	addi	sp,fp,-32
 4033fa4:	dfc00917 	ldw	ra,36(sp)
 4033fa8:	df000817 	ldw	fp,32(sp)
 4033fac:	ddc00717 	ldw	r23,28(sp)
 4033fb0:	dd800617 	ldw	r22,24(sp)
 4033fb4:	dd400517 	ldw	r21,20(sp)
 4033fb8:	dd000417 	ldw	r20,16(sp)
 4033fbc:	dcc00317 	ldw	r19,12(sp)
 4033fc0:	dc800217 	ldw	r18,8(sp)
 4033fc4:	dc400117 	ldw	r17,4(sp)
 4033fc8:	dc000017 	ldw	r16,0(sp)
 4033fcc:	dec00a04 	addi	sp,sp,40
 4033fd0:	f800283a 	ret

04033fd4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4033fd4:	defff504 	addi	sp,sp,-44
 4033fd8:	df000a15 	stw	fp,40(sp)
 4033fdc:	df000a04 	addi	fp,sp,40
 4033fe0:	e13ffc15 	stw	r4,-16(fp)
 4033fe4:	e17ffd15 	stw	r5,-12(fp)
 4033fe8:	e1bffe15 	stw	r6,-8(fp)
 4033fec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4033ff0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4033ff4:	d0a02d17 	ldw	r2,-32588(gp)
  
  if (alt_ticks_per_second ())
 4033ff8:	10003c26 	beq	r2,zero,40340ec <alt_alarm_start+0x118>
  {
    if (alarm)
 4033ffc:	e0bffc17 	ldw	r2,-16(fp)
 4034000:	10003826 	beq	r2,zero,40340e4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4034004:	e0bffc17 	ldw	r2,-16(fp)
 4034008:	e0fffe17 	ldw	r3,-8(fp)
 403400c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4034010:	e0bffc17 	ldw	r2,-16(fp)
 4034014:	e0ffff17 	ldw	r3,-4(fp)
 4034018:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 403401c:	0005303a 	rdctl	r2,status
 4034020:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4034024:	e0fff917 	ldw	r3,-28(fp)
 4034028:	00bfff84 	movi	r2,-2
 403402c:	1884703a 	and	r2,r3,r2
 4034030:	1001703a 	wrctl	status,r2
  
  return context;
 4034034:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4034038:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 403403c:	d0a02e17 	ldw	r2,-32584(gp)
      
      current_nticks = alt_nticks();
 4034040:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4034044:	e0fffd17 	ldw	r3,-12(fp)
 4034048:	e0bff617 	ldw	r2,-40(fp)
 403404c:	1885883a 	add	r2,r3,r2
 4034050:	10c00044 	addi	r3,r2,1
 4034054:	e0bffc17 	ldw	r2,-16(fp)
 4034058:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 403405c:	e0bffc17 	ldw	r2,-16(fp)
 4034060:	10c00217 	ldw	r3,8(r2)
 4034064:	e0bff617 	ldw	r2,-40(fp)
 4034068:	1880042e 	bgeu	r3,r2,403407c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 403406c:	e0bffc17 	ldw	r2,-16(fp)
 4034070:	00c00044 	movi	r3,1
 4034074:	10c00405 	stb	r3,16(r2)
 4034078:	00000206 	br	4034084 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 403407c:	e0bffc17 	ldw	r2,-16(fp)
 4034080:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4034084:	e0bffc17 	ldw	r2,-16(fp)
 4034088:	d0e00e04 	addi	r3,gp,-32712
 403408c:	e0fffa15 	stw	r3,-24(fp)
 4034090:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4034094:	e0bffb17 	ldw	r2,-20(fp)
 4034098:	e0fffa17 	ldw	r3,-24(fp)
 403409c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40340a0:	e0bffa17 	ldw	r2,-24(fp)
 40340a4:	10c00017 	ldw	r3,0(r2)
 40340a8:	e0bffb17 	ldw	r2,-20(fp)
 40340ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40340b0:	e0bffa17 	ldw	r2,-24(fp)
 40340b4:	10800017 	ldw	r2,0(r2)
 40340b8:	e0fffb17 	ldw	r3,-20(fp)
 40340bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40340c0:	e0bffa17 	ldw	r2,-24(fp)
 40340c4:	e0fffb17 	ldw	r3,-20(fp)
 40340c8:	10c00015 	stw	r3,0(r2)
 40340cc:	e0bff817 	ldw	r2,-32(fp)
 40340d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40340d4:	e0bff717 	ldw	r2,-36(fp)
 40340d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40340dc:	0005883a 	mov	r2,zero
 40340e0:	00000306 	br	40340f0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40340e4:	00bffa84 	movi	r2,-22
 40340e8:	00000106 	br	40340f0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40340ec:	00bfde84 	movi	r2,-134
  }
}
 40340f0:	e037883a 	mov	sp,fp
 40340f4:	df000017 	ldw	fp,0(sp)
 40340f8:	dec00104 	addi	sp,sp,4
 40340fc:	f800283a 	ret

04034100 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4034100:	defffa04 	addi	sp,sp,-24
 4034104:	dfc00515 	stw	ra,20(sp)
 4034108:	df000415 	stw	fp,16(sp)
 403410c:	df000404 	addi	fp,sp,16
 4034110:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4034114:	00800244 	movi	r2,9
 4034118:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 403411c:	014003f4 	movhi	r5,15
 4034120:	29509004 	addi	r5,r5,16960
 4034124:	e13ffd17 	ldw	r4,-12(fp)
 4034128:	402ac1c0 	call	402ac1c <__mulsi3>
 403412c:	100b883a 	mov	r5,r2
 4034130:	0100bef4 	movhi	r4,763
 4034134:	213c2004 	addi	r4,r4,-3968
 4034138:	402ab600 	call	402ab60 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 403413c:	100b883a 	mov	r5,r2
 4034140:	01200034 	movhi	r4,32768
 4034144:	213fffc4 	addi	r4,r4,-1
 4034148:	402ab600 	call	402ab60 <__udivsi3>
 403414c:	100b883a 	mov	r5,r2
 4034150:	e13fff17 	ldw	r4,-4(fp)
 4034154:	402ab600 	call	402ab60 <__udivsi3>
 4034158:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 403415c:	e0bffe17 	ldw	r2,-8(fp)
 4034160:	10002a26 	beq	r2,zero,403420c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4034164:	e03ffc15 	stw	zero,-16(fp)
 4034168:	00001706 	br	40341c8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 403416c:	00a00034 	movhi	r2,32768
 4034170:	10bfffc4 	addi	r2,r2,-1
 4034174:	10bfffc4 	addi	r2,r2,-1
 4034178:	103ffe1e 	bne	r2,zero,4034174 <__flash_rwdata_start+0xffffe924>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 403417c:	014003f4 	movhi	r5,15
 4034180:	29509004 	addi	r5,r5,16960
 4034184:	e13ffd17 	ldw	r4,-12(fp)
 4034188:	402ac1c0 	call	402ac1c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 403418c:	100b883a 	mov	r5,r2
 4034190:	0100bef4 	movhi	r4,763
 4034194:	213c2004 	addi	r4,r4,-3968
 4034198:	402ab600 	call	402ab60 <__udivsi3>
 403419c:	100b883a 	mov	r5,r2
 40341a0:	01200034 	movhi	r4,32768
 40341a4:	213fffc4 	addi	r4,r4,-1
 40341a8:	402ab600 	call	402ab60 <__udivsi3>
 40341ac:	1007883a 	mov	r3,r2
 40341b0:	e0bfff17 	ldw	r2,-4(fp)
 40341b4:	10c5c83a 	sub	r2,r2,r3
 40341b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40341bc:	e0bffc17 	ldw	r2,-16(fp)
 40341c0:	10800044 	addi	r2,r2,1
 40341c4:	e0bffc15 	stw	r2,-16(fp)
 40341c8:	e0fffc17 	ldw	r3,-16(fp)
 40341cc:	e0bffe17 	ldw	r2,-8(fp)
 40341d0:	18bfe616 	blt	r3,r2,403416c <__flash_rwdata_start+0xffffe91c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40341d4:	014003f4 	movhi	r5,15
 40341d8:	29509004 	addi	r5,r5,16960
 40341dc:	e13ffd17 	ldw	r4,-12(fp)
 40341e0:	402ac1c0 	call	402ac1c <__mulsi3>
 40341e4:	100b883a 	mov	r5,r2
 40341e8:	0100bef4 	movhi	r4,763
 40341ec:	213c2004 	addi	r4,r4,-3968
 40341f0:	402ab600 	call	402ab60 <__udivsi3>
 40341f4:	e17fff17 	ldw	r5,-4(fp)
 40341f8:	1009883a 	mov	r4,r2
 40341fc:	402ac1c0 	call	402ac1c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4034200:	10bfffc4 	addi	r2,r2,-1
 4034204:	103ffe1e 	bne	r2,zero,4034200 <__flash_rwdata_start+0xffffe9b0>
 4034208:	00000d06 	br	4034240 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 403420c:	014003f4 	movhi	r5,15
 4034210:	29509004 	addi	r5,r5,16960
 4034214:	e13ffd17 	ldw	r4,-12(fp)
 4034218:	402ac1c0 	call	402ac1c <__mulsi3>
 403421c:	100b883a 	mov	r5,r2
 4034220:	0100bef4 	movhi	r4,763
 4034224:	213c2004 	addi	r4,r4,-3968
 4034228:	402ab600 	call	402ab60 <__udivsi3>
 403422c:	e17fff17 	ldw	r5,-4(fp)
 4034230:	1009883a 	mov	r4,r2
 4034234:	402ac1c0 	call	402ac1c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4034238:	10bfffc4 	addi	r2,r2,-1
 403423c:	00bffe16 	blt	zero,r2,4034238 <__flash_rwdata_start+0xffffe9e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4034240:	0005883a 	mov	r2,zero
}
 4034244:	e037883a 	mov	sp,fp
 4034248:	dfc00117 	ldw	ra,4(sp)
 403424c:	df000017 	ldw	fp,0(sp)
 4034250:	dec00204 	addi	sp,sp,8
 4034254:	f800283a 	ret

04034258 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4034258:	deffff04 	addi	sp,sp,-4
 403425c:	df000015 	stw	fp,0(sp)
 4034260:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4034264:	0001883a 	nop
 4034268:	e037883a 	mov	sp,fp
 403426c:	df000017 	ldw	fp,0(sp)
 4034270:	dec00104 	addi	sp,sp,4
 4034274:	f800283a 	ret

04034278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4034278:	defffe04 	addi	sp,sp,-8
 403427c:	dfc00115 	stw	ra,4(sp)
 4034280:	df000015 	stw	fp,0(sp)
 4034284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4034288:	d0a00b17 	ldw	r2,-32724(gp)
 403428c:	10000326 	beq	r2,zero,403429c <alt_get_errno+0x24>
 4034290:	d0a00b17 	ldw	r2,-32724(gp)
 4034294:	103ee83a 	callr	r2
 4034298:	00000106 	br	40342a0 <alt_get_errno+0x28>
 403429c:	d0a01b04 	addi	r2,gp,-32660
}
 40342a0:	e037883a 	mov	sp,fp
 40342a4:	dfc00117 	ldw	ra,4(sp)
 40342a8:	df000017 	ldw	fp,0(sp)
 40342ac:	dec00204 	addi	sp,sp,8
 40342b0:	f800283a 	ret

040342b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40342b4:	defffa04 	addi	sp,sp,-24
 40342b8:	dfc00515 	stw	ra,20(sp)
 40342bc:	df000415 	stw	fp,16(sp)
 40342c0:	df000404 	addi	fp,sp,16
 40342c4:	e13ffe15 	stw	r4,-8(fp)
 40342c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40342cc:	e0bffe17 	ldw	r2,-8(fp)
 40342d0:	10000326 	beq	r2,zero,40342e0 <alt_dev_llist_insert+0x2c>
 40342d4:	e0bffe17 	ldw	r2,-8(fp)
 40342d8:	10800217 	ldw	r2,8(r2)
 40342dc:	1000061e 	bne	r2,zero,40342f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40342e0:	40342780 	call	4034278 <alt_get_errno>
 40342e4:	1007883a 	mov	r3,r2
 40342e8:	00800584 	movi	r2,22
 40342ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40342f0:	00bffa84 	movi	r2,-22
 40342f4:	00001306 	br	4034344 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40342f8:	e0bffe17 	ldw	r2,-8(fp)
 40342fc:	e0ffff17 	ldw	r3,-4(fp)
 4034300:	e0fffc15 	stw	r3,-16(fp)
 4034304:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4034308:	e0bffd17 	ldw	r2,-12(fp)
 403430c:	e0fffc17 	ldw	r3,-16(fp)
 4034310:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4034314:	e0bffc17 	ldw	r2,-16(fp)
 4034318:	10c00017 	ldw	r3,0(r2)
 403431c:	e0bffd17 	ldw	r2,-12(fp)
 4034320:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4034324:	e0bffc17 	ldw	r2,-16(fp)
 4034328:	10800017 	ldw	r2,0(r2)
 403432c:	e0fffd17 	ldw	r3,-12(fp)
 4034330:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4034334:	e0bffc17 	ldw	r2,-16(fp)
 4034338:	e0fffd17 	ldw	r3,-12(fp)
 403433c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4034340:	0005883a 	mov	r2,zero
}
 4034344:	e037883a 	mov	sp,fp
 4034348:	dfc00117 	ldw	ra,4(sp)
 403434c:	df000017 	ldw	fp,0(sp)
 4034350:	dec00204 	addi	sp,sp,8
 4034354:	f800283a 	ret

04034358 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4034358:	defffd04 	addi	sp,sp,-12
 403435c:	dfc00215 	stw	ra,8(sp)
 4034360:	df000115 	stw	fp,4(sp)
 4034364:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4034368:	008100f4 	movhi	r2,1027
 403436c:	1094c304 	addi	r2,r2,21260
 4034370:	e0bfff15 	stw	r2,-4(fp)
 4034374:	00000606 	br	4034390 <_do_ctors+0x38>
        (*ctor) (); 
 4034378:	e0bfff17 	ldw	r2,-4(fp)
 403437c:	10800017 	ldw	r2,0(r2)
 4034380:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4034384:	e0bfff17 	ldw	r2,-4(fp)
 4034388:	10bfff04 	addi	r2,r2,-4
 403438c:	e0bfff15 	stw	r2,-4(fp)
 4034390:	e0ffff17 	ldw	r3,-4(fp)
 4034394:	008100f4 	movhi	r2,1027
 4034398:	1094c404 	addi	r2,r2,21264
 403439c:	18bff62e 	bgeu	r3,r2,4034378 <__flash_rwdata_start+0xffffeb28>
        (*ctor) (); 
}
 40343a0:	0001883a 	nop
 40343a4:	e037883a 	mov	sp,fp
 40343a8:	dfc00117 	ldw	ra,4(sp)
 40343ac:	df000017 	ldw	fp,0(sp)
 40343b0:	dec00204 	addi	sp,sp,8
 40343b4:	f800283a 	ret

040343b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40343b8:	defffd04 	addi	sp,sp,-12
 40343bc:	dfc00215 	stw	ra,8(sp)
 40343c0:	df000115 	stw	fp,4(sp)
 40343c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40343c8:	008100f4 	movhi	r2,1027
 40343cc:	1094c304 	addi	r2,r2,21260
 40343d0:	e0bfff15 	stw	r2,-4(fp)
 40343d4:	00000606 	br	40343f0 <_do_dtors+0x38>
        (*dtor) (); 
 40343d8:	e0bfff17 	ldw	r2,-4(fp)
 40343dc:	10800017 	ldw	r2,0(r2)
 40343e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40343e4:	e0bfff17 	ldw	r2,-4(fp)
 40343e8:	10bfff04 	addi	r2,r2,-4
 40343ec:	e0bfff15 	stw	r2,-4(fp)
 40343f0:	e0ffff17 	ldw	r3,-4(fp)
 40343f4:	008100f4 	movhi	r2,1027
 40343f8:	1094c404 	addi	r2,r2,21264
 40343fc:	18bff62e 	bgeu	r3,r2,40343d8 <__flash_rwdata_start+0xffffeb88>
        (*dtor) (); 
}
 4034400:	0001883a 	nop
 4034404:	e037883a 	mov	sp,fp
 4034408:	dfc00117 	ldw	ra,4(sp)
 403440c:	df000017 	ldw	fp,0(sp)
 4034410:	dec00204 	addi	sp,sp,8
 4034414:	f800283a 	ret

04034418 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4034418:	defffa04 	addi	sp,sp,-24
 403441c:	dfc00515 	stw	ra,20(sp)
 4034420:	df000415 	stw	fp,16(sp)
 4034424:	df000404 	addi	fp,sp,16
 4034428:	e13ffe15 	stw	r4,-8(fp)
 403442c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4034430:	e0bfff17 	ldw	r2,-4(fp)
 4034434:	10800017 	ldw	r2,0(r2)
 4034438:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 403443c:	e13ffe17 	ldw	r4,-8(fp)
 4034440:	40206e80 	call	40206e8 <strlen>
 4034444:	10800044 	addi	r2,r2,1
 4034448:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 403444c:	00000d06 	br	4034484 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4034450:	e0bffc17 	ldw	r2,-16(fp)
 4034454:	10800217 	ldw	r2,8(r2)
 4034458:	e0fffd17 	ldw	r3,-12(fp)
 403445c:	180d883a 	mov	r6,r3
 4034460:	e17ffe17 	ldw	r5,-8(fp)
 4034464:	1009883a 	mov	r4,r2
 4034468:	4034fc80 	call	4034fc8 <memcmp>
 403446c:	1000021e 	bne	r2,zero,4034478 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4034470:	e0bffc17 	ldw	r2,-16(fp)
 4034474:	00000706 	br	4034494 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4034478:	e0bffc17 	ldw	r2,-16(fp)
 403447c:	10800017 	ldw	r2,0(r2)
 4034480:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4034484:	e0fffc17 	ldw	r3,-16(fp)
 4034488:	e0bfff17 	ldw	r2,-4(fp)
 403448c:	18bff01e 	bne	r3,r2,4034450 <__flash_rwdata_start+0xffffec00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4034490:	0005883a 	mov	r2,zero
}
 4034494:	e037883a 	mov	sp,fp
 4034498:	dfc00117 	ldw	ra,4(sp)
 403449c:	df000017 	ldw	fp,0(sp)
 40344a0:	dec00204 	addi	sp,sp,8
 40344a4:	f800283a 	ret

040344a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40344a8:	deffff04 	addi	sp,sp,-4
 40344ac:	df000015 	stw	fp,0(sp)
 40344b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40344b4:	0001883a 	nop
 40344b8:	e037883a 	mov	sp,fp
 40344bc:	df000017 	ldw	fp,0(sp)
 40344c0:	dec00104 	addi	sp,sp,4
 40344c4:	f800283a 	ret

040344c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40344c8:	defff904 	addi	sp,sp,-28
 40344cc:	dfc00615 	stw	ra,24(sp)
 40344d0:	df000515 	stw	fp,20(sp)
 40344d4:	df000504 	addi	fp,sp,20
 40344d8:	e13ffc15 	stw	r4,-16(fp)
 40344dc:	e17ffd15 	stw	r5,-12(fp)
 40344e0:	e1bffe15 	stw	r6,-8(fp)
 40344e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40344e8:	e0800217 	ldw	r2,8(fp)
 40344ec:	d8800015 	stw	r2,0(sp)
 40344f0:	e1ffff17 	ldw	r7,-4(fp)
 40344f4:	e1bffe17 	ldw	r6,-8(fp)
 40344f8:	e17ffd17 	ldw	r5,-12(fp)
 40344fc:	e13ffc17 	ldw	r4,-16(fp)
 4034500:	40346780 	call	4034678 <alt_iic_isr_register>
}  
 4034504:	e037883a 	mov	sp,fp
 4034508:	dfc00117 	ldw	ra,4(sp)
 403450c:	df000017 	ldw	fp,0(sp)
 4034510:	dec00204 	addi	sp,sp,8
 4034514:	f800283a 	ret

04034518 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4034518:	defff904 	addi	sp,sp,-28
 403451c:	df000615 	stw	fp,24(sp)
 4034520:	df000604 	addi	fp,sp,24
 4034524:	e13ffe15 	stw	r4,-8(fp)
 4034528:	e17fff15 	stw	r5,-4(fp)
 403452c:	e0bfff17 	ldw	r2,-4(fp)
 4034530:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4034534:	0005303a 	rdctl	r2,status
 4034538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 403453c:	e0fffb17 	ldw	r3,-20(fp)
 4034540:	00bfff84 	movi	r2,-2
 4034544:	1884703a 	and	r2,r3,r2
 4034548:	1001703a 	wrctl	status,r2
  
  return context;
 403454c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4034550:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4034554:	00c00044 	movi	r3,1
 4034558:	e0bffa17 	ldw	r2,-24(fp)
 403455c:	1884983a 	sll	r2,r3,r2
 4034560:	1007883a 	mov	r3,r2
 4034564:	d0a02c17 	ldw	r2,-32592(gp)
 4034568:	1884b03a 	or	r2,r3,r2
 403456c:	d0a02c15 	stw	r2,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4034570:	d0a02c17 	ldw	r2,-32592(gp)
 4034574:	100170fa 	wrctl	ienable,r2
 4034578:	e0bffc17 	ldw	r2,-16(fp)
 403457c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4034580:	e0bffd17 	ldw	r2,-12(fp)
 4034584:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4034588:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 403458c:	0001883a 	nop
}
 4034590:	e037883a 	mov	sp,fp
 4034594:	df000017 	ldw	fp,0(sp)
 4034598:	dec00104 	addi	sp,sp,4
 403459c:	f800283a 	ret

040345a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40345a0:	defff904 	addi	sp,sp,-28
 40345a4:	df000615 	stw	fp,24(sp)
 40345a8:	df000604 	addi	fp,sp,24
 40345ac:	e13ffe15 	stw	r4,-8(fp)
 40345b0:	e17fff15 	stw	r5,-4(fp)
 40345b4:	e0bfff17 	ldw	r2,-4(fp)
 40345b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40345bc:	0005303a 	rdctl	r2,status
 40345c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40345c4:	e0fffb17 	ldw	r3,-20(fp)
 40345c8:	00bfff84 	movi	r2,-2
 40345cc:	1884703a 	and	r2,r3,r2
 40345d0:	1001703a 	wrctl	status,r2
  
  return context;
 40345d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40345d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40345dc:	00c00044 	movi	r3,1
 40345e0:	e0bffa17 	ldw	r2,-24(fp)
 40345e4:	1884983a 	sll	r2,r3,r2
 40345e8:	0084303a 	nor	r2,zero,r2
 40345ec:	1007883a 	mov	r3,r2
 40345f0:	d0a02c17 	ldw	r2,-32592(gp)
 40345f4:	1884703a 	and	r2,r3,r2
 40345f8:	d0a02c15 	stw	r2,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40345fc:	d0a02c17 	ldw	r2,-32592(gp)
 4034600:	100170fa 	wrctl	ienable,r2
 4034604:	e0bffc17 	ldw	r2,-16(fp)
 4034608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 403460c:	e0bffd17 	ldw	r2,-12(fp)
 4034610:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4034614:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4034618:	0001883a 	nop
}
 403461c:	e037883a 	mov	sp,fp
 4034620:	df000017 	ldw	fp,0(sp)
 4034624:	dec00104 	addi	sp,sp,4
 4034628:	f800283a 	ret

0403462c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 403462c:	defffc04 	addi	sp,sp,-16
 4034630:	df000315 	stw	fp,12(sp)
 4034634:	df000304 	addi	fp,sp,12
 4034638:	e13ffe15 	stw	r4,-8(fp)
 403463c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4034640:	000530fa 	rdctl	r2,ienable
 4034644:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4034648:	00c00044 	movi	r3,1
 403464c:	e0bfff17 	ldw	r2,-4(fp)
 4034650:	1884983a 	sll	r2,r3,r2
 4034654:	1007883a 	mov	r3,r2
 4034658:	e0bffd17 	ldw	r2,-12(fp)
 403465c:	1884703a 	and	r2,r3,r2
 4034660:	1004c03a 	cmpne	r2,r2,zero
 4034664:	10803fcc 	andi	r2,r2,255
}
 4034668:	e037883a 	mov	sp,fp
 403466c:	df000017 	ldw	fp,0(sp)
 4034670:	dec00104 	addi	sp,sp,4
 4034674:	f800283a 	ret

04034678 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4034678:	defff504 	addi	sp,sp,-44
 403467c:	dfc00a15 	stw	ra,40(sp)
 4034680:	df000915 	stw	fp,36(sp)
 4034684:	df000904 	addi	fp,sp,36
 4034688:	e13ffc15 	stw	r4,-16(fp)
 403468c:	e17ffd15 	stw	r5,-12(fp)
 4034690:	e1bffe15 	stw	r6,-8(fp)
 4034694:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4034698:	00bffa84 	movi	r2,-22
 403469c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40346a0:	e0bffd17 	ldw	r2,-12(fp)
 40346a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40346a8:	e0bff817 	ldw	r2,-32(fp)
 40346ac:	10800808 	cmpgei	r2,r2,32
 40346b0:	1000271e 	bne	r2,zero,4034750 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40346b4:	0005303a 	rdctl	r2,status
 40346b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40346bc:	e0fffb17 	ldw	r3,-20(fp)
 40346c0:	00bfff84 	movi	r2,-2
 40346c4:	1884703a 	and	r2,r3,r2
 40346c8:	1001703a 	wrctl	status,r2
  
  return context;
 40346cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40346d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40346d4:	00800034 	movhi	r2,0
 40346d8:	1089af04 	addi	r2,r2,9916
 40346dc:	e0fff817 	ldw	r3,-32(fp)
 40346e0:	180690fa 	slli	r3,r3,3
 40346e4:	10c5883a 	add	r2,r2,r3
 40346e8:	e0fffe17 	ldw	r3,-8(fp)
 40346ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40346f0:	00800034 	movhi	r2,0
 40346f4:	1089af04 	addi	r2,r2,9916
 40346f8:	e0fff817 	ldw	r3,-32(fp)
 40346fc:	180690fa 	slli	r3,r3,3
 4034700:	10c5883a 	add	r2,r2,r3
 4034704:	10800104 	addi	r2,r2,4
 4034708:	e0ffff17 	ldw	r3,-4(fp)
 403470c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4034710:	e0bffe17 	ldw	r2,-8(fp)
 4034714:	10000526 	beq	r2,zero,403472c <alt_iic_isr_register+0xb4>
 4034718:	e0bff817 	ldw	r2,-32(fp)
 403471c:	100b883a 	mov	r5,r2
 4034720:	e13ffc17 	ldw	r4,-16(fp)
 4034724:	40345180 	call	4034518 <alt_ic_irq_enable>
 4034728:	00000406 	br	403473c <alt_iic_isr_register+0xc4>
 403472c:	e0bff817 	ldw	r2,-32(fp)
 4034730:	100b883a 	mov	r5,r2
 4034734:	e13ffc17 	ldw	r4,-16(fp)
 4034738:	40345a00 	call	40345a0 <alt_ic_irq_disable>
 403473c:	e0bff715 	stw	r2,-36(fp)
 4034740:	e0bffa17 	ldw	r2,-24(fp)
 4034744:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4034748:	e0bff917 	ldw	r2,-28(fp)
 403474c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4034750:	e0bff717 	ldw	r2,-36(fp)
}
 4034754:	e037883a 	mov	sp,fp
 4034758:	dfc00117 	ldw	ra,4(sp)
 403475c:	df000017 	ldw	fp,0(sp)
 4034760:	dec00204 	addi	sp,sp,8
 4034764:	f800283a 	ret

04034768 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4034768:	defff804 	addi	sp,sp,-32
 403476c:	dfc00715 	stw	ra,28(sp)
 4034770:	df000615 	stw	fp,24(sp)
 4034774:	dc000515 	stw	r16,20(sp)
 4034778:	df000604 	addi	fp,sp,24
 403477c:	e13ffb15 	stw	r4,-20(fp)
 4034780:	e17ffc15 	stw	r5,-16(fp)
 4034784:	e1bffd15 	stw	r6,-12(fp)
 4034788:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 403478c:	e1bffe17 	ldw	r6,-8(fp)
 4034790:	e17ffd17 	ldw	r5,-12(fp)
 4034794:	e13ffc17 	ldw	r4,-16(fp)
 4034798:	40349f00 	call	40349f0 <open>
 403479c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40347a0:	e0bffa17 	ldw	r2,-24(fp)
 40347a4:	10002216 	blt	r2,zero,4034830 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40347a8:	04000034 	movhi	r16,0
 40347ac:	84038304 	addi	r16,r16,3596
 40347b0:	e0bffa17 	ldw	r2,-24(fp)
 40347b4:	01400304 	movi	r5,12
 40347b8:	1009883a 	mov	r4,r2
 40347bc:	402ac1c0 	call	402ac1c <__mulsi3>
 40347c0:	8085883a 	add	r2,r16,r2
 40347c4:	10c00017 	ldw	r3,0(r2)
 40347c8:	e0bffb17 	ldw	r2,-20(fp)
 40347cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40347d0:	04000034 	movhi	r16,0
 40347d4:	84038304 	addi	r16,r16,3596
 40347d8:	e0bffa17 	ldw	r2,-24(fp)
 40347dc:	01400304 	movi	r5,12
 40347e0:	1009883a 	mov	r4,r2
 40347e4:	402ac1c0 	call	402ac1c <__mulsi3>
 40347e8:	8085883a 	add	r2,r16,r2
 40347ec:	10800104 	addi	r2,r2,4
 40347f0:	10c00017 	ldw	r3,0(r2)
 40347f4:	e0bffb17 	ldw	r2,-20(fp)
 40347f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40347fc:	04000034 	movhi	r16,0
 4034800:	84038304 	addi	r16,r16,3596
 4034804:	e0bffa17 	ldw	r2,-24(fp)
 4034808:	01400304 	movi	r5,12
 403480c:	1009883a 	mov	r4,r2
 4034810:	402ac1c0 	call	402ac1c <__mulsi3>
 4034814:	8085883a 	add	r2,r16,r2
 4034818:	10800204 	addi	r2,r2,8
 403481c:	10c00017 	ldw	r3,0(r2)
 4034820:	e0bffb17 	ldw	r2,-20(fp)
 4034824:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4034828:	e13ffa17 	ldw	r4,-24(fp)
 403482c:	402dc0c0 	call	402dc0c <alt_release_fd>
  }
} 
 4034830:	0001883a 	nop
 4034834:	e6ffff04 	addi	sp,fp,-4
 4034838:	dfc00217 	ldw	ra,8(sp)
 403483c:	df000117 	ldw	fp,4(sp)
 4034840:	dc000017 	ldw	r16,0(sp)
 4034844:	dec00304 	addi	sp,sp,12
 4034848:	f800283a 	ret

0403484c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 403484c:	defffb04 	addi	sp,sp,-20
 4034850:	dfc00415 	stw	ra,16(sp)
 4034854:	df000315 	stw	fp,12(sp)
 4034858:	df000304 	addi	fp,sp,12
 403485c:	e13ffd15 	stw	r4,-12(fp)
 4034860:	e17ffe15 	stw	r5,-8(fp)
 4034864:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4034868:	01c07fc4 	movi	r7,511
 403486c:	01800044 	movi	r6,1
 4034870:	e17ffd17 	ldw	r5,-12(fp)
 4034874:	01000034 	movhi	r4,0
 4034878:	21038604 	addi	r4,r4,3608
 403487c:	40347680 	call	4034768 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4034880:	01c07fc4 	movi	r7,511
 4034884:	000d883a 	mov	r6,zero
 4034888:	e17ffe17 	ldw	r5,-8(fp)
 403488c:	01000034 	movhi	r4,0
 4034890:	21038304 	addi	r4,r4,3596
 4034894:	40347680 	call	4034768 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4034898:	01c07fc4 	movi	r7,511
 403489c:	01800044 	movi	r6,1
 40348a0:	e17fff17 	ldw	r5,-4(fp)
 40348a4:	01000034 	movhi	r4,0
 40348a8:	21038904 	addi	r4,r4,3620
 40348ac:	40347680 	call	4034768 <alt_open_fd>
}  
 40348b0:	0001883a 	nop
 40348b4:	e037883a 	mov	sp,fp
 40348b8:	dfc00117 	ldw	ra,4(sp)
 40348bc:	df000017 	ldw	fp,0(sp)
 40348c0:	dec00204 	addi	sp,sp,8
 40348c4:	f800283a 	ret

040348c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40348c8:	defffe04 	addi	sp,sp,-8
 40348cc:	dfc00115 	stw	ra,4(sp)
 40348d0:	df000015 	stw	fp,0(sp)
 40348d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40348d8:	d0a00b17 	ldw	r2,-32724(gp)
 40348dc:	10000326 	beq	r2,zero,40348ec <alt_get_errno+0x24>
 40348e0:	d0a00b17 	ldw	r2,-32724(gp)
 40348e4:	103ee83a 	callr	r2
 40348e8:	00000106 	br	40348f0 <alt_get_errno+0x28>
 40348ec:	d0a01b04 	addi	r2,gp,-32660
}
 40348f0:	e037883a 	mov	sp,fp
 40348f4:	dfc00117 	ldw	ra,4(sp)
 40348f8:	df000017 	ldw	fp,0(sp)
 40348fc:	dec00204 	addi	sp,sp,8
 4034900:	f800283a 	ret

04034904 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4034904:	defffb04 	addi	sp,sp,-20
 4034908:	dfc00415 	stw	ra,16(sp)
 403490c:	df000315 	stw	fp,12(sp)
 4034910:	dc000215 	stw	r16,8(sp)
 4034914:	df000304 	addi	fp,sp,12
 4034918:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 403491c:	e0bffe17 	ldw	r2,-8(fp)
 4034920:	10800217 	ldw	r2,8(r2)
 4034924:	10d00034 	orhi	r3,r2,16384
 4034928:	e0bffe17 	ldw	r2,-8(fp)
 403492c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4034930:	e03ffd15 	stw	zero,-12(fp)
 4034934:	00002306 	br	40349c4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4034938:	04000034 	movhi	r16,0
 403493c:	84038304 	addi	r16,r16,3596
 4034940:	e0bffd17 	ldw	r2,-12(fp)
 4034944:	01400304 	movi	r5,12
 4034948:	1009883a 	mov	r4,r2
 403494c:	402ac1c0 	call	402ac1c <__mulsi3>
 4034950:	8085883a 	add	r2,r16,r2
 4034954:	10c00017 	ldw	r3,0(r2)
 4034958:	e0bffe17 	ldw	r2,-8(fp)
 403495c:	10800017 	ldw	r2,0(r2)
 4034960:	1880151e 	bne	r3,r2,40349b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4034964:	04000034 	movhi	r16,0
 4034968:	84038304 	addi	r16,r16,3596
 403496c:	e0bffd17 	ldw	r2,-12(fp)
 4034970:	01400304 	movi	r5,12
 4034974:	1009883a 	mov	r4,r2
 4034978:	402ac1c0 	call	402ac1c <__mulsi3>
 403497c:	8085883a 	add	r2,r16,r2
 4034980:	10800204 	addi	r2,r2,8
 4034984:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4034988:	10000b0e 	bge	r2,zero,40349b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 403498c:	01400304 	movi	r5,12
 4034990:	e13ffd17 	ldw	r4,-12(fp)
 4034994:	402ac1c0 	call	402ac1c <__mulsi3>
 4034998:	1007883a 	mov	r3,r2
 403499c:	00800034 	movhi	r2,0
 40349a0:	10838304 	addi	r2,r2,3596
 40349a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40349a8:	e0bffe17 	ldw	r2,-8(fp)
 40349ac:	18800226 	beq	r3,r2,40349b8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40349b0:	00bffcc4 	movi	r2,-13
 40349b4:	00000806 	br	40349d8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40349b8:	e0bffd17 	ldw	r2,-12(fp)
 40349bc:	10800044 	addi	r2,r2,1
 40349c0:	e0bffd15 	stw	r2,-12(fp)
 40349c4:	d0a00a17 	ldw	r2,-32728(gp)
 40349c8:	1007883a 	mov	r3,r2
 40349cc:	e0bffd17 	ldw	r2,-12(fp)
 40349d0:	18bfd92e 	bgeu	r3,r2,4034938 <__flash_rwdata_start+0xfffff0e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40349d4:	0005883a 	mov	r2,zero
}
 40349d8:	e6ffff04 	addi	sp,fp,-4
 40349dc:	dfc00217 	ldw	ra,8(sp)
 40349e0:	df000117 	ldw	fp,4(sp)
 40349e4:	dc000017 	ldw	r16,0(sp)
 40349e8:	dec00304 	addi	sp,sp,12
 40349ec:	f800283a 	ret

040349f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40349f0:	defff604 	addi	sp,sp,-40
 40349f4:	dfc00915 	stw	ra,36(sp)
 40349f8:	df000815 	stw	fp,32(sp)
 40349fc:	df000804 	addi	fp,sp,32
 4034a00:	e13ffd15 	stw	r4,-12(fp)
 4034a04:	e17ffe15 	stw	r5,-8(fp)
 4034a08:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4034a0c:	00bfffc4 	movi	r2,-1
 4034a10:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4034a14:	00bffb44 	movi	r2,-19
 4034a18:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4034a1c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4034a20:	d1600804 	addi	r5,gp,-32736
 4034a24:	e13ffd17 	ldw	r4,-12(fp)
 4034a28:	40344180 	call	4034418 <alt_find_dev>
 4034a2c:	e0bff815 	stw	r2,-32(fp)
 4034a30:	e0bff817 	ldw	r2,-32(fp)
 4034a34:	1000051e 	bne	r2,zero,4034a4c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4034a38:	e13ffd17 	ldw	r4,-12(fp)
 4034a3c:	4034d140 	call	4034d14 <alt_find_file>
 4034a40:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4034a44:	00800044 	movi	r2,1
 4034a48:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4034a4c:	e0bff817 	ldw	r2,-32(fp)
 4034a50:	10002b26 	beq	r2,zero,4034b00 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4034a54:	e13ff817 	ldw	r4,-32(fp)
 4034a58:	4034e1c0 	call	4034e1c <alt_get_fd>
 4034a5c:	e0bff915 	stw	r2,-28(fp)
 4034a60:	e0bff917 	ldw	r2,-28(fp)
 4034a64:	1000030e 	bge	r2,zero,4034a74 <open+0x84>
    {
      status = index;
 4034a68:	e0bff917 	ldw	r2,-28(fp)
 4034a6c:	e0bffa15 	stw	r2,-24(fp)
 4034a70:	00002506 	br	4034b08 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4034a74:	01400304 	movi	r5,12
 4034a78:	e13ff917 	ldw	r4,-28(fp)
 4034a7c:	402ac1c0 	call	402ac1c <__mulsi3>
 4034a80:	1007883a 	mov	r3,r2
 4034a84:	00800034 	movhi	r2,0
 4034a88:	10838304 	addi	r2,r2,3596
 4034a8c:	1885883a 	add	r2,r3,r2
 4034a90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4034a94:	e0fffe17 	ldw	r3,-8(fp)
 4034a98:	00900034 	movhi	r2,16384
 4034a9c:	10bfffc4 	addi	r2,r2,-1
 4034aa0:	1886703a 	and	r3,r3,r2
 4034aa4:	e0bffc17 	ldw	r2,-16(fp)
 4034aa8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4034aac:	e0bffb17 	ldw	r2,-20(fp)
 4034ab0:	1000051e 	bne	r2,zero,4034ac8 <open+0xd8>
 4034ab4:	e13ffc17 	ldw	r4,-16(fp)
 4034ab8:	40349040 	call	4034904 <alt_file_locked>
 4034abc:	e0bffa15 	stw	r2,-24(fp)
 4034ac0:	e0bffa17 	ldw	r2,-24(fp)
 4034ac4:	10001016 	blt	r2,zero,4034b08 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4034ac8:	e0bff817 	ldw	r2,-32(fp)
 4034acc:	10800317 	ldw	r2,12(r2)
 4034ad0:	10000826 	beq	r2,zero,4034af4 <open+0x104>
 4034ad4:	e0bff817 	ldw	r2,-32(fp)
 4034ad8:	10800317 	ldw	r2,12(r2)
 4034adc:	e1ffff17 	ldw	r7,-4(fp)
 4034ae0:	e1bffe17 	ldw	r6,-8(fp)
 4034ae4:	e17ffd17 	ldw	r5,-12(fp)
 4034ae8:	e13ffc17 	ldw	r4,-16(fp)
 4034aec:	103ee83a 	callr	r2
 4034af0:	00000106 	br	4034af8 <open+0x108>
 4034af4:	0005883a 	mov	r2,zero
 4034af8:	e0bffa15 	stw	r2,-24(fp)
 4034afc:	00000206 	br	4034b08 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4034b00:	00bffb44 	movi	r2,-19
 4034b04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4034b08:	e0bffa17 	ldw	r2,-24(fp)
 4034b0c:	1000090e 	bge	r2,zero,4034b34 <open+0x144>
  {
    alt_release_fd (index);  
 4034b10:	e13ff917 	ldw	r4,-28(fp)
 4034b14:	402dc0c0 	call	402dc0c <alt_release_fd>
    ALT_ERRNO = -status;
 4034b18:	40348c80 	call	40348c8 <alt_get_errno>
 4034b1c:	1007883a 	mov	r3,r2
 4034b20:	e0bffa17 	ldw	r2,-24(fp)
 4034b24:	0085c83a 	sub	r2,zero,r2
 4034b28:	18800015 	stw	r2,0(r3)
    return -1;
 4034b2c:	00bfffc4 	movi	r2,-1
 4034b30:	00000106 	br	4034b38 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4034b34:	e0bff917 	ldw	r2,-28(fp)
}
 4034b38:	e037883a 	mov	sp,fp
 4034b3c:	dfc00117 	ldw	ra,4(sp)
 4034b40:	df000017 	ldw	fp,0(sp)
 4034b44:	dec00204 	addi	sp,sp,8
 4034b48:	f800283a 	ret

04034b4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4034b4c:	defffa04 	addi	sp,sp,-24
 4034b50:	df000515 	stw	fp,20(sp)
 4034b54:	df000504 	addi	fp,sp,20
 4034b58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4034b5c:	0005303a 	rdctl	r2,status
 4034b60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4034b64:	e0fffc17 	ldw	r3,-16(fp)
 4034b68:	00bfff84 	movi	r2,-2
 4034b6c:	1884703a 	and	r2,r3,r2
 4034b70:	1001703a 	wrctl	status,r2
  
  return context;
 4034b74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4034b78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4034b7c:	e0bfff17 	ldw	r2,-4(fp)
 4034b80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4034b84:	e0bffd17 	ldw	r2,-12(fp)
 4034b88:	10800017 	ldw	r2,0(r2)
 4034b8c:	e0fffd17 	ldw	r3,-12(fp)
 4034b90:	18c00117 	ldw	r3,4(r3)
 4034b94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4034b98:	e0bffd17 	ldw	r2,-12(fp)
 4034b9c:	10800117 	ldw	r2,4(r2)
 4034ba0:	e0fffd17 	ldw	r3,-12(fp)
 4034ba4:	18c00017 	ldw	r3,0(r3)
 4034ba8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4034bac:	e0bffd17 	ldw	r2,-12(fp)
 4034bb0:	e0fffd17 	ldw	r3,-12(fp)
 4034bb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4034bb8:	e0bffd17 	ldw	r2,-12(fp)
 4034bbc:	e0fffd17 	ldw	r3,-12(fp)
 4034bc0:	10c00015 	stw	r3,0(r2)
 4034bc4:	e0bffb17 	ldw	r2,-20(fp)
 4034bc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4034bcc:	e0bffe17 	ldw	r2,-8(fp)
 4034bd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4034bd4:	0001883a 	nop
 4034bd8:	e037883a 	mov	sp,fp
 4034bdc:	df000017 	ldw	fp,0(sp)
 4034be0:	dec00104 	addi	sp,sp,4
 4034be4:	f800283a 	ret

04034be8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4034be8:	defffb04 	addi	sp,sp,-20
 4034bec:	dfc00415 	stw	ra,16(sp)
 4034bf0:	df000315 	stw	fp,12(sp)
 4034bf4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4034bf8:	d0a00e17 	ldw	r2,-32712(gp)
 4034bfc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4034c00:	d0a02e17 	ldw	r2,-32584(gp)
 4034c04:	10800044 	addi	r2,r2,1
 4034c08:	d0a02e15 	stw	r2,-32584(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4034c0c:	00002e06 	br	4034cc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4034c10:	e0bffd17 	ldw	r2,-12(fp)
 4034c14:	10800017 	ldw	r2,0(r2)
 4034c18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4034c1c:	e0bffd17 	ldw	r2,-12(fp)
 4034c20:	10800403 	ldbu	r2,16(r2)
 4034c24:	10803fcc 	andi	r2,r2,255
 4034c28:	10000426 	beq	r2,zero,4034c3c <alt_tick+0x54>
 4034c2c:	d0a02e17 	ldw	r2,-32584(gp)
 4034c30:	1000021e 	bne	r2,zero,4034c3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4034c34:	e0bffd17 	ldw	r2,-12(fp)
 4034c38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4034c3c:	e0bffd17 	ldw	r2,-12(fp)
 4034c40:	10800217 	ldw	r2,8(r2)
 4034c44:	d0e02e17 	ldw	r3,-32584(gp)
 4034c48:	18801d36 	bltu	r3,r2,4034cc0 <alt_tick+0xd8>
 4034c4c:	e0bffd17 	ldw	r2,-12(fp)
 4034c50:	10800403 	ldbu	r2,16(r2)
 4034c54:	10803fcc 	andi	r2,r2,255
 4034c58:	1000191e 	bne	r2,zero,4034cc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4034c5c:	e0bffd17 	ldw	r2,-12(fp)
 4034c60:	10800317 	ldw	r2,12(r2)
 4034c64:	e0fffd17 	ldw	r3,-12(fp)
 4034c68:	18c00517 	ldw	r3,20(r3)
 4034c6c:	1809883a 	mov	r4,r3
 4034c70:	103ee83a 	callr	r2
 4034c74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4034c78:	e0bfff17 	ldw	r2,-4(fp)
 4034c7c:	1000031e 	bne	r2,zero,4034c8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4034c80:	e13ffd17 	ldw	r4,-12(fp)
 4034c84:	4034b4c0 	call	4034b4c <alt_alarm_stop>
 4034c88:	00000d06 	br	4034cc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4034c8c:	e0bffd17 	ldw	r2,-12(fp)
 4034c90:	10c00217 	ldw	r3,8(r2)
 4034c94:	e0bfff17 	ldw	r2,-4(fp)
 4034c98:	1887883a 	add	r3,r3,r2
 4034c9c:	e0bffd17 	ldw	r2,-12(fp)
 4034ca0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4034ca4:	e0bffd17 	ldw	r2,-12(fp)
 4034ca8:	10c00217 	ldw	r3,8(r2)
 4034cac:	d0a02e17 	ldw	r2,-32584(gp)
 4034cb0:	1880032e 	bgeu	r3,r2,4034cc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4034cb4:	e0bffd17 	ldw	r2,-12(fp)
 4034cb8:	00c00044 	movi	r3,1
 4034cbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4034cc0:	e0bffe17 	ldw	r2,-8(fp)
 4034cc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4034cc8:	e0fffd17 	ldw	r3,-12(fp)
 4034ccc:	d0a00e04 	addi	r2,gp,-32712
 4034cd0:	18bfcf1e 	bne	r3,r2,4034c10 <__flash_rwdata_start+0xfffff3c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4034cd4:	0001883a 	nop
}
 4034cd8:	0001883a 	nop
 4034cdc:	e037883a 	mov	sp,fp
 4034ce0:	dfc00117 	ldw	ra,4(sp)
 4034ce4:	df000017 	ldw	fp,0(sp)
 4034ce8:	dec00204 	addi	sp,sp,8
 4034cec:	f800283a 	ret

04034cf0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4034cf0:	deffff04 	addi	sp,sp,-4
 4034cf4:	df000015 	stw	fp,0(sp)
 4034cf8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4034cfc:	000170fa 	wrctl	ienable,zero
}
 4034d00:	0001883a 	nop
 4034d04:	e037883a 	mov	sp,fp
 4034d08:	df000017 	ldw	fp,0(sp)
 4034d0c:	dec00104 	addi	sp,sp,4
 4034d10:	f800283a 	ret

04034d14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4034d14:	defffb04 	addi	sp,sp,-20
 4034d18:	dfc00415 	stw	ra,16(sp)
 4034d1c:	df000315 	stw	fp,12(sp)
 4034d20:	df000304 	addi	fp,sp,12
 4034d24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4034d28:	d0a00617 	ldw	r2,-32744(gp)
 4034d2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4034d30:	00003106 	br	4034df8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4034d34:	e0bffd17 	ldw	r2,-12(fp)
 4034d38:	10800217 	ldw	r2,8(r2)
 4034d3c:	1009883a 	mov	r4,r2
 4034d40:	40206e80 	call	40206e8 <strlen>
 4034d44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4034d48:	e0bffd17 	ldw	r2,-12(fp)
 4034d4c:	10c00217 	ldw	r3,8(r2)
 4034d50:	e0bffe17 	ldw	r2,-8(fp)
 4034d54:	10bfffc4 	addi	r2,r2,-1
 4034d58:	1885883a 	add	r2,r3,r2
 4034d5c:	10800003 	ldbu	r2,0(r2)
 4034d60:	10803fcc 	andi	r2,r2,255
 4034d64:	1080201c 	xori	r2,r2,128
 4034d68:	10bfe004 	addi	r2,r2,-128
 4034d6c:	10800bd8 	cmpnei	r2,r2,47
 4034d70:	1000031e 	bne	r2,zero,4034d80 <alt_find_file+0x6c>
    {
      len -= 1;
 4034d74:	e0bffe17 	ldw	r2,-8(fp)
 4034d78:	10bfffc4 	addi	r2,r2,-1
 4034d7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4034d80:	e0bffe17 	ldw	r2,-8(fp)
 4034d84:	e0ffff17 	ldw	r3,-4(fp)
 4034d88:	1885883a 	add	r2,r3,r2
 4034d8c:	10800003 	ldbu	r2,0(r2)
 4034d90:	10803fcc 	andi	r2,r2,255
 4034d94:	1080201c 	xori	r2,r2,128
 4034d98:	10bfe004 	addi	r2,r2,-128
 4034d9c:	10800be0 	cmpeqi	r2,r2,47
 4034da0:	1000081e 	bne	r2,zero,4034dc4 <alt_find_file+0xb0>
 4034da4:	e0bffe17 	ldw	r2,-8(fp)
 4034da8:	e0ffff17 	ldw	r3,-4(fp)
 4034dac:	1885883a 	add	r2,r3,r2
 4034db0:	10800003 	ldbu	r2,0(r2)
 4034db4:	10803fcc 	andi	r2,r2,255
 4034db8:	1080201c 	xori	r2,r2,128
 4034dbc:	10bfe004 	addi	r2,r2,-128
 4034dc0:	10000a1e 	bne	r2,zero,4034dec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4034dc4:	e0bffd17 	ldw	r2,-12(fp)
 4034dc8:	10800217 	ldw	r2,8(r2)
 4034dcc:	e0fffe17 	ldw	r3,-8(fp)
 4034dd0:	180d883a 	mov	r6,r3
 4034dd4:	e17fff17 	ldw	r5,-4(fp)
 4034dd8:	1009883a 	mov	r4,r2
 4034ddc:	4034fc80 	call	4034fc8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4034de0:	1000021e 	bne	r2,zero,4034dec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4034de4:	e0bffd17 	ldw	r2,-12(fp)
 4034de8:	00000706 	br	4034e08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4034dec:	e0bffd17 	ldw	r2,-12(fp)
 4034df0:	10800017 	ldw	r2,0(r2)
 4034df4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4034df8:	e0fffd17 	ldw	r3,-12(fp)
 4034dfc:	d0a00604 	addi	r2,gp,-32744
 4034e00:	18bfcc1e 	bne	r3,r2,4034d34 <__flash_rwdata_start+0xfffff4e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4034e04:	0005883a 	mov	r2,zero
}
 4034e08:	e037883a 	mov	sp,fp
 4034e0c:	dfc00117 	ldw	ra,4(sp)
 4034e10:	df000017 	ldw	fp,0(sp)
 4034e14:	dec00204 	addi	sp,sp,8
 4034e18:	f800283a 	ret

04034e1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4034e1c:	defffa04 	addi	sp,sp,-24
 4034e20:	dfc00515 	stw	ra,20(sp)
 4034e24:	df000415 	stw	fp,16(sp)
 4034e28:	dc000315 	stw	r16,12(sp)
 4034e2c:	df000404 	addi	fp,sp,16
 4034e30:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4034e34:	00bffa04 	movi	r2,-24
 4034e38:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4034e3c:	e03ffc15 	stw	zero,-16(fp)
 4034e40:	00001d06 	br	4034eb8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4034e44:	04000034 	movhi	r16,0
 4034e48:	84038304 	addi	r16,r16,3596
 4034e4c:	e0bffc17 	ldw	r2,-16(fp)
 4034e50:	01400304 	movi	r5,12
 4034e54:	1009883a 	mov	r4,r2
 4034e58:	402ac1c0 	call	402ac1c <__mulsi3>
 4034e5c:	8085883a 	add	r2,r16,r2
 4034e60:	10800017 	ldw	r2,0(r2)
 4034e64:	1000111e 	bne	r2,zero,4034eac <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4034e68:	04000034 	movhi	r16,0
 4034e6c:	84038304 	addi	r16,r16,3596
 4034e70:	e0bffc17 	ldw	r2,-16(fp)
 4034e74:	01400304 	movi	r5,12
 4034e78:	1009883a 	mov	r4,r2
 4034e7c:	402ac1c0 	call	402ac1c <__mulsi3>
 4034e80:	8085883a 	add	r2,r16,r2
 4034e84:	e0fffe17 	ldw	r3,-8(fp)
 4034e88:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4034e8c:	d0e00a17 	ldw	r3,-32728(gp)
 4034e90:	e0bffc17 	ldw	r2,-16(fp)
 4034e94:	1880020e 	bge	r3,r2,4034ea0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4034e98:	e0bffc17 	ldw	r2,-16(fp)
 4034e9c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4034ea0:	e0bffc17 	ldw	r2,-16(fp)
 4034ea4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4034ea8:	00000606 	br	4034ec4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4034eac:	e0bffc17 	ldw	r2,-16(fp)
 4034eb0:	10800044 	addi	r2,r2,1
 4034eb4:	e0bffc15 	stw	r2,-16(fp)
 4034eb8:	e0bffc17 	ldw	r2,-16(fp)
 4034ebc:	10800810 	cmplti	r2,r2,32
 4034ec0:	103fe01e 	bne	r2,zero,4034e44 <__flash_rwdata_start+0xfffff5f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4034ec4:	e0bffd17 	ldw	r2,-12(fp)
}
 4034ec8:	e6ffff04 	addi	sp,fp,-4
 4034ecc:	dfc00217 	ldw	ra,8(sp)
 4034ed0:	df000117 	ldw	fp,4(sp)
 4034ed4:	dc000017 	ldw	r16,0(sp)
 4034ed8:	dec00304 	addi	sp,sp,12
 4034edc:	f800283a 	ret

04034ee0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4034ee0:	defffe04 	addi	sp,sp,-8
 4034ee4:	df000115 	stw	fp,4(sp)
 4034ee8:	df000104 	addi	fp,sp,4
 4034eec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4034ef0:	e0bfff17 	ldw	r2,-4(fp)
 4034ef4:	10bffe84 	addi	r2,r2,-6
 4034ef8:	10c00428 	cmpgeui	r3,r2,16
 4034efc:	18001a1e 	bne	r3,zero,4034f68 <alt_exception_cause_generated_bad_addr+0x88>
 4034f00:	100690ba 	slli	r3,r2,2
 4034f04:	008100f4 	movhi	r2,1027
 4034f08:	1093c604 	addi	r2,r2,20248
 4034f0c:	1885883a 	add	r2,r3,r2
 4034f10:	10800017 	ldw	r2,0(r2)
 4034f14:	1000683a 	jmp	r2
 4034f18:	04034f58 	cmpnei	r16,zero,3389
 4034f1c:	04034f58 	cmpnei	r16,zero,3389
 4034f20:	04034f68 	cmpgeui	r16,zero,3389
 4034f24:	04034f68 	cmpgeui	r16,zero,3389
 4034f28:	04034f68 	cmpgeui	r16,zero,3389
 4034f2c:	04034f58 	cmpnei	r16,zero,3389
 4034f30:	04034f60 	cmpeqi	r16,zero,3389
 4034f34:	04034f68 	cmpgeui	r16,zero,3389
 4034f38:	04034f58 	cmpnei	r16,zero,3389
 4034f3c:	04034f58 	cmpnei	r16,zero,3389
 4034f40:	04034f68 	cmpgeui	r16,zero,3389
 4034f44:	04034f58 	cmpnei	r16,zero,3389
 4034f48:	04034f60 	cmpeqi	r16,zero,3389
 4034f4c:	04034f68 	cmpgeui	r16,zero,3389
 4034f50:	04034f68 	cmpgeui	r16,zero,3389
 4034f54:	04034f58 	cmpnei	r16,zero,3389
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4034f58:	00800044 	movi	r2,1
 4034f5c:	00000306 	br	4034f6c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4034f60:	0005883a 	mov	r2,zero
 4034f64:	00000106 	br	4034f6c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4034f68:	0005883a 	mov	r2,zero
  }
}
 4034f6c:	e037883a 	mov	sp,fp
 4034f70:	df000017 	ldw	fp,0(sp)
 4034f74:	dec00104 	addi	sp,sp,4
 4034f78:	f800283a 	ret

04034f7c <atexit>:
 4034f7c:	200b883a 	mov	r5,r4
 4034f80:	000f883a 	mov	r7,zero
 4034f84:	000d883a 	mov	r6,zero
 4034f88:	0009883a 	mov	r4,zero
 4034f8c:	40350441 	jmpi	4035044 <__register_exitproc>

04034f90 <exit>:
 4034f90:	defffe04 	addi	sp,sp,-8
 4034f94:	000b883a 	mov	r5,zero
 4034f98:	dc000015 	stw	r16,0(sp)
 4034f9c:	dfc00115 	stw	ra,4(sp)
 4034fa0:	2021883a 	mov	r16,r4
 4034fa4:	403515c0 	call	403515c <__call_exitprocs>
 4034fa8:	00800034 	movhi	r2,0
 4034fac:	10881b04 	addi	r2,r2,8300
 4034fb0:	11000017 	ldw	r4,0(r2)
 4034fb4:	20800f17 	ldw	r2,60(r4)
 4034fb8:	10000126 	beq	r2,zero,4034fc0 <exit+0x30>
 4034fbc:	103ee83a 	callr	r2
 4034fc0:	8009883a 	mov	r4,r16
 4034fc4:	40352dc0 	call	40352dc <_exit>

04034fc8 <memcmp>:
 4034fc8:	01c000c4 	movi	r7,3
 4034fcc:	3980192e 	bgeu	r7,r6,4035034 <memcmp+0x6c>
 4034fd0:	2144b03a 	or	r2,r4,r5
 4034fd4:	11c4703a 	and	r2,r2,r7
 4034fd8:	10000f26 	beq	r2,zero,4035018 <memcmp+0x50>
 4034fdc:	20800003 	ldbu	r2,0(r4)
 4034fe0:	28c00003 	ldbu	r3,0(r5)
 4034fe4:	10c0151e 	bne	r2,r3,403503c <memcmp+0x74>
 4034fe8:	31bfff84 	addi	r6,r6,-2
 4034fec:	01ffffc4 	movi	r7,-1
 4034ff0:	00000406 	br	4035004 <memcmp+0x3c>
 4034ff4:	20800003 	ldbu	r2,0(r4)
 4034ff8:	28c00003 	ldbu	r3,0(r5)
 4034ffc:	31bfffc4 	addi	r6,r6,-1
 4035000:	10c00e1e 	bne	r2,r3,403503c <memcmp+0x74>
 4035004:	21000044 	addi	r4,r4,1
 4035008:	29400044 	addi	r5,r5,1
 403500c:	31fff91e 	bne	r6,r7,4034ff4 <__flash_rwdata_start+0xfffff7a4>
 4035010:	0005883a 	mov	r2,zero
 4035014:	f800283a 	ret
 4035018:	20c00017 	ldw	r3,0(r4)
 403501c:	28800017 	ldw	r2,0(r5)
 4035020:	18bfee1e 	bne	r3,r2,4034fdc <__flash_rwdata_start+0xfffff78c>
 4035024:	31bfff04 	addi	r6,r6,-4
 4035028:	21000104 	addi	r4,r4,4
 403502c:	29400104 	addi	r5,r5,4
 4035030:	39bff936 	bltu	r7,r6,4035018 <__flash_rwdata_start+0xfffff7c8>
 4035034:	303fe91e 	bne	r6,zero,4034fdc <__flash_rwdata_start+0xfffff78c>
 4035038:	003ff506 	br	4035010 <__flash_rwdata_start+0xfffff7c0>
 403503c:	10c5c83a 	sub	r2,r2,r3
 4035040:	f800283a 	ret

04035044 <__register_exitproc>:
 4035044:	defffa04 	addi	sp,sp,-24
 4035048:	dc000315 	stw	r16,12(sp)
 403504c:	04000034 	movhi	r16,0
 4035050:	84081b04 	addi	r16,r16,8300
 4035054:	80c00017 	ldw	r3,0(r16)
 4035058:	dc400415 	stw	r17,16(sp)
 403505c:	dfc00515 	stw	ra,20(sp)
 4035060:	18805217 	ldw	r2,328(r3)
 4035064:	2023883a 	mov	r17,r4
 4035068:	10003726 	beq	r2,zero,4035148 <__register_exitproc+0x104>
 403506c:	10c00117 	ldw	r3,4(r2)
 4035070:	010007c4 	movi	r4,31
 4035074:	20c00e16 	blt	r4,r3,40350b0 <__register_exitproc+0x6c>
 4035078:	1a000044 	addi	r8,r3,1
 403507c:	8800221e 	bne	r17,zero,4035108 <__register_exitproc+0xc4>
 4035080:	18c00084 	addi	r3,r3,2
 4035084:	18c7883a 	add	r3,r3,r3
 4035088:	18c7883a 	add	r3,r3,r3
 403508c:	12000115 	stw	r8,4(r2)
 4035090:	10c7883a 	add	r3,r2,r3
 4035094:	19400015 	stw	r5,0(r3)
 4035098:	0005883a 	mov	r2,zero
 403509c:	dfc00517 	ldw	ra,20(sp)
 40350a0:	dc400417 	ldw	r17,16(sp)
 40350a4:	dc000317 	ldw	r16,12(sp)
 40350a8:	dec00604 	addi	sp,sp,24
 40350ac:	f800283a 	ret
 40350b0:	00800034 	movhi	r2,0
 40350b4:	10800004 	addi	r2,r2,0
 40350b8:	10002626 	beq	r2,zero,4035154 <__register_exitproc+0x110>
 40350bc:	01006404 	movi	r4,400
 40350c0:	d9400015 	stw	r5,0(sp)
 40350c4:	d9800115 	stw	r6,4(sp)
 40350c8:	d9c00215 	stw	r7,8(sp)
 40350cc:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 40350d0:	d9400017 	ldw	r5,0(sp)
 40350d4:	d9800117 	ldw	r6,4(sp)
 40350d8:	d9c00217 	ldw	r7,8(sp)
 40350dc:	10001d26 	beq	r2,zero,4035154 <__register_exitproc+0x110>
 40350e0:	81000017 	ldw	r4,0(r16)
 40350e4:	10000115 	stw	zero,4(r2)
 40350e8:	02000044 	movi	r8,1
 40350ec:	22405217 	ldw	r9,328(r4)
 40350f0:	0007883a 	mov	r3,zero
 40350f4:	12400015 	stw	r9,0(r2)
 40350f8:	20805215 	stw	r2,328(r4)
 40350fc:	10006215 	stw	zero,392(r2)
 4035100:	10006315 	stw	zero,396(r2)
 4035104:	883fde26 	beq	r17,zero,4035080 <__flash_rwdata_start+0xfffff830>
 4035108:	18c9883a 	add	r4,r3,r3
 403510c:	2109883a 	add	r4,r4,r4
 4035110:	1109883a 	add	r4,r2,r4
 4035114:	21802215 	stw	r6,136(r4)
 4035118:	01800044 	movi	r6,1
 403511c:	12406217 	ldw	r9,392(r2)
 4035120:	30cc983a 	sll	r6,r6,r3
 4035124:	4992b03a 	or	r9,r9,r6
 4035128:	12406215 	stw	r9,392(r2)
 403512c:	21c04215 	stw	r7,264(r4)
 4035130:	01000084 	movi	r4,2
 4035134:	893fd21e 	bne	r17,r4,4035080 <__flash_rwdata_start+0xfffff830>
 4035138:	11006317 	ldw	r4,396(r2)
 403513c:	218cb03a 	or	r6,r4,r6
 4035140:	11806315 	stw	r6,396(r2)
 4035144:	003fce06 	br	4035080 <__flash_rwdata_start+0xfffff830>
 4035148:	18805304 	addi	r2,r3,332
 403514c:	18805215 	stw	r2,328(r3)
 4035150:	003fc606 	br	403506c <__flash_rwdata_start+0xfffff81c>
 4035154:	00bfffc4 	movi	r2,-1
 4035158:	003fd006 	br	403509c <__flash_rwdata_start+0xfffff84c>

0403515c <__call_exitprocs>:
 403515c:	defff504 	addi	sp,sp,-44
 4035160:	df000915 	stw	fp,36(sp)
 4035164:	dd400615 	stw	r21,24(sp)
 4035168:	dc800315 	stw	r18,12(sp)
 403516c:	dfc00a15 	stw	ra,40(sp)
 4035170:	ddc00815 	stw	r23,32(sp)
 4035174:	dd800715 	stw	r22,28(sp)
 4035178:	dd000515 	stw	r20,20(sp)
 403517c:	dcc00415 	stw	r19,16(sp)
 4035180:	dc400215 	stw	r17,8(sp)
 4035184:	dc000115 	stw	r16,4(sp)
 4035188:	d9000015 	stw	r4,0(sp)
 403518c:	2839883a 	mov	fp,r5
 4035190:	04800044 	movi	r18,1
 4035194:	057fffc4 	movi	r21,-1
 4035198:	00800034 	movhi	r2,0
 403519c:	10881b04 	addi	r2,r2,8300
 40351a0:	12000017 	ldw	r8,0(r2)
 40351a4:	45005217 	ldw	r20,328(r8)
 40351a8:	44c05204 	addi	r19,r8,328
 40351ac:	a0001c26 	beq	r20,zero,4035220 <__call_exitprocs+0xc4>
 40351b0:	a0800117 	ldw	r2,4(r20)
 40351b4:	15ffffc4 	addi	r23,r2,-1
 40351b8:	b8000d16 	blt	r23,zero,40351f0 <__call_exitprocs+0x94>
 40351bc:	14000044 	addi	r16,r2,1
 40351c0:	8421883a 	add	r16,r16,r16
 40351c4:	8421883a 	add	r16,r16,r16
 40351c8:	84402004 	addi	r17,r16,128
 40351cc:	a463883a 	add	r17,r20,r17
 40351d0:	a421883a 	add	r16,r20,r16
 40351d4:	e0001e26 	beq	fp,zero,4035250 <__call_exitprocs+0xf4>
 40351d8:	80804017 	ldw	r2,256(r16)
 40351dc:	e0801c26 	beq	fp,r2,4035250 <__call_exitprocs+0xf4>
 40351e0:	bdffffc4 	addi	r23,r23,-1
 40351e4:	843fff04 	addi	r16,r16,-4
 40351e8:	8c7fff04 	addi	r17,r17,-4
 40351ec:	bd7ff91e 	bne	r23,r21,40351d4 <__flash_rwdata_start+0xfffff984>
 40351f0:	00800034 	movhi	r2,0
 40351f4:	10800004 	addi	r2,r2,0
 40351f8:	10000926 	beq	r2,zero,4035220 <__call_exitprocs+0xc4>
 40351fc:	a0800117 	ldw	r2,4(r20)
 4035200:	1000301e 	bne	r2,zero,40352c4 <__call_exitprocs+0x168>
 4035204:	a0800017 	ldw	r2,0(r20)
 4035208:	10003226 	beq	r2,zero,40352d4 <__call_exitprocs+0x178>
 403520c:	a009883a 	mov	r4,r20
 4035210:	98800015 	stw	r2,0(r19)
 4035214:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4035218:	9d000017 	ldw	r20,0(r19)
 403521c:	a03fe41e 	bne	r20,zero,40351b0 <__flash_rwdata_start+0xfffff960>
 4035220:	dfc00a17 	ldw	ra,40(sp)
 4035224:	df000917 	ldw	fp,36(sp)
 4035228:	ddc00817 	ldw	r23,32(sp)
 403522c:	dd800717 	ldw	r22,28(sp)
 4035230:	dd400617 	ldw	r21,24(sp)
 4035234:	dd000517 	ldw	r20,20(sp)
 4035238:	dcc00417 	ldw	r19,16(sp)
 403523c:	dc800317 	ldw	r18,12(sp)
 4035240:	dc400217 	ldw	r17,8(sp)
 4035244:	dc000117 	ldw	r16,4(sp)
 4035248:	dec00b04 	addi	sp,sp,44
 403524c:	f800283a 	ret
 4035250:	a0800117 	ldw	r2,4(r20)
 4035254:	80c00017 	ldw	r3,0(r16)
 4035258:	10bfffc4 	addi	r2,r2,-1
 403525c:	15c01426 	beq	r2,r23,40352b0 <__call_exitprocs+0x154>
 4035260:	80000015 	stw	zero,0(r16)
 4035264:	183fde26 	beq	r3,zero,40351e0 <__flash_rwdata_start+0xfffff990>
 4035268:	95c8983a 	sll	r4,r18,r23
 403526c:	a0806217 	ldw	r2,392(r20)
 4035270:	a5800117 	ldw	r22,4(r20)
 4035274:	2084703a 	and	r2,r4,r2
 4035278:	10000b26 	beq	r2,zero,40352a8 <__call_exitprocs+0x14c>
 403527c:	a0806317 	ldw	r2,396(r20)
 4035280:	2088703a 	and	r4,r4,r2
 4035284:	20000c1e 	bne	r4,zero,40352b8 <__call_exitprocs+0x15c>
 4035288:	89400017 	ldw	r5,0(r17)
 403528c:	d9000017 	ldw	r4,0(sp)
 4035290:	183ee83a 	callr	r3
 4035294:	a0800117 	ldw	r2,4(r20)
 4035298:	15bfbf1e 	bne	r2,r22,4035198 <__flash_rwdata_start+0xfffff948>
 403529c:	98800017 	ldw	r2,0(r19)
 40352a0:	153fcf26 	beq	r2,r20,40351e0 <__flash_rwdata_start+0xfffff990>
 40352a4:	003fbc06 	br	4035198 <__flash_rwdata_start+0xfffff948>
 40352a8:	183ee83a 	callr	r3
 40352ac:	003ff906 	br	4035294 <__flash_rwdata_start+0xfffffa44>
 40352b0:	a5c00115 	stw	r23,4(r20)
 40352b4:	003feb06 	br	4035264 <__flash_rwdata_start+0xfffffa14>
 40352b8:	89000017 	ldw	r4,0(r17)
 40352bc:	183ee83a 	callr	r3
 40352c0:	003ff406 	br	4035294 <__flash_rwdata_start+0xfffffa44>
 40352c4:	a0800017 	ldw	r2,0(r20)
 40352c8:	a027883a 	mov	r19,r20
 40352cc:	1029883a 	mov	r20,r2
 40352d0:	003fb606 	br	40351ac <__flash_rwdata_start+0xfffff95c>
 40352d4:	0005883a 	mov	r2,zero
 40352d8:	003ffb06 	br	40352c8 <__flash_rwdata_start+0xfffffa78>

040352dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40352dc:	defffd04 	addi	sp,sp,-12
 40352e0:	df000215 	stw	fp,8(sp)
 40352e4:	df000204 	addi	fp,sp,8
 40352e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40352ec:	0001883a 	nop
 40352f0:	e0bfff17 	ldw	r2,-4(fp)
 40352f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40352f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40352fc:	10000226 	beq	r2,zero,4035308 <_exit+0x2c>
    ALT_SIM_FAIL();
 4035300:	002af070 	cmpltui	zero,zero,43969
 4035304:	00000106 	br	403530c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4035308:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 403530c:	003fff06 	br	403530c <__flash_rwdata_start+0xfffffabc>

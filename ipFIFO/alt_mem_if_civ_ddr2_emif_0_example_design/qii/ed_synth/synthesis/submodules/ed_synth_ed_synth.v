// ed_synth_ed_synth.v

// This file was auto-generated from alt_mem_if_civ_ddr2_tg_ed_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 915

`timescale 1 ps / 1 ps
module ed_synth_ed_synth (
		output wire        phy_clk,                 //      phy_clk.clk
		input  wire        pll_ref_clk,             //  pll_ref_clk.clk
		output wire        tg_status_pass,          //    tg_status.pass
		output wire        tg_status_fail,          //             .fail
		output wire        tg_status_test_complete, //             .test_complete
		output wire        status_cal_fail,         //  emif_status.local_cal_fail
		output wire        status_cal_success,      //             .local_cal_success
		output wire        status_init_done,        //             .local_init_done
		output wire [12:0] mem_addr,                //          mem.mem_a
		output wire [1:0]  mem_ba,                  //             .mem_ba
		output wire        mem_cas_n,               //             .mem_cas_n
		output wire        mem_cke,                 //             .mem_cke
		inout  wire        mem_clk,                 //             .mem_ck
		inout  wire        mem_clk_n,               //             .mem_ck_n
		output wire        mem_cs_n,                //             .mem_cs_n
		output wire        mem_dm,                  //             .mem_dm
		inout  wire [7:0]  mem_dq,                  //             .mem_dq
		inout  wire        mem_dqs,                 //             .mem_dqs
		inout  wire        mem_dqs_n,               //             .mem_dqs_n
		output wire        mem_odt,                 //             .mem_odt
		output wire        mem_ras_n,               //             .mem_ras_n
		output wire        mem_we_n,                //             .mem_we_n
		output wire [15:0] pnf_per_bit,             //       tg_pnf.pnf_per_bit
		output wire [15:0] pnf_per_bit_persist,     //             .pnf_per_bit_persist
		input  wire        global_reset_n           // global_reset.reset_n
	);

	wire         emif_phy_reset_reset;      // emif:reset_phy_clk_n -> tg:reset_n
	wire         tg_avl_beginbursttransfer; // tg:avl_burstbegin -> emif:local_burstbegin
	wire         emif_avl_waitrequest_n;    // emif:local_ready -> tg:avl_ready
	wire  [15:0] emif_avl_readdata;         // emif:local_rdata -> tg:avl_rdata
	wire  [23:0] tg_avl_address;            // tg:avl_addr -> emif:local_address
	wire         tg_avl_read;               // tg:avl_read_req -> emif:local_read_req
	wire   [1:0] tg_avl_byteenable;         // tg:avl_be -> emif:local_be
	wire         emif_avl_readdatavalid;    // emif:local_rdata_valid -> tg:avl_rdata_valid
	wire  [15:0] tg_avl_writedata;          // tg:avl_wdata -> emif:local_wdata
	wire         tg_avl_write;              // tg:avl_write_req -> emif:local_write_req
	wire   [2:0] tg_avl_burstcount;         // tg:avl_size -> emif:local_size

	ed_synth_ed_synth_emif emif (
		.phy_clk            (phy_clk),                   //           phy_clk.clk
		.reset_phy_clk_n    (emif_phy_reset_reset),      //         phy_reset.reset_n
		.status_cal_fail    (status_cal_fail),           //            status.local_cal_fail
		.status_cal_success (status_cal_success),        //                  .local_cal_success
		.status_init_done   (status_init_done),          //                  .local_init_done
		.global_reset_n     (global_reset_n),            //      global_reset.reset_n
		.reset_request_n    (),                          //     reset_request.reset_n
		.local_ready        (emif_avl_waitrequest_n),    //               avl.waitrequest_n
		.local_write_req    (tg_avl_write),              //                  .write
		.local_read_req     (tg_avl_read),               //                  .read
		.local_address      (tg_avl_address),            //                  .address
		.local_be           (tg_avl_byteenable),         //                  .byteenable
		.local_wdata        (tg_avl_writedata),          //                  .writedata
		.local_size         (tg_avl_burstcount),         //                  .burstcount
		.local_burstbegin   (tg_avl_beginbursttransfer), //                  .beginbursttransfer
		.local_rdata        (emif_avl_readdata),         //                  .readdata
		.local_rdata_valid  (emif_avl_readdatavalid),    //                  .readdatavalid
		.mem_addr           (mem_addr),                  //               mem.mem_a
		.mem_ba             (mem_ba),                    //                  .mem_ba
		.mem_cas_n          (mem_cas_n),                 //                  .mem_cas_n
		.mem_cke            (mem_cke),                   //                  .mem_cke
		.mem_clk            (mem_clk),                   //                  .mem_ck
		.mem_clk_n          (mem_clk_n),                 //                  .mem_ck_n
		.mem_cs_n           (mem_cs_n),                  //                  .mem_cs_n
		.mem_dm             (mem_dm),                    //                  .mem_dm
		.mem_dq             (mem_dq),                    //                  .mem_dq
		.mem_dqs            (mem_dqs),                   //                  .mem_dqs
		.mem_dqs_n          (mem_dqs_n),                 //                  .mem_dqs_n
		.mem_odt            (mem_odt),                   //                  .mem_odt
		.mem_ras_n          (mem_ras_n),                 //                  .mem_ras_n
		.mem_we_n           (mem_we_n),                  //                  .mem_we_n
		.aux_full_rate_clk  (),                          // aux_full_rate_clk.clk
		.aux_half_rate_clk  (),                          // aux_half_rate_clk.clk
		.pll_ref_clk        (pll_ref_clk)                //       pll_ref_clk.clk
	);

	ed_synth_ed_synth_tg #(
		.DEVICE_FAMILY                          ("Cyclone IV E"),
		.TG_AVL_DATA_WIDTH                      (16),
		.TG_AVL_ADDR_WIDTH                      (24),
		.TG_AVL_WORD_ADDR_WIDTH                 (24),
		.TG_AVL_SIZE_WIDTH                      (3),
		.TG_AVL_BE_WIDTH                        (2),
		.DRIVER_SIGNATURE                       (1431634141),
		.TG_GEN_BYTE_ADDR                       (0),
		.TG_NUM_DRIVER_LOOP                     (1),
		.TG_ENABLE_UNIX_ID                      (0),
		.TG_USE_UNIX_ID                         (0),
		.TG_RANDOM_BYTE_ENABLE                  (1),
		.TG_ENABLE_READ_COMPARE                 (1),
		.TG_POWER_OF_TWO_BURSTS_ONLY            (0),
		.TG_BURST_ON_BURST_BOUNDARY             (0),
		.TG_DO_NOT_CROSS_4KB_BOUNDARY           (0),
		.TG_TIMEOUT_COUNTER_WIDTH               (32),
		.TG_MAX_READ_LATENCY                    (20),
		.TG_SINGLE_RW_SEQ_ADDR_COUNT            (32),
		.TG_SINGLE_RW_RAND_ADDR_COUNT           (32),
		.TG_SINGLE_RW_RAND_SEQ_ADDR_COUNT       (32),
		.TG_BLOCK_RW_SEQ_ADDR_COUNT             (8),
		.TG_BLOCK_RW_RAND_ADDR_COUNT            (8),
		.TG_BLOCK_RW_RAND_SEQ_ADDR_COUNT        (8),
		.TG_BLOCK_RW_BLOCK_SIZE                 (8),
		.TG_TEMPLATE_STAGE_COUNT                (4),
		.TG_SEQ_ADDR_GEN_MIN_BURSTCOUNT         (1),
		.TG_SEQ_ADDR_GEN_MAX_BURSTCOUNT         (4),
		.TG_RAND_ADDR_GEN_MIN_BURSTCOUNT        (1),
		.TG_RAND_ADDR_GEN_MAX_BURSTCOUNT        (4),
		.TG_RAND_SEQ_ADDR_GEN_MIN_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_MAX_BURSTCOUNT    (4),
		.TG_RAND_SEQ_ADDR_GEN_RAND_ADDR_PERCENT (50)
	) tg (
		.clk                 (phy_clk),                   // avl_clock.clk
		.reset_n             (emif_phy_reset_reset),      // avl_reset.reset_n
		.pass                (tg_status_pass),            //    status.pass
		.fail                (tg_status_fail),            //          .fail
		.test_complete       (tg_status_test_complete),   //          .test_complete
		.pnf_per_bit         (pnf_per_bit),               //       pnf.pnf_per_bit
		.pnf_per_bit_persist (pnf_per_bit_persist),       //          .pnf_per_bit_persist
		.avl_ready           (emif_avl_waitrequest_n),    //       avl.waitrequest_n
		.avl_addr            (tg_avl_address),            //          .address
		.avl_size            (tg_avl_burstcount),         //          .burstcount
		.avl_wdata           (tg_avl_writedata),          //          .writedata
		.avl_rdata           (emif_avl_readdata),         //          .readdata
		.avl_write_req       (tg_avl_write),              //          .write
		.avl_read_req        (tg_avl_read),               //          .read
		.avl_rdata_valid     (emif_avl_readdatavalid),    //          .readdatavalid
		.avl_be              (tg_avl_byteenable),         //          .byteenable
		.avl_burstbegin      (tg_avl_beginbursttransfer)  //          .beginbursttransfer
	);

endmodule


led_blink.elf:     file format elf32-littlenios2
led_blink.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005db4 memsz 0x00005db4 flags r-x
    LOAD off    0x00006dd4 vaddr 0x00045dd4 paddr 0x0004786c align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00009304 vaddr 0x00049304 paddr 0x00049304 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b20  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000084  00045d50  00045d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  00045dd4  0004786c  00006dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00049304  00049304  00009304  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00049458  00049458  0000886c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000886c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  00008890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016b4f  00000000  00000000  000092c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006103  00000000  00000000  0001fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a5b  00000000  00000000  00025f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000175c  00000000  00000000  0002c970  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000291e  00000000  00000000  0002e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  000309ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000354c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000354d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00038272  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00038275  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00038281  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00038282  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00038283  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003828e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00038299  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000382a4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  000382ad  2**0
                  CONTENTS, READONLY
 26 .jdi          000040cb  00000000  00000000  000382cd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003d4f3  00000000  00000000  0003c398  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00045d50 l    d  .rodata	00000000 .rodata
00045dd4 l    d  .rwdata	00000000 .rwdata
00049304 l    d  .bss	00000000 .bss
00049458 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../led_blink_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00040510 l     F .text	00000008 __fp_unlock
00040524 l     F .text	0000019c __sinit.part.1
000406c0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00045dd4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000431b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000432c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000432f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000433e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000434cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000435b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043794 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004785c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043a08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043b44 l     F .text	00000034 alt_dev_reg
000467a8 l     O .rwdata	00001060 jtag_uart_0
00047808 l     O .rwdata	0000002c lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043e34 l     F .text	0000020c altera_avalon_jtag_uart_irq
00044040 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044cb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000451a8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045308 l     F .text	0000003c alt_get_errno
00045344 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004932c g     O .bss	00000004 alt_instruction_exception_handler
00042f80 g     F .text	00000054 _isatty_r
000436d0 g     F .text	0000007c alt_main
000403a4 g     F .text	000000c0 _puts_r
00049358 g     O .bss	00000100 alt_irq
00042ca8 g     F .text	00000060 _lseek_r
0004786c g       *ABS*	00000000 __flash_rwdata_start
000446ec g     F .text	00000040 alt_up_character_lcd_send_cmd
00049458 g       *ABS*	00000000 __alt_heap_start
0004225c g     F .text	0000005c __sseek
00040870 g     F .text	00000010 __sinit
000406c8 g     F .text	00000078 __sfmoreglue
00043770 g     F .text	00000024 __malloc_unlock
00041948 g     F .text	0000015c memmove
00040858 g     F .text	00000018 _cleanup
00045730 g     F .text	00000024 altera_nios2_gen2_irq_init
00044678 g     F .text	00000074 get_DDRAM_addr
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042f24 g     F .text	0000005c _fstat_r
00049310 g     O .bss	00000004 errno
000421d8 g     F .text	00000008 __seofread
00049318 g     O .bss	00000004 alt_argv
0004f834 g       *ABS*	00000000 _gp
00046628 g     O .rwdata	00000180 alt_fd_list
00044e58 g     F .text	00000090 alt_find_dev
00041800 g     F .text	00000148 memcpy
00044894 g     F .text	00000050 alt_up_character_lcd_write_fd
00040518 g     F .text	0000000c _cleanup_r
0004528c g     F .text	0000007c alt_io_redirect
00045d50 g       *ABS*	00000000 __DTOR_END__
00040464 g     F .text	00000014 puts
00045920 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044238 g     F .text	0000021c altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000430cc g     F .text	00000064 .hidden __udivsi3
00043420 g     F .text	000000ac isatty
0004930c g     O .bss	00000004 __malloc_top_pad
000408c0 g     F .text	000004c8 __sfvwrite_r
00042130 g     F .text	00000054 _sbrk_r
00042ec4 g     F .text	00000060 _read_r
00047854 g     O .rwdata	00000004 alt_max_fd
000424c8 g     F .text	000000f0 _fclose_r
00042844 g     F .text	00000030 fflush
00049308 g     O .bss	00000004 __malloc_max_sbrked_mem
000435f4 g     F .text	000000dc lseek
00047834 g     O .rwdata	00000004 _global_impure_ptr
00041bcc g     F .text	00000564 _realloc_r
00049458 g       *ABS*	00000000 __bss_end
000450b8 g     F .text	000000f0 alt_iic_isr_register
00045628 g     F .text	00000108 alt_tick
00040890 g     F .text	00000018 __fp_lock_all
0004506c g     F .text	0000004c alt_ic_irq_enabled
0004558c g     F .text	0000009c alt_alarm_stop
00049320 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046600 g     O .rwdata	00000028 alt_dev_null
00044b34 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00044c98 g     F .text	00000020 alt_dcache_flush_all
0004786c g       *ABS*	00000000 __ram_rwdata_end
0004784c g     O .rwdata	00000008 alt_dev_list
00043a44 g     F .text	00000100 write
00045dd4 g       *ABS*	00000000 __ram_rodata_end
0004332c g     F .text	000000b8 fstat
00043130 g     F .text	00000058 .hidden __umodsi3
00049458 g       *ABS*	00000000 end
00043d74 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00045d50 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
00044454 g     F .text	00000224 altera_avalon_jtag_uart_write
00040880 g     F .text	00000004 __sfp_lock_acquire
0004171c g     F .text	000000e4 memchr
000447a0 g     F .text	0000007c alt_up_character_lcd_write
00042998 g     F .text	00000310 _free_r
00045b9c g     F .text	00000180 __call_exitprocs
0004783c g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00049324 g     O .bss	00000004 _alt_tick_rate
00049328 g     O .bss	00000004 _alt_nticks
000437d0 g     F .text	00000104 read
00043bb0 g     F .text	00000060 alt_sys_init
000449e4 g     F .text	0000008c alt_up_character_lcd_shift_display
00045a84 g     F .text	00000118 __register_exitproc
00044a70 g     F .text	0000008c alt_up_character_lcd_erase_pos
000440e0 g     F .text	00000068 altera_avalon_jtag_uart_close
00043188 g     F .text	00000028 .hidden __mulsi3
00045dd4 g       *ABS*	00000000 __ram_rwdata_start
00045d50 g       *ABS*	00000000 __ram_rodata_start
00049330 g     O .bss	00000028 __malloc_current_mallinfo
00043c10 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004585c g     F .text	000000c4 alt_get_fd
00042474 g     F .text	00000054 _close_r
00045a08 g     F .text	0000007c memcmp
00043cd0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049458 g       *ABS*	00000000 __alt_stack_base
00043d20 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042320 g     F .text	00000154 __swsetup_r
00040740 g     F .text	00000118 __sfp
000461f8 g     O .rwdata	00000408 __malloc_av_
0004088c g     F .text	00000004 __sinit_lock_release
00042184 g     F .text	00000054 __sread
00045754 g     F .text	00000108 alt_find_file
00044cf4 g     F .text	000000a4 alt_dev_llist_insert
0004374c g     F .text	00000024 __malloc_lock
00043958 g     F .text	000000b0 sbrk
000427e8 g     F .text	0000005c _fflush_r
00049304 g       *ABS*	00000000 __bss_start
00041aa4 g     F .text	00000128 memset
000402d0 g     F .text	000000d4 main
0004931c g     O .bss	00000004 alt_envp
00049304 g     O .bss	00000004 __malloc_max_total_mem
00043c70 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00044958 g     F .text	0000008c alt_up_character_lcd_shift_cursor
000422b8 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
000425b8 g     F .text	00000014 fclose
00040f10 g     F .text	0000080c _malloc_r
00047858 g     O .rwdata	00000004 alt_errno
00040d88 g     F .text	000000c4 _fwalk
00042fd4 g     F .text	00000084 .hidden __divsi3
00044764 g     F .text	0000003c alt_up_character_lcd_open_dev
00042874 g     F .text	00000124 _malloc_trim_r
00045d50 g       *ABS*	00000000 __CTOR_END__
0004472c g     F .text	00000038 alt_up_character_lcd_init
00045d50 g       *ABS*	00000000 __flash_rodata_start
00045d50 g       *ABS*	00000000 __DTOR_LIST__
0004026c g     F .text	00000064 delay
00043b78 g     F .text	00000038 alt_irq_init
000438d4 g     F .text	00000084 alt_release_fd
00044afc g     F .text	00000038 alt_up_character_lcd_cursor_off
000459bc g     F .text	00000014 atexit
000422c0 g     F .text	00000060 _write_r
00047838 g     O .rwdata	00000004 _impure_ptr
00049314 g     O .bss	00000004 alt_argc
000425cc g     F .text	0000021c __sflush_r
00044df8 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000408a8 g     F .text	00000018 __fp_unlock_all
00047844 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044f08 g     F .text	00000050 alt_ic_isr_register
0004786c g       *ABS*	00000000 _edata
00049458 g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
00044148 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00044fe0 g     F .text	0000008c alt_ic_irq_disable
000421e0 g     F .text	0000007c __swrite
00047840 g     O .rwdata	00000004 __malloc_trim_threshold
000459d0 g     F .text	00000038 exit
00040e4c g     F .text	000000c4 _fwalk_reent
00043058 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040884 g     F .text	00000004 __sfp_lock_release
0004481c g     F .text	00000078 alt_up_character_lcd_string
00045d1c g     F .text	00000034 _exit
00044b6c g     F .text	0000012c alt_alarm_start
00042d08 g     F .text	000001bc __smakebuf_r
00040478 g     F .text	00000098 strlen
00045430 g     F .text	0000015c open
00044ee8 g     F .text	00000020 alt_icache_flush_all
000448e4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00047860 g     O .rwdata	00000004 alt_priority_mask
00044f58 g     F .text	00000088 alt_ic_irq_enable
00047864 g     O .rwdata	00000008 alt_alarm_list
00044d98 g     F .text	00000060 _do_ctors
000431ec g     F .text	000000d8 close
00043534 g     F .text	00000084 alt_load
00040888 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a4d604 	addi	r2,r2,-27816
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a4d604 	addi	r2,r2,-27816
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6be17 	ldw	r2,-25864(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6be17 	ldw	r2,-25864(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4023c:	d6be0d14 	ori	gp,gp,63540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10a4c114 	ori	r2,r2,37636

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18e51614 	ori	r3,r3,37976

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00435340 	call	43534 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00436d00 	call	436d0 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffce268>

0004026c <delay>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_up_avalon_character_lcd.h"

void delay(unsigned int ms)
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	df000315 	stw	fp,12(sp)
   40274:	df000304 	addi	fp,sp,12
   40278:	e13fff15 	stw	r4,-4(fp)
	int x, y;
	for(x = 0; x< ms; x++ )
   4027c:	e03ffd15 	stw	zero,-12(fp)
   40280:	00000b06 	br	402b0 <delay+0x44>
	{
		for(y = 0; y<1000;y++);
   40284:	e03ffe15 	stw	zero,-8(fp)
   40288:	00000306 	br	40298 <delay+0x2c>
   4028c:	e0bffe17 	ldw	r2,-8(fp)
   40290:	10800044 	addi	r2,r2,1
   40294:	e0bffe15 	stw	r2,-8(fp)
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	1080fa10 	cmplti	r2,r2,1000
   402a0:	103ffa1e 	bne	r2,zero,4028c <__alt_data_end+0xfffce28c>
#include "altera_up_avalon_character_lcd.h"

void delay(unsigned int ms)
{
	int x, y;
	for(x = 0; x< ms; x++ )
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0bffd15 	stw	r2,-12(fp)
   402b0:	e0fffd17 	ldw	r3,-12(fp)
   402b4:	e0bfff17 	ldw	r2,-4(fp)
   402b8:	18bff236 	bltu	r3,r2,40284 <__alt_data_end+0xfffce284>
	{
		for(y = 0; y<1000;y++);
	}
}
   402bc:	0001883a 	nop
   402c0:	e037883a 	mov	sp,fp
   402c4:	df000017 	ldw	fp,0(sp)
   402c8:	dec00104 	addi	sp,sp,4
   402cc:	f800283a 	ret

000402d0 <main>:

int main()
{
   402d0:	defffc04 	addi	sp,sp,-16
   402d4:	dfc00315 	stw	ra,12(sp)
   402d8:	df000215 	stw	fp,8(sp)
   402dc:	df000204 	addi	fp,sp,8
  int count = 0;
   402e0:	e03ffe15 	stw	zero,-8(fp)
  printf("Hello from Nios II!\n");
   402e4:	01000134 	movhi	r4,4
   402e8:	21175404 	addi	r4,r4,23888
   402ec:	00404640 	call	40464 <puts>
  alt_up_character_lcd_dev* lcd1602;
  lcd1602 = alt_up_character_lcd_open_dev("/dev/lcd");
   402f0:	01000134 	movhi	r4,4
   402f4:	21175904 	addi	r4,r4,23908
   402f8:	00447640 	call	44764 <alt_up_character_lcd_open_dev>
   402fc:	e0bfff15 	stw	r2,-4(fp)
  alt_up_character_lcd_init(lcd1602);
   40300:	e13fff17 	ldw	r4,-4(fp)
   40304:	004472c0 	call	4472c <alt_up_character_lcd_init>

  alt_up_character_lcd_set_cursor_pos(lcd1602, 3, 0);
   40308:	000d883a 	mov	r6,zero
   4030c:	014000c4 	movi	r5,3
   40310:	e13fff17 	ldw	r4,-4(fp)
   40314:	00448e40 	call	448e4 <alt_up_character_lcd_set_cursor_pos>
  alt_up_character_lcd_string(lcd1602,"Hello World");
   40318:	01400134 	movhi	r5,4
   4031c:	29575c04 	addi	r5,r5,23920
   40320:	e13fff17 	ldw	r4,-4(fp)
   40324:	004481c0 	call	4481c <alt_up_character_lcd_string>
  alt_up_character_lcd_set_cursor_pos(lcd1602, 0, 1);
   40328:	01800044 	movi	r6,1
   4032c:	000b883a 	mov	r5,zero
   40330:	e13fff17 	ldw	r4,-4(fp)
   40334:	00448e40 	call	448e4 <alt_up_character_lcd_set_cursor_pos>
  alt_up_character_lcd_string(lcd1602,"Tuyen Xinh Gai");
   40338:	01400134 	movhi	r5,4
   4033c:	29575f04 	addi	r5,r5,23932
   40340:	e13fff17 	ldw	r4,-4(fp)
   40344:	004481c0 	call	4481c <alt_up_character_lcd_string>

  while (1)
  {
	 if(IORD_ALTERA_AVALON_PIO_DATA(0x81000) == 0)
   40348:	00800234 	movhi	r2,8
   4034c:	10840004 	addi	r2,r2,4096
   40350:	10800037 	ldwio	r2,0(r2)
   40354:	10000e1e 	bne	r2,zero,40390 <main+0xc0>
	 {
		 delay(10);
   40358:	01000284 	movi	r4,10
   4035c:	004026c0 	call	4026c <delay>
		 if(IORD_ALTERA_AVALON_PIO_DATA(0x81000)==0)
   40360:	00800234 	movhi	r2,8
   40364:	10840004 	addi	r2,r2,4096
   40368:	10800037 	ldwio	r2,0(r2)
   4036c:	1000051e 	bne	r2,zero,40384 <main+0xb4>
		 while(IORD_ALTERA_AVALON_PIO_DATA(0x81000) == 0);
   40370:	0001883a 	nop
   40374:	00800234 	movhi	r2,8
   40378:	10840004 	addi	r2,r2,4096
   4037c:	10800037 	ldwio	r2,0(r2)
   40380:	103ffc26 	beq	r2,zero,40374 <__alt_data_end+0xfffce374>
		 count++;
   40384:	e0bffe17 	ldw	r2,-8(fp)
   40388:	10800044 	addi	r2,r2,1
   4038c:	e0bffe15 	stw	r2,-8(fp)
	 }
	 IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,count);
   40390:	00800234 	movhi	r2,8
   40394:	10840404 	addi	r2,r2,4112
   40398:	e0fffe17 	ldw	r3,-8(fp)
   4039c:	10c00035 	stwio	r3,0(r2)
}
   403a0:	003fe906 	br	40348 <__alt_data_end+0xfffce348>

000403a4 <_puts_r>:
   403a4:	defff604 	addi	sp,sp,-40
   403a8:	dc000715 	stw	r16,28(sp)
   403ac:	2021883a 	mov	r16,r4
   403b0:	2809883a 	mov	r4,r5
   403b4:	dc400815 	stw	r17,32(sp)
   403b8:	dfc00915 	stw	ra,36(sp)
   403bc:	2823883a 	mov	r17,r5
   403c0:	00404780 	call	40478 <strlen>
   403c4:	10c00044 	addi	r3,r2,1
   403c8:	d8800115 	stw	r2,4(sp)
   403cc:	00800134 	movhi	r2,4
   403d0:	10976304 	addi	r2,r2,23948
   403d4:	d8800215 	stw	r2,8(sp)
   403d8:	00800044 	movi	r2,1
   403dc:	d8800315 	stw	r2,12(sp)
   403e0:	00800084 	movi	r2,2
   403e4:	dc400015 	stw	r17,0(sp)
   403e8:	d8c00615 	stw	r3,24(sp)
   403ec:	dec00415 	stw	sp,16(sp)
   403f0:	d8800515 	stw	r2,20(sp)
   403f4:	80000226 	beq	r16,zero,40400 <_puts_r+0x5c>
   403f8:	80800e17 	ldw	r2,56(r16)
   403fc:	10001426 	beq	r2,zero,40450 <_puts_r+0xac>
   40400:	81400217 	ldw	r5,8(r16)
   40404:	2880030b 	ldhu	r2,12(r5)
   40408:	10c8000c 	andi	r3,r2,8192
   4040c:	1800061e 	bne	r3,zero,40428 <_puts_r+0x84>
   40410:	29001917 	ldw	r4,100(r5)
   40414:	00f7ffc4 	movi	r3,-8193
   40418:	10880014 	ori	r2,r2,8192
   4041c:	20c6703a 	and	r3,r4,r3
   40420:	2880030d 	sth	r2,12(r5)
   40424:	28c01915 	stw	r3,100(r5)
   40428:	d9800404 	addi	r6,sp,16
   4042c:	8009883a 	mov	r4,r16
   40430:	00408c00 	call	408c0 <__sfvwrite_r>
   40434:	1000091e 	bne	r2,zero,4045c <_puts_r+0xb8>
   40438:	00800284 	movi	r2,10
   4043c:	dfc00917 	ldw	ra,36(sp)
   40440:	dc400817 	ldw	r17,32(sp)
   40444:	dc000717 	ldw	r16,28(sp)
   40448:	dec00a04 	addi	sp,sp,40
   4044c:	f800283a 	ret
   40450:	8009883a 	mov	r4,r16
   40454:	00408700 	call	40870 <__sinit>
   40458:	003fe906 	br	40400 <__alt_data_end+0xfffce400>
   4045c:	00bfffc4 	movi	r2,-1
   40460:	003ff606 	br	4043c <__alt_data_end+0xfffce43c>

00040464 <puts>:
   40464:	00800134 	movhi	r2,4
   40468:	109e0e04 	addi	r2,r2,30776
   4046c:	200b883a 	mov	r5,r4
   40470:	11000017 	ldw	r4,0(r2)
   40474:	00403a41 	jmpi	403a4 <_puts_r>

00040478 <strlen>:
   40478:	208000cc 	andi	r2,r4,3
   4047c:	10002026 	beq	r2,zero,40500 <strlen+0x88>
   40480:	20800007 	ldb	r2,0(r4)
   40484:	10002026 	beq	r2,zero,40508 <strlen+0x90>
   40488:	2005883a 	mov	r2,r4
   4048c:	00000206 	br	40498 <strlen+0x20>
   40490:	10c00007 	ldb	r3,0(r2)
   40494:	18001826 	beq	r3,zero,404f8 <strlen+0x80>
   40498:	10800044 	addi	r2,r2,1
   4049c:	10c000cc 	andi	r3,r2,3
   404a0:	183ffb1e 	bne	r3,zero,40490 <__alt_data_end+0xfffce490>
   404a4:	10c00017 	ldw	r3,0(r2)
   404a8:	01ffbff4 	movhi	r7,65279
   404ac:	39ffbfc4 	addi	r7,r7,-257
   404b0:	00ca303a 	nor	r5,zero,r3
   404b4:	01a02074 	movhi	r6,32897
   404b8:	19c7883a 	add	r3,r3,r7
   404bc:	31a02004 	addi	r6,r6,-32640
   404c0:	1946703a 	and	r3,r3,r5
   404c4:	1986703a 	and	r3,r3,r6
   404c8:	1800091e 	bne	r3,zero,404f0 <strlen+0x78>
   404cc:	10800104 	addi	r2,r2,4
   404d0:	10c00017 	ldw	r3,0(r2)
   404d4:	19cb883a 	add	r5,r3,r7
   404d8:	00c6303a 	nor	r3,zero,r3
   404dc:	28c6703a 	and	r3,r5,r3
   404e0:	1986703a 	and	r3,r3,r6
   404e4:	183ff926 	beq	r3,zero,404cc <__alt_data_end+0xfffce4cc>
   404e8:	00000106 	br	404f0 <strlen+0x78>
   404ec:	10800044 	addi	r2,r2,1
   404f0:	10c00007 	ldb	r3,0(r2)
   404f4:	183ffd1e 	bne	r3,zero,404ec <__alt_data_end+0xfffce4ec>
   404f8:	1105c83a 	sub	r2,r2,r4
   404fc:	f800283a 	ret
   40500:	2005883a 	mov	r2,r4
   40504:	003fe706 	br	404a4 <__alt_data_end+0xfffce4a4>
   40508:	0005883a 	mov	r2,zero
   4050c:	f800283a 	ret

00040510 <__fp_unlock>:
   40510:	0005883a 	mov	r2,zero
   40514:	f800283a 	ret

00040518 <_cleanup_r>:
   40518:	01400134 	movhi	r5,4
   4051c:	29493204 	addi	r5,r5,9416
   40520:	0040e4c1 	jmpi	40e4c <_fwalk_reent>

00040524 <__sinit.part.1>:
   40524:	defff704 	addi	sp,sp,-36
   40528:	00c00134 	movhi	r3,4
   4052c:	dfc00815 	stw	ra,32(sp)
   40530:	ddc00715 	stw	r23,28(sp)
   40534:	dd800615 	stw	r22,24(sp)
   40538:	dd400515 	stw	r21,20(sp)
   4053c:	dd000415 	stw	r20,16(sp)
   40540:	dcc00315 	stw	r19,12(sp)
   40544:	dc800215 	stw	r18,8(sp)
   40548:	dc400115 	stw	r17,4(sp)
   4054c:	dc000015 	stw	r16,0(sp)
   40550:	18c14604 	addi	r3,r3,1304
   40554:	24000117 	ldw	r16,4(r4)
   40558:	20c00f15 	stw	r3,60(r4)
   4055c:	2080bb04 	addi	r2,r4,748
   40560:	00c000c4 	movi	r3,3
   40564:	20c0b915 	stw	r3,740(r4)
   40568:	2080ba15 	stw	r2,744(r4)
   4056c:	2000b815 	stw	zero,736(r4)
   40570:	05c00204 	movi	r23,8
   40574:	00800104 	movi	r2,4
   40578:	2025883a 	mov	r18,r4
   4057c:	b80d883a 	mov	r6,r23
   40580:	81001704 	addi	r4,r16,92
   40584:	000b883a 	mov	r5,zero
   40588:	80000015 	stw	zero,0(r16)
   4058c:	80000115 	stw	zero,4(r16)
   40590:	80000215 	stw	zero,8(r16)
   40594:	8080030d 	sth	r2,12(r16)
   40598:	80001915 	stw	zero,100(r16)
   4059c:	8000038d 	sth	zero,14(r16)
   405a0:	80000415 	stw	zero,16(r16)
   405a4:	80000515 	stw	zero,20(r16)
   405a8:	80000615 	stw	zero,24(r16)
   405ac:	0041aa40 	call	41aa4 <memset>
   405b0:	05800134 	movhi	r22,4
   405b4:	94400217 	ldw	r17,8(r18)
   405b8:	05400134 	movhi	r21,4
   405bc:	05000134 	movhi	r20,4
   405c0:	04c00134 	movhi	r19,4
   405c4:	b5886104 	addi	r22,r22,8580
   405c8:	ad487804 	addi	r21,r21,8672
   405cc:	a5089704 	addi	r20,r20,8796
   405d0:	9cc8ae04 	addi	r19,r19,8888
   405d4:	85800815 	stw	r22,32(r16)
   405d8:	85400915 	stw	r21,36(r16)
   405dc:	85000a15 	stw	r20,40(r16)
   405e0:	84c00b15 	stw	r19,44(r16)
   405e4:	84000715 	stw	r16,28(r16)
   405e8:	00800284 	movi	r2,10
   405ec:	8880030d 	sth	r2,12(r17)
   405f0:	00800044 	movi	r2,1
   405f4:	b80d883a 	mov	r6,r23
   405f8:	89001704 	addi	r4,r17,92
   405fc:	000b883a 	mov	r5,zero
   40600:	88000015 	stw	zero,0(r17)
   40604:	88000115 	stw	zero,4(r17)
   40608:	88000215 	stw	zero,8(r17)
   4060c:	88001915 	stw	zero,100(r17)
   40610:	8880038d 	sth	r2,14(r17)
   40614:	88000415 	stw	zero,16(r17)
   40618:	88000515 	stw	zero,20(r17)
   4061c:	88000615 	stw	zero,24(r17)
   40620:	0041aa40 	call	41aa4 <memset>
   40624:	94000317 	ldw	r16,12(r18)
   40628:	00800484 	movi	r2,18
   4062c:	8c400715 	stw	r17,28(r17)
   40630:	8d800815 	stw	r22,32(r17)
   40634:	8d400915 	stw	r21,36(r17)
   40638:	8d000a15 	stw	r20,40(r17)
   4063c:	8cc00b15 	stw	r19,44(r17)
   40640:	8080030d 	sth	r2,12(r16)
   40644:	00800084 	movi	r2,2
   40648:	80000015 	stw	zero,0(r16)
   4064c:	80000115 	stw	zero,4(r16)
   40650:	80000215 	stw	zero,8(r16)
   40654:	80001915 	stw	zero,100(r16)
   40658:	8080038d 	sth	r2,14(r16)
   4065c:	80000415 	stw	zero,16(r16)
   40660:	80000515 	stw	zero,20(r16)
   40664:	80000615 	stw	zero,24(r16)
   40668:	b80d883a 	mov	r6,r23
   4066c:	000b883a 	mov	r5,zero
   40670:	81001704 	addi	r4,r16,92
   40674:	0041aa40 	call	41aa4 <memset>
   40678:	00800044 	movi	r2,1
   4067c:	84000715 	stw	r16,28(r16)
   40680:	85800815 	stw	r22,32(r16)
   40684:	85400915 	stw	r21,36(r16)
   40688:	85000a15 	stw	r20,40(r16)
   4068c:	84c00b15 	stw	r19,44(r16)
   40690:	90800e15 	stw	r2,56(r18)
   40694:	dfc00817 	ldw	ra,32(sp)
   40698:	ddc00717 	ldw	r23,28(sp)
   4069c:	dd800617 	ldw	r22,24(sp)
   406a0:	dd400517 	ldw	r21,20(sp)
   406a4:	dd000417 	ldw	r20,16(sp)
   406a8:	dcc00317 	ldw	r19,12(sp)
   406ac:	dc800217 	ldw	r18,8(sp)
   406b0:	dc400117 	ldw	r17,4(sp)
   406b4:	dc000017 	ldw	r16,0(sp)
   406b8:	dec00904 	addi	sp,sp,36
   406bc:	f800283a 	ret

000406c0 <__fp_lock>:
   406c0:	0005883a 	mov	r2,zero
   406c4:	f800283a 	ret

000406c8 <__sfmoreglue>:
   406c8:	defffc04 	addi	sp,sp,-16
   406cc:	dc800215 	stw	r18,8(sp)
   406d0:	2825883a 	mov	r18,r5
   406d4:	dc000015 	stw	r16,0(sp)
   406d8:	01401a04 	movi	r5,104
   406dc:	2021883a 	mov	r16,r4
   406e0:	913fffc4 	addi	r4,r18,-1
   406e4:	dfc00315 	stw	ra,12(sp)
   406e8:	dc400115 	stw	r17,4(sp)
   406ec:	00431880 	call	43188 <__mulsi3>
   406f0:	8009883a 	mov	r4,r16
   406f4:	11401d04 	addi	r5,r2,116
   406f8:	1023883a 	mov	r17,r2
   406fc:	0040f100 	call	40f10 <_malloc_r>
   40700:	1021883a 	mov	r16,r2
   40704:	10000726 	beq	r2,zero,40724 <__sfmoreglue+0x5c>
   40708:	11000304 	addi	r4,r2,12
   4070c:	10000015 	stw	zero,0(r2)
   40710:	14800115 	stw	r18,4(r2)
   40714:	11000215 	stw	r4,8(r2)
   40718:	89801a04 	addi	r6,r17,104
   4071c:	000b883a 	mov	r5,zero
   40720:	0041aa40 	call	41aa4 <memset>
   40724:	8005883a 	mov	r2,r16
   40728:	dfc00317 	ldw	ra,12(sp)
   4072c:	dc800217 	ldw	r18,8(sp)
   40730:	dc400117 	ldw	r17,4(sp)
   40734:	dc000017 	ldw	r16,0(sp)
   40738:	dec00404 	addi	sp,sp,16
   4073c:	f800283a 	ret

00040740 <__sfp>:
   40740:	defffb04 	addi	sp,sp,-20
   40744:	dc000015 	stw	r16,0(sp)
   40748:	04000134 	movhi	r16,4
   4074c:	841e0d04 	addi	r16,r16,30772
   40750:	dcc00315 	stw	r19,12(sp)
   40754:	2027883a 	mov	r19,r4
   40758:	81000017 	ldw	r4,0(r16)
   4075c:	dfc00415 	stw	ra,16(sp)
   40760:	dc800215 	stw	r18,8(sp)
   40764:	20800e17 	ldw	r2,56(r4)
   40768:	dc400115 	stw	r17,4(sp)
   4076c:	1000021e 	bne	r2,zero,40778 <__sfp+0x38>
   40770:	00405240 	call	40524 <__sinit.part.1>
   40774:	81000017 	ldw	r4,0(r16)
   40778:	2480b804 	addi	r18,r4,736
   4077c:	047fffc4 	movi	r17,-1
   40780:	91000117 	ldw	r4,4(r18)
   40784:	94000217 	ldw	r16,8(r18)
   40788:	213fffc4 	addi	r4,r4,-1
   4078c:	20000a16 	blt	r4,zero,407b8 <__sfp+0x78>
   40790:	8080030f 	ldh	r2,12(r16)
   40794:	10000c26 	beq	r2,zero,407c8 <__sfp+0x88>
   40798:	80c01d04 	addi	r3,r16,116
   4079c:	00000206 	br	407a8 <__sfp+0x68>
   407a0:	18bfe60f 	ldh	r2,-104(r3)
   407a4:	10000826 	beq	r2,zero,407c8 <__sfp+0x88>
   407a8:	213fffc4 	addi	r4,r4,-1
   407ac:	1c3ffd04 	addi	r16,r3,-12
   407b0:	18c01a04 	addi	r3,r3,104
   407b4:	247ffa1e 	bne	r4,r17,407a0 <__alt_data_end+0xfffce7a0>
   407b8:	90800017 	ldw	r2,0(r18)
   407bc:	10001d26 	beq	r2,zero,40834 <__sfp+0xf4>
   407c0:	1025883a 	mov	r18,r2
   407c4:	003fee06 	br	40780 <__alt_data_end+0xfffce780>
   407c8:	00bfffc4 	movi	r2,-1
   407cc:	8080038d 	sth	r2,14(r16)
   407d0:	00800044 	movi	r2,1
   407d4:	8080030d 	sth	r2,12(r16)
   407d8:	80001915 	stw	zero,100(r16)
   407dc:	80000015 	stw	zero,0(r16)
   407e0:	80000215 	stw	zero,8(r16)
   407e4:	80000115 	stw	zero,4(r16)
   407e8:	80000415 	stw	zero,16(r16)
   407ec:	80000515 	stw	zero,20(r16)
   407f0:	80000615 	stw	zero,24(r16)
   407f4:	01800204 	movi	r6,8
   407f8:	000b883a 	mov	r5,zero
   407fc:	81001704 	addi	r4,r16,92
   40800:	0041aa40 	call	41aa4 <memset>
   40804:	8005883a 	mov	r2,r16
   40808:	80000c15 	stw	zero,48(r16)
   4080c:	80000d15 	stw	zero,52(r16)
   40810:	80001115 	stw	zero,68(r16)
   40814:	80001215 	stw	zero,72(r16)
   40818:	dfc00417 	ldw	ra,16(sp)
   4081c:	dcc00317 	ldw	r19,12(sp)
   40820:	dc800217 	ldw	r18,8(sp)
   40824:	dc400117 	ldw	r17,4(sp)
   40828:	dc000017 	ldw	r16,0(sp)
   4082c:	dec00504 	addi	sp,sp,20
   40830:	f800283a 	ret
   40834:	01400104 	movi	r5,4
   40838:	9809883a 	mov	r4,r19
   4083c:	00406c80 	call	406c8 <__sfmoreglue>
   40840:	90800015 	stw	r2,0(r18)
   40844:	103fde1e 	bne	r2,zero,407c0 <__alt_data_end+0xfffce7c0>
   40848:	00800304 	movi	r2,12
   4084c:	98800015 	stw	r2,0(r19)
   40850:	0005883a 	mov	r2,zero
   40854:	003ff006 	br	40818 <__alt_data_end+0xfffce818>

00040858 <_cleanup>:
   40858:	00800134 	movhi	r2,4
   4085c:	109e0d04 	addi	r2,r2,30772
   40860:	11000017 	ldw	r4,0(r2)
   40864:	01400134 	movhi	r5,4
   40868:	29493204 	addi	r5,r5,9416
   4086c:	0040e4c1 	jmpi	40e4c <_fwalk_reent>

00040870 <__sinit>:
   40870:	20800e17 	ldw	r2,56(r4)
   40874:	10000126 	beq	r2,zero,4087c <__sinit+0xc>
   40878:	f800283a 	ret
   4087c:	00405241 	jmpi	40524 <__sinit.part.1>

00040880 <__sfp_lock_acquire>:
   40880:	f800283a 	ret

00040884 <__sfp_lock_release>:
   40884:	f800283a 	ret

00040888 <__sinit_lock_acquire>:
   40888:	f800283a 	ret

0004088c <__sinit_lock_release>:
   4088c:	f800283a 	ret

00040890 <__fp_lock_all>:
   40890:	00800134 	movhi	r2,4
   40894:	109e0e04 	addi	r2,r2,30776
   40898:	11000017 	ldw	r4,0(r2)
   4089c:	01400134 	movhi	r5,4
   408a0:	2941b004 	addi	r5,r5,1728
   408a4:	0040d881 	jmpi	40d88 <_fwalk>

000408a8 <__fp_unlock_all>:
   408a8:	00800134 	movhi	r2,4
   408ac:	109e0e04 	addi	r2,r2,30776
   408b0:	11000017 	ldw	r4,0(r2)
   408b4:	01400134 	movhi	r5,4
   408b8:	29414404 	addi	r5,r5,1296
   408bc:	0040d881 	jmpi	40d88 <_fwalk>

000408c0 <__sfvwrite_r>:
   408c0:	30800217 	ldw	r2,8(r6)
   408c4:	10006726 	beq	r2,zero,40a64 <__sfvwrite_r+0x1a4>
   408c8:	28c0030b 	ldhu	r3,12(r5)
   408cc:	defff404 	addi	sp,sp,-48
   408d0:	dd400715 	stw	r21,28(sp)
   408d4:	dd000615 	stw	r20,24(sp)
   408d8:	dc000215 	stw	r16,8(sp)
   408dc:	dfc00b15 	stw	ra,44(sp)
   408e0:	df000a15 	stw	fp,40(sp)
   408e4:	ddc00915 	stw	r23,36(sp)
   408e8:	dd800815 	stw	r22,32(sp)
   408ec:	dcc00515 	stw	r19,20(sp)
   408f0:	dc800415 	stw	r18,16(sp)
   408f4:	dc400315 	stw	r17,12(sp)
   408f8:	1880020c 	andi	r2,r3,8
   408fc:	2821883a 	mov	r16,r5
   40900:	202b883a 	mov	r21,r4
   40904:	3029883a 	mov	r20,r6
   40908:	10002726 	beq	r2,zero,409a8 <__sfvwrite_r+0xe8>
   4090c:	28800417 	ldw	r2,16(r5)
   40910:	10002526 	beq	r2,zero,409a8 <__sfvwrite_r+0xe8>
   40914:	1880008c 	andi	r2,r3,2
   40918:	a4400017 	ldw	r17,0(r20)
   4091c:	10002a26 	beq	r2,zero,409c8 <__sfvwrite_r+0x108>
   40920:	05a00034 	movhi	r22,32768
   40924:	0027883a 	mov	r19,zero
   40928:	0025883a 	mov	r18,zero
   4092c:	b5bf0004 	addi	r22,r22,-1024
   40930:	980d883a 	mov	r6,r19
   40934:	a809883a 	mov	r4,r21
   40938:	90004626 	beq	r18,zero,40a54 <__sfvwrite_r+0x194>
   4093c:	900f883a 	mov	r7,r18
   40940:	b480022e 	bgeu	r22,r18,4094c <__sfvwrite_r+0x8c>
   40944:	01e00034 	movhi	r7,32768
   40948:	39ff0004 	addi	r7,r7,-1024
   4094c:	80800917 	ldw	r2,36(r16)
   40950:	81400717 	ldw	r5,28(r16)
   40954:	103ee83a 	callr	r2
   40958:	00805a0e 	bge	zero,r2,40ac4 <__sfvwrite_r+0x204>
   4095c:	a0c00217 	ldw	r3,8(r20)
   40960:	98a7883a 	add	r19,r19,r2
   40964:	90a5c83a 	sub	r18,r18,r2
   40968:	1885c83a 	sub	r2,r3,r2
   4096c:	a0800215 	stw	r2,8(r20)
   40970:	103fef1e 	bne	r2,zero,40930 <__alt_data_end+0xfffce930>
   40974:	0005883a 	mov	r2,zero
   40978:	dfc00b17 	ldw	ra,44(sp)
   4097c:	df000a17 	ldw	fp,40(sp)
   40980:	ddc00917 	ldw	r23,36(sp)
   40984:	dd800817 	ldw	r22,32(sp)
   40988:	dd400717 	ldw	r21,28(sp)
   4098c:	dd000617 	ldw	r20,24(sp)
   40990:	dcc00517 	ldw	r19,20(sp)
   40994:	dc800417 	ldw	r18,16(sp)
   40998:	dc400317 	ldw	r17,12(sp)
   4099c:	dc000217 	ldw	r16,8(sp)
   409a0:	dec00c04 	addi	sp,sp,48
   409a4:	f800283a 	ret
   409a8:	800b883a 	mov	r5,r16
   409ac:	a809883a 	mov	r4,r21
   409b0:	00423200 	call	42320 <__swsetup_r>
   409b4:	1000ee1e 	bne	r2,zero,40d70 <__sfvwrite_r+0x4b0>
   409b8:	80c0030b 	ldhu	r3,12(r16)
   409bc:	a4400017 	ldw	r17,0(r20)
   409c0:	1880008c 	andi	r2,r3,2
   409c4:	103fd61e 	bne	r2,zero,40920 <__alt_data_end+0xfffce920>
   409c8:	1880004c 	andi	r2,r3,1
   409cc:	1000421e 	bne	r2,zero,40ad8 <__sfvwrite_r+0x218>
   409d0:	0039883a 	mov	fp,zero
   409d4:	0025883a 	mov	r18,zero
   409d8:	90001a26 	beq	r18,zero,40a44 <__sfvwrite_r+0x184>
   409dc:	1880800c 	andi	r2,r3,512
   409e0:	84c00217 	ldw	r19,8(r16)
   409e4:	10002126 	beq	r2,zero,40a6c <__sfvwrite_r+0x1ac>
   409e8:	982f883a 	mov	r23,r19
   409ec:	94c09636 	bltu	r18,r19,40c48 <__sfvwrite_r+0x388>
   409f0:	1881200c 	andi	r2,r3,1152
   409f4:	1000a11e 	bne	r2,zero,40c7c <__sfvwrite_r+0x3bc>
   409f8:	81000017 	ldw	r4,0(r16)
   409fc:	b80d883a 	mov	r6,r23
   40a00:	e00b883a 	mov	r5,fp
   40a04:	00419480 	call	41948 <memmove>
   40a08:	80c00217 	ldw	r3,8(r16)
   40a0c:	81000017 	ldw	r4,0(r16)
   40a10:	9005883a 	mov	r2,r18
   40a14:	1ce7c83a 	sub	r19,r3,r19
   40a18:	25cf883a 	add	r7,r4,r23
   40a1c:	84c00215 	stw	r19,8(r16)
   40a20:	81c00015 	stw	r7,0(r16)
   40a24:	a0c00217 	ldw	r3,8(r20)
   40a28:	e0b9883a 	add	fp,fp,r2
   40a2c:	90a5c83a 	sub	r18,r18,r2
   40a30:	18a7c83a 	sub	r19,r3,r2
   40a34:	a4c00215 	stw	r19,8(r20)
   40a38:	983fce26 	beq	r19,zero,40974 <__alt_data_end+0xfffce974>
   40a3c:	80c0030b 	ldhu	r3,12(r16)
   40a40:	903fe61e 	bne	r18,zero,409dc <__alt_data_end+0xfffce9dc>
   40a44:	8f000017 	ldw	fp,0(r17)
   40a48:	8c800117 	ldw	r18,4(r17)
   40a4c:	8c400204 	addi	r17,r17,8
   40a50:	003fe106 	br	409d8 <__alt_data_end+0xfffce9d8>
   40a54:	8cc00017 	ldw	r19,0(r17)
   40a58:	8c800117 	ldw	r18,4(r17)
   40a5c:	8c400204 	addi	r17,r17,8
   40a60:	003fb306 	br	40930 <__alt_data_end+0xfffce930>
   40a64:	0005883a 	mov	r2,zero
   40a68:	f800283a 	ret
   40a6c:	81000017 	ldw	r4,0(r16)
   40a70:	80800417 	ldw	r2,16(r16)
   40a74:	11005a36 	bltu	r2,r4,40be0 <__sfvwrite_r+0x320>
   40a78:	85c00517 	ldw	r23,20(r16)
   40a7c:	95c05836 	bltu	r18,r23,40be0 <__sfvwrite_r+0x320>
   40a80:	00a00034 	movhi	r2,32768
   40a84:	10bfffc4 	addi	r2,r2,-1
   40a88:	9009883a 	mov	r4,r18
   40a8c:	1480012e 	bgeu	r2,r18,40a94 <__sfvwrite_r+0x1d4>
   40a90:	1009883a 	mov	r4,r2
   40a94:	b80b883a 	mov	r5,r23
   40a98:	0042fd40 	call	42fd4 <__divsi3>
   40a9c:	b80b883a 	mov	r5,r23
   40aa0:	1009883a 	mov	r4,r2
   40aa4:	00431880 	call	43188 <__mulsi3>
   40aa8:	81400717 	ldw	r5,28(r16)
   40aac:	80c00917 	ldw	r3,36(r16)
   40ab0:	100f883a 	mov	r7,r2
   40ab4:	e00d883a 	mov	r6,fp
   40ab8:	a809883a 	mov	r4,r21
   40abc:	183ee83a 	callr	r3
   40ac0:	00bfd816 	blt	zero,r2,40a24 <__alt_data_end+0xfffcea24>
   40ac4:	8080030b 	ldhu	r2,12(r16)
   40ac8:	10801014 	ori	r2,r2,64
   40acc:	8080030d 	sth	r2,12(r16)
   40ad0:	00bfffc4 	movi	r2,-1
   40ad4:	003fa806 	br	40978 <__alt_data_end+0xfffce978>
   40ad8:	0027883a 	mov	r19,zero
   40adc:	0011883a 	mov	r8,zero
   40ae0:	0039883a 	mov	fp,zero
   40ae4:	0025883a 	mov	r18,zero
   40ae8:	90001f26 	beq	r18,zero,40b68 <__sfvwrite_r+0x2a8>
   40aec:	40005a26 	beq	r8,zero,40c58 <__sfvwrite_r+0x398>
   40af0:	982d883a 	mov	r22,r19
   40af4:	94c0012e 	bgeu	r18,r19,40afc <__sfvwrite_r+0x23c>
   40af8:	902d883a 	mov	r22,r18
   40afc:	81000017 	ldw	r4,0(r16)
   40b00:	80800417 	ldw	r2,16(r16)
   40b04:	b02f883a 	mov	r23,r22
   40b08:	81c00517 	ldw	r7,20(r16)
   40b0c:	1100032e 	bgeu	r2,r4,40b1c <__sfvwrite_r+0x25c>
   40b10:	80c00217 	ldw	r3,8(r16)
   40b14:	38c7883a 	add	r3,r7,r3
   40b18:	1d801816 	blt	r3,r22,40b7c <__sfvwrite_r+0x2bc>
   40b1c:	b1c03e16 	blt	r22,r7,40c18 <__sfvwrite_r+0x358>
   40b20:	80800917 	ldw	r2,36(r16)
   40b24:	81400717 	ldw	r5,28(r16)
   40b28:	e00d883a 	mov	r6,fp
   40b2c:	da000115 	stw	r8,4(sp)
   40b30:	a809883a 	mov	r4,r21
   40b34:	103ee83a 	callr	r2
   40b38:	102f883a 	mov	r23,r2
   40b3c:	da000117 	ldw	r8,4(sp)
   40b40:	00bfe00e 	bge	zero,r2,40ac4 <__alt_data_end+0xfffceac4>
   40b44:	9de7c83a 	sub	r19,r19,r23
   40b48:	98001f26 	beq	r19,zero,40bc8 <__sfvwrite_r+0x308>
   40b4c:	a0800217 	ldw	r2,8(r20)
   40b50:	e5f9883a 	add	fp,fp,r23
   40b54:	95e5c83a 	sub	r18,r18,r23
   40b58:	15efc83a 	sub	r23,r2,r23
   40b5c:	a5c00215 	stw	r23,8(r20)
   40b60:	b83f8426 	beq	r23,zero,40974 <__alt_data_end+0xfffce974>
   40b64:	903fe11e 	bne	r18,zero,40aec <__alt_data_end+0xfffceaec>
   40b68:	8f000017 	ldw	fp,0(r17)
   40b6c:	8c800117 	ldw	r18,4(r17)
   40b70:	0011883a 	mov	r8,zero
   40b74:	8c400204 	addi	r17,r17,8
   40b78:	003fdb06 	br	40ae8 <__alt_data_end+0xfffceae8>
   40b7c:	180d883a 	mov	r6,r3
   40b80:	e00b883a 	mov	r5,fp
   40b84:	da000115 	stw	r8,4(sp)
   40b88:	d8c00015 	stw	r3,0(sp)
   40b8c:	00419480 	call	41948 <memmove>
   40b90:	d8c00017 	ldw	r3,0(sp)
   40b94:	80800017 	ldw	r2,0(r16)
   40b98:	800b883a 	mov	r5,r16
   40b9c:	a809883a 	mov	r4,r21
   40ba0:	10c5883a 	add	r2,r2,r3
   40ba4:	80800015 	stw	r2,0(r16)
   40ba8:	d8c00015 	stw	r3,0(sp)
   40bac:	00427e80 	call	427e8 <_fflush_r>
   40bb0:	d8c00017 	ldw	r3,0(sp)
   40bb4:	da000117 	ldw	r8,4(sp)
   40bb8:	103fc21e 	bne	r2,zero,40ac4 <__alt_data_end+0xfffceac4>
   40bbc:	182f883a 	mov	r23,r3
   40bc0:	9de7c83a 	sub	r19,r19,r23
   40bc4:	983fe11e 	bne	r19,zero,40b4c <__alt_data_end+0xfffceb4c>
   40bc8:	800b883a 	mov	r5,r16
   40bcc:	a809883a 	mov	r4,r21
   40bd0:	00427e80 	call	427e8 <_fflush_r>
   40bd4:	103fbb1e 	bne	r2,zero,40ac4 <__alt_data_end+0xfffceac4>
   40bd8:	0011883a 	mov	r8,zero
   40bdc:	003fdb06 	br	40b4c <__alt_data_end+0xfffceb4c>
   40be0:	94c0012e 	bgeu	r18,r19,40be8 <__sfvwrite_r+0x328>
   40be4:	9027883a 	mov	r19,r18
   40be8:	980d883a 	mov	r6,r19
   40bec:	e00b883a 	mov	r5,fp
   40bf0:	00419480 	call	41948 <memmove>
   40bf4:	80800217 	ldw	r2,8(r16)
   40bf8:	80c00017 	ldw	r3,0(r16)
   40bfc:	14c5c83a 	sub	r2,r2,r19
   40c00:	1cc7883a 	add	r3,r3,r19
   40c04:	80800215 	stw	r2,8(r16)
   40c08:	80c00015 	stw	r3,0(r16)
   40c0c:	10004326 	beq	r2,zero,40d1c <__sfvwrite_r+0x45c>
   40c10:	9805883a 	mov	r2,r19
   40c14:	003f8306 	br	40a24 <__alt_data_end+0xfffcea24>
   40c18:	b00d883a 	mov	r6,r22
   40c1c:	e00b883a 	mov	r5,fp
   40c20:	da000115 	stw	r8,4(sp)
   40c24:	00419480 	call	41948 <memmove>
   40c28:	80800217 	ldw	r2,8(r16)
   40c2c:	80c00017 	ldw	r3,0(r16)
   40c30:	da000117 	ldw	r8,4(sp)
   40c34:	1585c83a 	sub	r2,r2,r22
   40c38:	1dad883a 	add	r22,r3,r22
   40c3c:	80800215 	stw	r2,8(r16)
   40c40:	85800015 	stw	r22,0(r16)
   40c44:	003fbf06 	br	40b44 <__alt_data_end+0xfffceb44>
   40c48:	81000017 	ldw	r4,0(r16)
   40c4c:	9027883a 	mov	r19,r18
   40c50:	902f883a 	mov	r23,r18
   40c54:	003f6906 	br	409fc <__alt_data_end+0xfffce9fc>
   40c58:	900d883a 	mov	r6,r18
   40c5c:	01400284 	movi	r5,10
   40c60:	e009883a 	mov	r4,fp
   40c64:	004171c0 	call	4171c <memchr>
   40c68:	10003e26 	beq	r2,zero,40d64 <__sfvwrite_r+0x4a4>
   40c6c:	10800044 	addi	r2,r2,1
   40c70:	1727c83a 	sub	r19,r2,fp
   40c74:	02000044 	movi	r8,1
   40c78:	003f9d06 	br	40af0 <__alt_data_end+0xfffceaf0>
   40c7c:	80800517 	ldw	r2,20(r16)
   40c80:	81400417 	ldw	r5,16(r16)
   40c84:	81c00017 	ldw	r7,0(r16)
   40c88:	10a7883a 	add	r19,r2,r2
   40c8c:	9885883a 	add	r2,r19,r2
   40c90:	1026d7fa 	srli	r19,r2,31
   40c94:	396dc83a 	sub	r22,r7,r5
   40c98:	b1000044 	addi	r4,r22,1
   40c9c:	9885883a 	add	r2,r19,r2
   40ca0:	1027d07a 	srai	r19,r2,1
   40ca4:	2485883a 	add	r2,r4,r18
   40ca8:	980d883a 	mov	r6,r19
   40cac:	9880022e 	bgeu	r19,r2,40cb8 <__sfvwrite_r+0x3f8>
   40cb0:	1027883a 	mov	r19,r2
   40cb4:	100d883a 	mov	r6,r2
   40cb8:	18c1000c 	andi	r3,r3,1024
   40cbc:	18001c26 	beq	r3,zero,40d30 <__sfvwrite_r+0x470>
   40cc0:	300b883a 	mov	r5,r6
   40cc4:	a809883a 	mov	r4,r21
   40cc8:	0040f100 	call	40f10 <_malloc_r>
   40ccc:	102f883a 	mov	r23,r2
   40cd0:	10002926 	beq	r2,zero,40d78 <__sfvwrite_r+0x4b8>
   40cd4:	81400417 	ldw	r5,16(r16)
   40cd8:	b00d883a 	mov	r6,r22
   40cdc:	1009883a 	mov	r4,r2
   40ce0:	00418000 	call	41800 <memcpy>
   40ce4:	8080030b 	ldhu	r2,12(r16)
   40ce8:	00fedfc4 	movi	r3,-1153
   40cec:	10c4703a 	and	r2,r2,r3
   40cf0:	10802014 	ori	r2,r2,128
   40cf4:	8080030d 	sth	r2,12(r16)
   40cf8:	bd89883a 	add	r4,r23,r22
   40cfc:	9d8fc83a 	sub	r7,r19,r22
   40d00:	85c00415 	stw	r23,16(r16)
   40d04:	84c00515 	stw	r19,20(r16)
   40d08:	81000015 	stw	r4,0(r16)
   40d0c:	9027883a 	mov	r19,r18
   40d10:	81c00215 	stw	r7,8(r16)
   40d14:	902f883a 	mov	r23,r18
   40d18:	003f3806 	br	409fc <__alt_data_end+0xfffce9fc>
   40d1c:	800b883a 	mov	r5,r16
   40d20:	a809883a 	mov	r4,r21
   40d24:	00427e80 	call	427e8 <_fflush_r>
   40d28:	103fb926 	beq	r2,zero,40c10 <__alt_data_end+0xfffcec10>
   40d2c:	003f6506 	br	40ac4 <__alt_data_end+0xfffceac4>
   40d30:	a809883a 	mov	r4,r21
   40d34:	0041bcc0 	call	41bcc <_realloc_r>
   40d38:	102f883a 	mov	r23,r2
   40d3c:	103fee1e 	bne	r2,zero,40cf8 <__alt_data_end+0xfffcecf8>
   40d40:	81400417 	ldw	r5,16(r16)
   40d44:	a809883a 	mov	r4,r21
   40d48:	00429980 	call	42998 <_free_r>
   40d4c:	8080030b 	ldhu	r2,12(r16)
   40d50:	00ffdfc4 	movi	r3,-129
   40d54:	1884703a 	and	r2,r3,r2
   40d58:	00c00304 	movi	r3,12
   40d5c:	a8c00015 	stw	r3,0(r21)
   40d60:	003f5906 	br	40ac8 <__alt_data_end+0xfffceac8>
   40d64:	94c00044 	addi	r19,r18,1
   40d68:	02000044 	movi	r8,1
   40d6c:	003f6006 	br	40af0 <__alt_data_end+0xfffceaf0>
   40d70:	00bfffc4 	movi	r2,-1
   40d74:	003f0006 	br	40978 <__alt_data_end+0xfffce978>
   40d78:	00800304 	movi	r2,12
   40d7c:	a8800015 	stw	r2,0(r21)
   40d80:	8080030b 	ldhu	r2,12(r16)
   40d84:	003f5006 	br	40ac8 <__alt_data_end+0xfffceac8>

00040d88 <_fwalk>:
   40d88:	defff704 	addi	sp,sp,-36
   40d8c:	dd000415 	stw	r20,16(sp)
   40d90:	dfc00815 	stw	ra,32(sp)
   40d94:	ddc00715 	stw	r23,28(sp)
   40d98:	dd800615 	stw	r22,24(sp)
   40d9c:	dd400515 	stw	r21,20(sp)
   40da0:	dcc00315 	stw	r19,12(sp)
   40da4:	dc800215 	stw	r18,8(sp)
   40da8:	dc400115 	stw	r17,4(sp)
   40dac:	dc000015 	stw	r16,0(sp)
   40db0:	2500b804 	addi	r20,r4,736
   40db4:	a0002326 	beq	r20,zero,40e44 <_fwalk+0xbc>
   40db8:	282b883a 	mov	r21,r5
   40dbc:	002f883a 	mov	r23,zero
   40dc0:	05800044 	movi	r22,1
   40dc4:	04ffffc4 	movi	r19,-1
   40dc8:	a4400117 	ldw	r17,4(r20)
   40dcc:	a4800217 	ldw	r18,8(r20)
   40dd0:	8c7fffc4 	addi	r17,r17,-1
   40dd4:	88000d16 	blt	r17,zero,40e0c <_fwalk+0x84>
   40dd8:	94000304 	addi	r16,r18,12
   40ddc:	94800384 	addi	r18,r18,14
   40de0:	8080000b 	ldhu	r2,0(r16)
   40de4:	8c7fffc4 	addi	r17,r17,-1
   40de8:	813ffd04 	addi	r4,r16,-12
   40dec:	b080042e 	bgeu	r22,r2,40e00 <_fwalk+0x78>
   40df0:	9080000f 	ldh	r2,0(r18)
   40df4:	14c00226 	beq	r2,r19,40e00 <_fwalk+0x78>
   40df8:	a83ee83a 	callr	r21
   40dfc:	b8aeb03a 	or	r23,r23,r2
   40e00:	84001a04 	addi	r16,r16,104
   40e04:	94801a04 	addi	r18,r18,104
   40e08:	8cfff51e 	bne	r17,r19,40de0 <__alt_data_end+0xfffcede0>
   40e0c:	a5000017 	ldw	r20,0(r20)
   40e10:	a03fed1e 	bne	r20,zero,40dc8 <__alt_data_end+0xfffcedc8>
   40e14:	b805883a 	mov	r2,r23
   40e18:	dfc00817 	ldw	ra,32(sp)
   40e1c:	ddc00717 	ldw	r23,28(sp)
   40e20:	dd800617 	ldw	r22,24(sp)
   40e24:	dd400517 	ldw	r21,20(sp)
   40e28:	dd000417 	ldw	r20,16(sp)
   40e2c:	dcc00317 	ldw	r19,12(sp)
   40e30:	dc800217 	ldw	r18,8(sp)
   40e34:	dc400117 	ldw	r17,4(sp)
   40e38:	dc000017 	ldw	r16,0(sp)
   40e3c:	dec00904 	addi	sp,sp,36
   40e40:	f800283a 	ret
   40e44:	002f883a 	mov	r23,zero
   40e48:	003ff206 	br	40e14 <__alt_data_end+0xfffcee14>

00040e4c <_fwalk_reent>:
   40e4c:	defff704 	addi	sp,sp,-36
   40e50:	dd000415 	stw	r20,16(sp)
   40e54:	dfc00815 	stw	ra,32(sp)
   40e58:	ddc00715 	stw	r23,28(sp)
   40e5c:	dd800615 	stw	r22,24(sp)
   40e60:	dd400515 	stw	r21,20(sp)
   40e64:	dcc00315 	stw	r19,12(sp)
   40e68:	dc800215 	stw	r18,8(sp)
   40e6c:	dc400115 	stw	r17,4(sp)
   40e70:	dc000015 	stw	r16,0(sp)
   40e74:	2500b804 	addi	r20,r4,736
   40e78:	a0002326 	beq	r20,zero,40f08 <_fwalk_reent+0xbc>
   40e7c:	282b883a 	mov	r21,r5
   40e80:	2027883a 	mov	r19,r4
   40e84:	002f883a 	mov	r23,zero
   40e88:	05800044 	movi	r22,1
   40e8c:	04bfffc4 	movi	r18,-1
   40e90:	a4400117 	ldw	r17,4(r20)
   40e94:	a4000217 	ldw	r16,8(r20)
   40e98:	8c7fffc4 	addi	r17,r17,-1
   40e9c:	88000c16 	blt	r17,zero,40ed0 <_fwalk_reent+0x84>
   40ea0:	84000304 	addi	r16,r16,12
   40ea4:	8080000b 	ldhu	r2,0(r16)
   40ea8:	8c7fffc4 	addi	r17,r17,-1
   40eac:	817ffd04 	addi	r5,r16,-12
   40eb0:	b080052e 	bgeu	r22,r2,40ec8 <_fwalk_reent+0x7c>
   40eb4:	8080008f 	ldh	r2,2(r16)
   40eb8:	9809883a 	mov	r4,r19
   40ebc:	14800226 	beq	r2,r18,40ec8 <_fwalk_reent+0x7c>
   40ec0:	a83ee83a 	callr	r21
   40ec4:	b8aeb03a 	or	r23,r23,r2
   40ec8:	84001a04 	addi	r16,r16,104
   40ecc:	8cbff51e 	bne	r17,r18,40ea4 <__alt_data_end+0xfffceea4>
   40ed0:	a5000017 	ldw	r20,0(r20)
   40ed4:	a03fee1e 	bne	r20,zero,40e90 <__alt_data_end+0xfffcee90>
   40ed8:	b805883a 	mov	r2,r23
   40edc:	dfc00817 	ldw	ra,32(sp)
   40ee0:	ddc00717 	ldw	r23,28(sp)
   40ee4:	dd800617 	ldw	r22,24(sp)
   40ee8:	dd400517 	ldw	r21,20(sp)
   40eec:	dd000417 	ldw	r20,16(sp)
   40ef0:	dcc00317 	ldw	r19,12(sp)
   40ef4:	dc800217 	ldw	r18,8(sp)
   40ef8:	dc400117 	ldw	r17,4(sp)
   40efc:	dc000017 	ldw	r16,0(sp)
   40f00:	dec00904 	addi	sp,sp,36
   40f04:	f800283a 	ret
   40f08:	002f883a 	mov	r23,zero
   40f0c:	003ff206 	br	40ed8 <__alt_data_end+0xfffceed8>

00040f10 <_malloc_r>:
   40f10:	defff504 	addi	sp,sp,-44
   40f14:	dc800315 	stw	r18,12(sp)
   40f18:	dfc00a15 	stw	ra,40(sp)
   40f1c:	df000915 	stw	fp,36(sp)
   40f20:	ddc00815 	stw	r23,32(sp)
   40f24:	dd800715 	stw	r22,28(sp)
   40f28:	dd400615 	stw	r21,24(sp)
   40f2c:	dd000515 	stw	r20,20(sp)
   40f30:	dcc00415 	stw	r19,16(sp)
   40f34:	dc400215 	stw	r17,8(sp)
   40f38:	dc000115 	stw	r16,4(sp)
   40f3c:	288002c4 	addi	r2,r5,11
   40f40:	00c00584 	movi	r3,22
   40f44:	2025883a 	mov	r18,r4
   40f48:	18807f2e 	bgeu	r3,r2,41148 <_malloc_r+0x238>
   40f4c:	047ffe04 	movi	r17,-8
   40f50:	1462703a 	and	r17,r2,r17
   40f54:	8800a316 	blt	r17,zero,411e4 <_malloc_r+0x2d4>
   40f58:	8940a236 	bltu	r17,r5,411e4 <_malloc_r+0x2d4>
   40f5c:	004374c0 	call	4374c <__malloc_lock>
   40f60:	00807dc4 	movi	r2,503
   40f64:	1441e92e 	bgeu	r2,r17,4170c <_malloc_r+0x7fc>
   40f68:	8804d27a 	srli	r2,r17,9
   40f6c:	1000a126 	beq	r2,zero,411f4 <_malloc_r+0x2e4>
   40f70:	00c00104 	movi	r3,4
   40f74:	18811e36 	bltu	r3,r2,413f0 <_malloc_r+0x4e0>
   40f78:	8804d1ba 	srli	r2,r17,6
   40f7c:	12000e44 	addi	r8,r2,57
   40f80:	11c00e04 	addi	r7,r2,56
   40f84:	4209883a 	add	r4,r8,r8
   40f88:	04c00134 	movhi	r19,4
   40f8c:	2109883a 	add	r4,r4,r4
   40f90:	9cd87e04 	addi	r19,r19,25080
   40f94:	2109883a 	add	r4,r4,r4
   40f98:	9909883a 	add	r4,r19,r4
   40f9c:	24000117 	ldw	r16,4(r4)
   40fa0:	213ffe04 	addi	r4,r4,-8
   40fa4:	24009726 	beq	r4,r16,41204 <_malloc_r+0x2f4>
   40fa8:	80800117 	ldw	r2,4(r16)
   40fac:	01bfff04 	movi	r6,-4
   40fb0:	014003c4 	movi	r5,15
   40fb4:	1184703a 	and	r2,r2,r6
   40fb8:	1447c83a 	sub	r3,r2,r17
   40fbc:	28c00716 	blt	r5,r3,40fdc <_malloc_r+0xcc>
   40fc0:	1800920e 	bge	r3,zero,4120c <_malloc_r+0x2fc>
   40fc4:	84000317 	ldw	r16,12(r16)
   40fc8:	24008e26 	beq	r4,r16,41204 <_malloc_r+0x2f4>
   40fcc:	80800117 	ldw	r2,4(r16)
   40fd0:	1184703a 	and	r2,r2,r6
   40fd4:	1447c83a 	sub	r3,r2,r17
   40fd8:	28fff90e 	bge	r5,r3,40fc0 <__alt_data_end+0xfffcefc0>
   40fdc:	3809883a 	mov	r4,r7
   40fe0:	01800134 	movhi	r6,4
   40fe4:	9c000417 	ldw	r16,16(r19)
   40fe8:	31987e04 	addi	r6,r6,25080
   40fec:	32000204 	addi	r8,r6,8
   40ff0:	82013426 	beq	r16,r8,414c4 <_malloc_r+0x5b4>
   40ff4:	80c00117 	ldw	r3,4(r16)
   40ff8:	00bfff04 	movi	r2,-4
   40ffc:	188e703a 	and	r7,r3,r2
   41000:	3c45c83a 	sub	r2,r7,r17
   41004:	00c003c4 	movi	r3,15
   41008:	18811f16 	blt	r3,r2,41488 <_malloc_r+0x578>
   4100c:	32000515 	stw	r8,20(r6)
   41010:	32000415 	stw	r8,16(r6)
   41014:	10007f0e 	bge	r2,zero,41214 <_malloc_r+0x304>
   41018:	00807fc4 	movi	r2,511
   4101c:	11c0fd36 	bltu	r2,r7,41414 <_malloc_r+0x504>
   41020:	3806d0fa 	srli	r3,r7,3
   41024:	01c00044 	movi	r7,1
   41028:	30800117 	ldw	r2,4(r6)
   4102c:	19400044 	addi	r5,r3,1
   41030:	294b883a 	add	r5,r5,r5
   41034:	1807d0ba 	srai	r3,r3,2
   41038:	294b883a 	add	r5,r5,r5
   4103c:	294b883a 	add	r5,r5,r5
   41040:	298b883a 	add	r5,r5,r6
   41044:	38c6983a 	sll	r3,r7,r3
   41048:	29c00017 	ldw	r7,0(r5)
   4104c:	2a7ffe04 	addi	r9,r5,-8
   41050:	1886b03a 	or	r3,r3,r2
   41054:	82400315 	stw	r9,12(r16)
   41058:	81c00215 	stw	r7,8(r16)
   4105c:	30c00115 	stw	r3,4(r6)
   41060:	2c000015 	stw	r16,0(r5)
   41064:	3c000315 	stw	r16,12(r7)
   41068:	2005d0ba 	srai	r2,r4,2
   4106c:	01400044 	movi	r5,1
   41070:	288a983a 	sll	r5,r5,r2
   41074:	19406f36 	bltu	r3,r5,41234 <_malloc_r+0x324>
   41078:	28c4703a 	and	r2,r5,r3
   4107c:	10000a1e 	bne	r2,zero,410a8 <_malloc_r+0x198>
   41080:	00bfff04 	movi	r2,-4
   41084:	294b883a 	add	r5,r5,r5
   41088:	2088703a 	and	r4,r4,r2
   4108c:	28c4703a 	and	r2,r5,r3
   41090:	21000104 	addi	r4,r4,4
   41094:	1000041e 	bne	r2,zero,410a8 <_malloc_r+0x198>
   41098:	294b883a 	add	r5,r5,r5
   4109c:	28c4703a 	and	r2,r5,r3
   410a0:	21000104 	addi	r4,r4,4
   410a4:	103ffc26 	beq	r2,zero,41098 <__alt_data_end+0xfffcf098>
   410a8:	02bfff04 	movi	r10,-4
   410ac:	024003c4 	movi	r9,15
   410b0:	21800044 	addi	r6,r4,1
   410b4:	318d883a 	add	r6,r6,r6
   410b8:	318d883a 	add	r6,r6,r6
   410bc:	318d883a 	add	r6,r6,r6
   410c0:	998d883a 	add	r6,r19,r6
   410c4:	333ffe04 	addi	r12,r6,-8
   410c8:	2017883a 	mov	r11,r4
   410cc:	31800104 	addi	r6,r6,4
   410d0:	34000017 	ldw	r16,0(r6)
   410d4:	31fffd04 	addi	r7,r6,-12
   410d8:	81c0041e 	bne	r16,r7,410ec <_malloc_r+0x1dc>
   410dc:	0000fb06 	br	414cc <_malloc_r+0x5bc>
   410e0:	1801030e 	bge	r3,zero,414f0 <_malloc_r+0x5e0>
   410e4:	84000317 	ldw	r16,12(r16)
   410e8:	81c0f826 	beq	r16,r7,414cc <_malloc_r+0x5bc>
   410ec:	80800117 	ldw	r2,4(r16)
   410f0:	1284703a 	and	r2,r2,r10
   410f4:	1447c83a 	sub	r3,r2,r17
   410f8:	48fff90e 	bge	r9,r3,410e0 <__alt_data_end+0xfffcf0e0>
   410fc:	80800317 	ldw	r2,12(r16)
   41100:	81000217 	ldw	r4,8(r16)
   41104:	89400054 	ori	r5,r17,1
   41108:	81400115 	stw	r5,4(r16)
   4110c:	20800315 	stw	r2,12(r4)
   41110:	11000215 	stw	r4,8(r2)
   41114:	8463883a 	add	r17,r16,r17
   41118:	9c400515 	stw	r17,20(r19)
   4111c:	9c400415 	stw	r17,16(r19)
   41120:	18800054 	ori	r2,r3,1
   41124:	88800115 	stw	r2,4(r17)
   41128:	8a000315 	stw	r8,12(r17)
   4112c:	8a000215 	stw	r8,8(r17)
   41130:	88e3883a 	add	r17,r17,r3
   41134:	88c00015 	stw	r3,0(r17)
   41138:	9009883a 	mov	r4,r18
   4113c:	00437700 	call	43770 <__malloc_unlock>
   41140:	80800204 	addi	r2,r16,8
   41144:	00001b06 	br	411b4 <_malloc_r+0x2a4>
   41148:	04400404 	movi	r17,16
   4114c:	89402536 	bltu	r17,r5,411e4 <_malloc_r+0x2d4>
   41150:	004374c0 	call	4374c <__malloc_lock>
   41154:	00800184 	movi	r2,6
   41158:	01000084 	movi	r4,2
   4115c:	04c00134 	movhi	r19,4
   41160:	1085883a 	add	r2,r2,r2
   41164:	9cd87e04 	addi	r19,r19,25080
   41168:	1085883a 	add	r2,r2,r2
   4116c:	9885883a 	add	r2,r19,r2
   41170:	14000117 	ldw	r16,4(r2)
   41174:	10fffe04 	addi	r3,r2,-8
   41178:	80c0d926 	beq	r16,r3,414e0 <_malloc_r+0x5d0>
   4117c:	80c00117 	ldw	r3,4(r16)
   41180:	81000317 	ldw	r4,12(r16)
   41184:	00bfff04 	movi	r2,-4
   41188:	1884703a 	and	r2,r3,r2
   4118c:	81400217 	ldw	r5,8(r16)
   41190:	8085883a 	add	r2,r16,r2
   41194:	10c00117 	ldw	r3,4(r2)
   41198:	29000315 	stw	r4,12(r5)
   4119c:	21400215 	stw	r5,8(r4)
   411a0:	18c00054 	ori	r3,r3,1
   411a4:	10c00115 	stw	r3,4(r2)
   411a8:	9009883a 	mov	r4,r18
   411ac:	00437700 	call	43770 <__malloc_unlock>
   411b0:	80800204 	addi	r2,r16,8
   411b4:	dfc00a17 	ldw	ra,40(sp)
   411b8:	df000917 	ldw	fp,36(sp)
   411bc:	ddc00817 	ldw	r23,32(sp)
   411c0:	dd800717 	ldw	r22,28(sp)
   411c4:	dd400617 	ldw	r21,24(sp)
   411c8:	dd000517 	ldw	r20,20(sp)
   411cc:	dcc00417 	ldw	r19,16(sp)
   411d0:	dc800317 	ldw	r18,12(sp)
   411d4:	dc400217 	ldw	r17,8(sp)
   411d8:	dc000117 	ldw	r16,4(sp)
   411dc:	dec00b04 	addi	sp,sp,44
   411e0:	f800283a 	ret
   411e4:	00800304 	movi	r2,12
   411e8:	90800015 	stw	r2,0(r18)
   411ec:	0005883a 	mov	r2,zero
   411f0:	003ff006 	br	411b4 <__alt_data_end+0xfffcf1b4>
   411f4:	01002004 	movi	r4,128
   411f8:	02001004 	movi	r8,64
   411fc:	01c00fc4 	movi	r7,63
   41200:	003f6106 	br	40f88 <__alt_data_end+0xfffcef88>
   41204:	4009883a 	mov	r4,r8
   41208:	003f7506 	br	40fe0 <__alt_data_end+0xfffcefe0>
   4120c:	81000317 	ldw	r4,12(r16)
   41210:	003fde06 	br	4118c <__alt_data_end+0xfffcf18c>
   41214:	81c5883a 	add	r2,r16,r7
   41218:	11400117 	ldw	r5,4(r2)
   4121c:	9009883a 	mov	r4,r18
   41220:	29400054 	ori	r5,r5,1
   41224:	11400115 	stw	r5,4(r2)
   41228:	00437700 	call	43770 <__malloc_unlock>
   4122c:	80800204 	addi	r2,r16,8
   41230:	003fe006 	br	411b4 <__alt_data_end+0xfffcf1b4>
   41234:	9c000217 	ldw	r16,8(r19)
   41238:	00bfff04 	movi	r2,-4
   4123c:	85800117 	ldw	r22,4(r16)
   41240:	b0ac703a 	and	r22,r22,r2
   41244:	b4400336 	bltu	r22,r17,41254 <_malloc_r+0x344>
   41248:	b445c83a 	sub	r2,r22,r17
   4124c:	00c003c4 	movi	r3,15
   41250:	18805d16 	blt	r3,r2,413c8 <_malloc_r+0x4b8>
   41254:	05c00134 	movhi	r23,4
   41258:	00800174 	movhi	r2,5
   4125c:	10a4c304 	addi	r2,r2,-27892
   41260:	bdde0f04 	addi	r23,r23,30780
   41264:	15400017 	ldw	r21,0(r2)
   41268:	b8c00017 	ldw	r3,0(r23)
   4126c:	00bfffc4 	movi	r2,-1
   41270:	858d883a 	add	r6,r16,r22
   41274:	8d6b883a 	add	r21,r17,r21
   41278:	1880ea26 	beq	r3,r2,41624 <_malloc_r+0x714>
   4127c:	ad4403c4 	addi	r21,r21,4111
   41280:	00bc0004 	movi	r2,-4096
   41284:	a8aa703a 	and	r21,r21,r2
   41288:	a80b883a 	mov	r5,r21
   4128c:	9009883a 	mov	r4,r18
   41290:	d9800015 	stw	r6,0(sp)
   41294:	00421300 	call	42130 <_sbrk_r>
   41298:	1029883a 	mov	r20,r2
   4129c:	00bfffc4 	movi	r2,-1
   412a0:	d9800017 	ldw	r6,0(sp)
   412a4:	a080e826 	beq	r20,r2,41648 <_malloc_r+0x738>
   412a8:	a180a636 	bltu	r20,r6,41544 <_malloc_r+0x634>
   412ac:	07000174 	movhi	fp,5
   412b0:	e724cc04 	addi	fp,fp,-27856
   412b4:	e0800017 	ldw	r2,0(fp)
   412b8:	a887883a 	add	r3,r21,r2
   412bc:	e0c00015 	stw	r3,0(fp)
   412c0:	3500e626 	beq	r6,r20,4165c <_malloc_r+0x74c>
   412c4:	b9000017 	ldw	r4,0(r23)
   412c8:	00bfffc4 	movi	r2,-1
   412cc:	2080ee26 	beq	r4,r2,41688 <_malloc_r+0x778>
   412d0:	a185c83a 	sub	r2,r20,r6
   412d4:	10c5883a 	add	r2,r2,r3
   412d8:	e0800015 	stw	r2,0(fp)
   412dc:	a0c001cc 	andi	r3,r20,7
   412e0:	1800bc26 	beq	r3,zero,415d4 <_malloc_r+0x6c4>
   412e4:	a0e9c83a 	sub	r20,r20,r3
   412e8:	00840204 	movi	r2,4104
   412ec:	a5000204 	addi	r20,r20,8
   412f0:	10c7c83a 	sub	r3,r2,r3
   412f4:	a545883a 	add	r2,r20,r21
   412f8:	1083ffcc 	andi	r2,r2,4095
   412fc:	18abc83a 	sub	r21,r3,r2
   41300:	a80b883a 	mov	r5,r21
   41304:	9009883a 	mov	r4,r18
   41308:	00421300 	call	42130 <_sbrk_r>
   4130c:	00ffffc4 	movi	r3,-1
   41310:	10c0e126 	beq	r2,r3,41698 <_malloc_r+0x788>
   41314:	1505c83a 	sub	r2,r2,r20
   41318:	1545883a 	add	r2,r2,r21
   4131c:	10800054 	ori	r2,r2,1
   41320:	e0c00017 	ldw	r3,0(fp)
   41324:	9d000215 	stw	r20,8(r19)
   41328:	a0800115 	stw	r2,4(r20)
   4132c:	a8c7883a 	add	r3,r21,r3
   41330:	e0c00015 	stw	r3,0(fp)
   41334:	84c00e26 	beq	r16,r19,41370 <_malloc_r+0x460>
   41338:	018003c4 	movi	r6,15
   4133c:	3580a72e 	bgeu	r6,r22,415dc <_malloc_r+0x6cc>
   41340:	81400117 	ldw	r5,4(r16)
   41344:	013ffe04 	movi	r4,-8
   41348:	b0bffd04 	addi	r2,r22,-12
   4134c:	1104703a 	and	r2,r2,r4
   41350:	2900004c 	andi	r4,r5,1
   41354:	2088b03a 	or	r4,r4,r2
   41358:	81000115 	stw	r4,4(r16)
   4135c:	01400144 	movi	r5,5
   41360:	8089883a 	add	r4,r16,r2
   41364:	21400115 	stw	r5,4(r4)
   41368:	21400215 	stw	r5,8(r4)
   4136c:	3080cd36 	bltu	r6,r2,416a4 <_malloc_r+0x794>
   41370:	00800174 	movhi	r2,5
   41374:	10a4c204 	addi	r2,r2,-27896
   41378:	11000017 	ldw	r4,0(r2)
   4137c:	20c0012e 	bgeu	r4,r3,41384 <_malloc_r+0x474>
   41380:	10c00015 	stw	r3,0(r2)
   41384:	00800174 	movhi	r2,5
   41388:	10a4c104 	addi	r2,r2,-27900
   4138c:	11000017 	ldw	r4,0(r2)
   41390:	9c000217 	ldw	r16,8(r19)
   41394:	20c0012e 	bgeu	r4,r3,4139c <_malloc_r+0x48c>
   41398:	10c00015 	stw	r3,0(r2)
   4139c:	80c00117 	ldw	r3,4(r16)
   413a0:	00bfff04 	movi	r2,-4
   413a4:	1886703a 	and	r3,r3,r2
   413a8:	1c45c83a 	sub	r2,r3,r17
   413ac:	1c400236 	bltu	r3,r17,413b8 <_malloc_r+0x4a8>
   413b0:	00c003c4 	movi	r3,15
   413b4:	18800416 	blt	r3,r2,413c8 <_malloc_r+0x4b8>
   413b8:	9009883a 	mov	r4,r18
   413bc:	00437700 	call	43770 <__malloc_unlock>
   413c0:	0005883a 	mov	r2,zero
   413c4:	003f7b06 	br	411b4 <__alt_data_end+0xfffcf1b4>
   413c8:	88c00054 	ori	r3,r17,1
   413cc:	80c00115 	stw	r3,4(r16)
   413d0:	8463883a 	add	r17,r16,r17
   413d4:	10800054 	ori	r2,r2,1
   413d8:	9c400215 	stw	r17,8(r19)
   413dc:	88800115 	stw	r2,4(r17)
   413e0:	9009883a 	mov	r4,r18
   413e4:	00437700 	call	43770 <__malloc_unlock>
   413e8:	80800204 	addi	r2,r16,8
   413ec:	003f7106 	br	411b4 <__alt_data_end+0xfffcf1b4>
   413f0:	00c00504 	movi	r3,20
   413f4:	18804a2e 	bgeu	r3,r2,41520 <_malloc_r+0x610>
   413f8:	00c01504 	movi	r3,84
   413fc:	18806e36 	bltu	r3,r2,415b8 <_malloc_r+0x6a8>
   41400:	8804d33a 	srli	r2,r17,12
   41404:	12001bc4 	addi	r8,r2,111
   41408:	11c01b84 	addi	r7,r2,110
   4140c:	4209883a 	add	r4,r8,r8
   41410:	003edd06 	br	40f88 <__alt_data_end+0xfffcef88>
   41414:	3804d27a 	srli	r2,r7,9
   41418:	00c00104 	movi	r3,4
   4141c:	1880442e 	bgeu	r3,r2,41530 <_malloc_r+0x620>
   41420:	00c00504 	movi	r3,20
   41424:	18808136 	bltu	r3,r2,4162c <_malloc_r+0x71c>
   41428:	11401704 	addi	r5,r2,92
   4142c:	10c016c4 	addi	r3,r2,91
   41430:	294b883a 	add	r5,r5,r5
   41434:	294b883a 	add	r5,r5,r5
   41438:	294b883a 	add	r5,r5,r5
   4143c:	994b883a 	add	r5,r19,r5
   41440:	28800017 	ldw	r2,0(r5)
   41444:	01800134 	movhi	r6,4
   41448:	297ffe04 	addi	r5,r5,-8
   4144c:	31987e04 	addi	r6,r6,25080
   41450:	28806526 	beq	r5,r2,415e8 <_malloc_r+0x6d8>
   41454:	01bfff04 	movi	r6,-4
   41458:	10c00117 	ldw	r3,4(r2)
   4145c:	1986703a 	and	r3,r3,r6
   41460:	38c0022e 	bgeu	r7,r3,4146c <_malloc_r+0x55c>
   41464:	10800217 	ldw	r2,8(r2)
   41468:	28bffb1e 	bne	r5,r2,41458 <__alt_data_end+0xfffcf458>
   4146c:	11400317 	ldw	r5,12(r2)
   41470:	98c00117 	ldw	r3,4(r19)
   41474:	81400315 	stw	r5,12(r16)
   41478:	80800215 	stw	r2,8(r16)
   4147c:	2c000215 	stw	r16,8(r5)
   41480:	14000315 	stw	r16,12(r2)
   41484:	003ef806 	br	41068 <__alt_data_end+0xfffcf068>
   41488:	88c00054 	ori	r3,r17,1
   4148c:	80c00115 	stw	r3,4(r16)
   41490:	8463883a 	add	r17,r16,r17
   41494:	34400515 	stw	r17,20(r6)
   41498:	34400415 	stw	r17,16(r6)
   4149c:	10c00054 	ori	r3,r2,1
   414a0:	8a000315 	stw	r8,12(r17)
   414a4:	8a000215 	stw	r8,8(r17)
   414a8:	88c00115 	stw	r3,4(r17)
   414ac:	88a3883a 	add	r17,r17,r2
   414b0:	88800015 	stw	r2,0(r17)
   414b4:	9009883a 	mov	r4,r18
   414b8:	00437700 	call	43770 <__malloc_unlock>
   414bc:	80800204 	addi	r2,r16,8
   414c0:	003f3c06 	br	411b4 <__alt_data_end+0xfffcf1b4>
   414c4:	30c00117 	ldw	r3,4(r6)
   414c8:	003ee706 	br	41068 <__alt_data_end+0xfffcf068>
   414cc:	5ac00044 	addi	r11,r11,1
   414d0:	588000cc 	andi	r2,r11,3
   414d4:	31800204 	addi	r6,r6,8
   414d8:	103efd1e 	bne	r2,zero,410d0 <__alt_data_end+0xfffcf0d0>
   414dc:	00002406 	br	41570 <_malloc_r+0x660>
   414e0:	14000317 	ldw	r16,12(r2)
   414e4:	143f251e 	bne	r2,r16,4117c <__alt_data_end+0xfffcf17c>
   414e8:	21000084 	addi	r4,r4,2
   414ec:	003ebc06 	br	40fe0 <__alt_data_end+0xfffcefe0>
   414f0:	8085883a 	add	r2,r16,r2
   414f4:	10c00117 	ldw	r3,4(r2)
   414f8:	81000317 	ldw	r4,12(r16)
   414fc:	81400217 	ldw	r5,8(r16)
   41500:	18c00054 	ori	r3,r3,1
   41504:	10c00115 	stw	r3,4(r2)
   41508:	29000315 	stw	r4,12(r5)
   4150c:	21400215 	stw	r5,8(r4)
   41510:	9009883a 	mov	r4,r18
   41514:	00437700 	call	43770 <__malloc_unlock>
   41518:	80800204 	addi	r2,r16,8
   4151c:	003f2506 	br	411b4 <__alt_data_end+0xfffcf1b4>
   41520:	12001704 	addi	r8,r2,92
   41524:	11c016c4 	addi	r7,r2,91
   41528:	4209883a 	add	r4,r8,r8
   4152c:	003e9606 	br	40f88 <__alt_data_end+0xfffcef88>
   41530:	3804d1ba 	srli	r2,r7,6
   41534:	11400e44 	addi	r5,r2,57
   41538:	10c00e04 	addi	r3,r2,56
   4153c:	294b883a 	add	r5,r5,r5
   41540:	003fbc06 	br	41434 <__alt_data_end+0xfffcf434>
   41544:	84ff5926 	beq	r16,r19,412ac <__alt_data_end+0xfffcf2ac>
   41548:	00800134 	movhi	r2,4
   4154c:	10987e04 	addi	r2,r2,25080
   41550:	14000217 	ldw	r16,8(r2)
   41554:	00bfff04 	movi	r2,-4
   41558:	80c00117 	ldw	r3,4(r16)
   4155c:	1886703a 	and	r3,r3,r2
   41560:	003f9106 	br	413a8 <__alt_data_end+0xfffcf3a8>
   41564:	60800217 	ldw	r2,8(r12)
   41568:	213fffc4 	addi	r4,r4,-1
   4156c:	1300651e 	bne	r2,r12,41704 <_malloc_r+0x7f4>
   41570:	208000cc 	andi	r2,r4,3
   41574:	633ffe04 	addi	r12,r12,-8
   41578:	103ffa1e 	bne	r2,zero,41564 <__alt_data_end+0xfffcf564>
   4157c:	98800117 	ldw	r2,4(r19)
   41580:	0146303a 	nor	r3,zero,r5
   41584:	1884703a 	and	r2,r3,r2
   41588:	98800115 	stw	r2,4(r19)
   4158c:	294b883a 	add	r5,r5,r5
   41590:	117f2836 	bltu	r2,r5,41234 <__alt_data_end+0xfffcf234>
   41594:	283f2726 	beq	r5,zero,41234 <__alt_data_end+0xfffcf234>
   41598:	2886703a 	and	r3,r5,r2
   4159c:	5809883a 	mov	r4,r11
   415a0:	183ec31e 	bne	r3,zero,410b0 <__alt_data_end+0xfffcf0b0>
   415a4:	294b883a 	add	r5,r5,r5
   415a8:	2886703a 	and	r3,r5,r2
   415ac:	21000104 	addi	r4,r4,4
   415b0:	183ffc26 	beq	r3,zero,415a4 <__alt_data_end+0xfffcf5a4>
   415b4:	003ebe06 	br	410b0 <__alt_data_end+0xfffcf0b0>
   415b8:	00c05504 	movi	r3,340
   415bc:	18801236 	bltu	r3,r2,41608 <_malloc_r+0x6f8>
   415c0:	8804d3fa 	srli	r2,r17,15
   415c4:	12001e04 	addi	r8,r2,120
   415c8:	11c01dc4 	addi	r7,r2,119
   415cc:	4209883a 	add	r4,r8,r8
   415d0:	003e6d06 	br	40f88 <__alt_data_end+0xfffcef88>
   415d4:	00c40004 	movi	r3,4096
   415d8:	003f4606 	br	412f4 <__alt_data_end+0xfffcf2f4>
   415dc:	00800044 	movi	r2,1
   415e0:	a0800115 	stw	r2,4(r20)
   415e4:	003f7406 	br	413b8 <__alt_data_end+0xfffcf3b8>
   415e8:	1805d0ba 	srai	r2,r3,2
   415ec:	01c00044 	movi	r7,1
   415f0:	30c00117 	ldw	r3,4(r6)
   415f4:	388e983a 	sll	r7,r7,r2
   415f8:	2805883a 	mov	r2,r5
   415fc:	38c6b03a 	or	r3,r7,r3
   41600:	30c00115 	stw	r3,4(r6)
   41604:	003f9b06 	br	41474 <__alt_data_end+0xfffcf474>
   41608:	00c15504 	movi	r3,1364
   4160c:	18801a36 	bltu	r3,r2,41678 <_malloc_r+0x768>
   41610:	8804d4ba 	srli	r2,r17,18
   41614:	12001f44 	addi	r8,r2,125
   41618:	11c01f04 	addi	r7,r2,124
   4161c:	4209883a 	add	r4,r8,r8
   41620:	003e5906 	br	40f88 <__alt_data_end+0xfffcef88>
   41624:	ad400404 	addi	r21,r21,16
   41628:	003f1706 	br	41288 <__alt_data_end+0xfffcf288>
   4162c:	00c01504 	movi	r3,84
   41630:	18802336 	bltu	r3,r2,416c0 <_malloc_r+0x7b0>
   41634:	3804d33a 	srli	r2,r7,12
   41638:	11401bc4 	addi	r5,r2,111
   4163c:	10c01b84 	addi	r3,r2,110
   41640:	294b883a 	add	r5,r5,r5
   41644:	003f7b06 	br	41434 <__alt_data_end+0xfffcf434>
   41648:	9c000217 	ldw	r16,8(r19)
   4164c:	00bfff04 	movi	r2,-4
   41650:	80c00117 	ldw	r3,4(r16)
   41654:	1886703a 	and	r3,r3,r2
   41658:	003f5306 	br	413a8 <__alt_data_end+0xfffcf3a8>
   4165c:	3083ffcc 	andi	r2,r6,4095
   41660:	103f181e 	bne	r2,zero,412c4 <__alt_data_end+0xfffcf2c4>
   41664:	99000217 	ldw	r4,8(r19)
   41668:	b545883a 	add	r2,r22,r21
   4166c:	10800054 	ori	r2,r2,1
   41670:	20800115 	stw	r2,4(r4)
   41674:	003f3e06 	br	41370 <__alt_data_end+0xfffcf370>
   41678:	01003f84 	movi	r4,254
   4167c:	02001fc4 	movi	r8,127
   41680:	01c01f84 	movi	r7,126
   41684:	003e4006 	br	40f88 <__alt_data_end+0xfffcef88>
   41688:	00800134 	movhi	r2,4
   4168c:	109e0f04 	addi	r2,r2,30780
   41690:	15000015 	stw	r20,0(r2)
   41694:	003f1106 	br	412dc <__alt_data_end+0xfffcf2dc>
   41698:	00800044 	movi	r2,1
   4169c:	002b883a 	mov	r21,zero
   416a0:	003f1f06 	br	41320 <__alt_data_end+0xfffcf320>
   416a4:	81400204 	addi	r5,r16,8
   416a8:	9009883a 	mov	r4,r18
   416ac:	00429980 	call	42998 <_free_r>
   416b0:	00800174 	movhi	r2,5
   416b4:	10a4cc04 	addi	r2,r2,-27856
   416b8:	10c00017 	ldw	r3,0(r2)
   416bc:	003f2c06 	br	41370 <__alt_data_end+0xfffcf370>
   416c0:	00c05504 	movi	r3,340
   416c4:	18800536 	bltu	r3,r2,416dc <_malloc_r+0x7cc>
   416c8:	3804d3fa 	srli	r2,r7,15
   416cc:	11401e04 	addi	r5,r2,120
   416d0:	10c01dc4 	addi	r3,r2,119
   416d4:	294b883a 	add	r5,r5,r5
   416d8:	003f5606 	br	41434 <__alt_data_end+0xfffcf434>
   416dc:	00c15504 	movi	r3,1364
   416e0:	18800536 	bltu	r3,r2,416f8 <_malloc_r+0x7e8>
   416e4:	3804d4ba 	srli	r2,r7,18
   416e8:	11401f44 	addi	r5,r2,125
   416ec:	10c01f04 	addi	r3,r2,124
   416f0:	294b883a 	add	r5,r5,r5
   416f4:	003f4f06 	br	41434 <__alt_data_end+0xfffcf434>
   416f8:	01403f84 	movi	r5,254
   416fc:	00c01f84 	movi	r3,126
   41700:	003f4c06 	br	41434 <__alt_data_end+0xfffcf434>
   41704:	98800117 	ldw	r2,4(r19)
   41708:	003fa006 	br	4158c <__alt_data_end+0xfffcf58c>
   4170c:	8808d0fa 	srli	r4,r17,3
   41710:	20800044 	addi	r2,r4,1
   41714:	1085883a 	add	r2,r2,r2
   41718:	003e9006 	br	4115c <__alt_data_end+0xfffcf15c>

0004171c <memchr>:
   4171c:	208000cc 	andi	r2,r4,3
   41720:	280f883a 	mov	r7,r5
   41724:	10003426 	beq	r2,zero,417f8 <memchr+0xdc>
   41728:	30bfffc4 	addi	r2,r6,-1
   4172c:	30001a26 	beq	r6,zero,41798 <memchr+0x7c>
   41730:	20c00003 	ldbu	r3,0(r4)
   41734:	29803fcc 	andi	r6,r5,255
   41738:	30c0051e 	bne	r6,r3,41750 <memchr+0x34>
   4173c:	00001806 	br	417a0 <memchr+0x84>
   41740:	10001526 	beq	r2,zero,41798 <memchr+0x7c>
   41744:	20c00003 	ldbu	r3,0(r4)
   41748:	10bfffc4 	addi	r2,r2,-1
   4174c:	30c01426 	beq	r6,r3,417a0 <memchr+0x84>
   41750:	21000044 	addi	r4,r4,1
   41754:	20c000cc 	andi	r3,r4,3
   41758:	183ff91e 	bne	r3,zero,41740 <__alt_data_end+0xfffcf740>
   4175c:	020000c4 	movi	r8,3
   41760:	40801136 	bltu	r8,r2,417a8 <memchr+0x8c>
   41764:	10000c26 	beq	r2,zero,41798 <memchr+0x7c>
   41768:	20c00003 	ldbu	r3,0(r4)
   4176c:	29403fcc 	andi	r5,r5,255
   41770:	28c00b26 	beq	r5,r3,417a0 <memchr+0x84>
   41774:	20c00044 	addi	r3,r4,1
   41778:	39803fcc 	andi	r6,r7,255
   4177c:	2089883a 	add	r4,r4,r2
   41780:	00000306 	br	41790 <memchr+0x74>
   41784:	18c00044 	addi	r3,r3,1
   41788:	197fffc3 	ldbu	r5,-1(r3)
   4178c:	31400526 	beq	r6,r5,417a4 <memchr+0x88>
   41790:	1805883a 	mov	r2,r3
   41794:	20fffb1e 	bne	r4,r3,41784 <__alt_data_end+0xfffcf784>
   41798:	0005883a 	mov	r2,zero
   4179c:	f800283a 	ret
   417a0:	2005883a 	mov	r2,r4
   417a4:	f800283a 	ret
   417a8:	28c03fcc 	andi	r3,r5,255
   417ac:	1812923a 	slli	r9,r3,8
   417b0:	02ffbff4 	movhi	r11,65279
   417b4:	02a02074 	movhi	r10,32897
   417b8:	48d2b03a 	or	r9,r9,r3
   417bc:	4806943a 	slli	r3,r9,16
   417c0:	5affbfc4 	addi	r11,r11,-257
   417c4:	52a02004 	addi	r10,r10,-32640
   417c8:	48d2b03a 	or	r9,r9,r3
   417cc:	20c00017 	ldw	r3,0(r4)
   417d0:	48c6f03a 	xor	r3,r9,r3
   417d4:	1acd883a 	add	r6,r3,r11
   417d8:	00c6303a 	nor	r3,zero,r3
   417dc:	30c6703a 	and	r3,r6,r3
   417e0:	1a86703a 	and	r3,r3,r10
   417e4:	183fe01e 	bne	r3,zero,41768 <__alt_data_end+0xfffcf768>
   417e8:	10bfff04 	addi	r2,r2,-4
   417ec:	21000104 	addi	r4,r4,4
   417f0:	40bff636 	bltu	r8,r2,417cc <__alt_data_end+0xfffcf7cc>
   417f4:	003fdb06 	br	41764 <__alt_data_end+0xfffcf764>
   417f8:	3005883a 	mov	r2,r6
   417fc:	003fd706 	br	4175c <__alt_data_end+0xfffcf75c>

00041800 <memcpy>:
   41800:	defffd04 	addi	sp,sp,-12
   41804:	dfc00215 	stw	ra,8(sp)
   41808:	dc400115 	stw	r17,4(sp)
   4180c:	dc000015 	stw	r16,0(sp)
   41810:	00c003c4 	movi	r3,15
   41814:	2005883a 	mov	r2,r4
   41818:	1980452e 	bgeu	r3,r6,41930 <memcpy+0x130>
   4181c:	2906b03a 	or	r3,r5,r4
   41820:	18c000cc 	andi	r3,r3,3
   41824:	1800441e 	bne	r3,zero,41938 <memcpy+0x138>
   41828:	347ffc04 	addi	r17,r6,-16
   4182c:	8822d13a 	srli	r17,r17,4
   41830:	28c00104 	addi	r3,r5,4
   41834:	23400104 	addi	r13,r4,4
   41838:	8820913a 	slli	r16,r17,4
   4183c:	2b000204 	addi	r12,r5,8
   41840:	22c00204 	addi	r11,r4,8
   41844:	84000504 	addi	r16,r16,20
   41848:	2a800304 	addi	r10,r5,12
   4184c:	22400304 	addi	r9,r4,12
   41850:	2c21883a 	add	r16,r5,r16
   41854:	2811883a 	mov	r8,r5
   41858:	200f883a 	mov	r7,r4
   4185c:	41000017 	ldw	r4,0(r8)
   41860:	1fc00017 	ldw	ra,0(r3)
   41864:	63c00017 	ldw	r15,0(r12)
   41868:	39000015 	stw	r4,0(r7)
   4186c:	53800017 	ldw	r14,0(r10)
   41870:	6fc00015 	stw	ra,0(r13)
   41874:	5bc00015 	stw	r15,0(r11)
   41878:	4b800015 	stw	r14,0(r9)
   4187c:	18c00404 	addi	r3,r3,16
   41880:	39c00404 	addi	r7,r7,16
   41884:	42000404 	addi	r8,r8,16
   41888:	6b400404 	addi	r13,r13,16
   4188c:	63000404 	addi	r12,r12,16
   41890:	5ac00404 	addi	r11,r11,16
   41894:	52800404 	addi	r10,r10,16
   41898:	4a400404 	addi	r9,r9,16
   4189c:	1c3fef1e 	bne	r3,r16,4185c <__alt_data_end+0xfffcf85c>
   418a0:	89c00044 	addi	r7,r17,1
   418a4:	380e913a 	slli	r7,r7,4
   418a8:	310003cc 	andi	r4,r6,15
   418ac:	02c000c4 	movi	r11,3
   418b0:	11c7883a 	add	r3,r2,r7
   418b4:	29cb883a 	add	r5,r5,r7
   418b8:	5900212e 	bgeu	r11,r4,41940 <memcpy+0x140>
   418bc:	1813883a 	mov	r9,r3
   418c0:	2811883a 	mov	r8,r5
   418c4:	200f883a 	mov	r7,r4
   418c8:	42800017 	ldw	r10,0(r8)
   418cc:	4a400104 	addi	r9,r9,4
   418d0:	39ffff04 	addi	r7,r7,-4
   418d4:	4abfff15 	stw	r10,-4(r9)
   418d8:	42000104 	addi	r8,r8,4
   418dc:	59fffa36 	bltu	r11,r7,418c8 <__alt_data_end+0xfffcf8c8>
   418e0:	213fff04 	addi	r4,r4,-4
   418e4:	2008d0ba 	srli	r4,r4,2
   418e8:	318000cc 	andi	r6,r6,3
   418ec:	21000044 	addi	r4,r4,1
   418f0:	2109883a 	add	r4,r4,r4
   418f4:	2109883a 	add	r4,r4,r4
   418f8:	1907883a 	add	r3,r3,r4
   418fc:	290b883a 	add	r5,r5,r4
   41900:	30000626 	beq	r6,zero,4191c <memcpy+0x11c>
   41904:	198d883a 	add	r6,r3,r6
   41908:	29c00003 	ldbu	r7,0(r5)
   4190c:	18c00044 	addi	r3,r3,1
   41910:	29400044 	addi	r5,r5,1
   41914:	19ffffc5 	stb	r7,-1(r3)
   41918:	19bffb1e 	bne	r3,r6,41908 <__alt_data_end+0xfffcf908>
   4191c:	dfc00217 	ldw	ra,8(sp)
   41920:	dc400117 	ldw	r17,4(sp)
   41924:	dc000017 	ldw	r16,0(sp)
   41928:	dec00304 	addi	sp,sp,12
   4192c:	f800283a 	ret
   41930:	2007883a 	mov	r3,r4
   41934:	003ff206 	br	41900 <__alt_data_end+0xfffcf900>
   41938:	2007883a 	mov	r3,r4
   4193c:	003ff106 	br	41904 <__alt_data_end+0xfffcf904>
   41940:	200d883a 	mov	r6,r4
   41944:	003fee06 	br	41900 <__alt_data_end+0xfffcf900>

00041948 <memmove>:
   41948:	2005883a 	mov	r2,r4
   4194c:	29000b2e 	bgeu	r5,r4,4197c <memmove+0x34>
   41950:	298f883a 	add	r7,r5,r6
   41954:	21c0092e 	bgeu	r4,r7,4197c <memmove+0x34>
   41958:	2187883a 	add	r3,r4,r6
   4195c:	198bc83a 	sub	r5,r3,r6
   41960:	30004826 	beq	r6,zero,41a84 <memmove+0x13c>
   41964:	39ffffc4 	addi	r7,r7,-1
   41968:	39000003 	ldbu	r4,0(r7)
   4196c:	18ffffc4 	addi	r3,r3,-1
   41970:	19000005 	stb	r4,0(r3)
   41974:	28fffb1e 	bne	r5,r3,41964 <__alt_data_end+0xfffcf964>
   41978:	f800283a 	ret
   4197c:	00c003c4 	movi	r3,15
   41980:	1980412e 	bgeu	r3,r6,41a88 <memmove+0x140>
   41984:	2886b03a 	or	r3,r5,r2
   41988:	18c000cc 	andi	r3,r3,3
   4198c:	1800401e 	bne	r3,zero,41a90 <memmove+0x148>
   41990:	33fffc04 	addi	r15,r6,-16
   41994:	781ed13a 	srli	r15,r15,4
   41998:	28c00104 	addi	r3,r5,4
   4199c:	13400104 	addi	r13,r2,4
   419a0:	781c913a 	slli	r14,r15,4
   419a4:	2b000204 	addi	r12,r5,8
   419a8:	12c00204 	addi	r11,r2,8
   419ac:	73800504 	addi	r14,r14,20
   419b0:	2a800304 	addi	r10,r5,12
   419b4:	12400304 	addi	r9,r2,12
   419b8:	2b9d883a 	add	r14,r5,r14
   419bc:	2811883a 	mov	r8,r5
   419c0:	100f883a 	mov	r7,r2
   419c4:	41000017 	ldw	r4,0(r8)
   419c8:	39c00404 	addi	r7,r7,16
   419cc:	18c00404 	addi	r3,r3,16
   419d0:	393ffc15 	stw	r4,-16(r7)
   419d4:	193ffc17 	ldw	r4,-16(r3)
   419d8:	6b400404 	addi	r13,r13,16
   419dc:	5ac00404 	addi	r11,r11,16
   419e0:	693ffc15 	stw	r4,-16(r13)
   419e4:	61000017 	ldw	r4,0(r12)
   419e8:	4a400404 	addi	r9,r9,16
   419ec:	42000404 	addi	r8,r8,16
   419f0:	593ffc15 	stw	r4,-16(r11)
   419f4:	51000017 	ldw	r4,0(r10)
   419f8:	63000404 	addi	r12,r12,16
   419fc:	52800404 	addi	r10,r10,16
   41a00:	493ffc15 	stw	r4,-16(r9)
   41a04:	1bbfef1e 	bne	r3,r14,419c4 <__alt_data_end+0xfffcf9c4>
   41a08:	79000044 	addi	r4,r15,1
   41a0c:	2008913a 	slli	r4,r4,4
   41a10:	328003cc 	andi	r10,r6,15
   41a14:	02c000c4 	movi	r11,3
   41a18:	1107883a 	add	r3,r2,r4
   41a1c:	290b883a 	add	r5,r5,r4
   41a20:	5a801e2e 	bgeu	r11,r10,41a9c <memmove+0x154>
   41a24:	1813883a 	mov	r9,r3
   41a28:	2811883a 	mov	r8,r5
   41a2c:	500f883a 	mov	r7,r10
   41a30:	41000017 	ldw	r4,0(r8)
   41a34:	4a400104 	addi	r9,r9,4
   41a38:	39ffff04 	addi	r7,r7,-4
   41a3c:	493fff15 	stw	r4,-4(r9)
   41a40:	42000104 	addi	r8,r8,4
   41a44:	59fffa36 	bltu	r11,r7,41a30 <__alt_data_end+0xfffcfa30>
   41a48:	513fff04 	addi	r4,r10,-4
   41a4c:	2008d0ba 	srli	r4,r4,2
   41a50:	318000cc 	andi	r6,r6,3
   41a54:	21000044 	addi	r4,r4,1
   41a58:	2109883a 	add	r4,r4,r4
   41a5c:	2109883a 	add	r4,r4,r4
   41a60:	1907883a 	add	r3,r3,r4
   41a64:	290b883a 	add	r5,r5,r4
   41a68:	30000b26 	beq	r6,zero,41a98 <memmove+0x150>
   41a6c:	198d883a 	add	r6,r3,r6
   41a70:	29c00003 	ldbu	r7,0(r5)
   41a74:	18c00044 	addi	r3,r3,1
   41a78:	29400044 	addi	r5,r5,1
   41a7c:	19ffffc5 	stb	r7,-1(r3)
   41a80:	19bffb1e 	bne	r3,r6,41a70 <__alt_data_end+0xfffcfa70>
   41a84:	f800283a 	ret
   41a88:	1007883a 	mov	r3,r2
   41a8c:	003ff606 	br	41a68 <__alt_data_end+0xfffcfa68>
   41a90:	1007883a 	mov	r3,r2
   41a94:	003ff506 	br	41a6c <__alt_data_end+0xfffcfa6c>
   41a98:	f800283a 	ret
   41a9c:	500d883a 	mov	r6,r10
   41aa0:	003ff106 	br	41a68 <__alt_data_end+0xfffcfa68>

00041aa4 <memset>:
   41aa4:	20c000cc 	andi	r3,r4,3
   41aa8:	2005883a 	mov	r2,r4
   41aac:	18004426 	beq	r3,zero,41bc0 <memset+0x11c>
   41ab0:	31ffffc4 	addi	r7,r6,-1
   41ab4:	30004026 	beq	r6,zero,41bb8 <memset+0x114>
   41ab8:	2813883a 	mov	r9,r5
   41abc:	200d883a 	mov	r6,r4
   41ac0:	2007883a 	mov	r3,r4
   41ac4:	00000406 	br	41ad8 <memset+0x34>
   41ac8:	3a3fffc4 	addi	r8,r7,-1
   41acc:	31800044 	addi	r6,r6,1
   41ad0:	38003926 	beq	r7,zero,41bb8 <memset+0x114>
   41ad4:	400f883a 	mov	r7,r8
   41ad8:	18c00044 	addi	r3,r3,1
   41adc:	32400005 	stb	r9,0(r6)
   41ae0:	1a0000cc 	andi	r8,r3,3
   41ae4:	403ff81e 	bne	r8,zero,41ac8 <__alt_data_end+0xfffcfac8>
   41ae8:	010000c4 	movi	r4,3
   41aec:	21c02d2e 	bgeu	r4,r7,41ba4 <memset+0x100>
   41af0:	29003fcc 	andi	r4,r5,255
   41af4:	200c923a 	slli	r6,r4,8
   41af8:	3108b03a 	or	r4,r6,r4
   41afc:	200c943a 	slli	r6,r4,16
   41b00:	218cb03a 	or	r6,r4,r6
   41b04:	010003c4 	movi	r4,15
   41b08:	21c0182e 	bgeu	r4,r7,41b6c <memset+0xc8>
   41b0c:	3b3ffc04 	addi	r12,r7,-16
   41b10:	6018d13a 	srli	r12,r12,4
   41b14:	1a000104 	addi	r8,r3,4
   41b18:	1ac00204 	addi	r11,r3,8
   41b1c:	6008913a 	slli	r4,r12,4
   41b20:	1a800304 	addi	r10,r3,12
   41b24:	1813883a 	mov	r9,r3
   41b28:	21000504 	addi	r4,r4,20
   41b2c:	1909883a 	add	r4,r3,r4
   41b30:	49800015 	stw	r6,0(r9)
   41b34:	41800015 	stw	r6,0(r8)
   41b38:	59800015 	stw	r6,0(r11)
   41b3c:	51800015 	stw	r6,0(r10)
   41b40:	42000404 	addi	r8,r8,16
   41b44:	4a400404 	addi	r9,r9,16
   41b48:	5ac00404 	addi	r11,r11,16
   41b4c:	52800404 	addi	r10,r10,16
   41b50:	413ff71e 	bne	r8,r4,41b30 <__alt_data_end+0xfffcfb30>
   41b54:	63000044 	addi	r12,r12,1
   41b58:	6018913a 	slli	r12,r12,4
   41b5c:	39c003cc 	andi	r7,r7,15
   41b60:	010000c4 	movi	r4,3
   41b64:	1b07883a 	add	r3,r3,r12
   41b68:	21c00e2e 	bgeu	r4,r7,41ba4 <memset+0x100>
   41b6c:	1813883a 	mov	r9,r3
   41b70:	3811883a 	mov	r8,r7
   41b74:	010000c4 	movi	r4,3
   41b78:	49800015 	stw	r6,0(r9)
   41b7c:	423fff04 	addi	r8,r8,-4
   41b80:	4a400104 	addi	r9,r9,4
   41b84:	223ffc36 	bltu	r4,r8,41b78 <__alt_data_end+0xfffcfb78>
   41b88:	393fff04 	addi	r4,r7,-4
   41b8c:	2008d0ba 	srli	r4,r4,2
   41b90:	39c000cc 	andi	r7,r7,3
   41b94:	21000044 	addi	r4,r4,1
   41b98:	2109883a 	add	r4,r4,r4
   41b9c:	2109883a 	add	r4,r4,r4
   41ba0:	1907883a 	add	r3,r3,r4
   41ba4:	38000526 	beq	r7,zero,41bbc <memset+0x118>
   41ba8:	19cf883a 	add	r7,r3,r7
   41bac:	19400005 	stb	r5,0(r3)
   41bb0:	18c00044 	addi	r3,r3,1
   41bb4:	38fffd1e 	bne	r7,r3,41bac <__alt_data_end+0xfffcfbac>
   41bb8:	f800283a 	ret
   41bbc:	f800283a 	ret
   41bc0:	2007883a 	mov	r3,r4
   41bc4:	300f883a 	mov	r7,r6
   41bc8:	003fc706 	br	41ae8 <__alt_data_end+0xfffcfae8>

00041bcc <_realloc_r>:
   41bcc:	defff604 	addi	sp,sp,-40
   41bd0:	dc800215 	stw	r18,8(sp)
   41bd4:	dfc00915 	stw	ra,36(sp)
   41bd8:	df000815 	stw	fp,32(sp)
   41bdc:	ddc00715 	stw	r23,28(sp)
   41be0:	dd800615 	stw	r22,24(sp)
   41be4:	dd400515 	stw	r21,20(sp)
   41be8:	dd000415 	stw	r20,16(sp)
   41bec:	dcc00315 	stw	r19,12(sp)
   41bf0:	dc400115 	stw	r17,4(sp)
   41bf4:	dc000015 	stw	r16,0(sp)
   41bf8:	3025883a 	mov	r18,r6
   41bfc:	2800b726 	beq	r5,zero,41edc <_realloc_r+0x310>
   41c00:	282b883a 	mov	r21,r5
   41c04:	2029883a 	mov	r20,r4
   41c08:	004374c0 	call	4374c <__malloc_lock>
   41c0c:	a8bfff17 	ldw	r2,-4(r21)
   41c10:	043fff04 	movi	r16,-4
   41c14:	90c002c4 	addi	r3,r18,11
   41c18:	01000584 	movi	r4,22
   41c1c:	acfffe04 	addi	r19,r21,-8
   41c20:	1420703a 	and	r16,r2,r16
   41c24:	20c0332e 	bgeu	r4,r3,41cf4 <_realloc_r+0x128>
   41c28:	047ffe04 	movi	r17,-8
   41c2c:	1c62703a 	and	r17,r3,r17
   41c30:	8807883a 	mov	r3,r17
   41c34:	88005816 	blt	r17,zero,41d98 <_realloc_r+0x1cc>
   41c38:	8c805736 	bltu	r17,r18,41d98 <_realloc_r+0x1cc>
   41c3c:	80c0300e 	bge	r16,r3,41d00 <_realloc_r+0x134>
   41c40:	07000134 	movhi	fp,4
   41c44:	e7187e04 	addi	fp,fp,25080
   41c48:	e1c00217 	ldw	r7,8(fp)
   41c4c:	9c09883a 	add	r4,r19,r16
   41c50:	22000117 	ldw	r8,4(r4)
   41c54:	21c06326 	beq	r4,r7,41de4 <_realloc_r+0x218>
   41c58:	017fff84 	movi	r5,-2
   41c5c:	414a703a 	and	r5,r8,r5
   41c60:	214b883a 	add	r5,r4,r5
   41c64:	29800117 	ldw	r6,4(r5)
   41c68:	3180004c 	andi	r6,r6,1
   41c6c:	30003f26 	beq	r6,zero,41d6c <_realloc_r+0x1a0>
   41c70:	1080004c 	andi	r2,r2,1
   41c74:	10008326 	beq	r2,zero,41e84 <_realloc_r+0x2b8>
   41c78:	900b883a 	mov	r5,r18
   41c7c:	a009883a 	mov	r4,r20
   41c80:	0040f100 	call	40f10 <_malloc_r>
   41c84:	1025883a 	mov	r18,r2
   41c88:	10011e26 	beq	r2,zero,42104 <_realloc_r+0x538>
   41c8c:	a93fff17 	ldw	r4,-4(r21)
   41c90:	10fffe04 	addi	r3,r2,-8
   41c94:	00bfff84 	movi	r2,-2
   41c98:	2084703a 	and	r2,r4,r2
   41c9c:	9885883a 	add	r2,r19,r2
   41ca0:	1880ee26 	beq	r3,r2,4205c <_realloc_r+0x490>
   41ca4:	81bfff04 	addi	r6,r16,-4
   41ca8:	00800904 	movi	r2,36
   41cac:	1180b836 	bltu	r2,r6,41f90 <_realloc_r+0x3c4>
   41cb0:	00c004c4 	movi	r3,19
   41cb4:	19809636 	bltu	r3,r6,41f10 <_realloc_r+0x344>
   41cb8:	9005883a 	mov	r2,r18
   41cbc:	a807883a 	mov	r3,r21
   41cc0:	19000017 	ldw	r4,0(r3)
   41cc4:	11000015 	stw	r4,0(r2)
   41cc8:	19000117 	ldw	r4,4(r3)
   41ccc:	11000115 	stw	r4,4(r2)
   41cd0:	18c00217 	ldw	r3,8(r3)
   41cd4:	10c00215 	stw	r3,8(r2)
   41cd8:	a80b883a 	mov	r5,r21
   41cdc:	a009883a 	mov	r4,r20
   41ce0:	00429980 	call	42998 <_free_r>
   41ce4:	a009883a 	mov	r4,r20
   41ce8:	00437700 	call	43770 <__malloc_unlock>
   41cec:	9005883a 	mov	r2,r18
   41cf0:	00001206 	br	41d3c <_realloc_r+0x170>
   41cf4:	00c00404 	movi	r3,16
   41cf8:	1823883a 	mov	r17,r3
   41cfc:	003fce06 	br	41c38 <__alt_data_end+0xfffcfc38>
   41d00:	a825883a 	mov	r18,r21
   41d04:	8445c83a 	sub	r2,r16,r17
   41d08:	00c003c4 	movi	r3,15
   41d0c:	18802636 	bltu	r3,r2,41da8 <_realloc_r+0x1dc>
   41d10:	99800117 	ldw	r6,4(r19)
   41d14:	9c07883a 	add	r3,r19,r16
   41d18:	3180004c 	andi	r6,r6,1
   41d1c:	3420b03a 	or	r16,r6,r16
   41d20:	9c000115 	stw	r16,4(r19)
   41d24:	18800117 	ldw	r2,4(r3)
   41d28:	10800054 	ori	r2,r2,1
   41d2c:	18800115 	stw	r2,4(r3)
   41d30:	a009883a 	mov	r4,r20
   41d34:	00437700 	call	43770 <__malloc_unlock>
   41d38:	9005883a 	mov	r2,r18
   41d3c:	dfc00917 	ldw	ra,36(sp)
   41d40:	df000817 	ldw	fp,32(sp)
   41d44:	ddc00717 	ldw	r23,28(sp)
   41d48:	dd800617 	ldw	r22,24(sp)
   41d4c:	dd400517 	ldw	r21,20(sp)
   41d50:	dd000417 	ldw	r20,16(sp)
   41d54:	dcc00317 	ldw	r19,12(sp)
   41d58:	dc800217 	ldw	r18,8(sp)
   41d5c:	dc400117 	ldw	r17,4(sp)
   41d60:	dc000017 	ldw	r16,0(sp)
   41d64:	dec00a04 	addi	sp,sp,40
   41d68:	f800283a 	ret
   41d6c:	017fff04 	movi	r5,-4
   41d70:	414a703a 	and	r5,r8,r5
   41d74:	814d883a 	add	r6,r16,r5
   41d78:	30c01f16 	blt	r6,r3,41df8 <_realloc_r+0x22c>
   41d7c:	20800317 	ldw	r2,12(r4)
   41d80:	20c00217 	ldw	r3,8(r4)
   41d84:	a825883a 	mov	r18,r21
   41d88:	3021883a 	mov	r16,r6
   41d8c:	18800315 	stw	r2,12(r3)
   41d90:	10c00215 	stw	r3,8(r2)
   41d94:	003fdb06 	br	41d04 <__alt_data_end+0xfffcfd04>
   41d98:	00800304 	movi	r2,12
   41d9c:	a0800015 	stw	r2,0(r20)
   41da0:	0005883a 	mov	r2,zero
   41da4:	003fe506 	br	41d3c <__alt_data_end+0xfffcfd3c>
   41da8:	98c00117 	ldw	r3,4(r19)
   41dac:	9c4b883a 	add	r5,r19,r17
   41db0:	11000054 	ori	r4,r2,1
   41db4:	18c0004c 	andi	r3,r3,1
   41db8:	1c62b03a 	or	r17,r3,r17
   41dbc:	9c400115 	stw	r17,4(r19)
   41dc0:	29000115 	stw	r4,4(r5)
   41dc4:	2885883a 	add	r2,r5,r2
   41dc8:	10c00117 	ldw	r3,4(r2)
   41dcc:	29400204 	addi	r5,r5,8
   41dd0:	a009883a 	mov	r4,r20
   41dd4:	18c00054 	ori	r3,r3,1
   41dd8:	10c00115 	stw	r3,4(r2)
   41ddc:	00429980 	call	42998 <_free_r>
   41de0:	003fd306 	br	41d30 <__alt_data_end+0xfffcfd30>
   41de4:	017fff04 	movi	r5,-4
   41de8:	414a703a 	and	r5,r8,r5
   41dec:	89800404 	addi	r6,r17,16
   41df0:	8151883a 	add	r8,r16,r5
   41df4:	4180590e 	bge	r8,r6,41f5c <_realloc_r+0x390>
   41df8:	1080004c 	andi	r2,r2,1
   41dfc:	103f9e1e 	bne	r2,zero,41c78 <__alt_data_end+0xfffcfc78>
   41e00:	adbffe17 	ldw	r22,-8(r21)
   41e04:	00bfff04 	movi	r2,-4
   41e08:	9dadc83a 	sub	r22,r19,r22
   41e0c:	b1800117 	ldw	r6,4(r22)
   41e10:	3084703a 	and	r2,r6,r2
   41e14:	20002026 	beq	r4,zero,41e98 <_realloc_r+0x2cc>
   41e18:	80af883a 	add	r23,r16,r2
   41e1c:	b96f883a 	add	r23,r23,r5
   41e20:	21c05f26 	beq	r4,r7,41fa0 <_realloc_r+0x3d4>
   41e24:	b8c01c16 	blt	r23,r3,41e98 <_realloc_r+0x2cc>
   41e28:	20800317 	ldw	r2,12(r4)
   41e2c:	20c00217 	ldw	r3,8(r4)
   41e30:	81bfff04 	addi	r6,r16,-4
   41e34:	01000904 	movi	r4,36
   41e38:	18800315 	stw	r2,12(r3)
   41e3c:	10c00215 	stw	r3,8(r2)
   41e40:	b0c00217 	ldw	r3,8(r22)
   41e44:	b0800317 	ldw	r2,12(r22)
   41e48:	b4800204 	addi	r18,r22,8
   41e4c:	18800315 	stw	r2,12(r3)
   41e50:	10c00215 	stw	r3,8(r2)
   41e54:	21801b36 	bltu	r4,r6,41ec4 <_realloc_r+0x2f8>
   41e58:	008004c4 	movi	r2,19
   41e5c:	1180352e 	bgeu	r2,r6,41f34 <_realloc_r+0x368>
   41e60:	a8800017 	ldw	r2,0(r21)
   41e64:	b0800215 	stw	r2,8(r22)
   41e68:	a8800117 	ldw	r2,4(r21)
   41e6c:	b0800315 	stw	r2,12(r22)
   41e70:	008006c4 	movi	r2,27
   41e74:	11807f36 	bltu	r2,r6,42074 <_realloc_r+0x4a8>
   41e78:	b0800404 	addi	r2,r22,16
   41e7c:	ad400204 	addi	r21,r21,8
   41e80:	00002d06 	br	41f38 <_realloc_r+0x36c>
   41e84:	adbffe17 	ldw	r22,-8(r21)
   41e88:	00bfff04 	movi	r2,-4
   41e8c:	9dadc83a 	sub	r22,r19,r22
   41e90:	b1000117 	ldw	r4,4(r22)
   41e94:	2084703a 	and	r2,r4,r2
   41e98:	b03f7726 	beq	r22,zero,41c78 <__alt_data_end+0xfffcfc78>
   41e9c:	80af883a 	add	r23,r16,r2
   41ea0:	b8ff7516 	blt	r23,r3,41c78 <__alt_data_end+0xfffcfc78>
   41ea4:	b0800317 	ldw	r2,12(r22)
   41ea8:	b0c00217 	ldw	r3,8(r22)
   41eac:	81bfff04 	addi	r6,r16,-4
   41eb0:	01000904 	movi	r4,36
   41eb4:	18800315 	stw	r2,12(r3)
   41eb8:	10c00215 	stw	r3,8(r2)
   41ebc:	b4800204 	addi	r18,r22,8
   41ec0:	21bfe52e 	bgeu	r4,r6,41e58 <__alt_data_end+0xfffcfe58>
   41ec4:	a80b883a 	mov	r5,r21
   41ec8:	9009883a 	mov	r4,r18
   41ecc:	00419480 	call	41948 <memmove>
   41ed0:	b821883a 	mov	r16,r23
   41ed4:	b027883a 	mov	r19,r22
   41ed8:	003f8a06 	br	41d04 <__alt_data_end+0xfffcfd04>
   41edc:	300b883a 	mov	r5,r6
   41ee0:	dfc00917 	ldw	ra,36(sp)
   41ee4:	df000817 	ldw	fp,32(sp)
   41ee8:	ddc00717 	ldw	r23,28(sp)
   41eec:	dd800617 	ldw	r22,24(sp)
   41ef0:	dd400517 	ldw	r21,20(sp)
   41ef4:	dd000417 	ldw	r20,16(sp)
   41ef8:	dcc00317 	ldw	r19,12(sp)
   41efc:	dc800217 	ldw	r18,8(sp)
   41f00:	dc400117 	ldw	r17,4(sp)
   41f04:	dc000017 	ldw	r16,0(sp)
   41f08:	dec00a04 	addi	sp,sp,40
   41f0c:	0040f101 	jmpi	40f10 <_malloc_r>
   41f10:	a8c00017 	ldw	r3,0(r21)
   41f14:	90c00015 	stw	r3,0(r18)
   41f18:	a8c00117 	ldw	r3,4(r21)
   41f1c:	90c00115 	stw	r3,4(r18)
   41f20:	00c006c4 	movi	r3,27
   41f24:	19804536 	bltu	r3,r6,4203c <_realloc_r+0x470>
   41f28:	90800204 	addi	r2,r18,8
   41f2c:	a8c00204 	addi	r3,r21,8
   41f30:	003f6306 	br	41cc0 <__alt_data_end+0xfffcfcc0>
   41f34:	9005883a 	mov	r2,r18
   41f38:	a8c00017 	ldw	r3,0(r21)
   41f3c:	b821883a 	mov	r16,r23
   41f40:	b027883a 	mov	r19,r22
   41f44:	10c00015 	stw	r3,0(r2)
   41f48:	a8c00117 	ldw	r3,4(r21)
   41f4c:	10c00115 	stw	r3,4(r2)
   41f50:	a8c00217 	ldw	r3,8(r21)
   41f54:	10c00215 	stw	r3,8(r2)
   41f58:	003f6a06 	br	41d04 <__alt_data_end+0xfffcfd04>
   41f5c:	9c67883a 	add	r19,r19,r17
   41f60:	4445c83a 	sub	r2,r8,r17
   41f64:	e4c00215 	stw	r19,8(fp)
   41f68:	10800054 	ori	r2,r2,1
   41f6c:	98800115 	stw	r2,4(r19)
   41f70:	a8bfff17 	ldw	r2,-4(r21)
   41f74:	a009883a 	mov	r4,r20
   41f78:	1080004c 	andi	r2,r2,1
   41f7c:	1462b03a 	or	r17,r2,r17
   41f80:	ac7fff15 	stw	r17,-4(r21)
   41f84:	00437700 	call	43770 <__malloc_unlock>
   41f88:	a805883a 	mov	r2,r21
   41f8c:	003f6b06 	br	41d3c <__alt_data_end+0xfffcfd3c>
   41f90:	a80b883a 	mov	r5,r21
   41f94:	9009883a 	mov	r4,r18
   41f98:	00419480 	call	41948 <memmove>
   41f9c:	003f4e06 	br	41cd8 <__alt_data_end+0xfffcfcd8>
   41fa0:	89000404 	addi	r4,r17,16
   41fa4:	b93fbc16 	blt	r23,r4,41e98 <__alt_data_end+0xfffcfe98>
   41fa8:	b0800317 	ldw	r2,12(r22)
   41fac:	b0c00217 	ldw	r3,8(r22)
   41fb0:	81bfff04 	addi	r6,r16,-4
   41fb4:	01000904 	movi	r4,36
   41fb8:	18800315 	stw	r2,12(r3)
   41fbc:	10c00215 	stw	r3,8(r2)
   41fc0:	b4800204 	addi	r18,r22,8
   41fc4:	21804336 	bltu	r4,r6,420d4 <_realloc_r+0x508>
   41fc8:	008004c4 	movi	r2,19
   41fcc:	11803f2e 	bgeu	r2,r6,420cc <_realloc_r+0x500>
   41fd0:	a8800017 	ldw	r2,0(r21)
   41fd4:	b0800215 	stw	r2,8(r22)
   41fd8:	a8800117 	ldw	r2,4(r21)
   41fdc:	b0800315 	stw	r2,12(r22)
   41fe0:	008006c4 	movi	r2,27
   41fe4:	11803f36 	bltu	r2,r6,420e4 <_realloc_r+0x518>
   41fe8:	b0800404 	addi	r2,r22,16
   41fec:	ad400204 	addi	r21,r21,8
   41ff0:	a8c00017 	ldw	r3,0(r21)
   41ff4:	10c00015 	stw	r3,0(r2)
   41ff8:	a8c00117 	ldw	r3,4(r21)
   41ffc:	10c00115 	stw	r3,4(r2)
   42000:	a8c00217 	ldw	r3,8(r21)
   42004:	10c00215 	stw	r3,8(r2)
   42008:	b447883a 	add	r3,r22,r17
   4200c:	bc45c83a 	sub	r2,r23,r17
   42010:	e0c00215 	stw	r3,8(fp)
   42014:	10800054 	ori	r2,r2,1
   42018:	18800115 	stw	r2,4(r3)
   4201c:	b0800117 	ldw	r2,4(r22)
   42020:	a009883a 	mov	r4,r20
   42024:	1080004c 	andi	r2,r2,1
   42028:	1462b03a 	or	r17,r2,r17
   4202c:	b4400115 	stw	r17,4(r22)
   42030:	00437700 	call	43770 <__malloc_unlock>
   42034:	9005883a 	mov	r2,r18
   42038:	003f4006 	br	41d3c <__alt_data_end+0xfffcfd3c>
   4203c:	a8c00217 	ldw	r3,8(r21)
   42040:	90c00215 	stw	r3,8(r18)
   42044:	a8c00317 	ldw	r3,12(r21)
   42048:	90c00315 	stw	r3,12(r18)
   4204c:	30801126 	beq	r6,r2,42094 <_realloc_r+0x4c8>
   42050:	90800404 	addi	r2,r18,16
   42054:	a8c00404 	addi	r3,r21,16
   42058:	003f1906 	br	41cc0 <__alt_data_end+0xfffcfcc0>
   4205c:	90ffff17 	ldw	r3,-4(r18)
   42060:	00bfff04 	movi	r2,-4
   42064:	a825883a 	mov	r18,r21
   42068:	1884703a 	and	r2,r3,r2
   4206c:	80a1883a 	add	r16,r16,r2
   42070:	003f2406 	br	41d04 <__alt_data_end+0xfffcfd04>
   42074:	a8800217 	ldw	r2,8(r21)
   42078:	b0800415 	stw	r2,16(r22)
   4207c:	a8800317 	ldw	r2,12(r21)
   42080:	b0800515 	stw	r2,20(r22)
   42084:	31000a26 	beq	r6,r4,420b0 <_realloc_r+0x4e4>
   42088:	b0800604 	addi	r2,r22,24
   4208c:	ad400404 	addi	r21,r21,16
   42090:	003fa906 	br	41f38 <__alt_data_end+0xfffcff38>
   42094:	a9000417 	ldw	r4,16(r21)
   42098:	90800604 	addi	r2,r18,24
   4209c:	a8c00604 	addi	r3,r21,24
   420a0:	91000415 	stw	r4,16(r18)
   420a4:	a9000517 	ldw	r4,20(r21)
   420a8:	91000515 	stw	r4,20(r18)
   420ac:	003f0406 	br	41cc0 <__alt_data_end+0xfffcfcc0>
   420b0:	a8c00417 	ldw	r3,16(r21)
   420b4:	ad400604 	addi	r21,r21,24
   420b8:	b0800804 	addi	r2,r22,32
   420bc:	b0c00615 	stw	r3,24(r22)
   420c0:	a8ffff17 	ldw	r3,-4(r21)
   420c4:	b0c00715 	stw	r3,28(r22)
   420c8:	003f9b06 	br	41f38 <__alt_data_end+0xfffcff38>
   420cc:	9005883a 	mov	r2,r18
   420d0:	003fc706 	br	41ff0 <__alt_data_end+0xfffcfff0>
   420d4:	a80b883a 	mov	r5,r21
   420d8:	9009883a 	mov	r4,r18
   420dc:	00419480 	call	41948 <memmove>
   420e0:	003fc906 	br	42008 <__alt_data_end+0xfffd0008>
   420e4:	a8800217 	ldw	r2,8(r21)
   420e8:	b0800415 	stw	r2,16(r22)
   420ec:	a8800317 	ldw	r2,12(r21)
   420f0:	b0800515 	stw	r2,20(r22)
   420f4:	31000726 	beq	r6,r4,42114 <_realloc_r+0x548>
   420f8:	b0800604 	addi	r2,r22,24
   420fc:	ad400404 	addi	r21,r21,16
   42100:	003fbb06 	br	41ff0 <__alt_data_end+0xfffcfff0>
   42104:	a009883a 	mov	r4,r20
   42108:	00437700 	call	43770 <__malloc_unlock>
   4210c:	0005883a 	mov	r2,zero
   42110:	003f0a06 	br	41d3c <__alt_data_end+0xfffcfd3c>
   42114:	a8c00417 	ldw	r3,16(r21)
   42118:	ad400604 	addi	r21,r21,24
   4211c:	b0800804 	addi	r2,r22,32
   42120:	b0c00615 	stw	r3,24(r22)
   42124:	a8ffff17 	ldw	r3,-4(r21)
   42128:	b0c00715 	stw	r3,28(r22)
   4212c:	003fb006 	br	41ff0 <__alt_data_end+0xfffcfff0>

00042130 <_sbrk_r>:
   42130:	defffd04 	addi	sp,sp,-12
   42134:	dc000015 	stw	r16,0(sp)
   42138:	04000174 	movhi	r16,5
   4213c:	dc400115 	stw	r17,4(sp)
   42140:	8424c404 	addi	r16,r16,-27888
   42144:	2023883a 	mov	r17,r4
   42148:	2809883a 	mov	r4,r5
   4214c:	dfc00215 	stw	ra,8(sp)
   42150:	80000015 	stw	zero,0(r16)
   42154:	00439580 	call	43958 <sbrk>
   42158:	00ffffc4 	movi	r3,-1
   4215c:	10c00526 	beq	r2,r3,42174 <_sbrk_r+0x44>
   42160:	dfc00217 	ldw	ra,8(sp)
   42164:	dc400117 	ldw	r17,4(sp)
   42168:	dc000017 	ldw	r16,0(sp)
   4216c:	dec00304 	addi	sp,sp,12
   42170:	f800283a 	ret
   42174:	80c00017 	ldw	r3,0(r16)
   42178:	183ff926 	beq	r3,zero,42160 <__alt_data_end+0xfffd0160>
   4217c:	88c00015 	stw	r3,0(r17)
   42180:	003ff706 	br	42160 <__alt_data_end+0xfffd0160>

00042184 <__sread>:
   42184:	defffe04 	addi	sp,sp,-8
   42188:	dc000015 	stw	r16,0(sp)
   4218c:	2821883a 	mov	r16,r5
   42190:	2940038f 	ldh	r5,14(r5)
   42194:	dfc00115 	stw	ra,4(sp)
   42198:	0042ec40 	call	42ec4 <_read_r>
   4219c:	10000716 	blt	r2,zero,421bc <__sread+0x38>
   421a0:	80c01417 	ldw	r3,80(r16)
   421a4:	1887883a 	add	r3,r3,r2
   421a8:	80c01415 	stw	r3,80(r16)
   421ac:	dfc00117 	ldw	ra,4(sp)
   421b0:	dc000017 	ldw	r16,0(sp)
   421b4:	dec00204 	addi	sp,sp,8
   421b8:	f800283a 	ret
   421bc:	80c0030b 	ldhu	r3,12(r16)
   421c0:	18fbffcc 	andi	r3,r3,61439
   421c4:	80c0030d 	sth	r3,12(r16)
   421c8:	dfc00117 	ldw	ra,4(sp)
   421cc:	dc000017 	ldw	r16,0(sp)
   421d0:	dec00204 	addi	sp,sp,8
   421d4:	f800283a 	ret

000421d8 <__seofread>:
   421d8:	0005883a 	mov	r2,zero
   421dc:	f800283a 	ret

000421e0 <__swrite>:
   421e0:	2880030b 	ldhu	r2,12(r5)
   421e4:	defffb04 	addi	sp,sp,-20
   421e8:	dcc00315 	stw	r19,12(sp)
   421ec:	dc800215 	stw	r18,8(sp)
   421f0:	dc400115 	stw	r17,4(sp)
   421f4:	dc000015 	stw	r16,0(sp)
   421f8:	dfc00415 	stw	ra,16(sp)
   421fc:	10c0400c 	andi	r3,r2,256
   42200:	2821883a 	mov	r16,r5
   42204:	2023883a 	mov	r17,r4
   42208:	3025883a 	mov	r18,r6
   4220c:	3827883a 	mov	r19,r7
   42210:	18000526 	beq	r3,zero,42228 <__swrite+0x48>
   42214:	2940038f 	ldh	r5,14(r5)
   42218:	01c00084 	movi	r7,2
   4221c:	000d883a 	mov	r6,zero
   42220:	0042ca80 	call	42ca8 <_lseek_r>
   42224:	8080030b 	ldhu	r2,12(r16)
   42228:	8140038f 	ldh	r5,14(r16)
   4222c:	10bbffcc 	andi	r2,r2,61439
   42230:	980f883a 	mov	r7,r19
   42234:	900d883a 	mov	r6,r18
   42238:	8809883a 	mov	r4,r17
   4223c:	8080030d 	sth	r2,12(r16)
   42240:	dfc00417 	ldw	ra,16(sp)
   42244:	dcc00317 	ldw	r19,12(sp)
   42248:	dc800217 	ldw	r18,8(sp)
   4224c:	dc400117 	ldw	r17,4(sp)
   42250:	dc000017 	ldw	r16,0(sp)
   42254:	dec00504 	addi	sp,sp,20
   42258:	00422c01 	jmpi	422c0 <_write_r>

0004225c <__sseek>:
   4225c:	defffe04 	addi	sp,sp,-8
   42260:	dc000015 	stw	r16,0(sp)
   42264:	2821883a 	mov	r16,r5
   42268:	2940038f 	ldh	r5,14(r5)
   4226c:	dfc00115 	stw	ra,4(sp)
   42270:	0042ca80 	call	42ca8 <_lseek_r>
   42274:	00ffffc4 	movi	r3,-1
   42278:	10c00826 	beq	r2,r3,4229c <__sseek+0x40>
   4227c:	80c0030b 	ldhu	r3,12(r16)
   42280:	80801415 	stw	r2,80(r16)
   42284:	18c40014 	ori	r3,r3,4096
   42288:	80c0030d 	sth	r3,12(r16)
   4228c:	dfc00117 	ldw	ra,4(sp)
   42290:	dc000017 	ldw	r16,0(sp)
   42294:	dec00204 	addi	sp,sp,8
   42298:	f800283a 	ret
   4229c:	80c0030b 	ldhu	r3,12(r16)
   422a0:	18fbffcc 	andi	r3,r3,61439
   422a4:	80c0030d 	sth	r3,12(r16)
   422a8:	dfc00117 	ldw	ra,4(sp)
   422ac:	dc000017 	ldw	r16,0(sp)
   422b0:	dec00204 	addi	sp,sp,8
   422b4:	f800283a 	ret

000422b8 <__sclose>:
   422b8:	2940038f 	ldh	r5,14(r5)
   422bc:	00424741 	jmpi	42474 <_close_r>

000422c0 <_write_r>:
   422c0:	defffd04 	addi	sp,sp,-12
   422c4:	2805883a 	mov	r2,r5
   422c8:	dc000015 	stw	r16,0(sp)
   422cc:	04000174 	movhi	r16,5
   422d0:	dc400115 	stw	r17,4(sp)
   422d4:	300b883a 	mov	r5,r6
   422d8:	8424c404 	addi	r16,r16,-27888
   422dc:	2023883a 	mov	r17,r4
   422e0:	380d883a 	mov	r6,r7
   422e4:	1009883a 	mov	r4,r2
   422e8:	dfc00215 	stw	ra,8(sp)
   422ec:	80000015 	stw	zero,0(r16)
   422f0:	0043a440 	call	43a44 <write>
   422f4:	00ffffc4 	movi	r3,-1
   422f8:	10c00526 	beq	r2,r3,42310 <_write_r+0x50>
   422fc:	dfc00217 	ldw	ra,8(sp)
   42300:	dc400117 	ldw	r17,4(sp)
   42304:	dc000017 	ldw	r16,0(sp)
   42308:	dec00304 	addi	sp,sp,12
   4230c:	f800283a 	ret
   42310:	80c00017 	ldw	r3,0(r16)
   42314:	183ff926 	beq	r3,zero,422fc <__alt_data_end+0xfffd02fc>
   42318:	88c00015 	stw	r3,0(r17)
   4231c:	003ff706 	br	422fc <__alt_data_end+0xfffd02fc>

00042320 <__swsetup_r>:
   42320:	00800134 	movhi	r2,4
   42324:	defffd04 	addi	sp,sp,-12
   42328:	109e0e04 	addi	r2,r2,30776
   4232c:	dc400115 	stw	r17,4(sp)
   42330:	2023883a 	mov	r17,r4
   42334:	11000017 	ldw	r4,0(r2)
   42338:	dc000015 	stw	r16,0(sp)
   4233c:	dfc00215 	stw	ra,8(sp)
   42340:	2821883a 	mov	r16,r5
   42344:	20000226 	beq	r4,zero,42350 <__swsetup_r+0x30>
   42348:	20800e17 	ldw	r2,56(r4)
   4234c:	10003126 	beq	r2,zero,42414 <__swsetup_r+0xf4>
   42350:	8080030b 	ldhu	r2,12(r16)
   42354:	10c0020c 	andi	r3,r2,8
   42358:	1009883a 	mov	r4,r2
   4235c:	18000f26 	beq	r3,zero,4239c <__swsetup_r+0x7c>
   42360:	80c00417 	ldw	r3,16(r16)
   42364:	18001526 	beq	r3,zero,423bc <__swsetup_r+0x9c>
   42368:	1100004c 	andi	r4,r2,1
   4236c:	20001c1e 	bne	r4,zero,423e0 <__swsetup_r+0xc0>
   42370:	1080008c 	andi	r2,r2,2
   42374:	1000291e 	bne	r2,zero,4241c <__swsetup_r+0xfc>
   42378:	80800517 	ldw	r2,20(r16)
   4237c:	80800215 	stw	r2,8(r16)
   42380:	18001c26 	beq	r3,zero,423f4 <__swsetup_r+0xd4>
   42384:	0005883a 	mov	r2,zero
   42388:	dfc00217 	ldw	ra,8(sp)
   4238c:	dc400117 	ldw	r17,4(sp)
   42390:	dc000017 	ldw	r16,0(sp)
   42394:	dec00304 	addi	sp,sp,12
   42398:	f800283a 	ret
   4239c:	2080040c 	andi	r2,r4,16
   423a0:	10002e26 	beq	r2,zero,4245c <__swsetup_r+0x13c>
   423a4:	2080010c 	andi	r2,r4,4
   423a8:	10001e1e 	bne	r2,zero,42424 <__swsetup_r+0x104>
   423ac:	80c00417 	ldw	r3,16(r16)
   423b0:	20800214 	ori	r2,r4,8
   423b4:	8080030d 	sth	r2,12(r16)
   423b8:	183feb1e 	bne	r3,zero,42368 <__alt_data_end+0xfffd0368>
   423bc:	1100a00c 	andi	r4,r2,640
   423c0:	01408004 	movi	r5,512
   423c4:	217fe826 	beq	r4,r5,42368 <__alt_data_end+0xfffd0368>
   423c8:	800b883a 	mov	r5,r16
   423cc:	8809883a 	mov	r4,r17
   423d0:	0042d080 	call	42d08 <__smakebuf_r>
   423d4:	8080030b 	ldhu	r2,12(r16)
   423d8:	80c00417 	ldw	r3,16(r16)
   423dc:	003fe206 	br	42368 <__alt_data_end+0xfffd0368>
   423e0:	80800517 	ldw	r2,20(r16)
   423e4:	80000215 	stw	zero,8(r16)
   423e8:	0085c83a 	sub	r2,zero,r2
   423ec:	80800615 	stw	r2,24(r16)
   423f0:	183fe41e 	bne	r3,zero,42384 <__alt_data_end+0xfffd0384>
   423f4:	80c0030b 	ldhu	r3,12(r16)
   423f8:	0005883a 	mov	r2,zero
   423fc:	1900200c 	andi	r4,r3,128
   42400:	203fe126 	beq	r4,zero,42388 <__alt_data_end+0xfffd0388>
   42404:	18c01014 	ori	r3,r3,64
   42408:	80c0030d 	sth	r3,12(r16)
   4240c:	00bfffc4 	movi	r2,-1
   42410:	003fdd06 	br	42388 <__alt_data_end+0xfffd0388>
   42414:	00408700 	call	40870 <__sinit>
   42418:	003fcd06 	br	42350 <__alt_data_end+0xfffd0350>
   4241c:	0005883a 	mov	r2,zero
   42420:	003fd606 	br	4237c <__alt_data_end+0xfffd037c>
   42424:	81400c17 	ldw	r5,48(r16)
   42428:	28000626 	beq	r5,zero,42444 <__swsetup_r+0x124>
   4242c:	80801004 	addi	r2,r16,64
   42430:	28800326 	beq	r5,r2,42440 <__swsetup_r+0x120>
   42434:	8809883a 	mov	r4,r17
   42438:	00429980 	call	42998 <_free_r>
   4243c:	8100030b 	ldhu	r4,12(r16)
   42440:	80000c15 	stw	zero,48(r16)
   42444:	80c00417 	ldw	r3,16(r16)
   42448:	00bff6c4 	movi	r2,-37
   4244c:	1108703a 	and	r4,r2,r4
   42450:	80000115 	stw	zero,4(r16)
   42454:	80c00015 	stw	r3,0(r16)
   42458:	003fd506 	br	423b0 <__alt_data_end+0xfffd03b0>
   4245c:	00800244 	movi	r2,9
   42460:	88800015 	stw	r2,0(r17)
   42464:	20801014 	ori	r2,r4,64
   42468:	8080030d 	sth	r2,12(r16)
   4246c:	00bfffc4 	movi	r2,-1
   42470:	003fc506 	br	42388 <__alt_data_end+0xfffd0388>

00042474 <_close_r>:
   42474:	defffd04 	addi	sp,sp,-12
   42478:	dc000015 	stw	r16,0(sp)
   4247c:	04000174 	movhi	r16,5
   42480:	dc400115 	stw	r17,4(sp)
   42484:	8424c404 	addi	r16,r16,-27888
   42488:	2023883a 	mov	r17,r4
   4248c:	2809883a 	mov	r4,r5
   42490:	dfc00215 	stw	ra,8(sp)
   42494:	80000015 	stw	zero,0(r16)
   42498:	00431ec0 	call	431ec <close>
   4249c:	00ffffc4 	movi	r3,-1
   424a0:	10c00526 	beq	r2,r3,424b8 <_close_r+0x44>
   424a4:	dfc00217 	ldw	ra,8(sp)
   424a8:	dc400117 	ldw	r17,4(sp)
   424ac:	dc000017 	ldw	r16,0(sp)
   424b0:	dec00304 	addi	sp,sp,12
   424b4:	f800283a 	ret
   424b8:	80c00017 	ldw	r3,0(r16)
   424bc:	183ff926 	beq	r3,zero,424a4 <__alt_data_end+0xfffd04a4>
   424c0:	88c00015 	stw	r3,0(r17)
   424c4:	003ff706 	br	424a4 <__alt_data_end+0xfffd04a4>

000424c8 <_fclose_r>:
   424c8:	28003926 	beq	r5,zero,425b0 <_fclose_r+0xe8>
   424cc:	defffc04 	addi	sp,sp,-16
   424d0:	dc400115 	stw	r17,4(sp)
   424d4:	dc000015 	stw	r16,0(sp)
   424d8:	dfc00315 	stw	ra,12(sp)
   424dc:	dc800215 	stw	r18,8(sp)
   424e0:	2023883a 	mov	r17,r4
   424e4:	2821883a 	mov	r16,r5
   424e8:	20000226 	beq	r4,zero,424f4 <_fclose_r+0x2c>
   424ec:	20800e17 	ldw	r2,56(r4)
   424f0:	10002726 	beq	r2,zero,42590 <_fclose_r+0xc8>
   424f4:	8080030f 	ldh	r2,12(r16)
   424f8:	1000071e 	bne	r2,zero,42518 <_fclose_r+0x50>
   424fc:	0005883a 	mov	r2,zero
   42500:	dfc00317 	ldw	ra,12(sp)
   42504:	dc800217 	ldw	r18,8(sp)
   42508:	dc400117 	ldw	r17,4(sp)
   4250c:	dc000017 	ldw	r16,0(sp)
   42510:	dec00404 	addi	sp,sp,16
   42514:	f800283a 	ret
   42518:	800b883a 	mov	r5,r16
   4251c:	8809883a 	mov	r4,r17
   42520:	00425cc0 	call	425cc <__sflush_r>
   42524:	1025883a 	mov	r18,r2
   42528:	80800b17 	ldw	r2,44(r16)
   4252c:	10000426 	beq	r2,zero,42540 <_fclose_r+0x78>
   42530:	81400717 	ldw	r5,28(r16)
   42534:	8809883a 	mov	r4,r17
   42538:	103ee83a 	callr	r2
   4253c:	10001616 	blt	r2,zero,42598 <_fclose_r+0xd0>
   42540:	8080030b 	ldhu	r2,12(r16)
   42544:	1080200c 	andi	r2,r2,128
   42548:	1000151e 	bne	r2,zero,425a0 <_fclose_r+0xd8>
   4254c:	81400c17 	ldw	r5,48(r16)
   42550:	28000526 	beq	r5,zero,42568 <_fclose_r+0xa0>
   42554:	80801004 	addi	r2,r16,64
   42558:	28800226 	beq	r5,r2,42564 <_fclose_r+0x9c>
   4255c:	8809883a 	mov	r4,r17
   42560:	00429980 	call	42998 <_free_r>
   42564:	80000c15 	stw	zero,48(r16)
   42568:	81401117 	ldw	r5,68(r16)
   4256c:	28000326 	beq	r5,zero,4257c <_fclose_r+0xb4>
   42570:	8809883a 	mov	r4,r17
   42574:	00429980 	call	42998 <_free_r>
   42578:	80001115 	stw	zero,68(r16)
   4257c:	00408800 	call	40880 <__sfp_lock_acquire>
   42580:	8000030d 	sth	zero,12(r16)
   42584:	00408840 	call	40884 <__sfp_lock_release>
   42588:	9005883a 	mov	r2,r18
   4258c:	003fdc06 	br	42500 <__alt_data_end+0xfffd0500>
   42590:	00408700 	call	40870 <__sinit>
   42594:	003fd706 	br	424f4 <__alt_data_end+0xfffd04f4>
   42598:	04bfffc4 	movi	r18,-1
   4259c:	003fe806 	br	42540 <__alt_data_end+0xfffd0540>
   425a0:	81400417 	ldw	r5,16(r16)
   425a4:	8809883a 	mov	r4,r17
   425a8:	00429980 	call	42998 <_free_r>
   425ac:	003fe706 	br	4254c <__alt_data_end+0xfffd054c>
   425b0:	0005883a 	mov	r2,zero
   425b4:	f800283a 	ret

000425b8 <fclose>:
   425b8:	00800134 	movhi	r2,4
   425bc:	109e0e04 	addi	r2,r2,30776
   425c0:	200b883a 	mov	r5,r4
   425c4:	11000017 	ldw	r4,0(r2)
   425c8:	00424c81 	jmpi	424c8 <_fclose_r>

000425cc <__sflush_r>:
   425cc:	2880030b 	ldhu	r2,12(r5)
   425d0:	defffb04 	addi	sp,sp,-20
   425d4:	dcc00315 	stw	r19,12(sp)
   425d8:	dc400115 	stw	r17,4(sp)
   425dc:	dfc00415 	stw	ra,16(sp)
   425e0:	dc800215 	stw	r18,8(sp)
   425e4:	dc000015 	stw	r16,0(sp)
   425e8:	10c0020c 	andi	r3,r2,8
   425ec:	2823883a 	mov	r17,r5
   425f0:	2027883a 	mov	r19,r4
   425f4:	1800311e 	bne	r3,zero,426bc <__sflush_r+0xf0>
   425f8:	28c00117 	ldw	r3,4(r5)
   425fc:	10820014 	ori	r2,r2,2048
   42600:	2880030d 	sth	r2,12(r5)
   42604:	00c04b0e 	bge	zero,r3,42734 <__sflush_r+0x168>
   42608:	8a000a17 	ldw	r8,40(r17)
   4260c:	40002326 	beq	r8,zero,4269c <__sflush_r+0xd0>
   42610:	9c000017 	ldw	r16,0(r19)
   42614:	10c4000c 	andi	r3,r2,4096
   42618:	98000015 	stw	zero,0(r19)
   4261c:	18004826 	beq	r3,zero,42740 <__sflush_r+0x174>
   42620:	89801417 	ldw	r6,80(r17)
   42624:	10c0010c 	andi	r3,r2,4
   42628:	18000626 	beq	r3,zero,42644 <__sflush_r+0x78>
   4262c:	88c00117 	ldw	r3,4(r17)
   42630:	88800c17 	ldw	r2,48(r17)
   42634:	30cdc83a 	sub	r6,r6,r3
   42638:	10000226 	beq	r2,zero,42644 <__sflush_r+0x78>
   4263c:	88800f17 	ldw	r2,60(r17)
   42640:	308dc83a 	sub	r6,r6,r2
   42644:	89400717 	ldw	r5,28(r17)
   42648:	000f883a 	mov	r7,zero
   4264c:	9809883a 	mov	r4,r19
   42650:	403ee83a 	callr	r8
   42654:	00ffffc4 	movi	r3,-1
   42658:	10c04426 	beq	r2,r3,4276c <__sflush_r+0x1a0>
   4265c:	88c0030b 	ldhu	r3,12(r17)
   42660:	89000417 	ldw	r4,16(r17)
   42664:	88000115 	stw	zero,4(r17)
   42668:	197dffcc 	andi	r5,r3,63487
   4266c:	8940030d 	sth	r5,12(r17)
   42670:	89000015 	stw	r4,0(r17)
   42674:	18c4000c 	andi	r3,r3,4096
   42678:	18002c1e 	bne	r3,zero,4272c <__sflush_r+0x160>
   4267c:	89400c17 	ldw	r5,48(r17)
   42680:	9c000015 	stw	r16,0(r19)
   42684:	28000526 	beq	r5,zero,4269c <__sflush_r+0xd0>
   42688:	88801004 	addi	r2,r17,64
   4268c:	28800226 	beq	r5,r2,42698 <__sflush_r+0xcc>
   42690:	9809883a 	mov	r4,r19
   42694:	00429980 	call	42998 <_free_r>
   42698:	88000c15 	stw	zero,48(r17)
   4269c:	0005883a 	mov	r2,zero
   426a0:	dfc00417 	ldw	ra,16(sp)
   426a4:	dcc00317 	ldw	r19,12(sp)
   426a8:	dc800217 	ldw	r18,8(sp)
   426ac:	dc400117 	ldw	r17,4(sp)
   426b0:	dc000017 	ldw	r16,0(sp)
   426b4:	dec00504 	addi	sp,sp,20
   426b8:	f800283a 	ret
   426bc:	2c800417 	ldw	r18,16(r5)
   426c0:	903ff626 	beq	r18,zero,4269c <__alt_data_end+0xfffd069c>
   426c4:	2c000017 	ldw	r16,0(r5)
   426c8:	108000cc 	andi	r2,r2,3
   426cc:	2c800015 	stw	r18,0(r5)
   426d0:	84a1c83a 	sub	r16,r16,r18
   426d4:	1000131e 	bne	r2,zero,42724 <__sflush_r+0x158>
   426d8:	28800517 	ldw	r2,20(r5)
   426dc:	88800215 	stw	r2,8(r17)
   426e0:	04000316 	blt	zero,r16,426f0 <__sflush_r+0x124>
   426e4:	003fed06 	br	4269c <__alt_data_end+0xfffd069c>
   426e8:	90a5883a 	add	r18,r18,r2
   426ec:	043feb0e 	bge	zero,r16,4269c <__alt_data_end+0xfffd069c>
   426f0:	88800917 	ldw	r2,36(r17)
   426f4:	89400717 	ldw	r5,28(r17)
   426f8:	800f883a 	mov	r7,r16
   426fc:	900d883a 	mov	r6,r18
   42700:	9809883a 	mov	r4,r19
   42704:	103ee83a 	callr	r2
   42708:	80a1c83a 	sub	r16,r16,r2
   4270c:	00bff616 	blt	zero,r2,426e8 <__alt_data_end+0xfffd06e8>
   42710:	88c0030b 	ldhu	r3,12(r17)
   42714:	00bfffc4 	movi	r2,-1
   42718:	18c01014 	ori	r3,r3,64
   4271c:	88c0030d 	sth	r3,12(r17)
   42720:	003fdf06 	br	426a0 <__alt_data_end+0xfffd06a0>
   42724:	0005883a 	mov	r2,zero
   42728:	003fec06 	br	426dc <__alt_data_end+0xfffd06dc>
   4272c:	88801415 	stw	r2,80(r17)
   42730:	003fd206 	br	4267c <__alt_data_end+0xfffd067c>
   42734:	28c00f17 	ldw	r3,60(r5)
   42738:	00ffb316 	blt	zero,r3,42608 <__alt_data_end+0xfffd0608>
   4273c:	003fd706 	br	4269c <__alt_data_end+0xfffd069c>
   42740:	89400717 	ldw	r5,28(r17)
   42744:	000d883a 	mov	r6,zero
   42748:	01c00044 	movi	r7,1
   4274c:	9809883a 	mov	r4,r19
   42750:	403ee83a 	callr	r8
   42754:	100d883a 	mov	r6,r2
   42758:	00bfffc4 	movi	r2,-1
   4275c:	30801426 	beq	r6,r2,427b0 <__sflush_r+0x1e4>
   42760:	8880030b 	ldhu	r2,12(r17)
   42764:	8a000a17 	ldw	r8,40(r17)
   42768:	003fae06 	br	42624 <__alt_data_end+0xfffd0624>
   4276c:	98c00017 	ldw	r3,0(r19)
   42770:	183fba26 	beq	r3,zero,4265c <__alt_data_end+0xfffd065c>
   42774:	01000744 	movi	r4,29
   42778:	19000626 	beq	r3,r4,42794 <__sflush_r+0x1c8>
   4277c:	01000584 	movi	r4,22
   42780:	19000426 	beq	r3,r4,42794 <__sflush_r+0x1c8>
   42784:	88c0030b 	ldhu	r3,12(r17)
   42788:	18c01014 	ori	r3,r3,64
   4278c:	88c0030d 	sth	r3,12(r17)
   42790:	003fc306 	br	426a0 <__alt_data_end+0xfffd06a0>
   42794:	8880030b 	ldhu	r2,12(r17)
   42798:	88c00417 	ldw	r3,16(r17)
   4279c:	88000115 	stw	zero,4(r17)
   427a0:	10bdffcc 	andi	r2,r2,63487
   427a4:	8880030d 	sth	r2,12(r17)
   427a8:	88c00015 	stw	r3,0(r17)
   427ac:	003fb306 	br	4267c <__alt_data_end+0xfffd067c>
   427b0:	98800017 	ldw	r2,0(r19)
   427b4:	103fea26 	beq	r2,zero,42760 <__alt_data_end+0xfffd0760>
   427b8:	00c00744 	movi	r3,29
   427bc:	10c00226 	beq	r2,r3,427c8 <__sflush_r+0x1fc>
   427c0:	00c00584 	movi	r3,22
   427c4:	10c0031e 	bne	r2,r3,427d4 <__sflush_r+0x208>
   427c8:	9c000015 	stw	r16,0(r19)
   427cc:	0005883a 	mov	r2,zero
   427d0:	003fb306 	br	426a0 <__alt_data_end+0xfffd06a0>
   427d4:	88c0030b 	ldhu	r3,12(r17)
   427d8:	3005883a 	mov	r2,r6
   427dc:	18c01014 	ori	r3,r3,64
   427e0:	88c0030d 	sth	r3,12(r17)
   427e4:	003fae06 	br	426a0 <__alt_data_end+0xfffd06a0>

000427e8 <_fflush_r>:
   427e8:	defffd04 	addi	sp,sp,-12
   427ec:	dc000115 	stw	r16,4(sp)
   427f0:	dfc00215 	stw	ra,8(sp)
   427f4:	2021883a 	mov	r16,r4
   427f8:	20000226 	beq	r4,zero,42804 <_fflush_r+0x1c>
   427fc:	20800e17 	ldw	r2,56(r4)
   42800:	10000c26 	beq	r2,zero,42834 <_fflush_r+0x4c>
   42804:	2880030f 	ldh	r2,12(r5)
   42808:	1000051e 	bne	r2,zero,42820 <_fflush_r+0x38>
   4280c:	0005883a 	mov	r2,zero
   42810:	dfc00217 	ldw	ra,8(sp)
   42814:	dc000117 	ldw	r16,4(sp)
   42818:	dec00304 	addi	sp,sp,12
   4281c:	f800283a 	ret
   42820:	8009883a 	mov	r4,r16
   42824:	dfc00217 	ldw	ra,8(sp)
   42828:	dc000117 	ldw	r16,4(sp)
   4282c:	dec00304 	addi	sp,sp,12
   42830:	00425cc1 	jmpi	425cc <__sflush_r>
   42834:	d9400015 	stw	r5,0(sp)
   42838:	00408700 	call	40870 <__sinit>
   4283c:	d9400017 	ldw	r5,0(sp)
   42840:	003ff006 	br	42804 <__alt_data_end+0xfffd0804>

00042844 <fflush>:
   42844:	20000526 	beq	r4,zero,4285c <fflush+0x18>
   42848:	00800134 	movhi	r2,4
   4284c:	109e0e04 	addi	r2,r2,30776
   42850:	200b883a 	mov	r5,r4
   42854:	11000017 	ldw	r4,0(r2)
   42858:	00427e81 	jmpi	427e8 <_fflush_r>
   4285c:	00800134 	movhi	r2,4
   42860:	109e0d04 	addi	r2,r2,30772
   42864:	11000017 	ldw	r4,0(r2)
   42868:	01400134 	movhi	r5,4
   4286c:	2949fa04 	addi	r5,r5,10216
   42870:	0040e4c1 	jmpi	40e4c <_fwalk_reent>

00042874 <_malloc_trim_r>:
   42874:	defffb04 	addi	sp,sp,-20
   42878:	dcc00315 	stw	r19,12(sp)
   4287c:	04c00134 	movhi	r19,4
   42880:	dc800215 	stw	r18,8(sp)
   42884:	dc400115 	stw	r17,4(sp)
   42888:	dc000015 	stw	r16,0(sp)
   4288c:	dfc00415 	stw	ra,16(sp)
   42890:	2821883a 	mov	r16,r5
   42894:	9cd87e04 	addi	r19,r19,25080
   42898:	2025883a 	mov	r18,r4
   4289c:	004374c0 	call	4374c <__malloc_lock>
   428a0:	98800217 	ldw	r2,8(r19)
   428a4:	14400117 	ldw	r17,4(r2)
   428a8:	00bfff04 	movi	r2,-4
   428ac:	88a2703a 	and	r17,r17,r2
   428b0:	8c21c83a 	sub	r16,r17,r16
   428b4:	8403fbc4 	addi	r16,r16,4079
   428b8:	8020d33a 	srli	r16,r16,12
   428bc:	0083ffc4 	movi	r2,4095
   428c0:	843fffc4 	addi	r16,r16,-1
   428c4:	8020933a 	slli	r16,r16,12
   428c8:	1400060e 	bge	r2,r16,428e4 <_malloc_trim_r+0x70>
   428cc:	000b883a 	mov	r5,zero
   428d0:	9009883a 	mov	r4,r18
   428d4:	00421300 	call	42130 <_sbrk_r>
   428d8:	98c00217 	ldw	r3,8(r19)
   428dc:	1c47883a 	add	r3,r3,r17
   428e0:	10c00a26 	beq	r2,r3,4290c <_malloc_trim_r+0x98>
   428e4:	9009883a 	mov	r4,r18
   428e8:	00437700 	call	43770 <__malloc_unlock>
   428ec:	0005883a 	mov	r2,zero
   428f0:	dfc00417 	ldw	ra,16(sp)
   428f4:	dcc00317 	ldw	r19,12(sp)
   428f8:	dc800217 	ldw	r18,8(sp)
   428fc:	dc400117 	ldw	r17,4(sp)
   42900:	dc000017 	ldw	r16,0(sp)
   42904:	dec00504 	addi	sp,sp,20
   42908:	f800283a 	ret
   4290c:	040bc83a 	sub	r5,zero,r16
   42910:	9009883a 	mov	r4,r18
   42914:	00421300 	call	42130 <_sbrk_r>
   42918:	00ffffc4 	movi	r3,-1
   4291c:	10c00d26 	beq	r2,r3,42954 <_malloc_trim_r+0xe0>
   42920:	00c00174 	movhi	r3,5
   42924:	18e4cc04 	addi	r3,r3,-27856
   42928:	18800017 	ldw	r2,0(r3)
   4292c:	99000217 	ldw	r4,8(r19)
   42930:	8c23c83a 	sub	r17,r17,r16
   42934:	8c400054 	ori	r17,r17,1
   42938:	1421c83a 	sub	r16,r2,r16
   4293c:	24400115 	stw	r17,4(r4)
   42940:	9009883a 	mov	r4,r18
   42944:	1c000015 	stw	r16,0(r3)
   42948:	00437700 	call	43770 <__malloc_unlock>
   4294c:	00800044 	movi	r2,1
   42950:	003fe706 	br	428f0 <__alt_data_end+0xfffd08f0>
   42954:	000b883a 	mov	r5,zero
   42958:	9009883a 	mov	r4,r18
   4295c:	00421300 	call	42130 <_sbrk_r>
   42960:	99000217 	ldw	r4,8(r19)
   42964:	014003c4 	movi	r5,15
   42968:	1107c83a 	sub	r3,r2,r4
   4296c:	28ffdd0e 	bge	r5,r3,428e4 <__alt_data_end+0xfffd08e4>
   42970:	01400134 	movhi	r5,4
   42974:	295e0f04 	addi	r5,r5,30780
   42978:	29400017 	ldw	r5,0(r5)
   4297c:	18c00054 	ori	r3,r3,1
   42980:	20c00115 	stw	r3,4(r4)
   42984:	00c00174 	movhi	r3,5
   42988:	1145c83a 	sub	r2,r2,r5
   4298c:	18e4cc04 	addi	r3,r3,-27856
   42990:	18800015 	stw	r2,0(r3)
   42994:	003fd306 	br	428e4 <__alt_data_end+0xfffd08e4>

00042998 <_free_r>:
   42998:	28004126 	beq	r5,zero,42aa0 <_free_r+0x108>
   4299c:	defffd04 	addi	sp,sp,-12
   429a0:	dc400115 	stw	r17,4(sp)
   429a4:	dc000015 	stw	r16,0(sp)
   429a8:	2023883a 	mov	r17,r4
   429ac:	2821883a 	mov	r16,r5
   429b0:	dfc00215 	stw	ra,8(sp)
   429b4:	004374c0 	call	4374c <__malloc_lock>
   429b8:	81ffff17 	ldw	r7,-4(r16)
   429bc:	00bfff84 	movi	r2,-2
   429c0:	01000134 	movhi	r4,4
   429c4:	81bffe04 	addi	r6,r16,-8
   429c8:	3884703a 	and	r2,r7,r2
   429cc:	21187e04 	addi	r4,r4,25080
   429d0:	308b883a 	add	r5,r6,r2
   429d4:	2a400117 	ldw	r9,4(r5)
   429d8:	22000217 	ldw	r8,8(r4)
   429dc:	00ffff04 	movi	r3,-4
   429e0:	48c6703a 	and	r3,r9,r3
   429e4:	2a005726 	beq	r5,r8,42b44 <_free_r+0x1ac>
   429e8:	28c00115 	stw	r3,4(r5)
   429ec:	39c0004c 	andi	r7,r7,1
   429f0:	3800091e 	bne	r7,zero,42a18 <_free_r+0x80>
   429f4:	823ffe17 	ldw	r8,-8(r16)
   429f8:	22400204 	addi	r9,r4,8
   429fc:	320dc83a 	sub	r6,r6,r8
   42a00:	31c00217 	ldw	r7,8(r6)
   42a04:	1205883a 	add	r2,r2,r8
   42a08:	3a406526 	beq	r7,r9,42ba0 <_free_r+0x208>
   42a0c:	32000317 	ldw	r8,12(r6)
   42a10:	3a000315 	stw	r8,12(r7)
   42a14:	41c00215 	stw	r7,8(r8)
   42a18:	28cf883a 	add	r7,r5,r3
   42a1c:	39c00117 	ldw	r7,4(r7)
   42a20:	39c0004c 	andi	r7,r7,1
   42a24:	38003a26 	beq	r7,zero,42b10 <_free_r+0x178>
   42a28:	10c00054 	ori	r3,r2,1
   42a2c:	30c00115 	stw	r3,4(r6)
   42a30:	3087883a 	add	r3,r6,r2
   42a34:	18800015 	stw	r2,0(r3)
   42a38:	00c07fc4 	movi	r3,511
   42a3c:	18801936 	bltu	r3,r2,42aa4 <_free_r+0x10c>
   42a40:	1004d0fa 	srli	r2,r2,3
   42a44:	01c00044 	movi	r7,1
   42a48:	21400117 	ldw	r5,4(r4)
   42a4c:	10c00044 	addi	r3,r2,1
   42a50:	18c7883a 	add	r3,r3,r3
   42a54:	1005d0ba 	srai	r2,r2,2
   42a58:	18c7883a 	add	r3,r3,r3
   42a5c:	18c7883a 	add	r3,r3,r3
   42a60:	1907883a 	add	r3,r3,r4
   42a64:	3884983a 	sll	r2,r7,r2
   42a68:	19c00017 	ldw	r7,0(r3)
   42a6c:	1a3ffe04 	addi	r8,r3,-8
   42a70:	1144b03a 	or	r2,r2,r5
   42a74:	32000315 	stw	r8,12(r6)
   42a78:	31c00215 	stw	r7,8(r6)
   42a7c:	20800115 	stw	r2,4(r4)
   42a80:	19800015 	stw	r6,0(r3)
   42a84:	39800315 	stw	r6,12(r7)
   42a88:	8809883a 	mov	r4,r17
   42a8c:	dfc00217 	ldw	ra,8(sp)
   42a90:	dc400117 	ldw	r17,4(sp)
   42a94:	dc000017 	ldw	r16,0(sp)
   42a98:	dec00304 	addi	sp,sp,12
   42a9c:	00437701 	jmpi	43770 <__malloc_unlock>
   42aa0:	f800283a 	ret
   42aa4:	100ad27a 	srli	r5,r2,9
   42aa8:	00c00104 	movi	r3,4
   42aac:	19404a36 	bltu	r3,r5,42bd8 <_free_r+0x240>
   42ab0:	100ad1ba 	srli	r5,r2,6
   42ab4:	28c00e44 	addi	r3,r5,57
   42ab8:	18c7883a 	add	r3,r3,r3
   42abc:	29400e04 	addi	r5,r5,56
   42ac0:	18c7883a 	add	r3,r3,r3
   42ac4:	18c7883a 	add	r3,r3,r3
   42ac8:	1909883a 	add	r4,r3,r4
   42acc:	20c00017 	ldw	r3,0(r4)
   42ad0:	01c00134 	movhi	r7,4
   42ad4:	213ffe04 	addi	r4,r4,-8
   42ad8:	39d87e04 	addi	r7,r7,25080
   42adc:	20c04426 	beq	r4,r3,42bf0 <_free_r+0x258>
   42ae0:	01ffff04 	movi	r7,-4
   42ae4:	19400117 	ldw	r5,4(r3)
   42ae8:	29ca703a 	and	r5,r5,r7
   42aec:	1140022e 	bgeu	r2,r5,42af8 <_free_r+0x160>
   42af0:	18c00217 	ldw	r3,8(r3)
   42af4:	20fffb1e 	bne	r4,r3,42ae4 <__alt_data_end+0xfffd0ae4>
   42af8:	19000317 	ldw	r4,12(r3)
   42afc:	31000315 	stw	r4,12(r6)
   42b00:	30c00215 	stw	r3,8(r6)
   42b04:	21800215 	stw	r6,8(r4)
   42b08:	19800315 	stw	r6,12(r3)
   42b0c:	003fde06 	br	42a88 <__alt_data_end+0xfffd0a88>
   42b10:	29c00217 	ldw	r7,8(r5)
   42b14:	10c5883a 	add	r2,r2,r3
   42b18:	00c00134 	movhi	r3,4
   42b1c:	18d88004 	addi	r3,r3,25088
   42b20:	38c03b26 	beq	r7,r3,42c10 <_free_r+0x278>
   42b24:	2a000317 	ldw	r8,12(r5)
   42b28:	11400054 	ori	r5,r2,1
   42b2c:	3087883a 	add	r3,r6,r2
   42b30:	3a000315 	stw	r8,12(r7)
   42b34:	41c00215 	stw	r7,8(r8)
   42b38:	31400115 	stw	r5,4(r6)
   42b3c:	18800015 	stw	r2,0(r3)
   42b40:	003fbd06 	br	42a38 <__alt_data_end+0xfffd0a38>
   42b44:	39c0004c 	andi	r7,r7,1
   42b48:	10c5883a 	add	r2,r2,r3
   42b4c:	3800071e 	bne	r7,zero,42b6c <_free_r+0x1d4>
   42b50:	81fffe17 	ldw	r7,-8(r16)
   42b54:	31cdc83a 	sub	r6,r6,r7
   42b58:	30c00317 	ldw	r3,12(r6)
   42b5c:	31400217 	ldw	r5,8(r6)
   42b60:	11c5883a 	add	r2,r2,r7
   42b64:	28c00315 	stw	r3,12(r5)
   42b68:	19400215 	stw	r5,8(r3)
   42b6c:	10c00054 	ori	r3,r2,1
   42b70:	30c00115 	stw	r3,4(r6)
   42b74:	00c00134 	movhi	r3,4
   42b78:	18de1004 	addi	r3,r3,30784
   42b7c:	18c00017 	ldw	r3,0(r3)
   42b80:	21800215 	stw	r6,8(r4)
   42b84:	10ffc036 	bltu	r2,r3,42a88 <__alt_data_end+0xfffd0a88>
   42b88:	00800174 	movhi	r2,5
   42b8c:	10a4c304 	addi	r2,r2,-27892
   42b90:	11400017 	ldw	r5,0(r2)
   42b94:	8809883a 	mov	r4,r17
   42b98:	00428740 	call	42874 <_malloc_trim_r>
   42b9c:	003fba06 	br	42a88 <__alt_data_end+0xfffd0a88>
   42ba0:	28c9883a 	add	r4,r5,r3
   42ba4:	21000117 	ldw	r4,4(r4)
   42ba8:	2100004c 	andi	r4,r4,1
   42bac:	2000391e 	bne	r4,zero,42c94 <_free_r+0x2fc>
   42bb0:	29c00217 	ldw	r7,8(r5)
   42bb4:	29000317 	ldw	r4,12(r5)
   42bb8:	1885883a 	add	r2,r3,r2
   42bbc:	10c00054 	ori	r3,r2,1
   42bc0:	39000315 	stw	r4,12(r7)
   42bc4:	21c00215 	stw	r7,8(r4)
   42bc8:	30c00115 	stw	r3,4(r6)
   42bcc:	308d883a 	add	r6,r6,r2
   42bd0:	30800015 	stw	r2,0(r6)
   42bd4:	003fac06 	br	42a88 <__alt_data_end+0xfffd0a88>
   42bd8:	00c00504 	movi	r3,20
   42bdc:	19401536 	bltu	r3,r5,42c34 <_free_r+0x29c>
   42be0:	28c01704 	addi	r3,r5,92
   42be4:	18c7883a 	add	r3,r3,r3
   42be8:	294016c4 	addi	r5,r5,91
   42bec:	003fb406 	br	42ac0 <__alt_data_end+0xfffd0ac0>
   42bf0:	280bd0ba 	srai	r5,r5,2
   42bf4:	00c00044 	movi	r3,1
   42bf8:	38800117 	ldw	r2,4(r7)
   42bfc:	194a983a 	sll	r5,r3,r5
   42c00:	2007883a 	mov	r3,r4
   42c04:	2884b03a 	or	r2,r5,r2
   42c08:	38800115 	stw	r2,4(r7)
   42c0c:	003fbb06 	br	42afc <__alt_data_end+0xfffd0afc>
   42c10:	21800515 	stw	r6,20(r4)
   42c14:	21800415 	stw	r6,16(r4)
   42c18:	10c00054 	ori	r3,r2,1
   42c1c:	31c00315 	stw	r7,12(r6)
   42c20:	31c00215 	stw	r7,8(r6)
   42c24:	30c00115 	stw	r3,4(r6)
   42c28:	308d883a 	add	r6,r6,r2
   42c2c:	30800015 	stw	r2,0(r6)
   42c30:	003f9506 	br	42a88 <__alt_data_end+0xfffd0a88>
   42c34:	00c01504 	movi	r3,84
   42c38:	19400536 	bltu	r3,r5,42c50 <_free_r+0x2b8>
   42c3c:	100ad33a 	srli	r5,r2,12
   42c40:	28c01bc4 	addi	r3,r5,111
   42c44:	18c7883a 	add	r3,r3,r3
   42c48:	29401b84 	addi	r5,r5,110
   42c4c:	003f9c06 	br	42ac0 <__alt_data_end+0xfffd0ac0>
   42c50:	00c05504 	movi	r3,340
   42c54:	19400536 	bltu	r3,r5,42c6c <_free_r+0x2d4>
   42c58:	100ad3fa 	srli	r5,r2,15
   42c5c:	28c01e04 	addi	r3,r5,120
   42c60:	18c7883a 	add	r3,r3,r3
   42c64:	29401dc4 	addi	r5,r5,119
   42c68:	003f9506 	br	42ac0 <__alt_data_end+0xfffd0ac0>
   42c6c:	00c15504 	movi	r3,1364
   42c70:	19400536 	bltu	r3,r5,42c88 <_free_r+0x2f0>
   42c74:	100ad4ba 	srli	r5,r2,18
   42c78:	28c01f44 	addi	r3,r5,125
   42c7c:	18c7883a 	add	r3,r3,r3
   42c80:	29401f04 	addi	r5,r5,124
   42c84:	003f8e06 	br	42ac0 <__alt_data_end+0xfffd0ac0>
   42c88:	00c03f84 	movi	r3,254
   42c8c:	01401f84 	movi	r5,126
   42c90:	003f8b06 	br	42ac0 <__alt_data_end+0xfffd0ac0>
   42c94:	10c00054 	ori	r3,r2,1
   42c98:	30c00115 	stw	r3,4(r6)
   42c9c:	308d883a 	add	r6,r6,r2
   42ca0:	30800015 	stw	r2,0(r6)
   42ca4:	003f7806 	br	42a88 <__alt_data_end+0xfffd0a88>

00042ca8 <_lseek_r>:
   42ca8:	defffd04 	addi	sp,sp,-12
   42cac:	2805883a 	mov	r2,r5
   42cb0:	dc000015 	stw	r16,0(sp)
   42cb4:	04000174 	movhi	r16,5
   42cb8:	dc400115 	stw	r17,4(sp)
   42cbc:	300b883a 	mov	r5,r6
   42cc0:	8424c404 	addi	r16,r16,-27888
   42cc4:	2023883a 	mov	r17,r4
   42cc8:	380d883a 	mov	r6,r7
   42ccc:	1009883a 	mov	r4,r2
   42cd0:	dfc00215 	stw	ra,8(sp)
   42cd4:	80000015 	stw	zero,0(r16)
   42cd8:	00435f40 	call	435f4 <lseek>
   42cdc:	00ffffc4 	movi	r3,-1
   42ce0:	10c00526 	beq	r2,r3,42cf8 <_lseek_r+0x50>
   42ce4:	dfc00217 	ldw	ra,8(sp)
   42ce8:	dc400117 	ldw	r17,4(sp)
   42cec:	dc000017 	ldw	r16,0(sp)
   42cf0:	dec00304 	addi	sp,sp,12
   42cf4:	f800283a 	ret
   42cf8:	80c00017 	ldw	r3,0(r16)
   42cfc:	183ff926 	beq	r3,zero,42ce4 <__alt_data_end+0xfffd0ce4>
   42d00:	88c00015 	stw	r3,0(r17)
   42d04:	003ff706 	br	42ce4 <__alt_data_end+0xfffd0ce4>

00042d08 <__smakebuf_r>:
   42d08:	2880030b 	ldhu	r2,12(r5)
   42d0c:	10c0008c 	andi	r3,r2,2
   42d10:	1800411e 	bne	r3,zero,42e18 <__smakebuf_r+0x110>
   42d14:	deffec04 	addi	sp,sp,-80
   42d18:	dc000f15 	stw	r16,60(sp)
   42d1c:	2821883a 	mov	r16,r5
   42d20:	2940038f 	ldh	r5,14(r5)
   42d24:	dc401015 	stw	r17,64(sp)
   42d28:	dfc01315 	stw	ra,76(sp)
   42d2c:	dcc01215 	stw	r19,72(sp)
   42d30:	dc801115 	stw	r18,68(sp)
   42d34:	2023883a 	mov	r17,r4
   42d38:	28001c16 	blt	r5,zero,42dac <__smakebuf_r+0xa4>
   42d3c:	d80d883a 	mov	r6,sp
   42d40:	0042f240 	call	42f24 <_fstat_r>
   42d44:	10001816 	blt	r2,zero,42da8 <__smakebuf_r+0xa0>
   42d48:	d8800117 	ldw	r2,4(sp)
   42d4c:	00e00014 	movui	r3,32768
   42d50:	10bc000c 	andi	r2,r2,61440
   42d54:	14c80020 	cmpeqi	r19,r2,8192
   42d58:	10c03726 	beq	r2,r3,42e38 <__smakebuf_r+0x130>
   42d5c:	80c0030b 	ldhu	r3,12(r16)
   42d60:	18c20014 	ori	r3,r3,2048
   42d64:	80c0030d 	sth	r3,12(r16)
   42d68:	00c80004 	movi	r3,8192
   42d6c:	10c0521e 	bne	r2,r3,42eb8 <__smakebuf_r+0x1b0>
   42d70:	8140038f 	ldh	r5,14(r16)
   42d74:	8809883a 	mov	r4,r17
   42d78:	0042f800 	call	42f80 <_isatty_r>
   42d7c:	10004c26 	beq	r2,zero,42eb0 <__smakebuf_r+0x1a8>
   42d80:	8080030b 	ldhu	r2,12(r16)
   42d84:	80c010c4 	addi	r3,r16,67
   42d88:	80c00015 	stw	r3,0(r16)
   42d8c:	10800054 	ori	r2,r2,1
   42d90:	8080030d 	sth	r2,12(r16)
   42d94:	00800044 	movi	r2,1
   42d98:	80c00415 	stw	r3,16(r16)
   42d9c:	80800515 	stw	r2,20(r16)
   42da0:	04810004 	movi	r18,1024
   42da4:	00000706 	br	42dc4 <__smakebuf_r+0xbc>
   42da8:	8080030b 	ldhu	r2,12(r16)
   42dac:	10c0200c 	andi	r3,r2,128
   42db0:	18001f1e 	bne	r3,zero,42e30 <__smakebuf_r+0x128>
   42db4:	04810004 	movi	r18,1024
   42db8:	10820014 	ori	r2,r2,2048
   42dbc:	8080030d 	sth	r2,12(r16)
   42dc0:	0027883a 	mov	r19,zero
   42dc4:	900b883a 	mov	r5,r18
   42dc8:	8809883a 	mov	r4,r17
   42dcc:	0040f100 	call	40f10 <_malloc_r>
   42dd0:	10002c26 	beq	r2,zero,42e84 <__smakebuf_r+0x17c>
   42dd4:	80c0030b 	ldhu	r3,12(r16)
   42dd8:	01000134 	movhi	r4,4
   42ddc:	21014604 	addi	r4,r4,1304
   42de0:	89000f15 	stw	r4,60(r17)
   42de4:	18c02014 	ori	r3,r3,128
   42de8:	80c0030d 	sth	r3,12(r16)
   42dec:	80800015 	stw	r2,0(r16)
   42df0:	80800415 	stw	r2,16(r16)
   42df4:	84800515 	stw	r18,20(r16)
   42df8:	98001a1e 	bne	r19,zero,42e64 <__smakebuf_r+0x15c>
   42dfc:	dfc01317 	ldw	ra,76(sp)
   42e00:	dcc01217 	ldw	r19,72(sp)
   42e04:	dc801117 	ldw	r18,68(sp)
   42e08:	dc401017 	ldw	r17,64(sp)
   42e0c:	dc000f17 	ldw	r16,60(sp)
   42e10:	dec01404 	addi	sp,sp,80
   42e14:	f800283a 	ret
   42e18:	288010c4 	addi	r2,r5,67
   42e1c:	28800015 	stw	r2,0(r5)
   42e20:	28800415 	stw	r2,16(r5)
   42e24:	00800044 	movi	r2,1
   42e28:	28800515 	stw	r2,20(r5)
   42e2c:	f800283a 	ret
   42e30:	04801004 	movi	r18,64
   42e34:	003fe006 	br	42db8 <__alt_data_end+0xfffd0db8>
   42e38:	81000a17 	ldw	r4,40(r16)
   42e3c:	00c00134 	movhi	r3,4
   42e40:	18c89704 	addi	r3,r3,8796
   42e44:	20ffc51e 	bne	r4,r3,42d5c <__alt_data_end+0xfffd0d5c>
   42e48:	8080030b 	ldhu	r2,12(r16)
   42e4c:	04810004 	movi	r18,1024
   42e50:	84801315 	stw	r18,76(r16)
   42e54:	1484b03a 	or	r2,r2,r18
   42e58:	8080030d 	sth	r2,12(r16)
   42e5c:	0027883a 	mov	r19,zero
   42e60:	003fd806 	br	42dc4 <__alt_data_end+0xfffd0dc4>
   42e64:	8140038f 	ldh	r5,14(r16)
   42e68:	8809883a 	mov	r4,r17
   42e6c:	0042f800 	call	42f80 <_isatty_r>
   42e70:	103fe226 	beq	r2,zero,42dfc <__alt_data_end+0xfffd0dfc>
   42e74:	8080030b 	ldhu	r2,12(r16)
   42e78:	10800054 	ori	r2,r2,1
   42e7c:	8080030d 	sth	r2,12(r16)
   42e80:	003fde06 	br	42dfc <__alt_data_end+0xfffd0dfc>
   42e84:	8080030b 	ldhu	r2,12(r16)
   42e88:	10c0800c 	andi	r3,r2,512
   42e8c:	183fdb1e 	bne	r3,zero,42dfc <__alt_data_end+0xfffd0dfc>
   42e90:	10800094 	ori	r2,r2,2
   42e94:	80c010c4 	addi	r3,r16,67
   42e98:	8080030d 	sth	r2,12(r16)
   42e9c:	00800044 	movi	r2,1
   42ea0:	80c00015 	stw	r3,0(r16)
   42ea4:	80c00415 	stw	r3,16(r16)
   42ea8:	80800515 	stw	r2,20(r16)
   42eac:	003fd306 	br	42dfc <__alt_data_end+0xfffd0dfc>
   42eb0:	04810004 	movi	r18,1024
   42eb4:	003fc306 	br	42dc4 <__alt_data_end+0xfffd0dc4>
   42eb8:	0027883a 	mov	r19,zero
   42ebc:	04810004 	movi	r18,1024
   42ec0:	003fc006 	br	42dc4 <__alt_data_end+0xfffd0dc4>

00042ec4 <_read_r>:
   42ec4:	defffd04 	addi	sp,sp,-12
   42ec8:	2805883a 	mov	r2,r5
   42ecc:	dc000015 	stw	r16,0(sp)
   42ed0:	04000174 	movhi	r16,5
   42ed4:	dc400115 	stw	r17,4(sp)
   42ed8:	300b883a 	mov	r5,r6
   42edc:	8424c404 	addi	r16,r16,-27888
   42ee0:	2023883a 	mov	r17,r4
   42ee4:	380d883a 	mov	r6,r7
   42ee8:	1009883a 	mov	r4,r2
   42eec:	dfc00215 	stw	ra,8(sp)
   42ef0:	80000015 	stw	zero,0(r16)
   42ef4:	00437d00 	call	437d0 <read>
   42ef8:	00ffffc4 	movi	r3,-1
   42efc:	10c00526 	beq	r2,r3,42f14 <_read_r+0x50>
   42f00:	dfc00217 	ldw	ra,8(sp)
   42f04:	dc400117 	ldw	r17,4(sp)
   42f08:	dc000017 	ldw	r16,0(sp)
   42f0c:	dec00304 	addi	sp,sp,12
   42f10:	f800283a 	ret
   42f14:	80c00017 	ldw	r3,0(r16)
   42f18:	183ff926 	beq	r3,zero,42f00 <__alt_data_end+0xfffd0f00>
   42f1c:	88c00015 	stw	r3,0(r17)
   42f20:	003ff706 	br	42f00 <__alt_data_end+0xfffd0f00>

00042f24 <_fstat_r>:
   42f24:	defffd04 	addi	sp,sp,-12
   42f28:	2805883a 	mov	r2,r5
   42f2c:	dc000015 	stw	r16,0(sp)
   42f30:	04000174 	movhi	r16,5
   42f34:	dc400115 	stw	r17,4(sp)
   42f38:	8424c404 	addi	r16,r16,-27888
   42f3c:	2023883a 	mov	r17,r4
   42f40:	300b883a 	mov	r5,r6
   42f44:	1009883a 	mov	r4,r2
   42f48:	dfc00215 	stw	ra,8(sp)
   42f4c:	80000015 	stw	zero,0(r16)
   42f50:	004332c0 	call	4332c <fstat>
   42f54:	00ffffc4 	movi	r3,-1
   42f58:	10c00526 	beq	r2,r3,42f70 <_fstat_r+0x4c>
   42f5c:	dfc00217 	ldw	ra,8(sp)
   42f60:	dc400117 	ldw	r17,4(sp)
   42f64:	dc000017 	ldw	r16,0(sp)
   42f68:	dec00304 	addi	sp,sp,12
   42f6c:	f800283a 	ret
   42f70:	80c00017 	ldw	r3,0(r16)
   42f74:	183ff926 	beq	r3,zero,42f5c <__alt_data_end+0xfffd0f5c>
   42f78:	88c00015 	stw	r3,0(r17)
   42f7c:	003ff706 	br	42f5c <__alt_data_end+0xfffd0f5c>

00042f80 <_isatty_r>:
   42f80:	defffd04 	addi	sp,sp,-12
   42f84:	dc000015 	stw	r16,0(sp)
   42f88:	04000174 	movhi	r16,5
   42f8c:	dc400115 	stw	r17,4(sp)
   42f90:	8424c404 	addi	r16,r16,-27888
   42f94:	2023883a 	mov	r17,r4
   42f98:	2809883a 	mov	r4,r5
   42f9c:	dfc00215 	stw	ra,8(sp)
   42fa0:	80000015 	stw	zero,0(r16)
   42fa4:	00434200 	call	43420 <isatty>
   42fa8:	00ffffc4 	movi	r3,-1
   42fac:	10c00526 	beq	r2,r3,42fc4 <_isatty_r+0x44>
   42fb0:	dfc00217 	ldw	ra,8(sp)
   42fb4:	dc400117 	ldw	r17,4(sp)
   42fb8:	dc000017 	ldw	r16,0(sp)
   42fbc:	dec00304 	addi	sp,sp,12
   42fc0:	f800283a 	ret
   42fc4:	80c00017 	ldw	r3,0(r16)
   42fc8:	183ff926 	beq	r3,zero,42fb0 <__alt_data_end+0xfffd0fb0>
   42fcc:	88c00015 	stw	r3,0(r17)
   42fd0:	003ff706 	br	42fb0 <__alt_data_end+0xfffd0fb0>

00042fd4 <__divsi3>:
   42fd4:	20001b16 	blt	r4,zero,43044 <__divsi3+0x70>
   42fd8:	000f883a 	mov	r7,zero
   42fdc:	28001616 	blt	r5,zero,43038 <__divsi3+0x64>
   42fe0:	200d883a 	mov	r6,r4
   42fe4:	29001a2e 	bgeu	r5,r4,43050 <__divsi3+0x7c>
   42fe8:	00800804 	movi	r2,32
   42fec:	00c00044 	movi	r3,1
   42ff0:	00000106 	br	42ff8 <__divsi3+0x24>
   42ff4:	10000d26 	beq	r2,zero,4302c <__divsi3+0x58>
   42ff8:	294b883a 	add	r5,r5,r5
   42ffc:	10bfffc4 	addi	r2,r2,-1
   43000:	18c7883a 	add	r3,r3,r3
   43004:	293ffb36 	bltu	r5,r4,42ff4 <__alt_data_end+0xfffd0ff4>
   43008:	0005883a 	mov	r2,zero
   4300c:	18000726 	beq	r3,zero,4302c <__divsi3+0x58>
   43010:	0005883a 	mov	r2,zero
   43014:	31400236 	bltu	r6,r5,43020 <__divsi3+0x4c>
   43018:	314dc83a 	sub	r6,r6,r5
   4301c:	10c4b03a 	or	r2,r2,r3
   43020:	1806d07a 	srli	r3,r3,1
   43024:	280ad07a 	srli	r5,r5,1
   43028:	183ffa1e 	bne	r3,zero,43014 <__alt_data_end+0xfffd1014>
   4302c:	38000126 	beq	r7,zero,43034 <__divsi3+0x60>
   43030:	0085c83a 	sub	r2,zero,r2
   43034:	f800283a 	ret
   43038:	014bc83a 	sub	r5,zero,r5
   4303c:	39c0005c 	xori	r7,r7,1
   43040:	003fe706 	br	42fe0 <__alt_data_end+0xfffd0fe0>
   43044:	0109c83a 	sub	r4,zero,r4
   43048:	01c00044 	movi	r7,1
   4304c:	003fe306 	br	42fdc <__alt_data_end+0xfffd0fdc>
   43050:	00c00044 	movi	r3,1
   43054:	003fee06 	br	43010 <__alt_data_end+0xfffd1010>

00043058 <__modsi3>:
   43058:	20001716 	blt	r4,zero,430b8 <__modsi3+0x60>
   4305c:	000f883a 	mov	r7,zero
   43060:	2005883a 	mov	r2,r4
   43064:	28001216 	blt	r5,zero,430b0 <__modsi3+0x58>
   43068:	2900162e 	bgeu	r5,r4,430c4 <__modsi3+0x6c>
   4306c:	01800804 	movi	r6,32
   43070:	00c00044 	movi	r3,1
   43074:	00000106 	br	4307c <__modsi3+0x24>
   43078:	30000a26 	beq	r6,zero,430a4 <__modsi3+0x4c>
   4307c:	294b883a 	add	r5,r5,r5
   43080:	31bfffc4 	addi	r6,r6,-1
   43084:	18c7883a 	add	r3,r3,r3
   43088:	293ffb36 	bltu	r5,r4,43078 <__alt_data_end+0xfffd1078>
   4308c:	18000526 	beq	r3,zero,430a4 <__modsi3+0x4c>
   43090:	1806d07a 	srli	r3,r3,1
   43094:	11400136 	bltu	r2,r5,4309c <__modsi3+0x44>
   43098:	1145c83a 	sub	r2,r2,r5
   4309c:	280ad07a 	srli	r5,r5,1
   430a0:	183ffb1e 	bne	r3,zero,43090 <__alt_data_end+0xfffd1090>
   430a4:	38000126 	beq	r7,zero,430ac <__modsi3+0x54>
   430a8:	0085c83a 	sub	r2,zero,r2
   430ac:	f800283a 	ret
   430b0:	014bc83a 	sub	r5,zero,r5
   430b4:	003fec06 	br	43068 <__alt_data_end+0xfffd1068>
   430b8:	0109c83a 	sub	r4,zero,r4
   430bc:	01c00044 	movi	r7,1
   430c0:	003fe706 	br	43060 <__alt_data_end+0xfffd1060>
   430c4:	00c00044 	movi	r3,1
   430c8:	003ff106 	br	43090 <__alt_data_end+0xfffd1090>

000430cc <__udivsi3>:
   430cc:	200d883a 	mov	r6,r4
   430d0:	2900152e 	bgeu	r5,r4,43128 <__udivsi3+0x5c>
   430d4:	28001416 	blt	r5,zero,43128 <__udivsi3+0x5c>
   430d8:	00800804 	movi	r2,32
   430dc:	00c00044 	movi	r3,1
   430e0:	00000206 	br	430ec <__udivsi3+0x20>
   430e4:	10000e26 	beq	r2,zero,43120 <__udivsi3+0x54>
   430e8:	28000516 	blt	r5,zero,43100 <__udivsi3+0x34>
   430ec:	294b883a 	add	r5,r5,r5
   430f0:	10bfffc4 	addi	r2,r2,-1
   430f4:	18c7883a 	add	r3,r3,r3
   430f8:	293ffa36 	bltu	r5,r4,430e4 <__alt_data_end+0xfffd10e4>
   430fc:	18000826 	beq	r3,zero,43120 <__udivsi3+0x54>
   43100:	0005883a 	mov	r2,zero
   43104:	31400236 	bltu	r6,r5,43110 <__udivsi3+0x44>
   43108:	314dc83a 	sub	r6,r6,r5
   4310c:	10c4b03a 	or	r2,r2,r3
   43110:	1806d07a 	srli	r3,r3,1
   43114:	280ad07a 	srli	r5,r5,1
   43118:	183ffa1e 	bne	r3,zero,43104 <__alt_data_end+0xfffd1104>
   4311c:	f800283a 	ret
   43120:	0005883a 	mov	r2,zero
   43124:	f800283a 	ret
   43128:	00c00044 	movi	r3,1
   4312c:	003ff406 	br	43100 <__alt_data_end+0xfffd1100>

00043130 <__umodsi3>:
   43130:	2005883a 	mov	r2,r4
   43134:	2900122e 	bgeu	r5,r4,43180 <__umodsi3+0x50>
   43138:	28001116 	blt	r5,zero,43180 <__umodsi3+0x50>
   4313c:	01800804 	movi	r6,32
   43140:	00c00044 	movi	r3,1
   43144:	00000206 	br	43150 <__umodsi3+0x20>
   43148:	30000c26 	beq	r6,zero,4317c <__umodsi3+0x4c>
   4314c:	28000516 	blt	r5,zero,43164 <__umodsi3+0x34>
   43150:	294b883a 	add	r5,r5,r5
   43154:	31bfffc4 	addi	r6,r6,-1
   43158:	18c7883a 	add	r3,r3,r3
   4315c:	293ffa36 	bltu	r5,r4,43148 <__alt_data_end+0xfffd1148>
   43160:	18000626 	beq	r3,zero,4317c <__umodsi3+0x4c>
   43164:	1806d07a 	srli	r3,r3,1
   43168:	11400136 	bltu	r2,r5,43170 <__umodsi3+0x40>
   4316c:	1145c83a 	sub	r2,r2,r5
   43170:	280ad07a 	srli	r5,r5,1
   43174:	183ffb1e 	bne	r3,zero,43164 <__alt_data_end+0xfffd1164>
   43178:	f800283a 	ret
   4317c:	f800283a 	ret
   43180:	00c00044 	movi	r3,1
   43184:	003ff706 	br	43164 <__alt_data_end+0xfffd1164>

00043188 <__mulsi3>:
   43188:	0005883a 	mov	r2,zero
   4318c:	20000726 	beq	r4,zero,431ac <__mulsi3+0x24>
   43190:	20c0004c 	andi	r3,r4,1
   43194:	2008d07a 	srli	r4,r4,1
   43198:	18000126 	beq	r3,zero,431a0 <__mulsi3+0x18>
   4319c:	1145883a 	add	r2,r2,r5
   431a0:	294b883a 	add	r5,r5,r5
   431a4:	203ffa1e 	bne	r4,zero,43190 <__alt_data_end+0xfffd1190>
   431a8:	f800283a 	ret
   431ac:	f800283a 	ret

000431b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   431b0:	defffe04 	addi	sp,sp,-8
   431b4:	dfc00115 	stw	ra,4(sp)
   431b8:	df000015 	stw	fp,0(sp)
   431bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   431c0:	d0a00917 	ldw	r2,-32732(gp)
   431c4:	10000326 	beq	r2,zero,431d4 <alt_get_errno+0x24>
   431c8:	d0a00917 	ldw	r2,-32732(gp)
   431cc:	103ee83a 	callr	r2
   431d0:	00000106 	br	431d8 <alt_get_errno+0x28>
   431d4:	d0a6b704 	addi	r2,gp,-25892
}
   431d8:	e037883a 	mov	sp,fp
   431dc:	dfc00117 	ldw	ra,4(sp)
   431e0:	df000017 	ldw	fp,0(sp)
   431e4:	dec00204 	addi	sp,sp,8
   431e8:	f800283a 	ret

000431ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   431ec:	defffb04 	addi	sp,sp,-20
   431f0:	dfc00415 	stw	ra,16(sp)
   431f4:	df000315 	stw	fp,12(sp)
   431f8:	df000304 	addi	fp,sp,12
   431fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43200:	e0bfff17 	ldw	r2,-4(fp)
   43204:	10000816 	blt	r2,zero,43228 <close+0x3c>
   43208:	01400304 	movi	r5,12
   4320c:	e13fff17 	ldw	r4,-4(fp)
   43210:	00431880 	call	43188 <__mulsi3>
   43214:	1007883a 	mov	r3,r2
   43218:	00800134 	movhi	r2,4
   4321c:	10998a04 	addi	r2,r2,26152
   43220:	1885883a 	add	r2,r3,r2
   43224:	00000106 	br	4322c <close+0x40>
   43228:	0005883a 	mov	r2,zero
   4322c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43230:	e0bffd17 	ldw	r2,-12(fp)
   43234:	10001926 	beq	r2,zero,4329c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43238:	e0bffd17 	ldw	r2,-12(fp)
   4323c:	10800017 	ldw	r2,0(r2)
   43240:	10800417 	ldw	r2,16(r2)
   43244:	10000626 	beq	r2,zero,43260 <close+0x74>
   43248:	e0bffd17 	ldw	r2,-12(fp)
   4324c:	10800017 	ldw	r2,0(r2)
   43250:	10800417 	ldw	r2,16(r2)
   43254:	e13ffd17 	ldw	r4,-12(fp)
   43258:	103ee83a 	callr	r2
   4325c:	00000106 	br	43264 <close+0x78>
   43260:	0005883a 	mov	r2,zero
   43264:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43268:	e13fff17 	ldw	r4,-4(fp)
   4326c:	00438d40 	call	438d4 <alt_release_fd>
    if (rval < 0)
   43270:	e0bffe17 	ldw	r2,-8(fp)
   43274:	1000070e 	bge	r2,zero,43294 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43278:	00431b00 	call	431b0 <alt_get_errno>
   4327c:	1007883a 	mov	r3,r2
   43280:	e0bffe17 	ldw	r2,-8(fp)
   43284:	0085c83a 	sub	r2,zero,r2
   43288:	18800015 	stw	r2,0(r3)
      return -1;
   4328c:	00bfffc4 	movi	r2,-1
   43290:	00000706 	br	432b0 <close+0xc4>
    }
    return 0;
   43294:	0005883a 	mov	r2,zero
   43298:	00000506 	br	432b0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4329c:	00431b00 	call	431b0 <alt_get_errno>
   432a0:	1007883a 	mov	r3,r2
   432a4:	00801444 	movi	r2,81
   432a8:	18800015 	stw	r2,0(r3)
    return -1;
   432ac:	00bfffc4 	movi	r2,-1
  }
}
   432b0:	e037883a 	mov	sp,fp
   432b4:	dfc00117 	ldw	ra,4(sp)
   432b8:	df000017 	ldw	fp,0(sp)
   432bc:	dec00204 	addi	sp,sp,8
   432c0:	f800283a 	ret

000432c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   432c4:	defffc04 	addi	sp,sp,-16
   432c8:	df000315 	stw	fp,12(sp)
   432cc:	df000304 	addi	fp,sp,12
   432d0:	e13ffd15 	stw	r4,-12(fp)
   432d4:	e17ffe15 	stw	r5,-8(fp)
   432d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   432dc:	e0bfff17 	ldw	r2,-4(fp)
}
   432e0:	e037883a 	mov	sp,fp
   432e4:	df000017 	ldw	fp,0(sp)
   432e8:	dec00104 	addi	sp,sp,4
   432ec:	f800283a 	ret

000432f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   432f0:	defffe04 	addi	sp,sp,-8
   432f4:	dfc00115 	stw	ra,4(sp)
   432f8:	df000015 	stw	fp,0(sp)
   432fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43300:	d0a00917 	ldw	r2,-32732(gp)
   43304:	10000326 	beq	r2,zero,43314 <alt_get_errno+0x24>
   43308:	d0a00917 	ldw	r2,-32732(gp)
   4330c:	103ee83a 	callr	r2
   43310:	00000106 	br	43318 <alt_get_errno+0x28>
   43314:	d0a6b704 	addi	r2,gp,-25892
}
   43318:	e037883a 	mov	sp,fp
   4331c:	dfc00117 	ldw	ra,4(sp)
   43320:	df000017 	ldw	fp,0(sp)
   43324:	dec00204 	addi	sp,sp,8
   43328:	f800283a 	ret

0004332c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4332c:	defffb04 	addi	sp,sp,-20
   43330:	dfc00415 	stw	ra,16(sp)
   43334:	df000315 	stw	fp,12(sp)
   43338:	df000304 	addi	fp,sp,12
   4333c:	e13ffe15 	stw	r4,-8(fp)
   43340:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43344:	e0bffe17 	ldw	r2,-8(fp)
   43348:	10000816 	blt	r2,zero,4336c <fstat+0x40>
   4334c:	01400304 	movi	r5,12
   43350:	e13ffe17 	ldw	r4,-8(fp)
   43354:	00431880 	call	43188 <__mulsi3>
   43358:	1007883a 	mov	r3,r2
   4335c:	00800134 	movhi	r2,4
   43360:	10998a04 	addi	r2,r2,26152
   43364:	1885883a 	add	r2,r3,r2
   43368:	00000106 	br	43370 <fstat+0x44>
   4336c:	0005883a 	mov	r2,zero
   43370:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43374:	e0bffd17 	ldw	r2,-12(fp)
   43378:	10001026 	beq	r2,zero,433bc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4337c:	e0bffd17 	ldw	r2,-12(fp)
   43380:	10800017 	ldw	r2,0(r2)
   43384:	10800817 	ldw	r2,32(r2)
   43388:	10000726 	beq	r2,zero,433a8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4338c:	e0bffd17 	ldw	r2,-12(fp)
   43390:	10800017 	ldw	r2,0(r2)
   43394:	10800817 	ldw	r2,32(r2)
   43398:	e17fff17 	ldw	r5,-4(fp)
   4339c:	e13ffd17 	ldw	r4,-12(fp)
   433a0:	103ee83a 	callr	r2
   433a4:	00000a06 	br	433d0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   433a8:	e0bfff17 	ldw	r2,-4(fp)
   433ac:	00c80004 	movi	r3,8192
   433b0:	10c00115 	stw	r3,4(r2)
      return 0;
   433b4:	0005883a 	mov	r2,zero
   433b8:	00000506 	br	433d0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   433bc:	00432f00 	call	432f0 <alt_get_errno>
   433c0:	1007883a 	mov	r3,r2
   433c4:	00801444 	movi	r2,81
   433c8:	18800015 	stw	r2,0(r3)
    return -1;
   433cc:	00bfffc4 	movi	r2,-1
  }
}
   433d0:	e037883a 	mov	sp,fp
   433d4:	dfc00117 	ldw	ra,4(sp)
   433d8:	df000017 	ldw	fp,0(sp)
   433dc:	dec00204 	addi	sp,sp,8
   433e0:	f800283a 	ret

000433e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   433e4:	defffe04 	addi	sp,sp,-8
   433e8:	dfc00115 	stw	ra,4(sp)
   433ec:	df000015 	stw	fp,0(sp)
   433f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   433f4:	d0a00917 	ldw	r2,-32732(gp)
   433f8:	10000326 	beq	r2,zero,43408 <alt_get_errno+0x24>
   433fc:	d0a00917 	ldw	r2,-32732(gp)
   43400:	103ee83a 	callr	r2
   43404:	00000106 	br	4340c <alt_get_errno+0x28>
   43408:	d0a6b704 	addi	r2,gp,-25892
}
   4340c:	e037883a 	mov	sp,fp
   43410:	dfc00117 	ldw	ra,4(sp)
   43414:	df000017 	ldw	fp,0(sp)
   43418:	dec00204 	addi	sp,sp,8
   4341c:	f800283a 	ret

00043420 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43420:	deffed04 	addi	sp,sp,-76
   43424:	dfc01215 	stw	ra,72(sp)
   43428:	df001115 	stw	fp,68(sp)
   4342c:	df001104 	addi	fp,sp,68
   43430:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43434:	e0bfff17 	ldw	r2,-4(fp)
   43438:	10000816 	blt	r2,zero,4345c <isatty+0x3c>
   4343c:	01400304 	movi	r5,12
   43440:	e13fff17 	ldw	r4,-4(fp)
   43444:	00431880 	call	43188 <__mulsi3>
   43448:	1007883a 	mov	r3,r2
   4344c:	00800134 	movhi	r2,4
   43450:	10998a04 	addi	r2,r2,26152
   43454:	1885883a 	add	r2,r3,r2
   43458:	00000106 	br	43460 <isatty+0x40>
   4345c:	0005883a 	mov	r2,zero
   43460:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43464:	e0bfef17 	ldw	r2,-68(fp)
   43468:	10000e26 	beq	r2,zero,434a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4346c:	e0bfef17 	ldw	r2,-68(fp)
   43470:	10800017 	ldw	r2,0(r2)
   43474:	10800817 	ldw	r2,32(r2)
   43478:	1000021e 	bne	r2,zero,43484 <isatty+0x64>
    {
      return 1;
   4347c:	00800044 	movi	r2,1
   43480:	00000d06 	br	434b8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43484:	e0bff004 	addi	r2,fp,-64
   43488:	100b883a 	mov	r5,r2
   4348c:	e13fff17 	ldw	r4,-4(fp)
   43490:	004332c0 	call	4332c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43494:	e0bff117 	ldw	r2,-60(fp)
   43498:	10880020 	cmpeqi	r2,r2,8192
   4349c:	10803fcc 	andi	r2,r2,255
   434a0:	00000506 	br	434b8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   434a4:	00433e40 	call	433e4 <alt_get_errno>
   434a8:	1007883a 	mov	r3,r2
   434ac:	00801444 	movi	r2,81
   434b0:	18800015 	stw	r2,0(r3)
    return 0;
   434b4:	0005883a 	mov	r2,zero
  }
}
   434b8:	e037883a 	mov	sp,fp
   434bc:	dfc00117 	ldw	ra,4(sp)
   434c0:	df000017 	ldw	fp,0(sp)
   434c4:	dec00204 	addi	sp,sp,8
   434c8:	f800283a 	ret

000434cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   434cc:	defffc04 	addi	sp,sp,-16
   434d0:	df000315 	stw	fp,12(sp)
   434d4:	df000304 	addi	fp,sp,12
   434d8:	e13ffd15 	stw	r4,-12(fp)
   434dc:	e17ffe15 	stw	r5,-8(fp)
   434e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   434e4:	e0fffe17 	ldw	r3,-8(fp)
   434e8:	e0bffd17 	ldw	r2,-12(fp)
   434ec:	18800c26 	beq	r3,r2,43520 <alt_load_section+0x54>
  {
    while( to != end )
   434f0:	00000806 	br	43514 <alt_load_section+0x48>
    {
      *to++ = *from++;
   434f4:	e0bffe17 	ldw	r2,-8(fp)
   434f8:	10c00104 	addi	r3,r2,4
   434fc:	e0fffe15 	stw	r3,-8(fp)
   43500:	e0fffd17 	ldw	r3,-12(fp)
   43504:	19000104 	addi	r4,r3,4
   43508:	e13ffd15 	stw	r4,-12(fp)
   4350c:	18c00017 	ldw	r3,0(r3)
   43510:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   43514:	e0fffe17 	ldw	r3,-8(fp)
   43518:	e0bfff17 	ldw	r2,-4(fp)
   4351c:	18bff51e 	bne	r3,r2,434f4 <__alt_data_end+0xfffd14f4>
    {
      *to++ = *from++;
    }
  }
}
   43520:	0001883a 	nop
   43524:	e037883a 	mov	sp,fp
   43528:	df000017 	ldw	fp,0(sp)
   4352c:	dec00104 	addi	sp,sp,4
   43530:	f800283a 	ret

00043534 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43534:	defffe04 	addi	sp,sp,-8
   43538:	dfc00115 	stw	ra,4(sp)
   4353c:	df000015 	stw	fp,0(sp)
   43540:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43544:	01800134 	movhi	r6,4
   43548:	319e1b04 	addi	r6,r6,30828
   4354c:	01400134 	movhi	r5,4
   43550:	29577504 	addi	r5,r5,24020
   43554:	01000134 	movhi	r4,4
   43558:	211e1b04 	addi	r4,r4,30828
   4355c:	00434cc0 	call	434cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43560:	01800134 	movhi	r6,4
   43564:	31808c04 	addi	r6,r6,560
   43568:	01400134 	movhi	r5,4
   4356c:	29400804 	addi	r5,r5,32
   43570:	01000134 	movhi	r4,4
   43574:	21000804 	addi	r4,r4,32
   43578:	00434cc0 	call	434cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4357c:	01800134 	movhi	r6,4
   43580:	31977504 	addi	r6,r6,24020
   43584:	01400134 	movhi	r5,4
   43588:	29575404 	addi	r5,r5,23888
   4358c:	01000134 	movhi	r4,4
   43590:	21175404 	addi	r4,r4,23888
   43594:	00434cc0 	call	434cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43598:	0044c980 	call	44c98 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4359c:	0044ee80 	call	44ee8 <alt_icache_flush_all>
}
   435a0:	0001883a 	nop
   435a4:	e037883a 	mov	sp,fp
   435a8:	dfc00117 	ldw	ra,4(sp)
   435ac:	df000017 	ldw	fp,0(sp)
   435b0:	dec00204 	addi	sp,sp,8
   435b4:	f800283a 	ret

000435b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   435b8:	defffe04 	addi	sp,sp,-8
   435bc:	dfc00115 	stw	ra,4(sp)
   435c0:	df000015 	stw	fp,0(sp)
   435c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435c8:	d0a00917 	ldw	r2,-32732(gp)
   435cc:	10000326 	beq	r2,zero,435dc <alt_get_errno+0x24>
   435d0:	d0a00917 	ldw	r2,-32732(gp)
   435d4:	103ee83a 	callr	r2
   435d8:	00000106 	br	435e0 <alt_get_errno+0x28>
   435dc:	d0a6b704 	addi	r2,gp,-25892
}
   435e0:	e037883a 	mov	sp,fp
   435e4:	dfc00117 	ldw	ra,4(sp)
   435e8:	df000017 	ldw	fp,0(sp)
   435ec:	dec00204 	addi	sp,sp,8
   435f0:	f800283a 	ret

000435f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   435f4:	defff904 	addi	sp,sp,-28
   435f8:	dfc00615 	stw	ra,24(sp)
   435fc:	df000515 	stw	fp,20(sp)
   43600:	df000504 	addi	fp,sp,20
   43604:	e13ffd15 	stw	r4,-12(fp)
   43608:	e17ffe15 	stw	r5,-8(fp)
   4360c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43610:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43614:	e0bffd17 	ldw	r2,-12(fp)
   43618:	10000816 	blt	r2,zero,4363c <lseek+0x48>
   4361c:	01400304 	movi	r5,12
   43620:	e13ffd17 	ldw	r4,-12(fp)
   43624:	00431880 	call	43188 <__mulsi3>
   43628:	1007883a 	mov	r3,r2
   4362c:	00800134 	movhi	r2,4
   43630:	10998a04 	addi	r2,r2,26152
   43634:	1885883a 	add	r2,r3,r2
   43638:	00000106 	br	43640 <lseek+0x4c>
   4363c:	0005883a 	mov	r2,zero
   43640:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43644:	e0bffc17 	ldw	r2,-16(fp)
   43648:	10001026 	beq	r2,zero,4368c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4364c:	e0bffc17 	ldw	r2,-16(fp)
   43650:	10800017 	ldw	r2,0(r2)
   43654:	10800717 	ldw	r2,28(r2)
   43658:	10000926 	beq	r2,zero,43680 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4365c:	e0bffc17 	ldw	r2,-16(fp)
   43660:	10800017 	ldw	r2,0(r2)
   43664:	10800717 	ldw	r2,28(r2)
   43668:	e1bfff17 	ldw	r6,-4(fp)
   4366c:	e17ffe17 	ldw	r5,-8(fp)
   43670:	e13ffc17 	ldw	r4,-16(fp)
   43674:	103ee83a 	callr	r2
   43678:	e0bffb15 	stw	r2,-20(fp)
   4367c:	00000506 	br	43694 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43680:	00bfde84 	movi	r2,-134
   43684:	e0bffb15 	stw	r2,-20(fp)
   43688:	00000206 	br	43694 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4368c:	00bfebc4 	movi	r2,-81
   43690:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43694:	e0bffb17 	ldw	r2,-20(fp)
   43698:	1000070e 	bge	r2,zero,436b8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4369c:	00435b80 	call	435b8 <alt_get_errno>
   436a0:	1007883a 	mov	r3,r2
   436a4:	e0bffb17 	ldw	r2,-20(fp)
   436a8:	0085c83a 	sub	r2,zero,r2
   436ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   436b0:	00bfffc4 	movi	r2,-1
   436b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   436b8:	e0bffb17 	ldw	r2,-20(fp)
}
   436bc:	e037883a 	mov	sp,fp
   436c0:	dfc00117 	ldw	ra,4(sp)
   436c4:	df000017 	ldw	fp,0(sp)
   436c8:	dec00204 	addi	sp,sp,8
   436cc:	f800283a 	ret

000436d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   436d0:	defffd04 	addi	sp,sp,-12
   436d4:	dfc00215 	stw	ra,8(sp)
   436d8:	df000115 	stw	fp,4(sp)
   436dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   436e0:	0009883a 	mov	r4,zero
   436e4:	0043b780 	call	43b78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   436e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   436ec:	0043bb00 	call	43bb0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   436f0:	01800134 	movhi	r6,4
   436f4:	31976804 	addi	r6,r6,23968
   436f8:	01400134 	movhi	r5,4
   436fc:	29576804 	addi	r5,r5,23968
   43700:	01000134 	movhi	r4,4
   43704:	21176804 	addi	r4,r4,23968
   43708:	004528c0 	call	4528c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4370c:	0044d980 	call	44d98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43710:	01000134 	movhi	r4,4
   43714:	21137e04 	addi	r4,r4,19960
   43718:	00459bc0 	call	459bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4371c:	d0a6b817 	ldw	r2,-25888(gp)
   43720:	d0e6b917 	ldw	r3,-25884(gp)
   43724:	d126ba17 	ldw	r4,-25880(gp)
   43728:	200d883a 	mov	r6,r4
   4372c:	180b883a 	mov	r5,r3
   43730:	1009883a 	mov	r4,r2
   43734:	00402d00 	call	402d0 <main>
   43738:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4373c:	01000044 	movi	r4,1
   43740:	00431ec0 	call	431ec <close>
  exit (result);
   43744:	e13fff17 	ldw	r4,-4(fp)
   43748:	00459d00 	call	459d0 <exit>

0004374c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4374c:	defffe04 	addi	sp,sp,-8
   43750:	df000115 	stw	fp,4(sp)
   43754:	df000104 	addi	fp,sp,4
   43758:	e13fff15 	stw	r4,-4(fp)
}
   4375c:	0001883a 	nop
   43760:	e037883a 	mov	sp,fp
   43764:	df000017 	ldw	fp,0(sp)
   43768:	dec00104 	addi	sp,sp,4
   4376c:	f800283a 	ret

00043770 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43770:	defffe04 	addi	sp,sp,-8
   43774:	df000115 	stw	fp,4(sp)
   43778:	df000104 	addi	fp,sp,4
   4377c:	e13fff15 	stw	r4,-4(fp)
}
   43780:	0001883a 	nop
   43784:	e037883a 	mov	sp,fp
   43788:	df000017 	ldw	fp,0(sp)
   4378c:	dec00104 	addi	sp,sp,4
   43790:	f800283a 	ret

00043794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43794:	defffe04 	addi	sp,sp,-8
   43798:	dfc00115 	stw	ra,4(sp)
   4379c:	df000015 	stw	fp,0(sp)
   437a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   437a4:	d0a00917 	ldw	r2,-32732(gp)
   437a8:	10000326 	beq	r2,zero,437b8 <alt_get_errno+0x24>
   437ac:	d0a00917 	ldw	r2,-32732(gp)
   437b0:	103ee83a 	callr	r2
   437b4:	00000106 	br	437bc <alt_get_errno+0x28>
   437b8:	d0a6b704 	addi	r2,gp,-25892
}
   437bc:	e037883a 	mov	sp,fp
   437c0:	dfc00117 	ldw	ra,4(sp)
   437c4:	df000017 	ldw	fp,0(sp)
   437c8:	dec00204 	addi	sp,sp,8
   437cc:	f800283a 	ret

000437d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   437d0:	defff904 	addi	sp,sp,-28
   437d4:	dfc00615 	stw	ra,24(sp)
   437d8:	df000515 	stw	fp,20(sp)
   437dc:	df000504 	addi	fp,sp,20
   437e0:	e13ffd15 	stw	r4,-12(fp)
   437e4:	e17ffe15 	stw	r5,-8(fp)
   437e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   437ec:	e0bffd17 	ldw	r2,-12(fp)
   437f0:	10000816 	blt	r2,zero,43814 <read+0x44>
   437f4:	01400304 	movi	r5,12
   437f8:	e13ffd17 	ldw	r4,-12(fp)
   437fc:	00431880 	call	43188 <__mulsi3>
   43800:	1007883a 	mov	r3,r2
   43804:	00800134 	movhi	r2,4
   43808:	10998a04 	addi	r2,r2,26152
   4380c:	1885883a 	add	r2,r3,r2
   43810:	00000106 	br	43818 <read+0x48>
   43814:	0005883a 	mov	r2,zero
   43818:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4381c:	e0bffb17 	ldw	r2,-20(fp)
   43820:	10002226 	beq	r2,zero,438ac <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43824:	e0bffb17 	ldw	r2,-20(fp)
   43828:	10800217 	ldw	r2,8(r2)
   4382c:	108000cc 	andi	r2,r2,3
   43830:	10800060 	cmpeqi	r2,r2,1
   43834:	1000181e 	bne	r2,zero,43898 <read+0xc8>
        (fd->dev->read))
   43838:	e0bffb17 	ldw	r2,-20(fp)
   4383c:	10800017 	ldw	r2,0(r2)
   43840:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43844:	10001426 	beq	r2,zero,43898 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43848:	e0bffb17 	ldw	r2,-20(fp)
   4384c:	10800017 	ldw	r2,0(r2)
   43850:	10800517 	ldw	r2,20(r2)
   43854:	e0ffff17 	ldw	r3,-4(fp)
   43858:	180d883a 	mov	r6,r3
   4385c:	e17ffe17 	ldw	r5,-8(fp)
   43860:	e13ffb17 	ldw	r4,-20(fp)
   43864:	103ee83a 	callr	r2
   43868:	e0bffc15 	stw	r2,-16(fp)
   4386c:	e0bffc17 	ldw	r2,-16(fp)
   43870:	1000070e 	bge	r2,zero,43890 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43874:	00437940 	call	43794 <alt_get_errno>
   43878:	1007883a 	mov	r3,r2
   4387c:	e0bffc17 	ldw	r2,-16(fp)
   43880:	0085c83a 	sub	r2,zero,r2
   43884:	18800015 	stw	r2,0(r3)
          return -1;
   43888:	00bfffc4 	movi	r2,-1
   4388c:	00000c06 	br	438c0 <read+0xf0>
        }
        return rval;
   43890:	e0bffc17 	ldw	r2,-16(fp)
   43894:	00000a06 	br	438c0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43898:	00437940 	call	43794 <alt_get_errno>
   4389c:	1007883a 	mov	r3,r2
   438a0:	00800344 	movi	r2,13
   438a4:	18800015 	stw	r2,0(r3)
   438a8:	00000406 	br	438bc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   438ac:	00437940 	call	43794 <alt_get_errno>
   438b0:	1007883a 	mov	r3,r2
   438b4:	00801444 	movi	r2,81
   438b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   438bc:	00bfffc4 	movi	r2,-1
}
   438c0:	e037883a 	mov	sp,fp
   438c4:	dfc00117 	ldw	ra,4(sp)
   438c8:	df000017 	ldw	fp,0(sp)
   438cc:	dec00204 	addi	sp,sp,8
   438d0:	f800283a 	ret

000438d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   438d4:	defffc04 	addi	sp,sp,-16
   438d8:	dfc00315 	stw	ra,12(sp)
   438dc:	df000215 	stw	fp,8(sp)
   438e0:	dc000115 	stw	r16,4(sp)
   438e4:	df000204 	addi	fp,sp,8
   438e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   438ec:	e0bffe17 	ldw	r2,-8(fp)
   438f0:	108000d0 	cmplti	r2,r2,3
   438f4:	1000111e 	bne	r2,zero,4393c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   438f8:	04000134 	movhi	r16,4
   438fc:	84198a04 	addi	r16,r16,26152
   43900:	e0bffe17 	ldw	r2,-8(fp)
   43904:	01400304 	movi	r5,12
   43908:	1009883a 	mov	r4,r2
   4390c:	00431880 	call	43188 <__mulsi3>
   43910:	8085883a 	add	r2,r16,r2
   43914:	10800204 	addi	r2,r2,8
   43918:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4391c:	04000134 	movhi	r16,4
   43920:	84198a04 	addi	r16,r16,26152
   43924:	e0bffe17 	ldw	r2,-8(fp)
   43928:	01400304 	movi	r5,12
   4392c:	1009883a 	mov	r4,r2
   43930:	00431880 	call	43188 <__mulsi3>
   43934:	8085883a 	add	r2,r16,r2
   43938:	10000015 	stw	zero,0(r2)
  }
}
   4393c:	0001883a 	nop
   43940:	e6ffff04 	addi	sp,fp,-4
   43944:	dfc00217 	ldw	ra,8(sp)
   43948:	df000117 	ldw	fp,4(sp)
   4394c:	dc000017 	ldw	r16,0(sp)
   43950:	dec00304 	addi	sp,sp,12
   43954:	f800283a 	ret

00043958 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43958:	defff904 	addi	sp,sp,-28
   4395c:	df000615 	stw	fp,24(sp)
   43960:	df000604 	addi	fp,sp,24
   43964:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43968:	0005303a 	rdctl	r2,status
   4396c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43970:	e0fffe17 	ldw	r3,-8(fp)
   43974:	00bfff84 	movi	r2,-2
   43978:	1884703a 	and	r2,r3,r2
   4397c:	1001703a 	wrctl	status,r2
  
  return context;
   43980:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43984:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43988:	d0a00a17 	ldw	r2,-32728(gp)
   4398c:	10c000c4 	addi	r3,r2,3
   43990:	00bfff04 	movi	r2,-4
   43994:	1884703a 	and	r2,r3,r2
   43998:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4399c:	d0e00a17 	ldw	r3,-32728(gp)
   439a0:	e0bfff17 	ldw	r2,-4(fp)
   439a4:	1887883a 	add	r3,r3,r2
   439a8:	008001f4 	movhi	r2,7
   439ac:	10880004 	addi	r2,r2,8192
   439b0:	10c0062e 	bgeu	r2,r3,439cc <sbrk+0x74>
   439b4:	e0bffb17 	ldw	r2,-20(fp)
   439b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   439bc:	e0bffa17 	ldw	r2,-24(fp)
   439c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   439c4:	00bfffc4 	movi	r2,-1
   439c8:	00000b06 	br	439f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   439cc:	d0a00a17 	ldw	r2,-32728(gp)
   439d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   439d4:	d0e00a17 	ldw	r3,-32728(gp)
   439d8:	e0bfff17 	ldw	r2,-4(fp)
   439dc:	1885883a 	add	r2,r3,r2
   439e0:	d0a00a15 	stw	r2,-32728(gp)
   439e4:	e0bffb17 	ldw	r2,-20(fp)
   439e8:	e0bffc15 	stw	r2,-16(fp)
   439ec:	e0bffc17 	ldw	r2,-16(fp)
   439f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   439f4:	e0bffd17 	ldw	r2,-12(fp)
} 
   439f8:	e037883a 	mov	sp,fp
   439fc:	df000017 	ldw	fp,0(sp)
   43a00:	dec00104 	addi	sp,sp,4
   43a04:	f800283a 	ret

00043a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43a08:	defffe04 	addi	sp,sp,-8
   43a0c:	dfc00115 	stw	ra,4(sp)
   43a10:	df000015 	stw	fp,0(sp)
   43a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43a18:	d0a00917 	ldw	r2,-32732(gp)
   43a1c:	10000326 	beq	r2,zero,43a2c <alt_get_errno+0x24>
   43a20:	d0a00917 	ldw	r2,-32732(gp)
   43a24:	103ee83a 	callr	r2
   43a28:	00000106 	br	43a30 <alt_get_errno+0x28>
   43a2c:	d0a6b704 	addi	r2,gp,-25892
}
   43a30:	e037883a 	mov	sp,fp
   43a34:	dfc00117 	ldw	ra,4(sp)
   43a38:	df000017 	ldw	fp,0(sp)
   43a3c:	dec00204 	addi	sp,sp,8
   43a40:	f800283a 	ret

00043a44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43a44:	defff904 	addi	sp,sp,-28
   43a48:	dfc00615 	stw	ra,24(sp)
   43a4c:	df000515 	stw	fp,20(sp)
   43a50:	df000504 	addi	fp,sp,20
   43a54:	e13ffd15 	stw	r4,-12(fp)
   43a58:	e17ffe15 	stw	r5,-8(fp)
   43a5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43a60:	e0bffd17 	ldw	r2,-12(fp)
   43a64:	10000816 	blt	r2,zero,43a88 <write+0x44>
   43a68:	01400304 	movi	r5,12
   43a6c:	e13ffd17 	ldw	r4,-12(fp)
   43a70:	00431880 	call	43188 <__mulsi3>
   43a74:	1007883a 	mov	r3,r2
   43a78:	00800134 	movhi	r2,4
   43a7c:	10998a04 	addi	r2,r2,26152
   43a80:	1885883a 	add	r2,r3,r2
   43a84:	00000106 	br	43a8c <write+0x48>
   43a88:	0005883a 	mov	r2,zero
   43a8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43a90:	e0bffb17 	ldw	r2,-20(fp)
   43a94:	10002126 	beq	r2,zero,43b1c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43a98:	e0bffb17 	ldw	r2,-20(fp)
   43a9c:	10800217 	ldw	r2,8(r2)
   43aa0:	108000cc 	andi	r2,r2,3
   43aa4:	10001826 	beq	r2,zero,43b08 <write+0xc4>
   43aa8:	e0bffb17 	ldw	r2,-20(fp)
   43aac:	10800017 	ldw	r2,0(r2)
   43ab0:	10800617 	ldw	r2,24(r2)
   43ab4:	10001426 	beq	r2,zero,43b08 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43ab8:	e0bffb17 	ldw	r2,-20(fp)
   43abc:	10800017 	ldw	r2,0(r2)
   43ac0:	10800617 	ldw	r2,24(r2)
   43ac4:	e0ffff17 	ldw	r3,-4(fp)
   43ac8:	180d883a 	mov	r6,r3
   43acc:	e17ffe17 	ldw	r5,-8(fp)
   43ad0:	e13ffb17 	ldw	r4,-20(fp)
   43ad4:	103ee83a 	callr	r2
   43ad8:	e0bffc15 	stw	r2,-16(fp)
   43adc:	e0bffc17 	ldw	r2,-16(fp)
   43ae0:	1000070e 	bge	r2,zero,43b00 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43ae4:	0043a080 	call	43a08 <alt_get_errno>
   43ae8:	1007883a 	mov	r3,r2
   43aec:	e0bffc17 	ldw	r2,-16(fp)
   43af0:	0085c83a 	sub	r2,zero,r2
   43af4:	18800015 	stw	r2,0(r3)
        return -1;
   43af8:	00bfffc4 	movi	r2,-1
   43afc:	00000c06 	br	43b30 <write+0xec>
      }
      return rval;
   43b00:	e0bffc17 	ldw	r2,-16(fp)
   43b04:	00000a06 	br	43b30 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43b08:	0043a080 	call	43a08 <alt_get_errno>
   43b0c:	1007883a 	mov	r3,r2
   43b10:	00800344 	movi	r2,13
   43b14:	18800015 	stw	r2,0(r3)
   43b18:	00000406 	br	43b2c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43b1c:	0043a080 	call	43a08 <alt_get_errno>
   43b20:	1007883a 	mov	r3,r2
   43b24:	00801444 	movi	r2,81
   43b28:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43b2c:	00bfffc4 	movi	r2,-1
}
   43b30:	e037883a 	mov	sp,fp
   43b34:	dfc00117 	ldw	ra,4(sp)
   43b38:	df000017 	ldw	fp,0(sp)
   43b3c:	dec00204 	addi	sp,sp,8
   43b40:	f800283a 	ret

00043b44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43b44:	defffd04 	addi	sp,sp,-12
   43b48:	dfc00215 	stw	ra,8(sp)
   43b4c:	df000115 	stw	fp,4(sp)
   43b50:	df000104 	addi	fp,sp,4
   43b54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43b58:	d1600604 	addi	r5,gp,-32744
   43b5c:	e13fff17 	ldw	r4,-4(fp)
   43b60:	0044cf40 	call	44cf4 <alt_dev_llist_insert>
}
   43b64:	e037883a 	mov	sp,fp
   43b68:	dfc00117 	ldw	ra,4(sp)
   43b6c:	df000017 	ldw	fp,0(sp)
   43b70:	dec00204 	addi	sp,sp,8
   43b74:	f800283a 	ret

00043b78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43b78:	defffd04 	addi	sp,sp,-12
   43b7c:	dfc00215 	stw	ra,8(sp)
   43b80:	df000115 	stw	fp,4(sp)
   43b84:	df000104 	addi	fp,sp,4
   43b88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   43b8c:	00457300 	call	45730 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43b90:	00800044 	movi	r2,1
   43b94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43b98:	0001883a 	nop
   43b9c:	e037883a 	mov	sp,fp
   43ba0:	dfc00117 	ldw	ra,4(sp)
   43ba4:	df000017 	ldw	fp,0(sp)
   43ba8:	dec00204 	addi	sp,sp,8
   43bac:	f800283a 	ret

00043bb0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43bb0:	defffe04 	addi	sp,sp,-8
   43bb4:	dfc00115 	stw	ra,4(sp)
   43bb8:	df000015 	stw	fp,0(sp)
   43bbc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43bc0:	000d883a 	mov	r6,zero
   43bc4:	000b883a 	mov	r5,zero
   43bc8:	01000134 	movhi	r4,4
   43bcc:	2119f404 	addi	r4,r4,26576
   43bd0:	0043d740 	call	43d74 <altera_avalon_jtag_uart_init>
   43bd4:	01000134 	movhi	r4,4
   43bd8:	2119ea04 	addi	r4,r4,26536
   43bdc:	0043b440 	call	43b44 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, lcd);
   43be0:	01000134 	movhi	r4,4
   43be4:	211e0204 	addi	r4,r4,30728
   43be8:	004472c0 	call	4472c <alt_up_character_lcd_init>
   43bec:	01000134 	movhi	r4,4
   43bf0:	211e0204 	addi	r4,r4,30728
   43bf4:	0043b440 	call	43b44 <alt_dev_reg>
}
   43bf8:	0001883a 	nop
   43bfc:	e037883a 	mov	sp,fp
   43c00:	dfc00117 	ldw	ra,4(sp)
   43c04:	df000017 	ldw	fp,0(sp)
   43c08:	dec00204 	addi	sp,sp,8
   43c0c:	f800283a 	ret

00043c10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43c10:	defffa04 	addi	sp,sp,-24
   43c14:	dfc00515 	stw	ra,20(sp)
   43c18:	df000415 	stw	fp,16(sp)
   43c1c:	df000404 	addi	fp,sp,16
   43c20:	e13ffd15 	stw	r4,-12(fp)
   43c24:	e17ffe15 	stw	r5,-8(fp)
   43c28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c2c:	e0bffd17 	ldw	r2,-12(fp)
   43c30:	10800017 	ldw	r2,0(r2)
   43c34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43c38:	e0bffc17 	ldw	r2,-16(fp)
   43c3c:	10c00a04 	addi	r3,r2,40
   43c40:	e0bffd17 	ldw	r2,-12(fp)
   43c44:	10800217 	ldw	r2,8(r2)
   43c48:	100f883a 	mov	r7,r2
   43c4c:	e1bfff17 	ldw	r6,-4(fp)
   43c50:	e17ffe17 	ldw	r5,-8(fp)
   43c54:	1809883a 	mov	r4,r3
   43c58:	00442380 	call	44238 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43c5c:	e037883a 	mov	sp,fp
   43c60:	dfc00117 	ldw	ra,4(sp)
   43c64:	df000017 	ldw	fp,0(sp)
   43c68:	dec00204 	addi	sp,sp,8
   43c6c:	f800283a 	ret

00043c70 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43c70:	defffa04 	addi	sp,sp,-24
   43c74:	dfc00515 	stw	ra,20(sp)
   43c78:	df000415 	stw	fp,16(sp)
   43c7c:	df000404 	addi	fp,sp,16
   43c80:	e13ffd15 	stw	r4,-12(fp)
   43c84:	e17ffe15 	stw	r5,-8(fp)
   43c88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c8c:	e0bffd17 	ldw	r2,-12(fp)
   43c90:	10800017 	ldw	r2,0(r2)
   43c94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43c98:	e0bffc17 	ldw	r2,-16(fp)
   43c9c:	10c00a04 	addi	r3,r2,40
   43ca0:	e0bffd17 	ldw	r2,-12(fp)
   43ca4:	10800217 	ldw	r2,8(r2)
   43ca8:	100f883a 	mov	r7,r2
   43cac:	e1bfff17 	ldw	r6,-4(fp)
   43cb0:	e17ffe17 	ldw	r5,-8(fp)
   43cb4:	1809883a 	mov	r4,r3
   43cb8:	00444540 	call	44454 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43cbc:	e037883a 	mov	sp,fp
   43cc0:	dfc00117 	ldw	ra,4(sp)
   43cc4:	df000017 	ldw	fp,0(sp)
   43cc8:	dec00204 	addi	sp,sp,8
   43ccc:	f800283a 	ret

00043cd0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43cd0:	defffc04 	addi	sp,sp,-16
   43cd4:	dfc00315 	stw	ra,12(sp)
   43cd8:	df000215 	stw	fp,8(sp)
   43cdc:	df000204 	addi	fp,sp,8
   43ce0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43ce4:	e0bfff17 	ldw	r2,-4(fp)
   43ce8:	10800017 	ldw	r2,0(r2)
   43cec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43cf0:	e0bffe17 	ldw	r2,-8(fp)
   43cf4:	10c00a04 	addi	r3,r2,40
   43cf8:	e0bfff17 	ldw	r2,-4(fp)
   43cfc:	10800217 	ldw	r2,8(r2)
   43d00:	100b883a 	mov	r5,r2
   43d04:	1809883a 	mov	r4,r3
   43d08:	00440e00 	call	440e0 <altera_avalon_jtag_uart_close>
}
   43d0c:	e037883a 	mov	sp,fp
   43d10:	dfc00117 	ldw	ra,4(sp)
   43d14:	df000017 	ldw	fp,0(sp)
   43d18:	dec00204 	addi	sp,sp,8
   43d1c:	f800283a 	ret

00043d20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43d20:	defffa04 	addi	sp,sp,-24
   43d24:	dfc00515 	stw	ra,20(sp)
   43d28:	df000415 	stw	fp,16(sp)
   43d2c:	df000404 	addi	fp,sp,16
   43d30:	e13ffd15 	stw	r4,-12(fp)
   43d34:	e17ffe15 	stw	r5,-8(fp)
   43d38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43d3c:	e0bffd17 	ldw	r2,-12(fp)
   43d40:	10800017 	ldw	r2,0(r2)
   43d44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43d48:	e0bffc17 	ldw	r2,-16(fp)
   43d4c:	10800a04 	addi	r2,r2,40
   43d50:	e1bfff17 	ldw	r6,-4(fp)
   43d54:	e17ffe17 	ldw	r5,-8(fp)
   43d58:	1009883a 	mov	r4,r2
   43d5c:	00441480 	call	44148 <altera_avalon_jtag_uart_ioctl>
}
   43d60:	e037883a 	mov	sp,fp
   43d64:	dfc00117 	ldw	ra,4(sp)
   43d68:	df000017 	ldw	fp,0(sp)
   43d6c:	dec00204 	addi	sp,sp,8
   43d70:	f800283a 	ret

00043d74 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43d74:	defffa04 	addi	sp,sp,-24
   43d78:	dfc00515 	stw	ra,20(sp)
   43d7c:	df000415 	stw	fp,16(sp)
   43d80:	df000404 	addi	fp,sp,16
   43d84:	e13ffd15 	stw	r4,-12(fp)
   43d88:	e17ffe15 	stw	r5,-8(fp)
   43d8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43d90:	e0bffd17 	ldw	r2,-12(fp)
   43d94:	00c00044 	movi	r3,1
   43d98:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43d9c:	e0bffd17 	ldw	r2,-12(fp)
   43da0:	10800017 	ldw	r2,0(r2)
   43da4:	10800104 	addi	r2,r2,4
   43da8:	1007883a 	mov	r3,r2
   43dac:	e0bffd17 	ldw	r2,-12(fp)
   43db0:	10800817 	ldw	r2,32(r2)
   43db4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43db8:	e0bffe17 	ldw	r2,-8(fp)
   43dbc:	e0ffff17 	ldw	r3,-4(fp)
   43dc0:	d8000015 	stw	zero,0(sp)
   43dc4:	e1fffd17 	ldw	r7,-12(fp)
   43dc8:	01800134 	movhi	r6,4
   43dcc:	318f8d04 	addi	r6,r6,15924
   43dd0:	180b883a 	mov	r5,r3
   43dd4:	1009883a 	mov	r4,r2
   43dd8:	0044f080 	call	44f08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43ddc:	e0bffd17 	ldw	r2,-12(fp)
   43de0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43de4:	e0bffd17 	ldw	r2,-12(fp)
   43de8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43dec:	d0e6bc17 	ldw	r3,-25872(gp)
   43df0:	e1fffd17 	ldw	r7,-12(fp)
   43df4:	01800134 	movhi	r6,4
   43df8:	31901004 	addi	r6,r6,16448
   43dfc:	180b883a 	mov	r5,r3
   43e00:	1009883a 	mov	r4,r2
   43e04:	0044b6c0 	call	44b6c <alt_alarm_start>
   43e08:	1000040e 	bge	r2,zero,43e1c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43e0c:	e0fffd17 	ldw	r3,-12(fp)
   43e10:	00a00034 	movhi	r2,32768
   43e14:	10bfffc4 	addi	r2,r2,-1
   43e18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43e1c:	0001883a 	nop
   43e20:	e037883a 	mov	sp,fp
   43e24:	dfc00117 	ldw	ra,4(sp)
   43e28:	df000017 	ldw	fp,0(sp)
   43e2c:	dec00204 	addi	sp,sp,8
   43e30:	f800283a 	ret

00043e34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43e34:	defff804 	addi	sp,sp,-32
   43e38:	df000715 	stw	fp,28(sp)
   43e3c:	df000704 	addi	fp,sp,28
   43e40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43e44:	e0bfff17 	ldw	r2,-4(fp)
   43e48:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43e4c:	e0bffb17 	ldw	r2,-20(fp)
   43e50:	10800017 	ldw	r2,0(r2)
   43e54:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43e58:	e0bffc17 	ldw	r2,-16(fp)
   43e5c:	10800104 	addi	r2,r2,4
   43e60:	10800037 	ldwio	r2,0(r2)
   43e64:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43e68:	e0bffd17 	ldw	r2,-12(fp)
   43e6c:	1080c00c 	andi	r2,r2,768
   43e70:	10006d26 	beq	r2,zero,44028 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43e74:	e0bffd17 	ldw	r2,-12(fp)
   43e78:	1080400c 	andi	r2,r2,256
   43e7c:	10003526 	beq	r2,zero,43f54 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43e80:	00800074 	movhi	r2,1
   43e84:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43e88:	e0bffb17 	ldw	r2,-20(fp)
   43e8c:	10800a17 	ldw	r2,40(r2)
   43e90:	10800044 	addi	r2,r2,1
   43e94:	1081ffcc 	andi	r2,r2,2047
   43e98:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43e9c:	e0bffb17 	ldw	r2,-20(fp)
   43ea0:	10c00b17 	ldw	r3,44(r2)
   43ea4:	e0bffe17 	ldw	r2,-8(fp)
   43ea8:	18801526 	beq	r3,r2,43f00 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43eac:	e0bffc17 	ldw	r2,-16(fp)
   43eb0:	10800037 	ldwio	r2,0(r2)
   43eb4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43eb8:	e0bff917 	ldw	r2,-28(fp)
   43ebc:	10a0000c 	andi	r2,r2,32768
   43ec0:	10001126 	beq	r2,zero,43f08 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43ec4:	e0bffb17 	ldw	r2,-20(fp)
   43ec8:	10800a17 	ldw	r2,40(r2)
   43ecc:	e0fff917 	ldw	r3,-28(fp)
   43ed0:	1809883a 	mov	r4,r3
   43ed4:	e0fffb17 	ldw	r3,-20(fp)
   43ed8:	1885883a 	add	r2,r3,r2
   43edc:	10800e04 	addi	r2,r2,56
   43ee0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ee4:	e0bffb17 	ldw	r2,-20(fp)
   43ee8:	10800a17 	ldw	r2,40(r2)
   43eec:	10800044 	addi	r2,r2,1
   43ef0:	10c1ffcc 	andi	r3,r2,2047
   43ef4:	e0bffb17 	ldw	r2,-20(fp)
   43ef8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43efc:	003fe206 	br	43e88 <__alt_data_end+0xfffd1e88>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   43f00:	0001883a 	nop
   43f04:	00000106 	br	43f0c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   43f08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43f0c:	e0bff917 	ldw	r2,-28(fp)
   43f10:	10bfffec 	andhi	r2,r2,65535
   43f14:	10000f26 	beq	r2,zero,43f54 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43f18:	e0bffb17 	ldw	r2,-20(fp)
   43f1c:	10c00817 	ldw	r3,32(r2)
   43f20:	00bfff84 	movi	r2,-2
   43f24:	1886703a 	and	r3,r3,r2
   43f28:	e0bffb17 	ldw	r2,-20(fp)
   43f2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43f30:	e0bffc17 	ldw	r2,-16(fp)
   43f34:	10800104 	addi	r2,r2,4
   43f38:	1007883a 	mov	r3,r2
   43f3c:	e0bffb17 	ldw	r2,-20(fp)
   43f40:	10800817 	ldw	r2,32(r2)
   43f44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f48:	e0bffc17 	ldw	r2,-16(fp)
   43f4c:	10800104 	addi	r2,r2,4
   43f50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43f54:	e0bffd17 	ldw	r2,-12(fp)
   43f58:	1080800c 	andi	r2,r2,512
   43f5c:	103fbe26 	beq	r2,zero,43e58 <__alt_data_end+0xfffd1e58>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43f60:	e0bffd17 	ldw	r2,-12(fp)
   43f64:	1004d43a 	srli	r2,r2,16
   43f68:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43f6c:	00001406 	br	43fc0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43f70:	e0bffc17 	ldw	r2,-16(fp)
   43f74:	e0fffb17 	ldw	r3,-20(fp)
   43f78:	18c00d17 	ldw	r3,52(r3)
   43f7c:	e13ffb17 	ldw	r4,-20(fp)
   43f80:	20c7883a 	add	r3,r4,r3
   43f84:	18c20e04 	addi	r3,r3,2104
   43f88:	18c00003 	ldbu	r3,0(r3)
   43f8c:	18c03fcc 	andi	r3,r3,255
   43f90:	18c0201c 	xori	r3,r3,128
   43f94:	18ffe004 	addi	r3,r3,-128
   43f98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43f9c:	e0bffb17 	ldw	r2,-20(fp)
   43fa0:	10800d17 	ldw	r2,52(r2)
   43fa4:	10800044 	addi	r2,r2,1
   43fa8:	10c1ffcc 	andi	r3,r2,2047
   43fac:	e0bffb17 	ldw	r2,-20(fp)
   43fb0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43fb4:	e0bffa17 	ldw	r2,-24(fp)
   43fb8:	10bfffc4 	addi	r2,r2,-1
   43fbc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43fc0:	e0bffa17 	ldw	r2,-24(fp)
   43fc4:	10000526 	beq	r2,zero,43fdc <altera_avalon_jtag_uart_irq+0x1a8>
   43fc8:	e0bffb17 	ldw	r2,-20(fp)
   43fcc:	10c00d17 	ldw	r3,52(r2)
   43fd0:	e0bffb17 	ldw	r2,-20(fp)
   43fd4:	10800c17 	ldw	r2,48(r2)
   43fd8:	18bfe51e 	bne	r3,r2,43f70 <__alt_data_end+0xfffd1f70>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43fdc:	e0bffa17 	ldw	r2,-24(fp)
   43fe0:	103f9d26 	beq	r2,zero,43e58 <__alt_data_end+0xfffd1e58>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43fe4:	e0bffb17 	ldw	r2,-20(fp)
   43fe8:	10c00817 	ldw	r3,32(r2)
   43fec:	00bfff44 	movi	r2,-3
   43ff0:	1886703a 	and	r3,r3,r2
   43ff4:	e0bffb17 	ldw	r2,-20(fp)
   43ff8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43ffc:	e0bffb17 	ldw	r2,-20(fp)
   44000:	10800017 	ldw	r2,0(r2)
   44004:	10800104 	addi	r2,r2,4
   44008:	1007883a 	mov	r3,r2
   4400c:	e0bffb17 	ldw	r2,-20(fp)
   44010:	10800817 	ldw	r2,32(r2)
   44014:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44018:	e0bffc17 	ldw	r2,-16(fp)
   4401c:	10800104 	addi	r2,r2,4
   44020:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44024:	003f8c06 	br	43e58 <__alt_data_end+0xfffd1e58>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   44028:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4402c:	0001883a 	nop
   44030:	e037883a 	mov	sp,fp
   44034:	df000017 	ldw	fp,0(sp)
   44038:	dec00104 	addi	sp,sp,4
   4403c:	f800283a 	ret

00044040 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44040:	defff804 	addi	sp,sp,-32
   44044:	df000715 	stw	fp,28(sp)
   44048:	df000704 	addi	fp,sp,28
   4404c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44050:	e0bffb17 	ldw	r2,-20(fp)
   44054:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44058:	e0bff917 	ldw	r2,-28(fp)
   4405c:	10800017 	ldw	r2,0(r2)
   44060:	10800104 	addi	r2,r2,4
   44064:	10800037 	ldwio	r2,0(r2)
   44068:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4406c:	e0bffa17 	ldw	r2,-24(fp)
   44070:	1081000c 	andi	r2,r2,1024
   44074:	10000b26 	beq	r2,zero,440a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44078:	e0bff917 	ldw	r2,-28(fp)
   4407c:	10800017 	ldw	r2,0(r2)
   44080:	10800104 	addi	r2,r2,4
   44084:	1007883a 	mov	r3,r2
   44088:	e0bff917 	ldw	r2,-28(fp)
   4408c:	10800817 	ldw	r2,32(r2)
   44090:	10810014 	ori	r2,r2,1024
   44094:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   44098:	e0bff917 	ldw	r2,-28(fp)
   4409c:	10000915 	stw	zero,36(r2)
   440a0:	00000a06 	br	440cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   440a4:	e0bff917 	ldw	r2,-28(fp)
   440a8:	10c00917 	ldw	r3,36(r2)
   440ac:	00a00034 	movhi	r2,32768
   440b0:	10bfff04 	addi	r2,r2,-4
   440b4:	10c00536 	bltu	r2,r3,440cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   440b8:	e0bff917 	ldw	r2,-28(fp)
   440bc:	10800917 	ldw	r2,36(r2)
   440c0:	10c00044 	addi	r3,r2,1
   440c4:	e0bff917 	ldw	r2,-28(fp)
   440c8:	10c00915 	stw	r3,36(r2)
   440cc:	d0a6bc17 	ldw	r2,-25872(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   440d0:	e037883a 	mov	sp,fp
   440d4:	df000017 	ldw	fp,0(sp)
   440d8:	dec00104 	addi	sp,sp,4
   440dc:	f800283a 	ret

000440e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   440e0:	defffd04 	addi	sp,sp,-12
   440e4:	df000215 	stw	fp,8(sp)
   440e8:	df000204 	addi	fp,sp,8
   440ec:	e13ffe15 	stw	r4,-8(fp)
   440f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   440f4:	00000506 	br	4410c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   440f8:	e0bfff17 	ldw	r2,-4(fp)
   440fc:	1090000c 	andi	r2,r2,16384
   44100:	10000226 	beq	r2,zero,4410c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44104:	00bffd44 	movi	r2,-11
   44108:	00000b06 	br	44138 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4410c:	e0bffe17 	ldw	r2,-8(fp)
   44110:	10c00d17 	ldw	r3,52(r2)
   44114:	e0bffe17 	ldw	r2,-8(fp)
   44118:	10800c17 	ldw	r2,48(r2)
   4411c:	18800526 	beq	r3,r2,44134 <altera_avalon_jtag_uart_close+0x54>
   44120:	e0bffe17 	ldw	r2,-8(fp)
   44124:	10c00917 	ldw	r3,36(r2)
   44128:	e0bffe17 	ldw	r2,-8(fp)
   4412c:	10800117 	ldw	r2,4(r2)
   44130:	18bff136 	bltu	r3,r2,440f8 <__alt_data_end+0xfffd20f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44134:	0005883a 	mov	r2,zero
}
   44138:	e037883a 	mov	sp,fp
   4413c:	df000017 	ldw	fp,0(sp)
   44140:	dec00104 	addi	sp,sp,4
   44144:	f800283a 	ret

00044148 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44148:	defffa04 	addi	sp,sp,-24
   4414c:	df000515 	stw	fp,20(sp)
   44150:	df000504 	addi	fp,sp,20
   44154:	e13ffd15 	stw	r4,-12(fp)
   44158:	e17ffe15 	stw	r5,-8(fp)
   4415c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   44160:	00bff9c4 	movi	r2,-25
   44164:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44168:	e0bffe17 	ldw	r2,-8(fp)
   4416c:	10da8060 	cmpeqi	r3,r2,27137
   44170:	1800031e 	bne	r3,zero,44180 <altera_avalon_jtag_uart_ioctl+0x38>
   44174:	109a80a0 	cmpeqi	r2,r2,27138
   44178:	1000181e 	bne	r2,zero,441dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4417c:	00002906 	br	44224 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44180:	e0bffd17 	ldw	r2,-12(fp)
   44184:	10c00117 	ldw	r3,4(r2)
   44188:	00a00034 	movhi	r2,32768
   4418c:	10bfffc4 	addi	r2,r2,-1
   44190:	18802126 	beq	r3,r2,44218 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   44194:	e0bfff17 	ldw	r2,-4(fp)
   44198:	10800017 	ldw	r2,0(r2)
   4419c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   441a0:	e0bffc17 	ldw	r2,-16(fp)
   441a4:	10800090 	cmplti	r2,r2,2
   441a8:	1000061e 	bne	r2,zero,441c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   441ac:	e0fffc17 	ldw	r3,-16(fp)
   441b0:	00a00034 	movhi	r2,32768
   441b4:	10bfffc4 	addi	r2,r2,-1
   441b8:	18800226 	beq	r3,r2,441c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   441bc:	e0bffc17 	ldw	r2,-16(fp)
   441c0:	00000206 	br	441cc <altera_avalon_jtag_uart_ioctl+0x84>
   441c4:	00a00034 	movhi	r2,32768
   441c8:	10bfff84 	addi	r2,r2,-2
   441cc:	e0fffd17 	ldw	r3,-12(fp)
   441d0:	18800115 	stw	r2,4(r3)
      rc = 0;
   441d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   441d8:	00000f06 	br	44218 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   441dc:	e0bffd17 	ldw	r2,-12(fp)
   441e0:	10c00117 	ldw	r3,4(r2)
   441e4:	00a00034 	movhi	r2,32768
   441e8:	10bfffc4 	addi	r2,r2,-1
   441ec:	18800c26 	beq	r3,r2,44220 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   441f0:	e0bffd17 	ldw	r2,-12(fp)
   441f4:	10c00917 	ldw	r3,36(r2)
   441f8:	e0bffd17 	ldw	r2,-12(fp)
   441fc:	10800117 	ldw	r2,4(r2)
   44200:	1885803a 	cmpltu	r2,r3,r2
   44204:	10c03fcc 	andi	r3,r2,255
   44208:	e0bfff17 	ldw	r2,-4(fp)
   4420c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44210:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44214:	00000206 	br	44220 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   44218:	0001883a 	nop
   4421c:	00000106 	br	44224 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44220:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44224:	e0bffb17 	ldw	r2,-20(fp)
}
   44228:	e037883a 	mov	sp,fp
   4422c:	df000017 	ldw	fp,0(sp)
   44230:	dec00104 	addi	sp,sp,4
   44234:	f800283a 	ret

00044238 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44238:	defff304 	addi	sp,sp,-52
   4423c:	dfc00c15 	stw	ra,48(sp)
   44240:	df000b15 	stw	fp,44(sp)
   44244:	df000b04 	addi	fp,sp,44
   44248:	e13ffc15 	stw	r4,-16(fp)
   4424c:	e17ffd15 	stw	r5,-12(fp)
   44250:	e1bffe15 	stw	r6,-8(fp)
   44254:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44258:	e0bffd17 	ldw	r2,-12(fp)
   4425c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44260:	00004706 	br	44380 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44264:	e0bffc17 	ldw	r2,-16(fp)
   44268:	10800a17 	ldw	r2,40(r2)
   4426c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44270:	e0bffc17 	ldw	r2,-16(fp)
   44274:	10800b17 	ldw	r2,44(r2)
   44278:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4427c:	e0fff717 	ldw	r3,-36(fp)
   44280:	e0bff817 	ldw	r2,-32(fp)
   44284:	18800536 	bltu	r3,r2,4429c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44288:	e0fff717 	ldw	r3,-36(fp)
   4428c:	e0bff817 	ldw	r2,-32(fp)
   44290:	1885c83a 	sub	r2,r3,r2
   44294:	e0bff615 	stw	r2,-40(fp)
   44298:	00000406 	br	442ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4429c:	00c20004 	movi	r3,2048
   442a0:	e0bff817 	ldw	r2,-32(fp)
   442a4:	1885c83a 	sub	r2,r3,r2
   442a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   442ac:	e0bff617 	ldw	r2,-40(fp)
   442b0:	10001e26 	beq	r2,zero,4432c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   442b4:	e0fffe17 	ldw	r3,-8(fp)
   442b8:	e0bff617 	ldw	r2,-40(fp)
   442bc:	1880022e 	bgeu	r3,r2,442c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   442c0:	e0bffe17 	ldw	r2,-8(fp)
   442c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   442c8:	e0bffc17 	ldw	r2,-16(fp)
   442cc:	10c00e04 	addi	r3,r2,56
   442d0:	e0bff817 	ldw	r2,-32(fp)
   442d4:	1885883a 	add	r2,r3,r2
   442d8:	e1bff617 	ldw	r6,-40(fp)
   442dc:	100b883a 	mov	r5,r2
   442e0:	e13ff517 	ldw	r4,-44(fp)
   442e4:	00418000 	call	41800 <memcpy>
      ptr   += n;
   442e8:	e0fff517 	ldw	r3,-44(fp)
   442ec:	e0bff617 	ldw	r2,-40(fp)
   442f0:	1885883a 	add	r2,r3,r2
   442f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   442f8:	e0fffe17 	ldw	r3,-8(fp)
   442fc:	e0bff617 	ldw	r2,-40(fp)
   44300:	1885c83a 	sub	r2,r3,r2
   44304:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44308:	e0fff817 	ldw	r3,-32(fp)
   4430c:	e0bff617 	ldw	r2,-40(fp)
   44310:	1885883a 	add	r2,r3,r2
   44314:	10c1ffcc 	andi	r3,r2,2047
   44318:	e0bffc17 	ldw	r2,-16(fp)
   4431c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44320:	e0bffe17 	ldw	r2,-8(fp)
   44324:	00bfcf16 	blt	zero,r2,44264 <__alt_data_end+0xfffd2264>
   44328:	00000106 	br	44330 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4432c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   44330:	e0fff517 	ldw	r3,-44(fp)
   44334:	e0bffd17 	ldw	r2,-12(fp)
   44338:	1880141e 	bne	r3,r2,4438c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4433c:	e0bfff17 	ldw	r2,-4(fp)
   44340:	1090000c 	andi	r2,r2,16384
   44344:	1000131e 	bne	r2,zero,44394 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44348:	0001883a 	nop
   4434c:	e0bffc17 	ldw	r2,-16(fp)
   44350:	10c00a17 	ldw	r3,40(r2)
   44354:	e0bff717 	ldw	r2,-36(fp)
   44358:	1880051e 	bne	r3,r2,44370 <altera_avalon_jtag_uart_read+0x138>
   4435c:	e0bffc17 	ldw	r2,-16(fp)
   44360:	10c00917 	ldw	r3,36(r2)
   44364:	e0bffc17 	ldw	r2,-16(fp)
   44368:	10800117 	ldw	r2,4(r2)
   4436c:	18bff736 	bltu	r3,r2,4434c <__alt_data_end+0xfffd234c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44370:	e0bffc17 	ldw	r2,-16(fp)
   44374:	10c00a17 	ldw	r3,40(r2)
   44378:	e0bff717 	ldw	r2,-36(fp)
   4437c:	18800726 	beq	r3,r2,4439c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44380:	e0bffe17 	ldw	r2,-8(fp)
   44384:	00bfb716 	blt	zero,r2,44264 <__alt_data_end+0xfffd2264>
   44388:	00000506 	br	443a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4438c:	0001883a 	nop
   44390:	00000306 	br	443a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   44394:	0001883a 	nop
   44398:	00000106 	br	443a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4439c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   443a0:	e0fff517 	ldw	r3,-44(fp)
   443a4:	e0bffd17 	ldw	r2,-12(fp)
   443a8:	18801826 	beq	r3,r2,4440c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443ac:	0005303a 	rdctl	r2,status
   443b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443b4:	e0fffb17 	ldw	r3,-20(fp)
   443b8:	00bfff84 	movi	r2,-2
   443bc:	1884703a 	and	r2,r3,r2
   443c0:	1001703a 	wrctl	status,r2
  
  return context;
   443c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   443c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   443cc:	e0bffc17 	ldw	r2,-16(fp)
   443d0:	10800817 	ldw	r2,32(r2)
   443d4:	10c00054 	ori	r3,r2,1
   443d8:	e0bffc17 	ldw	r2,-16(fp)
   443dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   443e0:	e0bffc17 	ldw	r2,-16(fp)
   443e4:	10800017 	ldw	r2,0(r2)
   443e8:	10800104 	addi	r2,r2,4
   443ec:	1007883a 	mov	r3,r2
   443f0:	e0bffc17 	ldw	r2,-16(fp)
   443f4:	10800817 	ldw	r2,32(r2)
   443f8:	18800035 	stwio	r2,0(r3)
   443fc:	e0bffa17 	ldw	r2,-24(fp)
   44400:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44404:	e0bff917 	ldw	r2,-28(fp)
   44408:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4440c:	e0fff517 	ldw	r3,-44(fp)
   44410:	e0bffd17 	ldw	r2,-12(fp)
   44414:	18800426 	beq	r3,r2,44428 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   44418:	e0fff517 	ldw	r3,-44(fp)
   4441c:	e0bffd17 	ldw	r2,-12(fp)
   44420:	1885c83a 	sub	r2,r3,r2
   44424:	00000606 	br	44440 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   44428:	e0bfff17 	ldw	r2,-4(fp)
   4442c:	1090000c 	andi	r2,r2,16384
   44430:	10000226 	beq	r2,zero,4443c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44434:	00bffd44 	movi	r2,-11
   44438:	00000106 	br	44440 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4443c:	00bffec4 	movi	r2,-5
}
   44440:	e037883a 	mov	sp,fp
   44444:	dfc00117 	ldw	ra,4(sp)
   44448:	df000017 	ldw	fp,0(sp)
   4444c:	dec00204 	addi	sp,sp,8
   44450:	f800283a 	ret

00044454 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44454:	defff304 	addi	sp,sp,-52
   44458:	dfc00c15 	stw	ra,48(sp)
   4445c:	df000b15 	stw	fp,44(sp)
   44460:	df000b04 	addi	fp,sp,44
   44464:	e13ffc15 	stw	r4,-16(fp)
   44468:	e17ffd15 	stw	r5,-12(fp)
   4446c:	e1bffe15 	stw	r6,-8(fp)
   44470:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44474:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44478:	e0bffd17 	ldw	r2,-12(fp)
   4447c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44480:	00003706 	br	44560 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44484:	e0bffc17 	ldw	r2,-16(fp)
   44488:	10800c17 	ldw	r2,48(r2)
   4448c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   44490:	e0bffc17 	ldw	r2,-16(fp)
   44494:	10800d17 	ldw	r2,52(r2)
   44498:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4449c:	e0fff917 	ldw	r3,-28(fp)
   444a0:	e0bff517 	ldw	r2,-44(fp)
   444a4:	1880062e 	bgeu	r3,r2,444c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   444a8:	e0fff517 	ldw	r3,-44(fp)
   444ac:	e0bff917 	ldw	r2,-28(fp)
   444b0:	1885c83a 	sub	r2,r3,r2
   444b4:	10bfffc4 	addi	r2,r2,-1
   444b8:	e0bff615 	stw	r2,-40(fp)
   444bc:	00000b06 	br	444ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   444c0:	e0bff517 	ldw	r2,-44(fp)
   444c4:	10000526 	beq	r2,zero,444dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   444c8:	00c20004 	movi	r3,2048
   444cc:	e0bff917 	ldw	r2,-28(fp)
   444d0:	1885c83a 	sub	r2,r3,r2
   444d4:	e0bff615 	stw	r2,-40(fp)
   444d8:	00000406 	br	444ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   444dc:	00c1ffc4 	movi	r3,2047
   444e0:	e0bff917 	ldw	r2,-28(fp)
   444e4:	1885c83a 	sub	r2,r3,r2
   444e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   444ec:	e0bff617 	ldw	r2,-40(fp)
   444f0:	10001e26 	beq	r2,zero,4456c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   444f4:	e0fffe17 	ldw	r3,-8(fp)
   444f8:	e0bff617 	ldw	r2,-40(fp)
   444fc:	1880022e 	bgeu	r3,r2,44508 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   44500:	e0bffe17 	ldw	r2,-8(fp)
   44504:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44508:	e0bffc17 	ldw	r2,-16(fp)
   4450c:	10c20e04 	addi	r3,r2,2104
   44510:	e0bff917 	ldw	r2,-28(fp)
   44514:	1885883a 	add	r2,r3,r2
   44518:	e1bff617 	ldw	r6,-40(fp)
   4451c:	e17ffd17 	ldw	r5,-12(fp)
   44520:	1009883a 	mov	r4,r2
   44524:	00418000 	call	41800 <memcpy>
      ptr   += n;
   44528:	e0fffd17 	ldw	r3,-12(fp)
   4452c:	e0bff617 	ldw	r2,-40(fp)
   44530:	1885883a 	add	r2,r3,r2
   44534:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   44538:	e0fffe17 	ldw	r3,-8(fp)
   4453c:	e0bff617 	ldw	r2,-40(fp)
   44540:	1885c83a 	sub	r2,r3,r2
   44544:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44548:	e0fff917 	ldw	r3,-28(fp)
   4454c:	e0bff617 	ldw	r2,-40(fp)
   44550:	1885883a 	add	r2,r3,r2
   44554:	10c1ffcc 	andi	r3,r2,2047
   44558:	e0bffc17 	ldw	r2,-16(fp)
   4455c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44560:	e0bffe17 	ldw	r2,-8(fp)
   44564:	00bfc716 	blt	zero,r2,44484 <__alt_data_end+0xfffd2484>
   44568:	00000106 	br	44570 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4456c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44570:	0005303a 	rdctl	r2,status
   44574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44578:	e0fffb17 	ldw	r3,-20(fp)
   4457c:	00bfff84 	movi	r2,-2
   44580:	1884703a 	and	r2,r3,r2
   44584:	1001703a 	wrctl	status,r2
  
  return context;
   44588:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4458c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44590:	e0bffc17 	ldw	r2,-16(fp)
   44594:	10800817 	ldw	r2,32(r2)
   44598:	10c00094 	ori	r3,r2,2
   4459c:	e0bffc17 	ldw	r2,-16(fp)
   445a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   445a4:	e0bffc17 	ldw	r2,-16(fp)
   445a8:	10800017 	ldw	r2,0(r2)
   445ac:	10800104 	addi	r2,r2,4
   445b0:	1007883a 	mov	r3,r2
   445b4:	e0bffc17 	ldw	r2,-16(fp)
   445b8:	10800817 	ldw	r2,32(r2)
   445bc:	18800035 	stwio	r2,0(r3)
   445c0:	e0bffa17 	ldw	r2,-24(fp)
   445c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   445c8:	e0bff817 	ldw	r2,-32(fp)
   445cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   445d0:	e0bffe17 	ldw	r2,-8(fp)
   445d4:	0080100e 	bge	zero,r2,44618 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   445d8:	e0bfff17 	ldw	r2,-4(fp)
   445dc:	1090000c 	andi	r2,r2,16384
   445e0:	1000101e 	bne	r2,zero,44624 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   445e4:	0001883a 	nop
   445e8:	e0bffc17 	ldw	r2,-16(fp)
   445ec:	10c00d17 	ldw	r3,52(r2)
   445f0:	e0bff517 	ldw	r2,-44(fp)
   445f4:	1880051e 	bne	r3,r2,4460c <altera_avalon_jtag_uart_write+0x1b8>
   445f8:	e0bffc17 	ldw	r2,-16(fp)
   445fc:	10c00917 	ldw	r3,36(r2)
   44600:	e0bffc17 	ldw	r2,-16(fp)
   44604:	10800117 	ldw	r2,4(r2)
   44608:	18bff736 	bltu	r3,r2,445e8 <__alt_data_end+0xfffd25e8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4460c:	e0bffc17 	ldw	r2,-16(fp)
   44610:	10800917 	ldw	r2,36(r2)
   44614:	1000051e 	bne	r2,zero,4462c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   44618:	e0bffe17 	ldw	r2,-8(fp)
   4461c:	00bfd016 	blt	zero,r2,44560 <__alt_data_end+0xfffd2560>
   44620:	00000306 	br	44630 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   44624:	0001883a 	nop
   44628:	00000106 	br	44630 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4462c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44630:	e0fffd17 	ldw	r3,-12(fp)
   44634:	e0bff717 	ldw	r2,-36(fp)
   44638:	18800426 	beq	r3,r2,4464c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4463c:	e0fffd17 	ldw	r3,-12(fp)
   44640:	e0bff717 	ldw	r2,-36(fp)
   44644:	1885c83a 	sub	r2,r3,r2
   44648:	00000606 	br	44664 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4464c:	e0bfff17 	ldw	r2,-4(fp)
   44650:	1090000c 	andi	r2,r2,16384
   44654:	10000226 	beq	r2,zero,44660 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   44658:	00bffd44 	movi	r2,-11
   4465c:	00000106 	br	44664 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44660:	00bffec4 	movi	r2,-5
}
   44664:	e037883a 	mov	sp,fp
   44668:	dfc00117 	ldw	ra,4(sp)
   4466c:	df000017 	ldw	fp,0(sp)
   44670:	dec00204 	addi	sp,sp,8
   44674:	f800283a 	ret

00044678 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   44678:	defffc04 	addi	sp,sp,-16
   4467c:	df000315 	stw	fp,12(sp)
   44680:	df000304 	addi	fp,sp,12
   44684:	e13ffe15 	stw	r4,-8(fp)
   44688:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   4468c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   44690:	e0bfff17 	ldw	r2,-4(fp)
   44694:	1000061e 	bne	r2,zero,446b0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   44698:	e0bffe17 	ldw	r2,-8(fp)
   4469c:	1007883a 	mov	r3,r2
   446a0:	e0bffd03 	ldbu	r2,-12(fp)
   446a4:	1884b03a 	or	r2,r3,r2
   446a8:	e0bffd05 	stb	r2,-12(fp)
   446ac:	00000806 	br	446d0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   446b0:	e0bffe17 	ldw	r2,-8(fp)
   446b4:	1007883a 	mov	r3,r2
   446b8:	e0bffd03 	ldbu	r2,-12(fp)
   446bc:	1884b03a 	or	r2,r3,r2
   446c0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   446c4:	e0bffd03 	ldbu	r2,-12(fp)
   446c8:	10801014 	ori	r2,r2,64
   446cc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   446d0:	e0fffd03 	ldbu	r3,-12(fp)
   446d4:	00bfe004 	movi	r2,-128
   446d8:	1884b03a 	or	r2,r3,r2
}
   446dc:	e037883a 	mov	sp,fp
   446e0:	df000017 	ldw	fp,0(sp)
   446e4:	dec00104 	addi	sp,sp,4
   446e8:	f800283a 	ret

000446ec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   446ec:	defffd04 	addi	sp,sp,-12
   446f0:	df000215 	stw	fp,8(sp)
   446f4:	df000204 	addi	fp,sp,8
   446f8:	e13ffe15 	stw	r4,-8(fp)
   446fc:	2805883a 	mov	r2,r5
   44700:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   44704:	e0bffe17 	ldw	r2,-8(fp)
   44708:	10800a17 	ldw	r2,40(r2)
   4470c:	1007883a 	mov	r3,r2
   44710:	e0bfff03 	ldbu	r2,-4(fp)
   44714:	18800025 	stbio	r2,0(r3)
}
   44718:	0001883a 	nop
   4471c:	e037883a 	mov	sp,fp
   44720:	df000017 	ldw	fp,0(sp)
   44724:	dec00104 	addi	sp,sp,4
   44728:	f800283a 	ret

0004472c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   4472c:	defffe04 	addi	sp,sp,-8
   44730:	df000115 	stw	fp,4(sp)
   44734:	df000104 	addi	fp,sp,4
   44738:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   4473c:	e0bfff17 	ldw	r2,-4(fp)
   44740:	10800a17 	ldw	r2,40(r2)
   44744:	1007883a 	mov	r3,r2
   44748:	00800044 	movi	r2,1
   4474c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   44750:	0001883a 	nop
   44754:	e037883a 	mov	sp,fp
   44758:	df000017 	ldw	fp,0(sp)
   4475c:	dec00104 	addi	sp,sp,4
   44760:	f800283a 	ret

00044764 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   44764:	defffc04 	addi	sp,sp,-16
   44768:	dfc00315 	stw	ra,12(sp)
   4476c:	df000215 	stw	fp,8(sp)
   44770:	df000204 	addi	fp,sp,8
   44774:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   44778:	d1600604 	addi	r5,gp,-32744
   4477c:	e13fff17 	ldw	r4,-4(fp)
   44780:	0044e580 	call	44e58 <alt_find_dev>
   44784:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   44788:	e0bffe17 	ldw	r2,-8(fp)
}
   4478c:	e037883a 	mov	sp,fp
   44790:	dfc00117 	ldw	ra,4(sp)
   44794:	df000017 	ldw	fp,0(sp)
   44798:	dec00204 	addi	sp,sp,8
   4479c:	f800283a 	ret

000447a0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   447a0:	defffb04 	addi	sp,sp,-20
   447a4:	df000415 	stw	fp,16(sp)
   447a8:	df000404 	addi	fp,sp,16
   447ac:	e13ffd15 	stw	r4,-12(fp)
   447b0:	e17ffe15 	stw	r5,-8(fp)
   447b4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   447b8:	e03ffc15 	stw	zero,-16(fp)
   447bc:	00000f06 	br	447fc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   447c0:	e0bffd17 	ldw	r2,-12(fp)
   447c4:	10800a17 	ldw	r2,40(r2)
   447c8:	10800044 	addi	r2,r2,1
   447cc:	1009883a 	mov	r4,r2
   447d0:	e0fffe17 	ldw	r3,-8(fp)
   447d4:	e0bffc17 	ldw	r2,-16(fp)
   447d8:	1885883a 	add	r2,r3,r2
   447dc:	10800003 	ldbu	r2,0(r2)
   447e0:	10803fcc 	andi	r2,r2,255
   447e4:	1080201c 	xori	r2,r2,128
   447e8:	10bfe004 	addi	r2,r2,-128
   447ec:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   447f0:	e0bffc17 	ldw	r2,-16(fp)
   447f4:	10800044 	addi	r2,r2,1
   447f8:	e0bffc15 	stw	r2,-16(fp)
   447fc:	e0fffc17 	ldw	r3,-16(fp)
   44800:	e0bfff17 	ldw	r2,-4(fp)
   44804:	18bfee36 	bltu	r3,r2,447c0 <__alt_data_end+0xfffd27c0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   44808:	0001883a 	nop
   4480c:	e037883a 	mov	sp,fp
   44810:	df000017 	ldw	fp,0(sp)
   44814:	dec00104 	addi	sp,sp,4
   44818:	f800283a 	ret

0004481c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   4481c:	defffd04 	addi	sp,sp,-12
   44820:	df000215 	stw	fp,8(sp)
   44824:	df000204 	addi	fp,sp,8
   44828:	e13ffe15 	stw	r4,-8(fp)
   4482c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   44830:	00000d06 	br	44868 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   44834:	e0bffe17 	ldw	r2,-8(fp)
   44838:	10800a17 	ldw	r2,40(r2)
   4483c:	10800044 	addi	r2,r2,1
   44840:	1007883a 	mov	r3,r2
   44844:	e0bfff17 	ldw	r2,-4(fp)
   44848:	10800003 	ldbu	r2,0(r2)
   4484c:	10803fcc 	andi	r2,r2,255
   44850:	1080201c 	xori	r2,r2,128
   44854:	10bfe004 	addi	r2,r2,-128
   44858:	18800025 	stbio	r2,0(r3)
		++ptr;
   4485c:	e0bfff17 	ldw	r2,-4(fp)
   44860:	10800044 	addi	r2,r2,1
   44864:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   44868:	e0bfff17 	ldw	r2,-4(fp)
   4486c:	10800003 	ldbu	r2,0(r2)
   44870:	10803fcc 	andi	r2,r2,255
   44874:	1080201c 	xori	r2,r2,128
   44878:	10bfe004 	addi	r2,r2,-128
   4487c:	103fed1e 	bne	r2,zero,44834 <__alt_data_end+0xfffd2834>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   44880:	0001883a 	nop
   44884:	e037883a 	mov	sp,fp
   44888:	df000017 	ldw	fp,0(sp)
   4488c:	dec00104 	addi	sp,sp,4
   44890:	f800283a 	ret

00044894 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   44894:	defffb04 	addi	sp,sp,-20
   44898:	dfc00415 	stw	ra,16(sp)
   4489c:	df000315 	stw	fp,12(sp)
   448a0:	df000304 	addi	fp,sp,12
   448a4:	e13ffd15 	stw	r4,-12(fp)
   448a8:	e17ffe15 	stw	r5,-8(fp)
   448ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   448b0:	e0bffd17 	ldw	r2,-12(fp)
   448b4:	10800017 	ldw	r2,0(r2)
   448b8:	e0ffff17 	ldw	r3,-4(fp)
   448bc:	180d883a 	mov	r6,r3
   448c0:	e17ffe17 	ldw	r5,-8(fp)
   448c4:	1009883a 	mov	r4,r2
   448c8:	00447a00 	call	447a0 <alt_up_character_lcd_write>
	return 0;
   448cc:	0005883a 	mov	r2,zero
}
   448d0:	e037883a 	mov	sp,fp
   448d4:	dfc00117 	ldw	ra,4(sp)
   448d8:	df000017 	ldw	fp,0(sp)
   448dc:	dec00204 	addi	sp,sp,8
   448e0:	f800283a 	ret

000448e4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   448e4:	defffa04 	addi	sp,sp,-24
   448e8:	dfc00515 	stw	ra,20(sp)
   448ec:	df000415 	stw	fp,16(sp)
   448f0:	df000404 	addi	fp,sp,16
   448f4:	e13ffd15 	stw	r4,-12(fp)
   448f8:	e17ffe15 	stw	r5,-8(fp)
   448fc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   44900:	e0bffe17 	ldw	r2,-8(fp)
   44904:	10800a28 	cmpgeui	r2,r2,40
   44908:	1000031e 	bne	r2,zero,44918 <alt_up_character_lcd_set_cursor_pos+0x34>
   4490c:	e0bfff17 	ldw	r2,-4(fp)
   44910:	108000b0 	cmpltui	r2,r2,2
   44914:	1000021e 	bne	r2,zero,44920 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   44918:	00bfffc4 	movi	r2,-1
   4491c:	00000906 	br	44944 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   44920:	e17fff17 	ldw	r5,-4(fp)
   44924:	e13ffe17 	ldw	r4,-8(fp)
   44928:	00446780 	call	44678 <get_DDRAM_addr>
   4492c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   44930:	e0bffc03 	ldbu	r2,-16(fp)
   44934:	100b883a 	mov	r5,r2
   44938:	e13ffd17 	ldw	r4,-12(fp)
   4493c:	00446ec0 	call	446ec <alt_up_character_lcd_send_cmd>
	return 0;
   44940:	0005883a 	mov	r2,zero
}
   44944:	e037883a 	mov	sp,fp
   44948:	dfc00117 	ldw	ra,4(sp)
   4494c:	df000017 	ldw	fp,0(sp)
   44950:	dec00204 	addi	sp,sp,8
   44954:	f800283a 	ret

00044958 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   44958:	defffb04 	addi	sp,sp,-20
   4495c:	dfc00415 	stw	ra,16(sp)
   44960:	df000315 	stw	fp,12(sp)
   44964:	df000304 	addi	fp,sp,12
   44968:	e13ffe15 	stw	r4,-8(fp)
   4496c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   44970:	e0bfff17 	ldw	r2,-4(fp)
   44974:	10001526 	beq	r2,zero,449cc <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   44978:	e0bfff17 	ldw	r2,-4(fp)
   4497c:	0080020e 	bge	zero,r2,44988 <alt_up_character_lcd_shift_cursor+0x30>
   44980:	00800504 	movi	r2,20
   44984:	00000106 	br	4498c <alt_up_character_lcd_shift_cursor+0x34>
   44988:	00800404 	movi	r2,16
   4498c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   44990:	e0bfff17 	ldw	r2,-4(fp)
   44994:	1000010e 	bge	r2,zero,4499c <alt_up_character_lcd_shift_cursor+0x44>
   44998:	0085c83a 	sub	r2,zero,r2
   4499c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   449a0:	00000406 	br	449b4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   449a4:	e0bffd43 	ldbu	r2,-11(fp)
   449a8:	100b883a 	mov	r5,r2
   449ac:	e13ffe17 	ldw	r4,-8(fp)
   449b0:	00446ec0 	call	446ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   449b4:	e0bffd03 	ldbu	r2,-12(fp)
   449b8:	10ffffc4 	addi	r3,r2,-1
   449bc:	e0fffd05 	stb	r3,-12(fp)
   449c0:	10803fcc 	andi	r2,r2,255
   449c4:	103ff71e 	bne	r2,zero,449a4 <__alt_data_end+0xfffd29a4>
   449c8:	00000106 	br	449d0 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   449cc:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   449d0:	e037883a 	mov	sp,fp
   449d4:	dfc00117 	ldw	ra,4(sp)
   449d8:	df000017 	ldw	fp,0(sp)
   449dc:	dec00204 	addi	sp,sp,8
   449e0:	f800283a 	ret

000449e4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   449e4:	defffb04 	addi	sp,sp,-20
   449e8:	dfc00415 	stw	ra,16(sp)
   449ec:	df000315 	stw	fp,12(sp)
   449f0:	df000304 	addi	fp,sp,12
   449f4:	e13ffe15 	stw	r4,-8(fp)
   449f8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   449fc:	e0bfff17 	ldw	r2,-4(fp)
   44a00:	10001526 	beq	r2,zero,44a58 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   44a04:	e0bfff17 	ldw	r2,-4(fp)
   44a08:	0080020e 	bge	zero,r2,44a14 <alt_up_character_lcd_shift_display+0x30>
   44a0c:	00800704 	movi	r2,28
   44a10:	00000106 	br	44a18 <alt_up_character_lcd_shift_display+0x34>
   44a14:	00800604 	movi	r2,24
   44a18:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   44a1c:	e0bfff17 	ldw	r2,-4(fp)
   44a20:	1000010e 	bge	r2,zero,44a28 <alt_up_character_lcd_shift_display+0x44>
   44a24:	0085c83a 	sub	r2,zero,r2
   44a28:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   44a2c:	00000406 	br	44a40 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   44a30:	e0bffd43 	ldbu	r2,-11(fp)
   44a34:	100b883a 	mov	r5,r2
   44a38:	e13ffe17 	ldw	r4,-8(fp)
   44a3c:	00446ec0 	call	446ec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   44a40:	e0bffd03 	ldbu	r2,-12(fp)
   44a44:	10ffffc4 	addi	r3,r2,-1
   44a48:	e0fffd05 	stb	r3,-12(fp)
   44a4c:	10803fcc 	andi	r2,r2,255
   44a50:	103ff71e 	bne	r2,zero,44a30 <__alt_data_end+0xfffd2a30>
   44a54:	00000106 	br	44a5c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   44a58:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   44a5c:	e037883a 	mov	sp,fp
   44a60:	dfc00117 	ldw	ra,4(sp)
   44a64:	df000017 	ldw	fp,0(sp)
   44a68:	dec00204 	addi	sp,sp,8
   44a6c:	f800283a 	ret

00044a70 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   44a70:	defffa04 	addi	sp,sp,-24
   44a74:	dfc00515 	stw	ra,20(sp)
   44a78:	df000415 	stw	fp,16(sp)
   44a7c:	df000404 	addi	fp,sp,16
   44a80:	e13ffd15 	stw	r4,-12(fp)
   44a84:	e17ffe15 	stw	r5,-8(fp)
   44a88:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   44a8c:	e0bffe17 	ldw	r2,-8(fp)
   44a90:	10800a28 	cmpgeui	r2,r2,40
   44a94:	1000031e 	bne	r2,zero,44aa4 <alt_up_character_lcd_erase_pos+0x34>
   44a98:	e0bfff17 	ldw	r2,-4(fp)
   44a9c:	108000b0 	cmpltui	r2,r2,2
   44aa0:	1000021e 	bne	r2,zero,44aac <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   44aa4:	00bfffc4 	movi	r2,-1
   44aa8:	00000f06 	br	44ae8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   44aac:	e17fff17 	ldw	r5,-4(fp)
   44ab0:	e13ffe17 	ldw	r4,-8(fp)
   44ab4:	00446780 	call	44678 <get_DDRAM_addr>
   44ab8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   44abc:	e0bffc03 	ldbu	r2,-16(fp)
   44ac0:	100b883a 	mov	r5,r2
   44ac4:	e13ffd17 	ldw	r4,-12(fp)
   44ac8:	00446ec0 	call	446ec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   44acc:	e0bffd17 	ldw	r2,-12(fp)
   44ad0:	10800a17 	ldw	r2,40(r2)
   44ad4:	10800044 	addi	r2,r2,1
   44ad8:	1007883a 	mov	r3,r2
   44adc:	00800084 	movi	r2,2
   44ae0:	18800025 	stbio	r2,0(r3)
	return 0;
   44ae4:	0005883a 	mov	r2,zero
}
   44ae8:	e037883a 	mov	sp,fp
   44aec:	dfc00117 	ldw	ra,4(sp)
   44af0:	df000017 	ldw	fp,0(sp)
   44af4:	dec00204 	addi	sp,sp,8
   44af8:	f800283a 	ret

00044afc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   44afc:	defffd04 	addi	sp,sp,-12
   44b00:	dfc00215 	stw	ra,8(sp)
   44b04:	df000115 	stw	fp,4(sp)
   44b08:	df000104 	addi	fp,sp,4
   44b0c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   44b10:	01400304 	movi	r5,12
   44b14:	e13fff17 	ldw	r4,-4(fp)
   44b18:	00446ec0 	call	446ec <alt_up_character_lcd_send_cmd>
}
   44b1c:	0001883a 	nop
   44b20:	e037883a 	mov	sp,fp
   44b24:	dfc00117 	ldw	ra,4(sp)
   44b28:	df000017 	ldw	fp,0(sp)
   44b2c:	dec00204 	addi	sp,sp,8
   44b30:	f800283a 	ret

00044b34 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   44b34:	defffd04 	addi	sp,sp,-12
   44b38:	dfc00215 	stw	ra,8(sp)
   44b3c:	df000115 	stw	fp,4(sp)
   44b40:	df000104 	addi	fp,sp,4
   44b44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   44b48:	014003c4 	movi	r5,15
   44b4c:	e13fff17 	ldw	r4,-4(fp)
   44b50:	00446ec0 	call	446ec <alt_up_character_lcd_send_cmd>
}
   44b54:	0001883a 	nop
   44b58:	e037883a 	mov	sp,fp
   44b5c:	dfc00117 	ldw	ra,4(sp)
   44b60:	df000017 	ldw	fp,0(sp)
   44b64:	dec00204 	addi	sp,sp,8
   44b68:	f800283a 	ret

00044b6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44b6c:	defff504 	addi	sp,sp,-44
   44b70:	df000a15 	stw	fp,40(sp)
   44b74:	df000a04 	addi	fp,sp,40
   44b78:	e13ffc15 	stw	r4,-16(fp)
   44b7c:	e17ffd15 	stw	r5,-12(fp)
   44b80:	e1bffe15 	stw	r6,-8(fp)
   44b84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44b88:	e03ff615 	stw	zero,-40(fp)
   44b8c:	d0a6bc17 	ldw	r2,-25872(gp)
  
  if (alt_ticks_per_second ())
   44b90:	10003c26 	beq	r2,zero,44c84 <alt_alarm_start+0x118>
  {
    if (alarm)
   44b94:	e0bffc17 	ldw	r2,-16(fp)
   44b98:	10003826 	beq	r2,zero,44c7c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   44b9c:	e0bffc17 	ldw	r2,-16(fp)
   44ba0:	e0fffe17 	ldw	r3,-8(fp)
   44ba4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   44ba8:	e0bffc17 	ldw	r2,-16(fp)
   44bac:	e0ffff17 	ldw	r3,-4(fp)
   44bb0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44bb4:	0005303a 	rdctl	r2,status
   44bb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44bbc:	e0fff917 	ldw	r3,-28(fp)
   44bc0:	00bfff84 	movi	r2,-2
   44bc4:	1884703a 	and	r2,r3,r2
   44bc8:	1001703a 	wrctl	status,r2
  
  return context;
   44bcc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   44bd0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   44bd4:	d0a6bd17 	ldw	r2,-25868(gp)
      
      current_nticks = alt_nticks();
   44bd8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   44bdc:	e0fffd17 	ldw	r3,-12(fp)
   44be0:	e0bff617 	ldw	r2,-40(fp)
   44be4:	1885883a 	add	r2,r3,r2
   44be8:	10c00044 	addi	r3,r2,1
   44bec:	e0bffc17 	ldw	r2,-16(fp)
   44bf0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   44bf4:	e0bffc17 	ldw	r2,-16(fp)
   44bf8:	10c00217 	ldw	r3,8(r2)
   44bfc:	e0bff617 	ldw	r2,-40(fp)
   44c00:	1880042e 	bgeu	r3,r2,44c14 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   44c04:	e0bffc17 	ldw	r2,-16(fp)
   44c08:	00c00044 	movi	r3,1
   44c0c:	10c00405 	stb	r3,16(r2)
   44c10:	00000206 	br	44c1c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   44c14:	e0bffc17 	ldw	r2,-16(fp)
   44c18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44c1c:	e0bffc17 	ldw	r2,-16(fp)
   44c20:	d0e00c04 	addi	r3,gp,-32720
   44c24:	e0fffa15 	stw	r3,-24(fp)
   44c28:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44c2c:	e0bffb17 	ldw	r2,-20(fp)
   44c30:	e0fffa17 	ldw	r3,-24(fp)
   44c34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44c38:	e0bffa17 	ldw	r2,-24(fp)
   44c3c:	10c00017 	ldw	r3,0(r2)
   44c40:	e0bffb17 	ldw	r2,-20(fp)
   44c44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44c48:	e0bffa17 	ldw	r2,-24(fp)
   44c4c:	10800017 	ldw	r2,0(r2)
   44c50:	e0fffb17 	ldw	r3,-20(fp)
   44c54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44c58:	e0bffa17 	ldw	r2,-24(fp)
   44c5c:	e0fffb17 	ldw	r3,-20(fp)
   44c60:	10c00015 	stw	r3,0(r2)
   44c64:	e0bff817 	ldw	r2,-32(fp)
   44c68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c6c:	e0bff717 	ldw	r2,-36(fp)
   44c70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44c74:	0005883a 	mov	r2,zero
   44c78:	00000306 	br	44c88 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   44c7c:	00bffa84 	movi	r2,-22
   44c80:	00000106 	br	44c88 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   44c84:	00bfde84 	movi	r2,-134
  }
}
   44c88:	e037883a 	mov	sp,fp
   44c8c:	df000017 	ldw	fp,0(sp)
   44c90:	dec00104 	addi	sp,sp,4
   44c94:	f800283a 	ret

00044c98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44c98:	deffff04 	addi	sp,sp,-4
   44c9c:	df000015 	stw	fp,0(sp)
   44ca0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44ca4:	0001883a 	nop
   44ca8:	e037883a 	mov	sp,fp
   44cac:	df000017 	ldw	fp,0(sp)
   44cb0:	dec00104 	addi	sp,sp,4
   44cb4:	f800283a 	ret

00044cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44cb8:	defffe04 	addi	sp,sp,-8
   44cbc:	dfc00115 	stw	ra,4(sp)
   44cc0:	df000015 	stw	fp,0(sp)
   44cc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44cc8:	d0a00917 	ldw	r2,-32732(gp)
   44ccc:	10000326 	beq	r2,zero,44cdc <alt_get_errno+0x24>
   44cd0:	d0a00917 	ldw	r2,-32732(gp)
   44cd4:	103ee83a 	callr	r2
   44cd8:	00000106 	br	44ce0 <alt_get_errno+0x28>
   44cdc:	d0a6b704 	addi	r2,gp,-25892
}
   44ce0:	e037883a 	mov	sp,fp
   44ce4:	dfc00117 	ldw	ra,4(sp)
   44ce8:	df000017 	ldw	fp,0(sp)
   44cec:	dec00204 	addi	sp,sp,8
   44cf0:	f800283a 	ret

00044cf4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44cf4:	defffa04 	addi	sp,sp,-24
   44cf8:	dfc00515 	stw	ra,20(sp)
   44cfc:	df000415 	stw	fp,16(sp)
   44d00:	df000404 	addi	fp,sp,16
   44d04:	e13ffe15 	stw	r4,-8(fp)
   44d08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44d0c:	e0bffe17 	ldw	r2,-8(fp)
   44d10:	10000326 	beq	r2,zero,44d20 <alt_dev_llist_insert+0x2c>
   44d14:	e0bffe17 	ldw	r2,-8(fp)
   44d18:	10800217 	ldw	r2,8(r2)
   44d1c:	1000061e 	bne	r2,zero,44d38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44d20:	0044cb80 	call	44cb8 <alt_get_errno>
   44d24:	1007883a 	mov	r3,r2
   44d28:	00800584 	movi	r2,22
   44d2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44d30:	00bffa84 	movi	r2,-22
   44d34:	00001306 	br	44d84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44d38:	e0bffe17 	ldw	r2,-8(fp)
   44d3c:	e0ffff17 	ldw	r3,-4(fp)
   44d40:	e0fffc15 	stw	r3,-16(fp)
   44d44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44d48:	e0bffd17 	ldw	r2,-12(fp)
   44d4c:	e0fffc17 	ldw	r3,-16(fp)
   44d50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44d54:	e0bffc17 	ldw	r2,-16(fp)
   44d58:	10c00017 	ldw	r3,0(r2)
   44d5c:	e0bffd17 	ldw	r2,-12(fp)
   44d60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44d64:	e0bffc17 	ldw	r2,-16(fp)
   44d68:	10800017 	ldw	r2,0(r2)
   44d6c:	e0fffd17 	ldw	r3,-12(fp)
   44d70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44d74:	e0bffc17 	ldw	r2,-16(fp)
   44d78:	e0fffd17 	ldw	r3,-12(fp)
   44d7c:	10c00015 	stw	r3,0(r2)

  return 0;  
   44d80:	0005883a 	mov	r2,zero
}
   44d84:	e037883a 	mov	sp,fp
   44d88:	dfc00117 	ldw	ra,4(sp)
   44d8c:	df000017 	ldw	fp,0(sp)
   44d90:	dec00204 	addi	sp,sp,8
   44d94:	f800283a 	ret

00044d98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44d98:	defffd04 	addi	sp,sp,-12
   44d9c:	dfc00215 	stw	ra,8(sp)
   44da0:	df000115 	stw	fp,4(sp)
   44da4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44da8:	00800134 	movhi	r2,4
   44dac:	10975304 	addi	r2,r2,23884
   44db0:	e0bfff15 	stw	r2,-4(fp)
   44db4:	00000606 	br	44dd0 <_do_ctors+0x38>
        (*ctor) (); 
   44db8:	e0bfff17 	ldw	r2,-4(fp)
   44dbc:	10800017 	ldw	r2,0(r2)
   44dc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44dc4:	e0bfff17 	ldw	r2,-4(fp)
   44dc8:	10bfff04 	addi	r2,r2,-4
   44dcc:	e0bfff15 	stw	r2,-4(fp)
   44dd0:	e0ffff17 	ldw	r3,-4(fp)
   44dd4:	00800134 	movhi	r2,4
   44dd8:	10975404 	addi	r2,r2,23888
   44ddc:	18bff62e 	bgeu	r3,r2,44db8 <__alt_data_end+0xfffd2db8>
        (*ctor) (); 
}
   44de0:	0001883a 	nop
   44de4:	e037883a 	mov	sp,fp
   44de8:	dfc00117 	ldw	ra,4(sp)
   44dec:	df000017 	ldw	fp,0(sp)
   44df0:	dec00204 	addi	sp,sp,8
   44df4:	f800283a 	ret

00044df8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44df8:	defffd04 	addi	sp,sp,-12
   44dfc:	dfc00215 	stw	ra,8(sp)
   44e00:	df000115 	stw	fp,4(sp)
   44e04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44e08:	00800134 	movhi	r2,4
   44e0c:	10975304 	addi	r2,r2,23884
   44e10:	e0bfff15 	stw	r2,-4(fp)
   44e14:	00000606 	br	44e30 <_do_dtors+0x38>
        (*dtor) (); 
   44e18:	e0bfff17 	ldw	r2,-4(fp)
   44e1c:	10800017 	ldw	r2,0(r2)
   44e20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44e24:	e0bfff17 	ldw	r2,-4(fp)
   44e28:	10bfff04 	addi	r2,r2,-4
   44e2c:	e0bfff15 	stw	r2,-4(fp)
   44e30:	e0ffff17 	ldw	r3,-4(fp)
   44e34:	00800134 	movhi	r2,4
   44e38:	10975404 	addi	r2,r2,23888
   44e3c:	18bff62e 	bgeu	r3,r2,44e18 <__alt_data_end+0xfffd2e18>
        (*dtor) (); 
}
   44e40:	0001883a 	nop
   44e44:	e037883a 	mov	sp,fp
   44e48:	dfc00117 	ldw	ra,4(sp)
   44e4c:	df000017 	ldw	fp,0(sp)
   44e50:	dec00204 	addi	sp,sp,8
   44e54:	f800283a 	ret

00044e58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44e58:	defffa04 	addi	sp,sp,-24
   44e5c:	dfc00515 	stw	ra,20(sp)
   44e60:	df000415 	stw	fp,16(sp)
   44e64:	df000404 	addi	fp,sp,16
   44e68:	e13ffe15 	stw	r4,-8(fp)
   44e6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44e70:	e0bfff17 	ldw	r2,-4(fp)
   44e74:	10800017 	ldw	r2,0(r2)
   44e78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44e7c:	e13ffe17 	ldw	r4,-8(fp)
   44e80:	00404780 	call	40478 <strlen>
   44e84:	10800044 	addi	r2,r2,1
   44e88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44e8c:	00000d06 	br	44ec4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44e90:	e0bffc17 	ldw	r2,-16(fp)
   44e94:	10800217 	ldw	r2,8(r2)
   44e98:	e0fffd17 	ldw	r3,-12(fp)
   44e9c:	180d883a 	mov	r6,r3
   44ea0:	e17ffe17 	ldw	r5,-8(fp)
   44ea4:	1009883a 	mov	r4,r2
   44ea8:	0045a080 	call	45a08 <memcmp>
   44eac:	1000021e 	bne	r2,zero,44eb8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   44eb0:	e0bffc17 	ldw	r2,-16(fp)
   44eb4:	00000706 	br	44ed4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   44eb8:	e0bffc17 	ldw	r2,-16(fp)
   44ebc:	10800017 	ldw	r2,0(r2)
   44ec0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44ec4:	e0fffc17 	ldw	r3,-16(fp)
   44ec8:	e0bfff17 	ldw	r2,-4(fp)
   44ecc:	18bff01e 	bne	r3,r2,44e90 <__alt_data_end+0xfffd2e90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   44ed0:	0005883a 	mov	r2,zero
}
   44ed4:	e037883a 	mov	sp,fp
   44ed8:	dfc00117 	ldw	ra,4(sp)
   44edc:	df000017 	ldw	fp,0(sp)
   44ee0:	dec00204 	addi	sp,sp,8
   44ee4:	f800283a 	ret

00044ee8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44ee8:	deffff04 	addi	sp,sp,-4
   44eec:	df000015 	stw	fp,0(sp)
   44ef0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44ef4:	0001883a 	nop
   44ef8:	e037883a 	mov	sp,fp
   44efc:	df000017 	ldw	fp,0(sp)
   44f00:	dec00104 	addi	sp,sp,4
   44f04:	f800283a 	ret

00044f08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44f08:	defff904 	addi	sp,sp,-28
   44f0c:	dfc00615 	stw	ra,24(sp)
   44f10:	df000515 	stw	fp,20(sp)
   44f14:	df000504 	addi	fp,sp,20
   44f18:	e13ffc15 	stw	r4,-16(fp)
   44f1c:	e17ffd15 	stw	r5,-12(fp)
   44f20:	e1bffe15 	stw	r6,-8(fp)
   44f24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44f28:	e0800217 	ldw	r2,8(fp)
   44f2c:	d8800015 	stw	r2,0(sp)
   44f30:	e1ffff17 	ldw	r7,-4(fp)
   44f34:	e1bffe17 	ldw	r6,-8(fp)
   44f38:	e17ffd17 	ldw	r5,-12(fp)
   44f3c:	e13ffc17 	ldw	r4,-16(fp)
   44f40:	00450b80 	call	450b8 <alt_iic_isr_register>
}  
   44f44:	e037883a 	mov	sp,fp
   44f48:	dfc00117 	ldw	ra,4(sp)
   44f4c:	df000017 	ldw	fp,0(sp)
   44f50:	dec00204 	addi	sp,sp,8
   44f54:	f800283a 	ret

00044f58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44f58:	defff904 	addi	sp,sp,-28
   44f5c:	df000615 	stw	fp,24(sp)
   44f60:	df000604 	addi	fp,sp,24
   44f64:	e13ffe15 	stw	r4,-8(fp)
   44f68:	e17fff15 	stw	r5,-4(fp)
   44f6c:	e0bfff17 	ldw	r2,-4(fp)
   44f70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f74:	0005303a 	rdctl	r2,status
   44f78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f7c:	e0fffb17 	ldw	r3,-20(fp)
   44f80:	00bfff84 	movi	r2,-2
   44f84:	1884703a 	and	r2,r3,r2
   44f88:	1001703a 	wrctl	status,r2
  
  return context;
   44f8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44f90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   44f94:	00c00044 	movi	r3,1
   44f98:	e0bffa17 	ldw	r2,-24(fp)
   44f9c:	1884983a 	sll	r2,r3,r2
   44fa0:	1007883a 	mov	r3,r2
   44fa4:	d0a6bb17 	ldw	r2,-25876(gp)
   44fa8:	1884b03a 	or	r2,r3,r2
   44fac:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44fb0:	d0a6bb17 	ldw	r2,-25876(gp)
   44fb4:	100170fa 	wrctl	ienable,r2
   44fb8:	e0bffc17 	ldw	r2,-16(fp)
   44fbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44fc0:	e0bffd17 	ldw	r2,-12(fp)
   44fc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44fc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44fcc:	0001883a 	nop
}
   44fd0:	e037883a 	mov	sp,fp
   44fd4:	df000017 	ldw	fp,0(sp)
   44fd8:	dec00104 	addi	sp,sp,4
   44fdc:	f800283a 	ret

00044fe0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44fe0:	defff904 	addi	sp,sp,-28
   44fe4:	df000615 	stw	fp,24(sp)
   44fe8:	df000604 	addi	fp,sp,24
   44fec:	e13ffe15 	stw	r4,-8(fp)
   44ff0:	e17fff15 	stw	r5,-4(fp)
   44ff4:	e0bfff17 	ldw	r2,-4(fp)
   44ff8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44ffc:	0005303a 	rdctl	r2,status
   45000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45004:	e0fffb17 	ldw	r3,-20(fp)
   45008:	00bfff84 	movi	r2,-2
   4500c:	1884703a 	and	r2,r3,r2
   45010:	1001703a 	wrctl	status,r2
  
  return context;
   45014:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45018:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4501c:	00c00044 	movi	r3,1
   45020:	e0bffa17 	ldw	r2,-24(fp)
   45024:	1884983a 	sll	r2,r3,r2
   45028:	0084303a 	nor	r2,zero,r2
   4502c:	1007883a 	mov	r3,r2
   45030:	d0a6bb17 	ldw	r2,-25876(gp)
   45034:	1884703a 	and	r2,r3,r2
   45038:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4503c:	d0a6bb17 	ldw	r2,-25876(gp)
   45040:	100170fa 	wrctl	ienable,r2
   45044:	e0bffc17 	ldw	r2,-16(fp)
   45048:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4504c:	e0bffd17 	ldw	r2,-12(fp)
   45050:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45054:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   45058:	0001883a 	nop
}
   4505c:	e037883a 	mov	sp,fp
   45060:	df000017 	ldw	fp,0(sp)
   45064:	dec00104 	addi	sp,sp,4
   45068:	f800283a 	ret

0004506c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4506c:	defffc04 	addi	sp,sp,-16
   45070:	df000315 	stw	fp,12(sp)
   45074:	df000304 	addi	fp,sp,12
   45078:	e13ffe15 	stw	r4,-8(fp)
   4507c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   45080:	000530fa 	rdctl	r2,ienable
   45084:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   45088:	00c00044 	movi	r3,1
   4508c:	e0bfff17 	ldw	r2,-4(fp)
   45090:	1884983a 	sll	r2,r3,r2
   45094:	1007883a 	mov	r3,r2
   45098:	e0bffd17 	ldw	r2,-12(fp)
   4509c:	1884703a 	and	r2,r3,r2
   450a0:	1004c03a 	cmpne	r2,r2,zero
   450a4:	10803fcc 	andi	r2,r2,255
}
   450a8:	e037883a 	mov	sp,fp
   450ac:	df000017 	ldw	fp,0(sp)
   450b0:	dec00104 	addi	sp,sp,4
   450b4:	f800283a 	ret

000450b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   450b8:	defff504 	addi	sp,sp,-44
   450bc:	dfc00a15 	stw	ra,40(sp)
   450c0:	df000915 	stw	fp,36(sp)
   450c4:	df000904 	addi	fp,sp,36
   450c8:	e13ffc15 	stw	r4,-16(fp)
   450cc:	e17ffd15 	stw	r5,-12(fp)
   450d0:	e1bffe15 	stw	r6,-8(fp)
   450d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   450d8:	00bffa84 	movi	r2,-22
   450dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   450e0:	e0bffd17 	ldw	r2,-12(fp)
   450e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   450e8:	e0bff817 	ldw	r2,-32(fp)
   450ec:	10800808 	cmpgei	r2,r2,32
   450f0:	1000271e 	bne	r2,zero,45190 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   450f4:	0005303a 	rdctl	r2,status
   450f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   450fc:	e0fffb17 	ldw	r3,-20(fp)
   45100:	00bfff84 	movi	r2,-2
   45104:	1884703a 	and	r2,r3,r2
   45108:	1001703a 	wrctl	status,r2
  
  return context;
   4510c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45110:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   45114:	00800174 	movhi	r2,5
   45118:	10a4d604 	addi	r2,r2,-27816
   4511c:	e0fff817 	ldw	r3,-32(fp)
   45120:	180690fa 	slli	r3,r3,3
   45124:	10c5883a 	add	r2,r2,r3
   45128:	e0fffe17 	ldw	r3,-8(fp)
   4512c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45130:	00800174 	movhi	r2,5
   45134:	10a4d604 	addi	r2,r2,-27816
   45138:	e0fff817 	ldw	r3,-32(fp)
   4513c:	180690fa 	slli	r3,r3,3
   45140:	10c5883a 	add	r2,r2,r3
   45144:	10800104 	addi	r2,r2,4
   45148:	e0ffff17 	ldw	r3,-4(fp)
   4514c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45150:	e0bffe17 	ldw	r2,-8(fp)
   45154:	10000526 	beq	r2,zero,4516c <alt_iic_isr_register+0xb4>
   45158:	e0bff817 	ldw	r2,-32(fp)
   4515c:	100b883a 	mov	r5,r2
   45160:	e13ffc17 	ldw	r4,-16(fp)
   45164:	0044f580 	call	44f58 <alt_ic_irq_enable>
   45168:	00000406 	br	4517c <alt_iic_isr_register+0xc4>
   4516c:	e0bff817 	ldw	r2,-32(fp)
   45170:	100b883a 	mov	r5,r2
   45174:	e13ffc17 	ldw	r4,-16(fp)
   45178:	0044fe00 	call	44fe0 <alt_ic_irq_disable>
   4517c:	e0bff715 	stw	r2,-36(fp)
   45180:	e0bffa17 	ldw	r2,-24(fp)
   45184:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45188:	e0bff917 	ldw	r2,-28(fp)
   4518c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45190:	e0bff717 	ldw	r2,-36(fp)
}
   45194:	e037883a 	mov	sp,fp
   45198:	dfc00117 	ldw	ra,4(sp)
   4519c:	df000017 	ldw	fp,0(sp)
   451a0:	dec00204 	addi	sp,sp,8
   451a4:	f800283a 	ret

000451a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   451a8:	defff804 	addi	sp,sp,-32
   451ac:	dfc00715 	stw	ra,28(sp)
   451b0:	df000615 	stw	fp,24(sp)
   451b4:	dc000515 	stw	r16,20(sp)
   451b8:	df000604 	addi	fp,sp,24
   451bc:	e13ffb15 	stw	r4,-20(fp)
   451c0:	e17ffc15 	stw	r5,-16(fp)
   451c4:	e1bffd15 	stw	r6,-12(fp)
   451c8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   451cc:	e1bffe17 	ldw	r6,-8(fp)
   451d0:	e17ffd17 	ldw	r5,-12(fp)
   451d4:	e13ffc17 	ldw	r4,-16(fp)
   451d8:	00454300 	call	45430 <open>
   451dc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   451e0:	e0bffa17 	ldw	r2,-24(fp)
   451e4:	10002216 	blt	r2,zero,45270 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   451e8:	04000134 	movhi	r16,4
   451ec:	84198a04 	addi	r16,r16,26152
   451f0:	e0bffa17 	ldw	r2,-24(fp)
   451f4:	01400304 	movi	r5,12
   451f8:	1009883a 	mov	r4,r2
   451fc:	00431880 	call	43188 <__mulsi3>
   45200:	8085883a 	add	r2,r16,r2
   45204:	10c00017 	ldw	r3,0(r2)
   45208:	e0bffb17 	ldw	r2,-20(fp)
   4520c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45210:	04000134 	movhi	r16,4
   45214:	84198a04 	addi	r16,r16,26152
   45218:	e0bffa17 	ldw	r2,-24(fp)
   4521c:	01400304 	movi	r5,12
   45220:	1009883a 	mov	r4,r2
   45224:	00431880 	call	43188 <__mulsi3>
   45228:	8085883a 	add	r2,r16,r2
   4522c:	10800104 	addi	r2,r2,4
   45230:	10c00017 	ldw	r3,0(r2)
   45234:	e0bffb17 	ldw	r2,-20(fp)
   45238:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4523c:	04000134 	movhi	r16,4
   45240:	84198a04 	addi	r16,r16,26152
   45244:	e0bffa17 	ldw	r2,-24(fp)
   45248:	01400304 	movi	r5,12
   4524c:	1009883a 	mov	r4,r2
   45250:	00431880 	call	43188 <__mulsi3>
   45254:	8085883a 	add	r2,r16,r2
   45258:	10800204 	addi	r2,r2,8
   4525c:	10c00017 	ldw	r3,0(r2)
   45260:	e0bffb17 	ldw	r2,-20(fp)
   45264:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45268:	e13ffa17 	ldw	r4,-24(fp)
   4526c:	00438d40 	call	438d4 <alt_release_fd>
  }
} 
   45270:	0001883a 	nop
   45274:	e6ffff04 	addi	sp,fp,-4
   45278:	dfc00217 	ldw	ra,8(sp)
   4527c:	df000117 	ldw	fp,4(sp)
   45280:	dc000017 	ldw	r16,0(sp)
   45284:	dec00304 	addi	sp,sp,12
   45288:	f800283a 	ret

0004528c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4528c:	defffb04 	addi	sp,sp,-20
   45290:	dfc00415 	stw	ra,16(sp)
   45294:	df000315 	stw	fp,12(sp)
   45298:	df000304 	addi	fp,sp,12
   4529c:	e13ffd15 	stw	r4,-12(fp)
   452a0:	e17ffe15 	stw	r5,-8(fp)
   452a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   452a8:	01c07fc4 	movi	r7,511
   452ac:	01800044 	movi	r6,1
   452b0:	e17ffd17 	ldw	r5,-12(fp)
   452b4:	01000134 	movhi	r4,4
   452b8:	21198d04 	addi	r4,r4,26164
   452bc:	00451a80 	call	451a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   452c0:	01c07fc4 	movi	r7,511
   452c4:	000d883a 	mov	r6,zero
   452c8:	e17ffe17 	ldw	r5,-8(fp)
   452cc:	01000134 	movhi	r4,4
   452d0:	21198a04 	addi	r4,r4,26152
   452d4:	00451a80 	call	451a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   452d8:	01c07fc4 	movi	r7,511
   452dc:	01800044 	movi	r6,1
   452e0:	e17fff17 	ldw	r5,-4(fp)
   452e4:	01000134 	movhi	r4,4
   452e8:	21199004 	addi	r4,r4,26176
   452ec:	00451a80 	call	451a8 <alt_open_fd>
}  
   452f0:	0001883a 	nop
   452f4:	e037883a 	mov	sp,fp
   452f8:	dfc00117 	ldw	ra,4(sp)
   452fc:	df000017 	ldw	fp,0(sp)
   45300:	dec00204 	addi	sp,sp,8
   45304:	f800283a 	ret

00045308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45308:	defffe04 	addi	sp,sp,-8
   4530c:	dfc00115 	stw	ra,4(sp)
   45310:	df000015 	stw	fp,0(sp)
   45314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45318:	d0a00917 	ldw	r2,-32732(gp)
   4531c:	10000326 	beq	r2,zero,4532c <alt_get_errno+0x24>
   45320:	d0a00917 	ldw	r2,-32732(gp)
   45324:	103ee83a 	callr	r2
   45328:	00000106 	br	45330 <alt_get_errno+0x28>
   4532c:	d0a6b704 	addi	r2,gp,-25892
}
   45330:	e037883a 	mov	sp,fp
   45334:	dfc00117 	ldw	ra,4(sp)
   45338:	df000017 	ldw	fp,0(sp)
   4533c:	dec00204 	addi	sp,sp,8
   45340:	f800283a 	ret

00045344 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45344:	defffb04 	addi	sp,sp,-20
   45348:	dfc00415 	stw	ra,16(sp)
   4534c:	df000315 	stw	fp,12(sp)
   45350:	dc000215 	stw	r16,8(sp)
   45354:	df000304 	addi	fp,sp,12
   45358:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4535c:	e0bffe17 	ldw	r2,-8(fp)
   45360:	10800217 	ldw	r2,8(r2)
   45364:	10d00034 	orhi	r3,r2,16384
   45368:	e0bffe17 	ldw	r2,-8(fp)
   4536c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45370:	e03ffd15 	stw	zero,-12(fp)
   45374:	00002306 	br	45404 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45378:	04000134 	movhi	r16,4
   4537c:	84198a04 	addi	r16,r16,26152
   45380:	e0bffd17 	ldw	r2,-12(fp)
   45384:	01400304 	movi	r5,12
   45388:	1009883a 	mov	r4,r2
   4538c:	00431880 	call	43188 <__mulsi3>
   45390:	8085883a 	add	r2,r16,r2
   45394:	10c00017 	ldw	r3,0(r2)
   45398:	e0bffe17 	ldw	r2,-8(fp)
   4539c:	10800017 	ldw	r2,0(r2)
   453a0:	1880151e 	bne	r3,r2,453f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   453a4:	04000134 	movhi	r16,4
   453a8:	84198a04 	addi	r16,r16,26152
   453ac:	e0bffd17 	ldw	r2,-12(fp)
   453b0:	01400304 	movi	r5,12
   453b4:	1009883a 	mov	r4,r2
   453b8:	00431880 	call	43188 <__mulsi3>
   453bc:	8085883a 	add	r2,r16,r2
   453c0:	10800204 	addi	r2,r2,8
   453c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   453c8:	10000b0e 	bge	r2,zero,453f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   453cc:	01400304 	movi	r5,12
   453d0:	e13ffd17 	ldw	r4,-12(fp)
   453d4:	00431880 	call	43188 <__mulsi3>
   453d8:	1007883a 	mov	r3,r2
   453dc:	00800134 	movhi	r2,4
   453e0:	10998a04 	addi	r2,r2,26152
   453e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   453e8:	e0bffe17 	ldw	r2,-8(fp)
   453ec:	18800226 	beq	r3,r2,453f8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   453f0:	00bffcc4 	movi	r2,-13
   453f4:	00000806 	br	45418 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   453f8:	e0bffd17 	ldw	r2,-12(fp)
   453fc:	10800044 	addi	r2,r2,1
   45400:	e0bffd15 	stw	r2,-12(fp)
   45404:	d0a00817 	ldw	r2,-32736(gp)
   45408:	1007883a 	mov	r3,r2
   4540c:	e0bffd17 	ldw	r2,-12(fp)
   45410:	18bfd92e 	bgeu	r3,r2,45378 <__alt_data_end+0xfffd3378>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45414:	0005883a 	mov	r2,zero
}
   45418:	e6ffff04 	addi	sp,fp,-4
   4541c:	dfc00217 	ldw	ra,8(sp)
   45420:	df000117 	ldw	fp,4(sp)
   45424:	dc000017 	ldw	r16,0(sp)
   45428:	dec00304 	addi	sp,sp,12
   4542c:	f800283a 	ret

00045430 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45430:	defff604 	addi	sp,sp,-40
   45434:	dfc00915 	stw	ra,36(sp)
   45438:	df000815 	stw	fp,32(sp)
   4543c:	df000804 	addi	fp,sp,32
   45440:	e13ffd15 	stw	r4,-12(fp)
   45444:	e17ffe15 	stw	r5,-8(fp)
   45448:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4544c:	00bfffc4 	movi	r2,-1
   45450:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45454:	00bffb44 	movi	r2,-19
   45458:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4545c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45460:	d1600604 	addi	r5,gp,-32744
   45464:	e13ffd17 	ldw	r4,-12(fp)
   45468:	0044e580 	call	44e58 <alt_find_dev>
   4546c:	e0bff815 	stw	r2,-32(fp)
   45470:	e0bff817 	ldw	r2,-32(fp)
   45474:	1000051e 	bne	r2,zero,4548c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45478:	e13ffd17 	ldw	r4,-12(fp)
   4547c:	00457540 	call	45754 <alt_find_file>
   45480:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45484:	00800044 	movi	r2,1
   45488:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4548c:	e0bff817 	ldw	r2,-32(fp)
   45490:	10002b26 	beq	r2,zero,45540 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45494:	e13ff817 	ldw	r4,-32(fp)
   45498:	004585c0 	call	4585c <alt_get_fd>
   4549c:	e0bff915 	stw	r2,-28(fp)
   454a0:	e0bff917 	ldw	r2,-28(fp)
   454a4:	1000030e 	bge	r2,zero,454b4 <open+0x84>
    {
      status = index;
   454a8:	e0bff917 	ldw	r2,-28(fp)
   454ac:	e0bffa15 	stw	r2,-24(fp)
   454b0:	00002506 	br	45548 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   454b4:	01400304 	movi	r5,12
   454b8:	e13ff917 	ldw	r4,-28(fp)
   454bc:	00431880 	call	43188 <__mulsi3>
   454c0:	1007883a 	mov	r3,r2
   454c4:	00800134 	movhi	r2,4
   454c8:	10998a04 	addi	r2,r2,26152
   454cc:	1885883a 	add	r2,r3,r2
   454d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   454d4:	e0fffe17 	ldw	r3,-8(fp)
   454d8:	00900034 	movhi	r2,16384
   454dc:	10bfffc4 	addi	r2,r2,-1
   454e0:	1886703a 	and	r3,r3,r2
   454e4:	e0bffc17 	ldw	r2,-16(fp)
   454e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   454ec:	e0bffb17 	ldw	r2,-20(fp)
   454f0:	1000051e 	bne	r2,zero,45508 <open+0xd8>
   454f4:	e13ffc17 	ldw	r4,-16(fp)
   454f8:	00453440 	call	45344 <alt_file_locked>
   454fc:	e0bffa15 	stw	r2,-24(fp)
   45500:	e0bffa17 	ldw	r2,-24(fp)
   45504:	10001016 	blt	r2,zero,45548 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45508:	e0bff817 	ldw	r2,-32(fp)
   4550c:	10800317 	ldw	r2,12(r2)
   45510:	10000826 	beq	r2,zero,45534 <open+0x104>
   45514:	e0bff817 	ldw	r2,-32(fp)
   45518:	10800317 	ldw	r2,12(r2)
   4551c:	e1ffff17 	ldw	r7,-4(fp)
   45520:	e1bffe17 	ldw	r6,-8(fp)
   45524:	e17ffd17 	ldw	r5,-12(fp)
   45528:	e13ffc17 	ldw	r4,-16(fp)
   4552c:	103ee83a 	callr	r2
   45530:	00000106 	br	45538 <open+0x108>
   45534:	0005883a 	mov	r2,zero
   45538:	e0bffa15 	stw	r2,-24(fp)
   4553c:	00000206 	br	45548 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45540:	00bffb44 	movi	r2,-19
   45544:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45548:	e0bffa17 	ldw	r2,-24(fp)
   4554c:	1000090e 	bge	r2,zero,45574 <open+0x144>
  {
    alt_release_fd (index);  
   45550:	e13ff917 	ldw	r4,-28(fp)
   45554:	00438d40 	call	438d4 <alt_release_fd>
    ALT_ERRNO = -status;
   45558:	00453080 	call	45308 <alt_get_errno>
   4555c:	1007883a 	mov	r3,r2
   45560:	e0bffa17 	ldw	r2,-24(fp)
   45564:	0085c83a 	sub	r2,zero,r2
   45568:	18800015 	stw	r2,0(r3)
    return -1;
   4556c:	00bfffc4 	movi	r2,-1
   45570:	00000106 	br	45578 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   45574:	e0bff917 	ldw	r2,-28(fp)
}
   45578:	e037883a 	mov	sp,fp
   4557c:	dfc00117 	ldw	ra,4(sp)
   45580:	df000017 	ldw	fp,0(sp)
   45584:	dec00204 	addi	sp,sp,8
   45588:	f800283a 	ret

0004558c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4558c:	defffa04 	addi	sp,sp,-24
   45590:	df000515 	stw	fp,20(sp)
   45594:	df000504 	addi	fp,sp,20
   45598:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4559c:	0005303a 	rdctl	r2,status
   455a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   455a4:	e0fffc17 	ldw	r3,-16(fp)
   455a8:	00bfff84 	movi	r2,-2
   455ac:	1884703a 	and	r2,r3,r2
   455b0:	1001703a 	wrctl	status,r2
  
  return context;
   455b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   455b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   455bc:	e0bfff17 	ldw	r2,-4(fp)
   455c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   455c4:	e0bffd17 	ldw	r2,-12(fp)
   455c8:	10800017 	ldw	r2,0(r2)
   455cc:	e0fffd17 	ldw	r3,-12(fp)
   455d0:	18c00117 	ldw	r3,4(r3)
   455d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   455d8:	e0bffd17 	ldw	r2,-12(fp)
   455dc:	10800117 	ldw	r2,4(r2)
   455e0:	e0fffd17 	ldw	r3,-12(fp)
   455e4:	18c00017 	ldw	r3,0(r3)
   455e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   455ec:	e0bffd17 	ldw	r2,-12(fp)
   455f0:	e0fffd17 	ldw	r3,-12(fp)
   455f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   455f8:	e0bffd17 	ldw	r2,-12(fp)
   455fc:	e0fffd17 	ldw	r3,-12(fp)
   45600:	10c00015 	stw	r3,0(r2)
   45604:	e0bffb17 	ldw	r2,-20(fp)
   45608:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4560c:	e0bffe17 	ldw	r2,-8(fp)
   45610:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45614:	0001883a 	nop
   45618:	e037883a 	mov	sp,fp
   4561c:	df000017 	ldw	fp,0(sp)
   45620:	dec00104 	addi	sp,sp,4
   45624:	f800283a 	ret

00045628 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45628:	defffb04 	addi	sp,sp,-20
   4562c:	dfc00415 	stw	ra,16(sp)
   45630:	df000315 	stw	fp,12(sp)
   45634:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45638:	d0a00c17 	ldw	r2,-32720(gp)
   4563c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45640:	d0a6bd17 	ldw	r2,-25868(gp)
   45644:	10800044 	addi	r2,r2,1
   45648:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4564c:	00002e06 	br	45708 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45650:	e0bffd17 	ldw	r2,-12(fp)
   45654:	10800017 	ldw	r2,0(r2)
   45658:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4565c:	e0bffd17 	ldw	r2,-12(fp)
   45660:	10800403 	ldbu	r2,16(r2)
   45664:	10803fcc 	andi	r2,r2,255
   45668:	10000426 	beq	r2,zero,4567c <alt_tick+0x54>
   4566c:	d0a6bd17 	ldw	r2,-25868(gp)
   45670:	1000021e 	bne	r2,zero,4567c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   45674:	e0bffd17 	ldw	r2,-12(fp)
   45678:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4567c:	e0bffd17 	ldw	r2,-12(fp)
   45680:	10800217 	ldw	r2,8(r2)
   45684:	d0e6bd17 	ldw	r3,-25868(gp)
   45688:	18801d36 	bltu	r3,r2,45700 <alt_tick+0xd8>
   4568c:	e0bffd17 	ldw	r2,-12(fp)
   45690:	10800403 	ldbu	r2,16(r2)
   45694:	10803fcc 	andi	r2,r2,255
   45698:	1000191e 	bne	r2,zero,45700 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4569c:	e0bffd17 	ldw	r2,-12(fp)
   456a0:	10800317 	ldw	r2,12(r2)
   456a4:	e0fffd17 	ldw	r3,-12(fp)
   456a8:	18c00517 	ldw	r3,20(r3)
   456ac:	1809883a 	mov	r4,r3
   456b0:	103ee83a 	callr	r2
   456b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   456b8:	e0bfff17 	ldw	r2,-4(fp)
   456bc:	1000031e 	bne	r2,zero,456cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   456c0:	e13ffd17 	ldw	r4,-12(fp)
   456c4:	004558c0 	call	4558c <alt_alarm_stop>
   456c8:	00000d06 	br	45700 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   456cc:	e0bffd17 	ldw	r2,-12(fp)
   456d0:	10c00217 	ldw	r3,8(r2)
   456d4:	e0bfff17 	ldw	r2,-4(fp)
   456d8:	1887883a 	add	r3,r3,r2
   456dc:	e0bffd17 	ldw	r2,-12(fp)
   456e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   456e4:	e0bffd17 	ldw	r2,-12(fp)
   456e8:	10c00217 	ldw	r3,8(r2)
   456ec:	d0a6bd17 	ldw	r2,-25868(gp)
   456f0:	1880032e 	bgeu	r3,r2,45700 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   456f4:	e0bffd17 	ldw	r2,-12(fp)
   456f8:	00c00044 	movi	r3,1
   456fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   45700:	e0bffe17 	ldw	r2,-8(fp)
   45704:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45708:	e0fffd17 	ldw	r3,-12(fp)
   4570c:	d0a00c04 	addi	r2,gp,-32720
   45710:	18bfcf1e 	bne	r3,r2,45650 <__alt_data_end+0xfffd3650>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45714:	0001883a 	nop
}
   45718:	0001883a 	nop
   4571c:	e037883a 	mov	sp,fp
   45720:	dfc00117 	ldw	ra,4(sp)
   45724:	df000017 	ldw	fp,0(sp)
   45728:	dec00204 	addi	sp,sp,8
   4572c:	f800283a 	ret

00045730 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45730:	deffff04 	addi	sp,sp,-4
   45734:	df000015 	stw	fp,0(sp)
   45738:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4573c:	000170fa 	wrctl	ienable,zero
}
   45740:	0001883a 	nop
   45744:	e037883a 	mov	sp,fp
   45748:	df000017 	ldw	fp,0(sp)
   4574c:	dec00104 	addi	sp,sp,4
   45750:	f800283a 	ret

00045754 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   45754:	defffb04 	addi	sp,sp,-20
   45758:	dfc00415 	stw	ra,16(sp)
   4575c:	df000315 	stw	fp,12(sp)
   45760:	df000304 	addi	fp,sp,12
   45764:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45768:	d0a00417 	ldw	r2,-32752(gp)
   4576c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45770:	00003106 	br	45838 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   45774:	e0bffd17 	ldw	r2,-12(fp)
   45778:	10800217 	ldw	r2,8(r2)
   4577c:	1009883a 	mov	r4,r2
   45780:	00404780 	call	40478 <strlen>
   45784:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45788:	e0bffd17 	ldw	r2,-12(fp)
   4578c:	10c00217 	ldw	r3,8(r2)
   45790:	e0bffe17 	ldw	r2,-8(fp)
   45794:	10bfffc4 	addi	r2,r2,-1
   45798:	1885883a 	add	r2,r3,r2
   4579c:	10800003 	ldbu	r2,0(r2)
   457a0:	10803fcc 	andi	r2,r2,255
   457a4:	1080201c 	xori	r2,r2,128
   457a8:	10bfe004 	addi	r2,r2,-128
   457ac:	10800bd8 	cmpnei	r2,r2,47
   457b0:	1000031e 	bne	r2,zero,457c0 <alt_find_file+0x6c>
    {
      len -= 1;
   457b4:	e0bffe17 	ldw	r2,-8(fp)
   457b8:	10bfffc4 	addi	r2,r2,-1
   457bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   457c0:	e0bffe17 	ldw	r2,-8(fp)
   457c4:	e0ffff17 	ldw	r3,-4(fp)
   457c8:	1885883a 	add	r2,r3,r2
   457cc:	10800003 	ldbu	r2,0(r2)
   457d0:	10803fcc 	andi	r2,r2,255
   457d4:	1080201c 	xori	r2,r2,128
   457d8:	10bfe004 	addi	r2,r2,-128
   457dc:	10800be0 	cmpeqi	r2,r2,47
   457e0:	1000081e 	bne	r2,zero,45804 <alt_find_file+0xb0>
   457e4:	e0bffe17 	ldw	r2,-8(fp)
   457e8:	e0ffff17 	ldw	r3,-4(fp)
   457ec:	1885883a 	add	r2,r3,r2
   457f0:	10800003 	ldbu	r2,0(r2)
   457f4:	10803fcc 	andi	r2,r2,255
   457f8:	1080201c 	xori	r2,r2,128
   457fc:	10bfe004 	addi	r2,r2,-128
   45800:	10000a1e 	bne	r2,zero,4582c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   45804:	e0bffd17 	ldw	r2,-12(fp)
   45808:	10800217 	ldw	r2,8(r2)
   4580c:	e0fffe17 	ldw	r3,-8(fp)
   45810:	180d883a 	mov	r6,r3
   45814:	e17fff17 	ldw	r5,-4(fp)
   45818:	1009883a 	mov	r4,r2
   4581c:	0045a080 	call	45a08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45820:	1000021e 	bne	r2,zero,4582c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45824:	e0bffd17 	ldw	r2,-12(fp)
   45828:	00000706 	br	45848 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4582c:	e0bffd17 	ldw	r2,-12(fp)
   45830:	10800017 	ldw	r2,0(r2)
   45834:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45838:	e0fffd17 	ldw	r3,-12(fp)
   4583c:	d0a00404 	addi	r2,gp,-32752
   45840:	18bfcc1e 	bne	r3,r2,45774 <__alt_data_end+0xfffd3774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45844:	0005883a 	mov	r2,zero
}
   45848:	e037883a 	mov	sp,fp
   4584c:	dfc00117 	ldw	ra,4(sp)
   45850:	df000017 	ldw	fp,0(sp)
   45854:	dec00204 	addi	sp,sp,8
   45858:	f800283a 	ret

0004585c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4585c:	defffa04 	addi	sp,sp,-24
   45860:	dfc00515 	stw	ra,20(sp)
   45864:	df000415 	stw	fp,16(sp)
   45868:	dc000315 	stw	r16,12(sp)
   4586c:	df000404 	addi	fp,sp,16
   45870:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   45874:	00bffa04 	movi	r2,-24
   45878:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4587c:	e03ffc15 	stw	zero,-16(fp)
   45880:	00001d06 	br	458f8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   45884:	04000134 	movhi	r16,4
   45888:	84198a04 	addi	r16,r16,26152
   4588c:	e0bffc17 	ldw	r2,-16(fp)
   45890:	01400304 	movi	r5,12
   45894:	1009883a 	mov	r4,r2
   45898:	00431880 	call	43188 <__mulsi3>
   4589c:	8085883a 	add	r2,r16,r2
   458a0:	10800017 	ldw	r2,0(r2)
   458a4:	1000111e 	bne	r2,zero,458ec <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   458a8:	04000134 	movhi	r16,4
   458ac:	84198a04 	addi	r16,r16,26152
   458b0:	e0bffc17 	ldw	r2,-16(fp)
   458b4:	01400304 	movi	r5,12
   458b8:	1009883a 	mov	r4,r2
   458bc:	00431880 	call	43188 <__mulsi3>
   458c0:	8085883a 	add	r2,r16,r2
   458c4:	e0fffe17 	ldw	r3,-8(fp)
   458c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   458cc:	d0e00817 	ldw	r3,-32736(gp)
   458d0:	e0bffc17 	ldw	r2,-16(fp)
   458d4:	1880020e 	bge	r3,r2,458e0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   458d8:	e0bffc17 	ldw	r2,-16(fp)
   458dc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   458e0:	e0bffc17 	ldw	r2,-16(fp)
   458e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   458e8:	00000606 	br	45904 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   458ec:	e0bffc17 	ldw	r2,-16(fp)
   458f0:	10800044 	addi	r2,r2,1
   458f4:	e0bffc15 	stw	r2,-16(fp)
   458f8:	e0bffc17 	ldw	r2,-16(fp)
   458fc:	10800810 	cmplti	r2,r2,32
   45900:	103fe01e 	bne	r2,zero,45884 <__alt_data_end+0xfffd3884>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45904:	e0bffd17 	ldw	r2,-12(fp)
}
   45908:	e6ffff04 	addi	sp,fp,-4
   4590c:	dfc00217 	ldw	ra,8(sp)
   45910:	df000117 	ldw	fp,4(sp)
   45914:	dc000017 	ldw	r16,0(sp)
   45918:	dec00304 	addi	sp,sp,12
   4591c:	f800283a 	ret

00045920 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   45920:	defffe04 	addi	sp,sp,-8
   45924:	df000115 	stw	fp,4(sp)
   45928:	df000104 	addi	fp,sp,4
   4592c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   45930:	e0bfff17 	ldw	r2,-4(fp)
   45934:	10bffe84 	addi	r2,r2,-6
   45938:	10c00428 	cmpgeui	r3,r2,16
   4593c:	18001a1e 	bne	r3,zero,459a8 <alt_exception_cause_generated_bad_addr+0x88>
   45940:	100690ba 	slli	r3,r2,2
   45944:	00800134 	movhi	r2,4
   45948:	10965604 	addi	r2,r2,22872
   4594c:	1885883a 	add	r2,r3,r2
   45950:	10800017 	ldw	r2,0(r2)
   45954:	1000683a 	jmp	r2
   45958:	00045998 	cmpnei	zero,zero,4454
   4595c:	00045998 	cmpnei	zero,zero,4454
   45960:	000459a8 	cmpgeui	zero,zero,4454
   45964:	000459a8 	cmpgeui	zero,zero,4454
   45968:	000459a8 	cmpgeui	zero,zero,4454
   4596c:	00045998 	cmpnei	zero,zero,4454
   45970:	000459a0 	cmpeqi	zero,zero,4454
   45974:	000459a8 	cmpgeui	zero,zero,4454
   45978:	00045998 	cmpnei	zero,zero,4454
   4597c:	00045998 	cmpnei	zero,zero,4454
   45980:	000459a8 	cmpgeui	zero,zero,4454
   45984:	00045998 	cmpnei	zero,zero,4454
   45988:	000459a0 	cmpeqi	zero,zero,4454
   4598c:	000459a8 	cmpgeui	zero,zero,4454
   45990:	000459a8 	cmpgeui	zero,zero,4454
   45994:	00045998 	cmpnei	zero,zero,4454
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   45998:	00800044 	movi	r2,1
   4599c:	00000306 	br	459ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   459a0:	0005883a 	mov	r2,zero
   459a4:	00000106 	br	459ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   459a8:	0005883a 	mov	r2,zero
  }
}
   459ac:	e037883a 	mov	sp,fp
   459b0:	df000017 	ldw	fp,0(sp)
   459b4:	dec00104 	addi	sp,sp,4
   459b8:	f800283a 	ret

000459bc <atexit>:
   459bc:	200b883a 	mov	r5,r4
   459c0:	000f883a 	mov	r7,zero
   459c4:	000d883a 	mov	r6,zero
   459c8:	0009883a 	mov	r4,zero
   459cc:	0045a841 	jmpi	45a84 <__register_exitproc>

000459d0 <exit>:
   459d0:	defffe04 	addi	sp,sp,-8
   459d4:	000b883a 	mov	r5,zero
   459d8:	dc000015 	stw	r16,0(sp)
   459dc:	dfc00115 	stw	ra,4(sp)
   459e0:	2021883a 	mov	r16,r4
   459e4:	0045b9c0 	call	45b9c <__call_exitprocs>
   459e8:	00800134 	movhi	r2,4
   459ec:	109e0d04 	addi	r2,r2,30772
   459f0:	11000017 	ldw	r4,0(r2)
   459f4:	20800f17 	ldw	r2,60(r4)
   459f8:	10000126 	beq	r2,zero,45a00 <exit+0x30>
   459fc:	103ee83a 	callr	r2
   45a00:	8009883a 	mov	r4,r16
   45a04:	0045d1c0 	call	45d1c <_exit>

00045a08 <memcmp>:
   45a08:	01c000c4 	movi	r7,3
   45a0c:	3980192e 	bgeu	r7,r6,45a74 <memcmp+0x6c>
   45a10:	2144b03a 	or	r2,r4,r5
   45a14:	11c4703a 	and	r2,r2,r7
   45a18:	10000f26 	beq	r2,zero,45a58 <memcmp+0x50>
   45a1c:	20800003 	ldbu	r2,0(r4)
   45a20:	28c00003 	ldbu	r3,0(r5)
   45a24:	10c0151e 	bne	r2,r3,45a7c <memcmp+0x74>
   45a28:	31bfff84 	addi	r6,r6,-2
   45a2c:	01ffffc4 	movi	r7,-1
   45a30:	00000406 	br	45a44 <memcmp+0x3c>
   45a34:	20800003 	ldbu	r2,0(r4)
   45a38:	28c00003 	ldbu	r3,0(r5)
   45a3c:	31bfffc4 	addi	r6,r6,-1
   45a40:	10c00e1e 	bne	r2,r3,45a7c <memcmp+0x74>
   45a44:	21000044 	addi	r4,r4,1
   45a48:	29400044 	addi	r5,r5,1
   45a4c:	31fff91e 	bne	r6,r7,45a34 <__alt_data_end+0xfffd3a34>
   45a50:	0005883a 	mov	r2,zero
   45a54:	f800283a 	ret
   45a58:	20c00017 	ldw	r3,0(r4)
   45a5c:	28800017 	ldw	r2,0(r5)
   45a60:	18bfee1e 	bne	r3,r2,45a1c <__alt_data_end+0xfffd3a1c>
   45a64:	31bfff04 	addi	r6,r6,-4
   45a68:	21000104 	addi	r4,r4,4
   45a6c:	29400104 	addi	r5,r5,4
   45a70:	39bff936 	bltu	r7,r6,45a58 <__alt_data_end+0xfffd3a58>
   45a74:	303fe91e 	bne	r6,zero,45a1c <__alt_data_end+0xfffd3a1c>
   45a78:	003ff506 	br	45a50 <__alt_data_end+0xfffd3a50>
   45a7c:	10c5c83a 	sub	r2,r2,r3
   45a80:	f800283a 	ret

00045a84 <__register_exitproc>:
   45a84:	defffa04 	addi	sp,sp,-24
   45a88:	dc000315 	stw	r16,12(sp)
   45a8c:	04000134 	movhi	r16,4
   45a90:	841e0d04 	addi	r16,r16,30772
   45a94:	80c00017 	ldw	r3,0(r16)
   45a98:	dc400415 	stw	r17,16(sp)
   45a9c:	dfc00515 	stw	ra,20(sp)
   45aa0:	18805217 	ldw	r2,328(r3)
   45aa4:	2023883a 	mov	r17,r4
   45aa8:	10003726 	beq	r2,zero,45b88 <__register_exitproc+0x104>
   45aac:	10c00117 	ldw	r3,4(r2)
   45ab0:	010007c4 	movi	r4,31
   45ab4:	20c00e16 	blt	r4,r3,45af0 <__register_exitproc+0x6c>
   45ab8:	1a000044 	addi	r8,r3,1
   45abc:	8800221e 	bne	r17,zero,45b48 <__register_exitproc+0xc4>
   45ac0:	18c00084 	addi	r3,r3,2
   45ac4:	18c7883a 	add	r3,r3,r3
   45ac8:	18c7883a 	add	r3,r3,r3
   45acc:	12000115 	stw	r8,4(r2)
   45ad0:	10c7883a 	add	r3,r2,r3
   45ad4:	19400015 	stw	r5,0(r3)
   45ad8:	0005883a 	mov	r2,zero
   45adc:	dfc00517 	ldw	ra,20(sp)
   45ae0:	dc400417 	ldw	r17,16(sp)
   45ae4:	dc000317 	ldw	r16,12(sp)
   45ae8:	dec00604 	addi	sp,sp,24
   45aec:	f800283a 	ret
   45af0:	00800034 	movhi	r2,0
   45af4:	10800004 	addi	r2,r2,0
   45af8:	10002626 	beq	r2,zero,45b94 <__register_exitproc+0x110>
   45afc:	01006404 	movi	r4,400
   45b00:	d9400015 	stw	r5,0(sp)
   45b04:	d9800115 	stw	r6,4(sp)
   45b08:	d9c00215 	stw	r7,8(sp)
   45b0c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b10:	d9400017 	ldw	r5,0(sp)
   45b14:	d9800117 	ldw	r6,4(sp)
   45b18:	d9c00217 	ldw	r7,8(sp)
   45b1c:	10001d26 	beq	r2,zero,45b94 <__register_exitproc+0x110>
   45b20:	81000017 	ldw	r4,0(r16)
   45b24:	10000115 	stw	zero,4(r2)
   45b28:	02000044 	movi	r8,1
   45b2c:	22405217 	ldw	r9,328(r4)
   45b30:	0007883a 	mov	r3,zero
   45b34:	12400015 	stw	r9,0(r2)
   45b38:	20805215 	stw	r2,328(r4)
   45b3c:	10006215 	stw	zero,392(r2)
   45b40:	10006315 	stw	zero,396(r2)
   45b44:	883fde26 	beq	r17,zero,45ac0 <__alt_data_end+0xfffd3ac0>
   45b48:	18c9883a 	add	r4,r3,r3
   45b4c:	2109883a 	add	r4,r4,r4
   45b50:	1109883a 	add	r4,r2,r4
   45b54:	21802215 	stw	r6,136(r4)
   45b58:	01800044 	movi	r6,1
   45b5c:	12406217 	ldw	r9,392(r2)
   45b60:	30cc983a 	sll	r6,r6,r3
   45b64:	4992b03a 	or	r9,r9,r6
   45b68:	12406215 	stw	r9,392(r2)
   45b6c:	21c04215 	stw	r7,264(r4)
   45b70:	01000084 	movi	r4,2
   45b74:	893fd21e 	bne	r17,r4,45ac0 <__alt_data_end+0xfffd3ac0>
   45b78:	11006317 	ldw	r4,396(r2)
   45b7c:	218cb03a 	or	r6,r4,r6
   45b80:	11806315 	stw	r6,396(r2)
   45b84:	003fce06 	br	45ac0 <__alt_data_end+0xfffd3ac0>
   45b88:	18805304 	addi	r2,r3,332
   45b8c:	18805215 	stw	r2,328(r3)
   45b90:	003fc606 	br	45aac <__alt_data_end+0xfffd3aac>
   45b94:	00bfffc4 	movi	r2,-1
   45b98:	003fd006 	br	45adc <__alt_data_end+0xfffd3adc>

00045b9c <__call_exitprocs>:
   45b9c:	defff504 	addi	sp,sp,-44
   45ba0:	df000915 	stw	fp,36(sp)
   45ba4:	dd400615 	stw	r21,24(sp)
   45ba8:	dc800315 	stw	r18,12(sp)
   45bac:	dfc00a15 	stw	ra,40(sp)
   45bb0:	ddc00815 	stw	r23,32(sp)
   45bb4:	dd800715 	stw	r22,28(sp)
   45bb8:	dd000515 	stw	r20,20(sp)
   45bbc:	dcc00415 	stw	r19,16(sp)
   45bc0:	dc400215 	stw	r17,8(sp)
   45bc4:	dc000115 	stw	r16,4(sp)
   45bc8:	d9000015 	stw	r4,0(sp)
   45bcc:	2839883a 	mov	fp,r5
   45bd0:	04800044 	movi	r18,1
   45bd4:	057fffc4 	movi	r21,-1
   45bd8:	00800134 	movhi	r2,4
   45bdc:	109e0d04 	addi	r2,r2,30772
   45be0:	12000017 	ldw	r8,0(r2)
   45be4:	45005217 	ldw	r20,328(r8)
   45be8:	44c05204 	addi	r19,r8,328
   45bec:	a0001c26 	beq	r20,zero,45c60 <__call_exitprocs+0xc4>
   45bf0:	a0800117 	ldw	r2,4(r20)
   45bf4:	15ffffc4 	addi	r23,r2,-1
   45bf8:	b8000d16 	blt	r23,zero,45c30 <__call_exitprocs+0x94>
   45bfc:	14000044 	addi	r16,r2,1
   45c00:	8421883a 	add	r16,r16,r16
   45c04:	8421883a 	add	r16,r16,r16
   45c08:	84402004 	addi	r17,r16,128
   45c0c:	a463883a 	add	r17,r20,r17
   45c10:	a421883a 	add	r16,r20,r16
   45c14:	e0001e26 	beq	fp,zero,45c90 <__call_exitprocs+0xf4>
   45c18:	80804017 	ldw	r2,256(r16)
   45c1c:	e0801c26 	beq	fp,r2,45c90 <__call_exitprocs+0xf4>
   45c20:	bdffffc4 	addi	r23,r23,-1
   45c24:	843fff04 	addi	r16,r16,-4
   45c28:	8c7fff04 	addi	r17,r17,-4
   45c2c:	bd7ff91e 	bne	r23,r21,45c14 <__alt_data_end+0xfffd3c14>
   45c30:	00800034 	movhi	r2,0
   45c34:	10800004 	addi	r2,r2,0
   45c38:	10000926 	beq	r2,zero,45c60 <__call_exitprocs+0xc4>
   45c3c:	a0800117 	ldw	r2,4(r20)
   45c40:	1000301e 	bne	r2,zero,45d04 <__call_exitprocs+0x168>
   45c44:	a0800017 	ldw	r2,0(r20)
   45c48:	10003226 	beq	r2,zero,45d14 <__call_exitprocs+0x178>
   45c4c:	a009883a 	mov	r4,r20
   45c50:	98800015 	stw	r2,0(r19)
   45c54:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45c58:	9d000017 	ldw	r20,0(r19)
   45c5c:	a03fe41e 	bne	r20,zero,45bf0 <__alt_data_end+0xfffd3bf0>
   45c60:	dfc00a17 	ldw	ra,40(sp)
   45c64:	df000917 	ldw	fp,36(sp)
   45c68:	ddc00817 	ldw	r23,32(sp)
   45c6c:	dd800717 	ldw	r22,28(sp)
   45c70:	dd400617 	ldw	r21,24(sp)
   45c74:	dd000517 	ldw	r20,20(sp)
   45c78:	dcc00417 	ldw	r19,16(sp)
   45c7c:	dc800317 	ldw	r18,12(sp)
   45c80:	dc400217 	ldw	r17,8(sp)
   45c84:	dc000117 	ldw	r16,4(sp)
   45c88:	dec00b04 	addi	sp,sp,44
   45c8c:	f800283a 	ret
   45c90:	a0800117 	ldw	r2,4(r20)
   45c94:	80c00017 	ldw	r3,0(r16)
   45c98:	10bfffc4 	addi	r2,r2,-1
   45c9c:	15c01426 	beq	r2,r23,45cf0 <__call_exitprocs+0x154>
   45ca0:	80000015 	stw	zero,0(r16)
   45ca4:	183fde26 	beq	r3,zero,45c20 <__alt_data_end+0xfffd3c20>
   45ca8:	95c8983a 	sll	r4,r18,r23
   45cac:	a0806217 	ldw	r2,392(r20)
   45cb0:	a5800117 	ldw	r22,4(r20)
   45cb4:	2084703a 	and	r2,r4,r2
   45cb8:	10000b26 	beq	r2,zero,45ce8 <__call_exitprocs+0x14c>
   45cbc:	a0806317 	ldw	r2,396(r20)
   45cc0:	2088703a 	and	r4,r4,r2
   45cc4:	20000c1e 	bne	r4,zero,45cf8 <__call_exitprocs+0x15c>
   45cc8:	89400017 	ldw	r5,0(r17)
   45ccc:	d9000017 	ldw	r4,0(sp)
   45cd0:	183ee83a 	callr	r3
   45cd4:	a0800117 	ldw	r2,4(r20)
   45cd8:	15bfbf1e 	bne	r2,r22,45bd8 <__alt_data_end+0xfffd3bd8>
   45cdc:	98800017 	ldw	r2,0(r19)
   45ce0:	153fcf26 	beq	r2,r20,45c20 <__alt_data_end+0xfffd3c20>
   45ce4:	003fbc06 	br	45bd8 <__alt_data_end+0xfffd3bd8>
   45ce8:	183ee83a 	callr	r3
   45cec:	003ff906 	br	45cd4 <__alt_data_end+0xfffd3cd4>
   45cf0:	a5c00115 	stw	r23,4(r20)
   45cf4:	003feb06 	br	45ca4 <__alt_data_end+0xfffd3ca4>
   45cf8:	89000017 	ldw	r4,0(r17)
   45cfc:	183ee83a 	callr	r3
   45d00:	003ff406 	br	45cd4 <__alt_data_end+0xfffd3cd4>
   45d04:	a0800017 	ldw	r2,0(r20)
   45d08:	a027883a 	mov	r19,r20
   45d0c:	1029883a 	mov	r20,r2
   45d10:	003fb606 	br	45bec <__alt_data_end+0xfffd3bec>
   45d14:	0005883a 	mov	r2,zero
   45d18:	003ffb06 	br	45d08 <__alt_data_end+0xfffd3d08>

00045d1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45d1c:	defffd04 	addi	sp,sp,-12
   45d20:	df000215 	stw	fp,8(sp)
   45d24:	df000204 	addi	fp,sp,8
   45d28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45d2c:	0001883a 	nop
   45d30:	e0bfff17 	ldw	r2,-4(fp)
   45d34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45d38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45d3c:	10000226 	beq	r2,zero,45d48 <_exit+0x2c>
    ALT_SIM_FAIL();
   45d40:	002af070 	cmpltui	zero,zero,43969
   45d44:	00000106 	br	45d4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45d48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45d4c:	003fff06 	br	45d4c <__alt_data_end+0xfffd3d4c>

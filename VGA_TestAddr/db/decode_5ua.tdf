--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2022:10:25:15:36:38:SC cbx_lpm_add_sub 2022:10:25:15:36:38:SC cbx_lpm_compare 2022:10:25:15:36:38:SC cbx_lpm_decode 2022:10:25:15:36:36:SC cbx_mgl 2022:10:25:15:36:55:SC cbx_nadder 2022:10:25:15:36:38:SC cbx_stratix 2022:10:25:15:36:38:SC cbx_stratixii 2022:10:25:15:36:38:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_5ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1514w[1..0]	: WIRE;
	w_anode1523w[3..0]	: WIRE;
	w_anode1540w[3..0]	: WIRE;
	w_anode1550w[3..0]	: WIRE;
	w_anode1560w[3..0]	: WIRE;
	w_anode1570w[3..0]	: WIRE;
	w_anode1580w[3..0]	: WIRE;
	w_anode1590w[3..0]	: WIRE;
	w_anode1600w[3..0]	: WIRE;
	w_anode1612w[1..0]	: WIRE;
	w_anode1619w[3..0]	: WIRE;
	w_anode1630w[3..0]	: WIRE;
	w_anode1640w[3..0]	: WIRE;
	w_anode1650w[3..0]	: WIRE;
	w_anode1660w[3..0]	: WIRE;
	w_anode1670w[3..0]	: WIRE;
	w_anode1680w[3..0]	: WIRE;
	w_anode1690w[3..0]	: WIRE;
	w_data1512w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode1690w[3..3], w_anode1680w[3..3], w_anode1670w[3..3], w_anode1660w[3..3], w_anode1650w[3..3], w_anode1640w[3..3], w_anode1630w[3..3], w_anode1619w[3..3]), ( w_anode1600w[3..3], w_anode1590w[3..3], w_anode1580w[3..3], w_anode1570w[3..3], w_anode1560w[3..3], w_anode1550w[3..3], w_anode1540w[3..3], w_anode1523w[3..3]));
	w_anode1514w[] = ( (w_anode1514w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1523w[] = ( (w_anode1523w[2..2] & (! w_data1512w[2..2])), (w_anode1523w[1..1] & (! w_data1512w[1..1])), (w_anode1523w[0..0] & (! w_data1512w[0..0])), w_anode1514w[1..1]);
	w_anode1540w[] = ( (w_anode1540w[2..2] & (! w_data1512w[2..2])), (w_anode1540w[1..1] & (! w_data1512w[1..1])), (w_anode1540w[0..0] & w_data1512w[0..0]), w_anode1514w[1..1]);
	w_anode1550w[] = ( (w_anode1550w[2..2] & (! w_data1512w[2..2])), (w_anode1550w[1..1] & w_data1512w[1..1]), (w_anode1550w[0..0] & (! w_data1512w[0..0])), w_anode1514w[1..1]);
	w_anode1560w[] = ( (w_anode1560w[2..2] & (! w_data1512w[2..2])), (w_anode1560w[1..1] & w_data1512w[1..1]), (w_anode1560w[0..0] & w_data1512w[0..0]), w_anode1514w[1..1]);
	w_anode1570w[] = ( (w_anode1570w[2..2] & w_data1512w[2..2]), (w_anode1570w[1..1] & (! w_data1512w[1..1])), (w_anode1570w[0..0] & (! w_data1512w[0..0])), w_anode1514w[1..1]);
	w_anode1580w[] = ( (w_anode1580w[2..2] & w_data1512w[2..2]), (w_anode1580w[1..1] & (! w_data1512w[1..1])), (w_anode1580w[0..0] & w_data1512w[0..0]), w_anode1514w[1..1]);
	w_anode1590w[] = ( (w_anode1590w[2..2] & w_data1512w[2..2]), (w_anode1590w[1..1] & w_data1512w[1..1]), (w_anode1590w[0..0] & (! w_data1512w[0..0])), w_anode1514w[1..1]);
	w_anode1600w[] = ( (w_anode1600w[2..2] & w_data1512w[2..2]), (w_anode1600w[1..1] & w_data1512w[1..1]), (w_anode1600w[0..0] & w_data1512w[0..0]), w_anode1514w[1..1]);
	w_anode1612w[] = ( (w_anode1612w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1619w[] = ( (w_anode1619w[2..2] & (! w_data1512w[2..2])), (w_anode1619w[1..1] & (! w_data1512w[1..1])), (w_anode1619w[0..0] & (! w_data1512w[0..0])), w_anode1612w[1..1]);
	w_anode1630w[] = ( (w_anode1630w[2..2] & (! w_data1512w[2..2])), (w_anode1630w[1..1] & (! w_data1512w[1..1])), (w_anode1630w[0..0] & w_data1512w[0..0]), w_anode1612w[1..1]);
	w_anode1640w[] = ( (w_anode1640w[2..2] & (! w_data1512w[2..2])), (w_anode1640w[1..1] & w_data1512w[1..1]), (w_anode1640w[0..0] & (! w_data1512w[0..0])), w_anode1612w[1..1]);
	w_anode1650w[] = ( (w_anode1650w[2..2] & (! w_data1512w[2..2])), (w_anode1650w[1..1] & w_data1512w[1..1]), (w_anode1650w[0..0] & w_data1512w[0..0]), w_anode1612w[1..1]);
	w_anode1660w[] = ( (w_anode1660w[2..2] & w_data1512w[2..2]), (w_anode1660w[1..1] & (! w_data1512w[1..1])), (w_anode1660w[0..0] & (! w_data1512w[0..0])), w_anode1612w[1..1]);
	w_anode1670w[] = ( (w_anode1670w[2..2] & w_data1512w[2..2]), (w_anode1670w[1..1] & (! w_data1512w[1..1])), (w_anode1670w[0..0] & w_data1512w[0..0]), w_anode1612w[1..1]);
	w_anode1680w[] = ( (w_anode1680w[2..2] & w_data1512w[2..2]), (w_anode1680w[1..1] & w_data1512w[1..1]), (w_anode1680w[0..0] & (! w_data1512w[0..0])), w_anode1612w[1..1]);
	w_anode1690w[] = ( (w_anode1690w[2..2] & w_data1512w[2..2]), (w_anode1690w[1..1] & w_data1512w[1..1]), (w_anode1690w[0..0] & w_data1512w[0..0]), w_anode1612w[1..1]);
	w_data1512w[2..0] = data_wire[2..0];
END;
--VALID FILE

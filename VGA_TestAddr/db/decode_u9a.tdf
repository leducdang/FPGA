--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_u9a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1705w[3..0]	: WIRE;
	w_anode1722w[3..0]	: WIRE;
	w_anode1732w[3..0]	: WIRE;
	w_anode1742w[3..0]	: WIRE;
	w_anode1752w[3..0]	: WIRE;
	w_anode1762w[3..0]	: WIRE;
	w_anode1772w[3..0]	: WIRE;
	w_anode1782w[3..0]	: WIRE;
	w_anode1792w[3..0]	: WIRE;
	w_anode1803w[3..0]	: WIRE;
	w_anode1813w[3..0]	: WIRE;
	w_anode1823w[3..0]	: WIRE;
	w_anode1833w[3..0]	: WIRE;
	w_anode1843w[3..0]	: WIRE;
	w_anode1853w[3..0]	: WIRE;
	w_anode1863w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1782w[3..3], w_anode1772w[3..3], w_anode1762w[3..3], w_anode1752w[3..3], w_anode1742w[3..3], w_anode1732w[3..3], w_anode1722w[3..3], w_anode1705w[3..3]);
	eq_wire2w[] = ( w_anode1863w[3..3], w_anode1853w[3..3], w_anode1843w[3..3], w_anode1833w[3..3], w_anode1823w[3..3], w_anode1813w[3..3], w_anode1803w[3..3], w_anode1792w[3..3]);
	w_anode1705w[] = ( (w_anode1705w[2..2] & (! data_wire[2..2])), (w_anode1705w[1..1] & (! data_wire[1..1])), (w_anode1705w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1722w[] = ( (w_anode1722w[2..2] & (! data_wire[2..2])), (w_anode1722w[1..1] & (! data_wire[1..1])), (w_anode1722w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1732w[] = ( (w_anode1732w[2..2] & (! data_wire[2..2])), (w_anode1732w[1..1] & data_wire[1..1]), (w_anode1732w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1742w[] = ( (w_anode1742w[2..2] & (! data_wire[2..2])), (w_anode1742w[1..1] & data_wire[1..1]), (w_anode1742w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1752w[] = ( (w_anode1752w[2..2] & data_wire[2..2]), (w_anode1752w[1..1] & (! data_wire[1..1])), (w_anode1752w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1762w[] = ( (w_anode1762w[2..2] & data_wire[2..2]), (w_anode1762w[1..1] & (! data_wire[1..1])), (w_anode1762w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1772w[] = ( (w_anode1772w[2..2] & data_wire[2..2]), (w_anode1772w[1..1] & data_wire[1..1]), (w_anode1772w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1782w[] = ( (w_anode1782w[2..2] & data_wire[2..2]), (w_anode1782w[1..1] & data_wire[1..1]), (w_anode1782w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1792w[] = ( (w_anode1792w[2..2] & (! data_wire[2..2])), (w_anode1792w[1..1] & (! data_wire[1..1])), (w_anode1792w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1803w[] = ( (w_anode1803w[2..2] & (! data_wire[2..2])), (w_anode1803w[1..1] & (! data_wire[1..1])), (w_anode1803w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1813w[] = ( (w_anode1813w[2..2] & (! data_wire[2..2])), (w_anode1813w[1..1] & data_wire[1..1]), (w_anode1813w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1823w[] = ( (w_anode1823w[2..2] & (! data_wire[2..2])), (w_anode1823w[1..1] & data_wire[1..1]), (w_anode1823w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1833w[] = ( (w_anode1833w[2..2] & data_wire[2..2]), (w_anode1833w[1..1] & (! data_wire[1..1])), (w_anode1833w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1843w[] = ( (w_anode1843w[2..2] & data_wire[2..2]), (w_anode1843w[1..1] & (! data_wire[1..1])), (w_anode1843w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1853w[] = ( (w_anode1853w[2..2] & data_wire[2..2]), (w_anode1853w[1..1] & data_wire[1..1]), (w_anode1853w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1863w[] = ( (w_anode1863w[2..2] & data_wire[2..2]), (w_anode1863w[1..1] & data_wire[1..1]), (w_anode1863w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE


I2C-ADS1115.elf:     file format elf32-littlenios2
I2C-ADS1115.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00016188 memsz 0x00016188 flags r-x
    LOAD off    0x000171a8 vaddr 0x000561a8 paddr 0x00057cf8 align 2**12
         filesz 0x00001b50 memsz 0x00001b50 flags rw-
    LOAD off    0x00019848 vaddr 0x00059848 paddr 0x00059848 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015be4  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000394  00055e14  00055e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b50  000561a8  00057cf8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  00059848  00059848  00019848  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000599b0  000599b0  00018cf8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00018cf8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001078  00000000  00000000  00018d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029ebf  00000000  00000000  00019d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a807  00000000  00000000  00043c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000db3c  00000000  00000000  0004e45e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a08  00000000  00000000  0005bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000046d9  00000000  00000000  0005e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001d805  00000000  00000000  0006307d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00080884  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c10  00000000  00000000  000808c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000861ba  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000861bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000861c0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000861c1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000861c2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000861c6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000861ca  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000005  00000000  00000000  000861ce  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000005  00000000  00000000  000861d3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000005  00000000  00000000  000861d8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000861dd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000861e0  2**0
                  CONTENTS, READONLY
 29 .jdi          00003554  00000000  00000000  0008620c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000609eb  00000000  00000000  00089760  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00055e14 l    d  .rodata	00000000 .rodata
000561a8 l    d  .rwdata	00000000 .rwdata
00059848 l    d  .bss	00000000 .bss
000599b0 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../I2C-ADS1115_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00055f92 l     O .rodata	00000010 zeroes.4389
00055fa2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
00055fb2 l     O .rodata	00000010 zeroes.4404
00045784 l     F .text	000000bc __sbprintf
00055fc2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00045994 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000474ec l     F .text	00000008 __fp_unlock
00047500 l     F .text	0000019c __sinit.part.1
0004769c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000561b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000565f8 l     O .rwdata	00000020 lc_ctype_charset
000565d8 l     O .rwdata	00000020 lc_message_charset
00056618 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00055ff4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00056118 l     O .rodata	00000010 zeroes.4333
00056128 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0004c248 l     F .text	000000fc __sprint_r.part.0
00056138 l     O .rodata	00000010 zeroes.4349
0004d884 l     F .text	000000bc __sbprintf
00056148 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0005168c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000517a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000517cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000518c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000519a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00051a94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00051c70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00057ce0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00051ee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00052020 l     F .text	00000034 alt_dev_reg
00056c00 l     O .rwdata	00000038 I2C
00056c38 l     O .rwdata	00001060 DEBUG
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
000520fc l     F .text	00000110 optional_irq_callback
0005225c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00053f38 l     F .text	0000020c altera_avalon_jtag_uart_irq
00054144 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0005477c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00054b14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00055004 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00055164 l     F .text	0000003c alt_get_errno
000551a0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00059884 g     O .bss	00000004 alt_instruction_exception_handler
00040f88 g     F .text	00000018 putchar
0004a1b4 g     F .text	00000074 _mprec_log10
0004a2a0 g     F .text	0000008c __any_on
0004df90 g     F .text	00000054 _isatty_r
00056000 g     O .rodata	00000028 __mprec_tinytens
00051bac g     F .text	0000007c alt_main
00040fa0 g     F .text	000000c0 _puts_r
000598b0 g     O .bss	00000100 alt_irq
0004dfe4 g     F .text	00000060 _lseek_r
00057cf8 g       *ABS*	00000000 __flash_rwdata_start
000500c8 g     F .text	00000088 .hidden __eqdf2
000599b0 g       *ABS*	00000000 __alt_heap_start
00040f44 g     F .text	0000003c printf
0004e0a4 g     F .text	0000009c _wcrtomb_r
0004ab98 g     F .text	0000005c __sseek
0004784c g     F .text	00000010 __sinit
0004d940 g     F .text	00000140 __swbuf_r
00048320 g     F .text	0000007c _setlocale_r
000476a4 g     F .text	00000078 __sfmoreglue
00052954 g     F .text	000000a8 alt_avalon_i2c_rx_read
00059848 g     O .bss	00000004 ADC_A0
00051c4c g     F .text	00000024 __malloc_unlock
00053b6c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
000526d8 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00048ff0 g     F .text	0000015c memmove
00047834 g     F .text	00000018 _cleanup
000533bc g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00049274 g     F .text	000000a8 _Balloc
00040be4 g     F .text	00000070 .hidden __fixsfsi
00050150 g     F .text	000000dc .hidden __gtdf2
000557f4 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00057c99 g     O .rwdata	00000001 RegisterAddr
0004df34 g     F .text	0000005c _fstat_r
00059868 g     O .bss	00000004 errno
0004ab14 g     F .text	00000008 __seofread
0004aea8 g     F .text	000013a0 ___svfiprintf_internal_r
00059870 g     O .bss	00000004 alt_argv
0005fc98 g       *ABS*	00000000 _gp
00053bb0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00052868 g     F .text	00000044 alt_avalon_i2c_is_busy
00056a80 g     O .rwdata	00000180 alt_fd_list
00040f80 g     F .text	00000008 _putchar_r
0005260c g     F .text	000000cc alt_avalon_i2c_master_config_set
00054cb4 g     F .text	00000090 alt_find_dev
00048ea8 g     F .text	00000148 memcpy
000474f4 g     F .text	0000000c _cleanup_r
00051508 g     F .text	000000dc .hidden __floatsidf
000550e8 g     F .text	0000007c alt_io_redirect
0005022c g     F .text	000000f4 .hidden __ltdf2
00055e14 g       *ABS*	00000000 __DTOR_END__
000531fc g     F .text	000001c0 alt_avalon_i2c_master_transmit
00041060 g     F .text	00000014 puts
000559e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00057ca6 g     O .rwdata	00000003 config_8BIT_HIGH
0004a9f8 g     F .text	00000074 __fpclassifyd
0004a110 g     F .text	000000a4 __ratio
0004d868 g     F .text	0000001c __vfiprintf_internal
0005433c g     F .text	0000021c altera_avalon_jtag_uart_read
00040f14 g     F .text	00000030 _printf_r
000406f8 g     F .text	00000064 .hidden __udivsi3
000518fc g     F .text	000000ac isatty
00056050 g     O .rodata	000000c8 __mprec_tens
0004839c g     F .text	0000000c __locale_charset
00052478 g     F .text	00000098 alt_avalon_i2c_enable
00059864 g     O .bss	00000004 __malloc_top_pad
00053aa0 g     F .text	00000068 alt_avalon_i2c_int_disable
00057cb8 g     O .rwdata	00000004 __mb_cur_max
000483cc g     F .text	0000000c _localeconv_r
000496a8 g     F .text	0000003c __i2b
00047cd0 g     F .text	000004c8 __sfvwrite_r
0004aa6c g     F .text	00000054 _sbrk_r
0004e044 g     F .text	00000060 _read_r
00057cd8 g     O .rwdata	00000004 alt_max_fd
0004dc28 g     F .text	000000f0 _fclose_r
000474bc g     F .text	00000030 fflush
00059860 g     O .bss	00000004 __malloc_max_sbrked_mem
000535c8 g     F .text	00000210 alt_avalon_i2c_master_receive
00040d78 g     F .text	00000110 .hidden __extendsfdf2
0004ee4c g     F .text	000008ac .hidden __adddf3
00057c9d g     O .rwdata	00000003 config_A1
00049eb8 g     F .text	0000010c __b2d
0004e888 g     F .text	000005c4 .hidden __umoddi3
00051ad0 g     F .text	000000dc lseek
00053b08 g     F .text	00000064 alt_avalon_i2c_int_enable
00057cb0 g     O .rwdata	00000004 _global_impure_ptr
0004a494 g     F .text	00000564 _realloc_r
000599b0 g       *ABS*	00000000 __bss_end
00054f14 g     F .text	000000f0 alt_iic_isr_register
000556ec g     F .text	00000108 alt_tick
0004e28c g     F .text	000005fc .hidden __udivdi3
000539c8 g     F .text	00000058 alt_avalon_i2c_int_status_get
0004de90 g     F .text	00000024 _fputwc_r
00056028 g     O .rodata	00000028 __mprec_bigtens
0004948c g     F .text	00000104 __s2b
000515e4 g     F .text	000000a8 .hidden __floatunsidf
00049bf8 g     F .text	00000060 __mcmp
0004786c g     F .text	00000018 __fp_lock_all
00054ec8 g     F .text	0000004c alt_ic_irq_enabled
00055650 g     F .text	0000009c alt_alarm_stop
000522f8 g     F .text	00000054 alt_avalon_i2c_register_callback
00059878 g     O .bss	00000004 alt_irq_active
0005234c g     F .text	000000ec alt_avalon_i2c_init
000400fc g     F .exceptions	000000d4 alt_irq_handler
00056a58 g     O .rwdata	00000028 alt_dev_null
00057c9a g     O .rwdata	00000003 config_A0
00054af4 g     F .text	00000020 alt_dcache_flush_all
00049590 g     F .text	00000068 __hi0bits
00051488 g     F .text	00000080 .hidden __fixdfsi
00057cf8 g       *ABS*	00000000 __ram_rwdata_end
00057cd0 g     O .rwdata	00000008 alt_dev_list
00051f20 g     F .text	00000100 write
0004a32c g     F .text	000000a0 _putc_r
00052c88 g     F .text	0000004c alt_avalon_i2c_check_arblost
00053a64 g     F .text	0000003c alt_avalon_i2c_int_clear
000561a8 g       *ABS*	00000000 __ram_rodata_end
00051808 g     F .text	000000b8 fstat
0005022c g     F .text	000000f4 .hidden __ledf2
00057ce4 g     O .rwdata	00000008 alt_avalon_i2c_list
00049970 g     F .text	00000140 __pow5mult
0004c35c g     F .text	0000150c ___vfiprintf_internal_r
00059858 g     O .bss	00000004 __nlocale_changed
0004075c g     F .text	00000058 .hidden __umodsi3
000599b0 g       *ABS*	00000000 end
00053e78 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00052438 g     F .text	00000040 alt_avalon_i2c_open
00055e14 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
00052e10 g     F .text	000000e8 alt_avalon_i2c_master_tx
000547f4 g     F .text	0000007c alt_avalon_timer_sc_init
00040e88 g     F .text	00000064 .hidden __clzsi2
00054558 g     F .text	00000224 altera_avalon_jtag_uart_write
0004785c g     F .text	00000004 __sfp_lock_acquire
00048dc4 g     F .text	000000e4 memchr
0004348c g     F .text	000022dc ___vfprintf_internal_r
00041074 g     F .text	00000058 _sprintf_r
000479c0 g     F .text	00000310 _free_r
000553e8 g     F .text	0000022c alt_printf
000483a8 g     F .text	00000010 __locale_mb_cur_max
00057ca0 g     O .rwdata	00000003 config_A2
00055c60 g     F .text	00000180 __call_exitprocs
00059854 g     O .bss	00000004 __mlocale_changed
0005220c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00057cbc g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
0005987c g     O .bss	00000004 _alt_tick_rate
000537d8 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00053bfc g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00049ab0 g     F .text	00000148 __lshift
00059880 g     O .bss	00000004 _alt_nticks
00051cac g     F .text	00000104 read
0005208c g     F .text	00000070 alt_sys_init
00040c54 g     F .text	00000124 .hidden __floatsisf
0004acd8 g     F .text	000001d0 __ssprint_r
00055b48 g     F .text	00000118 __register_exitproc
00053034 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000496e4 g     F .text	0000028c __multiply
000541e4 g     F .text	00000068 altera_avalon_jtag_uart_close
00040eec g     F .text	00000028 .hidden __mulsi3
000561a8 g       *ABS*	00000000 __ram_rwdata_start
00055e14 g       *ABS*	00000000 __ram_rodata_start
00059888 g     O .bss	00000028 __malloc_current_mallinfo
00049fc4 g     F .text	0000014c __d2b
00057cac g     O .rwdata	00000004 multiplier
00053d14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00055920 g     F .text	000000c4 alt_get_fd
0005499c g     F .text	00000158 alt_busy_sleep
0004daf8 g     F .text	00000054 _close_r
00055acc g     F .text	0000007c memcmp
000528ac g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00053dd4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000599b0 g       *ABS*	00000000 __alt_stack_base
00053e24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00045840 g     F .text	00000154 __swsetup_r
0004f6f8 g     F .text	000009d0 .hidden __divdf3
0004771c g     F .text	00000118 __sfp
0004a228 g     F .text	00000078 __copybits
00056650 g     O .rwdata	00000408 __malloc_av_
00047868 g     F .text	00000004 __sinit_lock_release
00050320 g     F .text	0000086c .hidden __muldf3
0004aac0 g     F .text	00000054 __sread
00055818 g     F .text	00000108 alt_find_file
00054b50 g     F .text	000000a4 alt_dev_llist_insert
00051c28 g     F .text	00000024 __malloc_lock
00051e34 g     F .text	000000b0 sbrk
000411d0 g     F .text	000022bc ___svfprintf_internal_r
00052cd4 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00052c3c g     F .text	0000004c alt_avalon_i2c_check_nack
00047460 g     F .text	0000005c _fflush_r
0004db4c g     F .text	000000dc _calloc_r
00059848 g       *ABS*	00000000 __bss_start
0005984c g     O .bss	00000002 data
0004914c g     F .text	00000128 memset
00057c98 g     O .rwdata	00000001 ADS1115_ADDR
000402d0 g     F .text	00000330 main
00040000 g       *ABS*	00000000 __alt_mem_RAM
0004026c g     F .text	00000064 delay_ms
00052c08 g     F .text	00000034 alt_avalon_i2c_master_target_set
00059874 g     O .bss	00000004 alt_envp
0005985c g     O .bss	00000004 __malloc_max_total_mem
00053d74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004da80 g     F .text	00000018 __swbuf
00053a20 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0004abf4 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004dd18 g     F .text	00000014 fclose
00045bbc g     F .text	00001688 _dtoa_r
000485b8 g     F .text	0000080c _malloc_r
0004e200 g     F .text	00000030 __ascii_wctomb
00057cdc g     O .rwdata	00000004 alt_errno
00048198 g     F .text	000000c4 _fwalk
0004a3cc g     F .text	000000c8 putc
00040600 g     F .text	00000084 .hidden __divsi3
0004789c g     F .text	00000124 _malloc_trim_r
00055e14 g       *ABS*	00000000 __CTOR_END__
000407b4 g     F .text	00000430 .hidden __mulsf3
0004abfc g     F .text	000000dc strcmp
00055e14 g       *ABS*	00000000 __flash_rodata_start
00055e14 g       *ABS*	00000000 __DTOR_LIST__
000500c8 g     F .text	00000088 .hidden __nedf2
00052054 g     F .text	00000038 alt_irq_init
00051db0 g     F .text	00000084 alt_release_fd
000410cc g     F .text	0000006c sprintf
00055e4b g     O .rodata	00000100 .hidden __clz_tab
00059850 g     O .bss	00000004 _PathLocale
00055a80 g     F .text	00000014 atexit
0004da98 g     F .text	00000060 _write_r
000483d8 g     F .text	00000018 setlocale
00057cb4 g     O .rwdata	00000004 _impure_ptr
0005986c g     O .bss	00000004 alt_argc
00047244 g     F .text	0000021c __sflush_r
00054c54 g     F .text	00000060 _do_dtors
000483c4 g     F .text	00000008 __locale_cjk_lang
00052bd0 g     F .text	00000038 alt_avalon_i2c_master_target_get
00052ae0 g     F .text	000000f0 alt_avalon_i2c_send_address
00040020 g       .exceptions	00000000 alt_irq_entry
00049e54 g     F .text	00000064 __ulp
00047884 g     F .text	00000018 __fp_unlock_all
000561a8 g     O .rwdata	0000000a led7_seg
00057cc8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000483f0 g     F .text	0000000c localeconv
00053cac g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00054d64 g     F .text	00000050 alt_ic_isr_register
00052510 g     F .text	0000004c alt_avalon_i2c_disable
00057cf8 g       *ABS*	00000000 _edata
00057ca9 g     O .rwdata	00000003 config_8BIT_LOW
000599b0 g       *ABS*	00000000 _end
0004dd2c g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
0005424c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0005255c g     F .text	000000b0 alt_avalon_i2c_master_config_get
00054e3c g     F .text	0000008c alt_ic_irq_disable
0004ab1c g     F .text	0000007c __swrite
00057cc0 g     O .rwdata	00000004 __malloc_trim_threshold
000483b8 g     F .text	0000000c __locale_msgcharset
00055a94 g     F .text	00000038 exit
0004825c g     F .text	000000c4 _fwalk_reent
00049c58 g     F .text	000001fc __mdiff
00040684 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00047860 g     F .text	00000004 __sfp_lock_release
0005276c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000529fc g     F .text	000000e4 alt_avalon_i2c_cmd_write
00055de0 g     F .text	00000034 _exit
00054870 g     F .text	0000012c alt_alarm_start
000483fc g     F .text	000001bc __smakebuf_r
00041138 g     F .text	00000098 strlen
0005528c g     F .text	0000015c open
00050150 g     F .text	000000dc .hidden __gedf2
00055614 g     F .text	0000003c alt_putchar
00057cc4 g     O .rwdata	00000004 __wctomb
0004c344 g     F .text	00000018 __sprint_r
00054d44 g     F .text	00000020 alt_icache_flush_all
00057cec g     O .rwdata	00000004 alt_priority_mask
00054db4 g     F .text	00000088 alt_ic_irq_enable
00045768 g     F .text	0000001c __vfprintf_internal
0004e230 g     F .text	0000005c _wctomb_r
00050b8c g     F .text	000008fc .hidden __subdf3
000495f8 g     F .text	000000b0 __lo0bits
00057cf0 g     O .rwdata	00000008 alt_alarm_list
00054bf4 g     F .text	00000060 _do_ctors
0004e140 g     F .text	000000c0 wcrtomb
000516c8 g     F .text	000000d8 close
00053c60 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00051a10 g     F .text	00000084 alt_load
00052ef8 g     F .text	0000013c alt_avalon_i2c_master_rx
0004deb4 g     F .text	00000080 fputwc
00047864 g     F .text	00000004 __sinit_lock_acquire
00049344 g     F .text	00000148 __multadd
0004931c g     F .text	00000028 _Bfree
00057ca3 g     O .rwdata	00000003 config_A3



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10a62c04 	addi	r2,r2,-26448
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10a62c04 	addi	r2,r2,-26448
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6fb17 	ldw	r2,-25620(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6fb17 	ldw	r2,-25620(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d6bf2614 	ori	gp,gp,64664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	10a61214 	ori	r2,r2,38984

    movhi r3, %hi(__bss_end)
   40248:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4024c:	18e66c14 	ori	r3,r3,39344

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	0051a100 	call	51a10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	0051bac0 	call	51bac <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffce268>

0004026c <delay_ms>:
					 0b1111000,
					 0b0000000,
					 0b0010000
};
void delay_ms(int ms)
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	df000315 	stw	fp,12(sp)
   40274:	df000304 	addi	fp,sp,12
   40278:	e13fff15 	stw	r4,-4(fp)
	unsigned int x,y;
	for(x =0; x<ms; x++)
   4027c:	e03ffd15 	stw	zero,-12(fp)
   40280:	00000b06 	br	402b0 <delay_ms+0x44>
	{	for(y =0; y<1000; y++);}
   40284:	e03ffe15 	stw	zero,-8(fp)
   40288:	00000306 	br	40298 <delay_ms+0x2c>
   4028c:	e0bffe17 	ldw	r2,-8(fp)
   40290:	10800044 	addi	r2,r2,1
   40294:	e0bffe15 	stw	r2,-8(fp)
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	1080fa30 	cmpltui	r2,r2,1000
   402a0:	103ffa1e 	bne	r2,zero,4028c <__alt_data_end+0xfffce28c>
					 0b0010000
};
void delay_ms(int ms)
{
	unsigned int x,y;
	for(x =0; x<ms; x++)
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0bffd15 	stw	r2,-12(fp)
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	e0fffd17 	ldw	r3,-12(fp)
   402b8:	18bff236 	bltu	r3,r2,40284 <__alt_data_end+0xfffce284>
	{	for(y =0; y<1000; y++);}
}
   402bc:	0001883a 	nop
   402c0:	e037883a 	mov	sp,fp
   402c4:	df000017 	ldw	fp,0(sp)
   402c8:	dec00104 	addi	sp,sp,4
   402cc:	f800283a 	ret

000402d0 <main>:

int main(){
   402d0:	defff304 	addi	sp,sp,-52
   402d4:	dfc00c15 	stw	ra,48(sp)
   402d8:	df000b15 	stw	fp,44(sp)
   402dc:	df000b04 	addi	fp,sp,44

 alt_u8 ReadDatabuf[2];
 alt_u8 TxBuffer[1]= { RegisterAddr };
   402e0:	0005883a 	mov	r2,zero
   402e4:	e0bffa85 	stb	r2,-22(fp)

 ALT_AVALON_I2C_STATUS_CODE status;
 ALT_AVALON_I2C_DEV_t *my_i2c;
 ALT_AVALON_I2C_MASTER_CONFIG_t cfg;

 cfg.addr_mode = 0;
   402e8:	e03ffc15 	stw	zero,-16(fp)

 my_i2c = alt_avalon_i2c_open(I2C_NAME);
   402ec:	01000174 	movhi	r4,5
   402f0:	21178504 	addi	r4,r4,24084
   402f4:	00524380 	call	52438 <alt_avalon_i2c_open>
   402f8:	e0bff715 	stw	r2,-36(fp)
 if(my_i2c == NULL){
   402fc:	e0bff717 	ldw	r2,-36(fp)
   40300:	1000051e 	bne	r2,zero,40318 <main+0x48>
 printf("Failed to open I2C port\n");
   40304:	01000174 	movhi	r4,5
   40308:	21178804 	addi	r4,r4,24096
   4030c:	00410600 	call	41060 <puts>
 return 1;
   40310:	00800044 	movi	r2,1
   40314:	0000b506 	br	405ec <main+0x31c>
 }
 alt_avalon_i2c_master_target_set(my_i2c, ADS1115_ADDR); 		//pointing to the TMP102 address
   40318:	00801204 	movi	r2,72
   4031c:	10803fcc 	andi	r2,r2,255
   40320:	100b883a 	mov	r5,r2
   40324:	e13ff717 	ldw	r4,-36(fp)
   40328:	0052c080 	call	52c08 <alt_avalon_i2c_master_target_set>
 alt_avalon_i2c_master_config_speed_set(my_i2c, &cfg,100000 ); //Set the speed
   4032c:	e0bffc04 	addi	r2,fp,-16
   40330:	018000b4 	movhi	r6,2
   40334:	31a1a804 	addi	r6,r6,-31072
   40338:	100b883a 	mov	r5,r2
   4033c:	e13ff717 	ldw	r4,-36(fp)
   40340:	005276c0 	call	5276c <alt_avalon_i2c_master_config_speed_set>
 alt_avalon_i2c_master_config_set(my_i2c, &cfg);				//configure
   40344:	e0bffc04 	addi	r2,fp,-16
   40348:	100b883a 	mov	r5,r2
   4034c:	e13ff717 	ldw	r4,-36(fp)
   40350:	005260c0 	call	5260c <alt_avalon_i2c_master_config_set>
 alt_avalon_i2c_init(my_i2c);
   40354:	e13ff717 	ldw	r4,-36(fp)
   40358:	005234c0 	call	5234c <alt_avalon_i2c_init>
 while(1)
 {

	 // doc kenh A0.

	 status = alt_avalon_i2c_master_tx(my_i2c,config_A0,sizeof(config_A0),ALT_AVALON_I2C_NO_INTERRUPTS);
   4035c:	000f883a 	mov	r7,zero
   40360:	018000c4 	movi	r6,3
   40364:	d1600084 	addi	r5,gp,-32766
   40368:	e13ff717 	ldw	r4,-36(fp)
   4036c:	0052e100 	call	52e10 <alt_avalon_i2c_master_tx>
   40370:	e0bff815 	stw	r2,-32(fp)
	 status = alt_avalon_i2c_master_tx(my_i2c,config_8BIT_HIGH,sizeof(config_8BIT_HIGH),ALT_AVALON_I2C_NO_INTERRUPTS);
   40374:	000f883a 	mov	r7,zero
   40378:	018000c4 	movi	r6,3
   4037c:	d1600384 	addi	r5,gp,-32754
   40380:	e13ff717 	ldw	r4,-36(fp)
   40384:	0052e100 	call	52e10 <alt_avalon_i2c_master_tx>
   40388:	e0bff815 	stw	r2,-32(fp)
	 status = alt_avalon_i2c_master_tx(my_i2c,config_8BIT_LOW, sizeof(config_8BIT_LOW), ALT_AVALON_I2C_NO_INTERRUPTS);
   4038c:	000f883a 	mov	r7,zero
   40390:	018000c4 	movi	r6,3
   40394:	d1600444 	addi	r5,gp,-32751
   40398:	e13ff717 	ldw	r4,-36(fp)
   4039c:	0052e100 	call	52e10 <alt_avalon_i2c_master_tx>
   403a0:	e0bff815 	stw	r2,-32(fp)
	 status = alt_avalon_i2c_master_tx_rx(my_i2c, TxBuffer, 1, ReadDatabuf, sizeof(ReadDatabuf),ALT_AVALON_I2C_NO_INTERRUPTS);
   403a4:	e13ffa04 	addi	r4,fp,-24
   403a8:	e0fffa84 	addi	r3,fp,-22
   403ac:	d8000115 	stw	zero,4(sp)
   403b0:	00800084 	movi	r2,2
   403b4:	d8800015 	stw	r2,0(sp)
   403b8:	200f883a 	mov	r7,r4
   403bc:	01800044 	movi	r6,1
   403c0:	180b883a 	mov	r5,r3
   403c4:	e13ff717 	ldw	r4,-36(fp)
   403c8:	00530340 	call	53034 <alt_avalon_i2c_master_tx_rx>
   403cc:	e0bff815 	stw	r2,-32(fp)

	 if (status!=ALT_AVALON_I2C_SUCCESS){
   403d0:	e0bff817 	ldw	r2,-32(fp)
   403d4:	10000526 	beq	r2,zero,403ec <main+0x11c>
	 printf("Read Failure\n");
   403d8:	01000174 	movhi	r4,5
   403dc:	21178e04 	addi	r4,r4,24120
   403e0:	00410600 	call	41060 <puts>
	 return 1; //FAIL
   403e4:	00800044 	movi	r2,1
   403e8:	00008006 	br	405ec <main+0x31c>
	 }

	 data = ( ReadDatabuf[0] << 8) | ReadDatabuf[1];
   403ec:	e0bffa03 	ldbu	r2,-24(fp)
   403f0:	10803fcc 	andi	r2,r2,255
   403f4:	1004923a 	slli	r2,r2,8
   403f8:	1007883a 	mov	r3,r2
   403fc:	e0bffa43 	ldbu	r2,-23(fp)
   40400:	10803fcc 	andi	r2,r2,255
   40404:	1884b03a 	or	r2,r3,r2
   40408:	d0a6ed0d 	sth	r2,-25676(gp)
	 ADC_A0 = data * multiplier;
   4040c:	d0a6ed0b 	ldhu	r2,-25676(gp)
   40410:	10bfffcc 	andi	r2,r2,65535
   40414:	1009883a 	mov	r4,r2
   40418:	0040c540 	call	40c54 <__floatsisf>
   4041c:	1007883a 	mov	r3,r2
   40420:	008f9034 	movhi	r2,15936
   40424:	100b883a 	mov	r5,r2
   40428:	1809883a 	mov	r4,r3
   4042c:	00407b40 	call	407b4 <__mulsf3>
   40430:	1007883a 	mov	r3,r2
   40434:	1805883a 	mov	r2,r3
   40438:	d0a6ec15 	stw	r2,-25680(gp)

	 int ADC_CV = ADC_A0;
   4043c:	d0a6ec17 	ldw	r2,-25680(gp)
   40440:	1009883a 	mov	r4,r2
   40444:	0040be40 	call	40be4 <__fixsfsi>
   40448:	e0bff915 	stw	r2,-28(fp)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE,led7_seg[ADC_CV/1000]);  //hang chuc - hour
   4044c:	e0bff917 	ldw	r2,-28(fp)
   40450:	0140fa04 	movi	r5,1000
   40454:	1009883a 	mov	r4,r2
   40458:	00406000 	call	40600 <__divsi3>
   4045c:	1007883a 	mov	r3,r2
   40460:	00800174 	movhi	r2,5
   40464:	10986a04 	addi	r2,r2,25000
   40468:	10c5883a 	add	r2,r2,r3
   4046c:	10800003 	ldbu	r2,0(r2)
   40470:	10c03fcc 	andi	r3,r2,255
   40474:	18c0201c 	xori	r3,r3,128
   40478:	18ffe004 	addi	r3,r3,-128
   4047c:	00800234 	movhi	r2,8
   40480:	10843804 	addi	r2,r2,4320
   40484:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED2_BASE,led7_seg[ADC_CV/100%10]); 	//hang don vi - hour
   40488:	e0bff917 	ldw	r2,-28(fp)
   4048c:	01401904 	movi	r5,100
   40490:	1009883a 	mov	r4,r2
   40494:	00406000 	call	40600 <__divsi3>
   40498:	01400284 	movi	r5,10
   4049c:	1009883a 	mov	r4,r2
   404a0:	00406840 	call	40684 <__modsi3>
   404a4:	1007883a 	mov	r3,r2
   404a8:	00800174 	movhi	r2,5
   404ac:	10986a04 	addi	r2,r2,25000
   404b0:	10c5883a 	add	r2,r2,r3
   404b4:	10800003 	ldbu	r2,0(r2)
   404b8:	10c03fcc 	andi	r3,r2,255
   404bc:	18c0201c 	xori	r3,r3,128
   404c0:	18ffe004 	addi	r3,r3,-128
   404c4:	00800234 	movhi	r2,8
   404c8:	10843c04 	addi	r2,r2,4336
   404cc:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED3_BASE,led7_seg[ADC_CV/10%10]);  //hang chuc - minute
   404d0:	e0bff917 	ldw	r2,-28(fp)
   404d4:	01400284 	movi	r5,10
   404d8:	1009883a 	mov	r4,r2
   404dc:	00406000 	call	40600 <__divsi3>
   404e0:	01400284 	movi	r5,10
   404e4:	1009883a 	mov	r4,r2
   404e8:	00406840 	call	40684 <__modsi3>
   404ec:	1007883a 	mov	r3,r2
   404f0:	00800174 	movhi	r2,5
   404f4:	10986a04 	addi	r2,r2,25000
   404f8:	10c5883a 	add	r2,r2,r3
   404fc:	10800003 	ldbu	r2,0(r2)
   40500:	10c03fcc 	andi	r3,r2,255
   40504:	18c0201c 	xori	r3,r3,128
   40508:	18ffe004 	addi	r3,r3,-128
   4050c:	00800234 	movhi	r2,8
   40510:	10843404 	addi	r2,r2,4304
   40514:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED4_BASE,led7_seg[ADC_CV%10]); 	//hang don vi - minute
   40518:	e0bff917 	ldw	r2,-28(fp)
   4051c:	01400284 	movi	r5,10
   40520:	1009883a 	mov	r4,r2
   40524:	00406840 	call	40684 <__modsi3>
   40528:	1007883a 	mov	r3,r2
   4052c:	00800174 	movhi	r2,5
   40530:	10986a04 	addi	r2,r2,25000
   40534:	10c5883a 	add	r2,r2,r3
   40538:	10800003 	ldbu	r2,0(r2)
   4053c:	10c03fcc 	andi	r3,r2,255
   40540:	18c0201c 	xori	r3,r3,128
   40544:	18ffe004 	addi	r3,r3,-128
   40548:	00800234 	movhi	r2,8
   4054c:	10843004 	addi	r2,r2,4288
   40550:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED5_BASE,led7_seg[0]);  //hang chuc - second
   40554:	00800174 	movhi	r2,5
   40558:	10986a04 	addi	r2,r2,25000
   4055c:	10800003 	ldbu	r2,0(r2)
   40560:	10c03fcc 	andi	r3,r2,255
   40564:	18c0201c 	xori	r3,r3,128
   40568:	18ffe004 	addi	r3,r3,-128
   4056c:	00800234 	movhi	r2,8
   40570:	10842c04 	addi	r2,r2,4272
   40574:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED6_BASE,led7_seg[0]); 	//hang don vi - second
   40578:	00800174 	movhi	r2,5
   4057c:	10986a04 	addi	r2,r2,25000
   40580:	10800003 	ldbu	r2,0(r2)
   40584:	10c03fcc 	andi	r3,r2,255
   40588:	18c0201c 	xori	r3,r3,128
   4058c:	18ffe004 	addi	r3,r3,-128
   40590:	00800234 	movhi	r2,8
   40594:	10842804 	addi	r2,r2,4256
   40598:	10c00035 	stwio	r3,0(r2)

	 sprintf(finaloutput, "%f", ADC_A0);
   4059c:	d0a6ec17 	ldw	r2,-25680(gp)
   405a0:	1009883a 	mov	r4,r2
   405a4:	0040d780 	call	40d78 <__extendsfdf2>
   405a8:	1009883a 	mov	r4,r2
   405ac:	180b883a 	mov	r5,r3
   405b0:	e0bffac4 	addi	r2,fp,-21
   405b4:	200d883a 	mov	r6,r4
   405b8:	280f883a 	mov	r7,r5
   405bc:	01400174 	movhi	r5,5
   405c0:	29579204 	addi	r5,r5,24136
   405c4:	1009883a 	mov	r4,r2
   405c8:	00410cc0 	call	410cc <sprintf>
	 printf(finaloutput);
   405cc:	e0bffac4 	addi	r2,fp,-21
   405d0:	1009883a 	mov	r4,r2
   405d4:	0040f440 	call	40f44 <printf>
	 printf("\n");
   405d8:	01000284 	movi	r4,10
   405dc:	0040f880 	call	40f88 <putchar>
	 delay_ms(500);
   405e0:	01007d04 	movi	r4,500
   405e4:	004026c0 	call	4026c <delay_ms>
 }
   405e8:	003f5c06 	br	4035c <__alt_data_end+0xfffce35c>
 return 0;
 }
   405ec:	e037883a 	mov	sp,fp
   405f0:	dfc00117 	ldw	ra,4(sp)
   405f4:	df000017 	ldw	fp,0(sp)
   405f8:	dec00204 	addi	sp,sp,8
   405fc:	f800283a 	ret

00040600 <__divsi3>:
   40600:	20001b16 	blt	r4,zero,40670 <__divsi3+0x70>
   40604:	000f883a 	mov	r7,zero
   40608:	28001616 	blt	r5,zero,40664 <__divsi3+0x64>
   4060c:	200d883a 	mov	r6,r4
   40610:	29001a2e 	bgeu	r5,r4,4067c <__divsi3+0x7c>
   40614:	00800804 	movi	r2,32
   40618:	00c00044 	movi	r3,1
   4061c:	00000106 	br	40624 <__divsi3+0x24>
   40620:	10000d26 	beq	r2,zero,40658 <__divsi3+0x58>
   40624:	294b883a 	add	r5,r5,r5
   40628:	10bfffc4 	addi	r2,r2,-1
   4062c:	18c7883a 	add	r3,r3,r3
   40630:	293ffb36 	bltu	r5,r4,40620 <__alt_data_end+0xfffce620>
   40634:	0005883a 	mov	r2,zero
   40638:	18000726 	beq	r3,zero,40658 <__divsi3+0x58>
   4063c:	0005883a 	mov	r2,zero
   40640:	31400236 	bltu	r6,r5,4064c <__divsi3+0x4c>
   40644:	314dc83a 	sub	r6,r6,r5
   40648:	10c4b03a 	or	r2,r2,r3
   4064c:	1806d07a 	srli	r3,r3,1
   40650:	280ad07a 	srli	r5,r5,1
   40654:	183ffa1e 	bne	r3,zero,40640 <__alt_data_end+0xfffce640>
   40658:	38000126 	beq	r7,zero,40660 <__divsi3+0x60>
   4065c:	0085c83a 	sub	r2,zero,r2
   40660:	f800283a 	ret
   40664:	014bc83a 	sub	r5,zero,r5
   40668:	39c0005c 	xori	r7,r7,1
   4066c:	003fe706 	br	4060c <__alt_data_end+0xfffce60c>
   40670:	0109c83a 	sub	r4,zero,r4
   40674:	01c00044 	movi	r7,1
   40678:	003fe306 	br	40608 <__alt_data_end+0xfffce608>
   4067c:	00c00044 	movi	r3,1
   40680:	003fee06 	br	4063c <__alt_data_end+0xfffce63c>

00040684 <__modsi3>:
   40684:	20001716 	blt	r4,zero,406e4 <__modsi3+0x60>
   40688:	000f883a 	mov	r7,zero
   4068c:	2005883a 	mov	r2,r4
   40690:	28001216 	blt	r5,zero,406dc <__modsi3+0x58>
   40694:	2900162e 	bgeu	r5,r4,406f0 <__modsi3+0x6c>
   40698:	01800804 	movi	r6,32
   4069c:	00c00044 	movi	r3,1
   406a0:	00000106 	br	406a8 <__modsi3+0x24>
   406a4:	30000a26 	beq	r6,zero,406d0 <__modsi3+0x4c>
   406a8:	294b883a 	add	r5,r5,r5
   406ac:	31bfffc4 	addi	r6,r6,-1
   406b0:	18c7883a 	add	r3,r3,r3
   406b4:	293ffb36 	bltu	r5,r4,406a4 <__alt_data_end+0xfffce6a4>
   406b8:	18000526 	beq	r3,zero,406d0 <__modsi3+0x4c>
   406bc:	1806d07a 	srli	r3,r3,1
   406c0:	11400136 	bltu	r2,r5,406c8 <__modsi3+0x44>
   406c4:	1145c83a 	sub	r2,r2,r5
   406c8:	280ad07a 	srli	r5,r5,1
   406cc:	183ffb1e 	bne	r3,zero,406bc <__alt_data_end+0xfffce6bc>
   406d0:	38000126 	beq	r7,zero,406d8 <__modsi3+0x54>
   406d4:	0085c83a 	sub	r2,zero,r2
   406d8:	f800283a 	ret
   406dc:	014bc83a 	sub	r5,zero,r5
   406e0:	003fec06 	br	40694 <__alt_data_end+0xfffce694>
   406e4:	0109c83a 	sub	r4,zero,r4
   406e8:	01c00044 	movi	r7,1
   406ec:	003fe706 	br	4068c <__alt_data_end+0xfffce68c>
   406f0:	00c00044 	movi	r3,1
   406f4:	003ff106 	br	406bc <__alt_data_end+0xfffce6bc>

000406f8 <__udivsi3>:
   406f8:	200d883a 	mov	r6,r4
   406fc:	2900152e 	bgeu	r5,r4,40754 <__udivsi3+0x5c>
   40700:	28001416 	blt	r5,zero,40754 <__udivsi3+0x5c>
   40704:	00800804 	movi	r2,32
   40708:	00c00044 	movi	r3,1
   4070c:	00000206 	br	40718 <__udivsi3+0x20>
   40710:	10000e26 	beq	r2,zero,4074c <__udivsi3+0x54>
   40714:	28000516 	blt	r5,zero,4072c <__udivsi3+0x34>
   40718:	294b883a 	add	r5,r5,r5
   4071c:	10bfffc4 	addi	r2,r2,-1
   40720:	18c7883a 	add	r3,r3,r3
   40724:	293ffa36 	bltu	r5,r4,40710 <__alt_data_end+0xfffce710>
   40728:	18000826 	beq	r3,zero,4074c <__udivsi3+0x54>
   4072c:	0005883a 	mov	r2,zero
   40730:	31400236 	bltu	r6,r5,4073c <__udivsi3+0x44>
   40734:	314dc83a 	sub	r6,r6,r5
   40738:	10c4b03a 	or	r2,r2,r3
   4073c:	1806d07a 	srli	r3,r3,1
   40740:	280ad07a 	srli	r5,r5,1
   40744:	183ffa1e 	bne	r3,zero,40730 <__alt_data_end+0xfffce730>
   40748:	f800283a 	ret
   4074c:	0005883a 	mov	r2,zero
   40750:	f800283a 	ret
   40754:	00c00044 	movi	r3,1
   40758:	003ff406 	br	4072c <__alt_data_end+0xfffce72c>

0004075c <__umodsi3>:
   4075c:	2005883a 	mov	r2,r4
   40760:	2900122e 	bgeu	r5,r4,407ac <__umodsi3+0x50>
   40764:	28001116 	blt	r5,zero,407ac <__umodsi3+0x50>
   40768:	01800804 	movi	r6,32
   4076c:	00c00044 	movi	r3,1
   40770:	00000206 	br	4077c <__umodsi3+0x20>
   40774:	30000c26 	beq	r6,zero,407a8 <__umodsi3+0x4c>
   40778:	28000516 	blt	r5,zero,40790 <__umodsi3+0x34>
   4077c:	294b883a 	add	r5,r5,r5
   40780:	31bfffc4 	addi	r6,r6,-1
   40784:	18c7883a 	add	r3,r3,r3
   40788:	293ffa36 	bltu	r5,r4,40774 <__alt_data_end+0xfffce774>
   4078c:	18000626 	beq	r3,zero,407a8 <__umodsi3+0x4c>
   40790:	1806d07a 	srli	r3,r3,1
   40794:	11400136 	bltu	r2,r5,4079c <__umodsi3+0x40>
   40798:	1145c83a 	sub	r2,r2,r5
   4079c:	280ad07a 	srli	r5,r5,1
   407a0:	183ffb1e 	bne	r3,zero,40790 <__alt_data_end+0xfffce790>
   407a4:	f800283a 	ret
   407a8:	f800283a 	ret
   407ac:	00c00044 	movi	r3,1
   407b0:	003ff706 	br	40790 <__alt_data_end+0xfffce790>

000407b4 <__mulsf3>:
   407b4:	defff504 	addi	sp,sp,-44
   407b8:	dc000115 	stw	r16,4(sp)
   407bc:	2020d5fa 	srli	r16,r4,23
   407c0:	dd400615 	stw	r21,24(sp)
   407c4:	202ad7fa 	srli	r21,r4,31
   407c8:	dc800315 	stw	r18,12(sp)
   407cc:	04802034 	movhi	r18,128
   407d0:	df000915 	stw	fp,36(sp)
   407d4:	dd000515 	stw	r20,20(sp)
   407d8:	94bfffc4 	addi	r18,r18,-1
   407dc:	dfc00a15 	stw	ra,40(sp)
   407e0:	ddc00815 	stw	r23,32(sp)
   407e4:	dd800715 	stw	r22,28(sp)
   407e8:	dcc00415 	stw	r19,16(sp)
   407ec:	dc400215 	stw	r17,8(sp)
   407f0:	84003fcc 	andi	r16,r16,255
   407f4:	9124703a 	and	r18,r18,r4
   407f8:	a829883a 	mov	r20,r21
   407fc:	af003fcc 	andi	fp,r21,255
   40800:	80005426 	beq	r16,zero,40954 <__mulsf3+0x1a0>
   40804:	00803fc4 	movi	r2,255
   40808:	80802f26 	beq	r16,r2,408c8 <__mulsf3+0x114>
   4080c:	91002034 	orhi	r4,r18,128
   40810:	202490fa 	slli	r18,r4,3
   40814:	843fe044 	addi	r16,r16,-127
   40818:	0023883a 	mov	r17,zero
   4081c:	002f883a 	mov	r23,zero
   40820:	2804d5fa 	srli	r2,r5,23
   40824:	282cd7fa 	srli	r22,r5,31
   40828:	01002034 	movhi	r4,128
   4082c:	213fffc4 	addi	r4,r4,-1
   40830:	10803fcc 	andi	r2,r2,255
   40834:	2166703a 	and	r19,r4,r5
   40838:	b1803fcc 	andi	r6,r22,255
   4083c:	10004c26 	beq	r2,zero,40970 <__mulsf3+0x1bc>
   40840:	00c03fc4 	movi	r3,255
   40844:	10c04726 	beq	r2,r3,40964 <__mulsf3+0x1b0>
   40848:	99002034 	orhi	r4,r19,128
   4084c:	202690fa 	slli	r19,r4,3
   40850:	10bfe044 	addi	r2,r2,-127
   40854:	0007883a 	mov	r3,zero
   40858:	80a1883a 	add	r16,r16,r2
   4085c:	010003c4 	movi	r4,15
   40860:	1c44b03a 	or	r2,r3,r17
   40864:	b56af03a 	xor	r21,r22,r21
   40868:	81c00044 	addi	r7,r16,1
   4086c:	20806b36 	bltu	r4,r2,40a1c <__mulsf3+0x268>
   40870:	100490ba 	slli	r2,r2,2
   40874:	01000134 	movhi	r4,4
   40878:	21022204 	addi	r4,r4,2184
   4087c:	1105883a 	add	r2,r2,r4
   40880:	10800017 	ldw	r2,0(r2)
   40884:	1000683a 	jmp	r2
   40888:	00040a1c 	xori	zero,zero,4136
   4088c:	000408dc 	xori	zero,zero,4131
   40890:	000408dc 	xori	zero,zero,4131
   40894:	000408d8 	cmpnei	zero,zero,4131
   40898:	00040a00 	call	40a0 <__alt_mem_RAM-0x3bf60>
   4089c:	00040a00 	call	40a0 <__alt_mem_RAM-0x3bf60>
   408a0:	000409ec 	andhi	zero,zero,4135
   408a4:	000408d8 	cmpnei	zero,zero,4131
   408a8:	00040a00 	call	40a0 <__alt_mem_RAM-0x3bf60>
   408ac:	000409ec 	andhi	zero,zero,4135
   408b0:	00040a00 	call	40a0 <__alt_mem_RAM-0x3bf60>
   408b4:	000408d8 	cmpnei	zero,zero,4131
   408b8:	00040a0c 	andi	zero,zero,4136
   408bc:	00040a0c 	andi	zero,zero,4136
   408c0:	00040a0c 	andi	zero,zero,4136
   408c4:	00040b1c 	xori	zero,zero,4140
   408c8:	90003b1e 	bne	r18,zero,409b8 <__mulsf3+0x204>
   408cc:	04400204 	movi	r17,8
   408d0:	05c00084 	movi	r23,2
   408d4:	003fd206 	br	40820 <__alt_data_end+0xfffce820>
   408d8:	302b883a 	mov	r21,r6
   408dc:	00800084 	movi	r2,2
   408e0:	18802626 	beq	r3,r2,4097c <__mulsf3+0x1c8>
   408e4:	008000c4 	movi	r2,3
   408e8:	1880b826 	beq	r3,r2,40bcc <__mulsf3+0x418>
   408ec:	00800044 	movi	r2,1
   408f0:	1880af1e 	bne	r3,r2,40bb0 <__mulsf3+0x3fc>
   408f4:	a829883a 	mov	r20,r21
   408f8:	0007883a 	mov	r3,zero
   408fc:	0009883a 	mov	r4,zero
   40900:	18803fcc 	andi	r2,r3,255
   40904:	100695fa 	slli	r3,r2,23
   40908:	a0803fcc 	andi	r2,r20,255
   4090c:	100a97fa 	slli	r5,r2,31
   40910:	00802034 	movhi	r2,128
   40914:	10bfffc4 	addi	r2,r2,-1
   40918:	2084703a 	and	r2,r4,r2
   4091c:	10c4b03a 	or	r2,r2,r3
   40920:	1144b03a 	or	r2,r2,r5
   40924:	dfc00a17 	ldw	ra,40(sp)
   40928:	df000917 	ldw	fp,36(sp)
   4092c:	ddc00817 	ldw	r23,32(sp)
   40930:	dd800717 	ldw	r22,28(sp)
   40934:	dd400617 	ldw	r21,24(sp)
   40938:	dd000517 	ldw	r20,20(sp)
   4093c:	dcc00417 	ldw	r19,16(sp)
   40940:	dc800317 	ldw	r18,12(sp)
   40944:	dc400217 	ldw	r17,8(sp)
   40948:	dc000117 	ldw	r16,4(sp)
   4094c:	dec00b04 	addi	sp,sp,44
   40950:	f800283a 	ret
   40954:	90000d1e 	bne	r18,zero,4098c <__mulsf3+0x1d8>
   40958:	04400104 	movi	r17,4
   4095c:	05c00044 	movi	r23,1
   40960:	003faf06 	br	40820 <__alt_data_end+0xfffce820>
   40964:	9806c03a 	cmpne	r3,r19,zero
   40968:	18c00084 	addi	r3,r3,2
   4096c:	003fba06 	br	40858 <__alt_data_end+0xfffce858>
   40970:	9800141e 	bne	r19,zero,409c4 <__mulsf3+0x210>
   40974:	00c00044 	movi	r3,1
   40978:	003fb706 	br	40858 <__alt_data_end+0xfffce858>
   4097c:	a829883a 	mov	r20,r21
   40980:	00ffffc4 	movi	r3,-1
   40984:	0009883a 	mov	r4,zero
   40988:	003fdd06 	br	40900 <__alt_data_end+0xfffce900>
   4098c:	9009883a 	mov	r4,r18
   40990:	d9400015 	stw	r5,0(sp)
   40994:	0040e880 	call	40e88 <__clzsi2>
   40998:	10fffec4 	addi	r3,r2,-5
   4099c:	10801d84 	addi	r2,r2,118
   409a0:	90e4983a 	sll	r18,r18,r3
   409a4:	00a1c83a 	sub	r16,zero,r2
   409a8:	0023883a 	mov	r17,zero
   409ac:	002f883a 	mov	r23,zero
   409b0:	d9400017 	ldw	r5,0(sp)
   409b4:	003f9a06 	br	40820 <__alt_data_end+0xfffce820>
   409b8:	04400304 	movi	r17,12
   409bc:	05c000c4 	movi	r23,3
   409c0:	003f9706 	br	40820 <__alt_data_end+0xfffce820>
   409c4:	9809883a 	mov	r4,r19
   409c8:	d9800015 	stw	r6,0(sp)
   409cc:	0040e880 	call	40e88 <__clzsi2>
   409d0:	10fffec4 	addi	r3,r2,-5
   409d4:	10801d84 	addi	r2,r2,118
   409d8:	98e6983a 	sll	r19,r19,r3
   409dc:	0085c83a 	sub	r2,zero,r2
   409e0:	0007883a 	mov	r3,zero
   409e4:	d9800017 	ldw	r6,0(sp)
   409e8:	003f9b06 	br	40858 <__alt_data_end+0xfffce858>
   409ec:	01002034 	movhi	r4,128
   409f0:	0029883a 	mov	r20,zero
   409f4:	213fffc4 	addi	r4,r4,-1
   409f8:	00ffffc4 	movi	r3,-1
   409fc:	003fc006 	br	40900 <__alt_data_end+0xfffce900>
   40a00:	9027883a 	mov	r19,r18
   40a04:	b807883a 	mov	r3,r23
   40a08:	003fb406 	br	408dc <__alt_data_end+0xfffce8dc>
   40a0c:	9027883a 	mov	r19,r18
   40a10:	e02b883a 	mov	r21,fp
   40a14:	b807883a 	mov	r3,r23
   40a18:	003fb006 	br	408dc <__alt_data_end+0xfffce8dc>
   40a1c:	9028d43a 	srli	r20,r18,16
   40a20:	982cd43a 	srli	r22,r19,16
   40a24:	94bfffcc 	andi	r18,r18,65535
   40a28:	9cffffcc 	andi	r19,r19,65535
   40a2c:	980b883a 	mov	r5,r19
   40a30:	9009883a 	mov	r4,r18
   40a34:	d9c00015 	stw	r7,0(sp)
   40a38:	0040eec0 	call	40eec <__mulsi3>
   40a3c:	a00b883a 	mov	r5,r20
   40a40:	9809883a 	mov	r4,r19
   40a44:	1023883a 	mov	r17,r2
   40a48:	0040eec0 	call	40eec <__mulsi3>
   40a4c:	a009883a 	mov	r4,r20
   40a50:	b00b883a 	mov	r5,r22
   40a54:	1027883a 	mov	r19,r2
   40a58:	0040eec0 	call	40eec <__mulsi3>
   40a5c:	b00b883a 	mov	r5,r22
   40a60:	9009883a 	mov	r4,r18
   40a64:	1029883a 	mov	r20,r2
   40a68:	0040eec0 	call	40eec <__mulsi3>
   40a6c:	8806d43a 	srli	r3,r17,16
   40a70:	14c5883a 	add	r2,r2,r19
   40a74:	d9c00017 	ldw	r7,0(sp)
   40a78:	1885883a 	add	r2,r3,r2
   40a7c:	14c0022e 	bgeu	r2,r19,40a88 <__mulsf3+0x2d4>
   40a80:	00c00074 	movhi	r3,1
   40a84:	a0e9883a 	add	r20,r20,r3
   40a88:	1026943a 	slli	r19,r2,16
   40a8c:	8c7fffcc 	andi	r17,r17,65535
   40a90:	1004d43a 	srli	r2,r2,16
   40a94:	9c63883a 	add	r17,r19,r17
   40a98:	882691ba 	slli	r19,r17,6
   40a9c:	1505883a 	add	r2,r2,r20
   40aa0:	8822d6ba 	srli	r17,r17,26
   40aa4:	100891ba 	slli	r4,r2,6
   40aa8:	9826c03a 	cmpne	r19,r19,zero
   40aac:	9c62b03a 	or	r17,r19,r17
   40ab0:	8926b03a 	or	r19,r17,r4
   40ab4:	9882002c 	andhi	r2,r19,2048
   40ab8:	10000426 	beq	r2,zero,40acc <__mulsf3+0x318>
   40abc:	9804d07a 	srli	r2,r19,1
   40ac0:	9900004c 	andi	r4,r19,1
   40ac4:	3821883a 	mov	r16,r7
   40ac8:	1126b03a 	or	r19,r2,r4
   40acc:	80c01fc4 	addi	r3,r16,127
   40ad0:	00c0210e 	bge	zero,r3,40b58 <__mulsf3+0x3a4>
   40ad4:	988001cc 	andi	r2,r19,7
   40ad8:	10000426 	beq	r2,zero,40aec <__mulsf3+0x338>
   40adc:	988003cc 	andi	r2,r19,15
   40ae0:	01000104 	movi	r4,4
   40ae4:	11000126 	beq	r2,r4,40aec <__mulsf3+0x338>
   40ae8:	9927883a 	add	r19,r19,r4
   40aec:	9882002c 	andhi	r2,r19,2048
   40af0:	10000426 	beq	r2,zero,40b04 <__mulsf3+0x350>
   40af4:	00be0034 	movhi	r2,63488
   40af8:	10bfffc4 	addi	r2,r2,-1
   40afc:	80c02004 	addi	r3,r16,128
   40b00:	98a6703a 	and	r19,r19,r2
   40b04:	00803f84 	movi	r2,254
   40b08:	10ff9c16 	blt	r2,r3,4097c <__alt_data_end+0xfffce97c>
   40b0c:	980891ba 	slli	r4,r19,6
   40b10:	a829883a 	mov	r20,r21
   40b14:	2008d27a 	srli	r4,r4,9
   40b18:	003f7906 	br	40900 <__alt_data_end+0xfffce900>
   40b1c:	9080102c 	andhi	r2,r18,64
   40b20:	10000826 	beq	r2,zero,40b44 <__mulsf3+0x390>
   40b24:	9880102c 	andhi	r2,r19,64
   40b28:	1000061e 	bne	r2,zero,40b44 <__mulsf3+0x390>
   40b2c:	00802034 	movhi	r2,128
   40b30:	99001034 	orhi	r4,r19,64
   40b34:	10bfffc4 	addi	r2,r2,-1
   40b38:	b029883a 	mov	r20,r22
   40b3c:	2088703a 	and	r4,r4,r2
   40b40:	003fad06 	br	409f8 <__alt_data_end+0xfffce9f8>
   40b44:	00802034 	movhi	r2,128
   40b48:	91001034 	orhi	r4,r18,64
   40b4c:	10bfffc4 	addi	r2,r2,-1
   40b50:	2088703a 	and	r4,r4,r2
   40b54:	003fa806 	br	409f8 <__alt_data_end+0xfffce9f8>
   40b58:	00800044 	movi	r2,1
   40b5c:	10c7c83a 	sub	r3,r2,r3
   40b60:	008006c4 	movi	r2,27
   40b64:	10ff6316 	blt	r2,r3,408f4 <__alt_data_end+0xfffce8f4>
   40b68:	00800804 	movi	r2,32
   40b6c:	10c5c83a 	sub	r2,r2,r3
   40b70:	9884983a 	sll	r2,r19,r2
   40b74:	98c6d83a 	srl	r3,r19,r3
   40b78:	1004c03a 	cmpne	r2,r2,zero
   40b7c:	1884b03a 	or	r2,r3,r2
   40b80:	10c001cc 	andi	r3,r2,7
   40b84:	18000426 	beq	r3,zero,40b98 <__mulsf3+0x3e4>
   40b88:	10c003cc 	andi	r3,r2,15
   40b8c:	01000104 	movi	r4,4
   40b90:	19000126 	beq	r3,r4,40b98 <__mulsf3+0x3e4>
   40b94:	1105883a 	add	r2,r2,r4
   40b98:	10c1002c 	andhi	r3,r2,1024
   40b9c:	18000626 	beq	r3,zero,40bb8 <__mulsf3+0x404>
   40ba0:	a829883a 	mov	r20,r21
   40ba4:	00c00044 	movi	r3,1
   40ba8:	0009883a 	mov	r4,zero
   40bac:	003f5406 	br	40900 <__alt_data_end+0xfffce900>
   40bb0:	3821883a 	mov	r16,r7
   40bb4:	003fc506 	br	40acc <__alt_data_end+0xfffceacc>
   40bb8:	100491ba 	slli	r2,r2,6
   40bbc:	a829883a 	mov	r20,r21
   40bc0:	0007883a 	mov	r3,zero
   40bc4:	1008d27a 	srli	r4,r2,9
   40bc8:	003f4d06 	br	40900 <__alt_data_end+0xfffce900>
   40bcc:	00802034 	movhi	r2,128
   40bd0:	99001034 	orhi	r4,r19,64
   40bd4:	10bfffc4 	addi	r2,r2,-1
   40bd8:	a829883a 	mov	r20,r21
   40bdc:	2088703a 	and	r4,r4,r2
   40be0:	003f8506 	br	409f8 <__alt_data_end+0xfffce9f8>

00040be4 <__fixsfsi>:
   40be4:	200ad5fa 	srli	r5,r4,23
   40be8:	00c02034 	movhi	r3,128
   40bec:	18ffffc4 	addi	r3,r3,-1
   40bf0:	29403fcc 	andi	r5,r5,255
   40bf4:	00801f84 	movi	r2,126
   40bf8:	1906703a 	and	r3,r3,r4
   40bfc:	2008d7fa 	srli	r4,r4,31
   40c00:	11400e0e 	bge	r2,r5,40c3c <__fixsfsi+0x58>
   40c04:	00802744 	movi	r2,157
   40c08:	11400816 	blt	r2,r5,40c2c <__fixsfsi+0x48>
   40c0c:	00802544 	movi	r2,149
   40c10:	18c02034 	orhi	r3,r3,128
   40c14:	11400b0e 	bge	r2,r5,40c44 <__fixsfsi+0x60>
   40c18:	28bfda84 	addi	r2,r5,-150
   40c1c:	1884983a 	sll	r2,r3,r2
   40c20:	20000726 	beq	r4,zero,40c40 <__fixsfsi+0x5c>
   40c24:	0085c83a 	sub	r2,zero,r2
   40c28:	f800283a 	ret
   40c2c:	00a00034 	movhi	r2,32768
   40c30:	10bfffc4 	addi	r2,r2,-1
   40c34:	2085883a 	add	r2,r4,r2
   40c38:	f800283a 	ret
   40c3c:	0005883a 	mov	r2,zero
   40c40:	f800283a 	ret
   40c44:	00802584 	movi	r2,150
   40c48:	1145c83a 	sub	r2,r2,r5
   40c4c:	1884d83a 	srl	r2,r3,r2
   40c50:	003ff306 	br	40c20 <__alt_data_end+0xfffcec20>

00040c54 <__floatsisf>:
   40c54:	defffd04 	addi	sp,sp,-12
   40c58:	dfc00215 	stw	ra,8(sp)
   40c5c:	dc400115 	stw	r17,4(sp)
   40c60:	dc000015 	stw	r16,0(sp)
   40c64:	20003526 	beq	r4,zero,40d3c <__floatsisf+0xe8>
   40c68:	2021883a 	mov	r16,r4
   40c6c:	2022d7fa 	srli	r17,r4,31
   40c70:	20003616 	blt	r4,zero,40d4c <__floatsisf+0xf8>
   40c74:	8009883a 	mov	r4,r16
   40c78:	0040e880 	call	40e88 <__clzsi2>
   40c7c:	00c02784 	movi	r3,158
   40c80:	1887c83a 	sub	r3,r3,r2
   40c84:	01002584 	movi	r4,150
   40c88:	20c01416 	blt	r4,r3,40cdc <__floatsisf+0x88>
   40c8c:	20c9c83a 	sub	r4,r4,r3
   40c90:	8120983a 	sll	r16,r16,r4
   40c94:	00802034 	movhi	r2,128
   40c98:	10bfffc4 	addi	r2,r2,-1
   40c9c:	8809883a 	mov	r4,r17
   40ca0:	80a0703a 	and	r16,r16,r2
   40ca4:	18803fcc 	andi	r2,r3,255
   40ca8:	100695fa 	slli	r3,r2,23
   40cac:	20803fcc 	andi	r2,r4,255
   40cb0:	100897fa 	slli	r4,r2,31
   40cb4:	00802034 	movhi	r2,128
   40cb8:	10bfffc4 	addi	r2,r2,-1
   40cbc:	8084703a 	and	r2,r16,r2
   40cc0:	10c4b03a 	or	r2,r2,r3
   40cc4:	1104b03a 	or	r2,r2,r4
   40cc8:	dfc00217 	ldw	ra,8(sp)
   40ccc:	dc400117 	ldw	r17,4(sp)
   40cd0:	dc000017 	ldw	r16,0(sp)
   40cd4:	dec00304 	addi	sp,sp,12
   40cd8:	f800283a 	ret
   40cdc:	01002644 	movi	r4,153
   40ce0:	20c01c16 	blt	r4,r3,40d54 <__floatsisf+0x100>
   40ce4:	20c9c83a 	sub	r4,r4,r3
   40ce8:	8120983a 	sll	r16,r16,r4
   40cec:	013f0034 	movhi	r4,64512
   40cf0:	213fffc4 	addi	r4,r4,-1
   40cf4:	814001cc 	andi	r5,r16,7
   40cf8:	8108703a 	and	r4,r16,r4
   40cfc:	28000426 	beq	r5,zero,40d10 <__floatsisf+0xbc>
   40d00:	840003cc 	andi	r16,r16,15
   40d04:	01400104 	movi	r5,4
   40d08:	81400126 	beq	r16,r5,40d10 <__floatsisf+0xbc>
   40d0c:	2149883a 	add	r4,r4,r5
   40d10:	2141002c 	andhi	r5,r4,1024
   40d14:	28000526 	beq	r5,zero,40d2c <__floatsisf+0xd8>
   40d18:	00c027c4 	movi	r3,159
   40d1c:	1887c83a 	sub	r3,r3,r2
   40d20:	00bf0034 	movhi	r2,64512
   40d24:	10bfffc4 	addi	r2,r2,-1
   40d28:	2088703a 	and	r4,r4,r2
   40d2c:	202091ba 	slli	r16,r4,6
   40d30:	8809883a 	mov	r4,r17
   40d34:	8020d27a 	srli	r16,r16,9
   40d38:	003fda06 	br	40ca4 <__alt_data_end+0xfffceca4>
   40d3c:	0009883a 	mov	r4,zero
   40d40:	0007883a 	mov	r3,zero
   40d44:	0021883a 	mov	r16,zero
   40d48:	003fd606 	br	40ca4 <__alt_data_end+0xfffceca4>
   40d4c:	0121c83a 	sub	r16,zero,r4
   40d50:	003fc806 	br	40c74 <__alt_data_end+0xfffcec74>
   40d54:	01002e44 	movi	r4,185
   40d58:	20c9c83a 	sub	r4,r4,r3
   40d5c:	01400144 	movi	r5,5
   40d60:	8108983a 	sll	r4,r16,r4
   40d64:	288bc83a 	sub	r5,r5,r2
   40d68:	8160d83a 	srl	r16,r16,r5
   40d6c:	2008c03a 	cmpne	r4,r4,zero
   40d70:	8120b03a 	or	r16,r16,r4
   40d74:	003fdd06 	br	40cec <__alt_data_end+0xfffcecec>

00040d78 <__extendsfdf2>:
   40d78:	200ad5fa 	srli	r5,r4,23
   40d7c:	defffd04 	addi	sp,sp,-12
   40d80:	dc400115 	stw	r17,4(sp)
   40d84:	29403fcc 	andi	r5,r5,255
   40d88:	29800044 	addi	r6,r5,1
   40d8c:	04402034 	movhi	r17,128
   40d90:	dc000015 	stw	r16,0(sp)
   40d94:	8c7fffc4 	addi	r17,r17,-1
   40d98:	dfc00215 	stw	ra,8(sp)
   40d9c:	31803fcc 	andi	r6,r6,255
   40da0:	00800044 	movi	r2,1
   40da4:	8922703a 	and	r17,r17,r4
   40da8:	2020d7fa 	srli	r16,r4,31
   40dac:	1180110e 	bge	r2,r6,40df4 <__extendsfdf2+0x7c>
   40db0:	880cd0fa 	srli	r6,r17,3
   40db4:	8822977a 	slli	r17,r17,29
   40db8:	2940e004 	addi	r5,r5,896
   40dbc:	2941ffcc 	andi	r5,r5,2047
   40dc0:	2804953a 	slli	r2,r5,20
   40dc4:	01400434 	movhi	r5,16
   40dc8:	800697fa 	slli	r3,r16,31
   40dcc:	297fffc4 	addi	r5,r5,-1
   40dd0:	314a703a 	and	r5,r6,r5
   40dd4:	288ab03a 	or	r5,r5,r2
   40dd8:	28c6b03a 	or	r3,r5,r3
   40ddc:	8805883a 	mov	r2,r17
   40de0:	dfc00217 	ldw	ra,8(sp)
   40de4:	dc400117 	ldw	r17,4(sp)
   40de8:	dc000017 	ldw	r16,0(sp)
   40dec:	dec00304 	addi	sp,sp,12
   40df0:	f800283a 	ret
   40df4:	2800111e 	bne	r5,zero,40e3c <__extendsfdf2+0xc4>
   40df8:	88001c26 	beq	r17,zero,40e6c <__extendsfdf2+0xf4>
   40dfc:	8809883a 	mov	r4,r17
   40e00:	0040e880 	call	40e88 <__clzsi2>
   40e04:	00c00284 	movi	r3,10
   40e08:	18801b16 	blt	r3,r2,40e78 <__extendsfdf2+0x100>
   40e0c:	018002c4 	movi	r6,11
   40e10:	308dc83a 	sub	r6,r6,r2
   40e14:	11000544 	addi	r4,r2,21
   40e18:	8986d83a 	srl	r3,r17,r6
   40e1c:	8922983a 	sll	r17,r17,r4
   40e20:	0180e244 	movi	r6,905
   40e24:	01400434 	movhi	r5,16
   40e28:	3085c83a 	sub	r2,r6,r2
   40e2c:	297fffc4 	addi	r5,r5,-1
   40e30:	194c703a 	and	r6,r3,r5
   40e34:	1141ffcc 	andi	r5,r2,2047
   40e38:	003fe006 	br	40dbc <__alt_data_end+0xfffcedbc>
   40e3c:	88000826 	beq	r17,zero,40e60 <__extendsfdf2+0xe8>
   40e40:	880cd0fa 	srli	r6,r17,3
   40e44:	00800434 	movhi	r2,16
   40e48:	10bfffc4 	addi	r2,r2,-1
   40e4c:	31800234 	orhi	r6,r6,8
   40e50:	8822977a 	slli	r17,r17,29
   40e54:	308c703a 	and	r6,r6,r2
   40e58:	0141ffc4 	movi	r5,2047
   40e5c:	003fd706 	br	40dbc <__alt_data_end+0xfffcedbc>
   40e60:	0141ffc4 	movi	r5,2047
   40e64:	000d883a 	mov	r6,zero
   40e68:	003fd406 	br	40dbc <__alt_data_end+0xfffcedbc>
   40e6c:	000b883a 	mov	r5,zero
   40e70:	000d883a 	mov	r6,zero
   40e74:	003fd106 	br	40dbc <__alt_data_end+0xfffcedbc>
   40e78:	11bffd44 	addi	r6,r2,-11
   40e7c:	8986983a 	sll	r3,r17,r6
   40e80:	0023883a 	mov	r17,zero
   40e84:	003fe606 	br	40e20 <__alt_data_end+0xfffcee20>

00040e88 <__clzsi2>:
   40e88:	00bfffd4 	movui	r2,65535
   40e8c:	11000536 	bltu	r2,r4,40ea4 <__clzsi2+0x1c>
   40e90:	00803fc4 	movi	r2,255
   40e94:	11000f36 	bltu	r2,r4,40ed4 <__clzsi2+0x4c>
   40e98:	00800804 	movi	r2,32
   40e9c:	0007883a 	mov	r3,zero
   40ea0:	00000506 	br	40eb8 <__clzsi2+0x30>
   40ea4:	00804034 	movhi	r2,256
   40ea8:	10bfffc4 	addi	r2,r2,-1
   40eac:	11000c2e 	bgeu	r2,r4,40ee0 <__clzsi2+0x58>
   40eb0:	00800204 	movi	r2,8
   40eb4:	00c00604 	movi	r3,24
   40eb8:	20c8d83a 	srl	r4,r4,r3
   40ebc:	00c00174 	movhi	r3,5
   40ec0:	18d792c4 	addi	r3,r3,24139
   40ec4:	1909883a 	add	r4,r3,r4
   40ec8:	20c00003 	ldbu	r3,0(r4)
   40ecc:	10c5c83a 	sub	r2,r2,r3
   40ed0:	f800283a 	ret
   40ed4:	00800604 	movi	r2,24
   40ed8:	00c00204 	movi	r3,8
   40edc:	003ff606 	br	40eb8 <__alt_data_end+0xfffceeb8>
   40ee0:	00800404 	movi	r2,16
   40ee4:	1007883a 	mov	r3,r2
   40ee8:	003ff306 	br	40eb8 <__alt_data_end+0xfffceeb8>

00040eec <__mulsi3>:
   40eec:	0005883a 	mov	r2,zero
   40ef0:	20000726 	beq	r4,zero,40f10 <__mulsi3+0x24>
   40ef4:	20c0004c 	andi	r3,r4,1
   40ef8:	2008d07a 	srli	r4,r4,1
   40efc:	18000126 	beq	r3,zero,40f04 <__mulsi3+0x18>
   40f00:	1145883a 	add	r2,r2,r5
   40f04:	294b883a 	add	r5,r5,r5
   40f08:	203ffa1e 	bne	r4,zero,40ef4 <__alt_data_end+0xfffceef4>
   40f0c:	f800283a 	ret
   40f10:	f800283a 	ret

00040f14 <_printf_r>:
   40f14:	defffd04 	addi	sp,sp,-12
   40f18:	2805883a 	mov	r2,r5
   40f1c:	dfc00015 	stw	ra,0(sp)
   40f20:	d9800115 	stw	r6,4(sp)
   40f24:	d9c00215 	stw	r7,8(sp)
   40f28:	21400217 	ldw	r5,8(r4)
   40f2c:	d9c00104 	addi	r7,sp,4
   40f30:	100d883a 	mov	r6,r2
   40f34:	004348c0 	call	4348c <___vfprintf_internal_r>
   40f38:	dfc00017 	ldw	ra,0(sp)
   40f3c:	dec00304 	addi	sp,sp,12
   40f40:	f800283a 	ret

00040f44 <printf>:
   40f44:	defffc04 	addi	sp,sp,-16
   40f48:	dfc00015 	stw	ra,0(sp)
   40f4c:	d9400115 	stw	r5,4(sp)
   40f50:	d9800215 	stw	r6,8(sp)
   40f54:	d9c00315 	stw	r7,12(sp)
   40f58:	00800174 	movhi	r2,5
   40f5c:	109f2d04 	addi	r2,r2,31924
   40f60:	10800017 	ldw	r2,0(r2)
   40f64:	200b883a 	mov	r5,r4
   40f68:	d9800104 	addi	r6,sp,4
   40f6c:	11000217 	ldw	r4,8(r2)
   40f70:	00457680 	call	45768 <__vfprintf_internal>
   40f74:	dfc00017 	ldw	ra,0(sp)
   40f78:	dec00404 	addi	sp,sp,16
   40f7c:	f800283a 	ret

00040f80 <_putchar_r>:
   40f80:	21800217 	ldw	r6,8(r4)
   40f84:	004a32c1 	jmpi	4a32c <_putc_r>

00040f88 <putchar>:
   40f88:	00800174 	movhi	r2,5
   40f8c:	109f2d04 	addi	r2,r2,31924
   40f90:	200b883a 	mov	r5,r4
   40f94:	11000017 	ldw	r4,0(r2)
   40f98:	21800217 	ldw	r6,8(r4)
   40f9c:	004a32c1 	jmpi	4a32c <_putc_r>

00040fa0 <_puts_r>:
   40fa0:	defff604 	addi	sp,sp,-40
   40fa4:	dc000715 	stw	r16,28(sp)
   40fa8:	2021883a 	mov	r16,r4
   40fac:	2809883a 	mov	r4,r5
   40fb0:	dc400815 	stw	r17,32(sp)
   40fb4:	dfc00915 	stw	ra,36(sp)
   40fb8:	2823883a 	mov	r17,r5
   40fbc:	00411380 	call	41138 <strlen>
   40fc0:	10c00044 	addi	r3,r2,1
   40fc4:	d8800115 	stw	r2,4(sp)
   40fc8:	00800174 	movhi	r2,5
   40fcc:	1097d304 	addi	r2,r2,24396
   40fd0:	d8800215 	stw	r2,8(sp)
   40fd4:	00800044 	movi	r2,1
   40fd8:	d8800315 	stw	r2,12(sp)
   40fdc:	00800084 	movi	r2,2
   40fe0:	dc400015 	stw	r17,0(sp)
   40fe4:	d8c00615 	stw	r3,24(sp)
   40fe8:	dec00415 	stw	sp,16(sp)
   40fec:	d8800515 	stw	r2,20(sp)
   40ff0:	80000226 	beq	r16,zero,40ffc <_puts_r+0x5c>
   40ff4:	80800e17 	ldw	r2,56(r16)
   40ff8:	10001426 	beq	r2,zero,4104c <_puts_r+0xac>
   40ffc:	81400217 	ldw	r5,8(r16)
   41000:	2880030b 	ldhu	r2,12(r5)
   41004:	10c8000c 	andi	r3,r2,8192
   41008:	1800061e 	bne	r3,zero,41024 <_puts_r+0x84>
   4100c:	29001917 	ldw	r4,100(r5)
   41010:	00f7ffc4 	movi	r3,-8193
   41014:	10880014 	ori	r2,r2,8192
   41018:	20c6703a 	and	r3,r4,r3
   4101c:	2880030d 	sth	r2,12(r5)
   41020:	28c01915 	stw	r3,100(r5)
   41024:	d9800404 	addi	r6,sp,16
   41028:	8009883a 	mov	r4,r16
   4102c:	0047cd00 	call	47cd0 <__sfvwrite_r>
   41030:	1000091e 	bne	r2,zero,41058 <_puts_r+0xb8>
   41034:	00800284 	movi	r2,10
   41038:	dfc00917 	ldw	ra,36(sp)
   4103c:	dc400817 	ldw	r17,32(sp)
   41040:	dc000717 	ldw	r16,28(sp)
   41044:	dec00a04 	addi	sp,sp,40
   41048:	f800283a 	ret
   4104c:	8009883a 	mov	r4,r16
   41050:	004784c0 	call	4784c <__sinit>
   41054:	003fe906 	br	40ffc <__alt_data_end+0xfffceffc>
   41058:	00bfffc4 	movi	r2,-1
   4105c:	003ff606 	br	41038 <__alt_data_end+0xfffcf038>

00041060 <puts>:
   41060:	00800174 	movhi	r2,5
   41064:	109f2d04 	addi	r2,r2,31924
   41068:	200b883a 	mov	r5,r4
   4106c:	11000017 	ldw	r4,0(r2)
   41070:	0040fa01 	jmpi	40fa0 <_puts_r>

00041074 <_sprintf_r>:
   41074:	deffe404 	addi	sp,sp,-112
   41078:	2807883a 	mov	r3,r5
   4107c:	dfc01a15 	stw	ra,104(sp)
   41080:	d9c01b15 	stw	r7,108(sp)
   41084:	00a00034 	movhi	r2,32768
   41088:	10bfffc4 	addi	r2,r2,-1
   4108c:	02008204 	movi	r8,520
   41090:	d8800215 	stw	r2,8(sp)
   41094:	d8800515 	stw	r2,20(sp)
   41098:	d9c01b04 	addi	r7,sp,108
   4109c:	d80b883a 	mov	r5,sp
   410a0:	00bfffc4 	movi	r2,-1
   410a4:	d8c00015 	stw	r3,0(sp)
   410a8:	d8c00415 	stw	r3,16(sp)
   410ac:	da00030d 	sth	r8,12(sp)
   410b0:	d880038d 	sth	r2,14(sp)
   410b4:	00411d00 	call	411d0 <___svfprintf_internal_r>
   410b8:	d8c00017 	ldw	r3,0(sp)
   410bc:	18000005 	stb	zero,0(r3)
   410c0:	dfc01a17 	ldw	ra,104(sp)
   410c4:	dec01c04 	addi	sp,sp,112
   410c8:	f800283a 	ret

000410cc <sprintf>:
   410cc:	deffe304 	addi	sp,sp,-116
   410d0:	2007883a 	mov	r3,r4
   410d4:	dfc01a15 	stw	ra,104(sp)
   410d8:	d9801b15 	stw	r6,108(sp)
   410dc:	d9c01c15 	stw	r7,112(sp)
   410e0:	01000174 	movhi	r4,5
   410e4:	211f2d04 	addi	r4,r4,31924
   410e8:	21000017 	ldw	r4,0(r4)
   410ec:	00a00034 	movhi	r2,32768
   410f0:	10bfffc4 	addi	r2,r2,-1
   410f4:	280d883a 	mov	r6,r5
   410f8:	02008204 	movi	r8,520
   410fc:	d8800215 	stw	r2,8(sp)
   41100:	d8800515 	stw	r2,20(sp)
   41104:	d9c01b04 	addi	r7,sp,108
   41108:	d80b883a 	mov	r5,sp
   4110c:	00bfffc4 	movi	r2,-1
   41110:	d8c00015 	stw	r3,0(sp)
   41114:	d8c00415 	stw	r3,16(sp)
   41118:	da00030d 	sth	r8,12(sp)
   4111c:	d880038d 	sth	r2,14(sp)
   41120:	00411d00 	call	411d0 <___svfprintf_internal_r>
   41124:	d8c00017 	ldw	r3,0(sp)
   41128:	18000005 	stb	zero,0(r3)
   4112c:	dfc01a17 	ldw	ra,104(sp)
   41130:	dec01d04 	addi	sp,sp,116
   41134:	f800283a 	ret

00041138 <strlen>:
   41138:	208000cc 	andi	r2,r4,3
   4113c:	10002026 	beq	r2,zero,411c0 <strlen+0x88>
   41140:	20800007 	ldb	r2,0(r4)
   41144:	10002026 	beq	r2,zero,411c8 <strlen+0x90>
   41148:	2005883a 	mov	r2,r4
   4114c:	00000206 	br	41158 <strlen+0x20>
   41150:	10c00007 	ldb	r3,0(r2)
   41154:	18001826 	beq	r3,zero,411b8 <strlen+0x80>
   41158:	10800044 	addi	r2,r2,1
   4115c:	10c000cc 	andi	r3,r2,3
   41160:	183ffb1e 	bne	r3,zero,41150 <__alt_data_end+0xfffcf150>
   41164:	10c00017 	ldw	r3,0(r2)
   41168:	01ffbff4 	movhi	r7,65279
   4116c:	39ffbfc4 	addi	r7,r7,-257
   41170:	00ca303a 	nor	r5,zero,r3
   41174:	01a02074 	movhi	r6,32897
   41178:	19c7883a 	add	r3,r3,r7
   4117c:	31a02004 	addi	r6,r6,-32640
   41180:	1946703a 	and	r3,r3,r5
   41184:	1986703a 	and	r3,r3,r6
   41188:	1800091e 	bne	r3,zero,411b0 <strlen+0x78>
   4118c:	10800104 	addi	r2,r2,4
   41190:	10c00017 	ldw	r3,0(r2)
   41194:	19cb883a 	add	r5,r3,r7
   41198:	00c6303a 	nor	r3,zero,r3
   4119c:	28c6703a 	and	r3,r5,r3
   411a0:	1986703a 	and	r3,r3,r6
   411a4:	183ff926 	beq	r3,zero,4118c <__alt_data_end+0xfffcf18c>
   411a8:	00000106 	br	411b0 <strlen+0x78>
   411ac:	10800044 	addi	r2,r2,1
   411b0:	10c00007 	ldb	r3,0(r2)
   411b4:	183ffd1e 	bne	r3,zero,411ac <__alt_data_end+0xfffcf1ac>
   411b8:	1105c83a 	sub	r2,r2,r4
   411bc:	f800283a 	ret
   411c0:	2005883a 	mov	r2,r4
   411c4:	003fe706 	br	41164 <__alt_data_end+0xfffcf164>
   411c8:	0005883a 	mov	r2,zero
   411cc:	f800283a 	ret

000411d0 <___svfprintf_internal_r>:
   411d0:	deffb704 	addi	sp,sp,-292
   411d4:	dfc04815 	stw	ra,288(sp)
   411d8:	ddc04615 	stw	r23,280(sp)
   411dc:	d9402d15 	stw	r5,180(sp)
   411e0:	d9003915 	stw	r4,228(sp)
   411e4:	302f883a 	mov	r23,r6
   411e8:	d9c02e15 	stw	r7,184(sp)
   411ec:	df004715 	stw	fp,284(sp)
   411f0:	dd804515 	stw	r22,276(sp)
   411f4:	dd404415 	stw	r21,272(sp)
   411f8:	dd004315 	stw	r20,268(sp)
   411fc:	dcc04215 	stw	r19,264(sp)
   41200:	dc804115 	stw	r18,260(sp)
   41204:	dc404015 	stw	r17,256(sp)
   41208:	dc003f15 	stw	r16,252(sp)
   4120c:	00483cc0 	call	483cc <_localeconv_r>
   41210:	10800017 	ldw	r2,0(r2)
   41214:	1009883a 	mov	r4,r2
   41218:	d8803415 	stw	r2,208(sp)
   4121c:	00411380 	call	41138 <strlen>
   41220:	d8c02d17 	ldw	r3,180(sp)
   41224:	d8803815 	stw	r2,224(sp)
   41228:	1880030b 	ldhu	r2,12(r3)
   4122c:	1080200c 	andi	r2,r2,128
   41230:	10000226 	beq	r2,zero,4123c <___svfprintf_internal_r+0x6c>
   41234:	18800417 	ldw	r2,16(r3)
   41238:	1006b126 	beq	r2,zero,42d00 <___svfprintf_internal_r+0x1b30>
   4123c:	dcc03917 	ldw	r19,228(sp)
   41240:	d8c00404 	addi	r3,sp,16
   41244:	05400174 	movhi	r21,5
   41248:	d9001e04 	addi	r4,sp,120
   4124c:	ad57e484 	addi	r21,r21,24466
   41250:	d8c01e15 	stw	r3,120(sp)
   41254:	d8002015 	stw	zero,128(sp)
   41258:	d8001f15 	stw	zero,124(sp)
   4125c:	d8003315 	stw	zero,204(sp)
   41260:	d8003615 	stw	zero,216(sp)
   41264:	d8003715 	stw	zero,220(sp)
   41268:	1811883a 	mov	r8,r3
   4126c:	d8003a15 	stw	zero,232(sp)
   41270:	d8003b15 	stw	zero,236(sp)
   41274:	d8002f15 	stw	zero,188(sp)
   41278:	d9002815 	stw	r4,160(sp)
   4127c:	b8800007 	ldb	r2,0(r23)
   41280:	10027726 	beq	r2,zero,41c60 <___svfprintf_internal_r+0xa90>
   41284:	00c00944 	movi	r3,37
   41288:	b823883a 	mov	r17,r23
   4128c:	10c0021e 	bne	r2,r3,41298 <___svfprintf_internal_r+0xc8>
   41290:	00001406 	br	412e4 <___svfprintf_internal_r+0x114>
   41294:	10c00326 	beq	r2,r3,412a4 <___svfprintf_internal_r+0xd4>
   41298:	8c400044 	addi	r17,r17,1
   4129c:	88800007 	ldb	r2,0(r17)
   412a0:	103ffc1e 	bne	r2,zero,41294 <__alt_data_end+0xfffcf294>
   412a4:	8de1c83a 	sub	r16,r17,r23
   412a8:	80000e26 	beq	r16,zero,412e4 <___svfprintf_internal_r+0x114>
   412ac:	d8c02017 	ldw	r3,128(sp)
   412b0:	d8801f17 	ldw	r2,124(sp)
   412b4:	45c00015 	stw	r23,0(r8)
   412b8:	1c07883a 	add	r3,r3,r16
   412bc:	10800044 	addi	r2,r2,1
   412c0:	d8c02015 	stw	r3,128(sp)
   412c4:	44000115 	stw	r16,4(r8)
   412c8:	d8801f15 	stw	r2,124(sp)
   412cc:	00c001c4 	movi	r3,7
   412d0:	18809916 	blt	r3,r2,41538 <___svfprintf_internal_r+0x368>
   412d4:	42000204 	addi	r8,r8,8
   412d8:	d9402f17 	ldw	r5,188(sp)
   412dc:	2c0b883a 	add	r5,r5,r16
   412e0:	d9402f15 	stw	r5,188(sp)
   412e4:	88800007 	ldb	r2,0(r17)
   412e8:	10009a26 	beq	r2,zero,41554 <___svfprintf_internal_r+0x384>
   412ec:	8dc00044 	addi	r23,r17,1
   412f0:	8c400047 	ldb	r17,1(r17)
   412f4:	0021883a 	mov	r16,zero
   412f8:	00bfffc4 	movi	r2,-1
   412fc:	0025883a 	mov	r18,zero
   41300:	dc002905 	stb	r16,164(sp)
   41304:	d8002785 	stb	zero,158(sp)
   41308:	d8002b05 	stb	zero,172(sp)
   4130c:	d8802a15 	stw	r2,168(sp)
   41310:	d8003115 	stw	zero,196(sp)
   41314:	05001604 	movi	r20,88
   41318:	05800244 	movi	r22,9
   4131c:	4039883a 	mov	fp,r8
   41320:	9021883a 	mov	r16,r18
   41324:	bdc00044 	addi	r23,r23,1
   41328:	88bff804 	addi	r2,r17,-32
   4132c:	a0831e36 	bltu	r20,r2,41fa8 <___svfprintf_internal_r+0xdd8>
   41330:	100490ba 	slli	r2,r2,2
   41334:	00c00134 	movhi	r3,4
   41338:	18c4d204 	addi	r3,r3,4936
   4133c:	10c5883a 	add	r2,r2,r3
   41340:	10800017 	ldw	r2,0(r2)
   41344:	1000683a 	jmp	r2
   41348:	00041ef0 	cmpltui	zero,zero,4219
   4134c:	00041fa8 	cmpgeui	zero,zero,4222
   41350:	00041fa8 	cmpgeui	zero,zero,4222
   41354:	00041ee4 	muli	zero,zero,4219
   41358:	00041fa8 	cmpgeui	zero,zero,4222
   4135c:	00041fa8 	cmpgeui	zero,zero,4222
   41360:	00041fa8 	cmpgeui	zero,zero,4222
   41364:	00041fa8 	cmpgeui	zero,zero,4222
   41368:	00041fa8 	cmpgeui	zero,zero,4222
   4136c:	00041fa8 	cmpgeui	zero,zero,4222
   41370:	000415b0 	cmpltui	zero,zero,4182
   41374:	00041df4 	movhi	zero,4215
   41378:	00041fa8 	cmpgeui	zero,zero,4222
   4137c:	000414bc 	xorhi	zero,zero,4178
   41380:	000415d4 	movui	zero,4183
   41384:	00041fa8 	cmpgeui	zero,zero,4222
   41388:	00041660 	cmpeqi	zero,zero,4185
   4138c:	00041624 	muli	zero,zero,4184
   41390:	00041624 	muli	zero,zero,4184
   41394:	00041624 	muli	zero,zero,4184
   41398:	00041624 	muli	zero,zero,4184
   4139c:	00041624 	muli	zero,zero,4184
   413a0:	00041624 	muli	zero,zero,4184
   413a4:	00041624 	muli	zero,zero,4184
   413a8:	00041624 	muli	zero,zero,4184
   413ac:	00041624 	muli	zero,zero,4184
   413b0:	00041fa8 	cmpgeui	zero,zero,4222
   413b4:	00041fa8 	cmpgeui	zero,zero,4222
   413b8:	00041fa8 	cmpgeui	zero,zero,4222
   413bc:	00041fa8 	cmpgeui	zero,zero,4222
   413c0:	00041fa8 	cmpgeui	zero,zero,4222
   413c4:	00041fa8 	cmpgeui	zero,zero,4222
   413c8:	00041fa8 	cmpgeui	zero,zero,4222
   413cc:	00041fa8 	cmpgeui	zero,zero,4222
   413d0:	00041fa8 	cmpgeui	zero,zero,4222
   413d4:	00041fa8 	cmpgeui	zero,zero,4222
   413d8:	00041724 	muli	zero,zero,4188
   413dc:	0004166c 	andhi	zero,zero,4185
   413e0:	00041fa8 	cmpgeui	zero,zero,4222
   413e4:	0004166c 	andhi	zero,zero,4185
   413e8:	00041fa8 	cmpgeui	zero,zero,4222
   413ec:	00041fa8 	cmpgeui	zero,zero,4222
   413f0:	00041fa8 	cmpgeui	zero,zero,4222
   413f4:	00041fa8 	cmpgeui	zero,zero,4222
   413f8:	00041718 	cmpnei	zero,zero,4188
   413fc:	00041fa8 	cmpgeui	zero,zero,4222
   41400:	00041fa8 	cmpgeui	zero,zero,4222
   41404:	000417ec 	andhi	zero,zero,4191
   41408:	00041fa8 	cmpgeui	zero,zero,4222
   4140c:	00041fa8 	cmpgeui	zero,zero,4222
   41410:	00041fa8 	cmpgeui	zero,zero,4222
   41414:	00041fa8 	cmpgeui	zero,zero,4222
   41418:	00041fa8 	cmpgeui	zero,zero,4222
   4141c:	00041c68 	cmpgeui	zero,zero,4209
   41420:	00041fa8 	cmpgeui	zero,zero,4222
   41424:	00041fa8 	cmpgeui	zero,zero,4222
   41428:	00041cd4 	movui	zero,4211
   4142c:	00041fa8 	cmpgeui	zero,zero,4222
   41430:	00041fa8 	cmpgeui	zero,zero,4222
   41434:	00041fa8 	cmpgeui	zero,zero,4222
   41438:	00041fa8 	cmpgeui	zero,zero,4222
   4143c:	00041fa8 	cmpgeui	zero,zero,4222
   41440:	00041fa8 	cmpgeui	zero,zero,4222
   41444:	00041fa8 	cmpgeui	zero,zero,4222
   41448:	00041fa8 	cmpgeui	zero,zero,4222
   4144c:	00041fa8 	cmpgeui	zero,zero,4222
   41450:	00041fa8 	cmpgeui	zero,zero,4222
   41454:	00041d90 	cmplti	zero,zero,4214
   41458:	00041f10 	cmplti	zero,zero,4220
   4145c:	0004166c 	andhi	zero,zero,4185
   41460:	0004166c 	andhi	zero,zero,4185
   41464:	0004166c 	andhi	zero,zero,4185
   41468:	00041f84 	movi	zero,4222
   4146c:	00041f10 	cmplti	zero,zero,4220
   41470:	00041fa8 	cmpgeui	zero,zero,4222
   41474:	00041fa8 	cmpgeui	zero,zero,4222
   41478:	00041f30 	cmpltui	zero,zero,4220
   4147c:	00041fa8 	cmpgeui	zero,zero,4222
   41480:	00041f44 	movi	zero,4221
   41484:	00041dd4 	movui	zero,4215
   41488:	000414c8 	cmpgei	zero,zero,4179
   4148c:	00041e0c 	andi	zero,zero,4216
   41490:	00041fa8 	cmpgeui	zero,zero,4222
   41494:	00041e18 	cmpnei	zero,zero,4216
   41498:	00041fa8 	cmpgeui	zero,zero,4222
   4149c:	00041e7c 	xorhi	zero,zero,4217
   414a0:	00041fa8 	cmpgeui	zero,zero,4222
   414a4:	00041fa8 	cmpgeui	zero,zero,4222
   414a8:	00041e9c 	xori	zero,zero,4218
   414ac:	d8c03117 	ldw	r3,196(sp)
   414b0:	d8802e15 	stw	r2,184(sp)
   414b4:	00c7c83a 	sub	r3,zero,r3
   414b8:	d8c03115 	stw	r3,196(sp)
   414bc:	84000114 	ori	r16,r16,4
   414c0:	bc400007 	ldb	r17,0(r23)
   414c4:	003f9706 	br	41324 <__alt_data_end+0xfffcf324>
   414c8:	00800c04 	movi	r2,48
   414cc:	d8802705 	stb	r2,156(sp)
   414d0:	00801e04 	movi	r2,120
   414d4:	d8802745 	stb	r2,157(sp)
   414d8:	d9002a17 	ldw	r4,168(sp)
   414dc:	d8802e17 	ldw	r2,184(sp)
   414e0:	d8002785 	stb	zero,158(sp)
   414e4:	e011883a 	mov	r8,fp
   414e8:	10c00104 	addi	r3,r2,4
   414ec:	15000017 	ldw	r20,0(r2)
   414f0:	002d883a 	mov	r22,zero
   414f4:	80800094 	ori	r2,r16,2
   414f8:	2002b616 	blt	r4,zero,41fd4 <___svfprintf_internal_r+0xe04>
   414fc:	00bfdfc4 	movi	r2,-129
   41500:	80a4703a 	and	r18,r16,r2
   41504:	d8c02e15 	stw	r3,184(sp)
   41508:	94800094 	ori	r18,r18,2
   4150c:	a002a01e 	bne	r20,zero,41f90 <___svfprintf_internal_r+0xdc0>
   41510:	01400174 	movhi	r5,5
   41514:	2957dd04 	addi	r5,r5,24436
   41518:	d9403a15 	stw	r5,232(sp)
   4151c:	04401e04 	movi	r17,120
   41520:	d8c02a17 	ldw	r3,168(sp)
   41524:	0039883a 	mov	fp,zero
   41528:	1801e626 	beq	r3,zero,41cc4 <___svfprintf_internal_r+0xaf4>
   4152c:	0029883a 	mov	r20,zero
   41530:	002d883a 	mov	r22,zero
   41534:	00020506 	br	41d4c <___svfprintf_internal_r+0xb7c>
   41538:	d9402d17 	ldw	r5,180(sp)
   4153c:	d9801e04 	addi	r6,sp,120
   41540:	9809883a 	mov	r4,r19
   41544:	004acd80 	call	4acd8 <__ssprint_r>
   41548:	1000081e 	bne	r2,zero,4156c <___svfprintf_internal_r+0x39c>
   4154c:	da000404 	addi	r8,sp,16
   41550:	003f6106 	br	412d8 <__alt_data_end+0xfffcf2d8>
   41554:	d8802017 	ldw	r2,128(sp)
   41558:	10000426 	beq	r2,zero,4156c <___svfprintf_internal_r+0x39c>
   4155c:	d9402d17 	ldw	r5,180(sp)
   41560:	d9003917 	ldw	r4,228(sp)
   41564:	d9801e04 	addi	r6,sp,120
   41568:	004acd80 	call	4acd8 <__ssprint_r>
   4156c:	d8802d17 	ldw	r2,180(sp)
   41570:	10c0030b 	ldhu	r3,12(r2)
   41574:	d8802f17 	ldw	r2,188(sp)
   41578:	18c0100c 	andi	r3,r3,64
   4157c:	1806251e 	bne	r3,zero,42e14 <___svfprintf_internal_r+0x1c44>
   41580:	dfc04817 	ldw	ra,288(sp)
   41584:	df004717 	ldw	fp,284(sp)
   41588:	ddc04617 	ldw	r23,280(sp)
   4158c:	dd804517 	ldw	r22,276(sp)
   41590:	dd404417 	ldw	r21,272(sp)
   41594:	dd004317 	ldw	r20,268(sp)
   41598:	dcc04217 	ldw	r19,264(sp)
   4159c:	dc804117 	ldw	r18,260(sp)
   415a0:	dc404017 	ldw	r17,256(sp)
   415a4:	dc003f17 	ldw	r16,252(sp)
   415a8:	dec04904 	addi	sp,sp,292
   415ac:	f800283a 	ret
   415b0:	d9002e17 	ldw	r4,184(sp)
   415b4:	d9402e17 	ldw	r5,184(sp)
   415b8:	21000017 	ldw	r4,0(r4)
   415bc:	28800104 	addi	r2,r5,4
   415c0:	d9003115 	stw	r4,196(sp)
   415c4:	203fb916 	blt	r4,zero,414ac <__alt_data_end+0xfffcf4ac>
   415c8:	d8802e15 	stw	r2,184(sp)
   415cc:	bc400007 	ldb	r17,0(r23)
   415d0:	003f5406 	br	41324 <__alt_data_end+0xfffcf324>
   415d4:	bc400007 	ldb	r17,0(r23)
   415d8:	01000a84 	movi	r4,42
   415dc:	b8c00044 	addi	r3,r23,1
   415e0:	89076926 	beq	r17,r4,43388 <___svfprintf_internal_r+0x21b8>
   415e4:	8cbff404 	addi	r18,r17,-48
   415e8:	b486b936 	bltu	r22,r18,430d0 <___svfprintf_internal_r+0x1f00>
   415ec:	0009883a 	mov	r4,zero
   415f0:	1823883a 	mov	r17,r3
   415f4:	01400284 	movi	r5,10
   415f8:	0040eec0 	call	40eec <__mulsi3>
   415fc:	88c00007 	ldb	r3,0(r17)
   41600:	1489883a 	add	r4,r2,r18
   41604:	8dc00044 	addi	r23,r17,1
   41608:	1cbff404 	addi	r18,r3,-48
   4160c:	b823883a 	mov	r17,r23
   41610:	b4bff82e 	bgeu	r22,r18,415f4 <__alt_data_end+0xfffcf5f4>
   41614:	1823883a 	mov	r17,r3
   41618:	20060416 	blt	r4,zero,42e2c <___svfprintf_internal_r+0x1c5c>
   4161c:	d9002a15 	stw	r4,168(sp)
   41620:	003f4106 	br	41328 <__alt_data_end+0xfffcf328>
   41624:	8cbff404 	addi	r18,r17,-48
   41628:	d8003115 	stw	zero,196(sp)
   4162c:	0009883a 	mov	r4,zero
   41630:	b823883a 	mov	r17,r23
   41634:	01400284 	movi	r5,10
   41638:	0040eec0 	call	40eec <__mulsi3>
   4163c:	88c00007 	ldb	r3,0(r17)
   41640:	9089883a 	add	r4,r18,r2
   41644:	bdc00044 	addi	r23,r23,1
   41648:	1cbff404 	addi	r18,r3,-48
   4164c:	b823883a 	mov	r17,r23
   41650:	b4bff82e 	bgeu	r22,r18,41634 <__alt_data_end+0xfffcf634>
   41654:	1823883a 	mov	r17,r3
   41658:	d9003115 	stw	r4,196(sp)
   4165c:	003f3206 	br	41328 <__alt_data_end+0xfffcf328>
   41660:	84002014 	ori	r16,r16,128
   41664:	bc400007 	ldb	r17,0(r23)
   41668:	003f2e06 	br	41324 <__alt_data_end+0xfffcf324>
   4166c:	8025883a 	mov	r18,r16
   41670:	dc002903 	ldbu	r16,164(sp)
   41674:	e011883a 	mov	r8,fp
   41678:	84003fcc 	andi	r16,r16,255
   4167c:	8007721e 	bne	r16,zero,43448 <___svfprintf_internal_r+0x2278>
   41680:	9080020c 	andi	r2,r18,8
   41684:	1004a526 	beq	r2,zero,4291c <___svfprintf_internal_r+0x174c>
   41688:	d9002e17 	ldw	r4,184(sp)
   4168c:	d9402e17 	ldw	r5,184(sp)
   41690:	d8802e17 	ldw	r2,184(sp)
   41694:	21000017 	ldw	r4,0(r4)
   41698:	29400117 	ldw	r5,4(r5)
   4169c:	10800204 	addi	r2,r2,8
   416a0:	d9003615 	stw	r4,216(sp)
   416a4:	d9403715 	stw	r5,220(sp)
   416a8:	d8802e15 	stw	r2,184(sp)
   416ac:	d9003617 	ldw	r4,216(sp)
   416b0:	d9403717 	ldw	r5,220(sp)
   416b4:	da003e15 	stw	r8,248(sp)
   416b8:	04000044 	movi	r16,1
   416bc:	004a9f80 	call	4a9f8 <__fpclassifyd>
   416c0:	da003e17 	ldw	r8,248(sp)
   416c4:	1404731e 	bne	r2,r16,42894 <___svfprintf_internal_r+0x16c4>
   416c8:	d9003617 	ldw	r4,216(sp)
   416cc:	d9403717 	ldw	r5,220(sp)
   416d0:	000d883a 	mov	r6,zero
   416d4:	000f883a 	mov	r7,zero
   416d8:	005022c0 	call	5022c <__ledf2>
   416dc:	da003e17 	ldw	r8,248(sp)
   416e0:	10061b16 	blt	r2,zero,42f50 <___svfprintf_internal_r+0x1d80>
   416e4:	df002783 	ldbu	fp,158(sp)
   416e8:	008011c4 	movi	r2,71
   416ec:	1445810e 	bge	r2,r17,42cf4 <___svfprintf_internal_r+0x1b24>
   416f0:	04000174 	movhi	r16,5
   416f4:	8417d504 	addi	r16,r16,24404
   416f8:	00c000c4 	movi	r3,3
   416fc:	00bfdfc4 	movi	r2,-129
   41700:	d8c02915 	stw	r3,164(sp)
   41704:	90a4703a 	and	r18,r18,r2
   41708:	d8c02b15 	stw	r3,172(sp)
   4170c:	d8002a15 	stw	zero,168(sp)
   41710:	d8003215 	stw	zero,200(sp)
   41714:	00006c06 	br	418c8 <___svfprintf_internal_r+0x6f8>
   41718:	84000214 	ori	r16,r16,8
   4171c:	bc400007 	ldb	r17,0(r23)
   41720:	003f0006 	br	41324 <__alt_data_end+0xfffcf324>
   41724:	8025883a 	mov	r18,r16
   41728:	dc002903 	ldbu	r16,164(sp)
   4172c:	e011883a 	mov	r8,fp
   41730:	84003fcc 	andi	r16,r16,255
   41734:	80073f1e 	bne	r16,zero,43434 <___svfprintf_internal_r+0x2264>
   41738:	94800414 	ori	r18,r18,16
   4173c:	9080080c 	andi	r2,r18,32
   41740:	1003bb26 	beq	r2,zero,42630 <___svfprintf_internal_r+0x1460>
   41744:	d9002e17 	ldw	r4,184(sp)
   41748:	20800117 	ldw	r2,4(r4)
   4174c:	25000017 	ldw	r20,0(r4)
   41750:	21000204 	addi	r4,r4,8
   41754:	d9002e15 	stw	r4,184(sp)
   41758:	102d883a 	mov	r22,r2
   4175c:	1003bd16 	blt	r2,zero,42654 <___svfprintf_internal_r+0x1484>
   41760:	d9002a17 	ldw	r4,168(sp)
   41764:	df002783 	ldbu	fp,158(sp)
   41768:	2003d016 	blt	r4,zero,426ac <___svfprintf_internal_r+0x14dc>
   4176c:	00ffdfc4 	movi	r3,-129
   41770:	a584b03a 	or	r2,r20,r22
   41774:	90e4703a 	and	r18,r18,r3
   41778:	10015026 	beq	r2,zero,41cbc <___svfprintf_internal_r+0xaec>
   4177c:	b0037026 	beq	r22,zero,42540 <___svfprintf_internal_r+0x1370>
   41780:	dc402915 	stw	r17,164(sp)
   41784:	dc001e04 	addi	r16,sp,120
   41788:	b023883a 	mov	r17,r22
   4178c:	402d883a 	mov	r22,r8
   41790:	a009883a 	mov	r4,r20
   41794:	880b883a 	mov	r5,r17
   41798:	01800284 	movi	r6,10
   4179c:	000f883a 	mov	r7,zero
   417a0:	004e8880 	call	4e888 <__umoddi3>
   417a4:	10800c04 	addi	r2,r2,48
   417a8:	843fffc4 	addi	r16,r16,-1
   417ac:	a009883a 	mov	r4,r20
   417b0:	880b883a 	mov	r5,r17
   417b4:	80800005 	stb	r2,0(r16)
   417b8:	01800284 	movi	r6,10
   417bc:	000f883a 	mov	r7,zero
   417c0:	004e28c0 	call	4e28c <__udivdi3>
   417c4:	1029883a 	mov	r20,r2
   417c8:	10c4b03a 	or	r2,r2,r3
   417cc:	1823883a 	mov	r17,r3
   417d0:	103fef1e 	bne	r2,zero,41790 <__alt_data_end+0xfffcf790>
   417d4:	d8c02817 	ldw	r3,160(sp)
   417d8:	dc402917 	ldw	r17,164(sp)
   417dc:	b011883a 	mov	r8,r22
   417e0:	1c07c83a 	sub	r3,r3,r16
   417e4:	d8c02b15 	stw	r3,172(sp)
   417e8:	00003106 	br	418b0 <___svfprintf_internal_r+0x6e0>
   417ec:	8025883a 	mov	r18,r16
   417f0:	dc002903 	ldbu	r16,164(sp)
   417f4:	e011883a 	mov	r8,fp
   417f8:	84003fcc 	andi	r16,r16,255
   417fc:	80070a1e 	bne	r16,zero,43428 <___svfprintf_internal_r+0x2258>
   41800:	94800414 	ori	r18,r18,16
   41804:	9080080c 	andi	r2,r18,32
   41808:	1002f626 	beq	r2,zero,423e4 <___svfprintf_internal_r+0x1214>
   4180c:	d9002e17 	ldw	r4,184(sp)
   41810:	d9402a17 	ldw	r5,168(sp)
   41814:	d8002785 	stb	zero,158(sp)
   41818:	20800204 	addi	r2,r4,8
   4181c:	25000017 	ldw	r20,0(r4)
   41820:	25800117 	ldw	r22,4(r4)
   41824:	28043716 	blt	r5,zero,42904 <___svfprintf_internal_r+0x1734>
   41828:	013fdfc4 	movi	r4,-129
   4182c:	a586b03a 	or	r3,r20,r22
   41830:	d8802e15 	stw	r2,184(sp)
   41834:	9124703a 	and	r18,r18,r4
   41838:	1802f71e 	bne	r3,zero,42418 <___svfprintf_internal_r+0x1248>
   4183c:	d9402a17 	ldw	r5,168(sp)
   41840:	0039883a 	mov	fp,zero
   41844:	2806df26 	beq	r5,zero,433c4 <___svfprintf_internal_r+0x21f4>
   41848:	0029883a 	mov	r20,zero
   4184c:	002d883a 	mov	r22,zero
   41850:	dc001e04 	addi	r16,sp,120
   41854:	a006d0fa 	srli	r3,r20,3
   41858:	b008977a 	slli	r4,r22,29
   4185c:	b02cd0fa 	srli	r22,r22,3
   41860:	a50001cc 	andi	r20,r20,7
   41864:	a0800c04 	addi	r2,r20,48
   41868:	843fffc4 	addi	r16,r16,-1
   4186c:	20e8b03a 	or	r20,r4,r3
   41870:	80800005 	stb	r2,0(r16)
   41874:	a586b03a 	or	r3,r20,r22
   41878:	183ff61e 	bne	r3,zero,41854 <__alt_data_end+0xfffcf854>
   4187c:	90c0004c 	andi	r3,r18,1
   41880:	18013f26 	beq	r3,zero,41d80 <___svfprintf_internal_r+0xbb0>
   41884:	10803fcc 	andi	r2,r2,255
   41888:	1080201c 	xori	r2,r2,128
   4188c:	10bfe004 	addi	r2,r2,-128
   41890:	00c00c04 	movi	r3,48
   41894:	10c13a26 	beq	r2,r3,41d80 <___svfprintf_internal_r+0xbb0>
   41898:	80ffffc5 	stb	r3,-1(r16)
   4189c:	d8c02817 	ldw	r3,160(sp)
   418a0:	80bfffc4 	addi	r2,r16,-1
   418a4:	1021883a 	mov	r16,r2
   418a8:	1887c83a 	sub	r3,r3,r2
   418ac:	d8c02b15 	stw	r3,172(sp)
   418b0:	d8802b17 	ldw	r2,172(sp)
   418b4:	d9002a17 	ldw	r4,168(sp)
   418b8:	1100010e 	bge	r2,r4,418c0 <___svfprintf_internal_r+0x6f0>
   418bc:	2005883a 	mov	r2,r4
   418c0:	d8802915 	stw	r2,164(sp)
   418c4:	d8003215 	stw	zero,200(sp)
   418c8:	e7003fcc 	andi	fp,fp,255
   418cc:	e700201c 	xori	fp,fp,128
   418d0:	e73fe004 	addi	fp,fp,-128
   418d4:	e0000326 	beq	fp,zero,418e4 <___svfprintf_internal_r+0x714>
   418d8:	d8c02917 	ldw	r3,164(sp)
   418dc:	18c00044 	addi	r3,r3,1
   418e0:	d8c02915 	stw	r3,164(sp)
   418e4:	90c0008c 	andi	r3,r18,2
   418e8:	d8c02c15 	stw	r3,176(sp)
   418ec:	18000326 	beq	r3,zero,418fc <___svfprintf_internal_r+0x72c>
   418f0:	d8c02917 	ldw	r3,164(sp)
   418f4:	18c00084 	addi	r3,r3,2
   418f8:	d8c02915 	stw	r3,164(sp)
   418fc:	90c0210c 	andi	r3,r18,132
   41900:	d8c03015 	stw	r3,192(sp)
   41904:	1801c31e 	bne	r3,zero,42014 <___svfprintf_internal_r+0xe44>
   41908:	d9003117 	ldw	r4,196(sp)
   4190c:	d8c02917 	ldw	r3,164(sp)
   41910:	20e9c83a 	sub	r20,r4,r3
   41914:	0501bf0e 	bge	zero,r20,42014 <___svfprintf_internal_r+0xe44>
   41918:	02400404 	movi	r9,16
   4191c:	d8c02017 	ldw	r3,128(sp)
   41920:	d8801f17 	ldw	r2,124(sp)
   41924:	4d053d0e 	bge	r9,r20,42e1c <___svfprintf_internal_r+0x1c4c>
   41928:	01400174 	movhi	r5,5
   4192c:	2957e884 	addi	r5,r5,24482
   41930:	dc403c15 	stw	r17,240(sp)
   41934:	d9403515 	stw	r5,212(sp)
   41938:	a023883a 	mov	r17,r20
   4193c:	482d883a 	mov	r22,r9
   41940:	9029883a 	mov	r20,r18
   41944:	070001c4 	movi	fp,7
   41948:	8025883a 	mov	r18,r16
   4194c:	dc002d17 	ldw	r16,180(sp)
   41950:	00000306 	br	41960 <___svfprintf_internal_r+0x790>
   41954:	8c7ffc04 	addi	r17,r17,-16
   41958:	42000204 	addi	r8,r8,8
   4195c:	b440130e 	bge	r22,r17,419ac <___svfprintf_internal_r+0x7dc>
   41960:	01000174 	movhi	r4,5
   41964:	18c00404 	addi	r3,r3,16
   41968:	10800044 	addi	r2,r2,1
   4196c:	2117e884 	addi	r4,r4,24482
   41970:	41000015 	stw	r4,0(r8)
   41974:	45800115 	stw	r22,4(r8)
   41978:	d8c02015 	stw	r3,128(sp)
   4197c:	d8801f15 	stw	r2,124(sp)
   41980:	e0bff40e 	bge	fp,r2,41954 <__alt_data_end+0xfffcf954>
   41984:	d9801e04 	addi	r6,sp,120
   41988:	800b883a 	mov	r5,r16
   4198c:	9809883a 	mov	r4,r19
   41990:	004acd80 	call	4acd8 <__ssprint_r>
   41994:	103ef51e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   41998:	8c7ffc04 	addi	r17,r17,-16
   4199c:	d8c02017 	ldw	r3,128(sp)
   419a0:	d8801f17 	ldw	r2,124(sp)
   419a4:	da000404 	addi	r8,sp,16
   419a8:	b47fed16 	blt	r22,r17,41960 <__alt_data_end+0xfffcf960>
   419ac:	9021883a 	mov	r16,r18
   419b0:	a025883a 	mov	r18,r20
   419b4:	8829883a 	mov	r20,r17
   419b8:	dc403c17 	ldw	r17,240(sp)
   419bc:	d9403517 	ldw	r5,212(sp)
   419c0:	a0c7883a 	add	r3,r20,r3
   419c4:	10800044 	addi	r2,r2,1
   419c8:	41400015 	stw	r5,0(r8)
   419cc:	45000115 	stw	r20,4(r8)
   419d0:	d8c02015 	stw	r3,128(sp)
   419d4:	d8801f15 	stw	r2,124(sp)
   419d8:	010001c4 	movi	r4,7
   419dc:	2082c116 	blt	r4,r2,424e4 <___svfprintf_internal_r+0x1314>
   419e0:	df002787 	ldb	fp,158(sp)
   419e4:	42000204 	addi	r8,r8,8
   419e8:	e0000c26 	beq	fp,zero,41a1c <___svfprintf_internal_r+0x84c>
   419ec:	d8801f17 	ldw	r2,124(sp)
   419f0:	d9002784 	addi	r4,sp,158
   419f4:	18c00044 	addi	r3,r3,1
   419f8:	10800044 	addi	r2,r2,1
   419fc:	41000015 	stw	r4,0(r8)
   41a00:	01000044 	movi	r4,1
   41a04:	41000115 	stw	r4,4(r8)
   41a08:	d8c02015 	stw	r3,128(sp)
   41a0c:	d8801f15 	stw	r2,124(sp)
   41a10:	010001c4 	movi	r4,7
   41a14:	20825a16 	blt	r4,r2,42380 <___svfprintf_internal_r+0x11b0>
   41a18:	42000204 	addi	r8,r8,8
   41a1c:	d8802c17 	ldw	r2,176(sp)
   41a20:	10000c26 	beq	r2,zero,41a54 <___svfprintf_internal_r+0x884>
   41a24:	d8801f17 	ldw	r2,124(sp)
   41a28:	d9002704 	addi	r4,sp,156
   41a2c:	18c00084 	addi	r3,r3,2
   41a30:	10800044 	addi	r2,r2,1
   41a34:	41000015 	stw	r4,0(r8)
   41a38:	01000084 	movi	r4,2
   41a3c:	41000115 	stw	r4,4(r8)
   41a40:	d8c02015 	stw	r3,128(sp)
   41a44:	d8801f15 	stw	r2,124(sp)
   41a48:	010001c4 	movi	r4,7
   41a4c:	20825416 	blt	r4,r2,423a0 <___svfprintf_internal_r+0x11d0>
   41a50:	42000204 	addi	r8,r8,8
   41a54:	d9003017 	ldw	r4,192(sp)
   41a58:	00802004 	movi	r2,128
   41a5c:	2081b926 	beq	r4,r2,42144 <___svfprintf_internal_r+0xf74>
   41a60:	d9402a17 	ldw	r5,168(sp)
   41a64:	d8802b17 	ldw	r2,172(sp)
   41a68:	28adc83a 	sub	r22,r5,r2
   41a6c:	05802f0e 	bge	zero,r22,41b2c <___svfprintf_internal_r+0x95c>
   41a70:	07000404 	movi	fp,16
   41a74:	d8801f17 	ldw	r2,124(sp)
   41a78:	e583e20e 	bge	fp,r22,42a04 <___svfprintf_internal_r+0x1834>
   41a7c:	01400174 	movhi	r5,5
   41a80:	2957e484 	addi	r5,r5,24466
   41a84:	dc402a15 	stw	r17,168(sp)
   41a88:	d9402c15 	stw	r5,176(sp)
   41a8c:	b023883a 	mov	r17,r22
   41a90:	050001c4 	movi	r20,7
   41a94:	902d883a 	mov	r22,r18
   41a98:	8025883a 	mov	r18,r16
   41a9c:	dc002d17 	ldw	r16,180(sp)
   41aa0:	00000306 	br	41ab0 <___svfprintf_internal_r+0x8e0>
   41aa4:	8c7ffc04 	addi	r17,r17,-16
   41aa8:	42000204 	addi	r8,r8,8
   41aac:	e440110e 	bge	fp,r17,41af4 <___svfprintf_internal_r+0x924>
   41ab0:	18c00404 	addi	r3,r3,16
   41ab4:	10800044 	addi	r2,r2,1
   41ab8:	45400015 	stw	r21,0(r8)
   41abc:	47000115 	stw	fp,4(r8)
   41ac0:	d8c02015 	stw	r3,128(sp)
   41ac4:	d8801f15 	stw	r2,124(sp)
   41ac8:	a0bff60e 	bge	r20,r2,41aa4 <__alt_data_end+0xfffcfaa4>
   41acc:	d9801e04 	addi	r6,sp,120
   41ad0:	800b883a 	mov	r5,r16
   41ad4:	9809883a 	mov	r4,r19
   41ad8:	004acd80 	call	4acd8 <__ssprint_r>
   41adc:	103ea31e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   41ae0:	8c7ffc04 	addi	r17,r17,-16
   41ae4:	d8c02017 	ldw	r3,128(sp)
   41ae8:	d8801f17 	ldw	r2,124(sp)
   41aec:	da000404 	addi	r8,sp,16
   41af0:	e47fef16 	blt	fp,r17,41ab0 <__alt_data_end+0xfffcfab0>
   41af4:	9021883a 	mov	r16,r18
   41af8:	b025883a 	mov	r18,r22
   41afc:	882d883a 	mov	r22,r17
   41b00:	dc402a17 	ldw	r17,168(sp)
   41b04:	d9002c17 	ldw	r4,176(sp)
   41b08:	1d87883a 	add	r3,r3,r22
   41b0c:	10800044 	addi	r2,r2,1
   41b10:	41000015 	stw	r4,0(r8)
   41b14:	45800115 	stw	r22,4(r8)
   41b18:	d8c02015 	stw	r3,128(sp)
   41b1c:	d8801f15 	stw	r2,124(sp)
   41b20:	010001c4 	movi	r4,7
   41b24:	20820e16 	blt	r4,r2,42360 <___svfprintf_internal_r+0x1190>
   41b28:	42000204 	addi	r8,r8,8
   41b2c:	9080400c 	andi	r2,r18,256
   41b30:	10013a1e 	bne	r2,zero,4201c <___svfprintf_internal_r+0xe4c>
   41b34:	d9402b17 	ldw	r5,172(sp)
   41b38:	d8801f17 	ldw	r2,124(sp)
   41b3c:	44000015 	stw	r16,0(r8)
   41b40:	1947883a 	add	r3,r3,r5
   41b44:	10800044 	addi	r2,r2,1
   41b48:	41400115 	stw	r5,4(r8)
   41b4c:	d8c02015 	stw	r3,128(sp)
   41b50:	d8801f15 	stw	r2,124(sp)
   41b54:	010001c4 	movi	r4,7
   41b58:	2081f316 	blt	r4,r2,42328 <___svfprintf_internal_r+0x1158>
   41b5c:	42000204 	addi	r8,r8,8
   41b60:	9480010c 	andi	r18,r18,4
   41b64:	90003226 	beq	r18,zero,41c30 <___svfprintf_internal_r+0xa60>
   41b68:	d9403117 	ldw	r5,196(sp)
   41b6c:	d8802917 	ldw	r2,164(sp)
   41b70:	28a1c83a 	sub	r16,r5,r2
   41b74:	04002e0e 	bge	zero,r16,41c30 <___svfprintf_internal_r+0xa60>
   41b78:	04400404 	movi	r17,16
   41b7c:	d8801f17 	ldw	r2,124(sp)
   41b80:	8c04db0e 	bge	r17,r16,42ef0 <___svfprintf_internal_r+0x1d20>
   41b84:	01400174 	movhi	r5,5
   41b88:	2957e884 	addi	r5,r5,24482
   41b8c:	d9403515 	stw	r5,212(sp)
   41b90:	048001c4 	movi	r18,7
   41b94:	dd002d17 	ldw	r20,180(sp)
   41b98:	00000306 	br	41ba8 <___svfprintf_internal_r+0x9d8>
   41b9c:	843ffc04 	addi	r16,r16,-16
   41ba0:	42000204 	addi	r8,r8,8
   41ba4:	8c00130e 	bge	r17,r16,41bf4 <___svfprintf_internal_r+0xa24>
   41ba8:	01000174 	movhi	r4,5
   41bac:	18c00404 	addi	r3,r3,16
   41bb0:	10800044 	addi	r2,r2,1
   41bb4:	2117e884 	addi	r4,r4,24482
   41bb8:	41000015 	stw	r4,0(r8)
   41bbc:	44400115 	stw	r17,4(r8)
   41bc0:	d8c02015 	stw	r3,128(sp)
   41bc4:	d8801f15 	stw	r2,124(sp)
   41bc8:	90bff40e 	bge	r18,r2,41b9c <__alt_data_end+0xfffcfb9c>
   41bcc:	d9801e04 	addi	r6,sp,120
   41bd0:	a00b883a 	mov	r5,r20
   41bd4:	9809883a 	mov	r4,r19
   41bd8:	004acd80 	call	4acd8 <__ssprint_r>
   41bdc:	103e631e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   41be0:	843ffc04 	addi	r16,r16,-16
   41be4:	d8c02017 	ldw	r3,128(sp)
   41be8:	d8801f17 	ldw	r2,124(sp)
   41bec:	da000404 	addi	r8,sp,16
   41bf0:	8c3fed16 	blt	r17,r16,41ba8 <__alt_data_end+0xfffcfba8>
   41bf4:	d9403517 	ldw	r5,212(sp)
   41bf8:	1c07883a 	add	r3,r3,r16
   41bfc:	10800044 	addi	r2,r2,1
   41c00:	41400015 	stw	r5,0(r8)
   41c04:	44000115 	stw	r16,4(r8)
   41c08:	d8c02015 	stw	r3,128(sp)
   41c0c:	d8801f15 	stw	r2,124(sp)
   41c10:	010001c4 	movi	r4,7
   41c14:	2080060e 	bge	r4,r2,41c30 <___svfprintf_internal_r+0xa60>
   41c18:	d9402d17 	ldw	r5,180(sp)
   41c1c:	d9801e04 	addi	r6,sp,120
   41c20:	9809883a 	mov	r4,r19
   41c24:	004acd80 	call	4acd8 <__ssprint_r>
   41c28:	103e501e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   41c2c:	d8c02017 	ldw	r3,128(sp)
   41c30:	d8803117 	ldw	r2,196(sp)
   41c34:	d9002917 	ldw	r4,164(sp)
   41c38:	1100010e 	bge	r2,r4,41c40 <___svfprintf_internal_r+0xa70>
   41c3c:	2005883a 	mov	r2,r4
   41c40:	d9402f17 	ldw	r5,188(sp)
   41c44:	288b883a 	add	r5,r5,r2
   41c48:	d9402f15 	stw	r5,188(sp)
   41c4c:	1801be1e 	bne	r3,zero,42348 <___svfprintf_internal_r+0x1178>
   41c50:	b8800007 	ldb	r2,0(r23)
   41c54:	d8001f15 	stw	zero,124(sp)
   41c58:	da000404 	addi	r8,sp,16
   41c5c:	103d891e 	bne	r2,zero,41284 <__alt_data_end+0xfffcf284>
   41c60:	b823883a 	mov	r17,r23
   41c64:	003d9f06 	br	412e4 <__alt_data_end+0xfffcf2e4>
   41c68:	8025883a 	mov	r18,r16
   41c6c:	dc002903 	ldbu	r16,164(sp)
   41c70:	e011883a 	mov	r8,fp
   41c74:	84003fcc 	andi	r16,r16,255
   41c78:	8005e61e 	bne	r16,zero,43414 <___svfprintf_internal_r+0x2244>
   41c7c:	94800414 	ori	r18,r18,16
   41c80:	9080080c 	andi	r2,r18,32
   41c84:	10022026 	beq	r2,zero,42508 <___svfprintf_internal_r+0x1338>
   41c88:	d9002e17 	ldw	r4,184(sp)
   41c8c:	d9402a17 	ldw	r5,168(sp)
   41c90:	d8002785 	stb	zero,158(sp)
   41c94:	20c00204 	addi	r3,r4,8
   41c98:	25000017 	ldw	r20,0(r4)
   41c9c:	25800117 	ldw	r22,4(r4)
   41ca0:	2803ad16 	blt	r5,zero,42b58 <___svfprintf_internal_r+0x1988>
   41ca4:	013fdfc4 	movi	r4,-129
   41ca8:	a584b03a 	or	r2,r20,r22
   41cac:	d8c02e15 	stw	r3,184(sp)
   41cb0:	9124703a 	and	r18,r18,r4
   41cb4:	0039883a 	mov	fp,zero
   41cb8:	103eb01e 	bne	r2,zero,4177c <__alt_data_end+0xfffcf77c>
   41cbc:	d8802a17 	ldw	r2,168(sp)
   41cc0:	1002e71e 	bne	r2,zero,42860 <___svfprintf_internal_r+0x1690>
   41cc4:	d8002a15 	stw	zero,168(sp)
   41cc8:	d8002b15 	stw	zero,172(sp)
   41ccc:	dc001e04 	addi	r16,sp,120
   41cd0:	003ef706 	br	418b0 <__alt_data_end+0xfffcf8b0>
   41cd4:	8025883a 	mov	r18,r16
   41cd8:	dc002903 	ldbu	r16,164(sp)
   41cdc:	e011883a 	mov	r8,fp
   41ce0:	84003fcc 	andi	r16,r16,255
   41ce4:	8005c81e 	bne	r16,zero,43408 <___svfprintf_internal_r+0x2238>
   41ce8:	01000174 	movhi	r4,5
   41cec:	2117d804 	addi	r4,r4,24416
   41cf0:	d9003a15 	stw	r4,232(sp)
   41cf4:	9080080c 	andi	r2,r18,32
   41cf8:	10007226 	beq	r2,zero,41ec4 <___svfprintf_internal_r+0xcf4>
   41cfc:	d9402e17 	ldw	r5,184(sp)
   41d00:	2d000017 	ldw	r20,0(r5)
   41d04:	2d800117 	ldw	r22,4(r5)
   41d08:	29400204 	addi	r5,r5,8
   41d0c:	d9402e15 	stw	r5,184(sp)
   41d10:	9080004c 	andi	r2,r18,1
   41d14:	1001aa26 	beq	r2,zero,423c0 <___svfprintf_internal_r+0x11f0>
   41d18:	a584b03a 	or	r2,r20,r22
   41d1c:	10032526 	beq	r2,zero,429b4 <___svfprintf_internal_r+0x17e4>
   41d20:	d8c02a17 	ldw	r3,168(sp)
   41d24:	00800c04 	movi	r2,48
   41d28:	d8802705 	stb	r2,156(sp)
   41d2c:	dc402745 	stb	r17,157(sp)
   41d30:	d8002785 	stb	zero,158(sp)
   41d34:	90800094 	ori	r2,r18,2
   41d38:	1804a316 	blt	r3,zero,42fc8 <___svfprintf_internal_r+0x1df8>
   41d3c:	00bfdfc4 	movi	r2,-129
   41d40:	90a4703a 	and	r18,r18,r2
   41d44:	94800094 	ori	r18,r18,2
   41d48:	0039883a 	mov	fp,zero
   41d4c:	d9003a17 	ldw	r4,232(sp)
   41d50:	dc001e04 	addi	r16,sp,120
   41d54:	a08003cc 	andi	r2,r20,15
   41d58:	b006973a 	slli	r3,r22,28
   41d5c:	2085883a 	add	r2,r4,r2
   41d60:	a028d13a 	srli	r20,r20,4
   41d64:	10800003 	ldbu	r2,0(r2)
   41d68:	b02cd13a 	srli	r22,r22,4
   41d6c:	843fffc4 	addi	r16,r16,-1
   41d70:	1d28b03a 	or	r20,r3,r20
   41d74:	80800005 	stb	r2,0(r16)
   41d78:	a584b03a 	or	r2,r20,r22
   41d7c:	103ff51e 	bne	r2,zero,41d54 <__alt_data_end+0xfffcfd54>
   41d80:	d8c02817 	ldw	r3,160(sp)
   41d84:	1c07c83a 	sub	r3,r3,r16
   41d88:	d8c02b15 	stw	r3,172(sp)
   41d8c:	003ec806 	br	418b0 <__alt_data_end+0xfffcf8b0>
   41d90:	d8c02e17 	ldw	r3,184(sp)
   41d94:	d9002e17 	ldw	r4,184(sp)
   41d98:	8025883a 	mov	r18,r16
   41d9c:	18800017 	ldw	r2,0(r3)
   41da0:	21000104 	addi	r4,r4,4
   41da4:	00c00044 	movi	r3,1
   41da8:	e011883a 	mov	r8,fp
   41dac:	d8c02915 	stw	r3,164(sp)
   41db0:	d8002785 	stb	zero,158(sp)
   41db4:	d8801405 	stb	r2,80(sp)
   41db8:	d9002e15 	stw	r4,184(sp)
   41dbc:	d8c02b15 	stw	r3,172(sp)
   41dc0:	d8002a15 	stw	zero,168(sp)
   41dc4:	d8003215 	stw	zero,200(sp)
   41dc8:	dc001404 	addi	r16,sp,80
   41dcc:	0039883a 	mov	fp,zero
   41dd0:	003ec406 	br	418e4 <__alt_data_end+0xfffcf8e4>
   41dd4:	8025883a 	mov	r18,r16
   41dd8:	dc002903 	ldbu	r16,164(sp)
   41ddc:	e011883a 	mov	r8,fp
   41de0:	84003fcc 	andi	r16,r16,255
   41de4:	803e8726 	beq	r16,zero,41804 <__alt_data_end+0xfffcf804>
   41de8:	d8c02b03 	ldbu	r3,172(sp)
   41dec:	d8c02785 	stb	r3,158(sp)
   41df0:	003e8406 	br	41804 <__alt_data_end+0xfffcf804>
   41df4:	00c00044 	movi	r3,1
   41df8:	d8c02905 	stb	r3,164(sp)
   41dfc:	00c00ac4 	movi	r3,43
   41e00:	d8c02b05 	stb	r3,172(sp)
   41e04:	bc400007 	ldb	r17,0(r23)
   41e08:	003d4606 	br	41324 <__alt_data_end+0xfffcf324>
   41e0c:	84000814 	ori	r16,r16,32
   41e10:	bc400007 	ldb	r17,0(r23)
   41e14:	003d4306 	br	41324 <__alt_data_end+0xfffcf324>
   41e18:	d8802e17 	ldw	r2,184(sp)
   41e1c:	8025883a 	mov	r18,r16
   41e20:	d8002785 	stb	zero,158(sp)
   41e24:	14000017 	ldw	r16,0(r2)
   41e28:	e011883a 	mov	r8,fp
   41e2c:	15000104 	addi	r20,r2,4
   41e30:	80042126 	beq	r16,zero,42eb8 <___svfprintf_internal_r+0x1ce8>
   41e34:	d8c02a17 	ldw	r3,168(sp)
   41e38:	1803ee16 	blt	r3,zero,42df4 <___svfprintf_internal_r+0x1c24>
   41e3c:	180d883a 	mov	r6,r3
   41e40:	000b883a 	mov	r5,zero
   41e44:	8009883a 	mov	r4,r16
   41e48:	df003e15 	stw	fp,248(sp)
   41e4c:	0048dc40 	call	48dc4 <memchr>
   41e50:	da003e17 	ldw	r8,248(sp)
   41e54:	10046a26 	beq	r2,zero,43000 <___svfprintf_internal_r+0x1e30>
   41e58:	1405c83a 	sub	r2,r2,r16
   41e5c:	d8802b15 	stw	r2,172(sp)
   41e60:	1003ea16 	blt	r2,zero,42e0c <___svfprintf_internal_r+0x1c3c>
   41e64:	df002783 	ldbu	fp,158(sp)
   41e68:	d8802915 	stw	r2,164(sp)
   41e6c:	dd002e15 	stw	r20,184(sp)
   41e70:	d8002a15 	stw	zero,168(sp)
   41e74:	d8003215 	stw	zero,200(sp)
   41e78:	003e9306 	br	418c8 <__alt_data_end+0xfffcf8c8>
   41e7c:	8025883a 	mov	r18,r16
   41e80:	dc002903 	ldbu	r16,164(sp)
   41e84:	e011883a 	mov	r8,fp
   41e88:	84003fcc 	andi	r16,r16,255
   41e8c:	803f7c26 	beq	r16,zero,41c80 <__alt_data_end+0xfffcfc80>
   41e90:	d8c02b03 	ldbu	r3,172(sp)
   41e94:	d8c02785 	stb	r3,158(sp)
   41e98:	003f7906 	br	41c80 <__alt_data_end+0xfffcfc80>
   41e9c:	8025883a 	mov	r18,r16
   41ea0:	dc002903 	ldbu	r16,164(sp)
   41ea4:	e011883a 	mov	r8,fp
   41ea8:	84003fcc 	andi	r16,r16,255
   41eac:	8005741e 	bne	r16,zero,43480 <___svfprintf_internal_r+0x22b0>
   41eb0:	01000174 	movhi	r4,5
   41eb4:	2117dd04 	addi	r4,r4,24436
   41eb8:	d9003a15 	stw	r4,232(sp)
   41ebc:	9080080c 	andi	r2,r18,32
   41ec0:	103f8e1e 	bne	r2,zero,41cfc <__alt_data_end+0xfffcfcfc>
   41ec4:	9080040c 	andi	r2,r18,16
   41ec8:	1002a726 	beq	r2,zero,42968 <___svfprintf_internal_r+0x1798>
   41ecc:	d8802e17 	ldw	r2,184(sp)
   41ed0:	002d883a 	mov	r22,zero
   41ed4:	15000017 	ldw	r20,0(r2)
   41ed8:	10800104 	addi	r2,r2,4
   41edc:	d8802e15 	stw	r2,184(sp)
   41ee0:	003f8b06 	br	41d10 <__alt_data_end+0xfffcfd10>
   41ee4:	84000054 	ori	r16,r16,1
   41ee8:	bc400007 	ldb	r17,0(r23)
   41eec:	003d0d06 	br	41324 <__alt_data_end+0xfffcf324>
   41ef0:	d8802b07 	ldb	r2,172(sp)
   41ef4:	1002a41e 	bne	r2,zero,42988 <___svfprintf_internal_r+0x17b8>
   41ef8:	00c00044 	movi	r3,1
   41efc:	d8c02905 	stb	r3,164(sp)
   41f00:	00c00804 	movi	r3,32
   41f04:	d8c02b05 	stb	r3,172(sp)
   41f08:	bc400007 	ldb	r17,0(r23)
   41f0c:	003d0506 	br	41324 <__alt_data_end+0xfffcf324>
   41f10:	8025883a 	mov	r18,r16
   41f14:	dc002903 	ldbu	r16,164(sp)
   41f18:	e011883a 	mov	r8,fp
   41f1c:	84003fcc 	andi	r16,r16,255
   41f20:	803e0626 	beq	r16,zero,4173c <__alt_data_end+0xfffcf73c>
   41f24:	d8c02b03 	ldbu	r3,172(sp)
   41f28:	d8c02785 	stb	r3,158(sp)
   41f2c:	003e0306 	br	4173c <__alt_data_end+0xfffcf73c>
   41f30:	bc400007 	ldb	r17,0(r23)
   41f34:	00801b04 	movi	r2,108
   41f38:	88830a26 	beq	r17,r2,42b64 <___svfprintf_internal_r+0x1994>
   41f3c:	84000414 	ori	r16,r16,16
   41f40:	003cf806 	br	41324 <__alt_data_end+0xfffcf324>
   41f44:	8025883a 	mov	r18,r16
   41f48:	dc002903 	ldbu	r16,164(sp)
   41f4c:	e011883a 	mov	r8,fp
   41f50:	84003fcc 	andi	r16,r16,255
   41f54:	8005471e 	bne	r16,zero,43474 <___svfprintf_internal_r+0x22a4>
   41f58:	9080080c 	andi	r2,r18,32
   41f5c:	10028c26 	beq	r2,zero,42990 <___svfprintf_internal_r+0x17c0>
   41f60:	d9002e17 	ldw	r4,184(sp)
   41f64:	d9402f17 	ldw	r5,188(sp)
   41f68:	20800017 	ldw	r2,0(r4)
   41f6c:	2807d7fa 	srai	r3,r5,31
   41f70:	21000104 	addi	r4,r4,4
   41f74:	d9002e15 	stw	r4,184(sp)
   41f78:	11400015 	stw	r5,0(r2)
   41f7c:	10c00115 	stw	r3,4(r2)
   41f80:	003cbe06 	br	4127c <__alt_data_end+0xfffcf27c>
   41f84:	84001014 	ori	r16,r16,64
   41f88:	bc400007 	ldb	r17,0(r23)
   41f8c:	003ce506 	br	41324 <__alt_data_end+0xfffcf324>
   41f90:	01000174 	movhi	r4,5
   41f94:	2117dd04 	addi	r4,r4,24436
   41f98:	0039883a 	mov	fp,zero
   41f9c:	d9003a15 	stw	r4,232(sp)
   41fa0:	04401e04 	movi	r17,120
   41fa4:	003f6906 	br	41d4c <__alt_data_end+0xfffcfd4c>
   41fa8:	8025883a 	mov	r18,r16
   41fac:	dc002903 	ldbu	r16,164(sp)
   41fb0:	e011883a 	mov	r8,fp
   41fb4:	84003fcc 	andi	r16,r16,255
   41fb8:	8005261e 	bne	r16,zero,43454 <___svfprintf_internal_r+0x2284>
   41fbc:	883d6526 	beq	r17,zero,41554 <__alt_data_end+0xfffcf554>
   41fc0:	00c00044 	movi	r3,1
   41fc4:	d8c02915 	stw	r3,164(sp)
   41fc8:	dc401405 	stb	r17,80(sp)
   41fcc:	d8002785 	stb	zero,158(sp)
   41fd0:	003f7a06 	br	41dbc <__alt_data_end+0xfffcfdbc>
   41fd4:	01000174 	movhi	r4,5
   41fd8:	2117dd04 	addi	r4,r4,24436
   41fdc:	d9003a15 	stw	r4,232(sp)
   41fe0:	d8c02e15 	stw	r3,184(sp)
   41fe4:	1025883a 	mov	r18,r2
   41fe8:	04401e04 	movi	r17,120
   41fec:	a584b03a 	or	r2,r20,r22
   41ff0:	1000fa1e 	bne	r2,zero,423dc <___svfprintf_internal_r+0x120c>
   41ff4:	0039883a 	mov	fp,zero
   41ff8:	00800084 	movi	r2,2
   41ffc:	10803fcc 	andi	r2,r2,255
   42000:	00c00044 	movi	r3,1
   42004:	10c21626 	beq	r2,r3,42860 <___svfprintf_internal_r+0x1690>
   42008:	00c00084 	movi	r3,2
   4200c:	10fe0e1e 	bne	r2,r3,41848 <__alt_data_end+0xfffcf848>
   42010:	003d4606 	br	4152c <__alt_data_end+0xfffcf52c>
   42014:	d8c02017 	ldw	r3,128(sp)
   42018:	003e7306 	br	419e8 <__alt_data_end+0xfffcf9e8>
   4201c:	00801944 	movi	r2,101
   42020:	14407c0e 	bge	r2,r17,42214 <___svfprintf_internal_r+0x1044>
   42024:	d9003617 	ldw	r4,216(sp)
   42028:	d9403717 	ldw	r5,220(sp)
   4202c:	000d883a 	mov	r6,zero
   42030:	000f883a 	mov	r7,zero
   42034:	d8c03d15 	stw	r3,244(sp)
   42038:	da003e15 	stw	r8,248(sp)
   4203c:	00500c80 	call	500c8 <__eqdf2>
   42040:	d8c03d17 	ldw	r3,244(sp)
   42044:	da003e17 	ldw	r8,248(sp)
   42048:	1000f51e 	bne	r2,zero,42420 <___svfprintf_internal_r+0x1250>
   4204c:	d8801f17 	ldw	r2,124(sp)
   42050:	01000174 	movhi	r4,5
   42054:	2117e404 	addi	r4,r4,24464
   42058:	18c00044 	addi	r3,r3,1
   4205c:	10800044 	addi	r2,r2,1
   42060:	41000015 	stw	r4,0(r8)
   42064:	01000044 	movi	r4,1
   42068:	41000115 	stw	r4,4(r8)
   4206c:	d8c02015 	stw	r3,128(sp)
   42070:	d8801f15 	stw	r2,124(sp)
   42074:	010001c4 	movi	r4,7
   42078:	20826616 	blt	r4,r2,42a14 <___svfprintf_internal_r+0x1844>
   4207c:	42000204 	addi	r8,r8,8
   42080:	d8802617 	ldw	r2,152(sp)
   42084:	d9403317 	ldw	r5,204(sp)
   42088:	11400216 	blt	r2,r5,42094 <___svfprintf_internal_r+0xec4>
   4208c:	9080004c 	andi	r2,r18,1
   42090:	103eb326 	beq	r2,zero,41b60 <__alt_data_end+0xfffcfb60>
   42094:	d8803817 	ldw	r2,224(sp)
   42098:	d9003417 	ldw	r4,208(sp)
   4209c:	d9403817 	ldw	r5,224(sp)
   420a0:	1887883a 	add	r3,r3,r2
   420a4:	d8801f17 	ldw	r2,124(sp)
   420a8:	41000015 	stw	r4,0(r8)
   420ac:	41400115 	stw	r5,4(r8)
   420b0:	10800044 	addi	r2,r2,1
   420b4:	d8c02015 	stw	r3,128(sp)
   420b8:	d8801f15 	stw	r2,124(sp)
   420bc:	010001c4 	movi	r4,7
   420c0:	2082af16 	blt	r4,r2,42b80 <___svfprintf_internal_r+0x19b0>
   420c4:	42000204 	addi	r8,r8,8
   420c8:	d8803317 	ldw	r2,204(sp)
   420cc:	143fffc4 	addi	r16,r2,-1
   420d0:	043ea30e 	bge	zero,r16,41b60 <__alt_data_end+0xfffcfb60>
   420d4:	04400404 	movi	r17,16
   420d8:	d8801f17 	ldw	r2,124(sp)
   420dc:	8c00860e 	bge	r17,r16,422f8 <___svfprintf_internal_r+0x1128>
   420e0:	01400174 	movhi	r5,5
   420e4:	2957e484 	addi	r5,r5,24466
   420e8:	d9402c15 	stw	r5,176(sp)
   420ec:	058001c4 	movi	r22,7
   420f0:	dd002d17 	ldw	r20,180(sp)
   420f4:	00000306 	br	42104 <___svfprintf_internal_r+0xf34>
   420f8:	42000204 	addi	r8,r8,8
   420fc:	843ffc04 	addi	r16,r16,-16
   42100:	8c00800e 	bge	r17,r16,42304 <___svfprintf_internal_r+0x1134>
   42104:	18c00404 	addi	r3,r3,16
   42108:	10800044 	addi	r2,r2,1
   4210c:	45400015 	stw	r21,0(r8)
   42110:	44400115 	stw	r17,4(r8)
   42114:	d8c02015 	stw	r3,128(sp)
   42118:	d8801f15 	stw	r2,124(sp)
   4211c:	b0bff60e 	bge	r22,r2,420f8 <__alt_data_end+0xfffd00f8>
   42120:	d9801e04 	addi	r6,sp,120
   42124:	a00b883a 	mov	r5,r20
   42128:	9809883a 	mov	r4,r19
   4212c:	004acd80 	call	4acd8 <__ssprint_r>
   42130:	103d0e1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42134:	d8c02017 	ldw	r3,128(sp)
   42138:	d8801f17 	ldw	r2,124(sp)
   4213c:	da000404 	addi	r8,sp,16
   42140:	003fee06 	br	420fc <__alt_data_end+0xfffd00fc>
   42144:	d9403117 	ldw	r5,196(sp)
   42148:	d8802917 	ldw	r2,164(sp)
   4214c:	28adc83a 	sub	r22,r5,r2
   42150:	05be430e 	bge	zero,r22,41a60 <__alt_data_end+0xfffcfa60>
   42154:	07000404 	movi	fp,16
   42158:	d8801f17 	ldw	r2,124(sp)
   4215c:	e583a20e 	bge	fp,r22,42fe8 <___svfprintf_internal_r+0x1e18>
   42160:	01400174 	movhi	r5,5
   42164:	2957e484 	addi	r5,r5,24466
   42168:	dc403015 	stw	r17,192(sp)
   4216c:	d9402c15 	stw	r5,176(sp)
   42170:	b023883a 	mov	r17,r22
   42174:	050001c4 	movi	r20,7
   42178:	902d883a 	mov	r22,r18
   4217c:	8025883a 	mov	r18,r16
   42180:	dc002d17 	ldw	r16,180(sp)
   42184:	00000306 	br	42194 <___svfprintf_internal_r+0xfc4>
   42188:	8c7ffc04 	addi	r17,r17,-16
   4218c:	42000204 	addi	r8,r8,8
   42190:	e440110e 	bge	fp,r17,421d8 <___svfprintf_internal_r+0x1008>
   42194:	18c00404 	addi	r3,r3,16
   42198:	10800044 	addi	r2,r2,1
   4219c:	45400015 	stw	r21,0(r8)
   421a0:	47000115 	stw	fp,4(r8)
   421a4:	d8c02015 	stw	r3,128(sp)
   421a8:	d8801f15 	stw	r2,124(sp)
   421ac:	a0bff60e 	bge	r20,r2,42188 <__alt_data_end+0xfffd0188>
   421b0:	d9801e04 	addi	r6,sp,120
   421b4:	800b883a 	mov	r5,r16
   421b8:	9809883a 	mov	r4,r19
   421bc:	004acd80 	call	4acd8 <__ssprint_r>
   421c0:	103cea1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   421c4:	8c7ffc04 	addi	r17,r17,-16
   421c8:	d8c02017 	ldw	r3,128(sp)
   421cc:	d8801f17 	ldw	r2,124(sp)
   421d0:	da000404 	addi	r8,sp,16
   421d4:	e47fef16 	blt	fp,r17,42194 <__alt_data_end+0xfffd0194>
   421d8:	9021883a 	mov	r16,r18
   421dc:	b025883a 	mov	r18,r22
   421e0:	882d883a 	mov	r22,r17
   421e4:	dc403017 	ldw	r17,192(sp)
   421e8:	d9002c17 	ldw	r4,176(sp)
   421ec:	1d87883a 	add	r3,r3,r22
   421f0:	10800044 	addi	r2,r2,1
   421f4:	41000015 	stw	r4,0(r8)
   421f8:	45800115 	stw	r22,4(r8)
   421fc:	d8c02015 	stw	r3,128(sp)
   42200:	d8801f15 	stw	r2,124(sp)
   42204:	010001c4 	movi	r4,7
   42208:	20819a16 	blt	r4,r2,42874 <___svfprintf_internal_r+0x16a4>
   4220c:	42000204 	addi	r8,r8,8
   42210:	003e1306 	br	41a60 <__alt_data_end+0xfffcfa60>
   42214:	d9403317 	ldw	r5,204(sp)
   42218:	00800044 	movi	r2,1
   4221c:	18c00044 	addi	r3,r3,1
   42220:	1141710e 	bge	r2,r5,427e8 <___svfprintf_internal_r+0x1618>
   42224:	dc401f17 	ldw	r17,124(sp)
   42228:	00800044 	movi	r2,1
   4222c:	40800115 	stw	r2,4(r8)
   42230:	8c400044 	addi	r17,r17,1
   42234:	44000015 	stw	r16,0(r8)
   42238:	d8c02015 	stw	r3,128(sp)
   4223c:	dc401f15 	stw	r17,124(sp)
   42240:	008001c4 	movi	r2,7
   42244:	14417416 	blt	r2,r17,42818 <___svfprintf_internal_r+0x1648>
   42248:	42000204 	addi	r8,r8,8
   4224c:	d8803817 	ldw	r2,224(sp)
   42250:	d9003417 	ldw	r4,208(sp)
   42254:	8c400044 	addi	r17,r17,1
   42258:	10c7883a 	add	r3,r2,r3
   4225c:	40800115 	stw	r2,4(r8)
   42260:	41000015 	stw	r4,0(r8)
   42264:	d8c02015 	stw	r3,128(sp)
   42268:	dc401f15 	stw	r17,124(sp)
   4226c:	008001c4 	movi	r2,7
   42270:	14417216 	blt	r2,r17,4283c <___svfprintf_internal_r+0x166c>
   42274:	45800204 	addi	r22,r8,8
   42278:	d9003617 	ldw	r4,216(sp)
   4227c:	d9403717 	ldw	r5,220(sp)
   42280:	000d883a 	mov	r6,zero
   42284:	000f883a 	mov	r7,zero
   42288:	d8c03d15 	stw	r3,244(sp)
   4228c:	00500c80 	call	500c8 <__eqdf2>
   42290:	d8c03d17 	ldw	r3,244(sp)
   42294:	1000b326 	beq	r2,zero,42564 <___svfprintf_internal_r+0x1394>
   42298:	d9403317 	ldw	r5,204(sp)
   4229c:	84000044 	addi	r16,r16,1
   422a0:	8c400044 	addi	r17,r17,1
   422a4:	28bfffc4 	addi	r2,r5,-1
   422a8:	1887883a 	add	r3,r3,r2
   422ac:	b0800115 	stw	r2,4(r22)
   422b0:	b4000015 	stw	r16,0(r22)
   422b4:	d8c02015 	stw	r3,128(sp)
   422b8:	dc401f15 	stw	r17,124(sp)
   422bc:	008001c4 	movi	r2,7
   422c0:	1440d216 	blt	r2,r17,4260c <___svfprintf_internal_r+0x143c>
   422c4:	b5800204 	addi	r22,r22,8
   422c8:	d9003b17 	ldw	r4,236(sp)
   422cc:	df0022c4 	addi	fp,sp,139
   422d0:	8c400044 	addi	r17,r17,1
   422d4:	20c7883a 	add	r3,r4,r3
   422d8:	b7000015 	stw	fp,0(r22)
   422dc:	b1000115 	stw	r4,4(r22)
   422e0:	d8c02015 	stw	r3,128(sp)
   422e4:	dc401f15 	stw	r17,124(sp)
   422e8:	008001c4 	movi	r2,7
   422ec:	14400e16 	blt	r2,r17,42328 <___svfprintf_internal_r+0x1158>
   422f0:	b2000204 	addi	r8,r22,8
   422f4:	003e1a06 	br	41b60 <__alt_data_end+0xfffcfb60>
   422f8:	01000174 	movhi	r4,5
   422fc:	2117e484 	addi	r4,r4,24466
   42300:	d9002c15 	stw	r4,176(sp)
   42304:	d9002c17 	ldw	r4,176(sp)
   42308:	1c07883a 	add	r3,r3,r16
   4230c:	44000115 	stw	r16,4(r8)
   42310:	41000015 	stw	r4,0(r8)
   42314:	10800044 	addi	r2,r2,1
   42318:	d8c02015 	stw	r3,128(sp)
   4231c:	d8801f15 	stw	r2,124(sp)
   42320:	010001c4 	movi	r4,7
   42324:	20be0d0e 	bge	r4,r2,41b5c <__alt_data_end+0xfffcfb5c>
   42328:	d9402d17 	ldw	r5,180(sp)
   4232c:	d9801e04 	addi	r6,sp,120
   42330:	9809883a 	mov	r4,r19
   42334:	004acd80 	call	4acd8 <__ssprint_r>
   42338:	103c8c1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   4233c:	d8c02017 	ldw	r3,128(sp)
   42340:	da000404 	addi	r8,sp,16
   42344:	003e0606 	br	41b60 <__alt_data_end+0xfffcfb60>
   42348:	d9402d17 	ldw	r5,180(sp)
   4234c:	d9801e04 	addi	r6,sp,120
   42350:	9809883a 	mov	r4,r19
   42354:	004acd80 	call	4acd8 <__ssprint_r>
   42358:	103e3d26 	beq	r2,zero,41c50 <__alt_data_end+0xfffcfc50>
   4235c:	003c8306 	br	4156c <__alt_data_end+0xfffcf56c>
   42360:	d9402d17 	ldw	r5,180(sp)
   42364:	d9801e04 	addi	r6,sp,120
   42368:	9809883a 	mov	r4,r19
   4236c:	004acd80 	call	4acd8 <__ssprint_r>
   42370:	103c7e1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42374:	d8c02017 	ldw	r3,128(sp)
   42378:	da000404 	addi	r8,sp,16
   4237c:	003deb06 	br	41b2c <__alt_data_end+0xfffcfb2c>
   42380:	d9402d17 	ldw	r5,180(sp)
   42384:	d9801e04 	addi	r6,sp,120
   42388:	9809883a 	mov	r4,r19
   4238c:	004acd80 	call	4acd8 <__ssprint_r>
   42390:	103c761e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42394:	d8c02017 	ldw	r3,128(sp)
   42398:	da000404 	addi	r8,sp,16
   4239c:	003d9f06 	br	41a1c <__alt_data_end+0xfffcfa1c>
   423a0:	d9402d17 	ldw	r5,180(sp)
   423a4:	d9801e04 	addi	r6,sp,120
   423a8:	9809883a 	mov	r4,r19
   423ac:	004acd80 	call	4acd8 <__ssprint_r>
   423b0:	103c6e1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   423b4:	d8c02017 	ldw	r3,128(sp)
   423b8:	da000404 	addi	r8,sp,16
   423bc:	003da506 	br	41a54 <__alt_data_end+0xfffcfa54>
   423c0:	d9402a17 	ldw	r5,168(sp)
   423c4:	d8002785 	stb	zero,158(sp)
   423c8:	283f0816 	blt	r5,zero,41fec <__alt_data_end+0xfffcffec>
   423cc:	00ffdfc4 	movi	r3,-129
   423d0:	a584b03a 	or	r2,r20,r22
   423d4:	90e4703a 	and	r18,r18,r3
   423d8:	103c5126 	beq	r2,zero,41520 <__alt_data_end+0xfffcf520>
   423dc:	0039883a 	mov	fp,zero
   423e0:	003e5a06 	br	41d4c <__alt_data_end+0xfffcfd4c>
   423e4:	9080040c 	andi	r2,r18,16
   423e8:	10013d26 	beq	r2,zero,428e0 <___svfprintf_internal_r+0x1710>
   423ec:	d8c02e17 	ldw	r3,184(sp)
   423f0:	d9002a17 	ldw	r4,168(sp)
   423f4:	d8002785 	stb	zero,158(sp)
   423f8:	18800104 	addi	r2,r3,4
   423fc:	1d000017 	ldw	r20,0(r3)
   42400:	002d883a 	mov	r22,zero
   42404:	20013f16 	blt	r4,zero,42904 <___svfprintf_internal_r+0x1734>
   42408:	00ffdfc4 	movi	r3,-129
   4240c:	d8802e15 	stw	r2,184(sp)
   42410:	90e4703a 	and	r18,r18,r3
   42414:	a03d0926 	beq	r20,zero,4183c <__alt_data_end+0xfffcf83c>
   42418:	0039883a 	mov	fp,zero
   4241c:	003d0c06 	br	41850 <__alt_data_end+0xfffcf850>
   42420:	dc402617 	ldw	r17,152(sp)
   42424:	0441830e 	bge	zero,r17,42a34 <___svfprintf_internal_r+0x1864>
   42428:	dc403217 	ldw	r17,200(sp)
   4242c:	d8803317 	ldw	r2,204(sp)
   42430:	1440010e 	bge	r2,r17,42438 <___svfprintf_internal_r+0x1268>
   42434:	1023883a 	mov	r17,r2
   42438:	04400a0e 	bge	zero,r17,42464 <___svfprintf_internal_r+0x1294>
   4243c:	d8801f17 	ldw	r2,124(sp)
   42440:	1c47883a 	add	r3,r3,r17
   42444:	44000015 	stw	r16,0(r8)
   42448:	10800044 	addi	r2,r2,1
   4244c:	44400115 	stw	r17,4(r8)
   42450:	d8c02015 	stw	r3,128(sp)
   42454:	d8801f15 	stw	r2,124(sp)
   42458:	010001c4 	movi	r4,7
   4245c:	20827516 	blt	r4,r2,42e34 <___svfprintf_internal_r+0x1c64>
   42460:	42000204 	addi	r8,r8,8
   42464:	88027b16 	blt	r17,zero,42e54 <___svfprintf_internal_r+0x1c84>
   42468:	d9003217 	ldw	r4,200(sp)
   4246c:	2463c83a 	sub	r17,r4,r17
   42470:	0440990e 	bge	zero,r17,426d8 <___svfprintf_internal_r+0x1508>
   42474:	05800404 	movi	r22,16
   42478:	d8801f17 	ldw	r2,124(sp)
   4247c:	b441530e 	bge	r22,r17,429cc <___svfprintf_internal_r+0x17fc>
   42480:	01000174 	movhi	r4,5
   42484:	2117e484 	addi	r4,r4,24466
   42488:	d9002c15 	stw	r4,176(sp)
   4248c:	070001c4 	movi	fp,7
   42490:	dd002d17 	ldw	r20,180(sp)
   42494:	00000306 	br	424a4 <___svfprintf_internal_r+0x12d4>
   42498:	42000204 	addi	r8,r8,8
   4249c:	8c7ffc04 	addi	r17,r17,-16
   424a0:	b4414d0e 	bge	r22,r17,429d8 <___svfprintf_internal_r+0x1808>
   424a4:	18c00404 	addi	r3,r3,16
   424a8:	10800044 	addi	r2,r2,1
   424ac:	45400015 	stw	r21,0(r8)
   424b0:	45800115 	stw	r22,4(r8)
   424b4:	d8c02015 	stw	r3,128(sp)
   424b8:	d8801f15 	stw	r2,124(sp)
   424bc:	e0bff60e 	bge	fp,r2,42498 <__alt_data_end+0xfffd0498>
   424c0:	d9801e04 	addi	r6,sp,120
   424c4:	a00b883a 	mov	r5,r20
   424c8:	9809883a 	mov	r4,r19
   424cc:	004acd80 	call	4acd8 <__ssprint_r>
   424d0:	103c261e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   424d4:	d8c02017 	ldw	r3,128(sp)
   424d8:	d8801f17 	ldw	r2,124(sp)
   424dc:	da000404 	addi	r8,sp,16
   424e0:	003fee06 	br	4249c <__alt_data_end+0xfffd049c>
   424e4:	d9402d17 	ldw	r5,180(sp)
   424e8:	d9801e04 	addi	r6,sp,120
   424ec:	9809883a 	mov	r4,r19
   424f0:	004acd80 	call	4acd8 <__ssprint_r>
   424f4:	103c1d1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   424f8:	d8c02017 	ldw	r3,128(sp)
   424fc:	df002787 	ldb	fp,158(sp)
   42500:	da000404 	addi	r8,sp,16
   42504:	003d3806 	br	419e8 <__alt_data_end+0xfffcf9e8>
   42508:	9080040c 	andi	r2,r18,16
   4250c:	10005c26 	beq	r2,zero,42680 <___svfprintf_internal_r+0x14b0>
   42510:	d8c02e17 	ldw	r3,184(sp)
   42514:	d9002a17 	ldw	r4,168(sp)
   42518:	d8002785 	stb	zero,158(sp)
   4251c:	18800104 	addi	r2,r3,4
   42520:	1d000017 	ldw	r20,0(r3)
   42524:	002d883a 	mov	r22,zero
   42528:	20005e16 	blt	r4,zero,426a4 <___svfprintf_internal_r+0x14d4>
   4252c:	00ffdfc4 	movi	r3,-129
   42530:	d8802e15 	stw	r2,184(sp)
   42534:	90e4703a 	and	r18,r18,r3
   42538:	0039883a 	mov	fp,zero
   4253c:	a03ddf26 	beq	r20,zero,41cbc <__alt_data_end+0xfffcfcbc>
   42540:	00800244 	movi	r2,9
   42544:	153c8e36 	bltu	r2,r20,41780 <__alt_data_end+0xfffcf780>
   42548:	a5000c04 	addi	r20,r20,48
   4254c:	dc001dc4 	addi	r16,sp,119
   42550:	dd001dc5 	stb	r20,119(sp)
   42554:	d8c02817 	ldw	r3,160(sp)
   42558:	1c07c83a 	sub	r3,r3,r16
   4255c:	d8c02b15 	stw	r3,172(sp)
   42560:	003cd306 	br	418b0 <__alt_data_end+0xfffcf8b0>
   42564:	d8803317 	ldw	r2,204(sp)
   42568:	143fffc4 	addi	r16,r2,-1
   4256c:	043f560e 	bge	zero,r16,422c8 <__alt_data_end+0xfffd02c8>
   42570:	07000404 	movi	fp,16
   42574:	e403530e 	bge	fp,r16,432c4 <___svfprintf_internal_r+0x20f4>
   42578:	01400174 	movhi	r5,5
   4257c:	2957e484 	addi	r5,r5,24466
   42580:	d9402c15 	stw	r5,176(sp)
   42584:	01c001c4 	movi	r7,7
   42588:	dd002d17 	ldw	r20,180(sp)
   4258c:	00000306 	br	4259c <___svfprintf_internal_r+0x13cc>
   42590:	843ffc04 	addi	r16,r16,-16
   42594:	b5800204 	addi	r22,r22,8
   42598:	e400130e 	bge	fp,r16,425e8 <___svfprintf_internal_r+0x1418>
   4259c:	18c00404 	addi	r3,r3,16
   425a0:	8c400044 	addi	r17,r17,1
   425a4:	b5400015 	stw	r21,0(r22)
   425a8:	b7000115 	stw	fp,4(r22)
   425ac:	d8c02015 	stw	r3,128(sp)
   425b0:	dc401f15 	stw	r17,124(sp)
   425b4:	3c7ff60e 	bge	r7,r17,42590 <__alt_data_end+0xfffd0590>
   425b8:	d9801e04 	addi	r6,sp,120
   425bc:	a00b883a 	mov	r5,r20
   425c0:	9809883a 	mov	r4,r19
   425c4:	d9c03d15 	stw	r7,244(sp)
   425c8:	004acd80 	call	4acd8 <__ssprint_r>
   425cc:	d9c03d17 	ldw	r7,244(sp)
   425d0:	103be61e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   425d4:	843ffc04 	addi	r16,r16,-16
   425d8:	d8c02017 	ldw	r3,128(sp)
   425dc:	dc401f17 	ldw	r17,124(sp)
   425e0:	dd800404 	addi	r22,sp,16
   425e4:	e43fed16 	blt	fp,r16,4259c <__alt_data_end+0xfffd059c>
   425e8:	d8802c17 	ldw	r2,176(sp)
   425ec:	1c07883a 	add	r3,r3,r16
   425f0:	8c400044 	addi	r17,r17,1
   425f4:	b0800015 	stw	r2,0(r22)
   425f8:	b4000115 	stw	r16,4(r22)
   425fc:	d8c02015 	stw	r3,128(sp)
   42600:	dc401f15 	stw	r17,124(sp)
   42604:	008001c4 	movi	r2,7
   42608:	147f2e0e 	bge	r2,r17,422c4 <__alt_data_end+0xfffd02c4>
   4260c:	d9402d17 	ldw	r5,180(sp)
   42610:	d9801e04 	addi	r6,sp,120
   42614:	9809883a 	mov	r4,r19
   42618:	004acd80 	call	4acd8 <__ssprint_r>
   4261c:	103bd31e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42620:	d8c02017 	ldw	r3,128(sp)
   42624:	dc401f17 	ldw	r17,124(sp)
   42628:	dd800404 	addi	r22,sp,16
   4262c:	003f2606 	br	422c8 <__alt_data_end+0xfffd02c8>
   42630:	9080040c 	andi	r2,r18,16
   42634:	1000c326 	beq	r2,zero,42944 <___svfprintf_internal_r+0x1774>
   42638:	d9402e17 	ldw	r5,184(sp)
   4263c:	2d000017 	ldw	r20,0(r5)
   42640:	29400104 	addi	r5,r5,4
   42644:	d9402e15 	stw	r5,184(sp)
   42648:	a02dd7fa 	srai	r22,r20,31
   4264c:	b005883a 	mov	r2,r22
   42650:	103c430e 	bge	r2,zero,41760 <__alt_data_end+0xfffcf760>
   42654:	d9402a17 	ldw	r5,168(sp)
   42658:	0529c83a 	sub	r20,zero,r20
   4265c:	07000b44 	movi	fp,45
   42660:	a004c03a 	cmpne	r2,r20,zero
   42664:	05adc83a 	sub	r22,zero,r22
   42668:	df002785 	stb	fp,158(sp)
   4266c:	b0adc83a 	sub	r22,r22,r2
   42670:	28022e16 	blt	r5,zero,42f2c <___svfprintf_internal_r+0x1d5c>
   42674:	00bfdfc4 	movi	r2,-129
   42678:	90a4703a 	and	r18,r18,r2
   4267c:	003c3f06 	br	4177c <__alt_data_end+0xfffcf77c>
   42680:	9080100c 	andi	r2,r18,64
   42684:	d8002785 	stb	zero,158(sp)
   42688:	10012526 	beq	r2,zero,42b20 <___svfprintf_internal_r+0x1950>
   4268c:	d9402e17 	ldw	r5,184(sp)
   42690:	d8c02a17 	ldw	r3,168(sp)
   42694:	002d883a 	mov	r22,zero
   42698:	28800104 	addi	r2,r5,4
   4269c:	2d00000b 	ldhu	r20,0(r5)
   426a0:	183fa20e 	bge	r3,zero,4252c <__alt_data_end+0xfffd052c>
   426a4:	d8802e15 	stw	r2,184(sp)
   426a8:	0039883a 	mov	fp,zero
   426ac:	a584b03a 	or	r2,r20,r22
   426b0:	103c321e 	bne	r2,zero,4177c <__alt_data_end+0xfffcf77c>
   426b4:	00800044 	movi	r2,1
   426b8:	003e5006 	br	41ffc <__alt_data_end+0xfffcfffc>
   426bc:	d9402d17 	ldw	r5,180(sp)
   426c0:	d9801e04 	addi	r6,sp,120
   426c4:	9809883a 	mov	r4,r19
   426c8:	004acd80 	call	4acd8 <__ssprint_r>
   426cc:	103ba71e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   426d0:	d8c02017 	ldw	r3,128(sp)
   426d4:	da000404 	addi	r8,sp,16
   426d8:	d9003217 	ldw	r4,200(sp)
   426dc:	d8802617 	ldw	r2,152(sp)
   426e0:	d9403317 	ldw	r5,204(sp)
   426e4:	8123883a 	add	r17,r16,r4
   426e8:	11400216 	blt	r2,r5,426f4 <___svfprintf_internal_r+0x1524>
   426ec:	9100004c 	andi	r4,r18,1
   426f0:	20000d26 	beq	r4,zero,42728 <___svfprintf_internal_r+0x1558>
   426f4:	d9003817 	ldw	r4,224(sp)
   426f8:	d9403417 	ldw	r5,208(sp)
   426fc:	1907883a 	add	r3,r3,r4
   42700:	d9001f17 	ldw	r4,124(sp)
   42704:	41400015 	stw	r5,0(r8)
   42708:	d9403817 	ldw	r5,224(sp)
   4270c:	21000044 	addi	r4,r4,1
   42710:	d8c02015 	stw	r3,128(sp)
   42714:	41400115 	stw	r5,4(r8)
   42718:	d9001f15 	stw	r4,124(sp)
   4271c:	014001c4 	movi	r5,7
   42720:	2901dc16 	blt	r5,r4,42e94 <___svfprintf_internal_r+0x1cc4>
   42724:	42000204 	addi	r8,r8,8
   42728:	d9003317 	ldw	r4,204(sp)
   4272c:	8121883a 	add	r16,r16,r4
   42730:	2085c83a 	sub	r2,r4,r2
   42734:	8461c83a 	sub	r16,r16,r17
   42738:	1400010e 	bge	r2,r16,42740 <___svfprintf_internal_r+0x1570>
   4273c:	1021883a 	mov	r16,r2
   42740:	04000a0e 	bge	zero,r16,4276c <___svfprintf_internal_r+0x159c>
   42744:	d9001f17 	ldw	r4,124(sp)
   42748:	1c07883a 	add	r3,r3,r16
   4274c:	44400015 	stw	r17,0(r8)
   42750:	21000044 	addi	r4,r4,1
   42754:	44000115 	stw	r16,4(r8)
   42758:	d8c02015 	stw	r3,128(sp)
   4275c:	d9001f15 	stw	r4,124(sp)
   42760:	014001c4 	movi	r5,7
   42764:	2901e616 	blt	r5,r4,42f00 <___svfprintf_internal_r+0x1d30>
   42768:	42000204 	addi	r8,r8,8
   4276c:	8001f616 	blt	r16,zero,42f48 <___svfprintf_internal_r+0x1d78>
   42770:	1421c83a 	sub	r16,r2,r16
   42774:	043cfa0e 	bge	zero,r16,41b60 <__alt_data_end+0xfffcfb60>
   42778:	04400404 	movi	r17,16
   4277c:	d8801f17 	ldw	r2,124(sp)
   42780:	8c3edd0e 	bge	r17,r16,422f8 <__alt_data_end+0xfffd02f8>
   42784:	01400174 	movhi	r5,5
   42788:	2957e484 	addi	r5,r5,24466
   4278c:	d9402c15 	stw	r5,176(sp)
   42790:	058001c4 	movi	r22,7
   42794:	dd002d17 	ldw	r20,180(sp)
   42798:	00000306 	br	427a8 <___svfprintf_internal_r+0x15d8>
   4279c:	42000204 	addi	r8,r8,8
   427a0:	843ffc04 	addi	r16,r16,-16
   427a4:	8c3ed70e 	bge	r17,r16,42304 <__alt_data_end+0xfffd0304>
   427a8:	18c00404 	addi	r3,r3,16
   427ac:	10800044 	addi	r2,r2,1
   427b0:	45400015 	stw	r21,0(r8)
   427b4:	44400115 	stw	r17,4(r8)
   427b8:	d8c02015 	stw	r3,128(sp)
   427bc:	d8801f15 	stw	r2,124(sp)
   427c0:	b0bff60e 	bge	r22,r2,4279c <__alt_data_end+0xfffd079c>
   427c4:	d9801e04 	addi	r6,sp,120
   427c8:	a00b883a 	mov	r5,r20
   427cc:	9809883a 	mov	r4,r19
   427d0:	004acd80 	call	4acd8 <__ssprint_r>
   427d4:	103b651e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   427d8:	d8c02017 	ldw	r3,128(sp)
   427dc:	d8801f17 	ldw	r2,124(sp)
   427e0:	da000404 	addi	r8,sp,16
   427e4:	003fee06 	br	427a0 <__alt_data_end+0xfffd07a0>
   427e8:	9088703a 	and	r4,r18,r2
   427ec:	203e8d1e 	bne	r4,zero,42224 <__alt_data_end+0xfffd0224>
   427f0:	dc401f17 	ldw	r17,124(sp)
   427f4:	40800115 	stw	r2,4(r8)
   427f8:	44000015 	stw	r16,0(r8)
   427fc:	8c400044 	addi	r17,r17,1
   42800:	d8c02015 	stw	r3,128(sp)
   42804:	dc401f15 	stw	r17,124(sp)
   42808:	008001c4 	movi	r2,7
   4280c:	147f7f16 	blt	r2,r17,4260c <__alt_data_end+0xfffd060c>
   42810:	45800204 	addi	r22,r8,8
   42814:	003eac06 	br	422c8 <__alt_data_end+0xfffd02c8>
   42818:	d9402d17 	ldw	r5,180(sp)
   4281c:	d9801e04 	addi	r6,sp,120
   42820:	9809883a 	mov	r4,r19
   42824:	004acd80 	call	4acd8 <__ssprint_r>
   42828:	103b501e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   4282c:	d8c02017 	ldw	r3,128(sp)
   42830:	dc401f17 	ldw	r17,124(sp)
   42834:	da000404 	addi	r8,sp,16
   42838:	003e8406 	br	4224c <__alt_data_end+0xfffd024c>
   4283c:	d9402d17 	ldw	r5,180(sp)
   42840:	d9801e04 	addi	r6,sp,120
   42844:	9809883a 	mov	r4,r19
   42848:	004acd80 	call	4acd8 <__ssprint_r>
   4284c:	103b471e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42850:	d8c02017 	ldw	r3,128(sp)
   42854:	dc401f17 	ldw	r17,124(sp)
   42858:	dd800404 	addi	r22,sp,16
   4285c:	003e8606 	br	42278 <__alt_data_end+0xfffd0278>
   42860:	0029883a 	mov	r20,zero
   42864:	a5000c04 	addi	r20,r20,48
   42868:	dc001dc4 	addi	r16,sp,119
   4286c:	dd001dc5 	stb	r20,119(sp)
   42870:	003f3806 	br	42554 <__alt_data_end+0xfffd0554>
   42874:	d9402d17 	ldw	r5,180(sp)
   42878:	d9801e04 	addi	r6,sp,120
   4287c:	9809883a 	mov	r4,r19
   42880:	004acd80 	call	4acd8 <__ssprint_r>
   42884:	103b391e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42888:	d8c02017 	ldw	r3,128(sp)
   4288c:	da000404 	addi	r8,sp,16
   42890:	003c7306 	br	41a60 <__alt_data_end+0xfffcfa60>
   42894:	d9003617 	ldw	r4,216(sp)
   42898:	d9403717 	ldw	r5,220(sp)
   4289c:	da003e15 	stw	r8,248(sp)
   428a0:	004a9f80 	call	4a9f8 <__fpclassifyd>
   428a4:	da003e17 	ldw	r8,248(sp)
   428a8:	1000bd1e 	bne	r2,zero,42ba0 <___svfprintf_internal_r+0x19d0>
   428ac:	008011c4 	movi	r2,71
   428b0:	14411e0e 	bge	r2,r17,42d2c <___svfprintf_internal_r+0x1b5c>
   428b4:	04000174 	movhi	r16,5
   428b8:	8417d704 	addi	r16,r16,24412
   428bc:	00c000c4 	movi	r3,3
   428c0:	00bfdfc4 	movi	r2,-129
   428c4:	d8c02915 	stw	r3,164(sp)
   428c8:	90a4703a 	and	r18,r18,r2
   428cc:	df002783 	ldbu	fp,158(sp)
   428d0:	d8c02b15 	stw	r3,172(sp)
   428d4:	d8002a15 	stw	zero,168(sp)
   428d8:	d8003215 	stw	zero,200(sp)
   428dc:	003bfa06 	br	418c8 <__alt_data_end+0xfffcf8c8>
   428e0:	9080100c 	andi	r2,r18,64
   428e4:	d8002785 	stb	zero,158(sp)
   428e8:	10009426 	beq	r2,zero,42b3c <___svfprintf_internal_r+0x196c>
   428ec:	d9402e17 	ldw	r5,184(sp)
   428f0:	d8c02a17 	ldw	r3,168(sp)
   428f4:	002d883a 	mov	r22,zero
   428f8:	28800104 	addi	r2,r5,4
   428fc:	2d00000b 	ldhu	r20,0(r5)
   42900:	183ec10e 	bge	r3,zero,42408 <__alt_data_end+0xfffd0408>
   42904:	a586b03a 	or	r3,r20,r22
   42908:	d8802e15 	stw	r2,184(sp)
   4290c:	183ec21e 	bne	r3,zero,42418 <__alt_data_end+0xfffd0418>
   42910:	0039883a 	mov	fp,zero
   42914:	0005883a 	mov	r2,zero
   42918:	003db806 	br	41ffc <__alt_data_end+0xfffcfffc>
   4291c:	d8c02e17 	ldw	r3,184(sp)
   42920:	d9002e17 	ldw	r4,184(sp)
   42924:	d9402e17 	ldw	r5,184(sp)
   42928:	18c00017 	ldw	r3,0(r3)
   4292c:	21000117 	ldw	r4,4(r4)
   42930:	29400204 	addi	r5,r5,8
   42934:	d8c03615 	stw	r3,216(sp)
   42938:	d9003715 	stw	r4,220(sp)
   4293c:	d9402e15 	stw	r5,184(sp)
   42940:	003b5a06 	br	416ac <__alt_data_end+0xfffcf6ac>
   42944:	9080100c 	andi	r2,r18,64
   42948:	10010726 	beq	r2,zero,42d68 <___svfprintf_internal_r+0x1b98>
   4294c:	d8802e17 	ldw	r2,184(sp)
   42950:	1500000f 	ldh	r20,0(r2)
   42954:	10800104 	addi	r2,r2,4
   42958:	d8802e15 	stw	r2,184(sp)
   4295c:	a02dd7fa 	srai	r22,r20,31
   42960:	b005883a 	mov	r2,r22
   42964:	003b7d06 	br	4175c <__alt_data_end+0xfffcf75c>
   42968:	9080100c 	andi	r2,r18,64
   4296c:	10010526 	beq	r2,zero,42d84 <___svfprintf_internal_r+0x1bb4>
   42970:	d8c02e17 	ldw	r3,184(sp)
   42974:	002d883a 	mov	r22,zero
   42978:	1d00000b 	ldhu	r20,0(r3)
   4297c:	18c00104 	addi	r3,r3,4
   42980:	d8c02e15 	stw	r3,184(sp)
   42984:	003ce206 	br	41d10 <__alt_data_end+0xfffcfd10>
   42988:	bc400007 	ldb	r17,0(r23)
   4298c:	003a6506 	br	41324 <__alt_data_end+0xfffcf324>
   42990:	9080040c 	andi	r2,r18,16
   42994:	10010126 	beq	r2,zero,42d9c <___svfprintf_internal_r+0x1bcc>
   42998:	d8c02e17 	ldw	r3,184(sp)
   4299c:	d9002f17 	ldw	r4,188(sp)
   429a0:	18800017 	ldw	r2,0(r3)
   429a4:	18c00104 	addi	r3,r3,4
   429a8:	d8c02e15 	stw	r3,184(sp)
   429ac:	11000015 	stw	r4,0(r2)
   429b0:	003a3206 	br	4127c <__alt_data_end+0xfffcf27c>
   429b4:	d9002a17 	ldw	r4,168(sp)
   429b8:	d8002785 	stb	zero,158(sp)
   429bc:	203d8d16 	blt	r4,zero,41ff4 <__alt_data_end+0xfffcfff4>
   429c0:	00bfdfc4 	movi	r2,-129
   429c4:	90a4703a 	and	r18,r18,r2
   429c8:	003ad506 	br	41520 <__alt_data_end+0xfffcf520>
   429cc:	01400174 	movhi	r5,5
   429d0:	2957e484 	addi	r5,r5,24466
   429d4:	d9402c15 	stw	r5,176(sp)
   429d8:	d9402c17 	ldw	r5,176(sp)
   429dc:	1c47883a 	add	r3,r3,r17
   429e0:	10800044 	addi	r2,r2,1
   429e4:	41400015 	stw	r5,0(r8)
   429e8:	44400115 	stw	r17,4(r8)
   429ec:	d8c02015 	stw	r3,128(sp)
   429f0:	d8801f15 	stw	r2,124(sp)
   429f4:	010001c4 	movi	r4,7
   429f8:	20bf3016 	blt	r4,r2,426bc <__alt_data_end+0xfffd06bc>
   429fc:	42000204 	addi	r8,r8,8
   42a00:	003f3506 	br	426d8 <__alt_data_end+0xfffd06d8>
   42a04:	01000174 	movhi	r4,5
   42a08:	2117e484 	addi	r4,r4,24466
   42a0c:	d9002c15 	stw	r4,176(sp)
   42a10:	003c3c06 	br	41b04 <__alt_data_end+0xfffcfb04>
   42a14:	d9402d17 	ldw	r5,180(sp)
   42a18:	d9801e04 	addi	r6,sp,120
   42a1c:	9809883a 	mov	r4,r19
   42a20:	004acd80 	call	4acd8 <__ssprint_r>
   42a24:	103ad11e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42a28:	d8c02017 	ldw	r3,128(sp)
   42a2c:	da000404 	addi	r8,sp,16
   42a30:	003d9306 	br	42080 <__alt_data_end+0xfffd0080>
   42a34:	d8801f17 	ldw	r2,124(sp)
   42a38:	01400174 	movhi	r5,5
   42a3c:	01000044 	movi	r4,1
   42a40:	18c00044 	addi	r3,r3,1
   42a44:	10800044 	addi	r2,r2,1
   42a48:	2957e404 	addi	r5,r5,24464
   42a4c:	41000115 	stw	r4,4(r8)
   42a50:	41400015 	stw	r5,0(r8)
   42a54:	d8c02015 	stw	r3,128(sp)
   42a58:	d8801f15 	stw	r2,124(sp)
   42a5c:	010001c4 	movi	r4,7
   42a60:	2080b516 	blt	r4,r2,42d38 <___svfprintf_internal_r+0x1b68>
   42a64:	42000204 	addi	r8,r8,8
   42a68:	8800041e 	bne	r17,zero,42a7c <___svfprintf_internal_r+0x18ac>
   42a6c:	d8803317 	ldw	r2,204(sp)
   42a70:	1000021e 	bne	r2,zero,42a7c <___svfprintf_internal_r+0x18ac>
   42a74:	9080004c 	andi	r2,r18,1
   42a78:	103c3926 	beq	r2,zero,41b60 <__alt_data_end+0xfffcfb60>
   42a7c:	d9003817 	ldw	r4,224(sp)
   42a80:	d8801f17 	ldw	r2,124(sp)
   42a84:	d9403417 	ldw	r5,208(sp)
   42a88:	20c7883a 	add	r3,r4,r3
   42a8c:	10800044 	addi	r2,r2,1
   42a90:	41000115 	stw	r4,4(r8)
   42a94:	41400015 	stw	r5,0(r8)
   42a98:	d8c02015 	stw	r3,128(sp)
   42a9c:	d8801f15 	stw	r2,124(sp)
   42aa0:	010001c4 	movi	r4,7
   42aa4:	20818016 	blt	r4,r2,430a8 <___svfprintf_internal_r+0x1ed8>
   42aa8:	42000204 	addi	r8,r8,8
   42aac:	0463c83a 	sub	r17,zero,r17
   42ab0:	0440cb0e 	bge	zero,r17,42de0 <___svfprintf_internal_r+0x1c10>
   42ab4:	05800404 	movi	r22,16
   42ab8:	b440e80e 	bge	r22,r17,42e5c <___svfprintf_internal_r+0x1c8c>
   42abc:	01400174 	movhi	r5,5
   42ac0:	2957e484 	addi	r5,r5,24466
   42ac4:	d9402c15 	stw	r5,176(sp)
   42ac8:	070001c4 	movi	fp,7
   42acc:	dd002d17 	ldw	r20,180(sp)
   42ad0:	00000306 	br	42ae0 <___svfprintf_internal_r+0x1910>
   42ad4:	42000204 	addi	r8,r8,8
   42ad8:	8c7ffc04 	addi	r17,r17,-16
   42adc:	b440e20e 	bge	r22,r17,42e68 <___svfprintf_internal_r+0x1c98>
   42ae0:	18c00404 	addi	r3,r3,16
   42ae4:	10800044 	addi	r2,r2,1
   42ae8:	45400015 	stw	r21,0(r8)
   42aec:	45800115 	stw	r22,4(r8)
   42af0:	d8c02015 	stw	r3,128(sp)
   42af4:	d8801f15 	stw	r2,124(sp)
   42af8:	e0bff60e 	bge	fp,r2,42ad4 <__alt_data_end+0xfffd0ad4>
   42afc:	d9801e04 	addi	r6,sp,120
   42b00:	a00b883a 	mov	r5,r20
   42b04:	9809883a 	mov	r4,r19
   42b08:	004acd80 	call	4acd8 <__ssprint_r>
   42b0c:	103a971e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42b10:	d8c02017 	ldw	r3,128(sp)
   42b14:	d8801f17 	ldw	r2,124(sp)
   42b18:	da000404 	addi	r8,sp,16
   42b1c:	003fee06 	br	42ad8 <__alt_data_end+0xfffd0ad8>
   42b20:	d9002e17 	ldw	r4,184(sp)
   42b24:	d9402a17 	ldw	r5,168(sp)
   42b28:	002d883a 	mov	r22,zero
   42b2c:	20800104 	addi	r2,r4,4
   42b30:	25000017 	ldw	r20,0(r4)
   42b34:	283e7d0e 	bge	r5,zero,4252c <__alt_data_end+0xfffd052c>
   42b38:	003eda06 	br	426a4 <__alt_data_end+0xfffd06a4>
   42b3c:	d9002e17 	ldw	r4,184(sp)
   42b40:	d9402a17 	ldw	r5,168(sp)
   42b44:	002d883a 	mov	r22,zero
   42b48:	20800104 	addi	r2,r4,4
   42b4c:	25000017 	ldw	r20,0(r4)
   42b50:	283e2d0e 	bge	r5,zero,42408 <__alt_data_end+0xfffd0408>
   42b54:	003f6b06 	br	42904 <__alt_data_end+0xfffd0904>
   42b58:	d8c02e15 	stw	r3,184(sp)
   42b5c:	0039883a 	mov	fp,zero
   42b60:	003ed206 	br	426ac <__alt_data_end+0xfffd06ac>
   42b64:	bc400043 	ldbu	r17,1(r23)
   42b68:	84000814 	ori	r16,r16,32
   42b6c:	bdc00044 	addi	r23,r23,1
   42b70:	8c403fcc 	andi	r17,r17,255
   42b74:	8c40201c 	xori	r17,r17,128
   42b78:	8c7fe004 	addi	r17,r17,-128
   42b7c:	0039e906 	br	41324 <__alt_data_end+0xfffcf324>
   42b80:	d9402d17 	ldw	r5,180(sp)
   42b84:	d9801e04 	addi	r6,sp,120
   42b88:	9809883a 	mov	r4,r19
   42b8c:	004acd80 	call	4acd8 <__ssprint_r>
   42b90:	103a761e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42b94:	d8c02017 	ldw	r3,128(sp)
   42b98:	da000404 	addi	r8,sp,16
   42b9c:	003d4a06 	br	420c8 <__alt_data_end+0xfffd00c8>
   42ba0:	d9002a17 	ldw	r4,168(sp)
   42ba4:	05bff7c4 	movi	r22,-33
   42ba8:	00bfffc4 	movi	r2,-1
   42bac:	8dac703a 	and	r22,r17,r22
   42bb0:	20806a26 	beq	r4,r2,42d5c <___svfprintf_internal_r+0x1b8c>
   42bb4:	008011c4 	movi	r2,71
   42bb8:	b0813726 	beq	r22,r2,43098 <___svfprintf_internal_r+0x1ec8>
   42bbc:	d9003717 	ldw	r4,220(sp)
   42bc0:	90c04014 	ori	r3,r18,256
   42bc4:	d8c02c15 	stw	r3,176(sp)
   42bc8:	20015d16 	blt	r4,zero,43140 <___svfprintf_internal_r+0x1f70>
   42bcc:	dd003717 	ldw	r20,220(sp)
   42bd0:	d8002905 	stb	zero,164(sp)
   42bd4:	00801984 	movi	r2,102
   42bd8:	88814026 	beq	r17,r2,430dc <___svfprintf_internal_r+0x1f0c>
   42bdc:	00801184 	movi	r2,70
   42be0:	88817126 	beq	r17,r2,431a8 <___svfprintf_internal_r+0x1fd8>
   42be4:	00801144 	movi	r2,69
   42be8:	b0816226 	beq	r22,r2,43174 <___svfprintf_internal_r+0x1fa4>
   42bec:	d8c02a17 	ldw	r3,168(sp)
   42bf0:	d8802104 	addi	r2,sp,132
   42bf4:	d8800315 	stw	r2,12(sp)
   42bf8:	d9403617 	ldw	r5,216(sp)
   42bfc:	d8802504 	addi	r2,sp,148
   42c00:	d8800215 	stw	r2,8(sp)
   42c04:	d8802604 	addi	r2,sp,152
   42c08:	d8c00015 	stw	r3,0(sp)
   42c0c:	d8800115 	stw	r2,4(sp)
   42c10:	01c00084 	movi	r7,2
   42c14:	a00d883a 	mov	r6,r20
   42c18:	9809883a 	mov	r4,r19
   42c1c:	d8c03d15 	stw	r3,244(sp)
   42c20:	da003e15 	stw	r8,248(sp)
   42c24:	0045bbc0 	call	45bbc <_dtoa_r>
   42c28:	1021883a 	mov	r16,r2
   42c2c:	008019c4 	movi	r2,103
   42c30:	d8c03d17 	ldw	r3,244(sp)
   42c34:	da003e17 	ldw	r8,248(sp)
   42c38:	8880e726 	beq	r17,r2,42fd8 <___svfprintf_internal_r+0x1e08>
   42c3c:	008011c4 	movi	r2,71
   42c40:	8880d426 	beq	r17,r2,42f94 <___svfprintf_internal_r+0x1dc4>
   42c44:	80f9883a 	add	fp,r16,r3
   42c48:	d9003617 	ldw	r4,216(sp)
   42c4c:	000d883a 	mov	r6,zero
   42c50:	000f883a 	mov	r7,zero
   42c54:	a00b883a 	mov	r5,r20
   42c58:	da003e15 	stw	r8,248(sp)
   42c5c:	00500c80 	call	500c8 <__eqdf2>
   42c60:	da003e17 	ldw	r8,248(sp)
   42c64:	1000e426 	beq	r2,zero,42ff8 <___svfprintf_internal_r+0x1e28>
   42c68:	d8802117 	ldw	r2,132(sp)
   42c6c:	1700062e 	bgeu	r2,fp,42c88 <___svfprintf_internal_r+0x1ab8>
   42c70:	01000c04 	movi	r4,48
   42c74:	10c00044 	addi	r3,r2,1
   42c78:	d8c02115 	stw	r3,132(sp)
   42c7c:	11000005 	stb	r4,0(r2)
   42c80:	d8802117 	ldw	r2,132(sp)
   42c84:	173ffb36 	bltu	r2,fp,42c74 <__alt_data_end+0xfffd0c74>
   42c88:	1405c83a 	sub	r2,r2,r16
   42c8c:	d8803315 	stw	r2,204(sp)
   42c90:	008011c4 	movi	r2,71
   42c94:	b080c526 	beq	r22,r2,42fac <___svfprintf_internal_r+0x1ddc>
   42c98:	00801944 	movi	r2,101
   42c9c:	1441d80e 	bge	r2,r17,43400 <___svfprintf_internal_r+0x2230>
   42ca0:	d8c02617 	ldw	r3,152(sp)
   42ca4:	00801984 	movi	r2,102
   42ca8:	d8c03215 	stw	r3,200(sp)
   42cac:	88813426 	beq	r17,r2,43180 <___svfprintf_internal_r+0x1fb0>
   42cb0:	d8c03217 	ldw	r3,200(sp)
   42cb4:	d9003317 	ldw	r4,204(sp)
   42cb8:	19012516 	blt	r3,r4,43150 <___svfprintf_internal_r+0x1f80>
   42cbc:	9480004c 	andi	r18,r18,1
   42cc0:	9001841e 	bne	r18,zero,432d4 <___svfprintf_internal_r+0x2104>
   42cc4:	1805883a 	mov	r2,r3
   42cc8:	1801cb16 	blt	r3,zero,433f8 <___svfprintf_internal_r+0x2228>
   42ccc:	d8c03217 	ldw	r3,200(sp)
   42cd0:	044019c4 	movi	r17,103
   42cd4:	d8c02b15 	stw	r3,172(sp)
   42cd8:	df002907 	ldb	fp,164(sp)
   42cdc:	e000a61e 	bne	fp,zero,42f78 <___svfprintf_internal_r+0x1da8>
   42ce0:	df002783 	ldbu	fp,158(sp)
   42ce4:	d8802915 	stw	r2,164(sp)
   42ce8:	dc802c17 	ldw	r18,176(sp)
   42cec:	d8002a15 	stw	zero,168(sp)
   42cf0:	003af506 	br	418c8 <__alt_data_end+0xfffcf8c8>
   42cf4:	04000174 	movhi	r16,5
   42cf8:	8417d404 	addi	r16,r16,24400
   42cfc:	003a7e06 	br	416f8 <__alt_data_end+0xfffcf6f8>
   42d00:	d9003917 	ldw	r4,228(sp)
   42d04:	04001004 	movi	r16,64
   42d08:	800b883a 	mov	r5,r16
   42d0c:	00485b80 	call	485b8 <_malloc_r>
   42d10:	d9002d17 	ldw	r4,180(sp)
   42d14:	20800015 	stw	r2,0(r4)
   42d18:	20800415 	stw	r2,16(r4)
   42d1c:	1001d026 	beq	r2,zero,43460 <___svfprintf_internal_r+0x2290>
   42d20:	d8802d17 	ldw	r2,180(sp)
   42d24:	14000515 	stw	r16,20(r2)
   42d28:	00394406 	br	4123c <__alt_data_end+0xfffcf23c>
   42d2c:	04000174 	movhi	r16,5
   42d30:	8417d604 	addi	r16,r16,24408
   42d34:	003ee106 	br	428bc <__alt_data_end+0xfffd08bc>
   42d38:	d9402d17 	ldw	r5,180(sp)
   42d3c:	d9801e04 	addi	r6,sp,120
   42d40:	9809883a 	mov	r4,r19
   42d44:	004acd80 	call	4acd8 <__ssprint_r>
   42d48:	103a081e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42d4c:	dc402617 	ldw	r17,152(sp)
   42d50:	d8c02017 	ldw	r3,128(sp)
   42d54:	da000404 	addi	r8,sp,16
   42d58:	003f4306 	br	42a68 <__alt_data_end+0xfffd0a68>
   42d5c:	01400184 	movi	r5,6
   42d60:	d9402a15 	stw	r5,168(sp)
   42d64:	003f9506 	br	42bbc <__alt_data_end+0xfffd0bbc>
   42d68:	d8c02e17 	ldw	r3,184(sp)
   42d6c:	1d000017 	ldw	r20,0(r3)
   42d70:	18c00104 	addi	r3,r3,4
   42d74:	d8c02e15 	stw	r3,184(sp)
   42d78:	a02dd7fa 	srai	r22,r20,31
   42d7c:	b005883a 	mov	r2,r22
   42d80:	003a7606 	br	4175c <__alt_data_end+0xfffcf75c>
   42d84:	d9002e17 	ldw	r4,184(sp)
   42d88:	002d883a 	mov	r22,zero
   42d8c:	25000017 	ldw	r20,0(r4)
   42d90:	21000104 	addi	r4,r4,4
   42d94:	d9002e15 	stw	r4,184(sp)
   42d98:	003bdd06 	br	41d10 <__alt_data_end+0xfffcfd10>
   42d9c:	9480100c 	andi	r18,r18,64
   42da0:	90006e26 	beq	r18,zero,42f5c <___svfprintf_internal_r+0x1d8c>
   42da4:	d9402e17 	ldw	r5,184(sp)
   42da8:	d8c02f17 	ldw	r3,188(sp)
   42dac:	28800017 	ldw	r2,0(r5)
   42db0:	29400104 	addi	r5,r5,4
   42db4:	d9402e15 	stw	r5,184(sp)
   42db8:	10c0000d 	sth	r3,0(r2)
   42dbc:	00392f06 	br	4127c <__alt_data_end+0xfffcf27c>
   42dc0:	d9402d17 	ldw	r5,180(sp)
   42dc4:	d9801e04 	addi	r6,sp,120
   42dc8:	9809883a 	mov	r4,r19
   42dcc:	004acd80 	call	4acd8 <__ssprint_r>
   42dd0:	1039e61e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42dd4:	d8c02017 	ldw	r3,128(sp)
   42dd8:	d8801f17 	ldw	r2,124(sp)
   42ddc:	da000404 	addi	r8,sp,16
   42de0:	d9403317 	ldw	r5,204(sp)
   42de4:	10800044 	addi	r2,r2,1
   42de8:	44000015 	stw	r16,0(r8)
   42dec:	28c7883a 	add	r3,r5,r3
   42df0:	003b5506 	br	41b48 <__alt_data_end+0xfffcfb48>
   42df4:	8009883a 	mov	r4,r16
   42df8:	df003e15 	stw	fp,248(sp)
   42dfc:	00411380 	call	41138 <strlen>
   42e00:	d8802b15 	stw	r2,172(sp)
   42e04:	da003e17 	ldw	r8,248(sp)
   42e08:	103c160e 	bge	r2,zero,41e64 <__alt_data_end+0xfffcfe64>
   42e0c:	0005883a 	mov	r2,zero
   42e10:	003c1406 	br	41e64 <__alt_data_end+0xfffcfe64>
   42e14:	00bfffc4 	movi	r2,-1
   42e18:	0039d906 	br	41580 <__alt_data_end+0xfffcf580>
   42e1c:	01000174 	movhi	r4,5
   42e20:	2117e884 	addi	r4,r4,24482
   42e24:	d9003515 	stw	r4,212(sp)
   42e28:	003ae406 	br	419bc <__alt_data_end+0xfffcf9bc>
   42e2c:	013fffc4 	movi	r4,-1
   42e30:	0039fa06 	br	4161c <__alt_data_end+0xfffcf61c>
   42e34:	d9402d17 	ldw	r5,180(sp)
   42e38:	d9801e04 	addi	r6,sp,120
   42e3c:	9809883a 	mov	r4,r19
   42e40:	004acd80 	call	4acd8 <__ssprint_r>
   42e44:	1039c91e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42e48:	d8c02017 	ldw	r3,128(sp)
   42e4c:	da000404 	addi	r8,sp,16
   42e50:	003d8406 	br	42464 <__alt_data_end+0xfffd0464>
   42e54:	0023883a 	mov	r17,zero
   42e58:	003d8306 	br	42468 <__alt_data_end+0xfffd0468>
   42e5c:	01000174 	movhi	r4,5
   42e60:	2117e484 	addi	r4,r4,24466
   42e64:	d9002c15 	stw	r4,176(sp)
   42e68:	d9002c17 	ldw	r4,176(sp)
   42e6c:	1c47883a 	add	r3,r3,r17
   42e70:	10800044 	addi	r2,r2,1
   42e74:	41000015 	stw	r4,0(r8)
   42e78:	44400115 	stw	r17,4(r8)
   42e7c:	d8c02015 	stw	r3,128(sp)
   42e80:	d8801f15 	stw	r2,124(sp)
   42e84:	010001c4 	movi	r4,7
   42e88:	20bfcd16 	blt	r4,r2,42dc0 <__alt_data_end+0xfffd0dc0>
   42e8c:	42000204 	addi	r8,r8,8
   42e90:	003fd306 	br	42de0 <__alt_data_end+0xfffd0de0>
   42e94:	d9402d17 	ldw	r5,180(sp)
   42e98:	d9801e04 	addi	r6,sp,120
   42e9c:	9809883a 	mov	r4,r19
   42ea0:	004acd80 	call	4acd8 <__ssprint_r>
   42ea4:	1039b11e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42ea8:	d8802617 	ldw	r2,152(sp)
   42eac:	d8c02017 	ldw	r3,128(sp)
   42eb0:	da000404 	addi	r8,sp,16
   42eb4:	003e1c06 	br	42728 <__alt_data_end+0xfffd0728>
   42eb8:	d8802a17 	ldw	r2,168(sp)
   42ebc:	00c00184 	movi	r3,6
   42ec0:	1880012e 	bgeu	r3,r2,42ec8 <___svfprintf_internal_r+0x1cf8>
   42ec4:	1805883a 	mov	r2,r3
   42ec8:	d8802b15 	stw	r2,172(sp)
   42ecc:	1000f316 	blt	r2,zero,4329c <___svfprintf_internal_r+0x20cc>
   42ed0:	04000174 	movhi	r16,5
   42ed4:	d8802915 	stw	r2,164(sp)
   42ed8:	dd002e15 	stw	r20,184(sp)
   42edc:	d8002a15 	stw	zero,168(sp)
   42ee0:	d8003215 	stw	zero,200(sp)
   42ee4:	8417e204 	addi	r16,r16,24456
   42ee8:	0039883a 	mov	fp,zero
   42eec:	003a7d06 	br	418e4 <__alt_data_end+0xfffcf8e4>
   42ef0:	01000174 	movhi	r4,5
   42ef4:	2117e884 	addi	r4,r4,24482
   42ef8:	d9003515 	stw	r4,212(sp)
   42efc:	003b3d06 	br	41bf4 <__alt_data_end+0xfffcfbf4>
   42f00:	d9402d17 	ldw	r5,180(sp)
   42f04:	d9801e04 	addi	r6,sp,120
   42f08:	9809883a 	mov	r4,r19
   42f0c:	004acd80 	call	4acd8 <__ssprint_r>
   42f10:	1039961e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   42f14:	d8802617 	ldw	r2,152(sp)
   42f18:	d9403317 	ldw	r5,204(sp)
   42f1c:	d8c02017 	ldw	r3,128(sp)
   42f20:	da000404 	addi	r8,sp,16
   42f24:	2885c83a 	sub	r2,r5,r2
   42f28:	003e1006 	br	4276c <__alt_data_end+0xfffd076c>
   42f2c:	00800044 	movi	r2,1
   42f30:	10803fcc 	andi	r2,r2,255
   42f34:	00c00044 	movi	r3,1
   42f38:	10fa1026 	beq	r2,r3,4177c <__alt_data_end+0xfffcf77c>
   42f3c:	00c00084 	movi	r3,2
   42f40:	10fb8226 	beq	r2,r3,41d4c <__alt_data_end+0xfffcfd4c>
   42f44:	003a4206 	br	41850 <__alt_data_end+0xfffcf850>
   42f48:	0021883a 	mov	r16,zero
   42f4c:	003e0806 	br	42770 <__alt_data_end+0xfffd0770>
   42f50:	07000b44 	movi	fp,45
   42f54:	df002785 	stb	fp,158(sp)
   42f58:	0039e306 	br	416e8 <__alt_data_end+0xfffcf6e8>
   42f5c:	d9002e17 	ldw	r4,184(sp)
   42f60:	d9402f17 	ldw	r5,188(sp)
   42f64:	20800017 	ldw	r2,0(r4)
   42f68:	21000104 	addi	r4,r4,4
   42f6c:	d9002e15 	stw	r4,184(sp)
   42f70:	11400015 	stw	r5,0(r2)
   42f74:	0038c106 	br	4127c <__alt_data_end+0xfffcf27c>
   42f78:	00c00b44 	movi	r3,45
   42f7c:	d8c02785 	stb	r3,158(sp)
   42f80:	d8802915 	stw	r2,164(sp)
   42f84:	dc802c17 	ldw	r18,176(sp)
   42f88:	d8002a15 	stw	zero,168(sp)
   42f8c:	07000b44 	movi	fp,45
   42f90:	003a5106 	br	418d8 <__alt_data_end+0xfffcf8d8>
   42f94:	9080004c 	andi	r2,r18,1
   42f98:	1000941e 	bne	r2,zero,431ec <___svfprintf_internal_r+0x201c>
   42f9c:	d8802117 	ldw	r2,132(sp)
   42fa0:	1405c83a 	sub	r2,r2,r16
   42fa4:	d8803315 	stw	r2,204(sp)
   42fa8:	b441151e 	bne	r22,r17,43400 <___svfprintf_internal_r+0x2230>
   42fac:	dd802617 	ldw	r22,152(sp)
   42fb0:	00bfff44 	movi	r2,-3
   42fb4:	b0801a16 	blt	r22,r2,43020 <___svfprintf_internal_r+0x1e50>
   42fb8:	d9402a17 	ldw	r5,168(sp)
   42fbc:	2d801816 	blt	r5,r22,43020 <___svfprintf_internal_r+0x1e50>
   42fc0:	dd803215 	stw	r22,200(sp)
   42fc4:	003f3a06 	br	42cb0 <__alt_data_end+0xfffd0cb0>
   42fc8:	1025883a 	mov	r18,r2
   42fcc:	0039883a 	mov	fp,zero
   42fd0:	00800084 	movi	r2,2
   42fd4:	003fd606 	br	42f30 <__alt_data_end+0xfffd0f30>
   42fd8:	9080004c 	andi	r2,r18,1
   42fdc:	103f191e 	bne	r2,zero,42c44 <__alt_data_end+0xfffd0c44>
   42fe0:	d8802117 	ldw	r2,132(sp)
   42fe4:	003f2806 	br	42c88 <__alt_data_end+0xfffd0c88>
   42fe8:	01000174 	movhi	r4,5
   42fec:	2117e484 	addi	r4,r4,24466
   42ff0:	d9002c15 	stw	r4,176(sp)
   42ff4:	003c7c06 	br	421e8 <__alt_data_end+0xfffd01e8>
   42ff8:	e005883a 	mov	r2,fp
   42ffc:	003f2206 	br	42c88 <__alt_data_end+0xfffd0c88>
   43000:	d9002a17 	ldw	r4,168(sp)
   43004:	df002783 	ldbu	fp,158(sp)
   43008:	dd002e15 	stw	r20,184(sp)
   4300c:	d9002915 	stw	r4,164(sp)
   43010:	d9002b15 	stw	r4,172(sp)
   43014:	d8002a15 	stw	zero,168(sp)
   43018:	d8003215 	stw	zero,200(sp)
   4301c:	003a2a06 	br	418c8 <__alt_data_end+0xfffcf8c8>
   43020:	8c7fff84 	addi	r17,r17,-2
   43024:	b5bfffc4 	addi	r22,r22,-1
   43028:	dd802615 	stw	r22,152(sp)
   4302c:	dc4022c5 	stb	r17,139(sp)
   43030:	b000c316 	blt	r22,zero,43340 <___svfprintf_internal_r+0x2170>
   43034:	00800ac4 	movi	r2,43
   43038:	d8802305 	stb	r2,140(sp)
   4303c:	00800244 	movi	r2,9
   43040:	15806e16 	blt	r2,r22,431fc <___svfprintf_internal_r+0x202c>
   43044:	00800c04 	movi	r2,48
   43048:	b5800c04 	addi	r22,r22,48
   4304c:	d8802345 	stb	r2,141(sp)
   43050:	dd802385 	stb	r22,142(sp)
   43054:	d88023c4 	addi	r2,sp,143
   43058:	df0022c4 	addi	fp,sp,139
   4305c:	d8c03317 	ldw	r3,204(sp)
   43060:	1739c83a 	sub	fp,r2,fp
   43064:	d9003317 	ldw	r4,204(sp)
   43068:	e0c7883a 	add	r3,fp,r3
   4306c:	df003b15 	stw	fp,236(sp)
   43070:	d8c02b15 	stw	r3,172(sp)
   43074:	00800044 	movi	r2,1
   43078:	1100b70e 	bge	r2,r4,43358 <___svfprintf_internal_r+0x2188>
   4307c:	d8c02b17 	ldw	r3,172(sp)
   43080:	18c00044 	addi	r3,r3,1
   43084:	d8c02b15 	stw	r3,172(sp)
   43088:	1805883a 	mov	r2,r3
   4308c:	1800b016 	blt	r3,zero,43350 <___svfprintf_internal_r+0x2180>
   43090:	d8003215 	stw	zero,200(sp)
   43094:	003f1006 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   43098:	d8802a17 	ldw	r2,168(sp)
   4309c:	103ec71e 	bne	r2,zero,42bbc <__alt_data_end+0xfffd0bbc>
   430a0:	dc002a15 	stw	r16,168(sp)
   430a4:	003ec506 	br	42bbc <__alt_data_end+0xfffd0bbc>
   430a8:	d9402d17 	ldw	r5,180(sp)
   430ac:	d9801e04 	addi	r6,sp,120
   430b0:	9809883a 	mov	r4,r19
   430b4:	004acd80 	call	4acd8 <__ssprint_r>
   430b8:	10392c1e 	bne	r2,zero,4156c <__alt_data_end+0xfffcf56c>
   430bc:	dc402617 	ldw	r17,152(sp)
   430c0:	d8c02017 	ldw	r3,128(sp)
   430c4:	d8801f17 	ldw	r2,124(sp)
   430c8:	da000404 	addi	r8,sp,16
   430cc:	003e7706 	br	42aac <__alt_data_end+0xfffd0aac>
   430d0:	182f883a 	mov	r23,r3
   430d4:	d8002a15 	stw	zero,168(sp)
   430d8:	00389306 	br	41328 <__alt_data_end+0xfffcf328>
   430dc:	d8c02a17 	ldw	r3,168(sp)
   430e0:	d8802104 	addi	r2,sp,132
   430e4:	d8800315 	stw	r2,12(sp)
   430e8:	d9403617 	ldw	r5,216(sp)
   430ec:	d8802504 	addi	r2,sp,148
   430f0:	d8800215 	stw	r2,8(sp)
   430f4:	d8802604 	addi	r2,sp,152
   430f8:	d8c00015 	stw	r3,0(sp)
   430fc:	9809883a 	mov	r4,r19
   43100:	d8800115 	stw	r2,4(sp)
   43104:	01c000c4 	movi	r7,3
   43108:	a00d883a 	mov	r6,r20
   4310c:	da003e15 	stw	r8,248(sp)
   43110:	0045bbc0 	call	45bbc <_dtoa_r>
   43114:	d9002a17 	ldw	r4,168(sp)
   43118:	da003e17 	ldw	r8,248(sp)
   4311c:	1021883a 	mov	r16,r2
   43120:	1139883a 	add	fp,r2,r4
   43124:	2007883a 	mov	r3,r4
   43128:	81000007 	ldb	r4,0(r16)
   4312c:	00800c04 	movi	r2,48
   43130:	20806f26 	beq	r4,r2,432f0 <___svfprintf_internal_r+0x2120>
   43134:	d8c02617 	ldw	r3,152(sp)
   43138:	e0f9883a 	add	fp,fp,r3
   4313c:	003ec206 	br	42c48 <__alt_data_end+0xfffd0c48>
   43140:	00c00b44 	movi	r3,45
   43144:	2520003c 	xorhi	r20,r4,32768
   43148:	d8c02905 	stb	r3,164(sp)
   4314c:	003ea106 	br	42bd4 <__alt_data_end+0xfffd0bd4>
   43150:	d8c03217 	ldw	r3,200(sp)
   43154:	00c0890e 	bge	zero,r3,4337c <___svfprintf_internal_r+0x21ac>
   43158:	00800044 	movi	r2,1
   4315c:	d9003317 	ldw	r4,204(sp)
   43160:	1105883a 	add	r2,r2,r4
   43164:	d8802b15 	stw	r2,172(sp)
   43168:	10005f16 	blt	r2,zero,432e8 <___svfprintf_internal_r+0x2118>
   4316c:	044019c4 	movi	r17,103
   43170:	003ed906 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   43174:	d9002a17 	ldw	r4,168(sp)
   43178:	20c00044 	addi	r3,r4,1
   4317c:	003e9c06 	br	42bf0 <__alt_data_end+0xfffd0bf0>
   43180:	d9002a17 	ldw	r4,168(sp)
   43184:	00c0680e 	bge	zero,r3,43328 <___svfprintf_internal_r+0x2158>
   43188:	2000461e 	bne	r4,zero,432a4 <___svfprintf_internal_r+0x20d4>
   4318c:	9480004c 	andi	r18,r18,1
   43190:	9000441e 	bne	r18,zero,432a4 <___svfprintf_internal_r+0x20d4>
   43194:	1805883a 	mov	r2,r3
   43198:	1800a116 	blt	r3,zero,43420 <___svfprintf_internal_r+0x2250>
   4319c:	d8c03217 	ldw	r3,200(sp)
   431a0:	d8c02b15 	stw	r3,172(sp)
   431a4:	003ecc06 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   431a8:	d9402a17 	ldw	r5,168(sp)
   431ac:	d8802104 	addi	r2,sp,132
   431b0:	d8800315 	stw	r2,12(sp)
   431b4:	d9400015 	stw	r5,0(sp)
   431b8:	d8802504 	addi	r2,sp,148
   431bc:	d9403617 	ldw	r5,216(sp)
   431c0:	d8800215 	stw	r2,8(sp)
   431c4:	d8802604 	addi	r2,sp,152
   431c8:	d8800115 	stw	r2,4(sp)
   431cc:	01c000c4 	movi	r7,3
   431d0:	a00d883a 	mov	r6,r20
   431d4:	9809883a 	mov	r4,r19
   431d8:	da003e15 	stw	r8,248(sp)
   431dc:	0045bbc0 	call	45bbc <_dtoa_r>
   431e0:	d8c02a17 	ldw	r3,168(sp)
   431e4:	da003e17 	ldw	r8,248(sp)
   431e8:	1021883a 	mov	r16,r2
   431ec:	00801184 	movi	r2,70
   431f0:	80f9883a 	add	fp,r16,r3
   431f4:	88bfcc26 	beq	r17,r2,43128 <__alt_data_end+0xfffd1128>
   431f8:	003e9306 	br	42c48 <__alt_data_end+0xfffd0c48>
   431fc:	df0022c4 	addi	fp,sp,139
   43200:	dc002a15 	stw	r16,168(sp)
   43204:	9829883a 	mov	r20,r19
   43208:	e021883a 	mov	r16,fp
   4320c:	4027883a 	mov	r19,r8
   43210:	b009883a 	mov	r4,r22
   43214:	01400284 	movi	r5,10
   43218:	00406840 	call	40684 <__modsi3>
   4321c:	10800c04 	addi	r2,r2,48
   43220:	843fffc4 	addi	r16,r16,-1
   43224:	b009883a 	mov	r4,r22
   43228:	01400284 	movi	r5,10
   4322c:	80800005 	stb	r2,0(r16)
   43230:	00406000 	call	40600 <__divsi3>
   43234:	102d883a 	mov	r22,r2
   43238:	00800244 	movi	r2,9
   4323c:	15bff416 	blt	r2,r22,43210 <__alt_data_end+0xfffd1210>
   43240:	9811883a 	mov	r8,r19
   43244:	b0800c04 	addi	r2,r22,48
   43248:	a027883a 	mov	r19,r20
   4324c:	8029883a 	mov	r20,r16
   43250:	a17fffc4 	addi	r5,r20,-1
   43254:	a0bfffc5 	stb	r2,-1(r20)
   43258:	dc002a17 	ldw	r16,168(sp)
   4325c:	2f00782e 	bgeu	r5,fp,43440 <___svfprintf_internal_r+0x2270>
   43260:	d9c02384 	addi	r7,sp,142
   43264:	3d0fc83a 	sub	r7,r7,r20
   43268:	d9002344 	addi	r4,sp,141
   4326c:	e1cf883a 	add	r7,fp,r7
   43270:	00000106 	br	43278 <___svfprintf_internal_r+0x20a8>
   43274:	28800003 	ldbu	r2,0(r5)
   43278:	20800005 	stb	r2,0(r4)
   4327c:	21000044 	addi	r4,r4,1
   43280:	29400044 	addi	r5,r5,1
   43284:	21fffb1e 	bne	r4,r7,43274 <__alt_data_end+0xfffd1274>
   43288:	d8802304 	addi	r2,sp,140
   4328c:	1505c83a 	sub	r2,r2,r20
   43290:	d8c02344 	addi	r3,sp,141
   43294:	1885883a 	add	r2,r3,r2
   43298:	003f7006 	br	4305c <__alt_data_end+0xfffd105c>
   4329c:	0005883a 	mov	r2,zero
   432a0:	003f0b06 	br	42ed0 <__alt_data_end+0xfffd0ed0>
   432a4:	d9002a17 	ldw	r4,168(sp)
   432a8:	d8c03217 	ldw	r3,200(sp)
   432ac:	20800044 	addi	r2,r4,1
   432b0:	1885883a 	add	r2,r3,r2
   432b4:	d8802b15 	stw	r2,172(sp)
   432b8:	103e870e 	bge	r2,zero,42cd8 <__alt_data_end+0xfffd0cd8>
   432bc:	0005883a 	mov	r2,zero
   432c0:	003e8506 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   432c4:	01000174 	movhi	r4,5
   432c8:	2117e484 	addi	r4,r4,24466
   432cc:	d9002c15 	stw	r4,176(sp)
   432d0:	003cc506 	br	425e8 <__alt_data_end+0xfffd05e8>
   432d4:	d8c03217 	ldw	r3,200(sp)
   432d8:	18c00044 	addi	r3,r3,1
   432dc:	d8c02b15 	stw	r3,172(sp)
   432e0:	1805883a 	mov	r2,r3
   432e4:	183fa10e 	bge	r3,zero,4316c <__alt_data_end+0xfffd116c>
   432e8:	0005883a 	mov	r2,zero
   432ec:	003f9f06 	br	4316c <__alt_data_end+0xfffd116c>
   432f0:	d9003617 	ldw	r4,216(sp)
   432f4:	000d883a 	mov	r6,zero
   432f8:	000f883a 	mov	r7,zero
   432fc:	a00b883a 	mov	r5,r20
   43300:	d8c03d15 	stw	r3,244(sp)
   43304:	da003e15 	stw	r8,248(sp)
   43308:	00500c80 	call	500c8 <__eqdf2>
   4330c:	d8c03d17 	ldw	r3,244(sp)
   43310:	da003e17 	ldw	r8,248(sp)
   43314:	103f8726 	beq	r2,zero,43134 <__alt_data_end+0xfffd1134>
   43318:	00800044 	movi	r2,1
   4331c:	10c7c83a 	sub	r3,r2,r3
   43320:	d8c02615 	stw	r3,152(sp)
   43324:	003f8406 	br	43138 <__alt_data_end+0xfffd1138>
   43328:	20000e1e 	bne	r4,zero,43364 <___svfprintf_internal_r+0x2194>
   4332c:	9480004c 	andi	r18,r18,1
   43330:	90000c1e 	bne	r18,zero,43364 <___svfprintf_internal_r+0x2194>
   43334:	00800044 	movi	r2,1
   43338:	d8802b15 	stw	r2,172(sp)
   4333c:	003e6606 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   43340:	00800b44 	movi	r2,45
   43344:	05adc83a 	sub	r22,zero,r22
   43348:	d8802305 	stb	r2,140(sp)
   4334c:	003f3b06 	br	4303c <__alt_data_end+0xfffd103c>
   43350:	0005883a 	mov	r2,zero
   43354:	003f4e06 	br	43090 <__alt_data_end+0xfffd1090>
   43358:	90a4703a 	and	r18,r18,r2
   4335c:	903f4a26 	beq	r18,zero,43088 <__alt_data_end+0xfffd1088>
   43360:	003f4606 	br	4307c <__alt_data_end+0xfffd107c>
   43364:	d8c02a17 	ldw	r3,168(sp)
   43368:	18c00084 	addi	r3,r3,2
   4336c:	d8c02b15 	stw	r3,172(sp)
   43370:	1805883a 	mov	r2,r3
   43374:	183e580e 	bge	r3,zero,42cd8 <__alt_data_end+0xfffd0cd8>
   43378:	003fd006 	br	432bc <__alt_data_end+0xfffd12bc>
   4337c:	00800084 	movi	r2,2
   43380:	10c5c83a 	sub	r2,r2,r3
   43384:	003f7506 	br	4315c <__alt_data_end+0xfffd115c>
   43388:	d9402e17 	ldw	r5,184(sp)
   4338c:	d9002e17 	ldw	r4,184(sp)
   43390:	bc400043 	ldbu	r17,1(r23)
   43394:	29400017 	ldw	r5,0(r5)
   43398:	20800104 	addi	r2,r4,4
   4339c:	d8802e15 	stw	r2,184(sp)
   433a0:	d9402a15 	stw	r5,168(sp)
   433a4:	182f883a 	mov	r23,r3
   433a8:	283df10e 	bge	r5,zero,42b70 <__alt_data_end+0xfffd0b70>
   433ac:	8c403fcc 	andi	r17,r17,255
   433b0:	017fffc4 	movi	r5,-1
   433b4:	8c40201c 	xori	r17,r17,128
   433b8:	d9402a15 	stw	r5,168(sp)
   433bc:	8c7fe004 	addi	r17,r17,-128
   433c0:	0037d806 	br	41324 <__alt_data_end+0xfffcf324>
   433c4:	9080004c 	andi	r2,r18,1
   433c8:	0039883a 	mov	fp,zero
   433cc:	10000726 	beq	r2,zero,433ec <___svfprintf_internal_r+0x221c>
   433d0:	d8c02817 	ldw	r3,160(sp)
   433d4:	dc001dc4 	addi	r16,sp,119
   433d8:	00800c04 	movi	r2,48
   433dc:	1c07c83a 	sub	r3,r3,r16
   433e0:	d8801dc5 	stb	r2,119(sp)
   433e4:	d8c02b15 	stw	r3,172(sp)
   433e8:	00393106 	br	418b0 <__alt_data_end+0xfffcf8b0>
   433ec:	d8002b15 	stw	zero,172(sp)
   433f0:	dc001e04 	addi	r16,sp,120
   433f4:	00392e06 	br	418b0 <__alt_data_end+0xfffcf8b0>
   433f8:	0005883a 	mov	r2,zero
   433fc:	003e3306 	br	42ccc <__alt_data_end+0xfffd0ccc>
   43400:	dd802617 	ldw	r22,152(sp)
   43404:	003f0706 	br	43024 <__alt_data_end+0xfffd1024>
   43408:	d8c02b03 	ldbu	r3,172(sp)
   4340c:	d8c02785 	stb	r3,158(sp)
   43410:	003a3506 	br	41ce8 <__alt_data_end+0xfffcfce8>
   43414:	d8c02b03 	ldbu	r3,172(sp)
   43418:	d8c02785 	stb	r3,158(sp)
   4341c:	003a1706 	br	41c7c <__alt_data_end+0xfffcfc7c>
   43420:	0005883a 	mov	r2,zero
   43424:	003f5d06 	br	4319c <__alt_data_end+0xfffd119c>
   43428:	d8c02b03 	ldbu	r3,172(sp)
   4342c:	d8c02785 	stb	r3,158(sp)
   43430:	0038f306 	br	41800 <__alt_data_end+0xfffcf800>
   43434:	d8c02b03 	ldbu	r3,172(sp)
   43438:	d8c02785 	stb	r3,158(sp)
   4343c:	0038be06 	br	41738 <__alt_data_end+0xfffcf738>
   43440:	d8802344 	addi	r2,sp,141
   43444:	003f0506 	br	4305c <__alt_data_end+0xfffd105c>
   43448:	d8c02b03 	ldbu	r3,172(sp)
   4344c:	d8c02785 	stb	r3,158(sp)
   43450:	00388b06 	br	41680 <__alt_data_end+0xfffcf680>
   43454:	d8c02b03 	ldbu	r3,172(sp)
   43458:	d8c02785 	stb	r3,158(sp)
   4345c:	003ad706 	br	41fbc <__alt_data_end+0xfffcffbc>
   43460:	d9403917 	ldw	r5,228(sp)
   43464:	00800304 	movi	r2,12
   43468:	28800015 	stw	r2,0(r5)
   4346c:	00bfffc4 	movi	r2,-1
   43470:	00384306 	br	41580 <__alt_data_end+0xfffcf580>
   43474:	d8c02b03 	ldbu	r3,172(sp)
   43478:	d8c02785 	stb	r3,158(sp)
   4347c:	003ab606 	br	41f58 <__alt_data_end+0xfffcff58>
   43480:	d8c02b03 	ldbu	r3,172(sp)
   43484:	d8c02785 	stb	r3,158(sp)
   43488:	003a8906 	br	41eb0 <__alt_data_end+0xfffcfeb0>

0004348c <___vfprintf_internal_r>:
   4348c:	deffb804 	addi	sp,sp,-288
   43490:	dfc04715 	stw	ra,284(sp)
   43494:	ddc04515 	stw	r23,276(sp)
   43498:	dd404315 	stw	r21,268(sp)
   4349c:	d9002d15 	stw	r4,180(sp)
   434a0:	282f883a 	mov	r23,r5
   434a4:	302b883a 	mov	r21,r6
   434a8:	d9c02e15 	stw	r7,184(sp)
   434ac:	df004615 	stw	fp,280(sp)
   434b0:	dd804415 	stw	r22,272(sp)
   434b4:	dd004215 	stw	r20,264(sp)
   434b8:	dcc04115 	stw	r19,260(sp)
   434bc:	dc804015 	stw	r18,256(sp)
   434c0:	dc403f15 	stw	r17,252(sp)
   434c4:	dc003e15 	stw	r16,248(sp)
   434c8:	00483cc0 	call	483cc <_localeconv_r>
   434cc:	10800017 	ldw	r2,0(r2)
   434d0:	1009883a 	mov	r4,r2
   434d4:	d8803415 	stw	r2,208(sp)
   434d8:	00411380 	call	41138 <strlen>
   434dc:	d8803715 	stw	r2,220(sp)
   434e0:	d8802d17 	ldw	r2,180(sp)
   434e4:	10000226 	beq	r2,zero,434f0 <___vfprintf_internal_r+0x64>
   434e8:	10800e17 	ldw	r2,56(r2)
   434ec:	1000fb26 	beq	r2,zero,438dc <___vfprintf_internal_r+0x450>
   434f0:	b880030b 	ldhu	r2,12(r23)
   434f4:	10c8000c 	andi	r3,r2,8192
   434f8:	1800061e 	bne	r3,zero,43514 <___vfprintf_internal_r+0x88>
   434fc:	b9001917 	ldw	r4,100(r23)
   43500:	00f7ffc4 	movi	r3,-8193
   43504:	10880014 	ori	r2,r2,8192
   43508:	20c6703a 	and	r3,r4,r3
   4350c:	b880030d 	sth	r2,12(r23)
   43510:	b8c01915 	stw	r3,100(r23)
   43514:	10c0020c 	andi	r3,r2,8
   43518:	1800c326 	beq	r3,zero,43828 <___vfprintf_internal_r+0x39c>
   4351c:	b8c00417 	ldw	r3,16(r23)
   43520:	1800c126 	beq	r3,zero,43828 <___vfprintf_internal_r+0x39c>
   43524:	1080068c 	andi	r2,r2,26
   43528:	00c00284 	movi	r3,10
   4352c:	10c0c626 	beq	r2,r3,43848 <___vfprintf_internal_r+0x3bc>
   43530:	d8c00404 	addi	r3,sp,16
   43534:	05000174 	movhi	r20,5
   43538:	d9001e04 	addi	r4,sp,120
   4353c:	a517ec84 	addi	r20,r20,24498
   43540:	d8c01e15 	stw	r3,120(sp)
   43544:	d8002015 	stw	zero,128(sp)
   43548:	d8001f15 	stw	zero,124(sp)
   4354c:	d8003315 	stw	zero,204(sp)
   43550:	d8003615 	stw	zero,216(sp)
   43554:	d8003815 	stw	zero,224(sp)
   43558:	1811883a 	mov	r8,r3
   4355c:	d8003915 	stw	zero,228(sp)
   43560:	d8003a15 	stw	zero,232(sp)
   43564:	d8002f15 	stw	zero,188(sp)
   43568:	d9002815 	stw	r4,160(sp)
   4356c:	a8800007 	ldb	r2,0(r21)
   43570:	10028b26 	beq	r2,zero,43fa0 <___vfprintf_internal_r+0xb14>
   43574:	00c00944 	movi	r3,37
   43578:	a823883a 	mov	r17,r21
   4357c:	10c0021e 	bne	r2,r3,43588 <___vfprintf_internal_r+0xfc>
   43580:	00001406 	br	435d4 <___vfprintf_internal_r+0x148>
   43584:	10c00326 	beq	r2,r3,43594 <___vfprintf_internal_r+0x108>
   43588:	8c400044 	addi	r17,r17,1
   4358c:	88800007 	ldb	r2,0(r17)
   43590:	103ffc1e 	bne	r2,zero,43584 <__alt_data_end+0xfffd1584>
   43594:	8d61c83a 	sub	r16,r17,r21
   43598:	80000e26 	beq	r16,zero,435d4 <___vfprintf_internal_r+0x148>
   4359c:	d8c02017 	ldw	r3,128(sp)
   435a0:	d8801f17 	ldw	r2,124(sp)
   435a4:	45400015 	stw	r21,0(r8)
   435a8:	1c07883a 	add	r3,r3,r16
   435ac:	10800044 	addi	r2,r2,1
   435b0:	d8c02015 	stw	r3,128(sp)
   435b4:	44000115 	stw	r16,4(r8)
   435b8:	d8801f15 	stw	r2,124(sp)
   435bc:	00c001c4 	movi	r3,7
   435c0:	1880a916 	blt	r3,r2,43868 <___vfprintf_internal_r+0x3dc>
   435c4:	42000204 	addi	r8,r8,8
   435c8:	d9402f17 	ldw	r5,188(sp)
   435cc:	2c0b883a 	add	r5,r5,r16
   435d0:	d9402f15 	stw	r5,188(sp)
   435d4:	88800007 	ldb	r2,0(r17)
   435d8:	1000aa26 	beq	r2,zero,43884 <___vfprintf_internal_r+0x3f8>
   435dc:	8d400044 	addi	r21,r17,1
   435e0:	8c400047 	ldb	r17,1(r17)
   435e4:	0021883a 	mov	r16,zero
   435e8:	00bfffc4 	movi	r2,-1
   435ec:	0025883a 	mov	r18,zero
   435f0:	dc002905 	stb	r16,164(sp)
   435f4:	d8002785 	stb	zero,158(sp)
   435f8:	d8002b05 	stb	zero,172(sp)
   435fc:	d8802a15 	stw	r2,168(sp)
   43600:	d8003115 	stw	zero,196(sp)
   43604:	04c01604 	movi	r19,88
   43608:	05800244 	movi	r22,9
   4360c:	9021883a 	mov	r16,r18
   43610:	4039883a 	mov	fp,r8
   43614:	ad400044 	addi	r21,r21,1
   43618:	88bff804 	addi	r2,r17,-32
   4361c:	98833236 	bltu	r19,r2,442e8 <___vfprintf_internal_r+0xe5c>
   43620:	100490ba 	slli	r2,r2,2
   43624:	00c00134 	movhi	r3,4
   43628:	18cd8e04 	addi	r3,r3,13880
   4362c:	10c5883a 	add	r2,r2,r3
   43630:	10800017 	ldw	r2,0(r2)
   43634:	1000683a 	jmp	r2
   43638:	000441e0 	cmpeqi	zero,zero,4359
   4363c:	000442e8 	cmpgeui	zero,zero,4363
   43640:	000442e8 	cmpgeui	zero,zero,4363
   43644:	00044200 	call	4420 <__alt_mem_RAM-0x3bbe0>
   43648:	000442e8 	cmpgeui	zero,zero,4363
   4364c:	000442e8 	cmpgeui	zero,zero,4363
   43650:	000442e8 	cmpgeui	zero,zero,4363
   43654:	000442e8 	cmpgeui	zero,zero,4363
   43658:	000442e8 	cmpgeui	zero,zero,4363
   4365c:	000442e8 	cmpgeui	zero,zero,4363
   43660:	000438e8 	cmpgeui	zero,zero,4323
   43664:	000440f0 	cmpltui	zero,zero,4355
   43668:	000442e8 	cmpgeui	zero,zero,4363
   4366c:	000437ac 	andhi	zero,zero,4318
   43670:	0004390c 	andi	zero,zero,4324
   43674:	000442e8 	cmpgeui	zero,zero,4363
   43678:	0004395c 	xori	zero,zero,4325
   4367c:	00043968 	cmpgeui	zero,zero,4325
   43680:	00043968 	cmpgeui	zero,zero,4325
   43684:	00043968 	cmpgeui	zero,zero,4325
   43688:	00043968 	cmpgeui	zero,zero,4325
   4368c:	00043968 	cmpgeui	zero,zero,4325
   43690:	00043968 	cmpgeui	zero,zero,4325
   43694:	00043968 	cmpgeui	zero,zero,4325
   43698:	00043968 	cmpgeui	zero,zero,4325
   4369c:	00043968 	cmpgeui	zero,zero,4325
   436a0:	000442e8 	cmpgeui	zero,zero,4363
   436a4:	000442e8 	cmpgeui	zero,zero,4363
   436a8:	000442e8 	cmpgeui	zero,zero,4363
   436ac:	000442e8 	cmpgeui	zero,zero,4363
   436b0:	000442e8 	cmpgeui	zero,zero,4363
   436b4:	000442e8 	cmpgeui	zero,zero,4363
   436b8:	000442e8 	cmpgeui	zero,zero,4363
   436bc:	000442e8 	cmpgeui	zero,zero,4363
   436c0:	000442e8 	cmpgeui	zero,zero,4363
   436c4:	000442e8 	cmpgeui	zero,zero,4363
   436c8:	000439a4 	muli	zero,zero,4326
   436cc:	00043a6c 	andhi	zero,zero,4329
   436d0:	000442e8 	cmpgeui	zero,zero,4363
   436d4:	00043a6c 	andhi	zero,zero,4329
   436d8:	000442e8 	cmpgeui	zero,zero,4363
   436dc:	000442e8 	cmpgeui	zero,zero,4363
   436e0:	000442e8 	cmpgeui	zero,zero,4363
   436e4:	000442e8 	cmpgeui	zero,zero,4363
   436e8:	00043b18 	cmpnei	zero,zero,4332
   436ec:	000442e8 	cmpgeui	zero,zero,4363
   436f0:	000442e8 	cmpgeui	zero,zero,4363
   436f4:	00043b24 	muli	zero,zero,4332
   436f8:	000442e8 	cmpgeui	zero,zero,4363
   436fc:	000442e8 	cmpgeui	zero,zero,4363
   43700:	000442e8 	cmpgeui	zero,zero,4363
   43704:	000442e8 	cmpgeui	zero,zero,4363
   43708:	000442e8 	cmpgeui	zero,zero,4363
   4370c:	00043fa8 	cmpgeui	zero,zero,4350
   43710:	000442e8 	cmpgeui	zero,zero,4363
   43714:	000442e8 	cmpgeui	zero,zero,4363
   43718:	00044014 	movui	zero,4352
   4371c:	000442e8 	cmpgeui	zero,zero,4363
   43720:	000442e8 	cmpgeui	zero,zero,4363
   43724:	000442e8 	cmpgeui	zero,zero,4363
   43728:	000442e8 	cmpgeui	zero,zero,4363
   4372c:	000442e8 	cmpgeui	zero,zero,4363
   43730:	000442e8 	cmpgeui	zero,zero,4363
   43734:	000442e8 	cmpgeui	zero,zero,4363
   43738:	000442e8 	cmpgeui	zero,zero,4363
   4373c:	000442e8 	cmpgeui	zero,zero,4363
   43740:	000442e8 	cmpgeui	zero,zero,4363
   43744:	0004428c 	andi	zero,zero,4362
   43748:	0004420c 	andi	zero,zero,4360
   4374c:	00043a6c 	andhi	zero,zero,4329
   43750:	00043a6c 	andhi	zero,zero,4329
   43754:	00043a6c 	andhi	zero,zero,4329
   43758:	0004422c 	andhi	zero,zero,4360
   4375c:	0004420c 	andi	zero,zero,4360
   43760:	000442e8 	cmpgeui	zero,zero,4363
   43764:	000442e8 	cmpgeui	zero,zero,4363
   43768:	00044238 	rdprs	zero,zero,4360
   4376c:	000442e8 	cmpgeui	zero,zero,4363
   43770:	0004424c 	andi	zero,zero,4361
   43774:	000440d0 	cmplti	zero,zero,4355
   43778:	000437b8 	rdprs	zero,zero,4318
   4377c:	00044108 	cmpgei	zero,zero,4356
   43780:	000442e8 	cmpgeui	zero,zero,4363
   43784:	00044114 	movui	zero,4356
   43788:	000442e8 	cmpgeui	zero,zero,4363
   4378c:	00044178 	rdprs	zero,zero,4357
   43790:	000442e8 	cmpgeui	zero,zero,4363
   43794:	000442e8 	cmpgeui	zero,zero,4363
   43798:	00044198 	cmpnei	zero,zero,4358
   4379c:	d8c03117 	ldw	r3,196(sp)
   437a0:	d8802e15 	stw	r2,184(sp)
   437a4:	00c7c83a 	sub	r3,zero,r3
   437a8:	d8c03115 	stw	r3,196(sp)
   437ac:	84000114 	ori	r16,r16,4
   437b0:	ac400007 	ldb	r17,0(r21)
   437b4:	003f9706 	br	43614 <__alt_data_end+0xfffd1614>
   437b8:	00800c04 	movi	r2,48
   437bc:	d8802705 	stb	r2,156(sp)
   437c0:	00801e04 	movi	r2,120
   437c4:	d8802745 	stb	r2,157(sp)
   437c8:	d9002a17 	ldw	r4,168(sp)
   437cc:	d8802e17 	ldw	r2,184(sp)
   437d0:	d8002785 	stb	zero,158(sp)
   437d4:	e011883a 	mov	r8,fp
   437d8:	10c00104 	addi	r3,r2,4
   437dc:	14c00017 	ldw	r19,0(r2)
   437e0:	002d883a 	mov	r22,zero
   437e4:	80800094 	ori	r2,r16,2
   437e8:	2002ca16 	blt	r4,zero,44314 <___vfprintf_internal_r+0xe88>
   437ec:	00bfdfc4 	movi	r2,-129
   437f0:	80a4703a 	and	r18,r16,r2
   437f4:	d8c02e15 	stw	r3,184(sp)
   437f8:	94800094 	ori	r18,r18,2
   437fc:	9802b41e 	bne	r19,zero,442d0 <___vfprintf_internal_r+0xe44>
   43800:	01400174 	movhi	r5,5
   43804:	2957dd04 	addi	r5,r5,24436
   43808:	d9403915 	stw	r5,228(sp)
   4380c:	04401e04 	movi	r17,120
   43810:	d8802a17 	ldw	r2,168(sp)
   43814:	0039883a 	mov	fp,zero
   43818:	1001fa26 	beq	r2,zero,44004 <___vfprintf_internal_r+0xb78>
   4381c:	0027883a 	mov	r19,zero
   43820:	002d883a 	mov	r22,zero
   43824:	00021906 	br	4408c <___vfprintf_internal_r+0xc00>
   43828:	d9002d17 	ldw	r4,180(sp)
   4382c:	b80b883a 	mov	r5,r23
   43830:	00458400 	call	45840 <__swsetup_r>
   43834:	1005dc1e 	bne	r2,zero,44fa8 <___vfprintf_internal_r+0x1b1c>
   43838:	b880030b 	ldhu	r2,12(r23)
   4383c:	00c00284 	movi	r3,10
   43840:	1080068c 	andi	r2,r2,26
   43844:	10ff3a1e 	bne	r2,r3,43530 <__alt_data_end+0xfffd1530>
   43848:	b880038f 	ldh	r2,14(r23)
   4384c:	103f3816 	blt	r2,zero,43530 <__alt_data_end+0xfffd1530>
   43850:	d9c02e17 	ldw	r7,184(sp)
   43854:	d9002d17 	ldw	r4,180(sp)
   43858:	a80d883a 	mov	r6,r21
   4385c:	b80b883a 	mov	r5,r23
   43860:	00457840 	call	45784 <__sbprintf>
   43864:	00001106 	br	438ac <___vfprintf_internal_r+0x420>
   43868:	d9002d17 	ldw	r4,180(sp)
   4386c:	d9801e04 	addi	r6,sp,120
   43870:	b80b883a 	mov	r5,r23
   43874:	004c3440 	call	4c344 <__sprint_r>
   43878:	1000081e 	bne	r2,zero,4389c <___vfprintf_internal_r+0x410>
   4387c:	da000404 	addi	r8,sp,16
   43880:	003f5106 	br	435c8 <__alt_data_end+0xfffd15c8>
   43884:	d8802017 	ldw	r2,128(sp)
   43888:	10000426 	beq	r2,zero,4389c <___vfprintf_internal_r+0x410>
   4388c:	d9002d17 	ldw	r4,180(sp)
   43890:	d9801e04 	addi	r6,sp,120
   43894:	b80b883a 	mov	r5,r23
   43898:	004c3440 	call	4c344 <__sprint_r>
   4389c:	b880030b 	ldhu	r2,12(r23)
   438a0:	1080100c 	andi	r2,r2,64
   438a4:	1005c01e 	bne	r2,zero,44fa8 <___vfprintf_internal_r+0x1b1c>
   438a8:	d8802f17 	ldw	r2,188(sp)
   438ac:	dfc04717 	ldw	ra,284(sp)
   438b0:	df004617 	ldw	fp,280(sp)
   438b4:	ddc04517 	ldw	r23,276(sp)
   438b8:	dd804417 	ldw	r22,272(sp)
   438bc:	dd404317 	ldw	r21,268(sp)
   438c0:	dd004217 	ldw	r20,264(sp)
   438c4:	dcc04117 	ldw	r19,260(sp)
   438c8:	dc804017 	ldw	r18,256(sp)
   438cc:	dc403f17 	ldw	r17,252(sp)
   438d0:	dc003e17 	ldw	r16,248(sp)
   438d4:	dec04804 	addi	sp,sp,288
   438d8:	f800283a 	ret
   438dc:	d9002d17 	ldw	r4,180(sp)
   438e0:	004784c0 	call	4784c <__sinit>
   438e4:	003f0206 	br	434f0 <__alt_data_end+0xfffd14f0>
   438e8:	d9002e17 	ldw	r4,184(sp)
   438ec:	d9402e17 	ldw	r5,184(sp)
   438f0:	21000017 	ldw	r4,0(r4)
   438f4:	28800104 	addi	r2,r5,4
   438f8:	d9003115 	stw	r4,196(sp)
   438fc:	203fa716 	blt	r4,zero,4379c <__alt_data_end+0xfffd179c>
   43900:	d8802e15 	stw	r2,184(sp)
   43904:	ac400007 	ldb	r17,0(r21)
   43908:	003f4206 	br	43614 <__alt_data_end+0xfffd1614>
   4390c:	ac400007 	ldb	r17,0(r21)
   43910:	01000a84 	movi	r4,42
   43914:	a8c00044 	addi	r3,r21,1
   43918:	89075826 	beq	r17,r4,4567c <___vfprintf_internal_r+0x21f0>
   4391c:	8cbff404 	addi	r18,r17,-48
   43920:	b486ae36 	bltu	r22,r18,453dc <___vfprintf_internal_r+0x1f50>
   43924:	0009883a 	mov	r4,zero
   43928:	1823883a 	mov	r17,r3
   4392c:	01400284 	movi	r5,10
   43930:	0040eec0 	call	40eec <__mulsi3>
   43934:	88c00007 	ldb	r3,0(r17)
   43938:	1489883a 	add	r4,r2,r18
   4393c:	8d400044 	addi	r21,r17,1
   43940:	1cbff404 	addi	r18,r3,-48
   43944:	a823883a 	mov	r17,r21
   43948:	b4bff82e 	bgeu	r22,r18,4392c <__alt_data_end+0xfffd192c>
   4394c:	1823883a 	mov	r17,r3
   43950:	2005f616 	blt	r4,zero,4512c <___vfprintf_internal_r+0x1ca0>
   43954:	d9002a15 	stw	r4,168(sp)
   43958:	003f2f06 	br	43618 <__alt_data_end+0xfffd1618>
   4395c:	84002014 	ori	r16,r16,128
   43960:	ac400007 	ldb	r17,0(r21)
   43964:	003f2b06 	br	43614 <__alt_data_end+0xfffd1614>
   43968:	8cbff404 	addi	r18,r17,-48
   4396c:	d8003115 	stw	zero,196(sp)
   43970:	0009883a 	mov	r4,zero
   43974:	a823883a 	mov	r17,r21
   43978:	01400284 	movi	r5,10
   4397c:	0040eec0 	call	40eec <__mulsi3>
   43980:	88c00007 	ldb	r3,0(r17)
   43984:	9089883a 	add	r4,r18,r2
   43988:	ad400044 	addi	r21,r21,1
   4398c:	1cbff404 	addi	r18,r3,-48
   43990:	a823883a 	mov	r17,r21
   43994:	b4bff82e 	bgeu	r22,r18,43978 <__alt_data_end+0xfffd1978>
   43998:	1823883a 	mov	r17,r3
   4399c:	d9003115 	stw	r4,196(sp)
   439a0:	003f1d06 	br	43618 <__alt_data_end+0xfffd1618>
   439a4:	8025883a 	mov	r18,r16
   439a8:	dc002903 	ldbu	r16,164(sp)
   439ac:	e011883a 	mov	r8,fp
   439b0:	84003fcc 	andi	r16,r16,255
   439b4:	8007531e 	bne	r16,zero,45704 <___vfprintf_internal_r+0x2278>
   439b8:	94800414 	ori	r18,r18,16
   439bc:	9080080c 	andi	r2,r18,32
   439c0:	1003a326 	beq	r2,zero,44850 <___vfprintf_internal_r+0x13c4>
   439c4:	d9002e17 	ldw	r4,184(sp)
   439c8:	20800117 	ldw	r2,4(r4)
   439cc:	24c00017 	ldw	r19,0(r4)
   439d0:	21000204 	addi	r4,r4,8
   439d4:	d9002e15 	stw	r4,184(sp)
   439d8:	102d883a 	mov	r22,r2
   439dc:	10047316 	blt	r2,zero,44bac <___vfprintf_internal_r+0x1720>
   439e0:	d9002a17 	ldw	r4,168(sp)
   439e4:	df002783 	ldbu	fp,158(sp)
   439e8:	2003e416 	blt	r4,zero,4497c <___vfprintf_internal_r+0x14f0>
   439ec:	00ffdfc4 	movi	r3,-129
   439f0:	9d84b03a 	or	r2,r19,r22
   439f4:	90e4703a 	and	r18,r18,r3
   439f8:	10018026 	beq	r2,zero,43ffc <___vfprintf_internal_r+0xb70>
   439fc:	b003ab26 	beq	r22,zero,448ac <___vfprintf_internal_r+0x1420>
   43a00:	dc402915 	stw	r17,164(sp)
   43a04:	dc001e04 	addi	r16,sp,120
   43a08:	b023883a 	mov	r17,r22
   43a0c:	402d883a 	mov	r22,r8
   43a10:	9809883a 	mov	r4,r19
   43a14:	880b883a 	mov	r5,r17
   43a18:	01800284 	movi	r6,10
   43a1c:	000f883a 	mov	r7,zero
   43a20:	004e8880 	call	4e888 <__umoddi3>
   43a24:	10800c04 	addi	r2,r2,48
   43a28:	843fffc4 	addi	r16,r16,-1
   43a2c:	9809883a 	mov	r4,r19
   43a30:	880b883a 	mov	r5,r17
   43a34:	80800005 	stb	r2,0(r16)
   43a38:	01800284 	movi	r6,10
   43a3c:	000f883a 	mov	r7,zero
   43a40:	004e28c0 	call	4e28c <__udivdi3>
   43a44:	1027883a 	mov	r19,r2
   43a48:	10c4b03a 	or	r2,r2,r3
   43a4c:	1823883a 	mov	r17,r3
   43a50:	103fef1e 	bne	r2,zero,43a10 <__alt_data_end+0xfffd1a10>
   43a54:	d8c02817 	ldw	r3,160(sp)
   43a58:	dc402917 	ldw	r17,164(sp)
   43a5c:	b011883a 	mov	r8,r22
   43a60:	1c07c83a 	sub	r3,r3,r16
   43a64:	d8c02b15 	stw	r3,172(sp)
   43a68:	00005f06 	br	43be8 <___vfprintf_internal_r+0x75c>
   43a6c:	8025883a 	mov	r18,r16
   43a70:	dc002903 	ldbu	r16,164(sp)
   43a74:	e011883a 	mov	r8,fp
   43a78:	84003fcc 	andi	r16,r16,255
   43a7c:	80071e1e 	bne	r16,zero,456f8 <___vfprintf_internal_r+0x226c>
   43a80:	9080020c 	andi	r2,r18,8
   43a84:	1004af26 	beq	r2,zero,44d44 <___vfprintf_internal_r+0x18b8>
   43a88:	d9002e17 	ldw	r4,184(sp)
   43a8c:	d9402e17 	ldw	r5,184(sp)
   43a90:	d8802e17 	ldw	r2,184(sp)
   43a94:	21000017 	ldw	r4,0(r4)
   43a98:	29400117 	ldw	r5,4(r5)
   43a9c:	10800204 	addi	r2,r2,8
   43aa0:	d9003615 	stw	r4,216(sp)
   43aa4:	d9403815 	stw	r5,224(sp)
   43aa8:	d8802e15 	stw	r2,184(sp)
   43aac:	d9003617 	ldw	r4,216(sp)
   43ab0:	d9403817 	ldw	r5,224(sp)
   43ab4:	da003d15 	stw	r8,244(sp)
   43ab8:	04000044 	movi	r16,1
   43abc:	004a9f80 	call	4a9f8 <__fpclassifyd>
   43ac0:	da003d17 	ldw	r8,244(sp)
   43ac4:	1404441e 	bne	r2,r16,44bd8 <___vfprintf_internal_r+0x174c>
   43ac8:	d9003617 	ldw	r4,216(sp)
   43acc:	d9403817 	ldw	r5,224(sp)
   43ad0:	000d883a 	mov	r6,zero
   43ad4:	000f883a 	mov	r7,zero
   43ad8:	005022c0 	call	5022c <__ledf2>
   43adc:	da003d17 	ldw	r8,244(sp)
   43ae0:	1005e316 	blt	r2,zero,45270 <___vfprintf_internal_r+0x1de4>
   43ae4:	df002783 	ldbu	fp,158(sp)
   43ae8:	008011c4 	movi	r2,71
   43aec:	1445580e 	bge	r2,r17,45050 <___vfprintf_internal_r+0x1bc4>
   43af0:	04000174 	movhi	r16,5
   43af4:	8417d504 	addi	r16,r16,24404
   43af8:	00c000c4 	movi	r3,3
   43afc:	00bfdfc4 	movi	r2,-129
   43b00:	d8c02915 	stw	r3,164(sp)
   43b04:	90a4703a 	and	r18,r18,r2
   43b08:	d8c02b15 	stw	r3,172(sp)
   43b0c:	d8002a15 	stw	zero,168(sp)
   43b10:	d8003215 	stw	zero,200(sp)
   43b14:	00003a06 	br	43c00 <___vfprintf_internal_r+0x774>
   43b18:	84000214 	ori	r16,r16,8
   43b1c:	ac400007 	ldb	r17,0(r21)
   43b20:	003ebc06 	br	43614 <__alt_data_end+0xfffd1614>
   43b24:	8025883a 	mov	r18,r16
   43b28:	dc002903 	ldbu	r16,164(sp)
   43b2c:	e011883a 	mov	r8,fp
   43b30:	84003fcc 	andi	r16,r16,255
   43b34:	8007001e 	bne	r16,zero,45738 <___vfprintf_internal_r+0x22ac>
   43b38:	94800414 	ori	r18,r18,16
   43b3c:	9080080c 	andi	r2,r18,32
   43b40:	1002fa26 	beq	r2,zero,4472c <___vfprintf_internal_r+0x12a0>
   43b44:	d9002e17 	ldw	r4,184(sp)
   43b48:	d9402a17 	ldw	r5,168(sp)
   43b4c:	d8002785 	stb	zero,158(sp)
   43b50:	20800204 	addi	r2,r4,8
   43b54:	24c00017 	ldw	r19,0(r4)
   43b58:	25800117 	ldw	r22,4(r4)
   43b5c:	2804b116 	blt	r5,zero,44e24 <___vfprintf_internal_r+0x1998>
   43b60:	013fdfc4 	movi	r4,-129
   43b64:	9d86b03a 	or	r3,r19,r22
   43b68:	d8802e15 	stw	r2,184(sp)
   43b6c:	9124703a 	and	r18,r18,r4
   43b70:	1802fb1e 	bne	r3,zero,44760 <___vfprintf_internal_r+0x12d4>
   43b74:	d8c02a17 	ldw	r3,168(sp)
   43b78:	0039883a 	mov	fp,zero
   43b7c:	1805e526 	beq	r3,zero,45314 <___vfprintf_internal_r+0x1e88>
   43b80:	0027883a 	mov	r19,zero
   43b84:	002d883a 	mov	r22,zero
   43b88:	dc001e04 	addi	r16,sp,120
   43b8c:	9806d0fa 	srli	r3,r19,3
   43b90:	b008977a 	slli	r4,r22,29
   43b94:	b02cd0fa 	srli	r22,r22,3
   43b98:	9cc001cc 	andi	r19,r19,7
   43b9c:	98800c04 	addi	r2,r19,48
   43ba0:	843fffc4 	addi	r16,r16,-1
   43ba4:	20e6b03a 	or	r19,r4,r3
   43ba8:	80800005 	stb	r2,0(r16)
   43bac:	9d86b03a 	or	r3,r19,r22
   43bb0:	183ff61e 	bne	r3,zero,43b8c <__alt_data_end+0xfffd1b8c>
   43bb4:	90c0004c 	andi	r3,r18,1
   43bb8:	18014126 	beq	r3,zero,440c0 <___vfprintf_internal_r+0xc34>
   43bbc:	10803fcc 	andi	r2,r2,255
   43bc0:	1080201c 	xori	r2,r2,128
   43bc4:	10bfe004 	addi	r2,r2,-128
   43bc8:	00c00c04 	movi	r3,48
   43bcc:	10c13c26 	beq	r2,r3,440c0 <___vfprintf_internal_r+0xc34>
   43bd0:	80ffffc5 	stb	r3,-1(r16)
   43bd4:	d8c02817 	ldw	r3,160(sp)
   43bd8:	80bfffc4 	addi	r2,r16,-1
   43bdc:	1021883a 	mov	r16,r2
   43be0:	1887c83a 	sub	r3,r3,r2
   43be4:	d8c02b15 	stw	r3,172(sp)
   43be8:	d8802b17 	ldw	r2,172(sp)
   43bec:	d9002a17 	ldw	r4,168(sp)
   43bf0:	1100010e 	bge	r2,r4,43bf8 <___vfprintf_internal_r+0x76c>
   43bf4:	2005883a 	mov	r2,r4
   43bf8:	d8802915 	stw	r2,164(sp)
   43bfc:	d8003215 	stw	zero,200(sp)
   43c00:	e7003fcc 	andi	fp,fp,255
   43c04:	e700201c 	xori	fp,fp,128
   43c08:	e73fe004 	addi	fp,fp,-128
   43c0c:	e0000326 	beq	fp,zero,43c1c <___vfprintf_internal_r+0x790>
   43c10:	d8c02917 	ldw	r3,164(sp)
   43c14:	18c00044 	addi	r3,r3,1
   43c18:	d8c02915 	stw	r3,164(sp)
   43c1c:	90c0008c 	andi	r3,r18,2
   43c20:	d8c02c15 	stw	r3,176(sp)
   43c24:	18000326 	beq	r3,zero,43c34 <___vfprintf_internal_r+0x7a8>
   43c28:	d8c02917 	ldw	r3,164(sp)
   43c2c:	18c00084 	addi	r3,r3,2
   43c30:	d8c02915 	stw	r3,164(sp)
   43c34:	90c0210c 	andi	r3,r18,132
   43c38:	d8c03015 	stw	r3,192(sp)
   43c3c:	1801c51e 	bne	r3,zero,44354 <___vfprintf_internal_r+0xec8>
   43c40:	d9003117 	ldw	r4,196(sp)
   43c44:	d8c02917 	ldw	r3,164(sp)
   43c48:	20e7c83a 	sub	r19,r4,r3
   43c4c:	04c1c10e 	bge	zero,r19,44354 <___vfprintf_internal_r+0xec8>
   43c50:	02400404 	movi	r9,16
   43c54:	d8c02017 	ldw	r3,128(sp)
   43c58:	d8801f17 	ldw	r2,124(sp)
   43c5c:	4cc52f0e 	bge	r9,r19,4511c <___vfprintf_internal_r+0x1c90>
   43c60:	01400174 	movhi	r5,5
   43c64:	2957f084 	addi	r5,r5,24514
   43c68:	dc403b15 	stw	r17,236(sp)
   43c6c:	d9403515 	stw	r5,212(sp)
   43c70:	9823883a 	mov	r17,r19
   43c74:	482d883a 	mov	r22,r9
   43c78:	9027883a 	mov	r19,r18
   43c7c:	070001c4 	movi	fp,7
   43c80:	8025883a 	mov	r18,r16
   43c84:	dc002d17 	ldw	r16,180(sp)
   43c88:	00000306 	br	43c98 <___vfprintf_internal_r+0x80c>
   43c8c:	8c7ffc04 	addi	r17,r17,-16
   43c90:	42000204 	addi	r8,r8,8
   43c94:	b440130e 	bge	r22,r17,43ce4 <___vfprintf_internal_r+0x858>
   43c98:	01000174 	movhi	r4,5
   43c9c:	18c00404 	addi	r3,r3,16
   43ca0:	10800044 	addi	r2,r2,1
   43ca4:	2117f084 	addi	r4,r4,24514
   43ca8:	41000015 	stw	r4,0(r8)
   43cac:	45800115 	stw	r22,4(r8)
   43cb0:	d8c02015 	stw	r3,128(sp)
   43cb4:	d8801f15 	stw	r2,124(sp)
   43cb8:	e0bff40e 	bge	fp,r2,43c8c <__alt_data_end+0xfffd1c8c>
   43cbc:	d9801e04 	addi	r6,sp,120
   43cc0:	b80b883a 	mov	r5,r23
   43cc4:	8009883a 	mov	r4,r16
   43cc8:	004c3440 	call	4c344 <__sprint_r>
   43ccc:	103ef31e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   43cd0:	8c7ffc04 	addi	r17,r17,-16
   43cd4:	d8c02017 	ldw	r3,128(sp)
   43cd8:	d8801f17 	ldw	r2,124(sp)
   43cdc:	da000404 	addi	r8,sp,16
   43ce0:	b47fed16 	blt	r22,r17,43c98 <__alt_data_end+0xfffd1c98>
   43ce4:	9021883a 	mov	r16,r18
   43ce8:	9825883a 	mov	r18,r19
   43cec:	8827883a 	mov	r19,r17
   43cf0:	dc403b17 	ldw	r17,236(sp)
   43cf4:	d9403517 	ldw	r5,212(sp)
   43cf8:	98c7883a 	add	r3,r19,r3
   43cfc:	10800044 	addi	r2,r2,1
   43d00:	41400015 	stw	r5,0(r8)
   43d04:	44c00115 	stw	r19,4(r8)
   43d08:	d8c02015 	stw	r3,128(sp)
   43d0c:	d8801f15 	stw	r2,124(sp)
   43d10:	010001c4 	movi	r4,7
   43d14:	2082c516 	blt	r4,r2,4482c <___vfprintf_internal_r+0x13a0>
   43d18:	df002787 	ldb	fp,158(sp)
   43d1c:	42000204 	addi	r8,r8,8
   43d20:	e0000c26 	beq	fp,zero,43d54 <___vfprintf_internal_r+0x8c8>
   43d24:	d8801f17 	ldw	r2,124(sp)
   43d28:	d9002784 	addi	r4,sp,158
   43d2c:	18c00044 	addi	r3,r3,1
   43d30:	10800044 	addi	r2,r2,1
   43d34:	41000015 	stw	r4,0(r8)
   43d38:	01000044 	movi	r4,1
   43d3c:	41000115 	stw	r4,4(r8)
   43d40:	d8c02015 	stw	r3,128(sp)
   43d44:	d8801f15 	stw	r2,124(sp)
   43d48:	010001c4 	movi	r4,7
   43d4c:	20825e16 	blt	r4,r2,446c8 <___vfprintf_internal_r+0x123c>
   43d50:	42000204 	addi	r8,r8,8
   43d54:	d8802c17 	ldw	r2,176(sp)
   43d58:	10000c26 	beq	r2,zero,43d8c <___vfprintf_internal_r+0x900>
   43d5c:	d8801f17 	ldw	r2,124(sp)
   43d60:	d9002704 	addi	r4,sp,156
   43d64:	18c00084 	addi	r3,r3,2
   43d68:	10800044 	addi	r2,r2,1
   43d6c:	41000015 	stw	r4,0(r8)
   43d70:	01000084 	movi	r4,2
   43d74:	41000115 	stw	r4,4(r8)
   43d78:	d8c02015 	stw	r3,128(sp)
   43d7c:	d8801f15 	stw	r2,124(sp)
   43d80:	010001c4 	movi	r4,7
   43d84:	20825816 	blt	r4,r2,446e8 <___vfprintf_internal_r+0x125c>
   43d88:	42000204 	addi	r8,r8,8
   43d8c:	d9003017 	ldw	r4,192(sp)
   43d90:	00802004 	movi	r2,128
   43d94:	2081bb26 	beq	r4,r2,44484 <___vfprintf_internal_r+0xff8>
   43d98:	d9402a17 	ldw	r5,168(sp)
   43d9c:	d8802b17 	ldw	r2,172(sp)
   43da0:	28adc83a 	sub	r22,r5,r2
   43da4:	0580310e 	bge	zero,r22,43e6c <___vfprintf_internal_r+0x9e0>
   43da8:	07000404 	movi	fp,16
   43dac:	d8801f17 	ldw	r2,124(sp)
   43db0:	e584360e 	bge	fp,r22,44e8c <___vfprintf_internal_r+0x1a00>
   43db4:	01400174 	movhi	r5,5
   43db8:	2957ec84 	addi	r5,r5,24498
   43dbc:	dc402a15 	stw	r17,168(sp)
   43dc0:	d9402c15 	stw	r5,176(sp)
   43dc4:	b023883a 	mov	r17,r22
   43dc8:	04c001c4 	movi	r19,7
   43dcc:	a82d883a 	mov	r22,r21
   43dd0:	902b883a 	mov	r21,r18
   43dd4:	8025883a 	mov	r18,r16
   43dd8:	dc002d17 	ldw	r16,180(sp)
   43ddc:	00000306 	br	43dec <___vfprintf_internal_r+0x960>
   43de0:	8c7ffc04 	addi	r17,r17,-16
   43de4:	42000204 	addi	r8,r8,8
   43de8:	e440110e 	bge	fp,r17,43e30 <___vfprintf_internal_r+0x9a4>
   43dec:	18c00404 	addi	r3,r3,16
   43df0:	10800044 	addi	r2,r2,1
   43df4:	45000015 	stw	r20,0(r8)
   43df8:	47000115 	stw	fp,4(r8)
   43dfc:	d8c02015 	stw	r3,128(sp)
   43e00:	d8801f15 	stw	r2,124(sp)
   43e04:	98bff60e 	bge	r19,r2,43de0 <__alt_data_end+0xfffd1de0>
   43e08:	d9801e04 	addi	r6,sp,120
   43e0c:	b80b883a 	mov	r5,r23
   43e10:	8009883a 	mov	r4,r16
   43e14:	004c3440 	call	4c344 <__sprint_r>
   43e18:	103ea01e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   43e1c:	8c7ffc04 	addi	r17,r17,-16
   43e20:	d8c02017 	ldw	r3,128(sp)
   43e24:	d8801f17 	ldw	r2,124(sp)
   43e28:	da000404 	addi	r8,sp,16
   43e2c:	e47fef16 	blt	fp,r17,43dec <__alt_data_end+0xfffd1dec>
   43e30:	9021883a 	mov	r16,r18
   43e34:	a825883a 	mov	r18,r21
   43e38:	b02b883a 	mov	r21,r22
   43e3c:	882d883a 	mov	r22,r17
   43e40:	dc402a17 	ldw	r17,168(sp)
   43e44:	d9002c17 	ldw	r4,176(sp)
   43e48:	1d87883a 	add	r3,r3,r22
   43e4c:	10800044 	addi	r2,r2,1
   43e50:	41000015 	stw	r4,0(r8)
   43e54:	45800115 	stw	r22,4(r8)
   43e58:	d8c02015 	stw	r3,128(sp)
   43e5c:	d8801f15 	stw	r2,124(sp)
   43e60:	010001c4 	movi	r4,7
   43e64:	20821016 	blt	r4,r2,446a8 <___vfprintf_internal_r+0x121c>
   43e68:	42000204 	addi	r8,r8,8
   43e6c:	9080400c 	andi	r2,r18,256
   43e70:	10013a1e 	bne	r2,zero,4435c <___vfprintf_internal_r+0xed0>
   43e74:	d9402b17 	ldw	r5,172(sp)
   43e78:	d8801f17 	ldw	r2,124(sp)
   43e7c:	44000015 	stw	r16,0(r8)
   43e80:	1947883a 	add	r3,r3,r5
   43e84:	10800044 	addi	r2,r2,1
   43e88:	41400115 	stw	r5,4(r8)
   43e8c:	d8c02015 	stw	r3,128(sp)
   43e90:	d8801f15 	stw	r2,124(sp)
   43e94:	010001c4 	movi	r4,7
   43e98:	2081f516 	blt	r4,r2,44670 <___vfprintf_internal_r+0x11e4>
   43e9c:	42000204 	addi	r8,r8,8
   43ea0:	9480010c 	andi	r18,r18,4
   43ea4:	90003226 	beq	r18,zero,43f70 <___vfprintf_internal_r+0xae4>
   43ea8:	d9403117 	ldw	r5,196(sp)
   43eac:	d8802917 	ldw	r2,164(sp)
   43eb0:	28a1c83a 	sub	r16,r5,r2
   43eb4:	04002e0e 	bge	zero,r16,43f70 <___vfprintf_internal_r+0xae4>
   43eb8:	04400404 	movi	r17,16
   43ebc:	d8801f17 	ldw	r2,124(sp)
   43ec0:	8c04c40e 	bge	r17,r16,451d4 <___vfprintf_internal_r+0x1d48>
   43ec4:	01400174 	movhi	r5,5
   43ec8:	2957f084 	addi	r5,r5,24514
   43ecc:	d9403515 	stw	r5,212(sp)
   43ed0:	048001c4 	movi	r18,7
   43ed4:	dcc02d17 	ldw	r19,180(sp)
   43ed8:	00000306 	br	43ee8 <___vfprintf_internal_r+0xa5c>
   43edc:	843ffc04 	addi	r16,r16,-16
   43ee0:	42000204 	addi	r8,r8,8
   43ee4:	8c00130e 	bge	r17,r16,43f34 <___vfprintf_internal_r+0xaa8>
   43ee8:	01000174 	movhi	r4,5
   43eec:	18c00404 	addi	r3,r3,16
   43ef0:	10800044 	addi	r2,r2,1
   43ef4:	2117f084 	addi	r4,r4,24514
   43ef8:	41000015 	stw	r4,0(r8)
   43efc:	44400115 	stw	r17,4(r8)
   43f00:	d8c02015 	stw	r3,128(sp)
   43f04:	d8801f15 	stw	r2,124(sp)
   43f08:	90bff40e 	bge	r18,r2,43edc <__alt_data_end+0xfffd1edc>
   43f0c:	d9801e04 	addi	r6,sp,120
   43f10:	b80b883a 	mov	r5,r23
   43f14:	9809883a 	mov	r4,r19
   43f18:	004c3440 	call	4c344 <__sprint_r>
   43f1c:	103e5f1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   43f20:	843ffc04 	addi	r16,r16,-16
   43f24:	d8c02017 	ldw	r3,128(sp)
   43f28:	d8801f17 	ldw	r2,124(sp)
   43f2c:	da000404 	addi	r8,sp,16
   43f30:	8c3fed16 	blt	r17,r16,43ee8 <__alt_data_end+0xfffd1ee8>
   43f34:	d9403517 	ldw	r5,212(sp)
   43f38:	1c07883a 	add	r3,r3,r16
   43f3c:	10800044 	addi	r2,r2,1
   43f40:	41400015 	stw	r5,0(r8)
   43f44:	44000115 	stw	r16,4(r8)
   43f48:	d8c02015 	stw	r3,128(sp)
   43f4c:	d8801f15 	stw	r2,124(sp)
   43f50:	010001c4 	movi	r4,7
   43f54:	2080060e 	bge	r4,r2,43f70 <___vfprintf_internal_r+0xae4>
   43f58:	d9002d17 	ldw	r4,180(sp)
   43f5c:	d9801e04 	addi	r6,sp,120
   43f60:	b80b883a 	mov	r5,r23
   43f64:	004c3440 	call	4c344 <__sprint_r>
   43f68:	103e4c1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   43f6c:	d8c02017 	ldw	r3,128(sp)
   43f70:	d8803117 	ldw	r2,196(sp)
   43f74:	d9002917 	ldw	r4,164(sp)
   43f78:	1100010e 	bge	r2,r4,43f80 <___vfprintf_internal_r+0xaf4>
   43f7c:	2005883a 	mov	r2,r4
   43f80:	d9402f17 	ldw	r5,188(sp)
   43f84:	288b883a 	add	r5,r5,r2
   43f88:	d9402f15 	stw	r5,188(sp)
   43f8c:	1801c01e 	bne	r3,zero,44690 <___vfprintf_internal_r+0x1204>
   43f90:	a8800007 	ldb	r2,0(r21)
   43f94:	d8001f15 	stw	zero,124(sp)
   43f98:	da000404 	addi	r8,sp,16
   43f9c:	103d751e 	bne	r2,zero,43574 <__alt_data_end+0xfffd1574>
   43fa0:	a823883a 	mov	r17,r21
   43fa4:	003d8b06 	br	435d4 <__alt_data_end+0xfffd15d4>
   43fa8:	8025883a 	mov	r18,r16
   43fac:	dc002903 	ldbu	r16,164(sp)
   43fb0:	e011883a 	mov	r8,fp
   43fb4:	84003fcc 	andi	r16,r16,255
   43fb8:	8005e51e 	bne	r16,zero,45750 <___vfprintf_internal_r+0x22c4>
   43fbc:	94800414 	ori	r18,r18,16
   43fc0:	9080080c 	andi	r2,r18,32
   43fc4:	10022b26 	beq	r2,zero,44874 <___vfprintf_internal_r+0x13e8>
   43fc8:	d9002e17 	ldw	r4,184(sp)
   43fcc:	d9402a17 	ldw	r5,168(sp)
   43fd0:	d8002785 	stb	zero,158(sp)
   43fd4:	20c00204 	addi	r3,r4,8
   43fd8:	24c00017 	ldw	r19,0(r4)
   43fdc:	25800117 	ldw	r22,4(r4)
   43fe0:	28042e16 	blt	r5,zero,4509c <___vfprintf_internal_r+0x1c10>
   43fe4:	013fdfc4 	movi	r4,-129
   43fe8:	9d84b03a 	or	r2,r19,r22
   43fec:	d8c02e15 	stw	r3,184(sp)
   43ff0:	9124703a 	and	r18,r18,r4
   43ff4:	0039883a 	mov	fp,zero
   43ff8:	103e801e 	bne	r2,zero,439fc <__alt_data_end+0xfffd19fc>
   43ffc:	d9002a17 	ldw	r4,168(sp)
   44000:	2002e01e 	bne	r4,zero,44b84 <___vfprintf_internal_r+0x16f8>
   44004:	d8002a15 	stw	zero,168(sp)
   44008:	d8002b15 	stw	zero,172(sp)
   4400c:	dc001e04 	addi	r16,sp,120
   44010:	003ef506 	br	43be8 <__alt_data_end+0xfffd1be8>
   44014:	8025883a 	mov	r18,r16
   44018:	dc002903 	ldbu	r16,164(sp)
   4401c:	e011883a 	mov	r8,fp
   44020:	84003fcc 	andi	r16,r16,255
   44024:	8005ba1e 	bne	r16,zero,45710 <___vfprintf_internal_r+0x2284>
   44028:	01000174 	movhi	r4,5
   4402c:	2117d804 	addi	r4,r4,24416
   44030:	d9003915 	stw	r4,228(sp)
   44034:	9080080c 	andi	r2,r18,32
   44038:	10006126 	beq	r2,zero,441c0 <___vfprintf_internal_r+0xd34>
   4403c:	d9402e17 	ldw	r5,184(sp)
   44040:	2cc00017 	ldw	r19,0(r5)
   44044:	2d800117 	ldw	r22,4(r5)
   44048:	29400204 	addi	r5,r5,8
   4404c:	d9402e15 	stw	r5,184(sp)
   44050:	9080004c 	andi	r2,r18,1
   44054:	1001ac26 	beq	r2,zero,44708 <___vfprintf_internal_r+0x127c>
   44058:	9d84b03a 	or	r2,r19,r22
   4405c:	10038526 	beq	r2,zero,44e74 <___vfprintf_internal_r+0x19e8>
   44060:	d8c02a17 	ldw	r3,168(sp)
   44064:	00800c04 	movi	r2,48
   44068:	d8802705 	stb	r2,156(sp)
   4406c:	dc402745 	stb	r17,157(sp)
   44070:	d8002785 	stb	zero,158(sp)
   44074:	90800094 	ori	r2,r18,2
   44078:	18047916 	blt	r3,zero,45260 <___vfprintf_internal_r+0x1dd4>
   4407c:	00bfdfc4 	movi	r2,-129
   44080:	90a4703a 	and	r18,r18,r2
   44084:	94800094 	ori	r18,r18,2
   44088:	0039883a 	mov	fp,zero
   4408c:	d9003917 	ldw	r4,228(sp)
   44090:	dc001e04 	addi	r16,sp,120
   44094:	988003cc 	andi	r2,r19,15
   44098:	b006973a 	slli	r3,r22,28
   4409c:	2085883a 	add	r2,r4,r2
   440a0:	9826d13a 	srli	r19,r19,4
   440a4:	10800003 	ldbu	r2,0(r2)
   440a8:	b02cd13a 	srli	r22,r22,4
   440ac:	843fffc4 	addi	r16,r16,-1
   440b0:	1ce6b03a 	or	r19,r3,r19
   440b4:	80800005 	stb	r2,0(r16)
   440b8:	9d84b03a 	or	r2,r19,r22
   440bc:	103ff51e 	bne	r2,zero,44094 <__alt_data_end+0xfffd2094>
   440c0:	d8c02817 	ldw	r3,160(sp)
   440c4:	1c07c83a 	sub	r3,r3,r16
   440c8:	d8c02b15 	stw	r3,172(sp)
   440cc:	003ec606 	br	43be8 <__alt_data_end+0xfffd1be8>
   440d0:	8025883a 	mov	r18,r16
   440d4:	dc002903 	ldbu	r16,164(sp)
   440d8:	e011883a 	mov	r8,fp
   440dc:	84003fcc 	andi	r16,r16,255
   440e0:	803e9626 	beq	r16,zero,43b3c <__alt_data_end+0xfffd1b3c>
   440e4:	d8c02b03 	ldbu	r3,172(sp)
   440e8:	d8c02785 	stb	r3,158(sp)
   440ec:	003e9306 	br	43b3c <__alt_data_end+0xfffd1b3c>
   440f0:	00c00044 	movi	r3,1
   440f4:	d8c02905 	stb	r3,164(sp)
   440f8:	00c00ac4 	movi	r3,43
   440fc:	d8c02b05 	stb	r3,172(sp)
   44100:	ac400007 	ldb	r17,0(r21)
   44104:	003d4306 	br	43614 <__alt_data_end+0xfffd1614>
   44108:	84000814 	ori	r16,r16,32
   4410c:	ac400007 	ldb	r17,0(r21)
   44110:	003d4006 	br	43614 <__alt_data_end+0xfffd1614>
   44114:	d8802e17 	ldw	r2,184(sp)
   44118:	8025883a 	mov	r18,r16
   4411c:	d8002785 	stb	zero,158(sp)
   44120:	14000017 	ldw	r16,0(r2)
   44124:	e011883a 	mov	r8,fp
   44128:	14c00104 	addi	r19,r2,4
   4412c:	80042d26 	beq	r16,zero,451e4 <___vfprintf_internal_r+0x1d58>
   44130:	d8c02a17 	ldw	r3,168(sp)
   44134:	1803e416 	blt	r3,zero,450c8 <___vfprintf_internal_r+0x1c3c>
   44138:	180d883a 	mov	r6,r3
   4413c:	000b883a 	mov	r5,zero
   44140:	8009883a 	mov	r4,r16
   44144:	df003d15 	stw	fp,244(sp)
   44148:	0048dc40 	call	48dc4 <memchr>
   4414c:	da003d17 	ldw	r8,244(sp)
   44150:	10046826 	beq	r2,zero,452f4 <___vfprintf_internal_r+0x1e68>
   44154:	1405c83a 	sub	r2,r2,r16
   44158:	d8802b15 	stw	r2,172(sp)
   4415c:	1003e016 	blt	r2,zero,450e0 <___vfprintf_internal_r+0x1c54>
   44160:	df002783 	ldbu	fp,158(sp)
   44164:	d8802915 	stw	r2,164(sp)
   44168:	dcc02e15 	stw	r19,184(sp)
   4416c:	d8002a15 	stw	zero,168(sp)
   44170:	d8003215 	stw	zero,200(sp)
   44174:	003ea206 	br	43c00 <__alt_data_end+0xfffd1c00>
   44178:	8025883a 	mov	r18,r16
   4417c:	dc002903 	ldbu	r16,164(sp)
   44180:	e011883a 	mov	r8,fp
   44184:	84003fcc 	andi	r16,r16,255
   44188:	803f8d26 	beq	r16,zero,43fc0 <__alt_data_end+0xfffd1fc0>
   4418c:	d8c02b03 	ldbu	r3,172(sp)
   44190:	d8c02785 	stb	r3,158(sp)
   44194:	003f8a06 	br	43fc0 <__alt_data_end+0xfffd1fc0>
   44198:	8025883a 	mov	r18,r16
   4419c:	dc002903 	ldbu	r16,164(sp)
   441a0:	e011883a 	mov	r8,fp
   441a4:	84003fcc 	andi	r16,r16,255
   441a8:	8005661e 	bne	r16,zero,45744 <___vfprintf_internal_r+0x22b8>
   441ac:	01000174 	movhi	r4,5
   441b0:	2117dd04 	addi	r4,r4,24436
   441b4:	d9003915 	stw	r4,228(sp)
   441b8:	9080080c 	andi	r2,r18,32
   441bc:	103f9f1e 	bne	r2,zero,4403c <__alt_data_end+0xfffd203c>
   441c0:	9080040c 	andi	r2,r18,16
   441c4:	1002eb26 	beq	r2,zero,44d74 <___vfprintf_internal_r+0x18e8>
   441c8:	d8802e17 	ldw	r2,184(sp)
   441cc:	002d883a 	mov	r22,zero
   441d0:	14c00017 	ldw	r19,0(r2)
   441d4:	10800104 	addi	r2,r2,4
   441d8:	d8802e15 	stw	r2,184(sp)
   441dc:	003f9c06 	br	44050 <__alt_data_end+0xfffd2050>
   441e0:	d8802b07 	ldb	r2,172(sp)
   441e4:	1002e11e 	bne	r2,zero,44d6c <___vfprintf_internal_r+0x18e0>
   441e8:	00c00044 	movi	r3,1
   441ec:	d8c02905 	stb	r3,164(sp)
   441f0:	00c00804 	movi	r3,32
   441f4:	d8c02b05 	stb	r3,172(sp)
   441f8:	ac400007 	ldb	r17,0(r21)
   441fc:	003d0506 	br	43614 <__alt_data_end+0xfffd1614>
   44200:	84000054 	ori	r16,r16,1
   44204:	ac400007 	ldb	r17,0(r21)
   44208:	003d0206 	br	43614 <__alt_data_end+0xfffd1614>
   4420c:	8025883a 	mov	r18,r16
   44210:	dc002903 	ldbu	r16,164(sp)
   44214:	e011883a 	mov	r8,fp
   44218:	84003fcc 	andi	r16,r16,255
   4421c:	803de726 	beq	r16,zero,439bc <__alt_data_end+0xfffd19bc>
   44220:	d8c02b03 	ldbu	r3,172(sp)
   44224:	d8c02785 	stb	r3,158(sp)
   44228:	003de406 	br	439bc <__alt_data_end+0xfffd19bc>
   4422c:	84001014 	ori	r16,r16,64
   44230:	ac400007 	ldb	r17,0(r21)
   44234:	003cf706 	br	43614 <__alt_data_end+0xfffd1614>
   44238:	ac400007 	ldb	r17,0(r21)
   4423c:	00801b04 	movi	r2,108
   44240:	88838f26 	beq	r17,r2,45080 <___vfprintf_internal_r+0x1bf4>
   44244:	84000414 	ori	r16,r16,16
   44248:	003cf206 	br	43614 <__alt_data_end+0xfffd1614>
   4424c:	8025883a 	mov	r18,r16
   44250:	dc002903 	ldbu	r16,164(sp)
   44254:	e011883a 	mov	r8,fp
   44258:	84003fcc 	andi	r16,r16,255
   4425c:	80053f1e 	bne	r16,zero,4575c <___vfprintf_internal_r+0x22d0>
   44260:	9080080c 	andi	r2,r18,32
   44264:	1002d226 	beq	r2,zero,44db0 <___vfprintf_internal_r+0x1924>
   44268:	d9002e17 	ldw	r4,184(sp)
   4426c:	d9402f17 	ldw	r5,188(sp)
   44270:	20800017 	ldw	r2,0(r4)
   44274:	2807d7fa 	srai	r3,r5,31
   44278:	21000104 	addi	r4,r4,4
   4427c:	d9002e15 	stw	r4,184(sp)
   44280:	11400015 	stw	r5,0(r2)
   44284:	10c00115 	stw	r3,4(r2)
   44288:	003cb806 	br	4356c <__alt_data_end+0xfffd156c>
   4428c:	d8c02e17 	ldw	r3,184(sp)
   44290:	d9002e17 	ldw	r4,184(sp)
   44294:	8025883a 	mov	r18,r16
   44298:	18800017 	ldw	r2,0(r3)
   4429c:	21000104 	addi	r4,r4,4
   442a0:	00c00044 	movi	r3,1
   442a4:	e011883a 	mov	r8,fp
   442a8:	d8c02915 	stw	r3,164(sp)
   442ac:	d8002785 	stb	zero,158(sp)
   442b0:	d8801405 	stb	r2,80(sp)
   442b4:	d9002e15 	stw	r4,184(sp)
   442b8:	d8c02b15 	stw	r3,172(sp)
   442bc:	d8002a15 	stw	zero,168(sp)
   442c0:	d8003215 	stw	zero,200(sp)
   442c4:	dc001404 	addi	r16,sp,80
   442c8:	0039883a 	mov	fp,zero
   442cc:	003e5306 	br	43c1c <__alt_data_end+0xfffd1c1c>
   442d0:	01000174 	movhi	r4,5
   442d4:	2117dd04 	addi	r4,r4,24436
   442d8:	0039883a 	mov	fp,zero
   442dc:	d9003915 	stw	r4,228(sp)
   442e0:	04401e04 	movi	r17,120
   442e4:	003f6906 	br	4408c <__alt_data_end+0xfffd208c>
   442e8:	8025883a 	mov	r18,r16
   442ec:	dc002903 	ldbu	r16,164(sp)
   442f0:	e011883a 	mov	r8,fp
   442f4:	84003fcc 	andi	r16,r16,255
   442f8:	8005081e 	bne	r16,zero,4571c <___vfprintf_internal_r+0x2290>
   442fc:	883d6126 	beq	r17,zero,43884 <__alt_data_end+0xfffd1884>
   44300:	00c00044 	movi	r3,1
   44304:	d8c02915 	stw	r3,164(sp)
   44308:	dc401405 	stb	r17,80(sp)
   4430c:	d8002785 	stb	zero,158(sp)
   44310:	003fe906 	br	442b8 <__alt_data_end+0xfffd22b8>
   44314:	01400174 	movhi	r5,5
   44318:	2957dd04 	addi	r5,r5,24436
   4431c:	d9403915 	stw	r5,228(sp)
   44320:	d8c02e15 	stw	r3,184(sp)
   44324:	1025883a 	mov	r18,r2
   44328:	04401e04 	movi	r17,120
   4432c:	9d84b03a 	or	r2,r19,r22
   44330:	1000fc1e 	bne	r2,zero,44724 <___vfprintf_internal_r+0x1298>
   44334:	0039883a 	mov	fp,zero
   44338:	00800084 	movi	r2,2
   4433c:	10803fcc 	andi	r2,r2,255
   44340:	00c00044 	movi	r3,1
   44344:	10c20f26 	beq	r2,r3,44b84 <___vfprintf_internal_r+0x16f8>
   44348:	00c00084 	movi	r3,2
   4434c:	10fd3326 	beq	r2,r3,4381c <__alt_data_end+0xfffd181c>
   44350:	003e0b06 	br	43b80 <__alt_data_end+0xfffd1b80>
   44354:	d8c02017 	ldw	r3,128(sp)
   44358:	003e7106 	br	43d20 <__alt_data_end+0xfffd1d20>
   4435c:	00801944 	movi	r2,101
   44360:	14407e0e 	bge	r2,r17,4455c <___vfprintf_internal_r+0x10d0>
   44364:	d9003617 	ldw	r4,216(sp)
   44368:	d9403817 	ldw	r5,224(sp)
   4436c:	000d883a 	mov	r6,zero
   44370:	000f883a 	mov	r7,zero
   44374:	d8c03c15 	stw	r3,240(sp)
   44378:	da003d15 	stw	r8,244(sp)
   4437c:	00500c80 	call	500c8 <__eqdf2>
   44380:	d8c03c17 	ldw	r3,240(sp)
   44384:	da003d17 	ldw	r8,244(sp)
   44388:	1000f71e 	bne	r2,zero,44768 <___vfprintf_internal_r+0x12dc>
   4438c:	d8801f17 	ldw	r2,124(sp)
   44390:	01000174 	movhi	r4,5
   44394:	2117e404 	addi	r4,r4,24464
   44398:	18c00044 	addi	r3,r3,1
   4439c:	10800044 	addi	r2,r2,1
   443a0:	41000015 	stw	r4,0(r8)
   443a4:	01000044 	movi	r4,1
   443a8:	41000115 	stw	r4,4(r8)
   443ac:	d8c02015 	stw	r3,128(sp)
   443b0:	d8801f15 	stw	r2,124(sp)
   443b4:	010001c4 	movi	r4,7
   443b8:	2082b816 	blt	r4,r2,44e9c <___vfprintf_internal_r+0x1a10>
   443bc:	42000204 	addi	r8,r8,8
   443c0:	d8802617 	ldw	r2,152(sp)
   443c4:	d9403317 	ldw	r5,204(sp)
   443c8:	11400216 	blt	r2,r5,443d4 <___vfprintf_internal_r+0xf48>
   443cc:	9080004c 	andi	r2,r18,1
   443d0:	103eb326 	beq	r2,zero,43ea0 <__alt_data_end+0xfffd1ea0>
   443d4:	d8803717 	ldw	r2,220(sp)
   443d8:	d9003417 	ldw	r4,208(sp)
   443dc:	d9403717 	ldw	r5,220(sp)
   443e0:	1887883a 	add	r3,r3,r2
   443e4:	d8801f17 	ldw	r2,124(sp)
   443e8:	41000015 	stw	r4,0(r8)
   443ec:	41400115 	stw	r5,4(r8)
   443f0:	10800044 	addi	r2,r2,1
   443f4:	d8c02015 	stw	r3,128(sp)
   443f8:	d8801f15 	stw	r2,124(sp)
   443fc:	010001c4 	movi	r4,7
   44400:	20832916 	blt	r4,r2,450a8 <___vfprintf_internal_r+0x1c1c>
   44404:	42000204 	addi	r8,r8,8
   44408:	d8803317 	ldw	r2,204(sp)
   4440c:	143fffc4 	addi	r16,r2,-1
   44410:	043ea30e 	bge	zero,r16,43ea0 <__alt_data_end+0xfffd1ea0>
   44414:	04400404 	movi	r17,16
   44418:	d8801f17 	ldw	r2,124(sp)
   4441c:	8c00880e 	bge	r17,r16,44640 <___vfprintf_internal_r+0x11b4>
   44420:	01400174 	movhi	r5,5
   44424:	2957ec84 	addi	r5,r5,24498
   44428:	d9402c15 	stw	r5,176(sp)
   4442c:	058001c4 	movi	r22,7
   44430:	dcc02d17 	ldw	r19,180(sp)
   44434:	00000306 	br	44444 <___vfprintf_internal_r+0xfb8>
   44438:	42000204 	addi	r8,r8,8
   4443c:	843ffc04 	addi	r16,r16,-16
   44440:	8c00820e 	bge	r17,r16,4464c <___vfprintf_internal_r+0x11c0>
   44444:	18c00404 	addi	r3,r3,16
   44448:	10800044 	addi	r2,r2,1
   4444c:	45000015 	stw	r20,0(r8)
   44450:	44400115 	stw	r17,4(r8)
   44454:	d8c02015 	stw	r3,128(sp)
   44458:	d8801f15 	stw	r2,124(sp)
   4445c:	b0bff60e 	bge	r22,r2,44438 <__alt_data_end+0xfffd2438>
   44460:	d9801e04 	addi	r6,sp,120
   44464:	b80b883a 	mov	r5,r23
   44468:	9809883a 	mov	r4,r19
   4446c:	004c3440 	call	4c344 <__sprint_r>
   44470:	103d0a1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44474:	d8c02017 	ldw	r3,128(sp)
   44478:	d8801f17 	ldw	r2,124(sp)
   4447c:	da000404 	addi	r8,sp,16
   44480:	003fee06 	br	4443c <__alt_data_end+0xfffd243c>
   44484:	d9403117 	ldw	r5,196(sp)
   44488:	d8802917 	ldw	r2,164(sp)
   4448c:	28adc83a 	sub	r22,r5,r2
   44490:	05be410e 	bge	zero,r22,43d98 <__alt_data_end+0xfffd1d98>
   44494:	07000404 	movi	fp,16
   44498:	d8801f17 	ldw	r2,124(sp)
   4449c:	e5838f0e 	bge	fp,r22,452dc <___vfprintf_internal_r+0x1e50>
   444a0:	01400174 	movhi	r5,5
   444a4:	2957ec84 	addi	r5,r5,24498
   444a8:	dc403015 	stw	r17,192(sp)
   444ac:	d9402c15 	stw	r5,176(sp)
   444b0:	b023883a 	mov	r17,r22
   444b4:	04c001c4 	movi	r19,7
   444b8:	a82d883a 	mov	r22,r21
   444bc:	902b883a 	mov	r21,r18
   444c0:	8025883a 	mov	r18,r16
   444c4:	dc002d17 	ldw	r16,180(sp)
   444c8:	00000306 	br	444d8 <___vfprintf_internal_r+0x104c>
   444cc:	8c7ffc04 	addi	r17,r17,-16
   444d0:	42000204 	addi	r8,r8,8
   444d4:	e440110e 	bge	fp,r17,4451c <___vfprintf_internal_r+0x1090>
   444d8:	18c00404 	addi	r3,r3,16
   444dc:	10800044 	addi	r2,r2,1
   444e0:	45000015 	stw	r20,0(r8)
   444e4:	47000115 	stw	fp,4(r8)
   444e8:	d8c02015 	stw	r3,128(sp)
   444ec:	d8801f15 	stw	r2,124(sp)
   444f0:	98bff60e 	bge	r19,r2,444cc <__alt_data_end+0xfffd24cc>
   444f4:	d9801e04 	addi	r6,sp,120
   444f8:	b80b883a 	mov	r5,r23
   444fc:	8009883a 	mov	r4,r16
   44500:	004c3440 	call	4c344 <__sprint_r>
   44504:	103ce51e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44508:	8c7ffc04 	addi	r17,r17,-16
   4450c:	d8c02017 	ldw	r3,128(sp)
   44510:	d8801f17 	ldw	r2,124(sp)
   44514:	da000404 	addi	r8,sp,16
   44518:	e47fef16 	blt	fp,r17,444d8 <__alt_data_end+0xfffd24d8>
   4451c:	9021883a 	mov	r16,r18
   44520:	a825883a 	mov	r18,r21
   44524:	b02b883a 	mov	r21,r22
   44528:	882d883a 	mov	r22,r17
   4452c:	dc403017 	ldw	r17,192(sp)
   44530:	d9002c17 	ldw	r4,176(sp)
   44534:	1d87883a 	add	r3,r3,r22
   44538:	10800044 	addi	r2,r2,1
   4453c:	41000015 	stw	r4,0(r8)
   44540:	45800115 	stw	r22,4(r8)
   44544:	d8c02015 	stw	r3,128(sp)
   44548:	d8801f15 	stw	r2,124(sp)
   4454c:	010001c4 	movi	r4,7
   44550:	20818e16 	blt	r4,r2,44b8c <___vfprintf_internal_r+0x1700>
   44554:	42000204 	addi	r8,r8,8
   44558:	003e0f06 	br	43d98 <__alt_data_end+0xfffd1d98>
   4455c:	d9403317 	ldw	r5,204(sp)
   44560:	00800044 	movi	r2,1
   44564:	18c00044 	addi	r3,r3,1
   44568:	1141530e 	bge	r2,r5,44ab8 <___vfprintf_internal_r+0x162c>
   4456c:	dc401f17 	ldw	r17,124(sp)
   44570:	00800044 	movi	r2,1
   44574:	40800115 	stw	r2,4(r8)
   44578:	8c400044 	addi	r17,r17,1
   4457c:	44000015 	stw	r16,0(r8)
   44580:	d8c02015 	stw	r3,128(sp)
   44584:	dc401f15 	stw	r17,124(sp)
   44588:	008001c4 	movi	r2,7
   4458c:	14416b16 	blt	r2,r17,44b3c <___vfprintf_internal_r+0x16b0>
   44590:	42000204 	addi	r8,r8,8
   44594:	d8803717 	ldw	r2,220(sp)
   44598:	d9003417 	ldw	r4,208(sp)
   4459c:	8c400044 	addi	r17,r17,1
   445a0:	10c7883a 	add	r3,r2,r3
   445a4:	40800115 	stw	r2,4(r8)
   445a8:	41000015 	stw	r4,0(r8)
   445ac:	d8c02015 	stw	r3,128(sp)
   445b0:	dc401f15 	stw	r17,124(sp)
   445b4:	008001c4 	movi	r2,7
   445b8:	14416916 	blt	r2,r17,44b60 <___vfprintf_internal_r+0x16d4>
   445bc:	45800204 	addi	r22,r8,8
   445c0:	d9003617 	ldw	r4,216(sp)
   445c4:	d9403817 	ldw	r5,224(sp)
   445c8:	000d883a 	mov	r6,zero
   445cc:	000f883a 	mov	r7,zero
   445d0:	d8c03c15 	stw	r3,240(sp)
   445d4:	00500c80 	call	500c8 <__eqdf2>
   445d8:	d8c03c17 	ldw	r3,240(sp)
   445dc:	1000bc26 	beq	r2,zero,448d0 <___vfprintf_internal_r+0x1444>
   445e0:	d9403317 	ldw	r5,204(sp)
   445e4:	84000044 	addi	r16,r16,1
   445e8:	8c400044 	addi	r17,r17,1
   445ec:	28bfffc4 	addi	r2,r5,-1
   445f0:	1887883a 	add	r3,r3,r2
   445f4:	b0800115 	stw	r2,4(r22)
   445f8:	b4000015 	stw	r16,0(r22)
   445fc:	d8c02015 	stw	r3,128(sp)
   44600:	dc401f15 	stw	r17,124(sp)
   44604:	008001c4 	movi	r2,7
   44608:	14414316 	blt	r2,r17,44b18 <___vfprintf_internal_r+0x168c>
   4460c:	b5800204 	addi	r22,r22,8
   44610:	d9003a17 	ldw	r4,232(sp)
   44614:	df0022c4 	addi	fp,sp,139
   44618:	8c400044 	addi	r17,r17,1
   4461c:	20c7883a 	add	r3,r4,r3
   44620:	b7000015 	stw	fp,0(r22)
   44624:	b1000115 	stw	r4,4(r22)
   44628:	d8c02015 	stw	r3,128(sp)
   4462c:	dc401f15 	stw	r17,124(sp)
   44630:	008001c4 	movi	r2,7
   44634:	14400e16 	blt	r2,r17,44670 <___vfprintf_internal_r+0x11e4>
   44638:	b2000204 	addi	r8,r22,8
   4463c:	003e1806 	br	43ea0 <__alt_data_end+0xfffd1ea0>
   44640:	01000174 	movhi	r4,5
   44644:	2117ec84 	addi	r4,r4,24498
   44648:	d9002c15 	stw	r4,176(sp)
   4464c:	d9002c17 	ldw	r4,176(sp)
   44650:	1c07883a 	add	r3,r3,r16
   44654:	44000115 	stw	r16,4(r8)
   44658:	41000015 	stw	r4,0(r8)
   4465c:	10800044 	addi	r2,r2,1
   44660:	d8c02015 	stw	r3,128(sp)
   44664:	d8801f15 	stw	r2,124(sp)
   44668:	010001c4 	movi	r4,7
   4466c:	20be0b0e 	bge	r4,r2,43e9c <__alt_data_end+0xfffd1e9c>
   44670:	d9002d17 	ldw	r4,180(sp)
   44674:	d9801e04 	addi	r6,sp,120
   44678:	b80b883a 	mov	r5,r23
   4467c:	004c3440 	call	4c344 <__sprint_r>
   44680:	103c861e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44684:	d8c02017 	ldw	r3,128(sp)
   44688:	da000404 	addi	r8,sp,16
   4468c:	003e0406 	br	43ea0 <__alt_data_end+0xfffd1ea0>
   44690:	d9002d17 	ldw	r4,180(sp)
   44694:	d9801e04 	addi	r6,sp,120
   44698:	b80b883a 	mov	r5,r23
   4469c:	004c3440 	call	4c344 <__sprint_r>
   446a0:	103e3b26 	beq	r2,zero,43f90 <__alt_data_end+0xfffd1f90>
   446a4:	003c7d06 	br	4389c <__alt_data_end+0xfffd189c>
   446a8:	d9002d17 	ldw	r4,180(sp)
   446ac:	d9801e04 	addi	r6,sp,120
   446b0:	b80b883a 	mov	r5,r23
   446b4:	004c3440 	call	4c344 <__sprint_r>
   446b8:	103c781e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   446bc:	d8c02017 	ldw	r3,128(sp)
   446c0:	da000404 	addi	r8,sp,16
   446c4:	003de906 	br	43e6c <__alt_data_end+0xfffd1e6c>
   446c8:	d9002d17 	ldw	r4,180(sp)
   446cc:	d9801e04 	addi	r6,sp,120
   446d0:	b80b883a 	mov	r5,r23
   446d4:	004c3440 	call	4c344 <__sprint_r>
   446d8:	103c701e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   446dc:	d8c02017 	ldw	r3,128(sp)
   446e0:	da000404 	addi	r8,sp,16
   446e4:	003d9b06 	br	43d54 <__alt_data_end+0xfffd1d54>
   446e8:	d9002d17 	ldw	r4,180(sp)
   446ec:	d9801e04 	addi	r6,sp,120
   446f0:	b80b883a 	mov	r5,r23
   446f4:	004c3440 	call	4c344 <__sprint_r>
   446f8:	103c681e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   446fc:	d8c02017 	ldw	r3,128(sp)
   44700:	da000404 	addi	r8,sp,16
   44704:	003da106 	br	43d8c <__alt_data_end+0xfffd1d8c>
   44708:	d9402a17 	ldw	r5,168(sp)
   4470c:	d8002785 	stb	zero,158(sp)
   44710:	283f0616 	blt	r5,zero,4432c <__alt_data_end+0xfffd232c>
   44714:	00ffdfc4 	movi	r3,-129
   44718:	9d84b03a 	or	r2,r19,r22
   4471c:	90e4703a 	and	r18,r18,r3
   44720:	103c3b26 	beq	r2,zero,43810 <__alt_data_end+0xfffd1810>
   44724:	0039883a 	mov	fp,zero
   44728:	003e5806 	br	4408c <__alt_data_end+0xfffd208c>
   4472c:	9080040c 	andi	r2,r18,16
   44730:	1001b326 	beq	r2,zero,44e00 <___vfprintf_internal_r+0x1974>
   44734:	d8c02e17 	ldw	r3,184(sp)
   44738:	d9002a17 	ldw	r4,168(sp)
   4473c:	d8002785 	stb	zero,158(sp)
   44740:	18800104 	addi	r2,r3,4
   44744:	1cc00017 	ldw	r19,0(r3)
   44748:	002d883a 	mov	r22,zero
   4474c:	2001b516 	blt	r4,zero,44e24 <___vfprintf_internal_r+0x1998>
   44750:	00ffdfc4 	movi	r3,-129
   44754:	d8802e15 	stw	r2,184(sp)
   44758:	90e4703a 	and	r18,r18,r3
   4475c:	983d0526 	beq	r19,zero,43b74 <__alt_data_end+0xfffd1b74>
   44760:	0039883a 	mov	fp,zero
   44764:	003d0806 	br	43b88 <__alt_data_end+0xfffd1b88>
   44768:	dc402617 	ldw	r17,152(sp)
   4476c:	0441d30e 	bge	zero,r17,44ebc <___vfprintf_internal_r+0x1a30>
   44770:	dc403217 	ldw	r17,200(sp)
   44774:	d8803317 	ldw	r2,204(sp)
   44778:	1440010e 	bge	r2,r17,44780 <___vfprintf_internal_r+0x12f4>
   4477c:	1023883a 	mov	r17,r2
   44780:	04400a0e 	bge	zero,r17,447ac <___vfprintf_internal_r+0x1320>
   44784:	d8801f17 	ldw	r2,124(sp)
   44788:	1c47883a 	add	r3,r3,r17
   4478c:	44000015 	stw	r16,0(r8)
   44790:	10800044 	addi	r2,r2,1
   44794:	44400115 	stw	r17,4(r8)
   44798:	d8c02015 	stw	r3,128(sp)
   4479c:	d8801f15 	stw	r2,124(sp)
   447a0:	010001c4 	movi	r4,7
   447a4:	20826516 	blt	r4,r2,4513c <___vfprintf_internal_r+0x1cb0>
   447a8:	42000204 	addi	r8,r8,8
   447ac:	88026116 	blt	r17,zero,45134 <___vfprintf_internal_r+0x1ca8>
   447b0:	d9003217 	ldw	r4,200(sp)
   447b4:	2463c83a 	sub	r17,r4,r17
   447b8:	04407b0e 	bge	zero,r17,449a8 <___vfprintf_internal_r+0x151c>
   447bc:	05800404 	movi	r22,16
   447c0:	d8801f17 	ldw	r2,124(sp)
   447c4:	b4419d0e 	bge	r22,r17,44e3c <___vfprintf_internal_r+0x19b0>
   447c8:	01000174 	movhi	r4,5
   447cc:	2117ec84 	addi	r4,r4,24498
   447d0:	d9002c15 	stw	r4,176(sp)
   447d4:	070001c4 	movi	fp,7
   447d8:	dcc02d17 	ldw	r19,180(sp)
   447dc:	00000306 	br	447ec <___vfprintf_internal_r+0x1360>
   447e0:	42000204 	addi	r8,r8,8
   447e4:	8c7ffc04 	addi	r17,r17,-16
   447e8:	b441970e 	bge	r22,r17,44e48 <___vfprintf_internal_r+0x19bc>
   447ec:	18c00404 	addi	r3,r3,16
   447f0:	10800044 	addi	r2,r2,1
   447f4:	45000015 	stw	r20,0(r8)
   447f8:	45800115 	stw	r22,4(r8)
   447fc:	d8c02015 	stw	r3,128(sp)
   44800:	d8801f15 	stw	r2,124(sp)
   44804:	e0bff60e 	bge	fp,r2,447e0 <__alt_data_end+0xfffd27e0>
   44808:	d9801e04 	addi	r6,sp,120
   4480c:	b80b883a 	mov	r5,r23
   44810:	9809883a 	mov	r4,r19
   44814:	004c3440 	call	4c344 <__sprint_r>
   44818:	103c201e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   4481c:	d8c02017 	ldw	r3,128(sp)
   44820:	d8801f17 	ldw	r2,124(sp)
   44824:	da000404 	addi	r8,sp,16
   44828:	003fee06 	br	447e4 <__alt_data_end+0xfffd27e4>
   4482c:	d9002d17 	ldw	r4,180(sp)
   44830:	d9801e04 	addi	r6,sp,120
   44834:	b80b883a 	mov	r5,r23
   44838:	004c3440 	call	4c344 <__sprint_r>
   4483c:	103c171e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44840:	d8c02017 	ldw	r3,128(sp)
   44844:	df002787 	ldb	fp,158(sp)
   44848:	da000404 	addi	r8,sp,16
   4484c:	003d3406 	br	43d20 <__alt_data_end+0xfffd1d20>
   44850:	9080040c 	andi	r2,r18,16
   44854:	10016126 	beq	r2,zero,44ddc <___vfprintf_internal_r+0x1950>
   44858:	d9402e17 	ldw	r5,184(sp)
   4485c:	2cc00017 	ldw	r19,0(r5)
   44860:	29400104 	addi	r5,r5,4
   44864:	d9402e15 	stw	r5,184(sp)
   44868:	982dd7fa 	srai	r22,r19,31
   4486c:	b005883a 	mov	r2,r22
   44870:	003c5a06 	br	439dc <__alt_data_end+0xfffd19dc>
   44874:	9080040c 	andi	r2,r18,16
   44878:	10003526 	beq	r2,zero,44950 <___vfprintf_internal_r+0x14c4>
   4487c:	d8c02e17 	ldw	r3,184(sp)
   44880:	d9002a17 	ldw	r4,168(sp)
   44884:	d8002785 	stb	zero,158(sp)
   44888:	18800104 	addi	r2,r3,4
   4488c:	1cc00017 	ldw	r19,0(r3)
   44890:	002d883a 	mov	r22,zero
   44894:	20003716 	blt	r4,zero,44974 <___vfprintf_internal_r+0x14e8>
   44898:	00ffdfc4 	movi	r3,-129
   4489c:	d8802e15 	stw	r2,184(sp)
   448a0:	90e4703a 	and	r18,r18,r3
   448a4:	0039883a 	mov	fp,zero
   448a8:	983dd426 	beq	r19,zero,43ffc <__alt_data_end+0xfffd1ffc>
   448ac:	00800244 	movi	r2,9
   448b0:	14fc5336 	bltu	r2,r19,43a00 <__alt_data_end+0xfffd1a00>
   448b4:	d8c02817 	ldw	r3,160(sp)
   448b8:	dc001dc4 	addi	r16,sp,119
   448bc:	9cc00c04 	addi	r19,r19,48
   448c0:	1c07c83a 	sub	r3,r3,r16
   448c4:	dcc01dc5 	stb	r19,119(sp)
   448c8:	d8c02b15 	stw	r3,172(sp)
   448cc:	003cc606 	br	43be8 <__alt_data_end+0xfffd1be8>
   448d0:	d8803317 	ldw	r2,204(sp)
   448d4:	143fffc4 	addi	r16,r2,-1
   448d8:	043f4d0e 	bge	zero,r16,44610 <__alt_data_end+0xfffd2610>
   448dc:	07000404 	movi	fp,16
   448e0:	e400810e 	bge	fp,r16,44ae8 <___vfprintf_internal_r+0x165c>
   448e4:	01400174 	movhi	r5,5
   448e8:	2957ec84 	addi	r5,r5,24498
   448ec:	d9402c15 	stw	r5,176(sp)
   448f0:	01c001c4 	movi	r7,7
   448f4:	dcc02d17 	ldw	r19,180(sp)
   448f8:	00000306 	br	44908 <___vfprintf_internal_r+0x147c>
   448fc:	b5800204 	addi	r22,r22,8
   44900:	843ffc04 	addi	r16,r16,-16
   44904:	e4007b0e 	bge	fp,r16,44af4 <___vfprintf_internal_r+0x1668>
   44908:	18c00404 	addi	r3,r3,16
   4490c:	8c400044 	addi	r17,r17,1
   44910:	b5000015 	stw	r20,0(r22)
   44914:	b7000115 	stw	fp,4(r22)
   44918:	d8c02015 	stw	r3,128(sp)
   4491c:	dc401f15 	stw	r17,124(sp)
   44920:	3c7ff60e 	bge	r7,r17,448fc <__alt_data_end+0xfffd28fc>
   44924:	d9801e04 	addi	r6,sp,120
   44928:	b80b883a 	mov	r5,r23
   4492c:	9809883a 	mov	r4,r19
   44930:	d9c03c15 	stw	r7,240(sp)
   44934:	004c3440 	call	4c344 <__sprint_r>
   44938:	d9c03c17 	ldw	r7,240(sp)
   4493c:	103bd71e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44940:	d8c02017 	ldw	r3,128(sp)
   44944:	dc401f17 	ldw	r17,124(sp)
   44948:	dd800404 	addi	r22,sp,16
   4494c:	003fec06 	br	44900 <__alt_data_end+0xfffd2900>
   44950:	9080100c 	andi	r2,r18,64
   44954:	d8002785 	stb	zero,158(sp)
   44958:	10010e26 	beq	r2,zero,44d94 <___vfprintf_internal_r+0x1908>
   4495c:	d9402e17 	ldw	r5,184(sp)
   44960:	d8c02a17 	ldw	r3,168(sp)
   44964:	002d883a 	mov	r22,zero
   44968:	28800104 	addi	r2,r5,4
   4496c:	2cc0000b 	ldhu	r19,0(r5)
   44970:	183fc90e 	bge	r3,zero,44898 <__alt_data_end+0xfffd2898>
   44974:	d8802e15 	stw	r2,184(sp)
   44978:	0039883a 	mov	fp,zero
   4497c:	9d84b03a 	or	r2,r19,r22
   44980:	103c1e1e 	bne	r2,zero,439fc <__alt_data_end+0xfffd19fc>
   44984:	00800044 	movi	r2,1
   44988:	003e6c06 	br	4433c <__alt_data_end+0xfffd233c>
   4498c:	d9002d17 	ldw	r4,180(sp)
   44990:	d9801e04 	addi	r6,sp,120
   44994:	b80b883a 	mov	r5,r23
   44998:	004c3440 	call	4c344 <__sprint_r>
   4499c:	103bbf1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   449a0:	d8c02017 	ldw	r3,128(sp)
   449a4:	da000404 	addi	r8,sp,16
   449a8:	d9003217 	ldw	r4,200(sp)
   449ac:	d8802617 	ldw	r2,152(sp)
   449b0:	d9403317 	ldw	r5,204(sp)
   449b4:	8123883a 	add	r17,r16,r4
   449b8:	11400216 	blt	r2,r5,449c4 <___vfprintf_internal_r+0x1538>
   449bc:	9100004c 	andi	r4,r18,1
   449c0:	20000d26 	beq	r4,zero,449f8 <___vfprintf_internal_r+0x156c>
   449c4:	d9003717 	ldw	r4,220(sp)
   449c8:	d9403417 	ldw	r5,208(sp)
   449cc:	1907883a 	add	r3,r3,r4
   449d0:	d9001f17 	ldw	r4,124(sp)
   449d4:	41400015 	stw	r5,0(r8)
   449d8:	d9403717 	ldw	r5,220(sp)
   449dc:	21000044 	addi	r4,r4,1
   449e0:	d8c02015 	stw	r3,128(sp)
   449e4:	41400115 	stw	r5,4(r8)
   449e8:	d9001f15 	stw	r4,124(sp)
   449ec:	014001c4 	movi	r5,7
   449f0:	2901e816 	blt	r5,r4,45194 <___vfprintf_internal_r+0x1d08>
   449f4:	42000204 	addi	r8,r8,8
   449f8:	d9003317 	ldw	r4,204(sp)
   449fc:	8121883a 	add	r16,r16,r4
   44a00:	2085c83a 	sub	r2,r4,r2
   44a04:	8461c83a 	sub	r16,r16,r17
   44a08:	1400010e 	bge	r2,r16,44a10 <___vfprintf_internal_r+0x1584>
   44a0c:	1021883a 	mov	r16,r2
   44a10:	04000a0e 	bge	zero,r16,44a3c <___vfprintf_internal_r+0x15b0>
   44a14:	d9001f17 	ldw	r4,124(sp)
   44a18:	1c07883a 	add	r3,r3,r16
   44a1c:	44400015 	stw	r17,0(r8)
   44a20:	21000044 	addi	r4,r4,1
   44a24:	44000115 	stw	r16,4(r8)
   44a28:	d8c02015 	stw	r3,128(sp)
   44a2c:	d9001f15 	stw	r4,124(sp)
   44a30:	014001c4 	movi	r5,7
   44a34:	2901fb16 	blt	r5,r4,45224 <___vfprintf_internal_r+0x1d98>
   44a38:	42000204 	addi	r8,r8,8
   44a3c:	8001f716 	blt	r16,zero,4521c <___vfprintf_internal_r+0x1d90>
   44a40:	1421c83a 	sub	r16,r2,r16
   44a44:	043d160e 	bge	zero,r16,43ea0 <__alt_data_end+0xfffd1ea0>
   44a48:	04400404 	movi	r17,16
   44a4c:	d8801f17 	ldw	r2,124(sp)
   44a50:	8c3efb0e 	bge	r17,r16,44640 <__alt_data_end+0xfffd2640>
   44a54:	01400174 	movhi	r5,5
   44a58:	2957ec84 	addi	r5,r5,24498
   44a5c:	d9402c15 	stw	r5,176(sp)
   44a60:	058001c4 	movi	r22,7
   44a64:	dcc02d17 	ldw	r19,180(sp)
   44a68:	00000306 	br	44a78 <___vfprintf_internal_r+0x15ec>
   44a6c:	42000204 	addi	r8,r8,8
   44a70:	843ffc04 	addi	r16,r16,-16
   44a74:	8c3ef50e 	bge	r17,r16,4464c <__alt_data_end+0xfffd264c>
   44a78:	18c00404 	addi	r3,r3,16
   44a7c:	10800044 	addi	r2,r2,1
   44a80:	45000015 	stw	r20,0(r8)
   44a84:	44400115 	stw	r17,4(r8)
   44a88:	d8c02015 	stw	r3,128(sp)
   44a8c:	d8801f15 	stw	r2,124(sp)
   44a90:	b0bff60e 	bge	r22,r2,44a6c <__alt_data_end+0xfffd2a6c>
   44a94:	d9801e04 	addi	r6,sp,120
   44a98:	b80b883a 	mov	r5,r23
   44a9c:	9809883a 	mov	r4,r19
   44aa0:	004c3440 	call	4c344 <__sprint_r>
   44aa4:	103b7d1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44aa8:	d8c02017 	ldw	r3,128(sp)
   44aac:	d8801f17 	ldw	r2,124(sp)
   44ab0:	da000404 	addi	r8,sp,16
   44ab4:	003fee06 	br	44a70 <__alt_data_end+0xfffd2a70>
   44ab8:	9088703a 	and	r4,r18,r2
   44abc:	203eab1e 	bne	r4,zero,4456c <__alt_data_end+0xfffd256c>
   44ac0:	dc401f17 	ldw	r17,124(sp)
   44ac4:	40800115 	stw	r2,4(r8)
   44ac8:	44000015 	stw	r16,0(r8)
   44acc:	8c400044 	addi	r17,r17,1
   44ad0:	d8c02015 	stw	r3,128(sp)
   44ad4:	dc401f15 	stw	r17,124(sp)
   44ad8:	008001c4 	movi	r2,7
   44adc:	14400e16 	blt	r2,r17,44b18 <___vfprintf_internal_r+0x168c>
   44ae0:	45800204 	addi	r22,r8,8
   44ae4:	003eca06 	br	44610 <__alt_data_end+0xfffd2610>
   44ae8:	01000174 	movhi	r4,5
   44aec:	2117ec84 	addi	r4,r4,24498
   44af0:	d9002c15 	stw	r4,176(sp)
   44af4:	d8802c17 	ldw	r2,176(sp)
   44af8:	1c07883a 	add	r3,r3,r16
   44afc:	8c400044 	addi	r17,r17,1
   44b00:	b0800015 	stw	r2,0(r22)
   44b04:	b4000115 	stw	r16,4(r22)
   44b08:	d8c02015 	stw	r3,128(sp)
   44b0c:	dc401f15 	stw	r17,124(sp)
   44b10:	008001c4 	movi	r2,7
   44b14:	147ebd0e 	bge	r2,r17,4460c <__alt_data_end+0xfffd260c>
   44b18:	d9002d17 	ldw	r4,180(sp)
   44b1c:	d9801e04 	addi	r6,sp,120
   44b20:	b80b883a 	mov	r5,r23
   44b24:	004c3440 	call	4c344 <__sprint_r>
   44b28:	103b5c1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44b2c:	d8c02017 	ldw	r3,128(sp)
   44b30:	dc401f17 	ldw	r17,124(sp)
   44b34:	dd800404 	addi	r22,sp,16
   44b38:	003eb506 	br	44610 <__alt_data_end+0xfffd2610>
   44b3c:	d9002d17 	ldw	r4,180(sp)
   44b40:	d9801e04 	addi	r6,sp,120
   44b44:	b80b883a 	mov	r5,r23
   44b48:	004c3440 	call	4c344 <__sprint_r>
   44b4c:	103b531e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44b50:	d8c02017 	ldw	r3,128(sp)
   44b54:	dc401f17 	ldw	r17,124(sp)
   44b58:	da000404 	addi	r8,sp,16
   44b5c:	003e8d06 	br	44594 <__alt_data_end+0xfffd2594>
   44b60:	d9002d17 	ldw	r4,180(sp)
   44b64:	d9801e04 	addi	r6,sp,120
   44b68:	b80b883a 	mov	r5,r23
   44b6c:	004c3440 	call	4c344 <__sprint_r>
   44b70:	103b4a1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44b74:	d8c02017 	ldw	r3,128(sp)
   44b78:	dc401f17 	ldw	r17,124(sp)
   44b7c:	dd800404 	addi	r22,sp,16
   44b80:	003e8f06 	br	445c0 <__alt_data_end+0xfffd25c0>
   44b84:	0027883a 	mov	r19,zero
   44b88:	003f4a06 	br	448b4 <__alt_data_end+0xfffd28b4>
   44b8c:	d9002d17 	ldw	r4,180(sp)
   44b90:	d9801e04 	addi	r6,sp,120
   44b94:	b80b883a 	mov	r5,r23
   44b98:	004c3440 	call	4c344 <__sprint_r>
   44b9c:	103b3f1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44ba0:	d8c02017 	ldw	r3,128(sp)
   44ba4:	da000404 	addi	r8,sp,16
   44ba8:	003c7b06 	br	43d98 <__alt_data_end+0xfffd1d98>
   44bac:	d9402a17 	ldw	r5,168(sp)
   44bb0:	04e7c83a 	sub	r19,zero,r19
   44bb4:	07000b44 	movi	fp,45
   44bb8:	9804c03a 	cmpne	r2,r19,zero
   44bbc:	05adc83a 	sub	r22,zero,r22
   44bc0:	df002785 	stb	fp,158(sp)
   44bc4:	b0adc83a 	sub	r22,r22,r2
   44bc8:	28017b16 	blt	r5,zero,451b8 <___vfprintf_internal_r+0x1d2c>
   44bcc:	00bfdfc4 	movi	r2,-129
   44bd0:	90a4703a 	and	r18,r18,r2
   44bd4:	003b8906 	br	439fc <__alt_data_end+0xfffd19fc>
   44bd8:	d9003617 	ldw	r4,216(sp)
   44bdc:	d9403817 	ldw	r5,224(sp)
   44be0:	da003d15 	stw	r8,244(sp)
   44be4:	004a9f80 	call	4a9f8 <__fpclassifyd>
   44be8:	da003d17 	ldw	r8,244(sp)
   44bec:	1000f026 	beq	r2,zero,44fb0 <___vfprintf_internal_r+0x1b24>
   44bf0:	d9002a17 	ldw	r4,168(sp)
   44bf4:	05bff7c4 	movi	r22,-33
   44bf8:	00bfffc4 	movi	r2,-1
   44bfc:	8dac703a 	and	r22,r17,r22
   44c00:	20820026 	beq	r4,r2,45404 <___vfprintf_internal_r+0x1f78>
   44c04:	008011c4 	movi	r2,71
   44c08:	b081f726 	beq	r22,r2,453e8 <___vfprintf_internal_r+0x1f5c>
   44c0c:	d9003817 	ldw	r4,224(sp)
   44c10:	90c04014 	ori	r3,r18,256
   44c14:	d8c02c15 	stw	r3,176(sp)
   44c18:	20021516 	blt	r4,zero,45470 <___vfprintf_internal_r+0x1fe4>
   44c1c:	dcc03817 	ldw	r19,224(sp)
   44c20:	d8002905 	stb	zero,164(sp)
   44c24:	00801984 	movi	r2,102
   44c28:	8881f926 	beq	r17,r2,45410 <___vfprintf_internal_r+0x1f84>
   44c2c:	00801184 	movi	r2,70
   44c30:	88821c26 	beq	r17,r2,454a4 <___vfprintf_internal_r+0x2018>
   44c34:	00801144 	movi	r2,69
   44c38:	b081ef26 	beq	r22,r2,453f8 <___vfprintf_internal_r+0x1f6c>
   44c3c:	d8c02a17 	ldw	r3,168(sp)
   44c40:	d8802104 	addi	r2,sp,132
   44c44:	d8800315 	stw	r2,12(sp)
   44c48:	d9403617 	ldw	r5,216(sp)
   44c4c:	d8802504 	addi	r2,sp,148
   44c50:	d9002d17 	ldw	r4,180(sp)
   44c54:	d8800215 	stw	r2,8(sp)
   44c58:	d8802604 	addi	r2,sp,152
   44c5c:	d8c00015 	stw	r3,0(sp)
   44c60:	d8800115 	stw	r2,4(sp)
   44c64:	01c00084 	movi	r7,2
   44c68:	980d883a 	mov	r6,r19
   44c6c:	d8c03c15 	stw	r3,240(sp)
   44c70:	da003d15 	stw	r8,244(sp)
   44c74:	0045bbc0 	call	45bbc <_dtoa_r>
   44c78:	1021883a 	mov	r16,r2
   44c7c:	008019c4 	movi	r2,103
   44c80:	d8c03c17 	ldw	r3,240(sp)
   44c84:	da003d17 	ldw	r8,244(sp)
   44c88:	88817126 	beq	r17,r2,45250 <___vfprintf_internal_r+0x1dc4>
   44c8c:	008011c4 	movi	r2,71
   44c90:	88829126 	beq	r17,r2,456d8 <___vfprintf_internal_r+0x224c>
   44c94:	80f9883a 	add	fp,r16,r3
   44c98:	d9003617 	ldw	r4,216(sp)
   44c9c:	000d883a 	mov	r6,zero
   44ca0:	000f883a 	mov	r7,zero
   44ca4:	980b883a 	mov	r5,r19
   44ca8:	da003d15 	stw	r8,244(sp)
   44cac:	00500c80 	call	500c8 <__eqdf2>
   44cb0:	da003d17 	ldw	r8,244(sp)
   44cb4:	10018d26 	beq	r2,zero,452ec <___vfprintf_internal_r+0x1e60>
   44cb8:	d8802117 	ldw	r2,132(sp)
   44cbc:	1700062e 	bgeu	r2,fp,44cd8 <___vfprintf_internal_r+0x184c>
   44cc0:	01000c04 	movi	r4,48
   44cc4:	10c00044 	addi	r3,r2,1
   44cc8:	d8c02115 	stw	r3,132(sp)
   44ccc:	11000005 	stb	r4,0(r2)
   44cd0:	d8802117 	ldw	r2,132(sp)
   44cd4:	173ffb36 	bltu	r2,fp,44cc4 <__alt_data_end+0xfffd2cc4>
   44cd8:	1405c83a 	sub	r2,r2,r16
   44cdc:	d8803315 	stw	r2,204(sp)
   44ce0:	008011c4 	movi	r2,71
   44ce4:	b0817626 	beq	r22,r2,452c0 <___vfprintf_internal_r+0x1e34>
   44ce8:	00801944 	movi	r2,101
   44cec:	1442800e 	bge	r2,r17,456f0 <___vfprintf_internal_r+0x2264>
   44cf0:	d8c02617 	ldw	r3,152(sp)
   44cf4:	00801984 	movi	r2,102
   44cf8:	d8c03215 	stw	r3,200(sp)
   44cfc:	8881fe26 	beq	r17,r2,454f8 <___vfprintf_internal_r+0x206c>
   44d00:	d8c03217 	ldw	r3,200(sp)
   44d04:	d9003317 	ldw	r4,204(sp)
   44d08:	1901dd16 	blt	r3,r4,45480 <___vfprintf_internal_r+0x1ff4>
   44d0c:	9480004c 	andi	r18,r18,1
   44d10:	90022b1e 	bne	r18,zero,455c0 <___vfprintf_internal_r+0x2134>
   44d14:	1805883a 	mov	r2,r3
   44d18:	18028316 	blt	r3,zero,45728 <___vfprintf_internal_r+0x229c>
   44d1c:	d8c03217 	ldw	r3,200(sp)
   44d20:	044019c4 	movi	r17,103
   44d24:	d8c02b15 	stw	r3,172(sp)
   44d28:	df002907 	ldb	fp,164(sp)
   44d2c:	e001531e 	bne	fp,zero,4527c <___vfprintf_internal_r+0x1df0>
   44d30:	df002783 	ldbu	fp,158(sp)
   44d34:	d8802915 	stw	r2,164(sp)
   44d38:	dc802c17 	ldw	r18,176(sp)
   44d3c:	d8002a15 	stw	zero,168(sp)
   44d40:	003baf06 	br	43c00 <__alt_data_end+0xfffd1c00>
   44d44:	d8c02e17 	ldw	r3,184(sp)
   44d48:	d9002e17 	ldw	r4,184(sp)
   44d4c:	d9402e17 	ldw	r5,184(sp)
   44d50:	18c00017 	ldw	r3,0(r3)
   44d54:	21000117 	ldw	r4,4(r4)
   44d58:	29400204 	addi	r5,r5,8
   44d5c:	d8c03615 	stw	r3,216(sp)
   44d60:	d9003815 	stw	r4,224(sp)
   44d64:	d9402e15 	stw	r5,184(sp)
   44d68:	003b5006 	br	43aac <__alt_data_end+0xfffd1aac>
   44d6c:	ac400007 	ldb	r17,0(r21)
   44d70:	003a2806 	br	43614 <__alt_data_end+0xfffd1614>
   44d74:	9080100c 	andi	r2,r18,64
   44d78:	1000a826 	beq	r2,zero,4501c <___vfprintf_internal_r+0x1b90>
   44d7c:	d8c02e17 	ldw	r3,184(sp)
   44d80:	002d883a 	mov	r22,zero
   44d84:	1cc0000b 	ldhu	r19,0(r3)
   44d88:	18c00104 	addi	r3,r3,4
   44d8c:	d8c02e15 	stw	r3,184(sp)
   44d90:	003caf06 	br	44050 <__alt_data_end+0xfffd2050>
   44d94:	d9002e17 	ldw	r4,184(sp)
   44d98:	d9402a17 	ldw	r5,168(sp)
   44d9c:	002d883a 	mov	r22,zero
   44da0:	20800104 	addi	r2,r4,4
   44da4:	24c00017 	ldw	r19,0(r4)
   44da8:	283ebb0e 	bge	r5,zero,44898 <__alt_data_end+0xfffd2898>
   44dac:	003ef106 	br	44974 <__alt_data_end+0xfffd2974>
   44db0:	9080040c 	andi	r2,r18,16
   44db4:	1000921e 	bne	r2,zero,45000 <___vfprintf_internal_r+0x1b74>
   44db8:	9480100c 	andi	r18,r18,64
   44dbc:	90013926 	beq	r18,zero,452a4 <___vfprintf_internal_r+0x1e18>
   44dc0:	d9402e17 	ldw	r5,184(sp)
   44dc4:	d8c02f17 	ldw	r3,188(sp)
   44dc8:	28800017 	ldw	r2,0(r5)
   44dcc:	29400104 	addi	r5,r5,4
   44dd0:	d9402e15 	stw	r5,184(sp)
   44dd4:	10c0000d 	sth	r3,0(r2)
   44dd8:	0039e406 	br	4356c <__alt_data_end+0xfffd156c>
   44ddc:	9080100c 	andi	r2,r18,64
   44de0:	10008026 	beq	r2,zero,44fe4 <___vfprintf_internal_r+0x1b58>
   44de4:	d8802e17 	ldw	r2,184(sp)
   44de8:	14c0000f 	ldh	r19,0(r2)
   44dec:	10800104 	addi	r2,r2,4
   44df0:	d8802e15 	stw	r2,184(sp)
   44df4:	982dd7fa 	srai	r22,r19,31
   44df8:	b005883a 	mov	r2,r22
   44dfc:	003af706 	br	439dc <__alt_data_end+0xfffd19dc>
   44e00:	9080100c 	andi	r2,r18,64
   44e04:	d8002785 	stb	zero,158(sp)
   44e08:	10008a1e 	bne	r2,zero,45034 <___vfprintf_internal_r+0x1ba8>
   44e0c:	d9002e17 	ldw	r4,184(sp)
   44e10:	d9402a17 	ldw	r5,168(sp)
   44e14:	002d883a 	mov	r22,zero
   44e18:	20800104 	addi	r2,r4,4
   44e1c:	24c00017 	ldw	r19,0(r4)
   44e20:	283e4b0e 	bge	r5,zero,44750 <__alt_data_end+0xfffd2750>
   44e24:	9d86b03a 	or	r3,r19,r22
   44e28:	d8802e15 	stw	r2,184(sp)
   44e2c:	183e4c1e 	bne	r3,zero,44760 <__alt_data_end+0xfffd2760>
   44e30:	0039883a 	mov	fp,zero
   44e34:	0005883a 	mov	r2,zero
   44e38:	003d4006 	br	4433c <__alt_data_end+0xfffd233c>
   44e3c:	01400174 	movhi	r5,5
   44e40:	2957ec84 	addi	r5,r5,24498
   44e44:	d9402c15 	stw	r5,176(sp)
   44e48:	d9402c17 	ldw	r5,176(sp)
   44e4c:	1c47883a 	add	r3,r3,r17
   44e50:	10800044 	addi	r2,r2,1
   44e54:	41400015 	stw	r5,0(r8)
   44e58:	44400115 	stw	r17,4(r8)
   44e5c:	d8c02015 	stw	r3,128(sp)
   44e60:	d8801f15 	stw	r2,124(sp)
   44e64:	010001c4 	movi	r4,7
   44e68:	20bec816 	blt	r4,r2,4498c <__alt_data_end+0xfffd298c>
   44e6c:	42000204 	addi	r8,r8,8
   44e70:	003ecd06 	br	449a8 <__alt_data_end+0xfffd29a8>
   44e74:	d9002a17 	ldw	r4,168(sp)
   44e78:	d8002785 	stb	zero,158(sp)
   44e7c:	203d2d16 	blt	r4,zero,44334 <__alt_data_end+0xfffd2334>
   44e80:	00bfdfc4 	movi	r2,-129
   44e84:	90a4703a 	and	r18,r18,r2
   44e88:	003a6106 	br	43810 <__alt_data_end+0xfffd1810>
   44e8c:	01000174 	movhi	r4,5
   44e90:	2117ec84 	addi	r4,r4,24498
   44e94:	d9002c15 	stw	r4,176(sp)
   44e98:	003bea06 	br	43e44 <__alt_data_end+0xfffd1e44>
   44e9c:	d9002d17 	ldw	r4,180(sp)
   44ea0:	d9801e04 	addi	r6,sp,120
   44ea4:	b80b883a 	mov	r5,r23
   44ea8:	004c3440 	call	4c344 <__sprint_r>
   44eac:	103a7b1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44eb0:	d8c02017 	ldw	r3,128(sp)
   44eb4:	da000404 	addi	r8,sp,16
   44eb8:	003d4106 	br	443c0 <__alt_data_end+0xfffd23c0>
   44ebc:	d8801f17 	ldw	r2,124(sp)
   44ec0:	01400174 	movhi	r5,5
   44ec4:	01000044 	movi	r4,1
   44ec8:	18c00044 	addi	r3,r3,1
   44ecc:	10800044 	addi	r2,r2,1
   44ed0:	2957e404 	addi	r5,r5,24464
   44ed4:	41000115 	stw	r4,4(r8)
   44ed8:	41400015 	stw	r5,0(r8)
   44edc:	d8c02015 	stw	r3,128(sp)
   44ee0:	d8801f15 	stw	r2,124(sp)
   44ee4:	010001c4 	movi	r4,7
   44ee8:	20805c16 	blt	r4,r2,4505c <___vfprintf_internal_r+0x1bd0>
   44eec:	42000204 	addi	r8,r8,8
   44ef0:	8800041e 	bne	r17,zero,44f04 <___vfprintf_internal_r+0x1a78>
   44ef4:	d8803317 	ldw	r2,204(sp)
   44ef8:	1000021e 	bne	r2,zero,44f04 <___vfprintf_internal_r+0x1a78>
   44efc:	9080004c 	andi	r2,r18,1
   44f00:	103be726 	beq	r2,zero,43ea0 <__alt_data_end+0xfffd1ea0>
   44f04:	d9003717 	ldw	r4,220(sp)
   44f08:	d8801f17 	ldw	r2,124(sp)
   44f0c:	d9403417 	ldw	r5,208(sp)
   44f10:	20c7883a 	add	r3,r4,r3
   44f14:	10800044 	addi	r2,r2,1
   44f18:	41000115 	stw	r4,4(r8)
   44f1c:	41400015 	stw	r5,0(r8)
   44f20:	d8c02015 	stw	r3,128(sp)
   44f24:	d8801f15 	stw	r2,124(sp)
   44f28:	010001c4 	movi	r4,7
   44f2c:	20812116 	blt	r4,r2,453b4 <___vfprintf_internal_r+0x1f28>
   44f30:	42000204 	addi	r8,r8,8
   44f34:	0463c83a 	sub	r17,zero,r17
   44f38:	0440730e 	bge	zero,r17,45108 <___vfprintf_internal_r+0x1c7c>
   44f3c:	05800404 	movi	r22,16
   44f40:	b440860e 	bge	r22,r17,4515c <___vfprintf_internal_r+0x1cd0>
   44f44:	01400174 	movhi	r5,5
   44f48:	2957ec84 	addi	r5,r5,24498
   44f4c:	d9402c15 	stw	r5,176(sp)
   44f50:	070001c4 	movi	fp,7
   44f54:	dcc02d17 	ldw	r19,180(sp)
   44f58:	00000306 	br	44f68 <___vfprintf_internal_r+0x1adc>
   44f5c:	42000204 	addi	r8,r8,8
   44f60:	8c7ffc04 	addi	r17,r17,-16
   44f64:	b440800e 	bge	r22,r17,45168 <___vfprintf_internal_r+0x1cdc>
   44f68:	18c00404 	addi	r3,r3,16
   44f6c:	10800044 	addi	r2,r2,1
   44f70:	45000015 	stw	r20,0(r8)
   44f74:	45800115 	stw	r22,4(r8)
   44f78:	d8c02015 	stw	r3,128(sp)
   44f7c:	d8801f15 	stw	r2,124(sp)
   44f80:	e0bff60e 	bge	fp,r2,44f5c <__alt_data_end+0xfffd2f5c>
   44f84:	d9801e04 	addi	r6,sp,120
   44f88:	b80b883a 	mov	r5,r23
   44f8c:	9809883a 	mov	r4,r19
   44f90:	004c3440 	call	4c344 <__sprint_r>
   44f94:	103a411e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   44f98:	d8c02017 	ldw	r3,128(sp)
   44f9c:	d8801f17 	ldw	r2,124(sp)
   44fa0:	da000404 	addi	r8,sp,16
   44fa4:	003fee06 	br	44f60 <__alt_data_end+0xfffd2f60>
   44fa8:	00bfffc4 	movi	r2,-1
   44fac:	003a3f06 	br	438ac <__alt_data_end+0xfffd18ac>
   44fb0:	008011c4 	movi	r2,71
   44fb4:	1440b816 	blt	r2,r17,45298 <___vfprintf_internal_r+0x1e0c>
   44fb8:	04000174 	movhi	r16,5
   44fbc:	8417d604 	addi	r16,r16,24408
   44fc0:	00c000c4 	movi	r3,3
   44fc4:	00bfdfc4 	movi	r2,-129
   44fc8:	d8c02915 	stw	r3,164(sp)
   44fcc:	90a4703a 	and	r18,r18,r2
   44fd0:	df002783 	ldbu	fp,158(sp)
   44fd4:	d8c02b15 	stw	r3,172(sp)
   44fd8:	d8002a15 	stw	zero,168(sp)
   44fdc:	d8003215 	stw	zero,200(sp)
   44fe0:	003b0706 	br	43c00 <__alt_data_end+0xfffd1c00>
   44fe4:	d8c02e17 	ldw	r3,184(sp)
   44fe8:	1cc00017 	ldw	r19,0(r3)
   44fec:	18c00104 	addi	r3,r3,4
   44ff0:	d8c02e15 	stw	r3,184(sp)
   44ff4:	982dd7fa 	srai	r22,r19,31
   44ff8:	b005883a 	mov	r2,r22
   44ffc:	003a7706 	br	439dc <__alt_data_end+0xfffd19dc>
   45000:	d8c02e17 	ldw	r3,184(sp)
   45004:	d9002f17 	ldw	r4,188(sp)
   45008:	18800017 	ldw	r2,0(r3)
   4500c:	18c00104 	addi	r3,r3,4
   45010:	d8c02e15 	stw	r3,184(sp)
   45014:	11000015 	stw	r4,0(r2)
   45018:	00395406 	br	4356c <__alt_data_end+0xfffd156c>
   4501c:	d9002e17 	ldw	r4,184(sp)
   45020:	002d883a 	mov	r22,zero
   45024:	24c00017 	ldw	r19,0(r4)
   45028:	21000104 	addi	r4,r4,4
   4502c:	d9002e15 	stw	r4,184(sp)
   45030:	003c0706 	br	44050 <__alt_data_end+0xfffd2050>
   45034:	d9402e17 	ldw	r5,184(sp)
   45038:	d8c02a17 	ldw	r3,168(sp)
   4503c:	002d883a 	mov	r22,zero
   45040:	28800104 	addi	r2,r5,4
   45044:	2cc0000b 	ldhu	r19,0(r5)
   45048:	183dc10e 	bge	r3,zero,44750 <__alt_data_end+0xfffd2750>
   4504c:	003f7506 	br	44e24 <__alt_data_end+0xfffd2e24>
   45050:	04000174 	movhi	r16,5
   45054:	8417d404 	addi	r16,r16,24400
   45058:	003aa706 	br	43af8 <__alt_data_end+0xfffd1af8>
   4505c:	d9002d17 	ldw	r4,180(sp)
   45060:	d9801e04 	addi	r6,sp,120
   45064:	b80b883a 	mov	r5,r23
   45068:	004c3440 	call	4c344 <__sprint_r>
   4506c:	103a0b1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   45070:	dc402617 	ldw	r17,152(sp)
   45074:	d8c02017 	ldw	r3,128(sp)
   45078:	da000404 	addi	r8,sp,16
   4507c:	003f9c06 	br	44ef0 <__alt_data_end+0xfffd2ef0>
   45080:	ac400043 	ldbu	r17,1(r21)
   45084:	84000814 	ori	r16,r16,32
   45088:	ad400044 	addi	r21,r21,1
   4508c:	8c403fcc 	andi	r17,r17,255
   45090:	8c40201c 	xori	r17,r17,128
   45094:	8c7fe004 	addi	r17,r17,-128
   45098:	00395e06 	br	43614 <__alt_data_end+0xfffd1614>
   4509c:	d8c02e15 	stw	r3,184(sp)
   450a0:	0039883a 	mov	fp,zero
   450a4:	003e3506 	br	4497c <__alt_data_end+0xfffd297c>
   450a8:	d9002d17 	ldw	r4,180(sp)
   450ac:	d9801e04 	addi	r6,sp,120
   450b0:	b80b883a 	mov	r5,r23
   450b4:	004c3440 	call	4c344 <__sprint_r>
   450b8:	1039f81e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   450bc:	d8c02017 	ldw	r3,128(sp)
   450c0:	da000404 	addi	r8,sp,16
   450c4:	003cd006 	br	44408 <__alt_data_end+0xfffd2408>
   450c8:	8009883a 	mov	r4,r16
   450cc:	df003d15 	stw	fp,244(sp)
   450d0:	00411380 	call	41138 <strlen>
   450d4:	d8802b15 	stw	r2,172(sp)
   450d8:	da003d17 	ldw	r8,244(sp)
   450dc:	103c200e 	bge	r2,zero,44160 <__alt_data_end+0xfffd2160>
   450e0:	0005883a 	mov	r2,zero
   450e4:	003c1e06 	br	44160 <__alt_data_end+0xfffd2160>
   450e8:	d9002d17 	ldw	r4,180(sp)
   450ec:	d9801e04 	addi	r6,sp,120
   450f0:	b80b883a 	mov	r5,r23
   450f4:	004c3440 	call	4c344 <__sprint_r>
   450f8:	1039e81e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   450fc:	d8c02017 	ldw	r3,128(sp)
   45100:	d8801f17 	ldw	r2,124(sp)
   45104:	da000404 	addi	r8,sp,16
   45108:	d9403317 	ldw	r5,204(sp)
   4510c:	10800044 	addi	r2,r2,1
   45110:	44000015 	stw	r16,0(r8)
   45114:	28c7883a 	add	r3,r5,r3
   45118:	003b5b06 	br	43e88 <__alt_data_end+0xfffd1e88>
   4511c:	01000174 	movhi	r4,5
   45120:	2117f084 	addi	r4,r4,24514
   45124:	d9003515 	stw	r4,212(sp)
   45128:	003af206 	br	43cf4 <__alt_data_end+0xfffd1cf4>
   4512c:	013fffc4 	movi	r4,-1
   45130:	003a0806 	br	43954 <__alt_data_end+0xfffd1954>
   45134:	0023883a 	mov	r17,zero
   45138:	003d9d06 	br	447b0 <__alt_data_end+0xfffd27b0>
   4513c:	d9002d17 	ldw	r4,180(sp)
   45140:	d9801e04 	addi	r6,sp,120
   45144:	b80b883a 	mov	r5,r23
   45148:	004c3440 	call	4c344 <__sprint_r>
   4514c:	1039d31e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   45150:	d8c02017 	ldw	r3,128(sp)
   45154:	da000404 	addi	r8,sp,16
   45158:	003d9406 	br	447ac <__alt_data_end+0xfffd27ac>
   4515c:	01000174 	movhi	r4,5
   45160:	2117ec84 	addi	r4,r4,24498
   45164:	d9002c15 	stw	r4,176(sp)
   45168:	d9002c17 	ldw	r4,176(sp)
   4516c:	1c47883a 	add	r3,r3,r17
   45170:	10800044 	addi	r2,r2,1
   45174:	41000015 	stw	r4,0(r8)
   45178:	44400115 	stw	r17,4(r8)
   4517c:	d8c02015 	stw	r3,128(sp)
   45180:	d8801f15 	stw	r2,124(sp)
   45184:	010001c4 	movi	r4,7
   45188:	20bfd716 	blt	r4,r2,450e8 <__alt_data_end+0xfffd30e8>
   4518c:	42000204 	addi	r8,r8,8
   45190:	003fdd06 	br	45108 <__alt_data_end+0xfffd3108>
   45194:	d9002d17 	ldw	r4,180(sp)
   45198:	d9801e04 	addi	r6,sp,120
   4519c:	b80b883a 	mov	r5,r23
   451a0:	004c3440 	call	4c344 <__sprint_r>
   451a4:	1039bd1e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   451a8:	d8802617 	ldw	r2,152(sp)
   451ac:	d8c02017 	ldw	r3,128(sp)
   451b0:	da000404 	addi	r8,sp,16
   451b4:	003e1006 	br	449f8 <__alt_data_end+0xfffd29f8>
   451b8:	00800044 	movi	r2,1
   451bc:	10803fcc 	andi	r2,r2,255
   451c0:	00c00044 	movi	r3,1
   451c4:	10fa0d26 	beq	r2,r3,439fc <__alt_data_end+0xfffd19fc>
   451c8:	00c00084 	movi	r3,2
   451cc:	10fbaf26 	beq	r2,r3,4408c <__alt_data_end+0xfffd208c>
   451d0:	003a6d06 	br	43b88 <__alt_data_end+0xfffd1b88>
   451d4:	01000174 	movhi	r4,5
   451d8:	2117f084 	addi	r4,r4,24514
   451dc:	d9003515 	stw	r4,212(sp)
   451e0:	003b5406 	br	43f34 <__alt_data_end+0xfffd1f34>
   451e4:	d8802a17 	ldw	r2,168(sp)
   451e8:	00c00184 	movi	r3,6
   451ec:	1880012e 	bgeu	r3,r2,451f4 <___vfprintf_internal_r+0x1d68>
   451f0:	1805883a 	mov	r2,r3
   451f4:	d8802b15 	stw	r2,172(sp)
   451f8:	1000ef16 	blt	r2,zero,455b8 <___vfprintf_internal_r+0x212c>
   451fc:	04000174 	movhi	r16,5
   45200:	d8802915 	stw	r2,164(sp)
   45204:	dcc02e15 	stw	r19,184(sp)
   45208:	d8002a15 	stw	zero,168(sp)
   4520c:	d8003215 	stw	zero,200(sp)
   45210:	8417e204 	addi	r16,r16,24456
   45214:	0039883a 	mov	fp,zero
   45218:	003a8006 	br	43c1c <__alt_data_end+0xfffd1c1c>
   4521c:	0021883a 	mov	r16,zero
   45220:	003e0706 	br	44a40 <__alt_data_end+0xfffd2a40>
   45224:	d9002d17 	ldw	r4,180(sp)
   45228:	d9801e04 	addi	r6,sp,120
   4522c:	b80b883a 	mov	r5,r23
   45230:	004c3440 	call	4c344 <__sprint_r>
   45234:	1039991e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   45238:	d8802617 	ldw	r2,152(sp)
   4523c:	d9403317 	ldw	r5,204(sp)
   45240:	d8c02017 	ldw	r3,128(sp)
   45244:	da000404 	addi	r8,sp,16
   45248:	2885c83a 	sub	r2,r5,r2
   4524c:	003dfb06 	br	44a3c <__alt_data_end+0xfffd2a3c>
   45250:	9080004c 	andi	r2,r18,1
   45254:	103e8f1e 	bne	r2,zero,44c94 <__alt_data_end+0xfffd2c94>
   45258:	d8802117 	ldw	r2,132(sp)
   4525c:	003e9e06 	br	44cd8 <__alt_data_end+0xfffd2cd8>
   45260:	1025883a 	mov	r18,r2
   45264:	0039883a 	mov	fp,zero
   45268:	00800084 	movi	r2,2
   4526c:	003fd306 	br	451bc <__alt_data_end+0xfffd31bc>
   45270:	07000b44 	movi	fp,45
   45274:	df002785 	stb	fp,158(sp)
   45278:	003a1b06 	br	43ae8 <__alt_data_end+0xfffd1ae8>
   4527c:	00c00b44 	movi	r3,45
   45280:	d8c02785 	stb	r3,158(sp)
   45284:	d8802915 	stw	r2,164(sp)
   45288:	dc802c17 	ldw	r18,176(sp)
   4528c:	d8002a15 	stw	zero,168(sp)
   45290:	07000b44 	movi	fp,45
   45294:	003a5e06 	br	43c10 <__alt_data_end+0xfffd1c10>
   45298:	04000174 	movhi	r16,5
   4529c:	8417d704 	addi	r16,r16,24412
   452a0:	003f4706 	br	44fc0 <__alt_data_end+0xfffd2fc0>
   452a4:	d9002e17 	ldw	r4,184(sp)
   452a8:	d9402f17 	ldw	r5,188(sp)
   452ac:	20800017 	ldw	r2,0(r4)
   452b0:	21000104 	addi	r4,r4,4
   452b4:	d9002e15 	stw	r4,184(sp)
   452b8:	11400015 	stw	r5,0(r2)
   452bc:	0038ab06 	br	4356c <__alt_data_end+0xfffd156c>
   452c0:	dd802617 	ldw	r22,152(sp)
   452c4:	00bfff44 	movi	r2,-3
   452c8:	b0801c16 	blt	r22,r2,4533c <___vfprintf_internal_r+0x1eb0>
   452cc:	d9402a17 	ldw	r5,168(sp)
   452d0:	2d801a16 	blt	r5,r22,4533c <___vfprintf_internal_r+0x1eb0>
   452d4:	dd803215 	stw	r22,200(sp)
   452d8:	003e8906 	br	44d00 <__alt_data_end+0xfffd2d00>
   452dc:	01000174 	movhi	r4,5
   452e0:	2117ec84 	addi	r4,r4,24498
   452e4:	d9002c15 	stw	r4,176(sp)
   452e8:	003c9106 	br	44530 <__alt_data_end+0xfffd2530>
   452ec:	e005883a 	mov	r2,fp
   452f0:	003e7906 	br	44cd8 <__alt_data_end+0xfffd2cd8>
   452f4:	d9002a17 	ldw	r4,168(sp)
   452f8:	df002783 	ldbu	fp,158(sp)
   452fc:	dcc02e15 	stw	r19,184(sp)
   45300:	d9002915 	stw	r4,164(sp)
   45304:	d9002b15 	stw	r4,172(sp)
   45308:	d8002a15 	stw	zero,168(sp)
   4530c:	d8003215 	stw	zero,200(sp)
   45310:	003a3b06 	br	43c00 <__alt_data_end+0xfffd1c00>
   45314:	9080004c 	andi	r2,r18,1
   45318:	0039883a 	mov	fp,zero
   4531c:	10000426 	beq	r2,zero,45330 <___vfprintf_internal_r+0x1ea4>
   45320:	00800c04 	movi	r2,48
   45324:	dc001dc4 	addi	r16,sp,119
   45328:	d8801dc5 	stb	r2,119(sp)
   4532c:	003b6406 	br	440c0 <__alt_data_end+0xfffd20c0>
   45330:	d8002b15 	stw	zero,172(sp)
   45334:	dc001e04 	addi	r16,sp,120
   45338:	003a2b06 	br	43be8 <__alt_data_end+0xfffd1be8>
   4533c:	8c7fff84 	addi	r17,r17,-2
   45340:	b5bfffc4 	addi	r22,r22,-1
   45344:	dd802615 	stw	r22,152(sp)
   45348:	dc4022c5 	stb	r17,139(sp)
   4534c:	b000bf16 	blt	r22,zero,4564c <___vfprintf_internal_r+0x21c0>
   45350:	00800ac4 	movi	r2,43
   45354:	d8802305 	stb	r2,140(sp)
   45358:	00800244 	movi	r2,9
   4535c:	15807016 	blt	r2,r22,45520 <___vfprintf_internal_r+0x2094>
   45360:	00800c04 	movi	r2,48
   45364:	b5800c04 	addi	r22,r22,48
   45368:	d8802345 	stb	r2,141(sp)
   4536c:	dd802385 	stb	r22,142(sp)
   45370:	d88023c4 	addi	r2,sp,143
   45374:	df0022c4 	addi	fp,sp,139
   45378:	d8c03317 	ldw	r3,204(sp)
   4537c:	1739c83a 	sub	fp,r2,fp
   45380:	d9003317 	ldw	r4,204(sp)
   45384:	e0c7883a 	add	r3,fp,r3
   45388:	df003a15 	stw	fp,232(sp)
   4538c:	d8c02b15 	stw	r3,172(sp)
   45390:	00800044 	movi	r2,1
   45394:	1100b30e 	bge	r2,r4,45664 <___vfprintf_internal_r+0x21d8>
   45398:	d8c02b17 	ldw	r3,172(sp)
   4539c:	18c00044 	addi	r3,r3,1
   453a0:	d8c02b15 	stw	r3,172(sp)
   453a4:	1805883a 	mov	r2,r3
   453a8:	1800ac16 	blt	r3,zero,4565c <___vfprintf_internal_r+0x21d0>
   453ac:	d8003215 	stw	zero,200(sp)
   453b0:	003e5d06 	br	44d28 <__alt_data_end+0xfffd2d28>
   453b4:	d9002d17 	ldw	r4,180(sp)
   453b8:	d9801e04 	addi	r6,sp,120
   453bc:	b80b883a 	mov	r5,r23
   453c0:	004c3440 	call	4c344 <__sprint_r>
   453c4:	1039351e 	bne	r2,zero,4389c <__alt_data_end+0xfffd189c>
   453c8:	dc402617 	ldw	r17,152(sp)
   453cc:	d8c02017 	ldw	r3,128(sp)
   453d0:	d8801f17 	ldw	r2,124(sp)
   453d4:	da000404 	addi	r8,sp,16
   453d8:	003ed606 	br	44f34 <__alt_data_end+0xfffd2f34>
   453dc:	182b883a 	mov	r21,r3
   453e0:	d8002a15 	stw	zero,168(sp)
   453e4:	00388c06 	br	43618 <__alt_data_end+0xfffd1618>
   453e8:	d8802a17 	ldw	r2,168(sp)
   453ec:	103e071e 	bne	r2,zero,44c0c <__alt_data_end+0xfffd2c0c>
   453f0:	dc002a15 	stw	r16,168(sp)
   453f4:	003e0506 	br	44c0c <__alt_data_end+0xfffd2c0c>
   453f8:	d9002a17 	ldw	r4,168(sp)
   453fc:	20c00044 	addi	r3,r4,1
   45400:	003e0f06 	br	44c40 <__alt_data_end+0xfffd2c40>
   45404:	01400184 	movi	r5,6
   45408:	d9402a15 	stw	r5,168(sp)
   4540c:	003dff06 	br	44c0c <__alt_data_end+0xfffd2c0c>
   45410:	d8802104 	addi	r2,sp,132
   45414:	d8800315 	stw	r2,12(sp)
   45418:	d8802504 	addi	r2,sp,148
   4541c:	d8800215 	stw	r2,8(sp)
   45420:	d8802604 	addi	r2,sp,152
   45424:	d8800115 	stw	r2,4(sp)
   45428:	d8802a17 	ldw	r2,168(sp)
   4542c:	d9403617 	ldw	r5,216(sp)
   45430:	d9002d17 	ldw	r4,180(sp)
   45434:	d8800015 	stw	r2,0(sp)
   45438:	01c000c4 	movi	r7,3
   4543c:	980d883a 	mov	r6,r19
   45440:	da003d15 	stw	r8,244(sp)
   45444:	0045bbc0 	call	45bbc <_dtoa_r>
   45448:	d8c02a17 	ldw	r3,168(sp)
   4544c:	da003d17 	ldw	r8,244(sp)
   45450:	1021883a 	mov	r16,r2
   45454:	10f9883a 	add	fp,r2,r3
   45458:	81000007 	ldb	r4,0(r16)
   4545c:	00800c04 	movi	r2,48
   45460:	20805e26 	beq	r4,r2,455dc <___vfprintf_internal_r+0x2150>
   45464:	d8c02617 	ldw	r3,152(sp)
   45468:	e0f9883a 	add	fp,fp,r3
   4546c:	003e0a06 	br	44c98 <__alt_data_end+0xfffd2c98>
   45470:	00c00b44 	movi	r3,45
   45474:	24e0003c 	xorhi	r19,r4,32768
   45478:	d8c02905 	stb	r3,164(sp)
   4547c:	003de906 	br	44c24 <__alt_data_end+0xfffd2c24>
   45480:	d8c03217 	ldw	r3,200(sp)
   45484:	00c07a0e 	bge	zero,r3,45670 <___vfprintf_internal_r+0x21e4>
   45488:	00800044 	movi	r2,1
   4548c:	d9003317 	ldw	r4,204(sp)
   45490:	1105883a 	add	r2,r2,r4
   45494:	d8802b15 	stw	r2,172(sp)
   45498:	10004e16 	blt	r2,zero,455d4 <___vfprintf_internal_r+0x2148>
   4549c:	044019c4 	movi	r17,103
   454a0:	003e2106 	br	44d28 <__alt_data_end+0xfffd2d28>
   454a4:	d9002a17 	ldw	r4,168(sp)
   454a8:	d8802104 	addi	r2,sp,132
   454ac:	d8800315 	stw	r2,12(sp)
   454b0:	d9000015 	stw	r4,0(sp)
   454b4:	d8802504 	addi	r2,sp,148
   454b8:	d9403617 	ldw	r5,216(sp)
   454bc:	d9002d17 	ldw	r4,180(sp)
   454c0:	d8800215 	stw	r2,8(sp)
   454c4:	d8802604 	addi	r2,sp,152
   454c8:	d8800115 	stw	r2,4(sp)
   454cc:	01c000c4 	movi	r7,3
   454d0:	980d883a 	mov	r6,r19
   454d4:	da003d15 	stw	r8,244(sp)
   454d8:	0045bbc0 	call	45bbc <_dtoa_r>
   454dc:	d8c02a17 	ldw	r3,168(sp)
   454e0:	da003d17 	ldw	r8,244(sp)
   454e4:	1021883a 	mov	r16,r2
   454e8:	00801184 	movi	r2,70
   454ec:	80f9883a 	add	fp,r16,r3
   454f0:	88bfd926 	beq	r17,r2,45458 <__alt_data_end+0xfffd3458>
   454f4:	003de806 	br	44c98 <__alt_data_end+0xfffd2c98>
   454f8:	d9002a17 	ldw	r4,168(sp)
   454fc:	00c04d0e 	bge	zero,r3,45634 <___vfprintf_internal_r+0x21a8>
   45500:	2000441e 	bne	r4,zero,45614 <___vfprintf_internal_r+0x2188>
   45504:	9480004c 	andi	r18,r18,1
   45508:	9000421e 	bne	r18,zero,45614 <___vfprintf_internal_r+0x2188>
   4550c:	1805883a 	mov	r2,r3
   45510:	18006f16 	blt	r3,zero,456d0 <___vfprintf_internal_r+0x2244>
   45514:	d8c03217 	ldw	r3,200(sp)
   45518:	d8c02b15 	stw	r3,172(sp)
   4551c:	003e0206 	br	44d28 <__alt_data_end+0xfffd2d28>
   45520:	df0022c4 	addi	fp,sp,139
   45524:	dc002a15 	stw	r16,168(sp)
   45528:	4027883a 	mov	r19,r8
   4552c:	e021883a 	mov	r16,fp
   45530:	b009883a 	mov	r4,r22
   45534:	01400284 	movi	r5,10
   45538:	00406840 	call	40684 <__modsi3>
   4553c:	10800c04 	addi	r2,r2,48
   45540:	843fffc4 	addi	r16,r16,-1
   45544:	b009883a 	mov	r4,r22
   45548:	01400284 	movi	r5,10
   4554c:	80800005 	stb	r2,0(r16)
   45550:	00406000 	call	40600 <__divsi3>
   45554:	102d883a 	mov	r22,r2
   45558:	00800244 	movi	r2,9
   4555c:	15bff416 	blt	r2,r22,45530 <__alt_data_end+0xfffd3530>
   45560:	9811883a 	mov	r8,r19
   45564:	b0800c04 	addi	r2,r22,48
   45568:	8027883a 	mov	r19,r16
   4556c:	997fffc4 	addi	r5,r19,-1
   45570:	98bfffc5 	stb	r2,-1(r19)
   45574:	dc002a17 	ldw	r16,168(sp)
   45578:	2f006d2e 	bgeu	r5,fp,45730 <___vfprintf_internal_r+0x22a4>
   4557c:	d9c02384 	addi	r7,sp,142
   45580:	3ccfc83a 	sub	r7,r7,r19
   45584:	d9002344 	addi	r4,sp,141
   45588:	e1cf883a 	add	r7,fp,r7
   4558c:	00000106 	br	45594 <___vfprintf_internal_r+0x2108>
   45590:	28800003 	ldbu	r2,0(r5)
   45594:	20800005 	stb	r2,0(r4)
   45598:	21000044 	addi	r4,r4,1
   4559c:	29400044 	addi	r5,r5,1
   455a0:	393ffb1e 	bne	r7,r4,45590 <__alt_data_end+0xfffd3590>
   455a4:	d8802304 	addi	r2,sp,140
   455a8:	14c5c83a 	sub	r2,r2,r19
   455ac:	d8c02344 	addi	r3,sp,141
   455b0:	1885883a 	add	r2,r3,r2
   455b4:	003f7006 	br	45378 <__alt_data_end+0xfffd3378>
   455b8:	0005883a 	mov	r2,zero
   455bc:	003f0f06 	br	451fc <__alt_data_end+0xfffd31fc>
   455c0:	d8c03217 	ldw	r3,200(sp)
   455c4:	18c00044 	addi	r3,r3,1
   455c8:	d8c02b15 	stw	r3,172(sp)
   455cc:	1805883a 	mov	r2,r3
   455d0:	183fb20e 	bge	r3,zero,4549c <__alt_data_end+0xfffd349c>
   455d4:	0005883a 	mov	r2,zero
   455d8:	003fb006 	br	4549c <__alt_data_end+0xfffd349c>
   455dc:	d9003617 	ldw	r4,216(sp)
   455e0:	000d883a 	mov	r6,zero
   455e4:	000f883a 	mov	r7,zero
   455e8:	980b883a 	mov	r5,r19
   455ec:	d8c03c15 	stw	r3,240(sp)
   455f0:	da003d15 	stw	r8,244(sp)
   455f4:	00500c80 	call	500c8 <__eqdf2>
   455f8:	d8c03c17 	ldw	r3,240(sp)
   455fc:	da003d17 	ldw	r8,244(sp)
   45600:	103f9826 	beq	r2,zero,45464 <__alt_data_end+0xfffd3464>
   45604:	00800044 	movi	r2,1
   45608:	10c7c83a 	sub	r3,r2,r3
   4560c:	d8c02615 	stw	r3,152(sp)
   45610:	003f9506 	br	45468 <__alt_data_end+0xfffd3468>
   45614:	d9002a17 	ldw	r4,168(sp)
   45618:	d8c03217 	ldw	r3,200(sp)
   4561c:	20800044 	addi	r2,r4,1
   45620:	1885883a 	add	r2,r3,r2
   45624:	d8802b15 	stw	r2,172(sp)
   45628:	103dbf0e 	bge	r2,zero,44d28 <__alt_data_end+0xfffd2d28>
   4562c:	0005883a 	mov	r2,zero
   45630:	003dbd06 	br	44d28 <__alt_data_end+0xfffd2d28>
   45634:	2000201e 	bne	r4,zero,456b8 <___vfprintf_internal_r+0x222c>
   45638:	9480004c 	andi	r18,r18,1
   4563c:	90001e1e 	bne	r18,zero,456b8 <___vfprintf_internal_r+0x222c>
   45640:	00800044 	movi	r2,1
   45644:	d8802b15 	stw	r2,172(sp)
   45648:	003db706 	br	44d28 <__alt_data_end+0xfffd2d28>
   4564c:	00800b44 	movi	r2,45
   45650:	05adc83a 	sub	r22,zero,r22
   45654:	d8802305 	stb	r2,140(sp)
   45658:	003f3f06 	br	45358 <__alt_data_end+0xfffd3358>
   4565c:	0005883a 	mov	r2,zero
   45660:	003f5206 	br	453ac <__alt_data_end+0xfffd33ac>
   45664:	90a4703a 	and	r18,r18,r2
   45668:	903f4e26 	beq	r18,zero,453a4 <__alt_data_end+0xfffd33a4>
   4566c:	003f4a06 	br	45398 <__alt_data_end+0xfffd3398>
   45670:	00800084 	movi	r2,2
   45674:	10c5c83a 	sub	r2,r2,r3
   45678:	003f8406 	br	4548c <__alt_data_end+0xfffd348c>
   4567c:	d9402e17 	ldw	r5,184(sp)
   45680:	d9002e17 	ldw	r4,184(sp)
   45684:	ac400043 	ldbu	r17,1(r21)
   45688:	29400017 	ldw	r5,0(r5)
   4568c:	20800104 	addi	r2,r4,4
   45690:	d8802e15 	stw	r2,184(sp)
   45694:	d9402a15 	stw	r5,168(sp)
   45698:	182b883a 	mov	r21,r3
   4569c:	283e7b0e 	bge	r5,zero,4508c <__alt_data_end+0xfffd308c>
   456a0:	8c403fcc 	andi	r17,r17,255
   456a4:	017fffc4 	movi	r5,-1
   456a8:	8c40201c 	xori	r17,r17,128
   456ac:	d9402a15 	stw	r5,168(sp)
   456b0:	8c7fe004 	addi	r17,r17,-128
   456b4:	0037d706 	br	43614 <__alt_data_end+0xfffd1614>
   456b8:	d8c02a17 	ldw	r3,168(sp)
   456bc:	18c00084 	addi	r3,r3,2
   456c0:	d8c02b15 	stw	r3,172(sp)
   456c4:	1805883a 	mov	r2,r3
   456c8:	183d970e 	bge	r3,zero,44d28 <__alt_data_end+0xfffd2d28>
   456cc:	003fd706 	br	4562c <__alt_data_end+0xfffd362c>
   456d0:	0005883a 	mov	r2,zero
   456d4:	003f8f06 	br	45514 <__alt_data_end+0xfffd3514>
   456d8:	9080004c 	andi	r2,r18,1
   456dc:	103f821e 	bne	r2,zero,454e8 <__alt_data_end+0xfffd34e8>
   456e0:	d8802117 	ldw	r2,132(sp)
   456e4:	1405c83a 	sub	r2,r2,r16
   456e8:	d8803315 	stw	r2,204(sp)
   456ec:	b47ef426 	beq	r22,r17,452c0 <__alt_data_end+0xfffd32c0>
   456f0:	dd802617 	ldw	r22,152(sp)
   456f4:	003f1206 	br	45340 <__alt_data_end+0xfffd3340>
   456f8:	d8c02b03 	ldbu	r3,172(sp)
   456fc:	d8c02785 	stb	r3,158(sp)
   45700:	0038df06 	br	43a80 <__alt_data_end+0xfffd1a80>
   45704:	d8c02b03 	ldbu	r3,172(sp)
   45708:	d8c02785 	stb	r3,158(sp)
   4570c:	0038aa06 	br	439b8 <__alt_data_end+0xfffd19b8>
   45710:	d8c02b03 	ldbu	r3,172(sp)
   45714:	d8c02785 	stb	r3,158(sp)
   45718:	003a4306 	br	44028 <__alt_data_end+0xfffd2028>
   4571c:	d8c02b03 	ldbu	r3,172(sp)
   45720:	d8c02785 	stb	r3,158(sp)
   45724:	003af506 	br	442fc <__alt_data_end+0xfffd22fc>
   45728:	0005883a 	mov	r2,zero
   4572c:	003d7b06 	br	44d1c <__alt_data_end+0xfffd2d1c>
   45730:	d8802344 	addi	r2,sp,141
   45734:	003f1006 	br	45378 <__alt_data_end+0xfffd3378>
   45738:	d8c02b03 	ldbu	r3,172(sp)
   4573c:	d8c02785 	stb	r3,158(sp)
   45740:	0038fd06 	br	43b38 <__alt_data_end+0xfffd1b38>
   45744:	d8c02b03 	ldbu	r3,172(sp)
   45748:	d8c02785 	stb	r3,158(sp)
   4574c:	003a9706 	br	441ac <__alt_data_end+0xfffd21ac>
   45750:	d8c02b03 	ldbu	r3,172(sp)
   45754:	d8c02785 	stb	r3,158(sp)
   45758:	003a1806 	br	43fbc <__alt_data_end+0xfffd1fbc>
   4575c:	d8c02b03 	ldbu	r3,172(sp)
   45760:	d8c02785 	stb	r3,158(sp)
   45764:	003abe06 	br	44260 <__alt_data_end+0xfffd2260>

00045768 <__vfprintf_internal>:
   45768:	00800174 	movhi	r2,5
   4576c:	109f2d04 	addi	r2,r2,31924
   45770:	300f883a 	mov	r7,r6
   45774:	280d883a 	mov	r6,r5
   45778:	200b883a 	mov	r5,r4
   4577c:	11000017 	ldw	r4,0(r2)
   45780:	004348c1 	jmpi	4348c <___vfprintf_internal_r>

00045784 <__sbprintf>:
   45784:	2880030b 	ldhu	r2,12(r5)
   45788:	2ac01917 	ldw	r11,100(r5)
   4578c:	2a80038b 	ldhu	r10,14(r5)
   45790:	2a400717 	ldw	r9,28(r5)
   45794:	2a000917 	ldw	r8,36(r5)
   45798:	defee204 	addi	sp,sp,-1144
   4579c:	00c10004 	movi	r3,1024
   457a0:	dc011a15 	stw	r16,1128(sp)
   457a4:	10bfff4c 	andi	r2,r2,65533
   457a8:	2821883a 	mov	r16,r5
   457ac:	d8cb883a 	add	r5,sp,r3
   457b0:	dc811c15 	stw	r18,1136(sp)
   457b4:	dc411b15 	stw	r17,1132(sp)
   457b8:	dfc11d15 	stw	ra,1140(sp)
   457bc:	2025883a 	mov	r18,r4
   457c0:	d881030d 	sth	r2,1036(sp)
   457c4:	dac11915 	stw	r11,1124(sp)
   457c8:	da81038d 	sth	r10,1038(sp)
   457cc:	da410715 	stw	r9,1052(sp)
   457d0:	da010915 	stw	r8,1060(sp)
   457d4:	dec10015 	stw	sp,1024(sp)
   457d8:	dec10415 	stw	sp,1040(sp)
   457dc:	d8c10215 	stw	r3,1032(sp)
   457e0:	d8c10515 	stw	r3,1044(sp)
   457e4:	d8010615 	stw	zero,1048(sp)
   457e8:	004348c0 	call	4348c <___vfprintf_internal_r>
   457ec:	1023883a 	mov	r17,r2
   457f0:	10000416 	blt	r2,zero,45804 <__sbprintf+0x80>
   457f4:	d9410004 	addi	r5,sp,1024
   457f8:	9009883a 	mov	r4,r18
   457fc:	00474600 	call	47460 <_fflush_r>
   45800:	10000d1e 	bne	r2,zero,45838 <__sbprintf+0xb4>
   45804:	d881030b 	ldhu	r2,1036(sp)
   45808:	1080100c 	andi	r2,r2,64
   4580c:	10000326 	beq	r2,zero,4581c <__sbprintf+0x98>
   45810:	8080030b 	ldhu	r2,12(r16)
   45814:	10801014 	ori	r2,r2,64
   45818:	8080030d 	sth	r2,12(r16)
   4581c:	8805883a 	mov	r2,r17
   45820:	dfc11d17 	ldw	ra,1140(sp)
   45824:	dc811c17 	ldw	r18,1136(sp)
   45828:	dc411b17 	ldw	r17,1132(sp)
   4582c:	dc011a17 	ldw	r16,1128(sp)
   45830:	dec11e04 	addi	sp,sp,1144
   45834:	f800283a 	ret
   45838:	047fffc4 	movi	r17,-1
   4583c:	003ff106 	br	45804 <__alt_data_end+0xfffd3804>

00045840 <__swsetup_r>:
   45840:	00800174 	movhi	r2,5
   45844:	defffd04 	addi	sp,sp,-12
   45848:	109f2d04 	addi	r2,r2,31924
   4584c:	dc400115 	stw	r17,4(sp)
   45850:	2023883a 	mov	r17,r4
   45854:	11000017 	ldw	r4,0(r2)
   45858:	dc000015 	stw	r16,0(sp)
   4585c:	dfc00215 	stw	ra,8(sp)
   45860:	2821883a 	mov	r16,r5
   45864:	20000226 	beq	r4,zero,45870 <__swsetup_r+0x30>
   45868:	20800e17 	ldw	r2,56(r4)
   4586c:	10003126 	beq	r2,zero,45934 <__swsetup_r+0xf4>
   45870:	8080030b 	ldhu	r2,12(r16)
   45874:	10c0020c 	andi	r3,r2,8
   45878:	1009883a 	mov	r4,r2
   4587c:	18000f26 	beq	r3,zero,458bc <__swsetup_r+0x7c>
   45880:	80c00417 	ldw	r3,16(r16)
   45884:	18001526 	beq	r3,zero,458dc <__swsetup_r+0x9c>
   45888:	1100004c 	andi	r4,r2,1
   4588c:	20001c1e 	bne	r4,zero,45900 <__swsetup_r+0xc0>
   45890:	1080008c 	andi	r2,r2,2
   45894:	1000291e 	bne	r2,zero,4593c <__swsetup_r+0xfc>
   45898:	80800517 	ldw	r2,20(r16)
   4589c:	80800215 	stw	r2,8(r16)
   458a0:	18001c26 	beq	r3,zero,45914 <__swsetup_r+0xd4>
   458a4:	0005883a 	mov	r2,zero
   458a8:	dfc00217 	ldw	ra,8(sp)
   458ac:	dc400117 	ldw	r17,4(sp)
   458b0:	dc000017 	ldw	r16,0(sp)
   458b4:	dec00304 	addi	sp,sp,12
   458b8:	f800283a 	ret
   458bc:	2080040c 	andi	r2,r4,16
   458c0:	10002e26 	beq	r2,zero,4597c <__swsetup_r+0x13c>
   458c4:	2080010c 	andi	r2,r4,4
   458c8:	10001e1e 	bne	r2,zero,45944 <__swsetup_r+0x104>
   458cc:	80c00417 	ldw	r3,16(r16)
   458d0:	20800214 	ori	r2,r4,8
   458d4:	8080030d 	sth	r2,12(r16)
   458d8:	183feb1e 	bne	r3,zero,45888 <__alt_data_end+0xfffd3888>
   458dc:	1100a00c 	andi	r4,r2,640
   458e0:	01408004 	movi	r5,512
   458e4:	217fe826 	beq	r4,r5,45888 <__alt_data_end+0xfffd3888>
   458e8:	800b883a 	mov	r5,r16
   458ec:	8809883a 	mov	r4,r17
   458f0:	00483fc0 	call	483fc <__smakebuf_r>
   458f4:	8080030b 	ldhu	r2,12(r16)
   458f8:	80c00417 	ldw	r3,16(r16)
   458fc:	003fe206 	br	45888 <__alt_data_end+0xfffd3888>
   45900:	80800517 	ldw	r2,20(r16)
   45904:	80000215 	stw	zero,8(r16)
   45908:	0085c83a 	sub	r2,zero,r2
   4590c:	80800615 	stw	r2,24(r16)
   45910:	183fe41e 	bne	r3,zero,458a4 <__alt_data_end+0xfffd38a4>
   45914:	80c0030b 	ldhu	r3,12(r16)
   45918:	0005883a 	mov	r2,zero
   4591c:	1900200c 	andi	r4,r3,128
   45920:	203fe126 	beq	r4,zero,458a8 <__alt_data_end+0xfffd38a8>
   45924:	18c01014 	ori	r3,r3,64
   45928:	80c0030d 	sth	r3,12(r16)
   4592c:	00bfffc4 	movi	r2,-1
   45930:	003fdd06 	br	458a8 <__alt_data_end+0xfffd38a8>
   45934:	004784c0 	call	4784c <__sinit>
   45938:	003fcd06 	br	45870 <__alt_data_end+0xfffd3870>
   4593c:	0005883a 	mov	r2,zero
   45940:	003fd606 	br	4589c <__alt_data_end+0xfffd389c>
   45944:	81400c17 	ldw	r5,48(r16)
   45948:	28000626 	beq	r5,zero,45964 <__swsetup_r+0x124>
   4594c:	80801004 	addi	r2,r16,64
   45950:	28800326 	beq	r5,r2,45960 <__swsetup_r+0x120>
   45954:	8809883a 	mov	r4,r17
   45958:	00479c00 	call	479c0 <_free_r>
   4595c:	8100030b 	ldhu	r4,12(r16)
   45960:	80000c15 	stw	zero,48(r16)
   45964:	80c00417 	ldw	r3,16(r16)
   45968:	00bff6c4 	movi	r2,-37
   4596c:	1108703a 	and	r4,r2,r4
   45970:	80000115 	stw	zero,4(r16)
   45974:	80c00015 	stw	r3,0(r16)
   45978:	003fd506 	br	458d0 <__alt_data_end+0xfffd38d0>
   4597c:	00800244 	movi	r2,9
   45980:	88800015 	stw	r2,0(r17)
   45984:	20801014 	ori	r2,r4,64
   45988:	8080030d 	sth	r2,12(r16)
   4598c:	00bfffc4 	movi	r2,-1
   45990:	003fc506 	br	458a8 <__alt_data_end+0xfffd38a8>

00045994 <quorem>:
   45994:	defff204 	addi	sp,sp,-56
   45998:	ddc00b15 	stw	r23,44(sp)
   4599c:	20800417 	ldw	r2,16(r4)
   459a0:	2dc00417 	ldw	r23,16(r5)
   459a4:	dfc00d15 	stw	ra,52(sp)
   459a8:	df000c15 	stw	fp,48(sp)
   459ac:	dd800a15 	stw	r22,40(sp)
   459b0:	dd400915 	stw	r21,36(sp)
   459b4:	dd000815 	stw	r20,32(sp)
   459b8:	dcc00715 	stw	r19,28(sp)
   459bc:	dc800615 	stw	r18,24(sp)
   459c0:	dc400515 	stw	r17,20(sp)
   459c4:	dc000415 	stw	r16,16(sp)
   459c8:	15c07a16 	blt	r2,r23,45bb4 <quorem+0x220>
   459cc:	bdffffc4 	addi	r23,r23,-1
   459d0:	bde9883a 	add	r20,r23,r23
   459d4:	28c00504 	addi	r3,r5,20
   459d8:	a529883a 	add	r20,r20,r20
   459dc:	1d39883a 	add	fp,r3,r20
   459e0:	24c00504 	addi	r19,r4,20
   459e4:	d9400215 	stw	r5,8(sp)
   459e8:	9d29883a 	add	r20,r19,r20
   459ec:	e1400017 	ldw	r5,0(fp)
   459f0:	d9000015 	stw	r4,0(sp)
   459f4:	a1000017 	ldw	r4,0(r20)
   459f8:	29400044 	addi	r5,r5,1
   459fc:	d8c00115 	stw	r3,4(sp)
   45a00:	dd000315 	stw	r20,12(sp)
   45a04:	00406f80 	call	406f8 <__udivsi3>
   45a08:	1025883a 	mov	r18,r2
   45a0c:	10003026 	beq	r2,zero,45ad0 <quorem+0x13c>
   45a10:	dc400117 	ldw	r17,4(sp)
   45a14:	9829883a 	mov	r20,r19
   45a18:	002d883a 	mov	r22,zero
   45a1c:	0021883a 	mov	r16,zero
   45a20:	8d400017 	ldw	r21,0(r17)
   45a24:	900b883a 	mov	r5,r18
   45a28:	8c400104 	addi	r17,r17,4
   45a2c:	a93fffcc 	andi	r4,r21,65535
   45a30:	0040eec0 	call	40eec <__mulsi3>
   45a34:	a808d43a 	srli	r4,r21,16
   45a38:	900b883a 	mov	r5,r18
   45a3c:	15ad883a 	add	r22,r2,r22
   45a40:	0040eec0 	call	40eec <__mulsi3>
   45a44:	a1000017 	ldw	r4,0(r20)
   45a48:	b00cd43a 	srli	r6,r22,16
   45a4c:	b0ffffcc 	andi	r3,r22,65535
   45a50:	217fffcc 	andi	r5,r4,65535
   45a54:	2c21883a 	add	r16,r5,r16
   45a58:	80c7c83a 	sub	r3,r16,r3
   45a5c:	2008d43a 	srli	r4,r4,16
   45a60:	1185883a 	add	r2,r2,r6
   45a64:	1821d43a 	srai	r16,r3,16
   45a68:	117fffcc 	andi	r5,r2,65535
   45a6c:	2149c83a 	sub	r4,r4,r5
   45a70:	2421883a 	add	r16,r4,r16
   45a74:	8008943a 	slli	r4,r16,16
   45a78:	18ffffcc 	andi	r3,r3,65535
   45a7c:	102cd43a 	srli	r22,r2,16
   45a80:	20c8b03a 	or	r4,r4,r3
   45a84:	a1000015 	stw	r4,0(r20)
   45a88:	8021d43a 	srai	r16,r16,16
   45a8c:	a5000104 	addi	r20,r20,4
   45a90:	e47fe32e 	bgeu	fp,r17,45a20 <__alt_data_end+0xfffd3a20>
   45a94:	d8c00317 	ldw	r3,12(sp)
   45a98:	18800017 	ldw	r2,0(r3)
   45a9c:	10000c1e 	bne	r2,zero,45ad0 <quorem+0x13c>
   45aa0:	18bfff04 	addi	r2,r3,-4
   45aa4:	9880082e 	bgeu	r19,r2,45ac8 <quorem+0x134>
   45aa8:	18ffff17 	ldw	r3,-4(r3)
   45aac:	18000326 	beq	r3,zero,45abc <quorem+0x128>
   45ab0:	00000506 	br	45ac8 <quorem+0x134>
   45ab4:	10c00017 	ldw	r3,0(r2)
   45ab8:	1800031e 	bne	r3,zero,45ac8 <quorem+0x134>
   45abc:	10bfff04 	addi	r2,r2,-4
   45ac0:	bdffffc4 	addi	r23,r23,-1
   45ac4:	98bffb36 	bltu	r19,r2,45ab4 <__alt_data_end+0xfffd3ab4>
   45ac8:	d8c00017 	ldw	r3,0(sp)
   45acc:	1dc00415 	stw	r23,16(r3)
   45ad0:	d9400217 	ldw	r5,8(sp)
   45ad4:	d9000017 	ldw	r4,0(sp)
   45ad8:	0049bf80 	call	49bf8 <__mcmp>
   45adc:	10002816 	blt	r2,zero,45b80 <quorem+0x1ec>
   45ae0:	dc400117 	ldw	r17,4(sp)
   45ae4:	94800044 	addi	r18,r18,1
   45ae8:	980d883a 	mov	r6,r19
   45aec:	0007883a 	mov	r3,zero
   45af0:	31000017 	ldw	r4,0(r6)
   45af4:	89400017 	ldw	r5,0(r17)
   45af8:	31800104 	addi	r6,r6,4
   45afc:	20bfffcc 	andi	r2,r4,65535
   45b00:	10c7883a 	add	r3,r2,r3
   45b04:	28bfffcc 	andi	r2,r5,65535
   45b08:	1885c83a 	sub	r2,r3,r2
   45b0c:	280ad43a 	srli	r5,r5,16
   45b10:	2008d43a 	srli	r4,r4,16
   45b14:	1007d43a 	srai	r3,r2,16
   45b18:	10bfffcc 	andi	r2,r2,65535
   45b1c:	2149c83a 	sub	r4,r4,r5
   45b20:	20c9883a 	add	r4,r4,r3
   45b24:	200a943a 	slli	r5,r4,16
   45b28:	8c400104 	addi	r17,r17,4
   45b2c:	2007d43a 	srai	r3,r4,16
   45b30:	2884b03a 	or	r2,r5,r2
   45b34:	30bfff15 	stw	r2,-4(r6)
   45b38:	e47fed2e 	bgeu	fp,r17,45af0 <__alt_data_end+0xfffd3af0>
   45b3c:	bdc5883a 	add	r2,r23,r23
   45b40:	1085883a 	add	r2,r2,r2
   45b44:	9887883a 	add	r3,r19,r2
   45b48:	18800017 	ldw	r2,0(r3)
   45b4c:	10000c1e 	bne	r2,zero,45b80 <quorem+0x1ec>
   45b50:	18bfff04 	addi	r2,r3,-4
   45b54:	9880082e 	bgeu	r19,r2,45b78 <quorem+0x1e4>
   45b58:	18ffff17 	ldw	r3,-4(r3)
   45b5c:	18000326 	beq	r3,zero,45b6c <quorem+0x1d8>
   45b60:	00000506 	br	45b78 <quorem+0x1e4>
   45b64:	10c00017 	ldw	r3,0(r2)
   45b68:	1800031e 	bne	r3,zero,45b78 <quorem+0x1e4>
   45b6c:	10bfff04 	addi	r2,r2,-4
   45b70:	bdffffc4 	addi	r23,r23,-1
   45b74:	98bffb36 	bltu	r19,r2,45b64 <__alt_data_end+0xfffd3b64>
   45b78:	d8c00017 	ldw	r3,0(sp)
   45b7c:	1dc00415 	stw	r23,16(r3)
   45b80:	9005883a 	mov	r2,r18
   45b84:	dfc00d17 	ldw	ra,52(sp)
   45b88:	df000c17 	ldw	fp,48(sp)
   45b8c:	ddc00b17 	ldw	r23,44(sp)
   45b90:	dd800a17 	ldw	r22,40(sp)
   45b94:	dd400917 	ldw	r21,36(sp)
   45b98:	dd000817 	ldw	r20,32(sp)
   45b9c:	dcc00717 	ldw	r19,28(sp)
   45ba0:	dc800617 	ldw	r18,24(sp)
   45ba4:	dc400517 	ldw	r17,20(sp)
   45ba8:	dc000417 	ldw	r16,16(sp)
   45bac:	dec00e04 	addi	sp,sp,56
   45bb0:	f800283a 	ret
   45bb4:	0005883a 	mov	r2,zero
   45bb8:	003ff206 	br	45b84 <__alt_data_end+0xfffd3b84>

00045bbc <_dtoa_r>:
   45bbc:	20801017 	ldw	r2,64(r4)
   45bc0:	deffde04 	addi	sp,sp,-136
   45bc4:	df002015 	stw	fp,128(sp)
   45bc8:	dcc01b15 	stw	r19,108(sp)
   45bcc:	dc801a15 	stw	r18,104(sp)
   45bd0:	dc401915 	stw	r17,100(sp)
   45bd4:	dc001815 	stw	r16,96(sp)
   45bd8:	dfc02115 	stw	ra,132(sp)
   45bdc:	ddc01f15 	stw	r23,124(sp)
   45be0:	dd801e15 	stw	r22,120(sp)
   45be4:	dd401d15 	stw	r21,116(sp)
   45be8:	dd001c15 	stw	r20,112(sp)
   45bec:	d9c00315 	stw	r7,12(sp)
   45bf0:	2039883a 	mov	fp,r4
   45bf4:	3023883a 	mov	r17,r6
   45bf8:	2825883a 	mov	r18,r5
   45bfc:	dc002417 	ldw	r16,144(sp)
   45c00:	3027883a 	mov	r19,r6
   45c04:	10000826 	beq	r2,zero,45c28 <_dtoa_r+0x6c>
   45c08:	21801117 	ldw	r6,68(r4)
   45c0c:	00c00044 	movi	r3,1
   45c10:	100b883a 	mov	r5,r2
   45c14:	1986983a 	sll	r3,r3,r6
   45c18:	11800115 	stw	r6,4(r2)
   45c1c:	10c00215 	stw	r3,8(r2)
   45c20:	004931c0 	call	4931c <_Bfree>
   45c24:	e0001015 	stw	zero,64(fp)
   45c28:	88002e16 	blt	r17,zero,45ce4 <_dtoa_r+0x128>
   45c2c:	80000015 	stw	zero,0(r16)
   45c30:	889ffc2c 	andhi	r2,r17,32752
   45c34:	00dffc34 	movhi	r3,32752
   45c38:	10c01c26 	beq	r2,r3,45cac <_dtoa_r+0xf0>
   45c3c:	000d883a 	mov	r6,zero
   45c40:	000f883a 	mov	r7,zero
   45c44:	9009883a 	mov	r4,r18
   45c48:	980b883a 	mov	r5,r19
   45c4c:	00500c80 	call	500c8 <__eqdf2>
   45c50:	10002b1e 	bne	r2,zero,45d00 <_dtoa_r+0x144>
   45c54:	d9c02317 	ldw	r7,140(sp)
   45c58:	00800044 	movi	r2,1
   45c5c:	38800015 	stw	r2,0(r7)
   45c60:	d8802517 	ldw	r2,148(sp)
   45c64:	10019e26 	beq	r2,zero,462e0 <_dtoa_r+0x724>
   45c68:	d8c02517 	ldw	r3,148(sp)
   45c6c:	00800174 	movhi	r2,5
   45c70:	1097e444 	addi	r2,r2,24465
   45c74:	18800015 	stw	r2,0(r3)
   45c78:	10bfffc4 	addi	r2,r2,-1
   45c7c:	dfc02117 	ldw	ra,132(sp)
   45c80:	df002017 	ldw	fp,128(sp)
   45c84:	ddc01f17 	ldw	r23,124(sp)
   45c88:	dd801e17 	ldw	r22,120(sp)
   45c8c:	dd401d17 	ldw	r21,116(sp)
   45c90:	dd001c17 	ldw	r20,112(sp)
   45c94:	dcc01b17 	ldw	r19,108(sp)
   45c98:	dc801a17 	ldw	r18,104(sp)
   45c9c:	dc401917 	ldw	r17,100(sp)
   45ca0:	dc001817 	ldw	r16,96(sp)
   45ca4:	dec02204 	addi	sp,sp,136
   45ca8:	f800283a 	ret
   45cac:	d8c02317 	ldw	r3,140(sp)
   45cb0:	0089c3c4 	movi	r2,9999
   45cb4:	18800015 	stw	r2,0(r3)
   45cb8:	90017726 	beq	r18,zero,46298 <_dtoa_r+0x6dc>
   45cbc:	00800174 	movhi	r2,5
   45cc0:	1097f804 	addi	r2,r2,24544
   45cc4:	d9002517 	ldw	r4,148(sp)
   45cc8:	203fec26 	beq	r4,zero,45c7c <__alt_data_end+0xfffd3c7c>
   45ccc:	10c000c7 	ldb	r3,3(r2)
   45cd0:	1801781e 	bne	r3,zero,462b4 <_dtoa_r+0x6f8>
   45cd4:	10c000c4 	addi	r3,r2,3
   45cd8:	d9802517 	ldw	r6,148(sp)
   45cdc:	30c00015 	stw	r3,0(r6)
   45ce0:	003fe606 	br	45c7c <__alt_data_end+0xfffd3c7c>
   45ce4:	04e00034 	movhi	r19,32768
   45ce8:	9cffffc4 	addi	r19,r19,-1
   45cec:	00800044 	movi	r2,1
   45cf0:	8ce6703a 	and	r19,r17,r19
   45cf4:	80800015 	stw	r2,0(r16)
   45cf8:	9823883a 	mov	r17,r19
   45cfc:	003fcc06 	br	45c30 <__alt_data_end+0xfffd3c30>
   45d00:	d8800204 	addi	r2,sp,8
   45d04:	d8800015 	stw	r2,0(sp)
   45d08:	d9c00104 	addi	r7,sp,4
   45d0c:	900b883a 	mov	r5,r18
   45d10:	980d883a 	mov	r6,r19
   45d14:	e009883a 	mov	r4,fp
   45d18:	8820d53a 	srli	r16,r17,20
   45d1c:	0049fc40 	call	49fc4 <__d2b>
   45d20:	d8800915 	stw	r2,36(sp)
   45d24:	8001651e 	bne	r16,zero,462bc <_dtoa_r+0x700>
   45d28:	dd800217 	ldw	r22,8(sp)
   45d2c:	dc000117 	ldw	r16,4(sp)
   45d30:	00800804 	movi	r2,32
   45d34:	b421883a 	add	r16,r22,r16
   45d38:	80c10c84 	addi	r3,r16,1074
   45d3c:	10c2d10e 	bge	r2,r3,46884 <_dtoa_r+0xcc8>
   45d40:	00801004 	movi	r2,64
   45d44:	81010484 	addi	r4,r16,1042
   45d48:	10c7c83a 	sub	r3,r2,r3
   45d4c:	9108d83a 	srl	r4,r18,r4
   45d50:	88e2983a 	sll	r17,r17,r3
   45d54:	2448b03a 	or	r4,r4,r17
   45d58:	00515e40 	call	515e4 <__floatunsidf>
   45d5c:	017f8434 	movhi	r5,65040
   45d60:	01800044 	movi	r6,1
   45d64:	1009883a 	mov	r4,r2
   45d68:	194b883a 	add	r5,r3,r5
   45d6c:	843fffc4 	addi	r16,r16,-1
   45d70:	d9801115 	stw	r6,68(sp)
   45d74:	000d883a 	mov	r6,zero
   45d78:	01cffe34 	movhi	r7,16376
   45d7c:	0050b8c0 	call	50b8c <__subdf3>
   45d80:	0198dbf4 	movhi	r6,25455
   45d84:	01cff4f4 	movhi	r7,16339
   45d88:	3190d844 	addi	r6,r6,17249
   45d8c:	39e1e9c4 	addi	r7,r7,-30809
   45d90:	1009883a 	mov	r4,r2
   45d94:	180b883a 	mov	r5,r3
   45d98:	00503200 	call	50320 <__muldf3>
   45d9c:	01a2d874 	movhi	r6,35681
   45da0:	01cff1f4 	movhi	r7,16327
   45da4:	31b22cc4 	addi	r6,r6,-14157
   45da8:	39e28a04 	addi	r7,r7,-30168
   45dac:	180b883a 	mov	r5,r3
   45db0:	1009883a 	mov	r4,r2
   45db4:	004ee4c0 	call	4ee4c <__adddf3>
   45db8:	8009883a 	mov	r4,r16
   45dbc:	1029883a 	mov	r20,r2
   45dc0:	1823883a 	mov	r17,r3
   45dc4:	00515080 	call	51508 <__floatsidf>
   45dc8:	019427f4 	movhi	r6,20639
   45dcc:	01cff4f4 	movhi	r7,16339
   45dd0:	319e7ec4 	addi	r6,r6,31227
   45dd4:	39d104c4 	addi	r7,r7,17427
   45dd8:	1009883a 	mov	r4,r2
   45ddc:	180b883a 	mov	r5,r3
   45de0:	00503200 	call	50320 <__muldf3>
   45de4:	100d883a 	mov	r6,r2
   45de8:	180f883a 	mov	r7,r3
   45dec:	a009883a 	mov	r4,r20
   45df0:	880b883a 	mov	r5,r17
   45df4:	004ee4c0 	call	4ee4c <__adddf3>
   45df8:	1009883a 	mov	r4,r2
   45dfc:	180b883a 	mov	r5,r3
   45e00:	1029883a 	mov	r20,r2
   45e04:	1823883a 	mov	r17,r3
   45e08:	00514880 	call	51488 <__fixdfsi>
   45e0c:	000d883a 	mov	r6,zero
   45e10:	000f883a 	mov	r7,zero
   45e14:	a009883a 	mov	r4,r20
   45e18:	880b883a 	mov	r5,r17
   45e1c:	d8800515 	stw	r2,20(sp)
   45e20:	005022c0 	call	5022c <__ledf2>
   45e24:	10028716 	blt	r2,zero,46844 <_dtoa_r+0xc88>
   45e28:	d8c00517 	ldw	r3,20(sp)
   45e2c:	00800584 	movi	r2,22
   45e30:	10c27536 	bltu	r2,r3,46808 <_dtoa_r+0xc4c>
   45e34:	180490fa 	slli	r2,r3,3
   45e38:	00c00174 	movhi	r3,5
   45e3c:	18d81404 	addi	r3,r3,24656
   45e40:	1885883a 	add	r2,r3,r2
   45e44:	11000017 	ldw	r4,0(r2)
   45e48:	11400117 	ldw	r5,4(r2)
   45e4c:	900d883a 	mov	r6,r18
   45e50:	980f883a 	mov	r7,r19
   45e54:	00501500 	call	50150 <__gedf2>
   45e58:	00828d0e 	bge	zero,r2,46890 <_dtoa_r+0xcd4>
   45e5c:	d9000517 	ldw	r4,20(sp)
   45e60:	d8000e15 	stw	zero,56(sp)
   45e64:	213fffc4 	addi	r4,r4,-1
   45e68:	d9000515 	stw	r4,20(sp)
   45e6c:	b42dc83a 	sub	r22,r22,r16
   45e70:	b5bfffc4 	addi	r22,r22,-1
   45e74:	b0026f16 	blt	r22,zero,46834 <_dtoa_r+0xc78>
   45e78:	d8000815 	stw	zero,32(sp)
   45e7c:	d9c00517 	ldw	r7,20(sp)
   45e80:	38026416 	blt	r7,zero,46814 <_dtoa_r+0xc58>
   45e84:	b1ed883a 	add	r22,r22,r7
   45e88:	d9c00d15 	stw	r7,52(sp)
   45e8c:	d8000a15 	stw	zero,40(sp)
   45e90:	d9800317 	ldw	r6,12(sp)
   45e94:	00800244 	movi	r2,9
   45e98:	11811436 	bltu	r2,r6,462ec <_dtoa_r+0x730>
   45e9c:	00800144 	movi	r2,5
   45ea0:	1184e10e 	bge	r2,r6,47228 <_dtoa_r+0x166c>
   45ea4:	31bfff04 	addi	r6,r6,-4
   45ea8:	d9800315 	stw	r6,12(sp)
   45eac:	0023883a 	mov	r17,zero
   45eb0:	d9800317 	ldw	r6,12(sp)
   45eb4:	008000c4 	movi	r2,3
   45eb8:	30836726 	beq	r6,r2,46c58 <_dtoa_r+0x109c>
   45ebc:	1183410e 	bge	r2,r6,46bc4 <_dtoa_r+0x1008>
   45ec0:	d9c00317 	ldw	r7,12(sp)
   45ec4:	00800104 	movi	r2,4
   45ec8:	38827c26 	beq	r7,r2,468bc <_dtoa_r+0xd00>
   45ecc:	00800144 	movi	r2,5
   45ed0:	3884c41e 	bne	r7,r2,471e4 <_dtoa_r+0x1628>
   45ed4:	00800044 	movi	r2,1
   45ed8:	d8800b15 	stw	r2,44(sp)
   45edc:	d8c00517 	ldw	r3,20(sp)
   45ee0:	d9002217 	ldw	r4,136(sp)
   45ee4:	1907883a 	add	r3,r3,r4
   45ee8:	19800044 	addi	r6,r3,1
   45eec:	d8c00c15 	stw	r3,48(sp)
   45ef0:	d9800615 	stw	r6,24(sp)
   45ef4:	0183a40e 	bge	zero,r6,46d88 <_dtoa_r+0x11cc>
   45ef8:	d9800617 	ldw	r6,24(sp)
   45efc:	3021883a 	mov	r16,r6
   45f00:	e0001115 	stw	zero,68(fp)
   45f04:	008005c4 	movi	r2,23
   45f08:	1184c92e 	bgeu	r2,r6,47230 <_dtoa_r+0x1674>
   45f0c:	00c00044 	movi	r3,1
   45f10:	00800104 	movi	r2,4
   45f14:	1085883a 	add	r2,r2,r2
   45f18:	11000504 	addi	r4,r2,20
   45f1c:	180b883a 	mov	r5,r3
   45f20:	18c00044 	addi	r3,r3,1
   45f24:	313ffb2e 	bgeu	r6,r4,45f14 <__alt_data_end+0xfffd3f14>
   45f28:	e1401115 	stw	r5,68(fp)
   45f2c:	e009883a 	mov	r4,fp
   45f30:	00492740 	call	49274 <_Balloc>
   45f34:	d8800715 	stw	r2,28(sp)
   45f38:	e0801015 	stw	r2,64(fp)
   45f3c:	00800384 	movi	r2,14
   45f40:	1400f736 	bltu	r2,r16,46320 <_dtoa_r+0x764>
   45f44:	8800f626 	beq	r17,zero,46320 <_dtoa_r+0x764>
   45f48:	d9c00517 	ldw	r7,20(sp)
   45f4c:	01c39a0e 	bge	zero,r7,46db8 <_dtoa_r+0x11fc>
   45f50:	388003cc 	andi	r2,r7,15
   45f54:	100490fa 	slli	r2,r2,3
   45f58:	382bd13a 	srai	r21,r7,4
   45f5c:	00c00174 	movhi	r3,5
   45f60:	18d81404 	addi	r3,r3,24656
   45f64:	1885883a 	add	r2,r3,r2
   45f68:	a8c0040c 	andi	r3,r21,16
   45f6c:	12400017 	ldw	r9,0(r2)
   45f70:	12000117 	ldw	r8,4(r2)
   45f74:	18037926 	beq	r3,zero,46d5c <_dtoa_r+0x11a0>
   45f78:	00800174 	movhi	r2,5
   45f7c:	10980a04 	addi	r2,r2,24616
   45f80:	11800817 	ldw	r6,32(r2)
   45f84:	11c00917 	ldw	r7,36(r2)
   45f88:	9009883a 	mov	r4,r18
   45f8c:	980b883a 	mov	r5,r19
   45f90:	da001715 	stw	r8,92(sp)
   45f94:	da401615 	stw	r9,88(sp)
   45f98:	004f6f80 	call	4f6f8 <__divdf3>
   45f9c:	da001717 	ldw	r8,92(sp)
   45fa0:	da401617 	ldw	r9,88(sp)
   45fa4:	ad4003cc 	andi	r21,r21,15
   45fa8:	040000c4 	movi	r16,3
   45fac:	1023883a 	mov	r17,r2
   45fb0:	1829883a 	mov	r20,r3
   45fb4:	a8001126 	beq	r21,zero,45ffc <_dtoa_r+0x440>
   45fb8:	05c00174 	movhi	r23,5
   45fbc:	bdd80a04 	addi	r23,r23,24616
   45fc0:	4805883a 	mov	r2,r9
   45fc4:	4007883a 	mov	r3,r8
   45fc8:	a980004c 	andi	r6,r21,1
   45fcc:	1009883a 	mov	r4,r2
   45fd0:	a82bd07a 	srai	r21,r21,1
   45fd4:	180b883a 	mov	r5,r3
   45fd8:	30000426 	beq	r6,zero,45fec <_dtoa_r+0x430>
   45fdc:	b9800017 	ldw	r6,0(r23)
   45fe0:	b9c00117 	ldw	r7,4(r23)
   45fe4:	84000044 	addi	r16,r16,1
   45fe8:	00503200 	call	50320 <__muldf3>
   45fec:	bdc00204 	addi	r23,r23,8
   45ff0:	a83ff51e 	bne	r21,zero,45fc8 <__alt_data_end+0xfffd3fc8>
   45ff4:	1013883a 	mov	r9,r2
   45ff8:	1811883a 	mov	r8,r3
   45ffc:	480d883a 	mov	r6,r9
   46000:	400f883a 	mov	r7,r8
   46004:	8809883a 	mov	r4,r17
   46008:	a00b883a 	mov	r5,r20
   4600c:	004f6f80 	call	4f6f8 <__divdf3>
   46010:	d8800f15 	stw	r2,60(sp)
   46014:	d8c01015 	stw	r3,64(sp)
   46018:	d8c00e17 	ldw	r3,56(sp)
   4601c:	18000626 	beq	r3,zero,46038 <_dtoa_r+0x47c>
   46020:	d9000f17 	ldw	r4,60(sp)
   46024:	d9401017 	ldw	r5,64(sp)
   46028:	000d883a 	mov	r6,zero
   4602c:	01cffc34 	movhi	r7,16368
   46030:	005022c0 	call	5022c <__ledf2>
   46034:	10040b16 	blt	r2,zero,47064 <_dtoa_r+0x14a8>
   46038:	8009883a 	mov	r4,r16
   4603c:	00515080 	call	51508 <__floatsidf>
   46040:	d9800f17 	ldw	r6,60(sp)
   46044:	d9c01017 	ldw	r7,64(sp)
   46048:	1009883a 	mov	r4,r2
   4604c:	180b883a 	mov	r5,r3
   46050:	00503200 	call	50320 <__muldf3>
   46054:	000d883a 	mov	r6,zero
   46058:	01d00734 	movhi	r7,16412
   4605c:	1009883a 	mov	r4,r2
   46060:	180b883a 	mov	r5,r3
   46064:	004ee4c0 	call	4ee4c <__adddf3>
   46068:	1021883a 	mov	r16,r2
   4606c:	d8800617 	ldw	r2,24(sp)
   46070:	047f3034 	movhi	r17,64704
   46074:	1c63883a 	add	r17,r3,r17
   46078:	10031826 	beq	r2,zero,46cdc <_dtoa_r+0x1120>
   4607c:	d8c00517 	ldw	r3,20(sp)
   46080:	db000617 	ldw	r12,24(sp)
   46084:	d8c01315 	stw	r3,76(sp)
   46088:	d9000b17 	ldw	r4,44(sp)
   4608c:	20038f26 	beq	r4,zero,46ecc <_dtoa_r+0x1310>
   46090:	60bfffc4 	addi	r2,r12,-1
   46094:	100490fa 	slli	r2,r2,3
   46098:	00c00174 	movhi	r3,5
   4609c:	18d81404 	addi	r3,r3,24656
   460a0:	1885883a 	add	r2,r3,r2
   460a4:	11800017 	ldw	r6,0(r2)
   460a8:	11c00117 	ldw	r7,4(r2)
   460ac:	d8800717 	ldw	r2,28(sp)
   460b0:	0009883a 	mov	r4,zero
   460b4:	014ff834 	movhi	r5,16352
   460b8:	db001615 	stw	r12,88(sp)
   460bc:	15c00044 	addi	r23,r2,1
   460c0:	004f6f80 	call	4f6f8 <__divdf3>
   460c4:	800d883a 	mov	r6,r16
   460c8:	880f883a 	mov	r7,r17
   460cc:	1009883a 	mov	r4,r2
   460d0:	180b883a 	mov	r5,r3
   460d4:	0050b8c0 	call	50b8c <__subdf3>
   460d8:	d9401017 	ldw	r5,64(sp)
   460dc:	d9000f17 	ldw	r4,60(sp)
   460e0:	102b883a 	mov	r21,r2
   460e4:	d8c01215 	stw	r3,72(sp)
   460e8:	00514880 	call	51488 <__fixdfsi>
   460ec:	1009883a 	mov	r4,r2
   460f0:	1029883a 	mov	r20,r2
   460f4:	00515080 	call	51508 <__floatsidf>
   460f8:	d9000f17 	ldw	r4,60(sp)
   460fc:	d9401017 	ldw	r5,64(sp)
   46100:	100d883a 	mov	r6,r2
   46104:	180f883a 	mov	r7,r3
   46108:	0050b8c0 	call	50b8c <__subdf3>
   4610c:	1823883a 	mov	r17,r3
   46110:	d8c00717 	ldw	r3,28(sp)
   46114:	d9401217 	ldw	r5,72(sp)
   46118:	a2000c04 	addi	r8,r20,48
   4611c:	1021883a 	mov	r16,r2
   46120:	1a000005 	stb	r8,0(r3)
   46124:	800d883a 	mov	r6,r16
   46128:	880f883a 	mov	r7,r17
   4612c:	a809883a 	mov	r4,r21
   46130:	4029883a 	mov	r20,r8
   46134:	00501500 	call	50150 <__gedf2>
   46138:	00841d16 	blt	zero,r2,471b0 <_dtoa_r+0x15f4>
   4613c:	800d883a 	mov	r6,r16
   46140:	880f883a 	mov	r7,r17
   46144:	0009883a 	mov	r4,zero
   46148:	014ffc34 	movhi	r5,16368
   4614c:	0050b8c0 	call	50b8c <__subdf3>
   46150:	d9401217 	ldw	r5,72(sp)
   46154:	100d883a 	mov	r6,r2
   46158:	180f883a 	mov	r7,r3
   4615c:	a809883a 	mov	r4,r21
   46160:	00501500 	call	50150 <__gedf2>
   46164:	db001617 	ldw	r12,88(sp)
   46168:	00840e16 	blt	zero,r2,471a4 <_dtoa_r+0x15e8>
   4616c:	00800044 	movi	r2,1
   46170:	13006b0e 	bge	r2,r12,46320 <_dtoa_r+0x764>
   46174:	d9000717 	ldw	r4,28(sp)
   46178:	dd800f15 	stw	r22,60(sp)
   4617c:	dcc01015 	stw	r19,64(sp)
   46180:	2319883a 	add	r12,r4,r12
   46184:	dcc01217 	ldw	r19,72(sp)
   46188:	602d883a 	mov	r22,r12
   4618c:	dc801215 	stw	r18,72(sp)
   46190:	b825883a 	mov	r18,r23
   46194:	00000906 	br	461bc <_dtoa_r+0x600>
   46198:	0050b8c0 	call	50b8c <__subdf3>
   4619c:	a80d883a 	mov	r6,r21
   461a0:	980f883a 	mov	r7,r19
   461a4:	1009883a 	mov	r4,r2
   461a8:	180b883a 	mov	r5,r3
   461ac:	005022c0 	call	5022c <__ledf2>
   461b0:	1003e816 	blt	r2,zero,47154 <_dtoa_r+0x1598>
   461b4:	b825883a 	mov	r18,r23
   461b8:	bd83e926 	beq	r23,r22,47160 <_dtoa_r+0x15a4>
   461bc:	a809883a 	mov	r4,r21
   461c0:	980b883a 	mov	r5,r19
   461c4:	000d883a 	mov	r6,zero
   461c8:	01d00934 	movhi	r7,16420
   461cc:	00503200 	call	50320 <__muldf3>
   461d0:	000d883a 	mov	r6,zero
   461d4:	01d00934 	movhi	r7,16420
   461d8:	8009883a 	mov	r4,r16
   461dc:	880b883a 	mov	r5,r17
   461e0:	102b883a 	mov	r21,r2
   461e4:	1827883a 	mov	r19,r3
   461e8:	00503200 	call	50320 <__muldf3>
   461ec:	180b883a 	mov	r5,r3
   461f0:	1009883a 	mov	r4,r2
   461f4:	1821883a 	mov	r16,r3
   461f8:	1023883a 	mov	r17,r2
   461fc:	00514880 	call	51488 <__fixdfsi>
   46200:	1009883a 	mov	r4,r2
   46204:	1029883a 	mov	r20,r2
   46208:	00515080 	call	51508 <__floatsidf>
   4620c:	8809883a 	mov	r4,r17
   46210:	800b883a 	mov	r5,r16
   46214:	100d883a 	mov	r6,r2
   46218:	180f883a 	mov	r7,r3
   4621c:	0050b8c0 	call	50b8c <__subdf3>
   46220:	a5000c04 	addi	r20,r20,48
   46224:	a80d883a 	mov	r6,r21
   46228:	980f883a 	mov	r7,r19
   4622c:	1009883a 	mov	r4,r2
   46230:	180b883a 	mov	r5,r3
   46234:	95000005 	stb	r20,0(r18)
   46238:	1021883a 	mov	r16,r2
   4623c:	1823883a 	mov	r17,r3
   46240:	005022c0 	call	5022c <__ledf2>
   46244:	bdc00044 	addi	r23,r23,1
   46248:	800d883a 	mov	r6,r16
   4624c:	880f883a 	mov	r7,r17
   46250:	0009883a 	mov	r4,zero
   46254:	014ffc34 	movhi	r5,16368
   46258:	103fcf0e 	bge	r2,zero,46198 <__alt_data_end+0xfffd4198>
   4625c:	d8c01317 	ldw	r3,76(sp)
   46260:	d8c00515 	stw	r3,20(sp)
   46264:	d9400917 	ldw	r5,36(sp)
   46268:	e009883a 	mov	r4,fp
   4626c:	004931c0 	call	4931c <_Bfree>
   46270:	d9000517 	ldw	r4,20(sp)
   46274:	d9802317 	ldw	r6,140(sp)
   46278:	d9c02517 	ldw	r7,148(sp)
   4627c:	b8000005 	stb	zero,0(r23)
   46280:	20800044 	addi	r2,r4,1
   46284:	30800015 	stw	r2,0(r6)
   46288:	3802aa26 	beq	r7,zero,46d34 <_dtoa_r+0x1178>
   4628c:	3dc00015 	stw	r23,0(r7)
   46290:	d8800717 	ldw	r2,28(sp)
   46294:	003e7906 	br	45c7c <__alt_data_end+0xfffd3c7c>
   46298:	00800434 	movhi	r2,16
   4629c:	10bfffc4 	addi	r2,r2,-1
   462a0:	88a2703a 	and	r17,r17,r2
   462a4:	883e851e 	bne	r17,zero,45cbc <__alt_data_end+0xfffd3cbc>
   462a8:	00800174 	movhi	r2,5
   462ac:	1097f504 	addi	r2,r2,24532
   462b0:	003e8406 	br	45cc4 <__alt_data_end+0xfffd3cc4>
   462b4:	10c00204 	addi	r3,r2,8
   462b8:	003e8706 	br	45cd8 <__alt_data_end+0xfffd3cd8>
   462bc:	01400434 	movhi	r5,16
   462c0:	297fffc4 	addi	r5,r5,-1
   462c4:	994a703a 	and	r5,r19,r5
   462c8:	9009883a 	mov	r4,r18
   462cc:	843f0044 	addi	r16,r16,-1023
   462d0:	294ffc34 	orhi	r5,r5,16368
   462d4:	dd800217 	ldw	r22,8(sp)
   462d8:	d8001115 	stw	zero,68(sp)
   462dc:	003ea506 	br	45d74 <__alt_data_end+0xfffd3d74>
   462e0:	00800174 	movhi	r2,5
   462e4:	1097e404 	addi	r2,r2,24464
   462e8:	003e6406 	br	45c7c <__alt_data_end+0xfffd3c7c>
   462ec:	e0001115 	stw	zero,68(fp)
   462f0:	000b883a 	mov	r5,zero
   462f4:	e009883a 	mov	r4,fp
   462f8:	00492740 	call	49274 <_Balloc>
   462fc:	01bfffc4 	movi	r6,-1
   46300:	01c00044 	movi	r7,1
   46304:	d8800715 	stw	r2,28(sp)
   46308:	d9800c15 	stw	r6,48(sp)
   4630c:	e0801015 	stw	r2,64(fp)
   46310:	d8000315 	stw	zero,12(sp)
   46314:	d9c00b15 	stw	r7,44(sp)
   46318:	d9800615 	stw	r6,24(sp)
   4631c:	d8002215 	stw	zero,136(sp)
   46320:	d8800117 	ldw	r2,4(sp)
   46324:	10008916 	blt	r2,zero,4654c <_dtoa_r+0x990>
   46328:	d9000517 	ldw	r4,20(sp)
   4632c:	00c00384 	movi	r3,14
   46330:	19008616 	blt	r3,r4,4654c <_dtoa_r+0x990>
   46334:	200490fa 	slli	r2,r4,3
   46338:	00c00174 	movhi	r3,5
   4633c:	d9802217 	ldw	r6,136(sp)
   46340:	18d81404 	addi	r3,r3,24656
   46344:	1885883a 	add	r2,r3,r2
   46348:	14000017 	ldw	r16,0(r2)
   4634c:	14400117 	ldw	r17,4(r2)
   46350:	30016316 	blt	r6,zero,468e0 <_dtoa_r+0xd24>
   46354:	800d883a 	mov	r6,r16
   46358:	880f883a 	mov	r7,r17
   4635c:	9009883a 	mov	r4,r18
   46360:	980b883a 	mov	r5,r19
   46364:	004f6f80 	call	4f6f8 <__divdf3>
   46368:	180b883a 	mov	r5,r3
   4636c:	1009883a 	mov	r4,r2
   46370:	00514880 	call	51488 <__fixdfsi>
   46374:	1009883a 	mov	r4,r2
   46378:	102b883a 	mov	r21,r2
   4637c:	00515080 	call	51508 <__floatsidf>
   46380:	800d883a 	mov	r6,r16
   46384:	880f883a 	mov	r7,r17
   46388:	1009883a 	mov	r4,r2
   4638c:	180b883a 	mov	r5,r3
   46390:	00503200 	call	50320 <__muldf3>
   46394:	100d883a 	mov	r6,r2
   46398:	180f883a 	mov	r7,r3
   4639c:	9009883a 	mov	r4,r18
   463a0:	980b883a 	mov	r5,r19
   463a4:	0050b8c0 	call	50b8c <__subdf3>
   463a8:	d9c00717 	ldw	r7,28(sp)
   463ac:	1009883a 	mov	r4,r2
   463b0:	a8800c04 	addi	r2,r21,48
   463b4:	38800005 	stb	r2,0(r7)
   463b8:	3dc00044 	addi	r23,r7,1
   463bc:	d9c00617 	ldw	r7,24(sp)
   463c0:	01800044 	movi	r6,1
   463c4:	180b883a 	mov	r5,r3
   463c8:	2005883a 	mov	r2,r4
   463cc:	39803826 	beq	r7,r6,464b0 <_dtoa_r+0x8f4>
   463d0:	000d883a 	mov	r6,zero
   463d4:	01d00934 	movhi	r7,16420
   463d8:	00503200 	call	50320 <__muldf3>
   463dc:	000d883a 	mov	r6,zero
   463e0:	000f883a 	mov	r7,zero
   463e4:	1009883a 	mov	r4,r2
   463e8:	180b883a 	mov	r5,r3
   463ec:	1025883a 	mov	r18,r2
   463f0:	1827883a 	mov	r19,r3
   463f4:	00500c80 	call	500c8 <__eqdf2>
   463f8:	103f9a26 	beq	r2,zero,46264 <__alt_data_end+0xfffd4264>
   463fc:	d9c00617 	ldw	r7,24(sp)
   46400:	d8c00717 	ldw	r3,28(sp)
   46404:	b829883a 	mov	r20,r23
   46408:	38bfffc4 	addi	r2,r7,-1
   4640c:	18ad883a 	add	r22,r3,r2
   46410:	00000a06 	br	4643c <_dtoa_r+0x880>
   46414:	00503200 	call	50320 <__muldf3>
   46418:	000d883a 	mov	r6,zero
   4641c:	000f883a 	mov	r7,zero
   46420:	1009883a 	mov	r4,r2
   46424:	180b883a 	mov	r5,r3
   46428:	1025883a 	mov	r18,r2
   4642c:	1827883a 	mov	r19,r3
   46430:	b829883a 	mov	r20,r23
   46434:	00500c80 	call	500c8 <__eqdf2>
   46438:	103f8a26 	beq	r2,zero,46264 <__alt_data_end+0xfffd4264>
   4643c:	800d883a 	mov	r6,r16
   46440:	880f883a 	mov	r7,r17
   46444:	9009883a 	mov	r4,r18
   46448:	980b883a 	mov	r5,r19
   4644c:	004f6f80 	call	4f6f8 <__divdf3>
   46450:	180b883a 	mov	r5,r3
   46454:	1009883a 	mov	r4,r2
   46458:	00514880 	call	51488 <__fixdfsi>
   4645c:	1009883a 	mov	r4,r2
   46460:	102b883a 	mov	r21,r2
   46464:	00515080 	call	51508 <__floatsidf>
   46468:	800d883a 	mov	r6,r16
   4646c:	880f883a 	mov	r7,r17
   46470:	1009883a 	mov	r4,r2
   46474:	180b883a 	mov	r5,r3
   46478:	00503200 	call	50320 <__muldf3>
   4647c:	100d883a 	mov	r6,r2
   46480:	180f883a 	mov	r7,r3
   46484:	9009883a 	mov	r4,r18
   46488:	980b883a 	mov	r5,r19
   4648c:	0050b8c0 	call	50b8c <__subdf3>
   46490:	aa000c04 	addi	r8,r21,48
   46494:	a2000005 	stb	r8,0(r20)
   46498:	000d883a 	mov	r6,zero
   4649c:	01d00934 	movhi	r7,16420
   464a0:	1009883a 	mov	r4,r2
   464a4:	180b883a 	mov	r5,r3
   464a8:	a5c00044 	addi	r23,r20,1
   464ac:	b53fd91e 	bne	r22,r20,46414 <__alt_data_end+0xfffd4414>
   464b0:	100d883a 	mov	r6,r2
   464b4:	180f883a 	mov	r7,r3
   464b8:	1009883a 	mov	r4,r2
   464bc:	180b883a 	mov	r5,r3
   464c0:	004ee4c0 	call	4ee4c <__adddf3>
   464c4:	100d883a 	mov	r6,r2
   464c8:	180f883a 	mov	r7,r3
   464cc:	8009883a 	mov	r4,r16
   464d0:	880b883a 	mov	r5,r17
   464d4:	1027883a 	mov	r19,r2
   464d8:	1825883a 	mov	r18,r3
   464dc:	005022c0 	call	5022c <__ledf2>
   464e0:	10000816 	blt	r2,zero,46504 <_dtoa_r+0x948>
   464e4:	980d883a 	mov	r6,r19
   464e8:	900f883a 	mov	r7,r18
   464ec:	8009883a 	mov	r4,r16
   464f0:	880b883a 	mov	r5,r17
   464f4:	00500c80 	call	500c8 <__eqdf2>
   464f8:	103f5a1e 	bne	r2,zero,46264 <__alt_data_end+0xfffd4264>
   464fc:	ad40004c 	andi	r21,r21,1
   46500:	a83f5826 	beq	r21,zero,46264 <__alt_data_end+0xfffd4264>
   46504:	bd3fffc3 	ldbu	r20,-1(r23)
   46508:	b8bfffc4 	addi	r2,r23,-1
   4650c:	1007883a 	mov	r3,r2
   46510:	01400e44 	movi	r5,57
   46514:	d9800717 	ldw	r6,28(sp)
   46518:	00000506 	br	46530 <_dtoa_r+0x974>
   4651c:	18ffffc4 	addi	r3,r3,-1
   46520:	11824726 	beq	r2,r6,46e40 <_dtoa_r+0x1284>
   46524:	1d000003 	ldbu	r20,0(r3)
   46528:	102f883a 	mov	r23,r2
   4652c:	10bfffc4 	addi	r2,r2,-1
   46530:	a1003fcc 	andi	r4,r20,255
   46534:	2100201c 	xori	r4,r4,128
   46538:	213fe004 	addi	r4,r4,-128
   4653c:	217ff726 	beq	r4,r5,4651c <__alt_data_end+0xfffd451c>
   46540:	a2000044 	addi	r8,r20,1
   46544:	12000005 	stb	r8,0(r2)
   46548:	003f4606 	br	46264 <__alt_data_end+0xfffd4264>
   4654c:	d9000b17 	ldw	r4,44(sp)
   46550:	2000c826 	beq	r4,zero,46874 <_dtoa_r+0xcb8>
   46554:	d9800317 	ldw	r6,12(sp)
   46558:	00c00044 	movi	r3,1
   4655c:	1980f90e 	bge	r3,r6,46944 <_dtoa_r+0xd88>
   46560:	d8800617 	ldw	r2,24(sp)
   46564:	d8c00a17 	ldw	r3,40(sp)
   46568:	157fffc4 	addi	r21,r2,-1
   4656c:	1d41f316 	blt	r3,r21,46d3c <_dtoa_r+0x1180>
   46570:	1d6bc83a 	sub	r21,r3,r21
   46574:	d9c00617 	ldw	r7,24(sp)
   46578:	3802aa16 	blt	r7,zero,47024 <_dtoa_r+0x1468>
   4657c:	dd000817 	ldw	r20,32(sp)
   46580:	d8800617 	ldw	r2,24(sp)
   46584:	d8c00817 	ldw	r3,32(sp)
   46588:	01400044 	movi	r5,1
   4658c:	e009883a 	mov	r4,fp
   46590:	1887883a 	add	r3,r3,r2
   46594:	d8c00815 	stw	r3,32(sp)
   46598:	b0ad883a 	add	r22,r22,r2
   4659c:	00496a80 	call	496a8 <__i2b>
   465a0:	1023883a 	mov	r17,r2
   465a4:	a0000826 	beq	r20,zero,465c8 <_dtoa_r+0xa0c>
   465a8:	0580070e 	bge	zero,r22,465c8 <_dtoa_r+0xa0c>
   465ac:	a005883a 	mov	r2,r20
   465b0:	b500b916 	blt	r22,r20,46898 <_dtoa_r+0xcdc>
   465b4:	d9000817 	ldw	r4,32(sp)
   465b8:	a0a9c83a 	sub	r20,r20,r2
   465bc:	b0adc83a 	sub	r22,r22,r2
   465c0:	2089c83a 	sub	r4,r4,r2
   465c4:	d9000815 	stw	r4,32(sp)
   465c8:	d9800a17 	ldw	r6,40(sp)
   465cc:	0181810e 	bge	zero,r6,46bd4 <_dtoa_r+0x1018>
   465d0:	d9c00b17 	ldw	r7,44(sp)
   465d4:	3800b326 	beq	r7,zero,468a4 <_dtoa_r+0xce8>
   465d8:	a800b226 	beq	r21,zero,468a4 <_dtoa_r+0xce8>
   465dc:	880b883a 	mov	r5,r17
   465e0:	a80d883a 	mov	r6,r21
   465e4:	e009883a 	mov	r4,fp
   465e8:	00499700 	call	49970 <__pow5mult>
   465ec:	d9800917 	ldw	r6,36(sp)
   465f0:	100b883a 	mov	r5,r2
   465f4:	e009883a 	mov	r4,fp
   465f8:	1023883a 	mov	r17,r2
   465fc:	00496e40 	call	496e4 <__multiply>
   46600:	1021883a 	mov	r16,r2
   46604:	d8800a17 	ldw	r2,40(sp)
   46608:	d9400917 	ldw	r5,36(sp)
   4660c:	e009883a 	mov	r4,fp
   46610:	1545c83a 	sub	r2,r2,r21
   46614:	d8800a15 	stw	r2,40(sp)
   46618:	004931c0 	call	4931c <_Bfree>
   4661c:	d8c00a17 	ldw	r3,40(sp)
   46620:	18009f1e 	bne	r3,zero,468a0 <_dtoa_r+0xce4>
   46624:	05c00044 	movi	r23,1
   46628:	e009883a 	mov	r4,fp
   4662c:	b80b883a 	mov	r5,r23
   46630:	00496a80 	call	496a8 <__i2b>
   46634:	d9000d17 	ldw	r4,52(sp)
   46638:	102b883a 	mov	r21,r2
   4663c:	2000ce26 	beq	r4,zero,46978 <_dtoa_r+0xdbc>
   46640:	200d883a 	mov	r6,r4
   46644:	100b883a 	mov	r5,r2
   46648:	e009883a 	mov	r4,fp
   4664c:	00499700 	call	49970 <__pow5mult>
   46650:	d9800317 	ldw	r6,12(sp)
   46654:	102b883a 	mov	r21,r2
   46658:	b981810e 	bge	r23,r6,46c60 <_dtoa_r+0x10a4>
   4665c:	0027883a 	mov	r19,zero
   46660:	a8800417 	ldw	r2,16(r21)
   46664:	05c00804 	movi	r23,32
   46668:	10800104 	addi	r2,r2,4
   4666c:	1085883a 	add	r2,r2,r2
   46670:	1085883a 	add	r2,r2,r2
   46674:	a885883a 	add	r2,r21,r2
   46678:	11000017 	ldw	r4,0(r2)
   4667c:	00495900 	call	49590 <__hi0bits>
   46680:	b885c83a 	sub	r2,r23,r2
   46684:	1585883a 	add	r2,r2,r22
   46688:	108007cc 	andi	r2,r2,31
   4668c:	1000b326 	beq	r2,zero,4695c <_dtoa_r+0xda0>
   46690:	00c00804 	movi	r3,32
   46694:	1887c83a 	sub	r3,r3,r2
   46698:	01000104 	movi	r4,4
   4669c:	20c2cd0e 	bge	r4,r3,471d4 <_dtoa_r+0x1618>
   466a0:	00c00704 	movi	r3,28
   466a4:	1885c83a 	sub	r2,r3,r2
   466a8:	d8c00817 	ldw	r3,32(sp)
   466ac:	a0a9883a 	add	r20,r20,r2
   466b0:	b0ad883a 	add	r22,r22,r2
   466b4:	1887883a 	add	r3,r3,r2
   466b8:	d8c00815 	stw	r3,32(sp)
   466bc:	d9800817 	ldw	r6,32(sp)
   466c0:	0180040e 	bge	zero,r6,466d4 <_dtoa_r+0xb18>
   466c4:	800b883a 	mov	r5,r16
   466c8:	e009883a 	mov	r4,fp
   466cc:	0049ab00 	call	49ab0 <__lshift>
   466d0:	1021883a 	mov	r16,r2
   466d4:	0580050e 	bge	zero,r22,466ec <_dtoa_r+0xb30>
   466d8:	a80b883a 	mov	r5,r21
   466dc:	b00d883a 	mov	r6,r22
   466e0:	e009883a 	mov	r4,fp
   466e4:	0049ab00 	call	49ab0 <__lshift>
   466e8:	102b883a 	mov	r21,r2
   466ec:	d9c00e17 	ldw	r7,56(sp)
   466f0:	3801211e 	bne	r7,zero,46b78 <_dtoa_r+0xfbc>
   466f4:	d9800617 	ldw	r6,24(sp)
   466f8:	0181380e 	bge	zero,r6,46bdc <_dtoa_r+0x1020>
   466fc:	d8c00b17 	ldw	r3,44(sp)
   46700:	1800ab1e 	bne	r3,zero,469b0 <_dtoa_r+0xdf4>
   46704:	dc800717 	ldw	r18,28(sp)
   46708:	dcc00617 	ldw	r19,24(sp)
   4670c:	9029883a 	mov	r20,r18
   46710:	00000206 	br	4671c <_dtoa_r+0xb60>
   46714:	00493440 	call	49344 <__multadd>
   46718:	1021883a 	mov	r16,r2
   4671c:	a80b883a 	mov	r5,r21
   46720:	8009883a 	mov	r4,r16
   46724:	00459940 	call	45994 <quorem>
   46728:	10800c04 	addi	r2,r2,48
   4672c:	90800005 	stb	r2,0(r18)
   46730:	94800044 	addi	r18,r18,1
   46734:	9507c83a 	sub	r3,r18,r20
   46738:	000f883a 	mov	r7,zero
   4673c:	01800284 	movi	r6,10
   46740:	800b883a 	mov	r5,r16
   46744:	e009883a 	mov	r4,fp
   46748:	1cfff216 	blt	r3,r19,46714 <__alt_data_end+0xfffd4714>
   4674c:	1011883a 	mov	r8,r2
   46750:	d8800617 	ldw	r2,24(sp)
   46754:	0082370e 	bge	zero,r2,47034 <_dtoa_r+0x1478>
   46758:	d9000717 	ldw	r4,28(sp)
   4675c:	0025883a 	mov	r18,zero
   46760:	20af883a 	add	r23,r4,r2
   46764:	01800044 	movi	r6,1
   46768:	800b883a 	mov	r5,r16
   4676c:	e009883a 	mov	r4,fp
   46770:	da001715 	stw	r8,92(sp)
   46774:	0049ab00 	call	49ab0 <__lshift>
   46778:	a80b883a 	mov	r5,r21
   4677c:	1009883a 	mov	r4,r2
   46780:	d8800915 	stw	r2,36(sp)
   46784:	0049bf80 	call	49bf8 <__mcmp>
   46788:	da001717 	ldw	r8,92(sp)
   4678c:	0081800e 	bge	zero,r2,46d90 <_dtoa_r+0x11d4>
   46790:	b93fffc3 	ldbu	r4,-1(r23)
   46794:	b8bfffc4 	addi	r2,r23,-1
   46798:	1007883a 	mov	r3,r2
   4679c:	01800e44 	movi	r6,57
   467a0:	d9c00717 	ldw	r7,28(sp)
   467a4:	00000506 	br	467bc <_dtoa_r+0xc00>
   467a8:	18ffffc4 	addi	r3,r3,-1
   467ac:	11c12326 	beq	r2,r7,46c3c <_dtoa_r+0x1080>
   467b0:	19000003 	ldbu	r4,0(r3)
   467b4:	102f883a 	mov	r23,r2
   467b8:	10bfffc4 	addi	r2,r2,-1
   467bc:	21403fcc 	andi	r5,r4,255
   467c0:	2940201c 	xori	r5,r5,128
   467c4:	297fe004 	addi	r5,r5,-128
   467c8:	29bff726 	beq	r5,r6,467a8 <__alt_data_end+0xfffd47a8>
   467cc:	21000044 	addi	r4,r4,1
   467d0:	11000005 	stb	r4,0(r2)
   467d4:	a80b883a 	mov	r5,r21
   467d8:	e009883a 	mov	r4,fp
   467dc:	004931c0 	call	4931c <_Bfree>
   467e0:	883ea026 	beq	r17,zero,46264 <__alt_data_end+0xfffd4264>
   467e4:	90000426 	beq	r18,zero,467f8 <_dtoa_r+0xc3c>
   467e8:	94400326 	beq	r18,r17,467f8 <_dtoa_r+0xc3c>
   467ec:	900b883a 	mov	r5,r18
   467f0:	e009883a 	mov	r4,fp
   467f4:	004931c0 	call	4931c <_Bfree>
   467f8:	880b883a 	mov	r5,r17
   467fc:	e009883a 	mov	r4,fp
   46800:	004931c0 	call	4931c <_Bfree>
   46804:	003e9706 	br	46264 <__alt_data_end+0xfffd4264>
   46808:	01800044 	movi	r6,1
   4680c:	d9800e15 	stw	r6,56(sp)
   46810:	003d9606 	br	45e6c <__alt_data_end+0xfffd3e6c>
   46814:	d8800817 	ldw	r2,32(sp)
   46818:	d8c00517 	ldw	r3,20(sp)
   4681c:	d8000d15 	stw	zero,52(sp)
   46820:	10c5c83a 	sub	r2,r2,r3
   46824:	00c9c83a 	sub	r4,zero,r3
   46828:	d8800815 	stw	r2,32(sp)
   4682c:	d9000a15 	stw	r4,40(sp)
   46830:	003d9706 	br	45e90 <__alt_data_end+0xfffd3e90>
   46834:	05adc83a 	sub	r22,zero,r22
   46838:	dd800815 	stw	r22,32(sp)
   4683c:	002d883a 	mov	r22,zero
   46840:	003d8e06 	br	45e7c <__alt_data_end+0xfffd3e7c>
   46844:	d9000517 	ldw	r4,20(sp)
   46848:	00515080 	call	51508 <__floatsidf>
   4684c:	100d883a 	mov	r6,r2
   46850:	180f883a 	mov	r7,r3
   46854:	a009883a 	mov	r4,r20
   46858:	880b883a 	mov	r5,r17
   4685c:	00500c80 	call	500c8 <__eqdf2>
   46860:	103d7126 	beq	r2,zero,45e28 <__alt_data_end+0xfffd3e28>
   46864:	d9c00517 	ldw	r7,20(sp)
   46868:	39ffffc4 	addi	r7,r7,-1
   4686c:	d9c00515 	stw	r7,20(sp)
   46870:	003d6d06 	br	45e28 <__alt_data_end+0xfffd3e28>
   46874:	dd400a17 	ldw	r21,40(sp)
   46878:	dd000817 	ldw	r20,32(sp)
   4687c:	0023883a 	mov	r17,zero
   46880:	003f4806 	br	465a4 <__alt_data_end+0xfffd45a4>
   46884:	10e3c83a 	sub	r17,r2,r3
   46888:	9448983a 	sll	r4,r18,r17
   4688c:	003d3206 	br	45d58 <__alt_data_end+0xfffd3d58>
   46890:	d8000e15 	stw	zero,56(sp)
   46894:	003d7506 	br	45e6c <__alt_data_end+0xfffd3e6c>
   46898:	b005883a 	mov	r2,r22
   4689c:	003f4506 	br	465b4 <__alt_data_end+0xfffd45b4>
   468a0:	dc000915 	stw	r16,36(sp)
   468a4:	d9800a17 	ldw	r6,40(sp)
   468a8:	d9400917 	ldw	r5,36(sp)
   468ac:	e009883a 	mov	r4,fp
   468b0:	00499700 	call	49970 <__pow5mult>
   468b4:	1021883a 	mov	r16,r2
   468b8:	003f5a06 	br	46624 <__alt_data_end+0xfffd4624>
   468bc:	01c00044 	movi	r7,1
   468c0:	d9c00b15 	stw	r7,44(sp)
   468c4:	d8802217 	ldw	r2,136(sp)
   468c8:	0081280e 	bge	zero,r2,46d6c <_dtoa_r+0x11b0>
   468cc:	100d883a 	mov	r6,r2
   468d0:	1021883a 	mov	r16,r2
   468d4:	d8800c15 	stw	r2,48(sp)
   468d8:	d8800615 	stw	r2,24(sp)
   468dc:	003d8806 	br	45f00 <__alt_data_end+0xfffd3f00>
   468e0:	d8800617 	ldw	r2,24(sp)
   468e4:	00be9b16 	blt	zero,r2,46354 <__alt_data_end+0xfffd4354>
   468e8:	10010f1e 	bne	r2,zero,46d28 <_dtoa_r+0x116c>
   468ec:	880b883a 	mov	r5,r17
   468f0:	000d883a 	mov	r6,zero
   468f4:	01d00534 	movhi	r7,16404
   468f8:	8009883a 	mov	r4,r16
   468fc:	00503200 	call	50320 <__muldf3>
   46900:	900d883a 	mov	r6,r18
   46904:	980f883a 	mov	r7,r19
   46908:	1009883a 	mov	r4,r2
   4690c:	180b883a 	mov	r5,r3
   46910:	00501500 	call	50150 <__gedf2>
   46914:	002b883a 	mov	r21,zero
   46918:	0023883a 	mov	r17,zero
   4691c:	1000bf16 	blt	r2,zero,46c1c <_dtoa_r+0x1060>
   46920:	d9802217 	ldw	r6,136(sp)
   46924:	ddc00717 	ldw	r23,28(sp)
   46928:	018c303a 	nor	r6,zero,r6
   4692c:	d9800515 	stw	r6,20(sp)
   46930:	a80b883a 	mov	r5,r21
   46934:	e009883a 	mov	r4,fp
   46938:	004931c0 	call	4931c <_Bfree>
   4693c:	883e4926 	beq	r17,zero,46264 <__alt_data_end+0xfffd4264>
   46940:	003fad06 	br	467f8 <__alt_data_end+0xfffd47f8>
   46944:	d9c01117 	ldw	r7,68(sp)
   46948:	3801bc26 	beq	r7,zero,4703c <_dtoa_r+0x1480>
   4694c:	10810cc4 	addi	r2,r2,1075
   46950:	dd400a17 	ldw	r21,40(sp)
   46954:	dd000817 	ldw	r20,32(sp)
   46958:	003f0a06 	br	46584 <__alt_data_end+0xfffd4584>
   4695c:	00800704 	movi	r2,28
   46960:	d9000817 	ldw	r4,32(sp)
   46964:	a0a9883a 	add	r20,r20,r2
   46968:	b0ad883a 	add	r22,r22,r2
   4696c:	2089883a 	add	r4,r4,r2
   46970:	d9000815 	stw	r4,32(sp)
   46974:	003f5106 	br	466bc <__alt_data_end+0xfffd46bc>
   46978:	d8c00317 	ldw	r3,12(sp)
   4697c:	b8c1fc0e 	bge	r23,r3,47170 <_dtoa_r+0x15b4>
   46980:	0027883a 	mov	r19,zero
   46984:	b805883a 	mov	r2,r23
   46988:	003f3e06 	br	46684 <__alt_data_end+0xfffd4684>
   4698c:	880b883a 	mov	r5,r17
   46990:	e009883a 	mov	r4,fp
   46994:	000f883a 	mov	r7,zero
   46998:	01800284 	movi	r6,10
   4699c:	00493440 	call	49344 <__multadd>
   469a0:	d9000c17 	ldw	r4,48(sp)
   469a4:	1023883a 	mov	r17,r2
   469a8:	0102040e 	bge	zero,r4,471bc <_dtoa_r+0x1600>
   469ac:	d9000615 	stw	r4,24(sp)
   469b0:	0500050e 	bge	zero,r20,469c8 <_dtoa_r+0xe0c>
   469b4:	880b883a 	mov	r5,r17
   469b8:	a00d883a 	mov	r6,r20
   469bc:	e009883a 	mov	r4,fp
   469c0:	0049ab00 	call	49ab0 <__lshift>
   469c4:	1023883a 	mov	r17,r2
   469c8:	9801241e 	bne	r19,zero,46e5c <_dtoa_r+0x12a0>
   469cc:	8829883a 	mov	r20,r17
   469d0:	d9000617 	ldw	r4,24(sp)
   469d4:	dcc00717 	ldw	r19,28(sp)
   469d8:	9480004c 	andi	r18,r18,1
   469dc:	20bfffc4 	addi	r2,r4,-1
   469e0:	9885883a 	add	r2,r19,r2
   469e4:	d8800415 	stw	r2,16(sp)
   469e8:	dc800615 	stw	r18,24(sp)
   469ec:	a80b883a 	mov	r5,r21
   469f0:	8009883a 	mov	r4,r16
   469f4:	00459940 	call	45994 <quorem>
   469f8:	880b883a 	mov	r5,r17
   469fc:	8009883a 	mov	r4,r16
   46a00:	102f883a 	mov	r23,r2
   46a04:	0049bf80 	call	49bf8 <__mcmp>
   46a08:	a80b883a 	mov	r5,r21
   46a0c:	a00d883a 	mov	r6,r20
   46a10:	e009883a 	mov	r4,fp
   46a14:	102d883a 	mov	r22,r2
   46a18:	0049c580 	call	49c58 <__mdiff>
   46a1c:	1007883a 	mov	r3,r2
   46a20:	10800317 	ldw	r2,12(r2)
   46a24:	bc800c04 	addi	r18,r23,48
   46a28:	180b883a 	mov	r5,r3
   46a2c:	10004e1e 	bne	r2,zero,46b68 <_dtoa_r+0xfac>
   46a30:	8009883a 	mov	r4,r16
   46a34:	d8c01615 	stw	r3,88(sp)
   46a38:	0049bf80 	call	49bf8 <__mcmp>
   46a3c:	d8c01617 	ldw	r3,88(sp)
   46a40:	e009883a 	mov	r4,fp
   46a44:	d8801615 	stw	r2,88(sp)
   46a48:	180b883a 	mov	r5,r3
   46a4c:	004931c0 	call	4931c <_Bfree>
   46a50:	d8801617 	ldw	r2,88(sp)
   46a54:	1000041e 	bne	r2,zero,46a68 <_dtoa_r+0xeac>
   46a58:	d9800317 	ldw	r6,12(sp)
   46a5c:	3000021e 	bne	r6,zero,46a68 <_dtoa_r+0xeac>
   46a60:	d8c00617 	ldw	r3,24(sp)
   46a64:	18003726 	beq	r3,zero,46b44 <_dtoa_r+0xf88>
   46a68:	b0002016 	blt	r22,zero,46aec <_dtoa_r+0xf30>
   46a6c:	b000041e 	bne	r22,zero,46a80 <_dtoa_r+0xec4>
   46a70:	d9000317 	ldw	r4,12(sp)
   46a74:	2000021e 	bne	r4,zero,46a80 <_dtoa_r+0xec4>
   46a78:	d8c00617 	ldw	r3,24(sp)
   46a7c:	18001b26 	beq	r3,zero,46aec <_dtoa_r+0xf30>
   46a80:	00810716 	blt	zero,r2,46ea0 <_dtoa_r+0x12e4>
   46a84:	d8c00417 	ldw	r3,16(sp)
   46a88:	9d800044 	addi	r22,r19,1
   46a8c:	9c800005 	stb	r18,0(r19)
   46a90:	b02f883a 	mov	r23,r22
   46a94:	98c10626 	beq	r19,r3,46eb0 <_dtoa_r+0x12f4>
   46a98:	800b883a 	mov	r5,r16
   46a9c:	000f883a 	mov	r7,zero
   46aa0:	01800284 	movi	r6,10
   46aa4:	e009883a 	mov	r4,fp
   46aa8:	00493440 	call	49344 <__multadd>
   46aac:	1021883a 	mov	r16,r2
   46ab0:	000f883a 	mov	r7,zero
   46ab4:	01800284 	movi	r6,10
   46ab8:	880b883a 	mov	r5,r17
   46abc:	e009883a 	mov	r4,fp
   46ac0:	8d002526 	beq	r17,r20,46b58 <_dtoa_r+0xf9c>
   46ac4:	00493440 	call	49344 <__multadd>
   46ac8:	a00b883a 	mov	r5,r20
   46acc:	000f883a 	mov	r7,zero
   46ad0:	01800284 	movi	r6,10
   46ad4:	e009883a 	mov	r4,fp
   46ad8:	1023883a 	mov	r17,r2
   46adc:	00493440 	call	49344 <__multadd>
   46ae0:	1029883a 	mov	r20,r2
   46ae4:	b027883a 	mov	r19,r22
   46ae8:	003fc006 	br	469ec <__alt_data_end+0xfffd49ec>
   46aec:	9011883a 	mov	r8,r18
   46af0:	00800e0e 	bge	zero,r2,46b2c <_dtoa_r+0xf70>
   46af4:	800b883a 	mov	r5,r16
   46af8:	01800044 	movi	r6,1
   46afc:	e009883a 	mov	r4,fp
   46b00:	da001715 	stw	r8,92(sp)
   46b04:	0049ab00 	call	49ab0 <__lshift>
   46b08:	a80b883a 	mov	r5,r21
   46b0c:	1009883a 	mov	r4,r2
   46b10:	1021883a 	mov	r16,r2
   46b14:	0049bf80 	call	49bf8 <__mcmp>
   46b18:	da001717 	ldw	r8,92(sp)
   46b1c:	0081960e 	bge	zero,r2,47178 <_dtoa_r+0x15bc>
   46b20:	00800e44 	movi	r2,57
   46b24:	40817026 	beq	r8,r2,470e8 <_dtoa_r+0x152c>
   46b28:	ba000c44 	addi	r8,r23,49
   46b2c:	8825883a 	mov	r18,r17
   46b30:	9dc00044 	addi	r23,r19,1
   46b34:	9a000005 	stb	r8,0(r19)
   46b38:	a023883a 	mov	r17,r20
   46b3c:	dc000915 	stw	r16,36(sp)
   46b40:	003f2406 	br	467d4 <__alt_data_end+0xfffd47d4>
   46b44:	00800e44 	movi	r2,57
   46b48:	9011883a 	mov	r8,r18
   46b4c:	90816626 	beq	r18,r2,470e8 <_dtoa_r+0x152c>
   46b50:	05bff516 	blt	zero,r22,46b28 <__alt_data_end+0xfffd4b28>
   46b54:	003ff506 	br	46b2c <__alt_data_end+0xfffd4b2c>
   46b58:	00493440 	call	49344 <__multadd>
   46b5c:	1023883a 	mov	r17,r2
   46b60:	1029883a 	mov	r20,r2
   46b64:	003fdf06 	br	46ae4 <__alt_data_end+0xfffd4ae4>
   46b68:	e009883a 	mov	r4,fp
   46b6c:	004931c0 	call	4931c <_Bfree>
   46b70:	00800044 	movi	r2,1
   46b74:	003fbc06 	br	46a68 <__alt_data_end+0xfffd4a68>
   46b78:	a80b883a 	mov	r5,r21
   46b7c:	8009883a 	mov	r4,r16
   46b80:	0049bf80 	call	49bf8 <__mcmp>
   46b84:	103edb0e 	bge	r2,zero,466f4 <__alt_data_end+0xfffd46f4>
   46b88:	800b883a 	mov	r5,r16
   46b8c:	000f883a 	mov	r7,zero
   46b90:	01800284 	movi	r6,10
   46b94:	e009883a 	mov	r4,fp
   46b98:	00493440 	call	49344 <__multadd>
   46b9c:	1021883a 	mov	r16,r2
   46ba0:	d8800517 	ldw	r2,20(sp)
   46ba4:	d8c00b17 	ldw	r3,44(sp)
   46ba8:	10bfffc4 	addi	r2,r2,-1
   46bac:	d8800515 	stw	r2,20(sp)
   46bb0:	183f761e 	bne	r3,zero,4698c <__alt_data_end+0xfffd498c>
   46bb4:	d9000c17 	ldw	r4,48(sp)
   46bb8:	0101730e 	bge	zero,r4,47188 <_dtoa_r+0x15cc>
   46bbc:	d9000615 	stw	r4,24(sp)
   46bc0:	003ed006 	br	46704 <__alt_data_end+0xfffd4704>
   46bc4:	00800084 	movi	r2,2
   46bc8:	3081861e 	bne	r6,r2,471e4 <_dtoa_r+0x1628>
   46bcc:	d8000b15 	stw	zero,44(sp)
   46bd0:	003f3c06 	br	468c4 <__alt_data_end+0xfffd48c4>
   46bd4:	dc000917 	ldw	r16,36(sp)
   46bd8:	003e9206 	br	46624 <__alt_data_end+0xfffd4624>
   46bdc:	d9c00317 	ldw	r7,12(sp)
   46be0:	00800084 	movi	r2,2
   46be4:	11fec50e 	bge	r2,r7,466fc <__alt_data_end+0xfffd46fc>
   46be8:	d9000617 	ldw	r4,24(sp)
   46bec:	20013c1e 	bne	r4,zero,470e0 <_dtoa_r+0x1524>
   46bf0:	a80b883a 	mov	r5,r21
   46bf4:	000f883a 	mov	r7,zero
   46bf8:	01800144 	movi	r6,5
   46bfc:	e009883a 	mov	r4,fp
   46c00:	00493440 	call	49344 <__multadd>
   46c04:	100b883a 	mov	r5,r2
   46c08:	8009883a 	mov	r4,r16
   46c0c:	102b883a 	mov	r21,r2
   46c10:	0049bf80 	call	49bf8 <__mcmp>
   46c14:	dc000915 	stw	r16,36(sp)
   46c18:	00bf410e 	bge	zero,r2,46920 <__alt_data_end+0xfffd4920>
   46c1c:	d9c00717 	ldw	r7,28(sp)
   46c20:	00800c44 	movi	r2,49
   46c24:	38800005 	stb	r2,0(r7)
   46c28:	d8800517 	ldw	r2,20(sp)
   46c2c:	3dc00044 	addi	r23,r7,1
   46c30:	10800044 	addi	r2,r2,1
   46c34:	d8800515 	stw	r2,20(sp)
   46c38:	003f3d06 	br	46930 <__alt_data_end+0xfffd4930>
   46c3c:	d9800517 	ldw	r6,20(sp)
   46c40:	d9c00717 	ldw	r7,28(sp)
   46c44:	00800c44 	movi	r2,49
   46c48:	31800044 	addi	r6,r6,1
   46c4c:	d9800515 	stw	r6,20(sp)
   46c50:	38800005 	stb	r2,0(r7)
   46c54:	003edf06 	br	467d4 <__alt_data_end+0xfffd47d4>
   46c58:	d8000b15 	stw	zero,44(sp)
   46c5c:	003c9f06 	br	45edc <__alt_data_end+0xfffd3edc>
   46c60:	903e7e1e 	bne	r18,zero,4665c <__alt_data_end+0xfffd465c>
   46c64:	00800434 	movhi	r2,16
   46c68:	10bfffc4 	addi	r2,r2,-1
   46c6c:	9884703a 	and	r2,r19,r2
   46c70:	1000ea1e 	bne	r2,zero,4701c <_dtoa_r+0x1460>
   46c74:	9cdffc2c 	andhi	r19,r19,32752
   46c78:	9800e826 	beq	r19,zero,4701c <_dtoa_r+0x1460>
   46c7c:	d9c00817 	ldw	r7,32(sp)
   46c80:	b5800044 	addi	r22,r22,1
   46c84:	04c00044 	movi	r19,1
   46c88:	39c00044 	addi	r7,r7,1
   46c8c:	d9c00815 	stw	r7,32(sp)
   46c90:	d8800d17 	ldw	r2,52(sp)
   46c94:	103e721e 	bne	r2,zero,46660 <__alt_data_end+0xfffd4660>
   46c98:	00800044 	movi	r2,1
   46c9c:	003e7906 	br	46684 <__alt_data_end+0xfffd4684>
   46ca0:	8009883a 	mov	r4,r16
   46ca4:	00515080 	call	51508 <__floatsidf>
   46ca8:	d9800f17 	ldw	r6,60(sp)
   46cac:	d9c01017 	ldw	r7,64(sp)
   46cb0:	1009883a 	mov	r4,r2
   46cb4:	180b883a 	mov	r5,r3
   46cb8:	00503200 	call	50320 <__muldf3>
   46cbc:	000d883a 	mov	r6,zero
   46cc0:	01d00734 	movhi	r7,16412
   46cc4:	1009883a 	mov	r4,r2
   46cc8:	180b883a 	mov	r5,r3
   46ccc:	004ee4c0 	call	4ee4c <__adddf3>
   46cd0:	047f3034 	movhi	r17,64704
   46cd4:	1021883a 	mov	r16,r2
   46cd8:	1c63883a 	add	r17,r3,r17
   46cdc:	d9000f17 	ldw	r4,60(sp)
   46ce0:	d9401017 	ldw	r5,64(sp)
   46ce4:	000d883a 	mov	r6,zero
   46ce8:	01d00534 	movhi	r7,16404
   46cec:	0050b8c0 	call	50b8c <__subdf3>
   46cf0:	800d883a 	mov	r6,r16
   46cf4:	880f883a 	mov	r7,r17
   46cf8:	1009883a 	mov	r4,r2
   46cfc:	180b883a 	mov	r5,r3
   46d00:	102b883a 	mov	r21,r2
   46d04:	1829883a 	mov	r20,r3
   46d08:	00501500 	call	50150 <__gedf2>
   46d0c:	00806c16 	blt	zero,r2,46ec0 <_dtoa_r+0x1304>
   46d10:	89e0003c 	xorhi	r7,r17,32768
   46d14:	800d883a 	mov	r6,r16
   46d18:	a809883a 	mov	r4,r21
   46d1c:	a00b883a 	mov	r5,r20
   46d20:	005022c0 	call	5022c <__ledf2>
   46d24:	103d7e0e 	bge	r2,zero,46320 <__alt_data_end+0xfffd4320>
   46d28:	002b883a 	mov	r21,zero
   46d2c:	0023883a 	mov	r17,zero
   46d30:	003efb06 	br	46920 <__alt_data_end+0xfffd4920>
   46d34:	d8800717 	ldw	r2,28(sp)
   46d38:	003bd006 	br	45c7c <__alt_data_end+0xfffd3c7c>
   46d3c:	d9000a17 	ldw	r4,40(sp)
   46d40:	d9800d17 	ldw	r6,52(sp)
   46d44:	dd400a15 	stw	r21,40(sp)
   46d48:	a905c83a 	sub	r2,r21,r4
   46d4c:	308d883a 	add	r6,r6,r2
   46d50:	d9800d15 	stw	r6,52(sp)
   46d54:	002b883a 	mov	r21,zero
   46d58:	003e0606 	br	46574 <__alt_data_end+0xfffd4574>
   46d5c:	9023883a 	mov	r17,r18
   46d60:	9829883a 	mov	r20,r19
   46d64:	04000084 	movi	r16,2
   46d68:	003c9206 	br	45fb4 <__alt_data_end+0xfffd3fb4>
   46d6c:	04000044 	movi	r16,1
   46d70:	dc000c15 	stw	r16,48(sp)
   46d74:	dc000615 	stw	r16,24(sp)
   46d78:	dc002215 	stw	r16,136(sp)
   46d7c:	e0001115 	stw	zero,68(fp)
   46d80:	000b883a 	mov	r5,zero
   46d84:	003c6906 	br	45f2c <__alt_data_end+0xfffd3f2c>
   46d88:	3021883a 	mov	r16,r6
   46d8c:	003ffb06 	br	46d7c <__alt_data_end+0xfffd4d7c>
   46d90:	1000021e 	bne	r2,zero,46d9c <_dtoa_r+0x11e0>
   46d94:	4200004c 	andi	r8,r8,1
   46d98:	403e7d1e 	bne	r8,zero,46790 <__alt_data_end+0xfffd4790>
   46d9c:	01000c04 	movi	r4,48
   46da0:	00000106 	br	46da8 <_dtoa_r+0x11ec>
   46da4:	102f883a 	mov	r23,r2
   46da8:	b8bfffc4 	addi	r2,r23,-1
   46dac:	10c00007 	ldb	r3,0(r2)
   46db0:	193ffc26 	beq	r3,r4,46da4 <__alt_data_end+0xfffd4da4>
   46db4:	003e8706 	br	467d4 <__alt_data_end+0xfffd47d4>
   46db8:	d8800517 	ldw	r2,20(sp)
   46dbc:	00a3c83a 	sub	r17,zero,r2
   46dc0:	8800a426 	beq	r17,zero,47054 <_dtoa_r+0x1498>
   46dc4:	888003cc 	andi	r2,r17,15
   46dc8:	100490fa 	slli	r2,r2,3
   46dcc:	00c00174 	movhi	r3,5
   46dd0:	18d81404 	addi	r3,r3,24656
   46dd4:	1885883a 	add	r2,r3,r2
   46dd8:	11800017 	ldw	r6,0(r2)
   46ddc:	11c00117 	ldw	r7,4(r2)
   46de0:	9009883a 	mov	r4,r18
   46de4:	980b883a 	mov	r5,r19
   46de8:	8823d13a 	srai	r17,r17,4
   46dec:	00503200 	call	50320 <__muldf3>
   46df0:	d8800f15 	stw	r2,60(sp)
   46df4:	d8c01015 	stw	r3,64(sp)
   46df8:	8800e826 	beq	r17,zero,4719c <_dtoa_r+0x15e0>
   46dfc:	05000174 	movhi	r20,5
   46e00:	a5180a04 	addi	r20,r20,24616
   46e04:	04000084 	movi	r16,2
   46e08:	8980004c 	andi	r6,r17,1
   46e0c:	1009883a 	mov	r4,r2
   46e10:	8823d07a 	srai	r17,r17,1
   46e14:	180b883a 	mov	r5,r3
   46e18:	30000426 	beq	r6,zero,46e2c <_dtoa_r+0x1270>
   46e1c:	a1800017 	ldw	r6,0(r20)
   46e20:	a1c00117 	ldw	r7,4(r20)
   46e24:	84000044 	addi	r16,r16,1
   46e28:	00503200 	call	50320 <__muldf3>
   46e2c:	a5000204 	addi	r20,r20,8
   46e30:	883ff51e 	bne	r17,zero,46e08 <__alt_data_end+0xfffd4e08>
   46e34:	d8800f15 	stw	r2,60(sp)
   46e38:	d8c01015 	stw	r3,64(sp)
   46e3c:	003c7606 	br	46018 <__alt_data_end+0xfffd4018>
   46e40:	00c00c04 	movi	r3,48
   46e44:	10c00005 	stb	r3,0(r2)
   46e48:	d8c00517 	ldw	r3,20(sp)
   46e4c:	bd3fffc3 	ldbu	r20,-1(r23)
   46e50:	18c00044 	addi	r3,r3,1
   46e54:	d8c00515 	stw	r3,20(sp)
   46e58:	003db906 	br	46540 <__alt_data_end+0xfffd4540>
   46e5c:	89400117 	ldw	r5,4(r17)
   46e60:	e009883a 	mov	r4,fp
   46e64:	00492740 	call	49274 <_Balloc>
   46e68:	89800417 	ldw	r6,16(r17)
   46e6c:	89400304 	addi	r5,r17,12
   46e70:	11000304 	addi	r4,r2,12
   46e74:	31800084 	addi	r6,r6,2
   46e78:	318d883a 	add	r6,r6,r6
   46e7c:	318d883a 	add	r6,r6,r6
   46e80:	1027883a 	mov	r19,r2
   46e84:	0048ea80 	call	48ea8 <memcpy>
   46e88:	01800044 	movi	r6,1
   46e8c:	980b883a 	mov	r5,r19
   46e90:	e009883a 	mov	r4,fp
   46e94:	0049ab00 	call	49ab0 <__lshift>
   46e98:	1029883a 	mov	r20,r2
   46e9c:	003ecc06 	br	469d0 <__alt_data_end+0xfffd49d0>
   46ea0:	00800e44 	movi	r2,57
   46ea4:	90809026 	beq	r18,r2,470e8 <_dtoa_r+0x152c>
   46ea8:	92000044 	addi	r8,r18,1
   46eac:	003f1f06 	br	46b2c <__alt_data_end+0xfffd4b2c>
   46eb0:	9011883a 	mov	r8,r18
   46eb4:	8825883a 	mov	r18,r17
   46eb8:	a023883a 	mov	r17,r20
   46ebc:	003e2906 	br	46764 <__alt_data_end+0xfffd4764>
   46ec0:	002b883a 	mov	r21,zero
   46ec4:	0023883a 	mov	r17,zero
   46ec8:	003f5406 	br	46c1c <__alt_data_end+0xfffd4c1c>
   46ecc:	61bfffc4 	addi	r6,r12,-1
   46ed0:	300490fa 	slli	r2,r6,3
   46ed4:	00c00174 	movhi	r3,5
   46ed8:	18d81404 	addi	r3,r3,24656
   46edc:	1885883a 	add	r2,r3,r2
   46ee0:	11000017 	ldw	r4,0(r2)
   46ee4:	11400117 	ldw	r5,4(r2)
   46ee8:	d8800717 	ldw	r2,28(sp)
   46eec:	880f883a 	mov	r7,r17
   46ef0:	d9801215 	stw	r6,72(sp)
   46ef4:	800d883a 	mov	r6,r16
   46ef8:	db001615 	stw	r12,88(sp)
   46efc:	15c00044 	addi	r23,r2,1
   46f00:	00503200 	call	50320 <__muldf3>
   46f04:	d9401017 	ldw	r5,64(sp)
   46f08:	d9000f17 	ldw	r4,60(sp)
   46f0c:	d8c01515 	stw	r3,84(sp)
   46f10:	d8801415 	stw	r2,80(sp)
   46f14:	00514880 	call	51488 <__fixdfsi>
   46f18:	1009883a 	mov	r4,r2
   46f1c:	1021883a 	mov	r16,r2
   46f20:	00515080 	call	51508 <__floatsidf>
   46f24:	d9000f17 	ldw	r4,60(sp)
   46f28:	d9401017 	ldw	r5,64(sp)
   46f2c:	100d883a 	mov	r6,r2
   46f30:	180f883a 	mov	r7,r3
   46f34:	0050b8c0 	call	50b8c <__subdf3>
   46f38:	1829883a 	mov	r20,r3
   46f3c:	d8c00717 	ldw	r3,28(sp)
   46f40:	84000c04 	addi	r16,r16,48
   46f44:	1023883a 	mov	r17,r2
   46f48:	1c000005 	stb	r16,0(r3)
   46f4c:	db001617 	ldw	r12,88(sp)
   46f50:	00800044 	movi	r2,1
   46f54:	60802226 	beq	r12,r2,46fe0 <_dtoa_r+0x1424>
   46f58:	d9c00717 	ldw	r7,28(sp)
   46f5c:	8805883a 	mov	r2,r17
   46f60:	b82b883a 	mov	r21,r23
   46f64:	3b19883a 	add	r12,r7,r12
   46f68:	6023883a 	mov	r17,r12
   46f6c:	a007883a 	mov	r3,r20
   46f70:	dc800f15 	stw	r18,60(sp)
   46f74:	000d883a 	mov	r6,zero
   46f78:	01d00934 	movhi	r7,16420
   46f7c:	1009883a 	mov	r4,r2
   46f80:	180b883a 	mov	r5,r3
   46f84:	00503200 	call	50320 <__muldf3>
   46f88:	180b883a 	mov	r5,r3
   46f8c:	1009883a 	mov	r4,r2
   46f90:	1829883a 	mov	r20,r3
   46f94:	1025883a 	mov	r18,r2
   46f98:	00514880 	call	51488 <__fixdfsi>
   46f9c:	1009883a 	mov	r4,r2
   46fa0:	1021883a 	mov	r16,r2
   46fa4:	00515080 	call	51508 <__floatsidf>
   46fa8:	100d883a 	mov	r6,r2
   46fac:	180f883a 	mov	r7,r3
   46fb0:	9009883a 	mov	r4,r18
   46fb4:	a00b883a 	mov	r5,r20
   46fb8:	84000c04 	addi	r16,r16,48
   46fbc:	0050b8c0 	call	50b8c <__subdf3>
   46fc0:	ad400044 	addi	r21,r21,1
   46fc4:	ac3fffc5 	stb	r16,-1(r21)
   46fc8:	ac7fea1e 	bne	r21,r17,46f74 <__alt_data_end+0xfffd4f74>
   46fcc:	1023883a 	mov	r17,r2
   46fd0:	d8801217 	ldw	r2,72(sp)
   46fd4:	dc800f17 	ldw	r18,60(sp)
   46fd8:	1829883a 	mov	r20,r3
   46fdc:	b8af883a 	add	r23,r23,r2
   46fe0:	d9001417 	ldw	r4,80(sp)
   46fe4:	d9401517 	ldw	r5,84(sp)
   46fe8:	000d883a 	mov	r6,zero
   46fec:	01cff834 	movhi	r7,16352
   46ff0:	004ee4c0 	call	4ee4c <__adddf3>
   46ff4:	880d883a 	mov	r6,r17
   46ff8:	a00f883a 	mov	r7,r20
   46ffc:	1009883a 	mov	r4,r2
   47000:	180b883a 	mov	r5,r3
   47004:	005022c0 	call	5022c <__ledf2>
   47008:	10003e0e 	bge	r2,zero,47104 <_dtoa_r+0x1548>
   4700c:	d9001317 	ldw	r4,76(sp)
   47010:	bd3fffc3 	ldbu	r20,-1(r23)
   47014:	d9000515 	stw	r4,20(sp)
   47018:	003d3b06 	br	46508 <__alt_data_end+0xfffd4508>
   4701c:	0027883a 	mov	r19,zero
   47020:	003f1b06 	br	46c90 <__alt_data_end+0xfffd4c90>
   47024:	d8800817 	ldw	r2,32(sp)
   47028:	11e9c83a 	sub	r20,r2,r7
   4702c:	0005883a 	mov	r2,zero
   47030:	003d5406 	br	46584 <__alt_data_end+0xfffd4584>
   47034:	00800044 	movi	r2,1
   47038:	003dc706 	br	46758 <__alt_data_end+0xfffd4758>
   4703c:	d8c00217 	ldw	r3,8(sp)
   47040:	00800d84 	movi	r2,54
   47044:	dd400a17 	ldw	r21,40(sp)
   47048:	10c5c83a 	sub	r2,r2,r3
   4704c:	dd000817 	ldw	r20,32(sp)
   47050:	003d4c06 	br	46584 <__alt_data_end+0xfffd4584>
   47054:	dc800f15 	stw	r18,60(sp)
   47058:	dcc01015 	stw	r19,64(sp)
   4705c:	04000084 	movi	r16,2
   47060:	003bed06 	br	46018 <__alt_data_end+0xfffd4018>
   47064:	d9000617 	ldw	r4,24(sp)
   47068:	203f0d26 	beq	r4,zero,46ca0 <__alt_data_end+0xfffd4ca0>
   4706c:	d9800c17 	ldw	r6,48(sp)
   47070:	01bcab0e 	bge	zero,r6,46320 <__alt_data_end+0xfffd4320>
   47074:	d9401017 	ldw	r5,64(sp)
   47078:	d9000f17 	ldw	r4,60(sp)
   4707c:	000d883a 	mov	r6,zero
   47080:	01d00934 	movhi	r7,16420
   47084:	00503200 	call	50320 <__muldf3>
   47088:	81000044 	addi	r4,r16,1
   4708c:	d8800f15 	stw	r2,60(sp)
   47090:	d8c01015 	stw	r3,64(sp)
   47094:	00515080 	call	51508 <__floatsidf>
   47098:	d9800f17 	ldw	r6,60(sp)
   4709c:	d9c01017 	ldw	r7,64(sp)
   470a0:	1009883a 	mov	r4,r2
   470a4:	180b883a 	mov	r5,r3
   470a8:	00503200 	call	50320 <__muldf3>
   470ac:	01d00734 	movhi	r7,16412
   470b0:	000d883a 	mov	r6,zero
   470b4:	1009883a 	mov	r4,r2
   470b8:	180b883a 	mov	r5,r3
   470bc:	004ee4c0 	call	4ee4c <__adddf3>
   470c0:	d9c00517 	ldw	r7,20(sp)
   470c4:	047f3034 	movhi	r17,64704
   470c8:	1021883a 	mov	r16,r2
   470cc:	39ffffc4 	addi	r7,r7,-1
   470d0:	d9c01315 	stw	r7,76(sp)
   470d4:	1c63883a 	add	r17,r3,r17
   470d8:	db000c17 	ldw	r12,48(sp)
   470dc:	003bea06 	br	46088 <__alt_data_end+0xfffd4088>
   470e0:	dc000915 	stw	r16,36(sp)
   470e4:	003e0e06 	br	46920 <__alt_data_end+0xfffd4920>
   470e8:	01000e44 	movi	r4,57
   470ec:	8825883a 	mov	r18,r17
   470f0:	9dc00044 	addi	r23,r19,1
   470f4:	99000005 	stb	r4,0(r19)
   470f8:	a023883a 	mov	r17,r20
   470fc:	dc000915 	stw	r16,36(sp)
   47100:	003da406 	br	46794 <__alt_data_end+0xfffd4794>
   47104:	d9801417 	ldw	r6,80(sp)
   47108:	d9c01517 	ldw	r7,84(sp)
   4710c:	0009883a 	mov	r4,zero
   47110:	014ff834 	movhi	r5,16352
   47114:	0050b8c0 	call	50b8c <__subdf3>
   47118:	880d883a 	mov	r6,r17
   4711c:	a00f883a 	mov	r7,r20
   47120:	1009883a 	mov	r4,r2
   47124:	180b883a 	mov	r5,r3
   47128:	00501500 	call	50150 <__gedf2>
   4712c:	00bc7c0e 	bge	zero,r2,46320 <__alt_data_end+0xfffd4320>
   47130:	01000c04 	movi	r4,48
   47134:	00000106 	br	4713c <_dtoa_r+0x1580>
   47138:	102f883a 	mov	r23,r2
   4713c:	b8bfffc4 	addi	r2,r23,-1
   47140:	10c00007 	ldb	r3,0(r2)
   47144:	193ffc26 	beq	r3,r4,47138 <__alt_data_end+0xfffd5138>
   47148:	d9801317 	ldw	r6,76(sp)
   4714c:	d9800515 	stw	r6,20(sp)
   47150:	003c4406 	br	46264 <__alt_data_end+0xfffd4264>
   47154:	d9801317 	ldw	r6,76(sp)
   47158:	d9800515 	stw	r6,20(sp)
   4715c:	003cea06 	br	46508 <__alt_data_end+0xfffd4508>
   47160:	dd800f17 	ldw	r22,60(sp)
   47164:	dcc01017 	ldw	r19,64(sp)
   47168:	dc801217 	ldw	r18,72(sp)
   4716c:	003c6c06 	br	46320 <__alt_data_end+0xfffd4320>
   47170:	903e031e 	bne	r18,zero,46980 <__alt_data_end+0xfffd4980>
   47174:	003ebb06 	br	46c64 <__alt_data_end+0xfffd4c64>
   47178:	103e6c1e 	bne	r2,zero,46b2c <__alt_data_end+0xfffd4b2c>
   4717c:	4080004c 	andi	r2,r8,1
   47180:	103e6a26 	beq	r2,zero,46b2c <__alt_data_end+0xfffd4b2c>
   47184:	003e6606 	br	46b20 <__alt_data_end+0xfffd4b20>
   47188:	d8c00317 	ldw	r3,12(sp)
   4718c:	00800084 	movi	r2,2
   47190:	10c02916 	blt	r2,r3,47238 <_dtoa_r+0x167c>
   47194:	d9000c17 	ldw	r4,48(sp)
   47198:	003e8806 	br	46bbc <__alt_data_end+0xfffd4bbc>
   4719c:	04000084 	movi	r16,2
   471a0:	003b9d06 	br	46018 <__alt_data_end+0xfffd4018>
   471a4:	d9001317 	ldw	r4,76(sp)
   471a8:	d9000515 	stw	r4,20(sp)
   471ac:	003cd606 	br	46508 <__alt_data_end+0xfffd4508>
   471b0:	d8801317 	ldw	r2,76(sp)
   471b4:	d8800515 	stw	r2,20(sp)
   471b8:	003c2a06 	br	46264 <__alt_data_end+0xfffd4264>
   471bc:	d9800317 	ldw	r6,12(sp)
   471c0:	00800084 	movi	r2,2
   471c4:	11801516 	blt	r2,r6,4721c <_dtoa_r+0x1660>
   471c8:	d9c00c17 	ldw	r7,48(sp)
   471cc:	d9c00615 	stw	r7,24(sp)
   471d0:	003df706 	br	469b0 <__alt_data_end+0xfffd49b0>
   471d4:	193d3926 	beq	r3,r4,466bc <__alt_data_end+0xfffd46bc>
   471d8:	00c00f04 	movi	r3,60
   471dc:	1885c83a 	sub	r2,r3,r2
   471e0:	003ddf06 	br	46960 <__alt_data_end+0xfffd4960>
   471e4:	e009883a 	mov	r4,fp
   471e8:	e0001115 	stw	zero,68(fp)
   471ec:	000b883a 	mov	r5,zero
   471f0:	00492740 	call	49274 <_Balloc>
   471f4:	d8800715 	stw	r2,28(sp)
   471f8:	d8c00717 	ldw	r3,28(sp)
   471fc:	00bfffc4 	movi	r2,-1
   47200:	01000044 	movi	r4,1
   47204:	d8800c15 	stw	r2,48(sp)
   47208:	e0c01015 	stw	r3,64(fp)
   4720c:	d9000b15 	stw	r4,44(sp)
   47210:	d8800615 	stw	r2,24(sp)
   47214:	d8002215 	stw	zero,136(sp)
   47218:	003c4106 	br	46320 <__alt_data_end+0xfffd4320>
   4721c:	d8c00c17 	ldw	r3,48(sp)
   47220:	d8c00615 	stw	r3,24(sp)
   47224:	003e7006 	br	46be8 <__alt_data_end+0xfffd4be8>
   47228:	04400044 	movi	r17,1
   4722c:	003b2006 	br	45eb0 <__alt_data_end+0xfffd3eb0>
   47230:	000b883a 	mov	r5,zero
   47234:	003b3d06 	br	45f2c <__alt_data_end+0xfffd3f2c>
   47238:	d8800c17 	ldw	r2,48(sp)
   4723c:	d8800615 	stw	r2,24(sp)
   47240:	003e6906 	br	46be8 <__alt_data_end+0xfffd4be8>

00047244 <__sflush_r>:
   47244:	2880030b 	ldhu	r2,12(r5)
   47248:	defffb04 	addi	sp,sp,-20
   4724c:	dcc00315 	stw	r19,12(sp)
   47250:	dc400115 	stw	r17,4(sp)
   47254:	dfc00415 	stw	ra,16(sp)
   47258:	dc800215 	stw	r18,8(sp)
   4725c:	dc000015 	stw	r16,0(sp)
   47260:	10c0020c 	andi	r3,r2,8
   47264:	2823883a 	mov	r17,r5
   47268:	2027883a 	mov	r19,r4
   4726c:	1800311e 	bne	r3,zero,47334 <__sflush_r+0xf0>
   47270:	28c00117 	ldw	r3,4(r5)
   47274:	10820014 	ori	r2,r2,2048
   47278:	2880030d 	sth	r2,12(r5)
   4727c:	00c04b0e 	bge	zero,r3,473ac <__sflush_r+0x168>
   47280:	8a000a17 	ldw	r8,40(r17)
   47284:	40002326 	beq	r8,zero,47314 <__sflush_r+0xd0>
   47288:	9c000017 	ldw	r16,0(r19)
   4728c:	10c4000c 	andi	r3,r2,4096
   47290:	98000015 	stw	zero,0(r19)
   47294:	18004826 	beq	r3,zero,473b8 <__sflush_r+0x174>
   47298:	89801417 	ldw	r6,80(r17)
   4729c:	10c0010c 	andi	r3,r2,4
   472a0:	18000626 	beq	r3,zero,472bc <__sflush_r+0x78>
   472a4:	88c00117 	ldw	r3,4(r17)
   472a8:	88800c17 	ldw	r2,48(r17)
   472ac:	30cdc83a 	sub	r6,r6,r3
   472b0:	10000226 	beq	r2,zero,472bc <__sflush_r+0x78>
   472b4:	88800f17 	ldw	r2,60(r17)
   472b8:	308dc83a 	sub	r6,r6,r2
   472bc:	89400717 	ldw	r5,28(r17)
   472c0:	000f883a 	mov	r7,zero
   472c4:	9809883a 	mov	r4,r19
   472c8:	403ee83a 	callr	r8
   472cc:	00ffffc4 	movi	r3,-1
   472d0:	10c04426 	beq	r2,r3,473e4 <__sflush_r+0x1a0>
   472d4:	88c0030b 	ldhu	r3,12(r17)
   472d8:	89000417 	ldw	r4,16(r17)
   472dc:	88000115 	stw	zero,4(r17)
   472e0:	197dffcc 	andi	r5,r3,63487
   472e4:	8940030d 	sth	r5,12(r17)
   472e8:	89000015 	stw	r4,0(r17)
   472ec:	18c4000c 	andi	r3,r3,4096
   472f0:	18002c1e 	bne	r3,zero,473a4 <__sflush_r+0x160>
   472f4:	89400c17 	ldw	r5,48(r17)
   472f8:	9c000015 	stw	r16,0(r19)
   472fc:	28000526 	beq	r5,zero,47314 <__sflush_r+0xd0>
   47300:	88801004 	addi	r2,r17,64
   47304:	28800226 	beq	r5,r2,47310 <__sflush_r+0xcc>
   47308:	9809883a 	mov	r4,r19
   4730c:	00479c00 	call	479c0 <_free_r>
   47310:	88000c15 	stw	zero,48(r17)
   47314:	0005883a 	mov	r2,zero
   47318:	dfc00417 	ldw	ra,16(sp)
   4731c:	dcc00317 	ldw	r19,12(sp)
   47320:	dc800217 	ldw	r18,8(sp)
   47324:	dc400117 	ldw	r17,4(sp)
   47328:	dc000017 	ldw	r16,0(sp)
   4732c:	dec00504 	addi	sp,sp,20
   47330:	f800283a 	ret
   47334:	2c800417 	ldw	r18,16(r5)
   47338:	903ff626 	beq	r18,zero,47314 <__alt_data_end+0xfffd5314>
   4733c:	2c000017 	ldw	r16,0(r5)
   47340:	108000cc 	andi	r2,r2,3
   47344:	2c800015 	stw	r18,0(r5)
   47348:	84a1c83a 	sub	r16,r16,r18
   4734c:	1000131e 	bne	r2,zero,4739c <__sflush_r+0x158>
   47350:	28800517 	ldw	r2,20(r5)
   47354:	88800215 	stw	r2,8(r17)
   47358:	04000316 	blt	zero,r16,47368 <__sflush_r+0x124>
   4735c:	003fed06 	br	47314 <__alt_data_end+0xfffd5314>
   47360:	90a5883a 	add	r18,r18,r2
   47364:	043feb0e 	bge	zero,r16,47314 <__alt_data_end+0xfffd5314>
   47368:	88800917 	ldw	r2,36(r17)
   4736c:	89400717 	ldw	r5,28(r17)
   47370:	800f883a 	mov	r7,r16
   47374:	900d883a 	mov	r6,r18
   47378:	9809883a 	mov	r4,r19
   4737c:	103ee83a 	callr	r2
   47380:	80a1c83a 	sub	r16,r16,r2
   47384:	00bff616 	blt	zero,r2,47360 <__alt_data_end+0xfffd5360>
   47388:	88c0030b 	ldhu	r3,12(r17)
   4738c:	00bfffc4 	movi	r2,-1
   47390:	18c01014 	ori	r3,r3,64
   47394:	88c0030d 	sth	r3,12(r17)
   47398:	003fdf06 	br	47318 <__alt_data_end+0xfffd5318>
   4739c:	0005883a 	mov	r2,zero
   473a0:	003fec06 	br	47354 <__alt_data_end+0xfffd5354>
   473a4:	88801415 	stw	r2,80(r17)
   473a8:	003fd206 	br	472f4 <__alt_data_end+0xfffd52f4>
   473ac:	28c00f17 	ldw	r3,60(r5)
   473b0:	00ffb316 	blt	zero,r3,47280 <__alt_data_end+0xfffd5280>
   473b4:	003fd706 	br	47314 <__alt_data_end+0xfffd5314>
   473b8:	89400717 	ldw	r5,28(r17)
   473bc:	000d883a 	mov	r6,zero
   473c0:	01c00044 	movi	r7,1
   473c4:	9809883a 	mov	r4,r19
   473c8:	403ee83a 	callr	r8
   473cc:	100d883a 	mov	r6,r2
   473d0:	00bfffc4 	movi	r2,-1
   473d4:	30801426 	beq	r6,r2,47428 <__sflush_r+0x1e4>
   473d8:	8880030b 	ldhu	r2,12(r17)
   473dc:	8a000a17 	ldw	r8,40(r17)
   473e0:	003fae06 	br	4729c <__alt_data_end+0xfffd529c>
   473e4:	98c00017 	ldw	r3,0(r19)
   473e8:	183fba26 	beq	r3,zero,472d4 <__alt_data_end+0xfffd52d4>
   473ec:	01000744 	movi	r4,29
   473f0:	19000626 	beq	r3,r4,4740c <__sflush_r+0x1c8>
   473f4:	01000584 	movi	r4,22
   473f8:	19000426 	beq	r3,r4,4740c <__sflush_r+0x1c8>
   473fc:	88c0030b 	ldhu	r3,12(r17)
   47400:	18c01014 	ori	r3,r3,64
   47404:	88c0030d 	sth	r3,12(r17)
   47408:	003fc306 	br	47318 <__alt_data_end+0xfffd5318>
   4740c:	8880030b 	ldhu	r2,12(r17)
   47410:	88c00417 	ldw	r3,16(r17)
   47414:	88000115 	stw	zero,4(r17)
   47418:	10bdffcc 	andi	r2,r2,63487
   4741c:	8880030d 	sth	r2,12(r17)
   47420:	88c00015 	stw	r3,0(r17)
   47424:	003fb306 	br	472f4 <__alt_data_end+0xfffd52f4>
   47428:	98800017 	ldw	r2,0(r19)
   4742c:	103fea26 	beq	r2,zero,473d8 <__alt_data_end+0xfffd53d8>
   47430:	00c00744 	movi	r3,29
   47434:	10c00226 	beq	r2,r3,47440 <__sflush_r+0x1fc>
   47438:	00c00584 	movi	r3,22
   4743c:	10c0031e 	bne	r2,r3,4744c <__sflush_r+0x208>
   47440:	9c000015 	stw	r16,0(r19)
   47444:	0005883a 	mov	r2,zero
   47448:	003fb306 	br	47318 <__alt_data_end+0xfffd5318>
   4744c:	88c0030b 	ldhu	r3,12(r17)
   47450:	3005883a 	mov	r2,r6
   47454:	18c01014 	ori	r3,r3,64
   47458:	88c0030d 	sth	r3,12(r17)
   4745c:	003fae06 	br	47318 <__alt_data_end+0xfffd5318>

00047460 <_fflush_r>:
   47460:	defffd04 	addi	sp,sp,-12
   47464:	dc000115 	stw	r16,4(sp)
   47468:	dfc00215 	stw	ra,8(sp)
   4746c:	2021883a 	mov	r16,r4
   47470:	20000226 	beq	r4,zero,4747c <_fflush_r+0x1c>
   47474:	20800e17 	ldw	r2,56(r4)
   47478:	10000c26 	beq	r2,zero,474ac <_fflush_r+0x4c>
   4747c:	2880030f 	ldh	r2,12(r5)
   47480:	1000051e 	bne	r2,zero,47498 <_fflush_r+0x38>
   47484:	0005883a 	mov	r2,zero
   47488:	dfc00217 	ldw	ra,8(sp)
   4748c:	dc000117 	ldw	r16,4(sp)
   47490:	dec00304 	addi	sp,sp,12
   47494:	f800283a 	ret
   47498:	8009883a 	mov	r4,r16
   4749c:	dfc00217 	ldw	ra,8(sp)
   474a0:	dc000117 	ldw	r16,4(sp)
   474a4:	dec00304 	addi	sp,sp,12
   474a8:	00472441 	jmpi	47244 <__sflush_r>
   474ac:	d9400015 	stw	r5,0(sp)
   474b0:	004784c0 	call	4784c <__sinit>
   474b4:	d9400017 	ldw	r5,0(sp)
   474b8:	003ff006 	br	4747c <__alt_data_end+0xfffd547c>

000474bc <fflush>:
   474bc:	20000526 	beq	r4,zero,474d4 <fflush+0x18>
   474c0:	00800174 	movhi	r2,5
   474c4:	109f2d04 	addi	r2,r2,31924
   474c8:	200b883a 	mov	r5,r4
   474cc:	11000017 	ldw	r4,0(r2)
   474d0:	00474601 	jmpi	47460 <_fflush_r>
   474d4:	00800174 	movhi	r2,5
   474d8:	109f2c04 	addi	r2,r2,31920
   474dc:	11000017 	ldw	r4,0(r2)
   474e0:	01400134 	movhi	r5,4
   474e4:	295d1804 	addi	r5,r5,29792
   474e8:	004825c1 	jmpi	4825c <_fwalk_reent>

000474ec <__fp_unlock>:
   474ec:	0005883a 	mov	r2,zero
   474f0:	f800283a 	ret

000474f4 <_cleanup_r>:
   474f4:	01400174 	movhi	r5,5
   474f8:	29770a04 	addi	r5,r5,-9176
   474fc:	004825c1 	jmpi	4825c <_fwalk_reent>

00047500 <__sinit.part.1>:
   47500:	defff704 	addi	sp,sp,-36
   47504:	00c00134 	movhi	r3,4
   47508:	dfc00815 	stw	ra,32(sp)
   4750c:	ddc00715 	stw	r23,28(sp)
   47510:	dd800615 	stw	r22,24(sp)
   47514:	dd400515 	stw	r21,20(sp)
   47518:	dd000415 	stw	r20,16(sp)
   4751c:	dcc00315 	stw	r19,12(sp)
   47520:	dc800215 	stw	r18,8(sp)
   47524:	dc400115 	stw	r17,4(sp)
   47528:	dc000015 	stw	r16,0(sp)
   4752c:	18dd3d04 	addi	r3,r3,29940
   47530:	24000117 	ldw	r16,4(r4)
   47534:	20c00f15 	stw	r3,60(r4)
   47538:	2080bb04 	addi	r2,r4,748
   4753c:	00c000c4 	movi	r3,3
   47540:	20c0b915 	stw	r3,740(r4)
   47544:	2080ba15 	stw	r2,744(r4)
   47548:	2000b815 	stw	zero,736(r4)
   4754c:	05c00204 	movi	r23,8
   47550:	00800104 	movi	r2,4
   47554:	2025883a 	mov	r18,r4
   47558:	b80d883a 	mov	r6,r23
   4755c:	81001704 	addi	r4,r16,92
   47560:	000b883a 	mov	r5,zero
   47564:	80000015 	stw	zero,0(r16)
   47568:	80000115 	stw	zero,4(r16)
   4756c:	80000215 	stw	zero,8(r16)
   47570:	8080030d 	sth	r2,12(r16)
   47574:	80001915 	stw	zero,100(r16)
   47578:	8000038d 	sth	zero,14(r16)
   4757c:	80000415 	stw	zero,16(r16)
   47580:	80000515 	stw	zero,20(r16)
   47584:	80000615 	stw	zero,24(r16)
   47588:	004914c0 	call	4914c <memset>
   4758c:	05800174 	movhi	r22,5
   47590:	94400217 	ldw	r17,8(r18)
   47594:	05400174 	movhi	r21,5
   47598:	05000174 	movhi	r20,5
   4759c:	04c00174 	movhi	r19,5
   475a0:	b5aab004 	addi	r22,r22,-21824
   475a4:	ad6ac704 	addi	r21,r21,-21732
   475a8:	a52ae604 	addi	r20,r20,-21608
   475ac:	9ceafd04 	addi	r19,r19,-21516
   475b0:	85800815 	stw	r22,32(r16)
   475b4:	85400915 	stw	r21,36(r16)
   475b8:	85000a15 	stw	r20,40(r16)
   475bc:	84c00b15 	stw	r19,44(r16)
   475c0:	84000715 	stw	r16,28(r16)
   475c4:	00800284 	movi	r2,10
   475c8:	8880030d 	sth	r2,12(r17)
   475cc:	00800044 	movi	r2,1
   475d0:	b80d883a 	mov	r6,r23
   475d4:	89001704 	addi	r4,r17,92
   475d8:	000b883a 	mov	r5,zero
   475dc:	88000015 	stw	zero,0(r17)
   475e0:	88000115 	stw	zero,4(r17)
   475e4:	88000215 	stw	zero,8(r17)
   475e8:	88001915 	stw	zero,100(r17)
   475ec:	8880038d 	sth	r2,14(r17)
   475f0:	88000415 	stw	zero,16(r17)
   475f4:	88000515 	stw	zero,20(r17)
   475f8:	88000615 	stw	zero,24(r17)
   475fc:	004914c0 	call	4914c <memset>
   47600:	94000317 	ldw	r16,12(r18)
   47604:	00800484 	movi	r2,18
   47608:	8c400715 	stw	r17,28(r17)
   4760c:	8d800815 	stw	r22,32(r17)
   47610:	8d400915 	stw	r21,36(r17)
   47614:	8d000a15 	stw	r20,40(r17)
   47618:	8cc00b15 	stw	r19,44(r17)
   4761c:	8080030d 	sth	r2,12(r16)
   47620:	00800084 	movi	r2,2
   47624:	80000015 	stw	zero,0(r16)
   47628:	80000115 	stw	zero,4(r16)
   4762c:	80000215 	stw	zero,8(r16)
   47630:	80001915 	stw	zero,100(r16)
   47634:	8080038d 	sth	r2,14(r16)
   47638:	80000415 	stw	zero,16(r16)
   4763c:	80000515 	stw	zero,20(r16)
   47640:	80000615 	stw	zero,24(r16)
   47644:	b80d883a 	mov	r6,r23
   47648:	000b883a 	mov	r5,zero
   4764c:	81001704 	addi	r4,r16,92
   47650:	004914c0 	call	4914c <memset>
   47654:	00800044 	movi	r2,1
   47658:	84000715 	stw	r16,28(r16)
   4765c:	85800815 	stw	r22,32(r16)
   47660:	85400915 	stw	r21,36(r16)
   47664:	85000a15 	stw	r20,40(r16)
   47668:	84c00b15 	stw	r19,44(r16)
   4766c:	90800e15 	stw	r2,56(r18)
   47670:	dfc00817 	ldw	ra,32(sp)
   47674:	ddc00717 	ldw	r23,28(sp)
   47678:	dd800617 	ldw	r22,24(sp)
   4767c:	dd400517 	ldw	r21,20(sp)
   47680:	dd000417 	ldw	r20,16(sp)
   47684:	dcc00317 	ldw	r19,12(sp)
   47688:	dc800217 	ldw	r18,8(sp)
   4768c:	dc400117 	ldw	r17,4(sp)
   47690:	dc000017 	ldw	r16,0(sp)
   47694:	dec00904 	addi	sp,sp,36
   47698:	f800283a 	ret

0004769c <__fp_lock>:
   4769c:	0005883a 	mov	r2,zero
   476a0:	f800283a 	ret

000476a4 <__sfmoreglue>:
   476a4:	defffc04 	addi	sp,sp,-16
   476a8:	dc800215 	stw	r18,8(sp)
   476ac:	2825883a 	mov	r18,r5
   476b0:	dc000015 	stw	r16,0(sp)
   476b4:	01401a04 	movi	r5,104
   476b8:	2021883a 	mov	r16,r4
   476bc:	913fffc4 	addi	r4,r18,-1
   476c0:	dfc00315 	stw	ra,12(sp)
   476c4:	dc400115 	stw	r17,4(sp)
   476c8:	0040eec0 	call	40eec <__mulsi3>
   476cc:	8009883a 	mov	r4,r16
   476d0:	11401d04 	addi	r5,r2,116
   476d4:	1023883a 	mov	r17,r2
   476d8:	00485b80 	call	485b8 <_malloc_r>
   476dc:	1021883a 	mov	r16,r2
   476e0:	10000726 	beq	r2,zero,47700 <__sfmoreglue+0x5c>
   476e4:	11000304 	addi	r4,r2,12
   476e8:	10000015 	stw	zero,0(r2)
   476ec:	14800115 	stw	r18,4(r2)
   476f0:	11000215 	stw	r4,8(r2)
   476f4:	89801a04 	addi	r6,r17,104
   476f8:	000b883a 	mov	r5,zero
   476fc:	004914c0 	call	4914c <memset>
   47700:	8005883a 	mov	r2,r16
   47704:	dfc00317 	ldw	ra,12(sp)
   47708:	dc800217 	ldw	r18,8(sp)
   4770c:	dc400117 	ldw	r17,4(sp)
   47710:	dc000017 	ldw	r16,0(sp)
   47714:	dec00404 	addi	sp,sp,16
   47718:	f800283a 	ret

0004771c <__sfp>:
   4771c:	defffb04 	addi	sp,sp,-20
   47720:	dc000015 	stw	r16,0(sp)
   47724:	04000174 	movhi	r16,5
   47728:	841f2c04 	addi	r16,r16,31920
   4772c:	dcc00315 	stw	r19,12(sp)
   47730:	2027883a 	mov	r19,r4
   47734:	81000017 	ldw	r4,0(r16)
   47738:	dfc00415 	stw	ra,16(sp)
   4773c:	dc800215 	stw	r18,8(sp)
   47740:	20800e17 	ldw	r2,56(r4)
   47744:	dc400115 	stw	r17,4(sp)
   47748:	1000021e 	bne	r2,zero,47754 <__sfp+0x38>
   4774c:	00475000 	call	47500 <__sinit.part.1>
   47750:	81000017 	ldw	r4,0(r16)
   47754:	2480b804 	addi	r18,r4,736
   47758:	047fffc4 	movi	r17,-1
   4775c:	91000117 	ldw	r4,4(r18)
   47760:	94000217 	ldw	r16,8(r18)
   47764:	213fffc4 	addi	r4,r4,-1
   47768:	20000a16 	blt	r4,zero,47794 <__sfp+0x78>
   4776c:	8080030f 	ldh	r2,12(r16)
   47770:	10000c26 	beq	r2,zero,477a4 <__sfp+0x88>
   47774:	80c01d04 	addi	r3,r16,116
   47778:	00000206 	br	47784 <__sfp+0x68>
   4777c:	18bfe60f 	ldh	r2,-104(r3)
   47780:	10000826 	beq	r2,zero,477a4 <__sfp+0x88>
   47784:	213fffc4 	addi	r4,r4,-1
   47788:	1c3ffd04 	addi	r16,r3,-12
   4778c:	18c01a04 	addi	r3,r3,104
   47790:	247ffa1e 	bne	r4,r17,4777c <__alt_data_end+0xfffd577c>
   47794:	90800017 	ldw	r2,0(r18)
   47798:	10001d26 	beq	r2,zero,47810 <__sfp+0xf4>
   4779c:	1025883a 	mov	r18,r2
   477a0:	003fee06 	br	4775c <__alt_data_end+0xfffd575c>
   477a4:	00bfffc4 	movi	r2,-1
   477a8:	8080038d 	sth	r2,14(r16)
   477ac:	00800044 	movi	r2,1
   477b0:	8080030d 	sth	r2,12(r16)
   477b4:	80001915 	stw	zero,100(r16)
   477b8:	80000015 	stw	zero,0(r16)
   477bc:	80000215 	stw	zero,8(r16)
   477c0:	80000115 	stw	zero,4(r16)
   477c4:	80000415 	stw	zero,16(r16)
   477c8:	80000515 	stw	zero,20(r16)
   477cc:	80000615 	stw	zero,24(r16)
   477d0:	01800204 	movi	r6,8
   477d4:	000b883a 	mov	r5,zero
   477d8:	81001704 	addi	r4,r16,92
   477dc:	004914c0 	call	4914c <memset>
   477e0:	8005883a 	mov	r2,r16
   477e4:	80000c15 	stw	zero,48(r16)
   477e8:	80000d15 	stw	zero,52(r16)
   477ec:	80001115 	stw	zero,68(r16)
   477f0:	80001215 	stw	zero,72(r16)
   477f4:	dfc00417 	ldw	ra,16(sp)
   477f8:	dcc00317 	ldw	r19,12(sp)
   477fc:	dc800217 	ldw	r18,8(sp)
   47800:	dc400117 	ldw	r17,4(sp)
   47804:	dc000017 	ldw	r16,0(sp)
   47808:	dec00504 	addi	sp,sp,20
   4780c:	f800283a 	ret
   47810:	01400104 	movi	r5,4
   47814:	9809883a 	mov	r4,r19
   47818:	00476a40 	call	476a4 <__sfmoreglue>
   4781c:	90800015 	stw	r2,0(r18)
   47820:	103fde1e 	bne	r2,zero,4779c <__alt_data_end+0xfffd579c>
   47824:	00800304 	movi	r2,12
   47828:	98800015 	stw	r2,0(r19)
   4782c:	0005883a 	mov	r2,zero
   47830:	003ff006 	br	477f4 <__alt_data_end+0xfffd57f4>

00047834 <_cleanup>:
   47834:	00800174 	movhi	r2,5
   47838:	109f2c04 	addi	r2,r2,31920
   4783c:	11000017 	ldw	r4,0(r2)
   47840:	01400174 	movhi	r5,5
   47844:	29770a04 	addi	r5,r5,-9176
   47848:	004825c1 	jmpi	4825c <_fwalk_reent>

0004784c <__sinit>:
   4784c:	20800e17 	ldw	r2,56(r4)
   47850:	10000126 	beq	r2,zero,47858 <__sinit+0xc>
   47854:	f800283a 	ret
   47858:	00475001 	jmpi	47500 <__sinit.part.1>

0004785c <__sfp_lock_acquire>:
   4785c:	f800283a 	ret

00047860 <__sfp_lock_release>:
   47860:	f800283a 	ret

00047864 <__sinit_lock_acquire>:
   47864:	f800283a 	ret

00047868 <__sinit_lock_release>:
   47868:	f800283a 	ret

0004786c <__fp_lock_all>:
   4786c:	00800174 	movhi	r2,5
   47870:	109f2d04 	addi	r2,r2,31924
   47874:	11000017 	ldw	r4,0(r2)
   47878:	01400134 	movhi	r5,4
   4787c:	295da704 	addi	r5,r5,30364
   47880:	00481981 	jmpi	48198 <_fwalk>

00047884 <__fp_unlock_all>:
   47884:	00800174 	movhi	r2,5
   47888:	109f2d04 	addi	r2,r2,31924
   4788c:	11000017 	ldw	r4,0(r2)
   47890:	01400134 	movhi	r5,4
   47894:	295d3b04 	addi	r5,r5,29932
   47898:	00481981 	jmpi	48198 <_fwalk>

0004789c <_malloc_trim_r>:
   4789c:	defffb04 	addi	sp,sp,-20
   478a0:	dcc00315 	stw	r19,12(sp)
   478a4:	04c00174 	movhi	r19,5
   478a8:	dc800215 	stw	r18,8(sp)
   478ac:	dc400115 	stw	r17,4(sp)
   478b0:	dc000015 	stw	r16,0(sp)
   478b4:	dfc00415 	stw	ra,16(sp)
   478b8:	2821883a 	mov	r16,r5
   478bc:	9cd99404 	addi	r19,r19,26192
   478c0:	2025883a 	mov	r18,r4
   478c4:	0051c280 	call	51c28 <__malloc_lock>
   478c8:	98800217 	ldw	r2,8(r19)
   478cc:	14400117 	ldw	r17,4(r2)
   478d0:	00bfff04 	movi	r2,-4
   478d4:	88a2703a 	and	r17,r17,r2
   478d8:	8c21c83a 	sub	r16,r17,r16
   478dc:	8403fbc4 	addi	r16,r16,4079
   478e0:	8020d33a 	srli	r16,r16,12
   478e4:	0083ffc4 	movi	r2,4095
   478e8:	843fffc4 	addi	r16,r16,-1
   478ec:	8020933a 	slli	r16,r16,12
   478f0:	1400060e 	bge	r2,r16,4790c <_malloc_trim_r+0x70>
   478f4:	000b883a 	mov	r5,zero
   478f8:	9009883a 	mov	r4,r18
   478fc:	004aa6c0 	call	4aa6c <_sbrk_r>
   47900:	98c00217 	ldw	r3,8(r19)
   47904:	1c47883a 	add	r3,r3,r17
   47908:	10c00a26 	beq	r2,r3,47934 <_malloc_trim_r+0x98>
   4790c:	9009883a 	mov	r4,r18
   47910:	0051c4c0 	call	51c4c <__malloc_unlock>
   47914:	0005883a 	mov	r2,zero
   47918:	dfc00417 	ldw	ra,16(sp)
   4791c:	dcc00317 	ldw	r19,12(sp)
   47920:	dc800217 	ldw	r18,8(sp)
   47924:	dc400117 	ldw	r17,4(sp)
   47928:	dc000017 	ldw	r16,0(sp)
   4792c:	dec00504 	addi	sp,sp,20
   47930:	f800283a 	ret
   47934:	040bc83a 	sub	r5,zero,r16
   47938:	9009883a 	mov	r4,r18
   4793c:	004aa6c0 	call	4aa6c <_sbrk_r>
   47940:	00ffffc4 	movi	r3,-1
   47944:	10c00d26 	beq	r2,r3,4797c <_malloc_trim_r+0xe0>
   47948:	00c001b4 	movhi	r3,6
   4794c:	18e62204 	addi	r3,r3,-26488
   47950:	18800017 	ldw	r2,0(r3)
   47954:	99000217 	ldw	r4,8(r19)
   47958:	8c23c83a 	sub	r17,r17,r16
   4795c:	8c400054 	ori	r17,r17,1
   47960:	1421c83a 	sub	r16,r2,r16
   47964:	24400115 	stw	r17,4(r4)
   47968:	9009883a 	mov	r4,r18
   4796c:	1c000015 	stw	r16,0(r3)
   47970:	0051c4c0 	call	51c4c <__malloc_unlock>
   47974:	00800044 	movi	r2,1
   47978:	003fe706 	br	47918 <__alt_data_end+0xfffd5918>
   4797c:	000b883a 	mov	r5,zero
   47980:	9009883a 	mov	r4,r18
   47984:	004aa6c0 	call	4aa6c <_sbrk_r>
   47988:	99000217 	ldw	r4,8(r19)
   4798c:	014003c4 	movi	r5,15
   47990:	1107c83a 	sub	r3,r2,r4
   47994:	28ffdd0e 	bge	r5,r3,4790c <__alt_data_end+0xfffd590c>
   47998:	01400174 	movhi	r5,5
   4799c:	295f2f04 	addi	r5,r5,31932
   479a0:	29400017 	ldw	r5,0(r5)
   479a4:	18c00054 	ori	r3,r3,1
   479a8:	20c00115 	stw	r3,4(r4)
   479ac:	00c001b4 	movhi	r3,6
   479b0:	1145c83a 	sub	r2,r2,r5
   479b4:	18e62204 	addi	r3,r3,-26488
   479b8:	18800015 	stw	r2,0(r3)
   479bc:	003fd306 	br	4790c <__alt_data_end+0xfffd590c>

000479c0 <_free_r>:
   479c0:	28004126 	beq	r5,zero,47ac8 <_free_r+0x108>
   479c4:	defffd04 	addi	sp,sp,-12
   479c8:	dc400115 	stw	r17,4(sp)
   479cc:	dc000015 	stw	r16,0(sp)
   479d0:	2023883a 	mov	r17,r4
   479d4:	2821883a 	mov	r16,r5
   479d8:	dfc00215 	stw	ra,8(sp)
   479dc:	0051c280 	call	51c28 <__malloc_lock>
   479e0:	81ffff17 	ldw	r7,-4(r16)
   479e4:	00bfff84 	movi	r2,-2
   479e8:	01000174 	movhi	r4,5
   479ec:	81bffe04 	addi	r6,r16,-8
   479f0:	3884703a 	and	r2,r7,r2
   479f4:	21199404 	addi	r4,r4,26192
   479f8:	308b883a 	add	r5,r6,r2
   479fc:	2a400117 	ldw	r9,4(r5)
   47a00:	22000217 	ldw	r8,8(r4)
   47a04:	00ffff04 	movi	r3,-4
   47a08:	48c6703a 	and	r3,r9,r3
   47a0c:	2a005726 	beq	r5,r8,47b6c <_free_r+0x1ac>
   47a10:	28c00115 	stw	r3,4(r5)
   47a14:	39c0004c 	andi	r7,r7,1
   47a18:	3800091e 	bne	r7,zero,47a40 <_free_r+0x80>
   47a1c:	823ffe17 	ldw	r8,-8(r16)
   47a20:	22400204 	addi	r9,r4,8
   47a24:	320dc83a 	sub	r6,r6,r8
   47a28:	31c00217 	ldw	r7,8(r6)
   47a2c:	1205883a 	add	r2,r2,r8
   47a30:	3a406526 	beq	r7,r9,47bc8 <_free_r+0x208>
   47a34:	32000317 	ldw	r8,12(r6)
   47a38:	3a000315 	stw	r8,12(r7)
   47a3c:	41c00215 	stw	r7,8(r8)
   47a40:	28cf883a 	add	r7,r5,r3
   47a44:	39c00117 	ldw	r7,4(r7)
   47a48:	39c0004c 	andi	r7,r7,1
   47a4c:	38003a26 	beq	r7,zero,47b38 <_free_r+0x178>
   47a50:	10c00054 	ori	r3,r2,1
   47a54:	30c00115 	stw	r3,4(r6)
   47a58:	3087883a 	add	r3,r6,r2
   47a5c:	18800015 	stw	r2,0(r3)
   47a60:	00c07fc4 	movi	r3,511
   47a64:	18801936 	bltu	r3,r2,47acc <_free_r+0x10c>
   47a68:	1004d0fa 	srli	r2,r2,3
   47a6c:	01c00044 	movi	r7,1
   47a70:	21400117 	ldw	r5,4(r4)
   47a74:	10c00044 	addi	r3,r2,1
   47a78:	18c7883a 	add	r3,r3,r3
   47a7c:	1005d0ba 	srai	r2,r2,2
   47a80:	18c7883a 	add	r3,r3,r3
   47a84:	18c7883a 	add	r3,r3,r3
   47a88:	1907883a 	add	r3,r3,r4
   47a8c:	3884983a 	sll	r2,r7,r2
   47a90:	19c00017 	ldw	r7,0(r3)
   47a94:	1a3ffe04 	addi	r8,r3,-8
   47a98:	1144b03a 	or	r2,r2,r5
   47a9c:	32000315 	stw	r8,12(r6)
   47aa0:	31c00215 	stw	r7,8(r6)
   47aa4:	20800115 	stw	r2,4(r4)
   47aa8:	19800015 	stw	r6,0(r3)
   47aac:	39800315 	stw	r6,12(r7)
   47ab0:	8809883a 	mov	r4,r17
   47ab4:	dfc00217 	ldw	ra,8(sp)
   47ab8:	dc400117 	ldw	r17,4(sp)
   47abc:	dc000017 	ldw	r16,0(sp)
   47ac0:	dec00304 	addi	sp,sp,12
   47ac4:	0051c4c1 	jmpi	51c4c <__malloc_unlock>
   47ac8:	f800283a 	ret
   47acc:	100ad27a 	srli	r5,r2,9
   47ad0:	00c00104 	movi	r3,4
   47ad4:	19404a36 	bltu	r3,r5,47c00 <_free_r+0x240>
   47ad8:	100ad1ba 	srli	r5,r2,6
   47adc:	28c00e44 	addi	r3,r5,57
   47ae0:	18c7883a 	add	r3,r3,r3
   47ae4:	29400e04 	addi	r5,r5,56
   47ae8:	18c7883a 	add	r3,r3,r3
   47aec:	18c7883a 	add	r3,r3,r3
   47af0:	1909883a 	add	r4,r3,r4
   47af4:	20c00017 	ldw	r3,0(r4)
   47af8:	01c00174 	movhi	r7,5
   47afc:	213ffe04 	addi	r4,r4,-8
   47b00:	39d99404 	addi	r7,r7,26192
   47b04:	20c04426 	beq	r4,r3,47c18 <_free_r+0x258>
   47b08:	01ffff04 	movi	r7,-4
   47b0c:	19400117 	ldw	r5,4(r3)
   47b10:	29ca703a 	and	r5,r5,r7
   47b14:	1140022e 	bgeu	r2,r5,47b20 <_free_r+0x160>
   47b18:	18c00217 	ldw	r3,8(r3)
   47b1c:	20fffb1e 	bne	r4,r3,47b0c <__alt_data_end+0xfffd5b0c>
   47b20:	19000317 	ldw	r4,12(r3)
   47b24:	31000315 	stw	r4,12(r6)
   47b28:	30c00215 	stw	r3,8(r6)
   47b2c:	21800215 	stw	r6,8(r4)
   47b30:	19800315 	stw	r6,12(r3)
   47b34:	003fde06 	br	47ab0 <__alt_data_end+0xfffd5ab0>
   47b38:	29c00217 	ldw	r7,8(r5)
   47b3c:	10c5883a 	add	r2,r2,r3
   47b40:	00c00174 	movhi	r3,5
   47b44:	18d99604 	addi	r3,r3,26200
   47b48:	38c03b26 	beq	r7,r3,47c38 <_free_r+0x278>
   47b4c:	2a000317 	ldw	r8,12(r5)
   47b50:	11400054 	ori	r5,r2,1
   47b54:	3087883a 	add	r3,r6,r2
   47b58:	3a000315 	stw	r8,12(r7)
   47b5c:	41c00215 	stw	r7,8(r8)
   47b60:	31400115 	stw	r5,4(r6)
   47b64:	18800015 	stw	r2,0(r3)
   47b68:	003fbd06 	br	47a60 <__alt_data_end+0xfffd5a60>
   47b6c:	39c0004c 	andi	r7,r7,1
   47b70:	10c5883a 	add	r2,r2,r3
   47b74:	3800071e 	bne	r7,zero,47b94 <_free_r+0x1d4>
   47b78:	81fffe17 	ldw	r7,-8(r16)
   47b7c:	31cdc83a 	sub	r6,r6,r7
   47b80:	30c00317 	ldw	r3,12(r6)
   47b84:	31400217 	ldw	r5,8(r6)
   47b88:	11c5883a 	add	r2,r2,r7
   47b8c:	28c00315 	stw	r3,12(r5)
   47b90:	19400215 	stw	r5,8(r3)
   47b94:	10c00054 	ori	r3,r2,1
   47b98:	30c00115 	stw	r3,4(r6)
   47b9c:	00c00174 	movhi	r3,5
   47ba0:	18df3004 	addi	r3,r3,31936
   47ba4:	18c00017 	ldw	r3,0(r3)
   47ba8:	21800215 	stw	r6,8(r4)
   47bac:	10ffc036 	bltu	r2,r3,47ab0 <__alt_data_end+0xfffd5ab0>
   47bb0:	008001b4 	movhi	r2,6
   47bb4:	10a61904 	addi	r2,r2,-26524
   47bb8:	11400017 	ldw	r5,0(r2)
   47bbc:	8809883a 	mov	r4,r17
   47bc0:	004789c0 	call	4789c <_malloc_trim_r>
   47bc4:	003fba06 	br	47ab0 <__alt_data_end+0xfffd5ab0>
   47bc8:	28c9883a 	add	r4,r5,r3
   47bcc:	21000117 	ldw	r4,4(r4)
   47bd0:	2100004c 	andi	r4,r4,1
   47bd4:	2000391e 	bne	r4,zero,47cbc <_free_r+0x2fc>
   47bd8:	29c00217 	ldw	r7,8(r5)
   47bdc:	29000317 	ldw	r4,12(r5)
   47be0:	1885883a 	add	r2,r3,r2
   47be4:	10c00054 	ori	r3,r2,1
   47be8:	39000315 	stw	r4,12(r7)
   47bec:	21c00215 	stw	r7,8(r4)
   47bf0:	30c00115 	stw	r3,4(r6)
   47bf4:	308d883a 	add	r6,r6,r2
   47bf8:	30800015 	stw	r2,0(r6)
   47bfc:	003fac06 	br	47ab0 <__alt_data_end+0xfffd5ab0>
   47c00:	00c00504 	movi	r3,20
   47c04:	19401536 	bltu	r3,r5,47c5c <_free_r+0x29c>
   47c08:	28c01704 	addi	r3,r5,92
   47c0c:	18c7883a 	add	r3,r3,r3
   47c10:	294016c4 	addi	r5,r5,91
   47c14:	003fb406 	br	47ae8 <__alt_data_end+0xfffd5ae8>
   47c18:	280bd0ba 	srai	r5,r5,2
   47c1c:	00c00044 	movi	r3,1
   47c20:	38800117 	ldw	r2,4(r7)
   47c24:	194a983a 	sll	r5,r3,r5
   47c28:	2007883a 	mov	r3,r4
   47c2c:	2884b03a 	or	r2,r5,r2
   47c30:	38800115 	stw	r2,4(r7)
   47c34:	003fbb06 	br	47b24 <__alt_data_end+0xfffd5b24>
   47c38:	21800515 	stw	r6,20(r4)
   47c3c:	21800415 	stw	r6,16(r4)
   47c40:	10c00054 	ori	r3,r2,1
   47c44:	31c00315 	stw	r7,12(r6)
   47c48:	31c00215 	stw	r7,8(r6)
   47c4c:	30c00115 	stw	r3,4(r6)
   47c50:	308d883a 	add	r6,r6,r2
   47c54:	30800015 	stw	r2,0(r6)
   47c58:	003f9506 	br	47ab0 <__alt_data_end+0xfffd5ab0>
   47c5c:	00c01504 	movi	r3,84
   47c60:	19400536 	bltu	r3,r5,47c78 <_free_r+0x2b8>
   47c64:	100ad33a 	srli	r5,r2,12
   47c68:	28c01bc4 	addi	r3,r5,111
   47c6c:	18c7883a 	add	r3,r3,r3
   47c70:	29401b84 	addi	r5,r5,110
   47c74:	003f9c06 	br	47ae8 <__alt_data_end+0xfffd5ae8>
   47c78:	00c05504 	movi	r3,340
   47c7c:	19400536 	bltu	r3,r5,47c94 <_free_r+0x2d4>
   47c80:	100ad3fa 	srli	r5,r2,15
   47c84:	28c01e04 	addi	r3,r5,120
   47c88:	18c7883a 	add	r3,r3,r3
   47c8c:	29401dc4 	addi	r5,r5,119
   47c90:	003f9506 	br	47ae8 <__alt_data_end+0xfffd5ae8>
   47c94:	00c15504 	movi	r3,1364
   47c98:	19400536 	bltu	r3,r5,47cb0 <_free_r+0x2f0>
   47c9c:	100ad4ba 	srli	r5,r2,18
   47ca0:	28c01f44 	addi	r3,r5,125
   47ca4:	18c7883a 	add	r3,r3,r3
   47ca8:	29401f04 	addi	r5,r5,124
   47cac:	003f8e06 	br	47ae8 <__alt_data_end+0xfffd5ae8>
   47cb0:	00c03f84 	movi	r3,254
   47cb4:	01401f84 	movi	r5,126
   47cb8:	003f8b06 	br	47ae8 <__alt_data_end+0xfffd5ae8>
   47cbc:	10c00054 	ori	r3,r2,1
   47cc0:	30c00115 	stw	r3,4(r6)
   47cc4:	308d883a 	add	r6,r6,r2
   47cc8:	30800015 	stw	r2,0(r6)
   47ccc:	003f7806 	br	47ab0 <__alt_data_end+0xfffd5ab0>

00047cd0 <__sfvwrite_r>:
   47cd0:	30800217 	ldw	r2,8(r6)
   47cd4:	10006726 	beq	r2,zero,47e74 <__sfvwrite_r+0x1a4>
   47cd8:	28c0030b 	ldhu	r3,12(r5)
   47cdc:	defff404 	addi	sp,sp,-48
   47ce0:	dd400715 	stw	r21,28(sp)
   47ce4:	dd000615 	stw	r20,24(sp)
   47ce8:	dc000215 	stw	r16,8(sp)
   47cec:	dfc00b15 	stw	ra,44(sp)
   47cf0:	df000a15 	stw	fp,40(sp)
   47cf4:	ddc00915 	stw	r23,36(sp)
   47cf8:	dd800815 	stw	r22,32(sp)
   47cfc:	dcc00515 	stw	r19,20(sp)
   47d00:	dc800415 	stw	r18,16(sp)
   47d04:	dc400315 	stw	r17,12(sp)
   47d08:	1880020c 	andi	r2,r3,8
   47d0c:	2821883a 	mov	r16,r5
   47d10:	202b883a 	mov	r21,r4
   47d14:	3029883a 	mov	r20,r6
   47d18:	10002726 	beq	r2,zero,47db8 <__sfvwrite_r+0xe8>
   47d1c:	28800417 	ldw	r2,16(r5)
   47d20:	10002526 	beq	r2,zero,47db8 <__sfvwrite_r+0xe8>
   47d24:	1880008c 	andi	r2,r3,2
   47d28:	a4400017 	ldw	r17,0(r20)
   47d2c:	10002a26 	beq	r2,zero,47dd8 <__sfvwrite_r+0x108>
   47d30:	05a00034 	movhi	r22,32768
   47d34:	0027883a 	mov	r19,zero
   47d38:	0025883a 	mov	r18,zero
   47d3c:	b5bf0004 	addi	r22,r22,-1024
   47d40:	980d883a 	mov	r6,r19
   47d44:	a809883a 	mov	r4,r21
   47d48:	90004626 	beq	r18,zero,47e64 <__sfvwrite_r+0x194>
   47d4c:	900f883a 	mov	r7,r18
   47d50:	b480022e 	bgeu	r22,r18,47d5c <__sfvwrite_r+0x8c>
   47d54:	01e00034 	movhi	r7,32768
   47d58:	39ff0004 	addi	r7,r7,-1024
   47d5c:	80800917 	ldw	r2,36(r16)
   47d60:	81400717 	ldw	r5,28(r16)
   47d64:	103ee83a 	callr	r2
   47d68:	00805a0e 	bge	zero,r2,47ed4 <__sfvwrite_r+0x204>
   47d6c:	a0c00217 	ldw	r3,8(r20)
   47d70:	98a7883a 	add	r19,r19,r2
   47d74:	90a5c83a 	sub	r18,r18,r2
   47d78:	1885c83a 	sub	r2,r3,r2
   47d7c:	a0800215 	stw	r2,8(r20)
   47d80:	103fef1e 	bne	r2,zero,47d40 <__alt_data_end+0xfffd5d40>
   47d84:	0005883a 	mov	r2,zero
   47d88:	dfc00b17 	ldw	ra,44(sp)
   47d8c:	df000a17 	ldw	fp,40(sp)
   47d90:	ddc00917 	ldw	r23,36(sp)
   47d94:	dd800817 	ldw	r22,32(sp)
   47d98:	dd400717 	ldw	r21,28(sp)
   47d9c:	dd000617 	ldw	r20,24(sp)
   47da0:	dcc00517 	ldw	r19,20(sp)
   47da4:	dc800417 	ldw	r18,16(sp)
   47da8:	dc400317 	ldw	r17,12(sp)
   47dac:	dc000217 	ldw	r16,8(sp)
   47db0:	dec00c04 	addi	sp,sp,48
   47db4:	f800283a 	ret
   47db8:	800b883a 	mov	r5,r16
   47dbc:	a809883a 	mov	r4,r21
   47dc0:	00458400 	call	45840 <__swsetup_r>
   47dc4:	1000ee1e 	bne	r2,zero,48180 <__sfvwrite_r+0x4b0>
   47dc8:	80c0030b 	ldhu	r3,12(r16)
   47dcc:	a4400017 	ldw	r17,0(r20)
   47dd0:	1880008c 	andi	r2,r3,2
   47dd4:	103fd61e 	bne	r2,zero,47d30 <__alt_data_end+0xfffd5d30>
   47dd8:	1880004c 	andi	r2,r3,1
   47ddc:	1000421e 	bne	r2,zero,47ee8 <__sfvwrite_r+0x218>
   47de0:	0039883a 	mov	fp,zero
   47de4:	0025883a 	mov	r18,zero
   47de8:	90001a26 	beq	r18,zero,47e54 <__sfvwrite_r+0x184>
   47dec:	1880800c 	andi	r2,r3,512
   47df0:	84c00217 	ldw	r19,8(r16)
   47df4:	10002126 	beq	r2,zero,47e7c <__sfvwrite_r+0x1ac>
   47df8:	982f883a 	mov	r23,r19
   47dfc:	94c09636 	bltu	r18,r19,48058 <__sfvwrite_r+0x388>
   47e00:	1881200c 	andi	r2,r3,1152
   47e04:	1000a11e 	bne	r2,zero,4808c <__sfvwrite_r+0x3bc>
   47e08:	81000017 	ldw	r4,0(r16)
   47e0c:	b80d883a 	mov	r6,r23
   47e10:	e00b883a 	mov	r5,fp
   47e14:	0048ff00 	call	48ff0 <memmove>
   47e18:	80c00217 	ldw	r3,8(r16)
   47e1c:	81000017 	ldw	r4,0(r16)
   47e20:	9005883a 	mov	r2,r18
   47e24:	1ce7c83a 	sub	r19,r3,r19
   47e28:	25cf883a 	add	r7,r4,r23
   47e2c:	84c00215 	stw	r19,8(r16)
   47e30:	81c00015 	stw	r7,0(r16)
   47e34:	a0c00217 	ldw	r3,8(r20)
   47e38:	e0b9883a 	add	fp,fp,r2
   47e3c:	90a5c83a 	sub	r18,r18,r2
   47e40:	18a7c83a 	sub	r19,r3,r2
   47e44:	a4c00215 	stw	r19,8(r20)
   47e48:	983fce26 	beq	r19,zero,47d84 <__alt_data_end+0xfffd5d84>
   47e4c:	80c0030b 	ldhu	r3,12(r16)
   47e50:	903fe61e 	bne	r18,zero,47dec <__alt_data_end+0xfffd5dec>
   47e54:	8f000017 	ldw	fp,0(r17)
   47e58:	8c800117 	ldw	r18,4(r17)
   47e5c:	8c400204 	addi	r17,r17,8
   47e60:	003fe106 	br	47de8 <__alt_data_end+0xfffd5de8>
   47e64:	8cc00017 	ldw	r19,0(r17)
   47e68:	8c800117 	ldw	r18,4(r17)
   47e6c:	8c400204 	addi	r17,r17,8
   47e70:	003fb306 	br	47d40 <__alt_data_end+0xfffd5d40>
   47e74:	0005883a 	mov	r2,zero
   47e78:	f800283a 	ret
   47e7c:	81000017 	ldw	r4,0(r16)
   47e80:	80800417 	ldw	r2,16(r16)
   47e84:	11005a36 	bltu	r2,r4,47ff0 <__sfvwrite_r+0x320>
   47e88:	85c00517 	ldw	r23,20(r16)
   47e8c:	95c05836 	bltu	r18,r23,47ff0 <__sfvwrite_r+0x320>
   47e90:	00a00034 	movhi	r2,32768
   47e94:	10bfffc4 	addi	r2,r2,-1
   47e98:	9009883a 	mov	r4,r18
   47e9c:	1480012e 	bgeu	r2,r18,47ea4 <__sfvwrite_r+0x1d4>
   47ea0:	1009883a 	mov	r4,r2
   47ea4:	b80b883a 	mov	r5,r23
   47ea8:	00406000 	call	40600 <__divsi3>
   47eac:	b80b883a 	mov	r5,r23
   47eb0:	1009883a 	mov	r4,r2
   47eb4:	0040eec0 	call	40eec <__mulsi3>
   47eb8:	81400717 	ldw	r5,28(r16)
   47ebc:	80c00917 	ldw	r3,36(r16)
   47ec0:	100f883a 	mov	r7,r2
   47ec4:	e00d883a 	mov	r6,fp
   47ec8:	a809883a 	mov	r4,r21
   47ecc:	183ee83a 	callr	r3
   47ed0:	00bfd816 	blt	zero,r2,47e34 <__alt_data_end+0xfffd5e34>
   47ed4:	8080030b 	ldhu	r2,12(r16)
   47ed8:	10801014 	ori	r2,r2,64
   47edc:	8080030d 	sth	r2,12(r16)
   47ee0:	00bfffc4 	movi	r2,-1
   47ee4:	003fa806 	br	47d88 <__alt_data_end+0xfffd5d88>
   47ee8:	0027883a 	mov	r19,zero
   47eec:	0011883a 	mov	r8,zero
   47ef0:	0039883a 	mov	fp,zero
   47ef4:	0025883a 	mov	r18,zero
   47ef8:	90001f26 	beq	r18,zero,47f78 <__sfvwrite_r+0x2a8>
   47efc:	40005a26 	beq	r8,zero,48068 <__sfvwrite_r+0x398>
   47f00:	982d883a 	mov	r22,r19
   47f04:	94c0012e 	bgeu	r18,r19,47f0c <__sfvwrite_r+0x23c>
   47f08:	902d883a 	mov	r22,r18
   47f0c:	81000017 	ldw	r4,0(r16)
   47f10:	80800417 	ldw	r2,16(r16)
   47f14:	b02f883a 	mov	r23,r22
   47f18:	81c00517 	ldw	r7,20(r16)
   47f1c:	1100032e 	bgeu	r2,r4,47f2c <__sfvwrite_r+0x25c>
   47f20:	80c00217 	ldw	r3,8(r16)
   47f24:	38c7883a 	add	r3,r7,r3
   47f28:	1d801816 	blt	r3,r22,47f8c <__sfvwrite_r+0x2bc>
   47f2c:	b1c03e16 	blt	r22,r7,48028 <__sfvwrite_r+0x358>
   47f30:	80800917 	ldw	r2,36(r16)
   47f34:	81400717 	ldw	r5,28(r16)
   47f38:	e00d883a 	mov	r6,fp
   47f3c:	da000115 	stw	r8,4(sp)
   47f40:	a809883a 	mov	r4,r21
   47f44:	103ee83a 	callr	r2
   47f48:	102f883a 	mov	r23,r2
   47f4c:	da000117 	ldw	r8,4(sp)
   47f50:	00bfe00e 	bge	zero,r2,47ed4 <__alt_data_end+0xfffd5ed4>
   47f54:	9de7c83a 	sub	r19,r19,r23
   47f58:	98001f26 	beq	r19,zero,47fd8 <__sfvwrite_r+0x308>
   47f5c:	a0800217 	ldw	r2,8(r20)
   47f60:	e5f9883a 	add	fp,fp,r23
   47f64:	95e5c83a 	sub	r18,r18,r23
   47f68:	15efc83a 	sub	r23,r2,r23
   47f6c:	a5c00215 	stw	r23,8(r20)
   47f70:	b83f8426 	beq	r23,zero,47d84 <__alt_data_end+0xfffd5d84>
   47f74:	903fe11e 	bne	r18,zero,47efc <__alt_data_end+0xfffd5efc>
   47f78:	8f000017 	ldw	fp,0(r17)
   47f7c:	8c800117 	ldw	r18,4(r17)
   47f80:	0011883a 	mov	r8,zero
   47f84:	8c400204 	addi	r17,r17,8
   47f88:	003fdb06 	br	47ef8 <__alt_data_end+0xfffd5ef8>
   47f8c:	180d883a 	mov	r6,r3
   47f90:	e00b883a 	mov	r5,fp
   47f94:	da000115 	stw	r8,4(sp)
   47f98:	d8c00015 	stw	r3,0(sp)
   47f9c:	0048ff00 	call	48ff0 <memmove>
   47fa0:	d8c00017 	ldw	r3,0(sp)
   47fa4:	80800017 	ldw	r2,0(r16)
   47fa8:	800b883a 	mov	r5,r16
   47fac:	a809883a 	mov	r4,r21
   47fb0:	10c5883a 	add	r2,r2,r3
   47fb4:	80800015 	stw	r2,0(r16)
   47fb8:	d8c00015 	stw	r3,0(sp)
   47fbc:	00474600 	call	47460 <_fflush_r>
   47fc0:	d8c00017 	ldw	r3,0(sp)
   47fc4:	da000117 	ldw	r8,4(sp)
   47fc8:	103fc21e 	bne	r2,zero,47ed4 <__alt_data_end+0xfffd5ed4>
   47fcc:	182f883a 	mov	r23,r3
   47fd0:	9de7c83a 	sub	r19,r19,r23
   47fd4:	983fe11e 	bne	r19,zero,47f5c <__alt_data_end+0xfffd5f5c>
   47fd8:	800b883a 	mov	r5,r16
   47fdc:	a809883a 	mov	r4,r21
   47fe0:	00474600 	call	47460 <_fflush_r>
   47fe4:	103fbb1e 	bne	r2,zero,47ed4 <__alt_data_end+0xfffd5ed4>
   47fe8:	0011883a 	mov	r8,zero
   47fec:	003fdb06 	br	47f5c <__alt_data_end+0xfffd5f5c>
   47ff0:	94c0012e 	bgeu	r18,r19,47ff8 <__sfvwrite_r+0x328>
   47ff4:	9027883a 	mov	r19,r18
   47ff8:	980d883a 	mov	r6,r19
   47ffc:	e00b883a 	mov	r5,fp
   48000:	0048ff00 	call	48ff0 <memmove>
   48004:	80800217 	ldw	r2,8(r16)
   48008:	80c00017 	ldw	r3,0(r16)
   4800c:	14c5c83a 	sub	r2,r2,r19
   48010:	1cc7883a 	add	r3,r3,r19
   48014:	80800215 	stw	r2,8(r16)
   48018:	80c00015 	stw	r3,0(r16)
   4801c:	10004326 	beq	r2,zero,4812c <__sfvwrite_r+0x45c>
   48020:	9805883a 	mov	r2,r19
   48024:	003f8306 	br	47e34 <__alt_data_end+0xfffd5e34>
   48028:	b00d883a 	mov	r6,r22
   4802c:	e00b883a 	mov	r5,fp
   48030:	da000115 	stw	r8,4(sp)
   48034:	0048ff00 	call	48ff0 <memmove>
   48038:	80800217 	ldw	r2,8(r16)
   4803c:	80c00017 	ldw	r3,0(r16)
   48040:	da000117 	ldw	r8,4(sp)
   48044:	1585c83a 	sub	r2,r2,r22
   48048:	1dad883a 	add	r22,r3,r22
   4804c:	80800215 	stw	r2,8(r16)
   48050:	85800015 	stw	r22,0(r16)
   48054:	003fbf06 	br	47f54 <__alt_data_end+0xfffd5f54>
   48058:	81000017 	ldw	r4,0(r16)
   4805c:	9027883a 	mov	r19,r18
   48060:	902f883a 	mov	r23,r18
   48064:	003f6906 	br	47e0c <__alt_data_end+0xfffd5e0c>
   48068:	900d883a 	mov	r6,r18
   4806c:	01400284 	movi	r5,10
   48070:	e009883a 	mov	r4,fp
   48074:	0048dc40 	call	48dc4 <memchr>
   48078:	10003e26 	beq	r2,zero,48174 <__sfvwrite_r+0x4a4>
   4807c:	10800044 	addi	r2,r2,1
   48080:	1727c83a 	sub	r19,r2,fp
   48084:	02000044 	movi	r8,1
   48088:	003f9d06 	br	47f00 <__alt_data_end+0xfffd5f00>
   4808c:	80800517 	ldw	r2,20(r16)
   48090:	81400417 	ldw	r5,16(r16)
   48094:	81c00017 	ldw	r7,0(r16)
   48098:	10a7883a 	add	r19,r2,r2
   4809c:	9885883a 	add	r2,r19,r2
   480a0:	1026d7fa 	srli	r19,r2,31
   480a4:	396dc83a 	sub	r22,r7,r5
   480a8:	b1000044 	addi	r4,r22,1
   480ac:	9885883a 	add	r2,r19,r2
   480b0:	1027d07a 	srai	r19,r2,1
   480b4:	2485883a 	add	r2,r4,r18
   480b8:	980d883a 	mov	r6,r19
   480bc:	9880022e 	bgeu	r19,r2,480c8 <__sfvwrite_r+0x3f8>
   480c0:	1027883a 	mov	r19,r2
   480c4:	100d883a 	mov	r6,r2
   480c8:	18c1000c 	andi	r3,r3,1024
   480cc:	18001c26 	beq	r3,zero,48140 <__sfvwrite_r+0x470>
   480d0:	300b883a 	mov	r5,r6
   480d4:	a809883a 	mov	r4,r21
   480d8:	00485b80 	call	485b8 <_malloc_r>
   480dc:	102f883a 	mov	r23,r2
   480e0:	10002926 	beq	r2,zero,48188 <__sfvwrite_r+0x4b8>
   480e4:	81400417 	ldw	r5,16(r16)
   480e8:	b00d883a 	mov	r6,r22
   480ec:	1009883a 	mov	r4,r2
   480f0:	0048ea80 	call	48ea8 <memcpy>
   480f4:	8080030b 	ldhu	r2,12(r16)
   480f8:	00fedfc4 	movi	r3,-1153
   480fc:	10c4703a 	and	r2,r2,r3
   48100:	10802014 	ori	r2,r2,128
   48104:	8080030d 	sth	r2,12(r16)
   48108:	bd89883a 	add	r4,r23,r22
   4810c:	9d8fc83a 	sub	r7,r19,r22
   48110:	85c00415 	stw	r23,16(r16)
   48114:	84c00515 	stw	r19,20(r16)
   48118:	81000015 	stw	r4,0(r16)
   4811c:	9027883a 	mov	r19,r18
   48120:	81c00215 	stw	r7,8(r16)
   48124:	902f883a 	mov	r23,r18
   48128:	003f3806 	br	47e0c <__alt_data_end+0xfffd5e0c>
   4812c:	800b883a 	mov	r5,r16
   48130:	a809883a 	mov	r4,r21
   48134:	00474600 	call	47460 <_fflush_r>
   48138:	103fb926 	beq	r2,zero,48020 <__alt_data_end+0xfffd6020>
   4813c:	003f6506 	br	47ed4 <__alt_data_end+0xfffd5ed4>
   48140:	a809883a 	mov	r4,r21
   48144:	004a4940 	call	4a494 <_realloc_r>
   48148:	102f883a 	mov	r23,r2
   4814c:	103fee1e 	bne	r2,zero,48108 <__alt_data_end+0xfffd6108>
   48150:	81400417 	ldw	r5,16(r16)
   48154:	a809883a 	mov	r4,r21
   48158:	00479c00 	call	479c0 <_free_r>
   4815c:	8080030b 	ldhu	r2,12(r16)
   48160:	00ffdfc4 	movi	r3,-129
   48164:	1884703a 	and	r2,r3,r2
   48168:	00c00304 	movi	r3,12
   4816c:	a8c00015 	stw	r3,0(r21)
   48170:	003f5906 	br	47ed8 <__alt_data_end+0xfffd5ed8>
   48174:	94c00044 	addi	r19,r18,1
   48178:	02000044 	movi	r8,1
   4817c:	003f6006 	br	47f00 <__alt_data_end+0xfffd5f00>
   48180:	00bfffc4 	movi	r2,-1
   48184:	003f0006 	br	47d88 <__alt_data_end+0xfffd5d88>
   48188:	00800304 	movi	r2,12
   4818c:	a8800015 	stw	r2,0(r21)
   48190:	8080030b 	ldhu	r2,12(r16)
   48194:	003f5006 	br	47ed8 <__alt_data_end+0xfffd5ed8>

00048198 <_fwalk>:
   48198:	defff704 	addi	sp,sp,-36
   4819c:	dd000415 	stw	r20,16(sp)
   481a0:	dfc00815 	stw	ra,32(sp)
   481a4:	ddc00715 	stw	r23,28(sp)
   481a8:	dd800615 	stw	r22,24(sp)
   481ac:	dd400515 	stw	r21,20(sp)
   481b0:	dcc00315 	stw	r19,12(sp)
   481b4:	dc800215 	stw	r18,8(sp)
   481b8:	dc400115 	stw	r17,4(sp)
   481bc:	dc000015 	stw	r16,0(sp)
   481c0:	2500b804 	addi	r20,r4,736
   481c4:	a0002326 	beq	r20,zero,48254 <_fwalk+0xbc>
   481c8:	282b883a 	mov	r21,r5
   481cc:	002f883a 	mov	r23,zero
   481d0:	05800044 	movi	r22,1
   481d4:	04ffffc4 	movi	r19,-1
   481d8:	a4400117 	ldw	r17,4(r20)
   481dc:	a4800217 	ldw	r18,8(r20)
   481e0:	8c7fffc4 	addi	r17,r17,-1
   481e4:	88000d16 	blt	r17,zero,4821c <_fwalk+0x84>
   481e8:	94000304 	addi	r16,r18,12
   481ec:	94800384 	addi	r18,r18,14
   481f0:	8080000b 	ldhu	r2,0(r16)
   481f4:	8c7fffc4 	addi	r17,r17,-1
   481f8:	813ffd04 	addi	r4,r16,-12
   481fc:	b080042e 	bgeu	r22,r2,48210 <_fwalk+0x78>
   48200:	9080000f 	ldh	r2,0(r18)
   48204:	14c00226 	beq	r2,r19,48210 <_fwalk+0x78>
   48208:	a83ee83a 	callr	r21
   4820c:	b8aeb03a 	or	r23,r23,r2
   48210:	84001a04 	addi	r16,r16,104
   48214:	94801a04 	addi	r18,r18,104
   48218:	8cfff51e 	bne	r17,r19,481f0 <__alt_data_end+0xfffd61f0>
   4821c:	a5000017 	ldw	r20,0(r20)
   48220:	a03fed1e 	bne	r20,zero,481d8 <__alt_data_end+0xfffd61d8>
   48224:	b805883a 	mov	r2,r23
   48228:	dfc00817 	ldw	ra,32(sp)
   4822c:	ddc00717 	ldw	r23,28(sp)
   48230:	dd800617 	ldw	r22,24(sp)
   48234:	dd400517 	ldw	r21,20(sp)
   48238:	dd000417 	ldw	r20,16(sp)
   4823c:	dcc00317 	ldw	r19,12(sp)
   48240:	dc800217 	ldw	r18,8(sp)
   48244:	dc400117 	ldw	r17,4(sp)
   48248:	dc000017 	ldw	r16,0(sp)
   4824c:	dec00904 	addi	sp,sp,36
   48250:	f800283a 	ret
   48254:	002f883a 	mov	r23,zero
   48258:	003ff206 	br	48224 <__alt_data_end+0xfffd6224>

0004825c <_fwalk_reent>:
   4825c:	defff704 	addi	sp,sp,-36
   48260:	dd000415 	stw	r20,16(sp)
   48264:	dfc00815 	stw	ra,32(sp)
   48268:	ddc00715 	stw	r23,28(sp)
   4826c:	dd800615 	stw	r22,24(sp)
   48270:	dd400515 	stw	r21,20(sp)
   48274:	dcc00315 	stw	r19,12(sp)
   48278:	dc800215 	stw	r18,8(sp)
   4827c:	dc400115 	stw	r17,4(sp)
   48280:	dc000015 	stw	r16,0(sp)
   48284:	2500b804 	addi	r20,r4,736
   48288:	a0002326 	beq	r20,zero,48318 <_fwalk_reent+0xbc>
   4828c:	282b883a 	mov	r21,r5
   48290:	2027883a 	mov	r19,r4
   48294:	002f883a 	mov	r23,zero
   48298:	05800044 	movi	r22,1
   4829c:	04bfffc4 	movi	r18,-1
   482a0:	a4400117 	ldw	r17,4(r20)
   482a4:	a4000217 	ldw	r16,8(r20)
   482a8:	8c7fffc4 	addi	r17,r17,-1
   482ac:	88000c16 	blt	r17,zero,482e0 <_fwalk_reent+0x84>
   482b0:	84000304 	addi	r16,r16,12
   482b4:	8080000b 	ldhu	r2,0(r16)
   482b8:	8c7fffc4 	addi	r17,r17,-1
   482bc:	817ffd04 	addi	r5,r16,-12
   482c0:	b080052e 	bgeu	r22,r2,482d8 <_fwalk_reent+0x7c>
   482c4:	8080008f 	ldh	r2,2(r16)
   482c8:	9809883a 	mov	r4,r19
   482cc:	14800226 	beq	r2,r18,482d8 <_fwalk_reent+0x7c>
   482d0:	a83ee83a 	callr	r21
   482d4:	b8aeb03a 	or	r23,r23,r2
   482d8:	84001a04 	addi	r16,r16,104
   482dc:	8cbff51e 	bne	r17,r18,482b4 <__alt_data_end+0xfffd62b4>
   482e0:	a5000017 	ldw	r20,0(r20)
   482e4:	a03fee1e 	bne	r20,zero,482a0 <__alt_data_end+0xfffd62a0>
   482e8:	b805883a 	mov	r2,r23
   482ec:	dfc00817 	ldw	ra,32(sp)
   482f0:	ddc00717 	ldw	r23,28(sp)
   482f4:	dd800617 	ldw	r22,24(sp)
   482f8:	dd400517 	ldw	r21,20(sp)
   482fc:	dd000417 	ldw	r20,16(sp)
   48300:	dcc00317 	ldw	r19,12(sp)
   48304:	dc800217 	ldw	r18,8(sp)
   48308:	dc400117 	ldw	r17,4(sp)
   4830c:	dc000017 	ldw	r16,0(sp)
   48310:	dec00904 	addi	sp,sp,36
   48314:	f800283a 	ret
   48318:	002f883a 	mov	r23,zero
   4831c:	003ff206 	br	482e8 <__alt_data_end+0xfffd62e8>

00048320 <_setlocale_r>:
   48320:	30001b26 	beq	r6,zero,48390 <_setlocale_r+0x70>
   48324:	01400174 	movhi	r5,5
   48328:	defffe04 	addi	sp,sp,-8
   4832c:	2957fa04 	addi	r5,r5,24552
   48330:	3009883a 	mov	r4,r6
   48334:	dc000015 	stw	r16,0(sp)
   48338:	dfc00115 	stw	ra,4(sp)
   4833c:	3021883a 	mov	r16,r6
   48340:	004abfc0 	call	4abfc <strcmp>
   48344:	1000061e 	bne	r2,zero,48360 <_setlocale_r+0x40>
   48348:	00800174 	movhi	r2,5
   4834c:	1097f904 	addi	r2,r2,24548
   48350:	dfc00117 	ldw	ra,4(sp)
   48354:	dc000017 	ldw	r16,0(sp)
   48358:	dec00204 	addi	sp,sp,8
   4835c:	f800283a 	ret
   48360:	01400174 	movhi	r5,5
   48364:	2957f904 	addi	r5,r5,24548
   48368:	8009883a 	mov	r4,r16
   4836c:	004abfc0 	call	4abfc <strcmp>
   48370:	103ff526 	beq	r2,zero,48348 <__alt_data_end+0xfffd6348>
   48374:	01400174 	movhi	r5,5
   48378:	2957dc04 	addi	r5,r5,24432
   4837c:	8009883a 	mov	r4,r16
   48380:	004abfc0 	call	4abfc <strcmp>
   48384:	103ff026 	beq	r2,zero,48348 <__alt_data_end+0xfffd6348>
   48388:	0005883a 	mov	r2,zero
   4838c:	003ff006 	br	48350 <__alt_data_end+0xfffd6350>
   48390:	00800174 	movhi	r2,5
   48394:	1097f904 	addi	r2,r2,24548
   48398:	f800283a 	ret

0004839c <__locale_charset>:
   4839c:	00800174 	movhi	r2,5
   483a0:	10997e04 	addi	r2,r2,26104
   483a4:	f800283a 	ret

000483a8 <__locale_mb_cur_max>:
   483a8:	00800174 	movhi	r2,5
   483ac:	109f2e04 	addi	r2,r2,31928
   483b0:	10800017 	ldw	r2,0(r2)
   483b4:	f800283a 	ret

000483b8 <__locale_msgcharset>:
   483b8:	00800174 	movhi	r2,5
   483bc:	10997604 	addi	r2,r2,26072
   483c0:	f800283a 	ret

000483c4 <__locale_cjk_lang>:
   483c4:	0005883a 	mov	r2,zero
   483c8:	f800283a 	ret

000483cc <_localeconv_r>:
   483cc:	00800174 	movhi	r2,5
   483d0:	10998604 	addi	r2,r2,26136
   483d4:	f800283a 	ret

000483d8 <setlocale>:
   483d8:	00800174 	movhi	r2,5
   483dc:	109f2d04 	addi	r2,r2,31924
   483e0:	280d883a 	mov	r6,r5
   483e4:	200b883a 	mov	r5,r4
   483e8:	11000017 	ldw	r4,0(r2)
   483ec:	00483201 	jmpi	48320 <_setlocale_r>

000483f0 <localeconv>:
   483f0:	00800174 	movhi	r2,5
   483f4:	10998604 	addi	r2,r2,26136
   483f8:	f800283a 	ret

000483fc <__smakebuf_r>:
   483fc:	2880030b 	ldhu	r2,12(r5)
   48400:	10c0008c 	andi	r3,r2,2
   48404:	1800411e 	bne	r3,zero,4850c <__smakebuf_r+0x110>
   48408:	deffec04 	addi	sp,sp,-80
   4840c:	dc000f15 	stw	r16,60(sp)
   48410:	2821883a 	mov	r16,r5
   48414:	2940038f 	ldh	r5,14(r5)
   48418:	dc401015 	stw	r17,64(sp)
   4841c:	dfc01315 	stw	ra,76(sp)
   48420:	dcc01215 	stw	r19,72(sp)
   48424:	dc801115 	stw	r18,68(sp)
   48428:	2023883a 	mov	r17,r4
   4842c:	28001c16 	blt	r5,zero,484a0 <__smakebuf_r+0xa4>
   48430:	d80d883a 	mov	r6,sp
   48434:	004df340 	call	4df34 <_fstat_r>
   48438:	10001816 	blt	r2,zero,4849c <__smakebuf_r+0xa0>
   4843c:	d8800117 	ldw	r2,4(sp)
   48440:	00e00014 	movui	r3,32768
   48444:	10bc000c 	andi	r2,r2,61440
   48448:	14c80020 	cmpeqi	r19,r2,8192
   4844c:	10c03726 	beq	r2,r3,4852c <__smakebuf_r+0x130>
   48450:	80c0030b 	ldhu	r3,12(r16)
   48454:	18c20014 	ori	r3,r3,2048
   48458:	80c0030d 	sth	r3,12(r16)
   4845c:	00c80004 	movi	r3,8192
   48460:	10c0521e 	bne	r2,r3,485ac <__smakebuf_r+0x1b0>
   48464:	8140038f 	ldh	r5,14(r16)
   48468:	8809883a 	mov	r4,r17
   4846c:	004df900 	call	4df90 <_isatty_r>
   48470:	10004c26 	beq	r2,zero,485a4 <__smakebuf_r+0x1a8>
   48474:	8080030b 	ldhu	r2,12(r16)
   48478:	80c010c4 	addi	r3,r16,67
   4847c:	80c00015 	stw	r3,0(r16)
   48480:	10800054 	ori	r2,r2,1
   48484:	8080030d 	sth	r2,12(r16)
   48488:	00800044 	movi	r2,1
   4848c:	80c00415 	stw	r3,16(r16)
   48490:	80800515 	stw	r2,20(r16)
   48494:	04810004 	movi	r18,1024
   48498:	00000706 	br	484b8 <__smakebuf_r+0xbc>
   4849c:	8080030b 	ldhu	r2,12(r16)
   484a0:	10c0200c 	andi	r3,r2,128
   484a4:	18001f1e 	bne	r3,zero,48524 <__smakebuf_r+0x128>
   484a8:	04810004 	movi	r18,1024
   484ac:	10820014 	ori	r2,r2,2048
   484b0:	8080030d 	sth	r2,12(r16)
   484b4:	0027883a 	mov	r19,zero
   484b8:	900b883a 	mov	r5,r18
   484bc:	8809883a 	mov	r4,r17
   484c0:	00485b80 	call	485b8 <_malloc_r>
   484c4:	10002c26 	beq	r2,zero,48578 <__smakebuf_r+0x17c>
   484c8:	80c0030b 	ldhu	r3,12(r16)
   484cc:	01000134 	movhi	r4,4
   484d0:	211d3d04 	addi	r4,r4,29940
   484d4:	89000f15 	stw	r4,60(r17)
   484d8:	18c02014 	ori	r3,r3,128
   484dc:	80c0030d 	sth	r3,12(r16)
   484e0:	80800015 	stw	r2,0(r16)
   484e4:	80800415 	stw	r2,16(r16)
   484e8:	84800515 	stw	r18,20(r16)
   484ec:	98001a1e 	bne	r19,zero,48558 <__smakebuf_r+0x15c>
   484f0:	dfc01317 	ldw	ra,76(sp)
   484f4:	dcc01217 	ldw	r19,72(sp)
   484f8:	dc801117 	ldw	r18,68(sp)
   484fc:	dc401017 	ldw	r17,64(sp)
   48500:	dc000f17 	ldw	r16,60(sp)
   48504:	dec01404 	addi	sp,sp,80
   48508:	f800283a 	ret
   4850c:	288010c4 	addi	r2,r5,67
   48510:	28800015 	stw	r2,0(r5)
   48514:	28800415 	stw	r2,16(r5)
   48518:	00800044 	movi	r2,1
   4851c:	28800515 	stw	r2,20(r5)
   48520:	f800283a 	ret
   48524:	04801004 	movi	r18,64
   48528:	003fe006 	br	484ac <__alt_data_end+0xfffd64ac>
   4852c:	81000a17 	ldw	r4,40(r16)
   48530:	00c00174 	movhi	r3,5
   48534:	18eae604 	addi	r3,r3,-21608
   48538:	20ffc51e 	bne	r4,r3,48450 <__alt_data_end+0xfffd6450>
   4853c:	8080030b 	ldhu	r2,12(r16)
   48540:	04810004 	movi	r18,1024
   48544:	84801315 	stw	r18,76(r16)
   48548:	1484b03a 	or	r2,r2,r18
   4854c:	8080030d 	sth	r2,12(r16)
   48550:	0027883a 	mov	r19,zero
   48554:	003fd806 	br	484b8 <__alt_data_end+0xfffd64b8>
   48558:	8140038f 	ldh	r5,14(r16)
   4855c:	8809883a 	mov	r4,r17
   48560:	004df900 	call	4df90 <_isatty_r>
   48564:	103fe226 	beq	r2,zero,484f0 <__alt_data_end+0xfffd64f0>
   48568:	8080030b 	ldhu	r2,12(r16)
   4856c:	10800054 	ori	r2,r2,1
   48570:	8080030d 	sth	r2,12(r16)
   48574:	003fde06 	br	484f0 <__alt_data_end+0xfffd64f0>
   48578:	8080030b 	ldhu	r2,12(r16)
   4857c:	10c0800c 	andi	r3,r2,512
   48580:	183fdb1e 	bne	r3,zero,484f0 <__alt_data_end+0xfffd64f0>
   48584:	10800094 	ori	r2,r2,2
   48588:	80c010c4 	addi	r3,r16,67
   4858c:	8080030d 	sth	r2,12(r16)
   48590:	00800044 	movi	r2,1
   48594:	80c00015 	stw	r3,0(r16)
   48598:	80c00415 	stw	r3,16(r16)
   4859c:	80800515 	stw	r2,20(r16)
   485a0:	003fd306 	br	484f0 <__alt_data_end+0xfffd64f0>
   485a4:	04810004 	movi	r18,1024
   485a8:	003fc306 	br	484b8 <__alt_data_end+0xfffd64b8>
   485ac:	0027883a 	mov	r19,zero
   485b0:	04810004 	movi	r18,1024
   485b4:	003fc006 	br	484b8 <__alt_data_end+0xfffd64b8>

000485b8 <_malloc_r>:
   485b8:	defff504 	addi	sp,sp,-44
   485bc:	dc800315 	stw	r18,12(sp)
   485c0:	dfc00a15 	stw	ra,40(sp)
   485c4:	df000915 	stw	fp,36(sp)
   485c8:	ddc00815 	stw	r23,32(sp)
   485cc:	dd800715 	stw	r22,28(sp)
   485d0:	dd400615 	stw	r21,24(sp)
   485d4:	dd000515 	stw	r20,20(sp)
   485d8:	dcc00415 	stw	r19,16(sp)
   485dc:	dc400215 	stw	r17,8(sp)
   485e0:	dc000115 	stw	r16,4(sp)
   485e4:	288002c4 	addi	r2,r5,11
   485e8:	00c00584 	movi	r3,22
   485ec:	2025883a 	mov	r18,r4
   485f0:	18807f2e 	bgeu	r3,r2,487f0 <_malloc_r+0x238>
   485f4:	047ffe04 	movi	r17,-8
   485f8:	1462703a 	and	r17,r2,r17
   485fc:	8800a316 	blt	r17,zero,4888c <_malloc_r+0x2d4>
   48600:	8940a236 	bltu	r17,r5,4888c <_malloc_r+0x2d4>
   48604:	0051c280 	call	51c28 <__malloc_lock>
   48608:	00807dc4 	movi	r2,503
   4860c:	1441e92e 	bgeu	r2,r17,48db4 <_malloc_r+0x7fc>
   48610:	8804d27a 	srli	r2,r17,9
   48614:	1000a126 	beq	r2,zero,4889c <_malloc_r+0x2e4>
   48618:	00c00104 	movi	r3,4
   4861c:	18811e36 	bltu	r3,r2,48a98 <_malloc_r+0x4e0>
   48620:	8804d1ba 	srli	r2,r17,6
   48624:	12000e44 	addi	r8,r2,57
   48628:	11c00e04 	addi	r7,r2,56
   4862c:	4209883a 	add	r4,r8,r8
   48630:	04c00174 	movhi	r19,5
   48634:	2109883a 	add	r4,r4,r4
   48638:	9cd99404 	addi	r19,r19,26192
   4863c:	2109883a 	add	r4,r4,r4
   48640:	9909883a 	add	r4,r19,r4
   48644:	24000117 	ldw	r16,4(r4)
   48648:	213ffe04 	addi	r4,r4,-8
   4864c:	24009726 	beq	r4,r16,488ac <_malloc_r+0x2f4>
   48650:	80800117 	ldw	r2,4(r16)
   48654:	01bfff04 	movi	r6,-4
   48658:	014003c4 	movi	r5,15
   4865c:	1184703a 	and	r2,r2,r6
   48660:	1447c83a 	sub	r3,r2,r17
   48664:	28c00716 	blt	r5,r3,48684 <_malloc_r+0xcc>
   48668:	1800920e 	bge	r3,zero,488b4 <_malloc_r+0x2fc>
   4866c:	84000317 	ldw	r16,12(r16)
   48670:	24008e26 	beq	r4,r16,488ac <_malloc_r+0x2f4>
   48674:	80800117 	ldw	r2,4(r16)
   48678:	1184703a 	and	r2,r2,r6
   4867c:	1447c83a 	sub	r3,r2,r17
   48680:	28fff90e 	bge	r5,r3,48668 <__alt_data_end+0xfffd6668>
   48684:	3809883a 	mov	r4,r7
   48688:	01800174 	movhi	r6,5
   4868c:	9c000417 	ldw	r16,16(r19)
   48690:	31999404 	addi	r6,r6,26192
   48694:	32000204 	addi	r8,r6,8
   48698:	82013426 	beq	r16,r8,48b6c <_malloc_r+0x5b4>
   4869c:	80c00117 	ldw	r3,4(r16)
   486a0:	00bfff04 	movi	r2,-4
   486a4:	188e703a 	and	r7,r3,r2
   486a8:	3c45c83a 	sub	r2,r7,r17
   486ac:	00c003c4 	movi	r3,15
   486b0:	18811f16 	blt	r3,r2,48b30 <_malloc_r+0x578>
   486b4:	32000515 	stw	r8,20(r6)
   486b8:	32000415 	stw	r8,16(r6)
   486bc:	10007f0e 	bge	r2,zero,488bc <_malloc_r+0x304>
   486c0:	00807fc4 	movi	r2,511
   486c4:	11c0fd36 	bltu	r2,r7,48abc <_malloc_r+0x504>
   486c8:	3806d0fa 	srli	r3,r7,3
   486cc:	01c00044 	movi	r7,1
   486d0:	30800117 	ldw	r2,4(r6)
   486d4:	19400044 	addi	r5,r3,1
   486d8:	294b883a 	add	r5,r5,r5
   486dc:	1807d0ba 	srai	r3,r3,2
   486e0:	294b883a 	add	r5,r5,r5
   486e4:	294b883a 	add	r5,r5,r5
   486e8:	298b883a 	add	r5,r5,r6
   486ec:	38c6983a 	sll	r3,r7,r3
   486f0:	29c00017 	ldw	r7,0(r5)
   486f4:	2a7ffe04 	addi	r9,r5,-8
   486f8:	1886b03a 	or	r3,r3,r2
   486fc:	82400315 	stw	r9,12(r16)
   48700:	81c00215 	stw	r7,8(r16)
   48704:	30c00115 	stw	r3,4(r6)
   48708:	2c000015 	stw	r16,0(r5)
   4870c:	3c000315 	stw	r16,12(r7)
   48710:	2005d0ba 	srai	r2,r4,2
   48714:	01400044 	movi	r5,1
   48718:	288a983a 	sll	r5,r5,r2
   4871c:	19406f36 	bltu	r3,r5,488dc <_malloc_r+0x324>
   48720:	28c4703a 	and	r2,r5,r3
   48724:	10000a1e 	bne	r2,zero,48750 <_malloc_r+0x198>
   48728:	00bfff04 	movi	r2,-4
   4872c:	294b883a 	add	r5,r5,r5
   48730:	2088703a 	and	r4,r4,r2
   48734:	28c4703a 	and	r2,r5,r3
   48738:	21000104 	addi	r4,r4,4
   4873c:	1000041e 	bne	r2,zero,48750 <_malloc_r+0x198>
   48740:	294b883a 	add	r5,r5,r5
   48744:	28c4703a 	and	r2,r5,r3
   48748:	21000104 	addi	r4,r4,4
   4874c:	103ffc26 	beq	r2,zero,48740 <__alt_data_end+0xfffd6740>
   48750:	02bfff04 	movi	r10,-4
   48754:	024003c4 	movi	r9,15
   48758:	21800044 	addi	r6,r4,1
   4875c:	318d883a 	add	r6,r6,r6
   48760:	318d883a 	add	r6,r6,r6
   48764:	318d883a 	add	r6,r6,r6
   48768:	998d883a 	add	r6,r19,r6
   4876c:	333ffe04 	addi	r12,r6,-8
   48770:	2017883a 	mov	r11,r4
   48774:	31800104 	addi	r6,r6,4
   48778:	34000017 	ldw	r16,0(r6)
   4877c:	31fffd04 	addi	r7,r6,-12
   48780:	81c0041e 	bne	r16,r7,48794 <_malloc_r+0x1dc>
   48784:	0000fb06 	br	48b74 <_malloc_r+0x5bc>
   48788:	1801030e 	bge	r3,zero,48b98 <_malloc_r+0x5e0>
   4878c:	84000317 	ldw	r16,12(r16)
   48790:	81c0f826 	beq	r16,r7,48b74 <_malloc_r+0x5bc>
   48794:	80800117 	ldw	r2,4(r16)
   48798:	1284703a 	and	r2,r2,r10
   4879c:	1447c83a 	sub	r3,r2,r17
   487a0:	48fff90e 	bge	r9,r3,48788 <__alt_data_end+0xfffd6788>
   487a4:	80800317 	ldw	r2,12(r16)
   487a8:	81000217 	ldw	r4,8(r16)
   487ac:	89400054 	ori	r5,r17,1
   487b0:	81400115 	stw	r5,4(r16)
   487b4:	20800315 	stw	r2,12(r4)
   487b8:	11000215 	stw	r4,8(r2)
   487bc:	8463883a 	add	r17,r16,r17
   487c0:	9c400515 	stw	r17,20(r19)
   487c4:	9c400415 	stw	r17,16(r19)
   487c8:	18800054 	ori	r2,r3,1
   487cc:	88800115 	stw	r2,4(r17)
   487d0:	8a000315 	stw	r8,12(r17)
   487d4:	8a000215 	stw	r8,8(r17)
   487d8:	88e3883a 	add	r17,r17,r3
   487dc:	88c00015 	stw	r3,0(r17)
   487e0:	9009883a 	mov	r4,r18
   487e4:	0051c4c0 	call	51c4c <__malloc_unlock>
   487e8:	80800204 	addi	r2,r16,8
   487ec:	00001b06 	br	4885c <_malloc_r+0x2a4>
   487f0:	04400404 	movi	r17,16
   487f4:	89402536 	bltu	r17,r5,4888c <_malloc_r+0x2d4>
   487f8:	0051c280 	call	51c28 <__malloc_lock>
   487fc:	00800184 	movi	r2,6
   48800:	01000084 	movi	r4,2
   48804:	04c00174 	movhi	r19,5
   48808:	1085883a 	add	r2,r2,r2
   4880c:	9cd99404 	addi	r19,r19,26192
   48810:	1085883a 	add	r2,r2,r2
   48814:	9885883a 	add	r2,r19,r2
   48818:	14000117 	ldw	r16,4(r2)
   4881c:	10fffe04 	addi	r3,r2,-8
   48820:	80c0d926 	beq	r16,r3,48b88 <_malloc_r+0x5d0>
   48824:	80c00117 	ldw	r3,4(r16)
   48828:	81000317 	ldw	r4,12(r16)
   4882c:	00bfff04 	movi	r2,-4
   48830:	1884703a 	and	r2,r3,r2
   48834:	81400217 	ldw	r5,8(r16)
   48838:	8085883a 	add	r2,r16,r2
   4883c:	10c00117 	ldw	r3,4(r2)
   48840:	29000315 	stw	r4,12(r5)
   48844:	21400215 	stw	r5,8(r4)
   48848:	18c00054 	ori	r3,r3,1
   4884c:	10c00115 	stw	r3,4(r2)
   48850:	9009883a 	mov	r4,r18
   48854:	0051c4c0 	call	51c4c <__malloc_unlock>
   48858:	80800204 	addi	r2,r16,8
   4885c:	dfc00a17 	ldw	ra,40(sp)
   48860:	df000917 	ldw	fp,36(sp)
   48864:	ddc00817 	ldw	r23,32(sp)
   48868:	dd800717 	ldw	r22,28(sp)
   4886c:	dd400617 	ldw	r21,24(sp)
   48870:	dd000517 	ldw	r20,20(sp)
   48874:	dcc00417 	ldw	r19,16(sp)
   48878:	dc800317 	ldw	r18,12(sp)
   4887c:	dc400217 	ldw	r17,8(sp)
   48880:	dc000117 	ldw	r16,4(sp)
   48884:	dec00b04 	addi	sp,sp,44
   48888:	f800283a 	ret
   4888c:	00800304 	movi	r2,12
   48890:	90800015 	stw	r2,0(r18)
   48894:	0005883a 	mov	r2,zero
   48898:	003ff006 	br	4885c <__alt_data_end+0xfffd685c>
   4889c:	01002004 	movi	r4,128
   488a0:	02001004 	movi	r8,64
   488a4:	01c00fc4 	movi	r7,63
   488a8:	003f6106 	br	48630 <__alt_data_end+0xfffd6630>
   488ac:	4009883a 	mov	r4,r8
   488b0:	003f7506 	br	48688 <__alt_data_end+0xfffd6688>
   488b4:	81000317 	ldw	r4,12(r16)
   488b8:	003fde06 	br	48834 <__alt_data_end+0xfffd6834>
   488bc:	81c5883a 	add	r2,r16,r7
   488c0:	11400117 	ldw	r5,4(r2)
   488c4:	9009883a 	mov	r4,r18
   488c8:	29400054 	ori	r5,r5,1
   488cc:	11400115 	stw	r5,4(r2)
   488d0:	0051c4c0 	call	51c4c <__malloc_unlock>
   488d4:	80800204 	addi	r2,r16,8
   488d8:	003fe006 	br	4885c <__alt_data_end+0xfffd685c>
   488dc:	9c000217 	ldw	r16,8(r19)
   488e0:	00bfff04 	movi	r2,-4
   488e4:	85800117 	ldw	r22,4(r16)
   488e8:	b0ac703a 	and	r22,r22,r2
   488ec:	b4400336 	bltu	r22,r17,488fc <_malloc_r+0x344>
   488f0:	b445c83a 	sub	r2,r22,r17
   488f4:	00c003c4 	movi	r3,15
   488f8:	18805d16 	blt	r3,r2,48a70 <_malloc_r+0x4b8>
   488fc:	05c00174 	movhi	r23,5
   48900:	008001b4 	movhi	r2,6
   48904:	10a61904 	addi	r2,r2,-26524
   48908:	bddf2f04 	addi	r23,r23,31932
   4890c:	15400017 	ldw	r21,0(r2)
   48910:	b8c00017 	ldw	r3,0(r23)
   48914:	00bfffc4 	movi	r2,-1
   48918:	858d883a 	add	r6,r16,r22
   4891c:	8d6b883a 	add	r21,r17,r21
   48920:	1880ea26 	beq	r3,r2,48ccc <_malloc_r+0x714>
   48924:	ad4403c4 	addi	r21,r21,4111
   48928:	00bc0004 	movi	r2,-4096
   4892c:	a8aa703a 	and	r21,r21,r2
   48930:	a80b883a 	mov	r5,r21
   48934:	9009883a 	mov	r4,r18
   48938:	d9800015 	stw	r6,0(sp)
   4893c:	004aa6c0 	call	4aa6c <_sbrk_r>
   48940:	1029883a 	mov	r20,r2
   48944:	00bfffc4 	movi	r2,-1
   48948:	d9800017 	ldw	r6,0(sp)
   4894c:	a080e826 	beq	r20,r2,48cf0 <_malloc_r+0x738>
   48950:	a180a636 	bltu	r20,r6,48bec <_malloc_r+0x634>
   48954:	070001b4 	movhi	fp,6
   48958:	e7262204 	addi	fp,fp,-26488
   4895c:	e0800017 	ldw	r2,0(fp)
   48960:	a887883a 	add	r3,r21,r2
   48964:	e0c00015 	stw	r3,0(fp)
   48968:	3500e626 	beq	r6,r20,48d04 <_malloc_r+0x74c>
   4896c:	b9000017 	ldw	r4,0(r23)
   48970:	00bfffc4 	movi	r2,-1
   48974:	2080ee26 	beq	r4,r2,48d30 <_malloc_r+0x778>
   48978:	a185c83a 	sub	r2,r20,r6
   4897c:	10c5883a 	add	r2,r2,r3
   48980:	e0800015 	stw	r2,0(fp)
   48984:	a0c001cc 	andi	r3,r20,7
   48988:	1800bc26 	beq	r3,zero,48c7c <_malloc_r+0x6c4>
   4898c:	a0e9c83a 	sub	r20,r20,r3
   48990:	00840204 	movi	r2,4104
   48994:	a5000204 	addi	r20,r20,8
   48998:	10c7c83a 	sub	r3,r2,r3
   4899c:	a545883a 	add	r2,r20,r21
   489a0:	1083ffcc 	andi	r2,r2,4095
   489a4:	18abc83a 	sub	r21,r3,r2
   489a8:	a80b883a 	mov	r5,r21
   489ac:	9009883a 	mov	r4,r18
   489b0:	004aa6c0 	call	4aa6c <_sbrk_r>
   489b4:	00ffffc4 	movi	r3,-1
   489b8:	10c0e126 	beq	r2,r3,48d40 <_malloc_r+0x788>
   489bc:	1505c83a 	sub	r2,r2,r20
   489c0:	1545883a 	add	r2,r2,r21
   489c4:	10800054 	ori	r2,r2,1
   489c8:	e0c00017 	ldw	r3,0(fp)
   489cc:	9d000215 	stw	r20,8(r19)
   489d0:	a0800115 	stw	r2,4(r20)
   489d4:	a8c7883a 	add	r3,r21,r3
   489d8:	e0c00015 	stw	r3,0(fp)
   489dc:	84c00e26 	beq	r16,r19,48a18 <_malloc_r+0x460>
   489e0:	018003c4 	movi	r6,15
   489e4:	3580a72e 	bgeu	r6,r22,48c84 <_malloc_r+0x6cc>
   489e8:	81400117 	ldw	r5,4(r16)
   489ec:	013ffe04 	movi	r4,-8
   489f0:	b0bffd04 	addi	r2,r22,-12
   489f4:	1104703a 	and	r2,r2,r4
   489f8:	2900004c 	andi	r4,r5,1
   489fc:	2088b03a 	or	r4,r4,r2
   48a00:	81000115 	stw	r4,4(r16)
   48a04:	01400144 	movi	r5,5
   48a08:	8089883a 	add	r4,r16,r2
   48a0c:	21400115 	stw	r5,4(r4)
   48a10:	21400215 	stw	r5,8(r4)
   48a14:	3080cd36 	bltu	r6,r2,48d4c <_malloc_r+0x794>
   48a18:	008001b4 	movhi	r2,6
   48a1c:	10a61804 	addi	r2,r2,-26528
   48a20:	11000017 	ldw	r4,0(r2)
   48a24:	20c0012e 	bgeu	r4,r3,48a2c <_malloc_r+0x474>
   48a28:	10c00015 	stw	r3,0(r2)
   48a2c:	008001b4 	movhi	r2,6
   48a30:	10a61704 	addi	r2,r2,-26532
   48a34:	11000017 	ldw	r4,0(r2)
   48a38:	9c000217 	ldw	r16,8(r19)
   48a3c:	20c0012e 	bgeu	r4,r3,48a44 <_malloc_r+0x48c>
   48a40:	10c00015 	stw	r3,0(r2)
   48a44:	80c00117 	ldw	r3,4(r16)
   48a48:	00bfff04 	movi	r2,-4
   48a4c:	1886703a 	and	r3,r3,r2
   48a50:	1c45c83a 	sub	r2,r3,r17
   48a54:	1c400236 	bltu	r3,r17,48a60 <_malloc_r+0x4a8>
   48a58:	00c003c4 	movi	r3,15
   48a5c:	18800416 	blt	r3,r2,48a70 <_malloc_r+0x4b8>
   48a60:	9009883a 	mov	r4,r18
   48a64:	0051c4c0 	call	51c4c <__malloc_unlock>
   48a68:	0005883a 	mov	r2,zero
   48a6c:	003f7b06 	br	4885c <__alt_data_end+0xfffd685c>
   48a70:	88c00054 	ori	r3,r17,1
   48a74:	80c00115 	stw	r3,4(r16)
   48a78:	8463883a 	add	r17,r16,r17
   48a7c:	10800054 	ori	r2,r2,1
   48a80:	9c400215 	stw	r17,8(r19)
   48a84:	88800115 	stw	r2,4(r17)
   48a88:	9009883a 	mov	r4,r18
   48a8c:	0051c4c0 	call	51c4c <__malloc_unlock>
   48a90:	80800204 	addi	r2,r16,8
   48a94:	003f7106 	br	4885c <__alt_data_end+0xfffd685c>
   48a98:	00c00504 	movi	r3,20
   48a9c:	18804a2e 	bgeu	r3,r2,48bc8 <_malloc_r+0x610>
   48aa0:	00c01504 	movi	r3,84
   48aa4:	18806e36 	bltu	r3,r2,48c60 <_malloc_r+0x6a8>
   48aa8:	8804d33a 	srli	r2,r17,12
   48aac:	12001bc4 	addi	r8,r2,111
   48ab0:	11c01b84 	addi	r7,r2,110
   48ab4:	4209883a 	add	r4,r8,r8
   48ab8:	003edd06 	br	48630 <__alt_data_end+0xfffd6630>
   48abc:	3804d27a 	srli	r2,r7,9
   48ac0:	00c00104 	movi	r3,4
   48ac4:	1880442e 	bgeu	r3,r2,48bd8 <_malloc_r+0x620>
   48ac8:	00c00504 	movi	r3,20
   48acc:	18808136 	bltu	r3,r2,48cd4 <_malloc_r+0x71c>
   48ad0:	11401704 	addi	r5,r2,92
   48ad4:	10c016c4 	addi	r3,r2,91
   48ad8:	294b883a 	add	r5,r5,r5
   48adc:	294b883a 	add	r5,r5,r5
   48ae0:	294b883a 	add	r5,r5,r5
   48ae4:	994b883a 	add	r5,r19,r5
   48ae8:	28800017 	ldw	r2,0(r5)
   48aec:	01800174 	movhi	r6,5
   48af0:	297ffe04 	addi	r5,r5,-8
   48af4:	31999404 	addi	r6,r6,26192
   48af8:	28806526 	beq	r5,r2,48c90 <_malloc_r+0x6d8>
   48afc:	01bfff04 	movi	r6,-4
   48b00:	10c00117 	ldw	r3,4(r2)
   48b04:	1986703a 	and	r3,r3,r6
   48b08:	38c0022e 	bgeu	r7,r3,48b14 <_malloc_r+0x55c>
   48b0c:	10800217 	ldw	r2,8(r2)
   48b10:	28bffb1e 	bne	r5,r2,48b00 <__alt_data_end+0xfffd6b00>
   48b14:	11400317 	ldw	r5,12(r2)
   48b18:	98c00117 	ldw	r3,4(r19)
   48b1c:	81400315 	stw	r5,12(r16)
   48b20:	80800215 	stw	r2,8(r16)
   48b24:	2c000215 	stw	r16,8(r5)
   48b28:	14000315 	stw	r16,12(r2)
   48b2c:	003ef806 	br	48710 <__alt_data_end+0xfffd6710>
   48b30:	88c00054 	ori	r3,r17,1
   48b34:	80c00115 	stw	r3,4(r16)
   48b38:	8463883a 	add	r17,r16,r17
   48b3c:	34400515 	stw	r17,20(r6)
   48b40:	34400415 	stw	r17,16(r6)
   48b44:	10c00054 	ori	r3,r2,1
   48b48:	8a000315 	stw	r8,12(r17)
   48b4c:	8a000215 	stw	r8,8(r17)
   48b50:	88c00115 	stw	r3,4(r17)
   48b54:	88a3883a 	add	r17,r17,r2
   48b58:	88800015 	stw	r2,0(r17)
   48b5c:	9009883a 	mov	r4,r18
   48b60:	0051c4c0 	call	51c4c <__malloc_unlock>
   48b64:	80800204 	addi	r2,r16,8
   48b68:	003f3c06 	br	4885c <__alt_data_end+0xfffd685c>
   48b6c:	30c00117 	ldw	r3,4(r6)
   48b70:	003ee706 	br	48710 <__alt_data_end+0xfffd6710>
   48b74:	5ac00044 	addi	r11,r11,1
   48b78:	588000cc 	andi	r2,r11,3
   48b7c:	31800204 	addi	r6,r6,8
   48b80:	103efd1e 	bne	r2,zero,48778 <__alt_data_end+0xfffd6778>
   48b84:	00002406 	br	48c18 <_malloc_r+0x660>
   48b88:	14000317 	ldw	r16,12(r2)
   48b8c:	143f251e 	bne	r2,r16,48824 <__alt_data_end+0xfffd6824>
   48b90:	21000084 	addi	r4,r4,2
   48b94:	003ebc06 	br	48688 <__alt_data_end+0xfffd6688>
   48b98:	8085883a 	add	r2,r16,r2
   48b9c:	10c00117 	ldw	r3,4(r2)
   48ba0:	81000317 	ldw	r4,12(r16)
   48ba4:	81400217 	ldw	r5,8(r16)
   48ba8:	18c00054 	ori	r3,r3,1
   48bac:	10c00115 	stw	r3,4(r2)
   48bb0:	29000315 	stw	r4,12(r5)
   48bb4:	21400215 	stw	r5,8(r4)
   48bb8:	9009883a 	mov	r4,r18
   48bbc:	0051c4c0 	call	51c4c <__malloc_unlock>
   48bc0:	80800204 	addi	r2,r16,8
   48bc4:	003f2506 	br	4885c <__alt_data_end+0xfffd685c>
   48bc8:	12001704 	addi	r8,r2,92
   48bcc:	11c016c4 	addi	r7,r2,91
   48bd0:	4209883a 	add	r4,r8,r8
   48bd4:	003e9606 	br	48630 <__alt_data_end+0xfffd6630>
   48bd8:	3804d1ba 	srli	r2,r7,6
   48bdc:	11400e44 	addi	r5,r2,57
   48be0:	10c00e04 	addi	r3,r2,56
   48be4:	294b883a 	add	r5,r5,r5
   48be8:	003fbc06 	br	48adc <__alt_data_end+0xfffd6adc>
   48bec:	84ff5926 	beq	r16,r19,48954 <__alt_data_end+0xfffd6954>
   48bf0:	00800174 	movhi	r2,5
   48bf4:	10999404 	addi	r2,r2,26192
   48bf8:	14000217 	ldw	r16,8(r2)
   48bfc:	00bfff04 	movi	r2,-4
   48c00:	80c00117 	ldw	r3,4(r16)
   48c04:	1886703a 	and	r3,r3,r2
   48c08:	003f9106 	br	48a50 <__alt_data_end+0xfffd6a50>
   48c0c:	60800217 	ldw	r2,8(r12)
   48c10:	213fffc4 	addi	r4,r4,-1
   48c14:	1300651e 	bne	r2,r12,48dac <_malloc_r+0x7f4>
   48c18:	208000cc 	andi	r2,r4,3
   48c1c:	633ffe04 	addi	r12,r12,-8
   48c20:	103ffa1e 	bne	r2,zero,48c0c <__alt_data_end+0xfffd6c0c>
   48c24:	98800117 	ldw	r2,4(r19)
   48c28:	0146303a 	nor	r3,zero,r5
   48c2c:	1884703a 	and	r2,r3,r2
   48c30:	98800115 	stw	r2,4(r19)
   48c34:	294b883a 	add	r5,r5,r5
   48c38:	117f2836 	bltu	r2,r5,488dc <__alt_data_end+0xfffd68dc>
   48c3c:	283f2726 	beq	r5,zero,488dc <__alt_data_end+0xfffd68dc>
   48c40:	2886703a 	and	r3,r5,r2
   48c44:	5809883a 	mov	r4,r11
   48c48:	183ec31e 	bne	r3,zero,48758 <__alt_data_end+0xfffd6758>
   48c4c:	294b883a 	add	r5,r5,r5
   48c50:	2886703a 	and	r3,r5,r2
   48c54:	21000104 	addi	r4,r4,4
   48c58:	183ffc26 	beq	r3,zero,48c4c <__alt_data_end+0xfffd6c4c>
   48c5c:	003ebe06 	br	48758 <__alt_data_end+0xfffd6758>
   48c60:	00c05504 	movi	r3,340
   48c64:	18801236 	bltu	r3,r2,48cb0 <_malloc_r+0x6f8>
   48c68:	8804d3fa 	srli	r2,r17,15
   48c6c:	12001e04 	addi	r8,r2,120
   48c70:	11c01dc4 	addi	r7,r2,119
   48c74:	4209883a 	add	r4,r8,r8
   48c78:	003e6d06 	br	48630 <__alt_data_end+0xfffd6630>
   48c7c:	00c40004 	movi	r3,4096
   48c80:	003f4606 	br	4899c <__alt_data_end+0xfffd699c>
   48c84:	00800044 	movi	r2,1
   48c88:	a0800115 	stw	r2,4(r20)
   48c8c:	003f7406 	br	48a60 <__alt_data_end+0xfffd6a60>
   48c90:	1805d0ba 	srai	r2,r3,2
   48c94:	01c00044 	movi	r7,1
   48c98:	30c00117 	ldw	r3,4(r6)
   48c9c:	388e983a 	sll	r7,r7,r2
   48ca0:	2805883a 	mov	r2,r5
   48ca4:	38c6b03a 	or	r3,r7,r3
   48ca8:	30c00115 	stw	r3,4(r6)
   48cac:	003f9b06 	br	48b1c <__alt_data_end+0xfffd6b1c>
   48cb0:	00c15504 	movi	r3,1364
   48cb4:	18801a36 	bltu	r3,r2,48d20 <_malloc_r+0x768>
   48cb8:	8804d4ba 	srli	r2,r17,18
   48cbc:	12001f44 	addi	r8,r2,125
   48cc0:	11c01f04 	addi	r7,r2,124
   48cc4:	4209883a 	add	r4,r8,r8
   48cc8:	003e5906 	br	48630 <__alt_data_end+0xfffd6630>
   48ccc:	ad400404 	addi	r21,r21,16
   48cd0:	003f1706 	br	48930 <__alt_data_end+0xfffd6930>
   48cd4:	00c01504 	movi	r3,84
   48cd8:	18802336 	bltu	r3,r2,48d68 <_malloc_r+0x7b0>
   48cdc:	3804d33a 	srli	r2,r7,12
   48ce0:	11401bc4 	addi	r5,r2,111
   48ce4:	10c01b84 	addi	r3,r2,110
   48ce8:	294b883a 	add	r5,r5,r5
   48cec:	003f7b06 	br	48adc <__alt_data_end+0xfffd6adc>
   48cf0:	9c000217 	ldw	r16,8(r19)
   48cf4:	00bfff04 	movi	r2,-4
   48cf8:	80c00117 	ldw	r3,4(r16)
   48cfc:	1886703a 	and	r3,r3,r2
   48d00:	003f5306 	br	48a50 <__alt_data_end+0xfffd6a50>
   48d04:	3083ffcc 	andi	r2,r6,4095
   48d08:	103f181e 	bne	r2,zero,4896c <__alt_data_end+0xfffd696c>
   48d0c:	99000217 	ldw	r4,8(r19)
   48d10:	b545883a 	add	r2,r22,r21
   48d14:	10800054 	ori	r2,r2,1
   48d18:	20800115 	stw	r2,4(r4)
   48d1c:	003f3e06 	br	48a18 <__alt_data_end+0xfffd6a18>
   48d20:	01003f84 	movi	r4,254
   48d24:	02001fc4 	movi	r8,127
   48d28:	01c01f84 	movi	r7,126
   48d2c:	003e4006 	br	48630 <__alt_data_end+0xfffd6630>
   48d30:	00800174 	movhi	r2,5
   48d34:	109f2f04 	addi	r2,r2,31932
   48d38:	15000015 	stw	r20,0(r2)
   48d3c:	003f1106 	br	48984 <__alt_data_end+0xfffd6984>
   48d40:	00800044 	movi	r2,1
   48d44:	002b883a 	mov	r21,zero
   48d48:	003f1f06 	br	489c8 <__alt_data_end+0xfffd69c8>
   48d4c:	81400204 	addi	r5,r16,8
   48d50:	9009883a 	mov	r4,r18
   48d54:	00479c00 	call	479c0 <_free_r>
   48d58:	008001b4 	movhi	r2,6
   48d5c:	10a62204 	addi	r2,r2,-26488
   48d60:	10c00017 	ldw	r3,0(r2)
   48d64:	003f2c06 	br	48a18 <__alt_data_end+0xfffd6a18>
   48d68:	00c05504 	movi	r3,340
   48d6c:	18800536 	bltu	r3,r2,48d84 <_malloc_r+0x7cc>
   48d70:	3804d3fa 	srli	r2,r7,15
   48d74:	11401e04 	addi	r5,r2,120
   48d78:	10c01dc4 	addi	r3,r2,119
   48d7c:	294b883a 	add	r5,r5,r5
   48d80:	003f5606 	br	48adc <__alt_data_end+0xfffd6adc>
   48d84:	00c15504 	movi	r3,1364
   48d88:	18800536 	bltu	r3,r2,48da0 <_malloc_r+0x7e8>
   48d8c:	3804d4ba 	srli	r2,r7,18
   48d90:	11401f44 	addi	r5,r2,125
   48d94:	10c01f04 	addi	r3,r2,124
   48d98:	294b883a 	add	r5,r5,r5
   48d9c:	003f4f06 	br	48adc <__alt_data_end+0xfffd6adc>
   48da0:	01403f84 	movi	r5,254
   48da4:	00c01f84 	movi	r3,126
   48da8:	003f4c06 	br	48adc <__alt_data_end+0xfffd6adc>
   48dac:	98800117 	ldw	r2,4(r19)
   48db0:	003fa006 	br	48c34 <__alt_data_end+0xfffd6c34>
   48db4:	8808d0fa 	srli	r4,r17,3
   48db8:	20800044 	addi	r2,r4,1
   48dbc:	1085883a 	add	r2,r2,r2
   48dc0:	003e9006 	br	48804 <__alt_data_end+0xfffd6804>

00048dc4 <memchr>:
   48dc4:	208000cc 	andi	r2,r4,3
   48dc8:	280f883a 	mov	r7,r5
   48dcc:	10003426 	beq	r2,zero,48ea0 <memchr+0xdc>
   48dd0:	30bfffc4 	addi	r2,r6,-1
   48dd4:	30001a26 	beq	r6,zero,48e40 <memchr+0x7c>
   48dd8:	20c00003 	ldbu	r3,0(r4)
   48ddc:	29803fcc 	andi	r6,r5,255
   48de0:	30c0051e 	bne	r6,r3,48df8 <memchr+0x34>
   48de4:	00001806 	br	48e48 <memchr+0x84>
   48de8:	10001526 	beq	r2,zero,48e40 <memchr+0x7c>
   48dec:	20c00003 	ldbu	r3,0(r4)
   48df0:	10bfffc4 	addi	r2,r2,-1
   48df4:	30c01426 	beq	r6,r3,48e48 <memchr+0x84>
   48df8:	21000044 	addi	r4,r4,1
   48dfc:	20c000cc 	andi	r3,r4,3
   48e00:	183ff91e 	bne	r3,zero,48de8 <__alt_data_end+0xfffd6de8>
   48e04:	020000c4 	movi	r8,3
   48e08:	40801136 	bltu	r8,r2,48e50 <memchr+0x8c>
   48e0c:	10000c26 	beq	r2,zero,48e40 <memchr+0x7c>
   48e10:	20c00003 	ldbu	r3,0(r4)
   48e14:	29403fcc 	andi	r5,r5,255
   48e18:	28c00b26 	beq	r5,r3,48e48 <memchr+0x84>
   48e1c:	20c00044 	addi	r3,r4,1
   48e20:	39803fcc 	andi	r6,r7,255
   48e24:	2089883a 	add	r4,r4,r2
   48e28:	00000306 	br	48e38 <memchr+0x74>
   48e2c:	18c00044 	addi	r3,r3,1
   48e30:	197fffc3 	ldbu	r5,-1(r3)
   48e34:	31400526 	beq	r6,r5,48e4c <memchr+0x88>
   48e38:	1805883a 	mov	r2,r3
   48e3c:	20fffb1e 	bne	r4,r3,48e2c <__alt_data_end+0xfffd6e2c>
   48e40:	0005883a 	mov	r2,zero
   48e44:	f800283a 	ret
   48e48:	2005883a 	mov	r2,r4
   48e4c:	f800283a 	ret
   48e50:	28c03fcc 	andi	r3,r5,255
   48e54:	1812923a 	slli	r9,r3,8
   48e58:	02ffbff4 	movhi	r11,65279
   48e5c:	02a02074 	movhi	r10,32897
   48e60:	48d2b03a 	or	r9,r9,r3
   48e64:	4806943a 	slli	r3,r9,16
   48e68:	5affbfc4 	addi	r11,r11,-257
   48e6c:	52a02004 	addi	r10,r10,-32640
   48e70:	48d2b03a 	or	r9,r9,r3
   48e74:	20c00017 	ldw	r3,0(r4)
   48e78:	48c6f03a 	xor	r3,r9,r3
   48e7c:	1acd883a 	add	r6,r3,r11
   48e80:	00c6303a 	nor	r3,zero,r3
   48e84:	30c6703a 	and	r3,r6,r3
   48e88:	1a86703a 	and	r3,r3,r10
   48e8c:	183fe01e 	bne	r3,zero,48e10 <__alt_data_end+0xfffd6e10>
   48e90:	10bfff04 	addi	r2,r2,-4
   48e94:	21000104 	addi	r4,r4,4
   48e98:	40bff636 	bltu	r8,r2,48e74 <__alt_data_end+0xfffd6e74>
   48e9c:	003fdb06 	br	48e0c <__alt_data_end+0xfffd6e0c>
   48ea0:	3005883a 	mov	r2,r6
   48ea4:	003fd706 	br	48e04 <__alt_data_end+0xfffd6e04>

00048ea8 <memcpy>:
   48ea8:	defffd04 	addi	sp,sp,-12
   48eac:	dfc00215 	stw	ra,8(sp)
   48eb0:	dc400115 	stw	r17,4(sp)
   48eb4:	dc000015 	stw	r16,0(sp)
   48eb8:	00c003c4 	movi	r3,15
   48ebc:	2005883a 	mov	r2,r4
   48ec0:	1980452e 	bgeu	r3,r6,48fd8 <memcpy+0x130>
   48ec4:	2906b03a 	or	r3,r5,r4
   48ec8:	18c000cc 	andi	r3,r3,3
   48ecc:	1800441e 	bne	r3,zero,48fe0 <memcpy+0x138>
   48ed0:	347ffc04 	addi	r17,r6,-16
   48ed4:	8822d13a 	srli	r17,r17,4
   48ed8:	28c00104 	addi	r3,r5,4
   48edc:	23400104 	addi	r13,r4,4
   48ee0:	8820913a 	slli	r16,r17,4
   48ee4:	2b000204 	addi	r12,r5,8
   48ee8:	22c00204 	addi	r11,r4,8
   48eec:	84000504 	addi	r16,r16,20
   48ef0:	2a800304 	addi	r10,r5,12
   48ef4:	22400304 	addi	r9,r4,12
   48ef8:	2c21883a 	add	r16,r5,r16
   48efc:	2811883a 	mov	r8,r5
   48f00:	200f883a 	mov	r7,r4
   48f04:	41000017 	ldw	r4,0(r8)
   48f08:	1fc00017 	ldw	ra,0(r3)
   48f0c:	63c00017 	ldw	r15,0(r12)
   48f10:	39000015 	stw	r4,0(r7)
   48f14:	53800017 	ldw	r14,0(r10)
   48f18:	6fc00015 	stw	ra,0(r13)
   48f1c:	5bc00015 	stw	r15,0(r11)
   48f20:	4b800015 	stw	r14,0(r9)
   48f24:	18c00404 	addi	r3,r3,16
   48f28:	39c00404 	addi	r7,r7,16
   48f2c:	42000404 	addi	r8,r8,16
   48f30:	6b400404 	addi	r13,r13,16
   48f34:	63000404 	addi	r12,r12,16
   48f38:	5ac00404 	addi	r11,r11,16
   48f3c:	52800404 	addi	r10,r10,16
   48f40:	4a400404 	addi	r9,r9,16
   48f44:	1c3fef1e 	bne	r3,r16,48f04 <__alt_data_end+0xfffd6f04>
   48f48:	89c00044 	addi	r7,r17,1
   48f4c:	380e913a 	slli	r7,r7,4
   48f50:	310003cc 	andi	r4,r6,15
   48f54:	02c000c4 	movi	r11,3
   48f58:	11c7883a 	add	r3,r2,r7
   48f5c:	29cb883a 	add	r5,r5,r7
   48f60:	5900212e 	bgeu	r11,r4,48fe8 <memcpy+0x140>
   48f64:	1813883a 	mov	r9,r3
   48f68:	2811883a 	mov	r8,r5
   48f6c:	200f883a 	mov	r7,r4
   48f70:	42800017 	ldw	r10,0(r8)
   48f74:	4a400104 	addi	r9,r9,4
   48f78:	39ffff04 	addi	r7,r7,-4
   48f7c:	4abfff15 	stw	r10,-4(r9)
   48f80:	42000104 	addi	r8,r8,4
   48f84:	59fffa36 	bltu	r11,r7,48f70 <__alt_data_end+0xfffd6f70>
   48f88:	213fff04 	addi	r4,r4,-4
   48f8c:	2008d0ba 	srli	r4,r4,2
   48f90:	318000cc 	andi	r6,r6,3
   48f94:	21000044 	addi	r4,r4,1
   48f98:	2109883a 	add	r4,r4,r4
   48f9c:	2109883a 	add	r4,r4,r4
   48fa0:	1907883a 	add	r3,r3,r4
   48fa4:	290b883a 	add	r5,r5,r4
   48fa8:	30000626 	beq	r6,zero,48fc4 <memcpy+0x11c>
   48fac:	198d883a 	add	r6,r3,r6
   48fb0:	29c00003 	ldbu	r7,0(r5)
   48fb4:	18c00044 	addi	r3,r3,1
   48fb8:	29400044 	addi	r5,r5,1
   48fbc:	19ffffc5 	stb	r7,-1(r3)
   48fc0:	19bffb1e 	bne	r3,r6,48fb0 <__alt_data_end+0xfffd6fb0>
   48fc4:	dfc00217 	ldw	ra,8(sp)
   48fc8:	dc400117 	ldw	r17,4(sp)
   48fcc:	dc000017 	ldw	r16,0(sp)
   48fd0:	dec00304 	addi	sp,sp,12
   48fd4:	f800283a 	ret
   48fd8:	2007883a 	mov	r3,r4
   48fdc:	003ff206 	br	48fa8 <__alt_data_end+0xfffd6fa8>
   48fe0:	2007883a 	mov	r3,r4
   48fe4:	003ff106 	br	48fac <__alt_data_end+0xfffd6fac>
   48fe8:	200d883a 	mov	r6,r4
   48fec:	003fee06 	br	48fa8 <__alt_data_end+0xfffd6fa8>

00048ff0 <memmove>:
   48ff0:	2005883a 	mov	r2,r4
   48ff4:	29000b2e 	bgeu	r5,r4,49024 <memmove+0x34>
   48ff8:	298f883a 	add	r7,r5,r6
   48ffc:	21c0092e 	bgeu	r4,r7,49024 <memmove+0x34>
   49000:	2187883a 	add	r3,r4,r6
   49004:	198bc83a 	sub	r5,r3,r6
   49008:	30004826 	beq	r6,zero,4912c <memmove+0x13c>
   4900c:	39ffffc4 	addi	r7,r7,-1
   49010:	39000003 	ldbu	r4,0(r7)
   49014:	18ffffc4 	addi	r3,r3,-1
   49018:	19000005 	stb	r4,0(r3)
   4901c:	28fffb1e 	bne	r5,r3,4900c <__alt_data_end+0xfffd700c>
   49020:	f800283a 	ret
   49024:	00c003c4 	movi	r3,15
   49028:	1980412e 	bgeu	r3,r6,49130 <memmove+0x140>
   4902c:	2886b03a 	or	r3,r5,r2
   49030:	18c000cc 	andi	r3,r3,3
   49034:	1800401e 	bne	r3,zero,49138 <memmove+0x148>
   49038:	33fffc04 	addi	r15,r6,-16
   4903c:	781ed13a 	srli	r15,r15,4
   49040:	28c00104 	addi	r3,r5,4
   49044:	13400104 	addi	r13,r2,4
   49048:	781c913a 	slli	r14,r15,4
   4904c:	2b000204 	addi	r12,r5,8
   49050:	12c00204 	addi	r11,r2,8
   49054:	73800504 	addi	r14,r14,20
   49058:	2a800304 	addi	r10,r5,12
   4905c:	12400304 	addi	r9,r2,12
   49060:	2b9d883a 	add	r14,r5,r14
   49064:	2811883a 	mov	r8,r5
   49068:	100f883a 	mov	r7,r2
   4906c:	41000017 	ldw	r4,0(r8)
   49070:	39c00404 	addi	r7,r7,16
   49074:	18c00404 	addi	r3,r3,16
   49078:	393ffc15 	stw	r4,-16(r7)
   4907c:	193ffc17 	ldw	r4,-16(r3)
   49080:	6b400404 	addi	r13,r13,16
   49084:	5ac00404 	addi	r11,r11,16
   49088:	693ffc15 	stw	r4,-16(r13)
   4908c:	61000017 	ldw	r4,0(r12)
   49090:	4a400404 	addi	r9,r9,16
   49094:	42000404 	addi	r8,r8,16
   49098:	593ffc15 	stw	r4,-16(r11)
   4909c:	51000017 	ldw	r4,0(r10)
   490a0:	63000404 	addi	r12,r12,16
   490a4:	52800404 	addi	r10,r10,16
   490a8:	493ffc15 	stw	r4,-16(r9)
   490ac:	1bbfef1e 	bne	r3,r14,4906c <__alt_data_end+0xfffd706c>
   490b0:	79000044 	addi	r4,r15,1
   490b4:	2008913a 	slli	r4,r4,4
   490b8:	328003cc 	andi	r10,r6,15
   490bc:	02c000c4 	movi	r11,3
   490c0:	1107883a 	add	r3,r2,r4
   490c4:	290b883a 	add	r5,r5,r4
   490c8:	5a801e2e 	bgeu	r11,r10,49144 <memmove+0x154>
   490cc:	1813883a 	mov	r9,r3
   490d0:	2811883a 	mov	r8,r5
   490d4:	500f883a 	mov	r7,r10
   490d8:	41000017 	ldw	r4,0(r8)
   490dc:	4a400104 	addi	r9,r9,4
   490e0:	39ffff04 	addi	r7,r7,-4
   490e4:	493fff15 	stw	r4,-4(r9)
   490e8:	42000104 	addi	r8,r8,4
   490ec:	59fffa36 	bltu	r11,r7,490d8 <__alt_data_end+0xfffd70d8>
   490f0:	513fff04 	addi	r4,r10,-4
   490f4:	2008d0ba 	srli	r4,r4,2
   490f8:	318000cc 	andi	r6,r6,3
   490fc:	21000044 	addi	r4,r4,1
   49100:	2109883a 	add	r4,r4,r4
   49104:	2109883a 	add	r4,r4,r4
   49108:	1907883a 	add	r3,r3,r4
   4910c:	290b883a 	add	r5,r5,r4
   49110:	30000b26 	beq	r6,zero,49140 <memmove+0x150>
   49114:	198d883a 	add	r6,r3,r6
   49118:	29c00003 	ldbu	r7,0(r5)
   4911c:	18c00044 	addi	r3,r3,1
   49120:	29400044 	addi	r5,r5,1
   49124:	19ffffc5 	stb	r7,-1(r3)
   49128:	19bffb1e 	bne	r3,r6,49118 <__alt_data_end+0xfffd7118>
   4912c:	f800283a 	ret
   49130:	1007883a 	mov	r3,r2
   49134:	003ff606 	br	49110 <__alt_data_end+0xfffd7110>
   49138:	1007883a 	mov	r3,r2
   4913c:	003ff506 	br	49114 <__alt_data_end+0xfffd7114>
   49140:	f800283a 	ret
   49144:	500d883a 	mov	r6,r10
   49148:	003ff106 	br	49110 <__alt_data_end+0xfffd7110>

0004914c <memset>:
   4914c:	20c000cc 	andi	r3,r4,3
   49150:	2005883a 	mov	r2,r4
   49154:	18004426 	beq	r3,zero,49268 <memset+0x11c>
   49158:	31ffffc4 	addi	r7,r6,-1
   4915c:	30004026 	beq	r6,zero,49260 <memset+0x114>
   49160:	2813883a 	mov	r9,r5
   49164:	200d883a 	mov	r6,r4
   49168:	2007883a 	mov	r3,r4
   4916c:	00000406 	br	49180 <memset+0x34>
   49170:	3a3fffc4 	addi	r8,r7,-1
   49174:	31800044 	addi	r6,r6,1
   49178:	38003926 	beq	r7,zero,49260 <memset+0x114>
   4917c:	400f883a 	mov	r7,r8
   49180:	18c00044 	addi	r3,r3,1
   49184:	32400005 	stb	r9,0(r6)
   49188:	1a0000cc 	andi	r8,r3,3
   4918c:	403ff81e 	bne	r8,zero,49170 <__alt_data_end+0xfffd7170>
   49190:	010000c4 	movi	r4,3
   49194:	21c02d2e 	bgeu	r4,r7,4924c <memset+0x100>
   49198:	29003fcc 	andi	r4,r5,255
   4919c:	200c923a 	slli	r6,r4,8
   491a0:	3108b03a 	or	r4,r6,r4
   491a4:	200c943a 	slli	r6,r4,16
   491a8:	218cb03a 	or	r6,r4,r6
   491ac:	010003c4 	movi	r4,15
   491b0:	21c0182e 	bgeu	r4,r7,49214 <memset+0xc8>
   491b4:	3b3ffc04 	addi	r12,r7,-16
   491b8:	6018d13a 	srli	r12,r12,4
   491bc:	1a000104 	addi	r8,r3,4
   491c0:	1ac00204 	addi	r11,r3,8
   491c4:	6008913a 	slli	r4,r12,4
   491c8:	1a800304 	addi	r10,r3,12
   491cc:	1813883a 	mov	r9,r3
   491d0:	21000504 	addi	r4,r4,20
   491d4:	1909883a 	add	r4,r3,r4
   491d8:	49800015 	stw	r6,0(r9)
   491dc:	41800015 	stw	r6,0(r8)
   491e0:	59800015 	stw	r6,0(r11)
   491e4:	51800015 	stw	r6,0(r10)
   491e8:	42000404 	addi	r8,r8,16
   491ec:	4a400404 	addi	r9,r9,16
   491f0:	5ac00404 	addi	r11,r11,16
   491f4:	52800404 	addi	r10,r10,16
   491f8:	413ff71e 	bne	r8,r4,491d8 <__alt_data_end+0xfffd71d8>
   491fc:	63000044 	addi	r12,r12,1
   49200:	6018913a 	slli	r12,r12,4
   49204:	39c003cc 	andi	r7,r7,15
   49208:	010000c4 	movi	r4,3
   4920c:	1b07883a 	add	r3,r3,r12
   49210:	21c00e2e 	bgeu	r4,r7,4924c <memset+0x100>
   49214:	1813883a 	mov	r9,r3
   49218:	3811883a 	mov	r8,r7
   4921c:	010000c4 	movi	r4,3
   49220:	49800015 	stw	r6,0(r9)
   49224:	423fff04 	addi	r8,r8,-4
   49228:	4a400104 	addi	r9,r9,4
   4922c:	223ffc36 	bltu	r4,r8,49220 <__alt_data_end+0xfffd7220>
   49230:	393fff04 	addi	r4,r7,-4
   49234:	2008d0ba 	srli	r4,r4,2
   49238:	39c000cc 	andi	r7,r7,3
   4923c:	21000044 	addi	r4,r4,1
   49240:	2109883a 	add	r4,r4,r4
   49244:	2109883a 	add	r4,r4,r4
   49248:	1907883a 	add	r3,r3,r4
   4924c:	38000526 	beq	r7,zero,49264 <memset+0x118>
   49250:	19cf883a 	add	r7,r3,r7
   49254:	19400005 	stb	r5,0(r3)
   49258:	18c00044 	addi	r3,r3,1
   4925c:	38fffd1e 	bne	r7,r3,49254 <__alt_data_end+0xfffd7254>
   49260:	f800283a 	ret
   49264:	f800283a 	ret
   49268:	2007883a 	mov	r3,r4
   4926c:	300f883a 	mov	r7,r6
   49270:	003fc706 	br	49190 <__alt_data_end+0xfffd7190>

00049274 <_Balloc>:
   49274:	20801317 	ldw	r2,76(r4)
   49278:	defffc04 	addi	sp,sp,-16
   4927c:	dc400115 	stw	r17,4(sp)
   49280:	dc000015 	stw	r16,0(sp)
   49284:	dfc00315 	stw	ra,12(sp)
   49288:	dc800215 	stw	r18,8(sp)
   4928c:	2023883a 	mov	r17,r4
   49290:	2821883a 	mov	r16,r5
   49294:	10000f26 	beq	r2,zero,492d4 <_Balloc+0x60>
   49298:	8407883a 	add	r3,r16,r16
   4929c:	18c7883a 	add	r3,r3,r3
   492a0:	10c7883a 	add	r3,r2,r3
   492a4:	18800017 	ldw	r2,0(r3)
   492a8:	10001126 	beq	r2,zero,492f0 <_Balloc+0x7c>
   492ac:	11000017 	ldw	r4,0(r2)
   492b0:	19000015 	stw	r4,0(r3)
   492b4:	10000415 	stw	zero,16(r2)
   492b8:	10000315 	stw	zero,12(r2)
   492bc:	dfc00317 	ldw	ra,12(sp)
   492c0:	dc800217 	ldw	r18,8(sp)
   492c4:	dc400117 	ldw	r17,4(sp)
   492c8:	dc000017 	ldw	r16,0(sp)
   492cc:	dec00404 	addi	sp,sp,16
   492d0:	f800283a 	ret
   492d4:	01800844 	movi	r6,33
   492d8:	01400104 	movi	r5,4
   492dc:	004db4c0 	call	4db4c <_calloc_r>
   492e0:	88801315 	stw	r2,76(r17)
   492e4:	103fec1e 	bne	r2,zero,49298 <__alt_data_end+0xfffd7298>
   492e8:	0005883a 	mov	r2,zero
   492ec:	003ff306 	br	492bc <__alt_data_end+0xfffd72bc>
   492f0:	01400044 	movi	r5,1
   492f4:	2c24983a 	sll	r18,r5,r16
   492f8:	8809883a 	mov	r4,r17
   492fc:	91800144 	addi	r6,r18,5
   49300:	318d883a 	add	r6,r6,r6
   49304:	318d883a 	add	r6,r6,r6
   49308:	004db4c0 	call	4db4c <_calloc_r>
   4930c:	103ff626 	beq	r2,zero,492e8 <__alt_data_end+0xfffd72e8>
   49310:	14000115 	stw	r16,4(r2)
   49314:	14800215 	stw	r18,8(r2)
   49318:	003fe606 	br	492b4 <__alt_data_end+0xfffd72b4>

0004931c <_Bfree>:
   4931c:	28000826 	beq	r5,zero,49340 <_Bfree+0x24>
   49320:	28c00117 	ldw	r3,4(r5)
   49324:	20801317 	ldw	r2,76(r4)
   49328:	18c7883a 	add	r3,r3,r3
   4932c:	18c7883a 	add	r3,r3,r3
   49330:	10c5883a 	add	r2,r2,r3
   49334:	10c00017 	ldw	r3,0(r2)
   49338:	28c00015 	stw	r3,0(r5)
   4933c:	11400015 	stw	r5,0(r2)
   49340:	f800283a 	ret

00049344 <__multadd>:
   49344:	defff704 	addi	sp,sp,-36
   49348:	dc800215 	stw	r18,8(sp)
   4934c:	2c800417 	ldw	r18,16(r5)
   49350:	dd800615 	stw	r22,24(sp)
   49354:	dd400515 	stw	r21,20(sp)
   49358:	dd000415 	stw	r20,16(sp)
   4935c:	dcc00315 	stw	r19,12(sp)
   49360:	dc400115 	stw	r17,4(sp)
   49364:	dc000015 	stw	r16,0(sp)
   49368:	dfc00815 	stw	ra,32(sp)
   4936c:	ddc00715 	stw	r23,28(sp)
   49370:	2827883a 	mov	r19,r5
   49374:	2029883a 	mov	r20,r4
   49378:	3023883a 	mov	r17,r6
   4937c:	3821883a 	mov	r16,r7
   49380:	2d400504 	addi	r21,r5,20
   49384:	002d883a 	mov	r22,zero
   49388:	adc00017 	ldw	r23,0(r21)
   4938c:	880b883a 	mov	r5,r17
   49390:	ad400104 	addi	r21,r21,4
   49394:	b93fffcc 	andi	r4,r23,65535
   49398:	0040eec0 	call	40eec <__mulsi3>
   4939c:	b808d43a 	srli	r4,r23,16
   493a0:	880b883a 	mov	r5,r17
   493a4:	1421883a 	add	r16,r2,r16
   493a8:	0040eec0 	call	40eec <__mulsi3>
   493ac:	800ed43a 	srli	r7,r16,16
   493b0:	80ffffcc 	andi	r3,r16,65535
   493b4:	b5800044 	addi	r22,r22,1
   493b8:	11c5883a 	add	r2,r2,r7
   493bc:	100e943a 	slli	r7,r2,16
   493c0:	1020d43a 	srli	r16,r2,16
   493c4:	38c7883a 	add	r3,r7,r3
   493c8:	a8ffff15 	stw	r3,-4(r21)
   493cc:	b4bfee16 	blt	r22,r18,49388 <__alt_data_end+0xfffd7388>
   493d0:	80000926 	beq	r16,zero,493f8 <__multadd+0xb4>
   493d4:	98800217 	ldw	r2,8(r19)
   493d8:	9080130e 	bge	r18,r2,49428 <__multadd+0xe4>
   493dc:	90800144 	addi	r2,r18,5
   493e0:	1085883a 	add	r2,r2,r2
   493e4:	1085883a 	add	r2,r2,r2
   493e8:	9885883a 	add	r2,r19,r2
   493ec:	14000015 	stw	r16,0(r2)
   493f0:	94800044 	addi	r18,r18,1
   493f4:	9c800415 	stw	r18,16(r19)
   493f8:	9805883a 	mov	r2,r19
   493fc:	dfc00817 	ldw	ra,32(sp)
   49400:	ddc00717 	ldw	r23,28(sp)
   49404:	dd800617 	ldw	r22,24(sp)
   49408:	dd400517 	ldw	r21,20(sp)
   4940c:	dd000417 	ldw	r20,16(sp)
   49410:	dcc00317 	ldw	r19,12(sp)
   49414:	dc800217 	ldw	r18,8(sp)
   49418:	dc400117 	ldw	r17,4(sp)
   4941c:	dc000017 	ldw	r16,0(sp)
   49420:	dec00904 	addi	sp,sp,36
   49424:	f800283a 	ret
   49428:	99400117 	ldw	r5,4(r19)
   4942c:	a009883a 	mov	r4,r20
   49430:	29400044 	addi	r5,r5,1
   49434:	00492740 	call	49274 <_Balloc>
   49438:	99800417 	ldw	r6,16(r19)
   4943c:	99400304 	addi	r5,r19,12
   49440:	11000304 	addi	r4,r2,12
   49444:	31800084 	addi	r6,r6,2
   49448:	318d883a 	add	r6,r6,r6
   4944c:	318d883a 	add	r6,r6,r6
   49450:	1023883a 	mov	r17,r2
   49454:	0048ea80 	call	48ea8 <memcpy>
   49458:	98000a26 	beq	r19,zero,49484 <__multadd+0x140>
   4945c:	98c00117 	ldw	r3,4(r19)
   49460:	a0801317 	ldw	r2,76(r20)
   49464:	18c7883a 	add	r3,r3,r3
   49468:	18c7883a 	add	r3,r3,r3
   4946c:	10c5883a 	add	r2,r2,r3
   49470:	10c00017 	ldw	r3,0(r2)
   49474:	98c00015 	stw	r3,0(r19)
   49478:	14c00015 	stw	r19,0(r2)
   4947c:	8827883a 	mov	r19,r17
   49480:	003fd606 	br	493dc <__alt_data_end+0xfffd73dc>
   49484:	8827883a 	mov	r19,r17
   49488:	003fd406 	br	493dc <__alt_data_end+0xfffd73dc>

0004948c <__s2b>:
   4948c:	defff904 	addi	sp,sp,-28
   49490:	dc400115 	stw	r17,4(sp)
   49494:	dc000015 	stw	r16,0(sp)
   49498:	2023883a 	mov	r17,r4
   4949c:	2821883a 	mov	r16,r5
   494a0:	39000204 	addi	r4,r7,8
   494a4:	01400244 	movi	r5,9
   494a8:	dcc00315 	stw	r19,12(sp)
   494ac:	dc800215 	stw	r18,8(sp)
   494b0:	dfc00615 	stw	ra,24(sp)
   494b4:	dd400515 	stw	r21,20(sp)
   494b8:	dd000415 	stw	r20,16(sp)
   494bc:	3825883a 	mov	r18,r7
   494c0:	3027883a 	mov	r19,r6
   494c4:	00406000 	call	40600 <__divsi3>
   494c8:	00c00044 	movi	r3,1
   494cc:	000b883a 	mov	r5,zero
   494d0:	1880030e 	bge	r3,r2,494e0 <__s2b+0x54>
   494d4:	18c7883a 	add	r3,r3,r3
   494d8:	29400044 	addi	r5,r5,1
   494dc:	18bffd16 	blt	r3,r2,494d4 <__alt_data_end+0xfffd74d4>
   494e0:	8809883a 	mov	r4,r17
   494e4:	00492740 	call	49274 <_Balloc>
   494e8:	d8c00717 	ldw	r3,28(sp)
   494ec:	10c00515 	stw	r3,20(r2)
   494f0:	00c00044 	movi	r3,1
   494f4:	10c00415 	stw	r3,16(r2)
   494f8:	00c00244 	movi	r3,9
   494fc:	1cc0210e 	bge	r3,r19,49584 <__s2b+0xf8>
   49500:	80eb883a 	add	r21,r16,r3
   49504:	a829883a 	mov	r20,r21
   49508:	84e1883a 	add	r16,r16,r19
   4950c:	a1c00007 	ldb	r7,0(r20)
   49510:	01800284 	movi	r6,10
   49514:	a5000044 	addi	r20,r20,1
   49518:	100b883a 	mov	r5,r2
   4951c:	39fff404 	addi	r7,r7,-48
   49520:	8809883a 	mov	r4,r17
   49524:	00493440 	call	49344 <__multadd>
   49528:	a43ff81e 	bne	r20,r16,4950c <__alt_data_end+0xfffd750c>
   4952c:	ace1883a 	add	r16,r21,r19
   49530:	843ffe04 	addi	r16,r16,-8
   49534:	9c800a0e 	bge	r19,r18,49560 <__s2b+0xd4>
   49538:	94e5c83a 	sub	r18,r18,r19
   4953c:	84a5883a 	add	r18,r16,r18
   49540:	81c00007 	ldb	r7,0(r16)
   49544:	01800284 	movi	r6,10
   49548:	84000044 	addi	r16,r16,1
   4954c:	100b883a 	mov	r5,r2
   49550:	39fff404 	addi	r7,r7,-48
   49554:	8809883a 	mov	r4,r17
   49558:	00493440 	call	49344 <__multadd>
   4955c:	84bff81e 	bne	r16,r18,49540 <__alt_data_end+0xfffd7540>
   49560:	dfc00617 	ldw	ra,24(sp)
   49564:	dd400517 	ldw	r21,20(sp)
   49568:	dd000417 	ldw	r20,16(sp)
   4956c:	dcc00317 	ldw	r19,12(sp)
   49570:	dc800217 	ldw	r18,8(sp)
   49574:	dc400117 	ldw	r17,4(sp)
   49578:	dc000017 	ldw	r16,0(sp)
   4957c:	dec00704 	addi	sp,sp,28
   49580:	f800283a 	ret
   49584:	84000284 	addi	r16,r16,10
   49588:	1827883a 	mov	r19,r3
   4958c:	003fe906 	br	49534 <__alt_data_end+0xfffd7534>

00049590 <__hi0bits>:
   49590:	20bfffec 	andhi	r2,r4,65535
   49594:	1000141e 	bne	r2,zero,495e8 <__hi0bits+0x58>
   49598:	2008943a 	slli	r4,r4,16
   4959c:	00800404 	movi	r2,16
   495a0:	20ffc02c 	andhi	r3,r4,65280
   495a4:	1800021e 	bne	r3,zero,495b0 <__hi0bits+0x20>
   495a8:	2008923a 	slli	r4,r4,8
   495ac:	10800204 	addi	r2,r2,8
   495b0:	20fc002c 	andhi	r3,r4,61440
   495b4:	1800021e 	bne	r3,zero,495c0 <__hi0bits+0x30>
   495b8:	2008913a 	slli	r4,r4,4
   495bc:	10800104 	addi	r2,r2,4
   495c0:	20f0002c 	andhi	r3,r4,49152
   495c4:	1800031e 	bne	r3,zero,495d4 <__hi0bits+0x44>
   495c8:	2109883a 	add	r4,r4,r4
   495cc:	10800084 	addi	r2,r2,2
   495d0:	2109883a 	add	r4,r4,r4
   495d4:	20000316 	blt	r4,zero,495e4 <__hi0bits+0x54>
   495d8:	2110002c 	andhi	r4,r4,16384
   495dc:	2000041e 	bne	r4,zero,495f0 <__hi0bits+0x60>
   495e0:	00800804 	movi	r2,32
   495e4:	f800283a 	ret
   495e8:	0005883a 	mov	r2,zero
   495ec:	003fec06 	br	495a0 <__alt_data_end+0xfffd75a0>
   495f0:	10800044 	addi	r2,r2,1
   495f4:	f800283a 	ret

000495f8 <__lo0bits>:
   495f8:	20c00017 	ldw	r3,0(r4)
   495fc:	188001cc 	andi	r2,r3,7
   49600:	10000826 	beq	r2,zero,49624 <__lo0bits+0x2c>
   49604:	1880004c 	andi	r2,r3,1
   49608:	1000211e 	bne	r2,zero,49690 <__lo0bits+0x98>
   4960c:	1880008c 	andi	r2,r3,2
   49610:	1000211e 	bne	r2,zero,49698 <__lo0bits+0xa0>
   49614:	1806d0ba 	srli	r3,r3,2
   49618:	00800084 	movi	r2,2
   4961c:	20c00015 	stw	r3,0(r4)
   49620:	f800283a 	ret
   49624:	18bfffcc 	andi	r2,r3,65535
   49628:	10001326 	beq	r2,zero,49678 <__lo0bits+0x80>
   4962c:	0005883a 	mov	r2,zero
   49630:	19403fcc 	andi	r5,r3,255
   49634:	2800021e 	bne	r5,zero,49640 <__lo0bits+0x48>
   49638:	1806d23a 	srli	r3,r3,8
   4963c:	10800204 	addi	r2,r2,8
   49640:	194003cc 	andi	r5,r3,15
   49644:	2800021e 	bne	r5,zero,49650 <__lo0bits+0x58>
   49648:	1806d13a 	srli	r3,r3,4
   4964c:	10800104 	addi	r2,r2,4
   49650:	194000cc 	andi	r5,r3,3
   49654:	2800021e 	bne	r5,zero,49660 <__lo0bits+0x68>
   49658:	1806d0ba 	srli	r3,r3,2
   4965c:	10800084 	addi	r2,r2,2
   49660:	1940004c 	andi	r5,r3,1
   49664:	2800081e 	bne	r5,zero,49688 <__lo0bits+0x90>
   49668:	1806d07a 	srli	r3,r3,1
   4966c:	1800051e 	bne	r3,zero,49684 <__lo0bits+0x8c>
   49670:	00800804 	movi	r2,32
   49674:	f800283a 	ret
   49678:	1806d43a 	srli	r3,r3,16
   4967c:	00800404 	movi	r2,16
   49680:	003feb06 	br	49630 <__alt_data_end+0xfffd7630>
   49684:	10800044 	addi	r2,r2,1
   49688:	20c00015 	stw	r3,0(r4)
   4968c:	f800283a 	ret
   49690:	0005883a 	mov	r2,zero
   49694:	f800283a 	ret
   49698:	1806d07a 	srli	r3,r3,1
   4969c:	00800044 	movi	r2,1
   496a0:	20c00015 	stw	r3,0(r4)
   496a4:	f800283a 	ret

000496a8 <__i2b>:
   496a8:	defffd04 	addi	sp,sp,-12
   496ac:	dc000015 	stw	r16,0(sp)
   496b0:	04000044 	movi	r16,1
   496b4:	dc400115 	stw	r17,4(sp)
   496b8:	2823883a 	mov	r17,r5
   496bc:	800b883a 	mov	r5,r16
   496c0:	dfc00215 	stw	ra,8(sp)
   496c4:	00492740 	call	49274 <_Balloc>
   496c8:	14400515 	stw	r17,20(r2)
   496cc:	14000415 	stw	r16,16(r2)
   496d0:	dfc00217 	ldw	ra,8(sp)
   496d4:	dc400117 	ldw	r17,4(sp)
   496d8:	dc000017 	ldw	r16,0(sp)
   496dc:	dec00304 	addi	sp,sp,12
   496e0:	f800283a 	ret

000496e4 <__multiply>:
   496e4:	deffef04 	addi	sp,sp,-68
   496e8:	dc400815 	stw	r17,32(sp)
   496ec:	dc000715 	stw	r16,28(sp)
   496f0:	34400417 	ldw	r17,16(r6)
   496f4:	2c000417 	ldw	r16,16(r5)
   496f8:	dd800d15 	stw	r22,52(sp)
   496fc:	dc800915 	stw	r18,36(sp)
   49700:	dfc01015 	stw	ra,64(sp)
   49704:	df000f15 	stw	fp,60(sp)
   49708:	ddc00e15 	stw	r23,56(sp)
   4970c:	dd400c15 	stw	r21,48(sp)
   49710:	dd000b15 	stw	r20,44(sp)
   49714:	dcc00a15 	stw	r19,40(sp)
   49718:	2825883a 	mov	r18,r5
   4971c:	302d883a 	mov	r22,r6
   49720:	8440050e 	bge	r16,r17,49738 <__multiply+0x54>
   49724:	8007883a 	mov	r3,r16
   49728:	3025883a 	mov	r18,r6
   4972c:	8821883a 	mov	r16,r17
   49730:	282d883a 	mov	r22,r5
   49734:	1823883a 	mov	r17,r3
   49738:	90800217 	ldw	r2,8(r18)
   4973c:	8447883a 	add	r3,r16,r17
   49740:	d8c00215 	stw	r3,8(sp)
   49744:	91400117 	ldw	r5,4(r18)
   49748:	10c0010e 	bge	r2,r3,49750 <__multiply+0x6c>
   4974c:	29400044 	addi	r5,r5,1
   49750:	00492740 	call	49274 <_Balloc>
   49754:	d8c00217 	ldw	r3,8(sp)
   49758:	d8800615 	stw	r2,24(sp)
   4975c:	18eb883a 	add	r21,r3,r3
   49760:	ad6b883a 	add	r21,r21,r21
   49764:	10c00504 	addi	r3,r2,20
   49768:	1d6b883a 	add	r21,r3,r21
   4976c:	d8c00115 	stw	r3,4(sp)
   49770:	dd400315 	stw	r21,12(sp)
   49774:	1805883a 	mov	r2,r3
   49778:	1d40042e 	bgeu	r3,r21,4978c <__multiply+0xa8>
   4977c:	d8c00317 	ldw	r3,12(sp)
   49780:	10000015 	stw	zero,0(r2)
   49784:	10800104 	addi	r2,r2,4
   49788:	10fffc36 	bltu	r2,r3,4977c <__alt_data_end+0xfffd777c>
   4978c:	8c63883a 	add	r17,r17,r17
   49790:	b5800504 	addi	r22,r22,20
   49794:	8c63883a 	add	r17,r17,r17
   49798:	94800504 	addi	r18,r18,20
   4979c:	8421883a 	add	r16,r16,r16
   497a0:	b463883a 	add	r17,r22,r17
   497a4:	8421883a 	add	r16,r16,r16
   497a8:	dd800015 	stw	r22,0(sp)
   497ac:	dc800415 	stw	r18,16(sp)
   497b0:	dc400515 	stw	r17,20(sp)
   497b4:	9429883a 	add	r20,r18,r16
   497b8:	b4404f2e 	bgeu	r22,r17,498f8 <__multiply+0x214>
   497bc:	d8c00017 	ldw	r3,0(sp)
   497c0:	1c800017 	ldw	r18,0(r3)
   497c4:	947fffcc 	andi	r17,r18,65535
   497c8:	88001e26 	beq	r17,zero,49844 <__multiply+0x160>
   497cc:	dd800117 	ldw	r22,4(sp)
   497d0:	dd400417 	ldw	r21,16(sp)
   497d4:	0027883a 	mov	r19,zero
   497d8:	ac800017 	ldw	r18,0(r21)
   497dc:	b4000017 	ldw	r16,0(r22)
   497e0:	880b883a 	mov	r5,r17
   497e4:	913fffcc 	andi	r4,r18,65535
   497e8:	0040eec0 	call	40eec <__mulsi3>
   497ec:	9008d43a 	srli	r4,r18,16
   497f0:	84bfffcc 	andi	r18,r16,65535
   497f4:	1485883a 	add	r2,r2,r18
   497f8:	14e5883a 	add	r18,r2,r19
   497fc:	8020d43a 	srli	r16,r16,16
   49800:	9026d43a 	srli	r19,r18,16
   49804:	880b883a 	mov	r5,r17
   49808:	0040eec0 	call	40eec <__mulsi3>
   4980c:	1405883a 	add	r2,r2,r16
   49810:	14e1883a 	add	r16,r2,r19
   49814:	90ffffcc 	andi	r3,r18,65535
   49818:	8024943a 	slli	r18,r16,16
   4981c:	ad400104 	addi	r21,r21,4
   49820:	b005883a 	mov	r2,r22
   49824:	90c6b03a 	or	r3,r18,r3
   49828:	b0c00015 	stw	r3,0(r22)
   4982c:	8026d43a 	srli	r19,r16,16
   49830:	b5800104 	addi	r22,r22,4
   49834:	ad3fe836 	bltu	r21,r20,497d8 <__alt_data_end+0xfffd77d8>
   49838:	d8c00017 	ldw	r3,0(sp)
   4983c:	14c00115 	stw	r19,4(r2)
   49840:	1c800017 	ldw	r18,0(r3)
   49844:	9024d43a 	srli	r18,r18,16
   49848:	90002226 	beq	r18,zero,498d4 <__multiply+0x1f0>
   4984c:	d8c00117 	ldw	r3,4(sp)
   49850:	dd800417 	ldw	r22,16(sp)
   49854:	002f883a 	mov	r23,zero
   49858:	1f000017 	ldw	fp,0(r3)
   4985c:	1823883a 	mov	r17,r3
   49860:	182b883a 	mov	r21,r3
   49864:	e021883a 	mov	r16,fp
   49868:	00000106 	br	49870 <__multiply+0x18c>
   4986c:	982b883a 	mov	r21,r19
   49870:	b100000b 	ldhu	r4,0(r22)
   49874:	8020d43a 	srli	r16,r16,16
   49878:	900b883a 	mov	r5,r18
   4987c:	0040eec0 	call	40eec <__mulsi3>
   49880:	1405883a 	add	r2,r2,r16
   49884:	15ef883a 	add	r23,r2,r23
   49888:	b804943a 	slli	r2,r23,16
   4988c:	e0ffffcc 	andi	r3,fp,65535
   49890:	8c400104 	addi	r17,r17,4
   49894:	10c6b03a 	or	r3,r2,r3
   49898:	88ffff15 	stw	r3,-4(r17)
   4989c:	b5800104 	addi	r22,r22,4
   498a0:	b13fff17 	ldw	r4,-4(r22)
   498a4:	acc00104 	addi	r19,r21,4
   498a8:	900b883a 	mov	r5,r18
   498ac:	2008d43a 	srli	r4,r4,16
   498b0:	9c000017 	ldw	r16,0(r19)
   498b4:	0040eec0 	call	40eec <__mulsi3>
   498b8:	b806d43a 	srli	r3,r23,16
   498bc:	813fffcc 	andi	r4,r16,65535
   498c0:	1105883a 	add	r2,r2,r4
   498c4:	10f9883a 	add	fp,r2,r3
   498c8:	e02ed43a 	srli	r23,fp,16
   498cc:	b53fe736 	bltu	r22,r20,4986c <__alt_data_end+0xfffd786c>
   498d0:	af000115 	stw	fp,4(r21)
   498d4:	d8c00017 	ldw	r3,0(sp)
   498d8:	d9000517 	ldw	r4,20(sp)
   498dc:	18c00104 	addi	r3,r3,4
   498e0:	d8c00015 	stw	r3,0(sp)
   498e4:	d8c00117 	ldw	r3,4(sp)
   498e8:	18c00104 	addi	r3,r3,4
   498ec:	d8c00115 	stw	r3,4(sp)
   498f0:	d8c00017 	ldw	r3,0(sp)
   498f4:	193fb136 	bltu	r3,r4,497bc <__alt_data_end+0xfffd77bc>
   498f8:	d8c00217 	ldw	r3,8(sp)
   498fc:	00c00c0e 	bge	zero,r3,49930 <__multiply+0x24c>
   49900:	d8c00317 	ldw	r3,12(sp)
   49904:	18bfff17 	ldw	r2,-4(r3)
   49908:	1d7fff04 	addi	r21,r3,-4
   4990c:	10000326 	beq	r2,zero,4991c <__multiply+0x238>
   49910:	00000706 	br	49930 <__multiply+0x24c>
   49914:	a8800017 	ldw	r2,0(r21)
   49918:	1000051e 	bne	r2,zero,49930 <__multiply+0x24c>
   4991c:	d8c00217 	ldw	r3,8(sp)
   49920:	ad7fff04 	addi	r21,r21,-4
   49924:	18ffffc4 	addi	r3,r3,-1
   49928:	d8c00215 	stw	r3,8(sp)
   4992c:	183ff91e 	bne	r3,zero,49914 <__alt_data_end+0xfffd7914>
   49930:	d8c00617 	ldw	r3,24(sp)
   49934:	d9000217 	ldw	r4,8(sp)
   49938:	1805883a 	mov	r2,r3
   4993c:	19000415 	stw	r4,16(r3)
   49940:	dfc01017 	ldw	ra,64(sp)
   49944:	df000f17 	ldw	fp,60(sp)
   49948:	ddc00e17 	ldw	r23,56(sp)
   4994c:	dd800d17 	ldw	r22,52(sp)
   49950:	dd400c17 	ldw	r21,48(sp)
   49954:	dd000b17 	ldw	r20,44(sp)
   49958:	dcc00a17 	ldw	r19,40(sp)
   4995c:	dc800917 	ldw	r18,36(sp)
   49960:	dc400817 	ldw	r17,32(sp)
   49964:	dc000717 	ldw	r16,28(sp)
   49968:	dec01104 	addi	sp,sp,68
   4996c:	f800283a 	ret

00049970 <__pow5mult>:
   49970:	defffa04 	addi	sp,sp,-24
   49974:	dcc00315 	stw	r19,12(sp)
   49978:	dc000015 	stw	r16,0(sp)
   4997c:	dfc00515 	stw	ra,20(sp)
   49980:	dd000415 	stw	r20,16(sp)
   49984:	dc800215 	stw	r18,8(sp)
   49988:	dc400115 	stw	r17,4(sp)
   4998c:	308000cc 	andi	r2,r6,3
   49990:	3021883a 	mov	r16,r6
   49994:	2027883a 	mov	r19,r4
   49998:	10002f1e 	bne	r2,zero,49a58 <__pow5mult+0xe8>
   4999c:	2825883a 	mov	r18,r5
   499a0:	8021d0ba 	srai	r16,r16,2
   499a4:	80001a26 	beq	r16,zero,49a10 <__pow5mult+0xa0>
   499a8:	9c401217 	ldw	r17,72(r19)
   499ac:	8800061e 	bne	r17,zero,499c8 <__pow5mult+0x58>
   499b0:	00003406 	br	49a84 <__pow5mult+0x114>
   499b4:	8021d07a 	srai	r16,r16,1
   499b8:	80001526 	beq	r16,zero,49a10 <__pow5mult+0xa0>
   499bc:	88800017 	ldw	r2,0(r17)
   499c0:	10001c26 	beq	r2,zero,49a34 <__pow5mult+0xc4>
   499c4:	1023883a 	mov	r17,r2
   499c8:	8080004c 	andi	r2,r16,1
   499cc:	103ff926 	beq	r2,zero,499b4 <__alt_data_end+0xfffd79b4>
   499d0:	880d883a 	mov	r6,r17
   499d4:	900b883a 	mov	r5,r18
   499d8:	9809883a 	mov	r4,r19
   499dc:	00496e40 	call	496e4 <__multiply>
   499e0:	90001b26 	beq	r18,zero,49a50 <__pow5mult+0xe0>
   499e4:	91000117 	ldw	r4,4(r18)
   499e8:	98c01317 	ldw	r3,76(r19)
   499ec:	8021d07a 	srai	r16,r16,1
   499f0:	2109883a 	add	r4,r4,r4
   499f4:	2109883a 	add	r4,r4,r4
   499f8:	1907883a 	add	r3,r3,r4
   499fc:	19000017 	ldw	r4,0(r3)
   49a00:	91000015 	stw	r4,0(r18)
   49a04:	1c800015 	stw	r18,0(r3)
   49a08:	1025883a 	mov	r18,r2
   49a0c:	803feb1e 	bne	r16,zero,499bc <__alt_data_end+0xfffd79bc>
   49a10:	9005883a 	mov	r2,r18
   49a14:	dfc00517 	ldw	ra,20(sp)
   49a18:	dd000417 	ldw	r20,16(sp)
   49a1c:	dcc00317 	ldw	r19,12(sp)
   49a20:	dc800217 	ldw	r18,8(sp)
   49a24:	dc400117 	ldw	r17,4(sp)
   49a28:	dc000017 	ldw	r16,0(sp)
   49a2c:	dec00604 	addi	sp,sp,24
   49a30:	f800283a 	ret
   49a34:	880d883a 	mov	r6,r17
   49a38:	880b883a 	mov	r5,r17
   49a3c:	9809883a 	mov	r4,r19
   49a40:	00496e40 	call	496e4 <__multiply>
   49a44:	88800015 	stw	r2,0(r17)
   49a48:	10000015 	stw	zero,0(r2)
   49a4c:	003fdd06 	br	499c4 <__alt_data_end+0xfffd79c4>
   49a50:	1025883a 	mov	r18,r2
   49a54:	003fd706 	br	499b4 <__alt_data_end+0xfffd79b4>
   49a58:	10bfffc4 	addi	r2,r2,-1
   49a5c:	1085883a 	add	r2,r2,r2
   49a60:	00c00174 	movhi	r3,5
   49a64:	18d7fd04 	addi	r3,r3,24564
   49a68:	1085883a 	add	r2,r2,r2
   49a6c:	1885883a 	add	r2,r3,r2
   49a70:	11800017 	ldw	r6,0(r2)
   49a74:	000f883a 	mov	r7,zero
   49a78:	00493440 	call	49344 <__multadd>
   49a7c:	1025883a 	mov	r18,r2
   49a80:	003fc706 	br	499a0 <__alt_data_end+0xfffd79a0>
   49a84:	05000044 	movi	r20,1
   49a88:	a00b883a 	mov	r5,r20
   49a8c:	9809883a 	mov	r4,r19
   49a90:	00492740 	call	49274 <_Balloc>
   49a94:	1023883a 	mov	r17,r2
   49a98:	00809c44 	movi	r2,625
   49a9c:	88800515 	stw	r2,20(r17)
   49aa0:	8d000415 	stw	r20,16(r17)
   49aa4:	9c401215 	stw	r17,72(r19)
   49aa8:	88000015 	stw	zero,0(r17)
   49aac:	003fc606 	br	499c8 <__alt_data_end+0xfffd79c8>

00049ab0 <__lshift>:
   49ab0:	defff904 	addi	sp,sp,-28
   49ab4:	dd400515 	stw	r21,20(sp)
   49ab8:	dcc00315 	stw	r19,12(sp)
   49abc:	302bd17a 	srai	r21,r6,5
   49ac0:	2cc00417 	ldw	r19,16(r5)
   49ac4:	28800217 	ldw	r2,8(r5)
   49ac8:	dd000415 	stw	r20,16(sp)
   49acc:	ace7883a 	add	r19,r21,r19
   49ad0:	dc800215 	stw	r18,8(sp)
   49ad4:	dc400115 	stw	r17,4(sp)
   49ad8:	dc000015 	stw	r16,0(sp)
   49adc:	dfc00615 	stw	ra,24(sp)
   49ae0:	9c000044 	addi	r16,r19,1
   49ae4:	2823883a 	mov	r17,r5
   49ae8:	3029883a 	mov	r20,r6
   49aec:	2025883a 	mov	r18,r4
   49af0:	29400117 	ldw	r5,4(r5)
   49af4:	1400030e 	bge	r2,r16,49b04 <__lshift+0x54>
   49af8:	1085883a 	add	r2,r2,r2
   49afc:	29400044 	addi	r5,r5,1
   49b00:	143ffd16 	blt	r2,r16,49af8 <__alt_data_end+0xfffd7af8>
   49b04:	9009883a 	mov	r4,r18
   49b08:	00492740 	call	49274 <_Balloc>
   49b0c:	10c00504 	addi	r3,r2,20
   49b10:	0540070e 	bge	zero,r21,49b30 <__lshift+0x80>
   49b14:	ad6b883a 	add	r21,r21,r21
   49b18:	ad6b883a 	add	r21,r21,r21
   49b1c:	1809883a 	mov	r4,r3
   49b20:	1d47883a 	add	r3,r3,r21
   49b24:	20000015 	stw	zero,0(r4)
   49b28:	21000104 	addi	r4,r4,4
   49b2c:	193ffd1e 	bne	r3,r4,49b24 <__alt_data_end+0xfffd7b24>
   49b30:	8a000417 	ldw	r8,16(r17)
   49b34:	89000504 	addi	r4,r17,20
   49b38:	a18007cc 	andi	r6,r20,31
   49b3c:	4211883a 	add	r8,r8,r8
   49b40:	4211883a 	add	r8,r8,r8
   49b44:	2211883a 	add	r8,r4,r8
   49b48:	30002326 	beq	r6,zero,49bd8 <__lshift+0x128>
   49b4c:	02400804 	movi	r9,32
   49b50:	4993c83a 	sub	r9,r9,r6
   49b54:	000b883a 	mov	r5,zero
   49b58:	21c00017 	ldw	r7,0(r4)
   49b5c:	1815883a 	mov	r10,r3
   49b60:	18c00104 	addi	r3,r3,4
   49b64:	398e983a 	sll	r7,r7,r6
   49b68:	21000104 	addi	r4,r4,4
   49b6c:	394ab03a 	or	r5,r7,r5
   49b70:	197fff15 	stw	r5,-4(r3)
   49b74:	217fff17 	ldw	r5,-4(r4)
   49b78:	2a4ad83a 	srl	r5,r5,r9
   49b7c:	223ff636 	bltu	r4,r8,49b58 <__alt_data_end+0xfffd7b58>
   49b80:	51400115 	stw	r5,4(r10)
   49b84:	28001a1e 	bne	r5,zero,49bf0 <__lshift+0x140>
   49b88:	843fffc4 	addi	r16,r16,-1
   49b8c:	14000415 	stw	r16,16(r2)
   49b90:	88000826 	beq	r17,zero,49bb4 <__lshift+0x104>
   49b94:	89000117 	ldw	r4,4(r17)
   49b98:	90c01317 	ldw	r3,76(r18)
   49b9c:	2109883a 	add	r4,r4,r4
   49ba0:	2109883a 	add	r4,r4,r4
   49ba4:	1907883a 	add	r3,r3,r4
   49ba8:	19000017 	ldw	r4,0(r3)
   49bac:	89000015 	stw	r4,0(r17)
   49bb0:	1c400015 	stw	r17,0(r3)
   49bb4:	dfc00617 	ldw	ra,24(sp)
   49bb8:	dd400517 	ldw	r21,20(sp)
   49bbc:	dd000417 	ldw	r20,16(sp)
   49bc0:	dcc00317 	ldw	r19,12(sp)
   49bc4:	dc800217 	ldw	r18,8(sp)
   49bc8:	dc400117 	ldw	r17,4(sp)
   49bcc:	dc000017 	ldw	r16,0(sp)
   49bd0:	dec00704 	addi	sp,sp,28
   49bd4:	f800283a 	ret
   49bd8:	21400017 	ldw	r5,0(r4)
   49bdc:	18c00104 	addi	r3,r3,4
   49be0:	21000104 	addi	r4,r4,4
   49be4:	197fff15 	stw	r5,-4(r3)
   49be8:	223ffb36 	bltu	r4,r8,49bd8 <__alt_data_end+0xfffd7bd8>
   49bec:	003fe606 	br	49b88 <__alt_data_end+0xfffd7b88>
   49bf0:	9c000084 	addi	r16,r19,2
   49bf4:	003fe406 	br	49b88 <__alt_data_end+0xfffd7b88>

00049bf8 <__mcmp>:
   49bf8:	20800417 	ldw	r2,16(r4)
   49bfc:	28c00417 	ldw	r3,16(r5)
   49c00:	10c5c83a 	sub	r2,r2,r3
   49c04:	1000111e 	bne	r2,zero,49c4c <__mcmp+0x54>
   49c08:	18c7883a 	add	r3,r3,r3
   49c0c:	18c7883a 	add	r3,r3,r3
   49c10:	21000504 	addi	r4,r4,20
   49c14:	29400504 	addi	r5,r5,20
   49c18:	20c5883a 	add	r2,r4,r3
   49c1c:	28cb883a 	add	r5,r5,r3
   49c20:	00000106 	br	49c28 <__mcmp+0x30>
   49c24:	20800a2e 	bgeu	r4,r2,49c50 <__mcmp+0x58>
   49c28:	10bfff04 	addi	r2,r2,-4
   49c2c:	297fff04 	addi	r5,r5,-4
   49c30:	11800017 	ldw	r6,0(r2)
   49c34:	28c00017 	ldw	r3,0(r5)
   49c38:	30fffa26 	beq	r6,r3,49c24 <__alt_data_end+0xfffd7c24>
   49c3c:	30c00236 	bltu	r6,r3,49c48 <__mcmp+0x50>
   49c40:	00800044 	movi	r2,1
   49c44:	f800283a 	ret
   49c48:	00bfffc4 	movi	r2,-1
   49c4c:	f800283a 	ret
   49c50:	0005883a 	mov	r2,zero
   49c54:	f800283a 	ret

00049c58 <__mdiff>:
   49c58:	28c00417 	ldw	r3,16(r5)
   49c5c:	30800417 	ldw	r2,16(r6)
   49c60:	defffa04 	addi	sp,sp,-24
   49c64:	dcc00315 	stw	r19,12(sp)
   49c68:	dc800215 	stw	r18,8(sp)
   49c6c:	dfc00515 	stw	ra,20(sp)
   49c70:	dd000415 	stw	r20,16(sp)
   49c74:	dc400115 	stw	r17,4(sp)
   49c78:	dc000015 	stw	r16,0(sp)
   49c7c:	1887c83a 	sub	r3,r3,r2
   49c80:	2825883a 	mov	r18,r5
   49c84:	3027883a 	mov	r19,r6
   49c88:	1800141e 	bne	r3,zero,49cdc <__mdiff+0x84>
   49c8c:	1085883a 	add	r2,r2,r2
   49c90:	1085883a 	add	r2,r2,r2
   49c94:	2a000504 	addi	r8,r5,20
   49c98:	34000504 	addi	r16,r6,20
   49c9c:	4087883a 	add	r3,r8,r2
   49ca0:	8085883a 	add	r2,r16,r2
   49ca4:	00000106 	br	49cac <__mdiff+0x54>
   49ca8:	40c0592e 	bgeu	r8,r3,49e10 <__mdiff+0x1b8>
   49cac:	18ffff04 	addi	r3,r3,-4
   49cb0:	10bfff04 	addi	r2,r2,-4
   49cb4:	19c00017 	ldw	r7,0(r3)
   49cb8:	11400017 	ldw	r5,0(r2)
   49cbc:	397ffa26 	beq	r7,r5,49ca8 <__alt_data_end+0xfffd7ca8>
   49cc0:	3940592e 	bgeu	r7,r5,49e28 <__mdiff+0x1d0>
   49cc4:	9005883a 	mov	r2,r18
   49cc8:	4023883a 	mov	r17,r8
   49ccc:	9825883a 	mov	r18,r19
   49cd0:	05000044 	movi	r20,1
   49cd4:	1027883a 	mov	r19,r2
   49cd8:	00000406 	br	49cec <__mdiff+0x94>
   49cdc:	18005616 	blt	r3,zero,49e38 <__mdiff+0x1e0>
   49ce0:	34400504 	addi	r17,r6,20
   49ce4:	2c000504 	addi	r16,r5,20
   49ce8:	0029883a 	mov	r20,zero
   49cec:	91400117 	ldw	r5,4(r18)
   49cf0:	00492740 	call	49274 <_Balloc>
   49cf4:	92400417 	ldw	r9,16(r18)
   49cf8:	9b000417 	ldw	r12,16(r19)
   49cfc:	12c00504 	addi	r11,r2,20
   49d00:	4a51883a 	add	r8,r9,r9
   49d04:	6319883a 	add	r12,r12,r12
   49d08:	4211883a 	add	r8,r8,r8
   49d0c:	6319883a 	add	r12,r12,r12
   49d10:	15000315 	stw	r20,12(r2)
   49d14:	8211883a 	add	r8,r16,r8
   49d18:	8b19883a 	add	r12,r17,r12
   49d1c:	0007883a 	mov	r3,zero
   49d20:	81400017 	ldw	r5,0(r16)
   49d24:	89c00017 	ldw	r7,0(r17)
   49d28:	59800104 	addi	r6,r11,4
   49d2c:	293fffcc 	andi	r4,r5,65535
   49d30:	20c7883a 	add	r3,r4,r3
   49d34:	393fffcc 	andi	r4,r7,65535
   49d38:	1909c83a 	sub	r4,r3,r4
   49d3c:	280ad43a 	srli	r5,r5,16
   49d40:	380ed43a 	srli	r7,r7,16
   49d44:	2007d43a 	srai	r3,r4,16
   49d48:	213fffcc 	andi	r4,r4,65535
   49d4c:	29cbc83a 	sub	r5,r5,r7
   49d50:	28c7883a 	add	r3,r5,r3
   49d54:	180a943a 	slli	r5,r3,16
   49d58:	8c400104 	addi	r17,r17,4
   49d5c:	84000104 	addi	r16,r16,4
   49d60:	2908b03a 	or	r4,r5,r4
   49d64:	59000015 	stw	r4,0(r11)
   49d68:	1807d43a 	srai	r3,r3,16
   49d6c:	3015883a 	mov	r10,r6
   49d70:	3017883a 	mov	r11,r6
   49d74:	8b3fea36 	bltu	r17,r12,49d20 <__alt_data_end+0xfffd7d20>
   49d78:	8200162e 	bgeu	r16,r8,49dd4 <__mdiff+0x17c>
   49d7c:	8017883a 	mov	r11,r16
   49d80:	59400017 	ldw	r5,0(r11)
   49d84:	31800104 	addi	r6,r6,4
   49d88:	5ac00104 	addi	r11,r11,4
   49d8c:	293fffcc 	andi	r4,r5,65535
   49d90:	20c7883a 	add	r3,r4,r3
   49d94:	280ed43a 	srli	r7,r5,16
   49d98:	180bd43a 	srai	r5,r3,16
   49d9c:	193fffcc 	andi	r4,r3,65535
   49da0:	3947883a 	add	r3,r7,r5
   49da4:	180a943a 	slli	r5,r3,16
   49da8:	1807d43a 	srai	r3,r3,16
   49dac:	2908b03a 	or	r4,r5,r4
   49db0:	313fff15 	stw	r4,-4(r6)
   49db4:	5a3ff236 	bltu	r11,r8,49d80 <__alt_data_end+0xfffd7d80>
   49db8:	0406303a 	nor	r3,zero,r16
   49dbc:	1a07883a 	add	r3,r3,r8
   49dc0:	1806d0ba 	srli	r3,r3,2
   49dc4:	18c00044 	addi	r3,r3,1
   49dc8:	18c7883a 	add	r3,r3,r3
   49dcc:	18c7883a 	add	r3,r3,r3
   49dd0:	50d5883a 	add	r10,r10,r3
   49dd4:	50ffff04 	addi	r3,r10,-4
   49dd8:	2000041e 	bne	r4,zero,49dec <__mdiff+0x194>
   49ddc:	18ffff04 	addi	r3,r3,-4
   49de0:	19000017 	ldw	r4,0(r3)
   49de4:	4a7fffc4 	addi	r9,r9,-1
   49de8:	203ffc26 	beq	r4,zero,49ddc <__alt_data_end+0xfffd7ddc>
   49dec:	12400415 	stw	r9,16(r2)
   49df0:	dfc00517 	ldw	ra,20(sp)
   49df4:	dd000417 	ldw	r20,16(sp)
   49df8:	dcc00317 	ldw	r19,12(sp)
   49dfc:	dc800217 	ldw	r18,8(sp)
   49e00:	dc400117 	ldw	r17,4(sp)
   49e04:	dc000017 	ldw	r16,0(sp)
   49e08:	dec00604 	addi	sp,sp,24
   49e0c:	f800283a 	ret
   49e10:	000b883a 	mov	r5,zero
   49e14:	00492740 	call	49274 <_Balloc>
   49e18:	00c00044 	movi	r3,1
   49e1c:	10c00415 	stw	r3,16(r2)
   49e20:	10000515 	stw	zero,20(r2)
   49e24:	003ff206 	br	49df0 <__alt_data_end+0xfffd7df0>
   49e28:	8023883a 	mov	r17,r16
   49e2c:	0029883a 	mov	r20,zero
   49e30:	4021883a 	mov	r16,r8
   49e34:	003fad06 	br	49cec <__alt_data_end+0xfffd7cec>
   49e38:	9005883a 	mov	r2,r18
   49e3c:	94400504 	addi	r17,r18,20
   49e40:	9c000504 	addi	r16,r19,20
   49e44:	9825883a 	mov	r18,r19
   49e48:	05000044 	movi	r20,1
   49e4c:	1027883a 	mov	r19,r2
   49e50:	003fa606 	br	49cec <__alt_data_end+0xfffd7cec>

00049e54 <__ulp>:
   49e54:	295ffc2c 	andhi	r5,r5,32752
   49e58:	00bf3034 	movhi	r2,64704
   49e5c:	2887883a 	add	r3,r5,r2
   49e60:	00c0020e 	bge	zero,r3,49e6c <__ulp+0x18>
   49e64:	0005883a 	mov	r2,zero
   49e68:	f800283a 	ret
   49e6c:	00c7c83a 	sub	r3,zero,r3
   49e70:	1807d53a 	srai	r3,r3,20
   49e74:	008004c4 	movi	r2,19
   49e78:	10c00b0e 	bge	r2,r3,49ea8 <__ulp+0x54>
   49e7c:	18bffb04 	addi	r2,r3,-20
   49e80:	01000784 	movi	r4,30
   49e84:	0007883a 	mov	r3,zero
   49e88:	20800516 	blt	r4,r2,49ea0 <__ulp+0x4c>
   49e8c:	010007c4 	movi	r4,31
   49e90:	2089c83a 	sub	r4,r4,r2
   49e94:	00800044 	movi	r2,1
   49e98:	1104983a 	sll	r2,r2,r4
   49e9c:	f800283a 	ret
   49ea0:	00800044 	movi	r2,1
   49ea4:	f800283a 	ret
   49ea8:	01400234 	movhi	r5,8
   49eac:	28c7d83a 	sra	r3,r5,r3
   49eb0:	0005883a 	mov	r2,zero
   49eb4:	f800283a 	ret

00049eb8 <__b2d>:
   49eb8:	defffa04 	addi	sp,sp,-24
   49ebc:	dc000015 	stw	r16,0(sp)
   49ec0:	24000417 	ldw	r16,16(r4)
   49ec4:	dc400115 	stw	r17,4(sp)
   49ec8:	24400504 	addi	r17,r4,20
   49ecc:	8421883a 	add	r16,r16,r16
   49ed0:	8421883a 	add	r16,r16,r16
   49ed4:	8c21883a 	add	r16,r17,r16
   49ed8:	dc800215 	stw	r18,8(sp)
   49edc:	84bfff17 	ldw	r18,-4(r16)
   49ee0:	dd000415 	stw	r20,16(sp)
   49ee4:	dcc00315 	stw	r19,12(sp)
   49ee8:	9009883a 	mov	r4,r18
   49eec:	2829883a 	mov	r20,r5
   49ef0:	dfc00515 	stw	ra,20(sp)
   49ef4:	00495900 	call	49590 <__hi0bits>
   49ef8:	00c00804 	movi	r3,32
   49efc:	1889c83a 	sub	r4,r3,r2
   49f00:	a1000015 	stw	r4,0(r20)
   49f04:	01000284 	movi	r4,10
   49f08:	84ffff04 	addi	r19,r16,-4
   49f0c:	20801216 	blt	r4,r2,49f58 <__b2d+0xa0>
   49f10:	018002c4 	movi	r6,11
   49f14:	308dc83a 	sub	r6,r6,r2
   49f18:	9186d83a 	srl	r3,r18,r6
   49f1c:	18cffc34 	orhi	r3,r3,16368
   49f20:	8cc0212e 	bgeu	r17,r19,49fa8 <__b2d+0xf0>
   49f24:	813ffe17 	ldw	r4,-8(r16)
   49f28:	218cd83a 	srl	r6,r4,r6
   49f2c:	10800544 	addi	r2,r2,21
   49f30:	9084983a 	sll	r2,r18,r2
   49f34:	1184b03a 	or	r2,r2,r6
   49f38:	dfc00517 	ldw	ra,20(sp)
   49f3c:	dd000417 	ldw	r20,16(sp)
   49f40:	dcc00317 	ldw	r19,12(sp)
   49f44:	dc800217 	ldw	r18,8(sp)
   49f48:	dc400117 	ldw	r17,4(sp)
   49f4c:	dc000017 	ldw	r16,0(sp)
   49f50:	dec00604 	addi	sp,sp,24
   49f54:	f800283a 	ret
   49f58:	8cc00f2e 	bgeu	r17,r19,49f98 <__b2d+0xe0>
   49f5c:	117ffd44 	addi	r5,r2,-11
   49f60:	80bffe17 	ldw	r2,-8(r16)
   49f64:	28000e26 	beq	r5,zero,49fa0 <__b2d+0xe8>
   49f68:	1949c83a 	sub	r4,r3,r5
   49f6c:	9164983a 	sll	r18,r18,r5
   49f70:	1106d83a 	srl	r3,r2,r4
   49f74:	81bffe04 	addi	r6,r16,-8
   49f78:	948ffc34 	orhi	r18,r18,16368
   49f7c:	90c6b03a 	or	r3,r18,r3
   49f80:	89800e2e 	bgeu	r17,r6,49fbc <__b2d+0x104>
   49f84:	81bffd17 	ldw	r6,-12(r16)
   49f88:	1144983a 	sll	r2,r2,r5
   49f8c:	310ad83a 	srl	r5,r6,r4
   49f90:	2884b03a 	or	r2,r5,r2
   49f94:	003fe806 	br	49f38 <__alt_data_end+0xfffd7f38>
   49f98:	10bffd44 	addi	r2,r2,-11
   49f9c:	1000041e 	bne	r2,zero,49fb0 <__b2d+0xf8>
   49fa0:	90cffc34 	orhi	r3,r18,16368
   49fa4:	003fe406 	br	49f38 <__alt_data_end+0xfffd7f38>
   49fa8:	000d883a 	mov	r6,zero
   49fac:	003fdf06 	br	49f2c <__alt_data_end+0xfffd7f2c>
   49fb0:	90a4983a 	sll	r18,r18,r2
   49fb4:	0005883a 	mov	r2,zero
   49fb8:	003ff906 	br	49fa0 <__alt_data_end+0xfffd7fa0>
   49fbc:	1144983a 	sll	r2,r2,r5
   49fc0:	003fdd06 	br	49f38 <__alt_data_end+0xfffd7f38>

00049fc4 <__d2b>:
   49fc4:	defff804 	addi	sp,sp,-32
   49fc8:	dc000215 	stw	r16,8(sp)
   49fcc:	3021883a 	mov	r16,r6
   49fd0:	dc400315 	stw	r17,12(sp)
   49fd4:	8022907a 	slli	r17,r16,1
   49fd8:	dd000615 	stw	r20,24(sp)
   49fdc:	2829883a 	mov	r20,r5
   49fe0:	01400044 	movi	r5,1
   49fe4:	dcc00515 	stw	r19,20(sp)
   49fe8:	dc800415 	stw	r18,16(sp)
   49fec:	dfc00715 	stw	ra,28(sp)
   49ff0:	3825883a 	mov	r18,r7
   49ff4:	8822d57a 	srli	r17,r17,21
   49ff8:	00492740 	call	49274 <_Balloc>
   49ffc:	1027883a 	mov	r19,r2
   4a000:	00800434 	movhi	r2,16
   4a004:	10bfffc4 	addi	r2,r2,-1
   4a008:	808c703a 	and	r6,r16,r2
   4a00c:	88000126 	beq	r17,zero,4a014 <__d2b+0x50>
   4a010:	31800434 	orhi	r6,r6,16
   4a014:	d9800015 	stw	r6,0(sp)
   4a018:	a0002426 	beq	r20,zero,4a0ac <__d2b+0xe8>
   4a01c:	d9000104 	addi	r4,sp,4
   4a020:	dd000115 	stw	r20,4(sp)
   4a024:	00495f80 	call	495f8 <__lo0bits>
   4a028:	d8c00017 	ldw	r3,0(sp)
   4a02c:	10002f1e 	bne	r2,zero,4a0ec <__d2b+0x128>
   4a030:	d9000117 	ldw	r4,4(sp)
   4a034:	99000515 	stw	r4,20(r19)
   4a038:	1821003a 	cmpeq	r16,r3,zero
   4a03c:	01000084 	movi	r4,2
   4a040:	2421c83a 	sub	r16,r4,r16
   4a044:	98c00615 	stw	r3,24(r19)
   4a048:	9c000415 	stw	r16,16(r19)
   4a04c:	88001f1e 	bne	r17,zero,4a0cc <__d2b+0x108>
   4a050:	10bef384 	addi	r2,r2,-1074
   4a054:	90800015 	stw	r2,0(r18)
   4a058:	00900034 	movhi	r2,16384
   4a05c:	10bfffc4 	addi	r2,r2,-1
   4a060:	8085883a 	add	r2,r16,r2
   4a064:	1085883a 	add	r2,r2,r2
   4a068:	1085883a 	add	r2,r2,r2
   4a06c:	9885883a 	add	r2,r19,r2
   4a070:	11000517 	ldw	r4,20(r2)
   4a074:	8020917a 	slli	r16,r16,5
   4a078:	00495900 	call	49590 <__hi0bits>
   4a07c:	d8c00817 	ldw	r3,32(sp)
   4a080:	8085c83a 	sub	r2,r16,r2
   4a084:	18800015 	stw	r2,0(r3)
   4a088:	9805883a 	mov	r2,r19
   4a08c:	dfc00717 	ldw	ra,28(sp)
   4a090:	dd000617 	ldw	r20,24(sp)
   4a094:	dcc00517 	ldw	r19,20(sp)
   4a098:	dc800417 	ldw	r18,16(sp)
   4a09c:	dc400317 	ldw	r17,12(sp)
   4a0a0:	dc000217 	ldw	r16,8(sp)
   4a0a4:	dec00804 	addi	sp,sp,32
   4a0a8:	f800283a 	ret
   4a0ac:	d809883a 	mov	r4,sp
   4a0b0:	00495f80 	call	495f8 <__lo0bits>
   4a0b4:	d8c00017 	ldw	r3,0(sp)
   4a0b8:	04000044 	movi	r16,1
   4a0bc:	9c000415 	stw	r16,16(r19)
   4a0c0:	98c00515 	stw	r3,20(r19)
   4a0c4:	10800804 	addi	r2,r2,32
   4a0c8:	883fe126 	beq	r17,zero,4a050 <__alt_data_end+0xfffd8050>
   4a0cc:	00c00d44 	movi	r3,53
   4a0d0:	8c7ef344 	addi	r17,r17,-1075
   4a0d4:	88a3883a 	add	r17,r17,r2
   4a0d8:	1885c83a 	sub	r2,r3,r2
   4a0dc:	d8c00817 	ldw	r3,32(sp)
   4a0e0:	94400015 	stw	r17,0(r18)
   4a0e4:	18800015 	stw	r2,0(r3)
   4a0e8:	003fe706 	br	4a088 <__alt_data_end+0xfffd8088>
   4a0ec:	01000804 	movi	r4,32
   4a0f0:	2089c83a 	sub	r4,r4,r2
   4a0f4:	1908983a 	sll	r4,r3,r4
   4a0f8:	d9400117 	ldw	r5,4(sp)
   4a0fc:	1886d83a 	srl	r3,r3,r2
   4a100:	2148b03a 	or	r4,r4,r5
   4a104:	99000515 	stw	r4,20(r19)
   4a108:	d8c00015 	stw	r3,0(sp)
   4a10c:	003fca06 	br	4a038 <__alt_data_end+0xfffd8038>

0004a110 <__ratio>:
   4a110:	defff904 	addi	sp,sp,-28
   4a114:	dc400315 	stw	r17,12(sp)
   4a118:	2823883a 	mov	r17,r5
   4a11c:	d9400104 	addi	r5,sp,4
   4a120:	dfc00615 	stw	ra,24(sp)
   4a124:	dcc00515 	stw	r19,20(sp)
   4a128:	dc800415 	stw	r18,16(sp)
   4a12c:	2027883a 	mov	r19,r4
   4a130:	dc000215 	stw	r16,8(sp)
   4a134:	0049eb80 	call	49eb8 <__b2d>
   4a138:	d80b883a 	mov	r5,sp
   4a13c:	8809883a 	mov	r4,r17
   4a140:	1025883a 	mov	r18,r2
   4a144:	1821883a 	mov	r16,r3
   4a148:	0049eb80 	call	49eb8 <__b2d>
   4a14c:	8a000417 	ldw	r8,16(r17)
   4a150:	99000417 	ldw	r4,16(r19)
   4a154:	d9400117 	ldw	r5,4(sp)
   4a158:	2209c83a 	sub	r4,r4,r8
   4a15c:	2010917a 	slli	r8,r4,5
   4a160:	d9000017 	ldw	r4,0(sp)
   4a164:	2909c83a 	sub	r4,r5,r4
   4a168:	4109883a 	add	r4,r8,r4
   4a16c:	01000e0e 	bge	zero,r4,4a1a8 <__ratio+0x98>
   4a170:	2008953a 	slli	r4,r4,20
   4a174:	2421883a 	add	r16,r4,r16
   4a178:	100d883a 	mov	r6,r2
   4a17c:	180f883a 	mov	r7,r3
   4a180:	9009883a 	mov	r4,r18
   4a184:	800b883a 	mov	r5,r16
   4a188:	004f6f80 	call	4f6f8 <__divdf3>
   4a18c:	dfc00617 	ldw	ra,24(sp)
   4a190:	dcc00517 	ldw	r19,20(sp)
   4a194:	dc800417 	ldw	r18,16(sp)
   4a198:	dc400317 	ldw	r17,12(sp)
   4a19c:	dc000217 	ldw	r16,8(sp)
   4a1a0:	dec00704 	addi	sp,sp,28
   4a1a4:	f800283a 	ret
   4a1a8:	2008953a 	slli	r4,r4,20
   4a1ac:	1907c83a 	sub	r3,r3,r4
   4a1b0:	003ff106 	br	4a178 <__alt_data_end+0xfffd8178>

0004a1b4 <_mprec_log10>:
   4a1b4:	defffe04 	addi	sp,sp,-8
   4a1b8:	dc000015 	stw	r16,0(sp)
   4a1bc:	dfc00115 	stw	ra,4(sp)
   4a1c0:	008005c4 	movi	r2,23
   4a1c4:	2021883a 	mov	r16,r4
   4a1c8:	11000d0e 	bge	r2,r4,4a200 <_mprec_log10+0x4c>
   4a1cc:	0005883a 	mov	r2,zero
   4a1d0:	00cffc34 	movhi	r3,16368
   4a1d4:	843fffc4 	addi	r16,r16,-1
   4a1d8:	000d883a 	mov	r6,zero
   4a1dc:	01d00934 	movhi	r7,16420
   4a1e0:	1009883a 	mov	r4,r2
   4a1e4:	180b883a 	mov	r5,r3
   4a1e8:	00503200 	call	50320 <__muldf3>
   4a1ec:	803ff91e 	bne	r16,zero,4a1d4 <__alt_data_end+0xfffd81d4>
   4a1f0:	dfc00117 	ldw	ra,4(sp)
   4a1f4:	dc000017 	ldw	r16,0(sp)
   4a1f8:	dec00204 	addi	sp,sp,8
   4a1fc:	f800283a 	ret
   4a200:	202090fa 	slli	r16,r4,3
   4a204:	00800174 	movhi	r2,5
   4a208:	10981404 	addi	r2,r2,24656
   4a20c:	1421883a 	add	r16,r2,r16
   4a210:	80800017 	ldw	r2,0(r16)
   4a214:	80c00117 	ldw	r3,4(r16)
   4a218:	dfc00117 	ldw	ra,4(sp)
   4a21c:	dc000017 	ldw	r16,0(sp)
   4a220:	dec00204 	addi	sp,sp,8
   4a224:	f800283a 	ret

0004a228 <__copybits>:
   4a228:	297fffc4 	addi	r5,r5,-1
   4a22c:	280fd17a 	srai	r7,r5,5
   4a230:	30c00417 	ldw	r3,16(r6)
   4a234:	30800504 	addi	r2,r6,20
   4a238:	39c00044 	addi	r7,r7,1
   4a23c:	18c7883a 	add	r3,r3,r3
   4a240:	39cf883a 	add	r7,r7,r7
   4a244:	18c7883a 	add	r3,r3,r3
   4a248:	39cf883a 	add	r7,r7,r7
   4a24c:	10c7883a 	add	r3,r2,r3
   4a250:	21cf883a 	add	r7,r4,r7
   4a254:	10c00d2e 	bgeu	r2,r3,4a28c <__copybits+0x64>
   4a258:	200b883a 	mov	r5,r4
   4a25c:	12000017 	ldw	r8,0(r2)
   4a260:	29400104 	addi	r5,r5,4
   4a264:	10800104 	addi	r2,r2,4
   4a268:	2a3fff15 	stw	r8,-4(r5)
   4a26c:	10fffb36 	bltu	r2,r3,4a25c <__alt_data_end+0xfffd825c>
   4a270:	1985c83a 	sub	r2,r3,r6
   4a274:	10bffac4 	addi	r2,r2,-21
   4a278:	1004d0ba 	srli	r2,r2,2
   4a27c:	10800044 	addi	r2,r2,1
   4a280:	1085883a 	add	r2,r2,r2
   4a284:	1085883a 	add	r2,r2,r2
   4a288:	2089883a 	add	r4,r4,r2
   4a28c:	21c0032e 	bgeu	r4,r7,4a29c <__copybits+0x74>
   4a290:	20000015 	stw	zero,0(r4)
   4a294:	21000104 	addi	r4,r4,4
   4a298:	21fffd36 	bltu	r4,r7,4a290 <__alt_data_end+0xfffd8290>
   4a29c:	f800283a 	ret

0004a2a0 <__any_on>:
   4a2a0:	20c00417 	ldw	r3,16(r4)
   4a2a4:	2805d17a 	srai	r2,r5,5
   4a2a8:	21000504 	addi	r4,r4,20
   4a2ac:	18800d0e 	bge	r3,r2,4a2e4 <__any_on+0x44>
   4a2b0:	18c7883a 	add	r3,r3,r3
   4a2b4:	18c7883a 	add	r3,r3,r3
   4a2b8:	20c7883a 	add	r3,r4,r3
   4a2bc:	20c0192e 	bgeu	r4,r3,4a324 <__any_on+0x84>
   4a2c0:	18bfff17 	ldw	r2,-4(r3)
   4a2c4:	18ffff04 	addi	r3,r3,-4
   4a2c8:	1000041e 	bne	r2,zero,4a2dc <__any_on+0x3c>
   4a2cc:	20c0142e 	bgeu	r4,r3,4a320 <__any_on+0x80>
   4a2d0:	18ffff04 	addi	r3,r3,-4
   4a2d4:	19400017 	ldw	r5,0(r3)
   4a2d8:	283ffc26 	beq	r5,zero,4a2cc <__alt_data_end+0xfffd82cc>
   4a2dc:	00800044 	movi	r2,1
   4a2e0:	f800283a 	ret
   4a2e4:	10c00a0e 	bge	r2,r3,4a310 <__any_on+0x70>
   4a2e8:	1085883a 	add	r2,r2,r2
   4a2ec:	1085883a 	add	r2,r2,r2
   4a2f0:	294007cc 	andi	r5,r5,31
   4a2f4:	2087883a 	add	r3,r4,r2
   4a2f8:	283ff026 	beq	r5,zero,4a2bc <__alt_data_end+0xfffd82bc>
   4a2fc:	19800017 	ldw	r6,0(r3)
   4a300:	3144d83a 	srl	r2,r6,r5
   4a304:	114a983a 	sll	r5,r2,r5
   4a308:	317ff41e 	bne	r6,r5,4a2dc <__alt_data_end+0xfffd82dc>
   4a30c:	003feb06 	br	4a2bc <__alt_data_end+0xfffd82bc>
   4a310:	1085883a 	add	r2,r2,r2
   4a314:	1085883a 	add	r2,r2,r2
   4a318:	2087883a 	add	r3,r4,r2
   4a31c:	003fe706 	br	4a2bc <__alt_data_end+0xfffd82bc>
   4a320:	f800283a 	ret
   4a324:	0005883a 	mov	r2,zero
   4a328:	f800283a 	ret

0004a32c <_putc_r>:
   4a32c:	defffc04 	addi	sp,sp,-16
   4a330:	dc000215 	stw	r16,8(sp)
   4a334:	dfc00315 	stw	ra,12(sp)
   4a338:	2021883a 	mov	r16,r4
   4a33c:	20000226 	beq	r4,zero,4a348 <_putc_r+0x1c>
   4a340:	20800e17 	ldw	r2,56(r4)
   4a344:	10001b26 	beq	r2,zero,4a3b4 <_putc_r+0x88>
   4a348:	30800217 	ldw	r2,8(r6)
   4a34c:	10bfffc4 	addi	r2,r2,-1
   4a350:	30800215 	stw	r2,8(r6)
   4a354:	10000a16 	blt	r2,zero,4a380 <_putc_r+0x54>
   4a358:	30800017 	ldw	r2,0(r6)
   4a35c:	11400005 	stb	r5,0(r2)
   4a360:	30800017 	ldw	r2,0(r6)
   4a364:	10c00044 	addi	r3,r2,1
   4a368:	30c00015 	stw	r3,0(r6)
   4a36c:	10800003 	ldbu	r2,0(r2)
   4a370:	dfc00317 	ldw	ra,12(sp)
   4a374:	dc000217 	ldw	r16,8(sp)
   4a378:	dec00404 	addi	sp,sp,16
   4a37c:	f800283a 	ret
   4a380:	30c00617 	ldw	r3,24(r6)
   4a384:	10c00616 	blt	r2,r3,4a3a0 <_putc_r+0x74>
   4a388:	30800017 	ldw	r2,0(r6)
   4a38c:	00c00284 	movi	r3,10
   4a390:	11400005 	stb	r5,0(r2)
   4a394:	30800017 	ldw	r2,0(r6)
   4a398:	11400003 	ldbu	r5,0(r2)
   4a39c:	28fff11e 	bne	r5,r3,4a364 <__alt_data_end+0xfffd8364>
   4a3a0:	8009883a 	mov	r4,r16
   4a3a4:	dfc00317 	ldw	ra,12(sp)
   4a3a8:	dc000217 	ldw	r16,8(sp)
   4a3ac:	dec00404 	addi	sp,sp,16
   4a3b0:	004d9401 	jmpi	4d940 <__swbuf_r>
   4a3b4:	d9400015 	stw	r5,0(sp)
   4a3b8:	d9800115 	stw	r6,4(sp)
   4a3bc:	004784c0 	call	4784c <__sinit>
   4a3c0:	d9800117 	ldw	r6,4(sp)
   4a3c4:	d9400017 	ldw	r5,0(sp)
   4a3c8:	003fdf06 	br	4a348 <__alt_data_end+0xfffd8348>

0004a3cc <putc>:
   4a3cc:	00800174 	movhi	r2,5
   4a3d0:	defffc04 	addi	sp,sp,-16
   4a3d4:	109f2d04 	addi	r2,r2,31924
   4a3d8:	dc000115 	stw	r16,4(sp)
   4a3dc:	14000017 	ldw	r16,0(r2)
   4a3e0:	dc400215 	stw	r17,8(sp)
   4a3e4:	dfc00315 	stw	ra,12(sp)
   4a3e8:	2023883a 	mov	r17,r4
   4a3ec:	80000226 	beq	r16,zero,4a3f8 <putc+0x2c>
   4a3f0:	80800e17 	ldw	r2,56(r16)
   4a3f4:	10001a26 	beq	r2,zero,4a460 <putc+0x94>
   4a3f8:	28800217 	ldw	r2,8(r5)
   4a3fc:	10bfffc4 	addi	r2,r2,-1
   4a400:	28800215 	stw	r2,8(r5)
   4a404:	10000b16 	blt	r2,zero,4a434 <putc+0x68>
   4a408:	28800017 	ldw	r2,0(r5)
   4a40c:	14400005 	stb	r17,0(r2)
   4a410:	28800017 	ldw	r2,0(r5)
   4a414:	10c00044 	addi	r3,r2,1
   4a418:	28c00015 	stw	r3,0(r5)
   4a41c:	10800003 	ldbu	r2,0(r2)
   4a420:	dfc00317 	ldw	ra,12(sp)
   4a424:	dc400217 	ldw	r17,8(sp)
   4a428:	dc000117 	ldw	r16,4(sp)
   4a42c:	dec00404 	addi	sp,sp,16
   4a430:	f800283a 	ret
   4a434:	28c00617 	ldw	r3,24(r5)
   4a438:	10c00e16 	blt	r2,r3,4a474 <putc+0xa8>
   4a43c:	28800017 	ldw	r2,0(r5)
   4a440:	01000284 	movi	r4,10
   4a444:	14400005 	stb	r17,0(r2)
   4a448:	28800017 	ldw	r2,0(r5)
   4a44c:	10c00003 	ldbu	r3,0(r2)
   4a450:	193ff01e 	bne	r3,r4,4a414 <__alt_data_end+0xfffd8414>
   4a454:	280d883a 	mov	r6,r5
   4a458:	180b883a 	mov	r5,r3
   4a45c:	00000706 	br	4a47c <putc+0xb0>
   4a460:	8009883a 	mov	r4,r16
   4a464:	d9400015 	stw	r5,0(sp)
   4a468:	004784c0 	call	4784c <__sinit>
   4a46c:	d9400017 	ldw	r5,0(sp)
   4a470:	003fe106 	br	4a3f8 <__alt_data_end+0xfffd83f8>
   4a474:	280d883a 	mov	r6,r5
   4a478:	880b883a 	mov	r5,r17
   4a47c:	8009883a 	mov	r4,r16
   4a480:	dfc00317 	ldw	ra,12(sp)
   4a484:	dc400217 	ldw	r17,8(sp)
   4a488:	dc000117 	ldw	r16,4(sp)
   4a48c:	dec00404 	addi	sp,sp,16
   4a490:	004d9401 	jmpi	4d940 <__swbuf_r>

0004a494 <_realloc_r>:
   4a494:	defff604 	addi	sp,sp,-40
   4a498:	dc800215 	stw	r18,8(sp)
   4a49c:	dfc00915 	stw	ra,36(sp)
   4a4a0:	df000815 	stw	fp,32(sp)
   4a4a4:	ddc00715 	stw	r23,28(sp)
   4a4a8:	dd800615 	stw	r22,24(sp)
   4a4ac:	dd400515 	stw	r21,20(sp)
   4a4b0:	dd000415 	stw	r20,16(sp)
   4a4b4:	dcc00315 	stw	r19,12(sp)
   4a4b8:	dc400115 	stw	r17,4(sp)
   4a4bc:	dc000015 	stw	r16,0(sp)
   4a4c0:	3025883a 	mov	r18,r6
   4a4c4:	2800b726 	beq	r5,zero,4a7a4 <_realloc_r+0x310>
   4a4c8:	282b883a 	mov	r21,r5
   4a4cc:	2029883a 	mov	r20,r4
   4a4d0:	0051c280 	call	51c28 <__malloc_lock>
   4a4d4:	a8bfff17 	ldw	r2,-4(r21)
   4a4d8:	043fff04 	movi	r16,-4
   4a4dc:	90c002c4 	addi	r3,r18,11
   4a4e0:	01000584 	movi	r4,22
   4a4e4:	acfffe04 	addi	r19,r21,-8
   4a4e8:	1420703a 	and	r16,r2,r16
   4a4ec:	20c0332e 	bgeu	r4,r3,4a5bc <_realloc_r+0x128>
   4a4f0:	047ffe04 	movi	r17,-8
   4a4f4:	1c62703a 	and	r17,r3,r17
   4a4f8:	8807883a 	mov	r3,r17
   4a4fc:	88005816 	blt	r17,zero,4a660 <_realloc_r+0x1cc>
   4a500:	8c805736 	bltu	r17,r18,4a660 <_realloc_r+0x1cc>
   4a504:	80c0300e 	bge	r16,r3,4a5c8 <_realloc_r+0x134>
   4a508:	07000174 	movhi	fp,5
   4a50c:	e7199404 	addi	fp,fp,26192
   4a510:	e1c00217 	ldw	r7,8(fp)
   4a514:	9c09883a 	add	r4,r19,r16
   4a518:	22000117 	ldw	r8,4(r4)
   4a51c:	21c06326 	beq	r4,r7,4a6ac <_realloc_r+0x218>
   4a520:	017fff84 	movi	r5,-2
   4a524:	414a703a 	and	r5,r8,r5
   4a528:	214b883a 	add	r5,r4,r5
   4a52c:	29800117 	ldw	r6,4(r5)
   4a530:	3180004c 	andi	r6,r6,1
   4a534:	30003f26 	beq	r6,zero,4a634 <_realloc_r+0x1a0>
   4a538:	1080004c 	andi	r2,r2,1
   4a53c:	10008326 	beq	r2,zero,4a74c <_realloc_r+0x2b8>
   4a540:	900b883a 	mov	r5,r18
   4a544:	a009883a 	mov	r4,r20
   4a548:	00485b80 	call	485b8 <_malloc_r>
   4a54c:	1025883a 	mov	r18,r2
   4a550:	10011e26 	beq	r2,zero,4a9cc <_realloc_r+0x538>
   4a554:	a93fff17 	ldw	r4,-4(r21)
   4a558:	10fffe04 	addi	r3,r2,-8
   4a55c:	00bfff84 	movi	r2,-2
   4a560:	2084703a 	and	r2,r4,r2
   4a564:	9885883a 	add	r2,r19,r2
   4a568:	1880ee26 	beq	r3,r2,4a924 <_realloc_r+0x490>
   4a56c:	81bfff04 	addi	r6,r16,-4
   4a570:	00800904 	movi	r2,36
   4a574:	1180b836 	bltu	r2,r6,4a858 <_realloc_r+0x3c4>
   4a578:	00c004c4 	movi	r3,19
   4a57c:	19809636 	bltu	r3,r6,4a7d8 <_realloc_r+0x344>
   4a580:	9005883a 	mov	r2,r18
   4a584:	a807883a 	mov	r3,r21
   4a588:	19000017 	ldw	r4,0(r3)
   4a58c:	11000015 	stw	r4,0(r2)
   4a590:	19000117 	ldw	r4,4(r3)
   4a594:	11000115 	stw	r4,4(r2)
   4a598:	18c00217 	ldw	r3,8(r3)
   4a59c:	10c00215 	stw	r3,8(r2)
   4a5a0:	a80b883a 	mov	r5,r21
   4a5a4:	a009883a 	mov	r4,r20
   4a5a8:	00479c00 	call	479c0 <_free_r>
   4a5ac:	a009883a 	mov	r4,r20
   4a5b0:	0051c4c0 	call	51c4c <__malloc_unlock>
   4a5b4:	9005883a 	mov	r2,r18
   4a5b8:	00001206 	br	4a604 <_realloc_r+0x170>
   4a5bc:	00c00404 	movi	r3,16
   4a5c0:	1823883a 	mov	r17,r3
   4a5c4:	003fce06 	br	4a500 <__alt_data_end+0xfffd8500>
   4a5c8:	a825883a 	mov	r18,r21
   4a5cc:	8445c83a 	sub	r2,r16,r17
   4a5d0:	00c003c4 	movi	r3,15
   4a5d4:	18802636 	bltu	r3,r2,4a670 <_realloc_r+0x1dc>
   4a5d8:	99800117 	ldw	r6,4(r19)
   4a5dc:	9c07883a 	add	r3,r19,r16
   4a5e0:	3180004c 	andi	r6,r6,1
   4a5e4:	3420b03a 	or	r16,r6,r16
   4a5e8:	9c000115 	stw	r16,4(r19)
   4a5ec:	18800117 	ldw	r2,4(r3)
   4a5f0:	10800054 	ori	r2,r2,1
   4a5f4:	18800115 	stw	r2,4(r3)
   4a5f8:	a009883a 	mov	r4,r20
   4a5fc:	0051c4c0 	call	51c4c <__malloc_unlock>
   4a600:	9005883a 	mov	r2,r18
   4a604:	dfc00917 	ldw	ra,36(sp)
   4a608:	df000817 	ldw	fp,32(sp)
   4a60c:	ddc00717 	ldw	r23,28(sp)
   4a610:	dd800617 	ldw	r22,24(sp)
   4a614:	dd400517 	ldw	r21,20(sp)
   4a618:	dd000417 	ldw	r20,16(sp)
   4a61c:	dcc00317 	ldw	r19,12(sp)
   4a620:	dc800217 	ldw	r18,8(sp)
   4a624:	dc400117 	ldw	r17,4(sp)
   4a628:	dc000017 	ldw	r16,0(sp)
   4a62c:	dec00a04 	addi	sp,sp,40
   4a630:	f800283a 	ret
   4a634:	017fff04 	movi	r5,-4
   4a638:	414a703a 	and	r5,r8,r5
   4a63c:	814d883a 	add	r6,r16,r5
   4a640:	30c01f16 	blt	r6,r3,4a6c0 <_realloc_r+0x22c>
   4a644:	20800317 	ldw	r2,12(r4)
   4a648:	20c00217 	ldw	r3,8(r4)
   4a64c:	a825883a 	mov	r18,r21
   4a650:	3021883a 	mov	r16,r6
   4a654:	18800315 	stw	r2,12(r3)
   4a658:	10c00215 	stw	r3,8(r2)
   4a65c:	003fdb06 	br	4a5cc <__alt_data_end+0xfffd85cc>
   4a660:	00800304 	movi	r2,12
   4a664:	a0800015 	stw	r2,0(r20)
   4a668:	0005883a 	mov	r2,zero
   4a66c:	003fe506 	br	4a604 <__alt_data_end+0xfffd8604>
   4a670:	98c00117 	ldw	r3,4(r19)
   4a674:	9c4b883a 	add	r5,r19,r17
   4a678:	11000054 	ori	r4,r2,1
   4a67c:	18c0004c 	andi	r3,r3,1
   4a680:	1c62b03a 	or	r17,r3,r17
   4a684:	9c400115 	stw	r17,4(r19)
   4a688:	29000115 	stw	r4,4(r5)
   4a68c:	2885883a 	add	r2,r5,r2
   4a690:	10c00117 	ldw	r3,4(r2)
   4a694:	29400204 	addi	r5,r5,8
   4a698:	a009883a 	mov	r4,r20
   4a69c:	18c00054 	ori	r3,r3,1
   4a6a0:	10c00115 	stw	r3,4(r2)
   4a6a4:	00479c00 	call	479c0 <_free_r>
   4a6a8:	003fd306 	br	4a5f8 <__alt_data_end+0xfffd85f8>
   4a6ac:	017fff04 	movi	r5,-4
   4a6b0:	414a703a 	and	r5,r8,r5
   4a6b4:	89800404 	addi	r6,r17,16
   4a6b8:	8151883a 	add	r8,r16,r5
   4a6bc:	4180590e 	bge	r8,r6,4a824 <_realloc_r+0x390>
   4a6c0:	1080004c 	andi	r2,r2,1
   4a6c4:	103f9e1e 	bne	r2,zero,4a540 <__alt_data_end+0xfffd8540>
   4a6c8:	adbffe17 	ldw	r22,-8(r21)
   4a6cc:	00bfff04 	movi	r2,-4
   4a6d0:	9dadc83a 	sub	r22,r19,r22
   4a6d4:	b1800117 	ldw	r6,4(r22)
   4a6d8:	3084703a 	and	r2,r6,r2
   4a6dc:	20002026 	beq	r4,zero,4a760 <_realloc_r+0x2cc>
   4a6e0:	80af883a 	add	r23,r16,r2
   4a6e4:	b96f883a 	add	r23,r23,r5
   4a6e8:	21c05f26 	beq	r4,r7,4a868 <_realloc_r+0x3d4>
   4a6ec:	b8c01c16 	blt	r23,r3,4a760 <_realloc_r+0x2cc>
   4a6f0:	20800317 	ldw	r2,12(r4)
   4a6f4:	20c00217 	ldw	r3,8(r4)
   4a6f8:	81bfff04 	addi	r6,r16,-4
   4a6fc:	01000904 	movi	r4,36
   4a700:	18800315 	stw	r2,12(r3)
   4a704:	10c00215 	stw	r3,8(r2)
   4a708:	b0c00217 	ldw	r3,8(r22)
   4a70c:	b0800317 	ldw	r2,12(r22)
   4a710:	b4800204 	addi	r18,r22,8
   4a714:	18800315 	stw	r2,12(r3)
   4a718:	10c00215 	stw	r3,8(r2)
   4a71c:	21801b36 	bltu	r4,r6,4a78c <_realloc_r+0x2f8>
   4a720:	008004c4 	movi	r2,19
   4a724:	1180352e 	bgeu	r2,r6,4a7fc <_realloc_r+0x368>
   4a728:	a8800017 	ldw	r2,0(r21)
   4a72c:	b0800215 	stw	r2,8(r22)
   4a730:	a8800117 	ldw	r2,4(r21)
   4a734:	b0800315 	stw	r2,12(r22)
   4a738:	008006c4 	movi	r2,27
   4a73c:	11807f36 	bltu	r2,r6,4a93c <_realloc_r+0x4a8>
   4a740:	b0800404 	addi	r2,r22,16
   4a744:	ad400204 	addi	r21,r21,8
   4a748:	00002d06 	br	4a800 <_realloc_r+0x36c>
   4a74c:	adbffe17 	ldw	r22,-8(r21)
   4a750:	00bfff04 	movi	r2,-4
   4a754:	9dadc83a 	sub	r22,r19,r22
   4a758:	b1000117 	ldw	r4,4(r22)
   4a75c:	2084703a 	and	r2,r4,r2
   4a760:	b03f7726 	beq	r22,zero,4a540 <__alt_data_end+0xfffd8540>
   4a764:	80af883a 	add	r23,r16,r2
   4a768:	b8ff7516 	blt	r23,r3,4a540 <__alt_data_end+0xfffd8540>
   4a76c:	b0800317 	ldw	r2,12(r22)
   4a770:	b0c00217 	ldw	r3,8(r22)
   4a774:	81bfff04 	addi	r6,r16,-4
   4a778:	01000904 	movi	r4,36
   4a77c:	18800315 	stw	r2,12(r3)
   4a780:	10c00215 	stw	r3,8(r2)
   4a784:	b4800204 	addi	r18,r22,8
   4a788:	21bfe52e 	bgeu	r4,r6,4a720 <__alt_data_end+0xfffd8720>
   4a78c:	a80b883a 	mov	r5,r21
   4a790:	9009883a 	mov	r4,r18
   4a794:	0048ff00 	call	48ff0 <memmove>
   4a798:	b821883a 	mov	r16,r23
   4a79c:	b027883a 	mov	r19,r22
   4a7a0:	003f8a06 	br	4a5cc <__alt_data_end+0xfffd85cc>
   4a7a4:	300b883a 	mov	r5,r6
   4a7a8:	dfc00917 	ldw	ra,36(sp)
   4a7ac:	df000817 	ldw	fp,32(sp)
   4a7b0:	ddc00717 	ldw	r23,28(sp)
   4a7b4:	dd800617 	ldw	r22,24(sp)
   4a7b8:	dd400517 	ldw	r21,20(sp)
   4a7bc:	dd000417 	ldw	r20,16(sp)
   4a7c0:	dcc00317 	ldw	r19,12(sp)
   4a7c4:	dc800217 	ldw	r18,8(sp)
   4a7c8:	dc400117 	ldw	r17,4(sp)
   4a7cc:	dc000017 	ldw	r16,0(sp)
   4a7d0:	dec00a04 	addi	sp,sp,40
   4a7d4:	00485b81 	jmpi	485b8 <_malloc_r>
   4a7d8:	a8c00017 	ldw	r3,0(r21)
   4a7dc:	90c00015 	stw	r3,0(r18)
   4a7e0:	a8c00117 	ldw	r3,4(r21)
   4a7e4:	90c00115 	stw	r3,4(r18)
   4a7e8:	00c006c4 	movi	r3,27
   4a7ec:	19804536 	bltu	r3,r6,4a904 <_realloc_r+0x470>
   4a7f0:	90800204 	addi	r2,r18,8
   4a7f4:	a8c00204 	addi	r3,r21,8
   4a7f8:	003f6306 	br	4a588 <__alt_data_end+0xfffd8588>
   4a7fc:	9005883a 	mov	r2,r18
   4a800:	a8c00017 	ldw	r3,0(r21)
   4a804:	b821883a 	mov	r16,r23
   4a808:	b027883a 	mov	r19,r22
   4a80c:	10c00015 	stw	r3,0(r2)
   4a810:	a8c00117 	ldw	r3,4(r21)
   4a814:	10c00115 	stw	r3,4(r2)
   4a818:	a8c00217 	ldw	r3,8(r21)
   4a81c:	10c00215 	stw	r3,8(r2)
   4a820:	003f6a06 	br	4a5cc <__alt_data_end+0xfffd85cc>
   4a824:	9c67883a 	add	r19,r19,r17
   4a828:	4445c83a 	sub	r2,r8,r17
   4a82c:	e4c00215 	stw	r19,8(fp)
   4a830:	10800054 	ori	r2,r2,1
   4a834:	98800115 	stw	r2,4(r19)
   4a838:	a8bfff17 	ldw	r2,-4(r21)
   4a83c:	a009883a 	mov	r4,r20
   4a840:	1080004c 	andi	r2,r2,1
   4a844:	1462b03a 	or	r17,r2,r17
   4a848:	ac7fff15 	stw	r17,-4(r21)
   4a84c:	0051c4c0 	call	51c4c <__malloc_unlock>
   4a850:	a805883a 	mov	r2,r21
   4a854:	003f6b06 	br	4a604 <__alt_data_end+0xfffd8604>
   4a858:	a80b883a 	mov	r5,r21
   4a85c:	9009883a 	mov	r4,r18
   4a860:	0048ff00 	call	48ff0 <memmove>
   4a864:	003f4e06 	br	4a5a0 <__alt_data_end+0xfffd85a0>
   4a868:	89000404 	addi	r4,r17,16
   4a86c:	b93fbc16 	blt	r23,r4,4a760 <__alt_data_end+0xfffd8760>
   4a870:	b0800317 	ldw	r2,12(r22)
   4a874:	b0c00217 	ldw	r3,8(r22)
   4a878:	81bfff04 	addi	r6,r16,-4
   4a87c:	01000904 	movi	r4,36
   4a880:	18800315 	stw	r2,12(r3)
   4a884:	10c00215 	stw	r3,8(r2)
   4a888:	b4800204 	addi	r18,r22,8
   4a88c:	21804336 	bltu	r4,r6,4a99c <_realloc_r+0x508>
   4a890:	008004c4 	movi	r2,19
   4a894:	11803f2e 	bgeu	r2,r6,4a994 <_realloc_r+0x500>
   4a898:	a8800017 	ldw	r2,0(r21)
   4a89c:	b0800215 	stw	r2,8(r22)
   4a8a0:	a8800117 	ldw	r2,4(r21)
   4a8a4:	b0800315 	stw	r2,12(r22)
   4a8a8:	008006c4 	movi	r2,27
   4a8ac:	11803f36 	bltu	r2,r6,4a9ac <_realloc_r+0x518>
   4a8b0:	b0800404 	addi	r2,r22,16
   4a8b4:	ad400204 	addi	r21,r21,8
   4a8b8:	a8c00017 	ldw	r3,0(r21)
   4a8bc:	10c00015 	stw	r3,0(r2)
   4a8c0:	a8c00117 	ldw	r3,4(r21)
   4a8c4:	10c00115 	stw	r3,4(r2)
   4a8c8:	a8c00217 	ldw	r3,8(r21)
   4a8cc:	10c00215 	stw	r3,8(r2)
   4a8d0:	b447883a 	add	r3,r22,r17
   4a8d4:	bc45c83a 	sub	r2,r23,r17
   4a8d8:	e0c00215 	stw	r3,8(fp)
   4a8dc:	10800054 	ori	r2,r2,1
   4a8e0:	18800115 	stw	r2,4(r3)
   4a8e4:	b0800117 	ldw	r2,4(r22)
   4a8e8:	a009883a 	mov	r4,r20
   4a8ec:	1080004c 	andi	r2,r2,1
   4a8f0:	1462b03a 	or	r17,r2,r17
   4a8f4:	b4400115 	stw	r17,4(r22)
   4a8f8:	0051c4c0 	call	51c4c <__malloc_unlock>
   4a8fc:	9005883a 	mov	r2,r18
   4a900:	003f4006 	br	4a604 <__alt_data_end+0xfffd8604>
   4a904:	a8c00217 	ldw	r3,8(r21)
   4a908:	90c00215 	stw	r3,8(r18)
   4a90c:	a8c00317 	ldw	r3,12(r21)
   4a910:	90c00315 	stw	r3,12(r18)
   4a914:	30801126 	beq	r6,r2,4a95c <_realloc_r+0x4c8>
   4a918:	90800404 	addi	r2,r18,16
   4a91c:	a8c00404 	addi	r3,r21,16
   4a920:	003f1906 	br	4a588 <__alt_data_end+0xfffd8588>
   4a924:	90ffff17 	ldw	r3,-4(r18)
   4a928:	00bfff04 	movi	r2,-4
   4a92c:	a825883a 	mov	r18,r21
   4a930:	1884703a 	and	r2,r3,r2
   4a934:	80a1883a 	add	r16,r16,r2
   4a938:	003f2406 	br	4a5cc <__alt_data_end+0xfffd85cc>
   4a93c:	a8800217 	ldw	r2,8(r21)
   4a940:	b0800415 	stw	r2,16(r22)
   4a944:	a8800317 	ldw	r2,12(r21)
   4a948:	b0800515 	stw	r2,20(r22)
   4a94c:	31000a26 	beq	r6,r4,4a978 <_realloc_r+0x4e4>
   4a950:	b0800604 	addi	r2,r22,24
   4a954:	ad400404 	addi	r21,r21,16
   4a958:	003fa906 	br	4a800 <__alt_data_end+0xfffd8800>
   4a95c:	a9000417 	ldw	r4,16(r21)
   4a960:	90800604 	addi	r2,r18,24
   4a964:	a8c00604 	addi	r3,r21,24
   4a968:	91000415 	stw	r4,16(r18)
   4a96c:	a9000517 	ldw	r4,20(r21)
   4a970:	91000515 	stw	r4,20(r18)
   4a974:	003f0406 	br	4a588 <__alt_data_end+0xfffd8588>
   4a978:	a8c00417 	ldw	r3,16(r21)
   4a97c:	ad400604 	addi	r21,r21,24
   4a980:	b0800804 	addi	r2,r22,32
   4a984:	b0c00615 	stw	r3,24(r22)
   4a988:	a8ffff17 	ldw	r3,-4(r21)
   4a98c:	b0c00715 	stw	r3,28(r22)
   4a990:	003f9b06 	br	4a800 <__alt_data_end+0xfffd8800>
   4a994:	9005883a 	mov	r2,r18
   4a998:	003fc706 	br	4a8b8 <__alt_data_end+0xfffd88b8>
   4a99c:	a80b883a 	mov	r5,r21
   4a9a0:	9009883a 	mov	r4,r18
   4a9a4:	0048ff00 	call	48ff0 <memmove>
   4a9a8:	003fc906 	br	4a8d0 <__alt_data_end+0xfffd88d0>
   4a9ac:	a8800217 	ldw	r2,8(r21)
   4a9b0:	b0800415 	stw	r2,16(r22)
   4a9b4:	a8800317 	ldw	r2,12(r21)
   4a9b8:	b0800515 	stw	r2,20(r22)
   4a9bc:	31000726 	beq	r6,r4,4a9dc <_realloc_r+0x548>
   4a9c0:	b0800604 	addi	r2,r22,24
   4a9c4:	ad400404 	addi	r21,r21,16
   4a9c8:	003fbb06 	br	4a8b8 <__alt_data_end+0xfffd88b8>
   4a9cc:	a009883a 	mov	r4,r20
   4a9d0:	0051c4c0 	call	51c4c <__malloc_unlock>
   4a9d4:	0005883a 	mov	r2,zero
   4a9d8:	003f0a06 	br	4a604 <__alt_data_end+0xfffd8604>
   4a9dc:	a8c00417 	ldw	r3,16(r21)
   4a9e0:	ad400604 	addi	r21,r21,24
   4a9e4:	b0800804 	addi	r2,r22,32
   4a9e8:	b0c00615 	stw	r3,24(r22)
   4a9ec:	a8ffff17 	ldw	r3,-4(r21)
   4a9f0:	b0c00715 	stw	r3,28(r22)
   4a9f4:	003fb006 	br	4a8b8 <__alt_data_end+0xfffd88b8>

0004a9f8 <__fpclassifyd>:
   4a9f8:	00a00034 	movhi	r2,32768
   4a9fc:	10bfffc4 	addi	r2,r2,-1
   4aa00:	2884703a 	and	r2,r5,r2
   4aa04:	10000726 	beq	r2,zero,4aa24 <__fpclassifyd+0x2c>
   4aa08:	00fffc34 	movhi	r3,65520
   4aa0c:	019ff834 	movhi	r6,32736
   4aa10:	28c7883a 	add	r3,r5,r3
   4aa14:	31bfffc4 	addi	r6,r6,-1
   4aa18:	30c00536 	bltu	r6,r3,4aa30 <__fpclassifyd+0x38>
   4aa1c:	00800104 	movi	r2,4
   4aa20:	f800283a 	ret
   4aa24:	2000021e 	bne	r4,zero,4aa30 <__fpclassifyd+0x38>
   4aa28:	00800084 	movi	r2,2
   4aa2c:	f800283a 	ret
   4aa30:	00dffc34 	movhi	r3,32752
   4aa34:	019ff834 	movhi	r6,32736
   4aa38:	28cb883a 	add	r5,r5,r3
   4aa3c:	31bfffc4 	addi	r6,r6,-1
   4aa40:	317ff62e 	bgeu	r6,r5,4aa1c <__alt_data_end+0xfffd8a1c>
   4aa44:	01400434 	movhi	r5,16
   4aa48:	297fffc4 	addi	r5,r5,-1
   4aa4c:	28800236 	bltu	r5,r2,4aa58 <__fpclassifyd+0x60>
   4aa50:	008000c4 	movi	r2,3
   4aa54:	f800283a 	ret
   4aa58:	10c00226 	beq	r2,r3,4aa64 <__fpclassifyd+0x6c>
   4aa5c:	0005883a 	mov	r2,zero
   4aa60:	f800283a 	ret
   4aa64:	2005003a 	cmpeq	r2,r4,zero
   4aa68:	f800283a 	ret

0004aa6c <_sbrk_r>:
   4aa6c:	defffd04 	addi	sp,sp,-12
   4aa70:	dc000015 	stw	r16,0(sp)
   4aa74:	040001b4 	movhi	r16,6
   4aa78:	dc400115 	stw	r17,4(sp)
   4aa7c:	84261a04 	addi	r16,r16,-26520
   4aa80:	2023883a 	mov	r17,r4
   4aa84:	2809883a 	mov	r4,r5
   4aa88:	dfc00215 	stw	ra,8(sp)
   4aa8c:	80000015 	stw	zero,0(r16)
   4aa90:	0051e340 	call	51e34 <sbrk>
   4aa94:	00ffffc4 	movi	r3,-1
   4aa98:	10c00526 	beq	r2,r3,4aab0 <_sbrk_r+0x44>
   4aa9c:	dfc00217 	ldw	ra,8(sp)
   4aaa0:	dc400117 	ldw	r17,4(sp)
   4aaa4:	dc000017 	ldw	r16,0(sp)
   4aaa8:	dec00304 	addi	sp,sp,12
   4aaac:	f800283a 	ret
   4aab0:	80c00017 	ldw	r3,0(r16)
   4aab4:	183ff926 	beq	r3,zero,4aa9c <__alt_data_end+0xfffd8a9c>
   4aab8:	88c00015 	stw	r3,0(r17)
   4aabc:	003ff706 	br	4aa9c <__alt_data_end+0xfffd8a9c>

0004aac0 <__sread>:
   4aac0:	defffe04 	addi	sp,sp,-8
   4aac4:	dc000015 	stw	r16,0(sp)
   4aac8:	2821883a 	mov	r16,r5
   4aacc:	2940038f 	ldh	r5,14(r5)
   4aad0:	dfc00115 	stw	ra,4(sp)
   4aad4:	004e0440 	call	4e044 <_read_r>
   4aad8:	10000716 	blt	r2,zero,4aaf8 <__sread+0x38>
   4aadc:	80c01417 	ldw	r3,80(r16)
   4aae0:	1887883a 	add	r3,r3,r2
   4aae4:	80c01415 	stw	r3,80(r16)
   4aae8:	dfc00117 	ldw	ra,4(sp)
   4aaec:	dc000017 	ldw	r16,0(sp)
   4aaf0:	dec00204 	addi	sp,sp,8
   4aaf4:	f800283a 	ret
   4aaf8:	80c0030b 	ldhu	r3,12(r16)
   4aafc:	18fbffcc 	andi	r3,r3,61439
   4ab00:	80c0030d 	sth	r3,12(r16)
   4ab04:	dfc00117 	ldw	ra,4(sp)
   4ab08:	dc000017 	ldw	r16,0(sp)
   4ab0c:	dec00204 	addi	sp,sp,8
   4ab10:	f800283a 	ret

0004ab14 <__seofread>:
   4ab14:	0005883a 	mov	r2,zero
   4ab18:	f800283a 	ret

0004ab1c <__swrite>:
   4ab1c:	2880030b 	ldhu	r2,12(r5)
   4ab20:	defffb04 	addi	sp,sp,-20
   4ab24:	dcc00315 	stw	r19,12(sp)
   4ab28:	dc800215 	stw	r18,8(sp)
   4ab2c:	dc400115 	stw	r17,4(sp)
   4ab30:	dc000015 	stw	r16,0(sp)
   4ab34:	dfc00415 	stw	ra,16(sp)
   4ab38:	10c0400c 	andi	r3,r2,256
   4ab3c:	2821883a 	mov	r16,r5
   4ab40:	2023883a 	mov	r17,r4
   4ab44:	3025883a 	mov	r18,r6
   4ab48:	3827883a 	mov	r19,r7
   4ab4c:	18000526 	beq	r3,zero,4ab64 <__swrite+0x48>
   4ab50:	2940038f 	ldh	r5,14(r5)
   4ab54:	01c00084 	movi	r7,2
   4ab58:	000d883a 	mov	r6,zero
   4ab5c:	004dfe40 	call	4dfe4 <_lseek_r>
   4ab60:	8080030b 	ldhu	r2,12(r16)
   4ab64:	8140038f 	ldh	r5,14(r16)
   4ab68:	10bbffcc 	andi	r2,r2,61439
   4ab6c:	980f883a 	mov	r7,r19
   4ab70:	900d883a 	mov	r6,r18
   4ab74:	8809883a 	mov	r4,r17
   4ab78:	8080030d 	sth	r2,12(r16)
   4ab7c:	dfc00417 	ldw	ra,16(sp)
   4ab80:	dcc00317 	ldw	r19,12(sp)
   4ab84:	dc800217 	ldw	r18,8(sp)
   4ab88:	dc400117 	ldw	r17,4(sp)
   4ab8c:	dc000017 	ldw	r16,0(sp)
   4ab90:	dec00504 	addi	sp,sp,20
   4ab94:	004da981 	jmpi	4da98 <_write_r>

0004ab98 <__sseek>:
   4ab98:	defffe04 	addi	sp,sp,-8
   4ab9c:	dc000015 	stw	r16,0(sp)
   4aba0:	2821883a 	mov	r16,r5
   4aba4:	2940038f 	ldh	r5,14(r5)
   4aba8:	dfc00115 	stw	ra,4(sp)
   4abac:	004dfe40 	call	4dfe4 <_lseek_r>
   4abb0:	00ffffc4 	movi	r3,-1
   4abb4:	10c00826 	beq	r2,r3,4abd8 <__sseek+0x40>
   4abb8:	80c0030b 	ldhu	r3,12(r16)
   4abbc:	80801415 	stw	r2,80(r16)
   4abc0:	18c40014 	ori	r3,r3,4096
   4abc4:	80c0030d 	sth	r3,12(r16)
   4abc8:	dfc00117 	ldw	ra,4(sp)
   4abcc:	dc000017 	ldw	r16,0(sp)
   4abd0:	dec00204 	addi	sp,sp,8
   4abd4:	f800283a 	ret
   4abd8:	80c0030b 	ldhu	r3,12(r16)
   4abdc:	18fbffcc 	andi	r3,r3,61439
   4abe0:	80c0030d 	sth	r3,12(r16)
   4abe4:	dfc00117 	ldw	ra,4(sp)
   4abe8:	dc000017 	ldw	r16,0(sp)
   4abec:	dec00204 	addi	sp,sp,8
   4abf0:	f800283a 	ret

0004abf4 <__sclose>:
   4abf4:	2940038f 	ldh	r5,14(r5)
   4abf8:	004daf81 	jmpi	4daf8 <_close_r>

0004abfc <strcmp>:
   4abfc:	2144b03a 	or	r2,r4,r5
   4ac00:	108000cc 	andi	r2,r2,3
   4ac04:	1000171e 	bne	r2,zero,4ac64 <strcmp+0x68>
   4ac08:	20800017 	ldw	r2,0(r4)
   4ac0c:	28c00017 	ldw	r3,0(r5)
   4ac10:	10c0141e 	bne	r2,r3,4ac64 <strcmp+0x68>
   4ac14:	027fbff4 	movhi	r9,65279
   4ac18:	4a7fbfc4 	addi	r9,r9,-257
   4ac1c:	0086303a 	nor	r3,zero,r2
   4ac20:	02202074 	movhi	r8,32897
   4ac24:	1245883a 	add	r2,r2,r9
   4ac28:	42202004 	addi	r8,r8,-32640
   4ac2c:	10c4703a 	and	r2,r2,r3
   4ac30:	1204703a 	and	r2,r2,r8
   4ac34:	10000226 	beq	r2,zero,4ac40 <strcmp+0x44>
   4ac38:	00002306 	br	4acc8 <strcmp+0xcc>
   4ac3c:	1000221e 	bne	r2,zero,4acc8 <strcmp+0xcc>
   4ac40:	21000104 	addi	r4,r4,4
   4ac44:	20c00017 	ldw	r3,0(r4)
   4ac48:	29400104 	addi	r5,r5,4
   4ac4c:	29800017 	ldw	r6,0(r5)
   4ac50:	1a4f883a 	add	r7,r3,r9
   4ac54:	00c4303a 	nor	r2,zero,r3
   4ac58:	3884703a 	and	r2,r7,r2
   4ac5c:	1204703a 	and	r2,r2,r8
   4ac60:	19bff626 	beq	r3,r6,4ac3c <__alt_data_end+0xfffd8c3c>
   4ac64:	20800003 	ldbu	r2,0(r4)
   4ac68:	10c03fcc 	andi	r3,r2,255
   4ac6c:	18c0201c 	xori	r3,r3,128
   4ac70:	18ffe004 	addi	r3,r3,-128
   4ac74:	18000c26 	beq	r3,zero,4aca8 <strcmp+0xac>
   4ac78:	29800007 	ldb	r6,0(r5)
   4ac7c:	19800326 	beq	r3,r6,4ac8c <strcmp+0x90>
   4ac80:	00001306 	br	4acd0 <strcmp+0xd4>
   4ac84:	29800007 	ldb	r6,0(r5)
   4ac88:	11800b1e 	bne	r2,r6,4acb8 <strcmp+0xbc>
   4ac8c:	21000044 	addi	r4,r4,1
   4ac90:	20c00003 	ldbu	r3,0(r4)
   4ac94:	29400044 	addi	r5,r5,1
   4ac98:	18803fcc 	andi	r2,r3,255
   4ac9c:	1080201c 	xori	r2,r2,128
   4aca0:	10bfe004 	addi	r2,r2,-128
   4aca4:	103ff71e 	bne	r2,zero,4ac84 <__alt_data_end+0xfffd8c84>
   4aca8:	0007883a 	mov	r3,zero
   4acac:	28800003 	ldbu	r2,0(r5)
   4acb0:	1885c83a 	sub	r2,r3,r2
   4acb4:	f800283a 	ret
   4acb8:	28800003 	ldbu	r2,0(r5)
   4acbc:	18c03fcc 	andi	r3,r3,255
   4acc0:	1885c83a 	sub	r2,r3,r2
   4acc4:	f800283a 	ret
   4acc8:	0005883a 	mov	r2,zero
   4accc:	f800283a 	ret
   4acd0:	10c03fcc 	andi	r3,r2,255
   4acd4:	003ff506 	br	4acac <__alt_data_end+0xfffd8cac>

0004acd8 <__ssprint_r>:
   4acd8:	30800217 	ldw	r2,8(r6)
   4acdc:	defff604 	addi	sp,sp,-40
   4ace0:	dc800215 	stw	r18,8(sp)
   4ace4:	dfc00915 	stw	ra,36(sp)
   4ace8:	df000815 	stw	fp,32(sp)
   4acec:	ddc00715 	stw	r23,28(sp)
   4acf0:	dd800615 	stw	r22,24(sp)
   4acf4:	dd400515 	stw	r21,20(sp)
   4acf8:	dd000415 	stw	r20,16(sp)
   4acfc:	dcc00315 	stw	r19,12(sp)
   4ad00:	dc400115 	stw	r17,4(sp)
   4ad04:	dc000015 	stw	r16,0(sp)
   4ad08:	3025883a 	mov	r18,r6
   4ad0c:	10005826 	beq	r2,zero,4ae70 <__ssprint_r+0x198>
   4ad10:	2027883a 	mov	r19,r4
   4ad14:	35c00017 	ldw	r23,0(r6)
   4ad18:	29000017 	ldw	r4,0(r5)
   4ad1c:	28800217 	ldw	r2,8(r5)
   4ad20:	2823883a 	mov	r17,r5
   4ad24:	0039883a 	mov	fp,zero
   4ad28:	0021883a 	mov	r16,zero
   4ad2c:	80003926 	beq	r16,zero,4ae14 <__ssprint_r+0x13c>
   4ad30:	102b883a 	mov	r21,r2
   4ad34:	102d883a 	mov	r22,r2
   4ad38:	80803a36 	bltu	r16,r2,4ae24 <__ssprint_r+0x14c>
   4ad3c:	88c0030b 	ldhu	r3,12(r17)
   4ad40:	1881200c 	andi	r2,r3,1152
   4ad44:	10002626 	beq	r2,zero,4ade0 <__ssprint_r+0x108>
   4ad48:	88800517 	ldw	r2,20(r17)
   4ad4c:	89400417 	ldw	r5,16(r17)
   4ad50:	81800044 	addi	r6,r16,1
   4ad54:	108f883a 	add	r7,r2,r2
   4ad58:	3885883a 	add	r2,r7,r2
   4ad5c:	100ed7fa 	srli	r7,r2,31
   4ad60:	216dc83a 	sub	r22,r4,r5
   4ad64:	3589883a 	add	r4,r6,r22
   4ad68:	3885883a 	add	r2,r7,r2
   4ad6c:	102bd07a 	srai	r21,r2,1
   4ad70:	a80d883a 	mov	r6,r21
   4ad74:	a900022e 	bgeu	r21,r4,4ad80 <__ssprint_r+0xa8>
   4ad78:	202b883a 	mov	r21,r4
   4ad7c:	200d883a 	mov	r6,r4
   4ad80:	18c1000c 	andi	r3,r3,1024
   4ad84:	18002a26 	beq	r3,zero,4ae30 <__ssprint_r+0x158>
   4ad88:	300b883a 	mov	r5,r6
   4ad8c:	9809883a 	mov	r4,r19
   4ad90:	00485b80 	call	485b8 <_malloc_r>
   4ad94:	1029883a 	mov	r20,r2
   4ad98:	10002c26 	beq	r2,zero,4ae4c <__ssprint_r+0x174>
   4ad9c:	89400417 	ldw	r5,16(r17)
   4ada0:	b00d883a 	mov	r6,r22
   4ada4:	1009883a 	mov	r4,r2
   4ada8:	0048ea80 	call	48ea8 <memcpy>
   4adac:	8880030b 	ldhu	r2,12(r17)
   4adb0:	00fedfc4 	movi	r3,-1153
   4adb4:	10c4703a 	and	r2,r2,r3
   4adb8:	10802014 	ori	r2,r2,128
   4adbc:	8880030d 	sth	r2,12(r17)
   4adc0:	a589883a 	add	r4,r20,r22
   4adc4:	adadc83a 	sub	r22,r21,r22
   4adc8:	8d400515 	stw	r21,20(r17)
   4adcc:	8d800215 	stw	r22,8(r17)
   4add0:	8d000415 	stw	r20,16(r17)
   4add4:	89000015 	stw	r4,0(r17)
   4add8:	802b883a 	mov	r21,r16
   4addc:	802d883a 	mov	r22,r16
   4ade0:	b00d883a 	mov	r6,r22
   4ade4:	e00b883a 	mov	r5,fp
   4ade8:	0048ff00 	call	48ff0 <memmove>
   4adec:	88800217 	ldw	r2,8(r17)
   4adf0:	89000017 	ldw	r4,0(r17)
   4adf4:	90c00217 	ldw	r3,8(r18)
   4adf8:	1545c83a 	sub	r2,r2,r21
   4adfc:	2589883a 	add	r4,r4,r22
   4ae00:	88800215 	stw	r2,8(r17)
   4ae04:	89000015 	stw	r4,0(r17)
   4ae08:	1c21c83a 	sub	r16,r3,r16
   4ae0c:	94000215 	stw	r16,8(r18)
   4ae10:	80001726 	beq	r16,zero,4ae70 <__ssprint_r+0x198>
   4ae14:	bf000017 	ldw	fp,0(r23)
   4ae18:	bc000117 	ldw	r16,4(r23)
   4ae1c:	bdc00204 	addi	r23,r23,8
   4ae20:	003fc206 	br	4ad2c <__alt_data_end+0xfffd8d2c>
   4ae24:	802b883a 	mov	r21,r16
   4ae28:	802d883a 	mov	r22,r16
   4ae2c:	003fec06 	br	4ade0 <__alt_data_end+0xfffd8de0>
   4ae30:	9809883a 	mov	r4,r19
   4ae34:	004a4940 	call	4a494 <_realloc_r>
   4ae38:	1029883a 	mov	r20,r2
   4ae3c:	103fe01e 	bne	r2,zero,4adc0 <__alt_data_end+0xfffd8dc0>
   4ae40:	89400417 	ldw	r5,16(r17)
   4ae44:	9809883a 	mov	r4,r19
   4ae48:	00479c00 	call	479c0 <_free_r>
   4ae4c:	88c0030b 	ldhu	r3,12(r17)
   4ae50:	00800304 	movi	r2,12
   4ae54:	98800015 	stw	r2,0(r19)
   4ae58:	18c01014 	ori	r3,r3,64
   4ae5c:	88c0030d 	sth	r3,12(r17)
   4ae60:	00bfffc4 	movi	r2,-1
   4ae64:	90000215 	stw	zero,8(r18)
   4ae68:	90000115 	stw	zero,4(r18)
   4ae6c:	00000206 	br	4ae78 <__ssprint_r+0x1a0>
   4ae70:	90000115 	stw	zero,4(r18)
   4ae74:	0005883a 	mov	r2,zero
   4ae78:	dfc00917 	ldw	ra,36(sp)
   4ae7c:	df000817 	ldw	fp,32(sp)
   4ae80:	ddc00717 	ldw	r23,28(sp)
   4ae84:	dd800617 	ldw	r22,24(sp)
   4ae88:	dd400517 	ldw	r21,20(sp)
   4ae8c:	dd000417 	ldw	r20,16(sp)
   4ae90:	dcc00317 	ldw	r19,12(sp)
   4ae94:	dc800217 	ldw	r18,8(sp)
   4ae98:	dc400117 	ldw	r17,4(sp)
   4ae9c:	dc000017 	ldw	r16,0(sp)
   4aea0:	dec00a04 	addi	sp,sp,40
   4aea4:	f800283a 	ret

0004aea8 <___svfiprintf_internal_r>:
   4aea8:	2880030b 	ldhu	r2,12(r5)
   4aeac:	deffc804 	addi	sp,sp,-224
   4aeb0:	dcc03115 	stw	r19,196(sp)
   4aeb4:	dfc03715 	stw	ra,220(sp)
   4aeb8:	df003615 	stw	fp,216(sp)
   4aebc:	ddc03515 	stw	r23,212(sp)
   4aec0:	dd803415 	stw	r22,208(sp)
   4aec4:	dd403315 	stw	r21,204(sp)
   4aec8:	dd003215 	stw	r20,200(sp)
   4aecc:	dc803015 	stw	r18,192(sp)
   4aed0:	dc402f15 	stw	r17,188(sp)
   4aed4:	dc002e15 	stw	r16,184(sp)
   4aed8:	d9402315 	stw	r5,140(sp)
   4aedc:	d9002715 	stw	r4,156(sp)
   4aee0:	1080200c 	andi	r2,r2,128
   4aee4:	d9c02415 	stw	r7,144(sp)
   4aee8:	3027883a 	mov	r19,r6
   4aeec:	10000226 	beq	r2,zero,4aef8 <___svfiprintf_internal_r+0x50>
   4aef0:	28800417 	ldw	r2,16(r5)
   4aef4:	10046d26 	beq	r2,zero,4c0ac <___svfiprintf_internal_r+0x1204>
   4aef8:	d8801a04 	addi	r2,sp,104
   4aefc:	d8c019c4 	addi	r3,sp,103
   4af00:	05800174 	movhi	r22,5
   4af04:	10c9c83a 	sub	r4,r2,r3
   4af08:	b5984604 	addi	r22,r22,24856
   4af0c:	d8801e15 	stw	r2,120(sp)
   4af10:	d8c01f15 	stw	r3,124(sp)
   4af14:	dec01a15 	stw	sp,104(sp)
   4af18:	d8001c15 	stw	zero,112(sp)
   4af1c:	d8001b15 	stw	zero,108(sp)
   4af20:	d811883a 	mov	r8,sp
   4af24:	d8002915 	stw	zero,164(sp)
   4af28:	d8002615 	stw	zero,152(sp)
   4af2c:	d9002c15 	stw	r4,176(sp)
   4af30:	98800007 	ldb	r2,0(r19)
   4af34:	10031426 	beq	r2,zero,4bb88 <___svfiprintf_internal_r+0xce0>
   4af38:	00c00944 	movi	r3,37
   4af3c:	9825883a 	mov	r18,r19
   4af40:	10c0021e 	bne	r2,r3,4af4c <___svfiprintf_internal_r+0xa4>
   4af44:	00001406 	br	4af98 <___svfiprintf_internal_r+0xf0>
   4af48:	10c00326 	beq	r2,r3,4af58 <___svfiprintf_internal_r+0xb0>
   4af4c:	94800044 	addi	r18,r18,1
   4af50:	90800007 	ldb	r2,0(r18)
   4af54:	103ffc1e 	bne	r2,zero,4af48 <__alt_data_end+0xfffd8f48>
   4af58:	94e1c83a 	sub	r16,r18,r19
   4af5c:	80000e26 	beq	r16,zero,4af98 <___svfiprintf_internal_r+0xf0>
   4af60:	d8c01c17 	ldw	r3,112(sp)
   4af64:	d8801b17 	ldw	r2,108(sp)
   4af68:	44c00015 	stw	r19,0(r8)
   4af6c:	1c07883a 	add	r3,r3,r16
   4af70:	10800044 	addi	r2,r2,1
   4af74:	d8c01c15 	stw	r3,112(sp)
   4af78:	44000115 	stw	r16,4(r8)
   4af7c:	d8801b15 	stw	r2,108(sp)
   4af80:	00c001c4 	movi	r3,7
   4af84:	18835c16 	blt	r3,r2,4bcf8 <___svfiprintf_internal_r+0xe50>
   4af88:	42000204 	addi	r8,r8,8
   4af8c:	d9402617 	ldw	r5,152(sp)
   4af90:	2c0b883a 	add	r5,r5,r16
   4af94:	d9402615 	stw	r5,152(sp)
   4af98:	90800007 	ldb	r2,0(r18)
   4af9c:	1002fc26 	beq	r2,zero,4bb90 <___svfiprintf_internal_r+0xce8>
   4afa0:	0023883a 	mov	r17,zero
   4afa4:	00bfffc4 	movi	r2,-1
   4afa8:	0021883a 	mov	r16,zero
   4afac:	94c00044 	addi	r19,r18,1
   4afb0:	90c00047 	ldb	r3,1(r18)
   4afb4:	dc402105 	stb	r17,132(sp)
   4afb8:	d8001d85 	stb	zero,118(sp)
   4afbc:	002b883a 	mov	r21,zero
   4afc0:	d8802015 	stw	r2,128(sp)
   4afc4:	d8002515 	stw	zero,148(sp)
   4afc8:	04801604 	movi	r18,88
   4afcc:	05000244 	movi	r20,9
   4afd0:	402f883a 	mov	r23,r8
   4afd4:	8023883a 	mov	r17,r16
   4afd8:	9cc00044 	addi	r19,r19,1
   4afdc:	18bff804 	addi	r2,r3,-32
   4afe0:	9081fb36 	bltu	r18,r2,4b7d0 <___svfiprintf_internal_r+0x928>
   4afe4:	100490ba 	slli	r2,r2,2
   4afe8:	01000174 	movhi	r4,5
   4afec:	212bff04 	addi	r4,r4,-20484
   4aff0:	1105883a 	add	r2,r2,r4
   4aff4:	10800017 	ldw	r2,0(r2)
   4aff8:	1000683a 	jmp	r2
   4affc:	0004b1fc 	xorhi	zero,zero,4807
   4b000:	0004b7d0 	cmplti	zero,zero,4831
   4b004:	0004b7d0 	cmplti	zero,zero,4831
   4b008:	0004b1f0 	cmpltui	zero,zero,4807
   4b00c:	0004b7d0 	cmplti	zero,zero,4831
   4b010:	0004b7d0 	cmplti	zero,zero,4831
   4b014:	0004b7d0 	cmplti	zero,zero,4831
   4b018:	0004b7d0 	cmplti	zero,zero,4831
   4b01c:	0004b7d0 	cmplti	zero,zero,4831
   4b020:	0004b7d0 	cmplti	zero,zero,4831
   4b024:	0004b160 	cmpeqi	zero,zero,4805
   4b028:	0004b35c 	xori	zero,zero,4813
   4b02c:	0004b7d0 	cmplti	zero,zero,4831
   4b030:	0004b188 	cmpgei	zero,zero,4806
   4b034:	0004b80c 	andi	zero,zero,4832
   4b038:	0004b7d0 	cmplti	zero,zero,4831
   4b03c:	0004b800 	call	4b80 <__alt_mem_RAM-0x3b480>
   4b040:	0004b794 	movui	zero,4830
   4b044:	0004b794 	movui	zero,4830
   4b048:	0004b794 	movui	zero,4830
   4b04c:	0004b794 	movui	zero,4830
   4b050:	0004b794 	movui	zero,4830
   4b054:	0004b794 	movui	zero,4830
   4b058:	0004b794 	movui	zero,4830
   4b05c:	0004b794 	movui	zero,4830
   4b060:	0004b794 	movui	zero,4830
   4b064:	0004b7d0 	cmplti	zero,zero,4831
   4b068:	0004b7d0 	cmplti	zero,zero,4831
   4b06c:	0004b7d0 	cmplti	zero,zero,4831
   4b070:	0004b7d0 	cmplti	zero,zero,4831
   4b074:	0004b7d0 	cmplti	zero,zero,4831
   4b078:	0004b7d0 	cmplti	zero,zero,4831
   4b07c:	0004b7d0 	cmplti	zero,zero,4831
   4b080:	0004b7d0 	cmplti	zero,zero,4831
   4b084:	0004b7d0 	cmplti	zero,zero,4831
   4b088:	0004b7d0 	cmplti	zero,zero,4831
   4b08c:	0004b718 	cmpnei	zero,zero,4828
   4b090:	0004b7d0 	cmplti	zero,zero,4831
   4b094:	0004b7d0 	cmplti	zero,zero,4831
   4b098:	0004b7d0 	cmplti	zero,zero,4831
   4b09c:	0004b7d0 	cmplti	zero,zero,4831
   4b0a0:	0004b7d0 	cmplti	zero,zero,4831
   4b0a4:	0004b7d0 	cmplti	zero,zero,4831
   4b0a8:	0004b7d0 	cmplti	zero,zero,4831
   4b0ac:	0004b7d0 	cmplti	zero,zero,4831
   4b0b0:	0004b7d0 	cmplti	zero,zero,4831
   4b0b4:	0004b7d0 	cmplti	zero,zero,4831
   4b0b8:	0004b8c8 	cmpgei	zero,zero,4835
   4b0bc:	0004b7d0 	cmplti	zero,zero,4831
   4b0c0:	0004b7d0 	cmplti	zero,zero,4831
   4b0c4:	0004b7d0 	cmplti	zero,zero,4831
   4b0c8:	0004b7d0 	cmplti	zero,zero,4831
   4b0cc:	0004b7d0 	cmplti	zero,zero,4831
   4b0d0:	0004b854 	movui	zero,4833
   4b0d4:	0004b7d0 	cmplti	zero,zero,4831
   4b0d8:	0004b7d0 	cmplti	zero,zero,4831
   4b0dc:	0004b554 	movui	zero,4821
   4b0e0:	0004b7d0 	cmplti	zero,zero,4831
   4b0e4:	0004b7d0 	cmplti	zero,zero,4831
   4b0e8:	0004b7d0 	cmplti	zero,zero,4831
   4b0ec:	0004b7d0 	cmplti	zero,zero,4831
   4b0f0:	0004b7d0 	cmplti	zero,zero,4831
   4b0f4:	0004b7d0 	cmplti	zero,zero,4831
   4b0f8:	0004b7d0 	cmplti	zero,zero,4831
   4b0fc:	0004b7d0 	cmplti	zero,zero,4831
   4b100:	0004b7d0 	cmplti	zero,zero,4831
   4b104:	0004b7d0 	cmplti	zero,zero,4831
   4b108:	0004b420 	cmpeqi	zero,zero,4816
   4b10c:	0004b604 	movi	zero,4824
   4b110:	0004b7d0 	cmplti	zero,zero,4831
   4b114:	0004b7d0 	cmplti	zero,zero,4831
   4b118:	0004b7d0 	cmplti	zero,zero,4831
   4b11c:	0004b5f8 	rdprs	zero,zero,4823
   4b120:	0004b604 	movi	zero,4824
   4b124:	0004b7d0 	cmplti	zero,zero,4831
   4b128:	0004b7d0 	cmplti	zero,zero,4831
   4b12c:	0004b5e4 	muli	zero,zero,4823
   4b130:	0004b7d0 	cmplti	zero,zero,4831
   4b134:	0004b5a4 	muli	zero,zero,4822
   4b138:	0004b370 	cmpltui	zero,zero,4813
   4b13c:	0004b194 	movui	zero,4806
   4b140:	0004b70c 	andi	zero,zero,4828
   4b144:	0004b7d0 	cmplti	zero,zero,4831
   4b148:	0004b6b8 	rdprs	zero,zero,4826
   4b14c:	0004b7d0 	cmplti	zero,zero,4831
   4b150:	0004b2d4 	movui	zero,4811
   4b154:	0004b7d0 	cmplti	zero,zero,4831
   4b158:	0004b7d0 	cmplti	zero,zero,4831
   4b15c:	0004b220 	cmpeqi	zero,zero,4808
   4b160:	d9002417 	ldw	r4,144(sp)
   4b164:	d9402417 	ldw	r5,144(sp)
   4b168:	21000017 	ldw	r4,0(r4)
   4b16c:	28800104 	addi	r2,r5,4
   4b170:	d9002515 	stw	r4,148(sp)
   4b174:	20032b0e 	bge	r4,zero,4be24 <___svfiprintf_internal_r+0xf7c>
   4b178:	d8c02517 	ldw	r3,148(sp)
   4b17c:	d8802415 	stw	r2,144(sp)
   4b180:	00c7c83a 	sub	r3,zero,r3
   4b184:	d8c02515 	stw	r3,148(sp)
   4b188:	8c400114 	ori	r17,r17,4
   4b18c:	98c00007 	ldb	r3,0(r19)
   4b190:	003f9106 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b194:	00800c04 	movi	r2,48
   4b198:	d9402417 	ldw	r5,144(sp)
   4b19c:	d9002017 	ldw	r4,128(sp)
   4b1a0:	d8801d05 	stb	r2,116(sp)
   4b1a4:	00801e04 	movi	r2,120
   4b1a8:	d8801d45 	stb	r2,117(sp)
   4b1ac:	d8001d85 	stb	zero,118(sp)
   4b1b0:	b811883a 	mov	r8,r23
   4b1b4:	28c00104 	addi	r3,r5,4
   4b1b8:	2c800017 	ldw	r18,0(r5)
   4b1bc:	0029883a 	mov	r20,zero
   4b1c0:	88800094 	ori	r2,r17,2
   4b1c4:	20036316 	blt	r4,zero,4bf54 <___svfiprintf_internal_r+0x10ac>
   4b1c8:	00bfdfc4 	movi	r2,-129
   4b1cc:	88a0703a 	and	r16,r17,r2
   4b1d0:	d8c02415 	stw	r3,144(sp)
   4b1d4:	84000094 	ori	r16,r16,2
   4b1d8:	90031c26 	beq	r18,zero,4be4c <___svfiprintf_internal_r+0xfa4>
   4b1dc:	01400174 	movhi	r5,5
   4b1e0:	2957dd04 	addi	r5,r5,24436
   4b1e4:	002b883a 	mov	r21,zero
   4b1e8:	d9402915 	stw	r5,164(sp)
   4b1ec:	00002906 	br	4b294 <___svfiprintf_internal_r+0x3ec>
   4b1f0:	8c400054 	ori	r17,r17,1
   4b1f4:	98c00007 	ldb	r3,0(r19)
   4b1f8:	003f7706 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b1fc:	a8803fcc 	andi	r2,r21,255
   4b200:	1080201c 	xori	r2,r2,128
   4b204:	10bfe004 	addi	r2,r2,-128
   4b208:	10032a1e 	bne	r2,zero,4beb4 <___svfiprintf_internal_r+0x100c>
   4b20c:	00c00044 	movi	r3,1
   4b210:	d8c02105 	stb	r3,132(sp)
   4b214:	05400804 	movi	r21,32
   4b218:	98c00007 	ldb	r3,0(r19)
   4b21c:	003f6e06 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b220:	8821883a 	mov	r16,r17
   4b224:	dc402103 	ldbu	r17,132(sp)
   4b228:	b811883a 	mov	r8,r23
   4b22c:	8c403fcc 	andi	r17,r17,255
   4b230:	8803f01e 	bne	r17,zero,4c1f4 <___svfiprintf_internal_r+0x134c>
   4b234:	00800174 	movhi	r2,5
   4b238:	1097dd04 	addi	r2,r2,24436
   4b23c:	d8802915 	stw	r2,164(sp)
   4b240:	8080080c 	andi	r2,r16,32
   4b244:	1000cd26 	beq	r2,zero,4b57c <___svfiprintf_internal_r+0x6d4>
   4b248:	d9002417 	ldw	r4,144(sp)
   4b24c:	24800017 	ldw	r18,0(r4)
   4b250:	25000117 	ldw	r20,4(r4)
   4b254:	21000204 	addi	r4,r4,8
   4b258:	d9002415 	stw	r4,144(sp)
   4b25c:	8080004c 	andi	r2,r16,1
   4b260:	1002c726 	beq	r2,zero,4bd80 <___svfiprintf_internal_r+0xed8>
   4b264:	9504b03a 	or	r2,r18,r20
   4b268:	1003061e 	bne	r2,zero,4be84 <___svfiprintf_internal_r+0xfdc>
   4b26c:	d9002017 	ldw	r4,128(sp)
   4b270:	d8001d85 	stb	zero,118(sp)
   4b274:	20033e16 	blt	r4,zero,4bf70 <___svfiprintf_internal_r+0x10c8>
   4b278:	00bfdfc4 	movi	r2,-129
   4b27c:	80a0703a 	and	r16,r16,r2
   4b280:	d9402017 	ldw	r5,128(sp)
   4b284:	002b883a 	mov	r21,zero
   4b288:	28002826 	beq	r5,zero,4b32c <___svfiprintf_internal_r+0x484>
   4b28c:	0025883a 	mov	r18,zero
   4b290:	0029883a 	mov	r20,zero
   4b294:	d9002917 	ldw	r4,164(sp)
   4b298:	dc401a04 	addi	r17,sp,104
   4b29c:	908003cc 	andi	r2,r18,15
   4b2a0:	a006973a 	slli	r3,r20,28
   4b2a4:	2085883a 	add	r2,r4,r2
   4b2a8:	9024d13a 	srli	r18,r18,4
   4b2ac:	10800003 	ldbu	r2,0(r2)
   4b2b0:	a028d13a 	srli	r20,r20,4
   4b2b4:	8c7fffc4 	addi	r17,r17,-1
   4b2b8:	1ca4b03a 	or	r18,r3,r18
   4b2bc:	88800005 	stb	r2,0(r17)
   4b2c0:	9504b03a 	or	r2,r18,r20
   4b2c4:	103ff51e 	bne	r2,zero,4b29c <__alt_data_end+0xfffd929c>
   4b2c8:	d8801e17 	ldw	r2,120(sp)
   4b2cc:	1469c83a 	sub	r20,r2,r17
   4b2d0:	00001906 	br	4b338 <___svfiprintf_internal_r+0x490>
   4b2d4:	8821883a 	mov	r16,r17
   4b2d8:	dc402103 	ldbu	r17,132(sp)
   4b2dc:	b811883a 	mov	r8,r23
   4b2e0:	8c403fcc 	andi	r17,r17,255
   4b2e4:	8803d01e 	bne	r17,zero,4c228 <___svfiprintf_internal_r+0x1380>
   4b2e8:	8080080c 	andi	r2,r16,32
   4b2ec:	10016126 	beq	r2,zero,4b874 <___svfiprintf_internal_r+0x9cc>
   4b2f0:	d9002417 	ldw	r4,144(sp)
   4b2f4:	d9402017 	ldw	r5,128(sp)
   4b2f8:	d8001d85 	stb	zero,118(sp)
   4b2fc:	20c00204 	addi	r3,r4,8
   4b300:	24800017 	ldw	r18,0(r4)
   4b304:	25000117 	ldw	r20,4(r4)
   4b308:	28030f16 	blt	r5,zero,4bf48 <___svfiprintf_internal_r+0x10a0>
   4b30c:	013fdfc4 	movi	r4,-129
   4b310:	9504b03a 	or	r2,r18,r20
   4b314:	d8c02415 	stw	r3,144(sp)
   4b318:	8120703a 	and	r16,r16,r4
   4b31c:	002b883a 	mov	r21,zero
   4b320:	1000cd1e 	bne	r2,zero,4b658 <___svfiprintf_internal_r+0x7b0>
   4b324:	d8c02017 	ldw	r3,128(sp)
   4b328:	1803141e 	bne	r3,zero,4bf7c <___svfiprintf_internal_r+0x10d4>
   4b32c:	d8002015 	stw	zero,128(sp)
   4b330:	0029883a 	mov	r20,zero
   4b334:	dc401a04 	addi	r17,sp,104
   4b338:	dc802017 	ldw	r18,128(sp)
   4b33c:	9500010e 	bge	r18,r20,4b344 <___svfiprintf_internal_r+0x49c>
   4b340:	a025883a 	mov	r18,r20
   4b344:	ad403fcc 	andi	r21,r21,255
   4b348:	ad40201c 	xori	r21,r21,128
   4b34c:	ad7fe004 	addi	r21,r21,-128
   4b350:	a8003f26 	beq	r21,zero,4b450 <___svfiprintf_internal_r+0x5a8>
   4b354:	94800044 	addi	r18,r18,1
   4b358:	00003d06 	br	4b450 <___svfiprintf_internal_r+0x5a8>
   4b35c:	00c00044 	movi	r3,1
   4b360:	d8c02105 	stb	r3,132(sp)
   4b364:	05400ac4 	movi	r21,43
   4b368:	98c00007 	ldb	r3,0(r19)
   4b36c:	003f1a06 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b370:	8821883a 	mov	r16,r17
   4b374:	dc402103 	ldbu	r17,132(sp)
   4b378:	b811883a 	mov	r8,r23
   4b37c:	8c403fcc 	andi	r17,r17,255
   4b380:	8803a71e 	bne	r17,zero,4c220 <___svfiprintf_internal_r+0x1378>
   4b384:	8080080c 	andi	r2,r16,32
   4b388:	10015726 	beq	r2,zero,4b8e8 <___svfiprintf_internal_r+0xa40>
   4b38c:	d8c02417 	ldw	r3,144(sp)
   4b390:	d9002017 	ldw	r4,128(sp)
   4b394:	d8001d85 	stb	zero,118(sp)
   4b398:	18800204 	addi	r2,r3,8
   4b39c:	1c800017 	ldw	r18,0(r3)
   4b3a0:	1d000117 	ldw	r20,4(r3)
   4b3a4:	2002db16 	blt	r4,zero,4bf14 <___svfiprintf_internal_r+0x106c>
   4b3a8:	013fdfc4 	movi	r4,-129
   4b3ac:	9506b03a 	or	r3,r18,r20
   4b3b0:	d8802415 	stw	r2,144(sp)
   4b3b4:	8120703a 	and	r16,r16,r4
   4b3b8:	18015826 	beq	r3,zero,4b91c <___svfiprintf_internal_r+0xa74>
   4b3bc:	002b883a 	mov	r21,zero
   4b3c0:	dc401a04 	addi	r17,sp,104
   4b3c4:	9006d0fa 	srli	r3,r18,3
   4b3c8:	a008977a 	slli	r4,r20,29
   4b3cc:	a028d0fa 	srli	r20,r20,3
   4b3d0:	948001cc 	andi	r18,r18,7
   4b3d4:	90800c04 	addi	r2,r18,48
   4b3d8:	8c7fffc4 	addi	r17,r17,-1
   4b3dc:	20e4b03a 	or	r18,r4,r3
   4b3e0:	88800005 	stb	r2,0(r17)
   4b3e4:	9506b03a 	or	r3,r18,r20
   4b3e8:	183ff61e 	bne	r3,zero,4b3c4 <__alt_data_end+0xfffd93c4>
   4b3ec:	80c0004c 	andi	r3,r16,1
   4b3f0:	18028926 	beq	r3,zero,4be18 <___svfiprintf_internal_r+0xf70>
   4b3f4:	10803fcc 	andi	r2,r2,255
   4b3f8:	1080201c 	xori	r2,r2,128
   4b3fc:	10bfe004 	addi	r2,r2,-128
   4b400:	00c00c04 	movi	r3,48
   4b404:	10ffb026 	beq	r2,r3,4b2c8 <__alt_data_end+0xfffd92c8>
   4b408:	88ffffc5 	stb	r3,-1(r17)
   4b40c:	d8c01e17 	ldw	r3,120(sp)
   4b410:	88bfffc4 	addi	r2,r17,-1
   4b414:	1023883a 	mov	r17,r2
   4b418:	18a9c83a 	sub	r20,r3,r2
   4b41c:	003fc606 	br	4b338 <__alt_data_end+0xfffd9338>
   4b420:	d8c02417 	ldw	r3,144(sp)
   4b424:	04800044 	movi	r18,1
   4b428:	8821883a 	mov	r16,r17
   4b42c:	18800017 	ldw	r2,0(r3)
   4b430:	18c00104 	addi	r3,r3,4
   4b434:	b811883a 	mov	r8,r23
   4b438:	d8001d85 	stb	zero,118(sp)
   4b43c:	d8801005 	stb	r2,64(sp)
   4b440:	d8c02415 	stw	r3,144(sp)
   4b444:	9029883a 	mov	r20,r18
   4b448:	dc401004 	addi	r17,sp,64
   4b44c:	d8002015 	stw	zero,128(sp)
   4b450:	80c0008c 	andi	r3,r16,2
   4b454:	d8c02115 	stw	r3,132(sp)
   4b458:	18000126 	beq	r3,zero,4b460 <___svfiprintf_internal_r+0x5b8>
   4b45c:	94800084 	addi	r18,r18,2
   4b460:	80c0210c 	andi	r3,r16,132
   4b464:	d8c02215 	stw	r3,136(sp)
   4b468:	1801321e 	bne	r3,zero,4b934 <___svfiprintf_internal_r+0xa8c>
   4b46c:	d9002517 	ldw	r4,148(sp)
   4b470:	24b9c83a 	sub	fp,r4,r18
   4b474:	07012f0e 	bge	zero,fp,4b934 <___svfiprintf_internal_r+0xa8c>
   4b478:	02400404 	movi	r9,16
   4b47c:	d8c01c17 	ldw	r3,112(sp)
   4b480:	d8801b17 	ldw	r2,108(sp)
   4b484:	4f03250e 	bge	r9,fp,4c11c <___svfiprintf_internal_r+0x1274>
   4b488:	01000174 	movhi	r4,5
   4b48c:	21184a04 	addi	r4,r4,24872
   4b490:	dc002a15 	stw	r16,168(sp)
   4b494:	dc402b15 	stw	r17,172(sp)
   4b498:	d9002815 	stw	r4,160(sp)
   4b49c:	e023883a 	mov	r17,fp
   4b4a0:	482f883a 	mov	r23,r9
   4b4a4:	9839883a 	mov	fp,r19
   4b4a8:	054001c4 	movi	r21,7
   4b4ac:	9027883a 	mov	r19,r18
   4b4b0:	dc002717 	ldw	r16,156(sp)
   4b4b4:	dc802317 	ldw	r18,140(sp)
   4b4b8:	00000306 	br	4b4c8 <___svfiprintf_internal_r+0x620>
   4b4bc:	8c7ffc04 	addi	r17,r17,-16
   4b4c0:	42000204 	addi	r8,r8,8
   4b4c4:	bc40130e 	bge	r23,r17,4b514 <___svfiprintf_internal_r+0x66c>
   4b4c8:	01400174 	movhi	r5,5
   4b4cc:	18c00404 	addi	r3,r3,16
   4b4d0:	10800044 	addi	r2,r2,1
   4b4d4:	29584a04 	addi	r5,r5,24872
   4b4d8:	41400015 	stw	r5,0(r8)
   4b4dc:	45c00115 	stw	r23,4(r8)
   4b4e0:	d8c01c15 	stw	r3,112(sp)
   4b4e4:	d8801b15 	stw	r2,108(sp)
   4b4e8:	a8bff40e 	bge	r21,r2,4b4bc <__alt_data_end+0xfffd94bc>
   4b4ec:	d9801a04 	addi	r6,sp,104
   4b4f0:	900b883a 	mov	r5,r18
   4b4f4:	8009883a 	mov	r4,r16
   4b4f8:	004acd80 	call	4acd8 <__ssprint_r>
   4b4fc:	1001aa1e 	bne	r2,zero,4bba8 <___svfiprintf_internal_r+0xd00>
   4b500:	8c7ffc04 	addi	r17,r17,-16
   4b504:	d8c01c17 	ldw	r3,112(sp)
   4b508:	d8801b17 	ldw	r2,108(sp)
   4b50c:	d811883a 	mov	r8,sp
   4b510:	bc7fed16 	blt	r23,r17,4b4c8 <__alt_data_end+0xfffd94c8>
   4b514:	9825883a 	mov	r18,r19
   4b518:	dc002a17 	ldw	r16,168(sp)
   4b51c:	e027883a 	mov	r19,fp
   4b520:	8839883a 	mov	fp,r17
   4b524:	dc402b17 	ldw	r17,172(sp)
   4b528:	d9002817 	ldw	r4,160(sp)
   4b52c:	e0c7883a 	add	r3,fp,r3
   4b530:	10800044 	addi	r2,r2,1
   4b534:	41000015 	stw	r4,0(r8)
   4b538:	47000115 	stw	fp,4(r8)
   4b53c:	d8c01c15 	stw	r3,112(sp)
   4b540:	d8801b15 	stw	r2,108(sp)
   4b544:	010001c4 	movi	r4,7
   4b548:	20821616 	blt	r4,r2,4bda4 <___svfiprintf_internal_r+0xefc>
   4b54c:	42000204 	addi	r8,r8,8
   4b550:	0000fa06 	br	4b93c <___svfiprintf_internal_r+0xa94>
   4b554:	8821883a 	mov	r16,r17
   4b558:	dc402103 	ldbu	r17,132(sp)
   4b55c:	b811883a 	mov	r8,r23
   4b560:	8c403fcc 	andi	r17,r17,255
   4b564:	8803361e 	bne	r17,zero,4c240 <___svfiprintf_internal_r+0x1398>
   4b568:	01400174 	movhi	r5,5
   4b56c:	2957d804 	addi	r5,r5,24416
   4b570:	d9402915 	stw	r5,164(sp)
   4b574:	8080080c 	andi	r2,r16,32
   4b578:	103f331e 	bne	r2,zero,4b248 <__alt_data_end+0xfffd9248>
   4b57c:	8080040c 	andi	r2,r16,16
   4b580:	1002551e 	bne	r2,zero,4bed8 <___svfiprintf_internal_r+0x1030>
   4b584:	8080100c 	andi	r2,r16,64
   4b588:	1002a626 	beq	r2,zero,4c024 <___svfiprintf_internal_r+0x117c>
   4b58c:	d8802417 	ldw	r2,144(sp)
   4b590:	0029883a 	mov	r20,zero
   4b594:	1480000b 	ldhu	r18,0(r2)
   4b598:	10800104 	addi	r2,r2,4
   4b59c:	d8802415 	stw	r2,144(sp)
   4b5a0:	003f2e06 	br	4b25c <__alt_data_end+0xfffd925c>
   4b5a4:	8821883a 	mov	r16,r17
   4b5a8:	dc402103 	ldbu	r17,132(sp)
   4b5ac:	b811883a 	mov	r8,r23
   4b5b0:	8c403fcc 	andi	r17,r17,255
   4b5b4:	88030b1e 	bne	r17,zero,4c1e4 <___svfiprintf_internal_r+0x133c>
   4b5b8:	8080080c 	andi	r2,r16,32
   4b5bc:	1002271e 	bne	r2,zero,4be5c <___svfiprintf_internal_r+0xfb4>
   4b5c0:	8080040c 	andi	r2,r16,16
   4b5c4:	10028e26 	beq	r2,zero,4c000 <___svfiprintf_internal_r+0x1158>
   4b5c8:	d8c02417 	ldw	r3,144(sp)
   4b5cc:	d9002617 	ldw	r4,152(sp)
   4b5d0:	18800017 	ldw	r2,0(r3)
   4b5d4:	18c00104 	addi	r3,r3,4
   4b5d8:	d8c02415 	stw	r3,144(sp)
   4b5dc:	11000015 	stw	r4,0(r2)
   4b5e0:	003e5306 	br	4af30 <__alt_data_end+0xfffd8f30>
   4b5e4:	98c00007 	ldb	r3,0(r19)
   4b5e8:	01401b04 	movi	r5,108
   4b5ec:	19424f26 	beq	r3,r5,4bf2c <___svfiprintf_internal_r+0x1084>
   4b5f0:	8c400414 	ori	r17,r17,16
   4b5f4:	003e7806 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b5f8:	8c401014 	ori	r17,r17,64
   4b5fc:	98c00007 	ldb	r3,0(r19)
   4b600:	003e7506 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b604:	8821883a 	mov	r16,r17
   4b608:	dc402103 	ldbu	r17,132(sp)
   4b60c:	b811883a 	mov	r8,r23
   4b610:	8c403fcc 	andi	r17,r17,255
   4b614:	8802fe1e 	bne	r17,zero,4c210 <___svfiprintf_internal_r+0x1368>
   4b618:	8080080c 	andi	r2,r16,32
   4b61c:	10004626 	beq	r2,zero,4b738 <___svfiprintf_internal_r+0x890>
   4b620:	d9002417 	ldw	r4,144(sp)
   4b624:	20800117 	ldw	r2,4(r4)
   4b628:	24800017 	ldw	r18,0(r4)
   4b62c:	21000204 	addi	r4,r4,8
   4b630:	d9002415 	stw	r4,144(sp)
   4b634:	1029883a 	mov	r20,r2
   4b638:	10004a16 	blt	r2,zero,4b764 <___svfiprintf_internal_r+0x8bc>
   4b63c:	d9002017 	ldw	r4,128(sp)
   4b640:	dd401d83 	ldbu	r21,118(sp)
   4b644:	2001eb16 	blt	r4,zero,4bdf4 <___svfiprintf_internal_r+0xf4c>
   4b648:	00ffdfc4 	movi	r3,-129
   4b64c:	9504b03a 	or	r2,r18,r20
   4b650:	80e0703a 	and	r16,r16,r3
   4b654:	103f3326 	beq	r2,zero,4b324 <__alt_data_end+0xfffd9324>
   4b658:	a0009426 	beq	r20,zero,4b8ac <___svfiprintf_internal_r+0xa04>
   4b65c:	dc401a04 	addi	r17,sp,104
   4b660:	402f883a 	mov	r23,r8
   4b664:	9009883a 	mov	r4,r18
   4b668:	a00b883a 	mov	r5,r20
   4b66c:	01800284 	movi	r6,10
   4b670:	000f883a 	mov	r7,zero
   4b674:	004e8880 	call	4e888 <__umoddi3>
   4b678:	10800c04 	addi	r2,r2,48
   4b67c:	8c7fffc4 	addi	r17,r17,-1
   4b680:	9009883a 	mov	r4,r18
   4b684:	a00b883a 	mov	r5,r20
   4b688:	88800005 	stb	r2,0(r17)
   4b68c:	01800284 	movi	r6,10
   4b690:	000f883a 	mov	r7,zero
   4b694:	004e28c0 	call	4e28c <__udivdi3>
   4b698:	1025883a 	mov	r18,r2
   4b69c:	10c4b03a 	or	r2,r2,r3
   4b6a0:	1829883a 	mov	r20,r3
   4b6a4:	103fef1e 	bne	r2,zero,4b664 <__alt_data_end+0xfffd9664>
   4b6a8:	d9001e17 	ldw	r4,120(sp)
   4b6ac:	b811883a 	mov	r8,r23
   4b6b0:	2469c83a 	sub	r20,r4,r17
   4b6b4:	003f2006 	br	4b338 <__alt_data_end+0xfffd9338>
   4b6b8:	d8802417 	ldw	r2,144(sp)
   4b6bc:	8821883a 	mov	r16,r17
   4b6c0:	d8001d85 	stb	zero,118(sp)
   4b6c4:	14400017 	ldw	r17,0(r2)
   4b6c8:	b811883a 	mov	r8,r23
   4b6cc:	15c00104 	addi	r23,r2,4
   4b6d0:	88026c26 	beq	r17,zero,4c084 <___svfiprintf_internal_r+0x11dc>
   4b6d4:	d8c02017 	ldw	r3,128(sp)
   4b6d8:	18025f16 	blt	r3,zero,4c058 <___svfiprintf_internal_r+0x11b0>
   4b6dc:	180d883a 	mov	r6,r3
   4b6e0:	000b883a 	mov	r5,zero
   4b6e4:	8809883a 	mov	r4,r17
   4b6e8:	da002d15 	stw	r8,180(sp)
   4b6ec:	0048dc40 	call	48dc4 <memchr>
   4b6f0:	da002d17 	ldw	r8,180(sp)
   4b6f4:	1002a526 	beq	r2,zero,4c18c <___svfiprintf_internal_r+0x12e4>
   4b6f8:	1469c83a 	sub	r20,r2,r17
   4b6fc:	dd401d83 	ldbu	r21,118(sp)
   4b700:	ddc02415 	stw	r23,144(sp)
   4b704:	d8002015 	stw	zero,128(sp)
   4b708:	003f0b06 	br	4b338 <__alt_data_end+0xfffd9338>
   4b70c:	8c400814 	ori	r17,r17,32
   4b710:	98c00007 	ldb	r3,0(r19)
   4b714:	003e3006 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b718:	8821883a 	mov	r16,r17
   4b71c:	dc402103 	ldbu	r17,132(sp)
   4b720:	b811883a 	mov	r8,r23
   4b724:	8c403fcc 	andi	r17,r17,255
   4b728:	8802b01e 	bne	r17,zero,4c1ec <___svfiprintf_internal_r+0x1344>
   4b72c:	84000414 	ori	r16,r16,16
   4b730:	8080080c 	andi	r2,r16,32
   4b734:	103fba1e 	bne	r2,zero,4b620 <__alt_data_end+0xfffd9620>
   4b738:	8080040c 	andi	r2,r16,16
   4b73c:	1001df1e 	bne	r2,zero,4bebc <___svfiprintf_internal_r+0x1014>
   4b740:	8080100c 	andi	r2,r16,64
   4b744:	10023d26 	beq	r2,zero,4c03c <___svfiprintf_internal_r+0x1194>
   4b748:	d8802417 	ldw	r2,144(sp)
   4b74c:	1480000f 	ldh	r18,0(r2)
   4b750:	10800104 	addi	r2,r2,4
   4b754:	d8802415 	stw	r2,144(sp)
   4b758:	9029d7fa 	srai	r20,r18,31
   4b75c:	a005883a 	mov	r2,r20
   4b760:	103fb60e 	bge	r2,zero,4b63c <__alt_data_end+0xfffd963c>
   4b764:	d9402017 	ldw	r5,128(sp)
   4b768:	04a5c83a 	sub	r18,zero,r18
   4b76c:	05400b44 	movi	r21,45
   4b770:	9004c03a 	cmpne	r2,r18,zero
   4b774:	0529c83a 	sub	r20,zero,r20
   4b778:	dd401d85 	stb	r21,118(sp)
   4b77c:	a0a9c83a 	sub	r20,r20,r2
   4b780:	28026c16 	blt	r5,zero,4c134 <___svfiprintf_internal_r+0x128c>
   4b784:	00bfdfc4 	movi	r2,-129
   4b788:	80a0703a 	and	r16,r16,r2
   4b78c:	a03fb31e 	bne	r20,zero,4b65c <__alt_data_end+0xfffd965c>
   4b790:	00004606 	br	4b8ac <___svfiprintf_internal_r+0xa04>
   4b794:	9839883a 	mov	fp,r19
   4b798:	d8002515 	stw	zero,148(sp)
   4b79c:	1c3ff404 	addi	r16,r3,-48
   4b7a0:	0009883a 	mov	r4,zero
   4b7a4:	01400284 	movi	r5,10
   4b7a8:	0040eec0 	call	40eec <__mulsi3>
   4b7ac:	e0c00007 	ldb	r3,0(fp)
   4b7b0:	8089883a 	add	r4,r16,r2
   4b7b4:	9cc00044 	addi	r19,r19,1
   4b7b8:	1c3ff404 	addi	r16,r3,-48
   4b7bc:	9839883a 	mov	fp,r19
   4b7c0:	a43ff82e 	bgeu	r20,r16,4b7a4 <__alt_data_end+0xfffd97a4>
   4b7c4:	d9002515 	stw	r4,148(sp)
   4b7c8:	18bff804 	addi	r2,r3,-32
   4b7cc:	90be052e 	bgeu	r18,r2,4afe4 <__alt_data_end+0xfffd8fe4>
   4b7d0:	8821883a 	mov	r16,r17
   4b7d4:	dc402103 	ldbu	r17,132(sp)
   4b7d8:	b811883a 	mov	r8,r23
   4b7dc:	8c403fcc 	andi	r17,r17,255
   4b7e0:	88028d1e 	bne	r17,zero,4c218 <___svfiprintf_internal_r+0x1370>
   4b7e4:	1800ea26 	beq	r3,zero,4bb90 <___svfiprintf_internal_r+0xce8>
   4b7e8:	04800044 	movi	r18,1
   4b7ec:	d8c01005 	stb	r3,64(sp)
   4b7f0:	d8001d85 	stb	zero,118(sp)
   4b7f4:	9029883a 	mov	r20,r18
   4b7f8:	dc401004 	addi	r17,sp,64
   4b7fc:	003f1306 	br	4b44c <__alt_data_end+0xfffd944c>
   4b800:	8c402014 	ori	r17,r17,128
   4b804:	98c00007 	ldb	r3,0(r19)
   4b808:	003df306 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4b80c:	98c00007 	ldb	r3,0(r19)
   4b810:	01000a84 	movi	r4,42
   4b814:	9f000044 	addi	fp,r19,1
   4b818:	19026326 	beq	r3,r4,4c1a8 <___svfiprintf_internal_r+0x1300>
   4b81c:	1c3ff404 	addi	r16,r3,-48
   4b820:	0009883a 	mov	r4,zero
   4b824:	a4025636 	bltu	r20,r16,4c180 <___svfiprintf_internal_r+0x12d8>
   4b828:	01400284 	movi	r5,10
   4b82c:	0040eec0 	call	40eec <__mulsi3>
   4b830:	e0c00007 	ldb	r3,0(fp)
   4b834:	1409883a 	add	r4,r2,r16
   4b838:	e4c00044 	addi	r19,fp,1
   4b83c:	1c3ff404 	addi	r16,r3,-48
   4b840:	9839883a 	mov	fp,r19
   4b844:	a43ff82e 	bgeu	r20,r16,4b828 <__alt_data_end+0xfffd9828>
   4b848:	20020c16 	blt	r4,zero,4c07c <___svfiprintf_internal_r+0x11d4>
   4b84c:	d9002015 	stw	r4,128(sp)
   4b850:	003de206 	br	4afdc <__alt_data_end+0xfffd8fdc>
   4b854:	8821883a 	mov	r16,r17
   4b858:	dc402103 	ldbu	r17,132(sp)
   4b85c:	b811883a 	mov	r8,r23
   4b860:	8c403fcc 	andi	r17,r17,255
   4b864:	8802721e 	bne	r17,zero,4c230 <___svfiprintf_internal_r+0x1388>
   4b868:	84000414 	ori	r16,r16,16
   4b86c:	8080080c 	andi	r2,r16,32
   4b870:	103e9f1e 	bne	r2,zero,4b2f0 <__alt_data_end+0xfffd92f0>
   4b874:	8080040c 	andi	r2,r16,16
   4b878:	10015326 	beq	r2,zero,4bdc8 <___svfiprintf_internal_r+0xf20>
   4b87c:	d8c02417 	ldw	r3,144(sp)
   4b880:	d9002017 	ldw	r4,128(sp)
   4b884:	d8001d85 	stb	zero,118(sp)
   4b888:	18800104 	addi	r2,r3,4
   4b88c:	1c800017 	ldw	r18,0(r3)
   4b890:	0029883a 	mov	r20,zero
   4b894:	20015516 	blt	r4,zero,4bdec <___svfiprintf_internal_r+0xf44>
   4b898:	00ffdfc4 	movi	r3,-129
   4b89c:	d8802415 	stw	r2,144(sp)
   4b8a0:	80e0703a 	and	r16,r16,r3
   4b8a4:	002b883a 	mov	r21,zero
   4b8a8:	903e9e26 	beq	r18,zero,4b324 <__alt_data_end+0xfffd9324>
   4b8ac:	00800244 	movi	r2,9
   4b8b0:	14bf6a36 	bltu	r2,r18,4b65c <__alt_data_end+0xfffd965c>
   4b8b4:	94800c04 	addi	r18,r18,48
   4b8b8:	dc8019c5 	stb	r18,103(sp)
   4b8bc:	dd002c17 	ldw	r20,176(sp)
   4b8c0:	dc4019c4 	addi	r17,sp,103
   4b8c4:	003e9c06 	br	4b338 <__alt_data_end+0xfffd9338>
   4b8c8:	8821883a 	mov	r16,r17
   4b8cc:	dc402103 	ldbu	r17,132(sp)
   4b8d0:	b811883a 	mov	r8,r23
   4b8d4:	8c403fcc 	andi	r17,r17,255
   4b8d8:	8802571e 	bne	r17,zero,4c238 <___svfiprintf_internal_r+0x1390>
   4b8dc:	84000414 	ori	r16,r16,16
   4b8e0:	8080080c 	andi	r2,r16,32
   4b8e4:	103ea91e 	bne	r2,zero,4b38c <__alt_data_end+0xfffd938c>
   4b8e8:	8080040c 	andi	r2,r16,16
   4b8ec:	10018026 	beq	r2,zero,4bef0 <___svfiprintf_internal_r+0x1048>
   4b8f0:	d9402417 	ldw	r5,144(sp)
   4b8f4:	d8c02017 	ldw	r3,128(sp)
   4b8f8:	d8001d85 	stb	zero,118(sp)
   4b8fc:	28800104 	addi	r2,r5,4
   4b900:	2c800017 	ldw	r18,0(r5)
   4b904:	0029883a 	mov	r20,zero
   4b908:	18018216 	blt	r3,zero,4bf14 <___svfiprintf_internal_r+0x106c>
   4b90c:	00ffdfc4 	movi	r3,-129
   4b910:	d8802415 	stw	r2,144(sp)
   4b914:	80e0703a 	and	r16,r16,r3
   4b918:	903ea81e 	bne	r18,zero,4b3bc <__alt_data_end+0xfffd93bc>
   4b91c:	d8802017 	ldw	r2,128(sp)
   4b920:	002b883a 	mov	r21,zero
   4b924:	1001f226 	beq	r2,zero,4c0f0 <___svfiprintf_internal_r+0x1248>
   4b928:	0025883a 	mov	r18,zero
   4b92c:	0029883a 	mov	r20,zero
   4b930:	003ea306 	br	4b3c0 <__alt_data_end+0xfffd93c0>
   4b934:	d8c01c17 	ldw	r3,112(sp)
   4b938:	d8801b17 	ldw	r2,108(sp)
   4b93c:	d9001d87 	ldb	r4,118(sp)
   4b940:	20000b26 	beq	r4,zero,4b970 <___svfiprintf_internal_r+0xac8>
   4b944:	d9001d84 	addi	r4,sp,118
   4b948:	18c00044 	addi	r3,r3,1
   4b94c:	10800044 	addi	r2,r2,1
   4b950:	41000015 	stw	r4,0(r8)
   4b954:	01000044 	movi	r4,1
   4b958:	41000115 	stw	r4,4(r8)
   4b95c:	d8c01c15 	stw	r3,112(sp)
   4b960:	d8801b15 	stw	r2,108(sp)
   4b964:	010001c4 	movi	r4,7
   4b968:	2080f316 	blt	r4,r2,4bd38 <___svfiprintf_internal_r+0xe90>
   4b96c:	42000204 	addi	r8,r8,8
   4b970:	d9402117 	ldw	r5,132(sp)
   4b974:	28000b26 	beq	r5,zero,4b9a4 <___svfiprintf_internal_r+0xafc>
   4b978:	d9001d04 	addi	r4,sp,116
   4b97c:	18c00084 	addi	r3,r3,2
   4b980:	10800044 	addi	r2,r2,1
   4b984:	41000015 	stw	r4,0(r8)
   4b988:	01000084 	movi	r4,2
   4b98c:	41000115 	stw	r4,4(r8)
   4b990:	d8c01c15 	stw	r3,112(sp)
   4b994:	d8801b15 	stw	r2,108(sp)
   4b998:	010001c4 	movi	r4,7
   4b99c:	2080ef16 	blt	r4,r2,4bd5c <___svfiprintf_internal_r+0xeb4>
   4b9a0:	42000204 	addi	r8,r8,8
   4b9a4:	d9402217 	ldw	r5,136(sp)
   4b9a8:	01002004 	movi	r4,128
   4b9ac:	29008f26 	beq	r5,r4,4bbec <___svfiprintf_internal_r+0xd44>
   4b9b0:	d9002017 	ldw	r4,128(sp)
   4b9b4:	252fc83a 	sub	r23,r4,r20
   4b9b8:	05c0310e 	bge	zero,r23,4ba80 <___svfiprintf_internal_r+0xbd8>
   4b9bc:	07000404 	movi	fp,16
   4b9c0:	e5c17d0e 	bge	fp,r23,4bfb8 <___svfiprintf_internal_r+0x1110>
   4b9c4:	01000174 	movhi	r4,5
   4b9c8:	21184604 	addi	r4,r4,24856
   4b9cc:	dc002015 	stw	r16,128(sp)
   4b9d0:	dc402215 	stw	r17,136(sp)
   4b9d4:	d9002115 	stw	r4,132(sp)
   4b9d8:	b823883a 	mov	r17,r23
   4b9dc:	054001c4 	movi	r21,7
   4b9e0:	982f883a 	mov	r23,r19
   4b9e4:	dc002717 	ldw	r16,156(sp)
   4b9e8:	9027883a 	mov	r19,r18
   4b9ec:	dc802317 	ldw	r18,140(sp)
   4b9f0:	00000306 	br	4ba00 <___svfiprintf_internal_r+0xb58>
   4b9f4:	8c7ffc04 	addi	r17,r17,-16
   4b9f8:	42000204 	addi	r8,r8,8
   4b9fc:	e440110e 	bge	fp,r17,4ba44 <___svfiprintf_internal_r+0xb9c>
   4ba00:	18c00404 	addi	r3,r3,16
   4ba04:	10800044 	addi	r2,r2,1
   4ba08:	45800015 	stw	r22,0(r8)
   4ba0c:	47000115 	stw	fp,4(r8)
   4ba10:	d8c01c15 	stw	r3,112(sp)
   4ba14:	d8801b15 	stw	r2,108(sp)
   4ba18:	a8bff60e 	bge	r21,r2,4b9f4 <__alt_data_end+0xfffd99f4>
   4ba1c:	d9801a04 	addi	r6,sp,104
   4ba20:	900b883a 	mov	r5,r18
   4ba24:	8009883a 	mov	r4,r16
   4ba28:	004acd80 	call	4acd8 <__ssprint_r>
   4ba2c:	10005e1e 	bne	r2,zero,4bba8 <___svfiprintf_internal_r+0xd00>
   4ba30:	8c7ffc04 	addi	r17,r17,-16
   4ba34:	d8c01c17 	ldw	r3,112(sp)
   4ba38:	d8801b17 	ldw	r2,108(sp)
   4ba3c:	d811883a 	mov	r8,sp
   4ba40:	e47fef16 	blt	fp,r17,4ba00 <__alt_data_end+0xfffd9a00>
   4ba44:	9825883a 	mov	r18,r19
   4ba48:	dc002017 	ldw	r16,128(sp)
   4ba4c:	b827883a 	mov	r19,r23
   4ba50:	882f883a 	mov	r23,r17
   4ba54:	dc402217 	ldw	r17,136(sp)
   4ba58:	d9402117 	ldw	r5,132(sp)
   4ba5c:	1dc7883a 	add	r3,r3,r23
   4ba60:	10800044 	addi	r2,r2,1
   4ba64:	41400015 	stw	r5,0(r8)
   4ba68:	45c00115 	stw	r23,4(r8)
   4ba6c:	d8c01c15 	stw	r3,112(sp)
   4ba70:	d8801b15 	stw	r2,108(sp)
   4ba74:	010001c4 	movi	r4,7
   4ba78:	2080a616 	blt	r4,r2,4bd14 <___svfiprintf_internal_r+0xe6c>
   4ba7c:	42000204 	addi	r8,r8,8
   4ba80:	a0c7883a 	add	r3,r20,r3
   4ba84:	10800044 	addi	r2,r2,1
   4ba88:	44400015 	stw	r17,0(r8)
   4ba8c:	45000115 	stw	r20,4(r8)
   4ba90:	d8c01c15 	stw	r3,112(sp)
   4ba94:	d8801b15 	stw	r2,108(sp)
   4ba98:	010001c4 	movi	r4,7
   4ba9c:	20808816 	blt	r4,r2,4bcc0 <___svfiprintf_internal_r+0xe18>
   4baa0:	42000204 	addi	r8,r8,8
   4baa4:	8400010c 	andi	r16,r16,4
   4baa8:	80002c26 	beq	r16,zero,4bb5c <___svfiprintf_internal_r+0xcb4>
   4baac:	d8802517 	ldw	r2,148(sp)
   4bab0:	14a1c83a 	sub	r16,r2,r18
   4bab4:	0400290e 	bge	zero,r16,4bb5c <___svfiprintf_internal_r+0xcb4>
   4bab8:	04400404 	movi	r17,16
   4babc:	d8801b17 	ldw	r2,108(sp)
   4bac0:	8c01a70e 	bge	r17,r16,4c160 <___svfiprintf_internal_r+0x12b8>
   4bac4:	01400174 	movhi	r5,5
   4bac8:	29584a04 	addi	r5,r5,24872
   4bacc:	d9402815 	stw	r5,160(sp)
   4bad0:	050001c4 	movi	r20,7
   4bad4:	dd402717 	ldw	r21,156(sp)
   4bad8:	ddc02317 	ldw	r23,140(sp)
   4badc:	00000306 	br	4baec <___svfiprintf_internal_r+0xc44>
   4bae0:	843ffc04 	addi	r16,r16,-16
   4bae4:	42000204 	addi	r8,r8,8
   4bae8:	8c00130e 	bge	r17,r16,4bb38 <___svfiprintf_internal_r+0xc90>
   4baec:	01000174 	movhi	r4,5
   4baf0:	18c00404 	addi	r3,r3,16
   4baf4:	10800044 	addi	r2,r2,1
   4baf8:	21184a04 	addi	r4,r4,24872
   4bafc:	41000015 	stw	r4,0(r8)
   4bb00:	44400115 	stw	r17,4(r8)
   4bb04:	d8c01c15 	stw	r3,112(sp)
   4bb08:	d8801b15 	stw	r2,108(sp)
   4bb0c:	a0bff40e 	bge	r20,r2,4bae0 <__alt_data_end+0xfffd9ae0>
   4bb10:	d9801a04 	addi	r6,sp,104
   4bb14:	b80b883a 	mov	r5,r23
   4bb18:	a809883a 	mov	r4,r21
   4bb1c:	004acd80 	call	4acd8 <__ssprint_r>
   4bb20:	1000211e 	bne	r2,zero,4bba8 <___svfiprintf_internal_r+0xd00>
   4bb24:	843ffc04 	addi	r16,r16,-16
   4bb28:	d8c01c17 	ldw	r3,112(sp)
   4bb2c:	d8801b17 	ldw	r2,108(sp)
   4bb30:	d811883a 	mov	r8,sp
   4bb34:	8c3fed16 	blt	r17,r16,4baec <__alt_data_end+0xfffd9aec>
   4bb38:	d9402817 	ldw	r5,160(sp)
   4bb3c:	1c07883a 	add	r3,r3,r16
   4bb40:	10800044 	addi	r2,r2,1
   4bb44:	41400015 	stw	r5,0(r8)
   4bb48:	44000115 	stw	r16,4(r8)
   4bb4c:	d8c01c15 	stw	r3,112(sp)
   4bb50:	d8801b15 	stw	r2,108(sp)
   4bb54:	010001c4 	movi	r4,7
   4bb58:	2080b516 	blt	r4,r2,4be30 <___svfiprintf_internal_r+0xf88>
   4bb5c:	d8802517 	ldw	r2,148(sp)
   4bb60:	1480010e 	bge	r2,r18,4bb68 <___svfiprintf_internal_r+0xcc0>
   4bb64:	9005883a 	mov	r2,r18
   4bb68:	d9002617 	ldw	r4,152(sp)
   4bb6c:	2089883a 	add	r4,r4,r2
   4bb70:	d9002615 	stw	r4,152(sp)
   4bb74:	18005a1e 	bne	r3,zero,4bce0 <___svfiprintf_internal_r+0xe38>
   4bb78:	98800007 	ldb	r2,0(r19)
   4bb7c:	d8001b15 	stw	zero,108(sp)
   4bb80:	d811883a 	mov	r8,sp
   4bb84:	103cec1e 	bne	r2,zero,4af38 <__alt_data_end+0xfffd8f38>
   4bb88:	9825883a 	mov	r18,r19
   4bb8c:	003d0206 	br	4af98 <__alt_data_end+0xfffd8f98>
   4bb90:	d8801c17 	ldw	r2,112(sp)
   4bb94:	10000426 	beq	r2,zero,4bba8 <___svfiprintf_internal_r+0xd00>
   4bb98:	d9402317 	ldw	r5,140(sp)
   4bb9c:	d9002717 	ldw	r4,156(sp)
   4bba0:	d9801a04 	addi	r6,sp,104
   4bba4:	004acd80 	call	4acd8 <__ssprint_r>
   4bba8:	d9402317 	ldw	r5,140(sp)
   4bbac:	d8802617 	ldw	r2,152(sp)
   4bbb0:	28c0030b 	ldhu	r3,12(r5)
   4bbb4:	18c0100c 	andi	r3,r3,64
   4bbb8:	18015c1e 	bne	r3,zero,4c12c <___svfiprintf_internal_r+0x1284>
   4bbbc:	dfc03717 	ldw	ra,220(sp)
   4bbc0:	df003617 	ldw	fp,216(sp)
   4bbc4:	ddc03517 	ldw	r23,212(sp)
   4bbc8:	dd803417 	ldw	r22,208(sp)
   4bbcc:	dd403317 	ldw	r21,204(sp)
   4bbd0:	dd003217 	ldw	r20,200(sp)
   4bbd4:	dcc03117 	ldw	r19,196(sp)
   4bbd8:	dc803017 	ldw	r18,192(sp)
   4bbdc:	dc402f17 	ldw	r17,188(sp)
   4bbe0:	dc002e17 	ldw	r16,184(sp)
   4bbe4:	dec03804 	addi	sp,sp,224
   4bbe8:	f800283a 	ret
   4bbec:	d9002517 	ldw	r4,148(sp)
   4bbf0:	24afc83a 	sub	r23,r4,r18
   4bbf4:	05ff6e0e 	bge	zero,r23,4b9b0 <__alt_data_end+0xfffd99b0>
   4bbf8:	07000404 	movi	fp,16
   4bbfc:	e5c15c0e 	bge	fp,r23,4c170 <___svfiprintf_internal_r+0x12c8>
   4bc00:	01000174 	movhi	r4,5
   4bc04:	21184604 	addi	r4,r4,24856
   4bc08:	dc002215 	stw	r16,136(sp)
   4bc0c:	dc402815 	stw	r17,160(sp)
   4bc10:	d9002115 	stw	r4,132(sp)
   4bc14:	b823883a 	mov	r17,r23
   4bc18:	054001c4 	movi	r21,7
   4bc1c:	982f883a 	mov	r23,r19
   4bc20:	dc002717 	ldw	r16,156(sp)
   4bc24:	9027883a 	mov	r19,r18
   4bc28:	dc802317 	ldw	r18,140(sp)
   4bc2c:	00000306 	br	4bc3c <___svfiprintf_internal_r+0xd94>
   4bc30:	8c7ffc04 	addi	r17,r17,-16
   4bc34:	42000204 	addi	r8,r8,8
   4bc38:	e440110e 	bge	fp,r17,4bc80 <___svfiprintf_internal_r+0xdd8>
   4bc3c:	18c00404 	addi	r3,r3,16
   4bc40:	10800044 	addi	r2,r2,1
   4bc44:	45800015 	stw	r22,0(r8)
   4bc48:	47000115 	stw	fp,4(r8)
   4bc4c:	d8c01c15 	stw	r3,112(sp)
   4bc50:	d8801b15 	stw	r2,108(sp)
   4bc54:	a8bff60e 	bge	r21,r2,4bc30 <__alt_data_end+0xfffd9c30>
   4bc58:	d9801a04 	addi	r6,sp,104
   4bc5c:	900b883a 	mov	r5,r18
   4bc60:	8009883a 	mov	r4,r16
   4bc64:	004acd80 	call	4acd8 <__ssprint_r>
   4bc68:	103fcf1e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bc6c:	8c7ffc04 	addi	r17,r17,-16
   4bc70:	d8c01c17 	ldw	r3,112(sp)
   4bc74:	d8801b17 	ldw	r2,108(sp)
   4bc78:	d811883a 	mov	r8,sp
   4bc7c:	e47fef16 	blt	fp,r17,4bc3c <__alt_data_end+0xfffd9c3c>
   4bc80:	9825883a 	mov	r18,r19
   4bc84:	dc002217 	ldw	r16,136(sp)
   4bc88:	b827883a 	mov	r19,r23
   4bc8c:	882f883a 	mov	r23,r17
   4bc90:	dc402817 	ldw	r17,160(sp)
   4bc94:	d9402117 	ldw	r5,132(sp)
   4bc98:	1dc7883a 	add	r3,r3,r23
   4bc9c:	10800044 	addi	r2,r2,1
   4bca0:	41400015 	stw	r5,0(r8)
   4bca4:	45c00115 	stw	r23,4(r8)
   4bca8:	d8c01c15 	stw	r3,112(sp)
   4bcac:	d8801b15 	stw	r2,108(sp)
   4bcb0:	010001c4 	movi	r4,7
   4bcb4:	2080b716 	blt	r4,r2,4bf94 <___svfiprintf_internal_r+0x10ec>
   4bcb8:	42000204 	addi	r8,r8,8
   4bcbc:	003f3c06 	br	4b9b0 <__alt_data_end+0xfffd99b0>
   4bcc0:	d9402317 	ldw	r5,140(sp)
   4bcc4:	d9002717 	ldw	r4,156(sp)
   4bcc8:	d9801a04 	addi	r6,sp,104
   4bccc:	004acd80 	call	4acd8 <__ssprint_r>
   4bcd0:	103fb51e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bcd4:	d8c01c17 	ldw	r3,112(sp)
   4bcd8:	d811883a 	mov	r8,sp
   4bcdc:	003f7106 	br	4baa4 <__alt_data_end+0xfffd9aa4>
   4bce0:	d9402317 	ldw	r5,140(sp)
   4bce4:	d9002717 	ldw	r4,156(sp)
   4bce8:	d9801a04 	addi	r6,sp,104
   4bcec:	004acd80 	call	4acd8 <__ssprint_r>
   4bcf0:	103fa126 	beq	r2,zero,4bb78 <__alt_data_end+0xfffd9b78>
   4bcf4:	003fac06 	br	4bba8 <__alt_data_end+0xfffd9ba8>
   4bcf8:	d9402317 	ldw	r5,140(sp)
   4bcfc:	d9002717 	ldw	r4,156(sp)
   4bd00:	d9801a04 	addi	r6,sp,104
   4bd04:	004acd80 	call	4acd8 <__ssprint_r>
   4bd08:	103fa71e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bd0c:	d811883a 	mov	r8,sp
   4bd10:	003c9e06 	br	4af8c <__alt_data_end+0xfffd8f8c>
   4bd14:	d9402317 	ldw	r5,140(sp)
   4bd18:	d9002717 	ldw	r4,156(sp)
   4bd1c:	d9801a04 	addi	r6,sp,104
   4bd20:	004acd80 	call	4acd8 <__ssprint_r>
   4bd24:	103fa01e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bd28:	d8c01c17 	ldw	r3,112(sp)
   4bd2c:	d8801b17 	ldw	r2,108(sp)
   4bd30:	d811883a 	mov	r8,sp
   4bd34:	003f5206 	br	4ba80 <__alt_data_end+0xfffd9a80>
   4bd38:	d9402317 	ldw	r5,140(sp)
   4bd3c:	d9002717 	ldw	r4,156(sp)
   4bd40:	d9801a04 	addi	r6,sp,104
   4bd44:	004acd80 	call	4acd8 <__ssprint_r>
   4bd48:	103f971e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bd4c:	d8c01c17 	ldw	r3,112(sp)
   4bd50:	d8801b17 	ldw	r2,108(sp)
   4bd54:	d811883a 	mov	r8,sp
   4bd58:	003f0506 	br	4b970 <__alt_data_end+0xfffd9970>
   4bd5c:	d9402317 	ldw	r5,140(sp)
   4bd60:	d9002717 	ldw	r4,156(sp)
   4bd64:	d9801a04 	addi	r6,sp,104
   4bd68:	004acd80 	call	4acd8 <__ssprint_r>
   4bd6c:	103f8e1e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bd70:	d8c01c17 	ldw	r3,112(sp)
   4bd74:	d8801b17 	ldw	r2,108(sp)
   4bd78:	d811883a 	mov	r8,sp
   4bd7c:	003f0906 	br	4b9a4 <__alt_data_end+0xfffd99a4>
   4bd80:	d9402017 	ldw	r5,128(sp)
   4bd84:	d8001d85 	stb	zero,118(sp)
   4bd88:	28007716 	blt	r5,zero,4bf68 <___svfiprintf_internal_r+0x10c0>
   4bd8c:	00ffdfc4 	movi	r3,-129
   4bd90:	9504b03a 	or	r2,r18,r20
   4bd94:	80e0703a 	and	r16,r16,r3
   4bd98:	103d3926 	beq	r2,zero,4b280 <__alt_data_end+0xfffd9280>
   4bd9c:	002b883a 	mov	r21,zero
   4bda0:	003d3c06 	br	4b294 <__alt_data_end+0xfffd9294>
   4bda4:	d9402317 	ldw	r5,140(sp)
   4bda8:	d9002717 	ldw	r4,156(sp)
   4bdac:	d9801a04 	addi	r6,sp,104
   4bdb0:	004acd80 	call	4acd8 <__ssprint_r>
   4bdb4:	103f7c1e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bdb8:	d8c01c17 	ldw	r3,112(sp)
   4bdbc:	d8801b17 	ldw	r2,108(sp)
   4bdc0:	d811883a 	mov	r8,sp
   4bdc4:	003edd06 	br	4b93c <__alt_data_end+0xfffd993c>
   4bdc8:	8080100c 	andi	r2,r16,64
   4bdcc:	d8001d85 	stb	zero,118(sp)
   4bdd0:	10008426 	beq	r2,zero,4bfe4 <___svfiprintf_internal_r+0x113c>
   4bdd4:	d9402417 	ldw	r5,144(sp)
   4bdd8:	d8c02017 	ldw	r3,128(sp)
   4bddc:	0029883a 	mov	r20,zero
   4bde0:	28800104 	addi	r2,r5,4
   4bde4:	2c80000b 	ldhu	r18,0(r5)
   4bde8:	183eab0e 	bge	r3,zero,4b898 <__alt_data_end+0xfffd9898>
   4bdec:	d8802415 	stw	r2,144(sp)
   4bdf0:	002b883a 	mov	r21,zero
   4bdf4:	9504b03a 	or	r2,r18,r20
   4bdf8:	103e171e 	bne	r2,zero,4b658 <__alt_data_end+0xfffd9658>
   4bdfc:	00800044 	movi	r2,1
   4be00:	10803fcc 	andi	r2,r2,255
   4be04:	00c00044 	movi	r3,1
   4be08:	10c05c26 	beq	r2,r3,4bf7c <___svfiprintf_internal_r+0x10d4>
   4be0c:	00c00084 	movi	r3,2
   4be10:	10fd1e26 	beq	r2,r3,4b28c <__alt_data_end+0xfffd928c>
   4be14:	003ec406 	br	4b928 <__alt_data_end+0xfffd9928>
   4be18:	d9401e17 	ldw	r5,120(sp)
   4be1c:	2c69c83a 	sub	r20,r5,r17
   4be20:	003d4506 	br	4b338 <__alt_data_end+0xfffd9338>
   4be24:	d8802415 	stw	r2,144(sp)
   4be28:	98c00007 	ldb	r3,0(r19)
   4be2c:	003c6a06 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4be30:	d9402317 	ldw	r5,140(sp)
   4be34:	d9002717 	ldw	r4,156(sp)
   4be38:	d9801a04 	addi	r6,sp,104
   4be3c:	004acd80 	call	4acd8 <__ssprint_r>
   4be40:	103f591e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4be44:	d8c01c17 	ldw	r3,112(sp)
   4be48:	003f4406 	br	4bb5c <__alt_data_end+0xfffd9b5c>
   4be4c:	01400174 	movhi	r5,5
   4be50:	2957dd04 	addi	r5,r5,24436
   4be54:	d9402915 	stw	r5,164(sp)
   4be58:	003d0906 	br	4b280 <__alt_data_end+0xfffd9280>
   4be5c:	d8c02417 	ldw	r3,144(sp)
   4be60:	d9002617 	ldw	r4,152(sp)
   4be64:	d9402417 	ldw	r5,144(sp)
   4be68:	18800017 	ldw	r2,0(r3)
   4be6c:	2007d7fa 	srai	r3,r4,31
   4be70:	29400104 	addi	r5,r5,4
   4be74:	d9402415 	stw	r5,144(sp)
   4be78:	11000015 	stw	r4,0(r2)
   4be7c:	10c00115 	stw	r3,4(r2)
   4be80:	003c2b06 	br	4af30 <__alt_data_end+0xfffd8f30>
   4be84:	d8c01d45 	stb	r3,117(sp)
   4be88:	d8c02017 	ldw	r3,128(sp)
   4be8c:	00800c04 	movi	r2,48
   4be90:	d8801d05 	stb	r2,116(sp)
   4be94:	d8001d85 	stb	zero,118(sp)
   4be98:	80800094 	ori	r2,r16,2
   4be9c:	1800ac16 	blt	r3,zero,4c150 <___svfiprintf_internal_r+0x12a8>
   4bea0:	00bfdfc4 	movi	r2,-129
   4bea4:	80a0703a 	and	r16,r16,r2
   4bea8:	84000094 	ori	r16,r16,2
   4beac:	002b883a 	mov	r21,zero
   4beb0:	003cf806 	br	4b294 <__alt_data_end+0xfffd9294>
   4beb4:	98c00007 	ldb	r3,0(r19)
   4beb8:	003c4706 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4bebc:	d9402417 	ldw	r5,144(sp)
   4bec0:	2c800017 	ldw	r18,0(r5)
   4bec4:	29400104 	addi	r5,r5,4
   4bec8:	d9402415 	stw	r5,144(sp)
   4becc:	9029d7fa 	srai	r20,r18,31
   4bed0:	a005883a 	mov	r2,r20
   4bed4:	003dd806 	br	4b638 <__alt_data_end+0xfffd9638>
   4bed8:	d9402417 	ldw	r5,144(sp)
   4bedc:	0029883a 	mov	r20,zero
   4bee0:	2c800017 	ldw	r18,0(r5)
   4bee4:	29400104 	addi	r5,r5,4
   4bee8:	d9402415 	stw	r5,144(sp)
   4beec:	003cdb06 	br	4b25c <__alt_data_end+0xfffd925c>
   4bef0:	8080100c 	andi	r2,r16,64
   4bef4:	d8001d85 	stb	zero,118(sp)
   4bef8:	10003326 	beq	r2,zero,4bfc8 <___svfiprintf_internal_r+0x1120>
   4befc:	d9002417 	ldw	r4,144(sp)
   4bf00:	d9402017 	ldw	r5,128(sp)
   4bf04:	0029883a 	mov	r20,zero
   4bf08:	20800104 	addi	r2,r4,4
   4bf0c:	2480000b 	ldhu	r18,0(r4)
   4bf10:	283e7e0e 	bge	r5,zero,4b90c <__alt_data_end+0xfffd990c>
   4bf14:	9506b03a 	or	r3,r18,r20
   4bf18:	d8802415 	stw	r2,144(sp)
   4bf1c:	183d271e 	bne	r3,zero,4b3bc <__alt_data_end+0xfffd93bc>
   4bf20:	002b883a 	mov	r21,zero
   4bf24:	0005883a 	mov	r2,zero
   4bf28:	003fb506 	br	4be00 <__alt_data_end+0xfffd9e00>
   4bf2c:	98c00043 	ldbu	r3,1(r19)
   4bf30:	8c400814 	ori	r17,r17,32
   4bf34:	9cc00044 	addi	r19,r19,1
   4bf38:	18c03fcc 	andi	r3,r3,255
   4bf3c:	18c0201c 	xori	r3,r3,128
   4bf40:	18ffe004 	addi	r3,r3,-128
   4bf44:	003c2406 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4bf48:	d8c02415 	stw	r3,144(sp)
   4bf4c:	002b883a 	mov	r21,zero
   4bf50:	003fa806 	br	4bdf4 <__alt_data_end+0xfffd9df4>
   4bf54:	01000174 	movhi	r4,5
   4bf58:	2117dd04 	addi	r4,r4,24436
   4bf5c:	d9002915 	stw	r4,164(sp)
   4bf60:	d8c02415 	stw	r3,144(sp)
   4bf64:	1021883a 	mov	r16,r2
   4bf68:	9504b03a 	or	r2,r18,r20
   4bf6c:	103f8b1e 	bne	r2,zero,4bd9c <__alt_data_end+0xfffd9d9c>
   4bf70:	002b883a 	mov	r21,zero
   4bf74:	00800084 	movi	r2,2
   4bf78:	003fa106 	br	4be00 <__alt_data_end+0xfffd9e00>
   4bf7c:	0025883a 	mov	r18,zero
   4bf80:	94800c04 	addi	r18,r18,48
   4bf84:	dc8019c5 	stb	r18,103(sp)
   4bf88:	dd002c17 	ldw	r20,176(sp)
   4bf8c:	dc4019c4 	addi	r17,sp,103
   4bf90:	003ce906 	br	4b338 <__alt_data_end+0xfffd9338>
   4bf94:	d9402317 	ldw	r5,140(sp)
   4bf98:	d9002717 	ldw	r4,156(sp)
   4bf9c:	d9801a04 	addi	r6,sp,104
   4bfa0:	004acd80 	call	4acd8 <__ssprint_r>
   4bfa4:	103f001e 	bne	r2,zero,4bba8 <__alt_data_end+0xfffd9ba8>
   4bfa8:	d8c01c17 	ldw	r3,112(sp)
   4bfac:	d8801b17 	ldw	r2,108(sp)
   4bfb0:	d811883a 	mov	r8,sp
   4bfb4:	003e7e06 	br	4b9b0 <__alt_data_end+0xfffd99b0>
   4bfb8:	01400174 	movhi	r5,5
   4bfbc:	29584604 	addi	r5,r5,24856
   4bfc0:	d9402115 	stw	r5,132(sp)
   4bfc4:	003ea406 	br	4ba58 <__alt_data_end+0xfffd9a58>
   4bfc8:	d8c02417 	ldw	r3,144(sp)
   4bfcc:	d9002017 	ldw	r4,128(sp)
   4bfd0:	0029883a 	mov	r20,zero
   4bfd4:	18800104 	addi	r2,r3,4
   4bfd8:	1c800017 	ldw	r18,0(r3)
   4bfdc:	203e4b0e 	bge	r4,zero,4b90c <__alt_data_end+0xfffd990c>
   4bfe0:	003fcc06 	br	4bf14 <__alt_data_end+0xfffd9f14>
   4bfe4:	d9002417 	ldw	r4,144(sp)
   4bfe8:	d9402017 	ldw	r5,128(sp)
   4bfec:	0029883a 	mov	r20,zero
   4bff0:	20800104 	addi	r2,r4,4
   4bff4:	24800017 	ldw	r18,0(r4)
   4bff8:	283e270e 	bge	r5,zero,4b898 <__alt_data_end+0xfffd9898>
   4bffc:	003f7b06 	br	4bdec <__alt_data_end+0xfffd9dec>
   4c000:	8400100c 	andi	r16,r16,64
   4c004:	80003326 	beq	r16,zero,4c0d4 <___svfiprintf_internal_r+0x122c>
   4c008:	d9402417 	ldw	r5,144(sp)
   4c00c:	d8c02617 	ldw	r3,152(sp)
   4c010:	28800017 	ldw	r2,0(r5)
   4c014:	29400104 	addi	r5,r5,4
   4c018:	d9402415 	stw	r5,144(sp)
   4c01c:	10c0000d 	sth	r3,0(r2)
   4c020:	003bc306 	br	4af30 <__alt_data_end+0xfffd8f30>
   4c024:	d9002417 	ldw	r4,144(sp)
   4c028:	0029883a 	mov	r20,zero
   4c02c:	24800017 	ldw	r18,0(r4)
   4c030:	21000104 	addi	r4,r4,4
   4c034:	d9002415 	stw	r4,144(sp)
   4c038:	003c8806 	br	4b25c <__alt_data_end+0xfffd925c>
   4c03c:	d8c02417 	ldw	r3,144(sp)
   4c040:	1c800017 	ldw	r18,0(r3)
   4c044:	18c00104 	addi	r3,r3,4
   4c048:	d8c02415 	stw	r3,144(sp)
   4c04c:	9029d7fa 	srai	r20,r18,31
   4c050:	a005883a 	mov	r2,r20
   4c054:	003d7806 	br	4b638 <__alt_data_end+0xfffd9638>
   4c058:	8809883a 	mov	r4,r17
   4c05c:	da002d15 	stw	r8,180(sp)
   4c060:	00411380 	call	41138 <strlen>
   4c064:	1029883a 	mov	r20,r2
   4c068:	dd401d83 	ldbu	r21,118(sp)
   4c06c:	ddc02415 	stw	r23,144(sp)
   4c070:	d8002015 	stw	zero,128(sp)
   4c074:	da002d17 	ldw	r8,180(sp)
   4c078:	003caf06 	br	4b338 <__alt_data_end+0xfffd9338>
   4c07c:	013fffc4 	movi	r4,-1
   4c080:	003df206 	br	4b84c <__alt_data_end+0xfffd984c>
   4c084:	dd002017 	ldw	r20,128(sp)
   4c088:	00800184 	movi	r2,6
   4c08c:	1500012e 	bgeu	r2,r20,4c094 <___svfiprintf_internal_r+0x11ec>
   4c090:	1029883a 	mov	r20,r2
   4c094:	a025883a 	mov	r18,r20
   4c098:	a0004116 	blt	r20,zero,4c1a0 <___svfiprintf_internal_r+0x12f8>
   4c09c:	04400174 	movhi	r17,5
   4c0a0:	ddc02415 	stw	r23,144(sp)
   4c0a4:	8c57e204 	addi	r17,r17,24456
   4c0a8:	003ce806 	br	4b44c <__alt_data_end+0xfffd944c>
   4c0ac:	04001004 	movi	r16,64
   4c0b0:	800b883a 	mov	r5,r16
   4c0b4:	00485b80 	call	485b8 <_malloc_r>
   4c0b8:	d8c02317 	ldw	r3,140(sp)
   4c0bc:	18800015 	stw	r2,0(r3)
   4c0c0:	18800415 	stw	r2,16(r3)
   4c0c4:	10004d26 	beq	r2,zero,4c1fc <___svfiprintf_internal_r+0x1354>
   4c0c8:	d9402317 	ldw	r5,140(sp)
   4c0cc:	2c000515 	stw	r16,20(r5)
   4c0d0:	003b8906 	br	4aef8 <__alt_data_end+0xfffd8ef8>
   4c0d4:	d9002417 	ldw	r4,144(sp)
   4c0d8:	d9402617 	ldw	r5,152(sp)
   4c0dc:	20800017 	ldw	r2,0(r4)
   4c0e0:	21000104 	addi	r4,r4,4
   4c0e4:	d9002415 	stw	r4,144(sp)
   4c0e8:	11400015 	stw	r5,0(r2)
   4c0ec:	003b9006 	br	4af30 <__alt_data_end+0xfffd8f30>
   4c0f0:	8080004c 	andi	r2,r16,1
   4c0f4:	002b883a 	mov	r21,zero
   4c0f8:	10000526 	beq	r2,zero,4c110 <___svfiprintf_internal_r+0x1268>
   4c0fc:	00800c04 	movi	r2,48
   4c100:	d88019c5 	stb	r2,103(sp)
   4c104:	dd002c17 	ldw	r20,176(sp)
   4c108:	dc4019c4 	addi	r17,sp,103
   4c10c:	003c8a06 	br	4b338 <__alt_data_end+0xfffd9338>
   4c110:	0029883a 	mov	r20,zero
   4c114:	dc401a04 	addi	r17,sp,104
   4c118:	003c8706 	br	4b338 <__alt_data_end+0xfffd9338>
   4c11c:	01400174 	movhi	r5,5
   4c120:	29584a04 	addi	r5,r5,24872
   4c124:	d9402815 	stw	r5,160(sp)
   4c128:	003cff06 	br	4b528 <__alt_data_end+0xfffd9528>
   4c12c:	00bfffc4 	movi	r2,-1
   4c130:	003ea206 	br	4bbbc <__alt_data_end+0xfffd9bbc>
   4c134:	00800044 	movi	r2,1
   4c138:	10803fcc 	andi	r2,r2,255
   4c13c:	00c00044 	movi	r3,1
   4c140:	10fd4526 	beq	r2,r3,4b658 <__alt_data_end+0xfffd9658>
   4c144:	00c00084 	movi	r3,2
   4c148:	10fc5226 	beq	r2,r3,4b294 <__alt_data_end+0xfffd9294>
   4c14c:	003c9c06 	br	4b3c0 <__alt_data_end+0xfffd93c0>
   4c150:	1021883a 	mov	r16,r2
   4c154:	002b883a 	mov	r21,zero
   4c158:	00800084 	movi	r2,2
   4c15c:	003ff606 	br	4c138 <__alt_data_end+0xfffda138>
   4c160:	01000174 	movhi	r4,5
   4c164:	21184a04 	addi	r4,r4,24872
   4c168:	d9002815 	stw	r4,160(sp)
   4c16c:	003e7206 	br	4bb38 <__alt_data_end+0xfffd9b38>
   4c170:	01400174 	movhi	r5,5
   4c174:	29584604 	addi	r5,r5,24856
   4c178:	d9402115 	stw	r5,132(sp)
   4c17c:	003ec506 	br	4bc94 <__alt_data_end+0xfffd9c94>
   4c180:	e027883a 	mov	r19,fp
   4c184:	d8002015 	stw	zero,128(sp)
   4c188:	003b9406 	br	4afdc <__alt_data_end+0xfffd8fdc>
   4c18c:	dd002017 	ldw	r20,128(sp)
   4c190:	dd401d83 	ldbu	r21,118(sp)
   4c194:	ddc02415 	stw	r23,144(sp)
   4c198:	d8002015 	stw	zero,128(sp)
   4c19c:	003c6606 	br	4b338 <__alt_data_end+0xfffd9338>
   4c1a0:	0025883a 	mov	r18,zero
   4c1a4:	003fbd06 	br	4c09c <__alt_data_end+0xfffda09c>
   4c1a8:	d9402417 	ldw	r5,144(sp)
   4c1ac:	d8c02417 	ldw	r3,144(sp)
   4c1b0:	29400017 	ldw	r5,0(r5)
   4c1b4:	19000104 	addi	r4,r3,4
   4c1b8:	d9002415 	stw	r4,144(sp)
   4c1bc:	d9402015 	stw	r5,128(sp)
   4c1c0:	98c00043 	ldbu	r3,1(r19)
   4c1c4:	e027883a 	mov	r19,fp
   4c1c8:	283f5b0e 	bge	r5,zero,4bf38 <__alt_data_end+0xfffd9f38>
   4c1cc:	18c03fcc 	andi	r3,r3,255
   4c1d0:	013fffc4 	movi	r4,-1
   4c1d4:	18c0201c 	xori	r3,r3,128
   4c1d8:	d9002015 	stw	r4,128(sp)
   4c1dc:	18ffe004 	addi	r3,r3,-128
   4c1e0:	003b7d06 	br	4afd8 <__alt_data_end+0xfffd8fd8>
   4c1e4:	dd401d85 	stb	r21,118(sp)
   4c1e8:	003cf306 	br	4b5b8 <__alt_data_end+0xfffd95b8>
   4c1ec:	dd401d85 	stb	r21,118(sp)
   4c1f0:	003d4e06 	br	4b72c <__alt_data_end+0xfffd972c>
   4c1f4:	dd401d85 	stb	r21,118(sp)
   4c1f8:	003c0e06 	br	4b234 <__alt_data_end+0xfffd9234>
   4c1fc:	d9002717 	ldw	r4,156(sp)
   4c200:	00800304 	movi	r2,12
   4c204:	20800015 	stw	r2,0(r4)
   4c208:	00bfffc4 	movi	r2,-1
   4c20c:	003e6b06 	br	4bbbc <__alt_data_end+0xfffd9bbc>
   4c210:	dd401d85 	stb	r21,118(sp)
   4c214:	003d0006 	br	4b618 <__alt_data_end+0xfffd9618>
   4c218:	dd401d85 	stb	r21,118(sp)
   4c21c:	003d7106 	br	4b7e4 <__alt_data_end+0xfffd97e4>
   4c220:	dd401d85 	stb	r21,118(sp)
   4c224:	003c5706 	br	4b384 <__alt_data_end+0xfffd9384>
   4c228:	dd401d85 	stb	r21,118(sp)
   4c22c:	003c2e06 	br	4b2e8 <__alt_data_end+0xfffd92e8>
   4c230:	dd401d85 	stb	r21,118(sp)
   4c234:	003d8c06 	br	4b868 <__alt_data_end+0xfffd9868>
   4c238:	dd401d85 	stb	r21,118(sp)
   4c23c:	003da706 	br	4b8dc <__alt_data_end+0xfffd98dc>
   4c240:	dd401d85 	stb	r21,118(sp)
   4c244:	003cc806 	br	4b568 <__alt_data_end+0xfffd9568>

0004c248 <__sprint_r.part.0>:
   4c248:	28801917 	ldw	r2,100(r5)
   4c24c:	defff604 	addi	sp,sp,-40
   4c250:	dd400515 	stw	r21,20(sp)
   4c254:	dfc00915 	stw	ra,36(sp)
   4c258:	df000815 	stw	fp,32(sp)
   4c25c:	ddc00715 	stw	r23,28(sp)
   4c260:	dd800615 	stw	r22,24(sp)
   4c264:	dd000415 	stw	r20,16(sp)
   4c268:	dcc00315 	stw	r19,12(sp)
   4c26c:	dc800215 	stw	r18,8(sp)
   4c270:	dc400115 	stw	r17,4(sp)
   4c274:	dc000015 	stw	r16,0(sp)
   4c278:	1088000c 	andi	r2,r2,8192
   4c27c:	302b883a 	mov	r21,r6
   4c280:	10002e26 	beq	r2,zero,4c33c <__sprint_r.part.0+0xf4>
   4c284:	30800217 	ldw	r2,8(r6)
   4c288:	35800017 	ldw	r22,0(r6)
   4c28c:	10002926 	beq	r2,zero,4c334 <__sprint_r.part.0+0xec>
   4c290:	2827883a 	mov	r19,r5
   4c294:	2029883a 	mov	r20,r4
   4c298:	b5c00104 	addi	r23,r22,4
   4c29c:	04bfffc4 	movi	r18,-1
   4c2a0:	bc400017 	ldw	r17,0(r23)
   4c2a4:	b4000017 	ldw	r16,0(r22)
   4c2a8:	0039883a 	mov	fp,zero
   4c2ac:	8822d0ba 	srli	r17,r17,2
   4c2b0:	8800031e 	bne	r17,zero,4c2c0 <__sprint_r.part.0+0x78>
   4c2b4:	00001806 	br	4c318 <__sprint_r.part.0+0xd0>
   4c2b8:	84000104 	addi	r16,r16,4
   4c2bc:	8f001526 	beq	r17,fp,4c314 <__sprint_r.part.0+0xcc>
   4c2c0:	81400017 	ldw	r5,0(r16)
   4c2c4:	980d883a 	mov	r6,r19
   4c2c8:	a009883a 	mov	r4,r20
   4c2cc:	004de900 	call	4de90 <_fputwc_r>
   4c2d0:	e7000044 	addi	fp,fp,1
   4c2d4:	14bff81e 	bne	r2,r18,4c2b8 <__alt_data_end+0xfffda2b8>
   4c2d8:	9005883a 	mov	r2,r18
   4c2dc:	a8000215 	stw	zero,8(r21)
   4c2e0:	a8000115 	stw	zero,4(r21)
   4c2e4:	dfc00917 	ldw	ra,36(sp)
   4c2e8:	df000817 	ldw	fp,32(sp)
   4c2ec:	ddc00717 	ldw	r23,28(sp)
   4c2f0:	dd800617 	ldw	r22,24(sp)
   4c2f4:	dd400517 	ldw	r21,20(sp)
   4c2f8:	dd000417 	ldw	r20,16(sp)
   4c2fc:	dcc00317 	ldw	r19,12(sp)
   4c300:	dc800217 	ldw	r18,8(sp)
   4c304:	dc400117 	ldw	r17,4(sp)
   4c308:	dc000017 	ldw	r16,0(sp)
   4c30c:	dec00a04 	addi	sp,sp,40
   4c310:	f800283a 	ret
   4c314:	a8800217 	ldw	r2,8(r21)
   4c318:	8c63883a 	add	r17,r17,r17
   4c31c:	8c63883a 	add	r17,r17,r17
   4c320:	1445c83a 	sub	r2,r2,r17
   4c324:	a8800215 	stw	r2,8(r21)
   4c328:	b5800204 	addi	r22,r22,8
   4c32c:	bdc00204 	addi	r23,r23,8
   4c330:	103fdb1e 	bne	r2,zero,4c2a0 <__alt_data_end+0xfffda2a0>
   4c334:	0005883a 	mov	r2,zero
   4c338:	003fe806 	br	4c2dc <__alt_data_end+0xfffda2dc>
   4c33c:	0047cd00 	call	47cd0 <__sfvwrite_r>
   4c340:	003fe606 	br	4c2dc <__alt_data_end+0xfffda2dc>

0004c344 <__sprint_r>:
   4c344:	30c00217 	ldw	r3,8(r6)
   4c348:	18000126 	beq	r3,zero,4c350 <__sprint_r+0xc>
   4c34c:	004c2481 	jmpi	4c248 <__sprint_r.part.0>
   4c350:	30000115 	stw	zero,4(r6)
   4c354:	0005883a 	mov	r2,zero
   4c358:	f800283a 	ret

0004c35c <___vfiprintf_internal_r>:
   4c35c:	deffca04 	addi	sp,sp,-216
   4c360:	dd403115 	stw	r21,196(sp)
   4c364:	dfc03515 	stw	ra,212(sp)
   4c368:	df003415 	stw	fp,208(sp)
   4c36c:	ddc03315 	stw	r23,204(sp)
   4c370:	dd803215 	stw	r22,200(sp)
   4c374:	dd003015 	stw	r20,192(sp)
   4c378:	dcc02f15 	stw	r19,188(sp)
   4c37c:	dc802e15 	stw	r18,184(sp)
   4c380:	dc402d15 	stw	r17,180(sp)
   4c384:	dc002c15 	stw	r16,176(sp)
   4c388:	d9002115 	stw	r4,132(sp)
   4c38c:	d9402015 	stw	r5,128(sp)
   4c390:	d9c02215 	stw	r7,136(sp)
   4c394:	302b883a 	mov	r21,r6
   4c398:	20000226 	beq	r4,zero,4c3a4 <___vfiprintf_internal_r+0x48>
   4c39c:	20800e17 	ldw	r2,56(r4)
   4c3a0:	1000cf26 	beq	r2,zero,4c6e0 <___vfiprintf_internal_r+0x384>
   4c3a4:	d8c02017 	ldw	r3,128(sp)
   4c3a8:	1880030b 	ldhu	r2,12(r3)
   4c3ac:	10c8000c 	andi	r3,r2,8192
   4c3b0:	1800071e 	bne	r3,zero,4c3d0 <___vfiprintf_internal_r+0x74>
   4c3b4:	d9402017 	ldw	r5,128(sp)
   4c3b8:	00f7ffc4 	movi	r3,-8193
   4c3bc:	10880014 	ori	r2,r2,8192
   4c3c0:	29001917 	ldw	r4,100(r5)
   4c3c4:	2880030d 	sth	r2,12(r5)
   4c3c8:	20c6703a 	and	r3,r4,r3
   4c3cc:	28c01915 	stw	r3,100(r5)
   4c3d0:	10c0020c 	andi	r3,r2,8
   4c3d4:	1800a526 	beq	r3,zero,4c66c <___vfiprintf_internal_r+0x310>
   4c3d8:	d9002017 	ldw	r4,128(sp)
   4c3dc:	20c00417 	ldw	r3,16(r4)
   4c3e0:	1800a226 	beq	r3,zero,4c66c <___vfiprintf_internal_r+0x310>
   4c3e4:	1080068c 	andi	r2,r2,26
   4c3e8:	00c00284 	movi	r3,10
   4c3ec:	10c0a826 	beq	r2,r3,4c690 <___vfiprintf_internal_r+0x334>
   4c3f0:	d9001a04 	addi	r4,sp,104
   4c3f4:	d94019c4 	addi	r5,sp,103
   4c3f8:	04800174 	movhi	r18,5
   4c3fc:	2145c83a 	sub	r2,r4,r5
   4c400:	94984e04 	addi	r18,r18,24888
   4c404:	d9001e15 	stw	r4,120(sp)
   4c408:	d9401f15 	stw	r5,124(sp)
   4c40c:	dec01a15 	stw	sp,104(sp)
   4c410:	d8001c15 	stw	zero,112(sp)
   4c414:	d8001b15 	stw	zero,108(sp)
   4c418:	d811883a 	mov	r8,sp
   4c41c:	d8002615 	stw	zero,152(sp)
   4c420:	d8002415 	stw	zero,144(sp)
   4c424:	d8802815 	stw	r2,160(sp)
   4c428:	a82d883a 	mov	r22,r21
   4c42c:	b0800007 	ldb	r2,0(r22)
   4c430:	10040d26 	beq	r2,zero,4d468 <___vfiprintf_internal_r+0x110c>
   4c434:	00c00944 	movi	r3,37
   4c438:	b029883a 	mov	r20,r22
   4c43c:	10c0021e 	bne	r2,r3,4c448 <___vfiprintf_internal_r+0xec>
   4c440:	00001606 	br	4c49c <___vfiprintf_internal_r+0x140>
   4c444:	10c00326 	beq	r2,r3,4c454 <___vfiprintf_internal_r+0xf8>
   4c448:	a5000044 	addi	r20,r20,1
   4c44c:	a0800007 	ldb	r2,0(r20)
   4c450:	103ffc1e 	bne	r2,zero,4c444 <__alt_data_end+0xfffda444>
   4c454:	a5a1c83a 	sub	r16,r20,r22
   4c458:	80001026 	beq	r16,zero,4c49c <___vfiprintf_internal_r+0x140>
   4c45c:	d8c01c17 	ldw	r3,112(sp)
   4c460:	d8801b17 	ldw	r2,108(sp)
   4c464:	45800015 	stw	r22,0(r8)
   4c468:	80c7883a 	add	r3,r16,r3
   4c46c:	10800044 	addi	r2,r2,1
   4c470:	44000115 	stw	r16,4(r8)
   4c474:	d8c01c15 	stw	r3,112(sp)
   4c478:	d8801b15 	stw	r2,108(sp)
   4c47c:	010001c4 	movi	r4,7
   4c480:	2080750e 	bge	r4,r2,4c658 <___vfiprintf_internal_r+0x2fc>
   4c484:	1803951e 	bne	r3,zero,4d2dc <___vfiprintf_internal_r+0xf80>
   4c488:	d8c02417 	ldw	r3,144(sp)
   4c48c:	d8001b15 	stw	zero,108(sp)
   4c490:	d811883a 	mov	r8,sp
   4c494:	1c07883a 	add	r3,r3,r16
   4c498:	d8c02415 	stw	r3,144(sp)
   4c49c:	a0800007 	ldb	r2,0(r20)
   4c4a0:	1002e026 	beq	r2,zero,4d024 <___vfiprintf_internal_r+0xcc8>
   4c4a4:	a5800044 	addi	r22,r20,1
   4c4a8:	a0c00047 	ldb	r3,1(r20)
   4c4ac:	d8001d85 	stb	zero,118(sp)
   4c4b0:	0027883a 	mov	r19,zero
   4c4b4:	d8002305 	stb	zero,140(sp)
   4c4b8:	043fffc4 	movi	r16,-1
   4c4bc:	d8002515 	stw	zero,148(sp)
   4c4c0:	0023883a 	mov	r17,zero
   4c4c4:	05001604 	movi	r20,88
   4c4c8:	05400244 	movi	r21,9
   4c4cc:	402f883a 	mov	r23,r8
   4c4d0:	b5800044 	addi	r22,r22,1
   4c4d4:	18bff804 	addi	r2,r3,-32
   4c4d8:	a0827736 	bltu	r20,r2,4ceb8 <___vfiprintf_internal_r+0xb5c>
   4c4dc:	100490ba 	slli	r2,r2,2
   4c4e0:	01000174 	movhi	r4,5
   4c4e4:	21313d04 	addi	r4,r4,-15116
   4c4e8:	1105883a 	add	r2,r2,r4
   4c4ec:	10800017 	ldw	r2,0(r2)
   4c4f0:	1000683a 	jmp	r2
   4c4f4:	0004cbb8 	rdprs	zero,zero,4910
   4c4f8:	0004ceb8 	rdprs	zero,zero,4922
   4c4fc:	0004ceb8 	rdprs	zero,zero,4922
   4c500:	0004cbd4 	movui	zero,4911
   4c504:	0004ceb8 	rdprs	zero,zero,4922
   4c508:	0004ceb8 	rdprs	zero,zero,4922
   4c50c:	0004ceb8 	rdprs	zero,zero,4922
   4c510:	0004ceb8 	rdprs	zero,zero,4922
   4c514:	0004ceb8 	rdprs	zero,zero,4922
   4c518:	0004ceb8 	rdprs	zero,zero,4922
   4c51c:	0004cddc 	xori	zero,zero,4919
   4c520:	0004ce00 	call	4ce0 <__alt_mem_RAM-0x3b320>
   4c524:	0004ceb8 	rdprs	zero,zero,4922
   4c528:	0004c6f8 	rdprs	zero,zero,4891
   4c52c:	0004ce14 	movui	zero,4920
   4c530:	0004ceb8 	rdprs	zero,zero,4922
   4c534:	0004cbe0 	cmpeqi	zero,zero,4911
   4c538:	0004cbec 	andhi	zero,zero,4911
   4c53c:	0004cbec 	andhi	zero,zero,4911
   4c540:	0004cbec 	andhi	zero,zero,4911
   4c544:	0004cbec 	andhi	zero,zero,4911
   4c548:	0004cbec 	andhi	zero,zero,4911
   4c54c:	0004cbec 	andhi	zero,zero,4911
   4c550:	0004cbec 	andhi	zero,zero,4911
   4c554:	0004cbec 	andhi	zero,zero,4911
   4c558:	0004cbec 	andhi	zero,zero,4911
   4c55c:	0004ceb8 	rdprs	zero,zero,4922
   4c560:	0004ceb8 	rdprs	zero,zero,4922
   4c564:	0004ceb8 	rdprs	zero,zero,4922
   4c568:	0004ceb8 	rdprs	zero,zero,4922
   4c56c:	0004ceb8 	rdprs	zero,zero,4922
   4c570:	0004ceb8 	rdprs	zero,zero,4922
   4c574:	0004ceb8 	rdprs	zero,zero,4922
   4c578:	0004ceb8 	rdprs	zero,zero,4922
   4c57c:	0004ceb8 	rdprs	zero,zero,4922
   4c580:	0004ceb8 	rdprs	zero,zero,4922
   4c584:	0004cc2c 	andhi	zero,zero,4912
   4c588:	0004ceb8 	rdprs	zero,zero,4922
   4c58c:	0004ceb8 	rdprs	zero,zero,4922
   4c590:	0004ceb8 	rdprs	zero,zero,4922
   4c594:	0004ceb8 	rdprs	zero,zero,4922
   4c598:	0004ceb8 	rdprs	zero,zero,4922
   4c59c:	0004ceb8 	rdprs	zero,zero,4922
   4c5a0:	0004ceb8 	rdprs	zero,zero,4922
   4c5a4:	0004ceb8 	rdprs	zero,zero,4922
   4c5a8:	0004ceb8 	rdprs	zero,zero,4922
   4c5ac:	0004ceb8 	rdprs	zero,zero,4922
   4c5b0:	0004cc68 	cmpgeui	zero,zero,4913
   4c5b4:	0004ceb8 	rdprs	zero,zero,4922
   4c5b8:	0004ceb8 	rdprs	zero,zero,4922
   4c5bc:	0004ceb8 	rdprs	zero,zero,4922
   4c5c0:	0004ceb8 	rdprs	zero,zero,4922
   4c5c4:	0004ceb8 	rdprs	zero,zero,4922
   4c5c8:	0004ccc4 	movi	zero,4915
   4c5cc:	0004ceb8 	rdprs	zero,zero,4922
   4c5d0:	0004ceb8 	rdprs	zero,zero,4922
   4c5d4:	0004cd38 	rdprs	zero,zero,4916
   4c5d8:	0004ceb8 	rdprs	zero,zero,4922
   4c5dc:	0004ceb8 	rdprs	zero,zero,4922
   4c5e0:	0004ceb8 	rdprs	zero,zero,4922
   4c5e4:	0004ceb8 	rdprs	zero,zero,4922
   4c5e8:	0004ceb8 	rdprs	zero,zero,4922
   4c5ec:	0004ceb8 	rdprs	zero,zero,4922
   4c5f0:	0004ceb8 	rdprs	zero,zero,4922
   4c5f4:	0004ceb8 	rdprs	zero,zero,4922
   4c5f8:	0004ceb8 	rdprs	zero,zero,4922
   4c5fc:	0004ceb8 	rdprs	zero,zero,4922
   4c600:	0004cae0 	cmpeqi	zero,zero,4907
   4c604:	0004cb10 	cmplti	zero,zero,4908
   4c608:	0004ceb8 	rdprs	zero,zero,4922
   4c60c:	0004ceb8 	rdprs	zero,zero,4922
   4c610:	0004ceb8 	rdprs	zero,zero,4922
   4c614:	0004ce60 	cmpeqi	zero,zero,4921
   4c618:	0004cb10 	cmplti	zero,zero,4908
   4c61c:	0004ceb8 	rdprs	zero,zero,4922
   4c620:	0004ceb8 	rdprs	zero,zero,4922
   4c624:	0004c9b8 	rdprs	zero,zero,4902
   4c628:	0004ceb8 	rdprs	zero,zero,4922
   4c62c:	0004c9cc 	andi	zero,zero,4903
   4c630:	0004ca04 	movi	zero,4904
   4c634:	0004c704 	movi	zero,4892
   4c638:	0004c9ac 	andhi	zero,zero,4902
   4c63c:	0004ceb8 	rdprs	zero,zero,4922
   4c640:	0004cd78 	rdprs	zero,zero,4917
   4c644:	0004ceb8 	rdprs	zero,zero,4922
   4c648:	0004cdc4 	movi	zero,4919
   4c64c:	0004ceb8 	rdprs	zero,zero,4922
   4c650:	0004ceb8 	rdprs	zero,zero,4922
   4c654:	0004ca88 	cmpgei	zero,zero,4906
   4c658:	42000204 	addi	r8,r8,8
   4c65c:	d8c02417 	ldw	r3,144(sp)
   4c660:	1c07883a 	add	r3,r3,r16
   4c664:	d8c02415 	stw	r3,144(sp)
   4c668:	003f8c06 	br	4c49c <__alt_data_end+0xfffda49c>
   4c66c:	d9402017 	ldw	r5,128(sp)
   4c670:	d9002117 	ldw	r4,132(sp)
   4c674:	00458400 	call	45840 <__swsetup_r>
   4c678:	1003c11e 	bne	r2,zero,4d580 <___vfiprintf_internal_r+0x1224>
   4c67c:	d9402017 	ldw	r5,128(sp)
   4c680:	00c00284 	movi	r3,10
   4c684:	2880030b 	ldhu	r2,12(r5)
   4c688:	1080068c 	andi	r2,r2,26
   4c68c:	10ff581e 	bne	r2,r3,4c3f0 <__alt_data_end+0xfffda3f0>
   4c690:	d8c02017 	ldw	r3,128(sp)
   4c694:	1880038f 	ldh	r2,14(r3)
   4c698:	103f5516 	blt	r2,zero,4c3f0 <__alt_data_end+0xfffda3f0>
   4c69c:	d9c02217 	ldw	r7,136(sp)
   4c6a0:	d9002117 	ldw	r4,132(sp)
   4c6a4:	a80d883a 	mov	r6,r21
   4c6a8:	180b883a 	mov	r5,r3
   4c6ac:	004d8840 	call	4d884 <__sbprintf>
   4c6b0:	dfc03517 	ldw	ra,212(sp)
   4c6b4:	df003417 	ldw	fp,208(sp)
   4c6b8:	ddc03317 	ldw	r23,204(sp)
   4c6bc:	dd803217 	ldw	r22,200(sp)
   4c6c0:	dd403117 	ldw	r21,196(sp)
   4c6c4:	dd003017 	ldw	r20,192(sp)
   4c6c8:	dcc02f17 	ldw	r19,188(sp)
   4c6cc:	dc802e17 	ldw	r18,184(sp)
   4c6d0:	dc402d17 	ldw	r17,180(sp)
   4c6d4:	dc002c17 	ldw	r16,176(sp)
   4c6d8:	dec03604 	addi	sp,sp,216
   4c6dc:	f800283a 	ret
   4c6e0:	004784c0 	call	4784c <__sinit>
   4c6e4:	003f2f06 	br	4c3a4 <__alt_data_end+0xfffda3a4>
   4c6e8:	d8c02517 	ldw	r3,148(sp)
   4c6ec:	d8802215 	stw	r2,136(sp)
   4c6f0:	00c7c83a 	sub	r3,zero,r3
   4c6f4:	d8c02515 	stw	r3,148(sp)
   4c6f8:	8c400114 	ori	r17,r17,4
   4c6fc:	b0c00007 	ldb	r3,0(r22)
   4c700:	003f7306 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4c704:	00800c04 	movi	r2,48
   4c708:	d9402217 	ldw	r5,136(sp)
   4c70c:	d8801d05 	stb	r2,116(sp)
   4c710:	00801e04 	movi	r2,120
   4c714:	d8801d45 	stb	r2,117(sp)
   4c718:	d8001d85 	stb	zero,118(sp)
   4c71c:	b811883a 	mov	r8,r23
   4c720:	28c00104 	addi	r3,r5,4
   4c724:	2cc00017 	ldw	r19,0(r5)
   4c728:	0029883a 	mov	r20,zero
   4c72c:	88800094 	ori	r2,r17,2
   4c730:	80032516 	blt	r16,zero,4d3c8 <___vfiprintf_internal_r+0x106c>
   4c734:	00bfdfc4 	movi	r2,-129
   4c738:	88a2703a 	and	r17,r17,r2
   4c73c:	d8c02215 	stw	r3,136(sp)
   4c740:	8c400094 	ori	r17,r17,2
   4c744:	98032a1e 	bne	r19,zero,4d3f0 <___vfiprintf_internal_r+0x1094>
   4c748:	00800174 	movhi	r2,5
   4c74c:	1097dd04 	addi	r2,r2,24436
   4c750:	d8802615 	stw	r2,152(sp)
   4c754:	002b883a 	mov	r21,zero
   4c758:	8001741e 	bne	r16,zero,4cd2c <___vfiprintf_internal_r+0x9d0>
   4c75c:	0021883a 	mov	r16,zero
   4c760:	0029883a 	mov	r20,zero
   4c764:	ddc01a04 	addi	r23,sp,104
   4c768:	8027883a 	mov	r19,r16
   4c76c:	8500010e 	bge	r16,r20,4c774 <___vfiprintf_internal_r+0x418>
   4c770:	a027883a 	mov	r19,r20
   4c774:	ad403fcc 	andi	r21,r21,255
   4c778:	ad40201c 	xori	r21,r21,128
   4c77c:	ad7fe004 	addi	r21,r21,-128
   4c780:	a8000126 	beq	r21,zero,4c788 <___vfiprintf_internal_r+0x42c>
   4c784:	9cc00044 	addi	r19,r19,1
   4c788:	89c0008c 	andi	r7,r17,2
   4c78c:	38000126 	beq	r7,zero,4c794 <___vfiprintf_internal_r+0x438>
   4c790:	9cc00084 	addi	r19,r19,2
   4c794:	88c0210c 	andi	r3,r17,132
   4c798:	1801dd1e 	bne	r3,zero,4cf10 <___vfiprintf_internal_r+0xbb4>
   4c79c:	d9402517 	ldw	r5,148(sp)
   4c7a0:	2cebc83a 	sub	r21,r5,r19
   4c7a4:	0541da0e 	bge	zero,r21,4cf10 <___vfiprintf_internal_r+0xbb4>
   4c7a8:	07000404 	movi	fp,16
   4c7ac:	d8801c17 	ldw	r2,112(sp)
   4c7b0:	e543be0e 	bge	fp,r21,4d6ac <___vfiprintf_internal_r+0x1350>
   4c7b4:	01400174 	movhi	r5,5
   4c7b8:	29585204 	addi	r5,r5,24904
   4c7bc:	dc002715 	stw	r16,156(sp)
   4c7c0:	d9801b17 	ldw	r6,108(sp)
   4c7c4:	a821883a 	mov	r16,r21
   4c7c8:	d9402315 	stw	r5,140(sp)
   4c7cc:	028001c4 	movi	r10,7
   4c7d0:	d9c02915 	stw	r7,164(sp)
   4c7d4:	182b883a 	mov	r21,r3
   4c7d8:	00000506 	br	4c7f0 <___vfiprintf_internal_r+0x494>
   4c7dc:	31000084 	addi	r4,r6,2
   4c7e0:	42000204 	addi	r8,r8,8
   4c7e4:	180d883a 	mov	r6,r3
   4c7e8:	843ffc04 	addi	r16,r16,-16
   4c7ec:	e4000f0e 	bge	fp,r16,4c82c <___vfiprintf_internal_r+0x4d0>
   4c7f0:	01000174 	movhi	r4,5
   4c7f4:	10800404 	addi	r2,r2,16
   4c7f8:	30c00044 	addi	r3,r6,1
   4c7fc:	21185204 	addi	r4,r4,24904
   4c800:	41000015 	stw	r4,0(r8)
   4c804:	47000115 	stw	fp,4(r8)
   4c808:	d8801c15 	stw	r2,112(sp)
   4c80c:	d8c01b15 	stw	r3,108(sp)
   4c810:	50fff20e 	bge	r10,r3,4c7dc <__alt_data_end+0xfffda7dc>
   4c814:	1001b21e 	bne	r2,zero,4cee0 <___vfiprintf_internal_r+0xb84>
   4c818:	843ffc04 	addi	r16,r16,-16
   4c81c:	000d883a 	mov	r6,zero
   4c820:	01000044 	movi	r4,1
   4c824:	d811883a 	mov	r8,sp
   4c828:	e43ff116 	blt	fp,r16,4c7f0 <__alt_data_end+0xfffda7f0>
   4c82c:	a807883a 	mov	r3,r21
   4c830:	d9c02917 	ldw	r7,164(sp)
   4c834:	802b883a 	mov	r21,r16
   4c838:	dc002717 	ldw	r16,156(sp)
   4c83c:	d9402317 	ldw	r5,140(sp)
   4c840:	a885883a 	add	r2,r21,r2
   4c844:	45400115 	stw	r21,4(r8)
   4c848:	41400015 	stw	r5,0(r8)
   4c84c:	d8801c15 	stw	r2,112(sp)
   4c850:	d9001b15 	stw	r4,108(sp)
   4c854:	014001c4 	movi	r5,7
   4c858:	29026216 	blt	r5,r4,4d1e4 <___vfiprintf_internal_r+0xe88>
   4c85c:	d9801d87 	ldb	r6,118(sp)
   4c860:	42000204 	addi	r8,r8,8
   4c864:	21400044 	addi	r5,r4,1
   4c868:	3001ae1e 	bne	r6,zero,4cf24 <___vfiprintf_internal_r+0xbc8>
   4c86c:	3801bb26 	beq	r7,zero,4cf5c <___vfiprintf_internal_r+0xc00>
   4c870:	d9001d04 	addi	r4,sp,116
   4c874:	10800084 	addi	r2,r2,2
   4c878:	41000015 	stw	r4,0(r8)
   4c87c:	01000084 	movi	r4,2
   4c880:	41000115 	stw	r4,4(r8)
   4c884:	d8801c15 	stw	r2,112(sp)
   4c888:	d9401b15 	stw	r5,108(sp)
   4c88c:	010001c4 	movi	r4,7
   4c890:	2142680e 	bge	r4,r5,4d234 <___vfiprintf_internal_r+0xed8>
   4c894:	1002b11e 	bne	r2,zero,4d35c <___vfiprintf_internal_r+0x1000>
   4c898:	01802004 	movi	r6,128
   4c89c:	01400044 	movi	r5,1
   4c8a0:	0009883a 	mov	r4,zero
   4c8a4:	d811883a 	mov	r8,sp
   4c8a8:	1981ae1e 	bne	r3,r6,4cf64 <___vfiprintf_internal_r+0xc08>
   4c8ac:	d8c02517 	ldw	r3,148(sp)
   4c8b0:	1cf9c83a 	sub	fp,r3,r19
   4c8b4:	0701ab0e 	bge	zero,fp,4cf64 <___vfiprintf_internal_r+0xc08>
   4c8b8:	05400404 	movi	r21,16
   4c8bc:	af03a90e 	bge	r21,fp,4d764 <___vfiprintf_internal_r+0x1408>
   4c8c0:	01400174 	movhi	r5,5
   4c8c4:	29584e04 	addi	r5,r5,24888
   4c8c8:	d9402315 	stw	r5,140(sp)
   4c8cc:	01c001c4 	movi	r7,7
   4c8d0:	00000506 	br	4c8e8 <___vfiprintf_internal_r+0x58c>
   4c8d4:	21800084 	addi	r6,r4,2
   4c8d8:	42000204 	addi	r8,r8,8
   4c8dc:	1809883a 	mov	r4,r3
   4c8e0:	e73ffc04 	addi	fp,fp,-16
   4c8e4:	af000d0e 	bge	r21,fp,4c91c <___vfiprintf_internal_r+0x5c0>
   4c8e8:	10800404 	addi	r2,r2,16
   4c8ec:	20c00044 	addi	r3,r4,1
   4c8f0:	44800015 	stw	r18,0(r8)
   4c8f4:	45400115 	stw	r21,4(r8)
   4c8f8:	d8801c15 	stw	r2,112(sp)
   4c8fc:	d8c01b15 	stw	r3,108(sp)
   4c900:	38fff40e 	bge	r7,r3,4c8d4 <__alt_data_end+0xfffda8d4>
   4c904:	10022b1e 	bne	r2,zero,4d1b4 <___vfiprintf_internal_r+0xe58>
   4c908:	e73ffc04 	addi	fp,fp,-16
   4c90c:	01800044 	movi	r6,1
   4c910:	0009883a 	mov	r4,zero
   4c914:	d811883a 	mov	r8,sp
   4c918:	af3ff316 	blt	r21,fp,4c8e8 <__alt_data_end+0xfffda8e8>
   4c91c:	d8c02317 	ldw	r3,140(sp)
   4c920:	1705883a 	add	r2,r2,fp
   4c924:	47000115 	stw	fp,4(r8)
   4c928:	40c00015 	stw	r3,0(r8)
   4c92c:	d8801c15 	stw	r2,112(sp)
   4c930:	d9801b15 	stw	r6,108(sp)
   4c934:	00c001c4 	movi	r3,7
   4c938:	19829416 	blt	r3,r6,4d38c <___vfiprintf_internal_r+0x1030>
   4c93c:	8521c83a 	sub	r16,r16,r20
   4c940:	42000204 	addi	r8,r8,8
   4c944:	31400044 	addi	r5,r6,1
   4c948:	3009883a 	mov	r4,r6
   4c94c:	04018716 	blt	zero,r16,4cf6c <___vfiprintf_internal_r+0xc10>
   4c950:	a085883a 	add	r2,r20,r2
   4c954:	45c00015 	stw	r23,0(r8)
   4c958:	45000115 	stw	r20,4(r8)
   4c95c:	d8801c15 	stw	r2,112(sp)
   4c960:	d9401b15 	stw	r5,108(sp)
   4c964:	00c001c4 	movi	r3,7
   4c968:	1941c20e 	bge	r3,r5,4d074 <___vfiprintf_internal_r+0xd18>
   4c96c:	1002531e 	bne	r2,zero,4d2bc <___vfiprintf_internal_r+0xf60>
   4c970:	d8001b15 	stw	zero,108(sp)
   4c974:	8c40010c 	andi	r17,r17,4
   4c978:	88023226 	beq	r17,zero,4d244 <___vfiprintf_internal_r+0xee8>
   4c97c:	d9002517 	ldw	r4,148(sp)
   4c980:	24e3c83a 	sub	r17,r4,r19
   4c984:	04432916 	blt	zero,r17,4d62c <___vfiprintf_internal_r+0x12d0>
   4c988:	d8802517 	ldw	r2,148(sp)
   4c98c:	14c0010e 	bge	r2,r19,4c994 <___vfiprintf_internal_r+0x638>
   4c990:	9805883a 	mov	r2,r19
   4c994:	d8c02417 	ldw	r3,144(sp)
   4c998:	1887883a 	add	r3,r3,r2
   4c99c:	d8c02415 	stw	r3,144(sp)
   4c9a0:	d8001b15 	stw	zero,108(sp)
   4c9a4:	d811883a 	mov	r8,sp
   4c9a8:	003ea006 	br	4c42c <__alt_data_end+0xfffda42c>
   4c9ac:	8c400814 	ori	r17,r17,32
   4c9b0:	b0c00007 	ldb	r3,0(r22)
   4c9b4:	003ec606 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4c9b8:	b0c00007 	ldb	r3,0(r22)
   4c9bc:	00801b04 	movi	r2,108
   4c9c0:	18832026 	beq	r3,r2,4d644 <___vfiprintf_internal_r+0x12e8>
   4c9c4:	8c400414 	ori	r17,r17,16
   4c9c8:	003ec106 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4c9cc:	9cc03fcc 	andi	r19,r19,255
   4c9d0:	b811883a 	mov	r8,r23
   4c9d4:	9803981e 	bne	r19,zero,4d838 <___vfiprintf_internal_r+0x14dc>
   4c9d8:	8880080c 	andi	r2,r17,32
   4c9dc:	1002be26 	beq	r2,zero,4d4d8 <___vfiprintf_internal_r+0x117c>
   4c9e0:	d9002217 	ldw	r4,136(sp)
   4c9e4:	d9402417 	ldw	r5,144(sp)
   4c9e8:	20800017 	ldw	r2,0(r4)
   4c9ec:	2807d7fa 	srai	r3,r5,31
   4c9f0:	21000104 	addi	r4,r4,4
   4c9f4:	d9002215 	stw	r4,136(sp)
   4c9f8:	11400015 	stw	r5,0(r2)
   4c9fc:	10c00115 	stw	r3,4(r2)
   4ca00:	003e8a06 	br	4c42c <__alt_data_end+0xfffda42c>
   4ca04:	9cc03fcc 	andi	r19,r19,255
   4ca08:	b811883a 	mov	r8,r23
   4ca0c:	9803871e 	bne	r19,zero,4d82c <___vfiprintf_internal_r+0x14d0>
   4ca10:	8880080c 	andi	r2,r17,32
   4ca14:	10009a26 	beq	r2,zero,4cc80 <___vfiprintf_internal_r+0x924>
   4ca18:	d9002217 	ldw	r4,136(sp)
   4ca1c:	d8001d85 	stb	zero,118(sp)
   4ca20:	20800204 	addi	r2,r4,8
   4ca24:	24c00017 	ldw	r19,0(r4)
   4ca28:	25000117 	ldw	r20,4(r4)
   4ca2c:	8002a416 	blt	r16,zero,4d4c0 <___vfiprintf_internal_r+0x1164>
   4ca30:	013fdfc4 	movi	r4,-129
   4ca34:	9d06b03a 	or	r3,r19,r20
   4ca38:	d8802215 	stw	r2,136(sp)
   4ca3c:	8922703a 	and	r17,r17,r4
   4ca40:	18009b26 	beq	r3,zero,4ccb0 <___vfiprintf_internal_r+0x954>
   4ca44:	002b883a 	mov	r21,zero
   4ca48:	ddc01a04 	addi	r23,sp,104
   4ca4c:	9806d0fa 	srli	r3,r19,3
   4ca50:	a008977a 	slli	r4,r20,29
   4ca54:	a028d0fa 	srli	r20,r20,3
   4ca58:	9cc001cc 	andi	r19,r19,7
   4ca5c:	98800c04 	addi	r2,r19,48
   4ca60:	bdffffc4 	addi	r23,r23,-1
   4ca64:	20e6b03a 	or	r19,r4,r3
   4ca68:	b8800005 	stb	r2,0(r23)
   4ca6c:	9d06b03a 	or	r3,r19,r20
   4ca70:	183ff61e 	bne	r3,zero,4ca4c <__alt_data_end+0xfffdaa4c>
   4ca74:	88c0004c 	andi	r3,r17,1
   4ca78:	18021f1e 	bne	r3,zero,4d2f8 <___vfiprintf_internal_r+0xf9c>
   4ca7c:	d9401e17 	ldw	r5,120(sp)
   4ca80:	2de9c83a 	sub	r20,r5,r23
   4ca84:	003f3806 	br	4c768 <__alt_data_end+0xfffda768>
   4ca88:	9cc03fcc 	andi	r19,r19,255
   4ca8c:	b811883a 	mov	r8,r23
   4ca90:	98034f1e 	bne	r19,zero,4d7d0 <___vfiprintf_internal_r+0x1474>
   4ca94:	00800174 	movhi	r2,5
   4ca98:	1097dd04 	addi	r2,r2,24436
   4ca9c:	d8802615 	stw	r2,152(sp)
   4caa0:	8880080c 	andi	r2,r17,32
   4caa4:	1000ac26 	beq	r2,zero,4cd58 <___vfiprintf_internal_r+0x9fc>
   4caa8:	d9002217 	ldw	r4,136(sp)
   4caac:	24c00017 	ldw	r19,0(r4)
   4cab0:	25000117 	ldw	r20,4(r4)
   4cab4:	21000204 	addi	r4,r4,8
   4cab8:	d9002215 	stw	r4,136(sp)
   4cabc:	8880004c 	andi	r2,r17,1
   4cac0:	1001e726 	beq	r2,zero,4d260 <___vfiprintf_internal_r+0xf04>
   4cac4:	9d04b03a 	or	r2,r19,r20
   4cac8:	10025c1e 	bne	r2,zero,4d43c <___vfiprintf_internal_r+0x10e0>
   4cacc:	d8001d85 	stb	zero,118(sp)
   4cad0:	80024416 	blt	r16,zero,4d3e4 <___vfiprintf_internal_r+0x1088>
   4cad4:	00bfdfc4 	movi	r2,-129
   4cad8:	88a2703a 	and	r17,r17,r2
   4cadc:	003f1d06 	br	4c754 <__alt_data_end+0xfffda754>
   4cae0:	d8c02217 	ldw	r3,136(sp)
   4cae4:	04c00044 	movi	r19,1
   4cae8:	b811883a 	mov	r8,r23
   4caec:	18800017 	ldw	r2,0(r3)
   4caf0:	18c00104 	addi	r3,r3,4
   4caf4:	d8001d85 	stb	zero,118(sp)
   4caf8:	d8801005 	stb	r2,64(sp)
   4cafc:	d8c02215 	stw	r3,136(sp)
   4cb00:	9829883a 	mov	r20,r19
   4cb04:	ddc01004 	addi	r23,sp,64
   4cb08:	0021883a 	mov	r16,zero
   4cb0c:	003f1e06 	br	4c788 <__alt_data_end+0xfffda788>
   4cb10:	9cc03fcc 	andi	r19,r19,255
   4cb14:	b811883a 	mov	r8,r23
   4cb18:	9803331e 	bne	r19,zero,4d7e8 <___vfiprintf_internal_r+0x148c>
   4cb1c:	8880080c 	andi	r2,r17,32
   4cb20:	10004826 	beq	r2,zero,4cc44 <___vfiprintf_internal_r+0x8e8>
   4cb24:	d9002217 	ldw	r4,136(sp)
   4cb28:	20800117 	ldw	r2,4(r4)
   4cb2c:	24c00017 	ldw	r19,0(r4)
   4cb30:	21000204 	addi	r4,r4,8
   4cb34:	d9002215 	stw	r4,136(sp)
   4cb38:	1029883a 	mov	r20,r2
   4cb3c:	10024c16 	blt	r2,zero,4d470 <___vfiprintf_internal_r+0x1114>
   4cb40:	dd401d83 	ldbu	r21,118(sp)
   4cb44:	80007116 	blt	r16,zero,4cd0c <___vfiprintf_internal_r+0x9b0>
   4cb48:	00ffdfc4 	movi	r3,-129
   4cb4c:	9d04b03a 	or	r2,r19,r20
   4cb50:	88e2703a 	and	r17,r17,r3
   4cb54:	1000d126 	beq	r2,zero,4ce9c <___vfiprintf_internal_r+0xb40>
   4cb58:	a0023526 	beq	r20,zero,4d430 <___vfiprintf_internal_r+0x10d4>
   4cb5c:	ddc01a04 	addi	r23,sp,104
   4cb60:	4039883a 	mov	fp,r8
   4cb64:	9809883a 	mov	r4,r19
   4cb68:	a00b883a 	mov	r5,r20
   4cb6c:	01800284 	movi	r6,10
   4cb70:	000f883a 	mov	r7,zero
   4cb74:	004e8880 	call	4e888 <__umoddi3>
   4cb78:	10800c04 	addi	r2,r2,48
   4cb7c:	bdffffc4 	addi	r23,r23,-1
   4cb80:	9809883a 	mov	r4,r19
   4cb84:	a00b883a 	mov	r5,r20
   4cb88:	b8800005 	stb	r2,0(r23)
   4cb8c:	01800284 	movi	r6,10
   4cb90:	000f883a 	mov	r7,zero
   4cb94:	004e28c0 	call	4e28c <__udivdi3>
   4cb98:	1027883a 	mov	r19,r2
   4cb9c:	10c4b03a 	or	r2,r2,r3
   4cba0:	1829883a 	mov	r20,r3
   4cba4:	103fef1e 	bne	r2,zero,4cb64 <__alt_data_end+0xfffdab64>
   4cba8:	d9001e17 	ldw	r4,120(sp)
   4cbac:	e011883a 	mov	r8,fp
   4cbb0:	25e9c83a 	sub	r20,r4,r23
   4cbb4:	003eec06 	br	4c768 <__alt_data_end+0xfffda768>
   4cbb8:	d8802307 	ldb	r2,140(sp)
   4cbbc:	1002361e 	bne	r2,zero,4d498 <___vfiprintf_internal_r+0x113c>
   4cbc0:	00c00804 	movi	r3,32
   4cbc4:	d8c02305 	stb	r3,140(sp)
   4cbc8:	04c00044 	movi	r19,1
   4cbcc:	b0c00007 	ldb	r3,0(r22)
   4cbd0:	003e3f06 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4cbd4:	8c400054 	ori	r17,r17,1
   4cbd8:	b0c00007 	ldb	r3,0(r22)
   4cbdc:	003e3c06 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4cbe0:	8c402014 	ori	r17,r17,128
   4cbe4:	b0c00007 	ldb	r3,0(r22)
   4cbe8:	003e3906 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4cbec:	dc002715 	stw	r16,156(sp)
   4cbf0:	d8002515 	stw	zero,148(sp)
   4cbf4:	1f3ff404 	addi	fp,r3,-48
   4cbf8:	0009883a 	mov	r4,zero
   4cbfc:	b021883a 	mov	r16,r22
   4cc00:	01400284 	movi	r5,10
   4cc04:	0040eec0 	call	40eec <__mulsi3>
   4cc08:	80c00007 	ldb	r3,0(r16)
   4cc0c:	e089883a 	add	r4,fp,r2
   4cc10:	b5800044 	addi	r22,r22,1
   4cc14:	1f3ff404 	addi	fp,r3,-48
   4cc18:	b021883a 	mov	r16,r22
   4cc1c:	af3ff82e 	bgeu	r21,fp,4cc00 <__alt_data_end+0xfffdac00>
   4cc20:	d9002515 	stw	r4,148(sp)
   4cc24:	dc002717 	ldw	r16,156(sp)
   4cc28:	003e2a06 	br	4c4d4 <__alt_data_end+0xfffda4d4>
   4cc2c:	9cc03fcc 	andi	r19,r19,255
   4cc30:	b811883a 	mov	r8,r23
   4cc34:	9802e91e 	bne	r19,zero,4d7dc <___vfiprintf_internal_r+0x1480>
   4cc38:	8c400414 	ori	r17,r17,16
   4cc3c:	8880080c 	andi	r2,r17,32
   4cc40:	103fb81e 	bne	r2,zero,4cb24 <__alt_data_end+0xfffdab24>
   4cc44:	8880040c 	andi	r2,r17,16
   4cc48:	10022e26 	beq	r2,zero,4d504 <___vfiprintf_internal_r+0x11a8>
   4cc4c:	d9402217 	ldw	r5,136(sp)
   4cc50:	2cc00017 	ldw	r19,0(r5)
   4cc54:	29400104 	addi	r5,r5,4
   4cc58:	d9402215 	stw	r5,136(sp)
   4cc5c:	9829d7fa 	srai	r20,r19,31
   4cc60:	a005883a 	mov	r2,r20
   4cc64:	003fb506 	br	4cb3c <__alt_data_end+0xfffdab3c>
   4cc68:	9cc03fcc 	andi	r19,r19,255
   4cc6c:	b811883a 	mov	r8,r23
   4cc70:	9802fa1e 	bne	r19,zero,4d85c <___vfiprintf_internal_r+0x1500>
   4cc74:	8c400414 	ori	r17,r17,16
   4cc78:	8880080c 	andi	r2,r17,32
   4cc7c:	103f661e 	bne	r2,zero,4ca18 <__alt_data_end+0xfffdaa18>
   4cc80:	8880040c 	andi	r2,r17,16
   4cc84:	10020626 	beq	r2,zero,4d4a0 <___vfiprintf_internal_r+0x1144>
   4cc88:	d9402217 	ldw	r5,136(sp)
   4cc8c:	d8001d85 	stb	zero,118(sp)
   4cc90:	0029883a 	mov	r20,zero
   4cc94:	28800104 	addi	r2,r5,4
   4cc98:	2cc00017 	ldw	r19,0(r5)
   4cc9c:	80020816 	blt	r16,zero,4d4c0 <___vfiprintf_internal_r+0x1164>
   4cca0:	00ffdfc4 	movi	r3,-129
   4cca4:	d8802215 	stw	r2,136(sp)
   4cca8:	88e2703a 	and	r17,r17,r3
   4ccac:	983f651e 	bne	r19,zero,4ca44 <__alt_data_end+0xfffdaa44>
   4ccb0:	002b883a 	mov	r21,zero
   4ccb4:	8002cf26 	beq	r16,zero,4d7f4 <___vfiprintf_internal_r+0x1498>
   4ccb8:	0027883a 	mov	r19,zero
   4ccbc:	0029883a 	mov	r20,zero
   4ccc0:	003f6106 	br	4ca48 <__alt_data_end+0xfffdaa48>
   4ccc4:	9cc03fcc 	andi	r19,r19,255
   4ccc8:	b811883a 	mov	r8,r23
   4cccc:	9802e01e 	bne	r19,zero,4d850 <___vfiprintf_internal_r+0x14f4>
   4ccd0:	8c400414 	ori	r17,r17,16
   4ccd4:	8880080c 	andi	r2,r17,32
   4ccd8:	1000641e 	bne	r2,zero,4ce6c <___vfiprintf_internal_r+0xb10>
   4ccdc:	8880040c 	andi	r2,r17,16
   4cce0:	1001c81e 	bne	r2,zero,4d404 <___vfiprintf_internal_r+0x10a8>
   4cce4:	8880100c 	andi	r2,r17,64
   4cce8:	d8001d85 	stb	zero,118(sp)
   4ccec:	1002281e 	bne	r2,zero,4d590 <___vfiprintf_internal_r+0x1234>
   4ccf0:	d9002217 	ldw	r4,136(sp)
   4ccf4:	0029883a 	mov	r20,zero
   4ccf8:	20800104 	addi	r2,r4,4
   4ccfc:	24c00017 	ldw	r19,0(r4)
   4cd00:	8001c60e 	bge	r16,zero,4d41c <___vfiprintf_internal_r+0x10c0>
   4cd04:	d8802215 	stw	r2,136(sp)
   4cd08:	002b883a 	mov	r21,zero
   4cd0c:	9d04b03a 	or	r2,r19,r20
   4cd10:	103f911e 	bne	r2,zero,4cb58 <__alt_data_end+0xfffdab58>
   4cd14:	00800044 	movi	r2,1
   4cd18:	10803fcc 	andi	r2,r2,255
   4cd1c:	00c00044 	movi	r3,1
   4cd20:	10c05f26 	beq	r2,r3,4cea0 <___vfiprintf_internal_r+0xb44>
   4cd24:	00c00084 	movi	r3,2
   4cd28:	10ffe31e 	bne	r2,r3,4ccb8 <__alt_data_end+0xfffdacb8>
   4cd2c:	0027883a 	mov	r19,zero
   4cd30:	0029883a 	mov	r20,zero
   4cd34:	00015106 	br	4d27c <___vfiprintf_internal_r+0xf20>
   4cd38:	9cc03fcc 	andi	r19,r19,255
   4cd3c:	b811883a 	mov	r8,r23
   4cd40:	9802c01e 	bne	r19,zero,4d844 <___vfiprintf_internal_r+0x14e8>
   4cd44:	01400174 	movhi	r5,5
   4cd48:	2957d804 	addi	r5,r5,24416
   4cd4c:	d9402615 	stw	r5,152(sp)
   4cd50:	8880080c 	andi	r2,r17,32
   4cd54:	103f541e 	bne	r2,zero,4caa8 <__alt_data_end+0xfffdaaa8>
   4cd58:	8880040c 	andi	r2,r17,16
   4cd5c:	1001f226 	beq	r2,zero,4d528 <___vfiprintf_internal_r+0x11cc>
   4cd60:	d9402217 	ldw	r5,136(sp)
   4cd64:	0029883a 	mov	r20,zero
   4cd68:	2cc00017 	ldw	r19,0(r5)
   4cd6c:	29400104 	addi	r5,r5,4
   4cd70:	d9402215 	stw	r5,136(sp)
   4cd74:	003f5106 	br	4cabc <__alt_data_end+0xfffdaabc>
   4cd78:	d8c02217 	ldw	r3,136(sp)
   4cd7c:	b811883a 	mov	r8,r23
   4cd80:	d8001d85 	stb	zero,118(sp)
   4cd84:	1dc00017 	ldw	r23,0(r3)
   4cd88:	1f000104 	addi	fp,r3,4
   4cd8c:	b8025926 	beq	r23,zero,4d6f4 <___vfiprintf_internal_r+0x1398>
   4cd90:	80023316 	blt	r16,zero,4d660 <___vfiprintf_internal_r+0x1304>
   4cd94:	800d883a 	mov	r6,r16
   4cd98:	000b883a 	mov	r5,zero
   4cd9c:	b809883a 	mov	r4,r23
   4cda0:	da002a15 	stw	r8,168(sp)
   4cda4:	0048dc40 	call	48dc4 <memchr>
   4cda8:	da002a17 	ldw	r8,168(sp)
   4cdac:	10026826 	beq	r2,zero,4d750 <___vfiprintf_internal_r+0x13f4>
   4cdb0:	15e9c83a 	sub	r20,r2,r23
   4cdb4:	dd401d83 	ldbu	r21,118(sp)
   4cdb8:	df002215 	stw	fp,136(sp)
   4cdbc:	0021883a 	mov	r16,zero
   4cdc0:	003e6906 	br	4c768 <__alt_data_end+0xfffda768>
   4cdc4:	9cc03fcc 	andi	r19,r19,255
   4cdc8:	b811883a 	mov	r8,r23
   4cdcc:	983fc126 	beq	r19,zero,4ccd4 <__alt_data_end+0xfffdacd4>
   4cdd0:	d8c02303 	ldbu	r3,140(sp)
   4cdd4:	d8c01d85 	stb	r3,118(sp)
   4cdd8:	003fbe06 	br	4ccd4 <__alt_data_end+0xfffdacd4>
   4cddc:	d9002217 	ldw	r4,136(sp)
   4cde0:	d9402217 	ldw	r5,136(sp)
   4cde4:	21000017 	ldw	r4,0(r4)
   4cde8:	28800104 	addi	r2,r5,4
   4cdec:	d9002515 	stw	r4,148(sp)
   4cdf0:	203e3d16 	blt	r4,zero,4c6e8 <__alt_data_end+0xfffda6e8>
   4cdf4:	d8802215 	stw	r2,136(sp)
   4cdf8:	b0c00007 	ldb	r3,0(r22)
   4cdfc:	003db406 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4ce00:	00c00ac4 	movi	r3,43
   4ce04:	d8c02305 	stb	r3,140(sp)
   4ce08:	04c00044 	movi	r19,1
   4ce0c:	b0c00007 	ldb	r3,0(r22)
   4ce10:	003daf06 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4ce14:	b0c00007 	ldb	r3,0(r22)
   4ce18:	01000a84 	movi	r4,42
   4ce1c:	b4000044 	addi	r16,r22,1
   4ce20:	19025e26 	beq	r3,r4,4d79c <___vfiprintf_internal_r+0x1440>
   4ce24:	1f3ff404 	addi	fp,r3,-48
   4ce28:	0009883a 	mov	r4,zero
   4ce2c:	af025236 	bltu	r21,fp,4d778 <___vfiprintf_internal_r+0x141c>
   4ce30:	01400284 	movi	r5,10
   4ce34:	0040eec0 	call	40eec <__mulsi3>
   4ce38:	80c00007 	ldb	r3,0(r16)
   4ce3c:	1709883a 	add	r4,r2,fp
   4ce40:	85800044 	addi	r22,r16,1
   4ce44:	1f3ff404 	addi	fp,r3,-48
   4ce48:	b021883a 	mov	r16,r22
   4ce4c:	af3ff82e 	bgeu	r21,fp,4ce30 <__alt_data_end+0xfffdae30>
   4ce50:	2021883a 	mov	r16,r4
   4ce54:	203d9f0e 	bge	r4,zero,4c4d4 <__alt_data_end+0xfffda4d4>
   4ce58:	043fffc4 	movi	r16,-1
   4ce5c:	003d9d06 	br	4c4d4 <__alt_data_end+0xfffda4d4>
   4ce60:	8c401014 	ori	r17,r17,64
   4ce64:	b0c00007 	ldb	r3,0(r22)
   4ce68:	003d9906 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4ce6c:	d9002217 	ldw	r4,136(sp)
   4ce70:	d8001d85 	stb	zero,118(sp)
   4ce74:	20c00204 	addi	r3,r4,8
   4ce78:	24c00017 	ldw	r19,0(r4)
   4ce7c:	25000117 	ldw	r20,4(r4)
   4ce80:	8001e716 	blt	r16,zero,4d620 <___vfiprintf_internal_r+0x12c4>
   4ce84:	013fdfc4 	movi	r4,-129
   4ce88:	9d04b03a 	or	r2,r19,r20
   4ce8c:	d8c02215 	stw	r3,136(sp)
   4ce90:	8922703a 	and	r17,r17,r4
   4ce94:	002b883a 	mov	r21,zero
   4ce98:	103f2f1e 	bne	r2,zero,4cb58 <__alt_data_end+0xfffdab58>
   4ce9c:	803e2f26 	beq	r16,zero,4c75c <__alt_data_end+0xfffda75c>
   4cea0:	0027883a 	mov	r19,zero
   4cea4:	9cc00c04 	addi	r19,r19,48
   4cea8:	dcc019c5 	stb	r19,103(sp)
   4ceac:	dd002817 	ldw	r20,160(sp)
   4ceb0:	ddc019c4 	addi	r23,sp,103
   4ceb4:	003e2c06 	br	4c768 <__alt_data_end+0xfffda768>
   4ceb8:	9cc03fcc 	andi	r19,r19,255
   4cebc:	b811883a 	mov	r8,r23
   4cec0:	9802571e 	bne	r19,zero,4d820 <___vfiprintf_internal_r+0x14c4>
   4cec4:	18005726 	beq	r3,zero,4d024 <___vfiprintf_internal_r+0xcc8>
   4cec8:	04c00044 	movi	r19,1
   4cecc:	d8c01005 	stb	r3,64(sp)
   4ced0:	d8001d85 	stb	zero,118(sp)
   4ced4:	9829883a 	mov	r20,r19
   4ced8:	ddc01004 	addi	r23,sp,64
   4cedc:	003f0a06 	br	4cb08 <__alt_data_end+0xfffdab08>
   4cee0:	d9402017 	ldw	r5,128(sp)
   4cee4:	d9002117 	ldw	r4,132(sp)
   4cee8:	d9801a04 	addi	r6,sp,104
   4ceec:	da802a15 	stw	r10,168(sp)
   4cef0:	004c2480 	call	4c248 <__sprint_r.part.0>
   4cef4:	da802a17 	ldw	r10,168(sp)
   4cef8:	1000501e 	bne	r2,zero,4d03c <___vfiprintf_internal_r+0xce0>
   4cefc:	d9801b17 	ldw	r6,108(sp)
   4cf00:	d8801c17 	ldw	r2,112(sp)
   4cf04:	d811883a 	mov	r8,sp
   4cf08:	31000044 	addi	r4,r6,1
   4cf0c:	003e3606 	br	4c7e8 <__alt_data_end+0xfffda7e8>
   4cf10:	d9001b17 	ldw	r4,108(sp)
   4cf14:	d8801c17 	ldw	r2,112(sp)
   4cf18:	21400044 	addi	r5,r4,1
   4cf1c:	d9801d87 	ldb	r6,118(sp)
   4cf20:	303e5226 	beq	r6,zero,4c86c <__alt_data_end+0xfffda86c>
   4cf24:	01800044 	movi	r6,1
   4cf28:	d9001d84 	addi	r4,sp,118
   4cf2c:	1185883a 	add	r2,r2,r6
   4cf30:	41000015 	stw	r4,0(r8)
   4cf34:	41800115 	stw	r6,4(r8)
   4cf38:	d8801c15 	stw	r2,112(sp)
   4cf3c:	d9401b15 	stw	r5,108(sp)
   4cf40:	010001c4 	movi	r4,7
   4cf44:	2140b00e 	bge	r4,r5,4d208 <___vfiprintf_internal_r+0xeac>
   4cf48:	1000f61e 	bne	r2,zero,4d324 <___vfiprintf_internal_r+0xfc8>
   4cf4c:	3800b31e 	bne	r7,zero,4d21c <___vfiprintf_internal_r+0xec0>
   4cf50:	0009883a 	mov	r4,zero
   4cf54:	300b883a 	mov	r5,r6
   4cf58:	d811883a 	mov	r8,sp
   4cf5c:	01802004 	movi	r6,128
   4cf60:	19be5226 	beq	r3,r6,4c8ac <__alt_data_end+0xfffda8ac>
   4cf64:	8521c83a 	sub	r16,r16,r20
   4cf68:	043e790e 	bge	zero,r16,4c950 <__alt_data_end+0xfffda950>
   4cf6c:	05400404 	movi	r21,16
   4cf70:	ac01b00e 	bge	r21,r16,4d634 <___vfiprintf_internal_r+0x12d8>
   4cf74:	01400174 	movhi	r5,5
   4cf78:	29584e04 	addi	r5,r5,24888
   4cf7c:	d9402315 	stw	r5,140(sp)
   4cf80:	070001c4 	movi	fp,7
   4cf84:	00000506 	br	4cf9c <___vfiprintf_internal_r+0xc40>
   4cf88:	21400084 	addi	r5,r4,2
   4cf8c:	42000204 	addi	r8,r8,8
   4cf90:	1809883a 	mov	r4,r3
   4cf94:	843ffc04 	addi	r16,r16,-16
   4cf98:	ac000d0e 	bge	r21,r16,4cfd0 <___vfiprintf_internal_r+0xc74>
   4cf9c:	10800404 	addi	r2,r2,16
   4cfa0:	20c00044 	addi	r3,r4,1
   4cfa4:	44800015 	stw	r18,0(r8)
   4cfa8:	45400115 	stw	r21,4(r8)
   4cfac:	d8801c15 	stw	r2,112(sp)
   4cfb0:	d8c01b15 	stw	r3,108(sp)
   4cfb4:	e0fff40e 	bge	fp,r3,4cf88 <__alt_data_end+0xfffdaf88>
   4cfb8:	1000101e 	bne	r2,zero,4cffc <___vfiprintf_internal_r+0xca0>
   4cfbc:	843ffc04 	addi	r16,r16,-16
   4cfc0:	01400044 	movi	r5,1
   4cfc4:	0009883a 	mov	r4,zero
   4cfc8:	d811883a 	mov	r8,sp
   4cfcc:	ac3ff316 	blt	r21,r16,4cf9c <__alt_data_end+0xfffdaf9c>
   4cfd0:	d8c02317 	ldw	r3,140(sp)
   4cfd4:	1405883a 	add	r2,r2,r16
   4cfd8:	44000115 	stw	r16,4(r8)
   4cfdc:	40c00015 	stw	r3,0(r8)
   4cfe0:	d8801c15 	stw	r2,112(sp)
   4cfe4:	d9401b15 	stw	r5,108(sp)
   4cfe8:	00c001c4 	movi	r3,7
   4cfec:	19401916 	blt	r3,r5,4d054 <___vfiprintf_internal_r+0xcf8>
   4cff0:	42000204 	addi	r8,r8,8
   4cff4:	29400044 	addi	r5,r5,1
   4cff8:	003e5506 	br	4c950 <__alt_data_end+0xfffda950>
   4cffc:	d9402017 	ldw	r5,128(sp)
   4d000:	d9002117 	ldw	r4,132(sp)
   4d004:	d9801a04 	addi	r6,sp,104
   4d008:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d00c:	10000b1e 	bne	r2,zero,4d03c <___vfiprintf_internal_r+0xce0>
   4d010:	d9001b17 	ldw	r4,108(sp)
   4d014:	d8801c17 	ldw	r2,112(sp)
   4d018:	d811883a 	mov	r8,sp
   4d01c:	21400044 	addi	r5,r4,1
   4d020:	003fdc06 	br	4cf94 <__alt_data_end+0xfffdaf94>
   4d024:	d8801c17 	ldw	r2,112(sp)
   4d028:	10000426 	beq	r2,zero,4d03c <___vfiprintf_internal_r+0xce0>
   4d02c:	d9402017 	ldw	r5,128(sp)
   4d030:	d9002117 	ldw	r4,132(sp)
   4d034:	d9801a04 	addi	r6,sp,104
   4d038:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d03c:	d9402017 	ldw	r5,128(sp)
   4d040:	2880030b 	ldhu	r2,12(r5)
   4d044:	1080100c 	andi	r2,r2,64
   4d048:	10014d1e 	bne	r2,zero,4d580 <___vfiprintf_internal_r+0x1224>
   4d04c:	d8802417 	ldw	r2,144(sp)
   4d050:	003d9706 	br	4c6b0 <__alt_data_end+0xfffda6b0>
   4d054:	1000d21e 	bne	r2,zero,4d3a0 <___vfiprintf_internal_r+0x1044>
   4d058:	00c00044 	movi	r3,1
   4d05c:	a005883a 	mov	r2,r20
   4d060:	ddc00015 	stw	r23,0(sp)
   4d064:	dd000115 	stw	r20,4(sp)
   4d068:	dd001c15 	stw	r20,112(sp)
   4d06c:	d8c01b15 	stw	r3,108(sp)
   4d070:	d811883a 	mov	r8,sp
   4d074:	42000204 	addi	r8,r8,8
   4d078:	8c40010c 	andi	r17,r17,4
   4d07c:	88004026 	beq	r17,zero,4d180 <___vfiprintf_internal_r+0xe24>
   4d080:	d9002517 	ldw	r4,148(sp)
   4d084:	24e3c83a 	sub	r17,r4,r19
   4d088:	04403d0e 	bge	zero,r17,4d180 <___vfiprintf_internal_r+0xe24>
   4d08c:	04000404 	movi	r16,16
   4d090:	8441a90e 	bge	r16,r17,4d738 <___vfiprintf_internal_r+0x13dc>
   4d094:	00c00174 	movhi	r3,5
   4d098:	18d85204 	addi	r3,r3,24904
   4d09c:	d9001b17 	ldw	r4,108(sp)
   4d0a0:	d8c02315 	stw	r3,140(sp)
   4d0a4:	050001c4 	movi	r20,7
   4d0a8:	dd402117 	ldw	r21,132(sp)
   4d0ac:	ddc02017 	ldw	r23,128(sp)
   4d0b0:	00000506 	br	4d0c8 <___vfiprintf_internal_r+0xd6c>
   4d0b4:	21400084 	addi	r5,r4,2
   4d0b8:	42000204 	addi	r8,r8,8
   4d0bc:	1809883a 	mov	r4,r3
   4d0c0:	8c7ffc04 	addi	r17,r17,-16
   4d0c4:	84400f0e 	bge	r16,r17,4d104 <___vfiprintf_internal_r+0xda8>
   4d0c8:	01400174 	movhi	r5,5
   4d0cc:	10800404 	addi	r2,r2,16
   4d0d0:	20c00044 	addi	r3,r4,1
   4d0d4:	29585204 	addi	r5,r5,24904
   4d0d8:	41400015 	stw	r5,0(r8)
   4d0dc:	44000115 	stw	r16,4(r8)
   4d0e0:	d8801c15 	stw	r2,112(sp)
   4d0e4:	d8c01b15 	stw	r3,108(sp)
   4d0e8:	a0fff20e 	bge	r20,r3,4d0b4 <__alt_data_end+0xfffdb0b4>
   4d0ec:	1000141e 	bne	r2,zero,4d140 <___vfiprintf_internal_r+0xde4>
   4d0f0:	8c7ffc04 	addi	r17,r17,-16
   4d0f4:	01400044 	movi	r5,1
   4d0f8:	0009883a 	mov	r4,zero
   4d0fc:	d811883a 	mov	r8,sp
   4d100:	847ff116 	blt	r16,r17,4d0c8 <__alt_data_end+0xfffdb0c8>
   4d104:	d8c02317 	ldw	r3,140(sp)
   4d108:	1445883a 	add	r2,r2,r17
   4d10c:	44400115 	stw	r17,4(r8)
   4d110:	40c00015 	stw	r3,0(r8)
   4d114:	d8801c15 	stw	r2,112(sp)
   4d118:	d9401b15 	stw	r5,108(sp)
   4d11c:	00c001c4 	movi	r3,7
   4d120:	1940170e 	bge	r3,r5,4d180 <___vfiprintf_internal_r+0xe24>
   4d124:	1000101e 	bne	r2,zero,4d168 <___vfiprintf_internal_r+0xe0c>
   4d128:	d8802517 	ldw	r2,148(sp)
   4d12c:	14c11616 	blt	r2,r19,4d588 <___vfiprintf_internal_r+0x122c>
   4d130:	d9002417 	ldw	r4,144(sp)
   4d134:	2089883a 	add	r4,r4,r2
   4d138:	d9002415 	stw	r4,144(sp)
   4d13c:	003e1806 	br	4c9a0 <__alt_data_end+0xfffda9a0>
   4d140:	d9801a04 	addi	r6,sp,104
   4d144:	b80b883a 	mov	r5,r23
   4d148:	a809883a 	mov	r4,r21
   4d14c:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d150:	103fba1e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d154:	d9001b17 	ldw	r4,108(sp)
   4d158:	d8801c17 	ldw	r2,112(sp)
   4d15c:	d811883a 	mov	r8,sp
   4d160:	21400044 	addi	r5,r4,1
   4d164:	003fd606 	br	4d0c0 <__alt_data_end+0xfffdb0c0>
   4d168:	d9402017 	ldw	r5,128(sp)
   4d16c:	d9002117 	ldw	r4,132(sp)
   4d170:	d9801a04 	addi	r6,sp,104
   4d174:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d178:	103fb01e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d17c:	d8801c17 	ldw	r2,112(sp)
   4d180:	d8c02517 	ldw	r3,148(sp)
   4d184:	1cc0010e 	bge	r3,r19,4d18c <___vfiprintf_internal_r+0xe30>
   4d188:	9807883a 	mov	r3,r19
   4d18c:	d9002417 	ldw	r4,144(sp)
   4d190:	20c9883a 	add	r4,r4,r3
   4d194:	d9002415 	stw	r4,144(sp)
   4d198:	103e0126 	beq	r2,zero,4c9a0 <__alt_data_end+0xfffda9a0>
   4d19c:	d9402017 	ldw	r5,128(sp)
   4d1a0:	d9002117 	ldw	r4,132(sp)
   4d1a4:	d9801a04 	addi	r6,sp,104
   4d1a8:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d1ac:	103dfc26 	beq	r2,zero,4c9a0 <__alt_data_end+0xfffda9a0>
   4d1b0:	003fa206 	br	4d03c <__alt_data_end+0xfffdb03c>
   4d1b4:	d9402017 	ldw	r5,128(sp)
   4d1b8:	d9002117 	ldw	r4,132(sp)
   4d1bc:	d9801a04 	addi	r6,sp,104
   4d1c0:	d9c02b15 	stw	r7,172(sp)
   4d1c4:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d1c8:	d9c02b17 	ldw	r7,172(sp)
   4d1cc:	103f9b1e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d1d0:	d9001b17 	ldw	r4,108(sp)
   4d1d4:	d8801c17 	ldw	r2,112(sp)
   4d1d8:	d811883a 	mov	r8,sp
   4d1dc:	21800044 	addi	r6,r4,1
   4d1e0:	003dbf06 	br	4c8e0 <__alt_data_end+0xfffda8e0>
   4d1e4:	1000d81e 	bne	r2,zero,4d548 <___vfiprintf_internal_r+0x11ec>
   4d1e8:	d9001d87 	ldb	r4,118(sp)
   4d1ec:	20000a26 	beq	r4,zero,4d218 <___vfiprintf_internal_r+0xebc>
   4d1f0:	00800044 	movi	r2,1
   4d1f4:	d9001d84 	addi	r4,sp,118
   4d1f8:	100b883a 	mov	r5,r2
   4d1fc:	d9000015 	stw	r4,0(sp)
   4d200:	d8800115 	stw	r2,4(sp)
   4d204:	d811883a 	mov	r8,sp
   4d208:	2809883a 	mov	r4,r5
   4d20c:	42000204 	addi	r8,r8,8
   4d210:	29400044 	addi	r5,r5,1
   4d214:	003d9506 	br	4c86c <__alt_data_end+0xfffda86c>
   4d218:	3800fd26 	beq	r7,zero,4d610 <___vfiprintf_internal_r+0x12b4>
   4d21c:	00800084 	movi	r2,2
   4d220:	d9001d04 	addi	r4,sp,116
   4d224:	d9000015 	stw	r4,0(sp)
   4d228:	d8800115 	stw	r2,4(sp)
   4d22c:	01400044 	movi	r5,1
   4d230:	d811883a 	mov	r8,sp
   4d234:	2809883a 	mov	r4,r5
   4d238:	42000204 	addi	r8,r8,8
   4d23c:	29400044 	addi	r5,r5,1
   4d240:	003f4606 	br	4cf5c <__alt_data_end+0xfffdaf5c>
   4d244:	d8802517 	ldw	r2,148(sp)
   4d248:	14c0010e 	bge	r2,r19,4d250 <___vfiprintf_internal_r+0xef4>
   4d24c:	9805883a 	mov	r2,r19
   4d250:	d9402417 	ldw	r5,144(sp)
   4d254:	288b883a 	add	r5,r5,r2
   4d258:	d9402415 	stw	r5,144(sp)
   4d25c:	003dd006 	br	4c9a0 <__alt_data_end+0xfffda9a0>
   4d260:	d8001d85 	stb	zero,118(sp)
   4d264:	80005d16 	blt	r16,zero,4d3dc <___vfiprintf_internal_r+0x1080>
   4d268:	00ffdfc4 	movi	r3,-129
   4d26c:	9d04b03a 	or	r2,r19,r20
   4d270:	88e2703a 	and	r17,r17,r3
   4d274:	103d3726 	beq	r2,zero,4c754 <__alt_data_end+0xfffda754>
   4d278:	002b883a 	mov	r21,zero
   4d27c:	d9002617 	ldw	r4,152(sp)
   4d280:	ddc01a04 	addi	r23,sp,104
   4d284:	988003cc 	andi	r2,r19,15
   4d288:	a006973a 	slli	r3,r20,28
   4d28c:	2085883a 	add	r2,r4,r2
   4d290:	9826d13a 	srli	r19,r19,4
   4d294:	10800003 	ldbu	r2,0(r2)
   4d298:	a028d13a 	srli	r20,r20,4
   4d29c:	bdffffc4 	addi	r23,r23,-1
   4d2a0:	1ce6b03a 	or	r19,r3,r19
   4d2a4:	b8800005 	stb	r2,0(r23)
   4d2a8:	9d04b03a 	or	r2,r19,r20
   4d2ac:	103ff51e 	bne	r2,zero,4d284 <__alt_data_end+0xfffdb284>
   4d2b0:	d8801e17 	ldw	r2,120(sp)
   4d2b4:	15e9c83a 	sub	r20,r2,r23
   4d2b8:	003d2b06 	br	4c768 <__alt_data_end+0xfffda768>
   4d2bc:	d9402017 	ldw	r5,128(sp)
   4d2c0:	d9002117 	ldw	r4,132(sp)
   4d2c4:	d9801a04 	addi	r6,sp,104
   4d2c8:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d2cc:	103f5b1e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d2d0:	d8801c17 	ldw	r2,112(sp)
   4d2d4:	d811883a 	mov	r8,sp
   4d2d8:	003f6706 	br	4d078 <__alt_data_end+0xfffdb078>
   4d2dc:	d9402017 	ldw	r5,128(sp)
   4d2e0:	d9002117 	ldw	r4,132(sp)
   4d2e4:	d9801a04 	addi	r6,sp,104
   4d2e8:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d2ec:	103f531e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d2f0:	d811883a 	mov	r8,sp
   4d2f4:	003cd906 	br	4c65c <__alt_data_end+0xfffda65c>
   4d2f8:	10803fcc 	andi	r2,r2,255
   4d2fc:	1080201c 	xori	r2,r2,128
   4d300:	10bfe004 	addi	r2,r2,-128
   4d304:	00c00c04 	movi	r3,48
   4d308:	10ffe926 	beq	r2,r3,4d2b0 <__alt_data_end+0xfffdb2b0>
   4d30c:	b8ffffc5 	stb	r3,-1(r23)
   4d310:	d8c01e17 	ldw	r3,120(sp)
   4d314:	b8bfffc4 	addi	r2,r23,-1
   4d318:	102f883a 	mov	r23,r2
   4d31c:	18a9c83a 	sub	r20,r3,r2
   4d320:	003d1106 	br	4c768 <__alt_data_end+0xfffda768>
   4d324:	d9402017 	ldw	r5,128(sp)
   4d328:	d9002117 	ldw	r4,132(sp)
   4d32c:	d9801a04 	addi	r6,sp,104
   4d330:	d8c02a15 	stw	r3,168(sp)
   4d334:	d9c02b15 	stw	r7,172(sp)
   4d338:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d33c:	d8c02a17 	ldw	r3,168(sp)
   4d340:	d9c02b17 	ldw	r7,172(sp)
   4d344:	103f3d1e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d348:	d9001b17 	ldw	r4,108(sp)
   4d34c:	d8801c17 	ldw	r2,112(sp)
   4d350:	d811883a 	mov	r8,sp
   4d354:	21400044 	addi	r5,r4,1
   4d358:	003d4406 	br	4c86c <__alt_data_end+0xfffda86c>
   4d35c:	d9402017 	ldw	r5,128(sp)
   4d360:	d9002117 	ldw	r4,132(sp)
   4d364:	d9801a04 	addi	r6,sp,104
   4d368:	d8c02a15 	stw	r3,168(sp)
   4d36c:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d370:	d8c02a17 	ldw	r3,168(sp)
   4d374:	103f311e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d378:	d9001b17 	ldw	r4,108(sp)
   4d37c:	d8801c17 	ldw	r2,112(sp)
   4d380:	d811883a 	mov	r8,sp
   4d384:	21400044 	addi	r5,r4,1
   4d388:	003ef406 	br	4cf5c <__alt_data_end+0xfffdaf5c>
   4d38c:	1000bd1e 	bne	r2,zero,4d684 <___vfiprintf_internal_r+0x1328>
   4d390:	01400044 	movi	r5,1
   4d394:	0009883a 	mov	r4,zero
   4d398:	d811883a 	mov	r8,sp
   4d39c:	003ef106 	br	4cf64 <__alt_data_end+0xfffdaf64>
   4d3a0:	d9402017 	ldw	r5,128(sp)
   4d3a4:	d9002117 	ldw	r4,132(sp)
   4d3a8:	d9801a04 	addi	r6,sp,104
   4d3ac:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d3b0:	103f221e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d3b4:	d9401b17 	ldw	r5,108(sp)
   4d3b8:	d8801c17 	ldw	r2,112(sp)
   4d3bc:	d811883a 	mov	r8,sp
   4d3c0:	29400044 	addi	r5,r5,1
   4d3c4:	003d6206 	br	4c950 <__alt_data_end+0xfffda950>
   4d3c8:	01400174 	movhi	r5,5
   4d3cc:	2957dd04 	addi	r5,r5,24436
   4d3d0:	d9402615 	stw	r5,152(sp)
   4d3d4:	d8c02215 	stw	r3,136(sp)
   4d3d8:	1023883a 	mov	r17,r2
   4d3dc:	9d04b03a 	or	r2,r19,r20
   4d3e0:	103fa51e 	bne	r2,zero,4d278 <__alt_data_end+0xfffdb278>
   4d3e4:	002b883a 	mov	r21,zero
   4d3e8:	00800084 	movi	r2,2
   4d3ec:	003e4a06 	br	4cd18 <__alt_data_end+0xfffdad18>
   4d3f0:	01400174 	movhi	r5,5
   4d3f4:	2957dd04 	addi	r5,r5,24436
   4d3f8:	002b883a 	mov	r21,zero
   4d3fc:	d9402615 	stw	r5,152(sp)
   4d400:	003f9e06 	br	4d27c <__alt_data_end+0xfffdb27c>
   4d404:	d9402217 	ldw	r5,136(sp)
   4d408:	d8001d85 	stb	zero,118(sp)
   4d40c:	0029883a 	mov	r20,zero
   4d410:	28800104 	addi	r2,r5,4
   4d414:	2cc00017 	ldw	r19,0(r5)
   4d418:	803e3a16 	blt	r16,zero,4cd04 <__alt_data_end+0xfffdad04>
   4d41c:	00ffdfc4 	movi	r3,-129
   4d420:	d8802215 	stw	r2,136(sp)
   4d424:	88e2703a 	and	r17,r17,r3
   4d428:	002b883a 	mov	r21,zero
   4d42c:	983e9b26 	beq	r19,zero,4ce9c <__alt_data_end+0xfffdae9c>
   4d430:	00800244 	movi	r2,9
   4d434:	14fdc936 	bltu	r2,r19,4cb5c <__alt_data_end+0xfffdab5c>
   4d438:	003e9a06 	br	4cea4 <__alt_data_end+0xfffdaea4>
   4d43c:	00800c04 	movi	r2,48
   4d440:	d8c01d45 	stb	r3,117(sp)
   4d444:	d8801d05 	stb	r2,116(sp)
   4d448:	d8001d85 	stb	zero,118(sp)
   4d44c:	88c00094 	ori	r3,r17,2
   4d450:	80009c16 	blt	r16,zero,4d6c4 <___vfiprintf_internal_r+0x1368>
   4d454:	00bfdfc4 	movi	r2,-129
   4d458:	88a2703a 	and	r17,r17,r2
   4d45c:	8c400094 	ori	r17,r17,2
   4d460:	002b883a 	mov	r21,zero
   4d464:	003f8506 	br	4d27c <__alt_data_end+0xfffdb27c>
   4d468:	b029883a 	mov	r20,r22
   4d46c:	003c0b06 	br	4c49c <__alt_data_end+0xfffda49c>
   4d470:	04e7c83a 	sub	r19,zero,r19
   4d474:	05400b44 	movi	r21,45
   4d478:	9804c03a 	cmpne	r2,r19,zero
   4d47c:	0529c83a 	sub	r20,zero,r20
   4d480:	dd401d85 	stb	r21,118(sp)
   4d484:	a0a9c83a 	sub	r20,r20,r2
   4d488:	80009716 	blt	r16,zero,4d6e8 <___vfiprintf_internal_r+0x138c>
   4d48c:	00bfdfc4 	movi	r2,-129
   4d490:	88a2703a 	and	r17,r17,r2
   4d494:	003db006 	br	4cb58 <__alt_data_end+0xfffdab58>
   4d498:	b0c00007 	ldb	r3,0(r22)
   4d49c:	003c0c06 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4d4a0:	8880100c 	andi	r2,r17,64
   4d4a4:	d8001d85 	stb	zero,118(sp)
   4d4a8:	1000461e 	bne	r2,zero,4d5c4 <___vfiprintf_internal_r+0x1268>
   4d4ac:	d9002217 	ldw	r4,136(sp)
   4d4b0:	0029883a 	mov	r20,zero
   4d4b4:	20800104 	addi	r2,r4,4
   4d4b8:	24c00017 	ldw	r19,0(r4)
   4d4bc:	803df80e 	bge	r16,zero,4cca0 <__alt_data_end+0xfffdaca0>
   4d4c0:	9d06b03a 	or	r3,r19,r20
   4d4c4:	d8802215 	stw	r2,136(sp)
   4d4c8:	183d5e1e 	bne	r3,zero,4ca44 <__alt_data_end+0xfffdaa44>
   4d4cc:	002b883a 	mov	r21,zero
   4d4d0:	0005883a 	mov	r2,zero
   4d4d4:	003e1006 	br	4cd18 <__alt_data_end+0xfffdad18>
   4d4d8:	8880040c 	andi	r2,r17,16
   4d4dc:	1000321e 	bne	r2,zero,4d5a8 <___vfiprintf_internal_r+0x124c>
   4d4e0:	8c40100c 	andi	r17,r17,64
   4d4e4:	88008d26 	beq	r17,zero,4d71c <___vfiprintf_internal_r+0x13c0>
   4d4e8:	d9402217 	ldw	r5,136(sp)
   4d4ec:	d8c02417 	ldw	r3,144(sp)
   4d4f0:	28800017 	ldw	r2,0(r5)
   4d4f4:	29400104 	addi	r5,r5,4
   4d4f8:	d9402215 	stw	r5,136(sp)
   4d4fc:	10c0000d 	sth	r3,0(r2)
   4d500:	003bca06 	br	4c42c <__alt_data_end+0xfffda42c>
   4d504:	8880100c 	andi	r2,r17,64
   4d508:	10003a26 	beq	r2,zero,4d5f4 <___vfiprintf_internal_r+0x1298>
   4d50c:	d8802217 	ldw	r2,136(sp)
   4d510:	14c0000f 	ldh	r19,0(r2)
   4d514:	10800104 	addi	r2,r2,4
   4d518:	d8802215 	stw	r2,136(sp)
   4d51c:	9829d7fa 	srai	r20,r19,31
   4d520:	a005883a 	mov	r2,r20
   4d524:	003d8506 	br	4cb3c <__alt_data_end+0xfffdab3c>
   4d528:	8880100c 	andi	r2,r17,64
   4d52c:	10002b26 	beq	r2,zero,4d5dc <___vfiprintf_internal_r+0x1280>
   4d530:	d8802217 	ldw	r2,136(sp)
   4d534:	0029883a 	mov	r20,zero
   4d538:	14c0000b 	ldhu	r19,0(r2)
   4d53c:	10800104 	addi	r2,r2,4
   4d540:	d8802215 	stw	r2,136(sp)
   4d544:	003d5d06 	br	4cabc <__alt_data_end+0xfffdaabc>
   4d548:	d9402017 	ldw	r5,128(sp)
   4d54c:	d9002117 	ldw	r4,132(sp)
   4d550:	d9801a04 	addi	r6,sp,104
   4d554:	d8c02a15 	stw	r3,168(sp)
   4d558:	d9c02b15 	stw	r7,172(sp)
   4d55c:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d560:	d8c02a17 	ldw	r3,168(sp)
   4d564:	d9c02b17 	ldw	r7,172(sp)
   4d568:	103eb41e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d56c:	d9001b17 	ldw	r4,108(sp)
   4d570:	d8801c17 	ldw	r2,112(sp)
   4d574:	d811883a 	mov	r8,sp
   4d578:	21400044 	addi	r5,r4,1
   4d57c:	003e6706 	br	4cf1c <__alt_data_end+0xfffdaf1c>
   4d580:	00bfffc4 	movi	r2,-1
   4d584:	003c4a06 	br	4c6b0 <__alt_data_end+0xfffda6b0>
   4d588:	9805883a 	mov	r2,r19
   4d58c:	003ee806 	br	4d130 <__alt_data_end+0xfffdb130>
   4d590:	d8c02217 	ldw	r3,136(sp)
   4d594:	0029883a 	mov	r20,zero
   4d598:	18800104 	addi	r2,r3,4
   4d59c:	1cc0000b 	ldhu	r19,0(r3)
   4d5a0:	803f9e0e 	bge	r16,zero,4d41c <__alt_data_end+0xfffdb41c>
   4d5a4:	003dd706 	br	4cd04 <__alt_data_end+0xfffdad04>
   4d5a8:	d8c02217 	ldw	r3,136(sp)
   4d5ac:	d9002417 	ldw	r4,144(sp)
   4d5b0:	18800017 	ldw	r2,0(r3)
   4d5b4:	18c00104 	addi	r3,r3,4
   4d5b8:	d8c02215 	stw	r3,136(sp)
   4d5bc:	11000015 	stw	r4,0(r2)
   4d5c0:	003b9a06 	br	4c42c <__alt_data_end+0xfffda42c>
   4d5c4:	d8c02217 	ldw	r3,136(sp)
   4d5c8:	0029883a 	mov	r20,zero
   4d5cc:	18800104 	addi	r2,r3,4
   4d5d0:	1cc0000b 	ldhu	r19,0(r3)
   4d5d4:	803db20e 	bge	r16,zero,4cca0 <__alt_data_end+0xfffdaca0>
   4d5d8:	003fb906 	br	4d4c0 <__alt_data_end+0xfffdb4c0>
   4d5dc:	d9002217 	ldw	r4,136(sp)
   4d5e0:	0029883a 	mov	r20,zero
   4d5e4:	24c00017 	ldw	r19,0(r4)
   4d5e8:	21000104 	addi	r4,r4,4
   4d5ec:	d9002215 	stw	r4,136(sp)
   4d5f0:	003d3206 	br	4cabc <__alt_data_end+0xfffdaabc>
   4d5f4:	d8c02217 	ldw	r3,136(sp)
   4d5f8:	1cc00017 	ldw	r19,0(r3)
   4d5fc:	18c00104 	addi	r3,r3,4
   4d600:	d8c02215 	stw	r3,136(sp)
   4d604:	9829d7fa 	srai	r20,r19,31
   4d608:	a005883a 	mov	r2,r20
   4d60c:	003d4b06 	br	4cb3c <__alt_data_end+0xfffdab3c>
   4d610:	0009883a 	mov	r4,zero
   4d614:	01400044 	movi	r5,1
   4d618:	d811883a 	mov	r8,sp
   4d61c:	003e4f06 	br	4cf5c <__alt_data_end+0xfffdaf5c>
   4d620:	d8c02215 	stw	r3,136(sp)
   4d624:	002b883a 	mov	r21,zero
   4d628:	003db806 	br	4cd0c <__alt_data_end+0xfffdad0c>
   4d62c:	d811883a 	mov	r8,sp
   4d630:	003e9606 	br	4d08c <__alt_data_end+0xfffdb08c>
   4d634:	01000174 	movhi	r4,5
   4d638:	21184e04 	addi	r4,r4,24888
   4d63c:	d9002315 	stw	r4,140(sp)
   4d640:	003e6306 	br	4cfd0 <__alt_data_end+0xfffdafd0>
   4d644:	b0c00043 	ldbu	r3,1(r22)
   4d648:	8c400814 	ori	r17,r17,32
   4d64c:	b5800044 	addi	r22,r22,1
   4d650:	18c03fcc 	andi	r3,r3,255
   4d654:	18c0201c 	xori	r3,r3,128
   4d658:	18ffe004 	addi	r3,r3,-128
   4d65c:	003b9c06 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4d660:	b809883a 	mov	r4,r23
   4d664:	da002a15 	stw	r8,168(sp)
   4d668:	00411380 	call	41138 <strlen>
   4d66c:	1029883a 	mov	r20,r2
   4d670:	dd401d83 	ldbu	r21,118(sp)
   4d674:	df002215 	stw	fp,136(sp)
   4d678:	0021883a 	mov	r16,zero
   4d67c:	da002a17 	ldw	r8,168(sp)
   4d680:	003c3906 	br	4c768 <__alt_data_end+0xfffda768>
   4d684:	d9402017 	ldw	r5,128(sp)
   4d688:	d9002117 	ldw	r4,132(sp)
   4d68c:	d9801a04 	addi	r6,sp,104
   4d690:	004c2480 	call	4c248 <__sprint_r.part.0>
   4d694:	103e691e 	bne	r2,zero,4d03c <__alt_data_end+0xfffdb03c>
   4d698:	d9001b17 	ldw	r4,108(sp)
   4d69c:	d8801c17 	ldw	r2,112(sp)
   4d6a0:	d811883a 	mov	r8,sp
   4d6a4:	21400044 	addi	r5,r4,1
   4d6a8:	003e2e06 	br	4cf64 <__alt_data_end+0xfffdaf64>
   4d6ac:	01000174 	movhi	r4,5
   4d6b0:	21185204 	addi	r4,r4,24904
   4d6b4:	d9002315 	stw	r4,140(sp)
   4d6b8:	d9001b17 	ldw	r4,108(sp)
   4d6bc:	21000044 	addi	r4,r4,1
   4d6c0:	003c5e06 	br	4c83c <__alt_data_end+0xfffda83c>
   4d6c4:	002b883a 	mov	r21,zero
   4d6c8:	00800084 	movi	r2,2
   4d6cc:	10803fcc 	andi	r2,r2,255
   4d6d0:	01000044 	movi	r4,1
   4d6d4:	11002b26 	beq	r2,r4,4d784 <___vfiprintf_internal_r+0x1428>
   4d6d8:	01000084 	movi	r4,2
   4d6dc:	11002b1e 	bne	r2,r4,4d78c <___vfiprintf_internal_r+0x1430>
   4d6e0:	1823883a 	mov	r17,r3
   4d6e4:	003ee506 	br	4d27c <__alt_data_end+0xfffdb27c>
   4d6e8:	8807883a 	mov	r3,r17
   4d6ec:	00800044 	movi	r2,1
   4d6f0:	003ff606 	br	4d6cc <__alt_data_end+0xfffdb6cc>
   4d6f4:	00800184 	movi	r2,6
   4d6f8:	1400012e 	bgeu	r2,r16,4d700 <___vfiprintf_internal_r+0x13a4>
   4d6fc:	1021883a 	mov	r16,r2
   4d700:	8029883a 	mov	r20,r16
   4d704:	8027883a 	mov	r19,r16
   4d708:	80002216 	blt	r16,zero,4d794 <___vfiprintf_internal_r+0x1438>
   4d70c:	05c00174 	movhi	r23,5
   4d710:	df002215 	stw	fp,136(sp)
   4d714:	bdd7e204 	addi	r23,r23,24456
   4d718:	003cfb06 	br	4cb08 <__alt_data_end+0xfffdab08>
   4d71c:	d9002217 	ldw	r4,136(sp)
   4d720:	d9402417 	ldw	r5,144(sp)
   4d724:	20800017 	ldw	r2,0(r4)
   4d728:	21000104 	addi	r4,r4,4
   4d72c:	d9002215 	stw	r4,136(sp)
   4d730:	11400015 	stw	r5,0(r2)
   4d734:	003b3d06 	br	4c42c <__alt_data_end+0xfffda42c>
   4d738:	01400174 	movhi	r5,5
   4d73c:	29585204 	addi	r5,r5,24904
   4d740:	d9402315 	stw	r5,140(sp)
   4d744:	d9401b17 	ldw	r5,108(sp)
   4d748:	29400044 	addi	r5,r5,1
   4d74c:	003e6d06 	br	4d104 <__alt_data_end+0xfffdb104>
   4d750:	8029883a 	mov	r20,r16
   4d754:	dd401d83 	ldbu	r21,118(sp)
   4d758:	df002215 	stw	fp,136(sp)
   4d75c:	0021883a 	mov	r16,zero
   4d760:	003c0106 	br	4c768 <__alt_data_end+0xfffda768>
   4d764:	00c00174 	movhi	r3,5
   4d768:	18d84e04 	addi	r3,r3,24888
   4d76c:	d8c02315 	stw	r3,140(sp)
   4d770:	280d883a 	mov	r6,r5
   4d774:	003c6906 	br	4c91c <__alt_data_end+0xfffda91c>
   4d778:	802d883a 	mov	r22,r16
   4d77c:	0021883a 	mov	r16,zero
   4d780:	003b5406 	br	4c4d4 <__alt_data_end+0xfffda4d4>
   4d784:	1823883a 	mov	r17,r3
   4d788:	003cf306 	br	4cb58 <__alt_data_end+0xfffdab58>
   4d78c:	1823883a 	mov	r17,r3
   4d790:	003cad06 	br	4ca48 <__alt_data_end+0xfffdaa48>
   4d794:	0027883a 	mov	r19,zero
   4d798:	003fdc06 	br	4d70c <__alt_data_end+0xfffdb70c>
   4d79c:	d9402217 	ldw	r5,136(sp)
   4d7a0:	8005883a 	mov	r2,r16
   4d7a4:	b0c00043 	ldbu	r3,1(r22)
   4d7a8:	2c000017 	ldw	r16,0(r5)
   4d7ac:	29000104 	addi	r4,r5,4
   4d7b0:	d9002215 	stw	r4,136(sp)
   4d7b4:	102d883a 	mov	r22,r2
   4d7b8:	803fa50e 	bge	r16,zero,4d650 <__alt_data_end+0xfffdb650>
   4d7bc:	18c03fcc 	andi	r3,r3,255
   4d7c0:	18c0201c 	xori	r3,r3,128
   4d7c4:	043fffc4 	movi	r16,-1
   4d7c8:	18ffe004 	addi	r3,r3,-128
   4d7cc:	003b4006 	br	4c4d0 <__alt_data_end+0xfffda4d0>
   4d7d0:	d9402303 	ldbu	r5,140(sp)
   4d7d4:	d9401d85 	stb	r5,118(sp)
   4d7d8:	003cae06 	br	4ca94 <__alt_data_end+0xfffdaa94>
   4d7dc:	d8c02303 	ldbu	r3,140(sp)
   4d7e0:	d8c01d85 	stb	r3,118(sp)
   4d7e4:	003d1406 	br	4cc38 <__alt_data_end+0xfffdac38>
   4d7e8:	d8c02303 	ldbu	r3,140(sp)
   4d7ec:	d8c01d85 	stb	r3,118(sp)
   4d7f0:	003cca06 	br	4cb1c <__alt_data_end+0xfffdab1c>
   4d7f4:	8880004c 	andi	r2,r17,1
   4d7f8:	002b883a 	mov	r21,zero
   4d7fc:	10000526 	beq	r2,zero,4d814 <___vfiprintf_internal_r+0x14b8>
   4d800:	00800c04 	movi	r2,48
   4d804:	d88019c5 	stb	r2,103(sp)
   4d808:	dd002817 	ldw	r20,160(sp)
   4d80c:	ddc019c4 	addi	r23,sp,103
   4d810:	003bd506 	br	4c768 <__alt_data_end+0xfffda768>
   4d814:	0029883a 	mov	r20,zero
   4d818:	ddc01a04 	addi	r23,sp,104
   4d81c:	003bd206 	br	4c768 <__alt_data_end+0xfffda768>
   4d820:	d9002303 	ldbu	r4,140(sp)
   4d824:	d9001d85 	stb	r4,118(sp)
   4d828:	003da606 	br	4cec4 <__alt_data_end+0xfffdaec4>
   4d82c:	d8c02303 	ldbu	r3,140(sp)
   4d830:	d8c01d85 	stb	r3,118(sp)
   4d834:	003c7606 	br	4ca10 <__alt_data_end+0xfffdaa10>
   4d838:	d8c02303 	ldbu	r3,140(sp)
   4d83c:	d8c01d85 	stb	r3,118(sp)
   4d840:	003c6506 	br	4c9d8 <__alt_data_end+0xfffda9d8>
   4d844:	d9002303 	ldbu	r4,140(sp)
   4d848:	d9001d85 	stb	r4,118(sp)
   4d84c:	003d3d06 	br	4cd44 <__alt_data_end+0xfffdad44>
   4d850:	d8c02303 	ldbu	r3,140(sp)
   4d854:	d8c01d85 	stb	r3,118(sp)
   4d858:	003d1d06 	br	4ccd0 <__alt_data_end+0xfffdacd0>
   4d85c:	d8c02303 	ldbu	r3,140(sp)
   4d860:	d8c01d85 	stb	r3,118(sp)
   4d864:	003d0306 	br	4cc74 <__alt_data_end+0xfffdac74>

0004d868 <__vfiprintf_internal>:
   4d868:	00800174 	movhi	r2,5
   4d86c:	109f2d04 	addi	r2,r2,31924
   4d870:	300f883a 	mov	r7,r6
   4d874:	280d883a 	mov	r6,r5
   4d878:	200b883a 	mov	r5,r4
   4d87c:	11000017 	ldw	r4,0(r2)
   4d880:	004c35c1 	jmpi	4c35c <___vfiprintf_internal_r>

0004d884 <__sbprintf>:
   4d884:	2880030b 	ldhu	r2,12(r5)
   4d888:	2ac01917 	ldw	r11,100(r5)
   4d88c:	2a80038b 	ldhu	r10,14(r5)
   4d890:	2a400717 	ldw	r9,28(r5)
   4d894:	2a000917 	ldw	r8,36(r5)
   4d898:	defee204 	addi	sp,sp,-1144
   4d89c:	00c10004 	movi	r3,1024
   4d8a0:	dc011a15 	stw	r16,1128(sp)
   4d8a4:	10bfff4c 	andi	r2,r2,65533
   4d8a8:	2821883a 	mov	r16,r5
   4d8ac:	d8cb883a 	add	r5,sp,r3
   4d8b0:	dc811c15 	stw	r18,1136(sp)
   4d8b4:	dc411b15 	stw	r17,1132(sp)
   4d8b8:	dfc11d15 	stw	ra,1140(sp)
   4d8bc:	2025883a 	mov	r18,r4
   4d8c0:	d881030d 	sth	r2,1036(sp)
   4d8c4:	dac11915 	stw	r11,1124(sp)
   4d8c8:	da81038d 	sth	r10,1038(sp)
   4d8cc:	da410715 	stw	r9,1052(sp)
   4d8d0:	da010915 	stw	r8,1060(sp)
   4d8d4:	dec10015 	stw	sp,1024(sp)
   4d8d8:	dec10415 	stw	sp,1040(sp)
   4d8dc:	d8c10215 	stw	r3,1032(sp)
   4d8e0:	d8c10515 	stw	r3,1044(sp)
   4d8e4:	d8010615 	stw	zero,1048(sp)
   4d8e8:	004c35c0 	call	4c35c <___vfiprintf_internal_r>
   4d8ec:	1023883a 	mov	r17,r2
   4d8f0:	10000416 	blt	r2,zero,4d904 <__sbprintf+0x80>
   4d8f4:	d9410004 	addi	r5,sp,1024
   4d8f8:	9009883a 	mov	r4,r18
   4d8fc:	00474600 	call	47460 <_fflush_r>
   4d900:	10000d1e 	bne	r2,zero,4d938 <__sbprintf+0xb4>
   4d904:	d881030b 	ldhu	r2,1036(sp)
   4d908:	1080100c 	andi	r2,r2,64
   4d90c:	10000326 	beq	r2,zero,4d91c <__sbprintf+0x98>
   4d910:	8080030b 	ldhu	r2,12(r16)
   4d914:	10801014 	ori	r2,r2,64
   4d918:	8080030d 	sth	r2,12(r16)
   4d91c:	8805883a 	mov	r2,r17
   4d920:	dfc11d17 	ldw	ra,1140(sp)
   4d924:	dc811c17 	ldw	r18,1136(sp)
   4d928:	dc411b17 	ldw	r17,1132(sp)
   4d92c:	dc011a17 	ldw	r16,1128(sp)
   4d930:	dec11e04 	addi	sp,sp,1144
   4d934:	f800283a 	ret
   4d938:	047fffc4 	movi	r17,-1
   4d93c:	003ff106 	br	4d904 <__alt_data_end+0xfffdb904>

0004d940 <__swbuf_r>:
   4d940:	defffb04 	addi	sp,sp,-20
   4d944:	dcc00315 	stw	r19,12(sp)
   4d948:	dc800215 	stw	r18,8(sp)
   4d94c:	dc000015 	stw	r16,0(sp)
   4d950:	dfc00415 	stw	ra,16(sp)
   4d954:	dc400115 	stw	r17,4(sp)
   4d958:	2025883a 	mov	r18,r4
   4d95c:	2827883a 	mov	r19,r5
   4d960:	3021883a 	mov	r16,r6
   4d964:	20000226 	beq	r4,zero,4d970 <__swbuf_r+0x30>
   4d968:	20800e17 	ldw	r2,56(r4)
   4d96c:	10004226 	beq	r2,zero,4da78 <__swbuf_r+0x138>
   4d970:	80800617 	ldw	r2,24(r16)
   4d974:	8100030b 	ldhu	r4,12(r16)
   4d978:	80800215 	stw	r2,8(r16)
   4d97c:	2080020c 	andi	r2,r4,8
   4d980:	10003626 	beq	r2,zero,4da5c <__swbuf_r+0x11c>
   4d984:	80c00417 	ldw	r3,16(r16)
   4d988:	18003426 	beq	r3,zero,4da5c <__swbuf_r+0x11c>
   4d98c:	2088000c 	andi	r2,r4,8192
   4d990:	9c403fcc 	andi	r17,r19,255
   4d994:	10001a26 	beq	r2,zero,4da00 <__swbuf_r+0xc0>
   4d998:	80800017 	ldw	r2,0(r16)
   4d99c:	81000517 	ldw	r4,20(r16)
   4d9a0:	10c7c83a 	sub	r3,r2,r3
   4d9a4:	1900200e 	bge	r3,r4,4da28 <__swbuf_r+0xe8>
   4d9a8:	18c00044 	addi	r3,r3,1
   4d9ac:	81000217 	ldw	r4,8(r16)
   4d9b0:	11400044 	addi	r5,r2,1
   4d9b4:	81400015 	stw	r5,0(r16)
   4d9b8:	213fffc4 	addi	r4,r4,-1
   4d9bc:	81000215 	stw	r4,8(r16)
   4d9c0:	14c00005 	stb	r19,0(r2)
   4d9c4:	80800517 	ldw	r2,20(r16)
   4d9c8:	10c01e26 	beq	r2,r3,4da44 <__swbuf_r+0x104>
   4d9cc:	8080030b 	ldhu	r2,12(r16)
   4d9d0:	1080004c 	andi	r2,r2,1
   4d9d4:	10000226 	beq	r2,zero,4d9e0 <__swbuf_r+0xa0>
   4d9d8:	00800284 	movi	r2,10
   4d9dc:	88801926 	beq	r17,r2,4da44 <__swbuf_r+0x104>
   4d9e0:	8805883a 	mov	r2,r17
   4d9e4:	dfc00417 	ldw	ra,16(sp)
   4d9e8:	dcc00317 	ldw	r19,12(sp)
   4d9ec:	dc800217 	ldw	r18,8(sp)
   4d9f0:	dc400117 	ldw	r17,4(sp)
   4d9f4:	dc000017 	ldw	r16,0(sp)
   4d9f8:	dec00504 	addi	sp,sp,20
   4d9fc:	f800283a 	ret
   4da00:	81401917 	ldw	r5,100(r16)
   4da04:	00b7ffc4 	movi	r2,-8193
   4da08:	21080014 	ori	r4,r4,8192
   4da0c:	2884703a 	and	r2,r5,r2
   4da10:	80801915 	stw	r2,100(r16)
   4da14:	80800017 	ldw	r2,0(r16)
   4da18:	8100030d 	sth	r4,12(r16)
   4da1c:	81000517 	ldw	r4,20(r16)
   4da20:	10c7c83a 	sub	r3,r2,r3
   4da24:	193fe016 	blt	r3,r4,4d9a8 <__alt_data_end+0xfffdb9a8>
   4da28:	800b883a 	mov	r5,r16
   4da2c:	9009883a 	mov	r4,r18
   4da30:	00474600 	call	47460 <_fflush_r>
   4da34:	1000071e 	bne	r2,zero,4da54 <__swbuf_r+0x114>
   4da38:	80800017 	ldw	r2,0(r16)
   4da3c:	00c00044 	movi	r3,1
   4da40:	003fda06 	br	4d9ac <__alt_data_end+0xfffdb9ac>
   4da44:	800b883a 	mov	r5,r16
   4da48:	9009883a 	mov	r4,r18
   4da4c:	00474600 	call	47460 <_fflush_r>
   4da50:	103fe326 	beq	r2,zero,4d9e0 <__alt_data_end+0xfffdb9e0>
   4da54:	00bfffc4 	movi	r2,-1
   4da58:	003fe206 	br	4d9e4 <__alt_data_end+0xfffdb9e4>
   4da5c:	800b883a 	mov	r5,r16
   4da60:	9009883a 	mov	r4,r18
   4da64:	00458400 	call	45840 <__swsetup_r>
   4da68:	103ffa1e 	bne	r2,zero,4da54 <__alt_data_end+0xfffdba54>
   4da6c:	8100030b 	ldhu	r4,12(r16)
   4da70:	80c00417 	ldw	r3,16(r16)
   4da74:	003fc506 	br	4d98c <__alt_data_end+0xfffdb98c>
   4da78:	004784c0 	call	4784c <__sinit>
   4da7c:	003fbc06 	br	4d970 <__alt_data_end+0xfffdb970>

0004da80 <__swbuf>:
   4da80:	00800174 	movhi	r2,5
   4da84:	109f2d04 	addi	r2,r2,31924
   4da88:	280d883a 	mov	r6,r5
   4da8c:	200b883a 	mov	r5,r4
   4da90:	11000017 	ldw	r4,0(r2)
   4da94:	004d9401 	jmpi	4d940 <__swbuf_r>

0004da98 <_write_r>:
   4da98:	defffd04 	addi	sp,sp,-12
   4da9c:	2805883a 	mov	r2,r5
   4daa0:	dc000015 	stw	r16,0(sp)
   4daa4:	040001b4 	movhi	r16,6
   4daa8:	dc400115 	stw	r17,4(sp)
   4daac:	300b883a 	mov	r5,r6
   4dab0:	84261a04 	addi	r16,r16,-26520
   4dab4:	2023883a 	mov	r17,r4
   4dab8:	380d883a 	mov	r6,r7
   4dabc:	1009883a 	mov	r4,r2
   4dac0:	dfc00215 	stw	ra,8(sp)
   4dac4:	80000015 	stw	zero,0(r16)
   4dac8:	0051f200 	call	51f20 <write>
   4dacc:	00ffffc4 	movi	r3,-1
   4dad0:	10c00526 	beq	r2,r3,4dae8 <_write_r+0x50>
   4dad4:	dfc00217 	ldw	ra,8(sp)
   4dad8:	dc400117 	ldw	r17,4(sp)
   4dadc:	dc000017 	ldw	r16,0(sp)
   4dae0:	dec00304 	addi	sp,sp,12
   4dae4:	f800283a 	ret
   4dae8:	80c00017 	ldw	r3,0(r16)
   4daec:	183ff926 	beq	r3,zero,4dad4 <__alt_data_end+0xfffdbad4>
   4daf0:	88c00015 	stw	r3,0(r17)
   4daf4:	003ff706 	br	4dad4 <__alt_data_end+0xfffdbad4>

0004daf8 <_close_r>:
   4daf8:	defffd04 	addi	sp,sp,-12
   4dafc:	dc000015 	stw	r16,0(sp)
   4db00:	040001b4 	movhi	r16,6
   4db04:	dc400115 	stw	r17,4(sp)
   4db08:	84261a04 	addi	r16,r16,-26520
   4db0c:	2023883a 	mov	r17,r4
   4db10:	2809883a 	mov	r4,r5
   4db14:	dfc00215 	stw	ra,8(sp)
   4db18:	80000015 	stw	zero,0(r16)
   4db1c:	00516c80 	call	516c8 <close>
   4db20:	00ffffc4 	movi	r3,-1
   4db24:	10c00526 	beq	r2,r3,4db3c <_close_r+0x44>
   4db28:	dfc00217 	ldw	ra,8(sp)
   4db2c:	dc400117 	ldw	r17,4(sp)
   4db30:	dc000017 	ldw	r16,0(sp)
   4db34:	dec00304 	addi	sp,sp,12
   4db38:	f800283a 	ret
   4db3c:	80c00017 	ldw	r3,0(r16)
   4db40:	183ff926 	beq	r3,zero,4db28 <__alt_data_end+0xfffdbb28>
   4db44:	88c00015 	stw	r3,0(r17)
   4db48:	003ff706 	br	4db28 <__alt_data_end+0xfffdbb28>

0004db4c <_calloc_r>:
   4db4c:	defffe04 	addi	sp,sp,-8
   4db50:	2805883a 	mov	r2,r5
   4db54:	dc000015 	stw	r16,0(sp)
   4db58:	300b883a 	mov	r5,r6
   4db5c:	2021883a 	mov	r16,r4
   4db60:	1009883a 	mov	r4,r2
   4db64:	dfc00115 	stw	ra,4(sp)
   4db68:	0040eec0 	call	40eec <__mulsi3>
   4db6c:	100b883a 	mov	r5,r2
   4db70:	8009883a 	mov	r4,r16
   4db74:	00485b80 	call	485b8 <_malloc_r>
   4db78:	10002926 	beq	r2,zero,4dc20 <_calloc_r+0xd4>
   4db7c:	11bfff17 	ldw	r6,-4(r2)
   4db80:	1021883a 	mov	r16,r2
   4db84:	00bfff04 	movi	r2,-4
   4db88:	308c703a 	and	r6,r6,r2
   4db8c:	00c00904 	movi	r3,36
   4db90:	308d883a 	add	r6,r6,r2
   4db94:	19801636 	bltu	r3,r6,4dbf0 <_calloc_r+0xa4>
   4db98:	008004c4 	movi	r2,19
   4db9c:	11800b2e 	bgeu	r2,r6,4dbcc <_calloc_r+0x80>
   4dba0:	80000015 	stw	zero,0(r16)
   4dba4:	80000115 	stw	zero,4(r16)
   4dba8:	008006c4 	movi	r2,27
   4dbac:	11801a2e 	bgeu	r2,r6,4dc18 <_calloc_r+0xcc>
   4dbb0:	80000215 	stw	zero,8(r16)
   4dbb4:	80000315 	stw	zero,12(r16)
   4dbb8:	30c0151e 	bne	r6,r3,4dc10 <_calloc_r+0xc4>
   4dbbc:	80000415 	stw	zero,16(r16)
   4dbc0:	80800604 	addi	r2,r16,24
   4dbc4:	80000515 	stw	zero,20(r16)
   4dbc8:	00000106 	br	4dbd0 <_calloc_r+0x84>
   4dbcc:	8005883a 	mov	r2,r16
   4dbd0:	10000015 	stw	zero,0(r2)
   4dbd4:	10000115 	stw	zero,4(r2)
   4dbd8:	10000215 	stw	zero,8(r2)
   4dbdc:	8005883a 	mov	r2,r16
   4dbe0:	dfc00117 	ldw	ra,4(sp)
   4dbe4:	dc000017 	ldw	r16,0(sp)
   4dbe8:	dec00204 	addi	sp,sp,8
   4dbec:	f800283a 	ret
   4dbf0:	000b883a 	mov	r5,zero
   4dbf4:	8009883a 	mov	r4,r16
   4dbf8:	004914c0 	call	4914c <memset>
   4dbfc:	8005883a 	mov	r2,r16
   4dc00:	dfc00117 	ldw	ra,4(sp)
   4dc04:	dc000017 	ldw	r16,0(sp)
   4dc08:	dec00204 	addi	sp,sp,8
   4dc0c:	f800283a 	ret
   4dc10:	80800404 	addi	r2,r16,16
   4dc14:	003fee06 	br	4dbd0 <__alt_data_end+0xfffdbbd0>
   4dc18:	80800204 	addi	r2,r16,8
   4dc1c:	003fec06 	br	4dbd0 <__alt_data_end+0xfffdbbd0>
   4dc20:	0005883a 	mov	r2,zero
   4dc24:	003fee06 	br	4dbe0 <__alt_data_end+0xfffdbbe0>

0004dc28 <_fclose_r>:
   4dc28:	28003926 	beq	r5,zero,4dd10 <_fclose_r+0xe8>
   4dc2c:	defffc04 	addi	sp,sp,-16
   4dc30:	dc400115 	stw	r17,4(sp)
   4dc34:	dc000015 	stw	r16,0(sp)
   4dc38:	dfc00315 	stw	ra,12(sp)
   4dc3c:	dc800215 	stw	r18,8(sp)
   4dc40:	2023883a 	mov	r17,r4
   4dc44:	2821883a 	mov	r16,r5
   4dc48:	20000226 	beq	r4,zero,4dc54 <_fclose_r+0x2c>
   4dc4c:	20800e17 	ldw	r2,56(r4)
   4dc50:	10002726 	beq	r2,zero,4dcf0 <_fclose_r+0xc8>
   4dc54:	8080030f 	ldh	r2,12(r16)
   4dc58:	1000071e 	bne	r2,zero,4dc78 <_fclose_r+0x50>
   4dc5c:	0005883a 	mov	r2,zero
   4dc60:	dfc00317 	ldw	ra,12(sp)
   4dc64:	dc800217 	ldw	r18,8(sp)
   4dc68:	dc400117 	ldw	r17,4(sp)
   4dc6c:	dc000017 	ldw	r16,0(sp)
   4dc70:	dec00404 	addi	sp,sp,16
   4dc74:	f800283a 	ret
   4dc78:	800b883a 	mov	r5,r16
   4dc7c:	8809883a 	mov	r4,r17
   4dc80:	00472440 	call	47244 <__sflush_r>
   4dc84:	1025883a 	mov	r18,r2
   4dc88:	80800b17 	ldw	r2,44(r16)
   4dc8c:	10000426 	beq	r2,zero,4dca0 <_fclose_r+0x78>
   4dc90:	81400717 	ldw	r5,28(r16)
   4dc94:	8809883a 	mov	r4,r17
   4dc98:	103ee83a 	callr	r2
   4dc9c:	10001616 	blt	r2,zero,4dcf8 <_fclose_r+0xd0>
   4dca0:	8080030b 	ldhu	r2,12(r16)
   4dca4:	1080200c 	andi	r2,r2,128
   4dca8:	1000151e 	bne	r2,zero,4dd00 <_fclose_r+0xd8>
   4dcac:	81400c17 	ldw	r5,48(r16)
   4dcb0:	28000526 	beq	r5,zero,4dcc8 <_fclose_r+0xa0>
   4dcb4:	80801004 	addi	r2,r16,64
   4dcb8:	28800226 	beq	r5,r2,4dcc4 <_fclose_r+0x9c>
   4dcbc:	8809883a 	mov	r4,r17
   4dcc0:	00479c00 	call	479c0 <_free_r>
   4dcc4:	80000c15 	stw	zero,48(r16)
   4dcc8:	81401117 	ldw	r5,68(r16)
   4dccc:	28000326 	beq	r5,zero,4dcdc <_fclose_r+0xb4>
   4dcd0:	8809883a 	mov	r4,r17
   4dcd4:	00479c00 	call	479c0 <_free_r>
   4dcd8:	80001115 	stw	zero,68(r16)
   4dcdc:	004785c0 	call	4785c <__sfp_lock_acquire>
   4dce0:	8000030d 	sth	zero,12(r16)
   4dce4:	00478600 	call	47860 <__sfp_lock_release>
   4dce8:	9005883a 	mov	r2,r18
   4dcec:	003fdc06 	br	4dc60 <__alt_data_end+0xfffdbc60>
   4dcf0:	004784c0 	call	4784c <__sinit>
   4dcf4:	003fd706 	br	4dc54 <__alt_data_end+0xfffdbc54>
   4dcf8:	04bfffc4 	movi	r18,-1
   4dcfc:	003fe806 	br	4dca0 <__alt_data_end+0xfffdbca0>
   4dd00:	81400417 	ldw	r5,16(r16)
   4dd04:	8809883a 	mov	r4,r17
   4dd08:	00479c00 	call	479c0 <_free_r>
   4dd0c:	003fe706 	br	4dcac <__alt_data_end+0xfffdbcac>
   4dd10:	0005883a 	mov	r2,zero
   4dd14:	f800283a 	ret

0004dd18 <fclose>:
   4dd18:	00800174 	movhi	r2,5
   4dd1c:	109f2d04 	addi	r2,r2,31924
   4dd20:	200b883a 	mov	r5,r4
   4dd24:	11000017 	ldw	r4,0(r2)
   4dd28:	004dc281 	jmpi	4dc28 <_fclose_r>

0004dd2c <__fputwc>:
   4dd2c:	defff804 	addi	sp,sp,-32
   4dd30:	dcc00415 	stw	r19,16(sp)
   4dd34:	dc800315 	stw	r18,12(sp)
   4dd38:	dc000115 	stw	r16,4(sp)
   4dd3c:	dfc00715 	stw	ra,28(sp)
   4dd40:	dd400615 	stw	r21,24(sp)
   4dd44:	dd000515 	stw	r20,20(sp)
   4dd48:	dc400215 	stw	r17,8(sp)
   4dd4c:	2027883a 	mov	r19,r4
   4dd50:	2825883a 	mov	r18,r5
   4dd54:	3021883a 	mov	r16,r6
   4dd58:	00483a80 	call	483a8 <__locale_mb_cur_max>
   4dd5c:	00c00044 	movi	r3,1
   4dd60:	10c03e26 	beq	r2,r3,4de5c <__fputwc+0x130>
   4dd64:	81c01704 	addi	r7,r16,92
   4dd68:	900d883a 	mov	r6,r18
   4dd6c:	d80b883a 	mov	r5,sp
   4dd70:	9809883a 	mov	r4,r19
   4dd74:	004e0a40 	call	4e0a4 <_wcrtomb_r>
   4dd78:	1029883a 	mov	r20,r2
   4dd7c:	00bfffc4 	movi	r2,-1
   4dd80:	a0802026 	beq	r20,r2,4de04 <__fputwc+0xd8>
   4dd84:	d9400003 	ldbu	r5,0(sp)
   4dd88:	a0001c26 	beq	r20,zero,4ddfc <__fputwc+0xd0>
   4dd8c:	0023883a 	mov	r17,zero
   4dd90:	05400284 	movi	r21,10
   4dd94:	00000906 	br	4ddbc <__fputwc+0x90>
   4dd98:	80800017 	ldw	r2,0(r16)
   4dd9c:	11400005 	stb	r5,0(r2)
   4dda0:	80c00017 	ldw	r3,0(r16)
   4dda4:	18c00044 	addi	r3,r3,1
   4dda8:	80c00015 	stw	r3,0(r16)
   4ddac:	8c400044 	addi	r17,r17,1
   4ddb0:	dc45883a 	add	r2,sp,r17
   4ddb4:	8d00112e 	bgeu	r17,r20,4ddfc <__fputwc+0xd0>
   4ddb8:	11400003 	ldbu	r5,0(r2)
   4ddbc:	80c00217 	ldw	r3,8(r16)
   4ddc0:	18ffffc4 	addi	r3,r3,-1
   4ddc4:	80c00215 	stw	r3,8(r16)
   4ddc8:	183ff30e 	bge	r3,zero,4dd98 <__alt_data_end+0xfffdbd98>
   4ddcc:	80800617 	ldw	r2,24(r16)
   4ddd0:	18801916 	blt	r3,r2,4de38 <__fputwc+0x10c>
   4ddd4:	80800017 	ldw	r2,0(r16)
   4ddd8:	11400005 	stb	r5,0(r2)
   4dddc:	80800017 	ldw	r2,0(r16)
   4dde0:	10c00003 	ldbu	r3,0(r2)
   4dde4:	10800044 	addi	r2,r2,1
   4dde8:	1d402326 	beq	r3,r21,4de78 <__fputwc+0x14c>
   4ddec:	80800015 	stw	r2,0(r16)
   4ddf0:	8c400044 	addi	r17,r17,1
   4ddf4:	dc45883a 	add	r2,sp,r17
   4ddf8:	8d3fef36 	bltu	r17,r20,4ddb8 <__alt_data_end+0xfffdbdb8>
   4ddfc:	9005883a 	mov	r2,r18
   4de00:	00000406 	br	4de14 <__fputwc+0xe8>
   4de04:	80c0030b 	ldhu	r3,12(r16)
   4de08:	a005883a 	mov	r2,r20
   4de0c:	18c01014 	ori	r3,r3,64
   4de10:	80c0030d 	sth	r3,12(r16)
   4de14:	dfc00717 	ldw	ra,28(sp)
   4de18:	dd400617 	ldw	r21,24(sp)
   4de1c:	dd000517 	ldw	r20,20(sp)
   4de20:	dcc00417 	ldw	r19,16(sp)
   4de24:	dc800317 	ldw	r18,12(sp)
   4de28:	dc400217 	ldw	r17,8(sp)
   4de2c:	dc000117 	ldw	r16,4(sp)
   4de30:	dec00804 	addi	sp,sp,32
   4de34:	f800283a 	ret
   4de38:	800d883a 	mov	r6,r16
   4de3c:	29403fcc 	andi	r5,r5,255
   4de40:	9809883a 	mov	r4,r19
   4de44:	004d9400 	call	4d940 <__swbuf_r>
   4de48:	10bfffe0 	cmpeqi	r2,r2,-1
   4de4c:	10803fcc 	andi	r2,r2,255
   4de50:	103fd626 	beq	r2,zero,4ddac <__alt_data_end+0xfffdbdac>
   4de54:	00bfffc4 	movi	r2,-1
   4de58:	003fee06 	br	4de14 <__alt_data_end+0xfffdbe14>
   4de5c:	90ffffc4 	addi	r3,r18,-1
   4de60:	01003f84 	movi	r4,254
   4de64:	20ffbf36 	bltu	r4,r3,4dd64 <__alt_data_end+0xfffdbd64>
   4de68:	900b883a 	mov	r5,r18
   4de6c:	dc800005 	stb	r18,0(sp)
   4de70:	1029883a 	mov	r20,r2
   4de74:	003fc506 	br	4dd8c <__alt_data_end+0xfffdbd8c>
   4de78:	800d883a 	mov	r6,r16
   4de7c:	a80b883a 	mov	r5,r21
   4de80:	9809883a 	mov	r4,r19
   4de84:	004d9400 	call	4d940 <__swbuf_r>
   4de88:	10bfffe0 	cmpeqi	r2,r2,-1
   4de8c:	003fef06 	br	4de4c <__alt_data_end+0xfffdbe4c>

0004de90 <_fputwc_r>:
   4de90:	3080030b 	ldhu	r2,12(r6)
   4de94:	10c8000c 	andi	r3,r2,8192
   4de98:	1800051e 	bne	r3,zero,4deb0 <_fputwc_r+0x20>
   4de9c:	30c01917 	ldw	r3,100(r6)
   4dea0:	10880014 	ori	r2,r2,8192
   4dea4:	3080030d 	sth	r2,12(r6)
   4dea8:	18880014 	ori	r2,r3,8192
   4deac:	30801915 	stw	r2,100(r6)
   4deb0:	004dd2c1 	jmpi	4dd2c <__fputwc>

0004deb4 <fputwc>:
   4deb4:	00800174 	movhi	r2,5
   4deb8:	defffc04 	addi	sp,sp,-16
   4debc:	109f2d04 	addi	r2,r2,31924
   4dec0:	dc000115 	stw	r16,4(sp)
   4dec4:	14000017 	ldw	r16,0(r2)
   4dec8:	dc400215 	stw	r17,8(sp)
   4decc:	dfc00315 	stw	ra,12(sp)
   4ded0:	2023883a 	mov	r17,r4
   4ded4:	80000226 	beq	r16,zero,4dee0 <fputwc+0x2c>
   4ded8:	80800e17 	ldw	r2,56(r16)
   4dedc:	10001026 	beq	r2,zero,4df20 <fputwc+0x6c>
   4dee0:	2880030b 	ldhu	r2,12(r5)
   4dee4:	10c8000c 	andi	r3,r2,8192
   4dee8:	1800051e 	bne	r3,zero,4df00 <fputwc+0x4c>
   4deec:	28c01917 	ldw	r3,100(r5)
   4def0:	10880014 	ori	r2,r2,8192
   4def4:	2880030d 	sth	r2,12(r5)
   4def8:	18880014 	ori	r2,r3,8192
   4defc:	28801915 	stw	r2,100(r5)
   4df00:	280d883a 	mov	r6,r5
   4df04:	8009883a 	mov	r4,r16
   4df08:	880b883a 	mov	r5,r17
   4df0c:	dfc00317 	ldw	ra,12(sp)
   4df10:	dc400217 	ldw	r17,8(sp)
   4df14:	dc000117 	ldw	r16,4(sp)
   4df18:	dec00404 	addi	sp,sp,16
   4df1c:	004dd2c1 	jmpi	4dd2c <__fputwc>
   4df20:	8009883a 	mov	r4,r16
   4df24:	d9400015 	stw	r5,0(sp)
   4df28:	004784c0 	call	4784c <__sinit>
   4df2c:	d9400017 	ldw	r5,0(sp)
   4df30:	003feb06 	br	4dee0 <__alt_data_end+0xfffdbee0>

0004df34 <_fstat_r>:
   4df34:	defffd04 	addi	sp,sp,-12
   4df38:	2805883a 	mov	r2,r5
   4df3c:	dc000015 	stw	r16,0(sp)
   4df40:	040001b4 	movhi	r16,6
   4df44:	dc400115 	stw	r17,4(sp)
   4df48:	84261a04 	addi	r16,r16,-26520
   4df4c:	2023883a 	mov	r17,r4
   4df50:	300b883a 	mov	r5,r6
   4df54:	1009883a 	mov	r4,r2
   4df58:	dfc00215 	stw	ra,8(sp)
   4df5c:	80000015 	stw	zero,0(r16)
   4df60:	00518080 	call	51808 <fstat>
   4df64:	00ffffc4 	movi	r3,-1
   4df68:	10c00526 	beq	r2,r3,4df80 <_fstat_r+0x4c>
   4df6c:	dfc00217 	ldw	ra,8(sp)
   4df70:	dc400117 	ldw	r17,4(sp)
   4df74:	dc000017 	ldw	r16,0(sp)
   4df78:	dec00304 	addi	sp,sp,12
   4df7c:	f800283a 	ret
   4df80:	80c00017 	ldw	r3,0(r16)
   4df84:	183ff926 	beq	r3,zero,4df6c <__alt_data_end+0xfffdbf6c>
   4df88:	88c00015 	stw	r3,0(r17)
   4df8c:	003ff706 	br	4df6c <__alt_data_end+0xfffdbf6c>

0004df90 <_isatty_r>:
   4df90:	defffd04 	addi	sp,sp,-12
   4df94:	dc000015 	stw	r16,0(sp)
   4df98:	040001b4 	movhi	r16,6
   4df9c:	dc400115 	stw	r17,4(sp)
   4dfa0:	84261a04 	addi	r16,r16,-26520
   4dfa4:	2023883a 	mov	r17,r4
   4dfa8:	2809883a 	mov	r4,r5
   4dfac:	dfc00215 	stw	ra,8(sp)
   4dfb0:	80000015 	stw	zero,0(r16)
   4dfb4:	00518fc0 	call	518fc <isatty>
   4dfb8:	00ffffc4 	movi	r3,-1
   4dfbc:	10c00526 	beq	r2,r3,4dfd4 <_isatty_r+0x44>
   4dfc0:	dfc00217 	ldw	ra,8(sp)
   4dfc4:	dc400117 	ldw	r17,4(sp)
   4dfc8:	dc000017 	ldw	r16,0(sp)
   4dfcc:	dec00304 	addi	sp,sp,12
   4dfd0:	f800283a 	ret
   4dfd4:	80c00017 	ldw	r3,0(r16)
   4dfd8:	183ff926 	beq	r3,zero,4dfc0 <__alt_data_end+0xfffdbfc0>
   4dfdc:	88c00015 	stw	r3,0(r17)
   4dfe0:	003ff706 	br	4dfc0 <__alt_data_end+0xfffdbfc0>

0004dfe4 <_lseek_r>:
   4dfe4:	defffd04 	addi	sp,sp,-12
   4dfe8:	2805883a 	mov	r2,r5
   4dfec:	dc000015 	stw	r16,0(sp)
   4dff0:	040001b4 	movhi	r16,6
   4dff4:	dc400115 	stw	r17,4(sp)
   4dff8:	300b883a 	mov	r5,r6
   4dffc:	84261a04 	addi	r16,r16,-26520
   4e000:	2023883a 	mov	r17,r4
   4e004:	380d883a 	mov	r6,r7
   4e008:	1009883a 	mov	r4,r2
   4e00c:	dfc00215 	stw	ra,8(sp)
   4e010:	80000015 	stw	zero,0(r16)
   4e014:	0051ad00 	call	51ad0 <lseek>
   4e018:	00ffffc4 	movi	r3,-1
   4e01c:	10c00526 	beq	r2,r3,4e034 <_lseek_r+0x50>
   4e020:	dfc00217 	ldw	ra,8(sp)
   4e024:	dc400117 	ldw	r17,4(sp)
   4e028:	dc000017 	ldw	r16,0(sp)
   4e02c:	dec00304 	addi	sp,sp,12
   4e030:	f800283a 	ret
   4e034:	80c00017 	ldw	r3,0(r16)
   4e038:	183ff926 	beq	r3,zero,4e020 <__alt_data_end+0xfffdc020>
   4e03c:	88c00015 	stw	r3,0(r17)
   4e040:	003ff706 	br	4e020 <__alt_data_end+0xfffdc020>

0004e044 <_read_r>:
   4e044:	defffd04 	addi	sp,sp,-12
   4e048:	2805883a 	mov	r2,r5
   4e04c:	dc000015 	stw	r16,0(sp)
   4e050:	040001b4 	movhi	r16,6
   4e054:	dc400115 	stw	r17,4(sp)
   4e058:	300b883a 	mov	r5,r6
   4e05c:	84261a04 	addi	r16,r16,-26520
   4e060:	2023883a 	mov	r17,r4
   4e064:	380d883a 	mov	r6,r7
   4e068:	1009883a 	mov	r4,r2
   4e06c:	dfc00215 	stw	ra,8(sp)
   4e070:	80000015 	stw	zero,0(r16)
   4e074:	0051cac0 	call	51cac <read>
   4e078:	00ffffc4 	movi	r3,-1
   4e07c:	10c00526 	beq	r2,r3,4e094 <_read_r+0x50>
   4e080:	dfc00217 	ldw	ra,8(sp)
   4e084:	dc400117 	ldw	r17,4(sp)
   4e088:	dc000017 	ldw	r16,0(sp)
   4e08c:	dec00304 	addi	sp,sp,12
   4e090:	f800283a 	ret
   4e094:	80c00017 	ldw	r3,0(r16)
   4e098:	183ff926 	beq	r3,zero,4e080 <__alt_data_end+0xfffdc080>
   4e09c:	88c00015 	stw	r3,0(r17)
   4e0a0:	003ff706 	br	4e080 <__alt_data_end+0xfffdc080>

0004e0a4 <_wcrtomb_r>:
   4e0a4:	defff604 	addi	sp,sp,-40
   4e0a8:	00800174 	movhi	r2,5
   4e0ac:	dc800815 	stw	r18,32(sp)
   4e0b0:	dc400715 	stw	r17,28(sp)
   4e0b4:	dc000615 	stw	r16,24(sp)
   4e0b8:	109f3104 	addi	r2,r2,31940
   4e0bc:	dfc00915 	stw	ra,36(sp)
   4e0c0:	2021883a 	mov	r16,r4
   4e0c4:	3823883a 	mov	r17,r7
   4e0c8:	14800017 	ldw	r18,0(r2)
   4e0cc:	28001426 	beq	r5,zero,4e120 <_wcrtomb_r+0x7c>
   4e0d0:	d9400415 	stw	r5,16(sp)
   4e0d4:	d9800515 	stw	r6,20(sp)
   4e0d8:	004839c0 	call	4839c <__locale_charset>
   4e0dc:	d9800517 	ldw	r6,20(sp)
   4e0e0:	d9400417 	ldw	r5,16(sp)
   4e0e4:	100f883a 	mov	r7,r2
   4e0e8:	dc400015 	stw	r17,0(sp)
   4e0ec:	8009883a 	mov	r4,r16
   4e0f0:	903ee83a 	callr	r18
   4e0f4:	00ffffc4 	movi	r3,-1
   4e0f8:	10c0031e 	bne	r2,r3,4e108 <_wcrtomb_r+0x64>
   4e0fc:	88000015 	stw	zero,0(r17)
   4e100:	00c02284 	movi	r3,138
   4e104:	80c00015 	stw	r3,0(r16)
   4e108:	dfc00917 	ldw	ra,36(sp)
   4e10c:	dc800817 	ldw	r18,32(sp)
   4e110:	dc400717 	ldw	r17,28(sp)
   4e114:	dc000617 	ldw	r16,24(sp)
   4e118:	dec00a04 	addi	sp,sp,40
   4e11c:	f800283a 	ret
   4e120:	004839c0 	call	4839c <__locale_charset>
   4e124:	100f883a 	mov	r7,r2
   4e128:	dc400015 	stw	r17,0(sp)
   4e12c:	000d883a 	mov	r6,zero
   4e130:	d9400104 	addi	r5,sp,4
   4e134:	8009883a 	mov	r4,r16
   4e138:	903ee83a 	callr	r18
   4e13c:	003fed06 	br	4e0f4 <__alt_data_end+0xfffdc0f4>

0004e140 <wcrtomb>:
   4e140:	defff604 	addi	sp,sp,-40
   4e144:	00800174 	movhi	r2,5
   4e148:	dc800615 	stw	r18,24(sp)
   4e14c:	dc400515 	stw	r17,20(sp)
   4e150:	109f2d04 	addi	r2,r2,31924
   4e154:	dfc00915 	stw	ra,36(sp)
   4e158:	dd000815 	stw	r20,32(sp)
   4e15c:	dcc00715 	stw	r19,28(sp)
   4e160:	dc000415 	stw	r16,16(sp)
   4e164:	3025883a 	mov	r18,r6
   4e168:	14400017 	ldw	r17,0(r2)
   4e16c:	20001926 	beq	r4,zero,4e1d4 <wcrtomb+0x94>
   4e170:	00800174 	movhi	r2,5
   4e174:	109f3104 	addi	r2,r2,31940
   4e178:	15000017 	ldw	r20,0(r2)
   4e17c:	2021883a 	mov	r16,r4
   4e180:	2827883a 	mov	r19,r5
   4e184:	004839c0 	call	4839c <__locale_charset>
   4e188:	100f883a 	mov	r7,r2
   4e18c:	dc800015 	stw	r18,0(sp)
   4e190:	980d883a 	mov	r6,r19
   4e194:	800b883a 	mov	r5,r16
   4e198:	8809883a 	mov	r4,r17
   4e19c:	a03ee83a 	callr	r20
   4e1a0:	00ffffc4 	movi	r3,-1
   4e1a4:	10c0031e 	bne	r2,r3,4e1b4 <wcrtomb+0x74>
   4e1a8:	90000015 	stw	zero,0(r18)
   4e1ac:	00c02284 	movi	r3,138
   4e1b0:	88c00015 	stw	r3,0(r17)
   4e1b4:	dfc00917 	ldw	ra,36(sp)
   4e1b8:	dd000817 	ldw	r20,32(sp)
   4e1bc:	dcc00717 	ldw	r19,28(sp)
   4e1c0:	dc800617 	ldw	r18,24(sp)
   4e1c4:	dc400517 	ldw	r17,20(sp)
   4e1c8:	dc000417 	ldw	r16,16(sp)
   4e1cc:	dec00a04 	addi	sp,sp,40
   4e1d0:	f800283a 	ret
   4e1d4:	00800174 	movhi	r2,5
   4e1d8:	109f3104 	addi	r2,r2,31940
   4e1dc:	14000017 	ldw	r16,0(r2)
   4e1e0:	004839c0 	call	4839c <__locale_charset>
   4e1e4:	100f883a 	mov	r7,r2
   4e1e8:	dc800015 	stw	r18,0(sp)
   4e1ec:	000d883a 	mov	r6,zero
   4e1f0:	d9400104 	addi	r5,sp,4
   4e1f4:	8809883a 	mov	r4,r17
   4e1f8:	803ee83a 	callr	r16
   4e1fc:	003fe806 	br	4e1a0 <__alt_data_end+0xfffdc1a0>

0004e200 <__ascii_wctomb>:
   4e200:	28000526 	beq	r5,zero,4e218 <__ascii_wctomb+0x18>
   4e204:	00803fc4 	movi	r2,255
   4e208:	11800536 	bltu	r2,r6,4e220 <__ascii_wctomb+0x20>
   4e20c:	29800005 	stb	r6,0(r5)
   4e210:	00800044 	movi	r2,1
   4e214:	f800283a 	ret
   4e218:	0005883a 	mov	r2,zero
   4e21c:	f800283a 	ret
   4e220:	00802284 	movi	r2,138
   4e224:	20800015 	stw	r2,0(r4)
   4e228:	00bfffc4 	movi	r2,-1
   4e22c:	f800283a 	ret

0004e230 <_wctomb_r>:
   4e230:	00800174 	movhi	r2,5
   4e234:	defff904 	addi	sp,sp,-28
   4e238:	109f3104 	addi	r2,r2,31940
   4e23c:	dfc00615 	stw	ra,24(sp)
   4e240:	dc400515 	stw	r17,20(sp)
   4e244:	dc000415 	stw	r16,16(sp)
   4e248:	3823883a 	mov	r17,r7
   4e24c:	14000017 	ldw	r16,0(r2)
   4e250:	d9000115 	stw	r4,4(sp)
   4e254:	d9400215 	stw	r5,8(sp)
   4e258:	d9800315 	stw	r6,12(sp)
   4e25c:	004839c0 	call	4839c <__locale_charset>
   4e260:	d9800317 	ldw	r6,12(sp)
   4e264:	d9400217 	ldw	r5,8(sp)
   4e268:	d9000117 	ldw	r4,4(sp)
   4e26c:	100f883a 	mov	r7,r2
   4e270:	dc400015 	stw	r17,0(sp)
   4e274:	803ee83a 	callr	r16
   4e278:	dfc00617 	ldw	ra,24(sp)
   4e27c:	dc400517 	ldw	r17,20(sp)
   4e280:	dc000417 	ldw	r16,16(sp)
   4e284:	dec00704 	addi	sp,sp,28
   4e288:	f800283a 	ret

0004e28c <__udivdi3>:
   4e28c:	defff404 	addi	sp,sp,-48
   4e290:	dcc00515 	stw	r19,20(sp)
   4e294:	dc000215 	stw	r16,8(sp)
   4e298:	dfc00b15 	stw	ra,44(sp)
   4e29c:	df000a15 	stw	fp,40(sp)
   4e2a0:	ddc00915 	stw	r23,36(sp)
   4e2a4:	dd800815 	stw	r22,32(sp)
   4e2a8:	dd400715 	stw	r21,28(sp)
   4e2ac:	dd000615 	stw	r20,24(sp)
   4e2b0:	dc800415 	stw	r18,16(sp)
   4e2b4:	dc400315 	stw	r17,12(sp)
   4e2b8:	2027883a 	mov	r19,r4
   4e2bc:	2821883a 	mov	r16,r5
   4e2c0:	3800461e 	bne	r7,zero,4e3dc <__udivdi3+0x150>
   4e2c4:	3023883a 	mov	r17,r6
   4e2c8:	2025883a 	mov	r18,r4
   4e2cc:	2980572e 	bgeu	r5,r6,4e42c <__udivdi3+0x1a0>
   4e2d0:	00bfffd4 	movui	r2,65535
   4e2d4:	282d883a 	mov	r22,r5
   4e2d8:	1180b236 	bltu	r2,r6,4e5a4 <__udivdi3+0x318>
   4e2dc:	00803fc4 	movi	r2,255
   4e2e0:	1185803a 	cmpltu	r2,r2,r6
   4e2e4:	100490fa 	slli	r2,r2,3
   4e2e8:	3086d83a 	srl	r3,r6,r2
   4e2ec:	01000174 	movhi	r4,5
   4e2f0:	211792c4 	addi	r4,r4,24139
   4e2f4:	20c7883a 	add	r3,r4,r3
   4e2f8:	18c00003 	ldbu	r3,0(r3)
   4e2fc:	1885883a 	add	r2,r3,r2
   4e300:	00c00804 	movi	r3,32
   4e304:	1887c83a 	sub	r3,r3,r2
   4e308:	18000526 	beq	r3,zero,4e320 <__udivdi3+0x94>
   4e30c:	80e0983a 	sll	r16,r16,r3
   4e310:	9884d83a 	srl	r2,r19,r2
   4e314:	30e2983a 	sll	r17,r6,r3
   4e318:	98e4983a 	sll	r18,r19,r3
   4e31c:	142cb03a 	or	r22,r2,r16
   4e320:	882ad43a 	srli	r21,r17,16
   4e324:	b009883a 	mov	r4,r22
   4e328:	8d3fffcc 	andi	r20,r17,65535
   4e32c:	a80b883a 	mov	r5,r21
   4e330:	004075c0 	call	4075c <__umodsi3>
   4e334:	b009883a 	mov	r4,r22
   4e338:	a80b883a 	mov	r5,r21
   4e33c:	1027883a 	mov	r19,r2
   4e340:	00406f80 	call	406f8 <__udivsi3>
   4e344:	100b883a 	mov	r5,r2
   4e348:	a009883a 	mov	r4,r20
   4e34c:	102d883a 	mov	r22,r2
   4e350:	0040eec0 	call	40eec <__mulsi3>
   4e354:	9826943a 	slli	r19,r19,16
   4e358:	9006d43a 	srli	r3,r18,16
   4e35c:	1cc6b03a 	or	r3,r3,r19
   4e360:	1880052e 	bgeu	r3,r2,4e378 <__udivdi3+0xec>
   4e364:	1c47883a 	add	r3,r3,r17
   4e368:	b13fffc4 	addi	r4,r22,-1
   4e36c:	1c400136 	bltu	r3,r17,4e374 <__udivdi3+0xe8>
   4e370:	18814236 	bltu	r3,r2,4e87c <__udivdi3+0x5f0>
   4e374:	202d883a 	mov	r22,r4
   4e378:	18a1c83a 	sub	r16,r3,r2
   4e37c:	8009883a 	mov	r4,r16
   4e380:	a80b883a 	mov	r5,r21
   4e384:	004075c0 	call	4075c <__umodsi3>
   4e388:	1027883a 	mov	r19,r2
   4e38c:	8009883a 	mov	r4,r16
   4e390:	a80b883a 	mov	r5,r21
   4e394:	9826943a 	slli	r19,r19,16
   4e398:	00406f80 	call	406f8 <__udivsi3>
   4e39c:	100b883a 	mov	r5,r2
   4e3a0:	a009883a 	mov	r4,r20
   4e3a4:	94bfffcc 	andi	r18,r18,65535
   4e3a8:	1021883a 	mov	r16,r2
   4e3ac:	94e4b03a 	or	r18,r18,r19
   4e3b0:	0040eec0 	call	40eec <__mulsi3>
   4e3b4:	9080052e 	bgeu	r18,r2,4e3cc <__udivdi3+0x140>
   4e3b8:	8ca5883a 	add	r18,r17,r18
   4e3bc:	80ffffc4 	addi	r3,r16,-1
   4e3c0:	94410c36 	bltu	r18,r17,4e7f4 <__udivdi3+0x568>
   4e3c4:	90810b2e 	bgeu	r18,r2,4e7f4 <__udivdi3+0x568>
   4e3c8:	843fff84 	addi	r16,r16,-2
   4e3cc:	b004943a 	slli	r2,r22,16
   4e3d0:	0007883a 	mov	r3,zero
   4e3d4:	1404b03a 	or	r2,r2,r16
   4e3d8:	00005e06 	br	4e554 <__udivdi3+0x2c8>
   4e3dc:	29c05b36 	bltu	r5,r7,4e54c <__udivdi3+0x2c0>
   4e3e0:	00bfffd4 	movui	r2,65535
   4e3e4:	11c0672e 	bgeu	r2,r7,4e584 <__udivdi3+0x2f8>
   4e3e8:	00804034 	movhi	r2,256
   4e3ec:	10bfffc4 	addi	r2,r2,-1
   4e3f0:	11c10a36 	bltu	r2,r7,4e81c <__udivdi3+0x590>
   4e3f4:	00800404 	movi	r2,16
   4e3f8:	3886d83a 	srl	r3,r7,r2
   4e3fc:	01000174 	movhi	r4,5
   4e400:	211792c4 	addi	r4,r4,24139
   4e404:	20c7883a 	add	r3,r4,r3
   4e408:	18c00003 	ldbu	r3,0(r3)
   4e40c:	05c00804 	movi	r23,32
   4e410:	1885883a 	add	r2,r3,r2
   4e414:	b8afc83a 	sub	r23,r23,r2
   4e418:	b800671e 	bne	r23,zero,4e5b8 <__udivdi3+0x32c>
   4e41c:	3c010536 	bltu	r7,r16,4e834 <__udivdi3+0x5a8>
   4e420:	9985403a 	cmpgeu	r2,r19,r6
   4e424:	0007883a 	mov	r3,zero
   4e428:	00004a06 	br	4e554 <__udivdi3+0x2c8>
   4e42c:	3000041e 	bne	r6,zero,4e440 <__udivdi3+0x1b4>
   4e430:	000b883a 	mov	r5,zero
   4e434:	01000044 	movi	r4,1
   4e438:	00406f80 	call	406f8 <__udivsi3>
   4e43c:	1023883a 	mov	r17,r2
   4e440:	00bfffd4 	movui	r2,65535
   4e444:	1440532e 	bgeu	r2,r17,4e594 <__udivdi3+0x308>
   4e448:	00804034 	movhi	r2,256
   4e44c:	10bfffc4 	addi	r2,r2,-1
   4e450:	1440f436 	bltu	r2,r17,4e824 <__udivdi3+0x598>
   4e454:	00800404 	movi	r2,16
   4e458:	8886d83a 	srl	r3,r17,r2
   4e45c:	01000174 	movhi	r4,5
   4e460:	211792c4 	addi	r4,r4,24139
   4e464:	20c7883a 	add	r3,r4,r3
   4e468:	18c00003 	ldbu	r3,0(r3)
   4e46c:	1885883a 	add	r2,r3,r2
   4e470:	00c00804 	movi	r3,32
   4e474:	1887c83a 	sub	r3,r3,r2
   4e478:	1800a51e 	bne	r3,zero,4e710 <__udivdi3+0x484>
   4e47c:	882ad43a 	srli	r21,r17,16
   4e480:	8461c83a 	sub	r16,r16,r17
   4e484:	8d3fffcc 	andi	r20,r17,65535
   4e488:	00c00044 	movi	r3,1
   4e48c:	a80b883a 	mov	r5,r21
   4e490:	8009883a 	mov	r4,r16
   4e494:	d8c00115 	stw	r3,4(sp)
   4e498:	004075c0 	call	4075c <__umodsi3>
   4e49c:	a80b883a 	mov	r5,r21
   4e4a0:	8009883a 	mov	r4,r16
   4e4a4:	1027883a 	mov	r19,r2
   4e4a8:	00406f80 	call	406f8 <__udivsi3>
   4e4ac:	a00b883a 	mov	r5,r20
   4e4b0:	1009883a 	mov	r4,r2
   4e4b4:	102d883a 	mov	r22,r2
   4e4b8:	0040eec0 	call	40eec <__mulsi3>
   4e4bc:	9826943a 	slli	r19,r19,16
   4e4c0:	900ed43a 	srli	r7,r18,16
   4e4c4:	d8c00117 	ldw	r3,4(sp)
   4e4c8:	3cceb03a 	or	r7,r7,r19
   4e4cc:	3880052e 	bgeu	r7,r2,4e4e4 <__udivdi3+0x258>
   4e4d0:	3c4f883a 	add	r7,r7,r17
   4e4d4:	b13fffc4 	addi	r4,r22,-1
   4e4d8:	3c400136 	bltu	r7,r17,4e4e0 <__udivdi3+0x254>
   4e4dc:	3880e436 	bltu	r7,r2,4e870 <__udivdi3+0x5e4>
   4e4e0:	202d883a 	mov	r22,r4
   4e4e4:	38a1c83a 	sub	r16,r7,r2
   4e4e8:	8009883a 	mov	r4,r16
   4e4ec:	a80b883a 	mov	r5,r21
   4e4f0:	d8c00115 	stw	r3,4(sp)
   4e4f4:	004075c0 	call	4075c <__umodsi3>
   4e4f8:	1027883a 	mov	r19,r2
   4e4fc:	8009883a 	mov	r4,r16
   4e500:	a80b883a 	mov	r5,r21
   4e504:	9826943a 	slli	r19,r19,16
   4e508:	00406f80 	call	406f8 <__udivsi3>
   4e50c:	a00b883a 	mov	r5,r20
   4e510:	1009883a 	mov	r4,r2
   4e514:	94bfffcc 	andi	r18,r18,65535
   4e518:	1021883a 	mov	r16,r2
   4e51c:	94e4b03a 	or	r18,r18,r19
   4e520:	0040eec0 	call	40eec <__mulsi3>
   4e524:	d8c00117 	ldw	r3,4(sp)
   4e528:	9080052e 	bgeu	r18,r2,4e540 <__udivdi3+0x2b4>
   4e52c:	8ca5883a 	add	r18,r17,r18
   4e530:	813fffc4 	addi	r4,r16,-1
   4e534:	9440ad36 	bltu	r18,r17,4e7ec <__udivdi3+0x560>
   4e538:	9080ac2e 	bgeu	r18,r2,4e7ec <__udivdi3+0x560>
   4e53c:	843fff84 	addi	r16,r16,-2
   4e540:	b004943a 	slli	r2,r22,16
   4e544:	1404b03a 	or	r2,r2,r16
   4e548:	00000206 	br	4e554 <__udivdi3+0x2c8>
   4e54c:	0007883a 	mov	r3,zero
   4e550:	0005883a 	mov	r2,zero
   4e554:	dfc00b17 	ldw	ra,44(sp)
   4e558:	df000a17 	ldw	fp,40(sp)
   4e55c:	ddc00917 	ldw	r23,36(sp)
   4e560:	dd800817 	ldw	r22,32(sp)
   4e564:	dd400717 	ldw	r21,28(sp)
   4e568:	dd000617 	ldw	r20,24(sp)
   4e56c:	dcc00517 	ldw	r19,20(sp)
   4e570:	dc800417 	ldw	r18,16(sp)
   4e574:	dc400317 	ldw	r17,12(sp)
   4e578:	dc000217 	ldw	r16,8(sp)
   4e57c:	dec00c04 	addi	sp,sp,48
   4e580:	f800283a 	ret
   4e584:	00803fc4 	movi	r2,255
   4e588:	11c5803a 	cmpltu	r2,r2,r7
   4e58c:	100490fa 	slli	r2,r2,3
   4e590:	003f9906 	br	4e3f8 <__alt_data_end+0xfffdc3f8>
   4e594:	00803fc4 	movi	r2,255
   4e598:	1445803a 	cmpltu	r2,r2,r17
   4e59c:	100490fa 	slli	r2,r2,3
   4e5a0:	003fad06 	br	4e458 <__alt_data_end+0xfffdc458>
   4e5a4:	00804034 	movhi	r2,256
   4e5a8:	10bfffc4 	addi	r2,r2,-1
   4e5ac:	11809f36 	bltu	r2,r6,4e82c <__udivdi3+0x5a0>
   4e5b0:	00800404 	movi	r2,16
   4e5b4:	003f4c06 	br	4e2e8 <__alt_data_end+0xfffdc2e8>
   4e5b8:	3dce983a 	sll	r7,r7,r23
   4e5bc:	30b8d83a 	srl	fp,r6,r2
   4e5c0:	80a2d83a 	srl	r17,r16,r2
   4e5c4:	35cc983a 	sll	r6,r6,r23
   4e5c8:	3f38b03a 	or	fp,r7,fp
   4e5cc:	e024d43a 	srli	r18,fp,16
   4e5d0:	9884d83a 	srl	r2,r19,r2
   4e5d4:	85e0983a 	sll	r16,r16,r23
   4e5d8:	8809883a 	mov	r4,r17
   4e5dc:	900b883a 	mov	r5,r18
   4e5e0:	d9800015 	stw	r6,0(sp)
   4e5e4:	1420b03a 	or	r16,r2,r16
   4e5e8:	004075c0 	call	4075c <__umodsi3>
   4e5ec:	900b883a 	mov	r5,r18
   4e5f0:	8809883a 	mov	r4,r17
   4e5f4:	1029883a 	mov	r20,r2
   4e5f8:	e5bfffcc 	andi	r22,fp,65535
   4e5fc:	00406f80 	call	406f8 <__udivsi3>
   4e600:	100b883a 	mov	r5,r2
   4e604:	b009883a 	mov	r4,r22
   4e608:	102b883a 	mov	r21,r2
   4e60c:	0040eec0 	call	40eec <__mulsi3>
   4e610:	a028943a 	slli	r20,r20,16
   4e614:	8006d43a 	srli	r3,r16,16
   4e618:	1d06b03a 	or	r3,r3,r20
   4e61c:	1880042e 	bgeu	r3,r2,4e630 <__udivdi3+0x3a4>
   4e620:	1f07883a 	add	r3,r3,fp
   4e624:	a93fffc4 	addi	r4,r21,-1
   4e628:	1f00892e 	bgeu	r3,fp,4e850 <__udivdi3+0x5c4>
   4e62c:	202b883a 	mov	r21,r4
   4e630:	18a3c83a 	sub	r17,r3,r2
   4e634:	8809883a 	mov	r4,r17
   4e638:	900b883a 	mov	r5,r18
   4e63c:	004075c0 	call	4075c <__umodsi3>
   4e640:	1029883a 	mov	r20,r2
   4e644:	8809883a 	mov	r4,r17
   4e648:	900b883a 	mov	r5,r18
   4e64c:	a028943a 	slli	r20,r20,16
   4e650:	00406f80 	call	406f8 <__udivsi3>
   4e654:	100b883a 	mov	r5,r2
   4e658:	b009883a 	mov	r4,r22
   4e65c:	843fffcc 	andi	r16,r16,65535
   4e660:	1023883a 	mov	r17,r2
   4e664:	8520b03a 	or	r16,r16,r20
   4e668:	0040eec0 	call	40eec <__mulsi3>
   4e66c:	8080042e 	bgeu	r16,r2,4e680 <__udivdi3+0x3f4>
   4e670:	8721883a 	add	r16,r16,fp
   4e674:	88ffffc4 	addi	r3,r17,-1
   4e678:	8700712e 	bgeu	r16,fp,4e840 <__udivdi3+0x5b4>
   4e67c:	1823883a 	mov	r17,r3
   4e680:	a80e943a 	slli	r7,r21,16
   4e684:	d8c00017 	ldw	r3,0(sp)
   4e688:	80a1c83a 	sub	r16,r16,r2
   4e68c:	3c64b03a 	or	r18,r7,r17
   4e690:	1d3fffcc 	andi	r20,r3,65535
   4e694:	9022d43a 	srli	r17,r18,16
   4e698:	95bfffcc 	andi	r22,r18,65535
   4e69c:	a00b883a 	mov	r5,r20
   4e6a0:	b009883a 	mov	r4,r22
   4e6a4:	182ad43a 	srli	r21,r3,16
   4e6a8:	0040eec0 	call	40eec <__mulsi3>
   4e6ac:	a00b883a 	mov	r5,r20
   4e6b0:	8809883a 	mov	r4,r17
   4e6b4:	1039883a 	mov	fp,r2
   4e6b8:	0040eec0 	call	40eec <__mulsi3>
   4e6bc:	8809883a 	mov	r4,r17
   4e6c0:	a80b883a 	mov	r5,r21
   4e6c4:	1029883a 	mov	r20,r2
   4e6c8:	0040eec0 	call	40eec <__mulsi3>
   4e6cc:	a80b883a 	mov	r5,r21
   4e6d0:	b009883a 	mov	r4,r22
   4e6d4:	1023883a 	mov	r17,r2
   4e6d8:	0040eec0 	call	40eec <__mulsi3>
   4e6dc:	e006d43a 	srli	r3,fp,16
   4e6e0:	1505883a 	add	r2,r2,r20
   4e6e4:	1887883a 	add	r3,r3,r2
   4e6e8:	1d00022e 	bgeu	r3,r20,4e6f4 <__udivdi3+0x468>
   4e6ec:	00800074 	movhi	r2,1
   4e6f0:	88a3883a 	add	r17,r17,r2
   4e6f4:	1804d43a 	srli	r2,r3,16
   4e6f8:	1463883a 	add	r17,r2,r17
   4e6fc:	84404436 	bltu	r16,r17,4e810 <__udivdi3+0x584>
   4e700:	84403e26 	beq	r16,r17,4e7fc <__udivdi3+0x570>
   4e704:	9005883a 	mov	r2,r18
   4e708:	0007883a 	mov	r3,zero
   4e70c:	003f9106 	br	4e554 <__alt_data_end+0xfffdc554>
   4e710:	88e2983a 	sll	r17,r17,r3
   4e714:	80aed83a 	srl	r23,r16,r2
   4e718:	80e0983a 	sll	r16,r16,r3
   4e71c:	882ad43a 	srli	r21,r17,16
   4e720:	9884d83a 	srl	r2,r19,r2
   4e724:	b809883a 	mov	r4,r23
   4e728:	a80b883a 	mov	r5,r21
   4e72c:	98e4983a 	sll	r18,r19,r3
   4e730:	142cb03a 	or	r22,r2,r16
   4e734:	004075c0 	call	4075c <__umodsi3>
   4e738:	b809883a 	mov	r4,r23
   4e73c:	a80b883a 	mov	r5,r21
   4e740:	1027883a 	mov	r19,r2
   4e744:	8d3fffcc 	andi	r20,r17,65535
   4e748:	00406f80 	call	406f8 <__udivsi3>
   4e74c:	a009883a 	mov	r4,r20
   4e750:	100b883a 	mov	r5,r2
   4e754:	102f883a 	mov	r23,r2
   4e758:	0040eec0 	call	40eec <__mulsi3>
   4e75c:	9826943a 	slli	r19,r19,16
   4e760:	b008d43a 	srli	r4,r22,16
   4e764:	24c8b03a 	or	r4,r4,r19
   4e768:	2080062e 	bgeu	r4,r2,4e784 <__udivdi3+0x4f8>
   4e76c:	2449883a 	add	r4,r4,r17
   4e770:	b8ffffc4 	addi	r3,r23,-1
   4e774:	24403c36 	bltu	r4,r17,4e868 <__udivdi3+0x5dc>
   4e778:	20803b2e 	bgeu	r4,r2,4e868 <__udivdi3+0x5dc>
   4e77c:	bdffff84 	addi	r23,r23,-2
   4e780:	2449883a 	add	r4,r4,r17
   4e784:	20a1c83a 	sub	r16,r4,r2
   4e788:	a80b883a 	mov	r5,r21
   4e78c:	8009883a 	mov	r4,r16
   4e790:	004075c0 	call	4075c <__umodsi3>
   4e794:	a80b883a 	mov	r5,r21
   4e798:	8009883a 	mov	r4,r16
   4e79c:	1027883a 	mov	r19,r2
   4e7a0:	00406f80 	call	406f8 <__udivsi3>
   4e7a4:	a009883a 	mov	r4,r20
   4e7a8:	100b883a 	mov	r5,r2
   4e7ac:	9826943a 	slli	r19,r19,16
   4e7b0:	1039883a 	mov	fp,r2
   4e7b4:	0040eec0 	call	40eec <__mulsi3>
   4e7b8:	b13fffcc 	andi	r4,r22,65535
   4e7bc:	24c8b03a 	or	r4,r4,r19
   4e7c0:	2080062e 	bgeu	r4,r2,4e7dc <__udivdi3+0x550>
   4e7c4:	2449883a 	add	r4,r4,r17
   4e7c8:	e0ffffc4 	addi	r3,fp,-1
   4e7cc:	24402436 	bltu	r4,r17,4e860 <__udivdi3+0x5d4>
   4e7d0:	2080232e 	bgeu	r4,r2,4e860 <__udivdi3+0x5d4>
   4e7d4:	e73fff84 	addi	fp,fp,-2
   4e7d8:	2449883a 	add	r4,r4,r17
   4e7dc:	b82e943a 	slli	r23,r23,16
   4e7e0:	20a1c83a 	sub	r16,r4,r2
   4e7e4:	bf06b03a 	or	r3,r23,fp
   4e7e8:	003f2806 	br	4e48c <__alt_data_end+0xfffdc48c>
   4e7ec:	2021883a 	mov	r16,r4
   4e7f0:	003f5306 	br	4e540 <__alt_data_end+0xfffdc540>
   4e7f4:	1821883a 	mov	r16,r3
   4e7f8:	003ef406 	br	4e3cc <__alt_data_end+0xfffdc3cc>
   4e7fc:	1806943a 	slli	r3,r3,16
   4e800:	9de6983a 	sll	r19,r19,r23
   4e804:	e73fffcc 	andi	fp,fp,65535
   4e808:	1f07883a 	add	r3,r3,fp
   4e80c:	98ffbd2e 	bgeu	r19,r3,4e704 <__alt_data_end+0xfffdc704>
   4e810:	90bfffc4 	addi	r2,r18,-1
   4e814:	0007883a 	mov	r3,zero
   4e818:	003f4e06 	br	4e554 <__alt_data_end+0xfffdc554>
   4e81c:	00800604 	movi	r2,24
   4e820:	003ef506 	br	4e3f8 <__alt_data_end+0xfffdc3f8>
   4e824:	00800604 	movi	r2,24
   4e828:	003f0b06 	br	4e458 <__alt_data_end+0xfffdc458>
   4e82c:	00800604 	movi	r2,24
   4e830:	003ead06 	br	4e2e8 <__alt_data_end+0xfffdc2e8>
   4e834:	0007883a 	mov	r3,zero
   4e838:	00800044 	movi	r2,1
   4e83c:	003f4506 	br	4e554 <__alt_data_end+0xfffdc554>
   4e840:	80bf8e2e 	bgeu	r16,r2,4e67c <__alt_data_end+0xfffdc67c>
   4e844:	8c7fff84 	addi	r17,r17,-2
   4e848:	8721883a 	add	r16,r16,fp
   4e84c:	003f8c06 	br	4e680 <__alt_data_end+0xfffdc680>
   4e850:	18bf762e 	bgeu	r3,r2,4e62c <__alt_data_end+0xfffdc62c>
   4e854:	ad7fff84 	addi	r21,r21,-2
   4e858:	1f07883a 	add	r3,r3,fp
   4e85c:	003f7406 	br	4e630 <__alt_data_end+0xfffdc630>
   4e860:	1839883a 	mov	fp,r3
   4e864:	003fdd06 	br	4e7dc <__alt_data_end+0xfffdc7dc>
   4e868:	182f883a 	mov	r23,r3
   4e86c:	003fc506 	br	4e784 <__alt_data_end+0xfffdc784>
   4e870:	b5bfff84 	addi	r22,r22,-2
   4e874:	3c4f883a 	add	r7,r7,r17
   4e878:	003f1a06 	br	4e4e4 <__alt_data_end+0xfffdc4e4>
   4e87c:	b5bfff84 	addi	r22,r22,-2
   4e880:	1c47883a 	add	r3,r3,r17
   4e884:	003ebc06 	br	4e378 <__alt_data_end+0xfffdc378>

0004e888 <__umoddi3>:
   4e888:	defff304 	addi	sp,sp,-52
   4e88c:	df000b15 	stw	fp,44(sp)
   4e890:	dc400415 	stw	r17,16(sp)
   4e894:	dc000315 	stw	r16,12(sp)
   4e898:	dfc00c15 	stw	ra,48(sp)
   4e89c:	ddc00a15 	stw	r23,40(sp)
   4e8a0:	dd800915 	stw	r22,36(sp)
   4e8a4:	dd400815 	stw	r21,32(sp)
   4e8a8:	dd000715 	stw	r20,28(sp)
   4e8ac:	dcc00615 	stw	r19,24(sp)
   4e8b0:	dc800515 	stw	r18,20(sp)
   4e8b4:	2021883a 	mov	r16,r4
   4e8b8:	2823883a 	mov	r17,r5
   4e8bc:	2839883a 	mov	fp,r5
   4e8c0:	3800401e 	bne	r7,zero,4e9c4 <__umoddi3+0x13c>
   4e8c4:	3027883a 	mov	r19,r6
   4e8c8:	2029883a 	mov	r20,r4
   4e8cc:	2980552e 	bgeu	r5,r6,4ea24 <__umoddi3+0x19c>
   4e8d0:	00bfffd4 	movui	r2,65535
   4e8d4:	1180a236 	bltu	r2,r6,4eb60 <__umoddi3+0x2d8>
   4e8d8:	01003fc4 	movi	r4,255
   4e8dc:	2189803a 	cmpltu	r4,r4,r6
   4e8e0:	200890fa 	slli	r4,r4,3
   4e8e4:	3104d83a 	srl	r2,r6,r4
   4e8e8:	00c00174 	movhi	r3,5
   4e8ec:	18d792c4 	addi	r3,r3,24139
   4e8f0:	1885883a 	add	r2,r3,r2
   4e8f4:	10c00003 	ldbu	r3,0(r2)
   4e8f8:	00800804 	movi	r2,32
   4e8fc:	1909883a 	add	r4,r3,r4
   4e900:	1125c83a 	sub	r18,r2,r4
   4e904:	90000526 	beq	r18,zero,4e91c <__umoddi3+0x94>
   4e908:	8ca2983a 	sll	r17,r17,r18
   4e90c:	8108d83a 	srl	r4,r16,r4
   4e910:	34a6983a 	sll	r19,r6,r18
   4e914:	84a8983a 	sll	r20,r16,r18
   4e918:	2478b03a 	or	fp,r4,r17
   4e91c:	982cd43a 	srli	r22,r19,16
   4e920:	e009883a 	mov	r4,fp
   4e924:	9dffffcc 	andi	r23,r19,65535
   4e928:	b00b883a 	mov	r5,r22
   4e92c:	004075c0 	call	4075c <__umodsi3>
   4e930:	b00b883a 	mov	r5,r22
   4e934:	e009883a 	mov	r4,fp
   4e938:	102b883a 	mov	r21,r2
   4e93c:	00406f80 	call	406f8 <__udivsi3>
   4e940:	100b883a 	mov	r5,r2
   4e944:	b809883a 	mov	r4,r23
   4e948:	0040eec0 	call	40eec <__mulsi3>
   4e94c:	a82a943a 	slli	r21,r21,16
   4e950:	a006d43a 	srli	r3,r20,16
   4e954:	1d46b03a 	or	r3,r3,r21
   4e958:	1880032e 	bgeu	r3,r2,4e968 <__umoddi3+0xe0>
   4e95c:	1cc7883a 	add	r3,r3,r19
   4e960:	1cc00136 	bltu	r3,r19,4e968 <__umoddi3+0xe0>
   4e964:	18813136 	bltu	r3,r2,4ee2c <__umoddi3+0x5a4>
   4e968:	18a1c83a 	sub	r16,r3,r2
   4e96c:	b00b883a 	mov	r5,r22
   4e970:	8009883a 	mov	r4,r16
   4e974:	004075c0 	call	4075c <__umodsi3>
   4e978:	b00b883a 	mov	r5,r22
   4e97c:	8009883a 	mov	r4,r16
   4e980:	1023883a 	mov	r17,r2
   4e984:	00406f80 	call	406f8 <__udivsi3>
   4e988:	100b883a 	mov	r5,r2
   4e98c:	b809883a 	mov	r4,r23
   4e990:	8822943a 	slli	r17,r17,16
   4e994:	0040eec0 	call	40eec <__mulsi3>
   4e998:	a0ffffcc 	andi	r3,r20,65535
   4e99c:	1c46b03a 	or	r3,r3,r17
   4e9a0:	1880042e 	bgeu	r3,r2,4e9b4 <__umoddi3+0x12c>
   4e9a4:	1cc7883a 	add	r3,r3,r19
   4e9a8:	1cc00236 	bltu	r3,r19,4e9b4 <__umoddi3+0x12c>
   4e9ac:	1880012e 	bgeu	r3,r2,4e9b4 <__umoddi3+0x12c>
   4e9b0:	1cc7883a 	add	r3,r3,r19
   4e9b4:	1885c83a 	sub	r2,r3,r2
   4e9b8:	1484d83a 	srl	r2,r2,r18
   4e9bc:	0007883a 	mov	r3,zero
   4e9c0:	00005306 	br	4eb10 <__umoddi3+0x288>
   4e9c4:	29c05036 	bltu	r5,r7,4eb08 <__umoddi3+0x280>
   4e9c8:	00bfffd4 	movui	r2,65535
   4e9cc:	11c05c2e 	bgeu	r2,r7,4eb40 <__umoddi3+0x2b8>
   4e9d0:	00804034 	movhi	r2,256
   4e9d4:	10bfffc4 	addi	r2,r2,-1
   4e9d8:	11c10636 	bltu	r2,r7,4edf4 <__umoddi3+0x56c>
   4e9dc:	01000404 	movi	r4,16
   4e9e0:	3904d83a 	srl	r2,r7,r4
   4e9e4:	00c00174 	movhi	r3,5
   4e9e8:	18d792c4 	addi	r3,r3,24139
   4e9ec:	1885883a 	add	r2,r3,r2
   4e9f0:	14c00003 	ldbu	r19,0(r2)
   4e9f4:	00c00804 	movi	r3,32
   4e9f8:	9927883a 	add	r19,r19,r4
   4e9fc:	1ce9c83a 	sub	r20,r3,r19
   4ea00:	a0005c1e 	bne	r20,zero,4eb74 <__umoddi3+0x2ec>
   4ea04:	3c400136 	bltu	r7,r17,4ea0c <__umoddi3+0x184>
   4ea08:	81810a36 	bltu	r16,r6,4ee34 <__umoddi3+0x5ac>
   4ea0c:	8185c83a 	sub	r2,r16,r6
   4ea10:	89e3c83a 	sub	r17,r17,r7
   4ea14:	8089803a 	cmpltu	r4,r16,r2
   4ea18:	8939c83a 	sub	fp,r17,r4
   4ea1c:	e007883a 	mov	r3,fp
   4ea20:	00003b06 	br	4eb10 <__umoddi3+0x288>
   4ea24:	3000041e 	bne	r6,zero,4ea38 <__umoddi3+0x1b0>
   4ea28:	000b883a 	mov	r5,zero
   4ea2c:	01000044 	movi	r4,1
   4ea30:	00406f80 	call	406f8 <__udivsi3>
   4ea34:	1027883a 	mov	r19,r2
   4ea38:	00bfffd4 	movui	r2,65535
   4ea3c:	14c0442e 	bgeu	r2,r19,4eb50 <__umoddi3+0x2c8>
   4ea40:	00804034 	movhi	r2,256
   4ea44:	10bfffc4 	addi	r2,r2,-1
   4ea48:	14c0ec36 	bltu	r2,r19,4edfc <__umoddi3+0x574>
   4ea4c:	00800404 	movi	r2,16
   4ea50:	9886d83a 	srl	r3,r19,r2
   4ea54:	01000174 	movhi	r4,5
   4ea58:	211792c4 	addi	r4,r4,24139
   4ea5c:	20c7883a 	add	r3,r4,r3
   4ea60:	18c00003 	ldbu	r3,0(r3)
   4ea64:	1887883a 	add	r3,r3,r2
   4ea68:	00800804 	movi	r2,32
   4ea6c:	10e5c83a 	sub	r18,r2,r3
   4ea70:	9000ab1e 	bne	r18,zero,4ed20 <__umoddi3+0x498>
   4ea74:	982cd43a 	srli	r22,r19,16
   4ea78:	8ce3c83a 	sub	r17,r17,r19
   4ea7c:	9dffffcc 	andi	r23,r19,65535
   4ea80:	b00b883a 	mov	r5,r22
   4ea84:	8809883a 	mov	r4,r17
   4ea88:	004075c0 	call	4075c <__umodsi3>
   4ea8c:	b00b883a 	mov	r5,r22
   4ea90:	8809883a 	mov	r4,r17
   4ea94:	102b883a 	mov	r21,r2
   4ea98:	00406f80 	call	406f8 <__udivsi3>
   4ea9c:	b80b883a 	mov	r5,r23
   4eaa0:	1009883a 	mov	r4,r2
   4eaa4:	0040eec0 	call	40eec <__mulsi3>
   4eaa8:	a82a943a 	slli	r21,r21,16
   4eaac:	a006d43a 	srli	r3,r20,16
   4eab0:	1d46b03a 	or	r3,r3,r21
   4eab4:	1880042e 	bgeu	r3,r2,4eac8 <__umoddi3+0x240>
   4eab8:	1cc7883a 	add	r3,r3,r19
   4eabc:	1cc00236 	bltu	r3,r19,4eac8 <__umoddi3+0x240>
   4eac0:	1880012e 	bgeu	r3,r2,4eac8 <__umoddi3+0x240>
   4eac4:	1cc7883a 	add	r3,r3,r19
   4eac8:	18a1c83a 	sub	r16,r3,r2
   4eacc:	b00b883a 	mov	r5,r22
   4ead0:	8009883a 	mov	r4,r16
   4ead4:	004075c0 	call	4075c <__umodsi3>
   4ead8:	1023883a 	mov	r17,r2
   4eadc:	b00b883a 	mov	r5,r22
   4eae0:	8009883a 	mov	r4,r16
   4eae4:	00406f80 	call	406f8 <__udivsi3>
   4eae8:	8822943a 	slli	r17,r17,16
   4eaec:	b80b883a 	mov	r5,r23
   4eaf0:	1009883a 	mov	r4,r2
   4eaf4:	0040eec0 	call	40eec <__mulsi3>
   4eaf8:	a53fffcc 	andi	r20,r20,65535
   4eafc:	a446b03a 	or	r3,r20,r17
   4eb00:	18bfac2e 	bgeu	r3,r2,4e9b4 <__alt_data_end+0xfffdc9b4>
   4eb04:	003fa706 	br	4e9a4 <__alt_data_end+0xfffdc9a4>
   4eb08:	2005883a 	mov	r2,r4
   4eb0c:	2807883a 	mov	r3,r5
   4eb10:	dfc00c17 	ldw	ra,48(sp)
   4eb14:	df000b17 	ldw	fp,44(sp)
   4eb18:	ddc00a17 	ldw	r23,40(sp)
   4eb1c:	dd800917 	ldw	r22,36(sp)
   4eb20:	dd400817 	ldw	r21,32(sp)
   4eb24:	dd000717 	ldw	r20,28(sp)
   4eb28:	dcc00617 	ldw	r19,24(sp)
   4eb2c:	dc800517 	ldw	r18,20(sp)
   4eb30:	dc400417 	ldw	r17,16(sp)
   4eb34:	dc000317 	ldw	r16,12(sp)
   4eb38:	dec00d04 	addi	sp,sp,52
   4eb3c:	f800283a 	ret
   4eb40:	04c03fc4 	movi	r19,255
   4eb44:	99c9803a 	cmpltu	r4,r19,r7
   4eb48:	200890fa 	slli	r4,r4,3
   4eb4c:	003fa406 	br	4e9e0 <__alt_data_end+0xfffdc9e0>
   4eb50:	00803fc4 	movi	r2,255
   4eb54:	14c5803a 	cmpltu	r2,r2,r19
   4eb58:	100490fa 	slli	r2,r2,3
   4eb5c:	003fbc06 	br	4ea50 <__alt_data_end+0xfffdca50>
   4eb60:	00804034 	movhi	r2,256
   4eb64:	10bfffc4 	addi	r2,r2,-1
   4eb68:	1180a636 	bltu	r2,r6,4ee04 <__umoddi3+0x57c>
   4eb6c:	01000404 	movi	r4,16
   4eb70:	003f5c06 	br	4e8e4 <__alt_data_end+0xfffdc8e4>
   4eb74:	3d0e983a 	sll	r7,r7,r20
   4eb78:	34ead83a 	srl	r21,r6,r19
   4eb7c:	8cc6d83a 	srl	r3,r17,r19
   4eb80:	8d10983a 	sll	r8,r17,r20
   4eb84:	3d6ab03a 	or	r21,r7,r21
   4eb88:	a82cd43a 	srli	r22,r21,16
   4eb8c:	84e2d83a 	srl	r17,r16,r19
   4eb90:	1809883a 	mov	r4,r3
   4eb94:	b00b883a 	mov	r5,r22
   4eb98:	8a22b03a 	or	r17,r17,r8
   4eb9c:	3524983a 	sll	r18,r6,r20
   4eba0:	dc400015 	stw	r17,0(sp)
   4eba4:	d8c00115 	stw	r3,4(sp)
   4eba8:	004075c0 	call	4075c <__umodsi3>
   4ebac:	d8c00117 	ldw	r3,4(sp)
   4ebb0:	b00b883a 	mov	r5,r22
   4ebb4:	1039883a 	mov	fp,r2
   4ebb8:	1809883a 	mov	r4,r3
   4ebbc:	00406f80 	call	406f8 <__udivsi3>
   4ebc0:	adffffcc 	andi	r23,r21,65535
   4ebc4:	100b883a 	mov	r5,r2
   4ebc8:	b809883a 	mov	r4,r23
   4ebcc:	1023883a 	mov	r17,r2
   4ebd0:	0040eec0 	call	40eec <__mulsi3>
   4ebd4:	d9400017 	ldw	r5,0(sp)
   4ebd8:	e008943a 	slli	r4,fp,16
   4ebdc:	8520983a 	sll	r16,r16,r20
   4ebe0:	2806d43a 	srli	r3,r5,16
   4ebe4:	1906b03a 	or	r3,r3,r4
   4ebe8:	1880042e 	bgeu	r3,r2,4ebfc <__umoddi3+0x374>
   4ebec:	1d47883a 	add	r3,r3,r21
   4ebf0:	893fffc4 	addi	r4,r17,-1
   4ebf4:	1d40892e 	bgeu	r3,r21,4ee1c <__umoddi3+0x594>
   4ebf8:	2023883a 	mov	r17,r4
   4ebfc:	18b9c83a 	sub	fp,r3,r2
   4ec00:	b00b883a 	mov	r5,r22
   4ec04:	e009883a 	mov	r4,fp
   4ec08:	004075c0 	call	4075c <__umodsi3>
   4ec0c:	b00b883a 	mov	r5,r22
   4ec10:	e009883a 	mov	r4,fp
   4ec14:	d8800215 	stw	r2,8(sp)
   4ec18:	00406f80 	call	406f8 <__udivsi3>
   4ec1c:	100b883a 	mov	r5,r2
   4ec20:	b809883a 	mov	r4,r23
   4ec24:	102d883a 	mov	r22,r2
   4ec28:	0040eec0 	call	40eec <__mulsi3>
   4ec2c:	d9800217 	ldw	r6,8(sp)
   4ec30:	d8c00017 	ldw	r3,0(sp)
   4ec34:	300c943a 	slli	r6,r6,16
   4ec38:	1a3fffcc 	andi	r8,r3,65535
   4ec3c:	4190b03a 	or	r8,r8,r6
   4ec40:	4080042e 	bgeu	r8,r2,4ec54 <__umoddi3+0x3cc>
   4ec44:	4551883a 	add	r8,r8,r21
   4ec48:	b0ffffc4 	addi	r3,r22,-1
   4ec4c:	45406f2e 	bgeu	r8,r21,4ee0c <__umoddi3+0x584>
   4ec50:	182d883a 	mov	r22,r3
   4ec54:	880e943a 	slli	r7,r17,16
   4ec58:	9006d43a 	srli	r3,r18,16
   4ec5c:	91bfffcc 	andi	r6,r18,65535
   4ec60:	3dacb03a 	or	r22,r7,r22
   4ec64:	b02ed43a 	srli	r23,r22,16
   4ec68:	b5bfffcc 	andi	r22,r22,65535
   4ec6c:	300b883a 	mov	r5,r6
   4ec70:	b009883a 	mov	r4,r22
   4ec74:	40a3c83a 	sub	r17,r8,r2
   4ec78:	d8c00115 	stw	r3,4(sp)
   4ec7c:	d9800215 	stw	r6,8(sp)
   4ec80:	0040eec0 	call	40eec <__mulsi3>
   4ec84:	d9800217 	ldw	r6,8(sp)
   4ec88:	b809883a 	mov	r4,r23
   4ec8c:	1039883a 	mov	fp,r2
   4ec90:	300b883a 	mov	r5,r6
   4ec94:	0040eec0 	call	40eec <__mulsi3>
   4ec98:	d8c00117 	ldw	r3,4(sp)
   4ec9c:	b809883a 	mov	r4,r23
   4eca0:	d8800215 	stw	r2,8(sp)
   4eca4:	180b883a 	mov	r5,r3
   4eca8:	0040eec0 	call	40eec <__mulsi3>
   4ecac:	d8c00117 	ldw	r3,4(sp)
   4ecb0:	b009883a 	mov	r4,r22
   4ecb4:	102f883a 	mov	r23,r2
   4ecb8:	180b883a 	mov	r5,r3
   4ecbc:	0040eec0 	call	40eec <__mulsi3>
   4ecc0:	d9800217 	ldw	r6,8(sp)
   4ecc4:	e006d43a 	srli	r3,fp,16
   4ecc8:	1185883a 	add	r2,r2,r6
   4eccc:	1885883a 	add	r2,r3,r2
   4ecd0:	1180022e 	bgeu	r2,r6,4ecdc <__umoddi3+0x454>
   4ecd4:	00c00074 	movhi	r3,1
   4ecd8:	b8ef883a 	add	r23,r23,r3
   4ecdc:	1006d43a 	srli	r3,r2,16
   4ece0:	1004943a 	slli	r2,r2,16
   4ece4:	e73fffcc 	andi	fp,fp,65535
   4ece8:	1dc7883a 	add	r3,r3,r23
   4ecec:	1739883a 	add	fp,r2,fp
   4ecf0:	88c03a36 	bltu	r17,r3,4eddc <__umoddi3+0x554>
   4ecf4:	88c05126 	beq	r17,r3,4ee3c <__umoddi3+0x5b4>
   4ecf8:	88c9c83a 	sub	r4,r17,r3
   4ecfc:	e00f883a 	mov	r7,fp
   4ed00:	81cfc83a 	sub	r7,r16,r7
   4ed04:	81c7803a 	cmpltu	r3,r16,r7
   4ed08:	20c7c83a 	sub	r3,r4,r3
   4ed0c:	1cc4983a 	sll	r2,r3,r19
   4ed10:	3d0ed83a 	srl	r7,r7,r20
   4ed14:	1d06d83a 	srl	r3,r3,r20
   4ed18:	11c4b03a 	or	r2,r2,r7
   4ed1c:	003f7c06 	br	4eb10 <__alt_data_end+0xfffdcb10>
   4ed20:	9ca6983a 	sll	r19,r19,r18
   4ed24:	88f8d83a 	srl	fp,r17,r3
   4ed28:	80c4d83a 	srl	r2,r16,r3
   4ed2c:	982cd43a 	srli	r22,r19,16
   4ed30:	8ca2983a 	sll	r17,r17,r18
   4ed34:	e009883a 	mov	r4,fp
   4ed38:	b00b883a 	mov	r5,r22
   4ed3c:	146ab03a 	or	r21,r2,r17
   4ed40:	004075c0 	call	4075c <__umodsi3>
   4ed44:	b00b883a 	mov	r5,r22
   4ed48:	e009883a 	mov	r4,fp
   4ed4c:	1029883a 	mov	r20,r2
   4ed50:	9dffffcc 	andi	r23,r19,65535
   4ed54:	00406f80 	call	406f8 <__udivsi3>
   4ed58:	b809883a 	mov	r4,r23
   4ed5c:	100b883a 	mov	r5,r2
   4ed60:	0040eec0 	call	40eec <__mulsi3>
   4ed64:	a008943a 	slli	r4,r20,16
   4ed68:	a806d43a 	srli	r3,r21,16
   4ed6c:	84a8983a 	sll	r20,r16,r18
   4ed70:	1906b03a 	or	r3,r3,r4
   4ed74:	1880042e 	bgeu	r3,r2,4ed88 <__umoddi3+0x500>
   4ed78:	1cc7883a 	add	r3,r3,r19
   4ed7c:	1cc00236 	bltu	r3,r19,4ed88 <__umoddi3+0x500>
   4ed80:	1880012e 	bgeu	r3,r2,4ed88 <__umoddi3+0x500>
   4ed84:	1cc7883a 	add	r3,r3,r19
   4ed88:	18a3c83a 	sub	r17,r3,r2
   4ed8c:	b00b883a 	mov	r5,r22
   4ed90:	8809883a 	mov	r4,r17
   4ed94:	004075c0 	call	4075c <__umodsi3>
   4ed98:	b00b883a 	mov	r5,r22
   4ed9c:	8809883a 	mov	r4,r17
   4eda0:	1021883a 	mov	r16,r2
   4eda4:	00406f80 	call	406f8 <__udivsi3>
   4eda8:	100b883a 	mov	r5,r2
   4edac:	b809883a 	mov	r4,r23
   4edb0:	8020943a 	slli	r16,r16,16
   4edb4:	0040eec0 	call	40eec <__mulsi3>
   4edb8:	a8ffffcc 	andi	r3,r21,65535
   4edbc:	1c06b03a 	or	r3,r3,r16
   4edc0:	1880042e 	bgeu	r3,r2,4edd4 <__umoddi3+0x54c>
   4edc4:	1cc7883a 	add	r3,r3,r19
   4edc8:	1cc00236 	bltu	r3,r19,4edd4 <__umoddi3+0x54c>
   4edcc:	1880012e 	bgeu	r3,r2,4edd4 <__umoddi3+0x54c>
   4edd0:	1cc7883a 	add	r3,r3,r19
   4edd4:	18a3c83a 	sub	r17,r3,r2
   4edd8:	003f2906 	br	4ea80 <__alt_data_end+0xfffdca80>
   4eddc:	e48fc83a 	sub	r7,fp,r18
   4ede0:	1d49c83a 	sub	r4,r3,r21
   4ede4:	e1f9803a 	cmpltu	fp,fp,r7
   4ede8:	2739c83a 	sub	fp,r4,fp
   4edec:	8f09c83a 	sub	r4,r17,fp
   4edf0:	003fc306 	br	4ed00 <__alt_data_end+0xfffdcd00>
   4edf4:	01000604 	movi	r4,24
   4edf8:	003ef906 	br	4e9e0 <__alt_data_end+0xfffdc9e0>
   4edfc:	00800604 	movi	r2,24
   4ee00:	003f1306 	br	4ea50 <__alt_data_end+0xfffdca50>
   4ee04:	01000604 	movi	r4,24
   4ee08:	003eb606 	br	4e8e4 <__alt_data_end+0xfffdc8e4>
   4ee0c:	40bf902e 	bgeu	r8,r2,4ec50 <__alt_data_end+0xfffdcc50>
   4ee10:	b5bfff84 	addi	r22,r22,-2
   4ee14:	4551883a 	add	r8,r8,r21
   4ee18:	003f8e06 	br	4ec54 <__alt_data_end+0xfffdcc54>
   4ee1c:	18bf762e 	bgeu	r3,r2,4ebf8 <__alt_data_end+0xfffdcbf8>
   4ee20:	8c7fff84 	addi	r17,r17,-2
   4ee24:	1d47883a 	add	r3,r3,r21
   4ee28:	003f7406 	br	4ebfc <__alt_data_end+0xfffdcbfc>
   4ee2c:	1cc7883a 	add	r3,r3,r19
   4ee30:	003ecd06 	br	4e968 <__alt_data_end+0xfffdc968>
   4ee34:	8005883a 	mov	r2,r16
   4ee38:	003ef806 	br	4ea1c <__alt_data_end+0xfffdca1c>
   4ee3c:	873fe736 	bltu	r16,fp,4eddc <__alt_data_end+0xfffdcddc>
   4ee40:	e00f883a 	mov	r7,fp
   4ee44:	0009883a 	mov	r4,zero
   4ee48:	003fad06 	br	4ed00 <__alt_data_end+0xfffdcd00>

0004ee4c <__adddf3>:
   4ee4c:	02c00434 	movhi	r11,16
   4ee50:	5affffc4 	addi	r11,r11,-1
   4ee54:	2806d7fa 	srli	r3,r5,31
   4ee58:	2ad4703a 	and	r10,r5,r11
   4ee5c:	3ad2703a 	and	r9,r7,r11
   4ee60:	3804d53a 	srli	r2,r7,20
   4ee64:	3018d77a 	srli	r12,r6,29
   4ee68:	280ad53a 	srli	r5,r5,20
   4ee6c:	501490fa 	slli	r10,r10,3
   4ee70:	2010d77a 	srli	r8,r4,29
   4ee74:	481290fa 	slli	r9,r9,3
   4ee78:	380ed7fa 	srli	r7,r7,31
   4ee7c:	defffb04 	addi	sp,sp,-20
   4ee80:	dc800215 	stw	r18,8(sp)
   4ee84:	dc400115 	stw	r17,4(sp)
   4ee88:	dc000015 	stw	r16,0(sp)
   4ee8c:	dfc00415 	stw	ra,16(sp)
   4ee90:	dcc00315 	stw	r19,12(sp)
   4ee94:	1c803fcc 	andi	r18,r3,255
   4ee98:	2c01ffcc 	andi	r16,r5,2047
   4ee9c:	5210b03a 	or	r8,r10,r8
   4eea0:	202290fa 	slli	r17,r4,3
   4eea4:	1081ffcc 	andi	r2,r2,2047
   4eea8:	4b12b03a 	or	r9,r9,r12
   4eeac:	300c90fa 	slli	r6,r6,3
   4eeb0:	91c07526 	beq	r18,r7,4f088 <__adddf3+0x23c>
   4eeb4:	8087c83a 	sub	r3,r16,r2
   4eeb8:	00c0ab0e 	bge	zero,r3,4f168 <__adddf3+0x31c>
   4eebc:	10002a1e 	bne	r2,zero,4ef68 <__adddf3+0x11c>
   4eec0:	4984b03a 	or	r2,r9,r6
   4eec4:	1000961e 	bne	r2,zero,4f120 <__adddf3+0x2d4>
   4eec8:	888001cc 	andi	r2,r17,7
   4eecc:	10000726 	beq	r2,zero,4eeec <__adddf3+0xa0>
   4eed0:	888003cc 	andi	r2,r17,15
   4eed4:	00c00104 	movi	r3,4
   4eed8:	10c00426 	beq	r2,r3,4eeec <__adddf3+0xa0>
   4eedc:	88c7883a 	add	r3,r17,r3
   4eee0:	1c63803a 	cmpltu	r17,r3,r17
   4eee4:	4451883a 	add	r8,r8,r17
   4eee8:	1823883a 	mov	r17,r3
   4eeec:	4080202c 	andhi	r2,r8,128
   4eef0:	10005926 	beq	r2,zero,4f058 <__adddf3+0x20c>
   4eef4:	84000044 	addi	r16,r16,1
   4eef8:	0081ffc4 	movi	r2,2047
   4eefc:	8080ba26 	beq	r16,r2,4f1e8 <__adddf3+0x39c>
   4ef00:	00bfe034 	movhi	r2,65408
   4ef04:	10bfffc4 	addi	r2,r2,-1
   4ef08:	4090703a 	and	r8,r8,r2
   4ef0c:	4004977a 	slli	r2,r8,29
   4ef10:	4010927a 	slli	r8,r8,9
   4ef14:	8822d0fa 	srli	r17,r17,3
   4ef18:	8401ffcc 	andi	r16,r16,2047
   4ef1c:	4010d33a 	srli	r8,r8,12
   4ef20:	9007883a 	mov	r3,r18
   4ef24:	1444b03a 	or	r2,r2,r17
   4ef28:	8401ffcc 	andi	r16,r16,2047
   4ef2c:	8020953a 	slli	r16,r16,20
   4ef30:	18c03fcc 	andi	r3,r3,255
   4ef34:	01000434 	movhi	r4,16
   4ef38:	213fffc4 	addi	r4,r4,-1
   4ef3c:	180697fa 	slli	r3,r3,31
   4ef40:	4110703a 	and	r8,r8,r4
   4ef44:	4410b03a 	or	r8,r8,r16
   4ef48:	40c6b03a 	or	r3,r8,r3
   4ef4c:	dfc00417 	ldw	ra,16(sp)
   4ef50:	dcc00317 	ldw	r19,12(sp)
   4ef54:	dc800217 	ldw	r18,8(sp)
   4ef58:	dc400117 	ldw	r17,4(sp)
   4ef5c:	dc000017 	ldw	r16,0(sp)
   4ef60:	dec00504 	addi	sp,sp,20
   4ef64:	f800283a 	ret
   4ef68:	0081ffc4 	movi	r2,2047
   4ef6c:	80bfd626 	beq	r16,r2,4eec8 <__alt_data_end+0xfffdcec8>
   4ef70:	4a402034 	orhi	r9,r9,128
   4ef74:	00800e04 	movi	r2,56
   4ef78:	10c09f16 	blt	r2,r3,4f1f8 <__adddf3+0x3ac>
   4ef7c:	008007c4 	movi	r2,31
   4ef80:	10c0c216 	blt	r2,r3,4f28c <__adddf3+0x440>
   4ef84:	00800804 	movi	r2,32
   4ef88:	10c5c83a 	sub	r2,r2,r3
   4ef8c:	488a983a 	sll	r5,r9,r2
   4ef90:	30c8d83a 	srl	r4,r6,r3
   4ef94:	3084983a 	sll	r2,r6,r2
   4ef98:	48c6d83a 	srl	r3,r9,r3
   4ef9c:	290cb03a 	or	r6,r5,r4
   4efa0:	1004c03a 	cmpne	r2,r2,zero
   4efa4:	308cb03a 	or	r6,r6,r2
   4efa8:	898dc83a 	sub	r6,r17,r6
   4efac:	89a3803a 	cmpltu	r17,r17,r6
   4efb0:	40d1c83a 	sub	r8,r8,r3
   4efb4:	4451c83a 	sub	r8,r8,r17
   4efb8:	3023883a 	mov	r17,r6
   4efbc:	4080202c 	andhi	r2,r8,128
   4efc0:	10002326 	beq	r2,zero,4f050 <__adddf3+0x204>
   4efc4:	04c02034 	movhi	r19,128
   4efc8:	9cffffc4 	addi	r19,r19,-1
   4efcc:	44e6703a 	and	r19,r8,r19
   4efd0:	98007626 	beq	r19,zero,4f1ac <__adddf3+0x360>
   4efd4:	9809883a 	mov	r4,r19
   4efd8:	0040e880 	call	40e88 <__clzsi2>
   4efdc:	10fffe04 	addi	r3,r2,-8
   4efe0:	010007c4 	movi	r4,31
   4efe4:	20c07716 	blt	r4,r3,4f1c4 <__adddf3+0x378>
   4efe8:	00800804 	movi	r2,32
   4efec:	10c5c83a 	sub	r2,r2,r3
   4eff0:	8884d83a 	srl	r2,r17,r2
   4eff4:	98d0983a 	sll	r8,r19,r3
   4eff8:	88e2983a 	sll	r17,r17,r3
   4effc:	1204b03a 	or	r2,r2,r8
   4f000:	1c007416 	blt	r3,r16,4f1d4 <__adddf3+0x388>
   4f004:	1c21c83a 	sub	r16,r3,r16
   4f008:	82000044 	addi	r8,r16,1
   4f00c:	00c007c4 	movi	r3,31
   4f010:	1a009116 	blt	r3,r8,4f258 <__adddf3+0x40c>
   4f014:	00c00804 	movi	r3,32
   4f018:	1a07c83a 	sub	r3,r3,r8
   4f01c:	8a08d83a 	srl	r4,r17,r8
   4f020:	88e2983a 	sll	r17,r17,r3
   4f024:	10c6983a 	sll	r3,r2,r3
   4f028:	1210d83a 	srl	r8,r2,r8
   4f02c:	8804c03a 	cmpne	r2,r17,zero
   4f030:	1906b03a 	or	r3,r3,r4
   4f034:	18a2b03a 	or	r17,r3,r2
   4f038:	0021883a 	mov	r16,zero
   4f03c:	003fa206 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f040:	1890b03a 	or	r8,r3,r2
   4f044:	40017d26 	beq	r8,zero,4f63c <__adddf3+0x7f0>
   4f048:	1011883a 	mov	r8,r2
   4f04c:	1823883a 	mov	r17,r3
   4f050:	888001cc 	andi	r2,r17,7
   4f054:	103f9e1e 	bne	r2,zero,4eed0 <__alt_data_end+0xfffdced0>
   4f058:	4004977a 	slli	r2,r8,29
   4f05c:	8822d0fa 	srli	r17,r17,3
   4f060:	4010d0fa 	srli	r8,r8,3
   4f064:	9007883a 	mov	r3,r18
   4f068:	1444b03a 	or	r2,r2,r17
   4f06c:	0101ffc4 	movi	r4,2047
   4f070:	81002426 	beq	r16,r4,4f104 <__adddf3+0x2b8>
   4f074:	8120703a 	and	r16,r16,r4
   4f078:	01000434 	movhi	r4,16
   4f07c:	213fffc4 	addi	r4,r4,-1
   4f080:	4110703a 	and	r8,r8,r4
   4f084:	003fa806 	br	4ef28 <__alt_data_end+0xfffdcf28>
   4f088:	8089c83a 	sub	r4,r16,r2
   4f08c:	01005e0e 	bge	zero,r4,4f208 <__adddf3+0x3bc>
   4f090:	10002b26 	beq	r2,zero,4f140 <__adddf3+0x2f4>
   4f094:	0081ffc4 	movi	r2,2047
   4f098:	80bf8b26 	beq	r16,r2,4eec8 <__alt_data_end+0xfffdcec8>
   4f09c:	4a402034 	orhi	r9,r9,128
   4f0a0:	00800e04 	movi	r2,56
   4f0a4:	1100a40e 	bge	r2,r4,4f338 <__adddf3+0x4ec>
   4f0a8:	498cb03a 	or	r6,r9,r6
   4f0ac:	300ac03a 	cmpne	r5,r6,zero
   4f0b0:	0013883a 	mov	r9,zero
   4f0b4:	2c4b883a 	add	r5,r5,r17
   4f0b8:	2c63803a 	cmpltu	r17,r5,r17
   4f0bc:	4a11883a 	add	r8,r9,r8
   4f0c0:	8a11883a 	add	r8,r17,r8
   4f0c4:	2823883a 	mov	r17,r5
   4f0c8:	4080202c 	andhi	r2,r8,128
   4f0cc:	103fe026 	beq	r2,zero,4f050 <__alt_data_end+0xfffdd050>
   4f0d0:	84000044 	addi	r16,r16,1
   4f0d4:	0081ffc4 	movi	r2,2047
   4f0d8:	8080d226 	beq	r16,r2,4f424 <__adddf3+0x5d8>
   4f0dc:	00bfe034 	movhi	r2,65408
   4f0e0:	10bfffc4 	addi	r2,r2,-1
   4f0e4:	4090703a 	and	r8,r8,r2
   4f0e8:	880ad07a 	srli	r5,r17,1
   4f0ec:	400897fa 	slli	r4,r8,31
   4f0f0:	88c0004c 	andi	r3,r17,1
   4f0f4:	28e2b03a 	or	r17,r5,r3
   4f0f8:	4010d07a 	srli	r8,r8,1
   4f0fc:	2462b03a 	or	r17,r4,r17
   4f100:	003f7106 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f104:	4088b03a 	or	r4,r8,r2
   4f108:	20014526 	beq	r4,zero,4f620 <__adddf3+0x7d4>
   4f10c:	01000434 	movhi	r4,16
   4f110:	42000234 	orhi	r8,r8,8
   4f114:	213fffc4 	addi	r4,r4,-1
   4f118:	4110703a 	and	r8,r8,r4
   4f11c:	003f8206 	br	4ef28 <__alt_data_end+0xfffdcf28>
   4f120:	18ffffc4 	addi	r3,r3,-1
   4f124:	1800491e 	bne	r3,zero,4f24c <__adddf3+0x400>
   4f128:	898bc83a 	sub	r5,r17,r6
   4f12c:	8963803a 	cmpltu	r17,r17,r5
   4f130:	4251c83a 	sub	r8,r8,r9
   4f134:	4451c83a 	sub	r8,r8,r17
   4f138:	2823883a 	mov	r17,r5
   4f13c:	003f9f06 	br	4efbc <__alt_data_end+0xfffdcfbc>
   4f140:	4984b03a 	or	r2,r9,r6
   4f144:	103f6026 	beq	r2,zero,4eec8 <__alt_data_end+0xfffdcec8>
   4f148:	213fffc4 	addi	r4,r4,-1
   4f14c:	2000931e 	bne	r4,zero,4f39c <__adddf3+0x550>
   4f150:	898d883a 	add	r6,r17,r6
   4f154:	3463803a 	cmpltu	r17,r6,r17
   4f158:	4251883a 	add	r8,r8,r9
   4f15c:	8a11883a 	add	r8,r17,r8
   4f160:	3023883a 	mov	r17,r6
   4f164:	003fd806 	br	4f0c8 <__alt_data_end+0xfffdd0c8>
   4f168:	1800541e 	bne	r3,zero,4f2bc <__adddf3+0x470>
   4f16c:	80800044 	addi	r2,r16,1
   4f170:	1081ffcc 	andi	r2,r2,2047
   4f174:	00c00044 	movi	r3,1
   4f178:	1880a00e 	bge	r3,r2,4f3fc <__adddf3+0x5b0>
   4f17c:	8989c83a 	sub	r4,r17,r6
   4f180:	8905803a 	cmpltu	r2,r17,r4
   4f184:	4267c83a 	sub	r19,r8,r9
   4f188:	98a7c83a 	sub	r19,r19,r2
   4f18c:	9880202c 	andhi	r2,r19,128
   4f190:	10006326 	beq	r2,zero,4f320 <__adddf3+0x4d4>
   4f194:	3463c83a 	sub	r17,r6,r17
   4f198:	4a07c83a 	sub	r3,r9,r8
   4f19c:	344d803a 	cmpltu	r6,r6,r17
   4f1a0:	19a7c83a 	sub	r19,r3,r6
   4f1a4:	3825883a 	mov	r18,r7
   4f1a8:	983f8a1e 	bne	r19,zero,4efd4 <__alt_data_end+0xfffdcfd4>
   4f1ac:	8809883a 	mov	r4,r17
   4f1b0:	0040e880 	call	40e88 <__clzsi2>
   4f1b4:	10800804 	addi	r2,r2,32
   4f1b8:	10fffe04 	addi	r3,r2,-8
   4f1bc:	010007c4 	movi	r4,31
   4f1c0:	20ff890e 	bge	r4,r3,4efe8 <__alt_data_end+0xfffdcfe8>
   4f1c4:	10bff604 	addi	r2,r2,-40
   4f1c8:	8884983a 	sll	r2,r17,r2
   4f1cc:	0023883a 	mov	r17,zero
   4f1d0:	1c3f8c0e 	bge	r3,r16,4f004 <__alt_data_end+0xfffdd004>
   4f1d4:	023fe034 	movhi	r8,65408
   4f1d8:	423fffc4 	addi	r8,r8,-1
   4f1dc:	80e1c83a 	sub	r16,r16,r3
   4f1e0:	1210703a 	and	r8,r2,r8
   4f1e4:	003f3806 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f1e8:	9007883a 	mov	r3,r18
   4f1ec:	0011883a 	mov	r8,zero
   4f1f0:	0005883a 	mov	r2,zero
   4f1f4:	003f4c06 	br	4ef28 <__alt_data_end+0xfffdcf28>
   4f1f8:	498cb03a 	or	r6,r9,r6
   4f1fc:	300cc03a 	cmpne	r6,r6,zero
   4f200:	0007883a 	mov	r3,zero
   4f204:	003f6806 	br	4efa8 <__alt_data_end+0xfffdcfa8>
   4f208:	20009c1e 	bne	r4,zero,4f47c <__adddf3+0x630>
   4f20c:	80800044 	addi	r2,r16,1
   4f210:	1141ffcc 	andi	r5,r2,2047
   4f214:	01000044 	movi	r4,1
   4f218:	2140670e 	bge	r4,r5,4f3b8 <__adddf3+0x56c>
   4f21c:	0101ffc4 	movi	r4,2047
   4f220:	11007f26 	beq	r2,r4,4f420 <__adddf3+0x5d4>
   4f224:	898d883a 	add	r6,r17,r6
   4f228:	4247883a 	add	r3,r8,r9
   4f22c:	3451803a 	cmpltu	r8,r6,r17
   4f230:	40d1883a 	add	r8,r8,r3
   4f234:	402297fa 	slli	r17,r8,31
   4f238:	300cd07a 	srli	r6,r6,1
   4f23c:	4010d07a 	srli	r8,r8,1
   4f240:	1021883a 	mov	r16,r2
   4f244:	89a2b03a 	or	r17,r17,r6
   4f248:	003f1f06 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f24c:	0081ffc4 	movi	r2,2047
   4f250:	80bf481e 	bne	r16,r2,4ef74 <__alt_data_end+0xfffdcf74>
   4f254:	003f1c06 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f258:	843ff844 	addi	r16,r16,-31
   4f25c:	01000804 	movi	r4,32
   4f260:	1406d83a 	srl	r3,r2,r16
   4f264:	41005026 	beq	r8,r4,4f3a8 <__adddf3+0x55c>
   4f268:	01001004 	movi	r4,64
   4f26c:	2211c83a 	sub	r8,r4,r8
   4f270:	1204983a 	sll	r2,r2,r8
   4f274:	88a2b03a 	or	r17,r17,r2
   4f278:	8822c03a 	cmpne	r17,r17,zero
   4f27c:	1c62b03a 	or	r17,r3,r17
   4f280:	0011883a 	mov	r8,zero
   4f284:	0021883a 	mov	r16,zero
   4f288:	003f7106 	br	4f050 <__alt_data_end+0xfffdd050>
   4f28c:	193ff804 	addi	r4,r3,-32
   4f290:	00800804 	movi	r2,32
   4f294:	4908d83a 	srl	r4,r9,r4
   4f298:	18804526 	beq	r3,r2,4f3b0 <__adddf3+0x564>
   4f29c:	00801004 	movi	r2,64
   4f2a0:	10c5c83a 	sub	r2,r2,r3
   4f2a4:	4886983a 	sll	r3,r9,r2
   4f2a8:	198cb03a 	or	r6,r3,r6
   4f2ac:	300cc03a 	cmpne	r6,r6,zero
   4f2b0:	218cb03a 	or	r6,r4,r6
   4f2b4:	0007883a 	mov	r3,zero
   4f2b8:	003f3b06 	br	4efa8 <__alt_data_end+0xfffdcfa8>
   4f2bc:	80002a26 	beq	r16,zero,4f368 <__adddf3+0x51c>
   4f2c0:	0101ffc4 	movi	r4,2047
   4f2c4:	11006826 	beq	r2,r4,4f468 <__adddf3+0x61c>
   4f2c8:	00c7c83a 	sub	r3,zero,r3
   4f2cc:	42002034 	orhi	r8,r8,128
   4f2d0:	01000e04 	movi	r4,56
   4f2d4:	20c07c16 	blt	r4,r3,4f4c8 <__adddf3+0x67c>
   4f2d8:	010007c4 	movi	r4,31
   4f2dc:	20c0da16 	blt	r4,r3,4f648 <__adddf3+0x7fc>
   4f2e0:	01000804 	movi	r4,32
   4f2e4:	20c9c83a 	sub	r4,r4,r3
   4f2e8:	4114983a 	sll	r10,r8,r4
   4f2ec:	88cad83a 	srl	r5,r17,r3
   4f2f0:	8908983a 	sll	r4,r17,r4
   4f2f4:	40c6d83a 	srl	r3,r8,r3
   4f2f8:	5162b03a 	or	r17,r10,r5
   4f2fc:	2008c03a 	cmpne	r4,r4,zero
   4f300:	8922b03a 	or	r17,r17,r4
   4f304:	3463c83a 	sub	r17,r6,r17
   4f308:	48c7c83a 	sub	r3,r9,r3
   4f30c:	344d803a 	cmpltu	r6,r6,r17
   4f310:	1991c83a 	sub	r8,r3,r6
   4f314:	1021883a 	mov	r16,r2
   4f318:	3825883a 	mov	r18,r7
   4f31c:	003f2706 	br	4efbc <__alt_data_end+0xfffdcfbc>
   4f320:	24d0b03a 	or	r8,r4,r19
   4f324:	40001b1e 	bne	r8,zero,4f394 <__adddf3+0x548>
   4f328:	0005883a 	mov	r2,zero
   4f32c:	0007883a 	mov	r3,zero
   4f330:	0021883a 	mov	r16,zero
   4f334:	003f4d06 	br	4f06c <__alt_data_end+0xfffdd06c>
   4f338:	008007c4 	movi	r2,31
   4f33c:	11003c16 	blt	r2,r4,4f430 <__adddf3+0x5e4>
   4f340:	00800804 	movi	r2,32
   4f344:	1105c83a 	sub	r2,r2,r4
   4f348:	488e983a 	sll	r7,r9,r2
   4f34c:	310ad83a 	srl	r5,r6,r4
   4f350:	3084983a 	sll	r2,r6,r2
   4f354:	4912d83a 	srl	r9,r9,r4
   4f358:	394ab03a 	or	r5,r7,r5
   4f35c:	1004c03a 	cmpne	r2,r2,zero
   4f360:	288ab03a 	or	r5,r5,r2
   4f364:	003f5306 	br	4f0b4 <__alt_data_end+0xfffdd0b4>
   4f368:	4448b03a 	or	r4,r8,r17
   4f36c:	20003e26 	beq	r4,zero,4f468 <__adddf3+0x61c>
   4f370:	00c6303a 	nor	r3,zero,r3
   4f374:	18003a1e 	bne	r3,zero,4f460 <__adddf3+0x614>
   4f378:	3463c83a 	sub	r17,r6,r17
   4f37c:	4a07c83a 	sub	r3,r9,r8
   4f380:	344d803a 	cmpltu	r6,r6,r17
   4f384:	1991c83a 	sub	r8,r3,r6
   4f388:	1021883a 	mov	r16,r2
   4f38c:	3825883a 	mov	r18,r7
   4f390:	003f0a06 	br	4efbc <__alt_data_end+0xfffdcfbc>
   4f394:	2023883a 	mov	r17,r4
   4f398:	003f0d06 	br	4efd0 <__alt_data_end+0xfffdcfd0>
   4f39c:	0081ffc4 	movi	r2,2047
   4f3a0:	80bf3f1e 	bne	r16,r2,4f0a0 <__alt_data_end+0xfffdd0a0>
   4f3a4:	003ec806 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f3a8:	0005883a 	mov	r2,zero
   4f3ac:	003fb106 	br	4f274 <__alt_data_end+0xfffdd274>
   4f3b0:	0007883a 	mov	r3,zero
   4f3b4:	003fbc06 	br	4f2a8 <__alt_data_end+0xfffdd2a8>
   4f3b8:	4444b03a 	or	r2,r8,r17
   4f3bc:	8000871e 	bne	r16,zero,4f5dc <__adddf3+0x790>
   4f3c0:	1000ba26 	beq	r2,zero,4f6ac <__adddf3+0x860>
   4f3c4:	4984b03a 	or	r2,r9,r6
   4f3c8:	103ebf26 	beq	r2,zero,4eec8 <__alt_data_end+0xfffdcec8>
   4f3cc:	8985883a 	add	r2,r17,r6
   4f3d0:	4247883a 	add	r3,r8,r9
   4f3d4:	1451803a 	cmpltu	r8,r2,r17
   4f3d8:	40d1883a 	add	r8,r8,r3
   4f3dc:	40c0202c 	andhi	r3,r8,128
   4f3e0:	1023883a 	mov	r17,r2
   4f3e4:	183f1a26 	beq	r3,zero,4f050 <__alt_data_end+0xfffdd050>
   4f3e8:	00bfe034 	movhi	r2,65408
   4f3ec:	10bfffc4 	addi	r2,r2,-1
   4f3f0:	2021883a 	mov	r16,r4
   4f3f4:	4090703a 	and	r8,r8,r2
   4f3f8:	003eb306 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f3fc:	4444b03a 	or	r2,r8,r17
   4f400:	8000291e 	bne	r16,zero,4f4a8 <__adddf3+0x65c>
   4f404:	10004b1e 	bne	r2,zero,4f534 <__adddf3+0x6e8>
   4f408:	4990b03a 	or	r8,r9,r6
   4f40c:	40008b26 	beq	r8,zero,4f63c <__adddf3+0x7f0>
   4f410:	4811883a 	mov	r8,r9
   4f414:	3023883a 	mov	r17,r6
   4f418:	3825883a 	mov	r18,r7
   4f41c:	003eaa06 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f420:	1021883a 	mov	r16,r2
   4f424:	0011883a 	mov	r8,zero
   4f428:	0005883a 	mov	r2,zero
   4f42c:	003f0f06 	br	4f06c <__alt_data_end+0xfffdd06c>
   4f430:	217ff804 	addi	r5,r4,-32
   4f434:	00800804 	movi	r2,32
   4f438:	494ad83a 	srl	r5,r9,r5
   4f43c:	20807d26 	beq	r4,r2,4f634 <__adddf3+0x7e8>
   4f440:	00801004 	movi	r2,64
   4f444:	1109c83a 	sub	r4,r2,r4
   4f448:	4912983a 	sll	r9,r9,r4
   4f44c:	498cb03a 	or	r6,r9,r6
   4f450:	300cc03a 	cmpne	r6,r6,zero
   4f454:	298ab03a 	or	r5,r5,r6
   4f458:	0013883a 	mov	r9,zero
   4f45c:	003f1506 	br	4f0b4 <__alt_data_end+0xfffdd0b4>
   4f460:	0101ffc4 	movi	r4,2047
   4f464:	113f9a1e 	bne	r2,r4,4f2d0 <__alt_data_end+0xfffdd2d0>
   4f468:	4811883a 	mov	r8,r9
   4f46c:	3023883a 	mov	r17,r6
   4f470:	1021883a 	mov	r16,r2
   4f474:	3825883a 	mov	r18,r7
   4f478:	003e9306 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f47c:	8000161e 	bne	r16,zero,4f4d8 <__adddf3+0x68c>
   4f480:	444ab03a 	or	r5,r8,r17
   4f484:	28005126 	beq	r5,zero,4f5cc <__adddf3+0x780>
   4f488:	0108303a 	nor	r4,zero,r4
   4f48c:	20004d1e 	bne	r4,zero,4f5c4 <__adddf3+0x778>
   4f490:	89a3883a 	add	r17,r17,r6
   4f494:	4253883a 	add	r9,r8,r9
   4f498:	898d803a 	cmpltu	r6,r17,r6
   4f49c:	3251883a 	add	r8,r6,r9
   4f4a0:	1021883a 	mov	r16,r2
   4f4a4:	003f0806 	br	4f0c8 <__alt_data_end+0xfffdd0c8>
   4f4a8:	1000301e 	bne	r2,zero,4f56c <__adddf3+0x720>
   4f4ac:	4984b03a 	or	r2,r9,r6
   4f4b0:	10007126 	beq	r2,zero,4f678 <__adddf3+0x82c>
   4f4b4:	4811883a 	mov	r8,r9
   4f4b8:	3023883a 	mov	r17,r6
   4f4bc:	3825883a 	mov	r18,r7
   4f4c0:	0401ffc4 	movi	r16,2047
   4f4c4:	003e8006 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f4c8:	4462b03a 	or	r17,r8,r17
   4f4cc:	8822c03a 	cmpne	r17,r17,zero
   4f4d0:	0007883a 	mov	r3,zero
   4f4d4:	003f8b06 	br	4f304 <__alt_data_end+0xfffdd304>
   4f4d8:	0141ffc4 	movi	r5,2047
   4f4dc:	11403b26 	beq	r2,r5,4f5cc <__adddf3+0x780>
   4f4e0:	0109c83a 	sub	r4,zero,r4
   4f4e4:	42002034 	orhi	r8,r8,128
   4f4e8:	01400e04 	movi	r5,56
   4f4ec:	29006716 	blt	r5,r4,4f68c <__adddf3+0x840>
   4f4f0:	014007c4 	movi	r5,31
   4f4f4:	29007016 	blt	r5,r4,4f6b8 <__adddf3+0x86c>
   4f4f8:	01400804 	movi	r5,32
   4f4fc:	290bc83a 	sub	r5,r5,r4
   4f500:	4154983a 	sll	r10,r8,r5
   4f504:	890ed83a 	srl	r7,r17,r4
   4f508:	894a983a 	sll	r5,r17,r5
   4f50c:	4108d83a 	srl	r4,r8,r4
   4f510:	51e2b03a 	or	r17,r10,r7
   4f514:	280ac03a 	cmpne	r5,r5,zero
   4f518:	8962b03a 	or	r17,r17,r5
   4f51c:	89a3883a 	add	r17,r17,r6
   4f520:	2253883a 	add	r9,r4,r9
   4f524:	898d803a 	cmpltu	r6,r17,r6
   4f528:	3251883a 	add	r8,r6,r9
   4f52c:	1021883a 	mov	r16,r2
   4f530:	003ee506 	br	4f0c8 <__alt_data_end+0xfffdd0c8>
   4f534:	4984b03a 	or	r2,r9,r6
   4f538:	103e6326 	beq	r2,zero,4eec8 <__alt_data_end+0xfffdcec8>
   4f53c:	8987c83a 	sub	r3,r17,r6
   4f540:	88c9803a 	cmpltu	r4,r17,r3
   4f544:	4245c83a 	sub	r2,r8,r9
   4f548:	1105c83a 	sub	r2,r2,r4
   4f54c:	1100202c 	andhi	r4,r2,128
   4f550:	203ebb26 	beq	r4,zero,4f040 <__alt_data_end+0xfffdd040>
   4f554:	3463c83a 	sub	r17,r6,r17
   4f558:	4a07c83a 	sub	r3,r9,r8
   4f55c:	344d803a 	cmpltu	r6,r6,r17
   4f560:	1991c83a 	sub	r8,r3,r6
   4f564:	3825883a 	mov	r18,r7
   4f568:	003e5706 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f56c:	4984b03a 	or	r2,r9,r6
   4f570:	10002e26 	beq	r2,zero,4f62c <__adddf3+0x7e0>
   4f574:	4004d0fa 	srli	r2,r8,3
   4f578:	8822d0fa 	srli	r17,r17,3
   4f57c:	4010977a 	slli	r8,r8,29
   4f580:	10c0022c 	andhi	r3,r2,8
   4f584:	4462b03a 	or	r17,r8,r17
   4f588:	18000826 	beq	r3,zero,4f5ac <__adddf3+0x760>
   4f58c:	4808d0fa 	srli	r4,r9,3
   4f590:	20c0022c 	andhi	r3,r4,8
   4f594:	1800051e 	bne	r3,zero,4f5ac <__adddf3+0x760>
   4f598:	300cd0fa 	srli	r6,r6,3
   4f59c:	4806977a 	slli	r3,r9,29
   4f5a0:	2005883a 	mov	r2,r4
   4f5a4:	3825883a 	mov	r18,r7
   4f5a8:	19a2b03a 	or	r17,r3,r6
   4f5ac:	8810d77a 	srli	r8,r17,29
   4f5b0:	100490fa 	slli	r2,r2,3
   4f5b4:	882290fa 	slli	r17,r17,3
   4f5b8:	0401ffc4 	movi	r16,2047
   4f5bc:	4090b03a 	or	r8,r8,r2
   4f5c0:	003e4106 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f5c4:	0141ffc4 	movi	r5,2047
   4f5c8:	117fc71e 	bne	r2,r5,4f4e8 <__alt_data_end+0xfffdd4e8>
   4f5cc:	4811883a 	mov	r8,r9
   4f5d0:	3023883a 	mov	r17,r6
   4f5d4:	1021883a 	mov	r16,r2
   4f5d8:	003e3b06 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f5dc:	10002f26 	beq	r2,zero,4f69c <__adddf3+0x850>
   4f5e0:	4984b03a 	or	r2,r9,r6
   4f5e4:	10001126 	beq	r2,zero,4f62c <__adddf3+0x7e0>
   4f5e8:	4004d0fa 	srli	r2,r8,3
   4f5ec:	8822d0fa 	srli	r17,r17,3
   4f5f0:	4010977a 	slli	r8,r8,29
   4f5f4:	10c0022c 	andhi	r3,r2,8
   4f5f8:	4462b03a 	or	r17,r8,r17
   4f5fc:	183feb26 	beq	r3,zero,4f5ac <__alt_data_end+0xfffdd5ac>
   4f600:	4808d0fa 	srli	r4,r9,3
   4f604:	20c0022c 	andhi	r3,r4,8
   4f608:	183fe81e 	bne	r3,zero,4f5ac <__alt_data_end+0xfffdd5ac>
   4f60c:	300cd0fa 	srli	r6,r6,3
   4f610:	4806977a 	slli	r3,r9,29
   4f614:	2005883a 	mov	r2,r4
   4f618:	19a2b03a 	or	r17,r3,r6
   4f61c:	003fe306 	br	4f5ac <__alt_data_end+0xfffdd5ac>
   4f620:	0011883a 	mov	r8,zero
   4f624:	0005883a 	mov	r2,zero
   4f628:	003e3f06 	br	4ef28 <__alt_data_end+0xfffdcf28>
   4f62c:	0401ffc4 	movi	r16,2047
   4f630:	003e2506 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f634:	0013883a 	mov	r9,zero
   4f638:	003f8406 	br	4f44c <__alt_data_end+0xfffdd44c>
   4f63c:	0005883a 	mov	r2,zero
   4f640:	0007883a 	mov	r3,zero
   4f644:	003e8906 	br	4f06c <__alt_data_end+0xfffdd06c>
   4f648:	197ff804 	addi	r5,r3,-32
   4f64c:	01000804 	movi	r4,32
   4f650:	414ad83a 	srl	r5,r8,r5
   4f654:	19002426 	beq	r3,r4,4f6e8 <__adddf3+0x89c>
   4f658:	01001004 	movi	r4,64
   4f65c:	20c7c83a 	sub	r3,r4,r3
   4f660:	40c6983a 	sll	r3,r8,r3
   4f664:	1c46b03a 	or	r3,r3,r17
   4f668:	1806c03a 	cmpne	r3,r3,zero
   4f66c:	28e2b03a 	or	r17,r5,r3
   4f670:	0007883a 	mov	r3,zero
   4f674:	003f2306 	br	4f304 <__alt_data_end+0xfffdd304>
   4f678:	0007883a 	mov	r3,zero
   4f67c:	5811883a 	mov	r8,r11
   4f680:	00bfffc4 	movi	r2,-1
   4f684:	0401ffc4 	movi	r16,2047
   4f688:	003e7806 	br	4f06c <__alt_data_end+0xfffdd06c>
   4f68c:	4462b03a 	or	r17,r8,r17
   4f690:	8822c03a 	cmpne	r17,r17,zero
   4f694:	0009883a 	mov	r4,zero
   4f698:	003fa006 	br	4f51c <__alt_data_end+0xfffdd51c>
   4f69c:	4811883a 	mov	r8,r9
   4f6a0:	3023883a 	mov	r17,r6
   4f6a4:	0401ffc4 	movi	r16,2047
   4f6a8:	003e0706 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f6ac:	4811883a 	mov	r8,r9
   4f6b0:	3023883a 	mov	r17,r6
   4f6b4:	003e0406 	br	4eec8 <__alt_data_end+0xfffdcec8>
   4f6b8:	21fff804 	addi	r7,r4,-32
   4f6bc:	01400804 	movi	r5,32
   4f6c0:	41ced83a 	srl	r7,r8,r7
   4f6c4:	21400a26 	beq	r4,r5,4f6f0 <__adddf3+0x8a4>
   4f6c8:	01401004 	movi	r5,64
   4f6cc:	2909c83a 	sub	r4,r5,r4
   4f6d0:	4108983a 	sll	r4,r8,r4
   4f6d4:	2448b03a 	or	r4,r4,r17
   4f6d8:	2008c03a 	cmpne	r4,r4,zero
   4f6dc:	3922b03a 	or	r17,r7,r4
   4f6e0:	0009883a 	mov	r4,zero
   4f6e4:	003f8d06 	br	4f51c <__alt_data_end+0xfffdd51c>
   4f6e8:	0007883a 	mov	r3,zero
   4f6ec:	003fdd06 	br	4f664 <__alt_data_end+0xfffdd664>
   4f6f0:	0009883a 	mov	r4,zero
   4f6f4:	003ff706 	br	4f6d4 <__alt_data_end+0xfffdd6d4>

0004f6f8 <__divdf3>:
   4f6f8:	defff004 	addi	sp,sp,-64
   4f6fc:	dc800815 	stw	r18,32(sp)
   4f700:	2824d53a 	srli	r18,r5,20
   4f704:	dd800c15 	stw	r22,48(sp)
   4f708:	282cd7fa 	srli	r22,r5,31
   4f70c:	dc000615 	stw	r16,24(sp)
   4f710:	04000434 	movhi	r16,16
   4f714:	843fffc4 	addi	r16,r16,-1
   4f718:	dfc00f15 	stw	ra,60(sp)
   4f71c:	df000e15 	stw	fp,56(sp)
   4f720:	ddc00d15 	stw	r23,52(sp)
   4f724:	dd400b15 	stw	r21,44(sp)
   4f728:	dd000a15 	stw	r20,40(sp)
   4f72c:	dcc00915 	stw	r19,36(sp)
   4f730:	dc400715 	stw	r17,28(sp)
   4f734:	9481ffcc 	andi	r18,r18,2047
   4f738:	2c20703a 	and	r16,r5,r16
   4f73c:	b2003fcc 	andi	r8,r22,255
   4f740:	90006126 	beq	r18,zero,4f8c8 <__divdf3+0x1d0>
   4f744:	0081ffc4 	movi	r2,2047
   4f748:	202b883a 	mov	r21,r4
   4f74c:	90803726 	beq	r18,r2,4f82c <__divdf3+0x134>
   4f750:	80800434 	orhi	r2,r16,16
   4f754:	100490fa 	slli	r2,r2,3
   4f758:	2020d77a 	srli	r16,r4,29
   4f75c:	202a90fa 	slli	r21,r4,3
   4f760:	94bf0044 	addi	r18,r18,-1023
   4f764:	80a0b03a 	or	r16,r16,r2
   4f768:	0013883a 	mov	r9,zero
   4f76c:	000b883a 	mov	r5,zero
   4f770:	3806d53a 	srli	r3,r7,20
   4f774:	382ed7fa 	srli	r23,r7,31
   4f778:	04400434 	movhi	r17,16
   4f77c:	8c7fffc4 	addi	r17,r17,-1
   4f780:	18c1ffcc 	andi	r3,r3,2047
   4f784:	3029883a 	mov	r20,r6
   4f788:	3c62703a 	and	r17,r7,r17
   4f78c:	bf003fcc 	andi	fp,r23,255
   4f790:	18006e26 	beq	r3,zero,4f94c <__divdf3+0x254>
   4f794:	0081ffc4 	movi	r2,2047
   4f798:	18806626 	beq	r3,r2,4f934 <__divdf3+0x23c>
   4f79c:	88800434 	orhi	r2,r17,16
   4f7a0:	100490fa 	slli	r2,r2,3
   4f7a4:	3022d77a 	srli	r17,r6,29
   4f7a8:	302890fa 	slli	r20,r6,3
   4f7ac:	18ff0044 	addi	r3,r3,-1023
   4f7b0:	88a2b03a 	or	r17,r17,r2
   4f7b4:	000f883a 	mov	r7,zero
   4f7b8:	b5e6f03a 	xor	r19,r22,r23
   4f7bc:	3a4cb03a 	or	r6,r7,r9
   4f7c0:	008003c4 	movi	r2,15
   4f7c4:	9809883a 	mov	r4,r19
   4f7c8:	90c7c83a 	sub	r3,r18,r3
   4f7cc:	9cc03fcc 	andi	r19,r19,255
   4f7d0:	11809636 	bltu	r2,r6,4fa2c <__divdf3+0x334>
   4f7d4:	300c90ba 	slli	r6,r6,2
   4f7d8:	00800174 	movhi	r2,5
   4f7dc:	10bdfb04 	addi	r2,r2,-2068
   4f7e0:	308d883a 	add	r6,r6,r2
   4f7e4:	30800017 	ldw	r2,0(r6)
   4f7e8:	1000683a 	jmp	r2
   4f7ec:	0004fa2c 	andhi	zero,zero,5096
   4f7f0:	0004f864 	muli	zero,zero,5089
   4f7f4:	0004fa1c 	xori	zero,zero,5096
   4f7f8:	0004f858 	cmpnei	zero,zero,5089
   4f7fc:	0004fa1c 	xori	zero,zero,5096
   4f800:	0004f9f0 	cmpltui	zero,zero,5095
   4f804:	0004fa1c 	xori	zero,zero,5096
   4f808:	0004f858 	cmpnei	zero,zero,5089
   4f80c:	0004f864 	muli	zero,zero,5089
   4f810:	0004f864 	muli	zero,zero,5089
   4f814:	0004f9f0 	cmpltui	zero,zero,5095
   4f818:	0004f858 	cmpnei	zero,zero,5089
   4f81c:	0004f848 	cmpgei	zero,zero,5089
   4f820:	0004f848 	cmpgei	zero,zero,5089
   4f824:	0004f848 	cmpgei	zero,zero,5089
   4f828:	0004fdb4 	movhi	zero,5110
   4f82c:	2404b03a 	or	r2,r4,r16
   4f830:	10006c1e 	bne	r2,zero,4f9e4 <__divdf3+0x2ec>
   4f834:	02400204 	movi	r9,8
   4f838:	0021883a 	mov	r16,zero
   4f83c:	002b883a 	mov	r21,zero
   4f840:	01400084 	movi	r5,2
   4f844:	003fca06 	br	4f770 <__alt_data_end+0xfffdd770>
   4f848:	8023883a 	mov	r17,r16
   4f84c:	a829883a 	mov	r20,r21
   4f850:	4039883a 	mov	fp,r8
   4f854:	280f883a 	mov	r7,r5
   4f858:	00800084 	movi	r2,2
   4f85c:	3881601e 	bne	r7,r2,4fde0 <__divdf3+0x6e8>
   4f860:	e027883a 	mov	r19,fp
   4f864:	9900004c 	andi	r4,r19,1
   4f868:	0081ffc4 	movi	r2,2047
   4f86c:	0021883a 	mov	r16,zero
   4f870:	002b883a 	mov	r21,zero
   4f874:	1004953a 	slli	r2,r2,20
   4f878:	20c03fcc 	andi	r3,r4,255
   4f87c:	01400434 	movhi	r5,16
   4f880:	297fffc4 	addi	r5,r5,-1
   4f884:	180697fa 	slli	r3,r3,31
   4f888:	8160703a 	and	r16,r16,r5
   4f88c:	80a0b03a 	or	r16,r16,r2
   4f890:	80c6b03a 	or	r3,r16,r3
   4f894:	a805883a 	mov	r2,r21
   4f898:	dfc00f17 	ldw	ra,60(sp)
   4f89c:	df000e17 	ldw	fp,56(sp)
   4f8a0:	ddc00d17 	ldw	r23,52(sp)
   4f8a4:	dd800c17 	ldw	r22,48(sp)
   4f8a8:	dd400b17 	ldw	r21,44(sp)
   4f8ac:	dd000a17 	ldw	r20,40(sp)
   4f8b0:	dcc00917 	ldw	r19,36(sp)
   4f8b4:	dc800817 	ldw	r18,32(sp)
   4f8b8:	dc400717 	ldw	r17,28(sp)
   4f8bc:	dc000617 	ldw	r16,24(sp)
   4f8c0:	dec01004 	addi	sp,sp,64
   4f8c4:	f800283a 	ret
   4f8c8:	2404b03a 	or	r2,r4,r16
   4f8cc:	2023883a 	mov	r17,r4
   4f8d0:	10003f26 	beq	r2,zero,4f9d0 <__divdf3+0x2d8>
   4f8d4:	80015e26 	beq	r16,zero,4fe50 <__divdf3+0x758>
   4f8d8:	8009883a 	mov	r4,r16
   4f8dc:	d9800215 	stw	r6,8(sp)
   4f8e0:	d9c00515 	stw	r7,20(sp)
   4f8e4:	da000415 	stw	r8,16(sp)
   4f8e8:	0040e880 	call	40e88 <__clzsi2>
   4f8ec:	d9800217 	ldw	r6,8(sp)
   4f8f0:	d9c00517 	ldw	r7,20(sp)
   4f8f4:	da000417 	ldw	r8,16(sp)
   4f8f8:	113ffd44 	addi	r4,r2,-11
   4f8fc:	00c00704 	movi	r3,28
   4f900:	19014f16 	blt	r3,r4,4fe40 <__divdf3+0x748>
   4f904:	00c00744 	movi	r3,29
   4f908:	157ffe04 	addi	r21,r2,-8
   4f90c:	1907c83a 	sub	r3,r3,r4
   4f910:	8560983a 	sll	r16,r16,r21
   4f914:	88c6d83a 	srl	r3,r17,r3
   4f918:	8d6a983a 	sll	r21,r17,r21
   4f91c:	1c20b03a 	or	r16,r3,r16
   4f920:	1080fcc4 	addi	r2,r2,1011
   4f924:	00a5c83a 	sub	r18,zero,r2
   4f928:	0013883a 	mov	r9,zero
   4f92c:	000b883a 	mov	r5,zero
   4f930:	003f8f06 	br	4f770 <__alt_data_end+0xfffdd770>
   4f934:	3444b03a 	or	r2,r6,r17
   4f938:	1000231e 	bne	r2,zero,4f9c8 <__divdf3+0x2d0>
   4f93c:	0023883a 	mov	r17,zero
   4f940:	0029883a 	mov	r20,zero
   4f944:	01c00084 	movi	r7,2
   4f948:	003f9b06 	br	4f7b8 <__alt_data_end+0xfffdd7b8>
   4f94c:	3444b03a 	or	r2,r6,r17
   4f950:	10001926 	beq	r2,zero,4f9b8 <__divdf3+0x2c0>
   4f954:	88014b26 	beq	r17,zero,4fe84 <__divdf3+0x78c>
   4f958:	8809883a 	mov	r4,r17
   4f95c:	d9400115 	stw	r5,4(sp)
   4f960:	d9800215 	stw	r6,8(sp)
   4f964:	da000415 	stw	r8,16(sp)
   4f968:	da400315 	stw	r9,12(sp)
   4f96c:	0040e880 	call	40e88 <__clzsi2>
   4f970:	d9400117 	ldw	r5,4(sp)
   4f974:	d9800217 	ldw	r6,8(sp)
   4f978:	da000417 	ldw	r8,16(sp)
   4f97c:	da400317 	ldw	r9,12(sp)
   4f980:	113ffd44 	addi	r4,r2,-11
   4f984:	00c00704 	movi	r3,28
   4f988:	19013a16 	blt	r3,r4,4fe74 <__divdf3+0x77c>
   4f98c:	00c00744 	movi	r3,29
   4f990:	153ffe04 	addi	r20,r2,-8
   4f994:	1907c83a 	sub	r3,r3,r4
   4f998:	8d22983a 	sll	r17,r17,r20
   4f99c:	30c6d83a 	srl	r3,r6,r3
   4f9a0:	3528983a 	sll	r20,r6,r20
   4f9a4:	1c62b03a 	or	r17,r3,r17
   4f9a8:	1080fcc4 	addi	r2,r2,1011
   4f9ac:	0087c83a 	sub	r3,zero,r2
   4f9b0:	000f883a 	mov	r7,zero
   4f9b4:	003f8006 	br	4f7b8 <__alt_data_end+0xfffdd7b8>
   4f9b8:	0023883a 	mov	r17,zero
   4f9bc:	0029883a 	mov	r20,zero
   4f9c0:	01c00044 	movi	r7,1
   4f9c4:	003f7c06 	br	4f7b8 <__alt_data_end+0xfffdd7b8>
   4f9c8:	01c000c4 	movi	r7,3
   4f9cc:	003f7a06 	br	4f7b8 <__alt_data_end+0xfffdd7b8>
   4f9d0:	02400104 	movi	r9,4
   4f9d4:	0021883a 	mov	r16,zero
   4f9d8:	002b883a 	mov	r21,zero
   4f9dc:	01400044 	movi	r5,1
   4f9e0:	003f6306 	br	4f770 <__alt_data_end+0xfffdd770>
   4f9e4:	02400304 	movi	r9,12
   4f9e8:	014000c4 	movi	r5,3
   4f9ec:	003f6006 	br	4f770 <__alt_data_end+0xfffdd770>
   4f9f0:	04000434 	movhi	r16,16
   4f9f4:	0009883a 	mov	r4,zero
   4f9f8:	843fffc4 	addi	r16,r16,-1
   4f9fc:	057fffc4 	movi	r21,-1
   4fa00:	0081ffc4 	movi	r2,2047
   4fa04:	003f9b06 	br	4f874 <__alt_data_end+0xfffdd874>
   4fa08:	00c00044 	movi	r3,1
   4fa0c:	1887c83a 	sub	r3,r3,r2
   4fa10:	01000e04 	movi	r4,56
   4fa14:	20c1530e 	bge	r4,r3,4ff64 <__divdf3+0x86c>
   4fa18:	9900004c 	andi	r4,r19,1
   4fa1c:	0005883a 	mov	r2,zero
   4fa20:	0021883a 	mov	r16,zero
   4fa24:	002b883a 	mov	r21,zero
   4fa28:	003f9206 	br	4f874 <__alt_data_end+0xfffdd874>
   4fa2c:	8c012e36 	bltu	r17,r16,4fee8 <__divdf3+0x7f0>
   4fa30:	84412c26 	beq	r16,r17,4fee4 <__divdf3+0x7ec>
   4fa34:	a82f883a 	mov	r23,r21
   4fa38:	18ffffc4 	addi	r3,r3,-1
   4fa3c:	002b883a 	mov	r21,zero
   4fa40:	a004d63a 	srli	r2,r20,24
   4fa44:	8822923a 	slli	r17,r17,8
   4fa48:	a028923a 	slli	r20,r20,8
   4fa4c:	8009883a 	mov	r4,r16
   4fa50:	88acb03a 	or	r22,r17,r2
   4fa54:	dd000015 	stw	r20,0(sp)
   4fa58:	b028d43a 	srli	r20,r22,16
   4fa5c:	d8c00215 	stw	r3,8(sp)
   4fa60:	b4bfffcc 	andi	r18,r22,65535
   4fa64:	a00b883a 	mov	r5,r20
   4fa68:	00406f80 	call	406f8 <__udivsi3>
   4fa6c:	100b883a 	mov	r5,r2
   4fa70:	9009883a 	mov	r4,r18
   4fa74:	1023883a 	mov	r17,r2
   4fa78:	0040eec0 	call	40eec <__mulsi3>
   4fa7c:	8009883a 	mov	r4,r16
   4fa80:	a00b883a 	mov	r5,r20
   4fa84:	1039883a 	mov	fp,r2
   4fa88:	004075c0 	call	4075c <__umodsi3>
   4fa8c:	1004943a 	slli	r2,r2,16
   4fa90:	b808d43a 	srli	r4,r23,16
   4fa94:	d8c00217 	ldw	r3,8(sp)
   4fa98:	2084b03a 	or	r2,r4,r2
   4fa9c:	1700062e 	bgeu	r2,fp,4fab8 <__divdf3+0x3c0>
   4faa0:	1585883a 	add	r2,r2,r22
   4faa4:	893fffc4 	addi	r4,r17,-1
   4faa8:	15811d36 	bltu	r2,r22,4ff20 <__divdf3+0x828>
   4faac:	17011c2e 	bgeu	r2,fp,4ff20 <__divdf3+0x828>
   4fab0:	8c7fff84 	addi	r17,r17,-2
   4fab4:	1585883a 	add	r2,r2,r22
   4fab8:	1739c83a 	sub	fp,r2,fp
   4fabc:	a00b883a 	mov	r5,r20
   4fac0:	e009883a 	mov	r4,fp
   4fac4:	d8c00215 	stw	r3,8(sp)
   4fac8:	00406f80 	call	406f8 <__udivsi3>
   4facc:	100b883a 	mov	r5,r2
   4fad0:	9009883a 	mov	r4,r18
   4fad4:	1021883a 	mov	r16,r2
   4fad8:	0040eec0 	call	40eec <__mulsi3>
   4fadc:	a00b883a 	mov	r5,r20
   4fae0:	e009883a 	mov	r4,fp
   4fae4:	d8800415 	stw	r2,16(sp)
   4fae8:	004075c0 	call	4075c <__umodsi3>
   4faec:	1004943a 	slli	r2,r2,16
   4faf0:	da000417 	ldw	r8,16(sp)
   4faf4:	bdffffcc 	andi	r23,r23,65535
   4faf8:	b884b03a 	or	r2,r23,r2
   4fafc:	d8c00217 	ldw	r3,8(sp)
   4fb00:	1200062e 	bgeu	r2,r8,4fb1c <__divdf3+0x424>
   4fb04:	1585883a 	add	r2,r2,r22
   4fb08:	813fffc4 	addi	r4,r16,-1
   4fb0c:	15810236 	bltu	r2,r22,4ff18 <__divdf3+0x820>
   4fb10:	1201012e 	bgeu	r2,r8,4ff18 <__divdf3+0x820>
   4fb14:	843fff84 	addi	r16,r16,-2
   4fb18:	1585883a 	add	r2,r2,r22
   4fb1c:	8822943a 	slli	r17,r17,16
   4fb20:	d9800017 	ldw	r6,0(sp)
   4fb24:	1211c83a 	sub	r8,r2,r8
   4fb28:	8c22b03a 	or	r17,r17,r16
   4fb2c:	373fffcc 	andi	fp,r6,65535
   4fb30:	8abfffcc 	andi	r10,r17,65535
   4fb34:	8820d43a 	srli	r16,r17,16
   4fb38:	5009883a 	mov	r4,r10
   4fb3c:	e00b883a 	mov	r5,fp
   4fb40:	302ed43a 	srli	r23,r6,16
   4fb44:	d8c00215 	stw	r3,8(sp)
   4fb48:	da000415 	stw	r8,16(sp)
   4fb4c:	da800115 	stw	r10,4(sp)
   4fb50:	0040eec0 	call	40eec <__mulsi3>
   4fb54:	800b883a 	mov	r5,r16
   4fb58:	e009883a 	mov	r4,fp
   4fb5c:	d8800515 	stw	r2,20(sp)
   4fb60:	0040eec0 	call	40eec <__mulsi3>
   4fb64:	8009883a 	mov	r4,r16
   4fb68:	b80b883a 	mov	r5,r23
   4fb6c:	d8800315 	stw	r2,12(sp)
   4fb70:	0040eec0 	call	40eec <__mulsi3>
   4fb74:	da800117 	ldw	r10,4(sp)
   4fb78:	b80b883a 	mov	r5,r23
   4fb7c:	1021883a 	mov	r16,r2
   4fb80:	5009883a 	mov	r4,r10
   4fb84:	0040eec0 	call	40eec <__mulsi3>
   4fb88:	d9c00517 	ldw	r7,20(sp)
   4fb8c:	da400317 	ldw	r9,12(sp)
   4fb90:	d8c00217 	ldw	r3,8(sp)
   4fb94:	3808d43a 	srli	r4,r7,16
   4fb98:	1245883a 	add	r2,r2,r9
   4fb9c:	da000417 	ldw	r8,16(sp)
   4fba0:	2085883a 	add	r2,r4,r2
   4fba4:	1240022e 	bgeu	r2,r9,4fbb0 <__divdf3+0x4b8>
   4fba8:	01000074 	movhi	r4,1
   4fbac:	8121883a 	add	r16,r16,r4
   4fbb0:	1008d43a 	srli	r4,r2,16
   4fbb4:	1004943a 	slli	r2,r2,16
   4fbb8:	39ffffcc 	andi	r7,r7,65535
   4fbbc:	2409883a 	add	r4,r4,r16
   4fbc0:	11c5883a 	add	r2,r2,r7
   4fbc4:	4100bb36 	bltu	r8,r4,4feb4 <__divdf3+0x7bc>
   4fbc8:	4100d726 	beq	r8,r4,4ff28 <__divdf3+0x830>
   4fbcc:	4109c83a 	sub	r4,r8,r4
   4fbd0:	a8a1c83a 	sub	r16,r21,r2
   4fbd4:	ac2b803a 	cmpltu	r21,r21,r16
   4fbd8:	256bc83a 	sub	r21,r4,r21
   4fbdc:	b540d926 	beq	r22,r21,4ff44 <__divdf3+0x84c>
   4fbe0:	a00b883a 	mov	r5,r20
   4fbe4:	a809883a 	mov	r4,r21
   4fbe8:	d8c00215 	stw	r3,8(sp)
   4fbec:	00406f80 	call	406f8 <__udivsi3>
   4fbf0:	100b883a 	mov	r5,r2
   4fbf4:	9009883a 	mov	r4,r18
   4fbf8:	d8800515 	stw	r2,20(sp)
   4fbfc:	0040eec0 	call	40eec <__mulsi3>
   4fc00:	a809883a 	mov	r4,r21
   4fc04:	a00b883a 	mov	r5,r20
   4fc08:	d8800415 	stw	r2,16(sp)
   4fc0c:	004075c0 	call	4075c <__umodsi3>
   4fc10:	1004943a 	slli	r2,r2,16
   4fc14:	8008d43a 	srli	r4,r16,16
   4fc18:	da000417 	ldw	r8,16(sp)
   4fc1c:	d8c00217 	ldw	r3,8(sp)
   4fc20:	2084b03a 	or	r2,r4,r2
   4fc24:	d9c00517 	ldw	r7,20(sp)
   4fc28:	1200062e 	bgeu	r2,r8,4fc44 <__divdf3+0x54c>
   4fc2c:	1585883a 	add	r2,r2,r22
   4fc30:	393fffc4 	addi	r4,r7,-1
   4fc34:	1580c536 	bltu	r2,r22,4ff4c <__divdf3+0x854>
   4fc38:	1200c42e 	bgeu	r2,r8,4ff4c <__divdf3+0x854>
   4fc3c:	39ffff84 	addi	r7,r7,-2
   4fc40:	1585883a 	add	r2,r2,r22
   4fc44:	122bc83a 	sub	r21,r2,r8
   4fc48:	a00b883a 	mov	r5,r20
   4fc4c:	a809883a 	mov	r4,r21
   4fc50:	d8c00215 	stw	r3,8(sp)
   4fc54:	d9c00515 	stw	r7,20(sp)
   4fc58:	00406f80 	call	406f8 <__udivsi3>
   4fc5c:	9009883a 	mov	r4,r18
   4fc60:	100b883a 	mov	r5,r2
   4fc64:	d8800415 	stw	r2,16(sp)
   4fc68:	0040eec0 	call	40eec <__mulsi3>
   4fc6c:	a809883a 	mov	r4,r21
   4fc70:	a00b883a 	mov	r5,r20
   4fc74:	1025883a 	mov	r18,r2
   4fc78:	004075c0 	call	4075c <__umodsi3>
   4fc7c:	1004943a 	slli	r2,r2,16
   4fc80:	813fffcc 	andi	r4,r16,65535
   4fc84:	d8c00217 	ldw	r3,8(sp)
   4fc88:	20a0b03a 	or	r16,r4,r2
   4fc8c:	d9c00517 	ldw	r7,20(sp)
   4fc90:	da000417 	ldw	r8,16(sp)
   4fc94:	8480062e 	bgeu	r16,r18,4fcb0 <__divdf3+0x5b8>
   4fc98:	85a1883a 	add	r16,r16,r22
   4fc9c:	40bfffc4 	addi	r2,r8,-1
   4fca0:	8580ac36 	bltu	r16,r22,4ff54 <__divdf3+0x85c>
   4fca4:	8480ab2e 	bgeu	r16,r18,4ff54 <__divdf3+0x85c>
   4fca8:	423fff84 	addi	r8,r8,-2
   4fcac:	85a1883a 	add	r16,r16,r22
   4fcb0:	3804943a 	slli	r2,r7,16
   4fcb4:	84a1c83a 	sub	r16,r16,r18
   4fcb8:	e009883a 	mov	r4,fp
   4fcbc:	1228b03a 	or	r20,r2,r8
   4fcc0:	a1ffffcc 	andi	r7,r20,65535
   4fcc4:	a024d43a 	srli	r18,r20,16
   4fcc8:	380b883a 	mov	r5,r7
   4fccc:	d8c00215 	stw	r3,8(sp)
   4fcd0:	d9c00515 	stw	r7,20(sp)
   4fcd4:	0040eec0 	call	40eec <__mulsi3>
   4fcd8:	900b883a 	mov	r5,r18
   4fcdc:	e009883a 	mov	r4,fp
   4fce0:	102b883a 	mov	r21,r2
   4fce4:	0040eec0 	call	40eec <__mulsi3>
   4fce8:	900b883a 	mov	r5,r18
   4fcec:	b809883a 	mov	r4,r23
   4fcf0:	1039883a 	mov	fp,r2
   4fcf4:	0040eec0 	call	40eec <__mulsi3>
   4fcf8:	d9c00517 	ldw	r7,20(sp)
   4fcfc:	b80b883a 	mov	r5,r23
   4fd00:	1025883a 	mov	r18,r2
   4fd04:	3809883a 	mov	r4,r7
   4fd08:	0040eec0 	call	40eec <__mulsi3>
   4fd0c:	a808d43a 	srli	r4,r21,16
   4fd10:	1705883a 	add	r2,r2,fp
   4fd14:	d8c00217 	ldw	r3,8(sp)
   4fd18:	2085883a 	add	r2,r4,r2
   4fd1c:	1700022e 	bgeu	r2,fp,4fd28 <__divdf3+0x630>
   4fd20:	01000074 	movhi	r4,1
   4fd24:	9125883a 	add	r18,r18,r4
   4fd28:	1008d43a 	srli	r4,r2,16
   4fd2c:	1004943a 	slli	r2,r2,16
   4fd30:	ad7fffcc 	andi	r21,r21,65535
   4fd34:	2489883a 	add	r4,r4,r18
   4fd38:	1545883a 	add	r2,r2,r21
   4fd3c:	81003836 	bltu	r16,r4,4fe20 <__divdf3+0x728>
   4fd40:	81003626 	beq	r16,r4,4fe1c <__divdf3+0x724>
   4fd44:	a5000054 	ori	r20,r20,1
   4fd48:	1880ffc4 	addi	r2,r3,1023
   4fd4c:	00bf2e0e 	bge	zero,r2,4fa08 <__alt_data_end+0xfffdda08>
   4fd50:	a10001cc 	andi	r4,r20,7
   4fd54:	20000726 	beq	r4,zero,4fd74 <__divdf3+0x67c>
   4fd58:	a10003cc 	andi	r4,r20,15
   4fd5c:	01400104 	movi	r5,4
   4fd60:	21400426 	beq	r4,r5,4fd74 <__divdf3+0x67c>
   4fd64:	a149883a 	add	r4,r20,r5
   4fd68:	2529803a 	cmpltu	r20,r4,r20
   4fd6c:	8d23883a 	add	r17,r17,r20
   4fd70:	2029883a 	mov	r20,r4
   4fd74:	8900402c 	andhi	r4,r17,256
   4fd78:	20000426 	beq	r4,zero,4fd8c <__divdf3+0x694>
   4fd7c:	18810004 	addi	r2,r3,1024
   4fd80:	00ffc034 	movhi	r3,65280
   4fd84:	18ffffc4 	addi	r3,r3,-1
   4fd88:	88e2703a 	and	r17,r17,r3
   4fd8c:	00c1ff84 	movi	r3,2046
   4fd90:	18beb416 	blt	r3,r2,4f864 <__alt_data_end+0xfffdd864>
   4fd94:	a028d0fa 	srli	r20,r20,3
   4fd98:	882a977a 	slli	r21,r17,29
   4fd9c:	8820927a 	slli	r16,r17,9
   4fda0:	1081ffcc 	andi	r2,r2,2047
   4fda4:	ad2ab03a 	or	r21,r21,r20
   4fda8:	8020d33a 	srli	r16,r16,12
   4fdac:	9900004c 	andi	r4,r19,1
   4fdb0:	003eb006 	br	4f874 <__alt_data_end+0xfffdd874>
   4fdb4:	8080022c 	andhi	r2,r16,8
   4fdb8:	10001226 	beq	r2,zero,4fe04 <__divdf3+0x70c>
   4fdbc:	8880022c 	andhi	r2,r17,8
   4fdc0:	1000101e 	bne	r2,zero,4fe04 <__divdf3+0x70c>
   4fdc4:	00800434 	movhi	r2,16
   4fdc8:	8c000234 	orhi	r16,r17,8
   4fdcc:	10bfffc4 	addi	r2,r2,-1
   4fdd0:	b809883a 	mov	r4,r23
   4fdd4:	80a0703a 	and	r16,r16,r2
   4fdd8:	a02b883a 	mov	r21,r20
   4fddc:	003f0806 	br	4fa00 <__alt_data_end+0xfffdda00>
   4fde0:	008000c4 	movi	r2,3
   4fde4:	3880b126 	beq	r7,r2,500ac <__divdf3+0x9b4>
   4fde8:	00800044 	movi	r2,1
   4fdec:	38805b1e 	bne	r7,r2,4ff5c <__divdf3+0x864>
   4fdf0:	e009883a 	mov	r4,fp
   4fdf4:	0005883a 	mov	r2,zero
   4fdf8:	0021883a 	mov	r16,zero
   4fdfc:	002b883a 	mov	r21,zero
   4fe00:	003e9c06 	br	4f874 <__alt_data_end+0xfffdd874>
   4fe04:	00800434 	movhi	r2,16
   4fe08:	84000234 	orhi	r16,r16,8
   4fe0c:	10bfffc4 	addi	r2,r2,-1
   4fe10:	b009883a 	mov	r4,r22
   4fe14:	80a0703a 	and	r16,r16,r2
   4fe18:	003ef906 	br	4fa00 <__alt_data_end+0xfffdda00>
   4fe1c:	103fca26 	beq	r2,zero,4fd48 <__alt_data_end+0xfffddd48>
   4fe20:	b421883a 	add	r16,r22,r16
   4fe24:	a17fffc4 	addi	r5,r20,-1
   4fe28:	8580422e 	bgeu	r16,r22,4ff34 <__divdf3+0x83c>
   4fe2c:	2829883a 	mov	r20,r5
   4fe30:	813fc41e 	bne	r16,r4,4fd44 <__alt_data_end+0xfffddd44>
   4fe34:	d9800017 	ldw	r6,0(sp)
   4fe38:	30bfc21e 	bne	r6,r2,4fd44 <__alt_data_end+0xfffddd44>
   4fe3c:	003fc206 	br	4fd48 <__alt_data_end+0xfffddd48>
   4fe40:	143ff604 	addi	r16,r2,-40
   4fe44:	8c20983a 	sll	r16,r17,r16
   4fe48:	002b883a 	mov	r21,zero
   4fe4c:	003eb406 	br	4f920 <__alt_data_end+0xfffdd920>
   4fe50:	d9800215 	stw	r6,8(sp)
   4fe54:	d9c00515 	stw	r7,20(sp)
   4fe58:	da000415 	stw	r8,16(sp)
   4fe5c:	0040e880 	call	40e88 <__clzsi2>
   4fe60:	10800804 	addi	r2,r2,32
   4fe64:	da000417 	ldw	r8,16(sp)
   4fe68:	d9c00517 	ldw	r7,20(sp)
   4fe6c:	d9800217 	ldw	r6,8(sp)
   4fe70:	003ea106 	br	4f8f8 <__alt_data_end+0xfffdd8f8>
   4fe74:	147ff604 	addi	r17,r2,-40
   4fe78:	3462983a 	sll	r17,r6,r17
   4fe7c:	0029883a 	mov	r20,zero
   4fe80:	003ec906 	br	4f9a8 <__alt_data_end+0xfffdd9a8>
   4fe84:	3009883a 	mov	r4,r6
   4fe88:	d9400115 	stw	r5,4(sp)
   4fe8c:	d9800215 	stw	r6,8(sp)
   4fe90:	da000415 	stw	r8,16(sp)
   4fe94:	da400315 	stw	r9,12(sp)
   4fe98:	0040e880 	call	40e88 <__clzsi2>
   4fe9c:	10800804 	addi	r2,r2,32
   4fea0:	da400317 	ldw	r9,12(sp)
   4fea4:	da000417 	ldw	r8,16(sp)
   4fea8:	d9800217 	ldw	r6,8(sp)
   4feac:	d9400117 	ldw	r5,4(sp)
   4feb0:	003eb306 	br	4f980 <__alt_data_end+0xfffdd980>
   4feb4:	d9800017 	ldw	r6,0(sp)
   4feb8:	a9ab883a 	add	r21,r21,r6
   4febc:	a98b803a 	cmpltu	r5,r21,r6
   4fec0:	2d8b883a 	add	r5,r5,r22
   4fec4:	2a11883a 	add	r8,r5,r8
   4fec8:	897fffc4 	addi	r5,r17,-1
   4fecc:	b2000c2e 	bgeu	r22,r8,4ff00 <__divdf3+0x808>
   4fed0:	41003f36 	bltu	r8,r4,4ffd0 <__divdf3+0x8d8>
   4fed4:	22006c26 	beq	r4,r8,50088 <__divdf3+0x990>
   4fed8:	4109c83a 	sub	r4,r8,r4
   4fedc:	2823883a 	mov	r17,r5
   4fee0:	003f3b06 	br	4fbd0 <__alt_data_end+0xfffddbd0>
   4fee4:	ad3ed336 	bltu	r21,r20,4fa34 <__alt_data_end+0xfffdda34>
   4fee8:	a804d07a 	srli	r2,r21,1
   4feec:	802e97fa 	slli	r23,r16,31
   4fef0:	a82a97fa 	slli	r21,r21,31
   4fef4:	8020d07a 	srli	r16,r16,1
   4fef8:	b8aeb03a 	or	r23,r23,r2
   4fefc:	003ed006 	br	4fa40 <__alt_data_end+0xfffdda40>
   4ff00:	b23ff51e 	bne	r22,r8,4fed8 <__alt_data_end+0xfffdded8>
   4ff04:	d9800017 	ldw	r6,0(sp)
   4ff08:	a9bff12e 	bgeu	r21,r6,4fed0 <__alt_data_end+0xfffdded0>
   4ff0c:	b109c83a 	sub	r4,r22,r4
   4ff10:	2823883a 	mov	r17,r5
   4ff14:	003f2e06 	br	4fbd0 <__alt_data_end+0xfffddbd0>
   4ff18:	2021883a 	mov	r16,r4
   4ff1c:	003eff06 	br	4fb1c <__alt_data_end+0xfffddb1c>
   4ff20:	2023883a 	mov	r17,r4
   4ff24:	003ee406 	br	4fab8 <__alt_data_end+0xfffddab8>
   4ff28:	a8bfe236 	bltu	r21,r2,4feb4 <__alt_data_end+0xfffddeb4>
   4ff2c:	0009883a 	mov	r4,zero
   4ff30:	003f2706 	br	4fbd0 <__alt_data_end+0xfffddbd0>
   4ff34:	81002d36 	bltu	r16,r4,4ffec <__divdf3+0x8f4>
   4ff38:	24005626 	beq	r4,r16,50094 <__divdf3+0x99c>
   4ff3c:	2829883a 	mov	r20,r5
   4ff40:	003f8006 	br	4fd44 <__alt_data_end+0xfffddd44>
   4ff44:	053fffc4 	movi	r20,-1
   4ff48:	003f7f06 	br	4fd48 <__alt_data_end+0xfffddd48>
   4ff4c:	200f883a 	mov	r7,r4
   4ff50:	003f3c06 	br	4fc44 <__alt_data_end+0xfffddc44>
   4ff54:	1011883a 	mov	r8,r2
   4ff58:	003f5506 	br	4fcb0 <__alt_data_end+0xfffddcb0>
   4ff5c:	e027883a 	mov	r19,fp
   4ff60:	003f7906 	br	4fd48 <__alt_data_end+0xfffddd48>
   4ff64:	010007c4 	movi	r4,31
   4ff68:	20c02816 	blt	r4,r3,5000c <__divdf3+0x914>
   4ff6c:	00800804 	movi	r2,32
   4ff70:	10c5c83a 	sub	r2,r2,r3
   4ff74:	888a983a 	sll	r5,r17,r2
   4ff78:	a0c8d83a 	srl	r4,r20,r3
   4ff7c:	a084983a 	sll	r2,r20,r2
   4ff80:	88e2d83a 	srl	r17,r17,r3
   4ff84:	2906b03a 	or	r3,r5,r4
   4ff88:	1004c03a 	cmpne	r2,r2,zero
   4ff8c:	1886b03a 	or	r3,r3,r2
   4ff90:	188001cc 	andi	r2,r3,7
   4ff94:	10000726 	beq	r2,zero,4ffb4 <__divdf3+0x8bc>
   4ff98:	188003cc 	andi	r2,r3,15
   4ff9c:	01000104 	movi	r4,4
   4ffa0:	11000426 	beq	r2,r4,4ffb4 <__divdf3+0x8bc>
   4ffa4:	1805883a 	mov	r2,r3
   4ffa8:	10c00104 	addi	r3,r2,4
   4ffac:	1885803a 	cmpltu	r2,r3,r2
   4ffb0:	88a3883a 	add	r17,r17,r2
   4ffb4:	8880202c 	andhi	r2,r17,128
   4ffb8:	10002926 	beq	r2,zero,50060 <__divdf3+0x968>
   4ffbc:	9900004c 	andi	r4,r19,1
   4ffc0:	00800044 	movi	r2,1
   4ffc4:	0021883a 	mov	r16,zero
   4ffc8:	002b883a 	mov	r21,zero
   4ffcc:	003e2906 	br	4f874 <__alt_data_end+0xfffdd874>
   4ffd0:	d9800017 	ldw	r6,0(sp)
   4ffd4:	8c7fff84 	addi	r17,r17,-2
   4ffd8:	a9ab883a 	add	r21,r21,r6
   4ffdc:	a98b803a 	cmpltu	r5,r21,r6
   4ffe0:	2d8b883a 	add	r5,r5,r22
   4ffe4:	2a11883a 	add	r8,r5,r8
   4ffe8:	003ef806 	br	4fbcc <__alt_data_end+0xfffddbcc>
   4ffec:	d9800017 	ldw	r6,0(sp)
   4fff0:	318f883a 	add	r7,r6,r6
   4fff4:	398b803a 	cmpltu	r5,r7,r6
   4fff8:	2d8d883a 	add	r6,r5,r22
   4fffc:	81a1883a 	add	r16,r16,r6
   50000:	a17fff84 	addi	r5,r20,-2
   50004:	d9c00015 	stw	r7,0(sp)
   50008:	003f8806 	br	4fe2c <__alt_data_end+0xfffdde2c>
   5000c:	013ff844 	movi	r4,-31
   50010:	2085c83a 	sub	r2,r4,r2
   50014:	8888d83a 	srl	r4,r17,r2
   50018:	00800804 	movi	r2,32
   5001c:	18802126 	beq	r3,r2,500a4 <__divdf3+0x9ac>
   50020:	04001004 	movi	r16,64
   50024:	80c7c83a 	sub	r3,r16,r3
   50028:	88e0983a 	sll	r16,r17,r3
   5002c:	8504b03a 	or	r2,r16,r20
   50030:	1004c03a 	cmpne	r2,r2,zero
   50034:	2084b03a 	or	r2,r4,r2
   50038:	144001cc 	andi	r17,r2,7
   5003c:	88000d1e 	bne	r17,zero,50074 <__divdf3+0x97c>
   50040:	0021883a 	mov	r16,zero
   50044:	102ad0fa 	srli	r21,r2,3
   50048:	9900004c 	andi	r4,r19,1
   5004c:	0005883a 	mov	r2,zero
   50050:	ac6ab03a 	or	r21,r21,r17
   50054:	003e0706 	br	4f874 <__alt_data_end+0xfffdd874>
   50058:	1007883a 	mov	r3,r2
   5005c:	0023883a 	mov	r17,zero
   50060:	8820927a 	slli	r16,r17,9
   50064:	1805883a 	mov	r2,r3
   50068:	8822977a 	slli	r17,r17,29
   5006c:	8020d33a 	srli	r16,r16,12
   50070:	003ff406 	br	50044 <__alt_data_end+0xfffde044>
   50074:	10c003cc 	andi	r3,r2,15
   50078:	01000104 	movi	r4,4
   5007c:	193ff626 	beq	r3,r4,50058 <__alt_data_end+0xfffde058>
   50080:	0023883a 	mov	r17,zero
   50084:	003fc806 	br	4ffa8 <__alt_data_end+0xfffddfa8>
   50088:	a8bfd136 	bltu	r21,r2,4ffd0 <__alt_data_end+0xfffddfd0>
   5008c:	2823883a 	mov	r17,r5
   50090:	003fa606 	br	4ff2c <__alt_data_end+0xfffddf2c>
   50094:	d9800017 	ldw	r6,0(sp)
   50098:	30bfd436 	bltu	r6,r2,4ffec <__alt_data_end+0xfffddfec>
   5009c:	2829883a 	mov	r20,r5
   500a0:	003f6406 	br	4fe34 <__alt_data_end+0xfffdde34>
   500a4:	0021883a 	mov	r16,zero
   500a8:	003fe006 	br	5002c <__alt_data_end+0xfffde02c>
   500ac:	00800434 	movhi	r2,16
   500b0:	8c000234 	orhi	r16,r17,8
   500b4:	10bfffc4 	addi	r2,r2,-1
   500b8:	e009883a 	mov	r4,fp
   500bc:	80a0703a 	and	r16,r16,r2
   500c0:	a02b883a 	mov	r21,r20
   500c4:	003e4e06 	br	4fa00 <__alt_data_end+0xfffdda00>

000500c8 <__eqdf2>:
   500c8:	2804d53a 	srli	r2,r5,20
   500cc:	3806d53a 	srli	r3,r7,20
   500d0:	02000434 	movhi	r8,16
   500d4:	423fffc4 	addi	r8,r8,-1
   500d8:	1081ffcc 	andi	r2,r2,2047
   500dc:	0281ffc4 	movi	r10,2047
   500e0:	2a12703a 	and	r9,r5,r8
   500e4:	18c1ffcc 	andi	r3,r3,2047
   500e8:	3a10703a 	and	r8,r7,r8
   500ec:	280ad7fa 	srli	r5,r5,31
   500f0:	380ed7fa 	srli	r7,r7,31
   500f4:	12801026 	beq	r2,r10,50138 <__eqdf2+0x70>
   500f8:	0281ffc4 	movi	r10,2047
   500fc:	1a800a26 	beq	r3,r10,50128 <__eqdf2+0x60>
   50100:	10c00226 	beq	r2,r3,5010c <__eqdf2+0x44>
   50104:	00800044 	movi	r2,1
   50108:	f800283a 	ret
   5010c:	4a3ffd1e 	bne	r9,r8,50104 <__alt_data_end+0xfffde104>
   50110:	21bffc1e 	bne	r4,r6,50104 <__alt_data_end+0xfffde104>
   50114:	29c00c26 	beq	r5,r7,50148 <__eqdf2+0x80>
   50118:	103ffa1e 	bne	r2,zero,50104 <__alt_data_end+0xfffde104>
   5011c:	2244b03a 	or	r2,r4,r9
   50120:	1004c03a 	cmpne	r2,r2,zero
   50124:	f800283a 	ret
   50128:	3214b03a 	or	r10,r6,r8
   5012c:	503ff426 	beq	r10,zero,50100 <__alt_data_end+0xfffde100>
   50130:	00800044 	movi	r2,1
   50134:	f800283a 	ret
   50138:	2254b03a 	or	r10,r4,r9
   5013c:	503fee26 	beq	r10,zero,500f8 <__alt_data_end+0xfffde0f8>
   50140:	00800044 	movi	r2,1
   50144:	f800283a 	ret
   50148:	0005883a 	mov	r2,zero
   5014c:	f800283a 	ret

00050150 <__gedf2>:
   50150:	2804d53a 	srli	r2,r5,20
   50154:	3806d53a 	srli	r3,r7,20
   50158:	02000434 	movhi	r8,16
   5015c:	423fffc4 	addi	r8,r8,-1
   50160:	1081ffcc 	andi	r2,r2,2047
   50164:	0241ffc4 	movi	r9,2047
   50168:	2a14703a 	and	r10,r5,r8
   5016c:	18c1ffcc 	andi	r3,r3,2047
   50170:	3a10703a 	and	r8,r7,r8
   50174:	280ad7fa 	srli	r5,r5,31
   50178:	380ed7fa 	srli	r7,r7,31
   5017c:	12401d26 	beq	r2,r9,501f4 <__gedf2+0xa4>
   50180:	0241ffc4 	movi	r9,2047
   50184:	1a401226 	beq	r3,r9,501d0 <__gedf2+0x80>
   50188:	1000081e 	bne	r2,zero,501ac <__gedf2+0x5c>
   5018c:	2296b03a 	or	r11,r4,r10
   50190:	5813003a 	cmpeq	r9,r11,zero
   50194:	1800091e 	bne	r3,zero,501bc <__gedf2+0x6c>
   50198:	3218b03a 	or	r12,r6,r8
   5019c:	6000071e 	bne	r12,zero,501bc <__gedf2+0x6c>
   501a0:	0005883a 	mov	r2,zero
   501a4:	5800101e 	bne	r11,zero,501e8 <__gedf2+0x98>
   501a8:	f800283a 	ret
   501ac:	18000c1e 	bne	r3,zero,501e0 <__gedf2+0x90>
   501b0:	3212b03a 	or	r9,r6,r8
   501b4:	48000c26 	beq	r9,zero,501e8 <__gedf2+0x98>
   501b8:	0013883a 	mov	r9,zero
   501bc:	39c03fcc 	andi	r7,r7,255
   501c0:	48000826 	beq	r9,zero,501e4 <__gedf2+0x94>
   501c4:	38000926 	beq	r7,zero,501ec <__gedf2+0x9c>
   501c8:	00800044 	movi	r2,1
   501cc:	f800283a 	ret
   501d0:	3212b03a 	or	r9,r6,r8
   501d4:	483fec26 	beq	r9,zero,50188 <__alt_data_end+0xfffde188>
   501d8:	00bfff84 	movi	r2,-2
   501dc:	f800283a 	ret
   501e0:	39c03fcc 	andi	r7,r7,255
   501e4:	29c00626 	beq	r5,r7,50200 <__gedf2+0xb0>
   501e8:	283ff726 	beq	r5,zero,501c8 <__alt_data_end+0xfffde1c8>
   501ec:	00bfffc4 	movi	r2,-1
   501f0:	f800283a 	ret
   501f4:	2292b03a 	or	r9,r4,r10
   501f8:	483fe126 	beq	r9,zero,50180 <__alt_data_end+0xfffde180>
   501fc:	003ff606 	br	501d8 <__alt_data_end+0xfffde1d8>
   50200:	18bff916 	blt	r3,r2,501e8 <__alt_data_end+0xfffde1e8>
   50204:	10c00316 	blt	r2,r3,50214 <__gedf2+0xc4>
   50208:	42bff736 	bltu	r8,r10,501e8 <__alt_data_end+0xfffde1e8>
   5020c:	52000326 	beq	r10,r8,5021c <__gedf2+0xcc>
   50210:	5200042e 	bgeu	r10,r8,50224 <__gedf2+0xd4>
   50214:	283fec1e 	bne	r5,zero,501c8 <__alt_data_end+0xfffde1c8>
   50218:	003ff406 	br	501ec <__alt_data_end+0xfffde1ec>
   5021c:	313ff236 	bltu	r6,r4,501e8 <__alt_data_end+0xfffde1e8>
   50220:	21bffc36 	bltu	r4,r6,50214 <__alt_data_end+0xfffde214>
   50224:	0005883a 	mov	r2,zero
   50228:	f800283a 	ret

0005022c <__ledf2>:
   5022c:	2804d53a 	srli	r2,r5,20
   50230:	3810d53a 	srli	r8,r7,20
   50234:	00c00434 	movhi	r3,16
   50238:	18ffffc4 	addi	r3,r3,-1
   5023c:	1081ffcc 	andi	r2,r2,2047
   50240:	0241ffc4 	movi	r9,2047
   50244:	28d4703a 	and	r10,r5,r3
   50248:	4201ffcc 	andi	r8,r8,2047
   5024c:	38c6703a 	and	r3,r7,r3
   50250:	280ad7fa 	srli	r5,r5,31
   50254:	380ed7fa 	srli	r7,r7,31
   50258:	12401f26 	beq	r2,r9,502d8 <__ledf2+0xac>
   5025c:	0241ffc4 	movi	r9,2047
   50260:	42401426 	beq	r8,r9,502b4 <__ledf2+0x88>
   50264:	1000091e 	bne	r2,zero,5028c <__ledf2+0x60>
   50268:	2296b03a 	or	r11,r4,r10
   5026c:	5813003a 	cmpeq	r9,r11,zero
   50270:	29403fcc 	andi	r5,r5,255
   50274:	40000a1e 	bne	r8,zero,502a0 <__ledf2+0x74>
   50278:	30d8b03a 	or	r12,r6,r3
   5027c:	6000081e 	bne	r12,zero,502a0 <__ledf2+0x74>
   50280:	0005883a 	mov	r2,zero
   50284:	5800111e 	bne	r11,zero,502cc <__ledf2+0xa0>
   50288:	f800283a 	ret
   5028c:	29403fcc 	andi	r5,r5,255
   50290:	40000c1e 	bne	r8,zero,502c4 <__ledf2+0x98>
   50294:	30d2b03a 	or	r9,r6,r3
   50298:	48000c26 	beq	r9,zero,502cc <__ledf2+0xa0>
   5029c:	0013883a 	mov	r9,zero
   502a0:	39c03fcc 	andi	r7,r7,255
   502a4:	48000826 	beq	r9,zero,502c8 <__ledf2+0x9c>
   502a8:	38001126 	beq	r7,zero,502f0 <__ledf2+0xc4>
   502ac:	00800044 	movi	r2,1
   502b0:	f800283a 	ret
   502b4:	30d2b03a 	or	r9,r6,r3
   502b8:	483fea26 	beq	r9,zero,50264 <__alt_data_end+0xfffde264>
   502bc:	00800084 	movi	r2,2
   502c0:	f800283a 	ret
   502c4:	39c03fcc 	andi	r7,r7,255
   502c8:	39400726 	beq	r7,r5,502e8 <__ledf2+0xbc>
   502cc:	2800081e 	bne	r5,zero,502f0 <__ledf2+0xc4>
   502d0:	00800044 	movi	r2,1
   502d4:	f800283a 	ret
   502d8:	2292b03a 	or	r9,r4,r10
   502dc:	483fdf26 	beq	r9,zero,5025c <__alt_data_end+0xfffde25c>
   502e0:	00800084 	movi	r2,2
   502e4:	f800283a 	ret
   502e8:	4080030e 	bge	r8,r2,502f8 <__ledf2+0xcc>
   502ec:	383fef26 	beq	r7,zero,502ac <__alt_data_end+0xfffde2ac>
   502f0:	00bfffc4 	movi	r2,-1
   502f4:	f800283a 	ret
   502f8:	123feb16 	blt	r2,r8,502a8 <__alt_data_end+0xfffde2a8>
   502fc:	1abff336 	bltu	r3,r10,502cc <__alt_data_end+0xfffde2cc>
   50300:	50c00326 	beq	r10,r3,50310 <__ledf2+0xe4>
   50304:	50c0042e 	bgeu	r10,r3,50318 <__ledf2+0xec>
   50308:	283fe81e 	bne	r5,zero,502ac <__alt_data_end+0xfffde2ac>
   5030c:	003ff806 	br	502f0 <__alt_data_end+0xfffde2f0>
   50310:	313fee36 	bltu	r6,r4,502cc <__alt_data_end+0xfffde2cc>
   50314:	21bffc36 	bltu	r4,r6,50308 <__alt_data_end+0xfffde308>
   50318:	0005883a 	mov	r2,zero
   5031c:	f800283a 	ret

00050320 <__muldf3>:
   50320:	deffee04 	addi	sp,sp,-72
   50324:	dd000c15 	stw	r20,48(sp)
   50328:	2828d53a 	srli	r20,r5,20
   5032c:	ddc00f15 	stw	r23,60(sp)
   50330:	282ed7fa 	srli	r23,r5,31
   50334:	dc000815 	stw	r16,32(sp)
   50338:	04000434 	movhi	r16,16
   5033c:	dcc00b15 	stw	r19,44(sp)
   50340:	843fffc4 	addi	r16,r16,-1
   50344:	dfc01115 	stw	ra,68(sp)
   50348:	df001015 	stw	fp,64(sp)
   5034c:	dd800e15 	stw	r22,56(sp)
   50350:	dd400d15 	stw	r21,52(sp)
   50354:	dc800a15 	stw	r18,40(sp)
   50358:	dc400915 	stw	r17,36(sp)
   5035c:	a501ffcc 	andi	r20,r20,2047
   50360:	2c20703a 	and	r16,r5,r16
   50364:	b827883a 	mov	r19,r23
   50368:	ba403fcc 	andi	r9,r23,255
   5036c:	a0006026 	beq	r20,zero,504f0 <__muldf3+0x1d0>
   50370:	0081ffc4 	movi	r2,2047
   50374:	202d883a 	mov	r22,r4
   50378:	a0803626 	beq	r20,r2,50454 <__muldf3+0x134>
   5037c:	84000434 	orhi	r16,r16,16
   50380:	200ad77a 	srli	r5,r4,29
   50384:	800490fa 	slli	r2,r16,3
   50388:	202c90fa 	slli	r22,r4,3
   5038c:	a53f0044 	addi	r20,r20,-1023
   50390:	28a0b03a 	or	r16,r5,r2
   50394:	002b883a 	mov	r21,zero
   50398:	000b883a 	mov	r5,zero
   5039c:	3804d53a 	srli	r2,r7,20
   503a0:	3838d7fa 	srli	fp,r7,31
   503a4:	04400434 	movhi	r17,16
   503a8:	8c7fffc4 	addi	r17,r17,-1
   503ac:	1081ffcc 	andi	r2,r2,2047
   503b0:	3025883a 	mov	r18,r6
   503b4:	3c62703a 	and	r17,r7,r17
   503b8:	e2803fcc 	andi	r10,fp,255
   503bc:	10006d26 	beq	r2,zero,50574 <__muldf3+0x254>
   503c0:	00c1ffc4 	movi	r3,2047
   503c4:	10c06526 	beq	r2,r3,5055c <__muldf3+0x23c>
   503c8:	8c400434 	orhi	r17,r17,16
   503cc:	300ed77a 	srli	r7,r6,29
   503d0:	880690fa 	slli	r3,r17,3
   503d4:	302490fa 	slli	r18,r6,3
   503d8:	10bf0044 	addi	r2,r2,-1023
   503dc:	38e2b03a 	or	r17,r7,r3
   503e0:	000f883a 	mov	r7,zero
   503e4:	a087883a 	add	r3,r20,r2
   503e8:	010003c4 	movi	r4,15
   503ec:	3d44b03a 	or	r2,r7,r21
   503f0:	e5ccf03a 	xor	r6,fp,r23
   503f4:	1a000044 	addi	r8,r3,1
   503f8:	20809b36 	bltu	r4,r2,50668 <__muldf3+0x348>
   503fc:	100490ba 	slli	r2,r2,2
   50400:	01000174 	movhi	r4,5
   50404:	21010504 	addi	r4,r4,1044
   50408:	1105883a 	add	r2,r2,r4
   5040c:	10800017 	ldw	r2,0(r2)
   50410:	1000683a 	jmp	r2
   50414:	00050668 	cmpgeui	zero,zero,5145
   50418:	00050474 	movhi	zero,5137
   5041c:	00050474 	movhi	zero,5137
   50420:	00050470 	cmpltui	zero,zero,5137
   50424:	00050644 	movi	zero,5145
   50428:	00050644 	movi	zero,5145
   5042c:	0005062c 	andhi	zero,zero,5144
   50430:	00050470 	cmpltui	zero,zero,5137
   50434:	00050644 	movi	zero,5145
   50438:	0005062c 	andhi	zero,zero,5144
   5043c:	00050644 	movi	zero,5145
   50440:	00050470 	cmpltui	zero,zero,5137
   50444:	00050654 	movui	zero,5145
   50448:	00050654 	movui	zero,5145
   5044c:	00050654 	movui	zero,5145
   50450:	000509b4 	movhi	zero,5158
   50454:	2404b03a 	or	r2,r4,r16
   50458:	1000711e 	bne	r2,zero,50620 <__muldf3+0x300>
   5045c:	05400204 	movi	r21,8
   50460:	0021883a 	mov	r16,zero
   50464:	002d883a 	mov	r22,zero
   50468:	01400084 	movi	r5,2
   5046c:	003fcb06 	br	5039c <__alt_data_end+0xfffde39c>
   50470:	500d883a 	mov	r6,r10
   50474:	00800084 	movi	r2,2
   50478:	38805926 	beq	r7,r2,505e0 <__muldf3+0x2c0>
   5047c:	008000c4 	movi	r2,3
   50480:	3881bb26 	beq	r7,r2,50b70 <__muldf3+0x850>
   50484:	00800044 	movi	r2,1
   50488:	3881961e 	bne	r7,r2,50ae4 <__muldf3+0x7c4>
   5048c:	3027883a 	mov	r19,r6
   50490:	0005883a 	mov	r2,zero
   50494:	0021883a 	mov	r16,zero
   50498:	002d883a 	mov	r22,zero
   5049c:	1004953a 	slli	r2,r2,20
   504a0:	98c03fcc 	andi	r3,r19,255
   504a4:	04400434 	movhi	r17,16
   504a8:	8c7fffc4 	addi	r17,r17,-1
   504ac:	180697fa 	slli	r3,r3,31
   504b0:	8460703a 	and	r16,r16,r17
   504b4:	80a0b03a 	or	r16,r16,r2
   504b8:	80c6b03a 	or	r3,r16,r3
   504bc:	b005883a 	mov	r2,r22
   504c0:	dfc01117 	ldw	ra,68(sp)
   504c4:	df001017 	ldw	fp,64(sp)
   504c8:	ddc00f17 	ldw	r23,60(sp)
   504cc:	dd800e17 	ldw	r22,56(sp)
   504d0:	dd400d17 	ldw	r21,52(sp)
   504d4:	dd000c17 	ldw	r20,48(sp)
   504d8:	dcc00b17 	ldw	r19,44(sp)
   504dc:	dc800a17 	ldw	r18,40(sp)
   504e0:	dc400917 	ldw	r17,36(sp)
   504e4:	dc000817 	ldw	r16,32(sp)
   504e8:	dec01204 	addi	sp,sp,72
   504ec:	f800283a 	ret
   504f0:	2404b03a 	or	r2,r4,r16
   504f4:	202b883a 	mov	r21,r4
   504f8:	10004426 	beq	r2,zero,5060c <__muldf3+0x2ec>
   504fc:	80015126 	beq	r16,zero,50a44 <__muldf3+0x724>
   50500:	8009883a 	mov	r4,r16
   50504:	d9800715 	stw	r6,28(sp)
   50508:	d9c00215 	stw	r7,8(sp)
   5050c:	da400415 	stw	r9,16(sp)
   50510:	0040e880 	call	40e88 <__clzsi2>
   50514:	d9800717 	ldw	r6,28(sp)
   50518:	d9c00217 	ldw	r7,8(sp)
   5051c:	da400417 	ldw	r9,16(sp)
   50520:	113ffd44 	addi	r4,r2,-11
   50524:	00c00704 	movi	r3,28
   50528:	19014216 	blt	r3,r4,50a34 <__muldf3+0x714>
   5052c:	00c00744 	movi	r3,29
   50530:	15bffe04 	addi	r22,r2,-8
   50534:	1907c83a 	sub	r3,r3,r4
   50538:	85a0983a 	sll	r16,r16,r22
   5053c:	a8c6d83a 	srl	r3,r21,r3
   50540:	adac983a 	sll	r22,r21,r22
   50544:	1c20b03a 	or	r16,r3,r16
   50548:	1080fcc4 	addi	r2,r2,1011
   5054c:	00a9c83a 	sub	r20,zero,r2
   50550:	002b883a 	mov	r21,zero
   50554:	000b883a 	mov	r5,zero
   50558:	003f9006 	br	5039c <__alt_data_end+0xfffde39c>
   5055c:	3446b03a 	or	r3,r6,r17
   50560:	1800281e 	bne	r3,zero,50604 <__muldf3+0x2e4>
   50564:	0023883a 	mov	r17,zero
   50568:	0025883a 	mov	r18,zero
   5056c:	01c00084 	movi	r7,2
   50570:	003f9c06 	br	503e4 <__alt_data_end+0xfffde3e4>
   50574:	3446b03a 	or	r3,r6,r17
   50578:	18001e26 	beq	r3,zero,505f4 <__muldf3+0x2d4>
   5057c:	88012126 	beq	r17,zero,50a04 <__muldf3+0x6e4>
   50580:	8809883a 	mov	r4,r17
   50584:	d9400215 	stw	r5,8(sp)
   50588:	d9800715 	stw	r6,28(sp)
   5058c:	da400415 	stw	r9,16(sp)
   50590:	da800315 	stw	r10,12(sp)
   50594:	0040e880 	call	40e88 <__clzsi2>
   50598:	d9400217 	ldw	r5,8(sp)
   5059c:	d9800717 	ldw	r6,28(sp)
   505a0:	da400417 	ldw	r9,16(sp)
   505a4:	da800317 	ldw	r10,12(sp)
   505a8:	113ffd44 	addi	r4,r2,-11
   505ac:	00c00704 	movi	r3,28
   505b0:	19011016 	blt	r3,r4,509f4 <__muldf3+0x6d4>
   505b4:	00c00744 	movi	r3,29
   505b8:	14bffe04 	addi	r18,r2,-8
   505bc:	1907c83a 	sub	r3,r3,r4
   505c0:	8ca2983a 	sll	r17,r17,r18
   505c4:	30c6d83a 	srl	r3,r6,r3
   505c8:	34a4983a 	sll	r18,r6,r18
   505cc:	1c62b03a 	or	r17,r3,r17
   505d0:	1080fcc4 	addi	r2,r2,1011
   505d4:	0085c83a 	sub	r2,zero,r2
   505d8:	000f883a 	mov	r7,zero
   505dc:	003f8106 	br	503e4 <__alt_data_end+0xfffde3e4>
   505e0:	3027883a 	mov	r19,r6
   505e4:	0081ffc4 	movi	r2,2047
   505e8:	0021883a 	mov	r16,zero
   505ec:	002d883a 	mov	r22,zero
   505f0:	003faa06 	br	5049c <__alt_data_end+0xfffde49c>
   505f4:	0023883a 	mov	r17,zero
   505f8:	0025883a 	mov	r18,zero
   505fc:	01c00044 	movi	r7,1
   50600:	003f7806 	br	503e4 <__alt_data_end+0xfffde3e4>
   50604:	01c000c4 	movi	r7,3
   50608:	003f7606 	br	503e4 <__alt_data_end+0xfffde3e4>
   5060c:	05400104 	movi	r21,4
   50610:	0021883a 	mov	r16,zero
   50614:	002d883a 	mov	r22,zero
   50618:	01400044 	movi	r5,1
   5061c:	003f5f06 	br	5039c <__alt_data_end+0xfffde39c>
   50620:	05400304 	movi	r21,12
   50624:	014000c4 	movi	r5,3
   50628:	003f5c06 	br	5039c <__alt_data_end+0xfffde39c>
   5062c:	04000434 	movhi	r16,16
   50630:	0027883a 	mov	r19,zero
   50634:	843fffc4 	addi	r16,r16,-1
   50638:	05bfffc4 	movi	r22,-1
   5063c:	0081ffc4 	movi	r2,2047
   50640:	003f9606 	br	5049c <__alt_data_end+0xfffde49c>
   50644:	8023883a 	mov	r17,r16
   50648:	b025883a 	mov	r18,r22
   5064c:	280f883a 	mov	r7,r5
   50650:	003f8806 	br	50474 <__alt_data_end+0xfffde474>
   50654:	8023883a 	mov	r17,r16
   50658:	b025883a 	mov	r18,r22
   5065c:	480d883a 	mov	r6,r9
   50660:	280f883a 	mov	r7,r5
   50664:	003f8306 	br	50474 <__alt_data_end+0xfffde474>
   50668:	b026d43a 	srli	r19,r22,16
   5066c:	902ed43a 	srli	r23,r18,16
   50670:	b5bfffcc 	andi	r22,r22,65535
   50674:	94bfffcc 	andi	r18,r18,65535
   50678:	b00b883a 	mov	r5,r22
   5067c:	9009883a 	mov	r4,r18
   50680:	d8c00515 	stw	r3,20(sp)
   50684:	d9800715 	stw	r6,28(sp)
   50688:	da000615 	stw	r8,24(sp)
   5068c:	0040eec0 	call	40eec <__mulsi3>
   50690:	980b883a 	mov	r5,r19
   50694:	9009883a 	mov	r4,r18
   50698:	1029883a 	mov	r20,r2
   5069c:	0040eec0 	call	40eec <__mulsi3>
   506a0:	b80b883a 	mov	r5,r23
   506a4:	9809883a 	mov	r4,r19
   506a8:	102b883a 	mov	r21,r2
   506ac:	0040eec0 	call	40eec <__mulsi3>
   506b0:	b809883a 	mov	r4,r23
   506b4:	b00b883a 	mov	r5,r22
   506b8:	1039883a 	mov	fp,r2
   506bc:	0040eec0 	call	40eec <__mulsi3>
   506c0:	a008d43a 	srli	r4,r20,16
   506c4:	1545883a 	add	r2,r2,r21
   506c8:	d8c00517 	ldw	r3,20(sp)
   506cc:	2085883a 	add	r2,r4,r2
   506d0:	d9800717 	ldw	r6,28(sp)
   506d4:	da000617 	ldw	r8,24(sp)
   506d8:	1540022e 	bgeu	r2,r21,506e4 <__muldf3+0x3c4>
   506dc:	01000074 	movhi	r4,1
   506e0:	e139883a 	add	fp,fp,r4
   506e4:	100e943a 	slli	r7,r2,16
   506e8:	1004d43a 	srli	r2,r2,16
   506ec:	882ad43a 	srli	r21,r17,16
   506f0:	a53fffcc 	andi	r20,r20,65535
   506f4:	8c7fffcc 	andi	r17,r17,65535
   506f8:	3d29883a 	add	r20,r7,r20
   506fc:	b00b883a 	mov	r5,r22
   50700:	8809883a 	mov	r4,r17
   50704:	d8c00515 	stw	r3,20(sp)
   50708:	d9800715 	stw	r6,28(sp)
   5070c:	da000615 	stw	r8,24(sp)
   50710:	dd000115 	stw	r20,4(sp)
   50714:	d8800015 	stw	r2,0(sp)
   50718:	0040eec0 	call	40eec <__mulsi3>
   5071c:	980b883a 	mov	r5,r19
   50720:	8809883a 	mov	r4,r17
   50724:	d8800215 	stw	r2,8(sp)
   50728:	0040eec0 	call	40eec <__mulsi3>
   5072c:	9809883a 	mov	r4,r19
   50730:	a80b883a 	mov	r5,r21
   50734:	1029883a 	mov	r20,r2
   50738:	0040eec0 	call	40eec <__mulsi3>
   5073c:	b00b883a 	mov	r5,r22
   50740:	a809883a 	mov	r4,r21
   50744:	d8800415 	stw	r2,16(sp)
   50748:	0040eec0 	call	40eec <__mulsi3>
   5074c:	d9c00217 	ldw	r7,8(sp)
   50750:	1505883a 	add	r2,r2,r20
   50754:	d8c00517 	ldw	r3,20(sp)
   50758:	3826d43a 	srli	r19,r7,16
   5075c:	d9800717 	ldw	r6,28(sp)
   50760:	da000617 	ldw	r8,24(sp)
   50764:	9885883a 	add	r2,r19,r2
   50768:	da400417 	ldw	r9,16(sp)
   5076c:	1500022e 	bgeu	r2,r20,50778 <__muldf3+0x458>
   50770:	01000074 	movhi	r4,1
   50774:	4913883a 	add	r9,r9,r4
   50778:	1028d43a 	srli	r20,r2,16
   5077c:	1004943a 	slli	r2,r2,16
   50780:	802cd43a 	srli	r22,r16,16
   50784:	843fffcc 	andi	r16,r16,65535
   50788:	3cffffcc 	andi	r19,r7,65535
   5078c:	9009883a 	mov	r4,r18
   50790:	800b883a 	mov	r5,r16
   50794:	a269883a 	add	r20,r20,r9
   50798:	d8c00515 	stw	r3,20(sp)
   5079c:	d9800715 	stw	r6,28(sp)
   507a0:	da000615 	stw	r8,24(sp)
   507a4:	14e7883a 	add	r19,r2,r19
   507a8:	0040eec0 	call	40eec <__mulsi3>
   507ac:	9009883a 	mov	r4,r18
   507b0:	b00b883a 	mov	r5,r22
   507b4:	d8800315 	stw	r2,12(sp)
   507b8:	0040eec0 	call	40eec <__mulsi3>
   507bc:	b809883a 	mov	r4,r23
   507c0:	b00b883a 	mov	r5,r22
   507c4:	d8800215 	stw	r2,8(sp)
   507c8:	0040eec0 	call	40eec <__mulsi3>
   507cc:	b80b883a 	mov	r5,r23
   507d0:	8009883a 	mov	r4,r16
   507d4:	d8800415 	stw	r2,16(sp)
   507d8:	0040eec0 	call	40eec <__mulsi3>
   507dc:	da800317 	ldw	r10,12(sp)
   507e0:	d9c00217 	ldw	r7,8(sp)
   507e4:	d9000017 	ldw	r4,0(sp)
   507e8:	502ed43a 	srli	r23,r10,16
   507ec:	11c5883a 	add	r2,r2,r7
   507f0:	24e5883a 	add	r18,r4,r19
   507f4:	b885883a 	add	r2,r23,r2
   507f8:	d8c00517 	ldw	r3,20(sp)
   507fc:	d9800717 	ldw	r6,28(sp)
   50800:	da000617 	ldw	r8,24(sp)
   50804:	da400417 	ldw	r9,16(sp)
   50808:	11c0022e 	bgeu	r2,r7,50814 <__muldf3+0x4f4>
   5080c:	01000074 	movhi	r4,1
   50810:	4913883a 	add	r9,r9,r4
   50814:	100ed43a 	srli	r7,r2,16
   50818:	1004943a 	slli	r2,r2,16
   5081c:	55ffffcc 	andi	r23,r10,65535
   50820:	3a53883a 	add	r9,r7,r9
   50824:	8809883a 	mov	r4,r17
   50828:	800b883a 	mov	r5,r16
   5082c:	d8c00515 	stw	r3,20(sp)
   50830:	d9800715 	stw	r6,28(sp)
   50834:	da000615 	stw	r8,24(sp)
   50838:	da400415 	stw	r9,16(sp)
   5083c:	15ef883a 	add	r23,r2,r23
   50840:	0040eec0 	call	40eec <__mulsi3>
   50844:	8809883a 	mov	r4,r17
   50848:	b00b883a 	mov	r5,r22
   5084c:	d8800215 	stw	r2,8(sp)
   50850:	0040eec0 	call	40eec <__mulsi3>
   50854:	b00b883a 	mov	r5,r22
   50858:	a809883a 	mov	r4,r21
   5085c:	d8800315 	stw	r2,12(sp)
   50860:	0040eec0 	call	40eec <__mulsi3>
   50864:	8009883a 	mov	r4,r16
   50868:	a80b883a 	mov	r5,r21
   5086c:	1023883a 	mov	r17,r2
   50870:	0040eec0 	call	40eec <__mulsi3>
   50874:	d9c00217 	ldw	r7,8(sp)
   50878:	da800317 	ldw	r10,12(sp)
   5087c:	d8c00517 	ldw	r3,20(sp)
   50880:	3808d43a 	srli	r4,r7,16
   50884:	1285883a 	add	r2,r2,r10
   50888:	d9800717 	ldw	r6,28(sp)
   5088c:	2085883a 	add	r2,r4,r2
   50890:	da000617 	ldw	r8,24(sp)
   50894:	da400417 	ldw	r9,16(sp)
   50898:	1280022e 	bgeu	r2,r10,508a4 <__muldf3+0x584>
   5089c:	01000074 	movhi	r4,1
   508a0:	8923883a 	add	r17,r17,r4
   508a4:	1008943a 	slli	r4,r2,16
   508a8:	39ffffcc 	andi	r7,r7,65535
   508ac:	e4b9883a 	add	fp,fp,r18
   508b0:	21cf883a 	add	r7,r4,r7
   508b4:	e4e7803a 	cmpltu	r19,fp,r19
   508b8:	3d0f883a 	add	r7,r7,r20
   508bc:	bf39883a 	add	fp,r23,fp
   508c0:	99c9883a 	add	r4,r19,r7
   508c4:	e5ef803a 	cmpltu	r23,fp,r23
   508c8:	490b883a 	add	r5,r9,r4
   508cc:	1004d43a 	srli	r2,r2,16
   508d0:	b965883a 	add	r18,r23,r5
   508d4:	24c9803a 	cmpltu	r4,r4,r19
   508d8:	3d29803a 	cmpltu	r20,r7,r20
   508dc:	a128b03a 	or	r20,r20,r4
   508e0:	95ef803a 	cmpltu	r23,r18,r23
   508e4:	2a53803a 	cmpltu	r9,r5,r9
   508e8:	a0a9883a 	add	r20,r20,r2
   508ec:	4deeb03a 	or	r23,r9,r23
   508f0:	a5ef883a 	add	r23,r20,r23
   508f4:	bc63883a 	add	r17,r23,r17
   508f8:	e004927a 	slli	r2,fp,9
   508fc:	d9000117 	ldw	r4,4(sp)
   50900:	882e927a 	slli	r23,r17,9
   50904:	9022d5fa 	srli	r17,r18,23
   50908:	e038d5fa 	srli	fp,fp,23
   5090c:	1104b03a 	or	r2,r2,r4
   50910:	9024927a 	slli	r18,r18,9
   50914:	1004c03a 	cmpne	r2,r2,zero
   50918:	bc62b03a 	or	r17,r23,r17
   5091c:	1738b03a 	or	fp,r2,fp
   50920:	8880402c 	andhi	r2,r17,256
   50924:	e4a4b03a 	or	r18,fp,r18
   50928:	10000726 	beq	r2,zero,50948 <__muldf3+0x628>
   5092c:	9006d07a 	srli	r3,r18,1
   50930:	880497fa 	slli	r2,r17,31
   50934:	9480004c 	andi	r18,r18,1
   50938:	8822d07a 	srli	r17,r17,1
   5093c:	1ca4b03a 	or	r18,r3,r18
   50940:	14a4b03a 	or	r18,r2,r18
   50944:	4007883a 	mov	r3,r8
   50948:	1880ffc4 	addi	r2,r3,1023
   5094c:	0080460e 	bge	zero,r2,50a68 <__muldf3+0x748>
   50950:	910001cc 	andi	r4,r18,7
   50954:	20000726 	beq	r4,zero,50974 <__muldf3+0x654>
   50958:	910003cc 	andi	r4,r18,15
   5095c:	01400104 	movi	r5,4
   50960:	21400426 	beq	r4,r5,50974 <__muldf3+0x654>
   50964:	9149883a 	add	r4,r18,r5
   50968:	24a5803a 	cmpltu	r18,r4,r18
   5096c:	8ca3883a 	add	r17,r17,r18
   50970:	2025883a 	mov	r18,r4
   50974:	8900402c 	andhi	r4,r17,256
   50978:	20000426 	beq	r4,zero,5098c <__muldf3+0x66c>
   5097c:	18810004 	addi	r2,r3,1024
   50980:	00ffc034 	movhi	r3,65280
   50984:	18ffffc4 	addi	r3,r3,-1
   50988:	88e2703a 	and	r17,r17,r3
   5098c:	00c1ff84 	movi	r3,2046
   50990:	18bf1316 	blt	r3,r2,505e0 <__alt_data_end+0xfffde5e0>
   50994:	882c977a 	slli	r22,r17,29
   50998:	9024d0fa 	srli	r18,r18,3
   5099c:	8822927a 	slli	r17,r17,9
   509a0:	1081ffcc 	andi	r2,r2,2047
   509a4:	b4acb03a 	or	r22,r22,r18
   509a8:	8820d33a 	srli	r16,r17,12
   509ac:	3027883a 	mov	r19,r6
   509b0:	003eba06 	br	5049c <__alt_data_end+0xfffde49c>
   509b4:	8080022c 	andhi	r2,r16,8
   509b8:	10000926 	beq	r2,zero,509e0 <__muldf3+0x6c0>
   509bc:	8880022c 	andhi	r2,r17,8
   509c0:	1000071e 	bne	r2,zero,509e0 <__muldf3+0x6c0>
   509c4:	00800434 	movhi	r2,16
   509c8:	8c000234 	orhi	r16,r17,8
   509cc:	10bfffc4 	addi	r2,r2,-1
   509d0:	e027883a 	mov	r19,fp
   509d4:	80a0703a 	and	r16,r16,r2
   509d8:	902d883a 	mov	r22,r18
   509dc:	003f1706 	br	5063c <__alt_data_end+0xfffde63c>
   509e0:	00800434 	movhi	r2,16
   509e4:	84000234 	orhi	r16,r16,8
   509e8:	10bfffc4 	addi	r2,r2,-1
   509ec:	80a0703a 	and	r16,r16,r2
   509f0:	003f1206 	br	5063c <__alt_data_end+0xfffde63c>
   509f4:	147ff604 	addi	r17,r2,-40
   509f8:	3462983a 	sll	r17,r6,r17
   509fc:	0025883a 	mov	r18,zero
   50a00:	003ef306 	br	505d0 <__alt_data_end+0xfffde5d0>
   50a04:	3009883a 	mov	r4,r6
   50a08:	d9400215 	stw	r5,8(sp)
   50a0c:	d9800715 	stw	r6,28(sp)
   50a10:	da400415 	stw	r9,16(sp)
   50a14:	da800315 	stw	r10,12(sp)
   50a18:	0040e880 	call	40e88 <__clzsi2>
   50a1c:	10800804 	addi	r2,r2,32
   50a20:	da800317 	ldw	r10,12(sp)
   50a24:	da400417 	ldw	r9,16(sp)
   50a28:	d9800717 	ldw	r6,28(sp)
   50a2c:	d9400217 	ldw	r5,8(sp)
   50a30:	003edd06 	br	505a8 <__alt_data_end+0xfffde5a8>
   50a34:	143ff604 	addi	r16,r2,-40
   50a38:	ac20983a 	sll	r16,r21,r16
   50a3c:	002d883a 	mov	r22,zero
   50a40:	003ec106 	br	50548 <__alt_data_end+0xfffde548>
   50a44:	d9800715 	stw	r6,28(sp)
   50a48:	d9c00215 	stw	r7,8(sp)
   50a4c:	da400415 	stw	r9,16(sp)
   50a50:	0040e880 	call	40e88 <__clzsi2>
   50a54:	10800804 	addi	r2,r2,32
   50a58:	da400417 	ldw	r9,16(sp)
   50a5c:	d9c00217 	ldw	r7,8(sp)
   50a60:	d9800717 	ldw	r6,28(sp)
   50a64:	003eae06 	br	50520 <__alt_data_end+0xfffde520>
   50a68:	00c00044 	movi	r3,1
   50a6c:	1887c83a 	sub	r3,r3,r2
   50a70:	01000e04 	movi	r4,56
   50a74:	20fe8516 	blt	r4,r3,5048c <__alt_data_end+0xfffde48c>
   50a78:	010007c4 	movi	r4,31
   50a7c:	20c01b16 	blt	r4,r3,50aec <__muldf3+0x7cc>
   50a80:	00800804 	movi	r2,32
   50a84:	10c5c83a 	sub	r2,r2,r3
   50a88:	888a983a 	sll	r5,r17,r2
   50a8c:	90c8d83a 	srl	r4,r18,r3
   50a90:	9084983a 	sll	r2,r18,r2
   50a94:	88e2d83a 	srl	r17,r17,r3
   50a98:	2906b03a 	or	r3,r5,r4
   50a9c:	1004c03a 	cmpne	r2,r2,zero
   50aa0:	1886b03a 	or	r3,r3,r2
   50aa4:	188001cc 	andi	r2,r3,7
   50aa8:	10000726 	beq	r2,zero,50ac8 <__muldf3+0x7a8>
   50aac:	188003cc 	andi	r2,r3,15
   50ab0:	01000104 	movi	r4,4
   50ab4:	11000426 	beq	r2,r4,50ac8 <__muldf3+0x7a8>
   50ab8:	1805883a 	mov	r2,r3
   50abc:	10c00104 	addi	r3,r2,4
   50ac0:	1885803a 	cmpltu	r2,r3,r2
   50ac4:	88a3883a 	add	r17,r17,r2
   50ac8:	8880202c 	andhi	r2,r17,128
   50acc:	10001c26 	beq	r2,zero,50b40 <__muldf3+0x820>
   50ad0:	3027883a 	mov	r19,r6
   50ad4:	00800044 	movi	r2,1
   50ad8:	0021883a 	mov	r16,zero
   50adc:	002d883a 	mov	r22,zero
   50ae0:	003e6e06 	br	5049c <__alt_data_end+0xfffde49c>
   50ae4:	4007883a 	mov	r3,r8
   50ae8:	003f9706 	br	50948 <__alt_data_end+0xfffde948>
   50aec:	017ff844 	movi	r5,-31
   50af0:	2885c83a 	sub	r2,r5,r2
   50af4:	888ad83a 	srl	r5,r17,r2
   50af8:	00800804 	movi	r2,32
   50afc:	18801a26 	beq	r3,r2,50b68 <__muldf3+0x848>
   50b00:	01001004 	movi	r4,64
   50b04:	20c7c83a 	sub	r3,r4,r3
   50b08:	88e2983a 	sll	r17,r17,r3
   50b0c:	8ca4b03a 	or	r18,r17,r18
   50b10:	9004c03a 	cmpne	r2,r18,zero
   50b14:	2884b03a 	or	r2,r5,r2
   50b18:	144001cc 	andi	r17,r2,7
   50b1c:	88000d1e 	bne	r17,zero,50b54 <__muldf3+0x834>
   50b20:	0021883a 	mov	r16,zero
   50b24:	102cd0fa 	srli	r22,r2,3
   50b28:	3027883a 	mov	r19,r6
   50b2c:	0005883a 	mov	r2,zero
   50b30:	b46cb03a 	or	r22,r22,r17
   50b34:	003e5906 	br	5049c <__alt_data_end+0xfffde49c>
   50b38:	1007883a 	mov	r3,r2
   50b3c:	0023883a 	mov	r17,zero
   50b40:	8820927a 	slli	r16,r17,9
   50b44:	1805883a 	mov	r2,r3
   50b48:	8822977a 	slli	r17,r17,29
   50b4c:	8020d33a 	srli	r16,r16,12
   50b50:	003ff406 	br	50b24 <__alt_data_end+0xfffdeb24>
   50b54:	10c003cc 	andi	r3,r2,15
   50b58:	01000104 	movi	r4,4
   50b5c:	193ff626 	beq	r3,r4,50b38 <__alt_data_end+0xfffdeb38>
   50b60:	0023883a 	mov	r17,zero
   50b64:	003fd506 	br	50abc <__alt_data_end+0xfffdeabc>
   50b68:	0023883a 	mov	r17,zero
   50b6c:	003fe706 	br	50b0c <__alt_data_end+0xfffdeb0c>
   50b70:	00800434 	movhi	r2,16
   50b74:	8c000234 	orhi	r16,r17,8
   50b78:	10bfffc4 	addi	r2,r2,-1
   50b7c:	3027883a 	mov	r19,r6
   50b80:	80a0703a 	and	r16,r16,r2
   50b84:	902d883a 	mov	r22,r18
   50b88:	003eac06 	br	5063c <__alt_data_end+0xfffde63c>

00050b8c <__subdf3>:
   50b8c:	02000434 	movhi	r8,16
   50b90:	423fffc4 	addi	r8,r8,-1
   50b94:	defffb04 	addi	sp,sp,-20
   50b98:	2a14703a 	and	r10,r5,r8
   50b9c:	3812d53a 	srli	r9,r7,20
   50ba0:	3a10703a 	and	r8,r7,r8
   50ba4:	2006d77a 	srli	r3,r4,29
   50ba8:	3004d77a 	srli	r2,r6,29
   50bac:	dc000015 	stw	r16,0(sp)
   50bb0:	501490fa 	slli	r10,r10,3
   50bb4:	2820d53a 	srli	r16,r5,20
   50bb8:	401090fa 	slli	r8,r8,3
   50bbc:	dc800215 	stw	r18,8(sp)
   50bc0:	dc400115 	stw	r17,4(sp)
   50bc4:	dfc00415 	stw	ra,16(sp)
   50bc8:	202290fa 	slli	r17,r4,3
   50bcc:	dcc00315 	stw	r19,12(sp)
   50bd0:	4a41ffcc 	andi	r9,r9,2047
   50bd4:	0101ffc4 	movi	r4,2047
   50bd8:	2824d7fa 	srli	r18,r5,31
   50bdc:	8401ffcc 	andi	r16,r16,2047
   50be0:	50c6b03a 	or	r3,r10,r3
   50be4:	380ed7fa 	srli	r7,r7,31
   50be8:	408ab03a 	or	r5,r8,r2
   50bec:	300c90fa 	slli	r6,r6,3
   50bf0:	49009626 	beq	r9,r4,50e4c <__subdf3+0x2c0>
   50bf4:	39c0005c 	xori	r7,r7,1
   50bf8:	8245c83a 	sub	r2,r16,r9
   50bfc:	3c807426 	beq	r7,r18,50dd0 <__subdf3+0x244>
   50c00:	0080af0e 	bge	zero,r2,50ec0 <__subdf3+0x334>
   50c04:	48002a1e 	bne	r9,zero,50cb0 <__subdf3+0x124>
   50c08:	2988b03a 	or	r4,r5,r6
   50c0c:	20009a1e 	bne	r4,zero,50e78 <__subdf3+0x2ec>
   50c10:	888001cc 	andi	r2,r17,7
   50c14:	10000726 	beq	r2,zero,50c34 <__subdf3+0xa8>
   50c18:	888003cc 	andi	r2,r17,15
   50c1c:	01000104 	movi	r4,4
   50c20:	11000426 	beq	r2,r4,50c34 <__subdf3+0xa8>
   50c24:	890b883a 	add	r5,r17,r4
   50c28:	2c63803a 	cmpltu	r17,r5,r17
   50c2c:	1c47883a 	add	r3,r3,r17
   50c30:	2823883a 	mov	r17,r5
   50c34:	1880202c 	andhi	r2,r3,128
   50c38:	10005926 	beq	r2,zero,50da0 <__subdf3+0x214>
   50c3c:	84000044 	addi	r16,r16,1
   50c40:	0081ffc4 	movi	r2,2047
   50c44:	8080be26 	beq	r16,r2,50f40 <__subdf3+0x3b4>
   50c48:	017fe034 	movhi	r5,65408
   50c4c:	297fffc4 	addi	r5,r5,-1
   50c50:	1946703a 	and	r3,r3,r5
   50c54:	1804977a 	slli	r2,r3,29
   50c58:	1806927a 	slli	r3,r3,9
   50c5c:	8822d0fa 	srli	r17,r17,3
   50c60:	8401ffcc 	andi	r16,r16,2047
   50c64:	180ad33a 	srli	r5,r3,12
   50c68:	9100004c 	andi	r4,r18,1
   50c6c:	1444b03a 	or	r2,r2,r17
   50c70:	80c1ffcc 	andi	r3,r16,2047
   50c74:	1820953a 	slli	r16,r3,20
   50c78:	20c03fcc 	andi	r3,r4,255
   50c7c:	180897fa 	slli	r4,r3,31
   50c80:	00c00434 	movhi	r3,16
   50c84:	18ffffc4 	addi	r3,r3,-1
   50c88:	28c6703a 	and	r3,r5,r3
   50c8c:	1c06b03a 	or	r3,r3,r16
   50c90:	1906b03a 	or	r3,r3,r4
   50c94:	dfc00417 	ldw	ra,16(sp)
   50c98:	dcc00317 	ldw	r19,12(sp)
   50c9c:	dc800217 	ldw	r18,8(sp)
   50ca0:	dc400117 	ldw	r17,4(sp)
   50ca4:	dc000017 	ldw	r16,0(sp)
   50ca8:	dec00504 	addi	sp,sp,20
   50cac:	f800283a 	ret
   50cb0:	0101ffc4 	movi	r4,2047
   50cb4:	813fd626 	beq	r16,r4,50c10 <__alt_data_end+0xfffdec10>
   50cb8:	29402034 	orhi	r5,r5,128
   50cbc:	01000e04 	movi	r4,56
   50cc0:	2080a316 	blt	r4,r2,50f50 <__subdf3+0x3c4>
   50cc4:	010007c4 	movi	r4,31
   50cc8:	2080c616 	blt	r4,r2,50fe4 <__subdf3+0x458>
   50ccc:	01000804 	movi	r4,32
   50cd0:	2089c83a 	sub	r4,r4,r2
   50cd4:	2910983a 	sll	r8,r5,r4
   50cd8:	308ed83a 	srl	r7,r6,r2
   50cdc:	3108983a 	sll	r4,r6,r4
   50ce0:	2884d83a 	srl	r2,r5,r2
   50ce4:	41ccb03a 	or	r6,r8,r7
   50ce8:	2008c03a 	cmpne	r4,r4,zero
   50cec:	310cb03a 	or	r6,r6,r4
   50cf0:	898dc83a 	sub	r6,r17,r6
   50cf4:	89a3803a 	cmpltu	r17,r17,r6
   50cf8:	1887c83a 	sub	r3,r3,r2
   50cfc:	1c47c83a 	sub	r3,r3,r17
   50d00:	3023883a 	mov	r17,r6
   50d04:	1880202c 	andhi	r2,r3,128
   50d08:	10002326 	beq	r2,zero,50d98 <__subdf3+0x20c>
   50d0c:	04c02034 	movhi	r19,128
   50d10:	9cffffc4 	addi	r19,r19,-1
   50d14:	1ce6703a 	and	r19,r3,r19
   50d18:	98007a26 	beq	r19,zero,50f04 <__subdf3+0x378>
   50d1c:	9809883a 	mov	r4,r19
   50d20:	0040e880 	call	40e88 <__clzsi2>
   50d24:	113ffe04 	addi	r4,r2,-8
   50d28:	00c007c4 	movi	r3,31
   50d2c:	19007b16 	blt	r3,r4,50f1c <__subdf3+0x390>
   50d30:	00800804 	movi	r2,32
   50d34:	1105c83a 	sub	r2,r2,r4
   50d38:	8884d83a 	srl	r2,r17,r2
   50d3c:	9906983a 	sll	r3,r19,r4
   50d40:	8922983a 	sll	r17,r17,r4
   50d44:	10c4b03a 	or	r2,r2,r3
   50d48:	24007816 	blt	r4,r16,50f2c <__subdf3+0x3a0>
   50d4c:	2421c83a 	sub	r16,r4,r16
   50d50:	80c00044 	addi	r3,r16,1
   50d54:	010007c4 	movi	r4,31
   50d58:	20c09516 	blt	r4,r3,50fb0 <__subdf3+0x424>
   50d5c:	01400804 	movi	r5,32
   50d60:	28cbc83a 	sub	r5,r5,r3
   50d64:	88c8d83a 	srl	r4,r17,r3
   50d68:	8962983a 	sll	r17,r17,r5
   50d6c:	114a983a 	sll	r5,r2,r5
   50d70:	10c6d83a 	srl	r3,r2,r3
   50d74:	8804c03a 	cmpne	r2,r17,zero
   50d78:	290ab03a 	or	r5,r5,r4
   50d7c:	28a2b03a 	or	r17,r5,r2
   50d80:	0021883a 	mov	r16,zero
   50d84:	003fa206 	br	50c10 <__alt_data_end+0xfffdec10>
   50d88:	2090b03a 	or	r8,r4,r2
   50d8c:	40018e26 	beq	r8,zero,513c8 <__subdf3+0x83c>
   50d90:	1007883a 	mov	r3,r2
   50d94:	2023883a 	mov	r17,r4
   50d98:	888001cc 	andi	r2,r17,7
   50d9c:	103f9e1e 	bne	r2,zero,50c18 <__alt_data_end+0xfffdec18>
   50da0:	1804977a 	slli	r2,r3,29
   50da4:	8822d0fa 	srli	r17,r17,3
   50da8:	1810d0fa 	srli	r8,r3,3
   50dac:	9100004c 	andi	r4,r18,1
   50db0:	1444b03a 	or	r2,r2,r17
   50db4:	00c1ffc4 	movi	r3,2047
   50db8:	80c02826 	beq	r16,r3,50e5c <__subdf3+0x2d0>
   50dbc:	01400434 	movhi	r5,16
   50dc0:	297fffc4 	addi	r5,r5,-1
   50dc4:	80e0703a 	and	r16,r16,r3
   50dc8:	414a703a 	and	r5,r8,r5
   50dcc:	003fa806 	br	50c70 <__alt_data_end+0xfffdec70>
   50dd0:	0080630e 	bge	zero,r2,50f60 <__subdf3+0x3d4>
   50dd4:	48003026 	beq	r9,zero,50e98 <__subdf3+0x30c>
   50dd8:	0101ffc4 	movi	r4,2047
   50ddc:	813f8c26 	beq	r16,r4,50c10 <__alt_data_end+0xfffdec10>
   50de0:	29402034 	orhi	r5,r5,128
   50de4:	01000e04 	movi	r4,56
   50de8:	2080a90e 	bge	r4,r2,51090 <__subdf3+0x504>
   50dec:	298cb03a 	or	r6,r5,r6
   50df0:	3012c03a 	cmpne	r9,r6,zero
   50df4:	0005883a 	mov	r2,zero
   50df8:	4c53883a 	add	r9,r9,r17
   50dfc:	4c63803a 	cmpltu	r17,r9,r17
   50e00:	10c7883a 	add	r3,r2,r3
   50e04:	88c7883a 	add	r3,r17,r3
   50e08:	4823883a 	mov	r17,r9
   50e0c:	1880202c 	andhi	r2,r3,128
   50e10:	1000d026 	beq	r2,zero,51154 <__subdf3+0x5c8>
   50e14:	84000044 	addi	r16,r16,1
   50e18:	0081ffc4 	movi	r2,2047
   50e1c:	8080fe26 	beq	r16,r2,51218 <__subdf3+0x68c>
   50e20:	00bfe034 	movhi	r2,65408
   50e24:	10bfffc4 	addi	r2,r2,-1
   50e28:	1886703a 	and	r3,r3,r2
   50e2c:	880ad07a 	srli	r5,r17,1
   50e30:	180497fa 	slli	r2,r3,31
   50e34:	8900004c 	andi	r4,r17,1
   50e38:	2922b03a 	or	r17,r5,r4
   50e3c:	1806d07a 	srli	r3,r3,1
   50e40:	1462b03a 	or	r17,r2,r17
   50e44:	3825883a 	mov	r18,r7
   50e48:	003f7106 	br	50c10 <__alt_data_end+0xfffdec10>
   50e4c:	2984b03a 	or	r2,r5,r6
   50e50:	103f6826 	beq	r2,zero,50bf4 <__alt_data_end+0xfffdebf4>
   50e54:	39c03fcc 	andi	r7,r7,255
   50e58:	003f6706 	br	50bf8 <__alt_data_end+0xfffdebf8>
   50e5c:	4086b03a 	or	r3,r8,r2
   50e60:	18015226 	beq	r3,zero,513ac <__subdf3+0x820>
   50e64:	00c00434 	movhi	r3,16
   50e68:	41400234 	orhi	r5,r8,8
   50e6c:	18ffffc4 	addi	r3,r3,-1
   50e70:	28ca703a 	and	r5,r5,r3
   50e74:	003f7e06 	br	50c70 <__alt_data_end+0xfffdec70>
   50e78:	10bfffc4 	addi	r2,r2,-1
   50e7c:	1000491e 	bne	r2,zero,50fa4 <__subdf3+0x418>
   50e80:	898fc83a 	sub	r7,r17,r6
   50e84:	89e3803a 	cmpltu	r17,r17,r7
   50e88:	1947c83a 	sub	r3,r3,r5
   50e8c:	1c47c83a 	sub	r3,r3,r17
   50e90:	3823883a 	mov	r17,r7
   50e94:	003f9b06 	br	50d04 <__alt_data_end+0xfffded04>
   50e98:	2988b03a 	or	r4,r5,r6
   50e9c:	203f5c26 	beq	r4,zero,50c10 <__alt_data_end+0xfffdec10>
   50ea0:	10bfffc4 	addi	r2,r2,-1
   50ea4:	1000931e 	bne	r2,zero,510f4 <__subdf3+0x568>
   50ea8:	898d883a 	add	r6,r17,r6
   50eac:	3463803a 	cmpltu	r17,r6,r17
   50eb0:	1947883a 	add	r3,r3,r5
   50eb4:	88c7883a 	add	r3,r17,r3
   50eb8:	3023883a 	mov	r17,r6
   50ebc:	003fd306 	br	50e0c <__alt_data_end+0xfffdee0c>
   50ec0:	1000541e 	bne	r2,zero,51014 <__subdf3+0x488>
   50ec4:	80800044 	addi	r2,r16,1
   50ec8:	1081ffcc 	andi	r2,r2,2047
   50ecc:	01000044 	movi	r4,1
   50ed0:	2080a20e 	bge	r4,r2,5115c <__subdf3+0x5d0>
   50ed4:	8989c83a 	sub	r4,r17,r6
   50ed8:	8905803a 	cmpltu	r2,r17,r4
   50edc:	1967c83a 	sub	r19,r3,r5
   50ee0:	98a7c83a 	sub	r19,r19,r2
   50ee4:	9880202c 	andhi	r2,r19,128
   50ee8:	10006326 	beq	r2,zero,51078 <__subdf3+0x4ec>
   50eec:	3463c83a 	sub	r17,r6,r17
   50ef0:	28c7c83a 	sub	r3,r5,r3
   50ef4:	344d803a 	cmpltu	r6,r6,r17
   50ef8:	19a7c83a 	sub	r19,r3,r6
   50efc:	3825883a 	mov	r18,r7
   50f00:	983f861e 	bne	r19,zero,50d1c <__alt_data_end+0xfffded1c>
   50f04:	8809883a 	mov	r4,r17
   50f08:	0040e880 	call	40e88 <__clzsi2>
   50f0c:	10800804 	addi	r2,r2,32
   50f10:	113ffe04 	addi	r4,r2,-8
   50f14:	00c007c4 	movi	r3,31
   50f18:	193f850e 	bge	r3,r4,50d30 <__alt_data_end+0xfffded30>
   50f1c:	10bff604 	addi	r2,r2,-40
   50f20:	8884983a 	sll	r2,r17,r2
   50f24:	0023883a 	mov	r17,zero
   50f28:	243f880e 	bge	r4,r16,50d4c <__alt_data_end+0xfffded4c>
   50f2c:	00ffe034 	movhi	r3,65408
   50f30:	18ffffc4 	addi	r3,r3,-1
   50f34:	8121c83a 	sub	r16,r16,r4
   50f38:	10c6703a 	and	r3,r2,r3
   50f3c:	003f3406 	br	50c10 <__alt_data_end+0xfffdec10>
   50f40:	9100004c 	andi	r4,r18,1
   50f44:	000b883a 	mov	r5,zero
   50f48:	0005883a 	mov	r2,zero
   50f4c:	003f4806 	br	50c70 <__alt_data_end+0xfffdec70>
   50f50:	298cb03a 	or	r6,r5,r6
   50f54:	300cc03a 	cmpne	r6,r6,zero
   50f58:	0005883a 	mov	r2,zero
   50f5c:	003f6406 	br	50cf0 <__alt_data_end+0xfffdecf0>
   50f60:	10009a1e 	bne	r2,zero,511cc <__subdf3+0x640>
   50f64:	82400044 	addi	r9,r16,1
   50f68:	4881ffcc 	andi	r2,r9,2047
   50f6c:	02800044 	movi	r10,1
   50f70:	5080670e 	bge	r10,r2,51110 <__subdf3+0x584>
   50f74:	0081ffc4 	movi	r2,2047
   50f78:	4880af26 	beq	r9,r2,51238 <__subdf3+0x6ac>
   50f7c:	898d883a 	add	r6,r17,r6
   50f80:	1945883a 	add	r2,r3,r5
   50f84:	3447803a 	cmpltu	r3,r6,r17
   50f88:	1887883a 	add	r3,r3,r2
   50f8c:	182297fa 	slli	r17,r3,31
   50f90:	300cd07a 	srli	r6,r6,1
   50f94:	1806d07a 	srli	r3,r3,1
   50f98:	4821883a 	mov	r16,r9
   50f9c:	89a2b03a 	or	r17,r17,r6
   50fa0:	003f1b06 	br	50c10 <__alt_data_end+0xfffdec10>
   50fa4:	0101ffc4 	movi	r4,2047
   50fa8:	813f441e 	bne	r16,r4,50cbc <__alt_data_end+0xfffdecbc>
   50fac:	003f1806 	br	50c10 <__alt_data_end+0xfffdec10>
   50fb0:	843ff844 	addi	r16,r16,-31
   50fb4:	01400804 	movi	r5,32
   50fb8:	1408d83a 	srl	r4,r2,r16
   50fbc:	19405026 	beq	r3,r5,51100 <__subdf3+0x574>
   50fc0:	01401004 	movi	r5,64
   50fc4:	28c7c83a 	sub	r3,r5,r3
   50fc8:	10c4983a 	sll	r2,r2,r3
   50fcc:	88a2b03a 	or	r17,r17,r2
   50fd0:	8822c03a 	cmpne	r17,r17,zero
   50fd4:	2462b03a 	or	r17,r4,r17
   50fd8:	0007883a 	mov	r3,zero
   50fdc:	0021883a 	mov	r16,zero
   50fe0:	003f6d06 	br	50d98 <__alt_data_end+0xfffded98>
   50fe4:	11fff804 	addi	r7,r2,-32
   50fe8:	01000804 	movi	r4,32
   50fec:	29ced83a 	srl	r7,r5,r7
   50ff0:	11004526 	beq	r2,r4,51108 <__subdf3+0x57c>
   50ff4:	01001004 	movi	r4,64
   50ff8:	2089c83a 	sub	r4,r4,r2
   50ffc:	2904983a 	sll	r2,r5,r4
   51000:	118cb03a 	or	r6,r2,r6
   51004:	300cc03a 	cmpne	r6,r6,zero
   51008:	398cb03a 	or	r6,r7,r6
   5100c:	0005883a 	mov	r2,zero
   51010:	003f3706 	br	50cf0 <__alt_data_end+0xfffdecf0>
   51014:	80002a26 	beq	r16,zero,510c0 <__subdf3+0x534>
   51018:	0101ffc4 	movi	r4,2047
   5101c:	49006626 	beq	r9,r4,511b8 <__subdf3+0x62c>
   51020:	0085c83a 	sub	r2,zero,r2
   51024:	18c02034 	orhi	r3,r3,128
   51028:	01000e04 	movi	r4,56
   5102c:	20807e16 	blt	r4,r2,51228 <__subdf3+0x69c>
   51030:	010007c4 	movi	r4,31
   51034:	2080e716 	blt	r4,r2,513d4 <__subdf3+0x848>
   51038:	01000804 	movi	r4,32
   5103c:	2089c83a 	sub	r4,r4,r2
   51040:	1914983a 	sll	r10,r3,r4
   51044:	8890d83a 	srl	r8,r17,r2
   51048:	8908983a 	sll	r4,r17,r4
   5104c:	1884d83a 	srl	r2,r3,r2
   51050:	5222b03a 	or	r17,r10,r8
   51054:	2006c03a 	cmpne	r3,r4,zero
   51058:	88e2b03a 	or	r17,r17,r3
   5105c:	3463c83a 	sub	r17,r6,r17
   51060:	2885c83a 	sub	r2,r5,r2
   51064:	344d803a 	cmpltu	r6,r6,r17
   51068:	1187c83a 	sub	r3,r2,r6
   5106c:	4821883a 	mov	r16,r9
   51070:	3825883a 	mov	r18,r7
   51074:	003f2306 	br	50d04 <__alt_data_end+0xfffded04>
   51078:	24d0b03a 	or	r8,r4,r19
   5107c:	40001b1e 	bne	r8,zero,510ec <__subdf3+0x560>
   51080:	0005883a 	mov	r2,zero
   51084:	0009883a 	mov	r4,zero
   51088:	0021883a 	mov	r16,zero
   5108c:	003f4906 	br	50db4 <__alt_data_end+0xfffdedb4>
   51090:	010007c4 	movi	r4,31
   51094:	20803a16 	blt	r4,r2,51180 <__subdf3+0x5f4>
   51098:	01000804 	movi	r4,32
   5109c:	2089c83a 	sub	r4,r4,r2
   510a0:	2912983a 	sll	r9,r5,r4
   510a4:	3090d83a 	srl	r8,r6,r2
   510a8:	3108983a 	sll	r4,r6,r4
   510ac:	2884d83a 	srl	r2,r5,r2
   510b0:	4a12b03a 	or	r9,r9,r8
   510b4:	2008c03a 	cmpne	r4,r4,zero
   510b8:	4912b03a 	or	r9,r9,r4
   510bc:	003f4e06 	br	50df8 <__alt_data_end+0xfffdedf8>
   510c0:	1c48b03a 	or	r4,r3,r17
   510c4:	20003c26 	beq	r4,zero,511b8 <__subdf3+0x62c>
   510c8:	0084303a 	nor	r2,zero,r2
   510cc:	1000381e 	bne	r2,zero,511b0 <__subdf3+0x624>
   510d0:	3463c83a 	sub	r17,r6,r17
   510d4:	28c5c83a 	sub	r2,r5,r3
   510d8:	344d803a 	cmpltu	r6,r6,r17
   510dc:	1187c83a 	sub	r3,r2,r6
   510e0:	4821883a 	mov	r16,r9
   510e4:	3825883a 	mov	r18,r7
   510e8:	003f0606 	br	50d04 <__alt_data_end+0xfffded04>
   510ec:	2023883a 	mov	r17,r4
   510f0:	003f0906 	br	50d18 <__alt_data_end+0xfffded18>
   510f4:	0101ffc4 	movi	r4,2047
   510f8:	813f3a1e 	bne	r16,r4,50de4 <__alt_data_end+0xfffdede4>
   510fc:	003ec406 	br	50c10 <__alt_data_end+0xfffdec10>
   51100:	0005883a 	mov	r2,zero
   51104:	003fb106 	br	50fcc <__alt_data_end+0xfffdefcc>
   51108:	0005883a 	mov	r2,zero
   5110c:	003fbc06 	br	51000 <__alt_data_end+0xfffdf000>
   51110:	1c44b03a 	or	r2,r3,r17
   51114:	80008e1e 	bne	r16,zero,51350 <__subdf3+0x7c4>
   51118:	1000c826 	beq	r2,zero,5143c <__subdf3+0x8b0>
   5111c:	2984b03a 	or	r2,r5,r6
   51120:	103ebb26 	beq	r2,zero,50c10 <__alt_data_end+0xfffdec10>
   51124:	8989883a 	add	r4,r17,r6
   51128:	1945883a 	add	r2,r3,r5
   5112c:	2447803a 	cmpltu	r3,r4,r17
   51130:	1887883a 	add	r3,r3,r2
   51134:	1880202c 	andhi	r2,r3,128
   51138:	2023883a 	mov	r17,r4
   5113c:	103f1626 	beq	r2,zero,50d98 <__alt_data_end+0xfffded98>
   51140:	00bfe034 	movhi	r2,65408
   51144:	10bfffc4 	addi	r2,r2,-1
   51148:	5021883a 	mov	r16,r10
   5114c:	1886703a 	and	r3,r3,r2
   51150:	003eaf06 	br	50c10 <__alt_data_end+0xfffdec10>
   51154:	3825883a 	mov	r18,r7
   51158:	003f0f06 	br	50d98 <__alt_data_end+0xfffded98>
   5115c:	1c44b03a 	or	r2,r3,r17
   51160:	8000251e 	bne	r16,zero,511f8 <__subdf3+0x66c>
   51164:	1000661e 	bne	r2,zero,51300 <__subdf3+0x774>
   51168:	2990b03a 	or	r8,r5,r6
   5116c:	40009626 	beq	r8,zero,513c8 <__subdf3+0x83c>
   51170:	2807883a 	mov	r3,r5
   51174:	3023883a 	mov	r17,r6
   51178:	3825883a 	mov	r18,r7
   5117c:	003ea406 	br	50c10 <__alt_data_end+0xfffdec10>
   51180:	127ff804 	addi	r9,r2,-32
   51184:	01000804 	movi	r4,32
   51188:	2a52d83a 	srl	r9,r5,r9
   5118c:	11008c26 	beq	r2,r4,513c0 <__subdf3+0x834>
   51190:	01001004 	movi	r4,64
   51194:	2085c83a 	sub	r2,r4,r2
   51198:	2884983a 	sll	r2,r5,r2
   5119c:	118cb03a 	or	r6,r2,r6
   511a0:	300cc03a 	cmpne	r6,r6,zero
   511a4:	4992b03a 	or	r9,r9,r6
   511a8:	0005883a 	mov	r2,zero
   511ac:	003f1206 	br	50df8 <__alt_data_end+0xfffdedf8>
   511b0:	0101ffc4 	movi	r4,2047
   511b4:	493f9c1e 	bne	r9,r4,51028 <__alt_data_end+0xfffdf028>
   511b8:	2807883a 	mov	r3,r5
   511bc:	3023883a 	mov	r17,r6
   511c0:	4821883a 	mov	r16,r9
   511c4:	3825883a 	mov	r18,r7
   511c8:	003e9106 	br	50c10 <__alt_data_end+0xfffdec10>
   511cc:	80001f1e 	bne	r16,zero,5124c <__subdf3+0x6c0>
   511d0:	1c48b03a 	or	r4,r3,r17
   511d4:	20005a26 	beq	r4,zero,51340 <__subdf3+0x7b4>
   511d8:	0084303a 	nor	r2,zero,r2
   511dc:	1000561e 	bne	r2,zero,51338 <__subdf3+0x7ac>
   511e0:	89a3883a 	add	r17,r17,r6
   511e4:	1945883a 	add	r2,r3,r5
   511e8:	898d803a 	cmpltu	r6,r17,r6
   511ec:	3087883a 	add	r3,r6,r2
   511f0:	4821883a 	mov	r16,r9
   511f4:	003f0506 	br	50e0c <__alt_data_end+0xfffdee0c>
   511f8:	10002b1e 	bne	r2,zero,512a8 <__subdf3+0x71c>
   511fc:	2984b03a 	or	r2,r5,r6
   51200:	10008026 	beq	r2,zero,51404 <__subdf3+0x878>
   51204:	2807883a 	mov	r3,r5
   51208:	3023883a 	mov	r17,r6
   5120c:	3825883a 	mov	r18,r7
   51210:	0401ffc4 	movi	r16,2047
   51214:	003e7e06 	br	50c10 <__alt_data_end+0xfffdec10>
   51218:	3809883a 	mov	r4,r7
   5121c:	0011883a 	mov	r8,zero
   51220:	0005883a 	mov	r2,zero
   51224:	003ee306 	br	50db4 <__alt_data_end+0xfffdedb4>
   51228:	1c62b03a 	or	r17,r3,r17
   5122c:	8822c03a 	cmpne	r17,r17,zero
   51230:	0005883a 	mov	r2,zero
   51234:	003f8906 	br	5105c <__alt_data_end+0xfffdf05c>
   51238:	3809883a 	mov	r4,r7
   5123c:	4821883a 	mov	r16,r9
   51240:	0011883a 	mov	r8,zero
   51244:	0005883a 	mov	r2,zero
   51248:	003eda06 	br	50db4 <__alt_data_end+0xfffdedb4>
   5124c:	0101ffc4 	movi	r4,2047
   51250:	49003b26 	beq	r9,r4,51340 <__subdf3+0x7b4>
   51254:	0085c83a 	sub	r2,zero,r2
   51258:	18c02034 	orhi	r3,r3,128
   5125c:	01000e04 	movi	r4,56
   51260:	20806e16 	blt	r4,r2,5141c <__subdf3+0x890>
   51264:	010007c4 	movi	r4,31
   51268:	20807716 	blt	r4,r2,51448 <__subdf3+0x8bc>
   5126c:	01000804 	movi	r4,32
   51270:	2089c83a 	sub	r4,r4,r2
   51274:	1914983a 	sll	r10,r3,r4
   51278:	8890d83a 	srl	r8,r17,r2
   5127c:	8908983a 	sll	r4,r17,r4
   51280:	1884d83a 	srl	r2,r3,r2
   51284:	5222b03a 	or	r17,r10,r8
   51288:	2006c03a 	cmpne	r3,r4,zero
   5128c:	88e2b03a 	or	r17,r17,r3
   51290:	89a3883a 	add	r17,r17,r6
   51294:	1145883a 	add	r2,r2,r5
   51298:	898d803a 	cmpltu	r6,r17,r6
   5129c:	3087883a 	add	r3,r6,r2
   512a0:	4821883a 	mov	r16,r9
   512a4:	003ed906 	br	50e0c <__alt_data_end+0xfffdee0c>
   512a8:	2984b03a 	or	r2,r5,r6
   512ac:	10004226 	beq	r2,zero,513b8 <__subdf3+0x82c>
   512b0:	1808d0fa 	srli	r4,r3,3
   512b4:	8822d0fa 	srli	r17,r17,3
   512b8:	1806977a 	slli	r3,r3,29
   512bc:	2080022c 	andhi	r2,r4,8
   512c0:	1c62b03a 	or	r17,r3,r17
   512c4:	10000826 	beq	r2,zero,512e8 <__subdf3+0x75c>
   512c8:	2812d0fa 	srli	r9,r5,3
   512cc:	4880022c 	andhi	r2,r9,8
   512d0:	1000051e 	bne	r2,zero,512e8 <__subdf3+0x75c>
   512d4:	300cd0fa 	srli	r6,r6,3
   512d8:	2804977a 	slli	r2,r5,29
   512dc:	4809883a 	mov	r4,r9
   512e0:	3825883a 	mov	r18,r7
   512e4:	11a2b03a 	or	r17,r2,r6
   512e8:	8806d77a 	srli	r3,r17,29
   512ec:	200890fa 	slli	r4,r4,3
   512f0:	882290fa 	slli	r17,r17,3
   512f4:	0401ffc4 	movi	r16,2047
   512f8:	1906b03a 	or	r3,r3,r4
   512fc:	003e4406 	br	50c10 <__alt_data_end+0xfffdec10>
   51300:	2984b03a 	or	r2,r5,r6
   51304:	103e4226 	beq	r2,zero,50c10 <__alt_data_end+0xfffdec10>
   51308:	8989c83a 	sub	r4,r17,r6
   5130c:	8911803a 	cmpltu	r8,r17,r4
   51310:	1945c83a 	sub	r2,r3,r5
   51314:	1205c83a 	sub	r2,r2,r8
   51318:	1200202c 	andhi	r8,r2,128
   5131c:	403e9a26 	beq	r8,zero,50d88 <__alt_data_end+0xfffded88>
   51320:	3463c83a 	sub	r17,r6,r17
   51324:	28c5c83a 	sub	r2,r5,r3
   51328:	344d803a 	cmpltu	r6,r6,r17
   5132c:	1187c83a 	sub	r3,r2,r6
   51330:	3825883a 	mov	r18,r7
   51334:	003e3606 	br	50c10 <__alt_data_end+0xfffdec10>
   51338:	0101ffc4 	movi	r4,2047
   5133c:	493fc71e 	bne	r9,r4,5125c <__alt_data_end+0xfffdf25c>
   51340:	2807883a 	mov	r3,r5
   51344:	3023883a 	mov	r17,r6
   51348:	4821883a 	mov	r16,r9
   5134c:	003e3006 	br	50c10 <__alt_data_end+0xfffdec10>
   51350:	10003626 	beq	r2,zero,5142c <__subdf3+0x8a0>
   51354:	2984b03a 	or	r2,r5,r6
   51358:	10001726 	beq	r2,zero,513b8 <__subdf3+0x82c>
   5135c:	1808d0fa 	srli	r4,r3,3
   51360:	8822d0fa 	srli	r17,r17,3
   51364:	1806977a 	slli	r3,r3,29
   51368:	2080022c 	andhi	r2,r4,8
   5136c:	1c62b03a 	or	r17,r3,r17
   51370:	10000726 	beq	r2,zero,51390 <__subdf3+0x804>
   51374:	2812d0fa 	srli	r9,r5,3
   51378:	4880022c 	andhi	r2,r9,8
   5137c:	1000041e 	bne	r2,zero,51390 <__subdf3+0x804>
   51380:	300cd0fa 	srli	r6,r6,3
   51384:	2804977a 	slli	r2,r5,29
   51388:	4809883a 	mov	r4,r9
   5138c:	11a2b03a 	or	r17,r2,r6
   51390:	8806d77a 	srli	r3,r17,29
   51394:	200890fa 	slli	r4,r4,3
   51398:	882290fa 	slli	r17,r17,3
   5139c:	3825883a 	mov	r18,r7
   513a0:	1906b03a 	or	r3,r3,r4
   513a4:	0401ffc4 	movi	r16,2047
   513a8:	003e1906 	br	50c10 <__alt_data_end+0xfffdec10>
   513ac:	000b883a 	mov	r5,zero
   513b0:	0005883a 	mov	r2,zero
   513b4:	003e2e06 	br	50c70 <__alt_data_end+0xfffdec70>
   513b8:	0401ffc4 	movi	r16,2047
   513bc:	003e1406 	br	50c10 <__alt_data_end+0xfffdec10>
   513c0:	0005883a 	mov	r2,zero
   513c4:	003f7506 	br	5119c <__alt_data_end+0xfffdf19c>
   513c8:	0005883a 	mov	r2,zero
   513cc:	0009883a 	mov	r4,zero
   513d0:	003e7806 	br	50db4 <__alt_data_end+0xfffdedb4>
   513d4:	123ff804 	addi	r8,r2,-32
   513d8:	01000804 	movi	r4,32
   513dc:	1a10d83a 	srl	r8,r3,r8
   513e0:	11002526 	beq	r2,r4,51478 <__subdf3+0x8ec>
   513e4:	01001004 	movi	r4,64
   513e8:	2085c83a 	sub	r2,r4,r2
   513ec:	1884983a 	sll	r2,r3,r2
   513f0:	1444b03a 	or	r2,r2,r17
   513f4:	1004c03a 	cmpne	r2,r2,zero
   513f8:	40a2b03a 	or	r17,r8,r2
   513fc:	0005883a 	mov	r2,zero
   51400:	003f1606 	br	5105c <__alt_data_end+0xfffdf05c>
   51404:	02000434 	movhi	r8,16
   51408:	0009883a 	mov	r4,zero
   5140c:	423fffc4 	addi	r8,r8,-1
   51410:	00bfffc4 	movi	r2,-1
   51414:	0401ffc4 	movi	r16,2047
   51418:	003e6606 	br	50db4 <__alt_data_end+0xfffdedb4>
   5141c:	1c62b03a 	or	r17,r3,r17
   51420:	8822c03a 	cmpne	r17,r17,zero
   51424:	0005883a 	mov	r2,zero
   51428:	003f9906 	br	51290 <__alt_data_end+0xfffdf290>
   5142c:	2807883a 	mov	r3,r5
   51430:	3023883a 	mov	r17,r6
   51434:	0401ffc4 	movi	r16,2047
   51438:	003df506 	br	50c10 <__alt_data_end+0xfffdec10>
   5143c:	2807883a 	mov	r3,r5
   51440:	3023883a 	mov	r17,r6
   51444:	003df206 	br	50c10 <__alt_data_end+0xfffdec10>
   51448:	123ff804 	addi	r8,r2,-32
   5144c:	01000804 	movi	r4,32
   51450:	1a10d83a 	srl	r8,r3,r8
   51454:	11000a26 	beq	r2,r4,51480 <__subdf3+0x8f4>
   51458:	01001004 	movi	r4,64
   5145c:	2085c83a 	sub	r2,r4,r2
   51460:	1884983a 	sll	r2,r3,r2
   51464:	1444b03a 	or	r2,r2,r17
   51468:	1004c03a 	cmpne	r2,r2,zero
   5146c:	40a2b03a 	or	r17,r8,r2
   51470:	0005883a 	mov	r2,zero
   51474:	003f8606 	br	51290 <__alt_data_end+0xfffdf290>
   51478:	0005883a 	mov	r2,zero
   5147c:	003fdc06 	br	513f0 <__alt_data_end+0xfffdf3f0>
   51480:	0005883a 	mov	r2,zero
   51484:	003ff706 	br	51464 <__alt_data_end+0xfffdf464>

00051488 <__fixdfsi>:
   51488:	280cd53a 	srli	r6,r5,20
   5148c:	00c00434 	movhi	r3,16
   51490:	18ffffc4 	addi	r3,r3,-1
   51494:	3181ffcc 	andi	r6,r6,2047
   51498:	01c0ff84 	movi	r7,1022
   5149c:	28c6703a 	and	r3,r5,r3
   514a0:	280ad7fa 	srli	r5,r5,31
   514a4:	3980120e 	bge	r7,r6,514f0 <__fixdfsi+0x68>
   514a8:	00810744 	movi	r2,1053
   514ac:	11800c16 	blt	r2,r6,514e0 <__fixdfsi+0x58>
   514b0:	00810cc4 	movi	r2,1075
   514b4:	1185c83a 	sub	r2,r2,r6
   514b8:	01c007c4 	movi	r7,31
   514bc:	18c00434 	orhi	r3,r3,16
   514c0:	38800d16 	blt	r7,r2,514f8 <__fixdfsi+0x70>
   514c4:	31befb44 	addi	r6,r6,-1043
   514c8:	2084d83a 	srl	r2,r4,r2
   514cc:	1986983a 	sll	r3,r3,r6
   514d0:	1884b03a 	or	r2,r3,r2
   514d4:	28000726 	beq	r5,zero,514f4 <__fixdfsi+0x6c>
   514d8:	0085c83a 	sub	r2,zero,r2
   514dc:	f800283a 	ret
   514e0:	00a00034 	movhi	r2,32768
   514e4:	10bfffc4 	addi	r2,r2,-1
   514e8:	2885883a 	add	r2,r5,r2
   514ec:	f800283a 	ret
   514f0:	0005883a 	mov	r2,zero
   514f4:	f800283a 	ret
   514f8:	008104c4 	movi	r2,1043
   514fc:	1185c83a 	sub	r2,r2,r6
   51500:	1884d83a 	srl	r2,r3,r2
   51504:	003ff306 	br	514d4 <__alt_data_end+0xfffdf4d4>

00051508 <__floatsidf>:
   51508:	defffd04 	addi	sp,sp,-12
   5150c:	dfc00215 	stw	ra,8(sp)
   51510:	dc400115 	stw	r17,4(sp)
   51514:	dc000015 	stw	r16,0(sp)
   51518:	20002b26 	beq	r4,zero,515c8 <__floatsidf+0xc0>
   5151c:	2023883a 	mov	r17,r4
   51520:	2020d7fa 	srli	r16,r4,31
   51524:	20002d16 	blt	r4,zero,515dc <__floatsidf+0xd4>
   51528:	8809883a 	mov	r4,r17
   5152c:	0040e880 	call	40e88 <__clzsi2>
   51530:	01410784 	movi	r5,1054
   51534:	288bc83a 	sub	r5,r5,r2
   51538:	01010cc4 	movi	r4,1075
   5153c:	2149c83a 	sub	r4,r4,r5
   51540:	00c007c4 	movi	r3,31
   51544:	1900160e 	bge	r3,r4,515a0 <__floatsidf+0x98>
   51548:	00c104c4 	movi	r3,1043
   5154c:	1947c83a 	sub	r3,r3,r5
   51550:	88c6983a 	sll	r3,r17,r3
   51554:	00800434 	movhi	r2,16
   51558:	10bfffc4 	addi	r2,r2,-1
   5155c:	1886703a 	and	r3,r3,r2
   51560:	2941ffcc 	andi	r5,r5,2047
   51564:	800d883a 	mov	r6,r16
   51568:	0005883a 	mov	r2,zero
   5156c:	280a953a 	slli	r5,r5,20
   51570:	31803fcc 	andi	r6,r6,255
   51574:	01000434 	movhi	r4,16
   51578:	300c97fa 	slli	r6,r6,31
   5157c:	213fffc4 	addi	r4,r4,-1
   51580:	1906703a 	and	r3,r3,r4
   51584:	1946b03a 	or	r3,r3,r5
   51588:	1986b03a 	or	r3,r3,r6
   5158c:	dfc00217 	ldw	ra,8(sp)
   51590:	dc400117 	ldw	r17,4(sp)
   51594:	dc000017 	ldw	r16,0(sp)
   51598:	dec00304 	addi	sp,sp,12
   5159c:	f800283a 	ret
   515a0:	00c002c4 	movi	r3,11
   515a4:	1887c83a 	sub	r3,r3,r2
   515a8:	88c6d83a 	srl	r3,r17,r3
   515ac:	8904983a 	sll	r2,r17,r4
   515b0:	01000434 	movhi	r4,16
   515b4:	213fffc4 	addi	r4,r4,-1
   515b8:	2941ffcc 	andi	r5,r5,2047
   515bc:	1906703a 	and	r3,r3,r4
   515c0:	800d883a 	mov	r6,r16
   515c4:	003fe906 	br	5156c <__alt_data_end+0xfffdf56c>
   515c8:	000d883a 	mov	r6,zero
   515cc:	000b883a 	mov	r5,zero
   515d0:	0007883a 	mov	r3,zero
   515d4:	0005883a 	mov	r2,zero
   515d8:	003fe406 	br	5156c <__alt_data_end+0xfffdf56c>
   515dc:	0123c83a 	sub	r17,zero,r4
   515e0:	003fd106 	br	51528 <__alt_data_end+0xfffdf528>

000515e4 <__floatunsidf>:
   515e4:	defffe04 	addi	sp,sp,-8
   515e8:	dc000015 	stw	r16,0(sp)
   515ec:	dfc00115 	stw	ra,4(sp)
   515f0:	2021883a 	mov	r16,r4
   515f4:	20002226 	beq	r4,zero,51680 <__floatunsidf+0x9c>
   515f8:	0040e880 	call	40e88 <__clzsi2>
   515fc:	01010784 	movi	r4,1054
   51600:	2089c83a 	sub	r4,r4,r2
   51604:	01810cc4 	movi	r6,1075
   51608:	310dc83a 	sub	r6,r6,r4
   5160c:	00c007c4 	movi	r3,31
   51610:	1980120e 	bge	r3,r6,5165c <__floatunsidf+0x78>
   51614:	00c104c4 	movi	r3,1043
   51618:	1907c83a 	sub	r3,r3,r4
   5161c:	80ca983a 	sll	r5,r16,r3
   51620:	00800434 	movhi	r2,16
   51624:	10bfffc4 	addi	r2,r2,-1
   51628:	2101ffcc 	andi	r4,r4,2047
   5162c:	0021883a 	mov	r16,zero
   51630:	288a703a 	and	r5,r5,r2
   51634:	2008953a 	slli	r4,r4,20
   51638:	00c00434 	movhi	r3,16
   5163c:	18ffffc4 	addi	r3,r3,-1
   51640:	28c6703a 	and	r3,r5,r3
   51644:	8005883a 	mov	r2,r16
   51648:	1906b03a 	or	r3,r3,r4
   5164c:	dfc00117 	ldw	ra,4(sp)
   51650:	dc000017 	ldw	r16,0(sp)
   51654:	dec00204 	addi	sp,sp,8
   51658:	f800283a 	ret
   5165c:	00c002c4 	movi	r3,11
   51660:	188bc83a 	sub	r5,r3,r2
   51664:	814ad83a 	srl	r5,r16,r5
   51668:	00c00434 	movhi	r3,16
   5166c:	18ffffc4 	addi	r3,r3,-1
   51670:	81a0983a 	sll	r16,r16,r6
   51674:	2101ffcc 	andi	r4,r4,2047
   51678:	28ca703a 	and	r5,r5,r3
   5167c:	003fed06 	br	51634 <__alt_data_end+0xfffdf634>
   51680:	0009883a 	mov	r4,zero
   51684:	000b883a 	mov	r5,zero
   51688:	003fea06 	br	51634 <__alt_data_end+0xfffdf634>

0005168c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5168c:	defffe04 	addi	sp,sp,-8
   51690:	dfc00115 	stw	ra,4(sp)
   51694:	df000015 	stw	fp,0(sp)
   51698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5169c:	d0a01117 	ldw	r2,-32700(gp)
   516a0:	10000326 	beq	r2,zero,516b0 <alt_get_errno+0x24>
   516a4:	d0a01117 	ldw	r2,-32700(gp)
   516a8:	103ee83a 	callr	r2
   516ac:	00000106 	br	516b4 <alt_get_errno+0x28>
   516b0:	d0a6f404 	addi	r2,gp,-25648
}
   516b4:	e037883a 	mov	sp,fp
   516b8:	dfc00117 	ldw	ra,4(sp)
   516bc:	df000017 	ldw	fp,0(sp)
   516c0:	dec00204 	addi	sp,sp,8
   516c4:	f800283a 	ret

000516c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   516c8:	defffb04 	addi	sp,sp,-20
   516cc:	dfc00415 	stw	ra,16(sp)
   516d0:	df000315 	stw	fp,12(sp)
   516d4:	df000304 	addi	fp,sp,12
   516d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   516dc:	e0bfff17 	ldw	r2,-4(fp)
   516e0:	10000816 	blt	r2,zero,51704 <close+0x3c>
   516e4:	01400304 	movi	r5,12
   516e8:	e13fff17 	ldw	r4,-4(fp)
   516ec:	0040eec0 	call	40eec <__mulsi3>
   516f0:	1007883a 	mov	r3,r2
   516f4:	00800174 	movhi	r2,5
   516f8:	109aa004 	addi	r2,r2,27264
   516fc:	1885883a 	add	r2,r3,r2
   51700:	00000106 	br	51708 <close+0x40>
   51704:	0005883a 	mov	r2,zero
   51708:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   5170c:	e0bffd17 	ldw	r2,-12(fp)
   51710:	10001926 	beq	r2,zero,51778 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   51714:	e0bffd17 	ldw	r2,-12(fp)
   51718:	10800017 	ldw	r2,0(r2)
   5171c:	10800417 	ldw	r2,16(r2)
   51720:	10000626 	beq	r2,zero,5173c <close+0x74>
   51724:	e0bffd17 	ldw	r2,-12(fp)
   51728:	10800017 	ldw	r2,0(r2)
   5172c:	10800417 	ldw	r2,16(r2)
   51730:	e13ffd17 	ldw	r4,-12(fp)
   51734:	103ee83a 	callr	r2
   51738:	00000106 	br	51740 <close+0x78>
   5173c:	0005883a 	mov	r2,zero
   51740:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   51744:	e13fff17 	ldw	r4,-4(fp)
   51748:	0051db00 	call	51db0 <alt_release_fd>
    if (rval < 0)
   5174c:	e0bffe17 	ldw	r2,-8(fp)
   51750:	1000070e 	bge	r2,zero,51770 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   51754:	005168c0 	call	5168c <alt_get_errno>
   51758:	1007883a 	mov	r3,r2
   5175c:	e0bffe17 	ldw	r2,-8(fp)
   51760:	0085c83a 	sub	r2,zero,r2
   51764:	18800015 	stw	r2,0(r3)
      return -1;
   51768:	00bfffc4 	movi	r2,-1
   5176c:	00000706 	br	5178c <close+0xc4>
    }
    return 0;
   51770:	0005883a 	mov	r2,zero
   51774:	00000506 	br	5178c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51778:	005168c0 	call	5168c <alt_get_errno>
   5177c:	1007883a 	mov	r3,r2
   51780:	00801444 	movi	r2,81
   51784:	18800015 	stw	r2,0(r3)
    return -1;
   51788:	00bfffc4 	movi	r2,-1
  }
}
   5178c:	e037883a 	mov	sp,fp
   51790:	dfc00117 	ldw	ra,4(sp)
   51794:	df000017 	ldw	fp,0(sp)
   51798:	dec00204 	addi	sp,sp,8
   5179c:	f800283a 	ret

000517a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   517a0:	defffc04 	addi	sp,sp,-16
   517a4:	df000315 	stw	fp,12(sp)
   517a8:	df000304 	addi	fp,sp,12
   517ac:	e13ffd15 	stw	r4,-12(fp)
   517b0:	e17ffe15 	stw	r5,-8(fp)
   517b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   517b8:	e0bfff17 	ldw	r2,-4(fp)
}
   517bc:	e037883a 	mov	sp,fp
   517c0:	df000017 	ldw	fp,0(sp)
   517c4:	dec00104 	addi	sp,sp,4
   517c8:	f800283a 	ret

000517cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   517cc:	defffe04 	addi	sp,sp,-8
   517d0:	dfc00115 	stw	ra,4(sp)
   517d4:	df000015 	stw	fp,0(sp)
   517d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   517dc:	d0a01117 	ldw	r2,-32700(gp)
   517e0:	10000326 	beq	r2,zero,517f0 <alt_get_errno+0x24>
   517e4:	d0a01117 	ldw	r2,-32700(gp)
   517e8:	103ee83a 	callr	r2
   517ec:	00000106 	br	517f4 <alt_get_errno+0x28>
   517f0:	d0a6f404 	addi	r2,gp,-25648
}
   517f4:	e037883a 	mov	sp,fp
   517f8:	dfc00117 	ldw	ra,4(sp)
   517fc:	df000017 	ldw	fp,0(sp)
   51800:	dec00204 	addi	sp,sp,8
   51804:	f800283a 	ret

00051808 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   51808:	defffb04 	addi	sp,sp,-20
   5180c:	dfc00415 	stw	ra,16(sp)
   51810:	df000315 	stw	fp,12(sp)
   51814:	df000304 	addi	fp,sp,12
   51818:	e13ffe15 	stw	r4,-8(fp)
   5181c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51820:	e0bffe17 	ldw	r2,-8(fp)
   51824:	10000816 	blt	r2,zero,51848 <fstat+0x40>
   51828:	01400304 	movi	r5,12
   5182c:	e13ffe17 	ldw	r4,-8(fp)
   51830:	0040eec0 	call	40eec <__mulsi3>
   51834:	1007883a 	mov	r3,r2
   51838:	00800174 	movhi	r2,5
   5183c:	109aa004 	addi	r2,r2,27264
   51840:	1885883a 	add	r2,r3,r2
   51844:	00000106 	br	5184c <fstat+0x44>
   51848:	0005883a 	mov	r2,zero
   5184c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   51850:	e0bffd17 	ldw	r2,-12(fp)
   51854:	10001026 	beq	r2,zero,51898 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   51858:	e0bffd17 	ldw	r2,-12(fp)
   5185c:	10800017 	ldw	r2,0(r2)
   51860:	10800817 	ldw	r2,32(r2)
   51864:	10000726 	beq	r2,zero,51884 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   51868:	e0bffd17 	ldw	r2,-12(fp)
   5186c:	10800017 	ldw	r2,0(r2)
   51870:	10800817 	ldw	r2,32(r2)
   51874:	e17fff17 	ldw	r5,-4(fp)
   51878:	e13ffd17 	ldw	r4,-12(fp)
   5187c:	103ee83a 	callr	r2
   51880:	00000a06 	br	518ac <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   51884:	e0bfff17 	ldw	r2,-4(fp)
   51888:	00c80004 	movi	r3,8192
   5188c:	10c00115 	stw	r3,4(r2)
      return 0;
   51890:	0005883a 	mov	r2,zero
   51894:	00000506 	br	518ac <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51898:	00517cc0 	call	517cc <alt_get_errno>
   5189c:	1007883a 	mov	r3,r2
   518a0:	00801444 	movi	r2,81
   518a4:	18800015 	stw	r2,0(r3)
    return -1;
   518a8:	00bfffc4 	movi	r2,-1
  }
}
   518ac:	e037883a 	mov	sp,fp
   518b0:	dfc00117 	ldw	ra,4(sp)
   518b4:	df000017 	ldw	fp,0(sp)
   518b8:	dec00204 	addi	sp,sp,8
   518bc:	f800283a 	ret

000518c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   518c0:	defffe04 	addi	sp,sp,-8
   518c4:	dfc00115 	stw	ra,4(sp)
   518c8:	df000015 	stw	fp,0(sp)
   518cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   518d0:	d0a01117 	ldw	r2,-32700(gp)
   518d4:	10000326 	beq	r2,zero,518e4 <alt_get_errno+0x24>
   518d8:	d0a01117 	ldw	r2,-32700(gp)
   518dc:	103ee83a 	callr	r2
   518e0:	00000106 	br	518e8 <alt_get_errno+0x28>
   518e4:	d0a6f404 	addi	r2,gp,-25648
}
   518e8:	e037883a 	mov	sp,fp
   518ec:	dfc00117 	ldw	ra,4(sp)
   518f0:	df000017 	ldw	fp,0(sp)
   518f4:	dec00204 	addi	sp,sp,8
   518f8:	f800283a 	ret

000518fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   518fc:	deffed04 	addi	sp,sp,-76
   51900:	dfc01215 	stw	ra,72(sp)
   51904:	df001115 	stw	fp,68(sp)
   51908:	df001104 	addi	fp,sp,68
   5190c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51910:	e0bfff17 	ldw	r2,-4(fp)
   51914:	10000816 	blt	r2,zero,51938 <isatty+0x3c>
   51918:	01400304 	movi	r5,12
   5191c:	e13fff17 	ldw	r4,-4(fp)
   51920:	0040eec0 	call	40eec <__mulsi3>
   51924:	1007883a 	mov	r3,r2
   51928:	00800174 	movhi	r2,5
   5192c:	109aa004 	addi	r2,r2,27264
   51930:	1885883a 	add	r2,r3,r2
   51934:	00000106 	br	5193c <isatty+0x40>
   51938:	0005883a 	mov	r2,zero
   5193c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   51940:	e0bfef17 	ldw	r2,-68(fp)
   51944:	10000e26 	beq	r2,zero,51980 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   51948:	e0bfef17 	ldw	r2,-68(fp)
   5194c:	10800017 	ldw	r2,0(r2)
   51950:	10800817 	ldw	r2,32(r2)
   51954:	1000021e 	bne	r2,zero,51960 <isatty+0x64>
    {
      return 1;
   51958:	00800044 	movi	r2,1
   5195c:	00000d06 	br	51994 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   51960:	e0bff004 	addi	r2,fp,-64
   51964:	100b883a 	mov	r5,r2
   51968:	e13fff17 	ldw	r4,-4(fp)
   5196c:	00518080 	call	51808 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   51970:	e0bff117 	ldw	r2,-60(fp)
   51974:	10880020 	cmpeqi	r2,r2,8192
   51978:	10803fcc 	andi	r2,r2,255
   5197c:	00000506 	br	51994 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51980:	00518c00 	call	518c0 <alt_get_errno>
   51984:	1007883a 	mov	r3,r2
   51988:	00801444 	movi	r2,81
   5198c:	18800015 	stw	r2,0(r3)
    return 0;
   51990:	0005883a 	mov	r2,zero
  }
}
   51994:	e037883a 	mov	sp,fp
   51998:	dfc00117 	ldw	ra,4(sp)
   5199c:	df000017 	ldw	fp,0(sp)
   519a0:	dec00204 	addi	sp,sp,8
   519a4:	f800283a 	ret

000519a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   519a8:	defffc04 	addi	sp,sp,-16
   519ac:	df000315 	stw	fp,12(sp)
   519b0:	df000304 	addi	fp,sp,12
   519b4:	e13ffd15 	stw	r4,-12(fp)
   519b8:	e17ffe15 	stw	r5,-8(fp)
   519bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   519c0:	e0fffe17 	ldw	r3,-8(fp)
   519c4:	e0bffd17 	ldw	r2,-12(fp)
   519c8:	18800c26 	beq	r3,r2,519fc <alt_load_section+0x54>
  {
    while( to != end )
   519cc:	00000806 	br	519f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   519d0:	e0bffe17 	ldw	r2,-8(fp)
   519d4:	10c00104 	addi	r3,r2,4
   519d8:	e0fffe15 	stw	r3,-8(fp)
   519dc:	e0fffd17 	ldw	r3,-12(fp)
   519e0:	19000104 	addi	r4,r3,4
   519e4:	e13ffd15 	stw	r4,-12(fp)
   519e8:	18c00017 	ldw	r3,0(r3)
   519ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   519f0:	e0fffe17 	ldw	r3,-8(fp)
   519f4:	e0bfff17 	ldw	r2,-4(fp)
   519f8:	18bff51e 	bne	r3,r2,519d0 <__alt_data_end+0xfffdf9d0>
    {
      *to++ = *from++;
    }
  }
}
   519fc:	0001883a 	nop
   51a00:	e037883a 	mov	sp,fp
   51a04:	df000017 	ldw	fp,0(sp)
   51a08:	dec00104 	addi	sp,sp,4
   51a0c:	f800283a 	ret

00051a10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   51a10:	defffe04 	addi	sp,sp,-8
   51a14:	dfc00115 	stw	ra,4(sp)
   51a18:	df000015 	stw	fp,0(sp)
   51a1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   51a20:	01800174 	movhi	r6,5
   51a24:	319f3e04 	addi	r6,r6,31992
   51a28:	01400174 	movhi	r5,5
   51a2c:	29586a04 	addi	r5,r5,25000
   51a30:	01000174 	movhi	r4,5
   51a34:	211f3e04 	addi	r4,r4,31992
   51a38:	00519a80 	call	519a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   51a3c:	01800134 	movhi	r6,4
   51a40:	31808c04 	addi	r6,r6,560
   51a44:	01400134 	movhi	r5,4
   51a48:	29400804 	addi	r5,r5,32
   51a4c:	01000134 	movhi	r4,4
   51a50:	21000804 	addi	r4,r4,32
   51a54:	00519a80 	call	519a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   51a58:	01800174 	movhi	r6,5
   51a5c:	31986a04 	addi	r6,r6,25000
   51a60:	01400174 	movhi	r5,5
   51a64:	29578504 	addi	r5,r5,24084
   51a68:	01000174 	movhi	r4,5
   51a6c:	21178504 	addi	r4,r4,24084
   51a70:	00519a80 	call	519a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   51a74:	0054af40 	call	54af4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   51a78:	0054d440 	call	54d44 <alt_icache_flush_all>
}
   51a7c:	0001883a 	nop
   51a80:	e037883a 	mov	sp,fp
   51a84:	dfc00117 	ldw	ra,4(sp)
   51a88:	df000017 	ldw	fp,0(sp)
   51a8c:	dec00204 	addi	sp,sp,8
   51a90:	f800283a 	ret

00051a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51a94:	defffe04 	addi	sp,sp,-8
   51a98:	dfc00115 	stw	ra,4(sp)
   51a9c:	df000015 	stw	fp,0(sp)
   51aa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51aa4:	d0a01117 	ldw	r2,-32700(gp)
   51aa8:	10000326 	beq	r2,zero,51ab8 <alt_get_errno+0x24>
   51aac:	d0a01117 	ldw	r2,-32700(gp)
   51ab0:	103ee83a 	callr	r2
   51ab4:	00000106 	br	51abc <alt_get_errno+0x28>
   51ab8:	d0a6f404 	addi	r2,gp,-25648
}
   51abc:	e037883a 	mov	sp,fp
   51ac0:	dfc00117 	ldw	ra,4(sp)
   51ac4:	df000017 	ldw	fp,0(sp)
   51ac8:	dec00204 	addi	sp,sp,8
   51acc:	f800283a 	ret

00051ad0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   51ad0:	defff904 	addi	sp,sp,-28
   51ad4:	dfc00615 	stw	ra,24(sp)
   51ad8:	df000515 	stw	fp,20(sp)
   51adc:	df000504 	addi	fp,sp,20
   51ae0:	e13ffd15 	stw	r4,-12(fp)
   51ae4:	e17ffe15 	stw	r5,-8(fp)
   51ae8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   51aec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51af0:	e0bffd17 	ldw	r2,-12(fp)
   51af4:	10000816 	blt	r2,zero,51b18 <lseek+0x48>
   51af8:	01400304 	movi	r5,12
   51afc:	e13ffd17 	ldw	r4,-12(fp)
   51b00:	0040eec0 	call	40eec <__mulsi3>
   51b04:	1007883a 	mov	r3,r2
   51b08:	00800174 	movhi	r2,5
   51b0c:	109aa004 	addi	r2,r2,27264
   51b10:	1885883a 	add	r2,r3,r2
   51b14:	00000106 	br	51b1c <lseek+0x4c>
   51b18:	0005883a 	mov	r2,zero
   51b1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   51b20:	e0bffc17 	ldw	r2,-16(fp)
   51b24:	10001026 	beq	r2,zero,51b68 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   51b28:	e0bffc17 	ldw	r2,-16(fp)
   51b2c:	10800017 	ldw	r2,0(r2)
   51b30:	10800717 	ldw	r2,28(r2)
   51b34:	10000926 	beq	r2,zero,51b5c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   51b38:	e0bffc17 	ldw	r2,-16(fp)
   51b3c:	10800017 	ldw	r2,0(r2)
   51b40:	10800717 	ldw	r2,28(r2)
   51b44:	e1bfff17 	ldw	r6,-4(fp)
   51b48:	e17ffe17 	ldw	r5,-8(fp)
   51b4c:	e13ffc17 	ldw	r4,-16(fp)
   51b50:	103ee83a 	callr	r2
   51b54:	e0bffb15 	stw	r2,-20(fp)
   51b58:	00000506 	br	51b70 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   51b5c:	00bfde84 	movi	r2,-134
   51b60:	e0bffb15 	stw	r2,-20(fp)
   51b64:	00000206 	br	51b70 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   51b68:	00bfebc4 	movi	r2,-81
   51b6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   51b70:	e0bffb17 	ldw	r2,-20(fp)
   51b74:	1000070e 	bge	r2,zero,51b94 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   51b78:	0051a940 	call	51a94 <alt_get_errno>
   51b7c:	1007883a 	mov	r3,r2
   51b80:	e0bffb17 	ldw	r2,-20(fp)
   51b84:	0085c83a 	sub	r2,zero,r2
   51b88:	18800015 	stw	r2,0(r3)
    rc = -1;
   51b8c:	00bfffc4 	movi	r2,-1
   51b90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   51b94:	e0bffb17 	ldw	r2,-20(fp)
}
   51b98:	e037883a 	mov	sp,fp
   51b9c:	dfc00117 	ldw	ra,4(sp)
   51ba0:	df000017 	ldw	fp,0(sp)
   51ba4:	dec00204 	addi	sp,sp,8
   51ba8:	f800283a 	ret

00051bac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   51bac:	defffd04 	addi	sp,sp,-12
   51bb0:	dfc00215 	stw	ra,8(sp)
   51bb4:	df000115 	stw	fp,4(sp)
   51bb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   51bbc:	0009883a 	mov	r4,zero
   51bc0:	00520540 	call	52054 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   51bc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   51bc8:	005208c0 	call	5208c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   51bcc:	01800174 	movhi	r6,5
   51bd0:	31985904 	addi	r6,r6,24932
   51bd4:	01400174 	movhi	r5,5
   51bd8:	29585904 	addi	r5,r5,24932
   51bdc:	01000174 	movhi	r4,5
   51be0:	21185904 	addi	r4,r4,24932
   51be4:	00550e80 	call	550e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   51be8:	0054bf40 	call	54bf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   51bec:	01000174 	movhi	r4,5
   51bf0:	21131504 	addi	r4,r4,19540
   51bf4:	0055a800 	call	55a80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   51bf8:	d0a6f517 	ldw	r2,-25644(gp)
   51bfc:	d0e6f617 	ldw	r3,-25640(gp)
   51c00:	d126f717 	ldw	r4,-25636(gp)
   51c04:	200d883a 	mov	r6,r4
   51c08:	180b883a 	mov	r5,r3
   51c0c:	1009883a 	mov	r4,r2
   51c10:	00402d00 	call	402d0 <main>
   51c14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   51c18:	01000044 	movi	r4,1
   51c1c:	00516c80 	call	516c8 <close>
  exit (result);
   51c20:	e13fff17 	ldw	r4,-4(fp)
   51c24:	0055a940 	call	55a94 <exit>

00051c28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   51c28:	defffe04 	addi	sp,sp,-8
   51c2c:	df000115 	stw	fp,4(sp)
   51c30:	df000104 	addi	fp,sp,4
   51c34:	e13fff15 	stw	r4,-4(fp)
}
   51c38:	0001883a 	nop
   51c3c:	e037883a 	mov	sp,fp
   51c40:	df000017 	ldw	fp,0(sp)
   51c44:	dec00104 	addi	sp,sp,4
   51c48:	f800283a 	ret

00051c4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   51c4c:	defffe04 	addi	sp,sp,-8
   51c50:	df000115 	stw	fp,4(sp)
   51c54:	df000104 	addi	fp,sp,4
   51c58:	e13fff15 	stw	r4,-4(fp)
}
   51c5c:	0001883a 	nop
   51c60:	e037883a 	mov	sp,fp
   51c64:	df000017 	ldw	fp,0(sp)
   51c68:	dec00104 	addi	sp,sp,4
   51c6c:	f800283a 	ret

00051c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51c70:	defffe04 	addi	sp,sp,-8
   51c74:	dfc00115 	stw	ra,4(sp)
   51c78:	df000015 	stw	fp,0(sp)
   51c7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51c80:	d0a01117 	ldw	r2,-32700(gp)
   51c84:	10000326 	beq	r2,zero,51c94 <alt_get_errno+0x24>
   51c88:	d0a01117 	ldw	r2,-32700(gp)
   51c8c:	103ee83a 	callr	r2
   51c90:	00000106 	br	51c98 <alt_get_errno+0x28>
   51c94:	d0a6f404 	addi	r2,gp,-25648
}
   51c98:	e037883a 	mov	sp,fp
   51c9c:	dfc00117 	ldw	ra,4(sp)
   51ca0:	df000017 	ldw	fp,0(sp)
   51ca4:	dec00204 	addi	sp,sp,8
   51ca8:	f800283a 	ret

00051cac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   51cac:	defff904 	addi	sp,sp,-28
   51cb0:	dfc00615 	stw	ra,24(sp)
   51cb4:	df000515 	stw	fp,20(sp)
   51cb8:	df000504 	addi	fp,sp,20
   51cbc:	e13ffd15 	stw	r4,-12(fp)
   51cc0:	e17ffe15 	stw	r5,-8(fp)
   51cc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51cc8:	e0bffd17 	ldw	r2,-12(fp)
   51ccc:	10000816 	blt	r2,zero,51cf0 <read+0x44>
   51cd0:	01400304 	movi	r5,12
   51cd4:	e13ffd17 	ldw	r4,-12(fp)
   51cd8:	0040eec0 	call	40eec <__mulsi3>
   51cdc:	1007883a 	mov	r3,r2
   51ce0:	00800174 	movhi	r2,5
   51ce4:	109aa004 	addi	r2,r2,27264
   51ce8:	1885883a 	add	r2,r3,r2
   51cec:	00000106 	br	51cf4 <read+0x48>
   51cf0:	0005883a 	mov	r2,zero
   51cf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   51cf8:	e0bffb17 	ldw	r2,-20(fp)
   51cfc:	10002226 	beq	r2,zero,51d88 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   51d00:	e0bffb17 	ldw	r2,-20(fp)
   51d04:	10800217 	ldw	r2,8(r2)
   51d08:	108000cc 	andi	r2,r2,3
   51d0c:	10800060 	cmpeqi	r2,r2,1
   51d10:	1000181e 	bne	r2,zero,51d74 <read+0xc8>
        (fd->dev->read))
   51d14:	e0bffb17 	ldw	r2,-20(fp)
   51d18:	10800017 	ldw	r2,0(r2)
   51d1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   51d20:	10001426 	beq	r2,zero,51d74 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   51d24:	e0bffb17 	ldw	r2,-20(fp)
   51d28:	10800017 	ldw	r2,0(r2)
   51d2c:	10800517 	ldw	r2,20(r2)
   51d30:	e0ffff17 	ldw	r3,-4(fp)
   51d34:	180d883a 	mov	r6,r3
   51d38:	e17ffe17 	ldw	r5,-8(fp)
   51d3c:	e13ffb17 	ldw	r4,-20(fp)
   51d40:	103ee83a 	callr	r2
   51d44:	e0bffc15 	stw	r2,-16(fp)
   51d48:	e0bffc17 	ldw	r2,-16(fp)
   51d4c:	1000070e 	bge	r2,zero,51d6c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   51d50:	0051c700 	call	51c70 <alt_get_errno>
   51d54:	1007883a 	mov	r3,r2
   51d58:	e0bffc17 	ldw	r2,-16(fp)
   51d5c:	0085c83a 	sub	r2,zero,r2
   51d60:	18800015 	stw	r2,0(r3)
          return -1;
   51d64:	00bfffc4 	movi	r2,-1
   51d68:	00000c06 	br	51d9c <read+0xf0>
        }
        return rval;
   51d6c:	e0bffc17 	ldw	r2,-16(fp)
   51d70:	00000a06 	br	51d9c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   51d74:	0051c700 	call	51c70 <alt_get_errno>
   51d78:	1007883a 	mov	r3,r2
   51d7c:	00800344 	movi	r2,13
   51d80:	18800015 	stw	r2,0(r3)
   51d84:	00000406 	br	51d98 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   51d88:	0051c700 	call	51c70 <alt_get_errno>
   51d8c:	1007883a 	mov	r3,r2
   51d90:	00801444 	movi	r2,81
   51d94:	18800015 	stw	r2,0(r3)
  }
  return -1;
   51d98:	00bfffc4 	movi	r2,-1
}
   51d9c:	e037883a 	mov	sp,fp
   51da0:	dfc00117 	ldw	ra,4(sp)
   51da4:	df000017 	ldw	fp,0(sp)
   51da8:	dec00204 	addi	sp,sp,8
   51dac:	f800283a 	ret

00051db0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   51db0:	defffc04 	addi	sp,sp,-16
   51db4:	dfc00315 	stw	ra,12(sp)
   51db8:	df000215 	stw	fp,8(sp)
   51dbc:	dc000115 	stw	r16,4(sp)
   51dc0:	df000204 	addi	fp,sp,8
   51dc4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   51dc8:	e0bffe17 	ldw	r2,-8(fp)
   51dcc:	108000d0 	cmplti	r2,r2,3
   51dd0:	1000111e 	bne	r2,zero,51e18 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   51dd4:	04000174 	movhi	r16,5
   51dd8:	841aa004 	addi	r16,r16,27264
   51ddc:	e0bffe17 	ldw	r2,-8(fp)
   51de0:	01400304 	movi	r5,12
   51de4:	1009883a 	mov	r4,r2
   51de8:	0040eec0 	call	40eec <__mulsi3>
   51dec:	8085883a 	add	r2,r16,r2
   51df0:	10800204 	addi	r2,r2,8
   51df4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   51df8:	04000174 	movhi	r16,5
   51dfc:	841aa004 	addi	r16,r16,27264
   51e00:	e0bffe17 	ldw	r2,-8(fp)
   51e04:	01400304 	movi	r5,12
   51e08:	1009883a 	mov	r4,r2
   51e0c:	0040eec0 	call	40eec <__mulsi3>
   51e10:	8085883a 	add	r2,r16,r2
   51e14:	10000015 	stw	zero,0(r2)
  }
}
   51e18:	0001883a 	nop
   51e1c:	e6ffff04 	addi	sp,fp,-4
   51e20:	dfc00217 	ldw	ra,8(sp)
   51e24:	df000117 	ldw	fp,4(sp)
   51e28:	dc000017 	ldw	r16,0(sp)
   51e2c:	dec00304 	addi	sp,sp,12
   51e30:	f800283a 	ret

00051e34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   51e34:	defff904 	addi	sp,sp,-28
   51e38:	df000615 	stw	fp,24(sp)
   51e3c:	df000604 	addi	fp,sp,24
   51e40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51e44:	0005303a 	rdctl	r2,status
   51e48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51e4c:	e0fffe17 	ldw	r3,-8(fp)
   51e50:	00bfff84 	movi	r2,-2
   51e54:	1884703a 	and	r2,r3,r2
   51e58:	1001703a 	wrctl	status,r2
  
  return context;
   51e5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   51e60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   51e64:	d0a01217 	ldw	r2,-32696(gp)
   51e68:	10c000c4 	addi	r3,r2,3
   51e6c:	00bfff04 	movi	r2,-4
   51e70:	1884703a 	and	r2,r3,r2
   51e74:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   51e78:	d0e01217 	ldw	r3,-32696(gp)
   51e7c:	e0bfff17 	ldw	r2,-4(fp)
   51e80:	1887883a 	add	r3,r3,r2
   51e84:	008001f4 	movhi	r2,7
   51e88:	10880004 	addi	r2,r2,8192
   51e8c:	10c0062e 	bgeu	r2,r3,51ea8 <sbrk+0x74>
   51e90:	e0bffb17 	ldw	r2,-20(fp)
   51e94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51e98:	e0bffa17 	ldw	r2,-24(fp)
   51e9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   51ea0:	00bfffc4 	movi	r2,-1
   51ea4:	00000b06 	br	51ed4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   51ea8:	d0a01217 	ldw	r2,-32696(gp)
   51eac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   51eb0:	d0e01217 	ldw	r3,-32696(gp)
   51eb4:	e0bfff17 	ldw	r2,-4(fp)
   51eb8:	1885883a 	add	r2,r3,r2
   51ebc:	d0a01215 	stw	r2,-32696(gp)
   51ec0:	e0bffb17 	ldw	r2,-20(fp)
   51ec4:	e0bffc15 	stw	r2,-16(fp)
   51ec8:	e0bffc17 	ldw	r2,-16(fp)
   51ecc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   51ed0:	e0bffd17 	ldw	r2,-12(fp)
} 
   51ed4:	e037883a 	mov	sp,fp
   51ed8:	df000017 	ldw	fp,0(sp)
   51edc:	dec00104 	addi	sp,sp,4
   51ee0:	f800283a 	ret

00051ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51ee4:	defffe04 	addi	sp,sp,-8
   51ee8:	dfc00115 	stw	ra,4(sp)
   51eec:	df000015 	stw	fp,0(sp)
   51ef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51ef4:	d0a01117 	ldw	r2,-32700(gp)
   51ef8:	10000326 	beq	r2,zero,51f08 <alt_get_errno+0x24>
   51efc:	d0a01117 	ldw	r2,-32700(gp)
   51f00:	103ee83a 	callr	r2
   51f04:	00000106 	br	51f0c <alt_get_errno+0x28>
   51f08:	d0a6f404 	addi	r2,gp,-25648
}
   51f0c:	e037883a 	mov	sp,fp
   51f10:	dfc00117 	ldw	ra,4(sp)
   51f14:	df000017 	ldw	fp,0(sp)
   51f18:	dec00204 	addi	sp,sp,8
   51f1c:	f800283a 	ret

00051f20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   51f20:	defff904 	addi	sp,sp,-28
   51f24:	dfc00615 	stw	ra,24(sp)
   51f28:	df000515 	stw	fp,20(sp)
   51f2c:	df000504 	addi	fp,sp,20
   51f30:	e13ffd15 	stw	r4,-12(fp)
   51f34:	e17ffe15 	stw	r5,-8(fp)
   51f38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51f3c:	e0bffd17 	ldw	r2,-12(fp)
   51f40:	10000816 	blt	r2,zero,51f64 <write+0x44>
   51f44:	01400304 	movi	r5,12
   51f48:	e13ffd17 	ldw	r4,-12(fp)
   51f4c:	0040eec0 	call	40eec <__mulsi3>
   51f50:	1007883a 	mov	r3,r2
   51f54:	00800174 	movhi	r2,5
   51f58:	109aa004 	addi	r2,r2,27264
   51f5c:	1885883a 	add	r2,r3,r2
   51f60:	00000106 	br	51f68 <write+0x48>
   51f64:	0005883a 	mov	r2,zero
   51f68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   51f6c:	e0bffb17 	ldw	r2,-20(fp)
   51f70:	10002126 	beq	r2,zero,51ff8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   51f74:	e0bffb17 	ldw	r2,-20(fp)
   51f78:	10800217 	ldw	r2,8(r2)
   51f7c:	108000cc 	andi	r2,r2,3
   51f80:	10001826 	beq	r2,zero,51fe4 <write+0xc4>
   51f84:	e0bffb17 	ldw	r2,-20(fp)
   51f88:	10800017 	ldw	r2,0(r2)
   51f8c:	10800617 	ldw	r2,24(r2)
   51f90:	10001426 	beq	r2,zero,51fe4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   51f94:	e0bffb17 	ldw	r2,-20(fp)
   51f98:	10800017 	ldw	r2,0(r2)
   51f9c:	10800617 	ldw	r2,24(r2)
   51fa0:	e0ffff17 	ldw	r3,-4(fp)
   51fa4:	180d883a 	mov	r6,r3
   51fa8:	e17ffe17 	ldw	r5,-8(fp)
   51fac:	e13ffb17 	ldw	r4,-20(fp)
   51fb0:	103ee83a 	callr	r2
   51fb4:	e0bffc15 	stw	r2,-16(fp)
   51fb8:	e0bffc17 	ldw	r2,-16(fp)
   51fbc:	1000070e 	bge	r2,zero,51fdc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   51fc0:	0051ee40 	call	51ee4 <alt_get_errno>
   51fc4:	1007883a 	mov	r3,r2
   51fc8:	e0bffc17 	ldw	r2,-16(fp)
   51fcc:	0085c83a 	sub	r2,zero,r2
   51fd0:	18800015 	stw	r2,0(r3)
        return -1;
   51fd4:	00bfffc4 	movi	r2,-1
   51fd8:	00000c06 	br	5200c <write+0xec>
      }
      return rval;
   51fdc:	e0bffc17 	ldw	r2,-16(fp)
   51fe0:	00000a06 	br	5200c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   51fe4:	0051ee40 	call	51ee4 <alt_get_errno>
   51fe8:	1007883a 	mov	r3,r2
   51fec:	00800344 	movi	r2,13
   51ff0:	18800015 	stw	r2,0(r3)
   51ff4:	00000406 	br	52008 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   51ff8:	0051ee40 	call	51ee4 <alt_get_errno>
   51ffc:	1007883a 	mov	r3,r2
   52000:	00801444 	movi	r2,81
   52004:	18800015 	stw	r2,0(r3)
  }
  return -1;
   52008:	00bfffc4 	movi	r2,-1
}
   5200c:	e037883a 	mov	sp,fp
   52010:	dfc00117 	ldw	ra,4(sp)
   52014:	df000017 	ldw	fp,0(sp)
   52018:	dec00204 	addi	sp,sp,8
   5201c:	f800283a 	ret

00052020 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   52020:	defffd04 	addi	sp,sp,-12
   52024:	dfc00215 	stw	ra,8(sp)
   52028:	df000115 	stw	fp,4(sp)
   5202c:	df000104 	addi	fp,sp,4
   52030:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   52034:	d1600e04 	addi	r5,gp,-32712
   52038:	e13fff17 	ldw	r4,-4(fp)
   5203c:	0054b500 	call	54b50 <alt_dev_llist_insert>
}
   52040:	e037883a 	mov	sp,fp
   52044:	dfc00117 	ldw	ra,4(sp)
   52048:	df000017 	ldw	fp,0(sp)
   5204c:	dec00204 	addi	sp,sp,8
   52050:	f800283a 	ret

00052054 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   52054:	defffd04 	addi	sp,sp,-12
   52058:	dfc00215 	stw	ra,8(sp)
   5205c:	df000115 	stw	fp,4(sp)
   52060:	df000104 	addi	fp,sp,4
   52064:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
   52068:	00557f40 	call	557f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   5206c:	00800044 	movi	r2,1
   52070:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   52074:	0001883a 	nop
   52078:	e037883a 	mov	sp,fp
   5207c:	dfc00117 	ldw	ra,4(sp)
   52080:	df000017 	ldw	fp,0(sp)
   52084:	dec00204 	addi	sp,sp,8
   52088:	f800283a 	ret

0005208c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   5208c:	defffe04 	addi	sp,sp,-8
   52090:	dfc00115 	stw	ra,4(sp)
   52094:	df000015 	stw	fp,0(sp)
   52098:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   5209c:	01c0fa04 	movi	r7,1000
   520a0:	01800084 	movi	r6,2
   520a4:	000b883a 	mov	r5,zero
   520a8:	01000234 	movhi	r4,8
   520ac:	21042004 	addi	r4,r4,4224
   520b0:	00547f40 	call	547f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C, I2C);
   520b4:	01000174 	movhi	r4,5
   520b8:	211b0004 	addi	r4,r4,27648
   520bc:	005234c0 	call	5234c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
   520c0:	000d883a 	mov	r6,zero
   520c4:	000b883a 	mov	r5,zero
   520c8:	01000174 	movhi	r4,5
   520cc:	211b1804 	addi	r4,r4,27744
   520d0:	0053e780 	call	53e78 <altera_avalon_jtag_uart_init>
   520d4:	01000174 	movhi	r4,5
   520d8:	211b0e04 	addi	r4,r4,27704
   520dc:	00520200 	call	52020 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   520e0:	0001883a 	nop
}
   520e4:	0001883a 	nop
   520e8:	e037883a 	mov	sp,fp
   520ec:	dfc00117 	ldw	ra,4(sp)
   520f0:	df000017 	ldw	fp,0(sp)
   520f4:	dec00204 	addi	sp,sp,8
   520f8:	f800283a 	ret

000520fc <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   520fc:	defff904 	addi	sp,sp,-28
   52100:	dfc00615 	stw	ra,24(sp)
   52104:	df000515 	stw	fp,20(sp)
   52108:	df000504 	addi	fp,sp,20
   5210c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   52110:	008000b4 	movhi	r2,2
   52114:	10a1a804 	addi	r2,r2,-31072
   52118:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   5211c:	e0bfff17 	ldw	r2,-4(fp)
   52120:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   52124:	e0bffc17 	ldw	r2,-16(fp)
   52128:	10800717 	ldw	r2,28(r2)
   5212c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   52130:	e0bffd17 	ldw	r2,-12(fp)
   52134:	10800217 	ldw	r2,8(r2)
   52138:	10800098 	cmpnei	r2,r2,2
   5213c:	1000251e 	bne	r2,zero,521d4 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   52140:	e0bffd17 	ldw	r2,-12(fp)
   52144:	10c00017 	ldw	r3,0(r2)
   52148:	e0bffd17 	ldw	r2,-12(fp)
   5214c:	10800117 	ldw	r2,4(r2)
   52150:	e13ffe04 	addi	r4,fp,-8
   52154:	200f883a 	mov	r7,r4
   52158:	100d883a 	mov	r6,r2
   5215c:	180b883a 	mov	r5,r3
   52160:	e13ffc17 	ldw	r4,-16(fp)
   52164:	00528ac0 	call	528ac <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   52168:	e0bffd17 	ldw	r2,-12(fp)
   5216c:	10c00117 	ldw	r3,4(r2)
   52170:	e0bffe17 	ldw	r2,-8(fp)
   52174:	1887c83a 	sub	r3,r3,r2
   52178:	e0bffd17 	ldw	r2,-12(fp)
   5217c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   52180:	e0bffd17 	ldw	r2,-12(fp)
   52184:	10c00017 	ldw	r3,0(r2)
   52188:	e0bffe17 	ldw	r2,-8(fp)
   5218c:	1887883a 	add	r3,r3,r2
   52190:	e0bffd17 	ldw	r2,-12(fp)
   52194:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   52198:	e0bffd17 	ldw	r2,-12(fp)
   5219c:	10800117 	ldw	r2,4(r2)
   521a0:	10000c26 	beq	r2,zero,521d4 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   521a4:	01400704 	movi	r5,28
   521a8:	e13ffc17 	ldw	r4,-16(fp)
   521ac:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   521b0:	01400084 	movi	r5,2
   521b4:	e13ffc17 	ldw	r4,-16(fp)
   521b8:	0053b080 	call	53b08 <alt_avalon_i2c_int_enable>
   521bc:	00000e06 	br	521f8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   521c0:	e0bffb17 	ldw	r2,-20(fp)
   521c4:	10bfffc4 	addi	r2,r2,-1
   521c8:	e0bffb15 	stw	r2,-20(fp)
   521cc:	e0bffb17 	ldw	r2,-20(fp)
   521d0:	10000426 	beq	r2,zero,521e4 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   521d4:	e13ffc17 	ldw	r4,-16(fp)
   521d8:	00528680 	call	52868 <alt_avalon_i2c_is_busy>
   521dc:	103ff81e 	bne	r2,zero,521c0 <__alt_data_end+0xfffe01c0>
   521e0:	00000106 	br	521e8 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   521e4:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   521e8:	e13ffc17 	ldw	r4,-16(fp)
   521ec:	00525100 	call	52510 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   521f0:	e0bffd17 	ldw	r2,-12(fp)
   521f4:	10000215 	stw	zero,8(r2)
}
   521f8:	e037883a 	mov	sp,fp
   521fc:	dfc00117 	ldw	ra,4(sp)
   52200:	df000017 	ldw	fp,0(sp)
   52204:	dec00204 	addi	sp,sp,8
   52208:	f800283a 	ret

0005220c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   5220c:	defffc04 	addi	sp,sp,-16
   52210:	dfc00315 	stw	ra,12(sp)
   52214:	df000215 	stw	fp,8(sp)
   52218:	df000204 	addi	fp,sp,8
   5221c:	e13ffe15 	stw	r4,-8(fp)
   52220:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   52224:	e0bfff17 	ldw	r2,-4(fp)
   52228:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   5222c:	e1ffff17 	ldw	r7,-4(fp)
   52230:	000d883a 	mov	r6,zero
   52234:	01400174 	movhi	r5,5
   52238:	29483f04 	addi	r5,r5,8444
   5223c:	e13ffe17 	ldw	r4,-8(fp)
   52240:	00522f80 	call	522f8 <alt_avalon_i2c_register_callback>
}
   52244:	0001883a 	nop
   52248:	e037883a 	mov	sp,fp
   5224c:	dfc00117 	ldw	ra,4(sp)
   52250:	df000017 	ldw	fp,0(sp)
   52254:	dec00204 	addi	sp,sp,8
   52258:	f800283a 	ret

0005225c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   5225c:	defff904 	addi	sp,sp,-28
   52260:	dfc00615 	stw	ra,24(sp)
   52264:	df000515 	stw	fp,20(sp)
   52268:	df000504 	addi	fp,sp,20
   5226c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   52270:	e0bfff17 	ldw	r2,-4(fp)
   52274:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   52278:	014007c4 	movi	r5,31
   5227c:	e13ffb17 	ldw	r4,-20(fp)
   52280:	0053aa00 	call	53aa0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52284:	01400704 	movi	r5,28
   52288:	e13ffb17 	ldw	r4,-20(fp)
   5228c:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   52290:	e0bffb17 	ldw	r2,-20(fp)
   52294:	10800617 	ldw	r2,24(r2)
   52298:	10001126 	beq	r2,zero,522e0 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5229c:	0005303a 	rdctl	r2,status
   522a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   522a4:	e0fffd17 	ldw	r3,-12(fp)
   522a8:	00bfff84 	movi	r2,-2
   522ac:	1884703a 	and	r2,r3,r2
   522b0:	1001703a 	wrctl	status,r2
  
  return context;
   522b4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   522b8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   522bc:	e0bffb17 	ldw	r2,-20(fp)
   522c0:	10800617 	ldw	r2,24(r2)
   522c4:	e13ffb17 	ldw	r4,-20(fp)
   522c8:	103ee83a 	callr	r2
   522cc:	e0bffc17 	ldw	r2,-16(fp)
   522d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   522d4:	e0bffe17 	ldw	r2,-8(fp)
   522d8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   522dc:	0001883a 	nop
   522e0:	0001883a 	nop
}
   522e4:	e037883a 	mov	sp,fp
   522e8:	dfc00117 	ldw	ra,4(sp)
   522ec:	df000017 	ldw	fp,0(sp)
   522f0:	dec00204 	addi	sp,sp,8
   522f4:	f800283a 	ret

000522f8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   522f8:	defffb04 	addi	sp,sp,-20
   522fc:	df000415 	stw	fp,16(sp)
   52300:	df000404 	addi	fp,sp,16
   52304:	e13ffc15 	stw	r4,-16(fp)
   52308:	e17ffd15 	stw	r5,-12(fp)
   5230c:	e1bffe15 	stw	r6,-8(fp)
   52310:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   52314:	e0bffc17 	ldw	r2,-16(fp)
   52318:	e0fffd17 	ldw	r3,-12(fp)
   5231c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   52320:	e0bffc17 	ldw	r2,-16(fp)
   52324:	e0ffff17 	ldw	r3,-4(fp)
   52328:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   5232c:	e0bffc17 	ldw	r2,-16(fp)
   52330:	e0fffe17 	ldw	r3,-8(fp)
   52334:	10c00815 	stw	r3,32(r2)

    return ;
   52338:	0001883a 	nop
}
   5233c:	e037883a 	mov	sp,fp
   52340:	df000017 	ldw	fp,0(sp)
   52344:	dec00104 	addi	sp,sp,4
   52348:	f800283a 	ret

0005234c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   5234c:	defff704 	addi	sp,sp,-36
   52350:	dfc00815 	stw	ra,32(sp)
   52354:	df000715 	stw	fp,28(sp)
   52358:	df000704 	addi	fp,sp,28
   5235c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   52360:	e13fff17 	ldw	r4,-4(fp)
   52364:	00525100 	call	52510 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   52368:	014007c4 	movi	r5,31
   5236c:	e13fff17 	ldw	r4,-4(fp)
   52370:	0053aa00 	call	53aa0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52374:	01400704 	movi	r5,28
   52378:	e13fff17 	ldw	r4,-4(fp)
   5237c:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   52380:	014000c4 	movi	r5,3
   52384:	e13fff17 	ldw	r4,-4(fp)
   52388:	0053cac0 	call	53cac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   5238c:	014000c4 	movi	r5,3
   52390:	e13fff17 	ldw	r4,-4(fp)
   52394:	0053bfc0 	call	53bfc <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   52398:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   5239c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   523a0:	e0bffb04 	addi	r2,fp,-20
   523a4:	018000b4 	movhi	r6,2
   523a8:	31a1a804 	addi	r6,r6,-31072
   523ac:	100b883a 	mov	r5,r2
   523b0:	e13fff17 	ldw	r4,-4(fp)
   523b4:	005276c0 	call	5276c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   523b8:	e0bffb04 	addi	r2,fp,-20
   523bc:	100b883a 	mov	r5,r2
   523c0:	e13fff17 	ldw	r4,-4(fp)
   523c4:	005260c0 	call	5260c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   523c8:	d1601304 	addi	r5,gp,-32692
   523cc:	e13fff17 	ldw	r4,-4(fp)
   523d0:	0054b500 	call	54b50 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   523d4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   523d8:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   523dc:	e0bffa17 	ldw	r2,-24(fp)
   523e0:	10000c1e 	bne	r2,zero,52414 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   523e4:	e0bfff17 	ldw	r2,-4(fp)
   523e8:	10c00417 	ldw	r3,16(r2)
   523ec:	e0bfff17 	ldw	r2,-4(fp)
   523f0:	10800517 	ldw	r2,20(r2)
   523f4:	d8000015 	stw	zero,0(sp)
   523f8:	e1ffff17 	ldw	r7,-4(fp)
   523fc:	01800174 	movhi	r6,5
   52400:	31889704 	addi	r6,r6,8796
   52404:	100b883a 	mov	r5,r2
   52408:	1809883a 	mov	r4,r3
   5240c:	0054d640 	call	54d64 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   52410:	00000406 	br	52424 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   52414:	01000174 	movhi	r4,5
   52418:	21186204 	addi	r4,r4,24968
   5241c:	00553e80 	call	553e8 <alt_printf>
    }

    return;
   52420:	0001883a 	nop

}
   52424:	e037883a 	mov	sp,fp
   52428:	dfc00117 	ldw	ra,4(sp)
   5242c:	df000017 	ldw	fp,0(sp)
   52430:	dec00204 	addi	sp,sp,8
   52434:	f800283a 	ret

00052438 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   52438:	defffc04 	addi	sp,sp,-16
   5243c:	dfc00315 	stw	ra,12(sp)
   52440:	df000215 	stw	fp,8(sp)
   52444:	df000204 	addi	fp,sp,8
   52448:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   5244c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   52450:	d1601304 	addi	r5,gp,-32692
   52454:	e13fff17 	ldw	r4,-4(fp)
   52458:	0054cb40 	call	54cb4 <alt_find_dev>
   5245c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   52460:	e0bffe17 	ldw	r2,-8(fp)
}
   52464:	e037883a 	mov	sp,fp
   52468:	dfc00117 	ldw	ra,4(sp)
   5246c:	df000017 	ldw	fp,0(sp)
   52470:	dec00204 	addi	sp,sp,8
   52474:	f800283a 	ret

00052478 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52478:	defffc04 	addi	sp,sp,-16
   5247c:	df000315 	stw	fp,12(sp)
   52480:	df000304 	addi	fp,sp,12
   52484:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   52488:	e0bfff17 	ldw	r2,-4(fp)
   5248c:	10800717 	ldw	r2,28(r2)
   52490:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   52494:	e0bfff17 	ldw	r2,-4(fp)
   52498:	10800317 	ldw	r2,12(r2)
   5249c:	10800204 	addi	r2,r2,8
   524a0:	10800037 	ldwio	r2,0(r2)
   524a4:	1080004c 	andi	r2,r2,1
   524a8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   524ac:	e0bffe17 	ldw	r2,-8(fp)
   524b0:	10000226 	beq	r2,zero,524bc <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   524b4:	00bffe44 	movi	r2,-7
   524b8:	00001106 	br	52500 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   524bc:	e0bfff17 	ldw	r2,-4(fp)
   524c0:	10c00617 	ldw	r3,24(r2)
   524c4:	00800174 	movhi	r2,5
   524c8:	10883f04 	addi	r2,r2,8444
   524cc:	1880021e 	bne	r3,r2,524d8 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   524d0:	e0bffd17 	ldw	r2,-12(fp)
   524d4:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   524d8:	e0bfff17 	ldw	r2,-4(fp)
   524dc:	10800317 	ldw	r2,12(r2)
   524e0:	10800204 	addi	r2,r2,8
   524e4:	e0ffff17 	ldw	r3,-4(fp)
   524e8:	18c00317 	ldw	r3,12(r3)
   524ec:	18c00204 	addi	r3,r3,8
   524f0:	18c00037 	ldwio	r3,0(r3)
   524f4:	18c00054 	ori	r3,r3,1
   524f8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   524fc:	0005883a 	mov	r2,zero
}
   52500:	e037883a 	mov	sp,fp
   52504:	df000017 	ldw	fp,0(sp)
   52508:	dec00104 	addi	sp,sp,4
   5250c:	f800283a 	ret

00052510 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52510:	defffe04 	addi	sp,sp,-8
   52514:	df000115 	stw	fp,4(sp)
   52518:	df000104 	addi	fp,sp,4
   5251c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   52520:	e0bfff17 	ldw	r2,-4(fp)
   52524:	10800317 	ldw	r2,12(r2)
   52528:	10800204 	addi	r2,r2,8
   5252c:	e0ffff17 	ldw	r3,-4(fp)
   52530:	18c00317 	ldw	r3,12(r3)
   52534:	18c00204 	addi	r3,r3,8
   52538:	19000037 	ldwio	r4,0(r3)
   5253c:	00ffff84 	movi	r3,-2
   52540:	20c6703a 	and	r3,r4,r3
   52544:	10c00035 	stwio	r3,0(r2)

}
   52548:	0001883a 	nop
   5254c:	e037883a 	mov	sp,fp
   52550:	df000017 	ldw	fp,0(sp)
   52554:	dec00104 	addi	sp,sp,4
   52558:	f800283a 	ret

0005255c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   5255c:	defffd04 	addi	sp,sp,-12
   52560:	df000215 	stw	fp,8(sp)
   52564:	df000204 	addi	fp,sp,8
   52568:	e13ffe15 	stw	r4,-8(fp)
   5256c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   52570:	e0bffe17 	ldw	r2,-8(fp)
   52574:	10c00d17 	ldw	r3,52(r2)
   52578:	e0bfff17 	ldw	r2,-4(fp)
   5257c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   52580:	e0bffe17 	ldw	r2,-8(fp)
   52584:	10800317 	ldw	r2,12(r2)
   52588:	10800204 	addi	r2,r2,8
   5258c:	10800037 	ldwio	r2,0(r2)
   52590:	1080008c 	andi	r2,r2,2
   52594:	1005d07a 	srai	r2,r2,1
   52598:	1007883a 	mov	r3,r2
   5259c:	e0bfff17 	ldw	r2,-4(fp)
   525a0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   525a4:	e0bffe17 	ldw	r2,-8(fp)
   525a8:	10800317 	ldw	r2,12(r2)
   525ac:	10800904 	addi	r2,r2,36
   525b0:	10800037 	ldwio	r2,0(r2)
   525b4:	1007883a 	mov	r3,r2
   525b8:	e0bfff17 	ldw	r2,-4(fp)
   525bc:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   525c0:	e0bffe17 	ldw	r2,-8(fp)
   525c4:	10800317 	ldw	r2,12(r2)
   525c8:	10800804 	addi	r2,r2,32
   525cc:	10800037 	ldwio	r2,0(r2)
   525d0:	1007883a 	mov	r3,r2
   525d4:	e0bfff17 	ldw	r2,-4(fp)
   525d8:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   525dc:	e0bffe17 	ldw	r2,-8(fp)
   525e0:	10800317 	ldw	r2,12(r2)
   525e4:	10800a04 	addi	r2,r2,40
   525e8:	10800037 	ldwio	r2,0(r2)
   525ec:	1007883a 	mov	r3,r2
   525f0:	e0bfff17 	ldw	r2,-4(fp)
   525f4:	10c0030d 	sth	r3,12(r2)
}
   525f8:	0001883a 	nop
   525fc:	e037883a 	mov	sp,fp
   52600:	df000017 	ldw	fp,0(sp)
   52604:	dec00104 	addi	sp,sp,4
   52608:	f800283a 	ret

0005260c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   5260c:	defffd04 	addi	sp,sp,-12
   52610:	df000215 	stw	fp,8(sp)
   52614:	df000204 	addi	fp,sp,8
   52618:	e13ffe15 	stw	r4,-8(fp)
   5261c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   52620:	e0bfff17 	ldw	r2,-4(fp)
   52624:	10c00017 	ldw	r3,0(r2)
   52628:	e0bffe17 	ldw	r2,-8(fp)
   5262c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   52630:	e0bffe17 	ldw	r2,-8(fp)
   52634:	10800317 	ldw	r2,12(r2)
   52638:	10c00204 	addi	r3,r2,8
   5263c:	e0bffe17 	ldw	r2,-8(fp)
   52640:	10800317 	ldw	r2,12(r2)
   52644:	10800204 	addi	r2,r2,8
   52648:	10800037 	ldwio	r2,0(r2)
   5264c:	1009883a 	mov	r4,r2
   52650:	00bfff44 	movi	r2,-3
   52654:	2088703a 	and	r4,r4,r2
   52658:	e0bfff17 	ldw	r2,-4(fp)
   5265c:	10800117 	ldw	r2,4(r2)
   52660:	1085883a 	add	r2,r2,r2
   52664:	1080008c 	andi	r2,r2,2
   52668:	2084b03a 	or	r2,r4,r2
   5266c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   52670:	e0bffe17 	ldw	r2,-8(fp)
   52674:	10800317 	ldw	r2,12(r2)
   52678:	10800904 	addi	r2,r2,36
   5267c:	e0ffff17 	ldw	r3,-4(fp)
   52680:	18c0020b 	ldhu	r3,8(r3)
   52684:	18ffffcc 	andi	r3,r3,65535
   52688:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   5268c:	e0bffe17 	ldw	r2,-8(fp)
   52690:	10800317 	ldw	r2,12(r2)
   52694:	10800804 	addi	r2,r2,32
   52698:	e0ffff17 	ldw	r3,-4(fp)
   5269c:	18c0028b 	ldhu	r3,10(r3)
   526a0:	18ffffcc 	andi	r3,r3,65535
   526a4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   526a8:	e0bffe17 	ldw	r2,-8(fp)
   526ac:	10800317 	ldw	r2,12(r2)
   526b0:	10800a04 	addi	r2,r2,40
   526b4:	e0ffff17 	ldw	r3,-4(fp)
   526b8:	18c0030b 	ldhu	r3,12(r3)
   526bc:	18ffffcc 	andi	r3,r3,65535
   526c0:	10c00035 	stwio	r3,0(r2)
}
   526c4:	0001883a 	nop
   526c8:	e037883a 	mov	sp,fp
   526cc:	df000017 	ldw	fp,0(sp)
   526d0:	dec00104 	addi	sp,sp,4
   526d4:	f800283a 	ret

000526d8 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   526d8:	defffb04 	addi	sp,sp,-20
   526dc:	dfc00415 	stw	ra,16(sp)
   526e0:	df000315 	stw	fp,12(sp)
   526e4:	df000304 	addi	fp,sp,12
   526e8:	e13ffd15 	stw	r4,-12(fp)
   526ec:	e17ffe15 	stw	r5,-8(fp)
   526f0:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   526f4:	e0bffe17 	ldw	r2,-8(fp)
   526f8:	1080028b 	ldhu	r2,10(r2)
   526fc:	10bfffcc 	andi	r2,r2,65535
   52700:	10000426 	beq	r2,zero,52714 <alt_avalon_i2c_master_config_speed_get+0x3c>
   52704:	e0bffe17 	ldw	r2,-8(fp)
   52708:	1080020b 	ldhu	r2,8(r2)
   5270c:	10bfffcc 	andi	r2,r2,65535
   52710:	1000021e 	bne	r2,zero,5271c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   52714:	00bfff44 	movi	r2,-3
   52718:	00000f06 	br	52758 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   5271c:	e0bffd17 	ldw	r2,-12(fp)
   52720:	11000c17 	ldw	r4,48(r2)
   52724:	e0bffe17 	ldw	r2,-8(fp)
   52728:	1080028b 	ldhu	r2,10(r2)
   5272c:	10ffffcc 	andi	r3,r2,65535
   52730:	e0bffe17 	ldw	r2,-8(fp)
   52734:	1080020b 	ldhu	r2,8(r2)
   52738:	10bfffcc 	andi	r2,r2,65535
   5273c:	1885883a 	add	r2,r3,r2
   52740:	100b883a 	mov	r5,r2
   52744:	00406f80 	call	406f8 <__udivsi3>
   52748:	1007883a 	mov	r3,r2
   5274c:	e0bfff17 	ldw	r2,-4(fp)
   52750:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   52754:	0005883a 	mov	r2,zero
}
   52758:	e037883a 	mov	sp,fp
   5275c:	dfc00117 	ldw	ra,4(sp)
   52760:	df000017 	ldw	fp,0(sp)
   52764:	dec00204 	addi	sp,sp,8
   52768:	f800283a 	ret

0005276c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   5276c:	defff904 	addi	sp,sp,-28
   52770:	dfc00615 	stw	ra,24(sp)
   52774:	df000515 	stw	fp,20(sp)
   52778:	df000504 	addi	fp,sp,20
   5277c:	e13ffd15 	stw	r4,-12(fp)
   52780:	e17ffe15 	stw	r5,-8(fp)
   52784:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   52788:	e0ffff17 	ldw	r3,-4(fp)
   5278c:	008001b4 	movhi	r2,6
   52790:	1086a004 	addi	r2,r2,6784
   52794:	10c00436 	bltu	r2,r3,527a8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   52798:	e0bfff17 	ldw	r2,-4(fp)
   5279c:	10000226 	beq	r2,zero,527a8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   527a0:	e0bfff17 	ldw	r2,-4(fp)
   527a4:	1000021e 	bne	r2,zero,527b0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   527a8:	00bfff04 	movi	r2,-4
   527ac:	00002906 	br	52854 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   527b0:	e0bffd17 	ldw	r2,-12(fp)
   527b4:	10c00c17 	ldw	r3,48(r2)
   527b8:	e0bfff17 	ldw	r2,-4(fp)
   527bc:	1085883a 	add	r2,r2,r2
   527c0:	100b883a 	mov	r5,r2
   527c4:	1809883a 	mov	r4,r3
   527c8:	00406f80 	call	406f8 <__udivsi3>
   527cc:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   527d0:	e0bffb17 	ldw	r2,-20(fp)
   527d4:	10800f04 	addi	r2,r2,60
   527d8:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   527dc:	e0bffb17 	ldw	r2,-20(fp)
   527e0:	10bff104 	addi	r2,r2,-60
   527e4:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   527e8:	e0ffff17 	ldw	r3,-4(fp)
   527ec:	008000b4 	movhi	r2,2
   527f0:	10a1a804 	addi	r2,r2,-31072
   527f4:	10c0042e 	bgeu	r2,r3,52808 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   527f8:	e0bffe17 	ldw	r2,-8(fp)
   527fc:	00c00044 	movi	r3,1
   52800:	10c00115 	stw	r3,4(r2)
   52804:	00000206 	br	52810 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   52808:	e0bffe17 	ldw	r2,-8(fp)
   5280c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   52810:	e0bffb17 	ldw	r2,-20(fp)
   52814:	1007883a 	mov	r3,r2
   52818:	e0bffe17 	ldw	r2,-8(fp)
   5281c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   52820:	e0bffc17 	ldw	r2,-16(fp)
   52824:	1007883a 	mov	r3,r2
   52828:	e0bffe17 	ldw	r2,-8(fp)
   5282c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   52830:	e0bffb17 	ldw	r2,-20(fp)
   52834:	1007883a 	mov	r3,r2
   52838:	e0bffb17 	ldw	r2,-20(fp)
   5283c:	1004d07a 	srli	r2,r2,1
   52840:	1885c83a 	sub	r2,r3,r2
   52844:	1007883a 	mov	r3,r2
   52848:	e0bffe17 	ldw	r2,-8(fp)
   5284c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   52850:	0005883a 	mov	r2,zero

}
   52854:	e037883a 	mov	sp,fp
   52858:	dfc00117 	ldw	ra,4(sp)
   5285c:	df000017 	ldw	fp,0(sp)
   52860:	dec00204 	addi	sp,sp,8
   52864:	f800283a 	ret

00052868 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52868:	defffe04 	addi	sp,sp,-8
   5286c:	df000115 	stw	fp,4(sp)
   52870:	df000104 	addi	fp,sp,4
   52874:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   52878:	e0bfff17 	ldw	r2,-4(fp)
   5287c:	10800317 	ldw	r2,12(r2)
   52880:	10800504 	addi	r2,r2,20
   52884:	10800037 	ldwio	r2,0(r2)
   52888:	1080004c 	andi	r2,r2,1
   5288c:	10000226 	beq	r2,zero,52898 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   52890:	00800044 	movi	r2,1
   52894:	00000106 	br	5289c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   52898:	0005883a 	mov	r2,zero
}
   5289c:	e037883a 	mov	sp,fp
   528a0:	df000017 	ldw	fp,0(sp)
   528a4:	dec00104 	addi	sp,sp,4
   528a8:	f800283a 	ret

000528ac <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   528ac:	defffb04 	addi	sp,sp,-20
   528b0:	df000415 	stw	fp,16(sp)
   528b4:	df000404 	addi	fp,sp,16
   528b8:	e13ffc15 	stw	r4,-16(fp)
   528bc:	e17ffd15 	stw	r5,-12(fp)
   528c0:	e1bffe15 	stw	r6,-8(fp)
   528c4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   528c8:	e0bfff17 	ldw	r2,-4(fp)
   528cc:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   528d0:	00001406 	br	52924 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   528d4:	e0bfff17 	ldw	r2,-4(fp)
   528d8:	10800017 	ldw	r2,0(r2)
   528dc:	e0fffd17 	ldw	r3,-12(fp)
   528e0:	1885883a 	add	r2,r3,r2
   528e4:	e0fffc17 	ldw	r3,-16(fp)
   528e8:	18c00317 	ldw	r3,12(r3)
   528ec:	18c00104 	addi	r3,r3,4
   528f0:	18c00037 	ldwio	r3,0(r3)
   528f4:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   528f8:	e0bfff17 	ldw	r2,-4(fp)
   528fc:	10800017 	ldw	r2,0(r2)
   52900:	10c00044 	addi	r3,r2,1
   52904:	e0bfff17 	ldw	r2,-4(fp)
   52908:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   5290c:	e0bfff17 	ldw	r2,-4(fp)
   52910:	10c00017 	ldw	r3,0(r2)
   52914:	e0bffe17 	ldw	r2,-8(fp)
   52918:	1880021e 	bne	r3,r2,52924 <alt_avalon_i2c_rx_read_available+0x78>
   5291c:	e0bffe17 	ldw	r2,-8(fp)
   52920:	1000061e 	bne	r2,zero,5293c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   52924:	e0bffc17 	ldw	r2,-16(fp)
   52928:	10800317 	ldw	r2,12(r2)
   5292c:	10800704 	addi	r2,r2,28
   52930:	10800037 	ldwio	r2,0(r2)
   52934:	103fe71e 	bne	r2,zero,528d4 <__alt_data_end+0xfffe08d4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   52938:	00000106 	br	52940 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   5293c:	0001883a 	nop
    }
}
   52940:	0001883a 	nop
   52944:	e037883a 	mov	sp,fp
   52948:	df000017 	ldw	fp,0(sp)
   5294c:	dec00104 	addi	sp,sp,4
   52950:	f800283a 	ret

00052954 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   52954:	defffa04 	addi	sp,sp,-24
   52958:	dfc00515 	stw	ra,20(sp)
   5295c:	df000415 	stw	fp,16(sp)
   52960:	df000404 	addi	fp,sp,16
   52964:	e13ffe15 	stw	r4,-8(fp)
   52968:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   5296c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   52970:	008000b4 	movhi	r2,2
   52974:	10a1a804 	addi	r2,r2,-31072
   52978:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   5297c:	00000d06 	br	529b4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   52980:	e0bffd17 	ldw	r2,-12(fp)
   52984:	108002a8 	cmpgeui	r2,r2,10
   52988:	1000021e 	bne	r2,zero,52994 <alt_avalon_i2c_rx_read+0x40>
   5298c:	0109c404 	movi	r4,10000
   52990:	005499c0 	call	5499c <alt_busy_sleep>
      if (--timeout == 0)
   52994:	e0bffd17 	ldw	r2,-12(fp)
   52998:	10bfffc4 	addi	r2,r2,-1
   5299c:	e0bffd15 	stw	r2,-12(fp)
   529a0:	e0bffd17 	ldw	r2,-12(fp)
   529a4:	1000031e 	bne	r2,zero,529b4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   529a8:	00bfff84 	movi	r2,-2
   529ac:	e0bffc15 	stw	r2,-16(fp)
        break;
   529b0:	00000506 	br	529c8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   529b4:	e0bffe17 	ldw	r2,-8(fp)
   529b8:	10800317 	ldw	r2,12(r2)
   529bc:	10800704 	addi	r2,r2,28
   529c0:	10800037 	ldwio	r2,0(r2)
   529c4:	103fee26 	beq	r2,zero,52980 <__alt_data_end+0xfffe0980>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   529c8:	e0bffe17 	ldw	r2,-8(fp)
   529cc:	10800317 	ldw	r2,12(r2)
   529d0:	10800104 	addi	r2,r2,4
   529d4:	10800037 	ldwio	r2,0(r2)
   529d8:	1007883a 	mov	r3,r2
   529dc:	e0bfff17 	ldw	r2,-4(fp)
   529e0:	10c00005 	stb	r3,0(r2)
        
    return status;
   529e4:	e0bffc17 	ldw	r2,-16(fp)
}
   529e8:	e037883a 	mov	sp,fp
   529ec:	dfc00117 	ldw	ra,4(sp)
   529f0:	df000017 	ldw	fp,0(sp)
   529f4:	dec00204 	addi	sp,sp,8
   529f8:	f800283a 	ret

000529fc <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   529fc:	defff804 	addi	sp,sp,-32
   52a00:	dfc00715 	stw	ra,28(sp)
   52a04:	df000615 	stw	fp,24(sp)
   52a08:	df000604 	addi	fp,sp,24
   52a0c:	e13ffc15 	stw	r4,-16(fp)
   52a10:	2809883a 	mov	r4,r5
   52a14:	3007883a 	mov	r3,r6
   52a18:	3805883a 	mov	r2,r7
   52a1c:	e13ffd05 	stb	r4,-12(fp)
   52a20:	e0fffe05 	stb	r3,-8(fp)
   52a24:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   52a28:	0089c404 	movi	r2,10000
   52a2c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52a30:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   52a34:	00000c06 	br	52a68 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   52a38:	e0bffa17 	ldw	r2,-24(fp)
   52a3c:	108002a8 	cmpgeui	r2,r2,10
   52a40:	1000021e 	bne	r2,zero,52a4c <alt_avalon_i2c_cmd_write+0x50>
   52a44:	0109c404 	movi	r4,10000
   52a48:	005499c0 	call	5499c <alt_busy_sleep>
      if (--timeout == 0)
   52a4c:	e0bffa17 	ldw	r2,-24(fp)
   52a50:	10bfffc4 	addi	r2,r2,-1
   52a54:	e0bffa15 	stw	r2,-24(fp)
   52a58:	e0bffa17 	ldw	r2,-24(fp)
   52a5c:	1000021e 	bne	r2,zero,52a68 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   52a60:	00bfff84 	movi	r2,-2
   52a64:	00001906 	br	52acc <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   52a68:	e0bffc17 	ldw	r2,-16(fp)
   52a6c:	10800317 	ldw	r2,12(r2)
   52a70:	10800404 	addi	r2,r2,16
   52a74:	10800037 	ldwio	r2,0(r2)
   52a78:	1080004c 	andi	r2,r2,1
   52a7c:	103fee26 	beq	r2,zero,52a38 <__alt_data_end+0xfffe0a38>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   52a80:	e0bffc17 	ldw	r2,-16(fp)
   52a84:	10800317 	ldw	r2,12(r2)
   52a88:	e13ffd03 	ldbu	r4,-12(fp)
   52a8c:	e0fffe03 	ldbu	r3,-8(fp)
   52a90:	1806927a 	slli	r3,r3,9
   52a94:	20c8b03a 	or	r4,r4,r3
   52a98:	e0ffff03 	ldbu	r3,-4(fp)
   52a9c:	1806923a 	slli	r3,r3,8
   52aa0:	20c6b03a 	or	r3,r4,r3
   52aa4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   52aa8:	e0bffb04 	addi	r2,fp,-20
   52aac:	100b883a 	mov	r5,r2
   52ab0:	e13ffc17 	ldw	r4,-16(fp)
   52ab4:	0052c3c0 	call	52c3c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   52ab8:	e0bffb04 	addi	r2,fp,-20
   52abc:	100b883a 	mov	r5,r2
   52ac0:	e13ffc17 	ldw	r4,-16(fp)
   52ac4:	0052c880 	call	52c88 <alt_avalon_i2c_check_arblost>
    
    return status;
   52ac8:	e0bffb17 	ldw	r2,-20(fp)
}
   52acc:	e037883a 	mov	sp,fp
   52ad0:	dfc00117 	ldw	ra,4(sp)
   52ad4:	df000017 	ldw	fp,0(sp)
   52ad8:	dec00204 	addi	sp,sp,8
   52adc:	f800283a 	ret

00052ae0 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   52ae0:	defffa04 	addi	sp,sp,-24
   52ae4:	dfc00515 	stw	ra,20(sp)
   52ae8:	df000415 	stw	fp,16(sp)
   52aec:	df000404 	addi	fp,sp,16
   52af0:	e13ffd15 	stw	r4,-12(fp)
   52af4:	e17ffe15 	stw	r5,-8(fp)
   52af8:	3005883a 	mov	r2,r6
   52afc:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   52b00:	e0bffd17 	ldw	r2,-12(fp)
   52b04:	10800d17 	ldw	r2,52(r2)
   52b08:	10800058 	cmpnei	r2,r2,1
   52b0c:	10001c1e 	bne	r2,zero,52b80 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   52b10:	e0bffd17 	ldw	r2,-12(fp)
   52b14:	10800917 	ldw	r2,36(r2)
   52b18:	109e0014 	ori	r2,r2,30720
   52b1c:	1004d1fa 	srli	r2,r2,7
   52b20:	1007883a 	mov	r3,r2
   52b24:	00bfff84 	movi	r2,-2
   52b28:	1884703a 	and	r2,r3,r2
   52b2c:	1007883a 	mov	r3,r2
   52b30:	e0bffe17 	ldw	r2,-8(fp)
   52b34:	1884b03a 	or	r2,r3,r2
   52b38:	10803fcc 	andi	r2,r2,255
   52b3c:	e0ffff03 	ldbu	r3,-4(fp)
   52b40:	000f883a 	mov	r7,zero
   52b44:	180d883a 	mov	r6,r3
   52b48:	100b883a 	mov	r5,r2
   52b4c:	e13ffd17 	ldw	r4,-12(fp)
   52b50:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   52b54:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   52b58:	e0bffd17 	ldw	r2,-12(fp)
   52b5c:	10800917 	ldw	r2,36(r2)
   52b60:	10803fcc 	andi	r2,r2,255
   52b64:	000f883a 	mov	r7,zero
   52b68:	000d883a 	mov	r6,zero
   52b6c:	100b883a 	mov	r5,r2
   52b70:	e13ffd17 	ldw	r4,-12(fp)
   52b74:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   52b78:	e0bffc15 	stw	r2,-16(fp)
   52b7c:	00000e06 	br	52bb8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   52b80:	e0bffd17 	ldw	r2,-12(fp)
   52b84:	10800917 	ldw	r2,36(r2)
   52b88:	1085883a 	add	r2,r2,r2
   52b8c:	1007883a 	mov	r3,r2
   52b90:	e0bffe17 	ldw	r2,-8(fp)
   52b94:	1884b03a 	or	r2,r3,r2
   52b98:	10803fcc 	andi	r2,r2,255
   52b9c:	e0ffff03 	ldbu	r3,-4(fp)
   52ba0:	000f883a 	mov	r7,zero
   52ba4:	180d883a 	mov	r6,r3
   52ba8:	100b883a 	mov	r5,r2
   52bac:	e13ffd17 	ldw	r4,-12(fp)
   52bb0:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   52bb4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   52bb8:	e0bffc17 	ldw	r2,-16(fp)
}
   52bbc:	e037883a 	mov	sp,fp
   52bc0:	dfc00117 	ldw	ra,4(sp)
   52bc4:	df000017 	ldw	fp,0(sp)
   52bc8:	dec00204 	addi	sp,sp,8
   52bcc:	f800283a 	ret

00052bd0 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   52bd0:	defffd04 	addi	sp,sp,-12
   52bd4:	df000215 	stw	fp,8(sp)
   52bd8:	df000204 	addi	fp,sp,8
   52bdc:	e13ffe15 	stw	r4,-8(fp)
   52be0:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   52be4:	e0bffe17 	ldw	r2,-8(fp)
   52be8:	10c00917 	ldw	r3,36(r2)
   52bec:	e0bfff17 	ldw	r2,-4(fp)
   52bf0:	10c00015 	stw	r3,0(r2)
}
   52bf4:	0001883a 	nop
   52bf8:	e037883a 	mov	sp,fp
   52bfc:	df000017 	ldw	fp,0(sp)
   52c00:	dec00104 	addi	sp,sp,4
   52c04:	f800283a 	ret

00052c08 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   52c08:	defffd04 	addi	sp,sp,-12
   52c0c:	df000215 	stw	fp,8(sp)
   52c10:	df000204 	addi	fp,sp,8
   52c14:	e13ffe15 	stw	r4,-8(fp)
   52c18:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   52c1c:	e0bffe17 	ldw	r2,-8(fp)
   52c20:	e0ffff17 	ldw	r3,-4(fp)
   52c24:	10c00915 	stw	r3,36(r2)
}
   52c28:	0001883a 	nop
   52c2c:	e037883a 	mov	sp,fp
   52c30:	df000017 	ldw	fp,0(sp)
   52c34:	dec00104 	addi	sp,sp,4
   52c38:	f800283a 	ret

00052c3c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   52c3c:	defffd04 	addi	sp,sp,-12
   52c40:	df000215 	stw	fp,8(sp)
   52c44:	df000204 	addi	fp,sp,8
   52c48:	e13ffe15 	stw	r4,-8(fp)
   52c4c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   52c50:	e0bffe17 	ldw	r2,-8(fp)
   52c54:	10800317 	ldw	r2,12(r2)
   52c58:	10800404 	addi	r2,r2,16
   52c5c:	10800037 	ldwio	r2,0(r2)
   52c60:	1080010c 	andi	r2,r2,4
   52c64:	10000326 	beq	r2,zero,52c74 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   52c68:	e0bfff17 	ldw	r2,-4(fp)
   52c6c:	00fffec4 	movi	r3,-5
   52c70:	10c00015 	stw	r3,0(r2)
    }
}
   52c74:	0001883a 	nop
   52c78:	e037883a 	mov	sp,fp
   52c7c:	df000017 	ldw	fp,0(sp)
   52c80:	dec00104 	addi	sp,sp,4
   52c84:	f800283a 	ret

00052c88 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   52c88:	defffd04 	addi	sp,sp,-12
   52c8c:	df000215 	stw	fp,8(sp)
   52c90:	df000204 	addi	fp,sp,8
   52c94:	e13ffe15 	stw	r4,-8(fp)
   52c98:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   52c9c:	e0bffe17 	ldw	r2,-8(fp)
   52ca0:	10800317 	ldw	r2,12(r2)
   52ca4:	10800404 	addi	r2,r2,16
   52ca8:	10800037 	ldwio	r2,0(r2)
   52cac:	1080020c 	andi	r2,r2,8
   52cb0:	10000326 	beq	r2,zero,52cc0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   52cb4:	e0bfff17 	ldw	r2,-4(fp)
   52cb8:	00fffe84 	movi	r3,-6
   52cbc:	10c00015 	stw	r3,0(r2)
    }
}
   52cc0:	0001883a 	nop
   52cc4:	e037883a 	mov	sp,fp
   52cc8:	df000017 	ldw	fp,0(sp)
   52ccc:	dec00104 	addi	sp,sp,4
   52cd0:	f800283a 	ret

00052cd4 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52cd4:	defff804 	addi	sp,sp,-32
   52cd8:	dfc00715 	stw	ra,28(sp)
   52cdc:	df000615 	stw	fp,24(sp)
   52ce0:	df000604 	addi	fp,sp,24
   52ce4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52ce8:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   52cec:	e0bfff17 	ldw	r2,-4(fp)
   52cf0:	10800717 	ldw	r2,28(r2)
   52cf4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   52cf8:	e0bffb17 	ldw	r2,-20(fp)
   52cfc:	10800117 	ldw	r2,4(r2)
   52d00:	10800044 	addi	r2,r2,1
   52d04:	0149c404 	movi	r5,10000
   52d08:	1009883a 	mov	r4,r2
   52d0c:	0040eec0 	call	40eec <__mulsi3>
   52d10:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   52d14:	e0bffd04 	addi	r2,fp,-12
   52d18:	100b883a 	mov	r5,r2
   52d1c:	e13fff17 	ldw	r4,-4(fp)
   52d20:	0053b6c0 	call	53b6c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   52d24:	e0bffd17 	ldw	r2,-12(fp)
   52d28:	100b883a 	mov	r5,r2
   52d2c:	e13fff17 	ldw	r4,-4(fp)
   52d30:	0053aa00 	call	53aa0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   52d34:	e0bffc04 	addi	r2,fp,-16
   52d38:	100b883a 	mov	r5,r2
   52d3c:	e13fff17 	ldw	r4,-4(fp)
   52d40:	0052c3c0 	call	52c3c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   52d44:	e0bffc17 	ldw	r2,-16(fp)
   52d48:	10002226 	beq	r2,zero,52dd4 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   52d4c:	e0bffb17 	ldw	r2,-20(fp)
   52d50:	10800217 	ldw	r2,8(r2)
   52d54:	10001d26 	beq	r2,zero,52dcc <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   52d58:	00000d06 	br	52d90 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   52d5c:	e0bffa17 	ldw	r2,-24(fp)
   52d60:	108002a8 	cmpgeui	r2,r2,10
   52d64:	1000021e 	bne	r2,zero,52d70 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   52d68:	0109c404 	movi	r4,10000
   52d6c:	005499c0 	call	5499c <alt_busy_sleep>
              if (--timeout == 0)
   52d70:	e0bffa17 	ldw	r2,-24(fp)
   52d74:	10bfffc4 	addi	r2,r2,-1
   52d78:	e0bffa15 	stw	r2,-24(fp)
   52d7c:	e0bffa17 	ldw	r2,-24(fp)
   52d80:	1000031e 	bne	r2,zero,52d90 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   52d84:	00bfff84 	movi	r2,-2
   52d88:	e0bffc15 	stw	r2,-16(fp)
                 break;
   52d8c:	00000306 	br	52d9c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   52d90:	e13fff17 	ldw	r4,-4(fp)
   52d94:	00528680 	call	52868 <alt_avalon_i2c_is_busy>
   52d98:	103ff01e 	bne	r2,zero,52d5c <__alt_data_end+0xfffe0d5c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   52d9c:	e0bffb17 	ldw	r2,-20(fp)
   52da0:	10800017 	ldw	r2,0(r2)
   52da4:	e0fffe04 	addi	r3,fp,-8
   52da8:	180f883a 	mov	r7,r3
   52dac:	000d883a 	mov	r6,zero
   52db0:	100b883a 	mov	r5,r2
   52db4:	e13fff17 	ldw	r4,-4(fp)
   52db8:	00528ac0 	call	528ac <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   52dbc:	e13fff17 	ldw	r4,-4(fp)
   52dc0:	00525100 	call	52510 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   52dc4:	e0bffb17 	ldw	r2,-20(fp)
   52dc8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   52dcc:	e0bffc17 	ldw	r2,-16(fp)
   52dd0:	00000a06 	br	52dfc <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   52dd4:	e0bffb17 	ldw	r2,-20(fp)
   52dd8:	10800217 	ldw	r2,8(r2)
   52ddc:	10000626 	beq	r2,zero,52df8 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   52de0:	e0bffd17 	ldw	r2,-12(fp)
   52de4:	100b883a 	mov	r5,r2
   52de8:	e13fff17 	ldw	r4,-4(fp)
   52dec:	0053b080 	call	53b08 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   52df0:	00bffe44 	movi	r2,-7
   52df4:	00000106 	br	52dfc <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   52df8:	0005883a 	mov	r2,zero
}
   52dfc:	e037883a 	mov	sp,fp
   52e00:	dfc00117 	ldw	ra,4(sp)
   52e04:	df000017 	ldw	fp,0(sp)
   52e08:	dec00204 	addi	sp,sp,8
   52e0c:	f800283a 	ret

00052e10 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   52e10:	defff704 	addi	sp,sp,-36
   52e14:	dfc00815 	stw	ra,32(sp)
   52e18:	df000715 	stw	fp,28(sp)
   52e1c:	df000704 	addi	fp,sp,28
   52e20:	e13ffc15 	stw	r4,-16(fp)
   52e24:	e17ffd15 	stw	r5,-12(fp)
   52e28:	e1bffe15 	stw	r6,-8(fp)
   52e2c:	3805883a 	mov	r2,r7
   52e30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   52e34:	0089c404 	movi	r2,10000
   52e38:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   52e3c:	00002206 	br	52ec8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   52e40:	e0bffb17 	ldw	r2,-20(fp)
   52e44:	108002a8 	cmpgeui	r2,r2,10
   52e48:	1000021e 	bne	r2,zero,52e54 <alt_avalon_i2c_master_tx+0x44>
   52e4c:	0109c404 	movi	r4,10000
   52e50:	005499c0 	call	5499c <alt_busy_sleep>
      if (use_interrupts)
   52e54:	e0bfff03 	ldbu	r2,-4(fp)
   52e58:	10000926 	beq	r2,zero,52e80 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   52e5c:	00800044 	movi	r2,1
   52e60:	d8800015 	stw	r2,0(sp)
   52e64:	000f883a 	mov	r7,zero
   52e68:	e1bffe17 	ldw	r6,-8(fp)
   52e6c:	e17ffd17 	ldw	r5,-12(fp)
   52e70:	e13ffc17 	ldw	r4,-16(fp)
   52e74:	00533bc0 	call	533bc <alt_avalon_i2c_master_transmit_using_interrupts>
   52e78:	e0bffa15 	stw	r2,-24(fp)
   52e7c:	00000806 	br	52ea0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   52e80:	00800044 	movi	r2,1
   52e84:	d8800015 	stw	r2,0(sp)
   52e88:	000f883a 	mov	r7,zero
   52e8c:	e1bffe17 	ldw	r6,-8(fp)
   52e90:	e17ffd17 	ldw	r5,-12(fp)
   52e94:	e13ffc17 	ldw	r4,-16(fp)
   52e98:	00531fc0 	call	531fc <alt_avalon_i2c_master_transmit>
   52e9c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52ea0:	e0bffa17 	ldw	r2,-24(fp)
   52ea4:	10bffea0 	cmpeqi	r2,r2,-6
   52ea8:	1000061e 	bne	r2,zero,52ec4 <alt_avalon_i2c_master_tx+0xb4>
   52eac:	e0bffa17 	ldw	r2,-24(fp)
   52eb0:	10bffee0 	cmpeqi	r2,r2,-5
   52eb4:	1000031e 	bne	r2,zero,52ec4 <alt_avalon_i2c_master_tx+0xb4>
   52eb8:	e0bffa17 	ldw	r2,-24(fp)
   52ebc:	10bffe58 	cmpnei	r2,r2,-7
   52ec0:	1000061e 	bne	r2,zero,52edc <alt_avalon_i2c_master_tx+0xcc>
   52ec4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   52ec8:	e0bffb17 	ldw	r2,-20(fp)
   52ecc:	10ffffc4 	addi	r3,r2,-1
   52ed0:	e0fffb15 	stw	r3,-20(fp)
   52ed4:	103fda1e 	bne	r2,zero,52e40 <__alt_data_end+0xfffe0e40>
   52ed8:	00000106 	br	52ee0 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   52edc:	0001883a 	nop
    }

    return status;
   52ee0:	e0bffa17 	ldw	r2,-24(fp)
}        
   52ee4:	e037883a 	mov	sp,fp
   52ee8:	dfc00117 	ldw	ra,4(sp)
   52eec:	df000017 	ldw	fp,0(sp)
   52ef0:	dec00204 	addi	sp,sp,8
   52ef4:	f800283a 	ret

00052ef8 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   52ef8:	defff704 	addi	sp,sp,-36
   52efc:	dfc00815 	stw	ra,32(sp)
   52f00:	df000715 	stw	fp,28(sp)
   52f04:	df000704 	addi	fp,sp,28
   52f08:	e13ffc15 	stw	r4,-16(fp)
   52f0c:	e17ffd15 	stw	r5,-12(fp)
   52f10:	e1bffe15 	stw	r6,-8(fp)
   52f14:	3805883a 	mov	r2,r7
   52f18:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   52f1c:	0089c404 	movi	r2,10000
   52f20:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   52f24:	e0bfff03 	ldbu	r2,-4(fp)
   52f28:	10003426 	beq	r2,zero,52ffc <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   52f2c:	00001706 	br	52f8c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   52f30:	e0bffb17 	ldw	r2,-20(fp)
   52f34:	108002a8 	cmpgeui	r2,r2,10
   52f38:	1000021e 	bne	r2,zero,52f44 <alt_avalon_i2c_master_rx+0x4c>
   52f3c:	0109c404 	movi	r4,10000
   52f40:	005499c0 	call	5499c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   52f44:	00800044 	movi	r2,1
   52f48:	d8800015 	stw	r2,0(sp)
   52f4c:	000f883a 	mov	r7,zero
   52f50:	e1bffe17 	ldw	r6,-8(fp)
   52f54:	e17ffd17 	ldw	r5,-12(fp)
   52f58:	e13ffc17 	ldw	r4,-16(fp)
   52f5c:	00537d80 	call	537d8 <alt_avalon_i2c_master_receive_using_interrupts>
   52f60:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52f64:	e0bffa17 	ldw	r2,-24(fp)
   52f68:	10bffea0 	cmpeqi	r2,r2,-6
   52f6c:	1000061e 	bne	r2,zero,52f88 <alt_avalon_i2c_master_rx+0x90>
   52f70:	e0bffa17 	ldw	r2,-24(fp)
   52f74:	10bffee0 	cmpeqi	r2,r2,-5
   52f78:	1000031e 	bne	r2,zero,52f88 <alt_avalon_i2c_master_rx+0x90>
   52f7c:	e0bffa17 	ldw	r2,-24(fp)
   52f80:	10bffe58 	cmpnei	r2,r2,-7
   52f84:	1000221e 	bne	r2,zero,53010 <alt_avalon_i2c_master_rx+0x118>
   52f88:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   52f8c:	e0bffb17 	ldw	r2,-20(fp)
   52f90:	10ffffc4 	addi	r3,r2,-1
   52f94:	e0fffb15 	stw	r3,-20(fp)
   52f98:	103fe51e 	bne	r2,zero,52f30 <__alt_data_end+0xfffe0f30>
   52f9c:	00001f06 	br	5301c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   52fa0:	e0bffb17 	ldw	r2,-20(fp)
   52fa4:	108002a8 	cmpgeui	r2,r2,10
   52fa8:	1000021e 	bne	r2,zero,52fb4 <alt_avalon_i2c_master_rx+0xbc>
   52fac:	0109c404 	movi	r4,10000
   52fb0:	005499c0 	call	5499c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   52fb4:	00800044 	movi	r2,1
   52fb8:	d8800015 	stw	r2,0(sp)
   52fbc:	000f883a 	mov	r7,zero
   52fc0:	e1bffe17 	ldw	r6,-8(fp)
   52fc4:	e17ffd17 	ldw	r5,-12(fp)
   52fc8:	e13ffc17 	ldw	r4,-16(fp)
   52fcc:	00535c80 	call	535c8 <alt_avalon_i2c_master_receive>
   52fd0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52fd4:	e0bffa17 	ldw	r2,-24(fp)
   52fd8:	10bffea0 	cmpeqi	r2,r2,-6
   52fdc:	1000061e 	bne	r2,zero,52ff8 <alt_avalon_i2c_master_rx+0x100>
   52fe0:	e0bffa17 	ldw	r2,-24(fp)
   52fe4:	10bffee0 	cmpeqi	r2,r2,-5
   52fe8:	1000031e 	bne	r2,zero,52ff8 <alt_avalon_i2c_master_rx+0x100>
   52fec:	e0bffa17 	ldw	r2,-24(fp)
   52ff0:	10bffe58 	cmpnei	r2,r2,-7
   52ff4:	1000081e 	bne	r2,zero,53018 <alt_avalon_i2c_master_rx+0x120>
   52ff8:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   52ffc:	e0bffb17 	ldw	r2,-20(fp)
   53000:	10ffffc4 	addi	r3,r2,-1
   53004:	e0fffb15 	stw	r3,-20(fp)
   53008:	103fe51e 	bne	r2,zero,52fa0 <__alt_data_end+0xfffe0fa0>
   5300c:	00000306 	br	5301c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   53010:	0001883a 	nop
   53014:	00000106 	br	5301c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   53018:	0001883a 	nop
      }
    }
    
    return status;
   5301c:	e0bffa17 	ldw	r2,-24(fp)
}        
   53020:	e037883a 	mov	sp,fp
   53024:	dfc00117 	ldw	ra,4(sp)
   53028:	df000017 	ldw	fp,0(sp)
   5302c:	dec00204 	addi	sp,sp,8
   53030:	f800283a 	ret

00053034 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   53034:	defff604 	addi	sp,sp,-40
   53038:	dfc00915 	stw	ra,36(sp)
   5303c:	df000815 	stw	fp,32(sp)
   53040:	df000804 	addi	fp,sp,32
   53044:	e13ffb15 	stw	r4,-20(fp)
   53048:	e17ffc15 	stw	r5,-16(fp)
   5304c:	e1bffd15 	stw	r6,-12(fp)
   53050:	e1fffe15 	stw	r7,-8(fp)
   53054:	e0800317 	ldw	r2,12(fp)
   53058:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   5305c:	0089c404 	movi	r2,10000
   53060:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   53064:	e0bfff03 	ldbu	r2,-4(fp)
   53068:	10005626 	beq	r2,zero,531c4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   5306c:	00002806 	br	53110 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   53070:	e0bffa17 	ldw	r2,-24(fp)
   53074:	108002a8 	cmpgeui	r2,r2,10
   53078:	1000021e 	bne	r2,zero,53084 <alt_avalon_i2c_master_tx_rx+0x50>
   5307c:	0109c404 	movi	r4,10000
   53080:	005499c0 	call	5499c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   53084:	d8000015 	stw	zero,0(sp)
   53088:	000f883a 	mov	r7,zero
   5308c:	e1bffd17 	ldw	r6,-12(fp)
   53090:	e17ffc17 	ldw	r5,-16(fp)
   53094:	e13ffb17 	ldw	r4,-20(fp)
   53098:	00533bc0 	call	533bc <alt_avalon_i2c_master_transmit_using_interrupts>
   5309c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   530a0:	e0bff917 	ldw	r2,-28(fp)
   530a4:	10bffea0 	cmpeqi	r2,r2,-6
   530a8:	1000191e 	bne	r2,zero,53110 <alt_avalon_i2c_master_tx_rx+0xdc>
   530ac:	e0bff917 	ldw	r2,-28(fp)
   530b0:	10bffee0 	cmpeqi	r2,r2,-5
   530b4:	1000161e 	bne	r2,zero,53110 <alt_avalon_i2c_master_tx_rx+0xdc>
   530b8:	e0bff917 	ldw	r2,-28(fp)
   530bc:	10bffe58 	cmpnei	r2,r2,-7
   530c0:	1000011e 	bne	r2,zero,530c8 <alt_avalon_i2c_master_tx_rx+0x94>
   530c4:	00001206 	br	53110 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   530c8:	00800044 	movi	r2,1
   530cc:	d8800015 	stw	r2,0(sp)
   530d0:	01c00044 	movi	r7,1
   530d4:	e1800217 	ldw	r6,8(fp)
   530d8:	e17ffe17 	ldw	r5,-8(fp)
   530dc:	e13ffb17 	ldw	r4,-20(fp)
   530e0:	00537d80 	call	537d8 <alt_avalon_i2c_master_receive_using_interrupts>
   530e4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   530e8:	e0bff917 	ldw	r2,-28(fp)
   530ec:	10bffea0 	cmpeqi	r2,r2,-6
   530f0:	1000061e 	bne	r2,zero,5310c <alt_avalon_i2c_master_tx_rx+0xd8>
   530f4:	e0bff917 	ldw	r2,-28(fp)
   530f8:	10bffee0 	cmpeqi	r2,r2,-5
   530fc:	1000031e 	bne	r2,zero,5310c <alt_avalon_i2c_master_tx_rx+0xd8>
   53100:	e0bff917 	ldw	r2,-28(fp)
   53104:	10bffe58 	cmpnei	r2,r2,-7
   53108:	1000331e 	bne	r2,zero,531d8 <alt_avalon_i2c_master_tx_rx+0x1a4>
   5310c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   53110:	e0bffa17 	ldw	r2,-24(fp)
   53114:	10ffffc4 	addi	r3,r2,-1
   53118:	e0fffa15 	stw	r3,-24(fp)
   5311c:	103fd41e 	bne	r2,zero,53070 <__alt_data_end+0xfffe1070>
   53120:	00003006 	br	531e4 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   53124:	e0bffa17 	ldw	r2,-24(fp)
   53128:	108002a8 	cmpgeui	r2,r2,10
   5312c:	1000021e 	bne	r2,zero,53138 <alt_avalon_i2c_master_tx_rx+0x104>
   53130:	0109c404 	movi	r4,10000
   53134:	005499c0 	call	5499c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   53138:	d8000015 	stw	zero,0(sp)
   5313c:	000f883a 	mov	r7,zero
   53140:	e1bffd17 	ldw	r6,-12(fp)
   53144:	e17ffc17 	ldw	r5,-16(fp)
   53148:	e13ffb17 	ldw	r4,-20(fp)
   5314c:	00531fc0 	call	531fc <alt_avalon_i2c_master_transmit>
   53150:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53154:	e0bff917 	ldw	r2,-28(fp)
   53158:	10bffea0 	cmpeqi	r2,r2,-6
   5315c:	1000191e 	bne	r2,zero,531c4 <alt_avalon_i2c_master_tx_rx+0x190>
   53160:	e0bff917 	ldw	r2,-28(fp)
   53164:	10bffee0 	cmpeqi	r2,r2,-5
   53168:	1000161e 	bne	r2,zero,531c4 <alt_avalon_i2c_master_tx_rx+0x190>
   5316c:	e0bff917 	ldw	r2,-28(fp)
   53170:	10bffe58 	cmpnei	r2,r2,-7
   53174:	1000011e 	bne	r2,zero,5317c <alt_avalon_i2c_master_tx_rx+0x148>
   53178:	00001206 	br	531c4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   5317c:	00800044 	movi	r2,1
   53180:	d8800015 	stw	r2,0(sp)
   53184:	01c00044 	movi	r7,1
   53188:	e1800217 	ldw	r6,8(fp)
   5318c:	e17ffe17 	ldw	r5,-8(fp)
   53190:	e13ffb17 	ldw	r4,-20(fp)
   53194:	00535c80 	call	535c8 <alt_avalon_i2c_master_receive>
   53198:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   5319c:	e0bff917 	ldw	r2,-28(fp)
   531a0:	10bffea0 	cmpeqi	r2,r2,-6
   531a4:	1000061e 	bne	r2,zero,531c0 <alt_avalon_i2c_master_tx_rx+0x18c>
   531a8:	e0bff917 	ldw	r2,-28(fp)
   531ac:	10bffee0 	cmpeqi	r2,r2,-5
   531b0:	1000031e 	bne	r2,zero,531c0 <alt_avalon_i2c_master_tx_rx+0x18c>
   531b4:	e0bff917 	ldw	r2,-28(fp)
   531b8:	10bffe58 	cmpnei	r2,r2,-7
   531bc:	1000081e 	bne	r2,zero,531e0 <alt_avalon_i2c_master_tx_rx+0x1ac>
   531c0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   531c4:	e0bffa17 	ldw	r2,-24(fp)
   531c8:	10ffffc4 	addi	r3,r2,-1
   531cc:	e0fffa15 	stw	r3,-24(fp)
   531d0:	103fd41e 	bne	r2,zero,53124 <__alt_data_end+0xfffe1124>
   531d4:	00000306 	br	531e4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   531d8:	0001883a 	nop
   531dc:	00000106 	br	531e4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   531e0:	0001883a 	nop
      }
    }
    
    return status;
   531e4:	e0bff917 	ldw	r2,-28(fp)
}                                       
   531e8:	e037883a 	mov	sp,fp
   531ec:	dfc00117 	ldw	ra,4(sp)
   531f0:	df000017 	ldw	fp,0(sp)
   531f4:	dec00204 	addi	sp,sp,8
   531f8:	f800283a 	ret

000531fc <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   531fc:	defff704 	addi	sp,sp,-36
   53200:	dfc00815 	stw	ra,32(sp)
   53204:	df000715 	stw	fp,28(sp)
   53208:	df000704 	addi	fp,sp,28
   5320c:	e13ffb15 	stw	r4,-20(fp)
   53210:	e17ffc15 	stw	r5,-16(fp)
   53214:	e1bffd15 	stw	r6,-12(fp)
   53218:	3807883a 	mov	r3,r7
   5321c:	e0800217 	ldw	r2,8(fp)
   53220:	e0fffe05 	stb	r3,-8(fp)
   53224:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53228:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   5322c:	0149c404 	movi	r5,10000
   53230:	e13ffd17 	ldw	r4,-12(fp)
   53234:	0040eec0 	call	40eec <__mulsi3>
   53238:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   5323c:	e0bffd17 	ldw	r2,-12(fp)
   53240:	1000021e 	bne	r2,zero,5324c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53244:	0005883a 	mov	r2,zero
   53248:	00005706 	br	533a8 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   5324c:	e0bffe03 	ldbu	r2,-8(fp)
   53250:	10000a1e 	bne	r2,zero,5327c <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53254:	e13ffb17 	ldw	r4,-20(fp)
   53258:	00524780 	call	52478 <alt_avalon_i2c_enable>
   5325c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53260:	e0bffa17 	ldw	r2,-24(fp)
   53264:	10000226 	beq	r2,zero,53270 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   53268:	e0bffa17 	ldw	r2,-24(fp)
   5326c:	00004e06 	br	533a8 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53270:	01400704 	movi	r5,28
   53274:	e13ffb17 	ldw	r4,-20(fp)
   53278:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   5327c:	e0bffe03 	ldbu	r2,-8(fp)
   53280:	100d883a 	mov	r6,r2
   53284:	000b883a 	mov	r5,zero
   53288:	e13ffb17 	ldw	r4,-20(fp)
   5328c:	0052ae00 	call	52ae0 <alt_avalon_i2c_send_address>
   53290:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   53294:	e0bffa17 	ldw	r2,-24(fp)
   53298:	1000271e 	bne	r2,zero,53338 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   5329c:	00000f06 	br	532dc <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   532a0:	e0bffc17 	ldw	r2,-16(fp)
   532a4:	10800003 	ldbu	r2,0(r2)
   532a8:	10803fcc 	andi	r2,r2,255
   532ac:	000f883a 	mov	r7,zero
   532b0:	000d883a 	mov	r6,zero
   532b4:	100b883a 	mov	r5,r2
   532b8:	e13ffb17 	ldw	r4,-20(fp)
   532bc:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   532c0:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   532c4:	e0bffc17 	ldw	r2,-16(fp)
   532c8:	10800044 	addi	r2,r2,1
   532cc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   532d0:	e0bffd17 	ldw	r2,-12(fp)
   532d4:	10bfffc4 	addi	r2,r2,-1
   532d8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   532dc:	e0bffd17 	ldw	r2,-12(fp)
   532e0:	108000b0 	cmpltui	r2,r2,2
   532e4:	1000021e 	bne	r2,zero,532f0 <alt_avalon_i2c_master_transmit+0xf4>
   532e8:	e0bffa17 	ldw	r2,-24(fp)
   532ec:	103fec26 	beq	r2,zero,532a0 <__alt_data_end+0xfffe12a0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   532f0:	e0bffa17 	ldw	r2,-24(fp)
   532f4:	1000101e 	bne	r2,zero,53338 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   532f8:	e0bffc17 	ldw	r2,-16(fp)
   532fc:	10800003 	ldbu	r2,0(r2)
   53300:	10803fcc 	andi	r2,r2,255
   53304:	e0ffff03 	ldbu	r3,-4(fp)
   53308:	180f883a 	mov	r7,r3
   5330c:	000d883a 	mov	r6,zero
   53310:	100b883a 	mov	r5,r2
   53314:	e13ffb17 	ldw	r4,-20(fp)
   53318:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   5331c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   53320:	e0bffc17 	ldw	r2,-16(fp)
   53324:	10800044 	addi	r2,r2,1
   53328:	e0bffc15 	stw	r2,-16(fp)
            --size;
   5332c:	e0bffd17 	ldw	r2,-12(fp)
   53330:	10bfffc4 	addi	r2,r2,-1
   53334:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   53338:	e0bfff03 	ldbu	r2,-4(fp)
   5333c:	1000101e 	bne	r2,zero,53380 <alt_avalon_i2c_master_transmit+0x184>
   53340:	e0bffa17 	ldw	r2,-24(fp)
   53344:	10001726 	beq	r2,zero,533a4 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53348:	00000d06 	br	53380 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   5334c:	e0bff917 	ldw	r2,-28(fp)
   53350:	108002a8 	cmpgeui	r2,r2,10
   53354:	1000021e 	bne	r2,zero,53360 <alt_avalon_i2c_master_transmit+0x164>
   53358:	0109c404 	movi	r4,10000
   5335c:	005499c0 	call	5499c <alt_busy_sleep>
            if (--timeout == 0)
   53360:	e0bff917 	ldw	r2,-28(fp)
   53364:	10bfffc4 	addi	r2,r2,-1
   53368:	e0bff915 	stw	r2,-28(fp)
   5336c:	e0bff917 	ldw	r2,-28(fp)
   53370:	1000031e 	bne	r2,zero,53380 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53374:	00bfff84 	movi	r2,-2
   53378:	e0bffa15 	stw	r2,-24(fp)
               break;
   5337c:	00000306 	br	5338c <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53380:	e13ffb17 	ldw	r4,-20(fp)
   53384:	00528680 	call	52868 <alt_avalon_i2c_is_busy>
   53388:	103ff01e 	bne	r2,zero,5334c <__alt_data_end+0xfffe134c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   5338c:	e0bffa04 	addi	r2,fp,-24
   53390:	100b883a 	mov	r5,r2
   53394:	e13ffb17 	ldw	r4,-20(fp)
   53398:	0052c3c0 	call	52c3c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   5339c:	e13ffb17 	ldw	r4,-20(fp)
   533a0:	00525100 	call	52510 <alt_avalon_i2c_disable>
    }


    return status;
   533a4:	e0bffa17 	ldw	r2,-24(fp)
}
   533a8:	e037883a 	mov	sp,fp
   533ac:	dfc00117 	ldw	ra,4(sp)
   533b0:	df000017 	ldw	fp,0(sp)
   533b4:	dec00204 	addi	sp,sp,8
   533b8:	f800283a 	ret

000533bc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   533bc:	defff604 	addi	sp,sp,-40
   533c0:	dfc00915 	stw	ra,36(sp)
   533c4:	df000815 	stw	fp,32(sp)
   533c8:	df000804 	addi	fp,sp,32
   533cc:	e13ffb15 	stw	r4,-20(fp)
   533d0:	e17ffc15 	stw	r5,-16(fp)
   533d4:	e1bffd15 	stw	r6,-12(fp)
   533d8:	3807883a 	mov	r3,r7
   533dc:	e0800217 	ldw	r2,8(fp)
   533e0:	e0fffe05 	stb	r3,-8(fp)
   533e4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   533e8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   533ec:	0149c404 	movi	r5,10000
   533f0:	e13ffd17 	ldw	r4,-12(fp)
   533f4:	0040eec0 	call	40eec <__mulsi3>
   533f8:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   533fc:	e0bffb17 	ldw	r2,-20(fp)
   53400:	10800717 	ldw	r2,28(r2)
   53404:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   53408:	e0bffd17 	ldw	r2,-12(fp)
   5340c:	1000021e 	bne	r2,zero,53418 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53410:	0005883a 	mov	r2,zero
   53414:	00006706 	br	535b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   53418:	e0bffb17 	ldw	r2,-20(fp)
   5341c:	10c00617 	ldw	r3,24(r2)
   53420:	00800174 	movhi	r2,5
   53424:	10883f04 	addi	r2,r2,8444
   53428:	18800226 	beq	r3,r2,53434 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   5342c:	00bfff44 	movi	r2,-3
   53430:	00006006 	br	535b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53434:	e0bffe03 	ldbu	r2,-8(fp)
   53438:	10000a1e 	bne	r2,zero,53464 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   5343c:	e13ffb17 	ldw	r4,-20(fp)
   53440:	00524780 	call	52478 <alt_avalon_i2c_enable>
   53444:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53448:	e0bff817 	ldw	r2,-32(fp)
   5344c:	10000226 	beq	r2,zero,53458 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   53450:	e0bff817 	ldw	r2,-32(fp)
   53454:	00005706 	br	535b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53458:	01400704 	movi	r5,28
   5345c:	e13ffb17 	ldw	r4,-20(fp)
   53460:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   53464:	e0bffe03 	ldbu	r2,-8(fp)
   53468:	100d883a 	mov	r6,r2
   5346c:	000b883a 	mov	r5,zero
   53470:	e13ffb17 	ldw	r4,-20(fp)
   53474:	0052ae00 	call	52ae0 <alt_avalon_i2c_send_address>
   53478:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   5347c:	e0bff817 	ldw	r2,-32(fp)
   53480:	1000271e 	bne	r2,zero,53520 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53484:	00000f06 	br	534c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53488:	e0bffc17 	ldw	r2,-16(fp)
   5348c:	10800003 	ldbu	r2,0(r2)
   53490:	10803fcc 	andi	r2,r2,255
   53494:	000f883a 	mov	r7,zero
   53498:	000d883a 	mov	r6,zero
   5349c:	100b883a 	mov	r5,r2
   534a0:	e13ffb17 	ldw	r4,-20(fp)
   534a4:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   534a8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   534ac:	e0bffc17 	ldw	r2,-16(fp)
   534b0:	10800044 	addi	r2,r2,1
   534b4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   534b8:	e0bffd17 	ldw	r2,-12(fp)
   534bc:	10bfffc4 	addi	r2,r2,-1
   534c0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   534c4:	e0bffd17 	ldw	r2,-12(fp)
   534c8:	108000b0 	cmpltui	r2,r2,2
   534cc:	1000021e 	bne	r2,zero,534d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   534d0:	e0bff817 	ldw	r2,-32(fp)
   534d4:	103fec26 	beq	r2,zero,53488 <__alt_data_end+0xfffe1488>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   534d8:	e0bff817 	ldw	r2,-32(fp)
   534dc:	1000101e 	bne	r2,zero,53520 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   534e0:	e0bffc17 	ldw	r2,-16(fp)
   534e4:	10800003 	ldbu	r2,0(r2)
   534e8:	10803fcc 	andi	r2,r2,255
   534ec:	e0ffff03 	ldbu	r3,-4(fp)
   534f0:	180f883a 	mov	r7,r3
   534f4:	000d883a 	mov	r6,zero
   534f8:	100b883a 	mov	r5,r2
   534fc:	e13ffb17 	ldw	r4,-20(fp)
   53500:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   53504:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   53508:	e0bffc17 	ldw	r2,-16(fp)
   5350c:	10800044 	addi	r2,r2,1
   53510:	e0bffc15 	stw	r2,-16(fp)
            --size;
   53514:	e0bffd17 	ldw	r2,-12(fp)
   53518:	10bfffc4 	addi	r2,r2,-1
   5351c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   53520:	e0bff817 	ldw	r2,-32(fp)
   53524:	10001426 	beq	r2,zero,53578 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53528:	00000d06 	br	53560 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   5352c:	e0bff917 	ldw	r2,-28(fp)
   53530:	108002a8 	cmpgeui	r2,r2,10
   53534:	1000021e 	bne	r2,zero,53540 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   53538:	0109c404 	movi	r4,10000
   5353c:	005499c0 	call	5499c <alt_busy_sleep>
            if (--timeout == 0)
   53540:	e0bff917 	ldw	r2,-28(fp)
   53544:	10bfffc4 	addi	r2,r2,-1
   53548:	e0bff915 	stw	r2,-28(fp)
   5354c:	e0bff917 	ldw	r2,-28(fp)
   53550:	1000031e 	bne	r2,zero,53560 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53554:	00bfff84 	movi	r2,-2
   53558:	e0bff815 	stw	r2,-32(fp)
               break;
   5355c:	00000306 	br	5356c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53560:	e13ffb17 	ldw	r4,-20(fp)
   53564:	00528680 	call	52868 <alt_avalon_i2c_is_busy>
   53568:	103ff01e 	bne	r2,zero,5352c <__alt_data_end+0xfffe152c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   5356c:	e13ffb17 	ldw	r4,-20(fp)
   53570:	00525100 	call	52510 <alt_avalon_i2c_disable>
   53574:	00000e06 	br	535b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   53578:	e0bfff03 	ldbu	r2,-4(fp)
   5357c:	10000c26 	beq	r2,zero,535b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53580:	01400704 	movi	r5,28
   53584:	e13ffb17 	ldw	r4,-20(fp)
   53588:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   5358c:	000b883a 	mov	r5,zero
   53590:	e13ffb17 	ldw	r4,-20(fp)
   53594:	0053cac0 	call	53cac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   53598:	e0bffa17 	ldw	r2,-24(fp)
   5359c:	00c00044 	movi	r3,1
   535a0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   535a4:	01400044 	movi	r5,1
   535a8:	e13ffb17 	ldw	r4,-20(fp)
   535ac:	0053b080 	call	53b08 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   535b0:	e0bff817 	ldw	r2,-32(fp)
}
   535b4:	e037883a 	mov	sp,fp
   535b8:	dfc00117 	ldw	ra,4(sp)
   535bc:	df000017 	ldw	fp,0(sp)
   535c0:	dec00204 	addi	sp,sp,8
   535c4:	f800283a 	ret

000535c8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   535c8:	defff404 	addi	sp,sp,-48
   535cc:	dfc00b15 	stw	ra,44(sp)
   535d0:	df000a15 	stw	fp,40(sp)
   535d4:	df000a04 	addi	fp,sp,40
   535d8:	e13ffb15 	stw	r4,-20(fp)
   535dc:	e17ffc15 	stw	r5,-16(fp)
   535e0:	e1bffd15 	stw	r6,-12(fp)
   535e4:	3807883a 	mov	r3,r7
   535e8:	e0800217 	ldw	r2,8(fp)
   535ec:	e0fffe05 	stb	r3,-8(fp)
   535f0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   535f4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   535f8:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   535fc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   53600:	e0bffd17 	ldw	r2,-12(fp)
   53604:	1000021e 	bne	r2,zero,53610 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53608:	0005883a 	mov	r2,zero
   5360c:	00006d06 	br	537c4 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53610:	e0bffe03 	ldbu	r2,-8(fp)
   53614:	10000a1e 	bne	r2,zero,53640 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53618:	e13ffb17 	ldw	r4,-20(fp)
   5361c:	00524780 	call	52478 <alt_avalon_i2c_enable>
   53620:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53624:	e0bff917 	ldw	r2,-28(fp)
   53628:	10000226 	beq	r2,zero,53634 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   5362c:	e0bff917 	ldw	r2,-28(fp)
   53630:	00006406 	br	537c4 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53634:	01400704 	movi	r5,28
   53638:	e13ffb17 	ldw	r4,-20(fp)
   5363c:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53640:	e0bffe03 	ldbu	r2,-8(fp)
   53644:	100d883a 	mov	r6,r2
   53648:	01400044 	movi	r5,1
   5364c:	e13ffb17 	ldw	r4,-20(fp)
   53650:	0052ae00 	call	52ae0 <alt_avalon_i2c_send_address>
   53654:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53658:	e0bff917 	ldw	r2,-28(fp)
   5365c:	1000341e 	bne	r2,zero,53730 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53660:	00001906 	br	536c8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53664:	000f883a 	mov	r7,zero
   53668:	000d883a 	mov	r6,zero
   5366c:	000b883a 	mov	r5,zero
   53670:	e13ffb17 	ldw	r4,-20(fp)
   53674:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   53678:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   5367c:	e0bff817 	ldw	r2,-32(fp)
   53680:	10800044 	addi	r2,r2,1
   53684:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   53688:	e0bff917 	ldw	r2,-28(fp)
   5368c:	10000e1e 	bne	r2,zero,536c8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   53690:	e0bffa04 	addi	r2,fp,-24
   53694:	100f883a 	mov	r7,r2
   53698:	000d883a 	mov	r6,zero
   5369c:	e17ffc17 	ldw	r5,-16(fp)
   536a0:	e13ffb17 	ldw	r4,-20(fp)
   536a4:	00528ac0 	call	528ac <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   536a8:	e0bffa17 	ldw	r2,-24(fp)
   536ac:	e0fffc17 	ldw	r3,-16(fp)
   536b0:	1885883a 	add	r2,r3,r2
   536b4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   536b8:	e0bffa17 	ldw	r2,-24(fp)
   536bc:	e0fff717 	ldw	r3,-36(fp)
   536c0:	1885883a 	add	r2,r3,r2
   536c4:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   536c8:	e0bffd17 	ldw	r2,-12(fp)
   536cc:	10bfffc4 	addi	r2,r2,-1
   536d0:	e0fff817 	ldw	r3,-32(fp)
   536d4:	1880022e 	bgeu	r3,r2,536e0 <alt_avalon_i2c_master_receive+0x118>
   536d8:	e0bff917 	ldw	r2,-28(fp)
   536dc:	103fe126 	beq	r2,zero,53664 <__alt_data_end+0xfffe1664>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   536e0:	e0bff917 	ldw	r2,-28(fp)
   536e4:	1000121e 	bne	r2,zero,53730 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   536e8:	e0bfff03 	ldbu	r2,-4(fp)
   536ec:	100f883a 	mov	r7,r2
   536f0:	000d883a 	mov	r6,zero
   536f4:	000b883a 	mov	r5,zero
   536f8:	e13ffb17 	ldw	r4,-20(fp)
   536fc:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   53700:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53704:	00000a06 	br	53730 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   53708:	e17ffc17 	ldw	r5,-16(fp)
   5370c:	e13ffb17 	ldw	r4,-20(fp)
   53710:	00529540 	call	52954 <alt_avalon_i2c_rx_read>
   53714:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   53718:	e0bffc17 	ldw	r2,-16(fp)
   5371c:	10800044 	addi	r2,r2,1
   53720:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   53724:	e0bff717 	ldw	r2,-36(fp)
   53728:	10800044 	addi	r2,r2,1
   5372c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53730:	e0fff717 	ldw	r3,-36(fp)
   53734:	e0bffd17 	ldw	r2,-12(fp)
   53738:	1880022e 	bgeu	r3,r2,53744 <alt_avalon_i2c_master_receive+0x17c>
   5373c:	e0bff917 	ldw	r2,-28(fp)
   53740:	103ff126 	beq	r2,zero,53708 <__alt_data_end+0xfffe1708>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   53744:	e0bfff03 	ldbu	r2,-4(fp)
   53748:	1000021e 	bne	r2,zero,53754 <alt_avalon_i2c_master_receive+0x18c>
   5374c:	e0bff917 	ldw	r2,-28(fp)
   53750:	10001b26 	beq	r2,zero,537c0 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   53754:	0149c404 	movi	r5,10000
   53758:	e13ffd17 	ldw	r4,-12(fp)
   5375c:	0040eec0 	call	40eec <__mulsi3>
   53760:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53764:	00000d06 	br	5379c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53768:	e0bff617 	ldw	r2,-40(fp)
   5376c:	108002a8 	cmpgeui	r2,r2,10
   53770:	1000021e 	bne	r2,zero,5377c <alt_avalon_i2c_master_receive+0x1b4>
   53774:	0109c404 	movi	r4,10000
   53778:	005499c0 	call	5499c <alt_busy_sleep>
            if (--timeout == 0)
   5377c:	e0bff617 	ldw	r2,-40(fp)
   53780:	10bfffc4 	addi	r2,r2,-1
   53784:	e0bff615 	stw	r2,-40(fp)
   53788:	e0bff617 	ldw	r2,-40(fp)
   5378c:	1000031e 	bne	r2,zero,5379c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53790:	00bfff84 	movi	r2,-2
   53794:	e0bff915 	stw	r2,-28(fp)
               break;
   53798:	00000306 	br	537a8 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   5379c:	e13ffb17 	ldw	r4,-20(fp)
   537a0:	00528680 	call	52868 <alt_avalon_i2c_is_busy>
   537a4:	103ff01e 	bne	r2,zero,53768 <__alt_data_end+0xfffe1768>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   537a8:	e0bff904 	addi	r2,fp,-28
   537ac:	100b883a 	mov	r5,r2
   537b0:	e13ffb17 	ldw	r4,-20(fp)
   537b4:	0052c3c0 	call	52c3c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   537b8:	e13ffb17 	ldw	r4,-20(fp)
   537bc:	00525100 	call	52510 <alt_avalon_i2c_disable>
    }

    return status;
   537c0:	e0bff917 	ldw	r2,-28(fp)
}
   537c4:	e037883a 	mov	sp,fp
   537c8:	dfc00117 	ldw	ra,4(sp)
   537cc:	df000017 	ldw	fp,0(sp)
   537d0:	dec00204 	addi	sp,sp,8
   537d4:	f800283a 	ret

000537d8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   537d8:	defff504 	addi	sp,sp,-44
   537dc:	dfc00a15 	stw	ra,40(sp)
   537e0:	df000915 	stw	fp,36(sp)
   537e4:	df000904 	addi	fp,sp,36
   537e8:	e13ffb15 	stw	r4,-20(fp)
   537ec:	e17ffc15 	stw	r5,-16(fp)
   537f0:	e1bffd15 	stw	r6,-12(fp)
   537f4:	3807883a 	mov	r3,r7
   537f8:	e0800217 	ldw	r2,8(fp)
   537fc:	e0fffe05 	stb	r3,-8(fp)
   53800:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53804:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   53808:	e0bffb17 	ldw	r2,-20(fp)
   5380c:	10800717 	ldw	r2,28(r2)
   53810:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   53814:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   53818:	e0bffd17 	ldw	r2,-12(fp)
   5381c:	1000021e 	bne	r2,zero,53828 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53820:	0005883a 	mov	r2,zero
   53824:	00006306 	br	539b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   53828:	e0bffb17 	ldw	r2,-20(fp)
   5382c:	10c00617 	ldw	r3,24(r2)
   53830:	00800174 	movhi	r2,5
   53834:	10883f04 	addi	r2,r2,8444
   53838:	18800226 	beq	r3,r2,53844 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   5383c:	00bfff44 	movi	r2,-3
   53840:	00005c06 	br	539b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53844:	e0bffe03 	ldbu	r2,-8(fp)
   53848:	10000a1e 	bne	r2,zero,53874 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   5384c:	e13ffb17 	ldw	r4,-20(fp)
   53850:	00524780 	call	52478 <alt_avalon_i2c_enable>
   53854:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53858:	e0bff717 	ldw	r2,-36(fp)
   5385c:	10000226 	beq	r2,zero,53868 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   53860:	e0bff717 	ldw	r2,-36(fp)
   53864:	00005306 	br	539b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53868:	01400704 	movi	r5,28
   5386c:	e13ffb17 	ldw	r4,-20(fp)
   53870:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53874:	e0bffe03 	ldbu	r2,-8(fp)
   53878:	100d883a 	mov	r6,r2
   5387c:	01400044 	movi	r5,1
   53880:	e13ffb17 	ldw	r4,-20(fp)
   53884:	0052ae00 	call	52ae0 <alt_avalon_i2c_send_address>
   53888:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   5388c:	e0bff717 	ldw	r2,-36(fp)
   53890:	1000191e 	bne	r2,zero,538f8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53894:	00000906 	br	538bc <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53898:	000f883a 	mov	r7,zero
   5389c:	000d883a 	mov	r6,zero
   538a0:	000b883a 	mov	r5,zero
   538a4:	e13ffb17 	ldw	r4,-20(fp)
   538a8:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   538ac:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   538b0:	e0bff917 	ldw	r2,-28(fp)
   538b4:	10800044 	addi	r2,r2,1
   538b8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   538bc:	e0bffd17 	ldw	r2,-12(fp)
   538c0:	10bfffc4 	addi	r2,r2,-1
   538c4:	e0fff917 	ldw	r3,-28(fp)
   538c8:	1880022e 	bgeu	r3,r2,538d4 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   538cc:	e0bff717 	ldw	r2,-36(fp)
   538d0:	103ff126 	beq	r2,zero,53898 <__alt_data_end+0xfffe1898>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   538d4:	e0bff717 	ldw	r2,-36(fp)
   538d8:	1000071e 	bne	r2,zero,538f8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   538dc:	e0bfff03 	ldbu	r2,-4(fp)
   538e0:	100f883a 	mov	r7,r2
   538e4:	000d883a 	mov	r6,zero
   538e8:	000b883a 	mov	r5,zero
   538ec:	e13ffb17 	ldw	r4,-20(fp)
   538f0:	00529fc0 	call	529fc <alt_avalon_i2c_cmd_write>
   538f4:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   538f8:	e0bff717 	ldw	r2,-36(fp)
   538fc:	10001826 	beq	r2,zero,53960 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   53900:	0149c404 	movi	r5,10000
   53904:	e13ffd17 	ldw	r4,-12(fp)
   53908:	0040eec0 	call	40eec <__mulsi3>
   5390c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53910:	00000d06 	br	53948 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53914:	e0bff817 	ldw	r2,-32(fp)
   53918:	108002a8 	cmpgeui	r2,r2,10
   5391c:	1000021e 	bne	r2,zero,53928 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   53920:	0109c404 	movi	r4,10000
   53924:	005499c0 	call	5499c <alt_busy_sleep>
            if (--timeout == 0)
   53928:	e0bff817 	ldw	r2,-32(fp)
   5392c:	10bfffc4 	addi	r2,r2,-1
   53930:	e0bff815 	stw	r2,-32(fp)
   53934:	e0bff817 	ldw	r2,-32(fp)
   53938:	1000031e 	bne	r2,zero,53948 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   5393c:	00bfff84 	movi	r2,-2
   53940:	e0bff715 	stw	r2,-36(fp)
               break;
   53944:	00000306 	br	53954 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53948:	e13ffb17 	ldw	r4,-20(fp)
   5394c:	00528680 	call	52868 <alt_avalon_i2c_is_busy>
   53950:	103ff01e 	bne	r2,zero,53914 <__alt_data_end+0xfffe1914>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53954:	e13ffb17 	ldw	r4,-20(fp)
   53958:	00525100 	call	52510 <alt_avalon_i2c_disable>
   5395c:	00001406 	br	539b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   53960:	e0bfff03 	ldbu	r2,-4(fp)
   53964:	10001226 	beq	r2,zero,539b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53968:	01400704 	movi	r5,28
   5396c:	e13ffb17 	ldw	r4,-20(fp)
   53970:	0053a640 	call	53a64 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   53974:	000b883a 	mov	r5,zero
   53978:	e13ffb17 	ldw	r4,-20(fp)
   5397c:	0053bfc0 	call	53bfc <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   53980:	e0bffa17 	ldw	r2,-24(fp)
   53984:	00c00084 	movi	r3,2
   53988:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   5398c:	e0bffa17 	ldw	r2,-24(fp)
   53990:	e0fffc17 	ldw	r3,-16(fp)
   53994:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   53998:	e0bffa17 	ldw	r2,-24(fp)
   5399c:	e0fffd17 	ldw	r3,-12(fp)
   539a0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   539a4:	01400084 	movi	r5,2
   539a8:	e13ffb17 	ldw	r4,-20(fp)
   539ac:	0053b080 	call	53b08 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   539b0:	e0bff717 	ldw	r2,-36(fp)
}
   539b4:	e037883a 	mov	sp,fp
   539b8:	dfc00117 	ldw	ra,4(sp)
   539bc:	df000017 	ldw	fp,0(sp)
   539c0:	dec00204 	addi	sp,sp,8
   539c4:	f800283a 	ret

000539c8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   539c8:	defffd04 	addi	sp,sp,-12
   539cc:	df000215 	stw	fp,8(sp)
   539d0:	df000204 	addi	fp,sp,8
   539d4:	e13ffe15 	stw	r4,-8(fp)
   539d8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   539dc:	e0bffe17 	ldw	r2,-8(fp)
   539e0:	10800317 	ldw	r2,12(r2)
   539e4:	10800404 	addi	r2,r2,16
   539e8:	10c00037 	ldwio	r3,0(r2)
   539ec:	e0bffe17 	ldw	r2,-8(fp)
   539f0:	10800317 	ldw	r2,12(r2)
   539f4:	10800304 	addi	r2,r2,12
   539f8:	10800037 	ldwio	r2,0(r2)
   539fc:	1884703a 	and	r2,r3,r2
   53a00:	1007883a 	mov	r3,r2
   53a04:	e0bfff17 	ldw	r2,-4(fp)
   53a08:	10c00015 	stw	r3,0(r2)
}
   53a0c:	0001883a 	nop
   53a10:	e037883a 	mov	sp,fp
   53a14:	df000017 	ldw	fp,0(sp)
   53a18:	dec00104 	addi	sp,sp,4
   53a1c:	f800283a 	ret

00053a20 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   53a20:	defffd04 	addi	sp,sp,-12
   53a24:	df000215 	stw	fp,8(sp)
   53a28:	df000204 	addi	fp,sp,8
   53a2c:	e13ffe15 	stw	r4,-8(fp)
   53a30:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   53a34:	e0bffe17 	ldw	r2,-8(fp)
   53a38:	10800317 	ldw	r2,12(r2)
   53a3c:	10800404 	addi	r2,r2,16
   53a40:	10800037 	ldwio	r2,0(r2)
   53a44:	1007883a 	mov	r3,r2
   53a48:	e0bfff17 	ldw	r2,-4(fp)
   53a4c:	10c00015 	stw	r3,0(r2)
}
   53a50:	0001883a 	nop
   53a54:	e037883a 	mov	sp,fp
   53a58:	df000017 	ldw	fp,0(sp)
   53a5c:	dec00104 	addi	sp,sp,4
   53a60:	f800283a 	ret

00053a64 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   53a64:	defffd04 	addi	sp,sp,-12
   53a68:	df000215 	stw	fp,8(sp)
   53a6c:	df000204 	addi	fp,sp,8
   53a70:	e13ffe15 	stw	r4,-8(fp)
   53a74:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   53a78:	e0bffe17 	ldw	r2,-8(fp)
   53a7c:	10800317 	ldw	r2,12(r2)
   53a80:	10800404 	addi	r2,r2,16
   53a84:	e0ffff17 	ldw	r3,-4(fp)
   53a88:	10c00035 	stwio	r3,0(r2)
}
   53a8c:	0001883a 	nop
   53a90:	e037883a 	mov	sp,fp
   53a94:	df000017 	ldw	fp,0(sp)
   53a98:	dec00104 	addi	sp,sp,4
   53a9c:	f800283a 	ret

00053aa0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   53aa0:	defffb04 	addi	sp,sp,-20
   53aa4:	dfc00415 	stw	ra,16(sp)
   53aa8:	df000315 	stw	fp,12(sp)
   53aac:	df000304 	addi	fp,sp,12
   53ab0:	e13ffe15 	stw	r4,-8(fp)
   53ab4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   53ab8:	e17ffd04 	addi	r5,fp,-12
   53abc:	e13ffe17 	ldw	r4,-8(fp)
   53ac0:	0053b6c0 	call	53b6c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   53ac4:	e0bfff17 	ldw	r2,-4(fp)
   53ac8:	0086303a 	nor	r3,zero,r2
   53acc:	e0bffd17 	ldw	r2,-12(fp)
   53ad0:	1884703a 	and	r2,r3,r2
   53ad4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   53ad8:	e0bffe17 	ldw	r2,-8(fp)
   53adc:	10800317 	ldw	r2,12(r2)
   53ae0:	10800304 	addi	r2,r2,12
   53ae4:	e0fffd17 	ldw	r3,-12(fp)
   53ae8:	18c007cc 	andi	r3,r3,31
   53aec:	10c00035 	stwio	r3,0(r2)
}
   53af0:	0001883a 	nop
   53af4:	e037883a 	mov	sp,fp
   53af8:	dfc00117 	ldw	ra,4(sp)
   53afc:	df000017 	ldw	fp,0(sp)
   53b00:	dec00204 	addi	sp,sp,8
   53b04:	f800283a 	ret

00053b08 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   53b08:	defffb04 	addi	sp,sp,-20
   53b0c:	dfc00415 	stw	ra,16(sp)
   53b10:	df000315 	stw	fp,12(sp)
   53b14:	df000304 	addi	fp,sp,12
   53b18:	e13ffe15 	stw	r4,-8(fp)
   53b1c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   53b20:	e17ffd04 	addi	r5,fp,-12
   53b24:	e13ffe17 	ldw	r4,-8(fp)
   53b28:	0053b6c0 	call	53b6c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   53b2c:	e0fffd17 	ldw	r3,-12(fp)
   53b30:	e0bfff17 	ldw	r2,-4(fp)
   53b34:	1884b03a 	or	r2,r3,r2
   53b38:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   53b3c:	e0bffe17 	ldw	r2,-8(fp)
   53b40:	10800317 	ldw	r2,12(r2)
   53b44:	10800304 	addi	r2,r2,12
   53b48:	e0fffd17 	ldw	r3,-12(fp)
   53b4c:	18c007cc 	andi	r3,r3,31
   53b50:	10c00035 	stwio	r3,0(r2)
}
   53b54:	0001883a 	nop
   53b58:	e037883a 	mov	sp,fp
   53b5c:	dfc00117 	ldw	ra,4(sp)
   53b60:	df000017 	ldw	fp,0(sp)
   53b64:	dec00204 	addi	sp,sp,8
   53b68:	f800283a 	ret

00053b6c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   53b6c:	defffd04 	addi	sp,sp,-12
   53b70:	df000215 	stw	fp,8(sp)
   53b74:	df000204 	addi	fp,sp,8
   53b78:	e13ffe15 	stw	r4,-8(fp)
   53b7c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   53b80:	e0bffe17 	ldw	r2,-8(fp)
   53b84:	10800317 	ldw	r2,12(r2)
   53b88:	10800304 	addi	r2,r2,12
   53b8c:	10800037 	ldwio	r2,0(r2)
   53b90:	10c007cc 	andi	r3,r2,31
   53b94:	e0bfff17 	ldw	r2,-4(fp)
   53b98:	10c00015 	stw	r3,0(r2)
}
   53b9c:	0001883a 	nop
   53ba0:	e037883a 	mov	sp,fp
   53ba4:	df000017 	ldw	fp,0(sp)
   53ba8:	dec00104 	addi	sp,sp,4
   53bac:	f800283a 	ret

00053bb0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   53bb0:	defffd04 	addi	sp,sp,-12
   53bb4:	df000215 	stw	fp,8(sp)
   53bb8:	df000204 	addi	fp,sp,8
   53bbc:	e13ffe15 	stw	r4,-8(fp)
   53bc0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   53bc4:	e0bffe17 	ldw	r2,-8(fp)
   53bc8:	10800317 	ldw	r2,12(r2)
   53bcc:	10800204 	addi	r2,r2,8
   53bd0:	10800037 	ldwio	r2,0(r2)
   53bd4:	10800c0c 	andi	r2,r2,48
   53bd8:	1005d13a 	srai	r2,r2,4
   53bdc:	1007883a 	mov	r3,r2
   53be0:	e0bfff17 	ldw	r2,-4(fp)
   53be4:	10c00015 	stw	r3,0(r2)
}
   53be8:	0001883a 	nop
   53bec:	e037883a 	mov	sp,fp
   53bf0:	df000017 	ldw	fp,0(sp)
   53bf4:	dec00104 	addi	sp,sp,4
   53bf8:	f800283a 	ret

00053bfc <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   53bfc:	defffd04 	addi	sp,sp,-12
   53c00:	df000215 	stw	fp,8(sp)
   53c04:	df000204 	addi	fp,sp,8
   53c08:	e13ffe15 	stw	r4,-8(fp)
   53c0c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   53c10:	e0bffe17 	ldw	r2,-8(fp)
   53c14:	10800317 	ldw	r2,12(r2)
   53c18:	10800204 	addi	r2,r2,8
   53c1c:	e0fffe17 	ldw	r3,-8(fp)
   53c20:	18c00317 	ldw	r3,12(r3)
   53c24:	18c00204 	addi	r3,r3,8
   53c28:	18c00037 	ldwio	r3,0(r3)
   53c2c:	1809883a 	mov	r4,r3
   53c30:	00fff3c4 	movi	r3,-49
   53c34:	20c8703a 	and	r4,r4,r3
   53c38:	e0ffff17 	ldw	r3,-4(fp)
   53c3c:	1806913a 	slli	r3,r3,4
   53c40:	18c00c0c 	andi	r3,r3,48
   53c44:	20c6b03a 	or	r3,r4,r3
   53c48:	10c00035 	stwio	r3,0(r2)
}
   53c4c:	0001883a 	nop
   53c50:	e037883a 	mov	sp,fp
   53c54:	df000017 	ldw	fp,0(sp)
   53c58:	dec00104 	addi	sp,sp,4
   53c5c:	f800283a 	ret

00053c60 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   53c60:	defffd04 	addi	sp,sp,-12
   53c64:	df000215 	stw	fp,8(sp)
   53c68:	df000204 	addi	fp,sp,8
   53c6c:	e13ffe15 	stw	r4,-8(fp)
   53c70:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   53c74:	e0bffe17 	ldw	r2,-8(fp)
   53c78:	10800317 	ldw	r2,12(r2)
   53c7c:	10800204 	addi	r2,r2,8
   53c80:	10800037 	ldwio	r2,0(r2)
   53c84:	1080030c 	andi	r2,r2,12
   53c88:	1005d0ba 	srai	r2,r2,2
   53c8c:	1007883a 	mov	r3,r2
   53c90:	e0bfff17 	ldw	r2,-4(fp)
   53c94:	10c00015 	stw	r3,0(r2)
}
   53c98:	0001883a 	nop
   53c9c:	e037883a 	mov	sp,fp
   53ca0:	df000017 	ldw	fp,0(sp)
   53ca4:	dec00104 	addi	sp,sp,4
   53ca8:	f800283a 	ret

00053cac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   53cac:	defffd04 	addi	sp,sp,-12
   53cb0:	df000215 	stw	fp,8(sp)
   53cb4:	df000204 	addi	fp,sp,8
   53cb8:	e13ffe15 	stw	r4,-8(fp)
   53cbc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   53cc0:	e0bffe17 	ldw	r2,-8(fp)
   53cc4:	10800317 	ldw	r2,12(r2)
   53cc8:	10c00204 	addi	r3,r2,8
   53ccc:	e0bffe17 	ldw	r2,-8(fp)
   53cd0:	10800317 	ldw	r2,12(r2)
   53cd4:	10800204 	addi	r2,r2,8
   53cd8:	10800037 	ldwio	r2,0(r2)
   53cdc:	1009883a 	mov	r4,r2
   53ce0:	00bffcc4 	movi	r2,-13
   53ce4:	2088703a 	and	r4,r4,r2
   53ce8:	e0bfff17 	ldw	r2,-4(fp)
   53cec:	1085883a 	add	r2,r2,r2
   53cf0:	1085883a 	add	r2,r2,r2
   53cf4:	1080030c 	andi	r2,r2,12
   53cf8:	2084b03a 	or	r2,r4,r2
   53cfc:	18800035 	stwio	r2,0(r3)
}
   53d00:	0001883a 	nop
   53d04:	e037883a 	mov	sp,fp
   53d08:	df000017 	ldw	fp,0(sp)
   53d0c:	dec00104 	addi	sp,sp,4
   53d10:	f800283a 	ret

00053d14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   53d14:	defffa04 	addi	sp,sp,-24
   53d18:	dfc00515 	stw	ra,20(sp)
   53d1c:	df000415 	stw	fp,16(sp)
   53d20:	df000404 	addi	fp,sp,16
   53d24:	e13ffd15 	stw	r4,-12(fp)
   53d28:	e17ffe15 	stw	r5,-8(fp)
   53d2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   53d30:	e0bffd17 	ldw	r2,-12(fp)
   53d34:	10800017 	ldw	r2,0(r2)
   53d38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   53d3c:	e0bffc17 	ldw	r2,-16(fp)
   53d40:	10c00a04 	addi	r3,r2,40
   53d44:	e0bffd17 	ldw	r2,-12(fp)
   53d48:	10800217 	ldw	r2,8(r2)
   53d4c:	100f883a 	mov	r7,r2
   53d50:	e1bfff17 	ldw	r6,-4(fp)
   53d54:	e17ffe17 	ldw	r5,-8(fp)
   53d58:	1809883a 	mov	r4,r3
   53d5c:	005433c0 	call	5433c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   53d60:	e037883a 	mov	sp,fp
   53d64:	dfc00117 	ldw	ra,4(sp)
   53d68:	df000017 	ldw	fp,0(sp)
   53d6c:	dec00204 	addi	sp,sp,8
   53d70:	f800283a 	ret

00053d74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   53d74:	defffa04 	addi	sp,sp,-24
   53d78:	dfc00515 	stw	ra,20(sp)
   53d7c:	df000415 	stw	fp,16(sp)
   53d80:	df000404 	addi	fp,sp,16
   53d84:	e13ffd15 	stw	r4,-12(fp)
   53d88:	e17ffe15 	stw	r5,-8(fp)
   53d8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   53d90:	e0bffd17 	ldw	r2,-12(fp)
   53d94:	10800017 	ldw	r2,0(r2)
   53d98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   53d9c:	e0bffc17 	ldw	r2,-16(fp)
   53da0:	10c00a04 	addi	r3,r2,40
   53da4:	e0bffd17 	ldw	r2,-12(fp)
   53da8:	10800217 	ldw	r2,8(r2)
   53dac:	100f883a 	mov	r7,r2
   53db0:	e1bfff17 	ldw	r6,-4(fp)
   53db4:	e17ffe17 	ldw	r5,-8(fp)
   53db8:	1809883a 	mov	r4,r3
   53dbc:	00545580 	call	54558 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   53dc0:	e037883a 	mov	sp,fp
   53dc4:	dfc00117 	ldw	ra,4(sp)
   53dc8:	df000017 	ldw	fp,0(sp)
   53dcc:	dec00204 	addi	sp,sp,8
   53dd0:	f800283a 	ret

00053dd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   53dd4:	defffc04 	addi	sp,sp,-16
   53dd8:	dfc00315 	stw	ra,12(sp)
   53ddc:	df000215 	stw	fp,8(sp)
   53de0:	df000204 	addi	fp,sp,8
   53de4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   53de8:	e0bfff17 	ldw	r2,-4(fp)
   53dec:	10800017 	ldw	r2,0(r2)
   53df0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   53df4:	e0bffe17 	ldw	r2,-8(fp)
   53df8:	10c00a04 	addi	r3,r2,40
   53dfc:	e0bfff17 	ldw	r2,-4(fp)
   53e00:	10800217 	ldw	r2,8(r2)
   53e04:	100b883a 	mov	r5,r2
   53e08:	1809883a 	mov	r4,r3
   53e0c:	00541e40 	call	541e4 <altera_avalon_jtag_uart_close>
}
   53e10:	e037883a 	mov	sp,fp
   53e14:	dfc00117 	ldw	ra,4(sp)
   53e18:	df000017 	ldw	fp,0(sp)
   53e1c:	dec00204 	addi	sp,sp,8
   53e20:	f800283a 	ret

00053e24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   53e24:	defffa04 	addi	sp,sp,-24
   53e28:	dfc00515 	stw	ra,20(sp)
   53e2c:	df000415 	stw	fp,16(sp)
   53e30:	df000404 	addi	fp,sp,16
   53e34:	e13ffd15 	stw	r4,-12(fp)
   53e38:	e17ffe15 	stw	r5,-8(fp)
   53e3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   53e40:	e0bffd17 	ldw	r2,-12(fp)
   53e44:	10800017 	ldw	r2,0(r2)
   53e48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   53e4c:	e0bffc17 	ldw	r2,-16(fp)
   53e50:	10800a04 	addi	r2,r2,40
   53e54:	e1bfff17 	ldw	r6,-4(fp)
   53e58:	e17ffe17 	ldw	r5,-8(fp)
   53e5c:	1009883a 	mov	r4,r2
   53e60:	005424c0 	call	5424c <altera_avalon_jtag_uart_ioctl>
}
   53e64:	e037883a 	mov	sp,fp
   53e68:	dfc00117 	ldw	ra,4(sp)
   53e6c:	df000017 	ldw	fp,0(sp)
   53e70:	dec00204 	addi	sp,sp,8
   53e74:	f800283a 	ret

00053e78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   53e78:	defffa04 	addi	sp,sp,-24
   53e7c:	dfc00515 	stw	ra,20(sp)
   53e80:	df000415 	stw	fp,16(sp)
   53e84:	df000404 	addi	fp,sp,16
   53e88:	e13ffd15 	stw	r4,-12(fp)
   53e8c:	e17ffe15 	stw	r5,-8(fp)
   53e90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53e94:	e0bffd17 	ldw	r2,-12(fp)
   53e98:	00c00044 	movi	r3,1
   53e9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   53ea0:	e0bffd17 	ldw	r2,-12(fp)
   53ea4:	10800017 	ldw	r2,0(r2)
   53ea8:	10800104 	addi	r2,r2,4
   53eac:	1007883a 	mov	r3,r2
   53eb0:	e0bffd17 	ldw	r2,-12(fp)
   53eb4:	10800817 	ldw	r2,32(r2)
   53eb8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   53ebc:	e0bffe17 	ldw	r2,-8(fp)
   53ec0:	e0ffff17 	ldw	r3,-4(fp)
   53ec4:	d8000015 	stw	zero,0(sp)
   53ec8:	e1fffd17 	ldw	r7,-12(fp)
   53ecc:	01800174 	movhi	r6,5
   53ed0:	318fce04 	addi	r6,r6,16184
   53ed4:	180b883a 	mov	r5,r3
   53ed8:	1009883a 	mov	r4,r2
   53edc:	0054d640 	call	54d64 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   53ee0:	e0bffd17 	ldw	r2,-12(fp)
   53ee4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   53ee8:	e0bffd17 	ldw	r2,-12(fp)
   53eec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   53ef0:	d0e6f917 	ldw	r3,-25628(gp)
   53ef4:	e1fffd17 	ldw	r7,-12(fp)
   53ef8:	01800174 	movhi	r6,5
   53efc:	31905104 	addi	r6,r6,16708
   53f00:	180b883a 	mov	r5,r3
   53f04:	1009883a 	mov	r4,r2
   53f08:	00548700 	call	54870 <alt_alarm_start>
   53f0c:	1000040e 	bge	r2,zero,53f20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   53f10:	e0fffd17 	ldw	r3,-12(fp)
   53f14:	00a00034 	movhi	r2,32768
   53f18:	10bfffc4 	addi	r2,r2,-1
   53f1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   53f20:	0001883a 	nop
   53f24:	e037883a 	mov	sp,fp
   53f28:	dfc00117 	ldw	ra,4(sp)
   53f2c:	df000017 	ldw	fp,0(sp)
   53f30:	dec00204 	addi	sp,sp,8
   53f34:	f800283a 	ret

00053f38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   53f38:	defff804 	addi	sp,sp,-32
   53f3c:	df000715 	stw	fp,28(sp)
   53f40:	df000704 	addi	fp,sp,28
   53f44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   53f48:	e0bfff17 	ldw	r2,-4(fp)
   53f4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   53f50:	e0bffb17 	ldw	r2,-20(fp)
   53f54:	10800017 	ldw	r2,0(r2)
   53f58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53f5c:	e0bffc17 	ldw	r2,-16(fp)
   53f60:	10800104 	addi	r2,r2,4
   53f64:	10800037 	ldwio	r2,0(r2)
   53f68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   53f6c:	e0bffd17 	ldw	r2,-12(fp)
   53f70:	1080c00c 	andi	r2,r2,768
   53f74:	10006d26 	beq	r2,zero,5412c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   53f78:	e0bffd17 	ldw	r2,-12(fp)
   53f7c:	1080400c 	andi	r2,r2,256
   53f80:	10003526 	beq	r2,zero,54058 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   53f84:	00800074 	movhi	r2,1
   53f88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53f8c:	e0bffb17 	ldw	r2,-20(fp)
   53f90:	10800a17 	ldw	r2,40(r2)
   53f94:	10800044 	addi	r2,r2,1
   53f98:	1081ffcc 	andi	r2,r2,2047
   53f9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   53fa0:	e0bffb17 	ldw	r2,-20(fp)
   53fa4:	10c00b17 	ldw	r3,44(r2)
   53fa8:	e0bffe17 	ldw	r2,-8(fp)
   53fac:	18801526 	beq	r3,r2,54004 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   53fb0:	e0bffc17 	ldw	r2,-16(fp)
   53fb4:	10800037 	ldwio	r2,0(r2)
   53fb8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   53fbc:	e0bff917 	ldw	r2,-28(fp)
   53fc0:	10a0000c 	andi	r2,r2,32768
   53fc4:	10001126 	beq	r2,zero,5400c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   53fc8:	e0bffb17 	ldw	r2,-20(fp)
   53fcc:	10800a17 	ldw	r2,40(r2)
   53fd0:	e0fff917 	ldw	r3,-28(fp)
   53fd4:	1809883a 	mov	r4,r3
   53fd8:	e0fffb17 	ldw	r3,-20(fp)
   53fdc:	1885883a 	add	r2,r3,r2
   53fe0:	10800e04 	addi	r2,r2,56
   53fe4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53fe8:	e0bffb17 	ldw	r2,-20(fp)
   53fec:	10800a17 	ldw	r2,40(r2)
   53ff0:	10800044 	addi	r2,r2,1
   53ff4:	10c1ffcc 	andi	r3,r2,2047
   53ff8:	e0bffb17 	ldw	r2,-20(fp)
   53ffc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   54000:	003fe206 	br	53f8c <__alt_data_end+0xfffe1f8c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   54004:	0001883a 	nop
   54008:	00000106 	br	54010 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   5400c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   54010:	e0bff917 	ldw	r2,-28(fp)
   54014:	10bfffec 	andhi	r2,r2,65535
   54018:	10000f26 	beq	r2,zero,54058 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5401c:	e0bffb17 	ldw	r2,-20(fp)
   54020:	10c00817 	ldw	r3,32(r2)
   54024:	00bfff84 	movi	r2,-2
   54028:	1886703a 	and	r3,r3,r2
   5402c:	e0bffb17 	ldw	r2,-20(fp)
   54030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   54034:	e0bffc17 	ldw	r2,-16(fp)
   54038:	10800104 	addi	r2,r2,4
   5403c:	1007883a 	mov	r3,r2
   54040:	e0bffb17 	ldw	r2,-20(fp)
   54044:	10800817 	ldw	r2,32(r2)
   54048:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5404c:	e0bffc17 	ldw	r2,-16(fp)
   54050:	10800104 	addi	r2,r2,4
   54054:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   54058:	e0bffd17 	ldw	r2,-12(fp)
   5405c:	1080800c 	andi	r2,r2,512
   54060:	103fbe26 	beq	r2,zero,53f5c <__alt_data_end+0xfffe1f5c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   54064:	e0bffd17 	ldw	r2,-12(fp)
   54068:	1004d43a 	srli	r2,r2,16
   5406c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   54070:	00001406 	br	540c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   54074:	e0bffc17 	ldw	r2,-16(fp)
   54078:	e0fffb17 	ldw	r3,-20(fp)
   5407c:	18c00d17 	ldw	r3,52(r3)
   54080:	e13ffb17 	ldw	r4,-20(fp)
   54084:	20c7883a 	add	r3,r4,r3
   54088:	18c20e04 	addi	r3,r3,2104
   5408c:	18c00003 	ldbu	r3,0(r3)
   54090:	18c03fcc 	andi	r3,r3,255
   54094:	18c0201c 	xori	r3,r3,128
   54098:	18ffe004 	addi	r3,r3,-128
   5409c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   540a0:	e0bffb17 	ldw	r2,-20(fp)
   540a4:	10800d17 	ldw	r2,52(r2)
   540a8:	10800044 	addi	r2,r2,1
   540ac:	10c1ffcc 	andi	r3,r2,2047
   540b0:	e0bffb17 	ldw	r2,-20(fp)
   540b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   540b8:	e0bffa17 	ldw	r2,-24(fp)
   540bc:	10bfffc4 	addi	r2,r2,-1
   540c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   540c4:	e0bffa17 	ldw	r2,-24(fp)
   540c8:	10000526 	beq	r2,zero,540e0 <altera_avalon_jtag_uart_irq+0x1a8>
   540cc:	e0bffb17 	ldw	r2,-20(fp)
   540d0:	10c00d17 	ldw	r3,52(r2)
   540d4:	e0bffb17 	ldw	r2,-20(fp)
   540d8:	10800c17 	ldw	r2,48(r2)
   540dc:	18bfe51e 	bne	r3,r2,54074 <__alt_data_end+0xfffe2074>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   540e0:	e0bffa17 	ldw	r2,-24(fp)
   540e4:	103f9d26 	beq	r2,zero,53f5c <__alt_data_end+0xfffe1f5c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   540e8:	e0bffb17 	ldw	r2,-20(fp)
   540ec:	10c00817 	ldw	r3,32(r2)
   540f0:	00bfff44 	movi	r2,-3
   540f4:	1886703a 	and	r3,r3,r2
   540f8:	e0bffb17 	ldw	r2,-20(fp)
   540fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54100:	e0bffb17 	ldw	r2,-20(fp)
   54104:	10800017 	ldw	r2,0(r2)
   54108:	10800104 	addi	r2,r2,4
   5410c:	1007883a 	mov	r3,r2
   54110:	e0bffb17 	ldw	r2,-20(fp)
   54114:	10800817 	ldw	r2,32(r2)
   54118:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5411c:	e0bffc17 	ldw	r2,-16(fp)
   54120:	10800104 	addi	r2,r2,4
   54124:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   54128:	003f8c06 	br	53f5c <__alt_data_end+0xfffe1f5c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   5412c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   54130:	0001883a 	nop
   54134:	e037883a 	mov	sp,fp
   54138:	df000017 	ldw	fp,0(sp)
   5413c:	dec00104 	addi	sp,sp,4
   54140:	f800283a 	ret

00054144 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   54144:	defff804 	addi	sp,sp,-32
   54148:	df000715 	stw	fp,28(sp)
   5414c:	df000704 	addi	fp,sp,28
   54150:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   54154:	e0bffb17 	ldw	r2,-20(fp)
   54158:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   5415c:	e0bff917 	ldw	r2,-28(fp)
   54160:	10800017 	ldw	r2,0(r2)
   54164:	10800104 	addi	r2,r2,4
   54168:	10800037 	ldwio	r2,0(r2)
   5416c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   54170:	e0bffa17 	ldw	r2,-24(fp)
   54174:	1081000c 	andi	r2,r2,1024
   54178:	10000b26 	beq	r2,zero,541a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   5417c:	e0bff917 	ldw	r2,-28(fp)
   54180:	10800017 	ldw	r2,0(r2)
   54184:	10800104 	addi	r2,r2,4
   54188:	1007883a 	mov	r3,r2
   5418c:	e0bff917 	ldw	r2,-28(fp)
   54190:	10800817 	ldw	r2,32(r2)
   54194:	10810014 	ori	r2,r2,1024
   54198:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   5419c:	e0bff917 	ldw	r2,-28(fp)
   541a0:	10000915 	stw	zero,36(r2)
   541a4:	00000a06 	br	541d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   541a8:	e0bff917 	ldw	r2,-28(fp)
   541ac:	10c00917 	ldw	r3,36(r2)
   541b0:	00a00034 	movhi	r2,32768
   541b4:	10bfff04 	addi	r2,r2,-4
   541b8:	10c00536 	bltu	r2,r3,541d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   541bc:	e0bff917 	ldw	r2,-28(fp)
   541c0:	10800917 	ldw	r2,36(r2)
   541c4:	10c00044 	addi	r3,r2,1
   541c8:	e0bff917 	ldw	r2,-28(fp)
   541cc:	10c00915 	stw	r3,36(r2)
   541d0:	d0a6f917 	ldw	r2,-25628(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   541d4:	e037883a 	mov	sp,fp
   541d8:	df000017 	ldw	fp,0(sp)
   541dc:	dec00104 	addi	sp,sp,4
   541e0:	f800283a 	ret

000541e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   541e4:	defffd04 	addi	sp,sp,-12
   541e8:	df000215 	stw	fp,8(sp)
   541ec:	df000204 	addi	fp,sp,8
   541f0:	e13ffe15 	stw	r4,-8(fp)
   541f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   541f8:	00000506 	br	54210 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   541fc:	e0bfff17 	ldw	r2,-4(fp)
   54200:	1090000c 	andi	r2,r2,16384
   54204:	10000226 	beq	r2,zero,54210 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   54208:	00bffd44 	movi	r2,-11
   5420c:	00000b06 	br	5423c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   54210:	e0bffe17 	ldw	r2,-8(fp)
   54214:	10c00d17 	ldw	r3,52(r2)
   54218:	e0bffe17 	ldw	r2,-8(fp)
   5421c:	10800c17 	ldw	r2,48(r2)
   54220:	18800526 	beq	r3,r2,54238 <altera_avalon_jtag_uart_close+0x54>
   54224:	e0bffe17 	ldw	r2,-8(fp)
   54228:	10c00917 	ldw	r3,36(r2)
   5422c:	e0bffe17 	ldw	r2,-8(fp)
   54230:	10800117 	ldw	r2,4(r2)
   54234:	18bff136 	bltu	r3,r2,541fc <__alt_data_end+0xfffe21fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   54238:	0005883a 	mov	r2,zero
}
   5423c:	e037883a 	mov	sp,fp
   54240:	df000017 	ldw	fp,0(sp)
   54244:	dec00104 	addi	sp,sp,4
   54248:	f800283a 	ret

0005424c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   5424c:	defffa04 	addi	sp,sp,-24
   54250:	df000515 	stw	fp,20(sp)
   54254:	df000504 	addi	fp,sp,20
   54258:	e13ffd15 	stw	r4,-12(fp)
   5425c:	e17ffe15 	stw	r5,-8(fp)
   54260:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   54264:	00bff9c4 	movi	r2,-25
   54268:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   5426c:	e0bffe17 	ldw	r2,-8(fp)
   54270:	10da8060 	cmpeqi	r3,r2,27137
   54274:	1800031e 	bne	r3,zero,54284 <altera_avalon_jtag_uart_ioctl+0x38>
   54278:	109a80a0 	cmpeqi	r2,r2,27138
   5427c:	1000181e 	bne	r2,zero,542e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   54280:	00002906 	br	54328 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   54284:	e0bffd17 	ldw	r2,-12(fp)
   54288:	10c00117 	ldw	r3,4(r2)
   5428c:	00a00034 	movhi	r2,32768
   54290:	10bfffc4 	addi	r2,r2,-1
   54294:	18802126 	beq	r3,r2,5431c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   54298:	e0bfff17 	ldw	r2,-4(fp)
   5429c:	10800017 	ldw	r2,0(r2)
   542a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   542a4:	e0bffc17 	ldw	r2,-16(fp)
   542a8:	10800090 	cmplti	r2,r2,2
   542ac:	1000061e 	bne	r2,zero,542c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   542b0:	e0fffc17 	ldw	r3,-16(fp)
   542b4:	00a00034 	movhi	r2,32768
   542b8:	10bfffc4 	addi	r2,r2,-1
   542bc:	18800226 	beq	r3,r2,542c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   542c0:	e0bffc17 	ldw	r2,-16(fp)
   542c4:	00000206 	br	542d0 <altera_avalon_jtag_uart_ioctl+0x84>
   542c8:	00a00034 	movhi	r2,32768
   542cc:	10bfff84 	addi	r2,r2,-2
   542d0:	e0fffd17 	ldw	r3,-12(fp)
   542d4:	18800115 	stw	r2,4(r3)
      rc = 0;
   542d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   542dc:	00000f06 	br	5431c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   542e0:	e0bffd17 	ldw	r2,-12(fp)
   542e4:	10c00117 	ldw	r3,4(r2)
   542e8:	00a00034 	movhi	r2,32768
   542ec:	10bfffc4 	addi	r2,r2,-1
   542f0:	18800c26 	beq	r3,r2,54324 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   542f4:	e0bffd17 	ldw	r2,-12(fp)
   542f8:	10c00917 	ldw	r3,36(r2)
   542fc:	e0bffd17 	ldw	r2,-12(fp)
   54300:	10800117 	ldw	r2,4(r2)
   54304:	1885803a 	cmpltu	r2,r3,r2
   54308:	10c03fcc 	andi	r3,r2,255
   5430c:	e0bfff17 	ldw	r2,-4(fp)
   54310:	10c00015 	stw	r3,0(r2)
      rc = 0;
   54314:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   54318:	00000206 	br	54324 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   5431c:	0001883a 	nop
   54320:	00000106 	br	54328 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   54324:	0001883a 	nop

  default:
    break;
  }

  return rc;
   54328:	e0bffb17 	ldw	r2,-20(fp)
}
   5432c:	e037883a 	mov	sp,fp
   54330:	df000017 	ldw	fp,0(sp)
   54334:	dec00104 	addi	sp,sp,4
   54338:	f800283a 	ret

0005433c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   5433c:	defff304 	addi	sp,sp,-52
   54340:	dfc00c15 	stw	ra,48(sp)
   54344:	df000b15 	stw	fp,44(sp)
   54348:	df000b04 	addi	fp,sp,44
   5434c:	e13ffc15 	stw	r4,-16(fp)
   54350:	e17ffd15 	stw	r5,-12(fp)
   54354:	e1bffe15 	stw	r6,-8(fp)
   54358:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   5435c:	e0bffd17 	ldw	r2,-12(fp)
   54360:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54364:	00004706 	br	54484 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   54368:	e0bffc17 	ldw	r2,-16(fp)
   5436c:	10800a17 	ldw	r2,40(r2)
   54370:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   54374:	e0bffc17 	ldw	r2,-16(fp)
   54378:	10800b17 	ldw	r2,44(r2)
   5437c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   54380:	e0fff717 	ldw	r3,-36(fp)
   54384:	e0bff817 	ldw	r2,-32(fp)
   54388:	18800536 	bltu	r3,r2,543a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   5438c:	e0fff717 	ldw	r3,-36(fp)
   54390:	e0bff817 	ldw	r2,-32(fp)
   54394:	1885c83a 	sub	r2,r3,r2
   54398:	e0bff615 	stw	r2,-40(fp)
   5439c:	00000406 	br	543b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   543a0:	00c20004 	movi	r3,2048
   543a4:	e0bff817 	ldw	r2,-32(fp)
   543a8:	1885c83a 	sub	r2,r3,r2
   543ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   543b0:	e0bff617 	ldw	r2,-40(fp)
   543b4:	10001e26 	beq	r2,zero,54430 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   543b8:	e0fffe17 	ldw	r3,-8(fp)
   543bc:	e0bff617 	ldw	r2,-40(fp)
   543c0:	1880022e 	bgeu	r3,r2,543cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   543c4:	e0bffe17 	ldw	r2,-8(fp)
   543c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   543cc:	e0bffc17 	ldw	r2,-16(fp)
   543d0:	10c00e04 	addi	r3,r2,56
   543d4:	e0bff817 	ldw	r2,-32(fp)
   543d8:	1885883a 	add	r2,r3,r2
   543dc:	e1bff617 	ldw	r6,-40(fp)
   543e0:	100b883a 	mov	r5,r2
   543e4:	e13ff517 	ldw	r4,-44(fp)
   543e8:	0048ea80 	call	48ea8 <memcpy>
      ptr   += n;
   543ec:	e0fff517 	ldw	r3,-44(fp)
   543f0:	e0bff617 	ldw	r2,-40(fp)
   543f4:	1885883a 	add	r2,r3,r2
   543f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   543fc:	e0fffe17 	ldw	r3,-8(fp)
   54400:	e0bff617 	ldw	r2,-40(fp)
   54404:	1885c83a 	sub	r2,r3,r2
   54408:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5440c:	e0fff817 	ldw	r3,-32(fp)
   54410:	e0bff617 	ldw	r2,-40(fp)
   54414:	1885883a 	add	r2,r3,r2
   54418:	10c1ffcc 	andi	r3,r2,2047
   5441c:	e0bffc17 	ldw	r2,-16(fp)
   54420:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   54424:	e0bffe17 	ldw	r2,-8(fp)
   54428:	00bfcf16 	blt	zero,r2,54368 <__alt_data_end+0xfffe2368>
   5442c:	00000106 	br	54434 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   54430:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   54434:	e0fff517 	ldw	r3,-44(fp)
   54438:	e0bffd17 	ldw	r2,-12(fp)
   5443c:	1880141e 	bne	r3,r2,54490 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   54440:	e0bfff17 	ldw	r2,-4(fp)
   54444:	1090000c 	andi	r2,r2,16384
   54448:	1000131e 	bne	r2,zero,54498 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   5444c:	0001883a 	nop
   54450:	e0bffc17 	ldw	r2,-16(fp)
   54454:	10c00a17 	ldw	r3,40(r2)
   54458:	e0bff717 	ldw	r2,-36(fp)
   5445c:	1880051e 	bne	r3,r2,54474 <altera_avalon_jtag_uart_read+0x138>
   54460:	e0bffc17 	ldw	r2,-16(fp)
   54464:	10c00917 	ldw	r3,36(r2)
   54468:	e0bffc17 	ldw	r2,-16(fp)
   5446c:	10800117 	ldw	r2,4(r2)
   54470:	18bff736 	bltu	r3,r2,54450 <__alt_data_end+0xfffe2450>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   54474:	e0bffc17 	ldw	r2,-16(fp)
   54478:	10c00a17 	ldw	r3,40(r2)
   5447c:	e0bff717 	ldw	r2,-36(fp)
   54480:	18800726 	beq	r3,r2,544a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54484:	e0bffe17 	ldw	r2,-8(fp)
   54488:	00bfb716 	blt	zero,r2,54368 <__alt_data_end+0xfffe2368>
   5448c:	00000506 	br	544a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   54490:	0001883a 	nop
   54494:	00000306 	br	544a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   54498:	0001883a 	nop
   5449c:	00000106 	br	544a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   544a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   544a4:	e0fff517 	ldw	r3,-44(fp)
   544a8:	e0bffd17 	ldw	r2,-12(fp)
   544ac:	18801826 	beq	r3,r2,54510 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   544b0:	0005303a 	rdctl	r2,status
   544b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   544b8:	e0fffb17 	ldw	r3,-20(fp)
   544bc:	00bfff84 	movi	r2,-2
   544c0:	1884703a 	and	r2,r3,r2
   544c4:	1001703a 	wrctl	status,r2
  
  return context;
   544c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   544cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   544d0:	e0bffc17 	ldw	r2,-16(fp)
   544d4:	10800817 	ldw	r2,32(r2)
   544d8:	10c00054 	ori	r3,r2,1
   544dc:	e0bffc17 	ldw	r2,-16(fp)
   544e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   544e4:	e0bffc17 	ldw	r2,-16(fp)
   544e8:	10800017 	ldw	r2,0(r2)
   544ec:	10800104 	addi	r2,r2,4
   544f0:	1007883a 	mov	r3,r2
   544f4:	e0bffc17 	ldw	r2,-16(fp)
   544f8:	10800817 	ldw	r2,32(r2)
   544fc:	18800035 	stwio	r2,0(r3)
   54500:	e0bffa17 	ldw	r2,-24(fp)
   54504:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54508:	e0bff917 	ldw	r2,-28(fp)
   5450c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   54510:	e0fff517 	ldw	r3,-44(fp)
   54514:	e0bffd17 	ldw	r2,-12(fp)
   54518:	18800426 	beq	r3,r2,5452c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   5451c:	e0fff517 	ldw	r3,-44(fp)
   54520:	e0bffd17 	ldw	r2,-12(fp)
   54524:	1885c83a 	sub	r2,r3,r2
   54528:	00000606 	br	54544 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   5452c:	e0bfff17 	ldw	r2,-4(fp)
   54530:	1090000c 	andi	r2,r2,16384
   54534:	10000226 	beq	r2,zero,54540 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   54538:	00bffd44 	movi	r2,-11
   5453c:	00000106 	br	54544 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   54540:	00bffec4 	movi	r2,-5
}
   54544:	e037883a 	mov	sp,fp
   54548:	dfc00117 	ldw	ra,4(sp)
   5454c:	df000017 	ldw	fp,0(sp)
   54550:	dec00204 	addi	sp,sp,8
   54554:	f800283a 	ret

00054558 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54558:	defff304 	addi	sp,sp,-52
   5455c:	dfc00c15 	stw	ra,48(sp)
   54560:	df000b15 	stw	fp,44(sp)
   54564:	df000b04 	addi	fp,sp,44
   54568:	e13ffc15 	stw	r4,-16(fp)
   5456c:	e17ffd15 	stw	r5,-12(fp)
   54570:	e1bffe15 	stw	r6,-8(fp)
   54574:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54578:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   5457c:	e0bffd17 	ldw	r2,-12(fp)
   54580:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54584:	00003706 	br	54664 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54588:	e0bffc17 	ldw	r2,-16(fp)
   5458c:	10800c17 	ldw	r2,48(r2)
   54590:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   54594:	e0bffc17 	ldw	r2,-16(fp)
   54598:	10800d17 	ldw	r2,52(r2)
   5459c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   545a0:	e0fff917 	ldw	r3,-28(fp)
   545a4:	e0bff517 	ldw	r2,-44(fp)
   545a8:	1880062e 	bgeu	r3,r2,545c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   545ac:	e0fff517 	ldw	r3,-44(fp)
   545b0:	e0bff917 	ldw	r2,-28(fp)
   545b4:	1885c83a 	sub	r2,r3,r2
   545b8:	10bfffc4 	addi	r2,r2,-1
   545bc:	e0bff615 	stw	r2,-40(fp)
   545c0:	00000b06 	br	545f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   545c4:	e0bff517 	ldw	r2,-44(fp)
   545c8:	10000526 	beq	r2,zero,545e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   545cc:	00c20004 	movi	r3,2048
   545d0:	e0bff917 	ldw	r2,-28(fp)
   545d4:	1885c83a 	sub	r2,r3,r2
   545d8:	e0bff615 	stw	r2,-40(fp)
   545dc:	00000406 	br	545f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   545e0:	00c1ffc4 	movi	r3,2047
   545e4:	e0bff917 	ldw	r2,-28(fp)
   545e8:	1885c83a 	sub	r2,r3,r2
   545ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   545f0:	e0bff617 	ldw	r2,-40(fp)
   545f4:	10001e26 	beq	r2,zero,54670 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   545f8:	e0fffe17 	ldw	r3,-8(fp)
   545fc:	e0bff617 	ldw	r2,-40(fp)
   54600:	1880022e 	bgeu	r3,r2,5460c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   54604:	e0bffe17 	ldw	r2,-8(fp)
   54608:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5460c:	e0bffc17 	ldw	r2,-16(fp)
   54610:	10c20e04 	addi	r3,r2,2104
   54614:	e0bff917 	ldw	r2,-28(fp)
   54618:	1885883a 	add	r2,r3,r2
   5461c:	e1bff617 	ldw	r6,-40(fp)
   54620:	e17ffd17 	ldw	r5,-12(fp)
   54624:	1009883a 	mov	r4,r2
   54628:	0048ea80 	call	48ea8 <memcpy>
      ptr   += n;
   5462c:	e0fffd17 	ldw	r3,-12(fp)
   54630:	e0bff617 	ldw	r2,-40(fp)
   54634:	1885883a 	add	r2,r3,r2
   54638:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   5463c:	e0fffe17 	ldw	r3,-8(fp)
   54640:	e0bff617 	ldw	r2,-40(fp)
   54644:	1885c83a 	sub	r2,r3,r2
   54648:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5464c:	e0fff917 	ldw	r3,-28(fp)
   54650:	e0bff617 	ldw	r2,-40(fp)
   54654:	1885883a 	add	r2,r3,r2
   54658:	10c1ffcc 	andi	r3,r2,2047
   5465c:	e0bffc17 	ldw	r2,-16(fp)
   54660:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54664:	e0bffe17 	ldw	r2,-8(fp)
   54668:	00bfc716 	blt	zero,r2,54588 <__alt_data_end+0xfffe2588>
   5466c:	00000106 	br	54674 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   54670:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54674:	0005303a 	rdctl	r2,status
   54678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5467c:	e0fffb17 	ldw	r3,-20(fp)
   54680:	00bfff84 	movi	r2,-2
   54684:	1884703a 	and	r2,r3,r2
   54688:	1001703a 	wrctl	status,r2
  
  return context;
   5468c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   54690:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54694:	e0bffc17 	ldw	r2,-16(fp)
   54698:	10800817 	ldw	r2,32(r2)
   5469c:	10c00094 	ori	r3,r2,2
   546a0:	e0bffc17 	ldw	r2,-16(fp)
   546a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   546a8:	e0bffc17 	ldw	r2,-16(fp)
   546ac:	10800017 	ldw	r2,0(r2)
   546b0:	10800104 	addi	r2,r2,4
   546b4:	1007883a 	mov	r3,r2
   546b8:	e0bffc17 	ldw	r2,-16(fp)
   546bc:	10800817 	ldw	r2,32(r2)
   546c0:	18800035 	stwio	r2,0(r3)
   546c4:	e0bffa17 	ldw	r2,-24(fp)
   546c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   546cc:	e0bff817 	ldw	r2,-32(fp)
   546d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   546d4:	e0bffe17 	ldw	r2,-8(fp)
   546d8:	0080100e 	bge	zero,r2,5471c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   546dc:	e0bfff17 	ldw	r2,-4(fp)
   546e0:	1090000c 	andi	r2,r2,16384
   546e4:	1000101e 	bne	r2,zero,54728 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   546e8:	0001883a 	nop
   546ec:	e0bffc17 	ldw	r2,-16(fp)
   546f0:	10c00d17 	ldw	r3,52(r2)
   546f4:	e0bff517 	ldw	r2,-44(fp)
   546f8:	1880051e 	bne	r3,r2,54710 <altera_avalon_jtag_uart_write+0x1b8>
   546fc:	e0bffc17 	ldw	r2,-16(fp)
   54700:	10c00917 	ldw	r3,36(r2)
   54704:	e0bffc17 	ldw	r2,-16(fp)
   54708:	10800117 	ldw	r2,4(r2)
   5470c:	18bff736 	bltu	r3,r2,546ec <__alt_data_end+0xfffe26ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   54710:	e0bffc17 	ldw	r2,-16(fp)
   54714:	10800917 	ldw	r2,36(r2)
   54718:	1000051e 	bne	r2,zero,54730 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   5471c:	e0bffe17 	ldw	r2,-8(fp)
   54720:	00bfd016 	blt	zero,r2,54664 <__alt_data_end+0xfffe2664>
   54724:	00000306 	br	54734 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   54728:	0001883a 	nop
   5472c:	00000106 	br	54734 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   54730:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   54734:	e0fffd17 	ldw	r3,-12(fp)
   54738:	e0bff717 	ldw	r2,-36(fp)
   5473c:	18800426 	beq	r3,r2,54750 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   54740:	e0fffd17 	ldw	r3,-12(fp)
   54744:	e0bff717 	ldw	r2,-36(fp)
   54748:	1885c83a 	sub	r2,r3,r2
   5474c:	00000606 	br	54768 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   54750:	e0bfff17 	ldw	r2,-4(fp)
   54754:	1090000c 	andi	r2,r2,16384
   54758:	10000226 	beq	r2,zero,54764 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   5475c:	00bffd44 	movi	r2,-11
   54760:	00000106 	br	54768 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   54764:	00bffec4 	movi	r2,-5
}
   54768:	e037883a 	mov	sp,fp
   5476c:	dfc00117 	ldw	ra,4(sp)
   54770:	df000017 	ldw	fp,0(sp)
   54774:	dec00204 	addi	sp,sp,8
   54778:	f800283a 	ret

0005477c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   5477c:	defffa04 	addi	sp,sp,-24
   54780:	dfc00515 	stw	ra,20(sp)
   54784:	df000415 	stw	fp,16(sp)
   54788:	df000404 	addi	fp,sp,16
   5478c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   54790:	0007883a 	mov	r3,zero
   54794:	e0bfff17 	ldw	r2,-4(fp)
   54798:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   5479c:	e0bfff17 	ldw	r2,-4(fp)
   547a0:	10800104 	addi	r2,r2,4
   547a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   547a8:	0005303a 	rdctl	r2,status
   547ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   547b0:	e0fffd17 	ldw	r3,-12(fp)
   547b4:	00bfff84 	movi	r2,-2
   547b8:	1884703a 	and	r2,r3,r2
   547bc:	1001703a 	wrctl	status,r2
  
  return context;
   547c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   547c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   547c8:	00556ec0 	call	556ec <alt_tick>
   547cc:	e0bffc17 	ldw	r2,-16(fp)
   547d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   547d4:	e0bffe17 	ldw	r2,-8(fp)
   547d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   547dc:	0001883a 	nop
   547e0:	e037883a 	mov	sp,fp
   547e4:	dfc00117 	ldw	ra,4(sp)
   547e8:	df000017 	ldw	fp,0(sp)
   547ec:	dec00204 	addi	sp,sp,8
   547f0:	f800283a 	ret

000547f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   547f4:	defff804 	addi	sp,sp,-32
   547f8:	dfc00715 	stw	ra,28(sp)
   547fc:	df000615 	stw	fp,24(sp)
   54800:	df000604 	addi	fp,sp,24
   54804:	e13ffc15 	stw	r4,-16(fp)
   54808:	e17ffd15 	stw	r5,-12(fp)
   5480c:	e1bffe15 	stw	r6,-8(fp)
   54810:	e1ffff15 	stw	r7,-4(fp)
   54814:	e0bfff17 	ldw	r2,-4(fp)
   54818:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   5481c:	d0a6f917 	ldw	r2,-25628(gp)
   54820:	1000021e 	bne	r2,zero,5482c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   54824:	e0bffb17 	ldw	r2,-20(fp)
   54828:	d0a6f915 	stw	r2,-25628(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   5482c:	e0bffc17 	ldw	r2,-16(fp)
   54830:	10800104 	addi	r2,r2,4
   54834:	00c001c4 	movi	r3,7
   54838:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   5483c:	d8000015 	stw	zero,0(sp)
   54840:	e1fffc17 	ldw	r7,-16(fp)
   54844:	01800174 	movhi	r6,5
   54848:	3191df04 	addi	r6,r6,18300
   5484c:	e17ffe17 	ldw	r5,-8(fp)
   54850:	e13ffd17 	ldw	r4,-12(fp)
   54854:	0054d640 	call	54d64 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   54858:	0001883a 	nop
   5485c:	e037883a 	mov	sp,fp
   54860:	dfc00117 	ldw	ra,4(sp)
   54864:	df000017 	ldw	fp,0(sp)
   54868:	dec00204 	addi	sp,sp,8
   5486c:	f800283a 	ret

00054870 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   54870:	defff504 	addi	sp,sp,-44
   54874:	df000a15 	stw	fp,40(sp)
   54878:	df000a04 	addi	fp,sp,40
   5487c:	e13ffc15 	stw	r4,-16(fp)
   54880:	e17ffd15 	stw	r5,-12(fp)
   54884:	e1bffe15 	stw	r6,-8(fp)
   54888:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   5488c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   54890:	d0a6f917 	ldw	r2,-25628(gp)
  
  if (alt_ticks_per_second ())
   54894:	10003c26 	beq	r2,zero,54988 <alt_alarm_start+0x118>
  {
    if (alarm)
   54898:	e0bffc17 	ldw	r2,-16(fp)
   5489c:	10003826 	beq	r2,zero,54980 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   548a0:	e0bffc17 	ldw	r2,-16(fp)
   548a4:	e0fffe17 	ldw	r3,-8(fp)
   548a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   548ac:	e0bffc17 	ldw	r2,-16(fp)
   548b0:	e0ffff17 	ldw	r3,-4(fp)
   548b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   548b8:	0005303a 	rdctl	r2,status
   548bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   548c0:	e0fff917 	ldw	r3,-28(fp)
   548c4:	00bfff84 	movi	r2,-2
   548c8:	1884703a 	and	r2,r3,r2
   548cc:	1001703a 	wrctl	status,r2
  
  return context;
   548d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   548d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   548d8:	d0a6fa17 	ldw	r2,-25624(gp)
      
      current_nticks = alt_nticks();
   548dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   548e0:	e0fffd17 	ldw	r3,-12(fp)
   548e4:	e0bff617 	ldw	r2,-40(fp)
   548e8:	1885883a 	add	r2,r3,r2
   548ec:	10c00044 	addi	r3,r2,1
   548f0:	e0bffc17 	ldw	r2,-16(fp)
   548f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   548f8:	e0bffc17 	ldw	r2,-16(fp)
   548fc:	10c00217 	ldw	r3,8(r2)
   54900:	e0bff617 	ldw	r2,-40(fp)
   54904:	1880042e 	bgeu	r3,r2,54918 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   54908:	e0bffc17 	ldw	r2,-16(fp)
   5490c:	00c00044 	movi	r3,1
   54910:	10c00405 	stb	r3,16(r2)
   54914:	00000206 	br	54920 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   54918:	e0bffc17 	ldw	r2,-16(fp)
   5491c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   54920:	e0bffc17 	ldw	r2,-16(fp)
   54924:	d0e01604 	addi	r3,gp,-32680
   54928:	e0fffa15 	stw	r3,-24(fp)
   5492c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54930:	e0bffb17 	ldw	r2,-20(fp)
   54934:	e0fffa17 	ldw	r3,-24(fp)
   54938:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5493c:	e0bffa17 	ldw	r2,-24(fp)
   54940:	10c00017 	ldw	r3,0(r2)
   54944:	e0bffb17 	ldw	r2,-20(fp)
   54948:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5494c:	e0bffa17 	ldw	r2,-24(fp)
   54950:	10800017 	ldw	r2,0(r2)
   54954:	e0fffb17 	ldw	r3,-20(fp)
   54958:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5495c:	e0bffa17 	ldw	r2,-24(fp)
   54960:	e0fffb17 	ldw	r3,-20(fp)
   54964:	10c00015 	stw	r3,0(r2)
   54968:	e0bff817 	ldw	r2,-32(fp)
   5496c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54970:	e0bff717 	ldw	r2,-36(fp)
   54974:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   54978:	0005883a 	mov	r2,zero
   5497c:	00000306 	br	5498c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   54980:	00bffa84 	movi	r2,-22
   54984:	00000106 	br	5498c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   54988:	00bfde84 	movi	r2,-134
  }
}
   5498c:	e037883a 	mov	sp,fp
   54990:	df000017 	ldw	fp,0(sp)
   54994:	dec00104 	addi	sp,sp,4
   54998:	f800283a 	ret

0005499c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   5499c:	defffa04 	addi	sp,sp,-24
   549a0:	dfc00515 	stw	ra,20(sp)
   549a4:	df000415 	stw	fp,16(sp)
   549a8:	df000404 	addi	fp,sp,16
   549ac:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   549b0:	00800244 	movi	r2,9
   549b4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   549b8:	014003f4 	movhi	r5,15
   549bc:	29509004 	addi	r5,r5,16960
   549c0:	e13ffd17 	ldw	r4,-12(fp)
   549c4:	0040eec0 	call	40eec <__mulsi3>
   549c8:	100b883a 	mov	r5,r2
   549cc:	0100bef4 	movhi	r4,763
   549d0:	213c2004 	addi	r4,r4,-3968
   549d4:	00406f80 	call	406f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   549d8:	100b883a 	mov	r5,r2
   549dc:	01200034 	movhi	r4,32768
   549e0:	213fffc4 	addi	r4,r4,-1
   549e4:	00406f80 	call	406f8 <__udivsi3>
   549e8:	100b883a 	mov	r5,r2
   549ec:	e13fff17 	ldw	r4,-4(fp)
   549f0:	00406f80 	call	406f8 <__udivsi3>
   549f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   549f8:	e0bffe17 	ldw	r2,-8(fp)
   549fc:	10002a26 	beq	r2,zero,54aa8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   54a00:	e03ffc15 	stw	zero,-16(fp)
   54a04:	00001706 	br	54a64 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   54a08:	00a00034 	movhi	r2,32768
   54a0c:	10bfffc4 	addi	r2,r2,-1
   54a10:	10bfffc4 	addi	r2,r2,-1
   54a14:	103ffe1e 	bne	r2,zero,54a10 <__alt_data_end+0xfffe2a10>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   54a18:	014003f4 	movhi	r5,15
   54a1c:	29509004 	addi	r5,r5,16960
   54a20:	e13ffd17 	ldw	r4,-12(fp)
   54a24:	0040eec0 	call	40eec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   54a28:	100b883a 	mov	r5,r2
   54a2c:	0100bef4 	movhi	r4,763
   54a30:	213c2004 	addi	r4,r4,-3968
   54a34:	00406f80 	call	406f8 <__udivsi3>
   54a38:	100b883a 	mov	r5,r2
   54a3c:	01200034 	movhi	r4,32768
   54a40:	213fffc4 	addi	r4,r4,-1
   54a44:	00406f80 	call	406f8 <__udivsi3>
   54a48:	1007883a 	mov	r3,r2
   54a4c:	e0bfff17 	ldw	r2,-4(fp)
   54a50:	10c5c83a 	sub	r2,r2,r3
   54a54:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   54a58:	e0bffc17 	ldw	r2,-16(fp)
   54a5c:	10800044 	addi	r2,r2,1
   54a60:	e0bffc15 	stw	r2,-16(fp)
   54a64:	e0fffc17 	ldw	r3,-16(fp)
   54a68:	e0bffe17 	ldw	r2,-8(fp)
   54a6c:	18bfe616 	blt	r3,r2,54a08 <__alt_data_end+0xfffe2a08>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   54a70:	014003f4 	movhi	r5,15
   54a74:	29509004 	addi	r5,r5,16960
   54a78:	e13ffd17 	ldw	r4,-12(fp)
   54a7c:	0040eec0 	call	40eec <__mulsi3>
   54a80:	100b883a 	mov	r5,r2
   54a84:	0100bef4 	movhi	r4,763
   54a88:	213c2004 	addi	r4,r4,-3968
   54a8c:	00406f80 	call	406f8 <__udivsi3>
   54a90:	e17fff17 	ldw	r5,-4(fp)
   54a94:	1009883a 	mov	r4,r2
   54a98:	0040eec0 	call	40eec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   54a9c:	10bfffc4 	addi	r2,r2,-1
   54aa0:	103ffe1e 	bne	r2,zero,54a9c <__alt_data_end+0xfffe2a9c>
   54aa4:	00000d06 	br	54adc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   54aa8:	014003f4 	movhi	r5,15
   54aac:	29509004 	addi	r5,r5,16960
   54ab0:	e13ffd17 	ldw	r4,-12(fp)
   54ab4:	0040eec0 	call	40eec <__mulsi3>
   54ab8:	100b883a 	mov	r5,r2
   54abc:	0100bef4 	movhi	r4,763
   54ac0:	213c2004 	addi	r4,r4,-3968
   54ac4:	00406f80 	call	406f8 <__udivsi3>
   54ac8:	e17fff17 	ldw	r5,-4(fp)
   54acc:	1009883a 	mov	r4,r2
   54ad0:	0040eec0 	call	40eec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   54ad4:	10bfffc4 	addi	r2,r2,-1
   54ad8:	00bffe16 	blt	zero,r2,54ad4 <__alt_data_end+0xfffe2ad4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   54adc:	0005883a 	mov	r2,zero
}
   54ae0:	e037883a 	mov	sp,fp
   54ae4:	dfc00117 	ldw	ra,4(sp)
   54ae8:	df000017 	ldw	fp,0(sp)
   54aec:	dec00204 	addi	sp,sp,8
   54af0:	f800283a 	ret

00054af4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   54af4:	deffff04 	addi	sp,sp,-4
   54af8:	df000015 	stw	fp,0(sp)
   54afc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   54b00:	0001883a 	nop
   54b04:	e037883a 	mov	sp,fp
   54b08:	df000017 	ldw	fp,0(sp)
   54b0c:	dec00104 	addi	sp,sp,4
   54b10:	f800283a 	ret

00054b14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54b14:	defffe04 	addi	sp,sp,-8
   54b18:	dfc00115 	stw	ra,4(sp)
   54b1c:	df000015 	stw	fp,0(sp)
   54b20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54b24:	d0a01117 	ldw	r2,-32700(gp)
   54b28:	10000326 	beq	r2,zero,54b38 <alt_get_errno+0x24>
   54b2c:	d0a01117 	ldw	r2,-32700(gp)
   54b30:	103ee83a 	callr	r2
   54b34:	00000106 	br	54b3c <alt_get_errno+0x28>
   54b38:	d0a6f404 	addi	r2,gp,-25648
}
   54b3c:	e037883a 	mov	sp,fp
   54b40:	dfc00117 	ldw	ra,4(sp)
   54b44:	df000017 	ldw	fp,0(sp)
   54b48:	dec00204 	addi	sp,sp,8
   54b4c:	f800283a 	ret

00054b50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   54b50:	defffa04 	addi	sp,sp,-24
   54b54:	dfc00515 	stw	ra,20(sp)
   54b58:	df000415 	stw	fp,16(sp)
   54b5c:	df000404 	addi	fp,sp,16
   54b60:	e13ffe15 	stw	r4,-8(fp)
   54b64:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   54b68:	e0bffe17 	ldw	r2,-8(fp)
   54b6c:	10000326 	beq	r2,zero,54b7c <alt_dev_llist_insert+0x2c>
   54b70:	e0bffe17 	ldw	r2,-8(fp)
   54b74:	10800217 	ldw	r2,8(r2)
   54b78:	1000061e 	bne	r2,zero,54b94 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   54b7c:	0054b140 	call	54b14 <alt_get_errno>
   54b80:	1007883a 	mov	r3,r2
   54b84:	00800584 	movi	r2,22
   54b88:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   54b8c:	00bffa84 	movi	r2,-22
   54b90:	00001306 	br	54be0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   54b94:	e0bffe17 	ldw	r2,-8(fp)
   54b98:	e0ffff17 	ldw	r3,-4(fp)
   54b9c:	e0fffc15 	stw	r3,-16(fp)
   54ba0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54ba4:	e0bffd17 	ldw	r2,-12(fp)
   54ba8:	e0fffc17 	ldw	r3,-16(fp)
   54bac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   54bb0:	e0bffc17 	ldw	r2,-16(fp)
   54bb4:	10c00017 	ldw	r3,0(r2)
   54bb8:	e0bffd17 	ldw	r2,-12(fp)
   54bbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   54bc0:	e0bffc17 	ldw	r2,-16(fp)
   54bc4:	10800017 	ldw	r2,0(r2)
   54bc8:	e0fffd17 	ldw	r3,-12(fp)
   54bcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   54bd0:	e0bffc17 	ldw	r2,-16(fp)
   54bd4:	e0fffd17 	ldw	r3,-12(fp)
   54bd8:	10c00015 	stw	r3,0(r2)

  return 0;  
   54bdc:	0005883a 	mov	r2,zero
}
   54be0:	e037883a 	mov	sp,fp
   54be4:	dfc00117 	ldw	ra,4(sp)
   54be8:	df000017 	ldw	fp,0(sp)
   54bec:	dec00204 	addi	sp,sp,8
   54bf0:	f800283a 	ret

00054bf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   54bf4:	defffd04 	addi	sp,sp,-12
   54bf8:	dfc00215 	stw	ra,8(sp)
   54bfc:	df000115 	stw	fp,4(sp)
   54c00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   54c04:	00800174 	movhi	r2,5
   54c08:	10978404 	addi	r2,r2,24080
   54c0c:	e0bfff15 	stw	r2,-4(fp)
   54c10:	00000606 	br	54c2c <_do_ctors+0x38>
        (*ctor) (); 
   54c14:	e0bfff17 	ldw	r2,-4(fp)
   54c18:	10800017 	ldw	r2,0(r2)
   54c1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   54c20:	e0bfff17 	ldw	r2,-4(fp)
   54c24:	10bfff04 	addi	r2,r2,-4
   54c28:	e0bfff15 	stw	r2,-4(fp)
   54c2c:	e0ffff17 	ldw	r3,-4(fp)
   54c30:	00800174 	movhi	r2,5
   54c34:	10978504 	addi	r2,r2,24084
   54c38:	18bff62e 	bgeu	r3,r2,54c14 <__alt_data_end+0xfffe2c14>
        (*ctor) (); 
}
   54c3c:	0001883a 	nop
   54c40:	e037883a 	mov	sp,fp
   54c44:	dfc00117 	ldw	ra,4(sp)
   54c48:	df000017 	ldw	fp,0(sp)
   54c4c:	dec00204 	addi	sp,sp,8
   54c50:	f800283a 	ret

00054c54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   54c54:	defffd04 	addi	sp,sp,-12
   54c58:	dfc00215 	stw	ra,8(sp)
   54c5c:	df000115 	stw	fp,4(sp)
   54c60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   54c64:	00800174 	movhi	r2,5
   54c68:	10978404 	addi	r2,r2,24080
   54c6c:	e0bfff15 	stw	r2,-4(fp)
   54c70:	00000606 	br	54c8c <_do_dtors+0x38>
        (*dtor) (); 
   54c74:	e0bfff17 	ldw	r2,-4(fp)
   54c78:	10800017 	ldw	r2,0(r2)
   54c7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   54c80:	e0bfff17 	ldw	r2,-4(fp)
   54c84:	10bfff04 	addi	r2,r2,-4
   54c88:	e0bfff15 	stw	r2,-4(fp)
   54c8c:	e0ffff17 	ldw	r3,-4(fp)
   54c90:	00800174 	movhi	r2,5
   54c94:	10978504 	addi	r2,r2,24084
   54c98:	18bff62e 	bgeu	r3,r2,54c74 <__alt_data_end+0xfffe2c74>
        (*dtor) (); 
}
   54c9c:	0001883a 	nop
   54ca0:	e037883a 	mov	sp,fp
   54ca4:	dfc00117 	ldw	ra,4(sp)
   54ca8:	df000017 	ldw	fp,0(sp)
   54cac:	dec00204 	addi	sp,sp,8
   54cb0:	f800283a 	ret

00054cb4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   54cb4:	defffa04 	addi	sp,sp,-24
   54cb8:	dfc00515 	stw	ra,20(sp)
   54cbc:	df000415 	stw	fp,16(sp)
   54cc0:	df000404 	addi	fp,sp,16
   54cc4:	e13ffe15 	stw	r4,-8(fp)
   54cc8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   54ccc:	e0bfff17 	ldw	r2,-4(fp)
   54cd0:	10800017 	ldw	r2,0(r2)
   54cd4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   54cd8:	e13ffe17 	ldw	r4,-8(fp)
   54cdc:	00411380 	call	41138 <strlen>
   54ce0:	10800044 	addi	r2,r2,1
   54ce4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54ce8:	00000d06 	br	54d20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   54cec:	e0bffc17 	ldw	r2,-16(fp)
   54cf0:	10800217 	ldw	r2,8(r2)
   54cf4:	e0fffd17 	ldw	r3,-12(fp)
   54cf8:	180d883a 	mov	r6,r3
   54cfc:	e17ffe17 	ldw	r5,-8(fp)
   54d00:	1009883a 	mov	r4,r2
   54d04:	0055acc0 	call	55acc <memcmp>
   54d08:	1000021e 	bne	r2,zero,54d14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   54d0c:	e0bffc17 	ldw	r2,-16(fp)
   54d10:	00000706 	br	54d30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   54d14:	e0bffc17 	ldw	r2,-16(fp)
   54d18:	10800017 	ldw	r2,0(r2)
   54d1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54d20:	e0fffc17 	ldw	r3,-16(fp)
   54d24:	e0bfff17 	ldw	r2,-4(fp)
   54d28:	18bff01e 	bne	r3,r2,54cec <__alt_data_end+0xfffe2cec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   54d2c:	0005883a 	mov	r2,zero
}
   54d30:	e037883a 	mov	sp,fp
   54d34:	dfc00117 	ldw	ra,4(sp)
   54d38:	df000017 	ldw	fp,0(sp)
   54d3c:	dec00204 	addi	sp,sp,8
   54d40:	f800283a 	ret

00054d44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   54d44:	deffff04 	addi	sp,sp,-4
   54d48:	df000015 	stw	fp,0(sp)
   54d4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   54d50:	0001883a 	nop
   54d54:	e037883a 	mov	sp,fp
   54d58:	df000017 	ldw	fp,0(sp)
   54d5c:	dec00104 	addi	sp,sp,4
   54d60:	f800283a 	ret

00054d64 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54d64:	defff904 	addi	sp,sp,-28
   54d68:	dfc00615 	stw	ra,24(sp)
   54d6c:	df000515 	stw	fp,20(sp)
   54d70:	df000504 	addi	fp,sp,20
   54d74:	e13ffc15 	stw	r4,-16(fp)
   54d78:	e17ffd15 	stw	r5,-12(fp)
   54d7c:	e1bffe15 	stw	r6,-8(fp)
   54d80:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   54d84:	e0800217 	ldw	r2,8(fp)
   54d88:	d8800015 	stw	r2,0(sp)
   54d8c:	e1ffff17 	ldw	r7,-4(fp)
   54d90:	e1bffe17 	ldw	r6,-8(fp)
   54d94:	e17ffd17 	ldw	r5,-12(fp)
   54d98:	e13ffc17 	ldw	r4,-16(fp)
   54d9c:	0054f140 	call	54f14 <alt_iic_isr_register>
}  
   54da0:	e037883a 	mov	sp,fp
   54da4:	dfc00117 	ldw	ra,4(sp)
   54da8:	df000017 	ldw	fp,0(sp)
   54dac:	dec00204 	addi	sp,sp,8
   54db0:	f800283a 	ret

00054db4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   54db4:	defff904 	addi	sp,sp,-28
   54db8:	df000615 	stw	fp,24(sp)
   54dbc:	df000604 	addi	fp,sp,24
   54dc0:	e13ffe15 	stw	r4,-8(fp)
   54dc4:	e17fff15 	stw	r5,-4(fp)
   54dc8:	e0bfff17 	ldw	r2,-4(fp)
   54dcc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54dd0:	0005303a 	rdctl	r2,status
   54dd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54dd8:	e0fffb17 	ldw	r3,-20(fp)
   54ddc:	00bfff84 	movi	r2,-2
   54de0:	1884703a 	and	r2,r3,r2
   54de4:	1001703a 	wrctl	status,r2
  
  return context;
   54de8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54dec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   54df0:	00c00044 	movi	r3,1
   54df4:	e0bffa17 	ldw	r2,-24(fp)
   54df8:	1884983a 	sll	r2,r3,r2
   54dfc:	1007883a 	mov	r3,r2
   54e00:	d0a6f817 	ldw	r2,-25632(gp)
   54e04:	1884b03a 	or	r2,r3,r2
   54e08:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54e0c:	d0a6f817 	ldw	r2,-25632(gp)
   54e10:	100170fa 	wrctl	ienable,r2
   54e14:	e0bffc17 	ldw	r2,-16(fp)
   54e18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54e1c:	e0bffd17 	ldw	r2,-12(fp)
   54e20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54e24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   54e28:	0001883a 	nop
}
   54e2c:	e037883a 	mov	sp,fp
   54e30:	df000017 	ldw	fp,0(sp)
   54e34:	dec00104 	addi	sp,sp,4
   54e38:	f800283a 	ret

00054e3c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   54e3c:	defff904 	addi	sp,sp,-28
   54e40:	df000615 	stw	fp,24(sp)
   54e44:	df000604 	addi	fp,sp,24
   54e48:	e13ffe15 	stw	r4,-8(fp)
   54e4c:	e17fff15 	stw	r5,-4(fp)
   54e50:	e0bfff17 	ldw	r2,-4(fp)
   54e54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54e58:	0005303a 	rdctl	r2,status
   54e5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54e60:	e0fffb17 	ldw	r3,-20(fp)
   54e64:	00bfff84 	movi	r2,-2
   54e68:	1884703a 	and	r2,r3,r2
   54e6c:	1001703a 	wrctl	status,r2
  
  return context;
   54e70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54e74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   54e78:	00c00044 	movi	r3,1
   54e7c:	e0bffa17 	ldw	r2,-24(fp)
   54e80:	1884983a 	sll	r2,r3,r2
   54e84:	0084303a 	nor	r2,zero,r2
   54e88:	1007883a 	mov	r3,r2
   54e8c:	d0a6f817 	ldw	r2,-25632(gp)
   54e90:	1884703a 	and	r2,r3,r2
   54e94:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54e98:	d0a6f817 	ldw	r2,-25632(gp)
   54e9c:	100170fa 	wrctl	ienable,r2
   54ea0:	e0bffc17 	ldw	r2,-16(fp)
   54ea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54ea8:	e0bffd17 	ldw	r2,-12(fp)
   54eac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54eb0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   54eb4:	0001883a 	nop
}
   54eb8:	e037883a 	mov	sp,fp
   54ebc:	df000017 	ldw	fp,0(sp)
   54ec0:	dec00104 	addi	sp,sp,4
   54ec4:	f800283a 	ret

00054ec8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   54ec8:	defffc04 	addi	sp,sp,-16
   54ecc:	df000315 	stw	fp,12(sp)
   54ed0:	df000304 	addi	fp,sp,12
   54ed4:	e13ffe15 	stw	r4,-8(fp)
   54ed8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   54edc:	000530fa 	rdctl	r2,ienable
   54ee0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   54ee4:	00c00044 	movi	r3,1
   54ee8:	e0bfff17 	ldw	r2,-4(fp)
   54eec:	1884983a 	sll	r2,r3,r2
   54ef0:	1007883a 	mov	r3,r2
   54ef4:	e0bffd17 	ldw	r2,-12(fp)
   54ef8:	1884703a 	and	r2,r3,r2
   54efc:	1004c03a 	cmpne	r2,r2,zero
   54f00:	10803fcc 	andi	r2,r2,255
}
   54f04:	e037883a 	mov	sp,fp
   54f08:	df000017 	ldw	fp,0(sp)
   54f0c:	dec00104 	addi	sp,sp,4
   54f10:	f800283a 	ret

00054f14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54f14:	defff504 	addi	sp,sp,-44
   54f18:	dfc00a15 	stw	ra,40(sp)
   54f1c:	df000915 	stw	fp,36(sp)
   54f20:	df000904 	addi	fp,sp,36
   54f24:	e13ffc15 	stw	r4,-16(fp)
   54f28:	e17ffd15 	stw	r5,-12(fp)
   54f2c:	e1bffe15 	stw	r6,-8(fp)
   54f30:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   54f34:	00bffa84 	movi	r2,-22
   54f38:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   54f3c:	e0bffd17 	ldw	r2,-12(fp)
   54f40:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54f44:	e0bff817 	ldw	r2,-32(fp)
   54f48:	10800808 	cmpgei	r2,r2,32
   54f4c:	1000271e 	bne	r2,zero,54fec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54f50:	0005303a 	rdctl	r2,status
   54f54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54f58:	e0fffb17 	ldw	r3,-20(fp)
   54f5c:	00bfff84 	movi	r2,-2
   54f60:	1884703a 	and	r2,r3,r2
   54f64:	1001703a 	wrctl	status,r2
  
  return context;
   54f68:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   54f6c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   54f70:	008001b4 	movhi	r2,6
   54f74:	10a62c04 	addi	r2,r2,-26448
   54f78:	e0fff817 	ldw	r3,-32(fp)
   54f7c:	180690fa 	slli	r3,r3,3
   54f80:	10c5883a 	add	r2,r2,r3
   54f84:	e0fffe17 	ldw	r3,-8(fp)
   54f88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   54f8c:	008001b4 	movhi	r2,6
   54f90:	10a62c04 	addi	r2,r2,-26448
   54f94:	e0fff817 	ldw	r3,-32(fp)
   54f98:	180690fa 	slli	r3,r3,3
   54f9c:	10c5883a 	add	r2,r2,r3
   54fa0:	10800104 	addi	r2,r2,4
   54fa4:	e0ffff17 	ldw	r3,-4(fp)
   54fa8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   54fac:	e0bffe17 	ldw	r2,-8(fp)
   54fb0:	10000526 	beq	r2,zero,54fc8 <alt_iic_isr_register+0xb4>
   54fb4:	e0bff817 	ldw	r2,-32(fp)
   54fb8:	100b883a 	mov	r5,r2
   54fbc:	e13ffc17 	ldw	r4,-16(fp)
   54fc0:	0054db40 	call	54db4 <alt_ic_irq_enable>
   54fc4:	00000406 	br	54fd8 <alt_iic_isr_register+0xc4>
   54fc8:	e0bff817 	ldw	r2,-32(fp)
   54fcc:	100b883a 	mov	r5,r2
   54fd0:	e13ffc17 	ldw	r4,-16(fp)
   54fd4:	0054e3c0 	call	54e3c <alt_ic_irq_disable>
   54fd8:	e0bff715 	stw	r2,-36(fp)
   54fdc:	e0bffa17 	ldw	r2,-24(fp)
   54fe0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54fe4:	e0bff917 	ldw	r2,-28(fp)
   54fe8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   54fec:	e0bff717 	ldw	r2,-36(fp)
}
   54ff0:	e037883a 	mov	sp,fp
   54ff4:	dfc00117 	ldw	ra,4(sp)
   54ff8:	df000017 	ldw	fp,0(sp)
   54ffc:	dec00204 	addi	sp,sp,8
   55000:	f800283a 	ret

00055004 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   55004:	defff804 	addi	sp,sp,-32
   55008:	dfc00715 	stw	ra,28(sp)
   5500c:	df000615 	stw	fp,24(sp)
   55010:	dc000515 	stw	r16,20(sp)
   55014:	df000604 	addi	fp,sp,24
   55018:	e13ffb15 	stw	r4,-20(fp)
   5501c:	e17ffc15 	stw	r5,-16(fp)
   55020:	e1bffd15 	stw	r6,-12(fp)
   55024:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   55028:	e1bffe17 	ldw	r6,-8(fp)
   5502c:	e17ffd17 	ldw	r5,-12(fp)
   55030:	e13ffc17 	ldw	r4,-16(fp)
   55034:	005528c0 	call	5528c <open>
   55038:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   5503c:	e0bffa17 	ldw	r2,-24(fp)
   55040:	10002216 	blt	r2,zero,550cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   55044:	04000174 	movhi	r16,5
   55048:	841aa004 	addi	r16,r16,27264
   5504c:	e0bffa17 	ldw	r2,-24(fp)
   55050:	01400304 	movi	r5,12
   55054:	1009883a 	mov	r4,r2
   55058:	0040eec0 	call	40eec <__mulsi3>
   5505c:	8085883a 	add	r2,r16,r2
   55060:	10c00017 	ldw	r3,0(r2)
   55064:	e0bffb17 	ldw	r2,-20(fp)
   55068:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   5506c:	04000174 	movhi	r16,5
   55070:	841aa004 	addi	r16,r16,27264
   55074:	e0bffa17 	ldw	r2,-24(fp)
   55078:	01400304 	movi	r5,12
   5507c:	1009883a 	mov	r4,r2
   55080:	0040eec0 	call	40eec <__mulsi3>
   55084:	8085883a 	add	r2,r16,r2
   55088:	10800104 	addi	r2,r2,4
   5508c:	10c00017 	ldw	r3,0(r2)
   55090:	e0bffb17 	ldw	r2,-20(fp)
   55094:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   55098:	04000174 	movhi	r16,5
   5509c:	841aa004 	addi	r16,r16,27264
   550a0:	e0bffa17 	ldw	r2,-24(fp)
   550a4:	01400304 	movi	r5,12
   550a8:	1009883a 	mov	r4,r2
   550ac:	0040eec0 	call	40eec <__mulsi3>
   550b0:	8085883a 	add	r2,r16,r2
   550b4:	10800204 	addi	r2,r2,8
   550b8:	10c00017 	ldw	r3,0(r2)
   550bc:	e0bffb17 	ldw	r2,-20(fp)
   550c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   550c4:	e13ffa17 	ldw	r4,-24(fp)
   550c8:	0051db00 	call	51db0 <alt_release_fd>
  }
} 
   550cc:	0001883a 	nop
   550d0:	e6ffff04 	addi	sp,fp,-4
   550d4:	dfc00217 	ldw	ra,8(sp)
   550d8:	df000117 	ldw	fp,4(sp)
   550dc:	dc000017 	ldw	r16,0(sp)
   550e0:	dec00304 	addi	sp,sp,12
   550e4:	f800283a 	ret

000550e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   550e8:	defffb04 	addi	sp,sp,-20
   550ec:	dfc00415 	stw	ra,16(sp)
   550f0:	df000315 	stw	fp,12(sp)
   550f4:	df000304 	addi	fp,sp,12
   550f8:	e13ffd15 	stw	r4,-12(fp)
   550fc:	e17ffe15 	stw	r5,-8(fp)
   55100:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   55104:	01c07fc4 	movi	r7,511
   55108:	01800044 	movi	r6,1
   5510c:	e17ffd17 	ldw	r5,-12(fp)
   55110:	01000174 	movhi	r4,5
   55114:	211aa304 	addi	r4,r4,27276
   55118:	00550040 	call	55004 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   5511c:	01c07fc4 	movi	r7,511
   55120:	000d883a 	mov	r6,zero
   55124:	e17ffe17 	ldw	r5,-8(fp)
   55128:	01000174 	movhi	r4,5
   5512c:	211aa004 	addi	r4,r4,27264
   55130:	00550040 	call	55004 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   55134:	01c07fc4 	movi	r7,511
   55138:	01800044 	movi	r6,1
   5513c:	e17fff17 	ldw	r5,-4(fp)
   55140:	01000174 	movhi	r4,5
   55144:	211aa604 	addi	r4,r4,27288
   55148:	00550040 	call	55004 <alt_open_fd>
}  
   5514c:	0001883a 	nop
   55150:	e037883a 	mov	sp,fp
   55154:	dfc00117 	ldw	ra,4(sp)
   55158:	df000017 	ldw	fp,0(sp)
   5515c:	dec00204 	addi	sp,sp,8
   55160:	f800283a 	ret

00055164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   55164:	defffe04 	addi	sp,sp,-8
   55168:	dfc00115 	stw	ra,4(sp)
   5516c:	df000015 	stw	fp,0(sp)
   55170:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   55174:	d0a01117 	ldw	r2,-32700(gp)
   55178:	10000326 	beq	r2,zero,55188 <alt_get_errno+0x24>
   5517c:	d0a01117 	ldw	r2,-32700(gp)
   55180:	103ee83a 	callr	r2
   55184:	00000106 	br	5518c <alt_get_errno+0x28>
   55188:	d0a6f404 	addi	r2,gp,-25648
}
   5518c:	e037883a 	mov	sp,fp
   55190:	dfc00117 	ldw	ra,4(sp)
   55194:	df000017 	ldw	fp,0(sp)
   55198:	dec00204 	addi	sp,sp,8
   5519c:	f800283a 	ret

000551a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   551a0:	defffb04 	addi	sp,sp,-20
   551a4:	dfc00415 	stw	ra,16(sp)
   551a8:	df000315 	stw	fp,12(sp)
   551ac:	dc000215 	stw	r16,8(sp)
   551b0:	df000304 	addi	fp,sp,12
   551b4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   551b8:	e0bffe17 	ldw	r2,-8(fp)
   551bc:	10800217 	ldw	r2,8(r2)
   551c0:	10d00034 	orhi	r3,r2,16384
   551c4:	e0bffe17 	ldw	r2,-8(fp)
   551c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   551cc:	e03ffd15 	stw	zero,-12(fp)
   551d0:	00002306 	br	55260 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   551d4:	04000174 	movhi	r16,5
   551d8:	841aa004 	addi	r16,r16,27264
   551dc:	e0bffd17 	ldw	r2,-12(fp)
   551e0:	01400304 	movi	r5,12
   551e4:	1009883a 	mov	r4,r2
   551e8:	0040eec0 	call	40eec <__mulsi3>
   551ec:	8085883a 	add	r2,r16,r2
   551f0:	10c00017 	ldw	r3,0(r2)
   551f4:	e0bffe17 	ldw	r2,-8(fp)
   551f8:	10800017 	ldw	r2,0(r2)
   551fc:	1880151e 	bne	r3,r2,55254 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   55200:	04000174 	movhi	r16,5
   55204:	841aa004 	addi	r16,r16,27264
   55208:	e0bffd17 	ldw	r2,-12(fp)
   5520c:	01400304 	movi	r5,12
   55210:	1009883a 	mov	r4,r2
   55214:	0040eec0 	call	40eec <__mulsi3>
   55218:	8085883a 	add	r2,r16,r2
   5521c:	10800204 	addi	r2,r2,8
   55220:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   55224:	10000b0e 	bge	r2,zero,55254 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   55228:	01400304 	movi	r5,12
   5522c:	e13ffd17 	ldw	r4,-12(fp)
   55230:	0040eec0 	call	40eec <__mulsi3>
   55234:	1007883a 	mov	r3,r2
   55238:	00800174 	movhi	r2,5
   5523c:	109aa004 	addi	r2,r2,27264
   55240:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   55244:	e0bffe17 	ldw	r2,-8(fp)
   55248:	18800226 	beq	r3,r2,55254 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   5524c:	00bffcc4 	movi	r2,-13
   55250:	00000806 	br	55274 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   55254:	e0bffd17 	ldw	r2,-12(fp)
   55258:	10800044 	addi	r2,r2,1
   5525c:	e0bffd15 	stw	r2,-12(fp)
   55260:	d0a01017 	ldw	r2,-32704(gp)
   55264:	1007883a 	mov	r3,r2
   55268:	e0bffd17 	ldw	r2,-12(fp)
   5526c:	18bfd92e 	bgeu	r3,r2,551d4 <__alt_data_end+0xfffe31d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   55270:	0005883a 	mov	r2,zero
}
   55274:	e6ffff04 	addi	sp,fp,-4
   55278:	dfc00217 	ldw	ra,8(sp)
   5527c:	df000117 	ldw	fp,4(sp)
   55280:	dc000017 	ldw	r16,0(sp)
   55284:	dec00304 	addi	sp,sp,12
   55288:	f800283a 	ret

0005528c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   5528c:	defff604 	addi	sp,sp,-40
   55290:	dfc00915 	stw	ra,36(sp)
   55294:	df000815 	stw	fp,32(sp)
   55298:	df000804 	addi	fp,sp,32
   5529c:	e13ffd15 	stw	r4,-12(fp)
   552a0:	e17ffe15 	stw	r5,-8(fp)
   552a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   552a8:	00bfffc4 	movi	r2,-1
   552ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   552b0:	00bffb44 	movi	r2,-19
   552b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   552b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   552bc:	d1600e04 	addi	r5,gp,-32712
   552c0:	e13ffd17 	ldw	r4,-12(fp)
   552c4:	0054cb40 	call	54cb4 <alt_find_dev>
   552c8:	e0bff815 	stw	r2,-32(fp)
   552cc:	e0bff817 	ldw	r2,-32(fp)
   552d0:	1000051e 	bne	r2,zero,552e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   552d4:	e13ffd17 	ldw	r4,-12(fp)
   552d8:	00558180 	call	55818 <alt_find_file>
   552dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   552e0:	00800044 	movi	r2,1
   552e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   552e8:	e0bff817 	ldw	r2,-32(fp)
   552ec:	10002b26 	beq	r2,zero,5539c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   552f0:	e13ff817 	ldw	r4,-32(fp)
   552f4:	00559200 	call	55920 <alt_get_fd>
   552f8:	e0bff915 	stw	r2,-28(fp)
   552fc:	e0bff917 	ldw	r2,-28(fp)
   55300:	1000030e 	bge	r2,zero,55310 <open+0x84>
    {
      status = index;
   55304:	e0bff917 	ldw	r2,-28(fp)
   55308:	e0bffa15 	stw	r2,-24(fp)
   5530c:	00002506 	br	553a4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   55310:	01400304 	movi	r5,12
   55314:	e13ff917 	ldw	r4,-28(fp)
   55318:	0040eec0 	call	40eec <__mulsi3>
   5531c:	1007883a 	mov	r3,r2
   55320:	00800174 	movhi	r2,5
   55324:	109aa004 	addi	r2,r2,27264
   55328:	1885883a 	add	r2,r3,r2
   5532c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   55330:	e0fffe17 	ldw	r3,-8(fp)
   55334:	00900034 	movhi	r2,16384
   55338:	10bfffc4 	addi	r2,r2,-1
   5533c:	1886703a 	and	r3,r3,r2
   55340:	e0bffc17 	ldw	r2,-16(fp)
   55344:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   55348:	e0bffb17 	ldw	r2,-20(fp)
   5534c:	1000051e 	bne	r2,zero,55364 <open+0xd8>
   55350:	e13ffc17 	ldw	r4,-16(fp)
   55354:	00551a00 	call	551a0 <alt_file_locked>
   55358:	e0bffa15 	stw	r2,-24(fp)
   5535c:	e0bffa17 	ldw	r2,-24(fp)
   55360:	10001016 	blt	r2,zero,553a4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   55364:	e0bff817 	ldw	r2,-32(fp)
   55368:	10800317 	ldw	r2,12(r2)
   5536c:	10000826 	beq	r2,zero,55390 <open+0x104>
   55370:	e0bff817 	ldw	r2,-32(fp)
   55374:	10800317 	ldw	r2,12(r2)
   55378:	e1ffff17 	ldw	r7,-4(fp)
   5537c:	e1bffe17 	ldw	r6,-8(fp)
   55380:	e17ffd17 	ldw	r5,-12(fp)
   55384:	e13ffc17 	ldw	r4,-16(fp)
   55388:	103ee83a 	callr	r2
   5538c:	00000106 	br	55394 <open+0x108>
   55390:	0005883a 	mov	r2,zero
   55394:	e0bffa15 	stw	r2,-24(fp)
   55398:	00000206 	br	553a4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   5539c:	00bffb44 	movi	r2,-19
   553a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   553a4:	e0bffa17 	ldw	r2,-24(fp)
   553a8:	1000090e 	bge	r2,zero,553d0 <open+0x144>
  {
    alt_release_fd (index);  
   553ac:	e13ff917 	ldw	r4,-28(fp)
   553b0:	0051db00 	call	51db0 <alt_release_fd>
    ALT_ERRNO = -status;
   553b4:	00551640 	call	55164 <alt_get_errno>
   553b8:	1007883a 	mov	r3,r2
   553bc:	e0bffa17 	ldw	r2,-24(fp)
   553c0:	0085c83a 	sub	r2,zero,r2
   553c4:	18800015 	stw	r2,0(r3)
    return -1;
   553c8:	00bfffc4 	movi	r2,-1
   553cc:	00000106 	br	553d4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   553d0:	e0bff917 	ldw	r2,-28(fp)
}
   553d4:	e037883a 	mov	sp,fp
   553d8:	dfc00117 	ldw	ra,4(sp)
   553dc:	df000017 	ldw	fp,0(sp)
   553e0:	dec00204 	addi	sp,sp,8
   553e4:	f800283a 	ret

000553e8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   553e8:	defff204 	addi	sp,sp,-56
   553ec:	dfc00a15 	stw	ra,40(sp)
   553f0:	df000915 	stw	fp,36(sp)
   553f4:	df000904 	addi	fp,sp,36
   553f8:	e13fff15 	stw	r4,-4(fp)
   553fc:	e1400215 	stw	r5,8(fp)
   55400:	e1800315 	stw	r6,12(fp)
   55404:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   55408:	e0800204 	addi	r2,fp,8
   5540c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   55410:	e0bfff17 	ldw	r2,-4(fp)
   55414:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   55418:	00006f06 	br	555d8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   5541c:	e0bff807 	ldb	r2,-32(fp)
   55420:	10800960 	cmpeqi	r2,r2,37
   55424:	1000041e 	bne	r2,zero,55438 <alt_printf+0x50>
        {
            alt_putchar(c);
   55428:	e0bff807 	ldb	r2,-32(fp)
   5542c:	1009883a 	mov	r4,r2
   55430:	00556140 	call	55614 <alt_putchar>
   55434:	00006806 	br	555d8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   55438:	e0bff717 	ldw	r2,-36(fp)
   5543c:	10c00044 	addi	r3,r2,1
   55440:	e0fff715 	stw	r3,-36(fp)
   55444:	10800003 	ldbu	r2,0(r2)
   55448:	e0bff805 	stb	r2,-32(fp)
   5544c:	e0bff807 	ldb	r2,-32(fp)
   55450:	10006926 	beq	r2,zero,555f8 <alt_printf+0x210>
            {
                if (c == '%')
   55454:	e0bff807 	ldb	r2,-32(fp)
   55458:	10800958 	cmpnei	r2,r2,37
   5545c:	1000041e 	bne	r2,zero,55470 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   55460:	e0bff807 	ldb	r2,-32(fp)
   55464:	1009883a 	mov	r4,r2
   55468:	00556140 	call	55614 <alt_putchar>
   5546c:	00005a06 	br	555d8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   55470:	e0bff807 	ldb	r2,-32(fp)
   55474:	108018d8 	cmpnei	r2,r2,99
   55478:	1000081e 	bne	r2,zero,5549c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   5547c:	e0bffe17 	ldw	r2,-8(fp)
   55480:	10c00104 	addi	r3,r2,4
   55484:	e0fffe15 	stw	r3,-8(fp)
   55488:	10800017 	ldw	r2,0(r2)
   5548c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   55490:	e13ffd17 	ldw	r4,-12(fp)
   55494:	00556140 	call	55614 <alt_putchar>
   55498:	00004f06 	br	555d8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   5549c:	e0bff807 	ldb	r2,-32(fp)
   554a0:	10801e18 	cmpnei	r2,r2,120
   554a4:	1000341e 	bne	r2,zero,55578 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   554a8:	e0bffe17 	ldw	r2,-8(fp)
   554ac:	10c00104 	addi	r3,r2,4
   554b0:	e0fffe15 	stw	r3,-8(fp)
   554b4:	10800017 	ldw	r2,0(r2)
   554b8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   554bc:	e0bffb17 	ldw	r2,-20(fp)
   554c0:	1000031e 	bne	r2,zero,554d0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   554c4:	01000c04 	movi	r4,48
   554c8:	00556140 	call	55614 <alt_putchar>
                        continue;
   554cc:	00004206 	br	555d8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   554d0:	00800704 	movi	r2,28
   554d4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   554d8:	00000306 	br	554e8 <alt_printf+0x100>
                        digit_shift -= 4;
   554dc:	e0bff917 	ldw	r2,-28(fp)
   554e0:	10bfff04 	addi	r2,r2,-4
   554e4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   554e8:	00c003c4 	movi	r3,15
   554ec:	e0bff917 	ldw	r2,-28(fp)
   554f0:	1884983a 	sll	r2,r3,r2
   554f4:	1007883a 	mov	r3,r2
   554f8:	e0bffb17 	ldw	r2,-20(fp)
   554fc:	1884703a 	and	r2,r3,r2
   55500:	103ff626 	beq	r2,zero,554dc <__alt_data_end+0xfffe34dc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   55504:	00001906 	br	5556c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   55508:	00c003c4 	movi	r3,15
   5550c:	e0bff917 	ldw	r2,-28(fp)
   55510:	1884983a 	sll	r2,r3,r2
   55514:	1007883a 	mov	r3,r2
   55518:	e0bffb17 	ldw	r2,-20(fp)
   5551c:	1886703a 	and	r3,r3,r2
   55520:	e0bff917 	ldw	r2,-28(fp)
   55524:	1884d83a 	srl	r2,r3,r2
   55528:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   5552c:	e0bffc17 	ldw	r2,-16(fp)
   55530:	108002a8 	cmpgeui	r2,r2,10
   55534:	1000041e 	bne	r2,zero,55548 <alt_printf+0x160>
                            c = '0' + digit;
   55538:	e0bffc17 	ldw	r2,-16(fp)
   5553c:	10800c04 	addi	r2,r2,48
   55540:	e0bff805 	stb	r2,-32(fp)
   55544:	00000306 	br	55554 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   55548:	e0bffc17 	ldw	r2,-16(fp)
   5554c:	108015c4 	addi	r2,r2,87
   55550:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   55554:	e0bff807 	ldb	r2,-32(fp)
   55558:	1009883a 	mov	r4,r2
   5555c:	00556140 	call	55614 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   55560:	e0bff917 	ldw	r2,-28(fp)
   55564:	10bfff04 	addi	r2,r2,-4
   55568:	e0bff915 	stw	r2,-28(fp)
   5556c:	e0bff917 	ldw	r2,-28(fp)
   55570:	103fe50e 	bge	r2,zero,55508 <__alt_data_end+0xfffe3508>
   55574:	00001806 	br	555d8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   55578:	e0bff807 	ldb	r2,-32(fp)
   5557c:	10801cd8 	cmpnei	r2,r2,115
   55580:	1000151e 	bne	r2,zero,555d8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   55584:	e0bffe17 	ldw	r2,-8(fp)
   55588:	10c00104 	addi	r3,r2,4
   5558c:	e0fffe15 	stw	r3,-8(fp)
   55590:	10800017 	ldw	r2,0(r2)
   55594:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   55598:	00000906 	br	555c0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   5559c:	e0bffa17 	ldw	r2,-24(fp)
   555a0:	10c00044 	addi	r3,r2,1
   555a4:	e0fffa15 	stw	r3,-24(fp)
   555a8:	10800003 	ldbu	r2,0(r2)
   555ac:	10803fcc 	andi	r2,r2,255
   555b0:	1080201c 	xori	r2,r2,128
   555b4:	10bfe004 	addi	r2,r2,-128
   555b8:	1009883a 	mov	r4,r2
   555bc:	00556140 	call	55614 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   555c0:	e0bffa17 	ldw	r2,-24(fp)
   555c4:	10800003 	ldbu	r2,0(r2)
   555c8:	10803fcc 	andi	r2,r2,255
   555cc:	1080201c 	xori	r2,r2,128
   555d0:	10bfe004 	addi	r2,r2,-128
   555d4:	103ff11e 	bne	r2,zero,5559c <__alt_data_end+0xfffe359c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   555d8:	e0bff717 	ldw	r2,-36(fp)
   555dc:	10c00044 	addi	r3,r2,1
   555e0:	e0fff715 	stw	r3,-36(fp)
   555e4:	10800003 	ldbu	r2,0(r2)
   555e8:	e0bff805 	stb	r2,-32(fp)
   555ec:	e0bff807 	ldb	r2,-32(fp)
   555f0:	103f8a1e 	bne	r2,zero,5541c <__alt_data_end+0xfffe341c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   555f4:	00000106 	br	555fc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   555f8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   555fc:	0001883a 	nop
   55600:	e037883a 	mov	sp,fp
   55604:	dfc00117 	ldw	ra,4(sp)
   55608:	df000017 	ldw	fp,0(sp)
   5560c:	dec00504 	addi	sp,sp,20
   55610:	f800283a 	ret

00055614 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   55614:	defffd04 	addi	sp,sp,-12
   55618:	dfc00215 	stw	ra,8(sp)
   5561c:	df000115 	stw	fp,4(sp)
   55620:	df000104 	addi	fp,sp,4
   55624:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   55628:	d0a00717 	ldw	r2,-32740(gp)
   5562c:	10800217 	ldw	r2,8(r2)
   55630:	100b883a 	mov	r5,r2
   55634:	e13fff17 	ldw	r4,-4(fp)
   55638:	004a3cc0 	call	4a3cc <putc>
#endif
#endif
}
   5563c:	e037883a 	mov	sp,fp
   55640:	dfc00117 	ldw	ra,4(sp)
   55644:	df000017 	ldw	fp,0(sp)
   55648:	dec00204 	addi	sp,sp,8
   5564c:	f800283a 	ret

00055650 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   55650:	defffa04 	addi	sp,sp,-24
   55654:	df000515 	stw	fp,20(sp)
   55658:	df000504 	addi	fp,sp,20
   5565c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55660:	0005303a 	rdctl	r2,status
   55664:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55668:	e0fffc17 	ldw	r3,-16(fp)
   5566c:	00bfff84 	movi	r2,-2
   55670:	1884703a 	and	r2,r3,r2
   55674:	1001703a 	wrctl	status,r2
  
  return context;
   55678:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   5567c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   55680:	e0bfff17 	ldw	r2,-4(fp)
   55684:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   55688:	e0bffd17 	ldw	r2,-12(fp)
   5568c:	10800017 	ldw	r2,0(r2)
   55690:	e0fffd17 	ldw	r3,-12(fp)
   55694:	18c00117 	ldw	r3,4(r3)
   55698:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   5569c:	e0bffd17 	ldw	r2,-12(fp)
   556a0:	10800117 	ldw	r2,4(r2)
   556a4:	e0fffd17 	ldw	r3,-12(fp)
   556a8:	18c00017 	ldw	r3,0(r3)
   556ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   556b0:	e0bffd17 	ldw	r2,-12(fp)
   556b4:	e0fffd17 	ldw	r3,-12(fp)
   556b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   556bc:	e0bffd17 	ldw	r2,-12(fp)
   556c0:	e0fffd17 	ldw	r3,-12(fp)
   556c4:	10c00015 	stw	r3,0(r2)
   556c8:	e0bffb17 	ldw	r2,-20(fp)
   556cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   556d0:	e0bffe17 	ldw	r2,-8(fp)
   556d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   556d8:	0001883a 	nop
   556dc:	e037883a 	mov	sp,fp
   556e0:	df000017 	ldw	fp,0(sp)
   556e4:	dec00104 	addi	sp,sp,4
   556e8:	f800283a 	ret

000556ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   556ec:	defffb04 	addi	sp,sp,-20
   556f0:	dfc00415 	stw	ra,16(sp)
   556f4:	df000315 	stw	fp,12(sp)
   556f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   556fc:	d0a01617 	ldw	r2,-32680(gp)
   55700:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   55704:	d0a6fa17 	ldw	r2,-25624(gp)
   55708:	10800044 	addi	r2,r2,1
   5570c:	d0a6fa15 	stw	r2,-25624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   55710:	00002e06 	br	557cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   55714:	e0bffd17 	ldw	r2,-12(fp)
   55718:	10800017 	ldw	r2,0(r2)
   5571c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   55720:	e0bffd17 	ldw	r2,-12(fp)
   55724:	10800403 	ldbu	r2,16(r2)
   55728:	10803fcc 	andi	r2,r2,255
   5572c:	10000426 	beq	r2,zero,55740 <alt_tick+0x54>
   55730:	d0a6fa17 	ldw	r2,-25624(gp)
   55734:	1000021e 	bne	r2,zero,55740 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   55738:	e0bffd17 	ldw	r2,-12(fp)
   5573c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   55740:	e0bffd17 	ldw	r2,-12(fp)
   55744:	10800217 	ldw	r2,8(r2)
   55748:	d0e6fa17 	ldw	r3,-25624(gp)
   5574c:	18801d36 	bltu	r3,r2,557c4 <alt_tick+0xd8>
   55750:	e0bffd17 	ldw	r2,-12(fp)
   55754:	10800403 	ldbu	r2,16(r2)
   55758:	10803fcc 	andi	r2,r2,255
   5575c:	1000191e 	bne	r2,zero,557c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   55760:	e0bffd17 	ldw	r2,-12(fp)
   55764:	10800317 	ldw	r2,12(r2)
   55768:	e0fffd17 	ldw	r3,-12(fp)
   5576c:	18c00517 	ldw	r3,20(r3)
   55770:	1809883a 	mov	r4,r3
   55774:	103ee83a 	callr	r2
   55778:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   5577c:	e0bfff17 	ldw	r2,-4(fp)
   55780:	1000031e 	bne	r2,zero,55790 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   55784:	e13ffd17 	ldw	r4,-12(fp)
   55788:	00556500 	call	55650 <alt_alarm_stop>
   5578c:	00000d06 	br	557c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   55790:	e0bffd17 	ldw	r2,-12(fp)
   55794:	10c00217 	ldw	r3,8(r2)
   55798:	e0bfff17 	ldw	r2,-4(fp)
   5579c:	1887883a 	add	r3,r3,r2
   557a0:	e0bffd17 	ldw	r2,-12(fp)
   557a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   557a8:	e0bffd17 	ldw	r2,-12(fp)
   557ac:	10c00217 	ldw	r3,8(r2)
   557b0:	d0a6fa17 	ldw	r2,-25624(gp)
   557b4:	1880032e 	bgeu	r3,r2,557c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   557b8:	e0bffd17 	ldw	r2,-12(fp)
   557bc:	00c00044 	movi	r3,1
   557c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   557c4:	e0bffe17 	ldw	r2,-8(fp)
   557c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   557cc:	e0fffd17 	ldw	r3,-12(fp)
   557d0:	d0a01604 	addi	r2,gp,-32680
   557d4:	18bfcf1e 	bne	r3,r2,55714 <__alt_data_end+0xfffe3714>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   557d8:	0001883a 	nop
}
   557dc:	0001883a 	nop
   557e0:	e037883a 	mov	sp,fp
   557e4:	dfc00117 	ldw	ra,4(sp)
   557e8:	df000017 	ldw	fp,0(sp)
   557ec:	dec00204 	addi	sp,sp,8
   557f0:	f800283a 	ret

000557f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   557f4:	deffff04 	addi	sp,sp,-4
   557f8:	df000015 	stw	fp,0(sp)
   557fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   55800:	000170fa 	wrctl	ienable,zero
}
   55804:	0001883a 	nop
   55808:	e037883a 	mov	sp,fp
   5580c:	df000017 	ldw	fp,0(sp)
   55810:	dec00104 	addi	sp,sp,4
   55814:	f800283a 	ret

00055818 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   55818:	defffb04 	addi	sp,sp,-20
   5581c:	dfc00415 	stw	ra,16(sp)
   55820:	df000315 	stw	fp,12(sp)
   55824:	df000304 	addi	fp,sp,12
   55828:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   5582c:	d0a00c17 	ldw	r2,-32720(gp)
   55830:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   55834:	00003106 	br	558fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   55838:	e0bffd17 	ldw	r2,-12(fp)
   5583c:	10800217 	ldw	r2,8(r2)
   55840:	1009883a 	mov	r4,r2
   55844:	00411380 	call	41138 <strlen>
   55848:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   5584c:	e0bffd17 	ldw	r2,-12(fp)
   55850:	10c00217 	ldw	r3,8(r2)
   55854:	e0bffe17 	ldw	r2,-8(fp)
   55858:	10bfffc4 	addi	r2,r2,-1
   5585c:	1885883a 	add	r2,r3,r2
   55860:	10800003 	ldbu	r2,0(r2)
   55864:	10803fcc 	andi	r2,r2,255
   55868:	1080201c 	xori	r2,r2,128
   5586c:	10bfe004 	addi	r2,r2,-128
   55870:	10800bd8 	cmpnei	r2,r2,47
   55874:	1000031e 	bne	r2,zero,55884 <alt_find_file+0x6c>
    {
      len -= 1;
   55878:	e0bffe17 	ldw	r2,-8(fp)
   5587c:	10bfffc4 	addi	r2,r2,-1
   55880:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55884:	e0bffe17 	ldw	r2,-8(fp)
   55888:	e0ffff17 	ldw	r3,-4(fp)
   5588c:	1885883a 	add	r2,r3,r2
   55890:	10800003 	ldbu	r2,0(r2)
   55894:	10803fcc 	andi	r2,r2,255
   55898:	1080201c 	xori	r2,r2,128
   5589c:	10bfe004 	addi	r2,r2,-128
   558a0:	10800be0 	cmpeqi	r2,r2,47
   558a4:	1000081e 	bne	r2,zero,558c8 <alt_find_file+0xb0>
   558a8:	e0bffe17 	ldw	r2,-8(fp)
   558ac:	e0ffff17 	ldw	r3,-4(fp)
   558b0:	1885883a 	add	r2,r3,r2
   558b4:	10800003 	ldbu	r2,0(r2)
   558b8:	10803fcc 	andi	r2,r2,255
   558bc:	1080201c 	xori	r2,r2,128
   558c0:	10bfe004 	addi	r2,r2,-128
   558c4:	10000a1e 	bne	r2,zero,558f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   558c8:	e0bffd17 	ldw	r2,-12(fp)
   558cc:	10800217 	ldw	r2,8(r2)
   558d0:	e0fffe17 	ldw	r3,-8(fp)
   558d4:	180d883a 	mov	r6,r3
   558d8:	e17fff17 	ldw	r5,-4(fp)
   558dc:	1009883a 	mov	r4,r2
   558e0:	0055acc0 	call	55acc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   558e4:	1000021e 	bne	r2,zero,558f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   558e8:	e0bffd17 	ldw	r2,-12(fp)
   558ec:	00000706 	br	5590c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   558f0:	e0bffd17 	ldw	r2,-12(fp)
   558f4:	10800017 	ldw	r2,0(r2)
   558f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   558fc:	e0fffd17 	ldw	r3,-12(fp)
   55900:	d0a00c04 	addi	r2,gp,-32720
   55904:	18bfcc1e 	bne	r3,r2,55838 <__alt_data_end+0xfffe3838>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   55908:	0005883a 	mov	r2,zero
}
   5590c:	e037883a 	mov	sp,fp
   55910:	dfc00117 	ldw	ra,4(sp)
   55914:	df000017 	ldw	fp,0(sp)
   55918:	dec00204 	addi	sp,sp,8
   5591c:	f800283a 	ret

00055920 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   55920:	defffa04 	addi	sp,sp,-24
   55924:	dfc00515 	stw	ra,20(sp)
   55928:	df000415 	stw	fp,16(sp)
   5592c:	dc000315 	stw	r16,12(sp)
   55930:	df000404 	addi	fp,sp,16
   55934:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   55938:	00bffa04 	movi	r2,-24
   5593c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   55940:	e03ffc15 	stw	zero,-16(fp)
   55944:	00001d06 	br	559bc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   55948:	04000174 	movhi	r16,5
   5594c:	841aa004 	addi	r16,r16,27264
   55950:	e0bffc17 	ldw	r2,-16(fp)
   55954:	01400304 	movi	r5,12
   55958:	1009883a 	mov	r4,r2
   5595c:	0040eec0 	call	40eec <__mulsi3>
   55960:	8085883a 	add	r2,r16,r2
   55964:	10800017 	ldw	r2,0(r2)
   55968:	1000111e 	bne	r2,zero,559b0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   5596c:	04000174 	movhi	r16,5
   55970:	841aa004 	addi	r16,r16,27264
   55974:	e0bffc17 	ldw	r2,-16(fp)
   55978:	01400304 	movi	r5,12
   5597c:	1009883a 	mov	r4,r2
   55980:	0040eec0 	call	40eec <__mulsi3>
   55984:	8085883a 	add	r2,r16,r2
   55988:	e0fffe17 	ldw	r3,-8(fp)
   5598c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   55990:	d0e01017 	ldw	r3,-32704(gp)
   55994:	e0bffc17 	ldw	r2,-16(fp)
   55998:	1880020e 	bge	r3,r2,559a4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   5599c:	e0bffc17 	ldw	r2,-16(fp)
   559a0:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
   559a4:	e0bffc17 	ldw	r2,-16(fp)
   559a8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   559ac:	00000606 	br	559c8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   559b0:	e0bffc17 	ldw	r2,-16(fp)
   559b4:	10800044 	addi	r2,r2,1
   559b8:	e0bffc15 	stw	r2,-16(fp)
   559bc:	e0bffc17 	ldw	r2,-16(fp)
   559c0:	10800810 	cmplti	r2,r2,32
   559c4:	103fe01e 	bne	r2,zero,55948 <__alt_data_end+0xfffe3948>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   559c8:	e0bffd17 	ldw	r2,-12(fp)
}
   559cc:	e6ffff04 	addi	sp,fp,-4
   559d0:	dfc00217 	ldw	ra,8(sp)
   559d4:	df000117 	ldw	fp,4(sp)
   559d8:	dc000017 	ldw	r16,0(sp)
   559dc:	dec00304 	addi	sp,sp,12
   559e0:	f800283a 	ret

000559e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   559e4:	defffe04 	addi	sp,sp,-8
   559e8:	df000115 	stw	fp,4(sp)
   559ec:	df000104 	addi	fp,sp,4
   559f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   559f4:	e0bfff17 	ldw	r2,-4(fp)
   559f8:	10bffe84 	addi	r2,r2,-6
   559fc:	10c00428 	cmpgeui	r3,r2,16
   55a00:	18001a1e 	bne	r3,zero,55a6c <alt_exception_cause_generated_bad_addr+0x88>
   55a04:	100690ba 	slli	r3,r2,2
   55a08:	00800174 	movhi	r2,5
   55a0c:	10968704 	addi	r2,r2,23068
   55a10:	1885883a 	add	r2,r3,r2
   55a14:	10800017 	ldw	r2,0(r2)
   55a18:	1000683a 	jmp	r2
   55a1c:	00055a5c 	xori	zero,zero,5481
   55a20:	00055a5c 	xori	zero,zero,5481
   55a24:	00055a6c 	andhi	zero,zero,5481
   55a28:	00055a6c 	andhi	zero,zero,5481
   55a2c:	00055a6c 	andhi	zero,zero,5481
   55a30:	00055a5c 	xori	zero,zero,5481
   55a34:	00055a64 	muli	zero,zero,5481
   55a38:	00055a6c 	andhi	zero,zero,5481
   55a3c:	00055a5c 	xori	zero,zero,5481
   55a40:	00055a5c 	xori	zero,zero,5481
   55a44:	00055a6c 	andhi	zero,zero,5481
   55a48:	00055a5c 	xori	zero,zero,5481
   55a4c:	00055a64 	muli	zero,zero,5481
   55a50:	00055a6c 	andhi	zero,zero,5481
   55a54:	00055a6c 	andhi	zero,zero,5481
   55a58:	00055a5c 	xori	zero,zero,5481
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   55a5c:	00800044 	movi	r2,1
   55a60:	00000306 	br	55a70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   55a64:	0005883a 	mov	r2,zero
   55a68:	00000106 	br	55a70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   55a6c:	0005883a 	mov	r2,zero
  }
}
   55a70:	e037883a 	mov	sp,fp
   55a74:	df000017 	ldw	fp,0(sp)
   55a78:	dec00104 	addi	sp,sp,4
   55a7c:	f800283a 	ret

00055a80 <atexit>:
   55a80:	200b883a 	mov	r5,r4
   55a84:	000f883a 	mov	r7,zero
   55a88:	000d883a 	mov	r6,zero
   55a8c:	0009883a 	mov	r4,zero
   55a90:	0055b481 	jmpi	55b48 <__register_exitproc>

00055a94 <exit>:
   55a94:	defffe04 	addi	sp,sp,-8
   55a98:	000b883a 	mov	r5,zero
   55a9c:	dc000015 	stw	r16,0(sp)
   55aa0:	dfc00115 	stw	ra,4(sp)
   55aa4:	2021883a 	mov	r16,r4
   55aa8:	0055c600 	call	55c60 <__call_exitprocs>
   55aac:	00800174 	movhi	r2,5
   55ab0:	109f2c04 	addi	r2,r2,31920
   55ab4:	11000017 	ldw	r4,0(r2)
   55ab8:	20800f17 	ldw	r2,60(r4)
   55abc:	10000126 	beq	r2,zero,55ac4 <exit+0x30>
   55ac0:	103ee83a 	callr	r2
   55ac4:	8009883a 	mov	r4,r16
   55ac8:	0055de00 	call	55de0 <_exit>

00055acc <memcmp>:
   55acc:	01c000c4 	movi	r7,3
   55ad0:	3980192e 	bgeu	r7,r6,55b38 <memcmp+0x6c>
   55ad4:	2144b03a 	or	r2,r4,r5
   55ad8:	11c4703a 	and	r2,r2,r7
   55adc:	10000f26 	beq	r2,zero,55b1c <memcmp+0x50>
   55ae0:	20800003 	ldbu	r2,0(r4)
   55ae4:	28c00003 	ldbu	r3,0(r5)
   55ae8:	10c0151e 	bne	r2,r3,55b40 <memcmp+0x74>
   55aec:	31bfff84 	addi	r6,r6,-2
   55af0:	01ffffc4 	movi	r7,-1
   55af4:	00000406 	br	55b08 <memcmp+0x3c>
   55af8:	20800003 	ldbu	r2,0(r4)
   55afc:	28c00003 	ldbu	r3,0(r5)
   55b00:	31bfffc4 	addi	r6,r6,-1
   55b04:	10c00e1e 	bne	r2,r3,55b40 <memcmp+0x74>
   55b08:	21000044 	addi	r4,r4,1
   55b0c:	29400044 	addi	r5,r5,1
   55b10:	31fff91e 	bne	r6,r7,55af8 <__alt_data_end+0xfffe3af8>
   55b14:	0005883a 	mov	r2,zero
   55b18:	f800283a 	ret
   55b1c:	20c00017 	ldw	r3,0(r4)
   55b20:	28800017 	ldw	r2,0(r5)
   55b24:	18bfee1e 	bne	r3,r2,55ae0 <__alt_data_end+0xfffe3ae0>
   55b28:	31bfff04 	addi	r6,r6,-4
   55b2c:	21000104 	addi	r4,r4,4
   55b30:	29400104 	addi	r5,r5,4
   55b34:	39bff936 	bltu	r7,r6,55b1c <__alt_data_end+0xfffe3b1c>
   55b38:	303fe91e 	bne	r6,zero,55ae0 <__alt_data_end+0xfffe3ae0>
   55b3c:	003ff506 	br	55b14 <__alt_data_end+0xfffe3b14>
   55b40:	10c5c83a 	sub	r2,r2,r3
   55b44:	f800283a 	ret

00055b48 <__register_exitproc>:
   55b48:	defffa04 	addi	sp,sp,-24
   55b4c:	dc000315 	stw	r16,12(sp)
   55b50:	04000174 	movhi	r16,5
   55b54:	841f2c04 	addi	r16,r16,31920
   55b58:	80c00017 	ldw	r3,0(r16)
   55b5c:	dc400415 	stw	r17,16(sp)
   55b60:	dfc00515 	stw	ra,20(sp)
   55b64:	18805217 	ldw	r2,328(r3)
   55b68:	2023883a 	mov	r17,r4
   55b6c:	10003726 	beq	r2,zero,55c4c <__register_exitproc+0x104>
   55b70:	10c00117 	ldw	r3,4(r2)
   55b74:	010007c4 	movi	r4,31
   55b78:	20c00e16 	blt	r4,r3,55bb4 <__register_exitproc+0x6c>
   55b7c:	1a000044 	addi	r8,r3,1
   55b80:	8800221e 	bne	r17,zero,55c0c <__register_exitproc+0xc4>
   55b84:	18c00084 	addi	r3,r3,2
   55b88:	18c7883a 	add	r3,r3,r3
   55b8c:	18c7883a 	add	r3,r3,r3
   55b90:	12000115 	stw	r8,4(r2)
   55b94:	10c7883a 	add	r3,r2,r3
   55b98:	19400015 	stw	r5,0(r3)
   55b9c:	0005883a 	mov	r2,zero
   55ba0:	dfc00517 	ldw	ra,20(sp)
   55ba4:	dc400417 	ldw	r17,16(sp)
   55ba8:	dc000317 	ldw	r16,12(sp)
   55bac:	dec00604 	addi	sp,sp,24
   55bb0:	f800283a 	ret
   55bb4:	00800034 	movhi	r2,0
   55bb8:	10800004 	addi	r2,r2,0
   55bbc:	10002626 	beq	r2,zero,55c58 <__register_exitproc+0x110>
   55bc0:	01006404 	movi	r4,400
   55bc4:	d9400015 	stw	r5,0(sp)
   55bc8:	d9800115 	stw	r6,4(sp)
   55bcc:	d9c00215 	stw	r7,8(sp)
   55bd0:	00000000 	call	0 <__alt_mem_RAM-0x40000>
   55bd4:	d9400017 	ldw	r5,0(sp)
   55bd8:	d9800117 	ldw	r6,4(sp)
   55bdc:	d9c00217 	ldw	r7,8(sp)
   55be0:	10001d26 	beq	r2,zero,55c58 <__register_exitproc+0x110>
   55be4:	81000017 	ldw	r4,0(r16)
   55be8:	10000115 	stw	zero,4(r2)
   55bec:	02000044 	movi	r8,1
   55bf0:	22405217 	ldw	r9,328(r4)
   55bf4:	0007883a 	mov	r3,zero
   55bf8:	12400015 	stw	r9,0(r2)
   55bfc:	20805215 	stw	r2,328(r4)
   55c00:	10006215 	stw	zero,392(r2)
   55c04:	10006315 	stw	zero,396(r2)
   55c08:	883fde26 	beq	r17,zero,55b84 <__alt_data_end+0xfffe3b84>
   55c0c:	18c9883a 	add	r4,r3,r3
   55c10:	2109883a 	add	r4,r4,r4
   55c14:	1109883a 	add	r4,r2,r4
   55c18:	21802215 	stw	r6,136(r4)
   55c1c:	01800044 	movi	r6,1
   55c20:	12406217 	ldw	r9,392(r2)
   55c24:	30cc983a 	sll	r6,r6,r3
   55c28:	4992b03a 	or	r9,r9,r6
   55c2c:	12406215 	stw	r9,392(r2)
   55c30:	21c04215 	stw	r7,264(r4)
   55c34:	01000084 	movi	r4,2
   55c38:	893fd21e 	bne	r17,r4,55b84 <__alt_data_end+0xfffe3b84>
   55c3c:	11006317 	ldw	r4,396(r2)
   55c40:	218cb03a 	or	r6,r4,r6
   55c44:	11806315 	stw	r6,396(r2)
   55c48:	003fce06 	br	55b84 <__alt_data_end+0xfffe3b84>
   55c4c:	18805304 	addi	r2,r3,332
   55c50:	18805215 	stw	r2,328(r3)
   55c54:	003fc606 	br	55b70 <__alt_data_end+0xfffe3b70>
   55c58:	00bfffc4 	movi	r2,-1
   55c5c:	003fd006 	br	55ba0 <__alt_data_end+0xfffe3ba0>

00055c60 <__call_exitprocs>:
   55c60:	defff504 	addi	sp,sp,-44
   55c64:	df000915 	stw	fp,36(sp)
   55c68:	dd400615 	stw	r21,24(sp)
   55c6c:	dc800315 	stw	r18,12(sp)
   55c70:	dfc00a15 	stw	ra,40(sp)
   55c74:	ddc00815 	stw	r23,32(sp)
   55c78:	dd800715 	stw	r22,28(sp)
   55c7c:	dd000515 	stw	r20,20(sp)
   55c80:	dcc00415 	stw	r19,16(sp)
   55c84:	dc400215 	stw	r17,8(sp)
   55c88:	dc000115 	stw	r16,4(sp)
   55c8c:	d9000015 	stw	r4,0(sp)
   55c90:	2839883a 	mov	fp,r5
   55c94:	04800044 	movi	r18,1
   55c98:	057fffc4 	movi	r21,-1
   55c9c:	00800174 	movhi	r2,5
   55ca0:	109f2c04 	addi	r2,r2,31920
   55ca4:	12000017 	ldw	r8,0(r2)
   55ca8:	45005217 	ldw	r20,328(r8)
   55cac:	44c05204 	addi	r19,r8,328
   55cb0:	a0001c26 	beq	r20,zero,55d24 <__call_exitprocs+0xc4>
   55cb4:	a0800117 	ldw	r2,4(r20)
   55cb8:	15ffffc4 	addi	r23,r2,-1
   55cbc:	b8000d16 	blt	r23,zero,55cf4 <__call_exitprocs+0x94>
   55cc0:	14000044 	addi	r16,r2,1
   55cc4:	8421883a 	add	r16,r16,r16
   55cc8:	8421883a 	add	r16,r16,r16
   55ccc:	84402004 	addi	r17,r16,128
   55cd0:	a463883a 	add	r17,r20,r17
   55cd4:	a421883a 	add	r16,r20,r16
   55cd8:	e0001e26 	beq	fp,zero,55d54 <__call_exitprocs+0xf4>
   55cdc:	80804017 	ldw	r2,256(r16)
   55ce0:	e0801c26 	beq	fp,r2,55d54 <__call_exitprocs+0xf4>
   55ce4:	bdffffc4 	addi	r23,r23,-1
   55ce8:	843fff04 	addi	r16,r16,-4
   55cec:	8c7fff04 	addi	r17,r17,-4
   55cf0:	bd7ff91e 	bne	r23,r21,55cd8 <__alt_data_end+0xfffe3cd8>
   55cf4:	00800034 	movhi	r2,0
   55cf8:	10800004 	addi	r2,r2,0
   55cfc:	10000926 	beq	r2,zero,55d24 <__call_exitprocs+0xc4>
   55d00:	a0800117 	ldw	r2,4(r20)
   55d04:	1000301e 	bne	r2,zero,55dc8 <__call_exitprocs+0x168>
   55d08:	a0800017 	ldw	r2,0(r20)
   55d0c:	10003226 	beq	r2,zero,55dd8 <__call_exitprocs+0x178>
   55d10:	a009883a 	mov	r4,r20
   55d14:	98800015 	stw	r2,0(r19)
   55d18:	00000000 	call	0 <__alt_mem_RAM-0x40000>
   55d1c:	9d000017 	ldw	r20,0(r19)
   55d20:	a03fe41e 	bne	r20,zero,55cb4 <__alt_data_end+0xfffe3cb4>
   55d24:	dfc00a17 	ldw	ra,40(sp)
   55d28:	df000917 	ldw	fp,36(sp)
   55d2c:	ddc00817 	ldw	r23,32(sp)
   55d30:	dd800717 	ldw	r22,28(sp)
   55d34:	dd400617 	ldw	r21,24(sp)
   55d38:	dd000517 	ldw	r20,20(sp)
   55d3c:	dcc00417 	ldw	r19,16(sp)
   55d40:	dc800317 	ldw	r18,12(sp)
   55d44:	dc400217 	ldw	r17,8(sp)
   55d48:	dc000117 	ldw	r16,4(sp)
   55d4c:	dec00b04 	addi	sp,sp,44
   55d50:	f800283a 	ret
   55d54:	a0800117 	ldw	r2,4(r20)
   55d58:	80c00017 	ldw	r3,0(r16)
   55d5c:	10bfffc4 	addi	r2,r2,-1
   55d60:	15c01426 	beq	r2,r23,55db4 <__call_exitprocs+0x154>
   55d64:	80000015 	stw	zero,0(r16)
   55d68:	183fde26 	beq	r3,zero,55ce4 <__alt_data_end+0xfffe3ce4>
   55d6c:	95c8983a 	sll	r4,r18,r23
   55d70:	a0806217 	ldw	r2,392(r20)
   55d74:	a5800117 	ldw	r22,4(r20)
   55d78:	2084703a 	and	r2,r4,r2
   55d7c:	10000b26 	beq	r2,zero,55dac <__call_exitprocs+0x14c>
   55d80:	a0806317 	ldw	r2,396(r20)
   55d84:	2088703a 	and	r4,r4,r2
   55d88:	20000c1e 	bne	r4,zero,55dbc <__call_exitprocs+0x15c>
   55d8c:	89400017 	ldw	r5,0(r17)
   55d90:	d9000017 	ldw	r4,0(sp)
   55d94:	183ee83a 	callr	r3
   55d98:	a0800117 	ldw	r2,4(r20)
   55d9c:	15bfbf1e 	bne	r2,r22,55c9c <__alt_data_end+0xfffe3c9c>
   55da0:	98800017 	ldw	r2,0(r19)
   55da4:	153fcf26 	beq	r2,r20,55ce4 <__alt_data_end+0xfffe3ce4>
   55da8:	003fbc06 	br	55c9c <__alt_data_end+0xfffe3c9c>
   55dac:	183ee83a 	callr	r3
   55db0:	003ff906 	br	55d98 <__alt_data_end+0xfffe3d98>
   55db4:	a5c00115 	stw	r23,4(r20)
   55db8:	003feb06 	br	55d68 <__alt_data_end+0xfffe3d68>
   55dbc:	89000017 	ldw	r4,0(r17)
   55dc0:	183ee83a 	callr	r3
   55dc4:	003ff406 	br	55d98 <__alt_data_end+0xfffe3d98>
   55dc8:	a0800017 	ldw	r2,0(r20)
   55dcc:	a027883a 	mov	r19,r20
   55dd0:	1029883a 	mov	r20,r2
   55dd4:	003fb606 	br	55cb0 <__alt_data_end+0xfffe3cb0>
   55dd8:	0005883a 	mov	r2,zero
   55ddc:	003ffb06 	br	55dcc <__alt_data_end+0xfffe3dcc>

00055de0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   55de0:	defffd04 	addi	sp,sp,-12
   55de4:	df000215 	stw	fp,8(sp)
   55de8:	df000204 	addi	fp,sp,8
   55dec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   55df0:	0001883a 	nop
   55df4:	e0bfff17 	ldw	r2,-4(fp)
   55df8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   55dfc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   55e00:	10000226 	beq	r2,zero,55e0c <_exit+0x2c>
    ALT_SIM_FAIL();
   55e04:	002af070 	cmpltui	zero,zero,43969
   55e08:	00000106 	br	55e10 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   55e0c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   55e10:	003fff06 	br	55e10 <__alt_data_end+0xfffe3e10>

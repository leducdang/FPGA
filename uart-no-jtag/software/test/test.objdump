
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005398 memsz 0x00005398 flags r-x
    LOAD off    0x000063b8 vaddr 0x000453b8 paddr 0x00045e80 align 2**12
         filesz 0x00000ac8 memsz 0x00000ac8 flags rw-
    LOAD off    0x00007948 vaddr 0x00046948 paddr 0x00046948 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005150  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00045380  00045380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000ac8  000453b8  00045e80  000063b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00046948  00046948  00007948  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00046a9c  00046a9c  00006e80  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009b0  00000000  00000000  00006ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000158ae  00000000  00000000  00007858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005ac7  00000000  00000000  0001d106  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006429  00000000  00000000  00022bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000014e4  00000000  00000000  00028ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025a2  00000000  00000000  0002a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  0002ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00031558  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000638  00000000  00000000  00031568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00033e9a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00033e9d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00033ea1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00033ea2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00033ea6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00033eaa  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00033eae  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00033eb2  2**0
                  CONTENTS, READONLY
 26 .jdi          00002ff3  00000000  00000000  00033eda  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000389f2  00000000  00000000  00036ecd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00045380 l    d  .rodata	00000000 .rodata
000453b8 l    d  .rwdata	00000000 .rwdata
00046948 l    d  .bss	00000000 .bss
00046a9c l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000404ac l     F .text	00000008 __fp_unlock
000404c0 l     F .text	0000019c __sinit.part.1
0004065c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000453b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0004314c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043260 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004328c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043380 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043468 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043554 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043730 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00045e78 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000439a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043ae0 l     F .text	00000034 alt_dev_reg
00045d8c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00043d50 l     F .text	0000009c altera_avalon_uart_irq
00043dec l     F .text	000000e4 altera_avalon_uart_rxirq
00043ed0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0004406c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00044284 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004448c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000448ec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044a4c l     F .text	0000003c alt_get_errno
00044a88 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00046970 g     O .bss	00000004 alt_instruction_exception_handler
00042f1c g     F .text	00000054 _isatty_r
0004366c g     F .text	0000007c alt_main
00040340 g     F .text	000000c0 _puts_r
0004699c g     O .bss	00000100 alt_irq
00042c44 g     F .text	00000060 _lseek_r
00045e80 g       *ABS*	00000000 __flash_rwdata_start
00046a9c g       *ABS*	00000000 __alt_heap_start
000421f8 g     F .text	0000005c __sseek
0004080c g     F .text	00000010 __sinit
00040664 g     F .text	00000078 __sfmoreglue
0004370c g     F .text	00000024 __malloc_unlock
000418e4 g     F .text	0000015c memmove
000407f4 g     F .text	00000018 _cleanup
00044cd0 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042ec0 g     F .text	0000005c _fstat_r
0004695c g     O .bss	00000004 errno
00042174 g     F .text	00000008 __seofread
00046964 g     O .bss	00000004 alt_argv
0004de50 g       *ABS*	00000000 _gp
00045c0c g     O .rwdata	00000180 alt_fd_list
00044cf4 g     F .text	00000090 alt_find_dev
0004179c g     F .text	00000148 memcpy
000404b4 g     F .text	0000000c _cleanup_r
000449d0 g     F .text	0000007c alt_io_redirect
00045380 g       *ABS*	00000000 __DTOR_END__
00040400 g     F .text	00000014 puts
00044f50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00043068 g     F .text	00000064 .hidden __udivsi3
000433bc g     F .text	000000ac isatty
00046958 g     O .bss	00000004 __malloc_top_pad
00040000 g       *ABS*	00000000 __alt_mem_ram
0004085c g     F .text	000004c8 __sfvwrite_r
000420cc g     F .text	00000054 _sbrk_r
00042e60 g     F .text	00000060 _read_r
00045e70 g     O .rwdata	00000004 alt_max_fd
00042464 g     F .text	000000f0 _fclose_r
000427e0 g     F .text	00000030 fflush
00046954 g     O .bss	00000004 __malloc_max_sbrked_mem
00043590 g     F .text	000000dc lseek
00045e50 g     O .rwdata	00000004 _global_impure_ptr
00041b68 g     F .text	00000564 _realloc_r
00046a9c g       *ABS*	00000000 __bss_end
000447fc g     F .text	000000f0 alt_iic_isr_register
00043ca4 g     F .text	000000ac altera_avalon_uart_init
0004082c g     F .text	00000018 __fp_lock_all
000447b0 g     F .text	0000004c alt_ic_irq_enabled
0004696c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00045be4 g     O .rwdata	00000028 alt_dev_null
0004446c g     F .text	00000020 alt_dcache_flush_all
00045e80 g       *ABS*	00000000 __ram_rwdata_end
00045e68 g     O .rwdata	00000008 alt_dev_list
000439e0 g     F .text	00000100 write
000453b8 g       *ABS*	00000000 __ram_rodata_end
000432c8 g     F .text	000000b8 fstat
000430cc g     F .text	00000058 .hidden __umodsi3
00046a9c g       *ABS*	00000000 end
000442c0 g     F .text	000001ac altera_avalon_uart_write
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00045380 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
00043bf4 g     F .text	00000060 altera_avalon_uart_write_fd
00043c54 g     F .text	00000050 altera_avalon_uart_close_fd
0004081c g     F .text	00000004 __sfp_lock_acquire
000416b8 g     F .text	000000e4 memchr
00042934 g     F .text	00000310 _free_r
000451cc g     F .text	00000180 __call_exitprocs
00045e58 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
0004376c g     F .text	00000104 read
00043b4c g     F .text	00000048 alt_sys_init
000450b4 g     F .text	00000118 __register_exitproc
00046948 g     O .bss	00000005 buffer
00043124 g     F .text	00000028 .hidden __mulsi3
000453b8 g       *ABS*	00000000 __ram_rwdata_start
00045380 g       *ABS*	00000000 __ram_rodata_start
00046974 g     O .bss	00000028 __malloc_current_mallinfo
00044e8c g     F .text	000000c4 alt_get_fd
00042410 g     F .text	00000054 _close_r
00045038 g     F .text	0000007c memcmp
00046a9c g       *ABS*	00000000 __alt_stack_base
000422bc g     F .text	00000154 __swsetup_r
000406dc g     F .text	00000118 __sfp
000457dc g     O .rwdata	00000408 __malloc_av_
00040828 g     F .text	00000004 __sinit_lock_release
00042120 g     F .text	00000054 __sread
00044d84 g     F .text	00000108 alt_find_file
000444c8 g     F .text	000000a4 alt_dev_llist_insert
000436e8 g     F .text	00000024 __malloc_lock
000438f4 g     F .text	000000b0 sbrk
00042784 g     F .text	0000005c _fflush_r
00046948 g       *ABS*	00000000 __bss_start
00041a40 g     F .text	00000128 memset
000402d0 g     F .text	00000070 main
0004026c g     F .text	00000064 delay_ms
00046968 g     O .bss	00000004 alt_envp
00046950 g     O .bss	00000004 __malloc_max_total_mem
00042254 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
00042554 g     F .text	00000014 fclose
00040eac g     F .text	0000080c _malloc_r
00045e74 g     O .rwdata	00000004 alt_errno
00040d24 g     F .text	000000c4 _fwalk
00042f70 g     F .text	00000084 .hidden __divsi3
00042810 g     F .text	00000124 _malloc_trim_r
00045380 g       *ABS*	00000000 __CTOR_END__
00045380 g       *ABS*	00000000 __flash_rodata_start
00045380 g       *ABS*	00000000 __DTOR_LIST__
00043b14 g     F .text	00000038 alt_irq_init
00043870 g     F .text	00000084 alt_release_fd
00044fec g     F .text	00000014 atexit
0004225c g     F .text	00000060 _write_r
00045e54 g     O .rwdata	00000004 _impure_ptr
00046960 g     O .bss	00000004 alt_argc
00042568 g     F .text	0000021c __sflush_r
000445cc g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00040844 g     F .text	00000018 __fp_unlock_all
00045e60 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004464c g     F .text	00000050 alt_ic_isr_register
00045e80 g       *ABS*	00000000 _edata
00043b94 g     F .text	00000060 altera_avalon_uart_read_fd
00046a9c g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
00044724 g     F .text	0000008c alt_ic_irq_disable
0004217c g     F .text	0000007c __swrite
00045e5c g     O .rwdata	00000004 __malloc_trim_threshold
00045000 g     F .text	00000038 exit
00040de8 g     F .text	000000c4 _fwalk_reent
00042ff4 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040820 g     F .text	00000004 __sfp_lock_release
00044018 g     F .text	00000054 altera_avalon_uart_close
0004534c g     F .text	00000034 _exit
00042ca4 g     F .text	000001bc __smakebuf_r
00040414 g     F .text	00000098 strlen
00044b74 g     F .text	0000015c open
0004462c g     F .text	00000020 alt_icache_flush_all
00045e7c g     O .rwdata	00000004 alt_priority_mask
0004469c g     F .text	00000088 alt_ic_irq_enable
000440a8 g     F .text	000001dc altera_avalon_uart_read
0004456c g     F .text	00000060 _do_ctors
00043188 g     F .text	000000d8 close
000434d0 g     F .text	00000084 alt_load
00040824 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	109a6704 	addi	r2,r2,27036
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	109a6704 	addi	r2,r2,27036
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a2c817 	ldw	r2,-29920(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a2c817 	ldw	r2,-29920(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4023c:	d6b79414 	ori	gp,gp,56912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	109a5214 	ori	r2,r2,26952

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18daa714 	ori	r3,r3,27292

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00434d00 	call	434d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	004366c0 	call	4366c <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffce268>

0004026c <delay_ms>:

char buffer[5];


void delay_ms(int ms)
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	df000315 	stw	fp,12(sp)
   40274:	df000304 	addi	fp,sp,12
   40278:	e13fff15 	stw	r4,-4(fp)
	unsigned int x,y;
	for(x =0; x<ms; x++)
   4027c:	e03ffd15 	stw	zero,-12(fp)
   40280:	00000b06 	br	402b0 <delay_ms+0x44>
	{	for(y =0; y<1000; y++);}
   40284:	e03ffe15 	stw	zero,-8(fp)
   40288:	00000306 	br	40298 <delay_ms+0x2c>
   4028c:	e0bffe17 	ldw	r2,-8(fp)
   40290:	10800044 	addi	r2,r2,1
   40294:	e0bffe15 	stw	r2,-8(fp)
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	1080fa30 	cmpltui	r2,r2,1000
   402a0:	103ffa1e 	bne	r2,zero,4028c <__alt_data_end+0xfffce28c>


void delay_ms(int ms)
{
	unsigned int x,y;
	for(x =0; x<ms; x++)
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0bffd15 	stw	r2,-12(fp)
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	e0fffd17 	ldw	r3,-12(fp)
   402b8:	18bff236 	bltu	r3,r2,40284 <__alt_data_end+0xfffce284>
	{	for(y =0; y<1000; y++);}
}
   402bc:	0001883a 	nop
   402c0:	e037883a 	mov	sp,fp
   402c4:	df000017 	ldw	fp,0(sp)
   402c8:	dec00104 	addi	sp,sp,4
   402cc:	f800283a 	ret

000402d0 <main>:


int main()
{
   402d0:	defffd04 	addi	sp,sp,-12
   402d4:	dfc00215 	stw	ra,8(sp)
   402d8:	df000115 	stw	fp,4(sp)
   402dc:	df000104 	addi	fp,sp,4
	char a='0';
   402e0:	00800c04 	movi	r2,48
   402e4:	e0bfff05 	stb	r2,-4(fp)


	printf("hello World\n");
   402e8:	01000134 	movhi	r4,4
   402ec:	2114e004 	addi	r4,r4,21376
   402f0:	00404000 	call	40400 <puts>

	while(1)
	{
		a= IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
   402f4:	00800234 	movhi	r2,8
   402f8:	10840804 	addi	r2,r2,4128
   402fc:	10800037 	ldwio	r2,0(r2)
   40300:	e0bfff05 	stb	r2,-4(fp)

		if(a == '1')
   40304:	e0bfff07 	ldb	r2,-4(fp)
   40308:	10800c58 	cmpnei	r2,r2,49
   4030c:	1000041e 	bne	r2,zero,40320 <main+0x50>
			IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE,1);
   40310:	00c00044 	movi	r3,1
   40314:	00800234 	movhi	r2,8
   40318:	10841404 	addi	r2,r2,4176
   4031c:	10c00035 	stwio	r3,0(r2)
		if(a == '0')
   40320:	e0bfff07 	ldb	r2,-4(fp)
   40324:	10800c18 	cmpnei	r2,r2,48
   40328:	103ff21e 	bne	r2,zero,402f4 <__alt_data_end+0xfffce2f4>
			IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE,0);
   4032c:	0007883a 	mov	r3,zero
   40330:	00800234 	movhi	r2,8
   40334:	10841404 	addi	r2,r2,4176
   40338:	10c00035 	stwio	r3,0(r2)
	}
   4033c:	003fed06 	br	402f4 <__alt_data_end+0xfffce2f4>

00040340 <_puts_r>:
   40340:	defff604 	addi	sp,sp,-40
   40344:	dc000715 	stw	r16,28(sp)
   40348:	2021883a 	mov	r16,r4
   4034c:	2809883a 	mov	r4,r5
   40350:	dc400815 	stw	r17,32(sp)
   40354:	dfc00915 	stw	ra,36(sp)
   40358:	2823883a 	mov	r17,r5
   4035c:	00404140 	call	40414 <strlen>
   40360:	10c00044 	addi	r3,r2,1
   40364:	d8800115 	stw	r2,4(sp)
   40368:	00800134 	movhi	r2,4
   4036c:	1094e304 	addi	r2,r2,21388
   40370:	d8800215 	stw	r2,8(sp)
   40374:	00800044 	movi	r2,1
   40378:	d8800315 	stw	r2,12(sp)
   4037c:	00800084 	movi	r2,2
   40380:	dc400015 	stw	r17,0(sp)
   40384:	d8c00615 	stw	r3,24(sp)
   40388:	dec00415 	stw	sp,16(sp)
   4038c:	d8800515 	stw	r2,20(sp)
   40390:	80000226 	beq	r16,zero,4039c <_puts_r+0x5c>
   40394:	80800e17 	ldw	r2,56(r16)
   40398:	10001426 	beq	r2,zero,403ec <_puts_r+0xac>
   4039c:	81400217 	ldw	r5,8(r16)
   403a0:	2880030b 	ldhu	r2,12(r5)
   403a4:	10c8000c 	andi	r3,r2,8192
   403a8:	1800061e 	bne	r3,zero,403c4 <_puts_r+0x84>
   403ac:	29001917 	ldw	r4,100(r5)
   403b0:	00f7ffc4 	movi	r3,-8193
   403b4:	10880014 	ori	r2,r2,8192
   403b8:	20c6703a 	and	r3,r4,r3
   403bc:	2880030d 	sth	r2,12(r5)
   403c0:	28c01915 	stw	r3,100(r5)
   403c4:	d9800404 	addi	r6,sp,16
   403c8:	8009883a 	mov	r4,r16
   403cc:	004085c0 	call	4085c <__sfvwrite_r>
   403d0:	1000091e 	bne	r2,zero,403f8 <_puts_r+0xb8>
   403d4:	00800284 	movi	r2,10
   403d8:	dfc00917 	ldw	ra,36(sp)
   403dc:	dc400817 	ldw	r17,32(sp)
   403e0:	dc000717 	ldw	r16,28(sp)
   403e4:	dec00a04 	addi	sp,sp,40
   403e8:	f800283a 	ret
   403ec:	8009883a 	mov	r4,r16
   403f0:	004080c0 	call	4080c <__sinit>
   403f4:	003fe906 	br	4039c <__alt_data_end+0xfffce39c>
   403f8:	00bfffc4 	movi	r2,-1
   403fc:	003ff606 	br	403d8 <__alt_data_end+0xfffce3d8>

00040400 <puts>:
   40400:	00800134 	movhi	r2,4
   40404:	10979504 	addi	r2,r2,24148
   40408:	200b883a 	mov	r5,r4
   4040c:	11000017 	ldw	r4,0(r2)
   40410:	00403401 	jmpi	40340 <_puts_r>

00040414 <strlen>:
   40414:	208000cc 	andi	r2,r4,3
   40418:	10002026 	beq	r2,zero,4049c <strlen+0x88>
   4041c:	20800007 	ldb	r2,0(r4)
   40420:	10002026 	beq	r2,zero,404a4 <strlen+0x90>
   40424:	2005883a 	mov	r2,r4
   40428:	00000206 	br	40434 <strlen+0x20>
   4042c:	10c00007 	ldb	r3,0(r2)
   40430:	18001826 	beq	r3,zero,40494 <strlen+0x80>
   40434:	10800044 	addi	r2,r2,1
   40438:	10c000cc 	andi	r3,r2,3
   4043c:	183ffb1e 	bne	r3,zero,4042c <__alt_data_end+0xfffce42c>
   40440:	10c00017 	ldw	r3,0(r2)
   40444:	01ffbff4 	movhi	r7,65279
   40448:	39ffbfc4 	addi	r7,r7,-257
   4044c:	00ca303a 	nor	r5,zero,r3
   40450:	01a02074 	movhi	r6,32897
   40454:	19c7883a 	add	r3,r3,r7
   40458:	31a02004 	addi	r6,r6,-32640
   4045c:	1946703a 	and	r3,r3,r5
   40460:	1986703a 	and	r3,r3,r6
   40464:	1800091e 	bne	r3,zero,4048c <strlen+0x78>
   40468:	10800104 	addi	r2,r2,4
   4046c:	10c00017 	ldw	r3,0(r2)
   40470:	19cb883a 	add	r5,r3,r7
   40474:	00c6303a 	nor	r3,zero,r3
   40478:	28c6703a 	and	r3,r5,r3
   4047c:	1986703a 	and	r3,r3,r6
   40480:	183ff926 	beq	r3,zero,40468 <__alt_data_end+0xfffce468>
   40484:	00000106 	br	4048c <strlen+0x78>
   40488:	10800044 	addi	r2,r2,1
   4048c:	10c00007 	ldb	r3,0(r2)
   40490:	183ffd1e 	bne	r3,zero,40488 <__alt_data_end+0xfffce488>
   40494:	1105c83a 	sub	r2,r2,r4
   40498:	f800283a 	ret
   4049c:	2005883a 	mov	r2,r4
   404a0:	003fe706 	br	40440 <__alt_data_end+0xfffce440>
   404a4:	0005883a 	mov	r2,zero
   404a8:	f800283a 	ret

000404ac <__fp_unlock>:
   404ac:	0005883a 	mov	r2,zero
   404b0:	f800283a 	ret

000404b4 <_cleanup_r>:
   404b4:	01400134 	movhi	r5,4
   404b8:	29491904 	addi	r5,r5,9316
   404bc:	0040de81 	jmpi	40de8 <_fwalk_reent>

000404c0 <__sinit.part.1>:
   404c0:	defff704 	addi	sp,sp,-36
   404c4:	00c00134 	movhi	r3,4
   404c8:	dfc00815 	stw	ra,32(sp)
   404cc:	ddc00715 	stw	r23,28(sp)
   404d0:	dd800615 	stw	r22,24(sp)
   404d4:	dd400515 	stw	r21,20(sp)
   404d8:	dd000415 	stw	r20,16(sp)
   404dc:	dcc00315 	stw	r19,12(sp)
   404e0:	dc800215 	stw	r18,8(sp)
   404e4:	dc400115 	stw	r17,4(sp)
   404e8:	dc000015 	stw	r16,0(sp)
   404ec:	18c12d04 	addi	r3,r3,1204
   404f0:	24000117 	ldw	r16,4(r4)
   404f4:	20c00f15 	stw	r3,60(r4)
   404f8:	2080bb04 	addi	r2,r4,748
   404fc:	00c000c4 	movi	r3,3
   40500:	20c0b915 	stw	r3,740(r4)
   40504:	2080ba15 	stw	r2,744(r4)
   40508:	2000b815 	stw	zero,736(r4)
   4050c:	05c00204 	movi	r23,8
   40510:	00800104 	movi	r2,4
   40514:	2025883a 	mov	r18,r4
   40518:	b80d883a 	mov	r6,r23
   4051c:	81001704 	addi	r4,r16,92
   40520:	000b883a 	mov	r5,zero
   40524:	80000015 	stw	zero,0(r16)
   40528:	80000115 	stw	zero,4(r16)
   4052c:	80000215 	stw	zero,8(r16)
   40530:	8080030d 	sth	r2,12(r16)
   40534:	80001915 	stw	zero,100(r16)
   40538:	8000038d 	sth	zero,14(r16)
   4053c:	80000415 	stw	zero,16(r16)
   40540:	80000515 	stw	zero,20(r16)
   40544:	80000615 	stw	zero,24(r16)
   40548:	0041a400 	call	41a40 <memset>
   4054c:	05800134 	movhi	r22,4
   40550:	94400217 	ldw	r17,8(r18)
   40554:	05400134 	movhi	r21,4
   40558:	05000134 	movhi	r20,4
   4055c:	04c00134 	movhi	r19,4
   40560:	b5884804 	addi	r22,r22,8480
   40564:	ad485f04 	addi	r21,r21,8572
   40568:	a5087e04 	addi	r20,r20,8696
   4056c:	9cc89504 	addi	r19,r19,8788
   40570:	85800815 	stw	r22,32(r16)
   40574:	85400915 	stw	r21,36(r16)
   40578:	85000a15 	stw	r20,40(r16)
   4057c:	84c00b15 	stw	r19,44(r16)
   40580:	84000715 	stw	r16,28(r16)
   40584:	00800284 	movi	r2,10
   40588:	8880030d 	sth	r2,12(r17)
   4058c:	00800044 	movi	r2,1
   40590:	b80d883a 	mov	r6,r23
   40594:	89001704 	addi	r4,r17,92
   40598:	000b883a 	mov	r5,zero
   4059c:	88000015 	stw	zero,0(r17)
   405a0:	88000115 	stw	zero,4(r17)
   405a4:	88000215 	stw	zero,8(r17)
   405a8:	88001915 	stw	zero,100(r17)
   405ac:	8880038d 	sth	r2,14(r17)
   405b0:	88000415 	stw	zero,16(r17)
   405b4:	88000515 	stw	zero,20(r17)
   405b8:	88000615 	stw	zero,24(r17)
   405bc:	0041a400 	call	41a40 <memset>
   405c0:	94000317 	ldw	r16,12(r18)
   405c4:	00800484 	movi	r2,18
   405c8:	8c400715 	stw	r17,28(r17)
   405cc:	8d800815 	stw	r22,32(r17)
   405d0:	8d400915 	stw	r21,36(r17)
   405d4:	8d000a15 	stw	r20,40(r17)
   405d8:	8cc00b15 	stw	r19,44(r17)
   405dc:	8080030d 	sth	r2,12(r16)
   405e0:	00800084 	movi	r2,2
   405e4:	80000015 	stw	zero,0(r16)
   405e8:	80000115 	stw	zero,4(r16)
   405ec:	80000215 	stw	zero,8(r16)
   405f0:	80001915 	stw	zero,100(r16)
   405f4:	8080038d 	sth	r2,14(r16)
   405f8:	80000415 	stw	zero,16(r16)
   405fc:	80000515 	stw	zero,20(r16)
   40600:	80000615 	stw	zero,24(r16)
   40604:	b80d883a 	mov	r6,r23
   40608:	000b883a 	mov	r5,zero
   4060c:	81001704 	addi	r4,r16,92
   40610:	0041a400 	call	41a40 <memset>
   40614:	00800044 	movi	r2,1
   40618:	84000715 	stw	r16,28(r16)
   4061c:	85800815 	stw	r22,32(r16)
   40620:	85400915 	stw	r21,36(r16)
   40624:	85000a15 	stw	r20,40(r16)
   40628:	84c00b15 	stw	r19,44(r16)
   4062c:	90800e15 	stw	r2,56(r18)
   40630:	dfc00817 	ldw	ra,32(sp)
   40634:	ddc00717 	ldw	r23,28(sp)
   40638:	dd800617 	ldw	r22,24(sp)
   4063c:	dd400517 	ldw	r21,20(sp)
   40640:	dd000417 	ldw	r20,16(sp)
   40644:	dcc00317 	ldw	r19,12(sp)
   40648:	dc800217 	ldw	r18,8(sp)
   4064c:	dc400117 	ldw	r17,4(sp)
   40650:	dc000017 	ldw	r16,0(sp)
   40654:	dec00904 	addi	sp,sp,36
   40658:	f800283a 	ret

0004065c <__fp_lock>:
   4065c:	0005883a 	mov	r2,zero
   40660:	f800283a 	ret

00040664 <__sfmoreglue>:
   40664:	defffc04 	addi	sp,sp,-16
   40668:	dc800215 	stw	r18,8(sp)
   4066c:	2825883a 	mov	r18,r5
   40670:	dc000015 	stw	r16,0(sp)
   40674:	01401a04 	movi	r5,104
   40678:	2021883a 	mov	r16,r4
   4067c:	913fffc4 	addi	r4,r18,-1
   40680:	dfc00315 	stw	ra,12(sp)
   40684:	dc400115 	stw	r17,4(sp)
   40688:	00431240 	call	43124 <__mulsi3>
   4068c:	8009883a 	mov	r4,r16
   40690:	11401d04 	addi	r5,r2,116
   40694:	1023883a 	mov	r17,r2
   40698:	0040eac0 	call	40eac <_malloc_r>
   4069c:	1021883a 	mov	r16,r2
   406a0:	10000726 	beq	r2,zero,406c0 <__sfmoreglue+0x5c>
   406a4:	11000304 	addi	r4,r2,12
   406a8:	10000015 	stw	zero,0(r2)
   406ac:	14800115 	stw	r18,4(r2)
   406b0:	11000215 	stw	r4,8(r2)
   406b4:	89801a04 	addi	r6,r17,104
   406b8:	000b883a 	mov	r5,zero
   406bc:	0041a400 	call	41a40 <memset>
   406c0:	8005883a 	mov	r2,r16
   406c4:	dfc00317 	ldw	ra,12(sp)
   406c8:	dc800217 	ldw	r18,8(sp)
   406cc:	dc400117 	ldw	r17,4(sp)
   406d0:	dc000017 	ldw	r16,0(sp)
   406d4:	dec00404 	addi	sp,sp,16
   406d8:	f800283a 	ret

000406dc <__sfp>:
   406dc:	defffb04 	addi	sp,sp,-20
   406e0:	dc000015 	stw	r16,0(sp)
   406e4:	04000134 	movhi	r16,4
   406e8:	84179404 	addi	r16,r16,24144
   406ec:	dcc00315 	stw	r19,12(sp)
   406f0:	2027883a 	mov	r19,r4
   406f4:	81000017 	ldw	r4,0(r16)
   406f8:	dfc00415 	stw	ra,16(sp)
   406fc:	dc800215 	stw	r18,8(sp)
   40700:	20800e17 	ldw	r2,56(r4)
   40704:	dc400115 	stw	r17,4(sp)
   40708:	1000021e 	bne	r2,zero,40714 <__sfp+0x38>
   4070c:	00404c00 	call	404c0 <__sinit.part.1>
   40710:	81000017 	ldw	r4,0(r16)
   40714:	2480b804 	addi	r18,r4,736
   40718:	047fffc4 	movi	r17,-1
   4071c:	91000117 	ldw	r4,4(r18)
   40720:	94000217 	ldw	r16,8(r18)
   40724:	213fffc4 	addi	r4,r4,-1
   40728:	20000a16 	blt	r4,zero,40754 <__sfp+0x78>
   4072c:	8080030f 	ldh	r2,12(r16)
   40730:	10000c26 	beq	r2,zero,40764 <__sfp+0x88>
   40734:	80c01d04 	addi	r3,r16,116
   40738:	00000206 	br	40744 <__sfp+0x68>
   4073c:	18bfe60f 	ldh	r2,-104(r3)
   40740:	10000826 	beq	r2,zero,40764 <__sfp+0x88>
   40744:	213fffc4 	addi	r4,r4,-1
   40748:	1c3ffd04 	addi	r16,r3,-12
   4074c:	18c01a04 	addi	r3,r3,104
   40750:	247ffa1e 	bne	r4,r17,4073c <__alt_data_end+0xfffce73c>
   40754:	90800017 	ldw	r2,0(r18)
   40758:	10001d26 	beq	r2,zero,407d0 <__sfp+0xf4>
   4075c:	1025883a 	mov	r18,r2
   40760:	003fee06 	br	4071c <__alt_data_end+0xfffce71c>
   40764:	00bfffc4 	movi	r2,-1
   40768:	8080038d 	sth	r2,14(r16)
   4076c:	00800044 	movi	r2,1
   40770:	8080030d 	sth	r2,12(r16)
   40774:	80001915 	stw	zero,100(r16)
   40778:	80000015 	stw	zero,0(r16)
   4077c:	80000215 	stw	zero,8(r16)
   40780:	80000115 	stw	zero,4(r16)
   40784:	80000415 	stw	zero,16(r16)
   40788:	80000515 	stw	zero,20(r16)
   4078c:	80000615 	stw	zero,24(r16)
   40790:	01800204 	movi	r6,8
   40794:	000b883a 	mov	r5,zero
   40798:	81001704 	addi	r4,r16,92
   4079c:	0041a400 	call	41a40 <memset>
   407a0:	8005883a 	mov	r2,r16
   407a4:	80000c15 	stw	zero,48(r16)
   407a8:	80000d15 	stw	zero,52(r16)
   407ac:	80001115 	stw	zero,68(r16)
   407b0:	80001215 	stw	zero,72(r16)
   407b4:	dfc00417 	ldw	ra,16(sp)
   407b8:	dcc00317 	ldw	r19,12(sp)
   407bc:	dc800217 	ldw	r18,8(sp)
   407c0:	dc400117 	ldw	r17,4(sp)
   407c4:	dc000017 	ldw	r16,0(sp)
   407c8:	dec00504 	addi	sp,sp,20
   407cc:	f800283a 	ret
   407d0:	01400104 	movi	r5,4
   407d4:	9809883a 	mov	r4,r19
   407d8:	00406640 	call	40664 <__sfmoreglue>
   407dc:	90800015 	stw	r2,0(r18)
   407e0:	103fde1e 	bne	r2,zero,4075c <__alt_data_end+0xfffce75c>
   407e4:	00800304 	movi	r2,12
   407e8:	98800015 	stw	r2,0(r19)
   407ec:	0005883a 	mov	r2,zero
   407f0:	003ff006 	br	407b4 <__alt_data_end+0xfffce7b4>

000407f4 <_cleanup>:
   407f4:	00800134 	movhi	r2,4
   407f8:	10979404 	addi	r2,r2,24144
   407fc:	11000017 	ldw	r4,0(r2)
   40800:	01400134 	movhi	r5,4
   40804:	29491904 	addi	r5,r5,9316
   40808:	0040de81 	jmpi	40de8 <_fwalk_reent>

0004080c <__sinit>:
   4080c:	20800e17 	ldw	r2,56(r4)
   40810:	10000126 	beq	r2,zero,40818 <__sinit+0xc>
   40814:	f800283a 	ret
   40818:	00404c01 	jmpi	404c0 <__sinit.part.1>

0004081c <__sfp_lock_acquire>:
   4081c:	f800283a 	ret

00040820 <__sfp_lock_release>:
   40820:	f800283a 	ret

00040824 <__sinit_lock_acquire>:
   40824:	f800283a 	ret

00040828 <__sinit_lock_release>:
   40828:	f800283a 	ret

0004082c <__fp_lock_all>:
   4082c:	00800134 	movhi	r2,4
   40830:	10979504 	addi	r2,r2,24148
   40834:	11000017 	ldw	r4,0(r2)
   40838:	01400134 	movhi	r5,4
   4083c:	29419704 	addi	r5,r5,1628
   40840:	0040d241 	jmpi	40d24 <_fwalk>

00040844 <__fp_unlock_all>:
   40844:	00800134 	movhi	r2,4
   40848:	10979504 	addi	r2,r2,24148
   4084c:	11000017 	ldw	r4,0(r2)
   40850:	01400134 	movhi	r5,4
   40854:	29412b04 	addi	r5,r5,1196
   40858:	0040d241 	jmpi	40d24 <_fwalk>

0004085c <__sfvwrite_r>:
   4085c:	30800217 	ldw	r2,8(r6)
   40860:	10006726 	beq	r2,zero,40a00 <__sfvwrite_r+0x1a4>
   40864:	28c0030b 	ldhu	r3,12(r5)
   40868:	defff404 	addi	sp,sp,-48
   4086c:	dd400715 	stw	r21,28(sp)
   40870:	dd000615 	stw	r20,24(sp)
   40874:	dc000215 	stw	r16,8(sp)
   40878:	dfc00b15 	stw	ra,44(sp)
   4087c:	df000a15 	stw	fp,40(sp)
   40880:	ddc00915 	stw	r23,36(sp)
   40884:	dd800815 	stw	r22,32(sp)
   40888:	dcc00515 	stw	r19,20(sp)
   4088c:	dc800415 	stw	r18,16(sp)
   40890:	dc400315 	stw	r17,12(sp)
   40894:	1880020c 	andi	r2,r3,8
   40898:	2821883a 	mov	r16,r5
   4089c:	202b883a 	mov	r21,r4
   408a0:	3029883a 	mov	r20,r6
   408a4:	10002726 	beq	r2,zero,40944 <__sfvwrite_r+0xe8>
   408a8:	28800417 	ldw	r2,16(r5)
   408ac:	10002526 	beq	r2,zero,40944 <__sfvwrite_r+0xe8>
   408b0:	1880008c 	andi	r2,r3,2
   408b4:	a4400017 	ldw	r17,0(r20)
   408b8:	10002a26 	beq	r2,zero,40964 <__sfvwrite_r+0x108>
   408bc:	05a00034 	movhi	r22,32768
   408c0:	0027883a 	mov	r19,zero
   408c4:	0025883a 	mov	r18,zero
   408c8:	b5bf0004 	addi	r22,r22,-1024
   408cc:	980d883a 	mov	r6,r19
   408d0:	a809883a 	mov	r4,r21
   408d4:	90004626 	beq	r18,zero,409f0 <__sfvwrite_r+0x194>
   408d8:	900f883a 	mov	r7,r18
   408dc:	b480022e 	bgeu	r22,r18,408e8 <__sfvwrite_r+0x8c>
   408e0:	01e00034 	movhi	r7,32768
   408e4:	39ff0004 	addi	r7,r7,-1024
   408e8:	80800917 	ldw	r2,36(r16)
   408ec:	81400717 	ldw	r5,28(r16)
   408f0:	103ee83a 	callr	r2
   408f4:	00805a0e 	bge	zero,r2,40a60 <__sfvwrite_r+0x204>
   408f8:	a0c00217 	ldw	r3,8(r20)
   408fc:	98a7883a 	add	r19,r19,r2
   40900:	90a5c83a 	sub	r18,r18,r2
   40904:	1885c83a 	sub	r2,r3,r2
   40908:	a0800215 	stw	r2,8(r20)
   4090c:	103fef1e 	bne	r2,zero,408cc <__alt_data_end+0xfffce8cc>
   40910:	0005883a 	mov	r2,zero
   40914:	dfc00b17 	ldw	ra,44(sp)
   40918:	df000a17 	ldw	fp,40(sp)
   4091c:	ddc00917 	ldw	r23,36(sp)
   40920:	dd800817 	ldw	r22,32(sp)
   40924:	dd400717 	ldw	r21,28(sp)
   40928:	dd000617 	ldw	r20,24(sp)
   4092c:	dcc00517 	ldw	r19,20(sp)
   40930:	dc800417 	ldw	r18,16(sp)
   40934:	dc400317 	ldw	r17,12(sp)
   40938:	dc000217 	ldw	r16,8(sp)
   4093c:	dec00c04 	addi	sp,sp,48
   40940:	f800283a 	ret
   40944:	800b883a 	mov	r5,r16
   40948:	a809883a 	mov	r4,r21
   4094c:	00422bc0 	call	422bc <__swsetup_r>
   40950:	1000ee1e 	bne	r2,zero,40d0c <__sfvwrite_r+0x4b0>
   40954:	80c0030b 	ldhu	r3,12(r16)
   40958:	a4400017 	ldw	r17,0(r20)
   4095c:	1880008c 	andi	r2,r3,2
   40960:	103fd61e 	bne	r2,zero,408bc <__alt_data_end+0xfffce8bc>
   40964:	1880004c 	andi	r2,r3,1
   40968:	1000421e 	bne	r2,zero,40a74 <__sfvwrite_r+0x218>
   4096c:	0039883a 	mov	fp,zero
   40970:	0025883a 	mov	r18,zero
   40974:	90001a26 	beq	r18,zero,409e0 <__sfvwrite_r+0x184>
   40978:	1880800c 	andi	r2,r3,512
   4097c:	84c00217 	ldw	r19,8(r16)
   40980:	10002126 	beq	r2,zero,40a08 <__sfvwrite_r+0x1ac>
   40984:	982f883a 	mov	r23,r19
   40988:	94c09636 	bltu	r18,r19,40be4 <__sfvwrite_r+0x388>
   4098c:	1881200c 	andi	r2,r3,1152
   40990:	1000a11e 	bne	r2,zero,40c18 <__sfvwrite_r+0x3bc>
   40994:	81000017 	ldw	r4,0(r16)
   40998:	b80d883a 	mov	r6,r23
   4099c:	e00b883a 	mov	r5,fp
   409a0:	00418e40 	call	418e4 <memmove>
   409a4:	80c00217 	ldw	r3,8(r16)
   409a8:	81000017 	ldw	r4,0(r16)
   409ac:	9005883a 	mov	r2,r18
   409b0:	1ce7c83a 	sub	r19,r3,r19
   409b4:	25cf883a 	add	r7,r4,r23
   409b8:	84c00215 	stw	r19,8(r16)
   409bc:	81c00015 	stw	r7,0(r16)
   409c0:	a0c00217 	ldw	r3,8(r20)
   409c4:	e0b9883a 	add	fp,fp,r2
   409c8:	90a5c83a 	sub	r18,r18,r2
   409cc:	18a7c83a 	sub	r19,r3,r2
   409d0:	a4c00215 	stw	r19,8(r20)
   409d4:	983fce26 	beq	r19,zero,40910 <__alt_data_end+0xfffce910>
   409d8:	80c0030b 	ldhu	r3,12(r16)
   409dc:	903fe61e 	bne	r18,zero,40978 <__alt_data_end+0xfffce978>
   409e0:	8f000017 	ldw	fp,0(r17)
   409e4:	8c800117 	ldw	r18,4(r17)
   409e8:	8c400204 	addi	r17,r17,8
   409ec:	003fe106 	br	40974 <__alt_data_end+0xfffce974>
   409f0:	8cc00017 	ldw	r19,0(r17)
   409f4:	8c800117 	ldw	r18,4(r17)
   409f8:	8c400204 	addi	r17,r17,8
   409fc:	003fb306 	br	408cc <__alt_data_end+0xfffce8cc>
   40a00:	0005883a 	mov	r2,zero
   40a04:	f800283a 	ret
   40a08:	81000017 	ldw	r4,0(r16)
   40a0c:	80800417 	ldw	r2,16(r16)
   40a10:	11005a36 	bltu	r2,r4,40b7c <__sfvwrite_r+0x320>
   40a14:	85c00517 	ldw	r23,20(r16)
   40a18:	95c05836 	bltu	r18,r23,40b7c <__sfvwrite_r+0x320>
   40a1c:	00a00034 	movhi	r2,32768
   40a20:	10bfffc4 	addi	r2,r2,-1
   40a24:	9009883a 	mov	r4,r18
   40a28:	1480012e 	bgeu	r2,r18,40a30 <__sfvwrite_r+0x1d4>
   40a2c:	1009883a 	mov	r4,r2
   40a30:	b80b883a 	mov	r5,r23
   40a34:	0042f700 	call	42f70 <__divsi3>
   40a38:	b80b883a 	mov	r5,r23
   40a3c:	1009883a 	mov	r4,r2
   40a40:	00431240 	call	43124 <__mulsi3>
   40a44:	81400717 	ldw	r5,28(r16)
   40a48:	80c00917 	ldw	r3,36(r16)
   40a4c:	100f883a 	mov	r7,r2
   40a50:	e00d883a 	mov	r6,fp
   40a54:	a809883a 	mov	r4,r21
   40a58:	183ee83a 	callr	r3
   40a5c:	00bfd816 	blt	zero,r2,409c0 <__alt_data_end+0xfffce9c0>
   40a60:	8080030b 	ldhu	r2,12(r16)
   40a64:	10801014 	ori	r2,r2,64
   40a68:	8080030d 	sth	r2,12(r16)
   40a6c:	00bfffc4 	movi	r2,-1
   40a70:	003fa806 	br	40914 <__alt_data_end+0xfffce914>
   40a74:	0027883a 	mov	r19,zero
   40a78:	0011883a 	mov	r8,zero
   40a7c:	0039883a 	mov	fp,zero
   40a80:	0025883a 	mov	r18,zero
   40a84:	90001f26 	beq	r18,zero,40b04 <__sfvwrite_r+0x2a8>
   40a88:	40005a26 	beq	r8,zero,40bf4 <__sfvwrite_r+0x398>
   40a8c:	982d883a 	mov	r22,r19
   40a90:	94c0012e 	bgeu	r18,r19,40a98 <__sfvwrite_r+0x23c>
   40a94:	902d883a 	mov	r22,r18
   40a98:	81000017 	ldw	r4,0(r16)
   40a9c:	80800417 	ldw	r2,16(r16)
   40aa0:	b02f883a 	mov	r23,r22
   40aa4:	81c00517 	ldw	r7,20(r16)
   40aa8:	1100032e 	bgeu	r2,r4,40ab8 <__sfvwrite_r+0x25c>
   40aac:	80c00217 	ldw	r3,8(r16)
   40ab0:	38c7883a 	add	r3,r7,r3
   40ab4:	1d801816 	blt	r3,r22,40b18 <__sfvwrite_r+0x2bc>
   40ab8:	b1c03e16 	blt	r22,r7,40bb4 <__sfvwrite_r+0x358>
   40abc:	80800917 	ldw	r2,36(r16)
   40ac0:	81400717 	ldw	r5,28(r16)
   40ac4:	e00d883a 	mov	r6,fp
   40ac8:	da000115 	stw	r8,4(sp)
   40acc:	a809883a 	mov	r4,r21
   40ad0:	103ee83a 	callr	r2
   40ad4:	102f883a 	mov	r23,r2
   40ad8:	da000117 	ldw	r8,4(sp)
   40adc:	00bfe00e 	bge	zero,r2,40a60 <__alt_data_end+0xfffcea60>
   40ae0:	9de7c83a 	sub	r19,r19,r23
   40ae4:	98001f26 	beq	r19,zero,40b64 <__sfvwrite_r+0x308>
   40ae8:	a0800217 	ldw	r2,8(r20)
   40aec:	e5f9883a 	add	fp,fp,r23
   40af0:	95e5c83a 	sub	r18,r18,r23
   40af4:	15efc83a 	sub	r23,r2,r23
   40af8:	a5c00215 	stw	r23,8(r20)
   40afc:	b83f8426 	beq	r23,zero,40910 <__alt_data_end+0xfffce910>
   40b00:	903fe11e 	bne	r18,zero,40a88 <__alt_data_end+0xfffcea88>
   40b04:	8f000017 	ldw	fp,0(r17)
   40b08:	8c800117 	ldw	r18,4(r17)
   40b0c:	0011883a 	mov	r8,zero
   40b10:	8c400204 	addi	r17,r17,8
   40b14:	003fdb06 	br	40a84 <__alt_data_end+0xfffcea84>
   40b18:	180d883a 	mov	r6,r3
   40b1c:	e00b883a 	mov	r5,fp
   40b20:	da000115 	stw	r8,4(sp)
   40b24:	d8c00015 	stw	r3,0(sp)
   40b28:	00418e40 	call	418e4 <memmove>
   40b2c:	d8c00017 	ldw	r3,0(sp)
   40b30:	80800017 	ldw	r2,0(r16)
   40b34:	800b883a 	mov	r5,r16
   40b38:	a809883a 	mov	r4,r21
   40b3c:	10c5883a 	add	r2,r2,r3
   40b40:	80800015 	stw	r2,0(r16)
   40b44:	d8c00015 	stw	r3,0(sp)
   40b48:	00427840 	call	42784 <_fflush_r>
   40b4c:	d8c00017 	ldw	r3,0(sp)
   40b50:	da000117 	ldw	r8,4(sp)
   40b54:	103fc21e 	bne	r2,zero,40a60 <__alt_data_end+0xfffcea60>
   40b58:	182f883a 	mov	r23,r3
   40b5c:	9de7c83a 	sub	r19,r19,r23
   40b60:	983fe11e 	bne	r19,zero,40ae8 <__alt_data_end+0xfffceae8>
   40b64:	800b883a 	mov	r5,r16
   40b68:	a809883a 	mov	r4,r21
   40b6c:	00427840 	call	42784 <_fflush_r>
   40b70:	103fbb1e 	bne	r2,zero,40a60 <__alt_data_end+0xfffcea60>
   40b74:	0011883a 	mov	r8,zero
   40b78:	003fdb06 	br	40ae8 <__alt_data_end+0xfffceae8>
   40b7c:	94c0012e 	bgeu	r18,r19,40b84 <__sfvwrite_r+0x328>
   40b80:	9027883a 	mov	r19,r18
   40b84:	980d883a 	mov	r6,r19
   40b88:	e00b883a 	mov	r5,fp
   40b8c:	00418e40 	call	418e4 <memmove>
   40b90:	80800217 	ldw	r2,8(r16)
   40b94:	80c00017 	ldw	r3,0(r16)
   40b98:	14c5c83a 	sub	r2,r2,r19
   40b9c:	1cc7883a 	add	r3,r3,r19
   40ba0:	80800215 	stw	r2,8(r16)
   40ba4:	80c00015 	stw	r3,0(r16)
   40ba8:	10004326 	beq	r2,zero,40cb8 <__sfvwrite_r+0x45c>
   40bac:	9805883a 	mov	r2,r19
   40bb0:	003f8306 	br	409c0 <__alt_data_end+0xfffce9c0>
   40bb4:	b00d883a 	mov	r6,r22
   40bb8:	e00b883a 	mov	r5,fp
   40bbc:	da000115 	stw	r8,4(sp)
   40bc0:	00418e40 	call	418e4 <memmove>
   40bc4:	80800217 	ldw	r2,8(r16)
   40bc8:	80c00017 	ldw	r3,0(r16)
   40bcc:	da000117 	ldw	r8,4(sp)
   40bd0:	1585c83a 	sub	r2,r2,r22
   40bd4:	1dad883a 	add	r22,r3,r22
   40bd8:	80800215 	stw	r2,8(r16)
   40bdc:	85800015 	stw	r22,0(r16)
   40be0:	003fbf06 	br	40ae0 <__alt_data_end+0xfffceae0>
   40be4:	81000017 	ldw	r4,0(r16)
   40be8:	9027883a 	mov	r19,r18
   40bec:	902f883a 	mov	r23,r18
   40bf0:	003f6906 	br	40998 <__alt_data_end+0xfffce998>
   40bf4:	900d883a 	mov	r6,r18
   40bf8:	01400284 	movi	r5,10
   40bfc:	e009883a 	mov	r4,fp
   40c00:	00416b80 	call	416b8 <memchr>
   40c04:	10003e26 	beq	r2,zero,40d00 <__sfvwrite_r+0x4a4>
   40c08:	10800044 	addi	r2,r2,1
   40c0c:	1727c83a 	sub	r19,r2,fp
   40c10:	02000044 	movi	r8,1
   40c14:	003f9d06 	br	40a8c <__alt_data_end+0xfffcea8c>
   40c18:	80800517 	ldw	r2,20(r16)
   40c1c:	81400417 	ldw	r5,16(r16)
   40c20:	81c00017 	ldw	r7,0(r16)
   40c24:	10a7883a 	add	r19,r2,r2
   40c28:	9885883a 	add	r2,r19,r2
   40c2c:	1026d7fa 	srli	r19,r2,31
   40c30:	396dc83a 	sub	r22,r7,r5
   40c34:	b1000044 	addi	r4,r22,1
   40c38:	9885883a 	add	r2,r19,r2
   40c3c:	1027d07a 	srai	r19,r2,1
   40c40:	2485883a 	add	r2,r4,r18
   40c44:	980d883a 	mov	r6,r19
   40c48:	9880022e 	bgeu	r19,r2,40c54 <__sfvwrite_r+0x3f8>
   40c4c:	1027883a 	mov	r19,r2
   40c50:	100d883a 	mov	r6,r2
   40c54:	18c1000c 	andi	r3,r3,1024
   40c58:	18001c26 	beq	r3,zero,40ccc <__sfvwrite_r+0x470>
   40c5c:	300b883a 	mov	r5,r6
   40c60:	a809883a 	mov	r4,r21
   40c64:	0040eac0 	call	40eac <_malloc_r>
   40c68:	102f883a 	mov	r23,r2
   40c6c:	10002926 	beq	r2,zero,40d14 <__sfvwrite_r+0x4b8>
   40c70:	81400417 	ldw	r5,16(r16)
   40c74:	b00d883a 	mov	r6,r22
   40c78:	1009883a 	mov	r4,r2
   40c7c:	004179c0 	call	4179c <memcpy>
   40c80:	8080030b 	ldhu	r2,12(r16)
   40c84:	00fedfc4 	movi	r3,-1153
   40c88:	10c4703a 	and	r2,r2,r3
   40c8c:	10802014 	ori	r2,r2,128
   40c90:	8080030d 	sth	r2,12(r16)
   40c94:	bd89883a 	add	r4,r23,r22
   40c98:	9d8fc83a 	sub	r7,r19,r22
   40c9c:	85c00415 	stw	r23,16(r16)
   40ca0:	84c00515 	stw	r19,20(r16)
   40ca4:	81000015 	stw	r4,0(r16)
   40ca8:	9027883a 	mov	r19,r18
   40cac:	81c00215 	stw	r7,8(r16)
   40cb0:	902f883a 	mov	r23,r18
   40cb4:	003f3806 	br	40998 <__alt_data_end+0xfffce998>
   40cb8:	800b883a 	mov	r5,r16
   40cbc:	a809883a 	mov	r4,r21
   40cc0:	00427840 	call	42784 <_fflush_r>
   40cc4:	103fb926 	beq	r2,zero,40bac <__alt_data_end+0xfffcebac>
   40cc8:	003f6506 	br	40a60 <__alt_data_end+0xfffcea60>
   40ccc:	a809883a 	mov	r4,r21
   40cd0:	0041b680 	call	41b68 <_realloc_r>
   40cd4:	102f883a 	mov	r23,r2
   40cd8:	103fee1e 	bne	r2,zero,40c94 <__alt_data_end+0xfffcec94>
   40cdc:	81400417 	ldw	r5,16(r16)
   40ce0:	a809883a 	mov	r4,r21
   40ce4:	00429340 	call	42934 <_free_r>
   40ce8:	8080030b 	ldhu	r2,12(r16)
   40cec:	00ffdfc4 	movi	r3,-129
   40cf0:	1884703a 	and	r2,r3,r2
   40cf4:	00c00304 	movi	r3,12
   40cf8:	a8c00015 	stw	r3,0(r21)
   40cfc:	003f5906 	br	40a64 <__alt_data_end+0xfffcea64>
   40d00:	94c00044 	addi	r19,r18,1
   40d04:	02000044 	movi	r8,1
   40d08:	003f6006 	br	40a8c <__alt_data_end+0xfffcea8c>
   40d0c:	00bfffc4 	movi	r2,-1
   40d10:	003f0006 	br	40914 <__alt_data_end+0xfffce914>
   40d14:	00800304 	movi	r2,12
   40d18:	a8800015 	stw	r2,0(r21)
   40d1c:	8080030b 	ldhu	r2,12(r16)
   40d20:	003f5006 	br	40a64 <__alt_data_end+0xfffcea64>

00040d24 <_fwalk>:
   40d24:	defff704 	addi	sp,sp,-36
   40d28:	dd000415 	stw	r20,16(sp)
   40d2c:	dfc00815 	stw	ra,32(sp)
   40d30:	ddc00715 	stw	r23,28(sp)
   40d34:	dd800615 	stw	r22,24(sp)
   40d38:	dd400515 	stw	r21,20(sp)
   40d3c:	dcc00315 	stw	r19,12(sp)
   40d40:	dc800215 	stw	r18,8(sp)
   40d44:	dc400115 	stw	r17,4(sp)
   40d48:	dc000015 	stw	r16,0(sp)
   40d4c:	2500b804 	addi	r20,r4,736
   40d50:	a0002326 	beq	r20,zero,40de0 <_fwalk+0xbc>
   40d54:	282b883a 	mov	r21,r5
   40d58:	002f883a 	mov	r23,zero
   40d5c:	05800044 	movi	r22,1
   40d60:	04ffffc4 	movi	r19,-1
   40d64:	a4400117 	ldw	r17,4(r20)
   40d68:	a4800217 	ldw	r18,8(r20)
   40d6c:	8c7fffc4 	addi	r17,r17,-1
   40d70:	88000d16 	blt	r17,zero,40da8 <_fwalk+0x84>
   40d74:	94000304 	addi	r16,r18,12
   40d78:	94800384 	addi	r18,r18,14
   40d7c:	8080000b 	ldhu	r2,0(r16)
   40d80:	8c7fffc4 	addi	r17,r17,-1
   40d84:	813ffd04 	addi	r4,r16,-12
   40d88:	b080042e 	bgeu	r22,r2,40d9c <_fwalk+0x78>
   40d8c:	9080000f 	ldh	r2,0(r18)
   40d90:	14c00226 	beq	r2,r19,40d9c <_fwalk+0x78>
   40d94:	a83ee83a 	callr	r21
   40d98:	b8aeb03a 	or	r23,r23,r2
   40d9c:	84001a04 	addi	r16,r16,104
   40da0:	94801a04 	addi	r18,r18,104
   40da4:	8cfff51e 	bne	r17,r19,40d7c <__alt_data_end+0xfffced7c>
   40da8:	a5000017 	ldw	r20,0(r20)
   40dac:	a03fed1e 	bne	r20,zero,40d64 <__alt_data_end+0xfffced64>
   40db0:	b805883a 	mov	r2,r23
   40db4:	dfc00817 	ldw	ra,32(sp)
   40db8:	ddc00717 	ldw	r23,28(sp)
   40dbc:	dd800617 	ldw	r22,24(sp)
   40dc0:	dd400517 	ldw	r21,20(sp)
   40dc4:	dd000417 	ldw	r20,16(sp)
   40dc8:	dcc00317 	ldw	r19,12(sp)
   40dcc:	dc800217 	ldw	r18,8(sp)
   40dd0:	dc400117 	ldw	r17,4(sp)
   40dd4:	dc000017 	ldw	r16,0(sp)
   40dd8:	dec00904 	addi	sp,sp,36
   40ddc:	f800283a 	ret
   40de0:	002f883a 	mov	r23,zero
   40de4:	003ff206 	br	40db0 <__alt_data_end+0xfffcedb0>

00040de8 <_fwalk_reent>:
   40de8:	defff704 	addi	sp,sp,-36
   40dec:	dd000415 	stw	r20,16(sp)
   40df0:	dfc00815 	stw	ra,32(sp)
   40df4:	ddc00715 	stw	r23,28(sp)
   40df8:	dd800615 	stw	r22,24(sp)
   40dfc:	dd400515 	stw	r21,20(sp)
   40e00:	dcc00315 	stw	r19,12(sp)
   40e04:	dc800215 	stw	r18,8(sp)
   40e08:	dc400115 	stw	r17,4(sp)
   40e0c:	dc000015 	stw	r16,0(sp)
   40e10:	2500b804 	addi	r20,r4,736
   40e14:	a0002326 	beq	r20,zero,40ea4 <_fwalk_reent+0xbc>
   40e18:	282b883a 	mov	r21,r5
   40e1c:	2027883a 	mov	r19,r4
   40e20:	002f883a 	mov	r23,zero
   40e24:	05800044 	movi	r22,1
   40e28:	04bfffc4 	movi	r18,-1
   40e2c:	a4400117 	ldw	r17,4(r20)
   40e30:	a4000217 	ldw	r16,8(r20)
   40e34:	8c7fffc4 	addi	r17,r17,-1
   40e38:	88000c16 	blt	r17,zero,40e6c <_fwalk_reent+0x84>
   40e3c:	84000304 	addi	r16,r16,12
   40e40:	8080000b 	ldhu	r2,0(r16)
   40e44:	8c7fffc4 	addi	r17,r17,-1
   40e48:	817ffd04 	addi	r5,r16,-12
   40e4c:	b080052e 	bgeu	r22,r2,40e64 <_fwalk_reent+0x7c>
   40e50:	8080008f 	ldh	r2,2(r16)
   40e54:	9809883a 	mov	r4,r19
   40e58:	14800226 	beq	r2,r18,40e64 <_fwalk_reent+0x7c>
   40e5c:	a83ee83a 	callr	r21
   40e60:	b8aeb03a 	or	r23,r23,r2
   40e64:	84001a04 	addi	r16,r16,104
   40e68:	8cbff51e 	bne	r17,r18,40e40 <__alt_data_end+0xfffcee40>
   40e6c:	a5000017 	ldw	r20,0(r20)
   40e70:	a03fee1e 	bne	r20,zero,40e2c <__alt_data_end+0xfffcee2c>
   40e74:	b805883a 	mov	r2,r23
   40e78:	dfc00817 	ldw	ra,32(sp)
   40e7c:	ddc00717 	ldw	r23,28(sp)
   40e80:	dd800617 	ldw	r22,24(sp)
   40e84:	dd400517 	ldw	r21,20(sp)
   40e88:	dd000417 	ldw	r20,16(sp)
   40e8c:	dcc00317 	ldw	r19,12(sp)
   40e90:	dc800217 	ldw	r18,8(sp)
   40e94:	dc400117 	ldw	r17,4(sp)
   40e98:	dc000017 	ldw	r16,0(sp)
   40e9c:	dec00904 	addi	sp,sp,36
   40ea0:	f800283a 	ret
   40ea4:	002f883a 	mov	r23,zero
   40ea8:	003ff206 	br	40e74 <__alt_data_end+0xfffcee74>

00040eac <_malloc_r>:
   40eac:	defff504 	addi	sp,sp,-44
   40eb0:	dc800315 	stw	r18,12(sp)
   40eb4:	dfc00a15 	stw	ra,40(sp)
   40eb8:	df000915 	stw	fp,36(sp)
   40ebc:	ddc00815 	stw	r23,32(sp)
   40ec0:	dd800715 	stw	r22,28(sp)
   40ec4:	dd400615 	stw	r21,24(sp)
   40ec8:	dd000515 	stw	r20,20(sp)
   40ecc:	dcc00415 	stw	r19,16(sp)
   40ed0:	dc400215 	stw	r17,8(sp)
   40ed4:	dc000115 	stw	r16,4(sp)
   40ed8:	288002c4 	addi	r2,r5,11
   40edc:	00c00584 	movi	r3,22
   40ee0:	2025883a 	mov	r18,r4
   40ee4:	18807f2e 	bgeu	r3,r2,410e4 <_malloc_r+0x238>
   40ee8:	047ffe04 	movi	r17,-8
   40eec:	1462703a 	and	r17,r2,r17
   40ef0:	8800a316 	blt	r17,zero,41180 <_malloc_r+0x2d4>
   40ef4:	8940a236 	bltu	r17,r5,41180 <_malloc_r+0x2d4>
   40ef8:	00436e80 	call	436e8 <__malloc_lock>
   40efc:	00807dc4 	movi	r2,503
   40f00:	1441e92e 	bgeu	r2,r17,416a8 <_malloc_r+0x7fc>
   40f04:	8804d27a 	srli	r2,r17,9
   40f08:	1000a126 	beq	r2,zero,41190 <_malloc_r+0x2e4>
   40f0c:	00c00104 	movi	r3,4
   40f10:	18811e36 	bltu	r3,r2,4138c <_malloc_r+0x4e0>
   40f14:	8804d1ba 	srli	r2,r17,6
   40f18:	12000e44 	addi	r8,r2,57
   40f1c:	11c00e04 	addi	r7,r2,56
   40f20:	4209883a 	add	r4,r8,r8
   40f24:	04c00134 	movhi	r19,4
   40f28:	2109883a 	add	r4,r4,r4
   40f2c:	9cd5f704 	addi	r19,r19,22492
   40f30:	2109883a 	add	r4,r4,r4
   40f34:	9909883a 	add	r4,r19,r4
   40f38:	24000117 	ldw	r16,4(r4)
   40f3c:	213ffe04 	addi	r4,r4,-8
   40f40:	24009726 	beq	r4,r16,411a0 <_malloc_r+0x2f4>
   40f44:	80800117 	ldw	r2,4(r16)
   40f48:	01bfff04 	movi	r6,-4
   40f4c:	014003c4 	movi	r5,15
   40f50:	1184703a 	and	r2,r2,r6
   40f54:	1447c83a 	sub	r3,r2,r17
   40f58:	28c00716 	blt	r5,r3,40f78 <_malloc_r+0xcc>
   40f5c:	1800920e 	bge	r3,zero,411a8 <_malloc_r+0x2fc>
   40f60:	84000317 	ldw	r16,12(r16)
   40f64:	24008e26 	beq	r4,r16,411a0 <_malloc_r+0x2f4>
   40f68:	80800117 	ldw	r2,4(r16)
   40f6c:	1184703a 	and	r2,r2,r6
   40f70:	1447c83a 	sub	r3,r2,r17
   40f74:	28fff90e 	bge	r5,r3,40f5c <__alt_data_end+0xfffcef5c>
   40f78:	3809883a 	mov	r4,r7
   40f7c:	01800134 	movhi	r6,4
   40f80:	9c000417 	ldw	r16,16(r19)
   40f84:	3195f704 	addi	r6,r6,22492
   40f88:	32000204 	addi	r8,r6,8
   40f8c:	82013426 	beq	r16,r8,41460 <_malloc_r+0x5b4>
   40f90:	80c00117 	ldw	r3,4(r16)
   40f94:	00bfff04 	movi	r2,-4
   40f98:	188e703a 	and	r7,r3,r2
   40f9c:	3c45c83a 	sub	r2,r7,r17
   40fa0:	00c003c4 	movi	r3,15
   40fa4:	18811f16 	blt	r3,r2,41424 <_malloc_r+0x578>
   40fa8:	32000515 	stw	r8,20(r6)
   40fac:	32000415 	stw	r8,16(r6)
   40fb0:	10007f0e 	bge	r2,zero,411b0 <_malloc_r+0x304>
   40fb4:	00807fc4 	movi	r2,511
   40fb8:	11c0fd36 	bltu	r2,r7,413b0 <_malloc_r+0x504>
   40fbc:	3806d0fa 	srli	r3,r7,3
   40fc0:	01c00044 	movi	r7,1
   40fc4:	30800117 	ldw	r2,4(r6)
   40fc8:	19400044 	addi	r5,r3,1
   40fcc:	294b883a 	add	r5,r5,r5
   40fd0:	1807d0ba 	srai	r3,r3,2
   40fd4:	294b883a 	add	r5,r5,r5
   40fd8:	294b883a 	add	r5,r5,r5
   40fdc:	298b883a 	add	r5,r5,r6
   40fe0:	38c6983a 	sll	r3,r7,r3
   40fe4:	29c00017 	ldw	r7,0(r5)
   40fe8:	2a7ffe04 	addi	r9,r5,-8
   40fec:	1886b03a 	or	r3,r3,r2
   40ff0:	82400315 	stw	r9,12(r16)
   40ff4:	81c00215 	stw	r7,8(r16)
   40ff8:	30c00115 	stw	r3,4(r6)
   40ffc:	2c000015 	stw	r16,0(r5)
   41000:	3c000315 	stw	r16,12(r7)
   41004:	2005d0ba 	srai	r2,r4,2
   41008:	01400044 	movi	r5,1
   4100c:	288a983a 	sll	r5,r5,r2
   41010:	19406f36 	bltu	r3,r5,411d0 <_malloc_r+0x324>
   41014:	28c4703a 	and	r2,r5,r3
   41018:	10000a1e 	bne	r2,zero,41044 <_malloc_r+0x198>
   4101c:	00bfff04 	movi	r2,-4
   41020:	294b883a 	add	r5,r5,r5
   41024:	2088703a 	and	r4,r4,r2
   41028:	28c4703a 	and	r2,r5,r3
   4102c:	21000104 	addi	r4,r4,4
   41030:	1000041e 	bne	r2,zero,41044 <_malloc_r+0x198>
   41034:	294b883a 	add	r5,r5,r5
   41038:	28c4703a 	and	r2,r5,r3
   4103c:	21000104 	addi	r4,r4,4
   41040:	103ffc26 	beq	r2,zero,41034 <__alt_data_end+0xfffcf034>
   41044:	02bfff04 	movi	r10,-4
   41048:	024003c4 	movi	r9,15
   4104c:	21800044 	addi	r6,r4,1
   41050:	318d883a 	add	r6,r6,r6
   41054:	318d883a 	add	r6,r6,r6
   41058:	318d883a 	add	r6,r6,r6
   4105c:	998d883a 	add	r6,r19,r6
   41060:	333ffe04 	addi	r12,r6,-8
   41064:	2017883a 	mov	r11,r4
   41068:	31800104 	addi	r6,r6,4
   4106c:	34000017 	ldw	r16,0(r6)
   41070:	31fffd04 	addi	r7,r6,-12
   41074:	81c0041e 	bne	r16,r7,41088 <_malloc_r+0x1dc>
   41078:	0000fb06 	br	41468 <_malloc_r+0x5bc>
   4107c:	1801030e 	bge	r3,zero,4148c <_malloc_r+0x5e0>
   41080:	84000317 	ldw	r16,12(r16)
   41084:	81c0f826 	beq	r16,r7,41468 <_malloc_r+0x5bc>
   41088:	80800117 	ldw	r2,4(r16)
   4108c:	1284703a 	and	r2,r2,r10
   41090:	1447c83a 	sub	r3,r2,r17
   41094:	48fff90e 	bge	r9,r3,4107c <__alt_data_end+0xfffcf07c>
   41098:	80800317 	ldw	r2,12(r16)
   4109c:	81000217 	ldw	r4,8(r16)
   410a0:	89400054 	ori	r5,r17,1
   410a4:	81400115 	stw	r5,4(r16)
   410a8:	20800315 	stw	r2,12(r4)
   410ac:	11000215 	stw	r4,8(r2)
   410b0:	8463883a 	add	r17,r16,r17
   410b4:	9c400515 	stw	r17,20(r19)
   410b8:	9c400415 	stw	r17,16(r19)
   410bc:	18800054 	ori	r2,r3,1
   410c0:	88800115 	stw	r2,4(r17)
   410c4:	8a000315 	stw	r8,12(r17)
   410c8:	8a000215 	stw	r8,8(r17)
   410cc:	88e3883a 	add	r17,r17,r3
   410d0:	88c00015 	stw	r3,0(r17)
   410d4:	9009883a 	mov	r4,r18
   410d8:	004370c0 	call	4370c <__malloc_unlock>
   410dc:	80800204 	addi	r2,r16,8
   410e0:	00001b06 	br	41150 <_malloc_r+0x2a4>
   410e4:	04400404 	movi	r17,16
   410e8:	89402536 	bltu	r17,r5,41180 <_malloc_r+0x2d4>
   410ec:	00436e80 	call	436e8 <__malloc_lock>
   410f0:	00800184 	movi	r2,6
   410f4:	01000084 	movi	r4,2
   410f8:	04c00134 	movhi	r19,4
   410fc:	1085883a 	add	r2,r2,r2
   41100:	9cd5f704 	addi	r19,r19,22492
   41104:	1085883a 	add	r2,r2,r2
   41108:	9885883a 	add	r2,r19,r2
   4110c:	14000117 	ldw	r16,4(r2)
   41110:	10fffe04 	addi	r3,r2,-8
   41114:	80c0d926 	beq	r16,r3,4147c <_malloc_r+0x5d0>
   41118:	80c00117 	ldw	r3,4(r16)
   4111c:	81000317 	ldw	r4,12(r16)
   41120:	00bfff04 	movi	r2,-4
   41124:	1884703a 	and	r2,r3,r2
   41128:	81400217 	ldw	r5,8(r16)
   4112c:	8085883a 	add	r2,r16,r2
   41130:	10c00117 	ldw	r3,4(r2)
   41134:	29000315 	stw	r4,12(r5)
   41138:	21400215 	stw	r5,8(r4)
   4113c:	18c00054 	ori	r3,r3,1
   41140:	10c00115 	stw	r3,4(r2)
   41144:	9009883a 	mov	r4,r18
   41148:	004370c0 	call	4370c <__malloc_unlock>
   4114c:	80800204 	addi	r2,r16,8
   41150:	dfc00a17 	ldw	ra,40(sp)
   41154:	df000917 	ldw	fp,36(sp)
   41158:	ddc00817 	ldw	r23,32(sp)
   4115c:	dd800717 	ldw	r22,28(sp)
   41160:	dd400617 	ldw	r21,24(sp)
   41164:	dd000517 	ldw	r20,20(sp)
   41168:	dcc00417 	ldw	r19,16(sp)
   4116c:	dc800317 	ldw	r18,12(sp)
   41170:	dc400217 	ldw	r17,8(sp)
   41174:	dc000117 	ldw	r16,4(sp)
   41178:	dec00b04 	addi	sp,sp,44
   4117c:	f800283a 	ret
   41180:	00800304 	movi	r2,12
   41184:	90800015 	stw	r2,0(r18)
   41188:	0005883a 	mov	r2,zero
   4118c:	003ff006 	br	41150 <__alt_data_end+0xfffcf150>
   41190:	01002004 	movi	r4,128
   41194:	02001004 	movi	r8,64
   41198:	01c00fc4 	movi	r7,63
   4119c:	003f6106 	br	40f24 <__alt_data_end+0xfffcef24>
   411a0:	4009883a 	mov	r4,r8
   411a4:	003f7506 	br	40f7c <__alt_data_end+0xfffcef7c>
   411a8:	81000317 	ldw	r4,12(r16)
   411ac:	003fde06 	br	41128 <__alt_data_end+0xfffcf128>
   411b0:	81c5883a 	add	r2,r16,r7
   411b4:	11400117 	ldw	r5,4(r2)
   411b8:	9009883a 	mov	r4,r18
   411bc:	29400054 	ori	r5,r5,1
   411c0:	11400115 	stw	r5,4(r2)
   411c4:	004370c0 	call	4370c <__malloc_unlock>
   411c8:	80800204 	addi	r2,r16,8
   411cc:	003fe006 	br	41150 <__alt_data_end+0xfffcf150>
   411d0:	9c000217 	ldw	r16,8(r19)
   411d4:	00bfff04 	movi	r2,-4
   411d8:	85800117 	ldw	r22,4(r16)
   411dc:	b0ac703a 	and	r22,r22,r2
   411e0:	b4400336 	bltu	r22,r17,411f0 <_malloc_r+0x344>
   411e4:	b445c83a 	sub	r2,r22,r17
   411e8:	00c003c4 	movi	r3,15
   411ec:	18805d16 	blt	r3,r2,41364 <_malloc_r+0x4b8>
   411f0:	05c00134 	movhi	r23,4
   411f4:	00800134 	movhi	r2,4
   411f8:	109a5604 	addi	r2,r2,26968
   411fc:	bdd79604 	addi	r23,r23,24152
   41200:	15400017 	ldw	r21,0(r2)
   41204:	b8c00017 	ldw	r3,0(r23)
   41208:	00bfffc4 	movi	r2,-1
   4120c:	858d883a 	add	r6,r16,r22
   41210:	8d6b883a 	add	r21,r17,r21
   41214:	1880ea26 	beq	r3,r2,415c0 <_malloc_r+0x714>
   41218:	ad4403c4 	addi	r21,r21,4111
   4121c:	00bc0004 	movi	r2,-4096
   41220:	a8aa703a 	and	r21,r21,r2
   41224:	a80b883a 	mov	r5,r21
   41228:	9009883a 	mov	r4,r18
   4122c:	d9800015 	stw	r6,0(sp)
   41230:	00420cc0 	call	420cc <_sbrk_r>
   41234:	1029883a 	mov	r20,r2
   41238:	00bfffc4 	movi	r2,-1
   4123c:	d9800017 	ldw	r6,0(sp)
   41240:	a080e826 	beq	r20,r2,415e4 <_malloc_r+0x738>
   41244:	a180a636 	bltu	r20,r6,414e0 <_malloc_r+0x634>
   41248:	07000134 	movhi	fp,4
   4124c:	e71a5d04 	addi	fp,fp,26996
   41250:	e0800017 	ldw	r2,0(fp)
   41254:	a887883a 	add	r3,r21,r2
   41258:	e0c00015 	stw	r3,0(fp)
   4125c:	3500e626 	beq	r6,r20,415f8 <_malloc_r+0x74c>
   41260:	b9000017 	ldw	r4,0(r23)
   41264:	00bfffc4 	movi	r2,-1
   41268:	2080ee26 	beq	r4,r2,41624 <_malloc_r+0x778>
   4126c:	a185c83a 	sub	r2,r20,r6
   41270:	10c5883a 	add	r2,r2,r3
   41274:	e0800015 	stw	r2,0(fp)
   41278:	a0c001cc 	andi	r3,r20,7
   4127c:	1800bc26 	beq	r3,zero,41570 <_malloc_r+0x6c4>
   41280:	a0e9c83a 	sub	r20,r20,r3
   41284:	00840204 	movi	r2,4104
   41288:	a5000204 	addi	r20,r20,8
   4128c:	10c7c83a 	sub	r3,r2,r3
   41290:	a545883a 	add	r2,r20,r21
   41294:	1083ffcc 	andi	r2,r2,4095
   41298:	18abc83a 	sub	r21,r3,r2
   4129c:	a80b883a 	mov	r5,r21
   412a0:	9009883a 	mov	r4,r18
   412a4:	00420cc0 	call	420cc <_sbrk_r>
   412a8:	00ffffc4 	movi	r3,-1
   412ac:	10c0e126 	beq	r2,r3,41634 <_malloc_r+0x788>
   412b0:	1505c83a 	sub	r2,r2,r20
   412b4:	1545883a 	add	r2,r2,r21
   412b8:	10800054 	ori	r2,r2,1
   412bc:	e0c00017 	ldw	r3,0(fp)
   412c0:	9d000215 	stw	r20,8(r19)
   412c4:	a0800115 	stw	r2,4(r20)
   412c8:	a8c7883a 	add	r3,r21,r3
   412cc:	e0c00015 	stw	r3,0(fp)
   412d0:	84c00e26 	beq	r16,r19,4130c <_malloc_r+0x460>
   412d4:	018003c4 	movi	r6,15
   412d8:	3580a72e 	bgeu	r6,r22,41578 <_malloc_r+0x6cc>
   412dc:	81400117 	ldw	r5,4(r16)
   412e0:	013ffe04 	movi	r4,-8
   412e4:	b0bffd04 	addi	r2,r22,-12
   412e8:	1104703a 	and	r2,r2,r4
   412ec:	2900004c 	andi	r4,r5,1
   412f0:	2088b03a 	or	r4,r4,r2
   412f4:	81000115 	stw	r4,4(r16)
   412f8:	01400144 	movi	r5,5
   412fc:	8089883a 	add	r4,r16,r2
   41300:	21400115 	stw	r5,4(r4)
   41304:	21400215 	stw	r5,8(r4)
   41308:	3080cd36 	bltu	r6,r2,41640 <_malloc_r+0x794>
   4130c:	00800134 	movhi	r2,4
   41310:	109a5504 	addi	r2,r2,26964
   41314:	11000017 	ldw	r4,0(r2)
   41318:	20c0012e 	bgeu	r4,r3,41320 <_malloc_r+0x474>
   4131c:	10c00015 	stw	r3,0(r2)
   41320:	00800134 	movhi	r2,4
   41324:	109a5404 	addi	r2,r2,26960
   41328:	11000017 	ldw	r4,0(r2)
   4132c:	9c000217 	ldw	r16,8(r19)
   41330:	20c0012e 	bgeu	r4,r3,41338 <_malloc_r+0x48c>
   41334:	10c00015 	stw	r3,0(r2)
   41338:	80c00117 	ldw	r3,4(r16)
   4133c:	00bfff04 	movi	r2,-4
   41340:	1886703a 	and	r3,r3,r2
   41344:	1c45c83a 	sub	r2,r3,r17
   41348:	1c400236 	bltu	r3,r17,41354 <_malloc_r+0x4a8>
   4134c:	00c003c4 	movi	r3,15
   41350:	18800416 	blt	r3,r2,41364 <_malloc_r+0x4b8>
   41354:	9009883a 	mov	r4,r18
   41358:	004370c0 	call	4370c <__malloc_unlock>
   4135c:	0005883a 	mov	r2,zero
   41360:	003f7b06 	br	41150 <__alt_data_end+0xfffcf150>
   41364:	88c00054 	ori	r3,r17,1
   41368:	80c00115 	stw	r3,4(r16)
   4136c:	8463883a 	add	r17,r16,r17
   41370:	10800054 	ori	r2,r2,1
   41374:	9c400215 	stw	r17,8(r19)
   41378:	88800115 	stw	r2,4(r17)
   4137c:	9009883a 	mov	r4,r18
   41380:	004370c0 	call	4370c <__malloc_unlock>
   41384:	80800204 	addi	r2,r16,8
   41388:	003f7106 	br	41150 <__alt_data_end+0xfffcf150>
   4138c:	00c00504 	movi	r3,20
   41390:	18804a2e 	bgeu	r3,r2,414bc <_malloc_r+0x610>
   41394:	00c01504 	movi	r3,84
   41398:	18806e36 	bltu	r3,r2,41554 <_malloc_r+0x6a8>
   4139c:	8804d33a 	srli	r2,r17,12
   413a0:	12001bc4 	addi	r8,r2,111
   413a4:	11c01b84 	addi	r7,r2,110
   413a8:	4209883a 	add	r4,r8,r8
   413ac:	003edd06 	br	40f24 <__alt_data_end+0xfffcef24>
   413b0:	3804d27a 	srli	r2,r7,9
   413b4:	00c00104 	movi	r3,4
   413b8:	1880442e 	bgeu	r3,r2,414cc <_malloc_r+0x620>
   413bc:	00c00504 	movi	r3,20
   413c0:	18808136 	bltu	r3,r2,415c8 <_malloc_r+0x71c>
   413c4:	11401704 	addi	r5,r2,92
   413c8:	10c016c4 	addi	r3,r2,91
   413cc:	294b883a 	add	r5,r5,r5
   413d0:	294b883a 	add	r5,r5,r5
   413d4:	294b883a 	add	r5,r5,r5
   413d8:	994b883a 	add	r5,r19,r5
   413dc:	28800017 	ldw	r2,0(r5)
   413e0:	01800134 	movhi	r6,4
   413e4:	297ffe04 	addi	r5,r5,-8
   413e8:	3195f704 	addi	r6,r6,22492
   413ec:	28806526 	beq	r5,r2,41584 <_malloc_r+0x6d8>
   413f0:	01bfff04 	movi	r6,-4
   413f4:	10c00117 	ldw	r3,4(r2)
   413f8:	1986703a 	and	r3,r3,r6
   413fc:	38c0022e 	bgeu	r7,r3,41408 <_malloc_r+0x55c>
   41400:	10800217 	ldw	r2,8(r2)
   41404:	28bffb1e 	bne	r5,r2,413f4 <__alt_data_end+0xfffcf3f4>
   41408:	11400317 	ldw	r5,12(r2)
   4140c:	98c00117 	ldw	r3,4(r19)
   41410:	81400315 	stw	r5,12(r16)
   41414:	80800215 	stw	r2,8(r16)
   41418:	2c000215 	stw	r16,8(r5)
   4141c:	14000315 	stw	r16,12(r2)
   41420:	003ef806 	br	41004 <__alt_data_end+0xfffcf004>
   41424:	88c00054 	ori	r3,r17,1
   41428:	80c00115 	stw	r3,4(r16)
   4142c:	8463883a 	add	r17,r16,r17
   41430:	34400515 	stw	r17,20(r6)
   41434:	34400415 	stw	r17,16(r6)
   41438:	10c00054 	ori	r3,r2,1
   4143c:	8a000315 	stw	r8,12(r17)
   41440:	8a000215 	stw	r8,8(r17)
   41444:	88c00115 	stw	r3,4(r17)
   41448:	88a3883a 	add	r17,r17,r2
   4144c:	88800015 	stw	r2,0(r17)
   41450:	9009883a 	mov	r4,r18
   41454:	004370c0 	call	4370c <__malloc_unlock>
   41458:	80800204 	addi	r2,r16,8
   4145c:	003f3c06 	br	41150 <__alt_data_end+0xfffcf150>
   41460:	30c00117 	ldw	r3,4(r6)
   41464:	003ee706 	br	41004 <__alt_data_end+0xfffcf004>
   41468:	5ac00044 	addi	r11,r11,1
   4146c:	588000cc 	andi	r2,r11,3
   41470:	31800204 	addi	r6,r6,8
   41474:	103efd1e 	bne	r2,zero,4106c <__alt_data_end+0xfffcf06c>
   41478:	00002406 	br	4150c <_malloc_r+0x660>
   4147c:	14000317 	ldw	r16,12(r2)
   41480:	143f251e 	bne	r2,r16,41118 <__alt_data_end+0xfffcf118>
   41484:	21000084 	addi	r4,r4,2
   41488:	003ebc06 	br	40f7c <__alt_data_end+0xfffcef7c>
   4148c:	8085883a 	add	r2,r16,r2
   41490:	10c00117 	ldw	r3,4(r2)
   41494:	81000317 	ldw	r4,12(r16)
   41498:	81400217 	ldw	r5,8(r16)
   4149c:	18c00054 	ori	r3,r3,1
   414a0:	10c00115 	stw	r3,4(r2)
   414a4:	29000315 	stw	r4,12(r5)
   414a8:	21400215 	stw	r5,8(r4)
   414ac:	9009883a 	mov	r4,r18
   414b0:	004370c0 	call	4370c <__malloc_unlock>
   414b4:	80800204 	addi	r2,r16,8
   414b8:	003f2506 	br	41150 <__alt_data_end+0xfffcf150>
   414bc:	12001704 	addi	r8,r2,92
   414c0:	11c016c4 	addi	r7,r2,91
   414c4:	4209883a 	add	r4,r8,r8
   414c8:	003e9606 	br	40f24 <__alt_data_end+0xfffcef24>
   414cc:	3804d1ba 	srli	r2,r7,6
   414d0:	11400e44 	addi	r5,r2,57
   414d4:	10c00e04 	addi	r3,r2,56
   414d8:	294b883a 	add	r5,r5,r5
   414dc:	003fbc06 	br	413d0 <__alt_data_end+0xfffcf3d0>
   414e0:	84ff5926 	beq	r16,r19,41248 <__alt_data_end+0xfffcf248>
   414e4:	00800134 	movhi	r2,4
   414e8:	1095f704 	addi	r2,r2,22492
   414ec:	14000217 	ldw	r16,8(r2)
   414f0:	00bfff04 	movi	r2,-4
   414f4:	80c00117 	ldw	r3,4(r16)
   414f8:	1886703a 	and	r3,r3,r2
   414fc:	003f9106 	br	41344 <__alt_data_end+0xfffcf344>
   41500:	60800217 	ldw	r2,8(r12)
   41504:	213fffc4 	addi	r4,r4,-1
   41508:	1300651e 	bne	r2,r12,416a0 <_malloc_r+0x7f4>
   4150c:	208000cc 	andi	r2,r4,3
   41510:	633ffe04 	addi	r12,r12,-8
   41514:	103ffa1e 	bne	r2,zero,41500 <__alt_data_end+0xfffcf500>
   41518:	98800117 	ldw	r2,4(r19)
   4151c:	0146303a 	nor	r3,zero,r5
   41520:	1884703a 	and	r2,r3,r2
   41524:	98800115 	stw	r2,4(r19)
   41528:	294b883a 	add	r5,r5,r5
   4152c:	117f2836 	bltu	r2,r5,411d0 <__alt_data_end+0xfffcf1d0>
   41530:	283f2726 	beq	r5,zero,411d0 <__alt_data_end+0xfffcf1d0>
   41534:	2886703a 	and	r3,r5,r2
   41538:	5809883a 	mov	r4,r11
   4153c:	183ec31e 	bne	r3,zero,4104c <__alt_data_end+0xfffcf04c>
   41540:	294b883a 	add	r5,r5,r5
   41544:	2886703a 	and	r3,r5,r2
   41548:	21000104 	addi	r4,r4,4
   4154c:	183ffc26 	beq	r3,zero,41540 <__alt_data_end+0xfffcf540>
   41550:	003ebe06 	br	4104c <__alt_data_end+0xfffcf04c>
   41554:	00c05504 	movi	r3,340
   41558:	18801236 	bltu	r3,r2,415a4 <_malloc_r+0x6f8>
   4155c:	8804d3fa 	srli	r2,r17,15
   41560:	12001e04 	addi	r8,r2,120
   41564:	11c01dc4 	addi	r7,r2,119
   41568:	4209883a 	add	r4,r8,r8
   4156c:	003e6d06 	br	40f24 <__alt_data_end+0xfffcef24>
   41570:	00c40004 	movi	r3,4096
   41574:	003f4606 	br	41290 <__alt_data_end+0xfffcf290>
   41578:	00800044 	movi	r2,1
   4157c:	a0800115 	stw	r2,4(r20)
   41580:	003f7406 	br	41354 <__alt_data_end+0xfffcf354>
   41584:	1805d0ba 	srai	r2,r3,2
   41588:	01c00044 	movi	r7,1
   4158c:	30c00117 	ldw	r3,4(r6)
   41590:	388e983a 	sll	r7,r7,r2
   41594:	2805883a 	mov	r2,r5
   41598:	38c6b03a 	or	r3,r7,r3
   4159c:	30c00115 	stw	r3,4(r6)
   415a0:	003f9b06 	br	41410 <__alt_data_end+0xfffcf410>
   415a4:	00c15504 	movi	r3,1364
   415a8:	18801a36 	bltu	r3,r2,41614 <_malloc_r+0x768>
   415ac:	8804d4ba 	srli	r2,r17,18
   415b0:	12001f44 	addi	r8,r2,125
   415b4:	11c01f04 	addi	r7,r2,124
   415b8:	4209883a 	add	r4,r8,r8
   415bc:	003e5906 	br	40f24 <__alt_data_end+0xfffcef24>
   415c0:	ad400404 	addi	r21,r21,16
   415c4:	003f1706 	br	41224 <__alt_data_end+0xfffcf224>
   415c8:	00c01504 	movi	r3,84
   415cc:	18802336 	bltu	r3,r2,4165c <_malloc_r+0x7b0>
   415d0:	3804d33a 	srli	r2,r7,12
   415d4:	11401bc4 	addi	r5,r2,111
   415d8:	10c01b84 	addi	r3,r2,110
   415dc:	294b883a 	add	r5,r5,r5
   415e0:	003f7b06 	br	413d0 <__alt_data_end+0xfffcf3d0>
   415e4:	9c000217 	ldw	r16,8(r19)
   415e8:	00bfff04 	movi	r2,-4
   415ec:	80c00117 	ldw	r3,4(r16)
   415f0:	1886703a 	and	r3,r3,r2
   415f4:	003f5306 	br	41344 <__alt_data_end+0xfffcf344>
   415f8:	3083ffcc 	andi	r2,r6,4095
   415fc:	103f181e 	bne	r2,zero,41260 <__alt_data_end+0xfffcf260>
   41600:	99000217 	ldw	r4,8(r19)
   41604:	b545883a 	add	r2,r22,r21
   41608:	10800054 	ori	r2,r2,1
   4160c:	20800115 	stw	r2,4(r4)
   41610:	003f3e06 	br	4130c <__alt_data_end+0xfffcf30c>
   41614:	01003f84 	movi	r4,254
   41618:	02001fc4 	movi	r8,127
   4161c:	01c01f84 	movi	r7,126
   41620:	003e4006 	br	40f24 <__alt_data_end+0xfffcef24>
   41624:	00800134 	movhi	r2,4
   41628:	10979604 	addi	r2,r2,24152
   4162c:	15000015 	stw	r20,0(r2)
   41630:	003f1106 	br	41278 <__alt_data_end+0xfffcf278>
   41634:	00800044 	movi	r2,1
   41638:	002b883a 	mov	r21,zero
   4163c:	003f1f06 	br	412bc <__alt_data_end+0xfffcf2bc>
   41640:	81400204 	addi	r5,r16,8
   41644:	9009883a 	mov	r4,r18
   41648:	00429340 	call	42934 <_free_r>
   4164c:	00800134 	movhi	r2,4
   41650:	109a5d04 	addi	r2,r2,26996
   41654:	10c00017 	ldw	r3,0(r2)
   41658:	003f2c06 	br	4130c <__alt_data_end+0xfffcf30c>
   4165c:	00c05504 	movi	r3,340
   41660:	18800536 	bltu	r3,r2,41678 <_malloc_r+0x7cc>
   41664:	3804d3fa 	srli	r2,r7,15
   41668:	11401e04 	addi	r5,r2,120
   4166c:	10c01dc4 	addi	r3,r2,119
   41670:	294b883a 	add	r5,r5,r5
   41674:	003f5606 	br	413d0 <__alt_data_end+0xfffcf3d0>
   41678:	00c15504 	movi	r3,1364
   4167c:	18800536 	bltu	r3,r2,41694 <_malloc_r+0x7e8>
   41680:	3804d4ba 	srli	r2,r7,18
   41684:	11401f44 	addi	r5,r2,125
   41688:	10c01f04 	addi	r3,r2,124
   4168c:	294b883a 	add	r5,r5,r5
   41690:	003f4f06 	br	413d0 <__alt_data_end+0xfffcf3d0>
   41694:	01403f84 	movi	r5,254
   41698:	00c01f84 	movi	r3,126
   4169c:	003f4c06 	br	413d0 <__alt_data_end+0xfffcf3d0>
   416a0:	98800117 	ldw	r2,4(r19)
   416a4:	003fa006 	br	41528 <__alt_data_end+0xfffcf528>
   416a8:	8808d0fa 	srli	r4,r17,3
   416ac:	20800044 	addi	r2,r4,1
   416b0:	1085883a 	add	r2,r2,r2
   416b4:	003e9006 	br	410f8 <__alt_data_end+0xfffcf0f8>

000416b8 <memchr>:
   416b8:	208000cc 	andi	r2,r4,3
   416bc:	280f883a 	mov	r7,r5
   416c0:	10003426 	beq	r2,zero,41794 <memchr+0xdc>
   416c4:	30bfffc4 	addi	r2,r6,-1
   416c8:	30001a26 	beq	r6,zero,41734 <memchr+0x7c>
   416cc:	20c00003 	ldbu	r3,0(r4)
   416d0:	29803fcc 	andi	r6,r5,255
   416d4:	30c0051e 	bne	r6,r3,416ec <memchr+0x34>
   416d8:	00001806 	br	4173c <memchr+0x84>
   416dc:	10001526 	beq	r2,zero,41734 <memchr+0x7c>
   416e0:	20c00003 	ldbu	r3,0(r4)
   416e4:	10bfffc4 	addi	r2,r2,-1
   416e8:	30c01426 	beq	r6,r3,4173c <memchr+0x84>
   416ec:	21000044 	addi	r4,r4,1
   416f0:	20c000cc 	andi	r3,r4,3
   416f4:	183ff91e 	bne	r3,zero,416dc <__alt_data_end+0xfffcf6dc>
   416f8:	020000c4 	movi	r8,3
   416fc:	40801136 	bltu	r8,r2,41744 <memchr+0x8c>
   41700:	10000c26 	beq	r2,zero,41734 <memchr+0x7c>
   41704:	20c00003 	ldbu	r3,0(r4)
   41708:	29403fcc 	andi	r5,r5,255
   4170c:	28c00b26 	beq	r5,r3,4173c <memchr+0x84>
   41710:	20c00044 	addi	r3,r4,1
   41714:	39803fcc 	andi	r6,r7,255
   41718:	2089883a 	add	r4,r4,r2
   4171c:	00000306 	br	4172c <memchr+0x74>
   41720:	18c00044 	addi	r3,r3,1
   41724:	197fffc3 	ldbu	r5,-1(r3)
   41728:	31400526 	beq	r6,r5,41740 <memchr+0x88>
   4172c:	1805883a 	mov	r2,r3
   41730:	20fffb1e 	bne	r4,r3,41720 <__alt_data_end+0xfffcf720>
   41734:	0005883a 	mov	r2,zero
   41738:	f800283a 	ret
   4173c:	2005883a 	mov	r2,r4
   41740:	f800283a 	ret
   41744:	28c03fcc 	andi	r3,r5,255
   41748:	1812923a 	slli	r9,r3,8
   4174c:	02ffbff4 	movhi	r11,65279
   41750:	02a02074 	movhi	r10,32897
   41754:	48d2b03a 	or	r9,r9,r3
   41758:	4806943a 	slli	r3,r9,16
   4175c:	5affbfc4 	addi	r11,r11,-257
   41760:	52a02004 	addi	r10,r10,-32640
   41764:	48d2b03a 	or	r9,r9,r3
   41768:	20c00017 	ldw	r3,0(r4)
   4176c:	48c6f03a 	xor	r3,r9,r3
   41770:	1acd883a 	add	r6,r3,r11
   41774:	00c6303a 	nor	r3,zero,r3
   41778:	30c6703a 	and	r3,r6,r3
   4177c:	1a86703a 	and	r3,r3,r10
   41780:	183fe01e 	bne	r3,zero,41704 <__alt_data_end+0xfffcf704>
   41784:	10bfff04 	addi	r2,r2,-4
   41788:	21000104 	addi	r4,r4,4
   4178c:	40bff636 	bltu	r8,r2,41768 <__alt_data_end+0xfffcf768>
   41790:	003fdb06 	br	41700 <__alt_data_end+0xfffcf700>
   41794:	3005883a 	mov	r2,r6
   41798:	003fd706 	br	416f8 <__alt_data_end+0xfffcf6f8>

0004179c <memcpy>:
   4179c:	defffd04 	addi	sp,sp,-12
   417a0:	dfc00215 	stw	ra,8(sp)
   417a4:	dc400115 	stw	r17,4(sp)
   417a8:	dc000015 	stw	r16,0(sp)
   417ac:	00c003c4 	movi	r3,15
   417b0:	2005883a 	mov	r2,r4
   417b4:	1980452e 	bgeu	r3,r6,418cc <memcpy+0x130>
   417b8:	2906b03a 	or	r3,r5,r4
   417bc:	18c000cc 	andi	r3,r3,3
   417c0:	1800441e 	bne	r3,zero,418d4 <memcpy+0x138>
   417c4:	347ffc04 	addi	r17,r6,-16
   417c8:	8822d13a 	srli	r17,r17,4
   417cc:	28c00104 	addi	r3,r5,4
   417d0:	23400104 	addi	r13,r4,4
   417d4:	8820913a 	slli	r16,r17,4
   417d8:	2b000204 	addi	r12,r5,8
   417dc:	22c00204 	addi	r11,r4,8
   417e0:	84000504 	addi	r16,r16,20
   417e4:	2a800304 	addi	r10,r5,12
   417e8:	22400304 	addi	r9,r4,12
   417ec:	2c21883a 	add	r16,r5,r16
   417f0:	2811883a 	mov	r8,r5
   417f4:	200f883a 	mov	r7,r4
   417f8:	41000017 	ldw	r4,0(r8)
   417fc:	1fc00017 	ldw	ra,0(r3)
   41800:	63c00017 	ldw	r15,0(r12)
   41804:	39000015 	stw	r4,0(r7)
   41808:	53800017 	ldw	r14,0(r10)
   4180c:	6fc00015 	stw	ra,0(r13)
   41810:	5bc00015 	stw	r15,0(r11)
   41814:	4b800015 	stw	r14,0(r9)
   41818:	18c00404 	addi	r3,r3,16
   4181c:	39c00404 	addi	r7,r7,16
   41820:	42000404 	addi	r8,r8,16
   41824:	6b400404 	addi	r13,r13,16
   41828:	63000404 	addi	r12,r12,16
   4182c:	5ac00404 	addi	r11,r11,16
   41830:	52800404 	addi	r10,r10,16
   41834:	4a400404 	addi	r9,r9,16
   41838:	1c3fef1e 	bne	r3,r16,417f8 <__alt_data_end+0xfffcf7f8>
   4183c:	89c00044 	addi	r7,r17,1
   41840:	380e913a 	slli	r7,r7,4
   41844:	310003cc 	andi	r4,r6,15
   41848:	02c000c4 	movi	r11,3
   4184c:	11c7883a 	add	r3,r2,r7
   41850:	29cb883a 	add	r5,r5,r7
   41854:	5900212e 	bgeu	r11,r4,418dc <memcpy+0x140>
   41858:	1813883a 	mov	r9,r3
   4185c:	2811883a 	mov	r8,r5
   41860:	200f883a 	mov	r7,r4
   41864:	42800017 	ldw	r10,0(r8)
   41868:	4a400104 	addi	r9,r9,4
   4186c:	39ffff04 	addi	r7,r7,-4
   41870:	4abfff15 	stw	r10,-4(r9)
   41874:	42000104 	addi	r8,r8,4
   41878:	59fffa36 	bltu	r11,r7,41864 <__alt_data_end+0xfffcf864>
   4187c:	213fff04 	addi	r4,r4,-4
   41880:	2008d0ba 	srli	r4,r4,2
   41884:	318000cc 	andi	r6,r6,3
   41888:	21000044 	addi	r4,r4,1
   4188c:	2109883a 	add	r4,r4,r4
   41890:	2109883a 	add	r4,r4,r4
   41894:	1907883a 	add	r3,r3,r4
   41898:	290b883a 	add	r5,r5,r4
   4189c:	30000626 	beq	r6,zero,418b8 <memcpy+0x11c>
   418a0:	198d883a 	add	r6,r3,r6
   418a4:	29c00003 	ldbu	r7,0(r5)
   418a8:	18c00044 	addi	r3,r3,1
   418ac:	29400044 	addi	r5,r5,1
   418b0:	19ffffc5 	stb	r7,-1(r3)
   418b4:	19bffb1e 	bne	r3,r6,418a4 <__alt_data_end+0xfffcf8a4>
   418b8:	dfc00217 	ldw	ra,8(sp)
   418bc:	dc400117 	ldw	r17,4(sp)
   418c0:	dc000017 	ldw	r16,0(sp)
   418c4:	dec00304 	addi	sp,sp,12
   418c8:	f800283a 	ret
   418cc:	2007883a 	mov	r3,r4
   418d0:	003ff206 	br	4189c <__alt_data_end+0xfffcf89c>
   418d4:	2007883a 	mov	r3,r4
   418d8:	003ff106 	br	418a0 <__alt_data_end+0xfffcf8a0>
   418dc:	200d883a 	mov	r6,r4
   418e0:	003fee06 	br	4189c <__alt_data_end+0xfffcf89c>

000418e4 <memmove>:
   418e4:	2005883a 	mov	r2,r4
   418e8:	29000b2e 	bgeu	r5,r4,41918 <memmove+0x34>
   418ec:	298f883a 	add	r7,r5,r6
   418f0:	21c0092e 	bgeu	r4,r7,41918 <memmove+0x34>
   418f4:	2187883a 	add	r3,r4,r6
   418f8:	198bc83a 	sub	r5,r3,r6
   418fc:	30004826 	beq	r6,zero,41a20 <memmove+0x13c>
   41900:	39ffffc4 	addi	r7,r7,-1
   41904:	39000003 	ldbu	r4,0(r7)
   41908:	18ffffc4 	addi	r3,r3,-1
   4190c:	19000005 	stb	r4,0(r3)
   41910:	28fffb1e 	bne	r5,r3,41900 <__alt_data_end+0xfffcf900>
   41914:	f800283a 	ret
   41918:	00c003c4 	movi	r3,15
   4191c:	1980412e 	bgeu	r3,r6,41a24 <memmove+0x140>
   41920:	2886b03a 	or	r3,r5,r2
   41924:	18c000cc 	andi	r3,r3,3
   41928:	1800401e 	bne	r3,zero,41a2c <memmove+0x148>
   4192c:	33fffc04 	addi	r15,r6,-16
   41930:	781ed13a 	srli	r15,r15,4
   41934:	28c00104 	addi	r3,r5,4
   41938:	13400104 	addi	r13,r2,4
   4193c:	781c913a 	slli	r14,r15,4
   41940:	2b000204 	addi	r12,r5,8
   41944:	12c00204 	addi	r11,r2,8
   41948:	73800504 	addi	r14,r14,20
   4194c:	2a800304 	addi	r10,r5,12
   41950:	12400304 	addi	r9,r2,12
   41954:	2b9d883a 	add	r14,r5,r14
   41958:	2811883a 	mov	r8,r5
   4195c:	100f883a 	mov	r7,r2
   41960:	41000017 	ldw	r4,0(r8)
   41964:	39c00404 	addi	r7,r7,16
   41968:	18c00404 	addi	r3,r3,16
   4196c:	393ffc15 	stw	r4,-16(r7)
   41970:	193ffc17 	ldw	r4,-16(r3)
   41974:	6b400404 	addi	r13,r13,16
   41978:	5ac00404 	addi	r11,r11,16
   4197c:	693ffc15 	stw	r4,-16(r13)
   41980:	61000017 	ldw	r4,0(r12)
   41984:	4a400404 	addi	r9,r9,16
   41988:	42000404 	addi	r8,r8,16
   4198c:	593ffc15 	stw	r4,-16(r11)
   41990:	51000017 	ldw	r4,0(r10)
   41994:	63000404 	addi	r12,r12,16
   41998:	52800404 	addi	r10,r10,16
   4199c:	493ffc15 	stw	r4,-16(r9)
   419a0:	1bbfef1e 	bne	r3,r14,41960 <__alt_data_end+0xfffcf960>
   419a4:	79000044 	addi	r4,r15,1
   419a8:	2008913a 	slli	r4,r4,4
   419ac:	328003cc 	andi	r10,r6,15
   419b0:	02c000c4 	movi	r11,3
   419b4:	1107883a 	add	r3,r2,r4
   419b8:	290b883a 	add	r5,r5,r4
   419bc:	5a801e2e 	bgeu	r11,r10,41a38 <memmove+0x154>
   419c0:	1813883a 	mov	r9,r3
   419c4:	2811883a 	mov	r8,r5
   419c8:	500f883a 	mov	r7,r10
   419cc:	41000017 	ldw	r4,0(r8)
   419d0:	4a400104 	addi	r9,r9,4
   419d4:	39ffff04 	addi	r7,r7,-4
   419d8:	493fff15 	stw	r4,-4(r9)
   419dc:	42000104 	addi	r8,r8,4
   419e0:	59fffa36 	bltu	r11,r7,419cc <__alt_data_end+0xfffcf9cc>
   419e4:	513fff04 	addi	r4,r10,-4
   419e8:	2008d0ba 	srli	r4,r4,2
   419ec:	318000cc 	andi	r6,r6,3
   419f0:	21000044 	addi	r4,r4,1
   419f4:	2109883a 	add	r4,r4,r4
   419f8:	2109883a 	add	r4,r4,r4
   419fc:	1907883a 	add	r3,r3,r4
   41a00:	290b883a 	add	r5,r5,r4
   41a04:	30000b26 	beq	r6,zero,41a34 <memmove+0x150>
   41a08:	198d883a 	add	r6,r3,r6
   41a0c:	29c00003 	ldbu	r7,0(r5)
   41a10:	18c00044 	addi	r3,r3,1
   41a14:	29400044 	addi	r5,r5,1
   41a18:	19ffffc5 	stb	r7,-1(r3)
   41a1c:	19bffb1e 	bne	r3,r6,41a0c <__alt_data_end+0xfffcfa0c>
   41a20:	f800283a 	ret
   41a24:	1007883a 	mov	r3,r2
   41a28:	003ff606 	br	41a04 <__alt_data_end+0xfffcfa04>
   41a2c:	1007883a 	mov	r3,r2
   41a30:	003ff506 	br	41a08 <__alt_data_end+0xfffcfa08>
   41a34:	f800283a 	ret
   41a38:	500d883a 	mov	r6,r10
   41a3c:	003ff106 	br	41a04 <__alt_data_end+0xfffcfa04>

00041a40 <memset>:
   41a40:	20c000cc 	andi	r3,r4,3
   41a44:	2005883a 	mov	r2,r4
   41a48:	18004426 	beq	r3,zero,41b5c <memset+0x11c>
   41a4c:	31ffffc4 	addi	r7,r6,-1
   41a50:	30004026 	beq	r6,zero,41b54 <memset+0x114>
   41a54:	2813883a 	mov	r9,r5
   41a58:	200d883a 	mov	r6,r4
   41a5c:	2007883a 	mov	r3,r4
   41a60:	00000406 	br	41a74 <memset+0x34>
   41a64:	3a3fffc4 	addi	r8,r7,-1
   41a68:	31800044 	addi	r6,r6,1
   41a6c:	38003926 	beq	r7,zero,41b54 <memset+0x114>
   41a70:	400f883a 	mov	r7,r8
   41a74:	18c00044 	addi	r3,r3,1
   41a78:	32400005 	stb	r9,0(r6)
   41a7c:	1a0000cc 	andi	r8,r3,3
   41a80:	403ff81e 	bne	r8,zero,41a64 <__alt_data_end+0xfffcfa64>
   41a84:	010000c4 	movi	r4,3
   41a88:	21c02d2e 	bgeu	r4,r7,41b40 <memset+0x100>
   41a8c:	29003fcc 	andi	r4,r5,255
   41a90:	200c923a 	slli	r6,r4,8
   41a94:	3108b03a 	or	r4,r6,r4
   41a98:	200c943a 	slli	r6,r4,16
   41a9c:	218cb03a 	or	r6,r4,r6
   41aa0:	010003c4 	movi	r4,15
   41aa4:	21c0182e 	bgeu	r4,r7,41b08 <memset+0xc8>
   41aa8:	3b3ffc04 	addi	r12,r7,-16
   41aac:	6018d13a 	srli	r12,r12,4
   41ab0:	1a000104 	addi	r8,r3,4
   41ab4:	1ac00204 	addi	r11,r3,8
   41ab8:	6008913a 	slli	r4,r12,4
   41abc:	1a800304 	addi	r10,r3,12
   41ac0:	1813883a 	mov	r9,r3
   41ac4:	21000504 	addi	r4,r4,20
   41ac8:	1909883a 	add	r4,r3,r4
   41acc:	49800015 	stw	r6,0(r9)
   41ad0:	41800015 	stw	r6,0(r8)
   41ad4:	59800015 	stw	r6,0(r11)
   41ad8:	51800015 	stw	r6,0(r10)
   41adc:	42000404 	addi	r8,r8,16
   41ae0:	4a400404 	addi	r9,r9,16
   41ae4:	5ac00404 	addi	r11,r11,16
   41ae8:	52800404 	addi	r10,r10,16
   41aec:	413ff71e 	bne	r8,r4,41acc <__alt_data_end+0xfffcfacc>
   41af0:	63000044 	addi	r12,r12,1
   41af4:	6018913a 	slli	r12,r12,4
   41af8:	39c003cc 	andi	r7,r7,15
   41afc:	010000c4 	movi	r4,3
   41b00:	1b07883a 	add	r3,r3,r12
   41b04:	21c00e2e 	bgeu	r4,r7,41b40 <memset+0x100>
   41b08:	1813883a 	mov	r9,r3
   41b0c:	3811883a 	mov	r8,r7
   41b10:	010000c4 	movi	r4,3
   41b14:	49800015 	stw	r6,0(r9)
   41b18:	423fff04 	addi	r8,r8,-4
   41b1c:	4a400104 	addi	r9,r9,4
   41b20:	223ffc36 	bltu	r4,r8,41b14 <__alt_data_end+0xfffcfb14>
   41b24:	393fff04 	addi	r4,r7,-4
   41b28:	2008d0ba 	srli	r4,r4,2
   41b2c:	39c000cc 	andi	r7,r7,3
   41b30:	21000044 	addi	r4,r4,1
   41b34:	2109883a 	add	r4,r4,r4
   41b38:	2109883a 	add	r4,r4,r4
   41b3c:	1907883a 	add	r3,r3,r4
   41b40:	38000526 	beq	r7,zero,41b58 <memset+0x118>
   41b44:	19cf883a 	add	r7,r3,r7
   41b48:	19400005 	stb	r5,0(r3)
   41b4c:	18c00044 	addi	r3,r3,1
   41b50:	38fffd1e 	bne	r7,r3,41b48 <__alt_data_end+0xfffcfb48>
   41b54:	f800283a 	ret
   41b58:	f800283a 	ret
   41b5c:	2007883a 	mov	r3,r4
   41b60:	300f883a 	mov	r7,r6
   41b64:	003fc706 	br	41a84 <__alt_data_end+0xfffcfa84>

00041b68 <_realloc_r>:
   41b68:	defff604 	addi	sp,sp,-40
   41b6c:	dc800215 	stw	r18,8(sp)
   41b70:	dfc00915 	stw	ra,36(sp)
   41b74:	df000815 	stw	fp,32(sp)
   41b78:	ddc00715 	stw	r23,28(sp)
   41b7c:	dd800615 	stw	r22,24(sp)
   41b80:	dd400515 	stw	r21,20(sp)
   41b84:	dd000415 	stw	r20,16(sp)
   41b88:	dcc00315 	stw	r19,12(sp)
   41b8c:	dc400115 	stw	r17,4(sp)
   41b90:	dc000015 	stw	r16,0(sp)
   41b94:	3025883a 	mov	r18,r6
   41b98:	2800b726 	beq	r5,zero,41e78 <_realloc_r+0x310>
   41b9c:	282b883a 	mov	r21,r5
   41ba0:	2029883a 	mov	r20,r4
   41ba4:	00436e80 	call	436e8 <__malloc_lock>
   41ba8:	a8bfff17 	ldw	r2,-4(r21)
   41bac:	043fff04 	movi	r16,-4
   41bb0:	90c002c4 	addi	r3,r18,11
   41bb4:	01000584 	movi	r4,22
   41bb8:	acfffe04 	addi	r19,r21,-8
   41bbc:	1420703a 	and	r16,r2,r16
   41bc0:	20c0332e 	bgeu	r4,r3,41c90 <_realloc_r+0x128>
   41bc4:	047ffe04 	movi	r17,-8
   41bc8:	1c62703a 	and	r17,r3,r17
   41bcc:	8807883a 	mov	r3,r17
   41bd0:	88005816 	blt	r17,zero,41d34 <_realloc_r+0x1cc>
   41bd4:	8c805736 	bltu	r17,r18,41d34 <_realloc_r+0x1cc>
   41bd8:	80c0300e 	bge	r16,r3,41c9c <_realloc_r+0x134>
   41bdc:	07000134 	movhi	fp,4
   41be0:	e715f704 	addi	fp,fp,22492
   41be4:	e1c00217 	ldw	r7,8(fp)
   41be8:	9c09883a 	add	r4,r19,r16
   41bec:	22000117 	ldw	r8,4(r4)
   41bf0:	21c06326 	beq	r4,r7,41d80 <_realloc_r+0x218>
   41bf4:	017fff84 	movi	r5,-2
   41bf8:	414a703a 	and	r5,r8,r5
   41bfc:	214b883a 	add	r5,r4,r5
   41c00:	29800117 	ldw	r6,4(r5)
   41c04:	3180004c 	andi	r6,r6,1
   41c08:	30003f26 	beq	r6,zero,41d08 <_realloc_r+0x1a0>
   41c0c:	1080004c 	andi	r2,r2,1
   41c10:	10008326 	beq	r2,zero,41e20 <_realloc_r+0x2b8>
   41c14:	900b883a 	mov	r5,r18
   41c18:	a009883a 	mov	r4,r20
   41c1c:	0040eac0 	call	40eac <_malloc_r>
   41c20:	1025883a 	mov	r18,r2
   41c24:	10011e26 	beq	r2,zero,420a0 <_realloc_r+0x538>
   41c28:	a93fff17 	ldw	r4,-4(r21)
   41c2c:	10fffe04 	addi	r3,r2,-8
   41c30:	00bfff84 	movi	r2,-2
   41c34:	2084703a 	and	r2,r4,r2
   41c38:	9885883a 	add	r2,r19,r2
   41c3c:	1880ee26 	beq	r3,r2,41ff8 <_realloc_r+0x490>
   41c40:	81bfff04 	addi	r6,r16,-4
   41c44:	00800904 	movi	r2,36
   41c48:	1180b836 	bltu	r2,r6,41f2c <_realloc_r+0x3c4>
   41c4c:	00c004c4 	movi	r3,19
   41c50:	19809636 	bltu	r3,r6,41eac <_realloc_r+0x344>
   41c54:	9005883a 	mov	r2,r18
   41c58:	a807883a 	mov	r3,r21
   41c5c:	19000017 	ldw	r4,0(r3)
   41c60:	11000015 	stw	r4,0(r2)
   41c64:	19000117 	ldw	r4,4(r3)
   41c68:	11000115 	stw	r4,4(r2)
   41c6c:	18c00217 	ldw	r3,8(r3)
   41c70:	10c00215 	stw	r3,8(r2)
   41c74:	a80b883a 	mov	r5,r21
   41c78:	a009883a 	mov	r4,r20
   41c7c:	00429340 	call	42934 <_free_r>
   41c80:	a009883a 	mov	r4,r20
   41c84:	004370c0 	call	4370c <__malloc_unlock>
   41c88:	9005883a 	mov	r2,r18
   41c8c:	00001206 	br	41cd8 <_realloc_r+0x170>
   41c90:	00c00404 	movi	r3,16
   41c94:	1823883a 	mov	r17,r3
   41c98:	003fce06 	br	41bd4 <__alt_data_end+0xfffcfbd4>
   41c9c:	a825883a 	mov	r18,r21
   41ca0:	8445c83a 	sub	r2,r16,r17
   41ca4:	00c003c4 	movi	r3,15
   41ca8:	18802636 	bltu	r3,r2,41d44 <_realloc_r+0x1dc>
   41cac:	99800117 	ldw	r6,4(r19)
   41cb0:	9c07883a 	add	r3,r19,r16
   41cb4:	3180004c 	andi	r6,r6,1
   41cb8:	3420b03a 	or	r16,r6,r16
   41cbc:	9c000115 	stw	r16,4(r19)
   41cc0:	18800117 	ldw	r2,4(r3)
   41cc4:	10800054 	ori	r2,r2,1
   41cc8:	18800115 	stw	r2,4(r3)
   41ccc:	a009883a 	mov	r4,r20
   41cd0:	004370c0 	call	4370c <__malloc_unlock>
   41cd4:	9005883a 	mov	r2,r18
   41cd8:	dfc00917 	ldw	ra,36(sp)
   41cdc:	df000817 	ldw	fp,32(sp)
   41ce0:	ddc00717 	ldw	r23,28(sp)
   41ce4:	dd800617 	ldw	r22,24(sp)
   41ce8:	dd400517 	ldw	r21,20(sp)
   41cec:	dd000417 	ldw	r20,16(sp)
   41cf0:	dcc00317 	ldw	r19,12(sp)
   41cf4:	dc800217 	ldw	r18,8(sp)
   41cf8:	dc400117 	ldw	r17,4(sp)
   41cfc:	dc000017 	ldw	r16,0(sp)
   41d00:	dec00a04 	addi	sp,sp,40
   41d04:	f800283a 	ret
   41d08:	017fff04 	movi	r5,-4
   41d0c:	414a703a 	and	r5,r8,r5
   41d10:	814d883a 	add	r6,r16,r5
   41d14:	30c01f16 	blt	r6,r3,41d94 <_realloc_r+0x22c>
   41d18:	20800317 	ldw	r2,12(r4)
   41d1c:	20c00217 	ldw	r3,8(r4)
   41d20:	a825883a 	mov	r18,r21
   41d24:	3021883a 	mov	r16,r6
   41d28:	18800315 	stw	r2,12(r3)
   41d2c:	10c00215 	stw	r3,8(r2)
   41d30:	003fdb06 	br	41ca0 <__alt_data_end+0xfffcfca0>
   41d34:	00800304 	movi	r2,12
   41d38:	a0800015 	stw	r2,0(r20)
   41d3c:	0005883a 	mov	r2,zero
   41d40:	003fe506 	br	41cd8 <__alt_data_end+0xfffcfcd8>
   41d44:	98c00117 	ldw	r3,4(r19)
   41d48:	9c4b883a 	add	r5,r19,r17
   41d4c:	11000054 	ori	r4,r2,1
   41d50:	18c0004c 	andi	r3,r3,1
   41d54:	1c62b03a 	or	r17,r3,r17
   41d58:	9c400115 	stw	r17,4(r19)
   41d5c:	29000115 	stw	r4,4(r5)
   41d60:	2885883a 	add	r2,r5,r2
   41d64:	10c00117 	ldw	r3,4(r2)
   41d68:	29400204 	addi	r5,r5,8
   41d6c:	a009883a 	mov	r4,r20
   41d70:	18c00054 	ori	r3,r3,1
   41d74:	10c00115 	stw	r3,4(r2)
   41d78:	00429340 	call	42934 <_free_r>
   41d7c:	003fd306 	br	41ccc <__alt_data_end+0xfffcfccc>
   41d80:	017fff04 	movi	r5,-4
   41d84:	414a703a 	and	r5,r8,r5
   41d88:	89800404 	addi	r6,r17,16
   41d8c:	8151883a 	add	r8,r16,r5
   41d90:	4180590e 	bge	r8,r6,41ef8 <_realloc_r+0x390>
   41d94:	1080004c 	andi	r2,r2,1
   41d98:	103f9e1e 	bne	r2,zero,41c14 <__alt_data_end+0xfffcfc14>
   41d9c:	adbffe17 	ldw	r22,-8(r21)
   41da0:	00bfff04 	movi	r2,-4
   41da4:	9dadc83a 	sub	r22,r19,r22
   41da8:	b1800117 	ldw	r6,4(r22)
   41dac:	3084703a 	and	r2,r6,r2
   41db0:	20002026 	beq	r4,zero,41e34 <_realloc_r+0x2cc>
   41db4:	80af883a 	add	r23,r16,r2
   41db8:	b96f883a 	add	r23,r23,r5
   41dbc:	21c05f26 	beq	r4,r7,41f3c <_realloc_r+0x3d4>
   41dc0:	b8c01c16 	blt	r23,r3,41e34 <_realloc_r+0x2cc>
   41dc4:	20800317 	ldw	r2,12(r4)
   41dc8:	20c00217 	ldw	r3,8(r4)
   41dcc:	81bfff04 	addi	r6,r16,-4
   41dd0:	01000904 	movi	r4,36
   41dd4:	18800315 	stw	r2,12(r3)
   41dd8:	10c00215 	stw	r3,8(r2)
   41ddc:	b0c00217 	ldw	r3,8(r22)
   41de0:	b0800317 	ldw	r2,12(r22)
   41de4:	b4800204 	addi	r18,r22,8
   41de8:	18800315 	stw	r2,12(r3)
   41dec:	10c00215 	stw	r3,8(r2)
   41df0:	21801b36 	bltu	r4,r6,41e60 <_realloc_r+0x2f8>
   41df4:	008004c4 	movi	r2,19
   41df8:	1180352e 	bgeu	r2,r6,41ed0 <_realloc_r+0x368>
   41dfc:	a8800017 	ldw	r2,0(r21)
   41e00:	b0800215 	stw	r2,8(r22)
   41e04:	a8800117 	ldw	r2,4(r21)
   41e08:	b0800315 	stw	r2,12(r22)
   41e0c:	008006c4 	movi	r2,27
   41e10:	11807f36 	bltu	r2,r6,42010 <_realloc_r+0x4a8>
   41e14:	b0800404 	addi	r2,r22,16
   41e18:	ad400204 	addi	r21,r21,8
   41e1c:	00002d06 	br	41ed4 <_realloc_r+0x36c>
   41e20:	adbffe17 	ldw	r22,-8(r21)
   41e24:	00bfff04 	movi	r2,-4
   41e28:	9dadc83a 	sub	r22,r19,r22
   41e2c:	b1000117 	ldw	r4,4(r22)
   41e30:	2084703a 	and	r2,r4,r2
   41e34:	b03f7726 	beq	r22,zero,41c14 <__alt_data_end+0xfffcfc14>
   41e38:	80af883a 	add	r23,r16,r2
   41e3c:	b8ff7516 	blt	r23,r3,41c14 <__alt_data_end+0xfffcfc14>
   41e40:	b0800317 	ldw	r2,12(r22)
   41e44:	b0c00217 	ldw	r3,8(r22)
   41e48:	81bfff04 	addi	r6,r16,-4
   41e4c:	01000904 	movi	r4,36
   41e50:	18800315 	stw	r2,12(r3)
   41e54:	10c00215 	stw	r3,8(r2)
   41e58:	b4800204 	addi	r18,r22,8
   41e5c:	21bfe52e 	bgeu	r4,r6,41df4 <__alt_data_end+0xfffcfdf4>
   41e60:	a80b883a 	mov	r5,r21
   41e64:	9009883a 	mov	r4,r18
   41e68:	00418e40 	call	418e4 <memmove>
   41e6c:	b821883a 	mov	r16,r23
   41e70:	b027883a 	mov	r19,r22
   41e74:	003f8a06 	br	41ca0 <__alt_data_end+0xfffcfca0>
   41e78:	300b883a 	mov	r5,r6
   41e7c:	dfc00917 	ldw	ra,36(sp)
   41e80:	df000817 	ldw	fp,32(sp)
   41e84:	ddc00717 	ldw	r23,28(sp)
   41e88:	dd800617 	ldw	r22,24(sp)
   41e8c:	dd400517 	ldw	r21,20(sp)
   41e90:	dd000417 	ldw	r20,16(sp)
   41e94:	dcc00317 	ldw	r19,12(sp)
   41e98:	dc800217 	ldw	r18,8(sp)
   41e9c:	dc400117 	ldw	r17,4(sp)
   41ea0:	dc000017 	ldw	r16,0(sp)
   41ea4:	dec00a04 	addi	sp,sp,40
   41ea8:	0040eac1 	jmpi	40eac <_malloc_r>
   41eac:	a8c00017 	ldw	r3,0(r21)
   41eb0:	90c00015 	stw	r3,0(r18)
   41eb4:	a8c00117 	ldw	r3,4(r21)
   41eb8:	90c00115 	stw	r3,4(r18)
   41ebc:	00c006c4 	movi	r3,27
   41ec0:	19804536 	bltu	r3,r6,41fd8 <_realloc_r+0x470>
   41ec4:	90800204 	addi	r2,r18,8
   41ec8:	a8c00204 	addi	r3,r21,8
   41ecc:	003f6306 	br	41c5c <__alt_data_end+0xfffcfc5c>
   41ed0:	9005883a 	mov	r2,r18
   41ed4:	a8c00017 	ldw	r3,0(r21)
   41ed8:	b821883a 	mov	r16,r23
   41edc:	b027883a 	mov	r19,r22
   41ee0:	10c00015 	stw	r3,0(r2)
   41ee4:	a8c00117 	ldw	r3,4(r21)
   41ee8:	10c00115 	stw	r3,4(r2)
   41eec:	a8c00217 	ldw	r3,8(r21)
   41ef0:	10c00215 	stw	r3,8(r2)
   41ef4:	003f6a06 	br	41ca0 <__alt_data_end+0xfffcfca0>
   41ef8:	9c67883a 	add	r19,r19,r17
   41efc:	4445c83a 	sub	r2,r8,r17
   41f00:	e4c00215 	stw	r19,8(fp)
   41f04:	10800054 	ori	r2,r2,1
   41f08:	98800115 	stw	r2,4(r19)
   41f0c:	a8bfff17 	ldw	r2,-4(r21)
   41f10:	a009883a 	mov	r4,r20
   41f14:	1080004c 	andi	r2,r2,1
   41f18:	1462b03a 	or	r17,r2,r17
   41f1c:	ac7fff15 	stw	r17,-4(r21)
   41f20:	004370c0 	call	4370c <__malloc_unlock>
   41f24:	a805883a 	mov	r2,r21
   41f28:	003f6b06 	br	41cd8 <__alt_data_end+0xfffcfcd8>
   41f2c:	a80b883a 	mov	r5,r21
   41f30:	9009883a 	mov	r4,r18
   41f34:	00418e40 	call	418e4 <memmove>
   41f38:	003f4e06 	br	41c74 <__alt_data_end+0xfffcfc74>
   41f3c:	89000404 	addi	r4,r17,16
   41f40:	b93fbc16 	blt	r23,r4,41e34 <__alt_data_end+0xfffcfe34>
   41f44:	b0800317 	ldw	r2,12(r22)
   41f48:	b0c00217 	ldw	r3,8(r22)
   41f4c:	81bfff04 	addi	r6,r16,-4
   41f50:	01000904 	movi	r4,36
   41f54:	18800315 	stw	r2,12(r3)
   41f58:	10c00215 	stw	r3,8(r2)
   41f5c:	b4800204 	addi	r18,r22,8
   41f60:	21804336 	bltu	r4,r6,42070 <_realloc_r+0x508>
   41f64:	008004c4 	movi	r2,19
   41f68:	11803f2e 	bgeu	r2,r6,42068 <_realloc_r+0x500>
   41f6c:	a8800017 	ldw	r2,0(r21)
   41f70:	b0800215 	stw	r2,8(r22)
   41f74:	a8800117 	ldw	r2,4(r21)
   41f78:	b0800315 	stw	r2,12(r22)
   41f7c:	008006c4 	movi	r2,27
   41f80:	11803f36 	bltu	r2,r6,42080 <_realloc_r+0x518>
   41f84:	b0800404 	addi	r2,r22,16
   41f88:	ad400204 	addi	r21,r21,8
   41f8c:	a8c00017 	ldw	r3,0(r21)
   41f90:	10c00015 	stw	r3,0(r2)
   41f94:	a8c00117 	ldw	r3,4(r21)
   41f98:	10c00115 	stw	r3,4(r2)
   41f9c:	a8c00217 	ldw	r3,8(r21)
   41fa0:	10c00215 	stw	r3,8(r2)
   41fa4:	b447883a 	add	r3,r22,r17
   41fa8:	bc45c83a 	sub	r2,r23,r17
   41fac:	e0c00215 	stw	r3,8(fp)
   41fb0:	10800054 	ori	r2,r2,1
   41fb4:	18800115 	stw	r2,4(r3)
   41fb8:	b0800117 	ldw	r2,4(r22)
   41fbc:	a009883a 	mov	r4,r20
   41fc0:	1080004c 	andi	r2,r2,1
   41fc4:	1462b03a 	or	r17,r2,r17
   41fc8:	b4400115 	stw	r17,4(r22)
   41fcc:	004370c0 	call	4370c <__malloc_unlock>
   41fd0:	9005883a 	mov	r2,r18
   41fd4:	003f4006 	br	41cd8 <__alt_data_end+0xfffcfcd8>
   41fd8:	a8c00217 	ldw	r3,8(r21)
   41fdc:	90c00215 	stw	r3,8(r18)
   41fe0:	a8c00317 	ldw	r3,12(r21)
   41fe4:	90c00315 	stw	r3,12(r18)
   41fe8:	30801126 	beq	r6,r2,42030 <_realloc_r+0x4c8>
   41fec:	90800404 	addi	r2,r18,16
   41ff0:	a8c00404 	addi	r3,r21,16
   41ff4:	003f1906 	br	41c5c <__alt_data_end+0xfffcfc5c>
   41ff8:	90ffff17 	ldw	r3,-4(r18)
   41ffc:	00bfff04 	movi	r2,-4
   42000:	a825883a 	mov	r18,r21
   42004:	1884703a 	and	r2,r3,r2
   42008:	80a1883a 	add	r16,r16,r2
   4200c:	003f2406 	br	41ca0 <__alt_data_end+0xfffcfca0>
   42010:	a8800217 	ldw	r2,8(r21)
   42014:	b0800415 	stw	r2,16(r22)
   42018:	a8800317 	ldw	r2,12(r21)
   4201c:	b0800515 	stw	r2,20(r22)
   42020:	31000a26 	beq	r6,r4,4204c <_realloc_r+0x4e4>
   42024:	b0800604 	addi	r2,r22,24
   42028:	ad400404 	addi	r21,r21,16
   4202c:	003fa906 	br	41ed4 <__alt_data_end+0xfffcfed4>
   42030:	a9000417 	ldw	r4,16(r21)
   42034:	90800604 	addi	r2,r18,24
   42038:	a8c00604 	addi	r3,r21,24
   4203c:	91000415 	stw	r4,16(r18)
   42040:	a9000517 	ldw	r4,20(r21)
   42044:	91000515 	stw	r4,20(r18)
   42048:	003f0406 	br	41c5c <__alt_data_end+0xfffcfc5c>
   4204c:	a8c00417 	ldw	r3,16(r21)
   42050:	ad400604 	addi	r21,r21,24
   42054:	b0800804 	addi	r2,r22,32
   42058:	b0c00615 	stw	r3,24(r22)
   4205c:	a8ffff17 	ldw	r3,-4(r21)
   42060:	b0c00715 	stw	r3,28(r22)
   42064:	003f9b06 	br	41ed4 <__alt_data_end+0xfffcfed4>
   42068:	9005883a 	mov	r2,r18
   4206c:	003fc706 	br	41f8c <__alt_data_end+0xfffcff8c>
   42070:	a80b883a 	mov	r5,r21
   42074:	9009883a 	mov	r4,r18
   42078:	00418e40 	call	418e4 <memmove>
   4207c:	003fc906 	br	41fa4 <__alt_data_end+0xfffcffa4>
   42080:	a8800217 	ldw	r2,8(r21)
   42084:	b0800415 	stw	r2,16(r22)
   42088:	a8800317 	ldw	r2,12(r21)
   4208c:	b0800515 	stw	r2,20(r22)
   42090:	31000726 	beq	r6,r4,420b0 <_realloc_r+0x548>
   42094:	b0800604 	addi	r2,r22,24
   42098:	ad400404 	addi	r21,r21,16
   4209c:	003fbb06 	br	41f8c <__alt_data_end+0xfffcff8c>
   420a0:	a009883a 	mov	r4,r20
   420a4:	004370c0 	call	4370c <__malloc_unlock>
   420a8:	0005883a 	mov	r2,zero
   420ac:	003f0a06 	br	41cd8 <__alt_data_end+0xfffcfcd8>
   420b0:	a8c00417 	ldw	r3,16(r21)
   420b4:	ad400604 	addi	r21,r21,24
   420b8:	b0800804 	addi	r2,r22,32
   420bc:	b0c00615 	stw	r3,24(r22)
   420c0:	a8ffff17 	ldw	r3,-4(r21)
   420c4:	b0c00715 	stw	r3,28(r22)
   420c8:	003fb006 	br	41f8c <__alt_data_end+0xfffcff8c>

000420cc <_sbrk_r>:
   420cc:	defffd04 	addi	sp,sp,-12
   420d0:	dc000015 	stw	r16,0(sp)
   420d4:	04000134 	movhi	r16,4
   420d8:	dc400115 	stw	r17,4(sp)
   420dc:	841a5704 	addi	r16,r16,26972
   420e0:	2023883a 	mov	r17,r4
   420e4:	2809883a 	mov	r4,r5
   420e8:	dfc00215 	stw	ra,8(sp)
   420ec:	80000015 	stw	zero,0(r16)
   420f0:	00438f40 	call	438f4 <sbrk>
   420f4:	00ffffc4 	movi	r3,-1
   420f8:	10c00526 	beq	r2,r3,42110 <_sbrk_r+0x44>
   420fc:	dfc00217 	ldw	ra,8(sp)
   42100:	dc400117 	ldw	r17,4(sp)
   42104:	dc000017 	ldw	r16,0(sp)
   42108:	dec00304 	addi	sp,sp,12
   4210c:	f800283a 	ret
   42110:	80c00017 	ldw	r3,0(r16)
   42114:	183ff926 	beq	r3,zero,420fc <__alt_data_end+0xfffd00fc>
   42118:	88c00015 	stw	r3,0(r17)
   4211c:	003ff706 	br	420fc <__alt_data_end+0xfffd00fc>

00042120 <__sread>:
   42120:	defffe04 	addi	sp,sp,-8
   42124:	dc000015 	stw	r16,0(sp)
   42128:	2821883a 	mov	r16,r5
   4212c:	2940038f 	ldh	r5,14(r5)
   42130:	dfc00115 	stw	ra,4(sp)
   42134:	0042e600 	call	42e60 <_read_r>
   42138:	10000716 	blt	r2,zero,42158 <__sread+0x38>
   4213c:	80c01417 	ldw	r3,80(r16)
   42140:	1887883a 	add	r3,r3,r2
   42144:	80c01415 	stw	r3,80(r16)
   42148:	dfc00117 	ldw	ra,4(sp)
   4214c:	dc000017 	ldw	r16,0(sp)
   42150:	dec00204 	addi	sp,sp,8
   42154:	f800283a 	ret
   42158:	80c0030b 	ldhu	r3,12(r16)
   4215c:	18fbffcc 	andi	r3,r3,61439
   42160:	80c0030d 	sth	r3,12(r16)
   42164:	dfc00117 	ldw	ra,4(sp)
   42168:	dc000017 	ldw	r16,0(sp)
   4216c:	dec00204 	addi	sp,sp,8
   42170:	f800283a 	ret

00042174 <__seofread>:
   42174:	0005883a 	mov	r2,zero
   42178:	f800283a 	ret

0004217c <__swrite>:
   4217c:	2880030b 	ldhu	r2,12(r5)
   42180:	defffb04 	addi	sp,sp,-20
   42184:	dcc00315 	stw	r19,12(sp)
   42188:	dc800215 	stw	r18,8(sp)
   4218c:	dc400115 	stw	r17,4(sp)
   42190:	dc000015 	stw	r16,0(sp)
   42194:	dfc00415 	stw	ra,16(sp)
   42198:	10c0400c 	andi	r3,r2,256
   4219c:	2821883a 	mov	r16,r5
   421a0:	2023883a 	mov	r17,r4
   421a4:	3025883a 	mov	r18,r6
   421a8:	3827883a 	mov	r19,r7
   421ac:	18000526 	beq	r3,zero,421c4 <__swrite+0x48>
   421b0:	2940038f 	ldh	r5,14(r5)
   421b4:	01c00084 	movi	r7,2
   421b8:	000d883a 	mov	r6,zero
   421bc:	0042c440 	call	42c44 <_lseek_r>
   421c0:	8080030b 	ldhu	r2,12(r16)
   421c4:	8140038f 	ldh	r5,14(r16)
   421c8:	10bbffcc 	andi	r2,r2,61439
   421cc:	980f883a 	mov	r7,r19
   421d0:	900d883a 	mov	r6,r18
   421d4:	8809883a 	mov	r4,r17
   421d8:	8080030d 	sth	r2,12(r16)
   421dc:	dfc00417 	ldw	ra,16(sp)
   421e0:	dcc00317 	ldw	r19,12(sp)
   421e4:	dc800217 	ldw	r18,8(sp)
   421e8:	dc400117 	ldw	r17,4(sp)
   421ec:	dc000017 	ldw	r16,0(sp)
   421f0:	dec00504 	addi	sp,sp,20
   421f4:	004225c1 	jmpi	4225c <_write_r>

000421f8 <__sseek>:
   421f8:	defffe04 	addi	sp,sp,-8
   421fc:	dc000015 	stw	r16,0(sp)
   42200:	2821883a 	mov	r16,r5
   42204:	2940038f 	ldh	r5,14(r5)
   42208:	dfc00115 	stw	ra,4(sp)
   4220c:	0042c440 	call	42c44 <_lseek_r>
   42210:	00ffffc4 	movi	r3,-1
   42214:	10c00826 	beq	r2,r3,42238 <__sseek+0x40>
   42218:	80c0030b 	ldhu	r3,12(r16)
   4221c:	80801415 	stw	r2,80(r16)
   42220:	18c40014 	ori	r3,r3,4096
   42224:	80c0030d 	sth	r3,12(r16)
   42228:	dfc00117 	ldw	ra,4(sp)
   4222c:	dc000017 	ldw	r16,0(sp)
   42230:	dec00204 	addi	sp,sp,8
   42234:	f800283a 	ret
   42238:	80c0030b 	ldhu	r3,12(r16)
   4223c:	18fbffcc 	andi	r3,r3,61439
   42240:	80c0030d 	sth	r3,12(r16)
   42244:	dfc00117 	ldw	ra,4(sp)
   42248:	dc000017 	ldw	r16,0(sp)
   4224c:	dec00204 	addi	sp,sp,8
   42250:	f800283a 	ret

00042254 <__sclose>:
   42254:	2940038f 	ldh	r5,14(r5)
   42258:	00424101 	jmpi	42410 <_close_r>

0004225c <_write_r>:
   4225c:	defffd04 	addi	sp,sp,-12
   42260:	2805883a 	mov	r2,r5
   42264:	dc000015 	stw	r16,0(sp)
   42268:	04000134 	movhi	r16,4
   4226c:	dc400115 	stw	r17,4(sp)
   42270:	300b883a 	mov	r5,r6
   42274:	841a5704 	addi	r16,r16,26972
   42278:	2023883a 	mov	r17,r4
   4227c:	380d883a 	mov	r6,r7
   42280:	1009883a 	mov	r4,r2
   42284:	dfc00215 	stw	ra,8(sp)
   42288:	80000015 	stw	zero,0(r16)
   4228c:	00439e00 	call	439e0 <write>
   42290:	00ffffc4 	movi	r3,-1
   42294:	10c00526 	beq	r2,r3,422ac <_write_r+0x50>
   42298:	dfc00217 	ldw	ra,8(sp)
   4229c:	dc400117 	ldw	r17,4(sp)
   422a0:	dc000017 	ldw	r16,0(sp)
   422a4:	dec00304 	addi	sp,sp,12
   422a8:	f800283a 	ret
   422ac:	80c00017 	ldw	r3,0(r16)
   422b0:	183ff926 	beq	r3,zero,42298 <__alt_data_end+0xfffd0298>
   422b4:	88c00015 	stw	r3,0(r17)
   422b8:	003ff706 	br	42298 <__alt_data_end+0xfffd0298>

000422bc <__swsetup_r>:
   422bc:	00800134 	movhi	r2,4
   422c0:	defffd04 	addi	sp,sp,-12
   422c4:	10979504 	addi	r2,r2,24148
   422c8:	dc400115 	stw	r17,4(sp)
   422cc:	2023883a 	mov	r17,r4
   422d0:	11000017 	ldw	r4,0(r2)
   422d4:	dc000015 	stw	r16,0(sp)
   422d8:	dfc00215 	stw	ra,8(sp)
   422dc:	2821883a 	mov	r16,r5
   422e0:	20000226 	beq	r4,zero,422ec <__swsetup_r+0x30>
   422e4:	20800e17 	ldw	r2,56(r4)
   422e8:	10003126 	beq	r2,zero,423b0 <__swsetup_r+0xf4>
   422ec:	8080030b 	ldhu	r2,12(r16)
   422f0:	10c0020c 	andi	r3,r2,8
   422f4:	1009883a 	mov	r4,r2
   422f8:	18000f26 	beq	r3,zero,42338 <__swsetup_r+0x7c>
   422fc:	80c00417 	ldw	r3,16(r16)
   42300:	18001526 	beq	r3,zero,42358 <__swsetup_r+0x9c>
   42304:	1100004c 	andi	r4,r2,1
   42308:	20001c1e 	bne	r4,zero,4237c <__swsetup_r+0xc0>
   4230c:	1080008c 	andi	r2,r2,2
   42310:	1000291e 	bne	r2,zero,423b8 <__swsetup_r+0xfc>
   42314:	80800517 	ldw	r2,20(r16)
   42318:	80800215 	stw	r2,8(r16)
   4231c:	18001c26 	beq	r3,zero,42390 <__swsetup_r+0xd4>
   42320:	0005883a 	mov	r2,zero
   42324:	dfc00217 	ldw	ra,8(sp)
   42328:	dc400117 	ldw	r17,4(sp)
   4232c:	dc000017 	ldw	r16,0(sp)
   42330:	dec00304 	addi	sp,sp,12
   42334:	f800283a 	ret
   42338:	2080040c 	andi	r2,r4,16
   4233c:	10002e26 	beq	r2,zero,423f8 <__swsetup_r+0x13c>
   42340:	2080010c 	andi	r2,r4,4
   42344:	10001e1e 	bne	r2,zero,423c0 <__swsetup_r+0x104>
   42348:	80c00417 	ldw	r3,16(r16)
   4234c:	20800214 	ori	r2,r4,8
   42350:	8080030d 	sth	r2,12(r16)
   42354:	183feb1e 	bne	r3,zero,42304 <__alt_data_end+0xfffd0304>
   42358:	1100a00c 	andi	r4,r2,640
   4235c:	01408004 	movi	r5,512
   42360:	217fe826 	beq	r4,r5,42304 <__alt_data_end+0xfffd0304>
   42364:	800b883a 	mov	r5,r16
   42368:	8809883a 	mov	r4,r17
   4236c:	0042ca40 	call	42ca4 <__smakebuf_r>
   42370:	8080030b 	ldhu	r2,12(r16)
   42374:	80c00417 	ldw	r3,16(r16)
   42378:	003fe206 	br	42304 <__alt_data_end+0xfffd0304>
   4237c:	80800517 	ldw	r2,20(r16)
   42380:	80000215 	stw	zero,8(r16)
   42384:	0085c83a 	sub	r2,zero,r2
   42388:	80800615 	stw	r2,24(r16)
   4238c:	183fe41e 	bne	r3,zero,42320 <__alt_data_end+0xfffd0320>
   42390:	80c0030b 	ldhu	r3,12(r16)
   42394:	0005883a 	mov	r2,zero
   42398:	1900200c 	andi	r4,r3,128
   4239c:	203fe126 	beq	r4,zero,42324 <__alt_data_end+0xfffd0324>
   423a0:	18c01014 	ori	r3,r3,64
   423a4:	80c0030d 	sth	r3,12(r16)
   423a8:	00bfffc4 	movi	r2,-1
   423ac:	003fdd06 	br	42324 <__alt_data_end+0xfffd0324>
   423b0:	004080c0 	call	4080c <__sinit>
   423b4:	003fcd06 	br	422ec <__alt_data_end+0xfffd02ec>
   423b8:	0005883a 	mov	r2,zero
   423bc:	003fd606 	br	42318 <__alt_data_end+0xfffd0318>
   423c0:	81400c17 	ldw	r5,48(r16)
   423c4:	28000626 	beq	r5,zero,423e0 <__swsetup_r+0x124>
   423c8:	80801004 	addi	r2,r16,64
   423cc:	28800326 	beq	r5,r2,423dc <__swsetup_r+0x120>
   423d0:	8809883a 	mov	r4,r17
   423d4:	00429340 	call	42934 <_free_r>
   423d8:	8100030b 	ldhu	r4,12(r16)
   423dc:	80000c15 	stw	zero,48(r16)
   423e0:	80c00417 	ldw	r3,16(r16)
   423e4:	00bff6c4 	movi	r2,-37
   423e8:	1108703a 	and	r4,r2,r4
   423ec:	80000115 	stw	zero,4(r16)
   423f0:	80c00015 	stw	r3,0(r16)
   423f4:	003fd506 	br	4234c <__alt_data_end+0xfffd034c>
   423f8:	00800244 	movi	r2,9
   423fc:	88800015 	stw	r2,0(r17)
   42400:	20801014 	ori	r2,r4,64
   42404:	8080030d 	sth	r2,12(r16)
   42408:	00bfffc4 	movi	r2,-1
   4240c:	003fc506 	br	42324 <__alt_data_end+0xfffd0324>

00042410 <_close_r>:
   42410:	defffd04 	addi	sp,sp,-12
   42414:	dc000015 	stw	r16,0(sp)
   42418:	04000134 	movhi	r16,4
   4241c:	dc400115 	stw	r17,4(sp)
   42420:	841a5704 	addi	r16,r16,26972
   42424:	2023883a 	mov	r17,r4
   42428:	2809883a 	mov	r4,r5
   4242c:	dfc00215 	stw	ra,8(sp)
   42430:	80000015 	stw	zero,0(r16)
   42434:	00431880 	call	43188 <close>
   42438:	00ffffc4 	movi	r3,-1
   4243c:	10c00526 	beq	r2,r3,42454 <_close_r+0x44>
   42440:	dfc00217 	ldw	ra,8(sp)
   42444:	dc400117 	ldw	r17,4(sp)
   42448:	dc000017 	ldw	r16,0(sp)
   4244c:	dec00304 	addi	sp,sp,12
   42450:	f800283a 	ret
   42454:	80c00017 	ldw	r3,0(r16)
   42458:	183ff926 	beq	r3,zero,42440 <__alt_data_end+0xfffd0440>
   4245c:	88c00015 	stw	r3,0(r17)
   42460:	003ff706 	br	42440 <__alt_data_end+0xfffd0440>

00042464 <_fclose_r>:
   42464:	28003926 	beq	r5,zero,4254c <_fclose_r+0xe8>
   42468:	defffc04 	addi	sp,sp,-16
   4246c:	dc400115 	stw	r17,4(sp)
   42470:	dc000015 	stw	r16,0(sp)
   42474:	dfc00315 	stw	ra,12(sp)
   42478:	dc800215 	stw	r18,8(sp)
   4247c:	2023883a 	mov	r17,r4
   42480:	2821883a 	mov	r16,r5
   42484:	20000226 	beq	r4,zero,42490 <_fclose_r+0x2c>
   42488:	20800e17 	ldw	r2,56(r4)
   4248c:	10002726 	beq	r2,zero,4252c <_fclose_r+0xc8>
   42490:	8080030f 	ldh	r2,12(r16)
   42494:	1000071e 	bne	r2,zero,424b4 <_fclose_r+0x50>
   42498:	0005883a 	mov	r2,zero
   4249c:	dfc00317 	ldw	ra,12(sp)
   424a0:	dc800217 	ldw	r18,8(sp)
   424a4:	dc400117 	ldw	r17,4(sp)
   424a8:	dc000017 	ldw	r16,0(sp)
   424ac:	dec00404 	addi	sp,sp,16
   424b0:	f800283a 	ret
   424b4:	800b883a 	mov	r5,r16
   424b8:	8809883a 	mov	r4,r17
   424bc:	00425680 	call	42568 <__sflush_r>
   424c0:	1025883a 	mov	r18,r2
   424c4:	80800b17 	ldw	r2,44(r16)
   424c8:	10000426 	beq	r2,zero,424dc <_fclose_r+0x78>
   424cc:	81400717 	ldw	r5,28(r16)
   424d0:	8809883a 	mov	r4,r17
   424d4:	103ee83a 	callr	r2
   424d8:	10001616 	blt	r2,zero,42534 <_fclose_r+0xd0>
   424dc:	8080030b 	ldhu	r2,12(r16)
   424e0:	1080200c 	andi	r2,r2,128
   424e4:	1000151e 	bne	r2,zero,4253c <_fclose_r+0xd8>
   424e8:	81400c17 	ldw	r5,48(r16)
   424ec:	28000526 	beq	r5,zero,42504 <_fclose_r+0xa0>
   424f0:	80801004 	addi	r2,r16,64
   424f4:	28800226 	beq	r5,r2,42500 <_fclose_r+0x9c>
   424f8:	8809883a 	mov	r4,r17
   424fc:	00429340 	call	42934 <_free_r>
   42500:	80000c15 	stw	zero,48(r16)
   42504:	81401117 	ldw	r5,68(r16)
   42508:	28000326 	beq	r5,zero,42518 <_fclose_r+0xb4>
   4250c:	8809883a 	mov	r4,r17
   42510:	00429340 	call	42934 <_free_r>
   42514:	80001115 	stw	zero,68(r16)
   42518:	004081c0 	call	4081c <__sfp_lock_acquire>
   4251c:	8000030d 	sth	zero,12(r16)
   42520:	00408200 	call	40820 <__sfp_lock_release>
   42524:	9005883a 	mov	r2,r18
   42528:	003fdc06 	br	4249c <__alt_data_end+0xfffd049c>
   4252c:	004080c0 	call	4080c <__sinit>
   42530:	003fd706 	br	42490 <__alt_data_end+0xfffd0490>
   42534:	04bfffc4 	movi	r18,-1
   42538:	003fe806 	br	424dc <__alt_data_end+0xfffd04dc>
   4253c:	81400417 	ldw	r5,16(r16)
   42540:	8809883a 	mov	r4,r17
   42544:	00429340 	call	42934 <_free_r>
   42548:	003fe706 	br	424e8 <__alt_data_end+0xfffd04e8>
   4254c:	0005883a 	mov	r2,zero
   42550:	f800283a 	ret

00042554 <fclose>:
   42554:	00800134 	movhi	r2,4
   42558:	10979504 	addi	r2,r2,24148
   4255c:	200b883a 	mov	r5,r4
   42560:	11000017 	ldw	r4,0(r2)
   42564:	00424641 	jmpi	42464 <_fclose_r>

00042568 <__sflush_r>:
   42568:	2880030b 	ldhu	r2,12(r5)
   4256c:	defffb04 	addi	sp,sp,-20
   42570:	dcc00315 	stw	r19,12(sp)
   42574:	dc400115 	stw	r17,4(sp)
   42578:	dfc00415 	stw	ra,16(sp)
   4257c:	dc800215 	stw	r18,8(sp)
   42580:	dc000015 	stw	r16,0(sp)
   42584:	10c0020c 	andi	r3,r2,8
   42588:	2823883a 	mov	r17,r5
   4258c:	2027883a 	mov	r19,r4
   42590:	1800311e 	bne	r3,zero,42658 <__sflush_r+0xf0>
   42594:	28c00117 	ldw	r3,4(r5)
   42598:	10820014 	ori	r2,r2,2048
   4259c:	2880030d 	sth	r2,12(r5)
   425a0:	00c04b0e 	bge	zero,r3,426d0 <__sflush_r+0x168>
   425a4:	8a000a17 	ldw	r8,40(r17)
   425a8:	40002326 	beq	r8,zero,42638 <__sflush_r+0xd0>
   425ac:	9c000017 	ldw	r16,0(r19)
   425b0:	10c4000c 	andi	r3,r2,4096
   425b4:	98000015 	stw	zero,0(r19)
   425b8:	18004826 	beq	r3,zero,426dc <__sflush_r+0x174>
   425bc:	89801417 	ldw	r6,80(r17)
   425c0:	10c0010c 	andi	r3,r2,4
   425c4:	18000626 	beq	r3,zero,425e0 <__sflush_r+0x78>
   425c8:	88c00117 	ldw	r3,4(r17)
   425cc:	88800c17 	ldw	r2,48(r17)
   425d0:	30cdc83a 	sub	r6,r6,r3
   425d4:	10000226 	beq	r2,zero,425e0 <__sflush_r+0x78>
   425d8:	88800f17 	ldw	r2,60(r17)
   425dc:	308dc83a 	sub	r6,r6,r2
   425e0:	89400717 	ldw	r5,28(r17)
   425e4:	000f883a 	mov	r7,zero
   425e8:	9809883a 	mov	r4,r19
   425ec:	403ee83a 	callr	r8
   425f0:	00ffffc4 	movi	r3,-1
   425f4:	10c04426 	beq	r2,r3,42708 <__sflush_r+0x1a0>
   425f8:	88c0030b 	ldhu	r3,12(r17)
   425fc:	89000417 	ldw	r4,16(r17)
   42600:	88000115 	stw	zero,4(r17)
   42604:	197dffcc 	andi	r5,r3,63487
   42608:	8940030d 	sth	r5,12(r17)
   4260c:	89000015 	stw	r4,0(r17)
   42610:	18c4000c 	andi	r3,r3,4096
   42614:	18002c1e 	bne	r3,zero,426c8 <__sflush_r+0x160>
   42618:	89400c17 	ldw	r5,48(r17)
   4261c:	9c000015 	stw	r16,0(r19)
   42620:	28000526 	beq	r5,zero,42638 <__sflush_r+0xd0>
   42624:	88801004 	addi	r2,r17,64
   42628:	28800226 	beq	r5,r2,42634 <__sflush_r+0xcc>
   4262c:	9809883a 	mov	r4,r19
   42630:	00429340 	call	42934 <_free_r>
   42634:	88000c15 	stw	zero,48(r17)
   42638:	0005883a 	mov	r2,zero
   4263c:	dfc00417 	ldw	ra,16(sp)
   42640:	dcc00317 	ldw	r19,12(sp)
   42644:	dc800217 	ldw	r18,8(sp)
   42648:	dc400117 	ldw	r17,4(sp)
   4264c:	dc000017 	ldw	r16,0(sp)
   42650:	dec00504 	addi	sp,sp,20
   42654:	f800283a 	ret
   42658:	2c800417 	ldw	r18,16(r5)
   4265c:	903ff626 	beq	r18,zero,42638 <__alt_data_end+0xfffd0638>
   42660:	2c000017 	ldw	r16,0(r5)
   42664:	108000cc 	andi	r2,r2,3
   42668:	2c800015 	stw	r18,0(r5)
   4266c:	84a1c83a 	sub	r16,r16,r18
   42670:	1000131e 	bne	r2,zero,426c0 <__sflush_r+0x158>
   42674:	28800517 	ldw	r2,20(r5)
   42678:	88800215 	stw	r2,8(r17)
   4267c:	04000316 	blt	zero,r16,4268c <__sflush_r+0x124>
   42680:	003fed06 	br	42638 <__alt_data_end+0xfffd0638>
   42684:	90a5883a 	add	r18,r18,r2
   42688:	043feb0e 	bge	zero,r16,42638 <__alt_data_end+0xfffd0638>
   4268c:	88800917 	ldw	r2,36(r17)
   42690:	89400717 	ldw	r5,28(r17)
   42694:	800f883a 	mov	r7,r16
   42698:	900d883a 	mov	r6,r18
   4269c:	9809883a 	mov	r4,r19
   426a0:	103ee83a 	callr	r2
   426a4:	80a1c83a 	sub	r16,r16,r2
   426a8:	00bff616 	blt	zero,r2,42684 <__alt_data_end+0xfffd0684>
   426ac:	88c0030b 	ldhu	r3,12(r17)
   426b0:	00bfffc4 	movi	r2,-1
   426b4:	18c01014 	ori	r3,r3,64
   426b8:	88c0030d 	sth	r3,12(r17)
   426bc:	003fdf06 	br	4263c <__alt_data_end+0xfffd063c>
   426c0:	0005883a 	mov	r2,zero
   426c4:	003fec06 	br	42678 <__alt_data_end+0xfffd0678>
   426c8:	88801415 	stw	r2,80(r17)
   426cc:	003fd206 	br	42618 <__alt_data_end+0xfffd0618>
   426d0:	28c00f17 	ldw	r3,60(r5)
   426d4:	00ffb316 	blt	zero,r3,425a4 <__alt_data_end+0xfffd05a4>
   426d8:	003fd706 	br	42638 <__alt_data_end+0xfffd0638>
   426dc:	89400717 	ldw	r5,28(r17)
   426e0:	000d883a 	mov	r6,zero
   426e4:	01c00044 	movi	r7,1
   426e8:	9809883a 	mov	r4,r19
   426ec:	403ee83a 	callr	r8
   426f0:	100d883a 	mov	r6,r2
   426f4:	00bfffc4 	movi	r2,-1
   426f8:	30801426 	beq	r6,r2,4274c <__sflush_r+0x1e4>
   426fc:	8880030b 	ldhu	r2,12(r17)
   42700:	8a000a17 	ldw	r8,40(r17)
   42704:	003fae06 	br	425c0 <__alt_data_end+0xfffd05c0>
   42708:	98c00017 	ldw	r3,0(r19)
   4270c:	183fba26 	beq	r3,zero,425f8 <__alt_data_end+0xfffd05f8>
   42710:	01000744 	movi	r4,29
   42714:	19000626 	beq	r3,r4,42730 <__sflush_r+0x1c8>
   42718:	01000584 	movi	r4,22
   4271c:	19000426 	beq	r3,r4,42730 <__sflush_r+0x1c8>
   42720:	88c0030b 	ldhu	r3,12(r17)
   42724:	18c01014 	ori	r3,r3,64
   42728:	88c0030d 	sth	r3,12(r17)
   4272c:	003fc306 	br	4263c <__alt_data_end+0xfffd063c>
   42730:	8880030b 	ldhu	r2,12(r17)
   42734:	88c00417 	ldw	r3,16(r17)
   42738:	88000115 	stw	zero,4(r17)
   4273c:	10bdffcc 	andi	r2,r2,63487
   42740:	8880030d 	sth	r2,12(r17)
   42744:	88c00015 	stw	r3,0(r17)
   42748:	003fb306 	br	42618 <__alt_data_end+0xfffd0618>
   4274c:	98800017 	ldw	r2,0(r19)
   42750:	103fea26 	beq	r2,zero,426fc <__alt_data_end+0xfffd06fc>
   42754:	00c00744 	movi	r3,29
   42758:	10c00226 	beq	r2,r3,42764 <__sflush_r+0x1fc>
   4275c:	00c00584 	movi	r3,22
   42760:	10c0031e 	bne	r2,r3,42770 <__sflush_r+0x208>
   42764:	9c000015 	stw	r16,0(r19)
   42768:	0005883a 	mov	r2,zero
   4276c:	003fb306 	br	4263c <__alt_data_end+0xfffd063c>
   42770:	88c0030b 	ldhu	r3,12(r17)
   42774:	3005883a 	mov	r2,r6
   42778:	18c01014 	ori	r3,r3,64
   4277c:	88c0030d 	sth	r3,12(r17)
   42780:	003fae06 	br	4263c <__alt_data_end+0xfffd063c>

00042784 <_fflush_r>:
   42784:	defffd04 	addi	sp,sp,-12
   42788:	dc000115 	stw	r16,4(sp)
   4278c:	dfc00215 	stw	ra,8(sp)
   42790:	2021883a 	mov	r16,r4
   42794:	20000226 	beq	r4,zero,427a0 <_fflush_r+0x1c>
   42798:	20800e17 	ldw	r2,56(r4)
   4279c:	10000c26 	beq	r2,zero,427d0 <_fflush_r+0x4c>
   427a0:	2880030f 	ldh	r2,12(r5)
   427a4:	1000051e 	bne	r2,zero,427bc <_fflush_r+0x38>
   427a8:	0005883a 	mov	r2,zero
   427ac:	dfc00217 	ldw	ra,8(sp)
   427b0:	dc000117 	ldw	r16,4(sp)
   427b4:	dec00304 	addi	sp,sp,12
   427b8:	f800283a 	ret
   427bc:	8009883a 	mov	r4,r16
   427c0:	dfc00217 	ldw	ra,8(sp)
   427c4:	dc000117 	ldw	r16,4(sp)
   427c8:	dec00304 	addi	sp,sp,12
   427cc:	00425681 	jmpi	42568 <__sflush_r>
   427d0:	d9400015 	stw	r5,0(sp)
   427d4:	004080c0 	call	4080c <__sinit>
   427d8:	d9400017 	ldw	r5,0(sp)
   427dc:	003ff006 	br	427a0 <__alt_data_end+0xfffd07a0>

000427e0 <fflush>:
   427e0:	20000526 	beq	r4,zero,427f8 <fflush+0x18>
   427e4:	00800134 	movhi	r2,4
   427e8:	10979504 	addi	r2,r2,24148
   427ec:	200b883a 	mov	r5,r4
   427f0:	11000017 	ldw	r4,0(r2)
   427f4:	00427841 	jmpi	42784 <_fflush_r>
   427f8:	00800134 	movhi	r2,4
   427fc:	10979404 	addi	r2,r2,24144
   42800:	11000017 	ldw	r4,0(r2)
   42804:	01400134 	movhi	r5,4
   42808:	2949e104 	addi	r5,r5,10116
   4280c:	0040de81 	jmpi	40de8 <_fwalk_reent>

00042810 <_malloc_trim_r>:
   42810:	defffb04 	addi	sp,sp,-20
   42814:	dcc00315 	stw	r19,12(sp)
   42818:	04c00134 	movhi	r19,4
   4281c:	dc800215 	stw	r18,8(sp)
   42820:	dc400115 	stw	r17,4(sp)
   42824:	dc000015 	stw	r16,0(sp)
   42828:	dfc00415 	stw	ra,16(sp)
   4282c:	2821883a 	mov	r16,r5
   42830:	9cd5f704 	addi	r19,r19,22492
   42834:	2025883a 	mov	r18,r4
   42838:	00436e80 	call	436e8 <__malloc_lock>
   4283c:	98800217 	ldw	r2,8(r19)
   42840:	14400117 	ldw	r17,4(r2)
   42844:	00bfff04 	movi	r2,-4
   42848:	88a2703a 	and	r17,r17,r2
   4284c:	8c21c83a 	sub	r16,r17,r16
   42850:	8403fbc4 	addi	r16,r16,4079
   42854:	8020d33a 	srli	r16,r16,12
   42858:	0083ffc4 	movi	r2,4095
   4285c:	843fffc4 	addi	r16,r16,-1
   42860:	8020933a 	slli	r16,r16,12
   42864:	1400060e 	bge	r2,r16,42880 <_malloc_trim_r+0x70>
   42868:	000b883a 	mov	r5,zero
   4286c:	9009883a 	mov	r4,r18
   42870:	00420cc0 	call	420cc <_sbrk_r>
   42874:	98c00217 	ldw	r3,8(r19)
   42878:	1c47883a 	add	r3,r3,r17
   4287c:	10c00a26 	beq	r2,r3,428a8 <_malloc_trim_r+0x98>
   42880:	9009883a 	mov	r4,r18
   42884:	004370c0 	call	4370c <__malloc_unlock>
   42888:	0005883a 	mov	r2,zero
   4288c:	dfc00417 	ldw	ra,16(sp)
   42890:	dcc00317 	ldw	r19,12(sp)
   42894:	dc800217 	ldw	r18,8(sp)
   42898:	dc400117 	ldw	r17,4(sp)
   4289c:	dc000017 	ldw	r16,0(sp)
   428a0:	dec00504 	addi	sp,sp,20
   428a4:	f800283a 	ret
   428a8:	040bc83a 	sub	r5,zero,r16
   428ac:	9009883a 	mov	r4,r18
   428b0:	00420cc0 	call	420cc <_sbrk_r>
   428b4:	00ffffc4 	movi	r3,-1
   428b8:	10c00d26 	beq	r2,r3,428f0 <_malloc_trim_r+0xe0>
   428bc:	00c00134 	movhi	r3,4
   428c0:	18da5d04 	addi	r3,r3,26996
   428c4:	18800017 	ldw	r2,0(r3)
   428c8:	99000217 	ldw	r4,8(r19)
   428cc:	8c23c83a 	sub	r17,r17,r16
   428d0:	8c400054 	ori	r17,r17,1
   428d4:	1421c83a 	sub	r16,r2,r16
   428d8:	24400115 	stw	r17,4(r4)
   428dc:	9009883a 	mov	r4,r18
   428e0:	1c000015 	stw	r16,0(r3)
   428e4:	004370c0 	call	4370c <__malloc_unlock>
   428e8:	00800044 	movi	r2,1
   428ec:	003fe706 	br	4288c <__alt_data_end+0xfffd088c>
   428f0:	000b883a 	mov	r5,zero
   428f4:	9009883a 	mov	r4,r18
   428f8:	00420cc0 	call	420cc <_sbrk_r>
   428fc:	99000217 	ldw	r4,8(r19)
   42900:	014003c4 	movi	r5,15
   42904:	1107c83a 	sub	r3,r2,r4
   42908:	28ffdd0e 	bge	r5,r3,42880 <__alt_data_end+0xfffd0880>
   4290c:	01400134 	movhi	r5,4
   42910:	29579604 	addi	r5,r5,24152
   42914:	29400017 	ldw	r5,0(r5)
   42918:	18c00054 	ori	r3,r3,1
   4291c:	20c00115 	stw	r3,4(r4)
   42920:	00c00134 	movhi	r3,4
   42924:	1145c83a 	sub	r2,r2,r5
   42928:	18da5d04 	addi	r3,r3,26996
   4292c:	18800015 	stw	r2,0(r3)
   42930:	003fd306 	br	42880 <__alt_data_end+0xfffd0880>

00042934 <_free_r>:
   42934:	28004126 	beq	r5,zero,42a3c <_free_r+0x108>
   42938:	defffd04 	addi	sp,sp,-12
   4293c:	dc400115 	stw	r17,4(sp)
   42940:	dc000015 	stw	r16,0(sp)
   42944:	2023883a 	mov	r17,r4
   42948:	2821883a 	mov	r16,r5
   4294c:	dfc00215 	stw	ra,8(sp)
   42950:	00436e80 	call	436e8 <__malloc_lock>
   42954:	81ffff17 	ldw	r7,-4(r16)
   42958:	00bfff84 	movi	r2,-2
   4295c:	01000134 	movhi	r4,4
   42960:	81bffe04 	addi	r6,r16,-8
   42964:	3884703a 	and	r2,r7,r2
   42968:	2115f704 	addi	r4,r4,22492
   4296c:	308b883a 	add	r5,r6,r2
   42970:	2a400117 	ldw	r9,4(r5)
   42974:	22000217 	ldw	r8,8(r4)
   42978:	00ffff04 	movi	r3,-4
   4297c:	48c6703a 	and	r3,r9,r3
   42980:	2a005726 	beq	r5,r8,42ae0 <_free_r+0x1ac>
   42984:	28c00115 	stw	r3,4(r5)
   42988:	39c0004c 	andi	r7,r7,1
   4298c:	3800091e 	bne	r7,zero,429b4 <_free_r+0x80>
   42990:	823ffe17 	ldw	r8,-8(r16)
   42994:	22400204 	addi	r9,r4,8
   42998:	320dc83a 	sub	r6,r6,r8
   4299c:	31c00217 	ldw	r7,8(r6)
   429a0:	1205883a 	add	r2,r2,r8
   429a4:	3a406526 	beq	r7,r9,42b3c <_free_r+0x208>
   429a8:	32000317 	ldw	r8,12(r6)
   429ac:	3a000315 	stw	r8,12(r7)
   429b0:	41c00215 	stw	r7,8(r8)
   429b4:	28cf883a 	add	r7,r5,r3
   429b8:	39c00117 	ldw	r7,4(r7)
   429bc:	39c0004c 	andi	r7,r7,1
   429c0:	38003a26 	beq	r7,zero,42aac <_free_r+0x178>
   429c4:	10c00054 	ori	r3,r2,1
   429c8:	30c00115 	stw	r3,4(r6)
   429cc:	3087883a 	add	r3,r6,r2
   429d0:	18800015 	stw	r2,0(r3)
   429d4:	00c07fc4 	movi	r3,511
   429d8:	18801936 	bltu	r3,r2,42a40 <_free_r+0x10c>
   429dc:	1004d0fa 	srli	r2,r2,3
   429e0:	01c00044 	movi	r7,1
   429e4:	21400117 	ldw	r5,4(r4)
   429e8:	10c00044 	addi	r3,r2,1
   429ec:	18c7883a 	add	r3,r3,r3
   429f0:	1005d0ba 	srai	r2,r2,2
   429f4:	18c7883a 	add	r3,r3,r3
   429f8:	18c7883a 	add	r3,r3,r3
   429fc:	1907883a 	add	r3,r3,r4
   42a00:	3884983a 	sll	r2,r7,r2
   42a04:	19c00017 	ldw	r7,0(r3)
   42a08:	1a3ffe04 	addi	r8,r3,-8
   42a0c:	1144b03a 	or	r2,r2,r5
   42a10:	32000315 	stw	r8,12(r6)
   42a14:	31c00215 	stw	r7,8(r6)
   42a18:	20800115 	stw	r2,4(r4)
   42a1c:	19800015 	stw	r6,0(r3)
   42a20:	39800315 	stw	r6,12(r7)
   42a24:	8809883a 	mov	r4,r17
   42a28:	dfc00217 	ldw	ra,8(sp)
   42a2c:	dc400117 	ldw	r17,4(sp)
   42a30:	dc000017 	ldw	r16,0(sp)
   42a34:	dec00304 	addi	sp,sp,12
   42a38:	004370c1 	jmpi	4370c <__malloc_unlock>
   42a3c:	f800283a 	ret
   42a40:	100ad27a 	srli	r5,r2,9
   42a44:	00c00104 	movi	r3,4
   42a48:	19404a36 	bltu	r3,r5,42b74 <_free_r+0x240>
   42a4c:	100ad1ba 	srli	r5,r2,6
   42a50:	28c00e44 	addi	r3,r5,57
   42a54:	18c7883a 	add	r3,r3,r3
   42a58:	29400e04 	addi	r5,r5,56
   42a5c:	18c7883a 	add	r3,r3,r3
   42a60:	18c7883a 	add	r3,r3,r3
   42a64:	1909883a 	add	r4,r3,r4
   42a68:	20c00017 	ldw	r3,0(r4)
   42a6c:	01c00134 	movhi	r7,4
   42a70:	213ffe04 	addi	r4,r4,-8
   42a74:	39d5f704 	addi	r7,r7,22492
   42a78:	20c04426 	beq	r4,r3,42b8c <_free_r+0x258>
   42a7c:	01ffff04 	movi	r7,-4
   42a80:	19400117 	ldw	r5,4(r3)
   42a84:	29ca703a 	and	r5,r5,r7
   42a88:	1140022e 	bgeu	r2,r5,42a94 <_free_r+0x160>
   42a8c:	18c00217 	ldw	r3,8(r3)
   42a90:	20fffb1e 	bne	r4,r3,42a80 <__alt_data_end+0xfffd0a80>
   42a94:	19000317 	ldw	r4,12(r3)
   42a98:	31000315 	stw	r4,12(r6)
   42a9c:	30c00215 	stw	r3,8(r6)
   42aa0:	21800215 	stw	r6,8(r4)
   42aa4:	19800315 	stw	r6,12(r3)
   42aa8:	003fde06 	br	42a24 <__alt_data_end+0xfffd0a24>
   42aac:	29c00217 	ldw	r7,8(r5)
   42ab0:	10c5883a 	add	r2,r2,r3
   42ab4:	00c00134 	movhi	r3,4
   42ab8:	18d5f904 	addi	r3,r3,22500
   42abc:	38c03b26 	beq	r7,r3,42bac <_free_r+0x278>
   42ac0:	2a000317 	ldw	r8,12(r5)
   42ac4:	11400054 	ori	r5,r2,1
   42ac8:	3087883a 	add	r3,r6,r2
   42acc:	3a000315 	stw	r8,12(r7)
   42ad0:	41c00215 	stw	r7,8(r8)
   42ad4:	31400115 	stw	r5,4(r6)
   42ad8:	18800015 	stw	r2,0(r3)
   42adc:	003fbd06 	br	429d4 <__alt_data_end+0xfffd09d4>
   42ae0:	39c0004c 	andi	r7,r7,1
   42ae4:	10c5883a 	add	r2,r2,r3
   42ae8:	3800071e 	bne	r7,zero,42b08 <_free_r+0x1d4>
   42aec:	81fffe17 	ldw	r7,-8(r16)
   42af0:	31cdc83a 	sub	r6,r6,r7
   42af4:	30c00317 	ldw	r3,12(r6)
   42af8:	31400217 	ldw	r5,8(r6)
   42afc:	11c5883a 	add	r2,r2,r7
   42b00:	28c00315 	stw	r3,12(r5)
   42b04:	19400215 	stw	r5,8(r3)
   42b08:	10c00054 	ori	r3,r2,1
   42b0c:	30c00115 	stw	r3,4(r6)
   42b10:	00c00134 	movhi	r3,4
   42b14:	18d79704 	addi	r3,r3,24156
   42b18:	18c00017 	ldw	r3,0(r3)
   42b1c:	21800215 	stw	r6,8(r4)
   42b20:	10ffc036 	bltu	r2,r3,42a24 <__alt_data_end+0xfffd0a24>
   42b24:	00800134 	movhi	r2,4
   42b28:	109a5604 	addi	r2,r2,26968
   42b2c:	11400017 	ldw	r5,0(r2)
   42b30:	8809883a 	mov	r4,r17
   42b34:	00428100 	call	42810 <_malloc_trim_r>
   42b38:	003fba06 	br	42a24 <__alt_data_end+0xfffd0a24>
   42b3c:	28c9883a 	add	r4,r5,r3
   42b40:	21000117 	ldw	r4,4(r4)
   42b44:	2100004c 	andi	r4,r4,1
   42b48:	2000391e 	bne	r4,zero,42c30 <_free_r+0x2fc>
   42b4c:	29c00217 	ldw	r7,8(r5)
   42b50:	29000317 	ldw	r4,12(r5)
   42b54:	1885883a 	add	r2,r3,r2
   42b58:	10c00054 	ori	r3,r2,1
   42b5c:	39000315 	stw	r4,12(r7)
   42b60:	21c00215 	stw	r7,8(r4)
   42b64:	30c00115 	stw	r3,4(r6)
   42b68:	308d883a 	add	r6,r6,r2
   42b6c:	30800015 	stw	r2,0(r6)
   42b70:	003fac06 	br	42a24 <__alt_data_end+0xfffd0a24>
   42b74:	00c00504 	movi	r3,20
   42b78:	19401536 	bltu	r3,r5,42bd0 <_free_r+0x29c>
   42b7c:	28c01704 	addi	r3,r5,92
   42b80:	18c7883a 	add	r3,r3,r3
   42b84:	294016c4 	addi	r5,r5,91
   42b88:	003fb406 	br	42a5c <__alt_data_end+0xfffd0a5c>
   42b8c:	280bd0ba 	srai	r5,r5,2
   42b90:	00c00044 	movi	r3,1
   42b94:	38800117 	ldw	r2,4(r7)
   42b98:	194a983a 	sll	r5,r3,r5
   42b9c:	2007883a 	mov	r3,r4
   42ba0:	2884b03a 	or	r2,r5,r2
   42ba4:	38800115 	stw	r2,4(r7)
   42ba8:	003fbb06 	br	42a98 <__alt_data_end+0xfffd0a98>
   42bac:	21800515 	stw	r6,20(r4)
   42bb0:	21800415 	stw	r6,16(r4)
   42bb4:	10c00054 	ori	r3,r2,1
   42bb8:	31c00315 	stw	r7,12(r6)
   42bbc:	31c00215 	stw	r7,8(r6)
   42bc0:	30c00115 	stw	r3,4(r6)
   42bc4:	308d883a 	add	r6,r6,r2
   42bc8:	30800015 	stw	r2,0(r6)
   42bcc:	003f9506 	br	42a24 <__alt_data_end+0xfffd0a24>
   42bd0:	00c01504 	movi	r3,84
   42bd4:	19400536 	bltu	r3,r5,42bec <_free_r+0x2b8>
   42bd8:	100ad33a 	srli	r5,r2,12
   42bdc:	28c01bc4 	addi	r3,r5,111
   42be0:	18c7883a 	add	r3,r3,r3
   42be4:	29401b84 	addi	r5,r5,110
   42be8:	003f9c06 	br	42a5c <__alt_data_end+0xfffd0a5c>
   42bec:	00c05504 	movi	r3,340
   42bf0:	19400536 	bltu	r3,r5,42c08 <_free_r+0x2d4>
   42bf4:	100ad3fa 	srli	r5,r2,15
   42bf8:	28c01e04 	addi	r3,r5,120
   42bfc:	18c7883a 	add	r3,r3,r3
   42c00:	29401dc4 	addi	r5,r5,119
   42c04:	003f9506 	br	42a5c <__alt_data_end+0xfffd0a5c>
   42c08:	00c15504 	movi	r3,1364
   42c0c:	19400536 	bltu	r3,r5,42c24 <_free_r+0x2f0>
   42c10:	100ad4ba 	srli	r5,r2,18
   42c14:	28c01f44 	addi	r3,r5,125
   42c18:	18c7883a 	add	r3,r3,r3
   42c1c:	29401f04 	addi	r5,r5,124
   42c20:	003f8e06 	br	42a5c <__alt_data_end+0xfffd0a5c>
   42c24:	00c03f84 	movi	r3,254
   42c28:	01401f84 	movi	r5,126
   42c2c:	003f8b06 	br	42a5c <__alt_data_end+0xfffd0a5c>
   42c30:	10c00054 	ori	r3,r2,1
   42c34:	30c00115 	stw	r3,4(r6)
   42c38:	308d883a 	add	r6,r6,r2
   42c3c:	30800015 	stw	r2,0(r6)
   42c40:	003f7806 	br	42a24 <__alt_data_end+0xfffd0a24>

00042c44 <_lseek_r>:
   42c44:	defffd04 	addi	sp,sp,-12
   42c48:	2805883a 	mov	r2,r5
   42c4c:	dc000015 	stw	r16,0(sp)
   42c50:	04000134 	movhi	r16,4
   42c54:	dc400115 	stw	r17,4(sp)
   42c58:	300b883a 	mov	r5,r6
   42c5c:	841a5704 	addi	r16,r16,26972
   42c60:	2023883a 	mov	r17,r4
   42c64:	380d883a 	mov	r6,r7
   42c68:	1009883a 	mov	r4,r2
   42c6c:	dfc00215 	stw	ra,8(sp)
   42c70:	80000015 	stw	zero,0(r16)
   42c74:	00435900 	call	43590 <lseek>
   42c78:	00ffffc4 	movi	r3,-1
   42c7c:	10c00526 	beq	r2,r3,42c94 <_lseek_r+0x50>
   42c80:	dfc00217 	ldw	ra,8(sp)
   42c84:	dc400117 	ldw	r17,4(sp)
   42c88:	dc000017 	ldw	r16,0(sp)
   42c8c:	dec00304 	addi	sp,sp,12
   42c90:	f800283a 	ret
   42c94:	80c00017 	ldw	r3,0(r16)
   42c98:	183ff926 	beq	r3,zero,42c80 <__alt_data_end+0xfffd0c80>
   42c9c:	88c00015 	stw	r3,0(r17)
   42ca0:	003ff706 	br	42c80 <__alt_data_end+0xfffd0c80>

00042ca4 <__smakebuf_r>:
   42ca4:	2880030b 	ldhu	r2,12(r5)
   42ca8:	10c0008c 	andi	r3,r2,2
   42cac:	1800411e 	bne	r3,zero,42db4 <__smakebuf_r+0x110>
   42cb0:	deffec04 	addi	sp,sp,-80
   42cb4:	dc000f15 	stw	r16,60(sp)
   42cb8:	2821883a 	mov	r16,r5
   42cbc:	2940038f 	ldh	r5,14(r5)
   42cc0:	dc401015 	stw	r17,64(sp)
   42cc4:	dfc01315 	stw	ra,76(sp)
   42cc8:	dcc01215 	stw	r19,72(sp)
   42ccc:	dc801115 	stw	r18,68(sp)
   42cd0:	2023883a 	mov	r17,r4
   42cd4:	28001c16 	blt	r5,zero,42d48 <__smakebuf_r+0xa4>
   42cd8:	d80d883a 	mov	r6,sp
   42cdc:	0042ec00 	call	42ec0 <_fstat_r>
   42ce0:	10001816 	blt	r2,zero,42d44 <__smakebuf_r+0xa0>
   42ce4:	d8800117 	ldw	r2,4(sp)
   42ce8:	00e00014 	movui	r3,32768
   42cec:	10bc000c 	andi	r2,r2,61440
   42cf0:	14c80020 	cmpeqi	r19,r2,8192
   42cf4:	10c03726 	beq	r2,r3,42dd4 <__smakebuf_r+0x130>
   42cf8:	80c0030b 	ldhu	r3,12(r16)
   42cfc:	18c20014 	ori	r3,r3,2048
   42d00:	80c0030d 	sth	r3,12(r16)
   42d04:	00c80004 	movi	r3,8192
   42d08:	10c0521e 	bne	r2,r3,42e54 <__smakebuf_r+0x1b0>
   42d0c:	8140038f 	ldh	r5,14(r16)
   42d10:	8809883a 	mov	r4,r17
   42d14:	0042f1c0 	call	42f1c <_isatty_r>
   42d18:	10004c26 	beq	r2,zero,42e4c <__smakebuf_r+0x1a8>
   42d1c:	8080030b 	ldhu	r2,12(r16)
   42d20:	80c010c4 	addi	r3,r16,67
   42d24:	80c00015 	stw	r3,0(r16)
   42d28:	10800054 	ori	r2,r2,1
   42d2c:	8080030d 	sth	r2,12(r16)
   42d30:	00800044 	movi	r2,1
   42d34:	80c00415 	stw	r3,16(r16)
   42d38:	80800515 	stw	r2,20(r16)
   42d3c:	04810004 	movi	r18,1024
   42d40:	00000706 	br	42d60 <__smakebuf_r+0xbc>
   42d44:	8080030b 	ldhu	r2,12(r16)
   42d48:	10c0200c 	andi	r3,r2,128
   42d4c:	18001f1e 	bne	r3,zero,42dcc <__smakebuf_r+0x128>
   42d50:	04810004 	movi	r18,1024
   42d54:	10820014 	ori	r2,r2,2048
   42d58:	8080030d 	sth	r2,12(r16)
   42d5c:	0027883a 	mov	r19,zero
   42d60:	900b883a 	mov	r5,r18
   42d64:	8809883a 	mov	r4,r17
   42d68:	0040eac0 	call	40eac <_malloc_r>
   42d6c:	10002c26 	beq	r2,zero,42e20 <__smakebuf_r+0x17c>
   42d70:	80c0030b 	ldhu	r3,12(r16)
   42d74:	01000134 	movhi	r4,4
   42d78:	21012d04 	addi	r4,r4,1204
   42d7c:	89000f15 	stw	r4,60(r17)
   42d80:	18c02014 	ori	r3,r3,128
   42d84:	80c0030d 	sth	r3,12(r16)
   42d88:	80800015 	stw	r2,0(r16)
   42d8c:	80800415 	stw	r2,16(r16)
   42d90:	84800515 	stw	r18,20(r16)
   42d94:	98001a1e 	bne	r19,zero,42e00 <__smakebuf_r+0x15c>
   42d98:	dfc01317 	ldw	ra,76(sp)
   42d9c:	dcc01217 	ldw	r19,72(sp)
   42da0:	dc801117 	ldw	r18,68(sp)
   42da4:	dc401017 	ldw	r17,64(sp)
   42da8:	dc000f17 	ldw	r16,60(sp)
   42dac:	dec01404 	addi	sp,sp,80
   42db0:	f800283a 	ret
   42db4:	288010c4 	addi	r2,r5,67
   42db8:	28800015 	stw	r2,0(r5)
   42dbc:	28800415 	stw	r2,16(r5)
   42dc0:	00800044 	movi	r2,1
   42dc4:	28800515 	stw	r2,20(r5)
   42dc8:	f800283a 	ret
   42dcc:	04801004 	movi	r18,64
   42dd0:	003fe006 	br	42d54 <__alt_data_end+0xfffd0d54>
   42dd4:	81000a17 	ldw	r4,40(r16)
   42dd8:	00c00134 	movhi	r3,4
   42ddc:	18c87e04 	addi	r3,r3,8696
   42de0:	20ffc51e 	bne	r4,r3,42cf8 <__alt_data_end+0xfffd0cf8>
   42de4:	8080030b 	ldhu	r2,12(r16)
   42de8:	04810004 	movi	r18,1024
   42dec:	84801315 	stw	r18,76(r16)
   42df0:	1484b03a 	or	r2,r2,r18
   42df4:	8080030d 	sth	r2,12(r16)
   42df8:	0027883a 	mov	r19,zero
   42dfc:	003fd806 	br	42d60 <__alt_data_end+0xfffd0d60>
   42e00:	8140038f 	ldh	r5,14(r16)
   42e04:	8809883a 	mov	r4,r17
   42e08:	0042f1c0 	call	42f1c <_isatty_r>
   42e0c:	103fe226 	beq	r2,zero,42d98 <__alt_data_end+0xfffd0d98>
   42e10:	8080030b 	ldhu	r2,12(r16)
   42e14:	10800054 	ori	r2,r2,1
   42e18:	8080030d 	sth	r2,12(r16)
   42e1c:	003fde06 	br	42d98 <__alt_data_end+0xfffd0d98>
   42e20:	8080030b 	ldhu	r2,12(r16)
   42e24:	10c0800c 	andi	r3,r2,512
   42e28:	183fdb1e 	bne	r3,zero,42d98 <__alt_data_end+0xfffd0d98>
   42e2c:	10800094 	ori	r2,r2,2
   42e30:	80c010c4 	addi	r3,r16,67
   42e34:	8080030d 	sth	r2,12(r16)
   42e38:	00800044 	movi	r2,1
   42e3c:	80c00015 	stw	r3,0(r16)
   42e40:	80c00415 	stw	r3,16(r16)
   42e44:	80800515 	stw	r2,20(r16)
   42e48:	003fd306 	br	42d98 <__alt_data_end+0xfffd0d98>
   42e4c:	04810004 	movi	r18,1024
   42e50:	003fc306 	br	42d60 <__alt_data_end+0xfffd0d60>
   42e54:	0027883a 	mov	r19,zero
   42e58:	04810004 	movi	r18,1024
   42e5c:	003fc006 	br	42d60 <__alt_data_end+0xfffd0d60>

00042e60 <_read_r>:
   42e60:	defffd04 	addi	sp,sp,-12
   42e64:	2805883a 	mov	r2,r5
   42e68:	dc000015 	stw	r16,0(sp)
   42e6c:	04000134 	movhi	r16,4
   42e70:	dc400115 	stw	r17,4(sp)
   42e74:	300b883a 	mov	r5,r6
   42e78:	841a5704 	addi	r16,r16,26972
   42e7c:	2023883a 	mov	r17,r4
   42e80:	380d883a 	mov	r6,r7
   42e84:	1009883a 	mov	r4,r2
   42e88:	dfc00215 	stw	ra,8(sp)
   42e8c:	80000015 	stw	zero,0(r16)
   42e90:	004376c0 	call	4376c <read>
   42e94:	00ffffc4 	movi	r3,-1
   42e98:	10c00526 	beq	r2,r3,42eb0 <_read_r+0x50>
   42e9c:	dfc00217 	ldw	ra,8(sp)
   42ea0:	dc400117 	ldw	r17,4(sp)
   42ea4:	dc000017 	ldw	r16,0(sp)
   42ea8:	dec00304 	addi	sp,sp,12
   42eac:	f800283a 	ret
   42eb0:	80c00017 	ldw	r3,0(r16)
   42eb4:	183ff926 	beq	r3,zero,42e9c <__alt_data_end+0xfffd0e9c>
   42eb8:	88c00015 	stw	r3,0(r17)
   42ebc:	003ff706 	br	42e9c <__alt_data_end+0xfffd0e9c>

00042ec0 <_fstat_r>:
   42ec0:	defffd04 	addi	sp,sp,-12
   42ec4:	2805883a 	mov	r2,r5
   42ec8:	dc000015 	stw	r16,0(sp)
   42ecc:	04000134 	movhi	r16,4
   42ed0:	dc400115 	stw	r17,4(sp)
   42ed4:	841a5704 	addi	r16,r16,26972
   42ed8:	2023883a 	mov	r17,r4
   42edc:	300b883a 	mov	r5,r6
   42ee0:	1009883a 	mov	r4,r2
   42ee4:	dfc00215 	stw	ra,8(sp)
   42ee8:	80000015 	stw	zero,0(r16)
   42eec:	00432c80 	call	432c8 <fstat>
   42ef0:	00ffffc4 	movi	r3,-1
   42ef4:	10c00526 	beq	r2,r3,42f0c <_fstat_r+0x4c>
   42ef8:	dfc00217 	ldw	ra,8(sp)
   42efc:	dc400117 	ldw	r17,4(sp)
   42f00:	dc000017 	ldw	r16,0(sp)
   42f04:	dec00304 	addi	sp,sp,12
   42f08:	f800283a 	ret
   42f0c:	80c00017 	ldw	r3,0(r16)
   42f10:	183ff926 	beq	r3,zero,42ef8 <__alt_data_end+0xfffd0ef8>
   42f14:	88c00015 	stw	r3,0(r17)
   42f18:	003ff706 	br	42ef8 <__alt_data_end+0xfffd0ef8>

00042f1c <_isatty_r>:
   42f1c:	defffd04 	addi	sp,sp,-12
   42f20:	dc000015 	stw	r16,0(sp)
   42f24:	04000134 	movhi	r16,4
   42f28:	dc400115 	stw	r17,4(sp)
   42f2c:	841a5704 	addi	r16,r16,26972
   42f30:	2023883a 	mov	r17,r4
   42f34:	2809883a 	mov	r4,r5
   42f38:	dfc00215 	stw	ra,8(sp)
   42f3c:	80000015 	stw	zero,0(r16)
   42f40:	00433bc0 	call	433bc <isatty>
   42f44:	00ffffc4 	movi	r3,-1
   42f48:	10c00526 	beq	r2,r3,42f60 <_isatty_r+0x44>
   42f4c:	dfc00217 	ldw	ra,8(sp)
   42f50:	dc400117 	ldw	r17,4(sp)
   42f54:	dc000017 	ldw	r16,0(sp)
   42f58:	dec00304 	addi	sp,sp,12
   42f5c:	f800283a 	ret
   42f60:	80c00017 	ldw	r3,0(r16)
   42f64:	183ff926 	beq	r3,zero,42f4c <__alt_data_end+0xfffd0f4c>
   42f68:	88c00015 	stw	r3,0(r17)
   42f6c:	003ff706 	br	42f4c <__alt_data_end+0xfffd0f4c>

00042f70 <__divsi3>:
   42f70:	20001b16 	blt	r4,zero,42fe0 <__divsi3+0x70>
   42f74:	000f883a 	mov	r7,zero
   42f78:	28001616 	blt	r5,zero,42fd4 <__divsi3+0x64>
   42f7c:	200d883a 	mov	r6,r4
   42f80:	29001a2e 	bgeu	r5,r4,42fec <__divsi3+0x7c>
   42f84:	00800804 	movi	r2,32
   42f88:	00c00044 	movi	r3,1
   42f8c:	00000106 	br	42f94 <__divsi3+0x24>
   42f90:	10000d26 	beq	r2,zero,42fc8 <__divsi3+0x58>
   42f94:	294b883a 	add	r5,r5,r5
   42f98:	10bfffc4 	addi	r2,r2,-1
   42f9c:	18c7883a 	add	r3,r3,r3
   42fa0:	293ffb36 	bltu	r5,r4,42f90 <__alt_data_end+0xfffd0f90>
   42fa4:	0005883a 	mov	r2,zero
   42fa8:	18000726 	beq	r3,zero,42fc8 <__divsi3+0x58>
   42fac:	0005883a 	mov	r2,zero
   42fb0:	31400236 	bltu	r6,r5,42fbc <__divsi3+0x4c>
   42fb4:	314dc83a 	sub	r6,r6,r5
   42fb8:	10c4b03a 	or	r2,r2,r3
   42fbc:	1806d07a 	srli	r3,r3,1
   42fc0:	280ad07a 	srli	r5,r5,1
   42fc4:	183ffa1e 	bne	r3,zero,42fb0 <__alt_data_end+0xfffd0fb0>
   42fc8:	38000126 	beq	r7,zero,42fd0 <__divsi3+0x60>
   42fcc:	0085c83a 	sub	r2,zero,r2
   42fd0:	f800283a 	ret
   42fd4:	014bc83a 	sub	r5,zero,r5
   42fd8:	39c0005c 	xori	r7,r7,1
   42fdc:	003fe706 	br	42f7c <__alt_data_end+0xfffd0f7c>
   42fe0:	0109c83a 	sub	r4,zero,r4
   42fe4:	01c00044 	movi	r7,1
   42fe8:	003fe306 	br	42f78 <__alt_data_end+0xfffd0f78>
   42fec:	00c00044 	movi	r3,1
   42ff0:	003fee06 	br	42fac <__alt_data_end+0xfffd0fac>

00042ff4 <__modsi3>:
   42ff4:	20001716 	blt	r4,zero,43054 <__modsi3+0x60>
   42ff8:	000f883a 	mov	r7,zero
   42ffc:	2005883a 	mov	r2,r4
   43000:	28001216 	blt	r5,zero,4304c <__modsi3+0x58>
   43004:	2900162e 	bgeu	r5,r4,43060 <__modsi3+0x6c>
   43008:	01800804 	movi	r6,32
   4300c:	00c00044 	movi	r3,1
   43010:	00000106 	br	43018 <__modsi3+0x24>
   43014:	30000a26 	beq	r6,zero,43040 <__modsi3+0x4c>
   43018:	294b883a 	add	r5,r5,r5
   4301c:	31bfffc4 	addi	r6,r6,-1
   43020:	18c7883a 	add	r3,r3,r3
   43024:	293ffb36 	bltu	r5,r4,43014 <__alt_data_end+0xfffd1014>
   43028:	18000526 	beq	r3,zero,43040 <__modsi3+0x4c>
   4302c:	1806d07a 	srli	r3,r3,1
   43030:	11400136 	bltu	r2,r5,43038 <__modsi3+0x44>
   43034:	1145c83a 	sub	r2,r2,r5
   43038:	280ad07a 	srli	r5,r5,1
   4303c:	183ffb1e 	bne	r3,zero,4302c <__alt_data_end+0xfffd102c>
   43040:	38000126 	beq	r7,zero,43048 <__modsi3+0x54>
   43044:	0085c83a 	sub	r2,zero,r2
   43048:	f800283a 	ret
   4304c:	014bc83a 	sub	r5,zero,r5
   43050:	003fec06 	br	43004 <__alt_data_end+0xfffd1004>
   43054:	0109c83a 	sub	r4,zero,r4
   43058:	01c00044 	movi	r7,1
   4305c:	003fe706 	br	42ffc <__alt_data_end+0xfffd0ffc>
   43060:	00c00044 	movi	r3,1
   43064:	003ff106 	br	4302c <__alt_data_end+0xfffd102c>

00043068 <__udivsi3>:
   43068:	200d883a 	mov	r6,r4
   4306c:	2900152e 	bgeu	r5,r4,430c4 <__udivsi3+0x5c>
   43070:	28001416 	blt	r5,zero,430c4 <__udivsi3+0x5c>
   43074:	00800804 	movi	r2,32
   43078:	00c00044 	movi	r3,1
   4307c:	00000206 	br	43088 <__udivsi3+0x20>
   43080:	10000e26 	beq	r2,zero,430bc <__udivsi3+0x54>
   43084:	28000516 	blt	r5,zero,4309c <__udivsi3+0x34>
   43088:	294b883a 	add	r5,r5,r5
   4308c:	10bfffc4 	addi	r2,r2,-1
   43090:	18c7883a 	add	r3,r3,r3
   43094:	293ffa36 	bltu	r5,r4,43080 <__alt_data_end+0xfffd1080>
   43098:	18000826 	beq	r3,zero,430bc <__udivsi3+0x54>
   4309c:	0005883a 	mov	r2,zero
   430a0:	31400236 	bltu	r6,r5,430ac <__udivsi3+0x44>
   430a4:	314dc83a 	sub	r6,r6,r5
   430a8:	10c4b03a 	or	r2,r2,r3
   430ac:	1806d07a 	srli	r3,r3,1
   430b0:	280ad07a 	srli	r5,r5,1
   430b4:	183ffa1e 	bne	r3,zero,430a0 <__alt_data_end+0xfffd10a0>
   430b8:	f800283a 	ret
   430bc:	0005883a 	mov	r2,zero
   430c0:	f800283a 	ret
   430c4:	00c00044 	movi	r3,1
   430c8:	003ff406 	br	4309c <__alt_data_end+0xfffd109c>

000430cc <__umodsi3>:
   430cc:	2005883a 	mov	r2,r4
   430d0:	2900122e 	bgeu	r5,r4,4311c <__umodsi3+0x50>
   430d4:	28001116 	blt	r5,zero,4311c <__umodsi3+0x50>
   430d8:	01800804 	movi	r6,32
   430dc:	00c00044 	movi	r3,1
   430e0:	00000206 	br	430ec <__umodsi3+0x20>
   430e4:	30000c26 	beq	r6,zero,43118 <__umodsi3+0x4c>
   430e8:	28000516 	blt	r5,zero,43100 <__umodsi3+0x34>
   430ec:	294b883a 	add	r5,r5,r5
   430f0:	31bfffc4 	addi	r6,r6,-1
   430f4:	18c7883a 	add	r3,r3,r3
   430f8:	293ffa36 	bltu	r5,r4,430e4 <__alt_data_end+0xfffd10e4>
   430fc:	18000626 	beq	r3,zero,43118 <__umodsi3+0x4c>
   43100:	1806d07a 	srli	r3,r3,1
   43104:	11400136 	bltu	r2,r5,4310c <__umodsi3+0x40>
   43108:	1145c83a 	sub	r2,r2,r5
   4310c:	280ad07a 	srli	r5,r5,1
   43110:	183ffb1e 	bne	r3,zero,43100 <__alt_data_end+0xfffd1100>
   43114:	f800283a 	ret
   43118:	f800283a 	ret
   4311c:	00c00044 	movi	r3,1
   43120:	003ff706 	br	43100 <__alt_data_end+0xfffd1100>

00043124 <__mulsi3>:
   43124:	0005883a 	mov	r2,zero
   43128:	20000726 	beq	r4,zero,43148 <__mulsi3+0x24>
   4312c:	20c0004c 	andi	r3,r4,1
   43130:	2008d07a 	srli	r4,r4,1
   43134:	18000126 	beq	r3,zero,4313c <__mulsi3+0x18>
   43138:	1145883a 	add	r2,r2,r5
   4313c:	294b883a 	add	r5,r5,r5
   43140:	203ffa1e 	bne	r4,zero,4312c <__alt_data_end+0xfffd112c>
   43144:	f800283a 	ret
   43148:	f800283a 	ret

0004314c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4314c:	defffe04 	addi	sp,sp,-8
   43150:	dfc00115 	stw	ra,4(sp)
   43154:	df000015 	stw	fp,0(sp)
   43158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4315c:	d0a00917 	ldw	r2,-32732(gp)
   43160:	10000326 	beq	r2,zero,43170 <alt_get_errno+0x24>
   43164:	d0a00917 	ldw	r2,-32732(gp)
   43168:	103ee83a 	callr	r2
   4316c:	00000106 	br	43174 <alt_get_errno+0x28>
   43170:	d0a2c304 	addi	r2,gp,-29940
}
   43174:	e037883a 	mov	sp,fp
   43178:	dfc00117 	ldw	ra,4(sp)
   4317c:	df000017 	ldw	fp,0(sp)
   43180:	dec00204 	addi	sp,sp,8
   43184:	f800283a 	ret

00043188 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43188:	defffb04 	addi	sp,sp,-20
   4318c:	dfc00415 	stw	ra,16(sp)
   43190:	df000315 	stw	fp,12(sp)
   43194:	df000304 	addi	fp,sp,12
   43198:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4319c:	e0bfff17 	ldw	r2,-4(fp)
   431a0:	10000816 	blt	r2,zero,431c4 <close+0x3c>
   431a4:	01400304 	movi	r5,12
   431a8:	e13fff17 	ldw	r4,-4(fp)
   431ac:	00431240 	call	43124 <__mulsi3>
   431b0:	1007883a 	mov	r3,r2
   431b4:	00800134 	movhi	r2,4
   431b8:	10970304 	addi	r2,r2,23564
   431bc:	1885883a 	add	r2,r3,r2
   431c0:	00000106 	br	431c8 <close+0x40>
   431c4:	0005883a 	mov	r2,zero
   431c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   431cc:	e0bffd17 	ldw	r2,-12(fp)
   431d0:	10001926 	beq	r2,zero,43238 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   431d4:	e0bffd17 	ldw	r2,-12(fp)
   431d8:	10800017 	ldw	r2,0(r2)
   431dc:	10800417 	ldw	r2,16(r2)
   431e0:	10000626 	beq	r2,zero,431fc <close+0x74>
   431e4:	e0bffd17 	ldw	r2,-12(fp)
   431e8:	10800017 	ldw	r2,0(r2)
   431ec:	10800417 	ldw	r2,16(r2)
   431f0:	e13ffd17 	ldw	r4,-12(fp)
   431f4:	103ee83a 	callr	r2
   431f8:	00000106 	br	43200 <close+0x78>
   431fc:	0005883a 	mov	r2,zero
   43200:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43204:	e13fff17 	ldw	r4,-4(fp)
   43208:	00438700 	call	43870 <alt_release_fd>
    if (rval < 0)
   4320c:	e0bffe17 	ldw	r2,-8(fp)
   43210:	1000070e 	bge	r2,zero,43230 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43214:	004314c0 	call	4314c <alt_get_errno>
   43218:	1007883a 	mov	r3,r2
   4321c:	e0bffe17 	ldw	r2,-8(fp)
   43220:	0085c83a 	sub	r2,zero,r2
   43224:	18800015 	stw	r2,0(r3)
      return -1;
   43228:	00bfffc4 	movi	r2,-1
   4322c:	00000706 	br	4324c <close+0xc4>
    }
    return 0;
   43230:	0005883a 	mov	r2,zero
   43234:	00000506 	br	4324c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43238:	004314c0 	call	4314c <alt_get_errno>
   4323c:	1007883a 	mov	r3,r2
   43240:	00801444 	movi	r2,81
   43244:	18800015 	stw	r2,0(r3)
    return -1;
   43248:	00bfffc4 	movi	r2,-1
  }
}
   4324c:	e037883a 	mov	sp,fp
   43250:	dfc00117 	ldw	ra,4(sp)
   43254:	df000017 	ldw	fp,0(sp)
   43258:	dec00204 	addi	sp,sp,8
   4325c:	f800283a 	ret

00043260 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43260:	defffc04 	addi	sp,sp,-16
   43264:	df000315 	stw	fp,12(sp)
   43268:	df000304 	addi	fp,sp,12
   4326c:	e13ffd15 	stw	r4,-12(fp)
   43270:	e17ffe15 	stw	r5,-8(fp)
   43274:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43278:	e0bfff17 	ldw	r2,-4(fp)
}
   4327c:	e037883a 	mov	sp,fp
   43280:	df000017 	ldw	fp,0(sp)
   43284:	dec00104 	addi	sp,sp,4
   43288:	f800283a 	ret

0004328c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4328c:	defffe04 	addi	sp,sp,-8
   43290:	dfc00115 	stw	ra,4(sp)
   43294:	df000015 	stw	fp,0(sp)
   43298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4329c:	d0a00917 	ldw	r2,-32732(gp)
   432a0:	10000326 	beq	r2,zero,432b0 <alt_get_errno+0x24>
   432a4:	d0a00917 	ldw	r2,-32732(gp)
   432a8:	103ee83a 	callr	r2
   432ac:	00000106 	br	432b4 <alt_get_errno+0x28>
   432b0:	d0a2c304 	addi	r2,gp,-29940
}
   432b4:	e037883a 	mov	sp,fp
   432b8:	dfc00117 	ldw	ra,4(sp)
   432bc:	df000017 	ldw	fp,0(sp)
   432c0:	dec00204 	addi	sp,sp,8
   432c4:	f800283a 	ret

000432c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   432c8:	defffb04 	addi	sp,sp,-20
   432cc:	dfc00415 	stw	ra,16(sp)
   432d0:	df000315 	stw	fp,12(sp)
   432d4:	df000304 	addi	fp,sp,12
   432d8:	e13ffe15 	stw	r4,-8(fp)
   432dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   432e0:	e0bffe17 	ldw	r2,-8(fp)
   432e4:	10000816 	blt	r2,zero,43308 <fstat+0x40>
   432e8:	01400304 	movi	r5,12
   432ec:	e13ffe17 	ldw	r4,-8(fp)
   432f0:	00431240 	call	43124 <__mulsi3>
   432f4:	1007883a 	mov	r3,r2
   432f8:	00800134 	movhi	r2,4
   432fc:	10970304 	addi	r2,r2,23564
   43300:	1885883a 	add	r2,r3,r2
   43304:	00000106 	br	4330c <fstat+0x44>
   43308:	0005883a 	mov	r2,zero
   4330c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43310:	e0bffd17 	ldw	r2,-12(fp)
   43314:	10001026 	beq	r2,zero,43358 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43318:	e0bffd17 	ldw	r2,-12(fp)
   4331c:	10800017 	ldw	r2,0(r2)
   43320:	10800817 	ldw	r2,32(r2)
   43324:	10000726 	beq	r2,zero,43344 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   43328:	e0bffd17 	ldw	r2,-12(fp)
   4332c:	10800017 	ldw	r2,0(r2)
   43330:	10800817 	ldw	r2,32(r2)
   43334:	e17fff17 	ldw	r5,-4(fp)
   43338:	e13ffd17 	ldw	r4,-12(fp)
   4333c:	103ee83a 	callr	r2
   43340:	00000a06 	br	4336c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43344:	e0bfff17 	ldw	r2,-4(fp)
   43348:	00c80004 	movi	r3,8192
   4334c:	10c00115 	stw	r3,4(r2)
      return 0;
   43350:	0005883a 	mov	r2,zero
   43354:	00000506 	br	4336c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43358:	004328c0 	call	4328c <alt_get_errno>
   4335c:	1007883a 	mov	r3,r2
   43360:	00801444 	movi	r2,81
   43364:	18800015 	stw	r2,0(r3)
    return -1;
   43368:	00bfffc4 	movi	r2,-1
  }
}
   4336c:	e037883a 	mov	sp,fp
   43370:	dfc00117 	ldw	ra,4(sp)
   43374:	df000017 	ldw	fp,0(sp)
   43378:	dec00204 	addi	sp,sp,8
   4337c:	f800283a 	ret

00043380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43380:	defffe04 	addi	sp,sp,-8
   43384:	dfc00115 	stw	ra,4(sp)
   43388:	df000015 	stw	fp,0(sp)
   4338c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43390:	d0a00917 	ldw	r2,-32732(gp)
   43394:	10000326 	beq	r2,zero,433a4 <alt_get_errno+0x24>
   43398:	d0a00917 	ldw	r2,-32732(gp)
   4339c:	103ee83a 	callr	r2
   433a0:	00000106 	br	433a8 <alt_get_errno+0x28>
   433a4:	d0a2c304 	addi	r2,gp,-29940
}
   433a8:	e037883a 	mov	sp,fp
   433ac:	dfc00117 	ldw	ra,4(sp)
   433b0:	df000017 	ldw	fp,0(sp)
   433b4:	dec00204 	addi	sp,sp,8
   433b8:	f800283a 	ret

000433bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   433bc:	deffed04 	addi	sp,sp,-76
   433c0:	dfc01215 	stw	ra,72(sp)
   433c4:	df001115 	stw	fp,68(sp)
   433c8:	df001104 	addi	fp,sp,68
   433cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   433d0:	e0bfff17 	ldw	r2,-4(fp)
   433d4:	10000816 	blt	r2,zero,433f8 <isatty+0x3c>
   433d8:	01400304 	movi	r5,12
   433dc:	e13fff17 	ldw	r4,-4(fp)
   433e0:	00431240 	call	43124 <__mulsi3>
   433e4:	1007883a 	mov	r3,r2
   433e8:	00800134 	movhi	r2,4
   433ec:	10970304 	addi	r2,r2,23564
   433f0:	1885883a 	add	r2,r3,r2
   433f4:	00000106 	br	433fc <isatty+0x40>
   433f8:	0005883a 	mov	r2,zero
   433fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43400:	e0bfef17 	ldw	r2,-68(fp)
   43404:	10000e26 	beq	r2,zero,43440 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43408:	e0bfef17 	ldw	r2,-68(fp)
   4340c:	10800017 	ldw	r2,0(r2)
   43410:	10800817 	ldw	r2,32(r2)
   43414:	1000021e 	bne	r2,zero,43420 <isatty+0x64>
    {
      return 1;
   43418:	00800044 	movi	r2,1
   4341c:	00000d06 	br	43454 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43420:	e0bff004 	addi	r2,fp,-64
   43424:	100b883a 	mov	r5,r2
   43428:	e13fff17 	ldw	r4,-4(fp)
   4342c:	00432c80 	call	432c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43430:	e0bff117 	ldw	r2,-60(fp)
   43434:	10880020 	cmpeqi	r2,r2,8192
   43438:	10803fcc 	andi	r2,r2,255
   4343c:	00000506 	br	43454 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43440:	00433800 	call	43380 <alt_get_errno>
   43444:	1007883a 	mov	r3,r2
   43448:	00801444 	movi	r2,81
   4344c:	18800015 	stw	r2,0(r3)
    return 0;
   43450:	0005883a 	mov	r2,zero
  }
}
   43454:	e037883a 	mov	sp,fp
   43458:	dfc00117 	ldw	ra,4(sp)
   4345c:	df000017 	ldw	fp,0(sp)
   43460:	dec00204 	addi	sp,sp,8
   43464:	f800283a 	ret

00043468 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43468:	defffc04 	addi	sp,sp,-16
   4346c:	df000315 	stw	fp,12(sp)
   43470:	df000304 	addi	fp,sp,12
   43474:	e13ffd15 	stw	r4,-12(fp)
   43478:	e17ffe15 	stw	r5,-8(fp)
   4347c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   43480:	e0fffe17 	ldw	r3,-8(fp)
   43484:	e0bffd17 	ldw	r2,-12(fp)
   43488:	18800c26 	beq	r3,r2,434bc <alt_load_section+0x54>
  {
    while( to != end )
   4348c:	00000806 	br	434b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   43490:	e0bffe17 	ldw	r2,-8(fp)
   43494:	10c00104 	addi	r3,r2,4
   43498:	e0fffe15 	stw	r3,-8(fp)
   4349c:	e0fffd17 	ldw	r3,-12(fp)
   434a0:	19000104 	addi	r4,r3,4
   434a4:	e13ffd15 	stw	r4,-12(fp)
   434a8:	18c00017 	ldw	r3,0(r3)
   434ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   434b0:	e0fffe17 	ldw	r3,-8(fp)
   434b4:	e0bfff17 	ldw	r2,-4(fp)
   434b8:	18bff51e 	bne	r3,r2,43490 <__alt_data_end+0xfffd1490>
    {
      *to++ = *from++;
    }
  }
}
   434bc:	0001883a 	nop
   434c0:	e037883a 	mov	sp,fp
   434c4:	df000017 	ldw	fp,0(sp)
   434c8:	dec00104 	addi	sp,sp,4
   434cc:	f800283a 	ret

000434d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   434d0:	defffe04 	addi	sp,sp,-8
   434d4:	dfc00115 	stw	ra,4(sp)
   434d8:	df000015 	stw	fp,0(sp)
   434dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   434e0:	01800134 	movhi	r6,4
   434e4:	3197a004 	addi	r6,r6,24192
   434e8:	01400134 	movhi	r5,4
   434ec:	2954ee04 	addi	r5,r5,21432
   434f0:	01000134 	movhi	r4,4
   434f4:	2117a004 	addi	r4,r4,24192
   434f8:	00434680 	call	43468 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   434fc:	01800134 	movhi	r6,4
   43500:	31808c04 	addi	r6,r6,560
   43504:	01400134 	movhi	r5,4
   43508:	29400804 	addi	r5,r5,32
   4350c:	01000134 	movhi	r4,4
   43510:	21000804 	addi	r4,r4,32
   43514:	00434680 	call	43468 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43518:	01800134 	movhi	r6,4
   4351c:	3194ee04 	addi	r6,r6,21432
   43520:	01400134 	movhi	r5,4
   43524:	2954e004 	addi	r5,r5,21376
   43528:	01000134 	movhi	r4,4
   4352c:	2114e004 	addi	r4,r4,21376
   43530:	00434680 	call	43468 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43534:	004446c0 	call	4446c <alt_dcache_flush_all>
  alt_icache_flush_all();
   43538:	004462c0 	call	4462c <alt_icache_flush_all>
}
   4353c:	0001883a 	nop
   43540:	e037883a 	mov	sp,fp
   43544:	dfc00117 	ldw	ra,4(sp)
   43548:	df000017 	ldw	fp,0(sp)
   4354c:	dec00204 	addi	sp,sp,8
   43550:	f800283a 	ret

00043554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43554:	defffe04 	addi	sp,sp,-8
   43558:	dfc00115 	stw	ra,4(sp)
   4355c:	df000015 	stw	fp,0(sp)
   43560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43564:	d0a00917 	ldw	r2,-32732(gp)
   43568:	10000326 	beq	r2,zero,43578 <alt_get_errno+0x24>
   4356c:	d0a00917 	ldw	r2,-32732(gp)
   43570:	103ee83a 	callr	r2
   43574:	00000106 	br	4357c <alt_get_errno+0x28>
   43578:	d0a2c304 	addi	r2,gp,-29940
}
   4357c:	e037883a 	mov	sp,fp
   43580:	dfc00117 	ldw	ra,4(sp)
   43584:	df000017 	ldw	fp,0(sp)
   43588:	dec00204 	addi	sp,sp,8
   4358c:	f800283a 	ret

00043590 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43590:	defff904 	addi	sp,sp,-28
   43594:	dfc00615 	stw	ra,24(sp)
   43598:	df000515 	stw	fp,20(sp)
   4359c:	df000504 	addi	fp,sp,20
   435a0:	e13ffd15 	stw	r4,-12(fp)
   435a4:	e17ffe15 	stw	r5,-8(fp)
   435a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   435ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   435b0:	e0bffd17 	ldw	r2,-12(fp)
   435b4:	10000816 	blt	r2,zero,435d8 <lseek+0x48>
   435b8:	01400304 	movi	r5,12
   435bc:	e13ffd17 	ldw	r4,-12(fp)
   435c0:	00431240 	call	43124 <__mulsi3>
   435c4:	1007883a 	mov	r3,r2
   435c8:	00800134 	movhi	r2,4
   435cc:	10970304 	addi	r2,r2,23564
   435d0:	1885883a 	add	r2,r3,r2
   435d4:	00000106 	br	435dc <lseek+0x4c>
   435d8:	0005883a 	mov	r2,zero
   435dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   435e0:	e0bffc17 	ldw	r2,-16(fp)
   435e4:	10001026 	beq	r2,zero,43628 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   435e8:	e0bffc17 	ldw	r2,-16(fp)
   435ec:	10800017 	ldw	r2,0(r2)
   435f0:	10800717 	ldw	r2,28(r2)
   435f4:	10000926 	beq	r2,zero,4361c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   435f8:	e0bffc17 	ldw	r2,-16(fp)
   435fc:	10800017 	ldw	r2,0(r2)
   43600:	10800717 	ldw	r2,28(r2)
   43604:	e1bfff17 	ldw	r6,-4(fp)
   43608:	e17ffe17 	ldw	r5,-8(fp)
   4360c:	e13ffc17 	ldw	r4,-16(fp)
   43610:	103ee83a 	callr	r2
   43614:	e0bffb15 	stw	r2,-20(fp)
   43618:	00000506 	br	43630 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4361c:	00bfde84 	movi	r2,-134
   43620:	e0bffb15 	stw	r2,-20(fp)
   43624:	00000206 	br	43630 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43628:	00bfebc4 	movi	r2,-81
   4362c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43630:	e0bffb17 	ldw	r2,-20(fp)
   43634:	1000070e 	bge	r2,zero,43654 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43638:	00435540 	call	43554 <alt_get_errno>
   4363c:	1007883a 	mov	r3,r2
   43640:	e0bffb17 	ldw	r2,-20(fp)
   43644:	0085c83a 	sub	r2,zero,r2
   43648:	18800015 	stw	r2,0(r3)
    rc = -1;
   4364c:	00bfffc4 	movi	r2,-1
   43650:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43654:	e0bffb17 	ldw	r2,-20(fp)
}
   43658:	e037883a 	mov	sp,fp
   4365c:	dfc00117 	ldw	ra,4(sp)
   43660:	df000017 	ldw	fp,0(sp)
   43664:	dec00204 	addi	sp,sp,8
   43668:	f800283a 	ret

0004366c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4366c:	defffd04 	addi	sp,sp,-12
   43670:	dfc00215 	stw	ra,8(sp)
   43674:	df000115 	stw	fp,4(sp)
   43678:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4367c:	0009883a 	mov	r4,zero
   43680:	0043b140 	call	43b14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43684:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43688:	0043b4c0 	call	43b4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4368c:	01800134 	movhi	r6,4
   43690:	3194e804 	addi	r6,r6,21408
   43694:	01400134 	movhi	r5,4
   43698:	2954e804 	addi	r5,r5,21408
   4369c:	01000134 	movhi	r4,4
   436a0:	2114e804 	addi	r4,r4,21408
   436a4:	00449d00 	call	449d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   436a8:	004456c0 	call	4456c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   436ac:	01000134 	movhi	r4,4
   436b0:	21117304 	addi	r4,r4,17868
   436b4:	0044fec0 	call	44fec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   436b8:	d0a2c417 	ldw	r2,-29936(gp)
   436bc:	d0e2c517 	ldw	r3,-29932(gp)
   436c0:	d122c617 	ldw	r4,-29928(gp)
   436c4:	200d883a 	mov	r6,r4
   436c8:	180b883a 	mov	r5,r3
   436cc:	1009883a 	mov	r4,r2
   436d0:	00402d00 	call	402d0 <main>
   436d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   436d8:	01000044 	movi	r4,1
   436dc:	00431880 	call	43188 <close>
  exit (result);
   436e0:	e13fff17 	ldw	r4,-4(fp)
   436e4:	00450000 	call	45000 <exit>

000436e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   436e8:	defffe04 	addi	sp,sp,-8
   436ec:	df000115 	stw	fp,4(sp)
   436f0:	df000104 	addi	fp,sp,4
   436f4:	e13fff15 	stw	r4,-4(fp)
}
   436f8:	0001883a 	nop
   436fc:	e037883a 	mov	sp,fp
   43700:	df000017 	ldw	fp,0(sp)
   43704:	dec00104 	addi	sp,sp,4
   43708:	f800283a 	ret

0004370c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4370c:	defffe04 	addi	sp,sp,-8
   43710:	df000115 	stw	fp,4(sp)
   43714:	df000104 	addi	fp,sp,4
   43718:	e13fff15 	stw	r4,-4(fp)
}
   4371c:	0001883a 	nop
   43720:	e037883a 	mov	sp,fp
   43724:	df000017 	ldw	fp,0(sp)
   43728:	dec00104 	addi	sp,sp,4
   4372c:	f800283a 	ret

00043730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43730:	defffe04 	addi	sp,sp,-8
   43734:	dfc00115 	stw	ra,4(sp)
   43738:	df000015 	stw	fp,0(sp)
   4373c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43740:	d0a00917 	ldw	r2,-32732(gp)
   43744:	10000326 	beq	r2,zero,43754 <alt_get_errno+0x24>
   43748:	d0a00917 	ldw	r2,-32732(gp)
   4374c:	103ee83a 	callr	r2
   43750:	00000106 	br	43758 <alt_get_errno+0x28>
   43754:	d0a2c304 	addi	r2,gp,-29940
}
   43758:	e037883a 	mov	sp,fp
   4375c:	dfc00117 	ldw	ra,4(sp)
   43760:	df000017 	ldw	fp,0(sp)
   43764:	dec00204 	addi	sp,sp,8
   43768:	f800283a 	ret

0004376c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4376c:	defff904 	addi	sp,sp,-28
   43770:	dfc00615 	stw	ra,24(sp)
   43774:	df000515 	stw	fp,20(sp)
   43778:	df000504 	addi	fp,sp,20
   4377c:	e13ffd15 	stw	r4,-12(fp)
   43780:	e17ffe15 	stw	r5,-8(fp)
   43784:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43788:	e0bffd17 	ldw	r2,-12(fp)
   4378c:	10000816 	blt	r2,zero,437b0 <read+0x44>
   43790:	01400304 	movi	r5,12
   43794:	e13ffd17 	ldw	r4,-12(fp)
   43798:	00431240 	call	43124 <__mulsi3>
   4379c:	1007883a 	mov	r3,r2
   437a0:	00800134 	movhi	r2,4
   437a4:	10970304 	addi	r2,r2,23564
   437a8:	1885883a 	add	r2,r3,r2
   437ac:	00000106 	br	437b4 <read+0x48>
   437b0:	0005883a 	mov	r2,zero
   437b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   437b8:	e0bffb17 	ldw	r2,-20(fp)
   437bc:	10002226 	beq	r2,zero,43848 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   437c0:	e0bffb17 	ldw	r2,-20(fp)
   437c4:	10800217 	ldw	r2,8(r2)
   437c8:	108000cc 	andi	r2,r2,3
   437cc:	10800060 	cmpeqi	r2,r2,1
   437d0:	1000181e 	bne	r2,zero,43834 <read+0xc8>
        (fd->dev->read))
   437d4:	e0bffb17 	ldw	r2,-20(fp)
   437d8:	10800017 	ldw	r2,0(r2)
   437dc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   437e0:	10001426 	beq	r2,zero,43834 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   437e4:	e0bffb17 	ldw	r2,-20(fp)
   437e8:	10800017 	ldw	r2,0(r2)
   437ec:	10800517 	ldw	r2,20(r2)
   437f0:	e0ffff17 	ldw	r3,-4(fp)
   437f4:	180d883a 	mov	r6,r3
   437f8:	e17ffe17 	ldw	r5,-8(fp)
   437fc:	e13ffb17 	ldw	r4,-20(fp)
   43800:	103ee83a 	callr	r2
   43804:	e0bffc15 	stw	r2,-16(fp)
   43808:	e0bffc17 	ldw	r2,-16(fp)
   4380c:	1000070e 	bge	r2,zero,4382c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43810:	00437300 	call	43730 <alt_get_errno>
   43814:	1007883a 	mov	r3,r2
   43818:	e0bffc17 	ldw	r2,-16(fp)
   4381c:	0085c83a 	sub	r2,zero,r2
   43820:	18800015 	stw	r2,0(r3)
          return -1;
   43824:	00bfffc4 	movi	r2,-1
   43828:	00000c06 	br	4385c <read+0xf0>
        }
        return rval;
   4382c:	e0bffc17 	ldw	r2,-16(fp)
   43830:	00000a06 	br	4385c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43834:	00437300 	call	43730 <alt_get_errno>
   43838:	1007883a 	mov	r3,r2
   4383c:	00800344 	movi	r2,13
   43840:	18800015 	stw	r2,0(r3)
   43844:	00000406 	br	43858 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43848:	00437300 	call	43730 <alt_get_errno>
   4384c:	1007883a 	mov	r3,r2
   43850:	00801444 	movi	r2,81
   43854:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43858:	00bfffc4 	movi	r2,-1
}
   4385c:	e037883a 	mov	sp,fp
   43860:	dfc00117 	ldw	ra,4(sp)
   43864:	df000017 	ldw	fp,0(sp)
   43868:	dec00204 	addi	sp,sp,8
   4386c:	f800283a 	ret

00043870 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43870:	defffc04 	addi	sp,sp,-16
   43874:	dfc00315 	stw	ra,12(sp)
   43878:	df000215 	stw	fp,8(sp)
   4387c:	dc000115 	stw	r16,4(sp)
   43880:	df000204 	addi	fp,sp,8
   43884:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43888:	e0bffe17 	ldw	r2,-8(fp)
   4388c:	108000d0 	cmplti	r2,r2,3
   43890:	1000111e 	bne	r2,zero,438d8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43894:	04000134 	movhi	r16,4
   43898:	84170304 	addi	r16,r16,23564
   4389c:	e0bffe17 	ldw	r2,-8(fp)
   438a0:	01400304 	movi	r5,12
   438a4:	1009883a 	mov	r4,r2
   438a8:	00431240 	call	43124 <__mulsi3>
   438ac:	8085883a 	add	r2,r16,r2
   438b0:	10800204 	addi	r2,r2,8
   438b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   438b8:	04000134 	movhi	r16,4
   438bc:	84170304 	addi	r16,r16,23564
   438c0:	e0bffe17 	ldw	r2,-8(fp)
   438c4:	01400304 	movi	r5,12
   438c8:	1009883a 	mov	r4,r2
   438cc:	00431240 	call	43124 <__mulsi3>
   438d0:	8085883a 	add	r2,r16,r2
   438d4:	10000015 	stw	zero,0(r2)
  }
}
   438d8:	0001883a 	nop
   438dc:	e6ffff04 	addi	sp,fp,-4
   438e0:	dfc00217 	ldw	ra,8(sp)
   438e4:	df000117 	ldw	fp,4(sp)
   438e8:	dc000017 	ldw	r16,0(sp)
   438ec:	dec00304 	addi	sp,sp,12
   438f0:	f800283a 	ret

000438f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   438f4:	defff904 	addi	sp,sp,-28
   438f8:	df000615 	stw	fp,24(sp)
   438fc:	df000604 	addi	fp,sp,24
   43900:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43904:	0005303a 	rdctl	r2,status
   43908:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4390c:	e0fffe17 	ldw	r3,-8(fp)
   43910:	00bfff84 	movi	r2,-2
   43914:	1884703a 	and	r2,r3,r2
   43918:	1001703a 	wrctl	status,r2
  
  return context;
   4391c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43920:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43924:	d0a00a17 	ldw	r2,-32728(gp)
   43928:	10c000c4 	addi	r3,r2,3
   4392c:	00bfff04 	movi	r2,-4
   43930:	1884703a 	and	r2,r3,r2
   43934:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43938:	d0e00a17 	ldw	r3,-32728(gp)
   4393c:	e0bfff17 	ldw	r2,-4(fp)
   43940:	1887883a 	add	r3,r3,r2
   43944:	008001f4 	movhi	r2,7
   43948:	10880004 	addi	r2,r2,8192
   4394c:	10c0062e 	bgeu	r2,r3,43968 <sbrk+0x74>
   43950:	e0bffb17 	ldw	r2,-20(fp)
   43954:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43958:	e0bffa17 	ldw	r2,-24(fp)
   4395c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43960:	00bfffc4 	movi	r2,-1
   43964:	00000b06 	br	43994 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43968:	d0a00a17 	ldw	r2,-32728(gp)
   4396c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   43970:	d0e00a17 	ldw	r3,-32728(gp)
   43974:	e0bfff17 	ldw	r2,-4(fp)
   43978:	1885883a 	add	r2,r3,r2
   4397c:	d0a00a15 	stw	r2,-32728(gp)
   43980:	e0bffb17 	ldw	r2,-20(fp)
   43984:	e0bffc15 	stw	r2,-16(fp)
   43988:	e0bffc17 	ldw	r2,-16(fp)
   4398c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43990:	e0bffd17 	ldw	r2,-12(fp)
} 
   43994:	e037883a 	mov	sp,fp
   43998:	df000017 	ldw	fp,0(sp)
   4399c:	dec00104 	addi	sp,sp,4
   439a0:	f800283a 	ret

000439a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   439a4:	defffe04 	addi	sp,sp,-8
   439a8:	dfc00115 	stw	ra,4(sp)
   439ac:	df000015 	stw	fp,0(sp)
   439b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   439b4:	d0a00917 	ldw	r2,-32732(gp)
   439b8:	10000326 	beq	r2,zero,439c8 <alt_get_errno+0x24>
   439bc:	d0a00917 	ldw	r2,-32732(gp)
   439c0:	103ee83a 	callr	r2
   439c4:	00000106 	br	439cc <alt_get_errno+0x28>
   439c8:	d0a2c304 	addi	r2,gp,-29940
}
   439cc:	e037883a 	mov	sp,fp
   439d0:	dfc00117 	ldw	ra,4(sp)
   439d4:	df000017 	ldw	fp,0(sp)
   439d8:	dec00204 	addi	sp,sp,8
   439dc:	f800283a 	ret

000439e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   439e0:	defff904 	addi	sp,sp,-28
   439e4:	dfc00615 	stw	ra,24(sp)
   439e8:	df000515 	stw	fp,20(sp)
   439ec:	df000504 	addi	fp,sp,20
   439f0:	e13ffd15 	stw	r4,-12(fp)
   439f4:	e17ffe15 	stw	r5,-8(fp)
   439f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   439fc:	e0bffd17 	ldw	r2,-12(fp)
   43a00:	10000816 	blt	r2,zero,43a24 <write+0x44>
   43a04:	01400304 	movi	r5,12
   43a08:	e13ffd17 	ldw	r4,-12(fp)
   43a0c:	00431240 	call	43124 <__mulsi3>
   43a10:	1007883a 	mov	r3,r2
   43a14:	00800134 	movhi	r2,4
   43a18:	10970304 	addi	r2,r2,23564
   43a1c:	1885883a 	add	r2,r3,r2
   43a20:	00000106 	br	43a28 <write+0x48>
   43a24:	0005883a 	mov	r2,zero
   43a28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43a2c:	e0bffb17 	ldw	r2,-20(fp)
   43a30:	10002126 	beq	r2,zero,43ab8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43a34:	e0bffb17 	ldw	r2,-20(fp)
   43a38:	10800217 	ldw	r2,8(r2)
   43a3c:	108000cc 	andi	r2,r2,3
   43a40:	10001826 	beq	r2,zero,43aa4 <write+0xc4>
   43a44:	e0bffb17 	ldw	r2,-20(fp)
   43a48:	10800017 	ldw	r2,0(r2)
   43a4c:	10800617 	ldw	r2,24(r2)
   43a50:	10001426 	beq	r2,zero,43aa4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43a54:	e0bffb17 	ldw	r2,-20(fp)
   43a58:	10800017 	ldw	r2,0(r2)
   43a5c:	10800617 	ldw	r2,24(r2)
   43a60:	e0ffff17 	ldw	r3,-4(fp)
   43a64:	180d883a 	mov	r6,r3
   43a68:	e17ffe17 	ldw	r5,-8(fp)
   43a6c:	e13ffb17 	ldw	r4,-20(fp)
   43a70:	103ee83a 	callr	r2
   43a74:	e0bffc15 	stw	r2,-16(fp)
   43a78:	e0bffc17 	ldw	r2,-16(fp)
   43a7c:	1000070e 	bge	r2,zero,43a9c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43a80:	00439a40 	call	439a4 <alt_get_errno>
   43a84:	1007883a 	mov	r3,r2
   43a88:	e0bffc17 	ldw	r2,-16(fp)
   43a8c:	0085c83a 	sub	r2,zero,r2
   43a90:	18800015 	stw	r2,0(r3)
        return -1;
   43a94:	00bfffc4 	movi	r2,-1
   43a98:	00000c06 	br	43acc <write+0xec>
      }
      return rval;
   43a9c:	e0bffc17 	ldw	r2,-16(fp)
   43aa0:	00000a06 	br	43acc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43aa4:	00439a40 	call	439a4 <alt_get_errno>
   43aa8:	1007883a 	mov	r3,r2
   43aac:	00800344 	movi	r2,13
   43ab0:	18800015 	stw	r2,0(r3)
   43ab4:	00000406 	br	43ac8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43ab8:	00439a40 	call	439a4 <alt_get_errno>
   43abc:	1007883a 	mov	r3,r2
   43ac0:	00801444 	movi	r2,81
   43ac4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43ac8:	00bfffc4 	movi	r2,-1
}
   43acc:	e037883a 	mov	sp,fp
   43ad0:	dfc00117 	ldw	ra,4(sp)
   43ad4:	df000017 	ldw	fp,0(sp)
   43ad8:	dec00204 	addi	sp,sp,8
   43adc:	f800283a 	ret

00043ae0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43ae0:	defffd04 	addi	sp,sp,-12
   43ae4:	dfc00215 	stw	ra,8(sp)
   43ae8:	df000115 	stw	fp,4(sp)
   43aec:	df000104 	addi	fp,sp,4
   43af0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43af4:	d1600604 	addi	r5,gp,-32744
   43af8:	e13fff17 	ldw	r4,-4(fp)
   43afc:	00444c80 	call	444c8 <alt_dev_llist_insert>
}
   43b00:	e037883a 	mov	sp,fp
   43b04:	dfc00117 	ldw	ra,4(sp)
   43b08:	df000017 	ldw	fp,0(sp)
   43b0c:	dec00204 	addi	sp,sp,8
   43b10:	f800283a 	ret

00043b14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43b14:	defffd04 	addi	sp,sp,-12
   43b18:	dfc00215 	stw	ra,8(sp)
   43b1c:	df000115 	stw	fp,4(sp)
   43b20:	df000104 	addi	fp,sp,4
   43b24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   43b28:	0044cd00 	call	44cd0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43b2c:	00800044 	movi	r2,1
   43b30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43b34:	0001883a 	nop
   43b38:	e037883a 	mov	sp,fp
   43b3c:	dfc00117 	ldw	ra,4(sp)
   43b40:	df000017 	ldw	fp,0(sp)
   43b44:	dec00204 	addi	sp,sp,8
   43b48:	f800283a 	ret

00043b4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43b4c:	defffe04 	addi	sp,sp,-8
   43b50:	dfc00115 	stw	ra,4(sp)
   43b54:	df000015 	stw	fp,0(sp)
   43b58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_UART_INIT ( UART, uart);
   43b5c:	000d883a 	mov	r6,zero
   43b60:	000b883a 	mov	r5,zero
   43b64:	01000134 	movhi	r4,4
   43b68:	21176d04 	addi	r4,r4,23988
   43b6c:	0043ca40 	call	43ca4 <altera_avalon_uart_init>
   43b70:	01000134 	movhi	r4,4
   43b74:	21176304 	addi	r4,r4,23948
   43b78:	0043ae00 	call	43ae0 <alt_dev_reg>
}
   43b7c:	0001883a 	nop
   43b80:	e037883a 	mov	sp,fp
   43b84:	dfc00117 	ldw	ra,4(sp)
   43b88:	df000017 	ldw	fp,0(sp)
   43b8c:	dec00204 	addi	sp,sp,8
   43b90:	f800283a 	ret

00043b94 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43b94:	defffa04 	addi	sp,sp,-24
   43b98:	dfc00515 	stw	ra,20(sp)
   43b9c:	df000415 	stw	fp,16(sp)
   43ba0:	df000404 	addi	fp,sp,16
   43ba4:	e13ffd15 	stw	r4,-12(fp)
   43ba8:	e17ffe15 	stw	r5,-8(fp)
   43bac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   43bb0:	e0bffd17 	ldw	r2,-12(fp)
   43bb4:	10800017 	ldw	r2,0(r2)
   43bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   43bbc:	e0bffc17 	ldw	r2,-16(fp)
   43bc0:	10c00a04 	addi	r3,r2,40
   43bc4:	e0bffd17 	ldw	r2,-12(fp)
   43bc8:	10800217 	ldw	r2,8(r2)
   43bcc:	100f883a 	mov	r7,r2
   43bd0:	e1bfff17 	ldw	r6,-4(fp)
   43bd4:	e17ffe17 	ldw	r5,-8(fp)
   43bd8:	1809883a 	mov	r4,r3
   43bdc:	00440a80 	call	440a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   43be0:	e037883a 	mov	sp,fp
   43be4:	dfc00117 	ldw	ra,4(sp)
   43be8:	df000017 	ldw	fp,0(sp)
   43bec:	dec00204 	addi	sp,sp,8
   43bf0:	f800283a 	ret

00043bf4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43bf4:	defffa04 	addi	sp,sp,-24
   43bf8:	dfc00515 	stw	ra,20(sp)
   43bfc:	df000415 	stw	fp,16(sp)
   43c00:	df000404 	addi	fp,sp,16
   43c04:	e13ffd15 	stw	r4,-12(fp)
   43c08:	e17ffe15 	stw	r5,-8(fp)
   43c0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   43c10:	e0bffd17 	ldw	r2,-12(fp)
   43c14:	10800017 	ldw	r2,0(r2)
   43c18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   43c1c:	e0bffc17 	ldw	r2,-16(fp)
   43c20:	10c00a04 	addi	r3,r2,40
   43c24:	e0bffd17 	ldw	r2,-12(fp)
   43c28:	10800217 	ldw	r2,8(r2)
   43c2c:	100f883a 	mov	r7,r2
   43c30:	e1bfff17 	ldw	r6,-4(fp)
   43c34:	e17ffe17 	ldw	r5,-8(fp)
   43c38:	1809883a 	mov	r4,r3
   43c3c:	00442c00 	call	442c0 <altera_avalon_uart_write>
      fd->fd_flags);
}
   43c40:	e037883a 	mov	sp,fp
   43c44:	dfc00117 	ldw	ra,4(sp)
   43c48:	df000017 	ldw	fp,0(sp)
   43c4c:	dec00204 	addi	sp,sp,8
   43c50:	f800283a 	ret

00043c54 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   43c54:	defffc04 	addi	sp,sp,-16
   43c58:	dfc00315 	stw	ra,12(sp)
   43c5c:	df000215 	stw	fp,8(sp)
   43c60:	df000204 	addi	fp,sp,8
   43c64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   43c68:	e0bfff17 	ldw	r2,-4(fp)
   43c6c:	10800017 	ldw	r2,0(r2)
   43c70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   43c74:	e0bffe17 	ldw	r2,-8(fp)
   43c78:	10c00a04 	addi	r3,r2,40
   43c7c:	e0bfff17 	ldw	r2,-4(fp)
   43c80:	10800217 	ldw	r2,8(r2)
   43c84:	100b883a 	mov	r5,r2
   43c88:	1809883a 	mov	r4,r3
   43c8c:	00440180 	call	44018 <altera_avalon_uart_close>
}
   43c90:	e037883a 	mov	sp,fp
   43c94:	dfc00117 	ldw	ra,4(sp)
   43c98:	df000017 	ldw	fp,0(sp)
   43c9c:	dec00204 	addi	sp,sp,8
   43ca0:	f800283a 	ret

00043ca4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   43ca4:	defff804 	addi	sp,sp,-32
   43ca8:	dfc00715 	stw	ra,28(sp)
   43cac:	df000615 	stw	fp,24(sp)
   43cb0:	df000604 	addi	fp,sp,24
   43cb4:	e13ffd15 	stw	r4,-12(fp)
   43cb8:	e17ffe15 	stw	r5,-8(fp)
   43cbc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   43cc0:	e0bffd17 	ldw	r2,-12(fp)
   43cc4:	10800017 	ldw	r2,0(r2)
   43cc8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   43ccc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   43cd0:	1000041e 	bne	r2,zero,43ce4 <altera_avalon_uart_init+0x40>
   43cd4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   43cd8:	1000021e 	bne	r2,zero,43ce4 <altera_avalon_uart_init+0x40>
   43cdc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   43ce0:	10000226 	beq	r2,zero,43cec <altera_avalon_uart_init+0x48>
   43ce4:	00800044 	movi	r2,1
   43ce8:	00000106 	br	43cf0 <altera_avalon_uart_init+0x4c>
   43cec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   43cf0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   43cf4:	e0bffc17 	ldw	r2,-16(fp)
   43cf8:	10000f1e 	bne	r2,zero,43d38 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   43cfc:	e0bffd17 	ldw	r2,-12(fp)
   43d00:	00c32004 	movi	r3,3200
   43d04:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   43d08:	e0bffb17 	ldw	r2,-20(fp)
   43d0c:	10800304 	addi	r2,r2,12
   43d10:	e0fffd17 	ldw	r3,-12(fp)
   43d14:	18c00117 	ldw	r3,4(r3)
   43d18:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   43d1c:	d8000015 	stw	zero,0(sp)
   43d20:	e1fffd17 	ldw	r7,-12(fp)
   43d24:	01800134 	movhi	r6,4
   43d28:	318f5404 	addi	r6,r6,15696
   43d2c:	e17fff17 	ldw	r5,-4(fp)
   43d30:	e13ffe17 	ldw	r4,-8(fp)
   43d34:	004464c0 	call	4464c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   43d38:	0001883a 	nop
   43d3c:	e037883a 	mov	sp,fp
   43d40:	dfc00117 	ldw	ra,4(sp)
   43d44:	df000017 	ldw	fp,0(sp)
   43d48:	dec00204 	addi	sp,sp,8
   43d4c:	f800283a 	ret

00043d50 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   43d50:	defffa04 	addi	sp,sp,-24
   43d54:	dfc00515 	stw	ra,20(sp)
   43d58:	df000415 	stw	fp,16(sp)
   43d5c:	df000404 	addi	fp,sp,16
   43d60:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   43d64:	e0bfff17 	ldw	r2,-4(fp)
   43d68:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   43d6c:	e0bffc17 	ldw	r2,-16(fp)
   43d70:	10800017 	ldw	r2,0(r2)
   43d74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   43d78:	e0bffd17 	ldw	r2,-12(fp)
   43d7c:	10800204 	addi	r2,r2,8
   43d80:	10800037 	ldwio	r2,0(r2)
   43d84:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   43d88:	e0bffd17 	ldw	r2,-12(fp)
   43d8c:	10800204 	addi	r2,r2,8
   43d90:	0007883a 	mov	r3,zero
   43d94:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   43d98:	e0bffd17 	ldw	r2,-12(fp)
   43d9c:	10800204 	addi	r2,r2,8
   43da0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   43da4:	e0bffe17 	ldw	r2,-8(fp)
   43da8:	1080200c 	andi	r2,r2,128
   43dac:	10000326 	beq	r2,zero,43dbc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   43db0:	e17ffe17 	ldw	r5,-8(fp)
   43db4:	e13ffc17 	ldw	r4,-16(fp)
   43db8:	0043dec0 	call	43dec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   43dbc:	e0bffe17 	ldw	r2,-8(fp)
   43dc0:	1081100c 	andi	r2,r2,1088
   43dc4:	10000326 	beq	r2,zero,43dd4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   43dc8:	e17ffe17 	ldw	r5,-8(fp)
   43dcc:	e13ffc17 	ldw	r4,-16(fp)
   43dd0:	0043ed00 	call	43ed0 <altera_avalon_uart_txirq>
  }
  

}
   43dd4:	0001883a 	nop
   43dd8:	e037883a 	mov	sp,fp
   43ddc:	dfc00117 	ldw	ra,4(sp)
   43de0:	df000017 	ldw	fp,0(sp)
   43de4:	dec00204 	addi	sp,sp,8
   43de8:	f800283a 	ret

00043dec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   43dec:	defffc04 	addi	sp,sp,-16
   43df0:	df000315 	stw	fp,12(sp)
   43df4:	df000304 	addi	fp,sp,12
   43df8:	e13ffe15 	stw	r4,-8(fp)
   43dfc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   43e00:	e0bfff17 	ldw	r2,-4(fp)
   43e04:	108000cc 	andi	r2,r2,3
   43e08:	10002c1e 	bne	r2,zero,43ebc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   43e0c:	e0bffe17 	ldw	r2,-8(fp)
   43e10:	10800317 	ldw	r2,12(r2)
   43e14:	e0bffe17 	ldw	r2,-8(fp)
   43e18:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   43e1c:	e0bffe17 	ldw	r2,-8(fp)
   43e20:	10800317 	ldw	r2,12(r2)
   43e24:	10800044 	addi	r2,r2,1
   43e28:	10800fcc 	andi	r2,r2,63
   43e2c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   43e30:	e0bffe17 	ldw	r2,-8(fp)
   43e34:	10800317 	ldw	r2,12(r2)
   43e38:	e0fffe17 	ldw	r3,-8(fp)
   43e3c:	18c00017 	ldw	r3,0(r3)
   43e40:	18c00037 	ldwio	r3,0(r3)
   43e44:	1809883a 	mov	r4,r3
   43e48:	e0fffe17 	ldw	r3,-8(fp)
   43e4c:	1885883a 	add	r2,r3,r2
   43e50:	10800704 	addi	r2,r2,28
   43e54:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   43e58:	e0bffe17 	ldw	r2,-8(fp)
   43e5c:	e0fffd17 	ldw	r3,-12(fp)
   43e60:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   43e64:	e0bffe17 	ldw	r2,-8(fp)
   43e68:	10800317 	ldw	r2,12(r2)
   43e6c:	10800044 	addi	r2,r2,1
   43e70:	10800fcc 	andi	r2,r2,63
   43e74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   43e78:	e0bffe17 	ldw	r2,-8(fp)
   43e7c:	10c00217 	ldw	r3,8(r2)
   43e80:	e0bffd17 	ldw	r2,-12(fp)
   43e84:	18800e1e 	bne	r3,r2,43ec0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   43e88:	e0bffe17 	ldw	r2,-8(fp)
   43e8c:	10c00117 	ldw	r3,4(r2)
   43e90:	00bfdfc4 	movi	r2,-129
   43e94:	1886703a 	and	r3,r3,r2
   43e98:	e0bffe17 	ldw	r2,-8(fp)
   43e9c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   43ea0:	e0bffe17 	ldw	r2,-8(fp)
   43ea4:	10800017 	ldw	r2,0(r2)
   43ea8:	10800304 	addi	r2,r2,12
   43eac:	e0fffe17 	ldw	r3,-8(fp)
   43eb0:	18c00117 	ldw	r3,4(r3)
   43eb4:	10c00035 	stwio	r3,0(r2)
   43eb8:	00000106 	br	43ec0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   43ebc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   43ec0:	e037883a 	mov	sp,fp
   43ec4:	df000017 	ldw	fp,0(sp)
   43ec8:	dec00104 	addi	sp,sp,4
   43ecc:	f800283a 	ret

00043ed0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   43ed0:	defffb04 	addi	sp,sp,-20
   43ed4:	df000415 	stw	fp,16(sp)
   43ed8:	df000404 	addi	fp,sp,16
   43edc:	e13ffc15 	stw	r4,-16(fp)
   43ee0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   43ee4:	e0bffc17 	ldw	r2,-16(fp)
   43ee8:	10c00417 	ldw	r3,16(r2)
   43eec:	e0bffc17 	ldw	r2,-16(fp)
   43ef0:	10800517 	ldw	r2,20(r2)
   43ef4:	18803226 	beq	r3,r2,43fc0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   43ef8:	e0bffc17 	ldw	r2,-16(fp)
   43efc:	10800617 	ldw	r2,24(r2)
   43f00:	1080008c 	andi	r2,r2,2
   43f04:	10000326 	beq	r2,zero,43f14 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   43f08:	e0bffd17 	ldw	r2,-12(fp)
   43f0c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   43f10:	10001d26 	beq	r2,zero,43f88 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   43f14:	e0bffc17 	ldw	r2,-16(fp)
   43f18:	10800417 	ldw	r2,16(r2)
   43f1c:	e0bffc17 	ldw	r2,-16(fp)
   43f20:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   43f24:	e0bffc17 	ldw	r2,-16(fp)
   43f28:	10800017 	ldw	r2,0(r2)
   43f2c:	10800104 	addi	r2,r2,4
   43f30:	e0fffc17 	ldw	r3,-16(fp)
   43f34:	18c00417 	ldw	r3,16(r3)
   43f38:	e13ffc17 	ldw	r4,-16(fp)
   43f3c:	20c7883a 	add	r3,r4,r3
   43f40:	18c01704 	addi	r3,r3,92
   43f44:	18c00003 	ldbu	r3,0(r3)
   43f48:	18c03fcc 	andi	r3,r3,255
   43f4c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   43f50:	e0bffc17 	ldw	r2,-16(fp)
   43f54:	10800417 	ldw	r2,16(r2)
   43f58:	10800044 	addi	r2,r2,1
   43f5c:	e0fffc17 	ldw	r3,-16(fp)
   43f60:	18800415 	stw	r2,16(r3)
   43f64:	10c00fcc 	andi	r3,r2,63
   43f68:	e0bffc17 	ldw	r2,-16(fp)
   43f6c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   43f70:	e0bffc17 	ldw	r2,-16(fp)
   43f74:	10800117 	ldw	r2,4(r2)
   43f78:	10c01014 	ori	r3,r2,64
   43f7c:	e0bffc17 	ldw	r2,-16(fp)
   43f80:	10c00115 	stw	r3,4(r2)
   43f84:	00000e06 	br	43fc0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   43f88:	e0bffc17 	ldw	r2,-16(fp)
   43f8c:	10800017 	ldw	r2,0(r2)
   43f90:	10800204 	addi	r2,r2,8
   43f94:	10800037 	ldwio	r2,0(r2)
   43f98:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   43f9c:	e0bffd17 	ldw	r2,-12(fp)
   43fa0:	1082000c 	andi	r2,r2,2048
   43fa4:	1000061e 	bne	r2,zero,43fc0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   43fa8:	e0bffc17 	ldw	r2,-16(fp)
   43fac:	10c00117 	ldw	r3,4(r2)
   43fb0:	00bfefc4 	movi	r2,-65
   43fb4:	1886703a 	and	r3,r3,r2
   43fb8:	e0bffc17 	ldw	r2,-16(fp)
   43fbc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   43fc0:	e0bffc17 	ldw	r2,-16(fp)
   43fc4:	10c00417 	ldw	r3,16(r2)
   43fc8:	e0bffc17 	ldw	r2,-16(fp)
   43fcc:	10800517 	ldw	r2,20(r2)
   43fd0:	1880061e 	bne	r3,r2,43fec <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   43fd4:	e0bffc17 	ldw	r2,-16(fp)
   43fd8:	10c00117 	ldw	r3,4(r2)
   43fdc:	00beefc4 	movi	r2,-1089
   43fe0:	1886703a 	and	r3,r3,r2
   43fe4:	e0bffc17 	ldw	r2,-16(fp)
   43fe8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   43fec:	e0bffc17 	ldw	r2,-16(fp)
   43ff0:	10800017 	ldw	r2,0(r2)
   43ff4:	10800304 	addi	r2,r2,12
   43ff8:	e0fffc17 	ldw	r3,-16(fp)
   43ffc:	18c00117 	ldw	r3,4(r3)
   44000:	10c00035 	stwio	r3,0(r2)
}
   44004:	0001883a 	nop
   44008:	e037883a 	mov	sp,fp
   4400c:	df000017 	ldw	fp,0(sp)
   44010:	dec00104 	addi	sp,sp,4
   44014:	f800283a 	ret

00044018 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   44018:	defffd04 	addi	sp,sp,-12
   4401c:	df000215 	stw	fp,8(sp)
   44020:	df000204 	addi	fp,sp,8
   44024:	e13ffe15 	stw	r4,-8(fp)
   44028:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   4402c:	00000506 	br	44044 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44030:	e0bfff17 	ldw	r2,-4(fp)
   44034:	1090000c 	andi	r2,r2,16384
   44038:	10000226 	beq	r2,zero,44044 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4403c:	00bffd44 	movi	r2,-11
   44040:	00000606 	br	4405c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   44044:	e0bffe17 	ldw	r2,-8(fp)
   44048:	10c00417 	ldw	r3,16(r2)
   4404c:	e0bffe17 	ldw	r2,-8(fp)
   44050:	10800517 	ldw	r2,20(r2)
   44054:	18bff61e 	bne	r3,r2,44030 <__alt_data_end+0xfffd2030>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44058:	0005883a 	mov	r2,zero
}
   4405c:	e037883a 	mov	sp,fp
   44060:	df000017 	ldw	fp,0(sp)
   44064:	dec00104 	addi	sp,sp,4
   44068:	f800283a 	ret

0004406c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4406c:	defffe04 	addi	sp,sp,-8
   44070:	dfc00115 	stw	ra,4(sp)
   44074:	df000015 	stw	fp,0(sp)
   44078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4407c:	d0a00917 	ldw	r2,-32732(gp)
   44080:	10000326 	beq	r2,zero,44090 <alt_get_errno+0x24>
   44084:	d0a00917 	ldw	r2,-32732(gp)
   44088:	103ee83a 	callr	r2
   4408c:	00000106 	br	44094 <alt_get_errno+0x28>
   44090:	d0a2c304 	addi	r2,gp,-29940
}
   44094:	e037883a 	mov	sp,fp
   44098:	dfc00117 	ldw	ra,4(sp)
   4409c:	df000017 	ldw	fp,0(sp)
   440a0:	dec00204 	addi	sp,sp,8
   440a4:	f800283a 	ret

000440a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   440a8:	defff204 	addi	sp,sp,-56
   440ac:	dfc00d15 	stw	ra,52(sp)
   440b0:	df000c15 	stw	fp,48(sp)
   440b4:	df000c04 	addi	fp,sp,48
   440b8:	e13ffc15 	stw	r4,-16(fp)
   440bc:	e17ffd15 	stw	r5,-12(fp)
   440c0:	e1bffe15 	stw	r6,-8(fp)
   440c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   440c8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   440cc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   440d0:	e0bfff17 	ldw	r2,-4(fp)
   440d4:	1090000c 	andi	r2,r2,16384
   440d8:	1005003a 	cmpeq	r2,r2,zero
   440dc:	10803fcc 	andi	r2,r2,255
   440e0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   440e4:	00001306 	br	44134 <altera_avalon_uart_read+0x8c>
    {
      count++;
   440e8:	e0bff517 	ldw	r2,-44(fp)
   440ec:	10800044 	addi	r2,r2,1
   440f0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   440f4:	e0bffd17 	ldw	r2,-12(fp)
   440f8:	10c00044 	addi	r3,r2,1
   440fc:	e0fffd15 	stw	r3,-12(fp)
   44100:	e0fffc17 	ldw	r3,-16(fp)
   44104:	18c00217 	ldw	r3,8(r3)
   44108:	e13ffc17 	ldw	r4,-16(fp)
   4410c:	20c7883a 	add	r3,r4,r3
   44110:	18c00704 	addi	r3,r3,28
   44114:	18c00003 	ldbu	r3,0(r3)
   44118:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   4411c:	e0bffc17 	ldw	r2,-16(fp)
   44120:	10800217 	ldw	r2,8(r2)
   44124:	10800044 	addi	r2,r2,1
   44128:	10c00fcc 	andi	r3,r2,63
   4412c:	e0bffc17 	ldw	r2,-16(fp)
   44130:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   44134:	e0fff517 	ldw	r3,-44(fp)
   44138:	e0bffe17 	ldw	r2,-8(fp)
   4413c:	1880050e 	bge	r3,r2,44154 <altera_avalon_uart_read+0xac>
   44140:	e0bffc17 	ldw	r2,-16(fp)
   44144:	10c00217 	ldw	r3,8(r2)
   44148:	e0bffc17 	ldw	r2,-16(fp)
   4414c:	10800317 	ldw	r2,12(r2)
   44150:	18bfe51e 	bne	r3,r2,440e8 <__alt_data_end+0xfffd20e8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   44154:	e0bff517 	ldw	r2,-44(fp)
   44158:	1000251e 	bne	r2,zero,441f0 <altera_avalon_uart_read+0x148>
   4415c:	e0bffc17 	ldw	r2,-16(fp)
   44160:	10c00217 	ldw	r3,8(r2)
   44164:	e0bffc17 	ldw	r2,-16(fp)
   44168:	10800317 	ldw	r2,12(r2)
   4416c:	1880201e 	bne	r3,r2,441f0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   44170:	e0bff617 	ldw	r2,-40(fp)
   44174:	1000071e 	bne	r2,zero,44194 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   44178:	004406c0 	call	4406c <alt_get_errno>
   4417c:	1007883a 	mov	r3,r2
   44180:	008002c4 	movi	r2,11
   44184:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   44188:	00800044 	movi	r2,1
   4418c:	e0bff405 	stb	r2,-48(fp)
        break;
   44190:	00001b06 	br	44200 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44194:	0005303a 	rdctl	r2,status
   44198:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4419c:	e0fff917 	ldw	r3,-28(fp)
   441a0:	00bfff84 	movi	r2,-2
   441a4:	1884703a 	and	r2,r3,r2
   441a8:	1001703a 	wrctl	status,r2
  
  return context;
   441ac:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   441b0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   441b4:	e0bffc17 	ldw	r2,-16(fp)
   441b8:	10800117 	ldw	r2,4(r2)
   441bc:	10c02014 	ori	r3,r2,128
   441c0:	e0bffc17 	ldw	r2,-16(fp)
   441c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   441c8:	e0bffc17 	ldw	r2,-16(fp)
   441cc:	10800017 	ldw	r2,0(r2)
   441d0:	10800304 	addi	r2,r2,12
   441d4:	e0fffc17 	ldw	r3,-16(fp)
   441d8:	18c00117 	ldw	r3,4(r3)
   441dc:	10c00035 	stwio	r3,0(r2)
   441e0:	e0bff817 	ldw	r2,-32(fp)
   441e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   441e8:	e0bffa17 	ldw	r2,-24(fp)
   441ec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   441f0:	e0bff517 	ldw	r2,-44(fp)
   441f4:	1000021e 	bne	r2,zero,44200 <altera_avalon_uart_read+0x158>
   441f8:	e0bffe17 	ldw	r2,-8(fp)
   441fc:	103fcd1e 	bne	r2,zero,44134 <__alt_data_end+0xfffd2134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44200:	0005303a 	rdctl	r2,status
   44204:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44208:	e0fffb17 	ldw	r3,-20(fp)
   4420c:	00bfff84 	movi	r2,-2
   44210:	1884703a 	and	r2,r3,r2
   44214:	1001703a 	wrctl	status,r2
  
  return context;
   44218:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   4421c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   44220:	e0bffc17 	ldw	r2,-16(fp)
   44224:	10800117 	ldw	r2,4(r2)
   44228:	10c02014 	ori	r3,r2,128
   4422c:	e0bffc17 	ldw	r2,-16(fp)
   44230:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44234:	e0bffc17 	ldw	r2,-16(fp)
   44238:	10800017 	ldw	r2,0(r2)
   4423c:	10800304 	addi	r2,r2,12
   44240:	e0fffc17 	ldw	r3,-16(fp)
   44244:	18c00117 	ldw	r3,4(r3)
   44248:	10c00035 	stwio	r3,0(r2)
   4424c:	e0bff817 	ldw	r2,-32(fp)
   44250:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44254:	e0bff717 	ldw	r2,-36(fp)
   44258:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   4425c:	e0bff403 	ldbu	r2,-48(fp)
   44260:	10000226 	beq	r2,zero,4426c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   44264:	00bffd44 	movi	r2,-11
   44268:	00000106 	br	44270 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   4426c:	e0bff517 	ldw	r2,-44(fp)
  }
}
   44270:	e037883a 	mov	sp,fp
   44274:	dfc00117 	ldw	ra,4(sp)
   44278:	df000017 	ldw	fp,0(sp)
   4427c:	dec00204 	addi	sp,sp,8
   44280:	f800283a 	ret

00044284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44284:	defffe04 	addi	sp,sp,-8
   44288:	dfc00115 	stw	ra,4(sp)
   4428c:	df000015 	stw	fp,0(sp)
   44290:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44294:	d0a00917 	ldw	r2,-32732(gp)
   44298:	10000326 	beq	r2,zero,442a8 <alt_get_errno+0x24>
   4429c:	d0a00917 	ldw	r2,-32732(gp)
   442a0:	103ee83a 	callr	r2
   442a4:	00000106 	br	442ac <alt_get_errno+0x28>
   442a8:	d0a2c304 	addi	r2,gp,-29940
}
   442ac:	e037883a 	mov	sp,fp
   442b0:	dfc00117 	ldw	ra,4(sp)
   442b4:	df000017 	ldw	fp,0(sp)
   442b8:	dec00204 	addi	sp,sp,8
   442bc:	f800283a 	ret

000442c0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   442c0:	defff204 	addi	sp,sp,-56
   442c4:	dfc00d15 	stw	ra,52(sp)
   442c8:	df000c15 	stw	fp,48(sp)
   442cc:	df000c04 	addi	fp,sp,48
   442d0:	e13ffc15 	stw	r4,-16(fp)
   442d4:	e17ffd15 	stw	r5,-12(fp)
   442d8:	e1bffe15 	stw	r6,-8(fp)
   442dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   442e0:	e0bffe17 	ldw	r2,-8(fp)
   442e4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   442e8:	e0bfff17 	ldw	r2,-4(fp)
   442ec:	1090000c 	andi	r2,r2,16384
   442f0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   442f4:	00003c06 	br	443e8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   442f8:	e0bffc17 	ldw	r2,-16(fp)
   442fc:	10800517 	ldw	r2,20(r2)
   44300:	10800044 	addi	r2,r2,1
   44304:	10800fcc 	andi	r2,r2,63
   44308:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   4430c:	e0bffc17 	ldw	r2,-16(fp)
   44310:	10c00417 	ldw	r3,16(r2)
   44314:	e0bff717 	ldw	r2,-36(fp)
   44318:	1880221e 	bne	r3,r2,443a4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   4431c:	e0bff517 	ldw	r2,-44(fp)
   44320:	10000526 	beq	r2,zero,44338 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   44324:	00442840 	call	44284 <alt_get_errno>
   44328:	1007883a 	mov	r3,r2
   4432c:	008002c4 	movi	r2,11
   44330:	18800015 	stw	r2,0(r3)
        break;
   44334:	00002e06 	br	443f0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44338:	0005303a 	rdctl	r2,status
   4433c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44340:	e0fff917 	ldw	r3,-28(fp)
   44344:	00bfff84 	movi	r2,-2
   44348:	1884703a 	and	r2,r3,r2
   4434c:	1001703a 	wrctl	status,r2
  
  return context;
   44350:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   44354:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   44358:	e0bffc17 	ldw	r2,-16(fp)
   4435c:	10800117 	ldw	r2,4(r2)
   44360:	10c11014 	ori	r3,r2,1088
   44364:	e0bffc17 	ldw	r2,-16(fp)
   44368:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   4436c:	e0bffc17 	ldw	r2,-16(fp)
   44370:	10800017 	ldw	r2,0(r2)
   44374:	10800304 	addi	r2,r2,12
   44378:	e0fffc17 	ldw	r3,-16(fp)
   4437c:	18c00117 	ldw	r3,4(r3)
   44380:	10c00035 	stwio	r3,0(r2)
   44384:	e0bff817 	ldw	r2,-32(fp)
   44388:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4438c:	e0bff617 	ldw	r2,-40(fp)
   44390:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   44394:	e0bffc17 	ldw	r2,-16(fp)
   44398:	10c00417 	ldw	r3,16(r2)
   4439c:	e0bff717 	ldw	r2,-36(fp)
   443a0:	18bffc26 	beq	r3,r2,44394 <__alt_data_end+0xfffd2394>
      }
    }

    count--;
   443a4:	e0bff417 	ldw	r2,-48(fp)
   443a8:	10bfffc4 	addi	r2,r2,-1
   443ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   443b0:	e0bffc17 	ldw	r2,-16(fp)
   443b4:	10c00517 	ldw	r3,20(r2)
   443b8:	e0bffd17 	ldw	r2,-12(fp)
   443bc:	11000044 	addi	r4,r2,1
   443c0:	e13ffd15 	stw	r4,-12(fp)
   443c4:	10800003 	ldbu	r2,0(r2)
   443c8:	1009883a 	mov	r4,r2
   443cc:	e0bffc17 	ldw	r2,-16(fp)
   443d0:	10c5883a 	add	r2,r2,r3
   443d4:	10801704 	addi	r2,r2,92
   443d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   443dc:	e0bffc17 	ldw	r2,-16(fp)
   443e0:	e0fff717 	ldw	r3,-36(fp)
   443e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   443e8:	e0bff417 	ldw	r2,-48(fp)
   443ec:	103fc21e 	bne	r2,zero,442f8 <__alt_data_end+0xfffd22f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443f0:	0005303a 	rdctl	r2,status
   443f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443f8:	e0fffb17 	ldw	r3,-20(fp)
   443fc:	00bfff84 	movi	r2,-2
   44400:	1884703a 	and	r2,r3,r2
   44404:	1001703a 	wrctl	status,r2
  
  return context;
   44408:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   4440c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   44410:	e0bffc17 	ldw	r2,-16(fp)
   44414:	10800117 	ldw	r2,4(r2)
   44418:	10c11014 	ori	r3,r2,1088
   4441c:	e0bffc17 	ldw	r2,-16(fp)
   44420:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   44424:	e0bffc17 	ldw	r2,-16(fp)
   44428:	10800017 	ldw	r2,0(r2)
   4442c:	10800304 	addi	r2,r2,12
   44430:	e0fffc17 	ldw	r3,-16(fp)
   44434:	18c00117 	ldw	r3,4(r3)
   44438:	10c00035 	stwio	r3,0(r2)
   4443c:	e0bff817 	ldw	r2,-32(fp)
   44440:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44444:	e0bffa17 	ldw	r2,-24(fp)
   44448:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   4444c:	e0fffe17 	ldw	r3,-8(fp)
   44450:	e0bff417 	ldw	r2,-48(fp)
   44454:	1885c83a 	sub	r2,r3,r2
}
   44458:	e037883a 	mov	sp,fp
   4445c:	dfc00117 	ldw	ra,4(sp)
   44460:	df000017 	ldw	fp,0(sp)
   44464:	dec00204 	addi	sp,sp,8
   44468:	f800283a 	ret

0004446c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4446c:	deffff04 	addi	sp,sp,-4
   44470:	df000015 	stw	fp,0(sp)
   44474:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44478:	0001883a 	nop
   4447c:	e037883a 	mov	sp,fp
   44480:	df000017 	ldw	fp,0(sp)
   44484:	dec00104 	addi	sp,sp,4
   44488:	f800283a 	ret

0004448c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4448c:	defffe04 	addi	sp,sp,-8
   44490:	dfc00115 	stw	ra,4(sp)
   44494:	df000015 	stw	fp,0(sp)
   44498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4449c:	d0a00917 	ldw	r2,-32732(gp)
   444a0:	10000326 	beq	r2,zero,444b0 <alt_get_errno+0x24>
   444a4:	d0a00917 	ldw	r2,-32732(gp)
   444a8:	103ee83a 	callr	r2
   444ac:	00000106 	br	444b4 <alt_get_errno+0x28>
   444b0:	d0a2c304 	addi	r2,gp,-29940
}
   444b4:	e037883a 	mov	sp,fp
   444b8:	dfc00117 	ldw	ra,4(sp)
   444bc:	df000017 	ldw	fp,0(sp)
   444c0:	dec00204 	addi	sp,sp,8
   444c4:	f800283a 	ret

000444c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   444c8:	defffa04 	addi	sp,sp,-24
   444cc:	dfc00515 	stw	ra,20(sp)
   444d0:	df000415 	stw	fp,16(sp)
   444d4:	df000404 	addi	fp,sp,16
   444d8:	e13ffe15 	stw	r4,-8(fp)
   444dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   444e0:	e0bffe17 	ldw	r2,-8(fp)
   444e4:	10000326 	beq	r2,zero,444f4 <alt_dev_llist_insert+0x2c>
   444e8:	e0bffe17 	ldw	r2,-8(fp)
   444ec:	10800217 	ldw	r2,8(r2)
   444f0:	1000061e 	bne	r2,zero,4450c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   444f4:	004448c0 	call	4448c <alt_get_errno>
   444f8:	1007883a 	mov	r3,r2
   444fc:	00800584 	movi	r2,22
   44500:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44504:	00bffa84 	movi	r2,-22
   44508:	00001306 	br	44558 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4450c:	e0bffe17 	ldw	r2,-8(fp)
   44510:	e0ffff17 	ldw	r3,-4(fp)
   44514:	e0fffc15 	stw	r3,-16(fp)
   44518:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4451c:	e0bffd17 	ldw	r2,-12(fp)
   44520:	e0fffc17 	ldw	r3,-16(fp)
   44524:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44528:	e0bffc17 	ldw	r2,-16(fp)
   4452c:	10c00017 	ldw	r3,0(r2)
   44530:	e0bffd17 	ldw	r2,-12(fp)
   44534:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44538:	e0bffc17 	ldw	r2,-16(fp)
   4453c:	10800017 	ldw	r2,0(r2)
   44540:	e0fffd17 	ldw	r3,-12(fp)
   44544:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44548:	e0bffc17 	ldw	r2,-16(fp)
   4454c:	e0fffd17 	ldw	r3,-12(fp)
   44550:	10c00015 	stw	r3,0(r2)

  return 0;  
   44554:	0005883a 	mov	r2,zero
}
   44558:	e037883a 	mov	sp,fp
   4455c:	dfc00117 	ldw	ra,4(sp)
   44560:	df000017 	ldw	fp,0(sp)
   44564:	dec00204 	addi	sp,sp,8
   44568:	f800283a 	ret

0004456c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4456c:	defffd04 	addi	sp,sp,-12
   44570:	dfc00215 	stw	ra,8(sp)
   44574:	df000115 	stw	fp,4(sp)
   44578:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4457c:	00800134 	movhi	r2,4
   44580:	1094df04 	addi	r2,r2,21372
   44584:	e0bfff15 	stw	r2,-4(fp)
   44588:	00000606 	br	445a4 <_do_ctors+0x38>
        (*ctor) (); 
   4458c:	e0bfff17 	ldw	r2,-4(fp)
   44590:	10800017 	ldw	r2,0(r2)
   44594:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44598:	e0bfff17 	ldw	r2,-4(fp)
   4459c:	10bfff04 	addi	r2,r2,-4
   445a0:	e0bfff15 	stw	r2,-4(fp)
   445a4:	e0ffff17 	ldw	r3,-4(fp)
   445a8:	00800134 	movhi	r2,4
   445ac:	1094e004 	addi	r2,r2,21376
   445b0:	18bff62e 	bgeu	r3,r2,4458c <__alt_data_end+0xfffd258c>
        (*ctor) (); 
}
   445b4:	0001883a 	nop
   445b8:	e037883a 	mov	sp,fp
   445bc:	dfc00117 	ldw	ra,4(sp)
   445c0:	df000017 	ldw	fp,0(sp)
   445c4:	dec00204 	addi	sp,sp,8
   445c8:	f800283a 	ret

000445cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   445cc:	defffd04 	addi	sp,sp,-12
   445d0:	dfc00215 	stw	ra,8(sp)
   445d4:	df000115 	stw	fp,4(sp)
   445d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   445dc:	00800134 	movhi	r2,4
   445e0:	1094df04 	addi	r2,r2,21372
   445e4:	e0bfff15 	stw	r2,-4(fp)
   445e8:	00000606 	br	44604 <_do_dtors+0x38>
        (*dtor) (); 
   445ec:	e0bfff17 	ldw	r2,-4(fp)
   445f0:	10800017 	ldw	r2,0(r2)
   445f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   445f8:	e0bfff17 	ldw	r2,-4(fp)
   445fc:	10bfff04 	addi	r2,r2,-4
   44600:	e0bfff15 	stw	r2,-4(fp)
   44604:	e0ffff17 	ldw	r3,-4(fp)
   44608:	00800134 	movhi	r2,4
   4460c:	1094e004 	addi	r2,r2,21376
   44610:	18bff62e 	bgeu	r3,r2,445ec <__alt_data_end+0xfffd25ec>
        (*dtor) (); 
}
   44614:	0001883a 	nop
   44618:	e037883a 	mov	sp,fp
   4461c:	dfc00117 	ldw	ra,4(sp)
   44620:	df000017 	ldw	fp,0(sp)
   44624:	dec00204 	addi	sp,sp,8
   44628:	f800283a 	ret

0004462c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4462c:	deffff04 	addi	sp,sp,-4
   44630:	df000015 	stw	fp,0(sp)
   44634:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44638:	0001883a 	nop
   4463c:	e037883a 	mov	sp,fp
   44640:	df000017 	ldw	fp,0(sp)
   44644:	dec00104 	addi	sp,sp,4
   44648:	f800283a 	ret

0004464c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4464c:	defff904 	addi	sp,sp,-28
   44650:	dfc00615 	stw	ra,24(sp)
   44654:	df000515 	stw	fp,20(sp)
   44658:	df000504 	addi	fp,sp,20
   4465c:	e13ffc15 	stw	r4,-16(fp)
   44660:	e17ffd15 	stw	r5,-12(fp)
   44664:	e1bffe15 	stw	r6,-8(fp)
   44668:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4466c:	e0800217 	ldw	r2,8(fp)
   44670:	d8800015 	stw	r2,0(sp)
   44674:	e1ffff17 	ldw	r7,-4(fp)
   44678:	e1bffe17 	ldw	r6,-8(fp)
   4467c:	e17ffd17 	ldw	r5,-12(fp)
   44680:	e13ffc17 	ldw	r4,-16(fp)
   44684:	00447fc0 	call	447fc <alt_iic_isr_register>
}  
   44688:	e037883a 	mov	sp,fp
   4468c:	dfc00117 	ldw	ra,4(sp)
   44690:	df000017 	ldw	fp,0(sp)
   44694:	dec00204 	addi	sp,sp,8
   44698:	f800283a 	ret

0004469c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4469c:	defff904 	addi	sp,sp,-28
   446a0:	df000615 	stw	fp,24(sp)
   446a4:	df000604 	addi	fp,sp,24
   446a8:	e13ffe15 	stw	r4,-8(fp)
   446ac:	e17fff15 	stw	r5,-4(fp)
   446b0:	e0bfff17 	ldw	r2,-4(fp)
   446b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   446b8:	0005303a 	rdctl	r2,status
   446bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   446c0:	e0fffb17 	ldw	r3,-20(fp)
   446c4:	00bfff84 	movi	r2,-2
   446c8:	1884703a 	and	r2,r3,r2
   446cc:	1001703a 	wrctl	status,r2
  
  return context;
   446d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   446d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   446d8:	00c00044 	movi	r3,1
   446dc:	e0bffa17 	ldw	r2,-24(fp)
   446e0:	1884983a 	sll	r2,r3,r2
   446e4:	1007883a 	mov	r3,r2
   446e8:	d0a2c717 	ldw	r2,-29924(gp)
   446ec:	1884b03a 	or	r2,r3,r2
   446f0:	d0a2c715 	stw	r2,-29924(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   446f4:	d0a2c717 	ldw	r2,-29924(gp)
   446f8:	100170fa 	wrctl	ienable,r2
   446fc:	e0bffc17 	ldw	r2,-16(fp)
   44700:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44704:	e0bffd17 	ldw	r2,-12(fp)
   44708:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4470c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44710:	0001883a 	nop
}
   44714:	e037883a 	mov	sp,fp
   44718:	df000017 	ldw	fp,0(sp)
   4471c:	dec00104 	addi	sp,sp,4
   44720:	f800283a 	ret

00044724 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44724:	defff904 	addi	sp,sp,-28
   44728:	df000615 	stw	fp,24(sp)
   4472c:	df000604 	addi	fp,sp,24
   44730:	e13ffe15 	stw	r4,-8(fp)
   44734:	e17fff15 	stw	r5,-4(fp)
   44738:	e0bfff17 	ldw	r2,-4(fp)
   4473c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44740:	0005303a 	rdctl	r2,status
   44744:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44748:	e0fffb17 	ldw	r3,-20(fp)
   4474c:	00bfff84 	movi	r2,-2
   44750:	1884703a 	and	r2,r3,r2
   44754:	1001703a 	wrctl	status,r2
  
  return context;
   44758:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4475c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   44760:	00c00044 	movi	r3,1
   44764:	e0bffa17 	ldw	r2,-24(fp)
   44768:	1884983a 	sll	r2,r3,r2
   4476c:	0084303a 	nor	r2,zero,r2
   44770:	1007883a 	mov	r3,r2
   44774:	d0a2c717 	ldw	r2,-29924(gp)
   44778:	1884703a 	and	r2,r3,r2
   4477c:	d0a2c715 	stw	r2,-29924(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44780:	d0a2c717 	ldw	r2,-29924(gp)
   44784:	100170fa 	wrctl	ienable,r2
   44788:	e0bffc17 	ldw	r2,-16(fp)
   4478c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44790:	e0bffd17 	ldw	r2,-12(fp)
   44794:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44798:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4479c:	0001883a 	nop
}
   447a0:	e037883a 	mov	sp,fp
   447a4:	df000017 	ldw	fp,0(sp)
   447a8:	dec00104 	addi	sp,sp,4
   447ac:	f800283a 	ret

000447b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   447b0:	defffc04 	addi	sp,sp,-16
   447b4:	df000315 	stw	fp,12(sp)
   447b8:	df000304 	addi	fp,sp,12
   447bc:	e13ffe15 	stw	r4,-8(fp)
   447c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   447c4:	000530fa 	rdctl	r2,ienable
   447c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   447cc:	00c00044 	movi	r3,1
   447d0:	e0bfff17 	ldw	r2,-4(fp)
   447d4:	1884983a 	sll	r2,r3,r2
   447d8:	1007883a 	mov	r3,r2
   447dc:	e0bffd17 	ldw	r2,-12(fp)
   447e0:	1884703a 	and	r2,r3,r2
   447e4:	1004c03a 	cmpne	r2,r2,zero
   447e8:	10803fcc 	andi	r2,r2,255
}
   447ec:	e037883a 	mov	sp,fp
   447f0:	df000017 	ldw	fp,0(sp)
   447f4:	dec00104 	addi	sp,sp,4
   447f8:	f800283a 	ret

000447fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   447fc:	defff504 	addi	sp,sp,-44
   44800:	dfc00a15 	stw	ra,40(sp)
   44804:	df000915 	stw	fp,36(sp)
   44808:	df000904 	addi	fp,sp,36
   4480c:	e13ffc15 	stw	r4,-16(fp)
   44810:	e17ffd15 	stw	r5,-12(fp)
   44814:	e1bffe15 	stw	r6,-8(fp)
   44818:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4481c:	00bffa84 	movi	r2,-22
   44820:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44824:	e0bffd17 	ldw	r2,-12(fp)
   44828:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4482c:	e0bff817 	ldw	r2,-32(fp)
   44830:	10800808 	cmpgei	r2,r2,32
   44834:	1000271e 	bne	r2,zero,448d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44838:	0005303a 	rdctl	r2,status
   4483c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44840:	e0fffb17 	ldw	r3,-20(fp)
   44844:	00bfff84 	movi	r2,-2
   44848:	1884703a 	and	r2,r3,r2
   4484c:	1001703a 	wrctl	status,r2
  
  return context;
   44850:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44854:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   44858:	00800134 	movhi	r2,4
   4485c:	109a6704 	addi	r2,r2,27036
   44860:	e0fff817 	ldw	r3,-32(fp)
   44864:	180690fa 	slli	r3,r3,3
   44868:	10c5883a 	add	r2,r2,r3
   4486c:	e0fffe17 	ldw	r3,-8(fp)
   44870:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   44874:	00800134 	movhi	r2,4
   44878:	109a6704 	addi	r2,r2,27036
   4487c:	e0fff817 	ldw	r3,-32(fp)
   44880:	180690fa 	slli	r3,r3,3
   44884:	10c5883a 	add	r2,r2,r3
   44888:	10800104 	addi	r2,r2,4
   4488c:	e0ffff17 	ldw	r3,-4(fp)
   44890:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44894:	e0bffe17 	ldw	r2,-8(fp)
   44898:	10000526 	beq	r2,zero,448b0 <alt_iic_isr_register+0xb4>
   4489c:	e0bff817 	ldw	r2,-32(fp)
   448a0:	100b883a 	mov	r5,r2
   448a4:	e13ffc17 	ldw	r4,-16(fp)
   448a8:	004469c0 	call	4469c <alt_ic_irq_enable>
   448ac:	00000406 	br	448c0 <alt_iic_isr_register+0xc4>
   448b0:	e0bff817 	ldw	r2,-32(fp)
   448b4:	100b883a 	mov	r5,r2
   448b8:	e13ffc17 	ldw	r4,-16(fp)
   448bc:	00447240 	call	44724 <alt_ic_irq_disable>
   448c0:	e0bff715 	stw	r2,-36(fp)
   448c4:	e0bffa17 	ldw	r2,-24(fp)
   448c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   448cc:	e0bff917 	ldw	r2,-28(fp)
   448d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   448d4:	e0bff717 	ldw	r2,-36(fp)
}
   448d8:	e037883a 	mov	sp,fp
   448dc:	dfc00117 	ldw	ra,4(sp)
   448e0:	df000017 	ldw	fp,0(sp)
   448e4:	dec00204 	addi	sp,sp,8
   448e8:	f800283a 	ret

000448ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   448ec:	defff804 	addi	sp,sp,-32
   448f0:	dfc00715 	stw	ra,28(sp)
   448f4:	df000615 	stw	fp,24(sp)
   448f8:	dc000515 	stw	r16,20(sp)
   448fc:	df000604 	addi	fp,sp,24
   44900:	e13ffb15 	stw	r4,-20(fp)
   44904:	e17ffc15 	stw	r5,-16(fp)
   44908:	e1bffd15 	stw	r6,-12(fp)
   4490c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   44910:	e1bffe17 	ldw	r6,-8(fp)
   44914:	e17ffd17 	ldw	r5,-12(fp)
   44918:	e13ffc17 	ldw	r4,-16(fp)
   4491c:	0044b740 	call	44b74 <open>
   44920:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   44924:	e0bffa17 	ldw	r2,-24(fp)
   44928:	10002216 	blt	r2,zero,449b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4492c:	04000134 	movhi	r16,4
   44930:	84170304 	addi	r16,r16,23564
   44934:	e0bffa17 	ldw	r2,-24(fp)
   44938:	01400304 	movi	r5,12
   4493c:	1009883a 	mov	r4,r2
   44940:	00431240 	call	43124 <__mulsi3>
   44944:	8085883a 	add	r2,r16,r2
   44948:	10c00017 	ldw	r3,0(r2)
   4494c:	e0bffb17 	ldw	r2,-20(fp)
   44950:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44954:	04000134 	movhi	r16,4
   44958:	84170304 	addi	r16,r16,23564
   4495c:	e0bffa17 	ldw	r2,-24(fp)
   44960:	01400304 	movi	r5,12
   44964:	1009883a 	mov	r4,r2
   44968:	00431240 	call	43124 <__mulsi3>
   4496c:	8085883a 	add	r2,r16,r2
   44970:	10800104 	addi	r2,r2,4
   44974:	10c00017 	ldw	r3,0(r2)
   44978:	e0bffb17 	ldw	r2,-20(fp)
   4497c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44980:	04000134 	movhi	r16,4
   44984:	84170304 	addi	r16,r16,23564
   44988:	e0bffa17 	ldw	r2,-24(fp)
   4498c:	01400304 	movi	r5,12
   44990:	1009883a 	mov	r4,r2
   44994:	00431240 	call	43124 <__mulsi3>
   44998:	8085883a 	add	r2,r16,r2
   4499c:	10800204 	addi	r2,r2,8
   449a0:	10c00017 	ldw	r3,0(r2)
   449a4:	e0bffb17 	ldw	r2,-20(fp)
   449a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   449ac:	e13ffa17 	ldw	r4,-24(fp)
   449b0:	00438700 	call	43870 <alt_release_fd>
  }
} 
   449b4:	0001883a 	nop
   449b8:	e6ffff04 	addi	sp,fp,-4
   449bc:	dfc00217 	ldw	ra,8(sp)
   449c0:	df000117 	ldw	fp,4(sp)
   449c4:	dc000017 	ldw	r16,0(sp)
   449c8:	dec00304 	addi	sp,sp,12
   449cc:	f800283a 	ret

000449d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   449d0:	defffb04 	addi	sp,sp,-20
   449d4:	dfc00415 	stw	ra,16(sp)
   449d8:	df000315 	stw	fp,12(sp)
   449dc:	df000304 	addi	fp,sp,12
   449e0:	e13ffd15 	stw	r4,-12(fp)
   449e4:	e17ffe15 	stw	r5,-8(fp)
   449e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   449ec:	01c07fc4 	movi	r7,511
   449f0:	01800044 	movi	r6,1
   449f4:	e17ffd17 	ldw	r5,-12(fp)
   449f8:	01000134 	movhi	r4,4
   449fc:	21170604 	addi	r4,r4,23576
   44a00:	00448ec0 	call	448ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44a04:	01c07fc4 	movi	r7,511
   44a08:	000d883a 	mov	r6,zero
   44a0c:	e17ffe17 	ldw	r5,-8(fp)
   44a10:	01000134 	movhi	r4,4
   44a14:	21170304 	addi	r4,r4,23564
   44a18:	00448ec0 	call	448ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44a1c:	01c07fc4 	movi	r7,511
   44a20:	01800044 	movi	r6,1
   44a24:	e17fff17 	ldw	r5,-4(fp)
   44a28:	01000134 	movhi	r4,4
   44a2c:	21170904 	addi	r4,r4,23588
   44a30:	00448ec0 	call	448ec <alt_open_fd>
}  
   44a34:	0001883a 	nop
   44a38:	e037883a 	mov	sp,fp
   44a3c:	dfc00117 	ldw	ra,4(sp)
   44a40:	df000017 	ldw	fp,0(sp)
   44a44:	dec00204 	addi	sp,sp,8
   44a48:	f800283a 	ret

00044a4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44a4c:	defffe04 	addi	sp,sp,-8
   44a50:	dfc00115 	stw	ra,4(sp)
   44a54:	df000015 	stw	fp,0(sp)
   44a58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44a5c:	d0a00917 	ldw	r2,-32732(gp)
   44a60:	10000326 	beq	r2,zero,44a70 <alt_get_errno+0x24>
   44a64:	d0a00917 	ldw	r2,-32732(gp)
   44a68:	103ee83a 	callr	r2
   44a6c:	00000106 	br	44a74 <alt_get_errno+0x28>
   44a70:	d0a2c304 	addi	r2,gp,-29940
}
   44a74:	e037883a 	mov	sp,fp
   44a78:	dfc00117 	ldw	ra,4(sp)
   44a7c:	df000017 	ldw	fp,0(sp)
   44a80:	dec00204 	addi	sp,sp,8
   44a84:	f800283a 	ret

00044a88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44a88:	defffb04 	addi	sp,sp,-20
   44a8c:	dfc00415 	stw	ra,16(sp)
   44a90:	df000315 	stw	fp,12(sp)
   44a94:	dc000215 	stw	r16,8(sp)
   44a98:	df000304 	addi	fp,sp,12
   44a9c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44aa0:	e0bffe17 	ldw	r2,-8(fp)
   44aa4:	10800217 	ldw	r2,8(r2)
   44aa8:	10d00034 	orhi	r3,r2,16384
   44aac:	e0bffe17 	ldw	r2,-8(fp)
   44ab0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44ab4:	e03ffd15 	stw	zero,-12(fp)
   44ab8:	00002306 	br	44b48 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44abc:	04000134 	movhi	r16,4
   44ac0:	84170304 	addi	r16,r16,23564
   44ac4:	e0bffd17 	ldw	r2,-12(fp)
   44ac8:	01400304 	movi	r5,12
   44acc:	1009883a 	mov	r4,r2
   44ad0:	00431240 	call	43124 <__mulsi3>
   44ad4:	8085883a 	add	r2,r16,r2
   44ad8:	10c00017 	ldw	r3,0(r2)
   44adc:	e0bffe17 	ldw	r2,-8(fp)
   44ae0:	10800017 	ldw	r2,0(r2)
   44ae4:	1880151e 	bne	r3,r2,44b3c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44ae8:	04000134 	movhi	r16,4
   44aec:	84170304 	addi	r16,r16,23564
   44af0:	e0bffd17 	ldw	r2,-12(fp)
   44af4:	01400304 	movi	r5,12
   44af8:	1009883a 	mov	r4,r2
   44afc:	00431240 	call	43124 <__mulsi3>
   44b00:	8085883a 	add	r2,r16,r2
   44b04:	10800204 	addi	r2,r2,8
   44b08:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44b0c:	10000b0e 	bge	r2,zero,44b3c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44b10:	01400304 	movi	r5,12
   44b14:	e13ffd17 	ldw	r4,-12(fp)
   44b18:	00431240 	call	43124 <__mulsi3>
   44b1c:	1007883a 	mov	r3,r2
   44b20:	00800134 	movhi	r2,4
   44b24:	10970304 	addi	r2,r2,23564
   44b28:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44b2c:	e0bffe17 	ldw	r2,-8(fp)
   44b30:	18800226 	beq	r3,r2,44b3c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44b34:	00bffcc4 	movi	r2,-13
   44b38:	00000806 	br	44b5c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44b3c:	e0bffd17 	ldw	r2,-12(fp)
   44b40:	10800044 	addi	r2,r2,1
   44b44:	e0bffd15 	stw	r2,-12(fp)
   44b48:	d0a00817 	ldw	r2,-32736(gp)
   44b4c:	1007883a 	mov	r3,r2
   44b50:	e0bffd17 	ldw	r2,-12(fp)
   44b54:	18bfd92e 	bgeu	r3,r2,44abc <__alt_data_end+0xfffd2abc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44b58:	0005883a 	mov	r2,zero
}
   44b5c:	e6ffff04 	addi	sp,fp,-4
   44b60:	dfc00217 	ldw	ra,8(sp)
   44b64:	df000117 	ldw	fp,4(sp)
   44b68:	dc000017 	ldw	r16,0(sp)
   44b6c:	dec00304 	addi	sp,sp,12
   44b70:	f800283a 	ret

00044b74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44b74:	defff604 	addi	sp,sp,-40
   44b78:	dfc00915 	stw	ra,36(sp)
   44b7c:	df000815 	stw	fp,32(sp)
   44b80:	df000804 	addi	fp,sp,32
   44b84:	e13ffd15 	stw	r4,-12(fp)
   44b88:	e17ffe15 	stw	r5,-8(fp)
   44b8c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44b90:	00bfffc4 	movi	r2,-1
   44b94:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44b98:	00bffb44 	movi	r2,-19
   44b9c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   44ba0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44ba4:	d1600604 	addi	r5,gp,-32744
   44ba8:	e13ffd17 	ldw	r4,-12(fp)
   44bac:	0044cf40 	call	44cf4 <alt_find_dev>
   44bb0:	e0bff815 	stw	r2,-32(fp)
   44bb4:	e0bff817 	ldw	r2,-32(fp)
   44bb8:	1000051e 	bne	r2,zero,44bd0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44bbc:	e13ffd17 	ldw	r4,-12(fp)
   44bc0:	0044d840 	call	44d84 <alt_find_file>
   44bc4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   44bc8:	00800044 	movi	r2,1
   44bcc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44bd0:	e0bff817 	ldw	r2,-32(fp)
   44bd4:	10002b26 	beq	r2,zero,44c84 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44bd8:	e13ff817 	ldw	r4,-32(fp)
   44bdc:	0044e8c0 	call	44e8c <alt_get_fd>
   44be0:	e0bff915 	stw	r2,-28(fp)
   44be4:	e0bff917 	ldw	r2,-28(fp)
   44be8:	1000030e 	bge	r2,zero,44bf8 <open+0x84>
    {
      status = index;
   44bec:	e0bff917 	ldw	r2,-28(fp)
   44bf0:	e0bffa15 	stw	r2,-24(fp)
   44bf4:	00002506 	br	44c8c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   44bf8:	01400304 	movi	r5,12
   44bfc:	e13ff917 	ldw	r4,-28(fp)
   44c00:	00431240 	call	43124 <__mulsi3>
   44c04:	1007883a 	mov	r3,r2
   44c08:	00800134 	movhi	r2,4
   44c0c:	10970304 	addi	r2,r2,23564
   44c10:	1885883a 	add	r2,r3,r2
   44c14:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44c18:	e0fffe17 	ldw	r3,-8(fp)
   44c1c:	00900034 	movhi	r2,16384
   44c20:	10bfffc4 	addi	r2,r2,-1
   44c24:	1886703a 	and	r3,r3,r2
   44c28:	e0bffc17 	ldw	r2,-16(fp)
   44c2c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44c30:	e0bffb17 	ldw	r2,-20(fp)
   44c34:	1000051e 	bne	r2,zero,44c4c <open+0xd8>
   44c38:	e13ffc17 	ldw	r4,-16(fp)
   44c3c:	0044a880 	call	44a88 <alt_file_locked>
   44c40:	e0bffa15 	stw	r2,-24(fp)
   44c44:	e0bffa17 	ldw	r2,-24(fp)
   44c48:	10001016 	blt	r2,zero,44c8c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44c4c:	e0bff817 	ldw	r2,-32(fp)
   44c50:	10800317 	ldw	r2,12(r2)
   44c54:	10000826 	beq	r2,zero,44c78 <open+0x104>
   44c58:	e0bff817 	ldw	r2,-32(fp)
   44c5c:	10800317 	ldw	r2,12(r2)
   44c60:	e1ffff17 	ldw	r7,-4(fp)
   44c64:	e1bffe17 	ldw	r6,-8(fp)
   44c68:	e17ffd17 	ldw	r5,-12(fp)
   44c6c:	e13ffc17 	ldw	r4,-16(fp)
   44c70:	103ee83a 	callr	r2
   44c74:	00000106 	br	44c7c <open+0x108>
   44c78:	0005883a 	mov	r2,zero
   44c7c:	e0bffa15 	stw	r2,-24(fp)
   44c80:	00000206 	br	44c8c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44c84:	00bffb44 	movi	r2,-19
   44c88:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44c8c:	e0bffa17 	ldw	r2,-24(fp)
   44c90:	1000090e 	bge	r2,zero,44cb8 <open+0x144>
  {
    alt_release_fd (index);  
   44c94:	e13ff917 	ldw	r4,-28(fp)
   44c98:	00438700 	call	43870 <alt_release_fd>
    ALT_ERRNO = -status;
   44c9c:	0044a4c0 	call	44a4c <alt_get_errno>
   44ca0:	1007883a 	mov	r3,r2
   44ca4:	e0bffa17 	ldw	r2,-24(fp)
   44ca8:	0085c83a 	sub	r2,zero,r2
   44cac:	18800015 	stw	r2,0(r3)
    return -1;
   44cb0:	00bfffc4 	movi	r2,-1
   44cb4:	00000106 	br	44cbc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   44cb8:	e0bff917 	ldw	r2,-28(fp)
}
   44cbc:	e037883a 	mov	sp,fp
   44cc0:	dfc00117 	ldw	ra,4(sp)
   44cc4:	df000017 	ldw	fp,0(sp)
   44cc8:	dec00204 	addi	sp,sp,8
   44ccc:	f800283a 	ret

00044cd0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   44cd0:	deffff04 	addi	sp,sp,-4
   44cd4:	df000015 	stw	fp,0(sp)
   44cd8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44cdc:	000170fa 	wrctl	ienable,zero
}
   44ce0:	0001883a 	nop
   44ce4:	e037883a 	mov	sp,fp
   44ce8:	df000017 	ldw	fp,0(sp)
   44cec:	dec00104 	addi	sp,sp,4
   44cf0:	f800283a 	ret

00044cf4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44cf4:	defffa04 	addi	sp,sp,-24
   44cf8:	dfc00515 	stw	ra,20(sp)
   44cfc:	df000415 	stw	fp,16(sp)
   44d00:	df000404 	addi	fp,sp,16
   44d04:	e13ffe15 	stw	r4,-8(fp)
   44d08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44d0c:	e0bfff17 	ldw	r2,-4(fp)
   44d10:	10800017 	ldw	r2,0(r2)
   44d14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44d18:	e13ffe17 	ldw	r4,-8(fp)
   44d1c:	00404140 	call	40414 <strlen>
   44d20:	10800044 	addi	r2,r2,1
   44d24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44d28:	00000d06 	br	44d60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44d2c:	e0bffc17 	ldw	r2,-16(fp)
   44d30:	10800217 	ldw	r2,8(r2)
   44d34:	e0fffd17 	ldw	r3,-12(fp)
   44d38:	180d883a 	mov	r6,r3
   44d3c:	e17ffe17 	ldw	r5,-8(fp)
   44d40:	1009883a 	mov	r4,r2
   44d44:	00450380 	call	45038 <memcmp>
   44d48:	1000021e 	bne	r2,zero,44d54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   44d4c:	e0bffc17 	ldw	r2,-16(fp)
   44d50:	00000706 	br	44d70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   44d54:	e0bffc17 	ldw	r2,-16(fp)
   44d58:	10800017 	ldw	r2,0(r2)
   44d5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44d60:	e0fffc17 	ldw	r3,-16(fp)
   44d64:	e0bfff17 	ldw	r2,-4(fp)
   44d68:	18bff01e 	bne	r3,r2,44d2c <__alt_data_end+0xfffd2d2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   44d6c:	0005883a 	mov	r2,zero
}
   44d70:	e037883a 	mov	sp,fp
   44d74:	dfc00117 	ldw	ra,4(sp)
   44d78:	df000017 	ldw	fp,0(sp)
   44d7c:	dec00204 	addi	sp,sp,8
   44d80:	f800283a 	ret

00044d84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   44d84:	defffb04 	addi	sp,sp,-20
   44d88:	dfc00415 	stw	ra,16(sp)
   44d8c:	df000315 	stw	fp,12(sp)
   44d90:	df000304 	addi	fp,sp,12
   44d94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   44d98:	d0a00417 	ldw	r2,-32752(gp)
   44d9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44da0:	00003106 	br	44e68 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   44da4:	e0bffd17 	ldw	r2,-12(fp)
   44da8:	10800217 	ldw	r2,8(r2)
   44dac:	1009883a 	mov	r4,r2
   44db0:	00404140 	call	40414 <strlen>
   44db4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   44db8:	e0bffd17 	ldw	r2,-12(fp)
   44dbc:	10c00217 	ldw	r3,8(r2)
   44dc0:	e0bffe17 	ldw	r2,-8(fp)
   44dc4:	10bfffc4 	addi	r2,r2,-1
   44dc8:	1885883a 	add	r2,r3,r2
   44dcc:	10800003 	ldbu	r2,0(r2)
   44dd0:	10803fcc 	andi	r2,r2,255
   44dd4:	1080201c 	xori	r2,r2,128
   44dd8:	10bfe004 	addi	r2,r2,-128
   44ddc:	10800bd8 	cmpnei	r2,r2,47
   44de0:	1000031e 	bne	r2,zero,44df0 <alt_find_file+0x6c>
    {
      len -= 1;
   44de4:	e0bffe17 	ldw	r2,-8(fp)
   44de8:	10bfffc4 	addi	r2,r2,-1
   44dec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44df0:	e0bffe17 	ldw	r2,-8(fp)
   44df4:	e0ffff17 	ldw	r3,-4(fp)
   44df8:	1885883a 	add	r2,r3,r2
   44dfc:	10800003 	ldbu	r2,0(r2)
   44e00:	10803fcc 	andi	r2,r2,255
   44e04:	1080201c 	xori	r2,r2,128
   44e08:	10bfe004 	addi	r2,r2,-128
   44e0c:	10800be0 	cmpeqi	r2,r2,47
   44e10:	1000081e 	bne	r2,zero,44e34 <alt_find_file+0xb0>
   44e14:	e0bffe17 	ldw	r2,-8(fp)
   44e18:	e0ffff17 	ldw	r3,-4(fp)
   44e1c:	1885883a 	add	r2,r3,r2
   44e20:	10800003 	ldbu	r2,0(r2)
   44e24:	10803fcc 	andi	r2,r2,255
   44e28:	1080201c 	xori	r2,r2,128
   44e2c:	10bfe004 	addi	r2,r2,-128
   44e30:	10000a1e 	bne	r2,zero,44e5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   44e34:	e0bffd17 	ldw	r2,-12(fp)
   44e38:	10800217 	ldw	r2,8(r2)
   44e3c:	e0fffe17 	ldw	r3,-8(fp)
   44e40:	180d883a 	mov	r6,r3
   44e44:	e17fff17 	ldw	r5,-4(fp)
   44e48:	1009883a 	mov	r4,r2
   44e4c:	00450380 	call	45038 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44e50:	1000021e 	bne	r2,zero,44e5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   44e54:	e0bffd17 	ldw	r2,-12(fp)
   44e58:	00000706 	br	44e78 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   44e5c:	e0bffd17 	ldw	r2,-12(fp)
   44e60:	10800017 	ldw	r2,0(r2)
   44e64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44e68:	e0fffd17 	ldw	r3,-12(fp)
   44e6c:	d0a00404 	addi	r2,gp,-32752
   44e70:	18bfcc1e 	bne	r3,r2,44da4 <__alt_data_end+0xfffd2da4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   44e74:	0005883a 	mov	r2,zero
}
   44e78:	e037883a 	mov	sp,fp
   44e7c:	dfc00117 	ldw	ra,4(sp)
   44e80:	df000017 	ldw	fp,0(sp)
   44e84:	dec00204 	addi	sp,sp,8
   44e88:	f800283a 	ret

00044e8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   44e8c:	defffa04 	addi	sp,sp,-24
   44e90:	dfc00515 	stw	ra,20(sp)
   44e94:	df000415 	stw	fp,16(sp)
   44e98:	dc000315 	stw	r16,12(sp)
   44e9c:	df000404 	addi	fp,sp,16
   44ea0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   44ea4:	00bffa04 	movi	r2,-24
   44ea8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44eac:	e03ffc15 	stw	zero,-16(fp)
   44eb0:	00001d06 	br	44f28 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   44eb4:	04000134 	movhi	r16,4
   44eb8:	84170304 	addi	r16,r16,23564
   44ebc:	e0bffc17 	ldw	r2,-16(fp)
   44ec0:	01400304 	movi	r5,12
   44ec4:	1009883a 	mov	r4,r2
   44ec8:	00431240 	call	43124 <__mulsi3>
   44ecc:	8085883a 	add	r2,r16,r2
   44ed0:	10800017 	ldw	r2,0(r2)
   44ed4:	1000111e 	bne	r2,zero,44f1c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   44ed8:	04000134 	movhi	r16,4
   44edc:	84170304 	addi	r16,r16,23564
   44ee0:	e0bffc17 	ldw	r2,-16(fp)
   44ee4:	01400304 	movi	r5,12
   44ee8:	1009883a 	mov	r4,r2
   44eec:	00431240 	call	43124 <__mulsi3>
   44ef0:	8085883a 	add	r2,r16,r2
   44ef4:	e0fffe17 	ldw	r3,-8(fp)
   44ef8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   44efc:	d0e00817 	ldw	r3,-32736(gp)
   44f00:	e0bffc17 	ldw	r2,-16(fp)
   44f04:	1880020e 	bge	r3,r2,44f10 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   44f08:	e0bffc17 	ldw	r2,-16(fp)
   44f0c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   44f10:	e0bffc17 	ldw	r2,-16(fp)
   44f14:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   44f18:	00000606 	br	44f34 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44f1c:	e0bffc17 	ldw	r2,-16(fp)
   44f20:	10800044 	addi	r2,r2,1
   44f24:	e0bffc15 	stw	r2,-16(fp)
   44f28:	e0bffc17 	ldw	r2,-16(fp)
   44f2c:	10800810 	cmplti	r2,r2,32
   44f30:	103fe01e 	bne	r2,zero,44eb4 <__alt_data_end+0xfffd2eb4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   44f34:	e0bffd17 	ldw	r2,-12(fp)
}
   44f38:	e6ffff04 	addi	sp,fp,-4
   44f3c:	dfc00217 	ldw	ra,8(sp)
   44f40:	df000117 	ldw	fp,4(sp)
   44f44:	dc000017 	ldw	r16,0(sp)
   44f48:	dec00304 	addi	sp,sp,12
   44f4c:	f800283a 	ret

00044f50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   44f50:	defffe04 	addi	sp,sp,-8
   44f54:	df000115 	stw	fp,4(sp)
   44f58:	df000104 	addi	fp,sp,4
   44f5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   44f60:	e0bfff17 	ldw	r2,-4(fp)
   44f64:	10bffe84 	addi	r2,r2,-6
   44f68:	10c00428 	cmpgeui	r3,r2,16
   44f6c:	18001a1e 	bne	r3,zero,44fd8 <alt_exception_cause_generated_bad_addr+0x88>
   44f70:	100690ba 	slli	r3,r2,2
   44f74:	00800134 	movhi	r2,4
   44f78:	1093e204 	addi	r2,r2,20360
   44f7c:	1885883a 	add	r2,r3,r2
   44f80:	10800017 	ldw	r2,0(r2)
   44f84:	1000683a 	jmp	r2
   44f88:	00044fc8 	cmpgei	zero,zero,4415
   44f8c:	00044fc8 	cmpgei	zero,zero,4415
   44f90:	00044fd8 	cmpnei	zero,zero,4415
   44f94:	00044fd8 	cmpnei	zero,zero,4415
   44f98:	00044fd8 	cmpnei	zero,zero,4415
   44f9c:	00044fc8 	cmpgei	zero,zero,4415
   44fa0:	00044fd0 	cmplti	zero,zero,4415
   44fa4:	00044fd8 	cmpnei	zero,zero,4415
   44fa8:	00044fc8 	cmpgei	zero,zero,4415
   44fac:	00044fc8 	cmpgei	zero,zero,4415
   44fb0:	00044fd8 	cmpnei	zero,zero,4415
   44fb4:	00044fc8 	cmpgei	zero,zero,4415
   44fb8:	00044fd0 	cmplti	zero,zero,4415
   44fbc:	00044fd8 	cmpnei	zero,zero,4415
   44fc0:	00044fd8 	cmpnei	zero,zero,4415
   44fc4:	00044fc8 	cmpgei	zero,zero,4415
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   44fc8:	00800044 	movi	r2,1
   44fcc:	00000306 	br	44fdc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   44fd0:	0005883a 	mov	r2,zero
   44fd4:	00000106 	br	44fdc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   44fd8:	0005883a 	mov	r2,zero
  }
}
   44fdc:	e037883a 	mov	sp,fp
   44fe0:	df000017 	ldw	fp,0(sp)
   44fe4:	dec00104 	addi	sp,sp,4
   44fe8:	f800283a 	ret

00044fec <atexit>:
   44fec:	200b883a 	mov	r5,r4
   44ff0:	000f883a 	mov	r7,zero
   44ff4:	000d883a 	mov	r6,zero
   44ff8:	0009883a 	mov	r4,zero
   44ffc:	00450b41 	jmpi	450b4 <__register_exitproc>

00045000 <exit>:
   45000:	defffe04 	addi	sp,sp,-8
   45004:	000b883a 	mov	r5,zero
   45008:	dc000015 	stw	r16,0(sp)
   4500c:	dfc00115 	stw	ra,4(sp)
   45010:	2021883a 	mov	r16,r4
   45014:	00451cc0 	call	451cc <__call_exitprocs>
   45018:	00800134 	movhi	r2,4
   4501c:	10979404 	addi	r2,r2,24144
   45020:	11000017 	ldw	r4,0(r2)
   45024:	20800f17 	ldw	r2,60(r4)
   45028:	10000126 	beq	r2,zero,45030 <exit+0x30>
   4502c:	103ee83a 	callr	r2
   45030:	8009883a 	mov	r4,r16
   45034:	004534c0 	call	4534c <_exit>

00045038 <memcmp>:
   45038:	01c000c4 	movi	r7,3
   4503c:	3980192e 	bgeu	r7,r6,450a4 <memcmp+0x6c>
   45040:	2144b03a 	or	r2,r4,r5
   45044:	11c4703a 	and	r2,r2,r7
   45048:	10000f26 	beq	r2,zero,45088 <memcmp+0x50>
   4504c:	20800003 	ldbu	r2,0(r4)
   45050:	28c00003 	ldbu	r3,0(r5)
   45054:	10c0151e 	bne	r2,r3,450ac <memcmp+0x74>
   45058:	31bfff84 	addi	r6,r6,-2
   4505c:	01ffffc4 	movi	r7,-1
   45060:	00000406 	br	45074 <memcmp+0x3c>
   45064:	20800003 	ldbu	r2,0(r4)
   45068:	28c00003 	ldbu	r3,0(r5)
   4506c:	31bfffc4 	addi	r6,r6,-1
   45070:	10c00e1e 	bne	r2,r3,450ac <memcmp+0x74>
   45074:	21000044 	addi	r4,r4,1
   45078:	29400044 	addi	r5,r5,1
   4507c:	31fff91e 	bne	r6,r7,45064 <__alt_data_end+0xfffd3064>
   45080:	0005883a 	mov	r2,zero
   45084:	f800283a 	ret
   45088:	20c00017 	ldw	r3,0(r4)
   4508c:	28800017 	ldw	r2,0(r5)
   45090:	18bfee1e 	bne	r3,r2,4504c <__alt_data_end+0xfffd304c>
   45094:	31bfff04 	addi	r6,r6,-4
   45098:	21000104 	addi	r4,r4,4
   4509c:	29400104 	addi	r5,r5,4
   450a0:	39bff936 	bltu	r7,r6,45088 <__alt_data_end+0xfffd3088>
   450a4:	303fe91e 	bne	r6,zero,4504c <__alt_data_end+0xfffd304c>
   450a8:	003ff506 	br	45080 <__alt_data_end+0xfffd3080>
   450ac:	10c5c83a 	sub	r2,r2,r3
   450b0:	f800283a 	ret

000450b4 <__register_exitproc>:
   450b4:	defffa04 	addi	sp,sp,-24
   450b8:	dc000315 	stw	r16,12(sp)
   450bc:	04000134 	movhi	r16,4
   450c0:	84179404 	addi	r16,r16,24144
   450c4:	80c00017 	ldw	r3,0(r16)
   450c8:	dc400415 	stw	r17,16(sp)
   450cc:	dfc00515 	stw	ra,20(sp)
   450d0:	18805217 	ldw	r2,328(r3)
   450d4:	2023883a 	mov	r17,r4
   450d8:	10003726 	beq	r2,zero,451b8 <__register_exitproc+0x104>
   450dc:	10c00117 	ldw	r3,4(r2)
   450e0:	010007c4 	movi	r4,31
   450e4:	20c00e16 	blt	r4,r3,45120 <__register_exitproc+0x6c>
   450e8:	1a000044 	addi	r8,r3,1
   450ec:	8800221e 	bne	r17,zero,45178 <__register_exitproc+0xc4>
   450f0:	18c00084 	addi	r3,r3,2
   450f4:	18c7883a 	add	r3,r3,r3
   450f8:	18c7883a 	add	r3,r3,r3
   450fc:	12000115 	stw	r8,4(r2)
   45100:	10c7883a 	add	r3,r2,r3
   45104:	19400015 	stw	r5,0(r3)
   45108:	0005883a 	mov	r2,zero
   4510c:	dfc00517 	ldw	ra,20(sp)
   45110:	dc400417 	ldw	r17,16(sp)
   45114:	dc000317 	ldw	r16,12(sp)
   45118:	dec00604 	addi	sp,sp,24
   4511c:	f800283a 	ret
   45120:	00800034 	movhi	r2,0
   45124:	10800004 	addi	r2,r2,0
   45128:	10002626 	beq	r2,zero,451c4 <__register_exitproc+0x110>
   4512c:	01006404 	movi	r4,400
   45130:	d9400015 	stw	r5,0(sp)
   45134:	d9800115 	stw	r6,4(sp)
   45138:	d9c00215 	stw	r7,8(sp)
   4513c:	00000000 	call	0 <__alt_mem_ram-0x40000>
   45140:	d9400017 	ldw	r5,0(sp)
   45144:	d9800117 	ldw	r6,4(sp)
   45148:	d9c00217 	ldw	r7,8(sp)
   4514c:	10001d26 	beq	r2,zero,451c4 <__register_exitproc+0x110>
   45150:	81000017 	ldw	r4,0(r16)
   45154:	10000115 	stw	zero,4(r2)
   45158:	02000044 	movi	r8,1
   4515c:	22405217 	ldw	r9,328(r4)
   45160:	0007883a 	mov	r3,zero
   45164:	12400015 	stw	r9,0(r2)
   45168:	20805215 	stw	r2,328(r4)
   4516c:	10006215 	stw	zero,392(r2)
   45170:	10006315 	stw	zero,396(r2)
   45174:	883fde26 	beq	r17,zero,450f0 <__alt_data_end+0xfffd30f0>
   45178:	18c9883a 	add	r4,r3,r3
   4517c:	2109883a 	add	r4,r4,r4
   45180:	1109883a 	add	r4,r2,r4
   45184:	21802215 	stw	r6,136(r4)
   45188:	01800044 	movi	r6,1
   4518c:	12406217 	ldw	r9,392(r2)
   45190:	30cc983a 	sll	r6,r6,r3
   45194:	4992b03a 	or	r9,r9,r6
   45198:	12406215 	stw	r9,392(r2)
   4519c:	21c04215 	stw	r7,264(r4)
   451a0:	01000084 	movi	r4,2
   451a4:	893fd21e 	bne	r17,r4,450f0 <__alt_data_end+0xfffd30f0>
   451a8:	11006317 	ldw	r4,396(r2)
   451ac:	218cb03a 	or	r6,r4,r6
   451b0:	11806315 	stw	r6,396(r2)
   451b4:	003fce06 	br	450f0 <__alt_data_end+0xfffd30f0>
   451b8:	18805304 	addi	r2,r3,332
   451bc:	18805215 	stw	r2,328(r3)
   451c0:	003fc606 	br	450dc <__alt_data_end+0xfffd30dc>
   451c4:	00bfffc4 	movi	r2,-1
   451c8:	003fd006 	br	4510c <__alt_data_end+0xfffd310c>

000451cc <__call_exitprocs>:
   451cc:	defff504 	addi	sp,sp,-44
   451d0:	df000915 	stw	fp,36(sp)
   451d4:	dd400615 	stw	r21,24(sp)
   451d8:	dc800315 	stw	r18,12(sp)
   451dc:	dfc00a15 	stw	ra,40(sp)
   451e0:	ddc00815 	stw	r23,32(sp)
   451e4:	dd800715 	stw	r22,28(sp)
   451e8:	dd000515 	stw	r20,20(sp)
   451ec:	dcc00415 	stw	r19,16(sp)
   451f0:	dc400215 	stw	r17,8(sp)
   451f4:	dc000115 	stw	r16,4(sp)
   451f8:	d9000015 	stw	r4,0(sp)
   451fc:	2839883a 	mov	fp,r5
   45200:	04800044 	movi	r18,1
   45204:	057fffc4 	movi	r21,-1
   45208:	00800134 	movhi	r2,4
   4520c:	10979404 	addi	r2,r2,24144
   45210:	12000017 	ldw	r8,0(r2)
   45214:	45005217 	ldw	r20,328(r8)
   45218:	44c05204 	addi	r19,r8,328
   4521c:	a0001c26 	beq	r20,zero,45290 <__call_exitprocs+0xc4>
   45220:	a0800117 	ldw	r2,4(r20)
   45224:	15ffffc4 	addi	r23,r2,-1
   45228:	b8000d16 	blt	r23,zero,45260 <__call_exitprocs+0x94>
   4522c:	14000044 	addi	r16,r2,1
   45230:	8421883a 	add	r16,r16,r16
   45234:	8421883a 	add	r16,r16,r16
   45238:	84402004 	addi	r17,r16,128
   4523c:	a463883a 	add	r17,r20,r17
   45240:	a421883a 	add	r16,r20,r16
   45244:	e0001e26 	beq	fp,zero,452c0 <__call_exitprocs+0xf4>
   45248:	80804017 	ldw	r2,256(r16)
   4524c:	e0801c26 	beq	fp,r2,452c0 <__call_exitprocs+0xf4>
   45250:	bdffffc4 	addi	r23,r23,-1
   45254:	843fff04 	addi	r16,r16,-4
   45258:	8c7fff04 	addi	r17,r17,-4
   4525c:	bd7ff91e 	bne	r23,r21,45244 <__alt_data_end+0xfffd3244>
   45260:	00800034 	movhi	r2,0
   45264:	10800004 	addi	r2,r2,0
   45268:	10000926 	beq	r2,zero,45290 <__call_exitprocs+0xc4>
   4526c:	a0800117 	ldw	r2,4(r20)
   45270:	1000301e 	bne	r2,zero,45334 <__call_exitprocs+0x168>
   45274:	a0800017 	ldw	r2,0(r20)
   45278:	10003226 	beq	r2,zero,45344 <__call_exitprocs+0x178>
   4527c:	a009883a 	mov	r4,r20
   45280:	98800015 	stw	r2,0(r19)
   45284:	00000000 	call	0 <__alt_mem_ram-0x40000>
   45288:	9d000017 	ldw	r20,0(r19)
   4528c:	a03fe41e 	bne	r20,zero,45220 <__alt_data_end+0xfffd3220>
   45290:	dfc00a17 	ldw	ra,40(sp)
   45294:	df000917 	ldw	fp,36(sp)
   45298:	ddc00817 	ldw	r23,32(sp)
   4529c:	dd800717 	ldw	r22,28(sp)
   452a0:	dd400617 	ldw	r21,24(sp)
   452a4:	dd000517 	ldw	r20,20(sp)
   452a8:	dcc00417 	ldw	r19,16(sp)
   452ac:	dc800317 	ldw	r18,12(sp)
   452b0:	dc400217 	ldw	r17,8(sp)
   452b4:	dc000117 	ldw	r16,4(sp)
   452b8:	dec00b04 	addi	sp,sp,44
   452bc:	f800283a 	ret
   452c0:	a0800117 	ldw	r2,4(r20)
   452c4:	80c00017 	ldw	r3,0(r16)
   452c8:	10bfffc4 	addi	r2,r2,-1
   452cc:	15c01426 	beq	r2,r23,45320 <__call_exitprocs+0x154>
   452d0:	80000015 	stw	zero,0(r16)
   452d4:	183fde26 	beq	r3,zero,45250 <__alt_data_end+0xfffd3250>
   452d8:	95c8983a 	sll	r4,r18,r23
   452dc:	a0806217 	ldw	r2,392(r20)
   452e0:	a5800117 	ldw	r22,4(r20)
   452e4:	2084703a 	and	r2,r4,r2
   452e8:	10000b26 	beq	r2,zero,45318 <__call_exitprocs+0x14c>
   452ec:	a0806317 	ldw	r2,396(r20)
   452f0:	2088703a 	and	r4,r4,r2
   452f4:	20000c1e 	bne	r4,zero,45328 <__call_exitprocs+0x15c>
   452f8:	89400017 	ldw	r5,0(r17)
   452fc:	d9000017 	ldw	r4,0(sp)
   45300:	183ee83a 	callr	r3
   45304:	a0800117 	ldw	r2,4(r20)
   45308:	15bfbf1e 	bne	r2,r22,45208 <__alt_data_end+0xfffd3208>
   4530c:	98800017 	ldw	r2,0(r19)
   45310:	153fcf26 	beq	r2,r20,45250 <__alt_data_end+0xfffd3250>
   45314:	003fbc06 	br	45208 <__alt_data_end+0xfffd3208>
   45318:	183ee83a 	callr	r3
   4531c:	003ff906 	br	45304 <__alt_data_end+0xfffd3304>
   45320:	a5c00115 	stw	r23,4(r20)
   45324:	003feb06 	br	452d4 <__alt_data_end+0xfffd32d4>
   45328:	89000017 	ldw	r4,0(r17)
   4532c:	183ee83a 	callr	r3
   45330:	003ff406 	br	45304 <__alt_data_end+0xfffd3304>
   45334:	a0800017 	ldw	r2,0(r20)
   45338:	a027883a 	mov	r19,r20
   4533c:	1029883a 	mov	r20,r2
   45340:	003fb606 	br	4521c <__alt_data_end+0xfffd321c>
   45344:	0005883a 	mov	r2,zero
   45348:	003ffb06 	br	45338 <__alt_data_end+0xfffd3338>

0004534c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4534c:	defffd04 	addi	sp,sp,-12
   45350:	df000215 	stw	fp,8(sp)
   45354:	df000204 	addi	fp,sp,8
   45358:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4535c:	0001883a 	nop
   45360:	e0bfff17 	ldw	r2,-4(fp)
   45364:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45368:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4536c:	10000226 	beq	r2,zero,45378 <_exit+0x2c>
    ALT_SIM_FAIL();
   45370:	002af070 	cmpltui	zero,zero,43969
   45374:	00000106 	br	4537c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45378:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4537c:	003fff06 	br	4537c <__alt_data_end+0xfffd337c>

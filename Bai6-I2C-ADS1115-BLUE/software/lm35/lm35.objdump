
lm35.elf:     file format elf32-littlenios2
lm35.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00016ac0 memsz 0x00016ac0 flags r-x
    LOAD off    0x00017ae0 vaddr 0x00056ae0 paddr 0x0005865c align 2**12
         filesz 0x00001b7c memsz 0x00001b7c flags rw-
    LOAD off    0x0001a1d8 vaddr 0x0005a1d8 paddr 0x0005a1d8 align 2**12
         filesz 0x00000000 memsz 0x000001dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016500  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  00056730  00056730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b7c  00056ae0  0005865c  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001dc  0005a1d8  0005a1d8  0001a1d8  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  0005a3b4  0005a3b4  0001965c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001965c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010b8  00000000  00000000  00019680  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002aa12  00000000  00000000  0001a738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aac6  00000000  00000000  0004514a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000de28  00000000  00000000  0004fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002c38  00000000  00000000  0005da38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000492e  00000000  00000000  00060670  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001dfa7  00000000  00000000  00064f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00082f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c68  00000000  00000000  00082f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00088bb2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00088bb5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00088bb8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00088bb9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00088bba  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00088bbe  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00088bc2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000005  00000000  00000000  00088bc6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000005  00000000  00000000  00088bcb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000005  00000000  00000000  00088bd0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00088bd5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  00088bd8  2**0
                  CONTENTS, READONLY
 29 .jdi          000033f8  00000000  00000000  00088c09  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00066b5a  00000000  00000000  0008c001  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00056730 l    d  .rodata	00000000 .rodata
00056ae0 l    d  .rwdata	00000000 .rwdata
0005a1d8 l    d  .bss	00000000 .bss
0005a3b4 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lm35_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000568be l     O .rodata	00000010 zeroes.4389
000568ce l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
000568de l     O .rodata	00000010 zeroes.4404
00045d04 l     F .text	000000bc __sbprintf
000568ee l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00045f14 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047a6c l     F .text	00000008 __fp_unlock
00047a80 l     F .text	0000019c __sinit.part.1
00047c1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00056aec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00056f30 l     O .rwdata	00000020 lc_ctype_charset
00056f10 l     O .rwdata	00000020 lc_message_charset
00056f50 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00056920 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00056a44 l     O .rodata	00000010 zeroes.4333
00056a54 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0004c7c8 l     F .text	000000fc __sprint_r.part.0
00056a64 l     O .rodata	00000010 zeroes.4349
0004de04 l     F .text	000000bc __sbprintf
00056a74 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00051c0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00051d20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00051d4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00051e40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00051f28 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00052014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000521f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00058644 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00052464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000525a0 l     F .text	00000034 alt_dev_reg
00057538 l     O .rwdata	00000038 I2C
00057570 l     O .rwdata	00001060 DEBUG
000585d0 l     O .rwdata	0000002c RS232
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00052688 l     F .text	00000110 optional_irq_callback
000527e8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000544c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000546d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00054d08 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00055430 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00055920 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00055a80 l     F .text	0000003c alt_get_errno
00055abc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005a224 g     O .bss	00000004 alt_instruction_exception_handler
00041508 g     F .text	00000018 putchar
0004a734 g     F .text	00000074 _mprec_log10
0004a820 g     F .text	0000008c __any_on
0004e510 g     F .text	00000054 _isatty_r
0005692c g     O .rodata	00000028 __mprec_tinytens
0005212c g     F .text	0000007c alt_main
00041520 g     F .text	000000c0 _puts_r
0005a2b4 g     O .bss	00000100 alt_irq
0004e564 g     F .text	00000060 _lseek_r
0005865c g       *ABS*	00000000 __flash_rwdata_start
00050648 g     F .text	00000088 .hidden __eqdf2
0005a3b4 g       *ABS*	00000000 __alt_heap_start
000414c4 g     F .text	0000003c printf
0004e624 g     F .text	0000009c _wcrtomb_r
0004b118 g     F .text	0000005c __sseek
00047dcc g     F .text	00000010 __sinit
0004dec0 g     F .text	00000140 __swbuf_r
000488a0 g     F .text	0000007c _setlocale_r
00047c24 g     F .text	00000078 __sfmoreglue
00052ee0 g     F .text	000000a8 alt_avalon_i2c_rx_read
0005a1dc g     O .bss	00000004 ADC_A0
000521cc g     F .text	00000024 __malloc_unlock
0005502c g     F .text	00000090 alt_up_rs232_read_fd
000408f4 g     F .text	00000440 .hidden __divsf3
000540f8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00052c64 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00049570 g     F .text	0000015c memmove
00047db4 g     F .text	00000018 _cleanup
00053948 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
000497f4 g     F .text	000000a8 _Balloc
00041164 g     F .text	00000070 .hidden __fixsfsi
000506d0 g     F .text	000000dc .hidden __gtdf2
00056110 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000585fd g     O .rwdata	00000001 RegisterAddr
0004e4b4 g     F .text	0000005c _fstat_r
0005a208 g     O .bss	00000004 errno
0004b094 g     F .text	00000008 __seofread
0004b428 g     F .text	000013a0 ___svfiprintf_internal_r
0005a250 g     O .bss	00000064 reciver
0005a210 g     O .bss	00000004 alt_argv
000605fc g       *ABS*	00000000 _gp
0005413c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00052df4 g     F .text	00000044 alt_avalon_i2c_is_busy
000573b8 g     O .rwdata	00000180 alt_fd_list
0004063c g     F .text	00000084 rs232_read_str
00041500 g     F .text	00000008 _putchar_r
00052b98 g     F .text	000000cc alt_avalon_i2c_master_config_set
000555d0 g     F .text	00000090 alt_find_dev
00049428 g     F .text	00000148 memcpy
00047a74 g     F .text	0000000c _cleanup_r
00051a88 g     F .text	000000dc .hidden __floatsidf
00055a04 g     F .text	0000007c alt_io_redirect
000507ac g     F .text	000000f4 .hidden __ltdf2
00056730 g       *ABS*	00000000 __DTOR_END__
00053788 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00054fb8 g     F .text	00000074 alt_up_rs232_read_data
000415e0 g     F .text	00000014 puts
00056300 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0005860a g     O .rwdata	00000003 config_8BIT_HIGH
0004af78 g     F .text	00000074 __fpclassifyd
0004a690 g     F .text	000000a4 __ratio
0005a1e0 g     O .bss	00000005 chuoi
0004dde8 g     F .text	0000001c __vfiprintf_internal
000548c8 g     F .text	0000021c altera_avalon_jtag_uart_read
00041494 g     F .text	00000030 _printf_r
00040838 g     F .text	00000064 .hidden __udivsi3
00051e7c g     F .text	000000ac isatty
0005697c g     O .rodata	000000c8 __mprec_tens
0004891c g     F .text	0000000c __locale_charset
0005a1d8 g     O .bss	00000001 cnt
00052a04 g     F .text	00000098 alt_avalon_i2c_enable
0005a204 g     O .bss	00000004 __malloc_top_pad
0005402c g     F .text	00000068 alt_avalon_i2c_int_disable
0005861c g     O .rwdata	00000004 __mb_cur_max
0004894c g     F .text	0000000c _localeconv_r
00049c28 g     F .text	0000003c __i2b
00048250 g     F .text	000004c8 __sfvwrite_r
0004afec g     F .text	00000054 _sbrk_r
0004e5c4 g     F .text	00000060 _read_r
0005863c g     O .rwdata	00000004 alt_max_fd
00054f34 g     F .text	00000044 alt_up_rs232_check_parity
0004e1a8 g     F .text	000000f0 _fclose_r
00047a3c g     F .text	00000030 fflush
0005a200 g     O .bss	00000004 __malloc_max_sbrked_mem
00053b54 g     F .text	00000210 alt_avalon_i2c_master_receive
000412f8 g     F .text	00000110 .hidden __extendsfdf2
0004f3cc g     F .text	000008ac .hidden __adddf3
00058601 g     O .rwdata	00000003 config_A1
0004a438 g     F .text	0000010c __b2d
0004ee08 g     F .text	000005c4 .hidden __umoddi3
00052050 g     F .text	000000dc lseek
00054094 g     F .text	00000064 alt_avalon_i2c_int_enable
00058614 g     O .rwdata	00000004 _global_impure_ptr
0004aa14 g     F .text	00000564 _realloc_r
0005a3b4 g       *ABS*	00000000 __bss_end
00055830 g     F .text	000000f0 alt_iic_isr_register
00056008 g     F .text	00000108 alt_tick
0004e80c g     F .text	000005fc .hidden __udivdi3
00053f54 g     F .text	00000058 alt_avalon_i2c_int_status_get
0004e410 g     F .text	00000024 _fputwc_r
00056954 g     O .rodata	00000028 __mprec_bigtens
00049a0c g     F .text	00000104 __s2b
00051b64 g     F .text	000000a8 .hidden __floatunsidf
0004a178 g     F .text	00000060 __mcmp
00047dec g     F .text	00000018 __fp_lock_all
000557e4 g     F .text	0000004c alt_ic_irq_enabled
00055f6c g     F .text	0000009c alt_alarm_stop
00052884 g     F .text	00000054 alt_avalon_i2c_register_callback
0005a218 g     O .bss	00000004 alt_irq_active
000528d8 g     F .text	000000ec alt_avalon_i2c_init
000400fc g     F .exceptions	000000d4 alt_irq_handler
00057390 g     O .rwdata	00000028 alt_dev_null
000585fe g     O .rwdata	00000003 config_A0
00055410 g     F .text	00000020 alt_dcache_flush_all
00049b10 g     F .text	00000068 __hi0bits
00051a08 g     F .text	00000080 .hidden __fixdfsi
0005865c g       *ABS*	00000000 __ram_rwdata_end
00058634 g     O .rwdata	00000008 alt_dev_list
000524a0 g     F .text	00000100 write
0004a8ac g     F .text	000000a0 _putc_r
00053214 g     F .text	0000004c alt_avalon_i2c_check_arblost
00053ff0 g     F .text	0000003c alt_avalon_i2c_int_clear
00056ae0 g       *ABS*	00000000 __ram_rodata_end
00051d88 g     F .text	000000b8 fstat
000550bc g     F .text	00000094 alt_up_rs232_write_fd
000507ac g     F .text	000000f4 .hidden __ledf2
00058648 g     O .rwdata	00000008 alt_avalon_i2c_list
00049ef0 g     F .text	00000140 __pow5mult
0004c8dc g     F .text	0000150c ___vfiprintf_internal_r
0005a1f8 g     O .bss	00000004 __nlocale_changed
0004089c g     F .text	00000058 .hidden __umodsi3
0005a3b4 g       *ABS*	00000000 end
00054404 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000529c4 g     F .text	00000040 alt_avalon_i2c_open
00056730 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0005339c g     F .text	000000e8 alt_avalon_i2c_master_tx
00054d80 g     F .text	0000007c alt_avalon_timer_sc_init
00041408 g     F .text	00000064 .hidden __clzsi2
00054ae4 g     F .text	00000224 altera_avalon_jtag_uart_write
00047ddc g     F .text	00000004 __sfp_lock_acquire
00049344 g     F .text	000000e4 memchr
00043a0c g     F .text	000022dc ___vfprintf_internal_r
000415f4 g     F .text	00000058 _sprintf_r
00047f40 g     F .text	00000310 _free_r
00055d04 g     F .text	0000022c alt_printf
00048928 g     F .text	00000010 __locale_mb_cur_max
00058604 g     O .rwdata	00000003 config_A2
0005657c g     F .text	00000180 __call_exitprocs
0005a1f4 g     O .bss	00000004 __mlocale_changed
00052798 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00058620 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
0005a21c g     O .bss	00000004 _alt_tick_rate
00053d64 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00054188 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0004a030 g     F .text	00000148 __lshift
0005a220 g     O .bss	00000004 _alt_nticks
0005222c g     F .text	00000104 read
0005260c g     F .text	0000007c alt_sys_init
000411d4 g     F .text	00000124 .hidden __floatsisf
0004b258 g     F .text	000001d0 __ssprint_r
00056464 g     F .text	00000118 __register_exitproc
00054ef8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000535c0 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00049c64 g     F .text	0000028c __multiply
00054770 g     F .text	00000068 altera_avalon_jtag_uart_close
0004146c g     F .text	00000028 .hidden __mulsi3
00056ae0 g       *ABS*	00000000 __ram_rwdata_start
00056730 g       *ABS*	00000000 __ram_rodata_start
0005a228 g     O .bss	00000028 __malloc_current_mallinfo
0004a544 g     F .text	0000014c __d2b
00058610 g     O .rwdata	00000004 multiplier
000542a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0005623c g     F .text	000000c4 alt_get_fd
000552b8 g     F .text	00000158 alt_busy_sleep
0004e078 g     F .text	00000054 _close_r
000563e8 g     F .text	0000007c memcmp
00052e38 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00054360 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005a3b4 g       *ABS*	00000000 __alt_stack_base
000543b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00045dc0 g     F .text	00000154 __swsetup_r
0004fc78 g     F .text	000009d0 .hidden __divdf3
00047c9c g     F .text	00000118 __sfp
0004a7a8 g     F .text	00000078 __copybits
00056f88 g     O .rwdata	00000408 __malloc_av_
00047de8 g     F .text	00000004 __sinit_lock_release
000508a0 g     F .text	0000086c .hidden __muldf3
0004b040 g     F .text	00000054 __sread
00054e58 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00056134 g     F .text	00000108 alt_find_file
0005546c g     F .text	000000a4 alt_dev_llist_insert
000521a8 g     F .text	00000024 __malloc_lock
000523b4 g     F .text	000000b0 sbrk
00041750 g     F .text	000022bc ___svfprintf_internal_r
00053260 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
000531c8 g     F .text	0000004c alt_avalon_i2c_check_nack
000479e0 g     F .text	0000005c _fflush_r
0004e0cc g     F .text	000000dc _calloc_r
0005a1d8 g       *ABS*	00000000 __bss_start
0005a1e6 g     O .bss	00000002 data
000496cc g     F .text	00000128 memset
000406c0 g     F .text	00000080 rs232_write_str
000585fc g     O .rwdata	00000001 ADS1115_ADDR
000402d0 g     F .text	0000036c main
00040000 g       *ABS*	00000000 __alt_mem_RAM
0004026c g     F .text	00000064 delay_ms
00053194 g     F .text	00000034 alt_avalon_i2c_master_target_set
0005a214 g     O .bss	00000004 alt_envp
0005a1fc g     O .bss	00000004 __malloc_max_total_mem
00054300 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004e000 g     F .text	00000018 __swbuf
00053fac g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0004b174 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004e298 g     F .text	00000014 fclose
0004613c g     F .text	00001688 _dtoa_r
00048b38 g     F .text	0000080c _malloc_r
0004e780 g     F .text	00000030 __ascii_wctomb
00058640 g     O .rwdata	00000004 alt_errno
00048718 g     F .text	000000c4 _fwalk
0004a94c g     F .text	000000c8 putc
00040740 g     F .text	00000084 .hidden __divsi3
00047e1c g     F .text	00000124 _malloc_trim_r
00056730 g       *ABS*	00000000 __CTOR_END__
00040d34 g     F .text	00000430 .hidden __mulsf3
0004b17c g     F .text	000000dc strcmp
00056730 g       *ABS*	00000000 __flash_rodata_start
00056730 g       *ABS*	00000000 __DTOR_LIST__
00055150 g     F .text	0000003c alt_up_rs232_open_dev
00050648 g     F .text	00000088 .hidden __nedf2
000525d4 g     F .text	00000038 alt_irq_init
00052330 g     F .text	00000084 alt_release_fd
0004164c g     F .text	0000006c sprintf
00056778 g     O .rodata	00000100 .hidden __clz_tab
0005a1f0 g     O .bss	00000004 _PathLocale
0005639c g     F .text	00000014 atexit
0004e018 g     F .text	00000060 _write_r
00048958 g     F .text	00000018 setlocale
00058618 g     O .rwdata	00000004 _impure_ptr
0005a20c g     O .bss	00000004 alt_argc
000477c4 g     F .text	0000021c __sflush_r
00055570 g     F .text	00000060 _do_dtors
00048944 g     F .text	00000008 __locale_cjk_lang
0005315c g     F .text	00000038 alt_avalon_i2c_master_target_get
0005a1e8 g     O .bss	00000004 rs232_dev
0005306c g     F .text	000000f0 alt_avalon_i2c_send_address
00040020 g       .exceptions	00000000 alt_irq_entry
0004a3d4 g     F .text	00000064 __ulp
00047e04 g     F .text	00000018 __fp_unlock_all
00056ae0 g     O .rwdata	0000000c led7_seg
0005862c g     O .rwdata	00000008 alt_fs_list
00054dfc g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00054f78 g     F .text	00000040 alt_up_rs232_write_data
00040020 g       *ABS*	00000000 __ram_exceptions_start
00048970 g     F .text	0000000c localeconv
00054238 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00055680 g     F .text	00000050 alt_ic_isr_register
00052a9c g     F .text	0000004c alt_avalon_i2c_disable
0005865c g       *ABS*	00000000 _edata
0005860d g     O .rwdata	00000003 config_8BIT_LOW
0005a3b4 g       *ABS*	00000000 _end
0004e2ac g     F .text	00000164 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
000547d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00052ae8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00055758 g     F .text	0000008c alt_ic_irq_disable
0004b09c g     F .text	0000007c __swrite
00058624 g     O .rwdata	00000004 __malloc_trim_threshold
00048938 g     F .text	0000000c __locale_msgcharset
000563b0 g     F .text	00000038 exit
000487dc g     F .text	000000c4 _fwalk_reent
0004a1d8 g     F .text	000001fc __mdiff
000407c4 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00047de0 g     F .text	00000004 __sfp_lock_release
00052cf8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00052f88 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000566fc g     F .text	00000034 _exit
0005518c g     F .text	0000012c alt_alarm_start
0004897c g     F .text	000001bc __smakebuf_r
000416b8 g     F .text	00000098 strlen
00055ba8 g     F .text	0000015c open
000506d0 g     F .text	000000dc .hidden __gedf2
00055f30 g     F .text	0000003c alt_putchar
00058628 g     O .rwdata	00000004 __wctomb
0004c8c4 g     F .text	00000018 __sprint_r
00055660 g     F .text	00000020 alt_icache_flush_all
00058650 g     O .rwdata	00000004 alt_priority_mask
000556d0 g     F .text	00000088 alt_ic_irq_enable
00045ce8 g     F .text	0000001c __vfprintf_internal
0004e7b0 g     F .text	0000005c _wctomb_r
0005110c g     F .text	000008fc .hidden __subdf3
00049b78 g     F .text	000000b0 __lo0bits
00058654 g     O .rwdata	00000008 alt_alarm_list
00055510 g     F .text	00000060 _do_ctors
0005a1ec g     O .bss	00000004 status
00054eb8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0004e6c0 g     F .text	000000c0 wcrtomb
00051c48 g     F .text	000000d8 close
000541ec g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00051f90 g     F .text	00000084 alt_load
00053484 g     F .text	0000013c alt_avalon_i2c_master_rx
0004e434 g     F .text	00000080 fputwc
00047de4 g     F .text	00000004 __sinit_lock_acquire
000498c4 g     F .text	00000148 __multadd
0004989c g     F .text	00000028 _Bfree
00058607 g     O .rwdata	00000003 config_A3



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10a8ad04 	addi	r2,r2,-23884
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10a8ad04 	addi	r2,r2,-23884
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a70a17 	ldw	r2,-25560(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a70a17 	ldw	r2,-25560(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40238:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   4023c:	d6817f14 	ori	gp,gp,1532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	10a87614 	ori	r2,r2,41432

    movhi r3, %hi(__bss_end)
   40248:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4024c:	18e8ed14 	ori	r3,r3,41908

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	0051f900 	call	51f90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	005212c0 	call	5212c <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffce268>

0004026c <delay_ms>:
					 0b0010000,
					 0b0011100,
					 0b1000110
};
void delay_ms(int ms)
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	df000315 	stw	fp,12(sp)
   40274:	df000304 	addi	fp,sp,12
   40278:	e13fff15 	stw	r4,-4(fp)
	unsigned int x,y;
	for(x =0; x<ms; x++)
   4027c:	e03ffd15 	stw	zero,-12(fp)
   40280:	00000b06 	br	402b0 <delay_ms+0x44>
	{	for(y =0; y<1000; y++);}
   40284:	e03ffe15 	stw	zero,-8(fp)
   40288:	00000306 	br	40298 <delay_ms+0x2c>
   4028c:	e0bffe17 	ldw	r2,-8(fp)
   40290:	10800044 	addi	r2,r2,1
   40294:	e0bffe15 	stw	r2,-8(fp)
   40298:	e0bffe17 	ldw	r2,-8(fp)
   4029c:	1080fa30 	cmpltui	r2,r2,1000
   402a0:	103ffa1e 	bne	r2,zero,4028c <__alt_data_end+0xfffce28c>
					 0b1000110
};
void delay_ms(int ms)
{
	unsigned int x,y;
	for(x =0; x<ms; x++)
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800044 	addi	r2,r2,1
   402ac:	e0bffd15 	stw	r2,-12(fp)
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	e0fffd17 	ldw	r3,-12(fp)
   402b8:	18bff236 	bltu	r3,r2,40284 <__alt_data_end+0xfffce284>
	{	for(y =0; y<1000; y++);}
}
   402bc:	0001883a 	nop
   402c0:	e037883a 	mov	sp,fp
   402c4:	df000017 	ldw	fp,0(sp)
   402c8:	dec00104 	addi	sp,sp,4
   402cc:	f800283a 	ret

000402d0 <main>:
alt_up_rs232_dev* rs232_dev;




int main(){
   402d0:	defff304 	addi	sp,sp,-52
   402d4:	dfc00c15 	stw	ra,48(sp)
   402d8:	df000b15 	stw	fp,44(sp)
   402dc:	df000b04 	addi	fp,sp,44

 alt_u8 ReadDatabuf[2];
 alt_u8 TxBuffer[1]= { RegisterAddr };
   402e0:	0005883a 	mov	r2,zero
   402e4:	e0bffa85 	stb	r2,-22(fp)

 ALT_AVALON_I2C_STATUS_CODE status;
 ALT_AVALON_I2C_DEV_t *my_i2c;
 ALT_AVALON_I2C_MASTER_CONFIG_t cfg;

 cfg.addr_mode = 0;
   402e8:	e03ffc15 	stw	zero,-16(fp)

 my_i2c = alt_avalon_i2c_open(I2C_NAME);
   402ec:	01000174 	movhi	r4,5
   402f0:	2119cc04 	addi	r4,r4,26416
   402f4:	00529c40 	call	529c4 <alt_avalon_i2c_open>
   402f8:	e0bff715 	stw	r2,-36(fp)
 rs232_dev = alt_up_rs232_open_dev("/dev/RS232");
   402fc:	01000174 	movhi	r4,5
   40300:	2119cf04 	addi	r4,r4,26428
   40304:	00551500 	call	55150 <alt_up_rs232_open_dev>
   40308:	d0a6fb15 	stw	r2,-25620(gp)
 if(my_i2c == NULL){
   4030c:	e0bff717 	ldw	r2,-36(fp)
   40310:	1000051e 	bne	r2,zero,40328 <main+0x58>
 printf("Failed to open I2C port\n");
   40314:	01000174 	movhi	r4,5
   40318:	2119d204 	addi	r4,r4,26440
   4031c:	00415e00 	call	415e0 <puts>
 return 1;
   40320:	00800044 	movi	r2,1
   40324:	0000c006 	br	40628 <main+0x358>
 }
 alt_avalon_i2c_master_target_set(my_i2c, ADS1115_ADDR); 		//pointing to the TMP102 address
   40328:	00801204 	movi	r2,72
   4032c:	10803fcc 	andi	r2,r2,255
   40330:	100b883a 	mov	r5,r2
   40334:	e13ff717 	ldw	r4,-36(fp)
   40338:	00531940 	call	53194 <alt_avalon_i2c_master_target_set>
 alt_avalon_i2c_master_config_speed_set(my_i2c, &cfg,100000 ); //Set the speed
   4033c:	e0bffc04 	addi	r2,fp,-16
   40340:	018000b4 	movhi	r6,2
   40344:	31a1a804 	addi	r6,r6,-31072
   40348:	100b883a 	mov	r5,r2
   4034c:	e13ff717 	ldw	r4,-36(fp)
   40350:	0052cf80 	call	52cf8 <alt_avalon_i2c_master_config_speed_set>
 alt_avalon_i2c_master_config_set(my_i2c, &cfg);				//configure
   40354:	e0bffc04 	addi	r2,fp,-16
   40358:	100b883a 	mov	r5,r2
   4035c:	e13ff717 	ldw	r4,-36(fp)
   40360:	0052b980 	call	52b98 <alt_avalon_i2c_master_config_set>
 alt_avalon_i2c_init(my_i2c);
   40364:	e13ff717 	ldw	r4,-36(fp)
   40368:	00528d80 	call	528d8 <alt_avalon_i2c_init>
 while(1)
 {

	 // doc kenh A0.

	 status = alt_avalon_i2c_master_tx(my_i2c,config_A0,sizeof(config_A0),ALT_AVALON_I2C_NO_INTERRUPTS);
   4036c:	000f883a 	mov	r7,zero
   40370:	018000c4 	movi	r6,3
   40374:	d1600084 	addi	r5,gp,-32766
   40378:	e13ff717 	ldw	r4,-36(fp)
   4037c:	005339c0 	call	5339c <alt_avalon_i2c_master_tx>
   40380:	e0bff815 	stw	r2,-32(fp)
	 status = alt_avalon_i2c_master_tx(my_i2c,config_8BIT_HIGH,sizeof(config_8BIT_HIGH),ALT_AVALON_I2C_NO_INTERRUPTS);
   40384:	000f883a 	mov	r7,zero
   40388:	018000c4 	movi	r6,3
   4038c:	d1600384 	addi	r5,gp,-32754
   40390:	e13ff717 	ldw	r4,-36(fp)
   40394:	005339c0 	call	5339c <alt_avalon_i2c_master_tx>
   40398:	e0bff815 	stw	r2,-32(fp)
	 status = alt_avalon_i2c_master_tx(my_i2c,config_8BIT_LOW, sizeof(config_8BIT_LOW), ALT_AVALON_I2C_NO_INTERRUPTS);
   4039c:	000f883a 	mov	r7,zero
   403a0:	018000c4 	movi	r6,3
   403a4:	d1600444 	addi	r5,gp,-32751
   403a8:	e13ff717 	ldw	r4,-36(fp)
   403ac:	005339c0 	call	5339c <alt_avalon_i2c_master_tx>
   403b0:	e0bff815 	stw	r2,-32(fp)
	 status = alt_avalon_i2c_master_tx_rx(my_i2c, TxBuffer, 1, ReadDatabuf, sizeof(ReadDatabuf),ALT_AVALON_I2C_NO_INTERRUPTS);
   403b4:	e13ffa04 	addi	r4,fp,-24
   403b8:	e0fffa84 	addi	r3,fp,-22
   403bc:	d8000115 	stw	zero,4(sp)
   403c0:	00800084 	movi	r2,2
   403c4:	d8800015 	stw	r2,0(sp)
   403c8:	200f883a 	mov	r7,r4
   403cc:	01800044 	movi	r6,1
   403d0:	180b883a 	mov	r5,r3
   403d4:	e13ff717 	ldw	r4,-36(fp)
   403d8:	00535c00 	call	535c0 <alt_avalon_i2c_master_tx_rx>
   403dc:	e0bff815 	stw	r2,-32(fp)

	 if (status!=ALT_AVALON_I2C_SUCCESS){
   403e0:	e0bff817 	ldw	r2,-32(fp)
   403e4:	10000526 	beq	r2,zero,403fc <main+0x12c>
	 printf("Read Failure\n");
   403e8:	01000174 	movhi	r4,5
   403ec:	2119d804 	addi	r4,r4,26464
   403f0:	00415e00 	call	415e0 <puts>
	 return 1; //FAIL
   403f4:	00800044 	movi	r2,1
   403f8:	00008b06 	br	40628 <main+0x358>
	 }

	 data = ( ReadDatabuf[0] << 8) | ReadDatabuf[1];
   403fc:	e0bffa03 	ldbu	r2,-24(fp)
   40400:	10803fcc 	andi	r2,r2,255
   40404:	1004923a 	slli	r2,r2,8
   40408:	1007883a 	mov	r3,r2
   4040c:	e0bffa43 	ldbu	r2,-23(fp)
   40410:	10803fcc 	andi	r2,r2,255
   40414:	1884b03a 	or	r2,r3,r2
   40418:	d0a6fa8d 	sth	r2,-25622(gp)
	 ADC_A0 = data * multiplier;
   4041c:	d0a6fa8b 	ldhu	r2,-25622(gp)
   40420:	10bfffcc 	andi	r2,r2,65535
   40424:	1009883a 	mov	r4,r2
   40428:	00411d40 	call	411d4 <__floatsisf>
   4042c:	1007883a 	mov	r3,r2
   40430:	008f9034 	movhi	r2,15936
   40434:	100b883a 	mov	r5,r2
   40438:	1809883a 	mov	r4,r3
   4043c:	0040d340 	call	40d34 <__mulsf3>
   40440:	1007883a 	mov	r3,r2
   40444:	1805883a 	mov	r2,r3
   40448:	d0a6f815 	stw	r2,-25632(gp)

	 int ADC_CV = ADC_A0;
   4044c:	d0a6f817 	ldw	r2,-25632(gp)
   40450:	1009883a 	mov	r4,r2
   40454:	00411640 	call	41164 <__fixsfsi>
   40458:	e0bff915 	stw	r2,-28(fp)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE,led7_seg[ADC_CV/1000]);  //hang chuc - hour
   4045c:	e0bff917 	ldw	r2,-28(fp)
   40460:	0140fa04 	movi	r5,1000
   40464:	1009883a 	mov	r4,r2
   40468:	00407400 	call	40740 <__divsi3>
   4046c:	1007883a 	mov	r3,r2
   40470:	00800174 	movhi	r2,5
   40474:	109ab804 	addi	r2,r2,27360
   40478:	10c5883a 	add	r2,r2,r3
   4047c:	10800003 	ldbu	r2,0(r2)
   40480:	10c03fcc 	andi	r3,r2,255
   40484:	18c0201c 	xori	r3,r3,128
   40488:	18ffe004 	addi	r3,r3,-128
   4048c:	00800234 	movhi	r2,8
   40490:	10843804 	addi	r2,r2,4320
   40494:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED2_BASE,led7_seg[ADC_CV/100%10]); 	//hang don vi - hour
   40498:	e0bff917 	ldw	r2,-28(fp)
   4049c:	01401904 	movi	r5,100
   404a0:	1009883a 	mov	r4,r2
   404a4:	00407400 	call	40740 <__divsi3>
   404a8:	01400284 	movi	r5,10
   404ac:	1009883a 	mov	r4,r2
   404b0:	00407c40 	call	407c4 <__modsi3>
   404b4:	1007883a 	mov	r3,r2
   404b8:	00800174 	movhi	r2,5
   404bc:	109ab804 	addi	r2,r2,27360
   404c0:	10c5883a 	add	r2,r2,r3
   404c4:	10800003 	ldbu	r2,0(r2)
   404c8:	10c03fcc 	andi	r3,r2,255
   404cc:	18c0201c 	xori	r3,r3,128
   404d0:	18ffe004 	addi	r3,r3,-128
   404d4:	00800234 	movhi	r2,8
   404d8:	10843c04 	addi	r2,r2,4336
   404dc:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED3_BASE,led7_seg[ADC_CV/10%10]);  //hang chuc - minute
   404e0:	e0bff917 	ldw	r2,-28(fp)
   404e4:	01400284 	movi	r5,10
   404e8:	1009883a 	mov	r4,r2
   404ec:	00407400 	call	40740 <__divsi3>
   404f0:	01400284 	movi	r5,10
   404f4:	1009883a 	mov	r4,r2
   404f8:	00407c40 	call	407c4 <__modsi3>
   404fc:	1007883a 	mov	r3,r2
   40500:	00800174 	movhi	r2,5
   40504:	109ab804 	addi	r2,r2,27360
   40508:	10c5883a 	add	r2,r2,r3
   4050c:	10800003 	ldbu	r2,0(r2)
   40510:	10c03fcc 	andi	r3,r2,255
   40514:	18c0201c 	xori	r3,r3,128
   40518:	18ffe004 	addi	r3,r3,-128
   4051c:	00800234 	movhi	r2,8
   40520:	10843404 	addi	r2,r2,4304
   40524:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED4_BASE,led7_seg[ADC_CV%10]); 	//hang don vi - minute
   40528:	e0bff917 	ldw	r2,-28(fp)
   4052c:	01400284 	movi	r5,10
   40530:	1009883a 	mov	r4,r2
   40534:	00407c40 	call	407c4 <__modsi3>
   40538:	1007883a 	mov	r3,r2
   4053c:	00800174 	movhi	r2,5
   40540:	109ab804 	addi	r2,r2,27360
   40544:	10c5883a 	add	r2,r2,r3
   40548:	10800003 	ldbu	r2,0(r2)
   4054c:	10c03fcc 	andi	r3,r2,255
   40550:	18c0201c 	xori	r3,r3,128
   40554:	18ffe004 	addi	r3,r3,-128
   40558:	00800234 	movhi	r2,8
   4055c:	10843004 	addi	r2,r2,4288
   40560:	10c00035 	stwio	r3,0(r2)

	 IOWR_ALTERA_AVALON_PIO_DATA(LED5_BASE,led7_seg[10]);  //hang chuc - second
   40564:	00800174 	movhi	r2,5
   40568:	109ab804 	addi	r2,r2,27360
   4056c:	10800283 	ldbu	r2,10(r2)
   40570:	10c03fcc 	andi	r3,r2,255
   40574:	18c0201c 	xori	r3,r3,128
   40578:	18ffe004 	addi	r3,r3,-128
   4057c:	00800234 	movhi	r2,8
   40580:	10842c04 	addi	r2,r2,4272
   40584:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(LED6_BASE,led7_seg[11]); 	//hang don vi - second
   40588:	00800174 	movhi	r2,5
   4058c:	109ab804 	addi	r2,r2,27360
   40590:	108002c3 	ldbu	r2,11(r2)
   40594:	10c03fcc 	andi	r3,r2,255
   40598:	18c0201c 	xori	r3,r3,128
   4059c:	18ffe004 	addi	r3,r3,-128
   405a0:	00800234 	movhi	r2,8
   405a4:	10842804 	addi	r2,r2,4256
   405a8:	10c00035 	stwio	r3,0(r2)

	 sprintf(finaloutput, "%.1f*C\n", (ADC_A0/10));
   405ac:	d0a6f817 	ldw	r2,-25632(gp)
   405b0:	01504834 	movhi	r5,16672
   405b4:	1009883a 	mov	r4,r2
   405b8:	00408f40 	call	408f4 <__divsf3>
   405bc:	1007883a 	mov	r3,r2
   405c0:	1805883a 	mov	r2,r3
   405c4:	1009883a 	mov	r4,r2
   405c8:	00412f80 	call	412f8 <__extendsfdf2>
   405cc:	1009883a 	mov	r4,r2
   405d0:	180b883a 	mov	r5,r3
   405d4:	e0bffac4 	addi	r2,fp,-21
   405d8:	200d883a 	mov	r6,r4
   405dc:	280f883a 	mov	r7,r5
   405e0:	01400174 	movhi	r5,5
   405e4:	2959dc04 	addi	r5,r5,26480
   405e8:	1009883a 	mov	r4,r2
   405ec:	004164c0 	call	4164c <sprintf>
	 rs232_write_str(rs232_dev, finaloutput, 8);
   405f0:	d0a6fb17 	ldw	r2,-25620(gp)
   405f4:	e0fffac4 	addi	r3,fp,-21
   405f8:	01800204 	movi	r6,8
   405fc:	180b883a 	mov	r5,r3
   40600:	1009883a 	mov	r4,r2
   40604:	00406c00 	call	406c0 <rs232_write_str>

	 printf(finaloutput);
   40608:	e0bffac4 	addi	r2,fp,-21
   4060c:	1009883a 	mov	r4,r2
   40610:	00414c40 	call	414c4 <printf>
	 printf("\n");
   40614:	01000284 	movi	r4,10
   40618:	00415080 	call	41508 <putchar>
	 delay_ms(500);
   4061c:	01007d04 	movi	r4,500
   40620:	004026c0 	call	4026c <delay_ms>
 }
   40624:	003f5106 	br	4036c <__alt_data_end+0xfffce36c>
 return 0;
 }
   40628:	e037883a 	mov	sp,fp
   4062c:	dfc00117 	ldw	ra,4(sp)
   40630:	df000017 	ldw	fp,0(sp)
   40634:	dec00204 	addi	sp,sp,8
   40638:	f800283a 	ret

0004063c <rs232_read_str>:

int rs232_read_str (alt_fd* fd, char* ptr, int len)
{
   4063c:	defff904 	addi	sp,sp,-28
   40640:	dfc00615 	stw	ra,24(sp)
   40644:	df000515 	stw	fp,20(sp)
   40648:	df000504 	addi	fp,sp,20
   4064c:	e13ffd15 	stw	r4,-12(fp)
   40650:	e17ffe15 	stw	r5,-8(fp)
   40654:	e1bfff15 	stw	r6,-4(fp)
	int count = 0;
   40658:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 parity_error;
	while(len--)
   4065c:	00000c06 	br	40690 <rs232_read_str+0x54>
	{
		if (alt_up_rs232_read_data(fd, (alt_u8 *)ptr++, &parity_error)==0)
   40660:	e0bffe17 	ldw	r2,-8(fp)
   40664:	10c00044 	addi	r3,r2,1
   40668:	e0fffe15 	stw	r3,-8(fp)
   4066c:	e0fffc04 	addi	r3,fp,-16
   40670:	180d883a 	mov	r6,r3
   40674:	100b883a 	mov	r5,r2
   40678:	e13ffd17 	ldw	r4,-12(fp)
   4067c:	0054fb80 	call	54fb8 <alt_up_rs232_read_data>
   40680:	1000081e 	bne	r2,zero,406a4 <rs232_read_str+0x68>
			{
				count++;
   40684:	e0bffb17 	ldw	r2,-20(fp)
   40688:	10800044 	addi	r2,r2,1
   4068c:	e0bffb15 	stw	r2,-20(fp)

int rs232_read_str (alt_fd* fd, char* ptr, int len)
{
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   40690:	e0bfff17 	ldw	r2,-4(fp)
   40694:	10ffffc4 	addi	r3,r2,-1
   40698:	e0ffff15 	stw	r3,-4(fp)
   4069c:	103ff01e 	bne	r2,zero,40660 <__alt_data_end+0xfffce660>
   406a0:	00000106 	br	406a8 <rs232_read_str+0x6c>
			{
				count++;
//				len--;
			}
		else
			break;
   406a4:	0001883a 	nop
	}
	return count;
   406a8:	e0bffb17 	ldw	r2,-20(fp)
}
   406ac:	e037883a 	mov	sp,fp
   406b0:	dfc00117 	ldw	ra,4(sp)
   406b4:	df000017 	ldw	fp,0(sp)
   406b8:	dec00204 	addi	sp,sp,8
   406bc:	f800283a 	ret

000406c0 <rs232_write_str>:



void rs232_write_str(alt_fd* fd, char *ptr, int len)
{
   406c0:	defffa04 	addi	sp,sp,-24
   406c4:	dfc00515 	stw	ra,20(sp)
   406c8:	df000415 	stw	fp,16(sp)
   406cc:	df000404 	addi	fp,sp,16
   406d0:	e13ffd15 	stw	r4,-12(fp)
   406d4:	e17ffe15 	stw	r5,-8(fp)
   406d8:	e1bfff15 	stw	r6,-4(fp)
	int count = 0;
   406dc:	e03ffc15 	stw	zero,-16(fp)
	while(len--)
   406e0:	00000d06 	br	40718 <rs232_write_str+0x58>
	{
		if (alt_up_rs232_write_data(fd, *ptr)==0)
   406e4:	e0bffe17 	ldw	r2,-8(fp)
   406e8:	10800003 	ldbu	r2,0(r2)
   406ec:	10803fcc 	andi	r2,r2,255
   406f0:	100b883a 	mov	r5,r2
   406f4:	e13ffd17 	ldw	r4,-12(fp)
   406f8:	0054f780 	call	54f78 <alt_up_rs232_write_data>
   406fc:	1000061e 	bne	r2,zero,40718 <rs232_write_str+0x58>
				{
					count++;
   40700:	e0bffc17 	ldw	r2,-16(fp)
   40704:	10800044 	addi	r2,r2,1
   40708:	e0bffc15 	stw	r2,-16(fp)
					ptr++;
   4070c:	e0bffe17 	ldw	r2,-8(fp)
   40710:	10800044 	addi	r2,r2,1
   40714:	e0bffe15 	stw	r2,-8(fp)


void rs232_write_str(alt_fd* fd, char *ptr, int len)
{
	int count = 0;
	while(len--)
   40718:	e0bfff17 	ldw	r2,-4(fp)
   4071c:	10ffffc4 	addi	r3,r2,-1
   40720:	e0ffff15 	stw	r3,-4(fp)
   40724:	103fef1e 	bne	r2,zero,406e4 <__alt_data_end+0xfffce6e4>
				{
					count++;
					ptr++;
				}
	}
}
   40728:	0001883a 	nop
   4072c:	e037883a 	mov	sp,fp
   40730:	dfc00117 	ldw	ra,4(sp)
   40734:	df000017 	ldw	fp,0(sp)
   40738:	dec00204 	addi	sp,sp,8
   4073c:	f800283a 	ret

00040740 <__divsi3>:
   40740:	20001b16 	blt	r4,zero,407b0 <__divsi3+0x70>
   40744:	000f883a 	mov	r7,zero
   40748:	28001616 	blt	r5,zero,407a4 <__divsi3+0x64>
   4074c:	200d883a 	mov	r6,r4
   40750:	29001a2e 	bgeu	r5,r4,407bc <__divsi3+0x7c>
   40754:	00800804 	movi	r2,32
   40758:	00c00044 	movi	r3,1
   4075c:	00000106 	br	40764 <__divsi3+0x24>
   40760:	10000d26 	beq	r2,zero,40798 <__divsi3+0x58>
   40764:	294b883a 	add	r5,r5,r5
   40768:	10bfffc4 	addi	r2,r2,-1
   4076c:	18c7883a 	add	r3,r3,r3
   40770:	293ffb36 	bltu	r5,r4,40760 <__alt_data_end+0xfffce760>
   40774:	0005883a 	mov	r2,zero
   40778:	18000726 	beq	r3,zero,40798 <__divsi3+0x58>
   4077c:	0005883a 	mov	r2,zero
   40780:	31400236 	bltu	r6,r5,4078c <__divsi3+0x4c>
   40784:	314dc83a 	sub	r6,r6,r5
   40788:	10c4b03a 	or	r2,r2,r3
   4078c:	1806d07a 	srli	r3,r3,1
   40790:	280ad07a 	srli	r5,r5,1
   40794:	183ffa1e 	bne	r3,zero,40780 <__alt_data_end+0xfffce780>
   40798:	38000126 	beq	r7,zero,407a0 <__divsi3+0x60>
   4079c:	0085c83a 	sub	r2,zero,r2
   407a0:	f800283a 	ret
   407a4:	014bc83a 	sub	r5,zero,r5
   407a8:	39c0005c 	xori	r7,r7,1
   407ac:	003fe706 	br	4074c <__alt_data_end+0xfffce74c>
   407b0:	0109c83a 	sub	r4,zero,r4
   407b4:	01c00044 	movi	r7,1
   407b8:	003fe306 	br	40748 <__alt_data_end+0xfffce748>
   407bc:	00c00044 	movi	r3,1
   407c0:	003fee06 	br	4077c <__alt_data_end+0xfffce77c>

000407c4 <__modsi3>:
   407c4:	20001716 	blt	r4,zero,40824 <__modsi3+0x60>
   407c8:	000f883a 	mov	r7,zero
   407cc:	2005883a 	mov	r2,r4
   407d0:	28001216 	blt	r5,zero,4081c <__modsi3+0x58>
   407d4:	2900162e 	bgeu	r5,r4,40830 <__modsi3+0x6c>
   407d8:	01800804 	movi	r6,32
   407dc:	00c00044 	movi	r3,1
   407e0:	00000106 	br	407e8 <__modsi3+0x24>
   407e4:	30000a26 	beq	r6,zero,40810 <__modsi3+0x4c>
   407e8:	294b883a 	add	r5,r5,r5
   407ec:	31bfffc4 	addi	r6,r6,-1
   407f0:	18c7883a 	add	r3,r3,r3
   407f4:	293ffb36 	bltu	r5,r4,407e4 <__alt_data_end+0xfffce7e4>
   407f8:	18000526 	beq	r3,zero,40810 <__modsi3+0x4c>
   407fc:	1806d07a 	srli	r3,r3,1
   40800:	11400136 	bltu	r2,r5,40808 <__modsi3+0x44>
   40804:	1145c83a 	sub	r2,r2,r5
   40808:	280ad07a 	srli	r5,r5,1
   4080c:	183ffb1e 	bne	r3,zero,407fc <__alt_data_end+0xfffce7fc>
   40810:	38000126 	beq	r7,zero,40818 <__modsi3+0x54>
   40814:	0085c83a 	sub	r2,zero,r2
   40818:	f800283a 	ret
   4081c:	014bc83a 	sub	r5,zero,r5
   40820:	003fec06 	br	407d4 <__alt_data_end+0xfffce7d4>
   40824:	0109c83a 	sub	r4,zero,r4
   40828:	01c00044 	movi	r7,1
   4082c:	003fe706 	br	407cc <__alt_data_end+0xfffce7cc>
   40830:	00c00044 	movi	r3,1
   40834:	003ff106 	br	407fc <__alt_data_end+0xfffce7fc>

00040838 <__udivsi3>:
   40838:	200d883a 	mov	r6,r4
   4083c:	2900152e 	bgeu	r5,r4,40894 <__udivsi3+0x5c>
   40840:	28001416 	blt	r5,zero,40894 <__udivsi3+0x5c>
   40844:	00800804 	movi	r2,32
   40848:	00c00044 	movi	r3,1
   4084c:	00000206 	br	40858 <__udivsi3+0x20>
   40850:	10000e26 	beq	r2,zero,4088c <__udivsi3+0x54>
   40854:	28000516 	blt	r5,zero,4086c <__udivsi3+0x34>
   40858:	294b883a 	add	r5,r5,r5
   4085c:	10bfffc4 	addi	r2,r2,-1
   40860:	18c7883a 	add	r3,r3,r3
   40864:	293ffa36 	bltu	r5,r4,40850 <__alt_data_end+0xfffce850>
   40868:	18000826 	beq	r3,zero,4088c <__udivsi3+0x54>
   4086c:	0005883a 	mov	r2,zero
   40870:	31400236 	bltu	r6,r5,4087c <__udivsi3+0x44>
   40874:	314dc83a 	sub	r6,r6,r5
   40878:	10c4b03a 	or	r2,r2,r3
   4087c:	1806d07a 	srli	r3,r3,1
   40880:	280ad07a 	srli	r5,r5,1
   40884:	183ffa1e 	bne	r3,zero,40870 <__alt_data_end+0xfffce870>
   40888:	f800283a 	ret
   4088c:	0005883a 	mov	r2,zero
   40890:	f800283a 	ret
   40894:	00c00044 	movi	r3,1
   40898:	003ff406 	br	4086c <__alt_data_end+0xfffce86c>

0004089c <__umodsi3>:
   4089c:	2005883a 	mov	r2,r4
   408a0:	2900122e 	bgeu	r5,r4,408ec <__umodsi3+0x50>
   408a4:	28001116 	blt	r5,zero,408ec <__umodsi3+0x50>
   408a8:	01800804 	movi	r6,32
   408ac:	00c00044 	movi	r3,1
   408b0:	00000206 	br	408bc <__umodsi3+0x20>
   408b4:	30000c26 	beq	r6,zero,408e8 <__umodsi3+0x4c>
   408b8:	28000516 	blt	r5,zero,408d0 <__umodsi3+0x34>
   408bc:	294b883a 	add	r5,r5,r5
   408c0:	31bfffc4 	addi	r6,r6,-1
   408c4:	18c7883a 	add	r3,r3,r3
   408c8:	293ffa36 	bltu	r5,r4,408b4 <__alt_data_end+0xfffce8b4>
   408cc:	18000626 	beq	r3,zero,408e8 <__umodsi3+0x4c>
   408d0:	1806d07a 	srli	r3,r3,1
   408d4:	11400136 	bltu	r2,r5,408dc <__umodsi3+0x40>
   408d8:	1145c83a 	sub	r2,r2,r5
   408dc:	280ad07a 	srli	r5,r5,1
   408e0:	183ffb1e 	bne	r3,zero,408d0 <__alt_data_end+0xfffce8d0>
   408e4:	f800283a 	ret
   408e8:	f800283a 	ret
   408ec:	00c00044 	movi	r3,1
   408f0:	003ff706 	br	408d0 <__alt_data_end+0xfffce8d0>

000408f4 <__divsf3>:
   408f4:	defff504 	addi	sp,sp,-44
   408f8:	200cd5fa 	srli	r6,r4,23
   408fc:	dcc00415 	stw	r19,16(sp)
   40900:	2026d7fa 	srli	r19,r4,31
   40904:	00c02034 	movhi	r3,128
   40908:	dd800715 	stw	r22,28(sp)
   4090c:	dd000515 	stw	r20,20(sp)
   40910:	dc800315 	stw	r18,12(sp)
   40914:	18ffffc4 	addi	r3,r3,-1
   40918:	dfc00a15 	stw	ra,40(sp)
   4091c:	df000915 	stw	fp,36(sp)
   40920:	ddc00815 	stw	r23,32(sp)
   40924:	dd400615 	stw	r21,24(sp)
   40928:	dc400215 	stw	r17,8(sp)
   4092c:	dc000115 	stw	r16,4(sp)
   40930:	35003fcc 	andi	r20,r6,255
   40934:	1924703a 	and	r18,r3,r4
   40938:	9d803fcc 	andi	r22,r19,255
   4093c:	a0005226 	beq	r20,zero,40a88 <__divsf3+0x194>
   40940:	00803fc4 	movi	r2,255
   40944:	a0802e26 	beq	r20,r2,40a00 <__divsf3+0x10c>
   40948:	91002034 	orhi	r4,r18,128
   4094c:	202490fa 	slli	r18,r4,3
   40950:	a53fe044 	addi	r20,r20,-127
   40954:	0021883a 	mov	r16,zero
   40958:	002f883a 	mov	r23,zero
   4095c:	280cd5fa 	srli	r6,r5,23
   40960:	282ad7fa 	srli	r21,r5,31
   40964:	00c02034 	movhi	r3,128
   40968:	18ffffc4 	addi	r3,r3,-1
   4096c:	31803fcc 	andi	r6,r6,255
   40970:	1962703a 	and	r17,r3,r5
   40974:	af003fcc 	andi	fp,r21,255
   40978:	30004a26 	beq	r6,zero,40aa4 <__divsf3+0x1b0>
   4097c:	00803fc4 	movi	r2,255
   40980:	30804526 	beq	r6,r2,40a98 <__divsf3+0x1a4>
   40984:	89402034 	orhi	r5,r17,128
   40988:	282290fa 	slli	r17,r5,3
   4098c:	31bfe044 	addi	r6,r6,-127
   40990:	000b883a 	mov	r5,zero
   40994:	2c20b03a 	or	r16,r5,r16
   40998:	802090ba 	slli	r16,r16,2
   4099c:	00800134 	movhi	r2,4
   409a0:	10827004 	addi	r2,r2,2496
   409a4:	80a1883a 	add	r16,r16,r2
   409a8:	81000017 	ldw	r4,0(r16)
   409ac:	9d46f03a 	xor	r3,r19,r21
   409b0:	180f883a 	mov	r7,r3
   409b4:	18803fcc 	andi	r2,r3,255
   409b8:	a18dc83a 	sub	r6,r20,r6
   409bc:	2000683a 	jmp	r4
   409c0:	00040ba4 	muli	zero,zero,4142
   409c4:	00040a28 	cmpgeui	zero,zero,4136
   409c8:	00040b98 	cmpnei	zero,zero,4142
   409cc:	00040a14 	movui	zero,4136
   409d0:	00040b98 	cmpnei	zero,zero,4142
   409d4:	00040b70 	cmpltui	zero,zero,4141
   409d8:	00040b98 	cmpnei	zero,zero,4142
   409dc:	00040a14 	movui	zero,4136
   409e0:	00040a28 	cmpgeui	zero,zero,4136
   409e4:	00040a28 	cmpgeui	zero,zero,4136
   409e8:	00040b70 	cmpltui	zero,zero,4141
   409ec:	00040a14 	movui	zero,4136
   409f0:	00040c84 	movi	zero,4146
   409f4:	00040c84 	movi	zero,4146
   409f8:	00040c84 	movi	zero,4146
   409fc:	00040c38 	rdprs	zero,zero,4144
   40a00:	9000581e 	bne	r18,zero,40b64 <__divsf3+0x270>
   40a04:	04000204 	movi	r16,8
   40a08:	05c00084 	movi	r23,2
   40a0c:	003fd306 	br	4095c <__alt_data_end+0xfffce95c>
   40a10:	0023883a 	mov	r17,zero
   40a14:	e02d883a 	mov	r22,fp
   40a18:	282f883a 	mov	r23,r5
   40a1c:	00800084 	movi	r2,2
   40a20:	b8808f1e 	bne	r23,r2,40c60 <__divsf3+0x36c>
   40a24:	b005883a 	mov	r2,r22
   40a28:	11c0004c 	andi	r7,r2,1
   40a2c:	013fffc4 	movi	r4,-1
   40a30:	000d883a 	mov	r6,zero
   40a34:	21003fcc 	andi	r4,r4,255
   40a38:	200895fa 	slli	r4,r4,23
   40a3c:	38803fcc 	andi	r2,r7,255
   40a40:	00c02034 	movhi	r3,128
   40a44:	100497fa 	slli	r2,r2,31
   40a48:	18ffffc4 	addi	r3,r3,-1
   40a4c:	30c6703a 	and	r3,r6,r3
   40a50:	1906b03a 	or	r3,r3,r4
   40a54:	1884b03a 	or	r2,r3,r2
   40a58:	dfc00a17 	ldw	ra,40(sp)
   40a5c:	df000917 	ldw	fp,36(sp)
   40a60:	ddc00817 	ldw	r23,32(sp)
   40a64:	dd800717 	ldw	r22,28(sp)
   40a68:	dd400617 	ldw	r21,24(sp)
   40a6c:	dd000517 	ldw	r20,20(sp)
   40a70:	dcc00417 	ldw	r19,16(sp)
   40a74:	dc800317 	ldw	r18,12(sp)
   40a78:	dc400217 	ldw	r17,8(sp)
   40a7c:	dc000117 	ldw	r16,4(sp)
   40a80:	dec00b04 	addi	sp,sp,44
   40a84:	f800283a 	ret
   40a88:	90002b1e 	bne	r18,zero,40b38 <__divsf3+0x244>
   40a8c:	04000104 	movi	r16,4
   40a90:	05c00044 	movi	r23,1
   40a94:	003fb106 	br	4095c <__alt_data_end+0xfffce95c>
   40a98:	8800251e 	bne	r17,zero,40b30 <__divsf3+0x23c>
   40a9c:	01400084 	movi	r5,2
   40aa0:	00000206 	br	40aac <__divsf3+0x1b8>
   40aa4:	88001a1e 	bne	r17,zero,40b10 <__divsf3+0x21c>
   40aa8:	01400044 	movi	r5,1
   40aac:	8160b03a 	or	r16,r16,r5
   40ab0:	802090ba 	slli	r16,r16,2
   40ab4:	00c00134 	movhi	r3,4
   40ab8:	18c2b404 	addi	r3,r3,2768
   40abc:	80e1883a 	add	r16,r16,r3
   40ac0:	80c00017 	ldw	r3,0(r16)
   40ac4:	9d44f03a 	xor	r2,r19,r21
   40ac8:	a18dc83a 	sub	r6,r20,r6
   40acc:	1800683a 	jmp	r3
   40ad0:	00040a28 	cmpgeui	zero,zero,4136
   40ad4:	00040a28 	cmpgeui	zero,zero,4136
   40ad8:	00040c74 	movhi	zero,4145
   40adc:	00040a10 	cmplti	zero,zero,4136
   40ae0:	00040c74 	movhi	zero,4145
   40ae4:	00040b70 	cmpltui	zero,zero,4141
   40ae8:	00040c74 	movhi	zero,4145
   40aec:	00040a10 	cmplti	zero,zero,4136
   40af0:	00040a28 	cmpgeui	zero,zero,4136
   40af4:	00040a28 	cmpgeui	zero,zero,4136
   40af8:	00040b70 	cmpltui	zero,zero,4141
   40afc:	00040a10 	cmplti	zero,zero,4136
   40b00:	00040c84 	movi	zero,4146
   40b04:	00040c84 	movi	zero,4146
   40b08:	00040c84 	movi	zero,4146
   40b0c:	00040c9c 	xori	zero,zero,4146
   40b10:	8809883a 	mov	r4,r17
   40b14:	00414080 	call	41408 <__clzsi2>
   40b18:	10fffec4 	addi	r3,r2,-5
   40b1c:	10801d84 	addi	r2,r2,118
   40b20:	88e2983a 	sll	r17,r17,r3
   40b24:	008dc83a 	sub	r6,zero,r2
   40b28:	000b883a 	mov	r5,zero
   40b2c:	003f9906 	br	40994 <__alt_data_end+0xfffce994>
   40b30:	014000c4 	movi	r5,3
   40b34:	003f9706 	br	40994 <__alt_data_end+0xfffce994>
   40b38:	9009883a 	mov	r4,r18
   40b3c:	d9400015 	stw	r5,0(sp)
   40b40:	00414080 	call	41408 <__clzsi2>
   40b44:	10fffec4 	addi	r3,r2,-5
   40b48:	11801d84 	addi	r6,r2,118
   40b4c:	90e4983a 	sll	r18,r18,r3
   40b50:	01a9c83a 	sub	r20,zero,r6
   40b54:	0021883a 	mov	r16,zero
   40b58:	002f883a 	mov	r23,zero
   40b5c:	d9400017 	ldw	r5,0(sp)
   40b60:	003f7e06 	br	4095c <__alt_data_end+0xfffce95c>
   40b64:	04000304 	movi	r16,12
   40b68:	05c000c4 	movi	r23,3
   40b6c:	003f7b06 	br	4095c <__alt_data_end+0xfffce95c>
   40b70:	01802034 	movhi	r6,128
   40b74:	000f883a 	mov	r7,zero
   40b78:	31bfffc4 	addi	r6,r6,-1
   40b7c:	013fffc4 	movi	r4,-1
   40b80:	003fac06 	br	40a34 <__alt_data_end+0xfffcea34>
   40b84:	01400044 	movi	r5,1
   40b88:	2909c83a 	sub	r4,r5,r4
   40b8c:	00c006c4 	movi	r3,27
   40b90:	19004b0e 	bge	r3,r4,40cc0 <__divsf3+0x3cc>
   40b94:	114e703a 	and	r7,r2,r5
   40b98:	0009883a 	mov	r4,zero
   40b9c:	000d883a 	mov	r6,zero
   40ba0:	003fa406 	br	40a34 <__alt_data_end+0xfffcea34>
   40ba4:	9006917a 	slli	r3,r18,5
   40ba8:	8822917a 	slli	r17,r17,5
   40bac:	1c40372e 	bgeu	r3,r17,40c8c <__divsf3+0x398>
   40bb0:	31bfffc4 	addi	r6,r6,-1
   40bb4:	010006c4 	movi	r4,27
   40bb8:	000b883a 	mov	r5,zero
   40bbc:	180f883a 	mov	r7,r3
   40bc0:	294b883a 	add	r5,r5,r5
   40bc4:	18c7883a 	add	r3,r3,r3
   40bc8:	38000116 	blt	r7,zero,40bd0 <__divsf3+0x2dc>
   40bcc:	1c400236 	bltu	r3,r17,40bd8 <__divsf3+0x2e4>
   40bd0:	1c47c83a 	sub	r3,r3,r17
   40bd4:	29400054 	ori	r5,r5,1
   40bd8:	213fffc4 	addi	r4,r4,-1
   40bdc:	203ff71e 	bne	r4,zero,40bbc <__alt_data_end+0xfffcebbc>
   40be0:	1806c03a 	cmpne	r3,r3,zero
   40be4:	1962b03a 	or	r17,r3,r5
   40be8:	31001fc4 	addi	r4,r6,127
   40bec:	013fe50e 	bge	zero,r4,40b84 <__alt_data_end+0xfffceb84>
   40bf0:	88c001cc 	andi	r3,r17,7
   40bf4:	18000426 	beq	r3,zero,40c08 <__divsf3+0x314>
   40bf8:	88c003cc 	andi	r3,r17,15
   40bfc:	01400104 	movi	r5,4
   40c00:	19400126 	beq	r3,r5,40c08 <__divsf3+0x314>
   40c04:	8963883a 	add	r17,r17,r5
   40c08:	88c2002c 	andhi	r3,r17,2048
   40c0c:	18000426 	beq	r3,zero,40c20 <__divsf3+0x32c>
   40c10:	00fe0034 	movhi	r3,63488
   40c14:	18ffffc4 	addi	r3,r3,-1
   40c18:	31002004 	addi	r4,r6,128
   40c1c:	88e2703a 	and	r17,r17,r3
   40c20:	00c03f84 	movi	r3,254
   40c24:	193f8016 	blt	r3,r4,40a28 <__alt_data_end+0xfffcea28>
   40c28:	880c91ba 	slli	r6,r17,6
   40c2c:	11c0004c 	andi	r7,r2,1
   40c30:	300cd27a 	srli	r6,r6,9
   40c34:	003f7f06 	br	40a34 <__alt_data_end+0xfffcea34>
   40c38:	9080102c 	andhi	r2,r18,64
   40c3c:	10000226 	beq	r2,zero,40c48 <__divsf3+0x354>
   40c40:	8880102c 	andhi	r2,r17,64
   40c44:	10001826 	beq	r2,zero,40ca8 <__divsf3+0x3b4>
   40c48:	00802034 	movhi	r2,128
   40c4c:	91801034 	orhi	r6,r18,64
   40c50:	10bfffc4 	addi	r2,r2,-1
   40c54:	980f883a 	mov	r7,r19
   40c58:	308c703a 	and	r6,r6,r2
   40c5c:	003fc706 	br	40b7c <__alt_data_end+0xfffceb7c>
   40c60:	008000c4 	movi	r2,3
   40c64:	b8802d26 	beq	r23,r2,40d1c <__divsf3+0x428>
   40c68:	00c00044 	movi	r3,1
   40c6c:	b005883a 	mov	r2,r22
   40c70:	b8ffdd1e 	bne	r23,r3,40be8 <__alt_data_end+0xfffcebe8>
   40c74:	11c0004c 	andi	r7,r2,1
   40c78:	0009883a 	mov	r4,zero
   40c7c:	000d883a 	mov	r6,zero
   40c80:	003f6c06 	br	40a34 <__alt_data_end+0xfffcea34>
   40c84:	9023883a 	mov	r17,r18
   40c88:	003f6406 	br	40a1c <__alt_data_end+0xfffcea1c>
   40c8c:	1c47c83a 	sub	r3,r3,r17
   40c90:	01000684 	movi	r4,26
   40c94:	01400044 	movi	r5,1
   40c98:	003fc806 	br	40bbc <__alt_data_end+0xfffcebbc>
   40c9c:	9080102c 	andhi	r2,r18,64
   40ca0:	103fe926 	beq	r2,zero,40c48 <__alt_data_end+0xfffcec48>
   40ca4:	0023883a 	mov	r17,zero
   40ca8:	00802034 	movhi	r2,128
   40cac:	89801034 	orhi	r6,r17,64
   40cb0:	10bfffc4 	addi	r2,r2,-1
   40cb4:	a80f883a 	mov	r7,r21
   40cb8:	308c703a 	and	r6,r6,r2
   40cbc:	003faf06 	br	40b7c <__alt_data_end+0xfffceb7c>
   40cc0:	01c00804 	movi	r7,32
   40cc4:	390fc83a 	sub	r7,r7,r4
   40cc8:	89ce983a 	sll	r7,r17,r7
   40ccc:	890ad83a 	srl	r5,r17,r4
   40cd0:	380ec03a 	cmpne	r7,r7,zero
   40cd4:	29cab03a 	or	r5,r5,r7
   40cd8:	28c001cc 	andi	r3,r5,7
   40cdc:	18000426 	beq	r3,zero,40cf0 <__divsf3+0x3fc>
   40ce0:	28c003cc 	andi	r3,r5,15
   40ce4:	01000104 	movi	r4,4
   40ce8:	19000126 	beq	r3,r4,40cf0 <__divsf3+0x3fc>
   40cec:	290b883a 	add	r5,r5,r4
   40cf0:	28c1002c 	andhi	r3,r5,1024
   40cf4:	18000426 	beq	r3,zero,40d08 <__divsf3+0x414>
   40cf8:	11c0004c 	andi	r7,r2,1
   40cfc:	01000044 	movi	r4,1
   40d00:	000d883a 	mov	r6,zero
   40d04:	003f4b06 	br	40a34 <__alt_data_end+0xfffcea34>
   40d08:	280a91ba 	slli	r5,r5,6
   40d0c:	11c0004c 	andi	r7,r2,1
   40d10:	0009883a 	mov	r4,zero
   40d14:	280cd27a 	srli	r6,r5,9
   40d18:	003f4606 	br	40a34 <__alt_data_end+0xfffcea34>
   40d1c:	00802034 	movhi	r2,128
   40d20:	89801034 	orhi	r6,r17,64
   40d24:	10bfffc4 	addi	r2,r2,-1
   40d28:	b00f883a 	mov	r7,r22
   40d2c:	308c703a 	and	r6,r6,r2
   40d30:	003f9206 	br	40b7c <__alt_data_end+0xfffceb7c>

00040d34 <__mulsf3>:
   40d34:	defff504 	addi	sp,sp,-44
   40d38:	dc000115 	stw	r16,4(sp)
   40d3c:	2020d5fa 	srli	r16,r4,23
   40d40:	dd400615 	stw	r21,24(sp)
   40d44:	202ad7fa 	srli	r21,r4,31
   40d48:	dc800315 	stw	r18,12(sp)
   40d4c:	04802034 	movhi	r18,128
   40d50:	df000915 	stw	fp,36(sp)
   40d54:	dd000515 	stw	r20,20(sp)
   40d58:	94bfffc4 	addi	r18,r18,-1
   40d5c:	dfc00a15 	stw	ra,40(sp)
   40d60:	ddc00815 	stw	r23,32(sp)
   40d64:	dd800715 	stw	r22,28(sp)
   40d68:	dcc00415 	stw	r19,16(sp)
   40d6c:	dc400215 	stw	r17,8(sp)
   40d70:	84003fcc 	andi	r16,r16,255
   40d74:	9124703a 	and	r18,r18,r4
   40d78:	a829883a 	mov	r20,r21
   40d7c:	af003fcc 	andi	fp,r21,255
   40d80:	80005426 	beq	r16,zero,40ed4 <__mulsf3+0x1a0>
   40d84:	00803fc4 	movi	r2,255
   40d88:	80802f26 	beq	r16,r2,40e48 <__mulsf3+0x114>
   40d8c:	91002034 	orhi	r4,r18,128
   40d90:	202490fa 	slli	r18,r4,3
   40d94:	843fe044 	addi	r16,r16,-127
   40d98:	0023883a 	mov	r17,zero
   40d9c:	002f883a 	mov	r23,zero
   40da0:	2804d5fa 	srli	r2,r5,23
   40da4:	282cd7fa 	srli	r22,r5,31
   40da8:	01002034 	movhi	r4,128
   40dac:	213fffc4 	addi	r4,r4,-1
   40db0:	10803fcc 	andi	r2,r2,255
   40db4:	2166703a 	and	r19,r4,r5
   40db8:	b1803fcc 	andi	r6,r22,255
   40dbc:	10004c26 	beq	r2,zero,40ef0 <__mulsf3+0x1bc>
   40dc0:	00c03fc4 	movi	r3,255
   40dc4:	10c04726 	beq	r2,r3,40ee4 <__mulsf3+0x1b0>
   40dc8:	99002034 	orhi	r4,r19,128
   40dcc:	202690fa 	slli	r19,r4,3
   40dd0:	10bfe044 	addi	r2,r2,-127
   40dd4:	0007883a 	mov	r3,zero
   40dd8:	80a1883a 	add	r16,r16,r2
   40ddc:	010003c4 	movi	r4,15
   40de0:	1c44b03a 	or	r2,r3,r17
   40de4:	b56af03a 	xor	r21,r22,r21
   40de8:	81c00044 	addi	r7,r16,1
   40dec:	20806b36 	bltu	r4,r2,40f9c <__mulsf3+0x268>
   40df0:	100490ba 	slli	r2,r2,2
   40df4:	01000134 	movhi	r4,4
   40df8:	21038204 	addi	r4,r4,3592
   40dfc:	1105883a 	add	r2,r2,r4
   40e00:	10800017 	ldw	r2,0(r2)
   40e04:	1000683a 	jmp	r2
   40e08:	00040f9c 	xori	zero,zero,4158
   40e0c:	00040e5c 	xori	zero,zero,4153
   40e10:	00040e5c 	xori	zero,zero,4153
   40e14:	00040e58 	cmpnei	zero,zero,4153
   40e18:	00040f80 	call	40f8 <__alt_mem_RAM-0x3bf08>
   40e1c:	00040f80 	call	40f8 <__alt_mem_RAM-0x3bf08>
   40e20:	00040f6c 	andhi	zero,zero,4157
   40e24:	00040e58 	cmpnei	zero,zero,4153
   40e28:	00040f80 	call	40f8 <__alt_mem_RAM-0x3bf08>
   40e2c:	00040f6c 	andhi	zero,zero,4157
   40e30:	00040f80 	call	40f8 <__alt_mem_RAM-0x3bf08>
   40e34:	00040e58 	cmpnei	zero,zero,4153
   40e38:	00040f8c 	andi	zero,zero,4158
   40e3c:	00040f8c 	andi	zero,zero,4158
   40e40:	00040f8c 	andi	zero,zero,4158
   40e44:	0004109c 	xori	zero,zero,4162
   40e48:	90003b1e 	bne	r18,zero,40f38 <__mulsf3+0x204>
   40e4c:	04400204 	movi	r17,8
   40e50:	05c00084 	movi	r23,2
   40e54:	003fd206 	br	40da0 <__alt_data_end+0xfffceda0>
   40e58:	302b883a 	mov	r21,r6
   40e5c:	00800084 	movi	r2,2
   40e60:	18802626 	beq	r3,r2,40efc <__mulsf3+0x1c8>
   40e64:	008000c4 	movi	r2,3
   40e68:	1880b826 	beq	r3,r2,4114c <__mulsf3+0x418>
   40e6c:	00800044 	movi	r2,1
   40e70:	1880af1e 	bne	r3,r2,41130 <__mulsf3+0x3fc>
   40e74:	a829883a 	mov	r20,r21
   40e78:	0007883a 	mov	r3,zero
   40e7c:	0009883a 	mov	r4,zero
   40e80:	18803fcc 	andi	r2,r3,255
   40e84:	100695fa 	slli	r3,r2,23
   40e88:	a0803fcc 	andi	r2,r20,255
   40e8c:	100a97fa 	slli	r5,r2,31
   40e90:	00802034 	movhi	r2,128
   40e94:	10bfffc4 	addi	r2,r2,-1
   40e98:	2084703a 	and	r2,r4,r2
   40e9c:	10c4b03a 	or	r2,r2,r3
   40ea0:	1144b03a 	or	r2,r2,r5
   40ea4:	dfc00a17 	ldw	ra,40(sp)
   40ea8:	df000917 	ldw	fp,36(sp)
   40eac:	ddc00817 	ldw	r23,32(sp)
   40eb0:	dd800717 	ldw	r22,28(sp)
   40eb4:	dd400617 	ldw	r21,24(sp)
   40eb8:	dd000517 	ldw	r20,20(sp)
   40ebc:	dcc00417 	ldw	r19,16(sp)
   40ec0:	dc800317 	ldw	r18,12(sp)
   40ec4:	dc400217 	ldw	r17,8(sp)
   40ec8:	dc000117 	ldw	r16,4(sp)
   40ecc:	dec00b04 	addi	sp,sp,44
   40ed0:	f800283a 	ret
   40ed4:	90000d1e 	bne	r18,zero,40f0c <__mulsf3+0x1d8>
   40ed8:	04400104 	movi	r17,4
   40edc:	05c00044 	movi	r23,1
   40ee0:	003faf06 	br	40da0 <__alt_data_end+0xfffceda0>
   40ee4:	9806c03a 	cmpne	r3,r19,zero
   40ee8:	18c00084 	addi	r3,r3,2
   40eec:	003fba06 	br	40dd8 <__alt_data_end+0xfffcedd8>
   40ef0:	9800141e 	bne	r19,zero,40f44 <__mulsf3+0x210>
   40ef4:	00c00044 	movi	r3,1
   40ef8:	003fb706 	br	40dd8 <__alt_data_end+0xfffcedd8>
   40efc:	a829883a 	mov	r20,r21
   40f00:	00ffffc4 	movi	r3,-1
   40f04:	0009883a 	mov	r4,zero
   40f08:	003fdd06 	br	40e80 <__alt_data_end+0xfffcee80>
   40f0c:	9009883a 	mov	r4,r18
   40f10:	d9400015 	stw	r5,0(sp)
   40f14:	00414080 	call	41408 <__clzsi2>
   40f18:	10fffec4 	addi	r3,r2,-5
   40f1c:	10801d84 	addi	r2,r2,118
   40f20:	90e4983a 	sll	r18,r18,r3
   40f24:	00a1c83a 	sub	r16,zero,r2
   40f28:	0023883a 	mov	r17,zero
   40f2c:	002f883a 	mov	r23,zero
   40f30:	d9400017 	ldw	r5,0(sp)
   40f34:	003f9a06 	br	40da0 <__alt_data_end+0xfffceda0>
   40f38:	04400304 	movi	r17,12
   40f3c:	05c000c4 	movi	r23,3
   40f40:	003f9706 	br	40da0 <__alt_data_end+0xfffceda0>
   40f44:	9809883a 	mov	r4,r19
   40f48:	d9800015 	stw	r6,0(sp)
   40f4c:	00414080 	call	41408 <__clzsi2>
   40f50:	10fffec4 	addi	r3,r2,-5
   40f54:	10801d84 	addi	r2,r2,118
   40f58:	98e6983a 	sll	r19,r19,r3
   40f5c:	0085c83a 	sub	r2,zero,r2
   40f60:	0007883a 	mov	r3,zero
   40f64:	d9800017 	ldw	r6,0(sp)
   40f68:	003f9b06 	br	40dd8 <__alt_data_end+0xfffcedd8>
   40f6c:	01002034 	movhi	r4,128
   40f70:	0029883a 	mov	r20,zero
   40f74:	213fffc4 	addi	r4,r4,-1
   40f78:	00ffffc4 	movi	r3,-1
   40f7c:	003fc006 	br	40e80 <__alt_data_end+0xfffcee80>
   40f80:	9027883a 	mov	r19,r18
   40f84:	b807883a 	mov	r3,r23
   40f88:	003fb406 	br	40e5c <__alt_data_end+0xfffcee5c>
   40f8c:	9027883a 	mov	r19,r18
   40f90:	e02b883a 	mov	r21,fp
   40f94:	b807883a 	mov	r3,r23
   40f98:	003fb006 	br	40e5c <__alt_data_end+0xfffcee5c>
   40f9c:	9028d43a 	srli	r20,r18,16
   40fa0:	982cd43a 	srli	r22,r19,16
   40fa4:	94bfffcc 	andi	r18,r18,65535
   40fa8:	9cffffcc 	andi	r19,r19,65535
   40fac:	980b883a 	mov	r5,r19
   40fb0:	9009883a 	mov	r4,r18
   40fb4:	d9c00015 	stw	r7,0(sp)
   40fb8:	004146c0 	call	4146c <__mulsi3>
   40fbc:	a00b883a 	mov	r5,r20
   40fc0:	9809883a 	mov	r4,r19
   40fc4:	1023883a 	mov	r17,r2
   40fc8:	004146c0 	call	4146c <__mulsi3>
   40fcc:	a009883a 	mov	r4,r20
   40fd0:	b00b883a 	mov	r5,r22
   40fd4:	1027883a 	mov	r19,r2
   40fd8:	004146c0 	call	4146c <__mulsi3>
   40fdc:	b00b883a 	mov	r5,r22
   40fe0:	9009883a 	mov	r4,r18
   40fe4:	1029883a 	mov	r20,r2
   40fe8:	004146c0 	call	4146c <__mulsi3>
   40fec:	8806d43a 	srli	r3,r17,16
   40ff0:	14c5883a 	add	r2,r2,r19
   40ff4:	d9c00017 	ldw	r7,0(sp)
   40ff8:	1885883a 	add	r2,r3,r2
   40ffc:	14c0022e 	bgeu	r2,r19,41008 <__mulsf3+0x2d4>
   41000:	00c00074 	movhi	r3,1
   41004:	a0e9883a 	add	r20,r20,r3
   41008:	1026943a 	slli	r19,r2,16
   4100c:	8c7fffcc 	andi	r17,r17,65535
   41010:	1004d43a 	srli	r2,r2,16
   41014:	9c63883a 	add	r17,r19,r17
   41018:	882691ba 	slli	r19,r17,6
   4101c:	1505883a 	add	r2,r2,r20
   41020:	8822d6ba 	srli	r17,r17,26
   41024:	100891ba 	slli	r4,r2,6
   41028:	9826c03a 	cmpne	r19,r19,zero
   4102c:	9c62b03a 	or	r17,r19,r17
   41030:	8926b03a 	or	r19,r17,r4
   41034:	9882002c 	andhi	r2,r19,2048
   41038:	10000426 	beq	r2,zero,4104c <__mulsf3+0x318>
   4103c:	9804d07a 	srli	r2,r19,1
   41040:	9900004c 	andi	r4,r19,1
   41044:	3821883a 	mov	r16,r7
   41048:	1126b03a 	or	r19,r2,r4
   4104c:	80c01fc4 	addi	r3,r16,127
   41050:	00c0210e 	bge	zero,r3,410d8 <__mulsf3+0x3a4>
   41054:	988001cc 	andi	r2,r19,7
   41058:	10000426 	beq	r2,zero,4106c <__mulsf3+0x338>
   4105c:	988003cc 	andi	r2,r19,15
   41060:	01000104 	movi	r4,4
   41064:	11000126 	beq	r2,r4,4106c <__mulsf3+0x338>
   41068:	9927883a 	add	r19,r19,r4
   4106c:	9882002c 	andhi	r2,r19,2048
   41070:	10000426 	beq	r2,zero,41084 <__mulsf3+0x350>
   41074:	00be0034 	movhi	r2,63488
   41078:	10bfffc4 	addi	r2,r2,-1
   4107c:	80c02004 	addi	r3,r16,128
   41080:	98a6703a 	and	r19,r19,r2
   41084:	00803f84 	movi	r2,254
   41088:	10ff9c16 	blt	r2,r3,40efc <__alt_data_end+0xfffceefc>
   4108c:	980891ba 	slli	r4,r19,6
   41090:	a829883a 	mov	r20,r21
   41094:	2008d27a 	srli	r4,r4,9
   41098:	003f7906 	br	40e80 <__alt_data_end+0xfffcee80>
   4109c:	9080102c 	andhi	r2,r18,64
   410a0:	10000826 	beq	r2,zero,410c4 <__mulsf3+0x390>
   410a4:	9880102c 	andhi	r2,r19,64
   410a8:	1000061e 	bne	r2,zero,410c4 <__mulsf3+0x390>
   410ac:	00802034 	movhi	r2,128
   410b0:	99001034 	orhi	r4,r19,64
   410b4:	10bfffc4 	addi	r2,r2,-1
   410b8:	b029883a 	mov	r20,r22
   410bc:	2088703a 	and	r4,r4,r2
   410c0:	003fad06 	br	40f78 <__alt_data_end+0xfffcef78>
   410c4:	00802034 	movhi	r2,128
   410c8:	91001034 	orhi	r4,r18,64
   410cc:	10bfffc4 	addi	r2,r2,-1
   410d0:	2088703a 	and	r4,r4,r2
   410d4:	003fa806 	br	40f78 <__alt_data_end+0xfffcef78>
   410d8:	00800044 	movi	r2,1
   410dc:	10c7c83a 	sub	r3,r2,r3
   410e0:	008006c4 	movi	r2,27
   410e4:	10ff6316 	blt	r2,r3,40e74 <__alt_data_end+0xfffcee74>
   410e8:	00800804 	movi	r2,32
   410ec:	10c5c83a 	sub	r2,r2,r3
   410f0:	9884983a 	sll	r2,r19,r2
   410f4:	98c6d83a 	srl	r3,r19,r3
   410f8:	1004c03a 	cmpne	r2,r2,zero
   410fc:	1884b03a 	or	r2,r3,r2
   41100:	10c001cc 	andi	r3,r2,7
   41104:	18000426 	beq	r3,zero,41118 <__mulsf3+0x3e4>
   41108:	10c003cc 	andi	r3,r2,15
   4110c:	01000104 	movi	r4,4
   41110:	19000126 	beq	r3,r4,41118 <__mulsf3+0x3e4>
   41114:	1105883a 	add	r2,r2,r4
   41118:	10c1002c 	andhi	r3,r2,1024
   4111c:	18000626 	beq	r3,zero,41138 <__mulsf3+0x404>
   41120:	a829883a 	mov	r20,r21
   41124:	00c00044 	movi	r3,1
   41128:	0009883a 	mov	r4,zero
   4112c:	003f5406 	br	40e80 <__alt_data_end+0xfffcee80>
   41130:	3821883a 	mov	r16,r7
   41134:	003fc506 	br	4104c <__alt_data_end+0xfffcf04c>
   41138:	100491ba 	slli	r2,r2,6
   4113c:	a829883a 	mov	r20,r21
   41140:	0007883a 	mov	r3,zero
   41144:	1008d27a 	srli	r4,r2,9
   41148:	003f4d06 	br	40e80 <__alt_data_end+0xfffcee80>
   4114c:	00802034 	movhi	r2,128
   41150:	99001034 	orhi	r4,r19,64
   41154:	10bfffc4 	addi	r2,r2,-1
   41158:	a829883a 	mov	r20,r21
   4115c:	2088703a 	and	r4,r4,r2
   41160:	003f8506 	br	40f78 <__alt_data_end+0xfffcef78>

00041164 <__fixsfsi>:
   41164:	200ad5fa 	srli	r5,r4,23
   41168:	00c02034 	movhi	r3,128
   4116c:	18ffffc4 	addi	r3,r3,-1
   41170:	29403fcc 	andi	r5,r5,255
   41174:	00801f84 	movi	r2,126
   41178:	1906703a 	and	r3,r3,r4
   4117c:	2008d7fa 	srli	r4,r4,31
   41180:	11400e0e 	bge	r2,r5,411bc <__fixsfsi+0x58>
   41184:	00802744 	movi	r2,157
   41188:	11400816 	blt	r2,r5,411ac <__fixsfsi+0x48>
   4118c:	00802544 	movi	r2,149
   41190:	18c02034 	orhi	r3,r3,128
   41194:	11400b0e 	bge	r2,r5,411c4 <__fixsfsi+0x60>
   41198:	28bfda84 	addi	r2,r5,-150
   4119c:	1884983a 	sll	r2,r3,r2
   411a0:	20000726 	beq	r4,zero,411c0 <__fixsfsi+0x5c>
   411a4:	0085c83a 	sub	r2,zero,r2
   411a8:	f800283a 	ret
   411ac:	00a00034 	movhi	r2,32768
   411b0:	10bfffc4 	addi	r2,r2,-1
   411b4:	2085883a 	add	r2,r4,r2
   411b8:	f800283a 	ret
   411bc:	0005883a 	mov	r2,zero
   411c0:	f800283a 	ret
   411c4:	00802584 	movi	r2,150
   411c8:	1145c83a 	sub	r2,r2,r5
   411cc:	1884d83a 	srl	r2,r3,r2
   411d0:	003ff306 	br	411a0 <__alt_data_end+0xfffcf1a0>

000411d4 <__floatsisf>:
   411d4:	defffd04 	addi	sp,sp,-12
   411d8:	dfc00215 	stw	ra,8(sp)
   411dc:	dc400115 	stw	r17,4(sp)
   411e0:	dc000015 	stw	r16,0(sp)
   411e4:	20003526 	beq	r4,zero,412bc <__floatsisf+0xe8>
   411e8:	2021883a 	mov	r16,r4
   411ec:	2022d7fa 	srli	r17,r4,31
   411f0:	20003616 	blt	r4,zero,412cc <__floatsisf+0xf8>
   411f4:	8009883a 	mov	r4,r16
   411f8:	00414080 	call	41408 <__clzsi2>
   411fc:	00c02784 	movi	r3,158
   41200:	1887c83a 	sub	r3,r3,r2
   41204:	01002584 	movi	r4,150
   41208:	20c01416 	blt	r4,r3,4125c <__floatsisf+0x88>
   4120c:	20c9c83a 	sub	r4,r4,r3
   41210:	8120983a 	sll	r16,r16,r4
   41214:	00802034 	movhi	r2,128
   41218:	10bfffc4 	addi	r2,r2,-1
   4121c:	8809883a 	mov	r4,r17
   41220:	80a0703a 	and	r16,r16,r2
   41224:	18803fcc 	andi	r2,r3,255
   41228:	100695fa 	slli	r3,r2,23
   4122c:	20803fcc 	andi	r2,r4,255
   41230:	100897fa 	slli	r4,r2,31
   41234:	00802034 	movhi	r2,128
   41238:	10bfffc4 	addi	r2,r2,-1
   4123c:	8084703a 	and	r2,r16,r2
   41240:	10c4b03a 	or	r2,r2,r3
   41244:	1104b03a 	or	r2,r2,r4
   41248:	dfc00217 	ldw	ra,8(sp)
   4124c:	dc400117 	ldw	r17,4(sp)
   41250:	dc000017 	ldw	r16,0(sp)
   41254:	dec00304 	addi	sp,sp,12
   41258:	f800283a 	ret
   4125c:	01002644 	movi	r4,153
   41260:	20c01c16 	blt	r4,r3,412d4 <__floatsisf+0x100>
   41264:	20c9c83a 	sub	r4,r4,r3
   41268:	8120983a 	sll	r16,r16,r4
   4126c:	013f0034 	movhi	r4,64512
   41270:	213fffc4 	addi	r4,r4,-1
   41274:	814001cc 	andi	r5,r16,7
   41278:	8108703a 	and	r4,r16,r4
   4127c:	28000426 	beq	r5,zero,41290 <__floatsisf+0xbc>
   41280:	840003cc 	andi	r16,r16,15
   41284:	01400104 	movi	r5,4
   41288:	81400126 	beq	r16,r5,41290 <__floatsisf+0xbc>
   4128c:	2149883a 	add	r4,r4,r5
   41290:	2141002c 	andhi	r5,r4,1024
   41294:	28000526 	beq	r5,zero,412ac <__floatsisf+0xd8>
   41298:	00c027c4 	movi	r3,159
   4129c:	1887c83a 	sub	r3,r3,r2
   412a0:	00bf0034 	movhi	r2,64512
   412a4:	10bfffc4 	addi	r2,r2,-1
   412a8:	2088703a 	and	r4,r4,r2
   412ac:	202091ba 	slli	r16,r4,6
   412b0:	8809883a 	mov	r4,r17
   412b4:	8020d27a 	srli	r16,r16,9
   412b8:	003fda06 	br	41224 <__alt_data_end+0xfffcf224>
   412bc:	0009883a 	mov	r4,zero
   412c0:	0007883a 	mov	r3,zero
   412c4:	0021883a 	mov	r16,zero
   412c8:	003fd606 	br	41224 <__alt_data_end+0xfffcf224>
   412cc:	0121c83a 	sub	r16,zero,r4
   412d0:	003fc806 	br	411f4 <__alt_data_end+0xfffcf1f4>
   412d4:	01002e44 	movi	r4,185
   412d8:	20c9c83a 	sub	r4,r4,r3
   412dc:	01400144 	movi	r5,5
   412e0:	8108983a 	sll	r4,r16,r4
   412e4:	288bc83a 	sub	r5,r5,r2
   412e8:	8160d83a 	srl	r16,r16,r5
   412ec:	2008c03a 	cmpne	r4,r4,zero
   412f0:	8120b03a 	or	r16,r16,r4
   412f4:	003fdd06 	br	4126c <__alt_data_end+0xfffcf26c>

000412f8 <__extendsfdf2>:
   412f8:	200ad5fa 	srli	r5,r4,23
   412fc:	defffd04 	addi	sp,sp,-12
   41300:	dc400115 	stw	r17,4(sp)
   41304:	29403fcc 	andi	r5,r5,255
   41308:	29800044 	addi	r6,r5,1
   4130c:	04402034 	movhi	r17,128
   41310:	dc000015 	stw	r16,0(sp)
   41314:	8c7fffc4 	addi	r17,r17,-1
   41318:	dfc00215 	stw	ra,8(sp)
   4131c:	31803fcc 	andi	r6,r6,255
   41320:	00800044 	movi	r2,1
   41324:	8922703a 	and	r17,r17,r4
   41328:	2020d7fa 	srli	r16,r4,31
   4132c:	1180110e 	bge	r2,r6,41374 <__extendsfdf2+0x7c>
   41330:	880cd0fa 	srli	r6,r17,3
   41334:	8822977a 	slli	r17,r17,29
   41338:	2940e004 	addi	r5,r5,896
   4133c:	2941ffcc 	andi	r5,r5,2047
   41340:	2804953a 	slli	r2,r5,20
   41344:	01400434 	movhi	r5,16
   41348:	800697fa 	slli	r3,r16,31
   4134c:	297fffc4 	addi	r5,r5,-1
   41350:	314a703a 	and	r5,r6,r5
   41354:	288ab03a 	or	r5,r5,r2
   41358:	28c6b03a 	or	r3,r5,r3
   4135c:	8805883a 	mov	r2,r17
   41360:	dfc00217 	ldw	ra,8(sp)
   41364:	dc400117 	ldw	r17,4(sp)
   41368:	dc000017 	ldw	r16,0(sp)
   4136c:	dec00304 	addi	sp,sp,12
   41370:	f800283a 	ret
   41374:	2800111e 	bne	r5,zero,413bc <__extendsfdf2+0xc4>
   41378:	88001c26 	beq	r17,zero,413ec <__extendsfdf2+0xf4>
   4137c:	8809883a 	mov	r4,r17
   41380:	00414080 	call	41408 <__clzsi2>
   41384:	00c00284 	movi	r3,10
   41388:	18801b16 	blt	r3,r2,413f8 <__extendsfdf2+0x100>
   4138c:	018002c4 	movi	r6,11
   41390:	308dc83a 	sub	r6,r6,r2
   41394:	11000544 	addi	r4,r2,21
   41398:	8986d83a 	srl	r3,r17,r6
   4139c:	8922983a 	sll	r17,r17,r4
   413a0:	0180e244 	movi	r6,905
   413a4:	01400434 	movhi	r5,16
   413a8:	3085c83a 	sub	r2,r6,r2
   413ac:	297fffc4 	addi	r5,r5,-1
   413b0:	194c703a 	and	r6,r3,r5
   413b4:	1141ffcc 	andi	r5,r2,2047
   413b8:	003fe006 	br	4133c <__alt_data_end+0xfffcf33c>
   413bc:	88000826 	beq	r17,zero,413e0 <__extendsfdf2+0xe8>
   413c0:	880cd0fa 	srli	r6,r17,3
   413c4:	00800434 	movhi	r2,16
   413c8:	10bfffc4 	addi	r2,r2,-1
   413cc:	31800234 	orhi	r6,r6,8
   413d0:	8822977a 	slli	r17,r17,29
   413d4:	308c703a 	and	r6,r6,r2
   413d8:	0141ffc4 	movi	r5,2047
   413dc:	003fd706 	br	4133c <__alt_data_end+0xfffcf33c>
   413e0:	0141ffc4 	movi	r5,2047
   413e4:	000d883a 	mov	r6,zero
   413e8:	003fd406 	br	4133c <__alt_data_end+0xfffcf33c>
   413ec:	000b883a 	mov	r5,zero
   413f0:	000d883a 	mov	r6,zero
   413f4:	003fd106 	br	4133c <__alt_data_end+0xfffcf33c>
   413f8:	11bffd44 	addi	r6,r2,-11
   413fc:	8986983a 	sll	r3,r17,r6
   41400:	0023883a 	mov	r17,zero
   41404:	003fe606 	br	413a0 <__alt_data_end+0xfffcf3a0>

00041408 <__clzsi2>:
   41408:	00bfffd4 	movui	r2,65535
   4140c:	11000536 	bltu	r2,r4,41424 <__clzsi2+0x1c>
   41410:	00803fc4 	movi	r2,255
   41414:	11000f36 	bltu	r2,r4,41454 <__clzsi2+0x4c>
   41418:	00800804 	movi	r2,32
   4141c:	0007883a 	mov	r3,zero
   41420:	00000506 	br	41438 <__clzsi2+0x30>
   41424:	00804034 	movhi	r2,256
   41428:	10bfffc4 	addi	r2,r2,-1
   4142c:	11000c2e 	bgeu	r2,r4,41460 <__clzsi2+0x58>
   41430:	00800204 	movi	r2,8
   41434:	00c00604 	movi	r3,24
   41438:	20c8d83a 	srl	r4,r4,r3
   4143c:	00c00174 	movhi	r3,5
   41440:	18d9de04 	addi	r3,r3,26488
   41444:	1909883a 	add	r4,r3,r4
   41448:	20c00003 	ldbu	r3,0(r4)
   4144c:	10c5c83a 	sub	r2,r2,r3
   41450:	f800283a 	ret
   41454:	00800604 	movi	r2,24
   41458:	00c00204 	movi	r3,8
   4145c:	003ff606 	br	41438 <__alt_data_end+0xfffcf438>
   41460:	00800404 	movi	r2,16
   41464:	1007883a 	mov	r3,r2
   41468:	003ff306 	br	41438 <__alt_data_end+0xfffcf438>

0004146c <__mulsi3>:
   4146c:	0005883a 	mov	r2,zero
   41470:	20000726 	beq	r4,zero,41490 <__mulsi3+0x24>
   41474:	20c0004c 	andi	r3,r4,1
   41478:	2008d07a 	srli	r4,r4,1
   4147c:	18000126 	beq	r3,zero,41484 <__mulsi3+0x18>
   41480:	1145883a 	add	r2,r2,r5
   41484:	294b883a 	add	r5,r5,r5
   41488:	203ffa1e 	bne	r4,zero,41474 <__alt_data_end+0xfffcf474>
   4148c:	f800283a 	ret
   41490:	f800283a 	ret

00041494 <_printf_r>:
   41494:	defffd04 	addi	sp,sp,-12
   41498:	2805883a 	mov	r2,r5
   4149c:	dfc00015 	stw	ra,0(sp)
   414a0:	d9800115 	stw	r6,4(sp)
   414a4:	d9c00215 	stw	r7,8(sp)
   414a8:	21400217 	ldw	r5,8(r4)
   414ac:	d9c00104 	addi	r7,sp,4
   414b0:	100d883a 	mov	r6,r2
   414b4:	0043a0c0 	call	43a0c <___vfprintf_internal_r>
   414b8:	dfc00017 	ldw	ra,0(sp)
   414bc:	dec00304 	addi	sp,sp,12
   414c0:	f800283a 	ret

000414c4 <printf>:
   414c4:	defffc04 	addi	sp,sp,-16
   414c8:	dfc00015 	stw	ra,0(sp)
   414cc:	d9400115 	stw	r5,4(sp)
   414d0:	d9800215 	stw	r6,8(sp)
   414d4:	d9c00315 	stw	r7,12(sp)
   414d8:	008001b4 	movhi	r2,6
   414dc:	10a18604 	addi	r2,r2,-31208
   414e0:	10800017 	ldw	r2,0(r2)
   414e4:	200b883a 	mov	r5,r4
   414e8:	d9800104 	addi	r6,sp,4
   414ec:	11000217 	ldw	r4,8(r2)
   414f0:	0045ce80 	call	45ce8 <__vfprintf_internal>
   414f4:	dfc00017 	ldw	ra,0(sp)
   414f8:	dec00404 	addi	sp,sp,16
   414fc:	f800283a 	ret

00041500 <_putchar_r>:
   41500:	21800217 	ldw	r6,8(r4)
   41504:	004a8ac1 	jmpi	4a8ac <_putc_r>

00041508 <putchar>:
   41508:	008001b4 	movhi	r2,6
   4150c:	10a18604 	addi	r2,r2,-31208
   41510:	200b883a 	mov	r5,r4
   41514:	11000017 	ldw	r4,0(r2)
   41518:	21800217 	ldw	r6,8(r4)
   4151c:	004a8ac1 	jmpi	4a8ac <_putc_r>

00041520 <_puts_r>:
   41520:	defff604 	addi	sp,sp,-40
   41524:	dc000715 	stw	r16,28(sp)
   41528:	2021883a 	mov	r16,r4
   4152c:	2809883a 	mov	r4,r5
   41530:	dc400815 	stw	r17,32(sp)
   41534:	dfc00915 	stw	ra,36(sp)
   41538:	2823883a 	mov	r17,r5
   4153c:	00416b80 	call	416b8 <strlen>
   41540:	10c00044 	addi	r3,r2,1
   41544:	d8800115 	stw	r2,4(sp)
   41548:	00800174 	movhi	r2,5
   4154c:	109a1e04 	addi	r2,r2,26744
   41550:	d8800215 	stw	r2,8(sp)
   41554:	00800044 	movi	r2,1
   41558:	d8800315 	stw	r2,12(sp)
   4155c:	00800084 	movi	r2,2
   41560:	dc400015 	stw	r17,0(sp)
   41564:	d8c00615 	stw	r3,24(sp)
   41568:	dec00415 	stw	sp,16(sp)
   4156c:	d8800515 	stw	r2,20(sp)
   41570:	80000226 	beq	r16,zero,4157c <_puts_r+0x5c>
   41574:	80800e17 	ldw	r2,56(r16)
   41578:	10001426 	beq	r2,zero,415cc <_puts_r+0xac>
   4157c:	81400217 	ldw	r5,8(r16)
   41580:	2880030b 	ldhu	r2,12(r5)
   41584:	10c8000c 	andi	r3,r2,8192
   41588:	1800061e 	bne	r3,zero,415a4 <_puts_r+0x84>
   4158c:	29001917 	ldw	r4,100(r5)
   41590:	00f7ffc4 	movi	r3,-8193
   41594:	10880014 	ori	r2,r2,8192
   41598:	20c6703a 	and	r3,r4,r3
   4159c:	2880030d 	sth	r2,12(r5)
   415a0:	28c01915 	stw	r3,100(r5)
   415a4:	d9800404 	addi	r6,sp,16
   415a8:	8009883a 	mov	r4,r16
   415ac:	00482500 	call	48250 <__sfvwrite_r>
   415b0:	1000091e 	bne	r2,zero,415d8 <_puts_r+0xb8>
   415b4:	00800284 	movi	r2,10
   415b8:	dfc00917 	ldw	ra,36(sp)
   415bc:	dc400817 	ldw	r17,32(sp)
   415c0:	dc000717 	ldw	r16,28(sp)
   415c4:	dec00a04 	addi	sp,sp,40
   415c8:	f800283a 	ret
   415cc:	8009883a 	mov	r4,r16
   415d0:	0047dcc0 	call	47dcc <__sinit>
   415d4:	003fe906 	br	4157c <__alt_data_end+0xfffcf57c>
   415d8:	00bfffc4 	movi	r2,-1
   415dc:	003ff606 	br	415b8 <__alt_data_end+0xfffcf5b8>

000415e0 <puts>:
   415e0:	008001b4 	movhi	r2,6
   415e4:	10a18604 	addi	r2,r2,-31208
   415e8:	200b883a 	mov	r5,r4
   415ec:	11000017 	ldw	r4,0(r2)
   415f0:	00415201 	jmpi	41520 <_puts_r>

000415f4 <_sprintf_r>:
   415f4:	deffe404 	addi	sp,sp,-112
   415f8:	2807883a 	mov	r3,r5
   415fc:	dfc01a15 	stw	ra,104(sp)
   41600:	d9c01b15 	stw	r7,108(sp)
   41604:	00a00034 	movhi	r2,32768
   41608:	10bfffc4 	addi	r2,r2,-1
   4160c:	02008204 	movi	r8,520
   41610:	d8800215 	stw	r2,8(sp)
   41614:	d8800515 	stw	r2,20(sp)
   41618:	d9c01b04 	addi	r7,sp,108
   4161c:	d80b883a 	mov	r5,sp
   41620:	00bfffc4 	movi	r2,-1
   41624:	d8c00015 	stw	r3,0(sp)
   41628:	d8c00415 	stw	r3,16(sp)
   4162c:	da00030d 	sth	r8,12(sp)
   41630:	d880038d 	sth	r2,14(sp)
   41634:	00417500 	call	41750 <___svfprintf_internal_r>
   41638:	d8c00017 	ldw	r3,0(sp)
   4163c:	18000005 	stb	zero,0(r3)
   41640:	dfc01a17 	ldw	ra,104(sp)
   41644:	dec01c04 	addi	sp,sp,112
   41648:	f800283a 	ret

0004164c <sprintf>:
   4164c:	deffe304 	addi	sp,sp,-116
   41650:	2007883a 	mov	r3,r4
   41654:	dfc01a15 	stw	ra,104(sp)
   41658:	d9801b15 	stw	r6,108(sp)
   4165c:	d9c01c15 	stw	r7,112(sp)
   41660:	010001b4 	movhi	r4,6
   41664:	21218604 	addi	r4,r4,-31208
   41668:	21000017 	ldw	r4,0(r4)
   4166c:	00a00034 	movhi	r2,32768
   41670:	10bfffc4 	addi	r2,r2,-1
   41674:	280d883a 	mov	r6,r5
   41678:	02008204 	movi	r8,520
   4167c:	d8800215 	stw	r2,8(sp)
   41680:	d8800515 	stw	r2,20(sp)
   41684:	d9c01b04 	addi	r7,sp,108
   41688:	d80b883a 	mov	r5,sp
   4168c:	00bfffc4 	movi	r2,-1
   41690:	d8c00015 	stw	r3,0(sp)
   41694:	d8c00415 	stw	r3,16(sp)
   41698:	da00030d 	sth	r8,12(sp)
   4169c:	d880038d 	sth	r2,14(sp)
   416a0:	00417500 	call	41750 <___svfprintf_internal_r>
   416a4:	d8c00017 	ldw	r3,0(sp)
   416a8:	18000005 	stb	zero,0(r3)
   416ac:	dfc01a17 	ldw	ra,104(sp)
   416b0:	dec01d04 	addi	sp,sp,116
   416b4:	f800283a 	ret

000416b8 <strlen>:
   416b8:	208000cc 	andi	r2,r4,3
   416bc:	10002026 	beq	r2,zero,41740 <strlen+0x88>
   416c0:	20800007 	ldb	r2,0(r4)
   416c4:	10002026 	beq	r2,zero,41748 <strlen+0x90>
   416c8:	2005883a 	mov	r2,r4
   416cc:	00000206 	br	416d8 <strlen+0x20>
   416d0:	10c00007 	ldb	r3,0(r2)
   416d4:	18001826 	beq	r3,zero,41738 <strlen+0x80>
   416d8:	10800044 	addi	r2,r2,1
   416dc:	10c000cc 	andi	r3,r2,3
   416e0:	183ffb1e 	bne	r3,zero,416d0 <__alt_data_end+0xfffcf6d0>
   416e4:	10c00017 	ldw	r3,0(r2)
   416e8:	01ffbff4 	movhi	r7,65279
   416ec:	39ffbfc4 	addi	r7,r7,-257
   416f0:	00ca303a 	nor	r5,zero,r3
   416f4:	01a02074 	movhi	r6,32897
   416f8:	19c7883a 	add	r3,r3,r7
   416fc:	31a02004 	addi	r6,r6,-32640
   41700:	1946703a 	and	r3,r3,r5
   41704:	1986703a 	and	r3,r3,r6
   41708:	1800091e 	bne	r3,zero,41730 <strlen+0x78>
   4170c:	10800104 	addi	r2,r2,4
   41710:	10c00017 	ldw	r3,0(r2)
   41714:	19cb883a 	add	r5,r3,r7
   41718:	00c6303a 	nor	r3,zero,r3
   4171c:	28c6703a 	and	r3,r5,r3
   41720:	1986703a 	and	r3,r3,r6
   41724:	183ff926 	beq	r3,zero,4170c <__alt_data_end+0xfffcf70c>
   41728:	00000106 	br	41730 <strlen+0x78>
   4172c:	10800044 	addi	r2,r2,1
   41730:	10c00007 	ldb	r3,0(r2)
   41734:	183ffd1e 	bne	r3,zero,4172c <__alt_data_end+0xfffcf72c>
   41738:	1105c83a 	sub	r2,r2,r4
   4173c:	f800283a 	ret
   41740:	2005883a 	mov	r2,r4
   41744:	003fe706 	br	416e4 <__alt_data_end+0xfffcf6e4>
   41748:	0005883a 	mov	r2,zero
   4174c:	f800283a 	ret

00041750 <___svfprintf_internal_r>:
   41750:	deffb704 	addi	sp,sp,-292
   41754:	dfc04815 	stw	ra,288(sp)
   41758:	ddc04615 	stw	r23,280(sp)
   4175c:	d9402d15 	stw	r5,180(sp)
   41760:	d9003915 	stw	r4,228(sp)
   41764:	302f883a 	mov	r23,r6
   41768:	d9c02e15 	stw	r7,184(sp)
   4176c:	df004715 	stw	fp,284(sp)
   41770:	dd804515 	stw	r22,276(sp)
   41774:	dd404415 	stw	r21,272(sp)
   41778:	dd004315 	stw	r20,268(sp)
   4177c:	dcc04215 	stw	r19,264(sp)
   41780:	dc804115 	stw	r18,260(sp)
   41784:	dc404015 	stw	r17,256(sp)
   41788:	dc003f15 	stw	r16,252(sp)
   4178c:	004894c0 	call	4894c <_localeconv_r>
   41790:	10800017 	ldw	r2,0(r2)
   41794:	1009883a 	mov	r4,r2
   41798:	d8803415 	stw	r2,208(sp)
   4179c:	00416b80 	call	416b8 <strlen>
   417a0:	d8c02d17 	ldw	r3,180(sp)
   417a4:	d8803815 	stw	r2,224(sp)
   417a8:	1880030b 	ldhu	r2,12(r3)
   417ac:	1080200c 	andi	r2,r2,128
   417b0:	10000226 	beq	r2,zero,417bc <___svfprintf_internal_r+0x6c>
   417b4:	18800417 	ldw	r2,16(r3)
   417b8:	1006b126 	beq	r2,zero,43280 <___svfprintf_internal_r+0x1b30>
   417bc:	dcc03917 	ldw	r19,228(sp)
   417c0:	d8c00404 	addi	r3,sp,16
   417c4:	05400174 	movhi	r21,5
   417c8:	d9001e04 	addi	r4,sp,120
   417cc:	ad5a2f84 	addi	r21,r21,26814
   417d0:	d8c01e15 	stw	r3,120(sp)
   417d4:	d8002015 	stw	zero,128(sp)
   417d8:	d8001f15 	stw	zero,124(sp)
   417dc:	d8003315 	stw	zero,204(sp)
   417e0:	d8003615 	stw	zero,216(sp)
   417e4:	d8003715 	stw	zero,220(sp)
   417e8:	1811883a 	mov	r8,r3
   417ec:	d8003a15 	stw	zero,232(sp)
   417f0:	d8003b15 	stw	zero,236(sp)
   417f4:	d8002f15 	stw	zero,188(sp)
   417f8:	d9002815 	stw	r4,160(sp)
   417fc:	b8800007 	ldb	r2,0(r23)
   41800:	10027726 	beq	r2,zero,421e0 <___svfprintf_internal_r+0xa90>
   41804:	00c00944 	movi	r3,37
   41808:	b823883a 	mov	r17,r23
   4180c:	10c0021e 	bne	r2,r3,41818 <___svfprintf_internal_r+0xc8>
   41810:	00001406 	br	41864 <___svfprintf_internal_r+0x114>
   41814:	10c00326 	beq	r2,r3,41824 <___svfprintf_internal_r+0xd4>
   41818:	8c400044 	addi	r17,r17,1
   4181c:	88800007 	ldb	r2,0(r17)
   41820:	103ffc1e 	bne	r2,zero,41814 <__alt_data_end+0xfffcf814>
   41824:	8de1c83a 	sub	r16,r17,r23
   41828:	80000e26 	beq	r16,zero,41864 <___svfprintf_internal_r+0x114>
   4182c:	d8c02017 	ldw	r3,128(sp)
   41830:	d8801f17 	ldw	r2,124(sp)
   41834:	45c00015 	stw	r23,0(r8)
   41838:	1c07883a 	add	r3,r3,r16
   4183c:	10800044 	addi	r2,r2,1
   41840:	d8c02015 	stw	r3,128(sp)
   41844:	44000115 	stw	r16,4(r8)
   41848:	d8801f15 	stw	r2,124(sp)
   4184c:	00c001c4 	movi	r3,7
   41850:	18809916 	blt	r3,r2,41ab8 <___svfprintf_internal_r+0x368>
   41854:	42000204 	addi	r8,r8,8
   41858:	d9402f17 	ldw	r5,188(sp)
   4185c:	2c0b883a 	add	r5,r5,r16
   41860:	d9402f15 	stw	r5,188(sp)
   41864:	88800007 	ldb	r2,0(r17)
   41868:	10009a26 	beq	r2,zero,41ad4 <___svfprintf_internal_r+0x384>
   4186c:	8dc00044 	addi	r23,r17,1
   41870:	8c400047 	ldb	r17,1(r17)
   41874:	0021883a 	mov	r16,zero
   41878:	00bfffc4 	movi	r2,-1
   4187c:	0025883a 	mov	r18,zero
   41880:	dc002905 	stb	r16,164(sp)
   41884:	d8002785 	stb	zero,158(sp)
   41888:	d8002b05 	stb	zero,172(sp)
   4188c:	d8802a15 	stw	r2,168(sp)
   41890:	d8003115 	stw	zero,196(sp)
   41894:	05001604 	movi	r20,88
   41898:	05800244 	movi	r22,9
   4189c:	4039883a 	mov	fp,r8
   418a0:	9021883a 	mov	r16,r18
   418a4:	bdc00044 	addi	r23,r23,1
   418a8:	88bff804 	addi	r2,r17,-32
   418ac:	a0831e36 	bltu	r20,r2,42528 <___svfprintf_internal_r+0xdd8>
   418b0:	100490ba 	slli	r2,r2,2
   418b4:	00c00134 	movhi	r3,4
   418b8:	18c63204 	addi	r3,r3,6344
   418bc:	10c5883a 	add	r2,r2,r3
   418c0:	10800017 	ldw	r2,0(r2)
   418c4:	1000683a 	jmp	r2
   418c8:	00042470 	cmpltui	zero,zero,4241
   418cc:	00042528 	cmpgeui	zero,zero,4244
   418d0:	00042528 	cmpgeui	zero,zero,4244
   418d4:	00042464 	muli	zero,zero,4241
   418d8:	00042528 	cmpgeui	zero,zero,4244
   418dc:	00042528 	cmpgeui	zero,zero,4244
   418e0:	00042528 	cmpgeui	zero,zero,4244
   418e4:	00042528 	cmpgeui	zero,zero,4244
   418e8:	00042528 	cmpgeui	zero,zero,4244
   418ec:	00042528 	cmpgeui	zero,zero,4244
   418f0:	00041b30 	cmpltui	zero,zero,4204
   418f4:	00042374 	movhi	zero,4237
   418f8:	00042528 	cmpgeui	zero,zero,4244
   418fc:	00041a3c 	xorhi	zero,zero,4200
   41900:	00041b54 	movui	zero,4205
   41904:	00042528 	cmpgeui	zero,zero,4244
   41908:	00041be0 	cmpeqi	zero,zero,4207
   4190c:	00041ba4 	muli	zero,zero,4206
   41910:	00041ba4 	muli	zero,zero,4206
   41914:	00041ba4 	muli	zero,zero,4206
   41918:	00041ba4 	muli	zero,zero,4206
   4191c:	00041ba4 	muli	zero,zero,4206
   41920:	00041ba4 	muli	zero,zero,4206
   41924:	00041ba4 	muli	zero,zero,4206
   41928:	00041ba4 	muli	zero,zero,4206
   4192c:	00041ba4 	muli	zero,zero,4206
   41930:	00042528 	cmpgeui	zero,zero,4244
   41934:	00042528 	cmpgeui	zero,zero,4244
   41938:	00042528 	cmpgeui	zero,zero,4244
   4193c:	00042528 	cmpgeui	zero,zero,4244
   41940:	00042528 	cmpgeui	zero,zero,4244
   41944:	00042528 	cmpgeui	zero,zero,4244
   41948:	00042528 	cmpgeui	zero,zero,4244
   4194c:	00042528 	cmpgeui	zero,zero,4244
   41950:	00042528 	cmpgeui	zero,zero,4244
   41954:	00042528 	cmpgeui	zero,zero,4244
   41958:	00041ca4 	muli	zero,zero,4210
   4195c:	00041bec 	andhi	zero,zero,4207
   41960:	00042528 	cmpgeui	zero,zero,4244
   41964:	00041bec 	andhi	zero,zero,4207
   41968:	00042528 	cmpgeui	zero,zero,4244
   4196c:	00042528 	cmpgeui	zero,zero,4244
   41970:	00042528 	cmpgeui	zero,zero,4244
   41974:	00042528 	cmpgeui	zero,zero,4244
   41978:	00041c98 	cmpnei	zero,zero,4210
   4197c:	00042528 	cmpgeui	zero,zero,4244
   41980:	00042528 	cmpgeui	zero,zero,4244
   41984:	00041d6c 	andhi	zero,zero,4213
   41988:	00042528 	cmpgeui	zero,zero,4244
   4198c:	00042528 	cmpgeui	zero,zero,4244
   41990:	00042528 	cmpgeui	zero,zero,4244
   41994:	00042528 	cmpgeui	zero,zero,4244
   41998:	00042528 	cmpgeui	zero,zero,4244
   4199c:	000421e8 	cmpgeui	zero,zero,4231
   419a0:	00042528 	cmpgeui	zero,zero,4244
   419a4:	00042528 	cmpgeui	zero,zero,4244
   419a8:	00042254 	movui	zero,4233
   419ac:	00042528 	cmpgeui	zero,zero,4244
   419b0:	00042528 	cmpgeui	zero,zero,4244
   419b4:	00042528 	cmpgeui	zero,zero,4244
   419b8:	00042528 	cmpgeui	zero,zero,4244
   419bc:	00042528 	cmpgeui	zero,zero,4244
   419c0:	00042528 	cmpgeui	zero,zero,4244
   419c4:	00042528 	cmpgeui	zero,zero,4244
   419c8:	00042528 	cmpgeui	zero,zero,4244
   419cc:	00042528 	cmpgeui	zero,zero,4244
   419d0:	00042528 	cmpgeui	zero,zero,4244
   419d4:	00042310 	cmplti	zero,zero,4236
   419d8:	00042490 	cmplti	zero,zero,4242
   419dc:	00041bec 	andhi	zero,zero,4207
   419e0:	00041bec 	andhi	zero,zero,4207
   419e4:	00041bec 	andhi	zero,zero,4207
   419e8:	00042504 	movi	zero,4244
   419ec:	00042490 	cmplti	zero,zero,4242
   419f0:	00042528 	cmpgeui	zero,zero,4244
   419f4:	00042528 	cmpgeui	zero,zero,4244
   419f8:	000424b0 	cmpltui	zero,zero,4242
   419fc:	00042528 	cmpgeui	zero,zero,4244
   41a00:	000424c4 	movi	zero,4243
   41a04:	00042354 	movui	zero,4237
   41a08:	00041a48 	cmpgei	zero,zero,4201
   41a0c:	0004238c 	andi	zero,zero,4238
   41a10:	00042528 	cmpgeui	zero,zero,4244
   41a14:	00042398 	cmpnei	zero,zero,4238
   41a18:	00042528 	cmpgeui	zero,zero,4244
   41a1c:	000423fc 	xorhi	zero,zero,4239
   41a20:	00042528 	cmpgeui	zero,zero,4244
   41a24:	00042528 	cmpgeui	zero,zero,4244
   41a28:	0004241c 	xori	zero,zero,4240
   41a2c:	d8c03117 	ldw	r3,196(sp)
   41a30:	d8802e15 	stw	r2,184(sp)
   41a34:	00c7c83a 	sub	r3,zero,r3
   41a38:	d8c03115 	stw	r3,196(sp)
   41a3c:	84000114 	ori	r16,r16,4
   41a40:	bc400007 	ldb	r17,0(r23)
   41a44:	003f9706 	br	418a4 <__alt_data_end+0xfffcf8a4>
   41a48:	00800c04 	movi	r2,48
   41a4c:	d8802705 	stb	r2,156(sp)
   41a50:	00801e04 	movi	r2,120
   41a54:	d8802745 	stb	r2,157(sp)
   41a58:	d9002a17 	ldw	r4,168(sp)
   41a5c:	d8802e17 	ldw	r2,184(sp)
   41a60:	d8002785 	stb	zero,158(sp)
   41a64:	e011883a 	mov	r8,fp
   41a68:	10c00104 	addi	r3,r2,4
   41a6c:	15000017 	ldw	r20,0(r2)
   41a70:	002d883a 	mov	r22,zero
   41a74:	80800094 	ori	r2,r16,2
   41a78:	2002b616 	blt	r4,zero,42554 <___svfprintf_internal_r+0xe04>
   41a7c:	00bfdfc4 	movi	r2,-129
   41a80:	80a4703a 	and	r18,r16,r2
   41a84:	d8c02e15 	stw	r3,184(sp)
   41a88:	94800094 	ori	r18,r18,2
   41a8c:	a002a01e 	bne	r20,zero,42510 <___svfprintf_internal_r+0xdc0>
   41a90:	01400174 	movhi	r5,5
   41a94:	295a2804 	addi	r5,r5,26784
   41a98:	d9403a15 	stw	r5,232(sp)
   41a9c:	04401e04 	movi	r17,120
   41aa0:	d8c02a17 	ldw	r3,168(sp)
   41aa4:	0039883a 	mov	fp,zero
   41aa8:	1801e626 	beq	r3,zero,42244 <___svfprintf_internal_r+0xaf4>
   41aac:	0029883a 	mov	r20,zero
   41ab0:	002d883a 	mov	r22,zero
   41ab4:	00020506 	br	422cc <___svfprintf_internal_r+0xb7c>
   41ab8:	d9402d17 	ldw	r5,180(sp)
   41abc:	d9801e04 	addi	r6,sp,120
   41ac0:	9809883a 	mov	r4,r19
   41ac4:	004b2580 	call	4b258 <__ssprint_r>
   41ac8:	1000081e 	bne	r2,zero,41aec <___svfprintf_internal_r+0x39c>
   41acc:	da000404 	addi	r8,sp,16
   41ad0:	003f6106 	br	41858 <__alt_data_end+0xfffcf858>
   41ad4:	d8802017 	ldw	r2,128(sp)
   41ad8:	10000426 	beq	r2,zero,41aec <___svfprintf_internal_r+0x39c>
   41adc:	d9402d17 	ldw	r5,180(sp)
   41ae0:	d9003917 	ldw	r4,228(sp)
   41ae4:	d9801e04 	addi	r6,sp,120
   41ae8:	004b2580 	call	4b258 <__ssprint_r>
   41aec:	d8802d17 	ldw	r2,180(sp)
   41af0:	10c0030b 	ldhu	r3,12(r2)
   41af4:	d8802f17 	ldw	r2,188(sp)
   41af8:	18c0100c 	andi	r3,r3,64
   41afc:	1806251e 	bne	r3,zero,43394 <___svfprintf_internal_r+0x1c44>
   41b00:	dfc04817 	ldw	ra,288(sp)
   41b04:	df004717 	ldw	fp,284(sp)
   41b08:	ddc04617 	ldw	r23,280(sp)
   41b0c:	dd804517 	ldw	r22,276(sp)
   41b10:	dd404417 	ldw	r21,272(sp)
   41b14:	dd004317 	ldw	r20,268(sp)
   41b18:	dcc04217 	ldw	r19,264(sp)
   41b1c:	dc804117 	ldw	r18,260(sp)
   41b20:	dc404017 	ldw	r17,256(sp)
   41b24:	dc003f17 	ldw	r16,252(sp)
   41b28:	dec04904 	addi	sp,sp,292
   41b2c:	f800283a 	ret
   41b30:	d9002e17 	ldw	r4,184(sp)
   41b34:	d9402e17 	ldw	r5,184(sp)
   41b38:	21000017 	ldw	r4,0(r4)
   41b3c:	28800104 	addi	r2,r5,4
   41b40:	d9003115 	stw	r4,196(sp)
   41b44:	203fb916 	blt	r4,zero,41a2c <__alt_data_end+0xfffcfa2c>
   41b48:	d8802e15 	stw	r2,184(sp)
   41b4c:	bc400007 	ldb	r17,0(r23)
   41b50:	003f5406 	br	418a4 <__alt_data_end+0xfffcf8a4>
   41b54:	bc400007 	ldb	r17,0(r23)
   41b58:	01000a84 	movi	r4,42
   41b5c:	b8c00044 	addi	r3,r23,1
   41b60:	89076926 	beq	r17,r4,43908 <___svfprintf_internal_r+0x21b8>
   41b64:	8cbff404 	addi	r18,r17,-48
   41b68:	b486b936 	bltu	r22,r18,43650 <___svfprintf_internal_r+0x1f00>
   41b6c:	0009883a 	mov	r4,zero
   41b70:	1823883a 	mov	r17,r3
   41b74:	01400284 	movi	r5,10
   41b78:	004146c0 	call	4146c <__mulsi3>
   41b7c:	88c00007 	ldb	r3,0(r17)
   41b80:	1489883a 	add	r4,r2,r18
   41b84:	8dc00044 	addi	r23,r17,1
   41b88:	1cbff404 	addi	r18,r3,-48
   41b8c:	b823883a 	mov	r17,r23
   41b90:	b4bff82e 	bgeu	r22,r18,41b74 <__alt_data_end+0xfffcfb74>
   41b94:	1823883a 	mov	r17,r3
   41b98:	20060416 	blt	r4,zero,433ac <___svfprintf_internal_r+0x1c5c>
   41b9c:	d9002a15 	stw	r4,168(sp)
   41ba0:	003f4106 	br	418a8 <__alt_data_end+0xfffcf8a8>
   41ba4:	8cbff404 	addi	r18,r17,-48
   41ba8:	d8003115 	stw	zero,196(sp)
   41bac:	0009883a 	mov	r4,zero
   41bb0:	b823883a 	mov	r17,r23
   41bb4:	01400284 	movi	r5,10
   41bb8:	004146c0 	call	4146c <__mulsi3>
   41bbc:	88c00007 	ldb	r3,0(r17)
   41bc0:	9089883a 	add	r4,r18,r2
   41bc4:	bdc00044 	addi	r23,r23,1
   41bc8:	1cbff404 	addi	r18,r3,-48
   41bcc:	b823883a 	mov	r17,r23
   41bd0:	b4bff82e 	bgeu	r22,r18,41bb4 <__alt_data_end+0xfffcfbb4>
   41bd4:	1823883a 	mov	r17,r3
   41bd8:	d9003115 	stw	r4,196(sp)
   41bdc:	003f3206 	br	418a8 <__alt_data_end+0xfffcf8a8>
   41be0:	84002014 	ori	r16,r16,128
   41be4:	bc400007 	ldb	r17,0(r23)
   41be8:	003f2e06 	br	418a4 <__alt_data_end+0xfffcf8a4>
   41bec:	8025883a 	mov	r18,r16
   41bf0:	dc002903 	ldbu	r16,164(sp)
   41bf4:	e011883a 	mov	r8,fp
   41bf8:	84003fcc 	andi	r16,r16,255
   41bfc:	8007721e 	bne	r16,zero,439c8 <___svfprintf_internal_r+0x2278>
   41c00:	9080020c 	andi	r2,r18,8
   41c04:	1004a526 	beq	r2,zero,42e9c <___svfprintf_internal_r+0x174c>
   41c08:	d9002e17 	ldw	r4,184(sp)
   41c0c:	d9402e17 	ldw	r5,184(sp)
   41c10:	d8802e17 	ldw	r2,184(sp)
   41c14:	21000017 	ldw	r4,0(r4)
   41c18:	29400117 	ldw	r5,4(r5)
   41c1c:	10800204 	addi	r2,r2,8
   41c20:	d9003615 	stw	r4,216(sp)
   41c24:	d9403715 	stw	r5,220(sp)
   41c28:	d8802e15 	stw	r2,184(sp)
   41c2c:	d9003617 	ldw	r4,216(sp)
   41c30:	d9403717 	ldw	r5,220(sp)
   41c34:	da003e15 	stw	r8,248(sp)
   41c38:	04000044 	movi	r16,1
   41c3c:	004af780 	call	4af78 <__fpclassifyd>
   41c40:	da003e17 	ldw	r8,248(sp)
   41c44:	1404731e 	bne	r2,r16,42e14 <___svfprintf_internal_r+0x16c4>
   41c48:	d9003617 	ldw	r4,216(sp)
   41c4c:	d9403717 	ldw	r5,220(sp)
   41c50:	000d883a 	mov	r6,zero
   41c54:	000f883a 	mov	r7,zero
   41c58:	00507ac0 	call	507ac <__ledf2>
   41c5c:	da003e17 	ldw	r8,248(sp)
   41c60:	10061b16 	blt	r2,zero,434d0 <___svfprintf_internal_r+0x1d80>
   41c64:	df002783 	ldbu	fp,158(sp)
   41c68:	008011c4 	movi	r2,71
   41c6c:	1445810e 	bge	r2,r17,43274 <___svfprintf_internal_r+0x1b24>
   41c70:	04000174 	movhi	r16,5
   41c74:	841a2004 	addi	r16,r16,26752
   41c78:	00c000c4 	movi	r3,3
   41c7c:	00bfdfc4 	movi	r2,-129
   41c80:	d8c02915 	stw	r3,164(sp)
   41c84:	90a4703a 	and	r18,r18,r2
   41c88:	d8c02b15 	stw	r3,172(sp)
   41c8c:	d8002a15 	stw	zero,168(sp)
   41c90:	d8003215 	stw	zero,200(sp)
   41c94:	00006c06 	br	41e48 <___svfprintf_internal_r+0x6f8>
   41c98:	84000214 	ori	r16,r16,8
   41c9c:	bc400007 	ldb	r17,0(r23)
   41ca0:	003f0006 	br	418a4 <__alt_data_end+0xfffcf8a4>
   41ca4:	8025883a 	mov	r18,r16
   41ca8:	dc002903 	ldbu	r16,164(sp)
   41cac:	e011883a 	mov	r8,fp
   41cb0:	84003fcc 	andi	r16,r16,255
   41cb4:	80073f1e 	bne	r16,zero,439b4 <___svfprintf_internal_r+0x2264>
   41cb8:	94800414 	ori	r18,r18,16
   41cbc:	9080080c 	andi	r2,r18,32
   41cc0:	1003bb26 	beq	r2,zero,42bb0 <___svfprintf_internal_r+0x1460>
   41cc4:	d9002e17 	ldw	r4,184(sp)
   41cc8:	20800117 	ldw	r2,4(r4)
   41ccc:	25000017 	ldw	r20,0(r4)
   41cd0:	21000204 	addi	r4,r4,8
   41cd4:	d9002e15 	stw	r4,184(sp)
   41cd8:	102d883a 	mov	r22,r2
   41cdc:	1003bd16 	blt	r2,zero,42bd4 <___svfprintf_internal_r+0x1484>
   41ce0:	d9002a17 	ldw	r4,168(sp)
   41ce4:	df002783 	ldbu	fp,158(sp)
   41ce8:	2003d016 	blt	r4,zero,42c2c <___svfprintf_internal_r+0x14dc>
   41cec:	00ffdfc4 	movi	r3,-129
   41cf0:	a584b03a 	or	r2,r20,r22
   41cf4:	90e4703a 	and	r18,r18,r3
   41cf8:	10015026 	beq	r2,zero,4223c <___svfprintf_internal_r+0xaec>
   41cfc:	b0037026 	beq	r22,zero,42ac0 <___svfprintf_internal_r+0x1370>
   41d00:	dc402915 	stw	r17,164(sp)
   41d04:	dc001e04 	addi	r16,sp,120
   41d08:	b023883a 	mov	r17,r22
   41d0c:	402d883a 	mov	r22,r8
   41d10:	a009883a 	mov	r4,r20
   41d14:	880b883a 	mov	r5,r17
   41d18:	01800284 	movi	r6,10
   41d1c:	000f883a 	mov	r7,zero
   41d20:	004ee080 	call	4ee08 <__umoddi3>
   41d24:	10800c04 	addi	r2,r2,48
   41d28:	843fffc4 	addi	r16,r16,-1
   41d2c:	a009883a 	mov	r4,r20
   41d30:	880b883a 	mov	r5,r17
   41d34:	80800005 	stb	r2,0(r16)
   41d38:	01800284 	movi	r6,10
   41d3c:	000f883a 	mov	r7,zero
   41d40:	004e80c0 	call	4e80c <__udivdi3>
   41d44:	1029883a 	mov	r20,r2
   41d48:	10c4b03a 	or	r2,r2,r3
   41d4c:	1823883a 	mov	r17,r3
   41d50:	103fef1e 	bne	r2,zero,41d10 <__alt_data_end+0xfffcfd10>
   41d54:	d8c02817 	ldw	r3,160(sp)
   41d58:	dc402917 	ldw	r17,164(sp)
   41d5c:	b011883a 	mov	r8,r22
   41d60:	1c07c83a 	sub	r3,r3,r16
   41d64:	d8c02b15 	stw	r3,172(sp)
   41d68:	00003106 	br	41e30 <___svfprintf_internal_r+0x6e0>
   41d6c:	8025883a 	mov	r18,r16
   41d70:	dc002903 	ldbu	r16,164(sp)
   41d74:	e011883a 	mov	r8,fp
   41d78:	84003fcc 	andi	r16,r16,255
   41d7c:	80070a1e 	bne	r16,zero,439a8 <___svfprintf_internal_r+0x2258>
   41d80:	94800414 	ori	r18,r18,16
   41d84:	9080080c 	andi	r2,r18,32
   41d88:	1002f626 	beq	r2,zero,42964 <___svfprintf_internal_r+0x1214>
   41d8c:	d9002e17 	ldw	r4,184(sp)
   41d90:	d9402a17 	ldw	r5,168(sp)
   41d94:	d8002785 	stb	zero,158(sp)
   41d98:	20800204 	addi	r2,r4,8
   41d9c:	25000017 	ldw	r20,0(r4)
   41da0:	25800117 	ldw	r22,4(r4)
   41da4:	28043716 	blt	r5,zero,42e84 <___svfprintf_internal_r+0x1734>
   41da8:	013fdfc4 	movi	r4,-129
   41dac:	a586b03a 	or	r3,r20,r22
   41db0:	d8802e15 	stw	r2,184(sp)
   41db4:	9124703a 	and	r18,r18,r4
   41db8:	1802f71e 	bne	r3,zero,42998 <___svfprintf_internal_r+0x1248>
   41dbc:	d9402a17 	ldw	r5,168(sp)
   41dc0:	0039883a 	mov	fp,zero
   41dc4:	2806df26 	beq	r5,zero,43944 <___svfprintf_internal_r+0x21f4>
   41dc8:	0029883a 	mov	r20,zero
   41dcc:	002d883a 	mov	r22,zero
   41dd0:	dc001e04 	addi	r16,sp,120
   41dd4:	a006d0fa 	srli	r3,r20,3
   41dd8:	b008977a 	slli	r4,r22,29
   41ddc:	b02cd0fa 	srli	r22,r22,3
   41de0:	a50001cc 	andi	r20,r20,7
   41de4:	a0800c04 	addi	r2,r20,48
   41de8:	843fffc4 	addi	r16,r16,-1
   41dec:	20e8b03a 	or	r20,r4,r3
   41df0:	80800005 	stb	r2,0(r16)
   41df4:	a586b03a 	or	r3,r20,r22
   41df8:	183ff61e 	bne	r3,zero,41dd4 <__alt_data_end+0xfffcfdd4>
   41dfc:	90c0004c 	andi	r3,r18,1
   41e00:	18013f26 	beq	r3,zero,42300 <___svfprintf_internal_r+0xbb0>
   41e04:	10803fcc 	andi	r2,r2,255
   41e08:	1080201c 	xori	r2,r2,128
   41e0c:	10bfe004 	addi	r2,r2,-128
   41e10:	00c00c04 	movi	r3,48
   41e14:	10c13a26 	beq	r2,r3,42300 <___svfprintf_internal_r+0xbb0>
   41e18:	80ffffc5 	stb	r3,-1(r16)
   41e1c:	d8c02817 	ldw	r3,160(sp)
   41e20:	80bfffc4 	addi	r2,r16,-1
   41e24:	1021883a 	mov	r16,r2
   41e28:	1887c83a 	sub	r3,r3,r2
   41e2c:	d8c02b15 	stw	r3,172(sp)
   41e30:	d8802b17 	ldw	r2,172(sp)
   41e34:	d9002a17 	ldw	r4,168(sp)
   41e38:	1100010e 	bge	r2,r4,41e40 <___svfprintf_internal_r+0x6f0>
   41e3c:	2005883a 	mov	r2,r4
   41e40:	d8802915 	stw	r2,164(sp)
   41e44:	d8003215 	stw	zero,200(sp)
   41e48:	e7003fcc 	andi	fp,fp,255
   41e4c:	e700201c 	xori	fp,fp,128
   41e50:	e73fe004 	addi	fp,fp,-128
   41e54:	e0000326 	beq	fp,zero,41e64 <___svfprintf_internal_r+0x714>
   41e58:	d8c02917 	ldw	r3,164(sp)
   41e5c:	18c00044 	addi	r3,r3,1
   41e60:	d8c02915 	stw	r3,164(sp)
   41e64:	90c0008c 	andi	r3,r18,2
   41e68:	d8c02c15 	stw	r3,176(sp)
   41e6c:	18000326 	beq	r3,zero,41e7c <___svfprintf_internal_r+0x72c>
   41e70:	d8c02917 	ldw	r3,164(sp)
   41e74:	18c00084 	addi	r3,r3,2
   41e78:	d8c02915 	stw	r3,164(sp)
   41e7c:	90c0210c 	andi	r3,r18,132
   41e80:	d8c03015 	stw	r3,192(sp)
   41e84:	1801c31e 	bne	r3,zero,42594 <___svfprintf_internal_r+0xe44>
   41e88:	d9003117 	ldw	r4,196(sp)
   41e8c:	d8c02917 	ldw	r3,164(sp)
   41e90:	20e9c83a 	sub	r20,r4,r3
   41e94:	0501bf0e 	bge	zero,r20,42594 <___svfprintf_internal_r+0xe44>
   41e98:	02400404 	movi	r9,16
   41e9c:	d8c02017 	ldw	r3,128(sp)
   41ea0:	d8801f17 	ldw	r2,124(sp)
   41ea4:	4d053d0e 	bge	r9,r20,4339c <___svfprintf_internal_r+0x1c4c>
   41ea8:	01400174 	movhi	r5,5
   41eac:	295a3384 	addi	r5,r5,26830
   41eb0:	dc403c15 	stw	r17,240(sp)
   41eb4:	d9403515 	stw	r5,212(sp)
   41eb8:	a023883a 	mov	r17,r20
   41ebc:	482d883a 	mov	r22,r9
   41ec0:	9029883a 	mov	r20,r18
   41ec4:	070001c4 	movi	fp,7
   41ec8:	8025883a 	mov	r18,r16
   41ecc:	dc002d17 	ldw	r16,180(sp)
   41ed0:	00000306 	br	41ee0 <___svfprintf_internal_r+0x790>
   41ed4:	8c7ffc04 	addi	r17,r17,-16
   41ed8:	42000204 	addi	r8,r8,8
   41edc:	b440130e 	bge	r22,r17,41f2c <___svfprintf_internal_r+0x7dc>
   41ee0:	01000174 	movhi	r4,5
   41ee4:	18c00404 	addi	r3,r3,16
   41ee8:	10800044 	addi	r2,r2,1
   41eec:	211a3384 	addi	r4,r4,26830
   41ef0:	41000015 	stw	r4,0(r8)
   41ef4:	45800115 	stw	r22,4(r8)
   41ef8:	d8c02015 	stw	r3,128(sp)
   41efc:	d8801f15 	stw	r2,124(sp)
   41f00:	e0bff40e 	bge	fp,r2,41ed4 <__alt_data_end+0xfffcfed4>
   41f04:	d9801e04 	addi	r6,sp,120
   41f08:	800b883a 	mov	r5,r16
   41f0c:	9809883a 	mov	r4,r19
   41f10:	004b2580 	call	4b258 <__ssprint_r>
   41f14:	103ef51e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   41f18:	8c7ffc04 	addi	r17,r17,-16
   41f1c:	d8c02017 	ldw	r3,128(sp)
   41f20:	d8801f17 	ldw	r2,124(sp)
   41f24:	da000404 	addi	r8,sp,16
   41f28:	b47fed16 	blt	r22,r17,41ee0 <__alt_data_end+0xfffcfee0>
   41f2c:	9021883a 	mov	r16,r18
   41f30:	a025883a 	mov	r18,r20
   41f34:	8829883a 	mov	r20,r17
   41f38:	dc403c17 	ldw	r17,240(sp)
   41f3c:	d9403517 	ldw	r5,212(sp)
   41f40:	a0c7883a 	add	r3,r20,r3
   41f44:	10800044 	addi	r2,r2,1
   41f48:	41400015 	stw	r5,0(r8)
   41f4c:	45000115 	stw	r20,4(r8)
   41f50:	d8c02015 	stw	r3,128(sp)
   41f54:	d8801f15 	stw	r2,124(sp)
   41f58:	010001c4 	movi	r4,7
   41f5c:	2082c116 	blt	r4,r2,42a64 <___svfprintf_internal_r+0x1314>
   41f60:	df002787 	ldb	fp,158(sp)
   41f64:	42000204 	addi	r8,r8,8
   41f68:	e0000c26 	beq	fp,zero,41f9c <___svfprintf_internal_r+0x84c>
   41f6c:	d8801f17 	ldw	r2,124(sp)
   41f70:	d9002784 	addi	r4,sp,158
   41f74:	18c00044 	addi	r3,r3,1
   41f78:	10800044 	addi	r2,r2,1
   41f7c:	41000015 	stw	r4,0(r8)
   41f80:	01000044 	movi	r4,1
   41f84:	41000115 	stw	r4,4(r8)
   41f88:	d8c02015 	stw	r3,128(sp)
   41f8c:	d8801f15 	stw	r2,124(sp)
   41f90:	010001c4 	movi	r4,7
   41f94:	20825a16 	blt	r4,r2,42900 <___svfprintf_internal_r+0x11b0>
   41f98:	42000204 	addi	r8,r8,8
   41f9c:	d8802c17 	ldw	r2,176(sp)
   41fa0:	10000c26 	beq	r2,zero,41fd4 <___svfprintf_internal_r+0x884>
   41fa4:	d8801f17 	ldw	r2,124(sp)
   41fa8:	d9002704 	addi	r4,sp,156
   41fac:	18c00084 	addi	r3,r3,2
   41fb0:	10800044 	addi	r2,r2,1
   41fb4:	41000015 	stw	r4,0(r8)
   41fb8:	01000084 	movi	r4,2
   41fbc:	41000115 	stw	r4,4(r8)
   41fc0:	d8c02015 	stw	r3,128(sp)
   41fc4:	d8801f15 	stw	r2,124(sp)
   41fc8:	010001c4 	movi	r4,7
   41fcc:	20825416 	blt	r4,r2,42920 <___svfprintf_internal_r+0x11d0>
   41fd0:	42000204 	addi	r8,r8,8
   41fd4:	d9003017 	ldw	r4,192(sp)
   41fd8:	00802004 	movi	r2,128
   41fdc:	2081b926 	beq	r4,r2,426c4 <___svfprintf_internal_r+0xf74>
   41fe0:	d9402a17 	ldw	r5,168(sp)
   41fe4:	d8802b17 	ldw	r2,172(sp)
   41fe8:	28adc83a 	sub	r22,r5,r2
   41fec:	05802f0e 	bge	zero,r22,420ac <___svfprintf_internal_r+0x95c>
   41ff0:	07000404 	movi	fp,16
   41ff4:	d8801f17 	ldw	r2,124(sp)
   41ff8:	e583e20e 	bge	fp,r22,42f84 <___svfprintf_internal_r+0x1834>
   41ffc:	01400174 	movhi	r5,5
   42000:	295a2f84 	addi	r5,r5,26814
   42004:	dc402a15 	stw	r17,168(sp)
   42008:	d9402c15 	stw	r5,176(sp)
   4200c:	b023883a 	mov	r17,r22
   42010:	050001c4 	movi	r20,7
   42014:	902d883a 	mov	r22,r18
   42018:	8025883a 	mov	r18,r16
   4201c:	dc002d17 	ldw	r16,180(sp)
   42020:	00000306 	br	42030 <___svfprintf_internal_r+0x8e0>
   42024:	8c7ffc04 	addi	r17,r17,-16
   42028:	42000204 	addi	r8,r8,8
   4202c:	e440110e 	bge	fp,r17,42074 <___svfprintf_internal_r+0x924>
   42030:	18c00404 	addi	r3,r3,16
   42034:	10800044 	addi	r2,r2,1
   42038:	45400015 	stw	r21,0(r8)
   4203c:	47000115 	stw	fp,4(r8)
   42040:	d8c02015 	stw	r3,128(sp)
   42044:	d8801f15 	stw	r2,124(sp)
   42048:	a0bff60e 	bge	r20,r2,42024 <__alt_data_end+0xfffd0024>
   4204c:	d9801e04 	addi	r6,sp,120
   42050:	800b883a 	mov	r5,r16
   42054:	9809883a 	mov	r4,r19
   42058:	004b2580 	call	4b258 <__ssprint_r>
   4205c:	103ea31e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42060:	8c7ffc04 	addi	r17,r17,-16
   42064:	d8c02017 	ldw	r3,128(sp)
   42068:	d8801f17 	ldw	r2,124(sp)
   4206c:	da000404 	addi	r8,sp,16
   42070:	e47fef16 	blt	fp,r17,42030 <__alt_data_end+0xfffd0030>
   42074:	9021883a 	mov	r16,r18
   42078:	b025883a 	mov	r18,r22
   4207c:	882d883a 	mov	r22,r17
   42080:	dc402a17 	ldw	r17,168(sp)
   42084:	d9002c17 	ldw	r4,176(sp)
   42088:	1d87883a 	add	r3,r3,r22
   4208c:	10800044 	addi	r2,r2,1
   42090:	41000015 	stw	r4,0(r8)
   42094:	45800115 	stw	r22,4(r8)
   42098:	d8c02015 	stw	r3,128(sp)
   4209c:	d8801f15 	stw	r2,124(sp)
   420a0:	010001c4 	movi	r4,7
   420a4:	20820e16 	blt	r4,r2,428e0 <___svfprintf_internal_r+0x1190>
   420a8:	42000204 	addi	r8,r8,8
   420ac:	9080400c 	andi	r2,r18,256
   420b0:	10013a1e 	bne	r2,zero,4259c <___svfprintf_internal_r+0xe4c>
   420b4:	d9402b17 	ldw	r5,172(sp)
   420b8:	d8801f17 	ldw	r2,124(sp)
   420bc:	44000015 	stw	r16,0(r8)
   420c0:	1947883a 	add	r3,r3,r5
   420c4:	10800044 	addi	r2,r2,1
   420c8:	41400115 	stw	r5,4(r8)
   420cc:	d8c02015 	stw	r3,128(sp)
   420d0:	d8801f15 	stw	r2,124(sp)
   420d4:	010001c4 	movi	r4,7
   420d8:	2081f316 	blt	r4,r2,428a8 <___svfprintf_internal_r+0x1158>
   420dc:	42000204 	addi	r8,r8,8
   420e0:	9480010c 	andi	r18,r18,4
   420e4:	90003226 	beq	r18,zero,421b0 <___svfprintf_internal_r+0xa60>
   420e8:	d9403117 	ldw	r5,196(sp)
   420ec:	d8802917 	ldw	r2,164(sp)
   420f0:	28a1c83a 	sub	r16,r5,r2
   420f4:	04002e0e 	bge	zero,r16,421b0 <___svfprintf_internal_r+0xa60>
   420f8:	04400404 	movi	r17,16
   420fc:	d8801f17 	ldw	r2,124(sp)
   42100:	8c04db0e 	bge	r17,r16,43470 <___svfprintf_internal_r+0x1d20>
   42104:	01400174 	movhi	r5,5
   42108:	295a3384 	addi	r5,r5,26830
   4210c:	d9403515 	stw	r5,212(sp)
   42110:	048001c4 	movi	r18,7
   42114:	dd002d17 	ldw	r20,180(sp)
   42118:	00000306 	br	42128 <___svfprintf_internal_r+0x9d8>
   4211c:	843ffc04 	addi	r16,r16,-16
   42120:	42000204 	addi	r8,r8,8
   42124:	8c00130e 	bge	r17,r16,42174 <___svfprintf_internal_r+0xa24>
   42128:	01000174 	movhi	r4,5
   4212c:	18c00404 	addi	r3,r3,16
   42130:	10800044 	addi	r2,r2,1
   42134:	211a3384 	addi	r4,r4,26830
   42138:	41000015 	stw	r4,0(r8)
   4213c:	44400115 	stw	r17,4(r8)
   42140:	d8c02015 	stw	r3,128(sp)
   42144:	d8801f15 	stw	r2,124(sp)
   42148:	90bff40e 	bge	r18,r2,4211c <__alt_data_end+0xfffd011c>
   4214c:	d9801e04 	addi	r6,sp,120
   42150:	a00b883a 	mov	r5,r20
   42154:	9809883a 	mov	r4,r19
   42158:	004b2580 	call	4b258 <__ssprint_r>
   4215c:	103e631e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42160:	843ffc04 	addi	r16,r16,-16
   42164:	d8c02017 	ldw	r3,128(sp)
   42168:	d8801f17 	ldw	r2,124(sp)
   4216c:	da000404 	addi	r8,sp,16
   42170:	8c3fed16 	blt	r17,r16,42128 <__alt_data_end+0xfffd0128>
   42174:	d9403517 	ldw	r5,212(sp)
   42178:	1c07883a 	add	r3,r3,r16
   4217c:	10800044 	addi	r2,r2,1
   42180:	41400015 	stw	r5,0(r8)
   42184:	44000115 	stw	r16,4(r8)
   42188:	d8c02015 	stw	r3,128(sp)
   4218c:	d8801f15 	stw	r2,124(sp)
   42190:	010001c4 	movi	r4,7
   42194:	2080060e 	bge	r4,r2,421b0 <___svfprintf_internal_r+0xa60>
   42198:	d9402d17 	ldw	r5,180(sp)
   4219c:	d9801e04 	addi	r6,sp,120
   421a0:	9809883a 	mov	r4,r19
   421a4:	004b2580 	call	4b258 <__ssprint_r>
   421a8:	103e501e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   421ac:	d8c02017 	ldw	r3,128(sp)
   421b0:	d8803117 	ldw	r2,196(sp)
   421b4:	d9002917 	ldw	r4,164(sp)
   421b8:	1100010e 	bge	r2,r4,421c0 <___svfprintf_internal_r+0xa70>
   421bc:	2005883a 	mov	r2,r4
   421c0:	d9402f17 	ldw	r5,188(sp)
   421c4:	288b883a 	add	r5,r5,r2
   421c8:	d9402f15 	stw	r5,188(sp)
   421cc:	1801be1e 	bne	r3,zero,428c8 <___svfprintf_internal_r+0x1178>
   421d0:	b8800007 	ldb	r2,0(r23)
   421d4:	d8001f15 	stw	zero,124(sp)
   421d8:	da000404 	addi	r8,sp,16
   421dc:	103d891e 	bne	r2,zero,41804 <__alt_data_end+0xfffcf804>
   421e0:	b823883a 	mov	r17,r23
   421e4:	003d9f06 	br	41864 <__alt_data_end+0xfffcf864>
   421e8:	8025883a 	mov	r18,r16
   421ec:	dc002903 	ldbu	r16,164(sp)
   421f0:	e011883a 	mov	r8,fp
   421f4:	84003fcc 	andi	r16,r16,255
   421f8:	8005e61e 	bne	r16,zero,43994 <___svfprintf_internal_r+0x2244>
   421fc:	94800414 	ori	r18,r18,16
   42200:	9080080c 	andi	r2,r18,32
   42204:	10022026 	beq	r2,zero,42a88 <___svfprintf_internal_r+0x1338>
   42208:	d9002e17 	ldw	r4,184(sp)
   4220c:	d9402a17 	ldw	r5,168(sp)
   42210:	d8002785 	stb	zero,158(sp)
   42214:	20c00204 	addi	r3,r4,8
   42218:	25000017 	ldw	r20,0(r4)
   4221c:	25800117 	ldw	r22,4(r4)
   42220:	2803ad16 	blt	r5,zero,430d8 <___svfprintf_internal_r+0x1988>
   42224:	013fdfc4 	movi	r4,-129
   42228:	a584b03a 	or	r2,r20,r22
   4222c:	d8c02e15 	stw	r3,184(sp)
   42230:	9124703a 	and	r18,r18,r4
   42234:	0039883a 	mov	fp,zero
   42238:	103eb01e 	bne	r2,zero,41cfc <__alt_data_end+0xfffcfcfc>
   4223c:	d8802a17 	ldw	r2,168(sp)
   42240:	1002e71e 	bne	r2,zero,42de0 <___svfprintf_internal_r+0x1690>
   42244:	d8002a15 	stw	zero,168(sp)
   42248:	d8002b15 	stw	zero,172(sp)
   4224c:	dc001e04 	addi	r16,sp,120
   42250:	003ef706 	br	41e30 <__alt_data_end+0xfffcfe30>
   42254:	8025883a 	mov	r18,r16
   42258:	dc002903 	ldbu	r16,164(sp)
   4225c:	e011883a 	mov	r8,fp
   42260:	84003fcc 	andi	r16,r16,255
   42264:	8005c81e 	bne	r16,zero,43988 <___svfprintf_internal_r+0x2238>
   42268:	01000174 	movhi	r4,5
   4226c:	211a2304 	addi	r4,r4,26764
   42270:	d9003a15 	stw	r4,232(sp)
   42274:	9080080c 	andi	r2,r18,32
   42278:	10007226 	beq	r2,zero,42444 <___svfprintf_internal_r+0xcf4>
   4227c:	d9402e17 	ldw	r5,184(sp)
   42280:	2d000017 	ldw	r20,0(r5)
   42284:	2d800117 	ldw	r22,4(r5)
   42288:	29400204 	addi	r5,r5,8
   4228c:	d9402e15 	stw	r5,184(sp)
   42290:	9080004c 	andi	r2,r18,1
   42294:	1001aa26 	beq	r2,zero,42940 <___svfprintf_internal_r+0x11f0>
   42298:	a584b03a 	or	r2,r20,r22
   4229c:	10032526 	beq	r2,zero,42f34 <___svfprintf_internal_r+0x17e4>
   422a0:	d8c02a17 	ldw	r3,168(sp)
   422a4:	00800c04 	movi	r2,48
   422a8:	d8802705 	stb	r2,156(sp)
   422ac:	dc402745 	stb	r17,157(sp)
   422b0:	d8002785 	stb	zero,158(sp)
   422b4:	90800094 	ori	r2,r18,2
   422b8:	1804a316 	blt	r3,zero,43548 <___svfprintf_internal_r+0x1df8>
   422bc:	00bfdfc4 	movi	r2,-129
   422c0:	90a4703a 	and	r18,r18,r2
   422c4:	94800094 	ori	r18,r18,2
   422c8:	0039883a 	mov	fp,zero
   422cc:	d9003a17 	ldw	r4,232(sp)
   422d0:	dc001e04 	addi	r16,sp,120
   422d4:	a08003cc 	andi	r2,r20,15
   422d8:	b006973a 	slli	r3,r22,28
   422dc:	2085883a 	add	r2,r4,r2
   422e0:	a028d13a 	srli	r20,r20,4
   422e4:	10800003 	ldbu	r2,0(r2)
   422e8:	b02cd13a 	srli	r22,r22,4
   422ec:	843fffc4 	addi	r16,r16,-1
   422f0:	1d28b03a 	or	r20,r3,r20
   422f4:	80800005 	stb	r2,0(r16)
   422f8:	a584b03a 	or	r2,r20,r22
   422fc:	103ff51e 	bne	r2,zero,422d4 <__alt_data_end+0xfffd02d4>
   42300:	d8c02817 	ldw	r3,160(sp)
   42304:	1c07c83a 	sub	r3,r3,r16
   42308:	d8c02b15 	stw	r3,172(sp)
   4230c:	003ec806 	br	41e30 <__alt_data_end+0xfffcfe30>
   42310:	d8c02e17 	ldw	r3,184(sp)
   42314:	d9002e17 	ldw	r4,184(sp)
   42318:	8025883a 	mov	r18,r16
   4231c:	18800017 	ldw	r2,0(r3)
   42320:	21000104 	addi	r4,r4,4
   42324:	00c00044 	movi	r3,1
   42328:	e011883a 	mov	r8,fp
   4232c:	d8c02915 	stw	r3,164(sp)
   42330:	d8002785 	stb	zero,158(sp)
   42334:	d8801405 	stb	r2,80(sp)
   42338:	d9002e15 	stw	r4,184(sp)
   4233c:	d8c02b15 	stw	r3,172(sp)
   42340:	d8002a15 	stw	zero,168(sp)
   42344:	d8003215 	stw	zero,200(sp)
   42348:	dc001404 	addi	r16,sp,80
   4234c:	0039883a 	mov	fp,zero
   42350:	003ec406 	br	41e64 <__alt_data_end+0xfffcfe64>
   42354:	8025883a 	mov	r18,r16
   42358:	dc002903 	ldbu	r16,164(sp)
   4235c:	e011883a 	mov	r8,fp
   42360:	84003fcc 	andi	r16,r16,255
   42364:	803e8726 	beq	r16,zero,41d84 <__alt_data_end+0xfffcfd84>
   42368:	d8c02b03 	ldbu	r3,172(sp)
   4236c:	d8c02785 	stb	r3,158(sp)
   42370:	003e8406 	br	41d84 <__alt_data_end+0xfffcfd84>
   42374:	00c00044 	movi	r3,1
   42378:	d8c02905 	stb	r3,164(sp)
   4237c:	00c00ac4 	movi	r3,43
   42380:	d8c02b05 	stb	r3,172(sp)
   42384:	bc400007 	ldb	r17,0(r23)
   42388:	003d4606 	br	418a4 <__alt_data_end+0xfffcf8a4>
   4238c:	84000814 	ori	r16,r16,32
   42390:	bc400007 	ldb	r17,0(r23)
   42394:	003d4306 	br	418a4 <__alt_data_end+0xfffcf8a4>
   42398:	d8802e17 	ldw	r2,184(sp)
   4239c:	8025883a 	mov	r18,r16
   423a0:	d8002785 	stb	zero,158(sp)
   423a4:	14000017 	ldw	r16,0(r2)
   423a8:	e011883a 	mov	r8,fp
   423ac:	15000104 	addi	r20,r2,4
   423b0:	80042126 	beq	r16,zero,43438 <___svfprintf_internal_r+0x1ce8>
   423b4:	d8c02a17 	ldw	r3,168(sp)
   423b8:	1803ee16 	blt	r3,zero,43374 <___svfprintf_internal_r+0x1c24>
   423bc:	180d883a 	mov	r6,r3
   423c0:	000b883a 	mov	r5,zero
   423c4:	8009883a 	mov	r4,r16
   423c8:	df003e15 	stw	fp,248(sp)
   423cc:	00493440 	call	49344 <memchr>
   423d0:	da003e17 	ldw	r8,248(sp)
   423d4:	10046a26 	beq	r2,zero,43580 <___svfprintf_internal_r+0x1e30>
   423d8:	1405c83a 	sub	r2,r2,r16
   423dc:	d8802b15 	stw	r2,172(sp)
   423e0:	1003ea16 	blt	r2,zero,4338c <___svfprintf_internal_r+0x1c3c>
   423e4:	df002783 	ldbu	fp,158(sp)
   423e8:	d8802915 	stw	r2,164(sp)
   423ec:	dd002e15 	stw	r20,184(sp)
   423f0:	d8002a15 	stw	zero,168(sp)
   423f4:	d8003215 	stw	zero,200(sp)
   423f8:	003e9306 	br	41e48 <__alt_data_end+0xfffcfe48>
   423fc:	8025883a 	mov	r18,r16
   42400:	dc002903 	ldbu	r16,164(sp)
   42404:	e011883a 	mov	r8,fp
   42408:	84003fcc 	andi	r16,r16,255
   4240c:	803f7c26 	beq	r16,zero,42200 <__alt_data_end+0xfffd0200>
   42410:	d8c02b03 	ldbu	r3,172(sp)
   42414:	d8c02785 	stb	r3,158(sp)
   42418:	003f7906 	br	42200 <__alt_data_end+0xfffd0200>
   4241c:	8025883a 	mov	r18,r16
   42420:	dc002903 	ldbu	r16,164(sp)
   42424:	e011883a 	mov	r8,fp
   42428:	84003fcc 	andi	r16,r16,255
   4242c:	8005741e 	bne	r16,zero,43a00 <___svfprintf_internal_r+0x22b0>
   42430:	01000174 	movhi	r4,5
   42434:	211a2804 	addi	r4,r4,26784
   42438:	d9003a15 	stw	r4,232(sp)
   4243c:	9080080c 	andi	r2,r18,32
   42440:	103f8e1e 	bne	r2,zero,4227c <__alt_data_end+0xfffd027c>
   42444:	9080040c 	andi	r2,r18,16
   42448:	1002a726 	beq	r2,zero,42ee8 <___svfprintf_internal_r+0x1798>
   4244c:	d8802e17 	ldw	r2,184(sp)
   42450:	002d883a 	mov	r22,zero
   42454:	15000017 	ldw	r20,0(r2)
   42458:	10800104 	addi	r2,r2,4
   4245c:	d8802e15 	stw	r2,184(sp)
   42460:	003f8b06 	br	42290 <__alt_data_end+0xfffd0290>
   42464:	84000054 	ori	r16,r16,1
   42468:	bc400007 	ldb	r17,0(r23)
   4246c:	003d0d06 	br	418a4 <__alt_data_end+0xfffcf8a4>
   42470:	d8802b07 	ldb	r2,172(sp)
   42474:	1002a41e 	bne	r2,zero,42f08 <___svfprintf_internal_r+0x17b8>
   42478:	00c00044 	movi	r3,1
   4247c:	d8c02905 	stb	r3,164(sp)
   42480:	00c00804 	movi	r3,32
   42484:	d8c02b05 	stb	r3,172(sp)
   42488:	bc400007 	ldb	r17,0(r23)
   4248c:	003d0506 	br	418a4 <__alt_data_end+0xfffcf8a4>
   42490:	8025883a 	mov	r18,r16
   42494:	dc002903 	ldbu	r16,164(sp)
   42498:	e011883a 	mov	r8,fp
   4249c:	84003fcc 	andi	r16,r16,255
   424a0:	803e0626 	beq	r16,zero,41cbc <__alt_data_end+0xfffcfcbc>
   424a4:	d8c02b03 	ldbu	r3,172(sp)
   424a8:	d8c02785 	stb	r3,158(sp)
   424ac:	003e0306 	br	41cbc <__alt_data_end+0xfffcfcbc>
   424b0:	bc400007 	ldb	r17,0(r23)
   424b4:	00801b04 	movi	r2,108
   424b8:	88830a26 	beq	r17,r2,430e4 <___svfprintf_internal_r+0x1994>
   424bc:	84000414 	ori	r16,r16,16
   424c0:	003cf806 	br	418a4 <__alt_data_end+0xfffcf8a4>
   424c4:	8025883a 	mov	r18,r16
   424c8:	dc002903 	ldbu	r16,164(sp)
   424cc:	e011883a 	mov	r8,fp
   424d0:	84003fcc 	andi	r16,r16,255
   424d4:	8005471e 	bne	r16,zero,439f4 <___svfprintf_internal_r+0x22a4>
   424d8:	9080080c 	andi	r2,r18,32
   424dc:	10028c26 	beq	r2,zero,42f10 <___svfprintf_internal_r+0x17c0>
   424e0:	d9002e17 	ldw	r4,184(sp)
   424e4:	d9402f17 	ldw	r5,188(sp)
   424e8:	20800017 	ldw	r2,0(r4)
   424ec:	2807d7fa 	srai	r3,r5,31
   424f0:	21000104 	addi	r4,r4,4
   424f4:	d9002e15 	stw	r4,184(sp)
   424f8:	11400015 	stw	r5,0(r2)
   424fc:	10c00115 	stw	r3,4(r2)
   42500:	003cbe06 	br	417fc <__alt_data_end+0xfffcf7fc>
   42504:	84001014 	ori	r16,r16,64
   42508:	bc400007 	ldb	r17,0(r23)
   4250c:	003ce506 	br	418a4 <__alt_data_end+0xfffcf8a4>
   42510:	01000174 	movhi	r4,5
   42514:	211a2804 	addi	r4,r4,26784
   42518:	0039883a 	mov	fp,zero
   4251c:	d9003a15 	stw	r4,232(sp)
   42520:	04401e04 	movi	r17,120
   42524:	003f6906 	br	422cc <__alt_data_end+0xfffd02cc>
   42528:	8025883a 	mov	r18,r16
   4252c:	dc002903 	ldbu	r16,164(sp)
   42530:	e011883a 	mov	r8,fp
   42534:	84003fcc 	andi	r16,r16,255
   42538:	8005261e 	bne	r16,zero,439d4 <___svfprintf_internal_r+0x2284>
   4253c:	883d6526 	beq	r17,zero,41ad4 <__alt_data_end+0xfffcfad4>
   42540:	00c00044 	movi	r3,1
   42544:	d8c02915 	stw	r3,164(sp)
   42548:	dc401405 	stb	r17,80(sp)
   4254c:	d8002785 	stb	zero,158(sp)
   42550:	003f7a06 	br	4233c <__alt_data_end+0xfffd033c>
   42554:	01000174 	movhi	r4,5
   42558:	211a2804 	addi	r4,r4,26784
   4255c:	d9003a15 	stw	r4,232(sp)
   42560:	d8c02e15 	stw	r3,184(sp)
   42564:	1025883a 	mov	r18,r2
   42568:	04401e04 	movi	r17,120
   4256c:	a584b03a 	or	r2,r20,r22
   42570:	1000fa1e 	bne	r2,zero,4295c <___svfprintf_internal_r+0x120c>
   42574:	0039883a 	mov	fp,zero
   42578:	00800084 	movi	r2,2
   4257c:	10803fcc 	andi	r2,r2,255
   42580:	00c00044 	movi	r3,1
   42584:	10c21626 	beq	r2,r3,42de0 <___svfprintf_internal_r+0x1690>
   42588:	00c00084 	movi	r3,2
   4258c:	10fe0e1e 	bne	r2,r3,41dc8 <__alt_data_end+0xfffcfdc8>
   42590:	003d4606 	br	41aac <__alt_data_end+0xfffcfaac>
   42594:	d8c02017 	ldw	r3,128(sp)
   42598:	003e7306 	br	41f68 <__alt_data_end+0xfffcff68>
   4259c:	00801944 	movi	r2,101
   425a0:	14407c0e 	bge	r2,r17,42794 <___svfprintf_internal_r+0x1044>
   425a4:	d9003617 	ldw	r4,216(sp)
   425a8:	d9403717 	ldw	r5,220(sp)
   425ac:	000d883a 	mov	r6,zero
   425b0:	000f883a 	mov	r7,zero
   425b4:	d8c03d15 	stw	r3,244(sp)
   425b8:	da003e15 	stw	r8,248(sp)
   425bc:	00506480 	call	50648 <__eqdf2>
   425c0:	d8c03d17 	ldw	r3,244(sp)
   425c4:	da003e17 	ldw	r8,248(sp)
   425c8:	1000f51e 	bne	r2,zero,429a0 <___svfprintf_internal_r+0x1250>
   425cc:	d8801f17 	ldw	r2,124(sp)
   425d0:	01000174 	movhi	r4,5
   425d4:	211a2f04 	addi	r4,r4,26812
   425d8:	18c00044 	addi	r3,r3,1
   425dc:	10800044 	addi	r2,r2,1
   425e0:	41000015 	stw	r4,0(r8)
   425e4:	01000044 	movi	r4,1
   425e8:	41000115 	stw	r4,4(r8)
   425ec:	d8c02015 	stw	r3,128(sp)
   425f0:	d8801f15 	stw	r2,124(sp)
   425f4:	010001c4 	movi	r4,7
   425f8:	20826616 	blt	r4,r2,42f94 <___svfprintf_internal_r+0x1844>
   425fc:	42000204 	addi	r8,r8,8
   42600:	d8802617 	ldw	r2,152(sp)
   42604:	d9403317 	ldw	r5,204(sp)
   42608:	11400216 	blt	r2,r5,42614 <___svfprintf_internal_r+0xec4>
   4260c:	9080004c 	andi	r2,r18,1
   42610:	103eb326 	beq	r2,zero,420e0 <__alt_data_end+0xfffd00e0>
   42614:	d8803817 	ldw	r2,224(sp)
   42618:	d9003417 	ldw	r4,208(sp)
   4261c:	d9403817 	ldw	r5,224(sp)
   42620:	1887883a 	add	r3,r3,r2
   42624:	d8801f17 	ldw	r2,124(sp)
   42628:	41000015 	stw	r4,0(r8)
   4262c:	41400115 	stw	r5,4(r8)
   42630:	10800044 	addi	r2,r2,1
   42634:	d8c02015 	stw	r3,128(sp)
   42638:	d8801f15 	stw	r2,124(sp)
   4263c:	010001c4 	movi	r4,7
   42640:	2082af16 	blt	r4,r2,43100 <___svfprintf_internal_r+0x19b0>
   42644:	42000204 	addi	r8,r8,8
   42648:	d8803317 	ldw	r2,204(sp)
   4264c:	143fffc4 	addi	r16,r2,-1
   42650:	043ea30e 	bge	zero,r16,420e0 <__alt_data_end+0xfffd00e0>
   42654:	04400404 	movi	r17,16
   42658:	d8801f17 	ldw	r2,124(sp)
   4265c:	8c00860e 	bge	r17,r16,42878 <___svfprintf_internal_r+0x1128>
   42660:	01400174 	movhi	r5,5
   42664:	295a2f84 	addi	r5,r5,26814
   42668:	d9402c15 	stw	r5,176(sp)
   4266c:	058001c4 	movi	r22,7
   42670:	dd002d17 	ldw	r20,180(sp)
   42674:	00000306 	br	42684 <___svfprintf_internal_r+0xf34>
   42678:	42000204 	addi	r8,r8,8
   4267c:	843ffc04 	addi	r16,r16,-16
   42680:	8c00800e 	bge	r17,r16,42884 <___svfprintf_internal_r+0x1134>
   42684:	18c00404 	addi	r3,r3,16
   42688:	10800044 	addi	r2,r2,1
   4268c:	45400015 	stw	r21,0(r8)
   42690:	44400115 	stw	r17,4(r8)
   42694:	d8c02015 	stw	r3,128(sp)
   42698:	d8801f15 	stw	r2,124(sp)
   4269c:	b0bff60e 	bge	r22,r2,42678 <__alt_data_end+0xfffd0678>
   426a0:	d9801e04 	addi	r6,sp,120
   426a4:	a00b883a 	mov	r5,r20
   426a8:	9809883a 	mov	r4,r19
   426ac:	004b2580 	call	4b258 <__ssprint_r>
   426b0:	103d0e1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   426b4:	d8c02017 	ldw	r3,128(sp)
   426b8:	d8801f17 	ldw	r2,124(sp)
   426bc:	da000404 	addi	r8,sp,16
   426c0:	003fee06 	br	4267c <__alt_data_end+0xfffd067c>
   426c4:	d9403117 	ldw	r5,196(sp)
   426c8:	d8802917 	ldw	r2,164(sp)
   426cc:	28adc83a 	sub	r22,r5,r2
   426d0:	05be430e 	bge	zero,r22,41fe0 <__alt_data_end+0xfffcffe0>
   426d4:	07000404 	movi	fp,16
   426d8:	d8801f17 	ldw	r2,124(sp)
   426dc:	e583a20e 	bge	fp,r22,43568 <___svfprintf_internal_r+0x1e18>
   426e0:	01400174 	movhi	r5,5
   426e4:	295a2f84 	addi	r5,r5,26814
   426e8:	dc403015 	stw	r17,192(sp)
   426ec:	d9402c15 	stw	r5,176(sp)
   426f0:	b023883a 	mov	r17,r22
   426f4:	050001c4 	movi	r20,7
   426f8:	902d883a 	mov	r22,r18
   426fc:	8025883a 	mov	r18,r16
   42700:	dc002d17 	ldw	r16,180(sp)
   42704:	00000306 	br	42714 <___svfprintf_internal_r+0xfc4>
   42708:	8c7ffc04 	addi	r17,r17,-16
   4270c:	42000204 	addi	r8,r8,8
   42710:	e440110e 	bge	fp,r17,42758 <___svfprintf_internal_r+0x1008>
   42714:	18c00404 	addi	r3,r3,16
   42718:	10800044 	addi	r2,r2,1
   4271c:	45400015 	stw	r21,0(r8)
   42720:	47000115 	stw	fp,4(r8)
   42724:	d8c02015 	stw	r3,128(sp)
   42728:	d8801f15 	stw	r2,124(sp)
   4272c:	a0bff60e 	bge	r20,r2,42708 <__alt_data_end+0xfffd0708>
   42730:	d9801e04 	addi	r6,sp,120
   42734:	800b883a 	mov	r5,r16
   42738:	9809883a 	mov	r4,r19
   4273c:	004b2580 	call	4b258 <__ssprint_r>
   42740:	103cea1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42744:	8c7ffc04 	addi	r17,r17,-16
   42748:	d8c02017 	ldw	r3,128(sp)
   4274c:	d8801f17 	ldw	r2,124(sp)
   42750:	da000404 	addi	r8,sp,16
   42754:	e47fef16 	blt	fp,r17,42714 <__alt_data_end+0xfffd0714>
   42758:	9021883a 	mov	r16,r18
   4275c:	b025883a 	mov	r18,r22
   42760:	882d883a 	mov	r22,r17
   42764:	dc403017 	ldw	r17,192(sp)
   42768:	d9002c17 	ldw	r4,176(sp)
   4276c:	1d87883a 	add	r3,r3,r22
   42770:	10800044 	addi	r2,r2,1
   42774:	41000015 	stw	r4,0(r8)
   42778:	45800115 	stw	r22,4(r8)
   4277c:	d8c02015 	stw	r3,128(sp)
   42780:	d8801f15 	stw	r2,124(sp)
   42784:	010001c4 	movi	r4,7
   42788:	20819a16 	blt	r4,r2,42df4 <___svfprintf_internal_r+0x16a4>
   4278c:	42000204 	addi	r8,r8,8
   42790:	003e1306 	br	41fe0 <__alt_data_end+0xfffcffe0>
   42794:	d9403317 	ldw	r5,204(sp)
   42798:	00800044 	movi	r2,1
   4279c:	18c00044 	addi	r3,r3,1
   427a0:	1141710e 	bge	r2,r5,42d68 <___svfprintf_internal_r+0x1618>
   427a4:	dc401f17 	ldw	r17,124(sp)
   427a8:	00800044 	movi	r2,1
   427ac:	40800115 	stw	r2,4(r8)
   427b0:	8c400044 	addi	r17,r17,1
   427b4:	44000015 	stw	r16,0(r8)
   427b8:	d8c02015 	stw	r3,128(sp)
   427bc:	dc401f15 	stw	r17,124(sp)
   427c0:	008001c4 	movi	r2,7
   427c4:	14417416 	blt	r2,r17,42d98 <___svfprintf_internal_r+0x1648>
   427c8:	42000204 	addi	r8,r8,8
   427cc:	d8803817 	ldw	r2,224(sp)
   427d0:	d9003417 	ldw	r4,208(sp)
   427d4:	8c400044 	addi	r17,r17,1
   427d8:	10c7883a 	add	r3,r2,r3
   427dc:	40800115 	stw	r2,4(r8)
   427e0:	41000015 	stw	r4,0(r8)
   427e4:	d8c02015 	stw	r3,128(sp)
   427e8:	dc401f15 	stw	r17,124(sp)
   427ec:	008001c4 	movi	r2,7
   427f0:	14417216 	blt	r2,r17,42dbc <___svfprintf_internal_r+0x166c>
   427f4:	45800204 	addi	r22,r8,8
   427f8:	d9003617 	ldw	r4,216(sp)
   427fc:	d9403717 	ldw	r5,220(sp)
   42800:	000d883a 	mov	r6,zero
   42804:	000f883a 	mov	r7,zero
   42808:	d8c03d15 	stw	r3,244(sp)
   4280c:	00506480 	call	50648 <__eqdf2>
   42810:	d8c03d17 	ldw	r3,244(sp)
   42814:	1000b326 	beq	r2,zero,42ae4 <___svfprintf_internal_r+0x1394>
   42818:	d9403317 	ldw	r5,204(sp)
   4281c:	84000044 	addi	r16,r16,1
   42820:	8c400044 	addi	r17,r17,1
   42824:	28bfffc4 	addi	r2,r5,-1
   42828:	1887883a 	add	r3,r3,r2
   4282c:	b0800115 	stw	r2,4(r22)
   42830:	b4000015 	stw	r16,0(r22)
   42834:	d8c02015 	stw	r3,128(sp)
   42838:	dc401f15 	stw	r17,124(sp)
   4283c:	008001c4 	movi	r2,7
   42840:	1440d216 	blt	r2,r17,42b8c <___svfprintf_internal_r+0x143c>
   42844:	b5800204 	addi	r22,r22,8
   42848:	d9003b17 	ldw	r4,236(sp)
   4284c:	df0022c4 	addi	fp,sp,139
   42850:	8c400044 	addi	r17,r17,1
   42854:	20c7883a 	add	r3,r4,r3
   42858:	b7000015 	stw	fp,0(r22)
   4285c:	b1000115 	stw	r4,4(r22)
   42860:	d8c02015 	stw	r3,128(sp)
   42864:	dc401f15 	stw	r17,124(sp)
   42868:	008001c4 	movi	r2,7
   4286c:	14400e16 	blt	r2,r17,428a8 <___svfprintf_internal_r+0x1158>
   42870:	b2000204 	addi	r8,r22,8
   42874:	003e1a06 	br	420e0 <__alt_data_end+0xfffd00e0>
   42878:	01000174 	movhi	r4,5
   4287c:	211a2f84 	addi	r4,r4,26814
   42880:	d9002c15 	stw	r4,176(sp)
   42884:	d9002c17 	ldw	r4,176(sp)
   42888:	1c07883a 	add	r3,r3,r16
   4288c:	44000115 	stw	r16,4(r8)
   42890:	41000015 	stw	r4,0(r8)
   42894:	10800044 	addi	r2,r2,1
   42898:	d8c02015 	stw	r3,128(sp)
   4289c:	d8801f15 	stw	r2,124(sp)
   428a0:	010001c4 	movi	r4,7
   428a4:	20be0d0e 	bge	r4,r2,420dc <__alt_data_end+0xfffd00dc>
   428a8:	d9402d17 	ldw	r5,180(sp)
   428ac:	d9801e04 	addi	r6,sp,120
   428b0:	9809883a 	mov	r4,r19
   428b4:	004b2580 	call	4b258 <__ssprint_r>
   428b8:	103c8c1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   428bc:	d8c02017 	ldw	r3,128(sp)
   428c0:	da000404 	addi	r8,sp,16
   428c4:	003e0606 	br	420e0 <__alt_data_end+0xfffd00e0>
   428c8:	d9402d17 	ldw	r5,180(sp)
   428cc:	d9801e04 	addi	r6,sp,120
   428d0:	9809883a 	mov	r4,r19
   428d4:	004b2580 	call	4b258 <__ssprint_r>
   428d8:	103e3d26 	beq	r2,zero,421d0 <__alt_data_end+0xfffd01d0>
   428dc:	003c8306 	br	41aec <__alt_data_end+0xfffcfaec>
   428e0:	d9402d17 	ldw	r5,180(sp)
   428e4:	d9801e04 	addi	r6,sp,120
   428e8:	9809883a 	mov	r4,r19
   428ec:	004b2580 	call	4b258 <__ssprint_r>
   428f0:	103c7e1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   428f4:	d8c02017 	ldw	r3,128(sp)
   428f8:	da000404 	addi	r8,sp,16
   428fc:	003deb06 	br	420ac <__alt_data_end+0xfffd00ac>
   42900:	d9402d17 	ldw	r5,180(sp)
   42904:	d9801e04 	addi	r6,sp,120
   42908:	9809883a 	mov	r4,r19
   4290c:	004b2580 	call	4b258 <__ssprint_r>
   42910:	103c761e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42914:	d8c02017 	ldw	r3,128(sp)
   42918:	da000404 	addi	r8,sp,16
   4291c:	003d9f06 	br	41f9c <__alt_data_end+0xfffcff9c>
   42920:	d9402d17 	ldw	r5,180(sp)
   42924:	d9801e04 	addi	r6,sp,120
   42928:	9809883a 	mov	r4,r19
   4292c:	004b2580 	call	4b258 <__ssprint_r>
   42930:	103c6e1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42934:	d8c02017 	ldw	r3,128(sp)
   42938:	da000404 	addi	r8,sp,16
   4293c:	003da506 	br	41fd4 <__alt_data_end+0xfffcffd4>
   42940:	d9402a17 	ldw	r5,168(sp)
   42944:	d8002785 	stb	zero,158(sp)
   42948:	283f0816 	blt	r5,zero,4256c <__alt_data_end+0xfffd056c>
   4294c:	00ffdfc4 	movi	r3,-129
   42950:	a584b03a 	or	r2,r20,r22
   42954:	90e4703a 	and	r18,r18,r3
   42958:	103c5126 	beq	r2,zero,41aa0 <__alt_data_end+0xfffcfaa0>
   4295c:	0039883a 	mov	fp,zero
   42960:	003e5a06 	br	422cc <__alt_data_end+0xfffd02cc>
   42964:	9080040c 	andi	r2,r18,16
   42968:	10013d26 	beq	r2,zero,42e60 <___svfprintf_internal_r+0x1710>
   4296c:	d8c02e17 	ldw	r3,184(sp)
   42970:	d9002a17 	ldw	r4,168(sp)
   42974:	d8002785 	stb	zero,158(sp)
   42978:	18800104 	addi	r2,r3,4
   4297c:	1d000017 	ldw	r20,0(r3)
   42980:	002d883a 	mov	r22,zero
   42984:	20013f16 	blt	r4,zero,42e84 <___svfprintf_internal_r+0x1734>
   42988:	00ffdfc4 	movi	r3,-129
   4298c:	d8802e15 	stw	r2,184(sp)
   42990:	90e4703a 	and	r18,r18,r3
   42994:	a03d0926 	beq	r20,zero,41dbc <__alt_data_end+0xfffcfdbc>
   42998:	0039883a 	mov	fp,zero
   4299c:	003d0c06 	br	41dd0 <__alt_data_end+0xfffcfdd0>
   429a0:	dc402617 	ldw	r17,152(sp)
   429a4:	0441830e 	bge	zero,r17,42fb4 <___svfprintf_internal_r+0x1864>
   429a8:	dc403217 	ldw	r17,200(sp)
   429ac:	d8803317 	ldw	r2,204(sp)
   429b0:	1440010e 	bge	r2,r17,429b8 <___svfprintf_internal_r+0x1268>
   429b4:	1023883a 	mov	r17,r2
   429b8:	04400a0e 	bge	zero,r17,429e4 <___svfprintf_internal_r+0x1294>
   429bc:	d8801f17 	ldw	r2,124(sp)
   429c0:	1c47883a 	add	r3,r3,r17
   429c4:	44000015 	stw	r16,0(r8)
   429c8:	10800044 	addi	r2,r2,1
   429cc:	44400115 	stw	r17,4(r8)
   429d0:	d8c02015 	stw	r3,128(sp)
   429d4:	d8801f15 	stw	r2,124(sp)
   429d8:	010001c4 	movi	r4,7
   429dc:	20827516 	blt	r4,r2,433b4 <___svfprintf_internal_r+0x1c64>
   429e0:	42000204 	addi	r8,r8,8
   429e4:	88027b16 	blt	r17,zero,433d4 <___svfprintf_internal_r+0x1c84>
   429e8:	d9003217 	ldw	r4,200(sp)
   429ec:	2463c83a 	sub	r17,r4,r17
   429f0:	0440990e 	bge	zero,r17,42c58 <___svfprintf_internal_r+0x1508>
   429f4:	05800404 	movi	r22,16
   429f8:	d8801f17 	ldw	r2,124(sp)
   429fc:	b441530e 	bge	r22,r17,42f4c <___svfprintf_internal_r+0x17fc>
   42a00:	01000174 	movhi	r4,5
   42a04:	211a2f84 	addi	r4,r4,26814
   42a08:	d9002c15 	stw	r4,176(sp)
   42a0c:	070001c4 	movi	fp,7
   42a10:	dd002d17 	ldw	r20,180(sp)
   42a14:	00000306 	br	42a24 <___svfprintf_internal_r+0x12d4>
   42a18:	42000204 	addi	r8,r8,8
   42a1c:	8c7ffc04 	addi	r17,r17,-16
   42a20:	b4414d0e 	bge	r22,r17,42f58 <___svfprintf_internal_r+0x1808>
   42a24:	18c00404 	addi	r3,r3,16
   42a28:	10800044 	addi	r2,r2,1
   42a2c:	45400015 	stw	r21,0(r8)
   42a30:	45800115 	stw	r22,4(r8)
   42a34:	d8c02015 	stw	r3,128(sp)
   42a38:	d8801f15 	stw	r2,124(sp)
   42a3c:	e0bff60e 	bge	fp,r2,42a18 <__alt_data_end+0xfffd0a18>
   42a40:	d9801e04 	addi	r6,sp,120
   42a44:	a00b883a 	mov	r5,r20
   42a48:	9809883a 	mov	r4,r19
   42a4c:	004b2580 	call	4b258 <__ssprint_r>
   42a50:	103c261e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42a54:	d8c02017 	ldw	r3,128(sp)
   42a58:	d8801f17 	ldw	r2,124(sp)
   42a5c:	da000404 	addi	r8,sp,16
   42a60:	003fee06 	br	42a1c <__alt_data_end+0xfffd0a1c>
   42a64:	d9402d17 	ldw	r5,180(sp)
   42a68:	d9801e04 	addi	r6,sp,120
   42a6c:	9809883a 	mov	r4,r19
   42a70:	004b2580 	call	4b258 <__ssprint_r>
   42a74:	103c1d1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42a78:	d8c02017 	ldw	r3,128(sp)
   42a7c:	df002787 	ldb	fp,158(sp)
   42a80:	da000404 	addi	r8,sp,16
   42a84:	003d3806 	br	41f68 <__alt_data_end+0xfffcff68>
   42a88:	9080040c 	andi	r2,r18,16
   42a8c:	10005c26 	beq	r2,zero,42c00 <___svfprintf_internal_r+0x14b0>
   42a90:	d8c02e17 	ldw	r3,184(sp)
   42a94:	d9002a17 	ldw	r4,168(sp)
   42a98:	d8002785 	stb	zero,158(sp)
   42a9c:	18800104 	addi	r2,r3,4
   42aa0:	1d000017 	ldw	r20,0(r3)
   42aa4:	002d883a 	mov	r22,zero
   42aa8:	20005e16 	blt	r4,zero,42c24 <___svfprintf_internal_r+0x14d4>
   42aac:	00ffdfc4 	movi	r3,-129
   42ab0:	d8802e15 	stw	r2,184(sp)
   42ab4:	90e4703a 	and	r18,r18,r3
   42ab8:	0039883a 	mov	fp,zero
   42abc:	a03ddf26 	beq	r20,zero,4223c <__alt_data_end+0xfffd023c>
   42ac0:	00800244 	movi	r2,9
   42ac4:	153c8e36 	bltu	r2,r20,41d00 <__alt_data_end+0xfffcfd00>
   42ac8:	a5000c04 	addi	r20,r20,48
   42acc:	dc001dc4 	addi	r16,sp,119
   42ad0:	dd001dc5 	stb	r20,119(sp)
   42ad4:	d8c02817 	ldw	r3,160(sp)
   42ad8:	1c07c83a 	sub	r3,r3,r16
   42adc:	d8c02b15 	stw	r3,172(sp)
   42ae0:	003cd306 	br	41e30 <__alt_data_end+0xfffcfe30>
   42ae4:	d8803317 	ldw	r2,204(sp)
   42ae8:	143fffc4 	addi	r16,r2,-1
   42aec:	043f560e 	bge	zero,r16,42848 <__alt_data_end+0xfffd0848>
   42af0:	07000404 	movi	fp,16
   42af4:	e403530e 	bge	fp,r16,43844 <___svfprintf_internal_r+0x20f4>
   42af8:	01400174 	movhi	r5,5
   42afc:	295a2f84 	addi	r5,r5,26814
   42b00:	d9402c15 	stw	r5,176(sp)
   42b04:	01c001c4 	movi	r7,7
   42b08:	dd002d17 	ldw	r20,180(sp)
   42b0c:	00000306 	br	42b1c <___svfprintf_internal_r+0x13cc>
   42b10:	843ffc04 	addi	r16,r16,-16
   42b14:	b5800204 	addi	r22,r22,8
   42b18:	e400130e 	bge	fp,r16,42b68 <___svfprintf_internal_r+0x1418>
   42b1c:	18c00404 	addi	r3,r3,16
   42b20:	8c400044 	addi	r17,r17,1
   42b24:	b5400015 	stw	r21,0(r22)
   42b28:	b7000115 	stw	fp,4(r22)
   42b2c:	d8c02015 	stw	r3,128(sp)
   42b30:	dc401f15 	stw	r17,124(sp)
   42b34:	3c7ff60e 	bge	r7,r17,42b10 <__alt_data_end+0xfffd0b10>
   42b38:	d9801e04 	addi	r6,sp,120
   42b3c:	a00b883a 	mov	r5,r20
   42b40:	9809883a 	mov	r4,r19
   42b44:	d9c03d15 	stw	r7,244(sp)
   42b48:	004b2580 	call	4b258 <__ssprint_r>
   42b4c:	d9c03d17 	ldw	r7,244(sp)
   42b50:	103be61e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42b54:	843ffc04 	addi	r16,r16,-16
   42b58:	d8c02017 	ldw	r3,128(sp)
   42b5c:	dc401f17 	ldw	r17,124(sp)
   42b60:	dd800404 	addi	r22,sp,16
   42b64:	e43fed16 	blt	fp,r16,42b1c <__alt_data_end+0xfffd0b1c>
   42b68:	d8802c17 	ldw	r2,176(sp)
   42b6c:	1c07883a 	add	r3,r3,r16
   42b70:	8c400044 	addi	r17,r17,1
   42b74:	b0800015 	stw	r2,0(r22)
   42b78:	b4000115 	stw	r16,4(r22)
   42b7c:	d8c02015 	stw	r3,128(sp)
   42b80:	dc401f15 	stw	r17,124(sp)
   42b84:	008001c4 	movi	r2,7
   42b88:	147f2e0e 	bge	r2,r17,42844 <__alt_data_end+0xfffd0844>
   42b8c:	d9402d17 	ldw	r5,180(sp)
   42b90:	d9801e04 	addi	r6,sp,120
   42b94:	9809883a 	mov	r4,r19
   42b98:	004b2580 	call	4b258 <__ssprint_r>
   42b9c:	103bd31e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42ba0:	d8c02017 	ldw	r3,128(sp)
   42ba4:	dc401f17 	ldw	r17,124(sp)
   42ba8:	dd800404 	addi	r22,sp,16
   42bac:	003f2606 	br	42848 <__alt_data_end+0xfffd0848>
   42bb0:	9080040c 	andi	r2,r18,16
   42bb4:	1000c326 	beq	r2,zero,42ec4 <___svfprintf_internal_r+0x1774>
   42bb8:	d9402e17 	ldw	r5,184(sp)
   42bbc:	2d000017 	ldw	r20,0(r5)
   42bc0:	29400104 	addi	r5,r5,4
   42bc4:	d9402e15 	stw	r5,184(sp)
   42bc8:	a02dd7fa 	srai	r22,r20,31
   42bcc:	b005883a 	mov	r2,r22
   42bd0:	103c430e 	bge	r2,zero,41ce0 <__alt_data_end+0xfffcfce0>
   42bd4:	d9402a17 	ldw	r5,168(sp)
   42bd8:	0529c83a 	sub	r20,zero,r20
   42bdc:	07000b44 	movi	fp,45
   42be0:	a004c03a 	cmpne	r2,r20,zero
   42be4:	05adc83a 	sub	r22,zero,r22
   42be8:	df002785 	stb	fp,158(sp)
   42bec:	b0adc83a 	sub	r22,r22,r2
   42bf0:	28022e16 	blt	r5,zero,434ac <___svfprintf_internal_r+0x1d5c>
   42bf4:	00bfdfc4 	movi	r2,-129
   42bf8:	90a4703a 	and	r18,r18,r2
   42bfc:	003c3f06 	br	41cfc <__alt_data_end+0xfffcfcfc>
   42c00:	9080100c 	andi	r2,r18,64
   42c04:	d8002785 	stb	zero,158(sp)
   42c08:	10012526 	beq	r2,zero,430a0 <___svfprintf_internal_r+0x1950>
   42c0c:	d9402e17 	ldw	r5,184(sp)
   42c10:	d8c02a17 	ldw	r3,168(sp)
   42c14:	002d883a 	mov	r22,zero
   42c18:	28800104 	addi	r2,r5,4
   42c1c:	2d00000b 	ldhu	r20,0(r5)
   42c20:	183fa20e 	bge	r3,zero,42aac <__alt_data_end+0xfffd0aac>
   42c24:	d8802e15 	stw	r2,184(sp)
   42c28:	0039883a 	mov	fp,zero
   42c2c:	a584b03a 	or	r2,r20,r22
   42c30:	103c321e 	bne	r2,zero,41cfc <__alt_data_end+0xfffcfcfc>
   42c34:	00800044 	movi	r2,1
   42c38:	003e5006 	br	4257c <__alt_data_end+0xfffd057c>
   42c3c:	d9402d17 	ldw	r5,180(sp)
   42c40:	d9801e04 	addi	r6,sp,120
   42c44:	9809883a 	mov	r4,r19
   42c48:	004b2580 	call	4b258 <__ssprint_r>
   42c4c:	103ba71e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42c50:	d8c02017 	ldw	r3,128(sp)
   42c54:	da000404 	addi	r8,sp,16
   42c58:	d9003217 	ldw	r4,200(sp)
   42c5c:	d8802617 	ldw	r2,152(sp)
   42c60:	d9403317 	ldw	r5,204(sp)
   42c64:	8123883a 	add	r17,r16,r4
   42c68:	11400216 	blt	r2,r5,42c74 <___svfprintf_internal_r+0x1524>
   42c6c:	9100004c 	andi	r4,r18,1
   42c70:	20000d26 	beq	r4,zero,42ca8 <___svfprintf_internal_r+0x1558>
   42c74:	d9003817 	ldw	r4,224(sp)
   42c78:	d9403417 	ldw	r5,208(sp)
   42c7c:	1907883a 	add	r3,r3,r4
   42c80:	d9001f17 	ldw	r4,124(sp)
   42c84:	41400015 	stw	r5,0(r8)
   42c88:	d9403817 	ldw	r5,224(sp)
   42c8c:	21000044 	addi	r4,r4,1
   42c90:	d8c02015 	stw	r3,128(sp)
   42c94:	41400115 	stw	r5,4(r8)
   42c98:	d9001f15 	stw	r4,124(sp)
   42c9c:	014001c4 	movi	r5,7
   42ca0:	2901dc16 	blt	r5,r4,43414 <___svfprintf_internal_r+0x1cc4>
   42ca4:	42000204 	addi	r8,r8,8
   42ca8:	d9003317 	ldw	r4,204(sp)
   42cac:	8121883a 	add	r16,r16,r4
   42cb0:	2085c83a 	sub	r2,r4,r2
   42cb4:	8461c83a 	sub	r16,r16,r17
   42cb8:	1400010e 	bge	r2,r16,42cc0 <___svfprintf_internal_r+0x1570>
   42cbc:	1021883a 	mov	r16,r2
   42cc0:	04000a0e 	bge	zero,r16,42cec <___svfprintf_internal_r+0x159c>
   42cc4:	d9001f17 	ldw	r4,124(sp)
   42cc8:	1c07883a 	add	r3,r3,r16
   42ccc:	44400015 	stw	r17,0(r8)
   42cd0:	21000044 	addi	r4,r4,1
   42cd4:	44000115 	stw	r16,4(r8)
   42cd8:	d8c02015 	stw	r3,128(sp)
   42cdc:	d9001f15 	stw	r4,124(sp)
   42ce0:	014001c4 	movi	r5,7
   42ce4:	2901e616 	blt	r5,r4,43480 <___svfprintf_internal_r+0x1d30>
   42ce8:	42000204 	addi	r8,r8,8
   42cec:	8001f616 	blt	r16,zero,434c8 <___svfprintf_internal_r+0x1d78>
   42cf0:	1421c83a 	sub	r16,r2,r16
   42cf4:	043cfa0e 	bge	zero,r16,420e0 <__alt_data_end+0xfffd00e0>
   42cf8:	04400404 	movi	r17,16
   42cfc:	d8801f17 	ldw	r2,124(sp)
   42d00:	8c3edd0e 	bge	r17,r16,42878 <__alt_data_end+0xfffd0878>
   42d04:	01400174 	movhi	r5,5
   42d08:	295a2f84 	addi	r5,r5,26814
   42d0c:	d9402c15 	stw	r5,176(sp)
   42d10:	058001c4 	movi	r22,7
   42d14:	dd002d17 	ldw	r20,180(sp)
   42d18:	00000306 	br	42d28 <___svfprintf_internal_r+0x15d8>
   42d1c:	42000204 	addi	r8,r8,8
   42d20:	843ffc04 	addi	r16,r16,-16
   42d24:	8c3ed70e 	bge	r17,r16,42884 <__alt_data_end+0xfffd0884>
   42d28:	18c00404 	addi	r3,r3,16
   42d2c:	10800044 	addi	r2,r2,1
   42d30:	45400015 	stw	r21,0(r8)
   42d34:	44400115 	stw	r17,4(r8)
   42d38:	d8c02015 	stw	r3,128(sp)
   42d3c:	d8801f15 	stw	r2,124(sp)
   42d40:	b0bff60e 	bge	r22,r2,42d1c <__alt_data_end+0xfffd0d1c>
   42d44:	d9801e04 	addi	r6,sp,120
   42d48:	a00b883a 	mov	r5,r20
   42d4c:	9809883a 	mov	r4,r19
   42d50:	004b2580 	call	4b258 <__ssprint_r>
   42d54:	103b651e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42d58:	d8c02017 	ldw	r3,128(sp)
   42d5c:	d8801f17 	ldw	r2,124(sp)
   42d60:	da000404 	addi	r8,sp,16
   42d64:	003fee06 	br	42d20 <__alt_data_end+0xfffd0d20>
   42d68:	9088703a 	and	r4,r18,r2
   42d6c:	203e8d1e 	bne	r4,zero,427a4 <__alt_data_end+0xfffd07a4>
   42d70:	dc401f17 	ldw	r17,124(sp)
   42d74:	40800115 	stw	r2,4(r8)
   42d78:	44000015 	stw	r16,0(r8)
   42d7c:	8c400044 	addi	r17,r17,1
   42d80:	d8c02015 	stw	r3,128(sp)
   42d84:	dc401f15 	stw	r17,124(sp)
   42d88:	008001c4 	movi	r2,7
   42d8c:	147f7f16 	blt	r2,r17,42b8c <__alt_data_end+0xfffd0b8c>
   42d90:	45800204 	addi	r22,r8,8
   42d94:	003eac06 	br	42848 <__alt_data_end+0xfffd0848>
   42d98:	d9402d17 	ldw	r5,180(sp)
   42d9c:	d9801e04 	addi	r6,sp,120
   42da0:	9809883a 	mov	r4,r19
   42da4:	004b2580 	call	4b258 <__ssprint_r>
   42da8:	103b501e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42dac:	d8c02017 	ldw	r3,128(sp)
   42db0:	dc401f17 	ldw	r17,124(sp)
   42db4:	da000404 	addi	r8,sp,16
   42db8:	003e8406 	br	427cc <__alt_data_end+0xfffd07cc>
   42dbc:	d9402d17 	ldw	r5,180(sp)
   42dc0:	d9801e04 	addi	r6,sp,120
   42dc4:	9809883a 	mov	r4,r19
   42dc8:	004b2580 	call	4b258 <__ssprint_r>
   42dcc:	103b471e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42dd0:	d8c02017 	ldw	r3,128(sp)
   42dd4:	dc401f17 	ldw	r17,124(sp)
   42dd8:	dd800404 	addi	r22,sp,16
   42ddc:	003e8606 	br	427f8 <__alt_data_end+0xfffd07f8>
   42de0:	0029883a 	mov	r20,zero
   42de4:	a5000c04 	addi	r20,r20,48
   42de8:	dc001dc4 	addi	r16,sp,119
   42dec:	dd001dc5 	stb	r20,119(sp)
   42df0:	003f3806 	br	42ad4 <__alt_data_end+0xfffd0ad4>
   42df4:	d9402d17 	ldw	r5,180(sp)
   42df8:	d9801e04 	addi	r6,sp,120
   42dfc:	9809883a 	mov	r4,r19
   42e00:	004b2580 	call	4b258 <__ssprint_r>
   42e04:	103b391e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42e08:	d8c02017 	ldw	r3,128(sp)
   42e0c:	da000404 	addi	r8,sp,16
   42e10:	003c7306 	br	41fe0 <__alt_data_end+0xfffcffe0>
   42e14:	d9003617 	ldw	r4,216(sp)
   42e18:	d9403717 	ldw	r5,220(sp)
   42e1c:	da003e15 	stw	r8,248(sp)
   42e20:	004af780 	call	4af78 <__fpclassifyd>
   42e24:	da003e17 	ldw	r8,248(sp)
   42e28:	1000bd1e 	bne	r2,zero,43120 <___svfprintf_internal_r+0x19d0>
   42e2c:	008011c4 	movi	r2,71
   42e30:	14411e0e 	bge	r2,r17,432ac <___svfprintf_internal_r+0x1b5c>
   42e34:	04000174 	movhi	r16,5
   42e38:	841a2204 	addi	r16,r16,26760
   42e3c:	00c000c4 	movi	r3,3
   42e40:	00bfdfc4 	movi	r2,-129
   42e44:	d8c02915 	stw	r3,164(sp)
   42e48:	90a4703a 	and	r18,r18,r2
   42e4c:	df002783 	ldbu	fp,158(sp)
   42e50:	d8c02b15 	stw	r3,172(sp)
   42e54:	d8002a15 	stw	zero,168(sp)
   42e58:	d8003215 	stw	zero,200(sp)
   42e5c:	003bfa06 	br	41e48 <__alt_data_end+0xfffcfe48>
   42e60:	9080100c 	andi	r2,r18,64
   42e64:	d8002785 	stb	zero,158(sp)
   42e68:	10009426 	beq	r2,zero,430bc <___svfprintf_internal_r+0x196c>
   42e6c:	d9402e17 	ldw	r5,184(sp)
   42e70:	d8c02a17 	ldw	r3,168(sp)
   42e74:	002d883a 	mov	r22,zero
   42e78:	28800104 	addi	r2,r5,4
   42e7c:	2d00000b 	ldhu	r20,0(r5)
   42e80:	183ec10e 	bge	r3,zero,42988 <__alt_data_end+0xfffd0988>
   42e84:	a586b03a 	or	r3,r20,r22
   42e88:	d8802e15 	stw	r2,184(sp)
   42e8c:	183ec21e 	bne	r3,zero,42998 <__alt_data_end+0xfffd0998>
   42e90:	0039883a 	mov	fp,zero
   42e94:	0005883a 	mov	r2,zero
   42e98:	003db806 	br	4257c <__alt_data_end+0xfffd057c>
   42e9c:	d8c02e17 	ldw	r3,184(sp)
   42ea0:	d9002e17 	ldw	r4,184(sp)
   42ea4:	d9402e17 	ldw	r5,184(sp)
   42ea8:	18c00017 	ldw	r3,0(r3)
   42eac:	21000117 	ldw	r4,4(r4)
   42eb0:	29400204 	addi	r5,r5,8
   42eb4:	d8c03615 	stw	r3,216(sp)
   42eb8:	d9003715 	stw	r4,220(sp)
   42ebc:	d9402e15 	stw	r5,184(sp)
   42ec0:	003b5a06 	br	41c2c <__alt_data_end+0xfffcfc2c>
   42ec4:	9080100c 	andi	r2,r18,64
   42ec8:	10010726 	beq	r2,zero,432e8 <___svfprintf_internal_r+0x1b98>
   42ecc:	d8802e17 	ldw	r2,184(sp)
   42ed0:	1500000f 	ldh	r20,0(r2)
   42ed4:	10800104 	addi	r2,r2,4
   42ed8:	d8802e15 	stw	r2,184(sp)
   42edc:	a02dd7fa 	srai	r22,r20,31
   42ee0:	b005883a 	mov	r2,r22
   42ee4:	003b7d06 	br	41cdc <__alt_data_end+0xfffcfcdc>
   42ee8:	9080100c 	andi	r2,r18,64
   42eec:	10010526 	beq	r2,zero,43304 <___svfprintf_internal_r+0x1bb4>
   42ef0:	d8c02e17 	ldw	r3,184(sp)
   42ef4:	002d883a 	mov	r22,zero
   42ef8:	1d00000b 	ldhu	r20,0(r3)
   42efc:	18c00104 	addi	r3,r3,4
   42f00:	d8c02e15 	stw	r3,184(sp)
   42f04:	003ce206 	br	42290 <__alt_data_end+0xfffd0290>
   42f08:	bc400007 	ldb	r17,0(r23)
   42f0c:	003a6506 	br	418a4 <__alt_data_end+0xfffcf8a4>
   42f10:	9080040c 	andi	r2,r18,16
   42f14:	10010126 	beq	r2,zero,4331c <___svfprintf_internal_r+0x1bcc>
   42f18:	d8c02e17 	ldw	r3,184(sp)
   42f1c:	d9002f17 	ldw	r4,188(sp)
   42f20:	18800017 	ldw	r2,0(r3)
   42f24:	18c00104 	addi	r3,r3,4
   42f28:	d8c02e15 	stw	r3,184(sp)
   42f2c:	11000015 	stw	r4,0(r2)
   42f30:	003a3206 	br	417fc <__alt_data_end+0xfffcf7fc>
   42f34:	d9002a17 	ldw	r4,168(sp)
   42f38:	d8002785 	stb	zero,158(sp)
   42f3c:	203d8d16 	blt	r4,zero,42574 <__alt_data_end+0xfffd0574>
   42f40:	00bfdfc4 	movi	r2,-129
   42f44:	90a4703a 	and	r18,r18,r2
   42f48:	003ad506 	br	41aa0 <__alt_data_end+0xfffcfaa0>
   42f4c:	01400174 	movhi	r5,5
   42f50:	295a2f84 	addi	r5,r5,26814
   42f54:	d9402c15 	stw	r5,176(sp)
   42f58:	d9402c17 	ldw	r5,176(sp)
   42f5c:	1c47883a 	add	r3,r3,r17
   42f60:	10800044 	addi	r2,r2,1
   42f64:	41400015 	stw	r5,0(r8)
   42f68:	44400115 	stw	r17,4(r8)
   42f6c:	d8c02015 	stw	r3,128(sp)
   42f70:	d8801f15 	stw	r2,124(sp)
   42f74:	010001c4 	movi	r4,7
   42f78:	20bf3016 	blt	r4,r2,42c3c <__alt_data_end+0xfffd0c3c>
   42f7c:	42000204 	addi	r8,r8,8
   42f80:	003f3506 	br	42c58 <__alt_data_end+0xfffd0c58>
   42f84:	01000174 	movhi	r4,5
   42f88:	211a2f84 	addi	r4,r4,26814
   42f8c:	d9002c15 	stw	r4,176(sp)
   42f90:	003c3c06 	br	42084 <__alt_data_end+0xfffd0084>
   42f94:	d9402d17 	ldw	r5,180(sp)
   42f98:	d9801e04 	addi	r6,sp,120
   42f9c:	9809883a 	mov	r4,r19
   42fa0:	004b2580 	call	4b258 <__ssprint_r>
   42fa4:	103ad11e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   42fa8:	d8c02017 	ldw	r3,128(sp)
   42fac:	da000404 	addi	r8,sp,16
   42fb0:	003d9306 	br	42600 <__alt_data_end+0xfffd0600>
   42fb4:	d8801f17 	ldw	r2,124(sp)
   42fb8:	01400174 	movhi	r5,5
   42fbc:	01000044 	movi	r4,1
   42fc0:	18c00044 	addi	r3,r3,1
   42fc4:	10800044 	addi	r2,r2,1
   42fc8:	295a2f04 	addi	r5,r5,26812
   42fcc:	41000115 	stw	r4,4(r8)
   42fd0:	41400015 	stw	r5,0(r8)
   42fd4:	d8c02015 	stw	r3,128(sp)
   42fd8:	d8801f15 	stw	r2,124(sp)
   42fdc:	010001c4 	movi	r4,7
   42fe0:	2080b516 	blt	r4,r2,432b8 <___svfprintf_internal_r+0x1b68>
   42fe4:	42000204 	addi	r8,r8,8
   42fe8:	8800041e 	bne	r17,zero,42ffc <___svfprintf_internal_r+0x18ac>
   42fec:	d8803317 	ldw	r2,204(sp)
   42ff0:	1000021e 	bne	r2,zero,42ffc <___svfprintf_internal_r+0x18ac>
   42ff4:	9080004c 	andi	r2,r18,1
   42ff8:	103c3926 	beq	r2,zero,420e0 <__alt_data_end+0xfffd00e0>
   42ffc:	d9003817 	ldw	r4,224(sp)
   43000:	d8801f17 	ldw	r2,124(sp)
   43004:	d9403417 	ldw	r5,208(sp)
   43008:	20c7883a 	add	r3,r4,r3
   4300c:	10800044 	addi	r2,r2,1
   43010:	41000115 	stw	r4,4(r8)
   43014:	41400015 	stw	r5,0(r8)
   43018:	d8c02015 	stw	r3,128(sp)
   4301c:	d8801f15 	stw	r2,124(sp)
   43020:	010001c4 	movi	r4,7
   43024:	20818016 	blt	r4,r2,43628 <___svfprintf_internal_r+0x1ed8>
   43028:	42000204 	addi	r8,r8,8
   4302c:	0463c83a 	sub	r17,zero,r17
   43030:	0440cb0e 	bge	zero,r17,43360 <___svfprintf_internal_r+0x1c10>
   43034:	05800404 	movi	r22,16
   43038:	b440e80e 	bge	r22,r17,433dc <___svfprintf_internal_r+0x1c8c>
   4303c:	01400174 	movhi	r5,5
   43040:	295a2f84 	addi	r5,r5,26814
   43044:	d9402c15 	stw	r5,176(sp)
   43048:	070001c4 	movi	fp,7
   4304c:	dd002d17 	ldw	r20,180(sp)
   43050:	00000306 	br	43060 <___svfprintf_internal_r+0x1910>
   43054:	42000204 	addi	r8,r8,8
   43058:	8c7ffc04 	addi	r17,r17,-16
   4305c:	b440e20e 	bge	r22,r17,433e8 <___svfprintf_internal_r+0x1c98>
   43060:	18c00404 	addi	r3,r3,16
   43064:	10800044 	addi	r2,r2,1
   43068:	45400015 	stw	r21,0(r8)
   4306c:	45800115 	stw	r22,4(r8)
   43070:	d8c02015 	stw	r3,128(sp)
   43074:	d8801f15 	stw	r2,124(sp)
   43078:	e0bff60e 	bge	fp,r2,43054 <__alt_data_end+0xfffd1054>
   4307c:	d9801e04 	addi	r6,sp,120
   43080:	a00b883a 	mov	r5,r20
   43084:	9809883a 	mov	r4,r19
   43088:	004b2580 	call	4b258 <__ssprint_r>
   4308c:	103a971e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   43090:	d8c02017 	ldw	r3,128(sp)
   43094:	d8801f17 	ldw	r2,124(sp)
   43098:	da000404 	addi	r8,sp,16
   4309c:	003fee06 	br	43058 <__alt_data_end+0xfffd1058>
   430a0:	d9002e17 	ldw	r4,184(sp)
   430a4:	d9402a17 	ldw	r5,168(sp)
   430a8:	002d883a 	mov	r22,zero
   430ac:	20800104 	addi	r2,r4,4
   430b0:	25000017 	ldw	r20,0(r4)
   430b4:	283e7d0e 	bge	r5,zero,42aac <__alt_data_end+0xfffd0aac>
   430b8:	003eda06 	br	42c24 <__alt_data_end+0xfffd0c24>
   430bc:	d9002e17 	ldw	r4,184(sp)
   430c0:	d9402a17 	ldw	r5,168(sp)
   430c4:	002d883a 	mov	r22,zero
   430c8:	20800104 	addi	r2,r4,4
   430cc:	25000017 	ldw	r20,0(r4)
   430d0:	283e2d0e 	bge	r5,zero,42988 <__alt_data_end+0xfffd0988>
   430d4:	003f6b06 	br	42e84 <__alt_data_end+0xfffd0e84>
   430d8:	d8c02e15 	stw	r3,184(sp)
   430dc:	0039883a 	mov	fp,zero
   430e0:	003ed206 	br	42c2c <__alt_data_end+0xfffd0c2c>
   430e4:	bc400043 	ldbu	r17,1(r23)
   430e8:	84000814 	ori	r16,r16,32
   430ec:	bdc00044 	addi	r23,r23,1
   430f0:	8c403fcc 	andi	r17,r17,255
   430f4:	8c40201c 	xori	r17,r17,128
   430f8:	8c7fe004 	addi	r17,r17,-128
   430fc:	0039e906 	br	418a4 <__alt_data_end+0xfffcf8a4>
   43100:	d9402d17 	ldw	r5,180(sp)
   43104:	d9801e04 	addi	r6,sp,120
   43108:	9809883a 	mov	r4,r19
   4310c:	004b2580 	call	4b258 <__ssprint_r>
   43110:	103a761e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   43114:	d8c02017 	ldw	r3,128(sp)
   43118:	da000404 	addi	r8,sp,16
   4311c:	003d4a06 	br	42648 <__alt_data_end+0xfffd0648>
   43120:	d9002a17 	ldw	r4,168(sp)
   43124:	05bff7c4 	movi	r22,-33
   43128:	00bfffc4 	movi	r2,-1
   4312c:	8dac703a 	and	r22,r17,r22
   43130:	20806a26 	beq	r4,r2,432dc <___svfprintf_internal_r+0x1b8c>
   43134:	008011c4 	movi	r2,71
   43138:	b0813726 	beq	r22,r2,43618 <___svfprintf_internal_r+0x1ec8>
   4313c:	d9003717 	ldw	r4,220(sp)
   43140:	90c04014 	ori	r3,r18,256
   43144:	d8c02c15 	stw	r3,176(sp)
   43148:	20015d16 	blt	r4,zero,436c0 <___svfprintf_internal_r+0x1f70>
   4314c:	dd003717 	ldw	r20,220(sp)
   43150:	d8002905 	stb	zero,164(sp)
   43154:	00801984 	movi	r2,102
   43158:	88814026 	beq	r17,r2,4365c <___svfprintf_internal_r+0x1f0c>
   4315c:	00801184 	movi	r2,70
   43160:	88817126 	beq	r17,r2,43728 <___svfprintf_internal_r+0x1fd8>
   43164:	00801144 	movi	r2,69
   43168:	b0816226 	beq	r22,r2,436f4 <___svfprintf_internal_r+0x1fa4>
   4316c:	d8c02a17 	ldw	r3,168(sp)
   43170:	d8802104 	addi	r2,sp,132
   43174:	d8800315 	stw	r2,12(sp)
   43178:	d9403617 	ldw	r5,216(sp)
   4317c:	d8802504 	addi	r2,sp,148
   43180:	d8800215 	stw	r2,8(sp)
   43184:	d8802604 	addi	r2,sp,152
   43188:	d8c00015 	stw	r3,0(sp)
   4318c:	d8800115 	stw	r2,4(sp)
   43190:	01c00084 	movi	r7,2
   43194:	a00d883a 	mov	r6,r20
   43198:	9809883a 	mov	r4,r19
   4319c:	d8c03d15 	stw	r3,244(sp)
   431a0:	da003e15 	stw	r8,248(sp)
   431a4:	004613c0 	call	4613c <_dtoa_r>
   431a8:	1021883a 	mov	r16,r2
   431ac:	008019c4 	movi	r2,103
   431b0:	d8c03d17 	ldw	r3,244(sp)
   431b4:	da003e17 	ldw	r8,248(sp)
   431b8:	8880e726 	beq	r17,r2,43558 <___svfprintf_internal_r+0x1e08>
   431bc:	008011c4 	movi	r2,71
   431c0:	8880d426 	beq	r17,r2,43514 <___svfprintf_internal_r+0x1dc4>
   431c4:	80f9883a 	add	fp,r16,r3
   431c8:	d9003617 	ldw	r4,216(sp)
   431cc:	000d883a 	mov	r6,zero
   431d0:	000f883a 	mov	r7,zero
   431d4:	a00b883a 	mov	r5,r20
   431d8:	da003e15 	stw	r8,248(sp)
   431dc:	00506480 	call	50648 <__eqdf2>
   431e0:	da003e17 	ldw	r8,248(sp)
   431e4:	1000e426 	beq	r2,zero,43578 <___svfprintf_internal_r+0x1e28>
   431e8:	d8802117 	ldw	r2,132(sp)
   431ec:	1700062e 	bgeu	r2,fp,43208 <___svfprintf_internal_r+0x1ab8>
   431f0:	01000c04 	movi	r4,48
   431f4:	10c00044 	addi	r3,r2,1
   431f8:	d8c02115 	stw	r3,132(sp)
   431fc:	11000005 	stb	r4,0(r2)
   43200:	d8802117 	ldw	r2,132(sp)
   43204:	173ffb36 	bltu	r2,fp,431f4 <__alt_data_end+0xfffd11f4>
   43208:	1405c83a 	sub	r2,r2,r16
   4320c:	d8803315 	stw	r2,204(sp)
   43210:	008011c4 	movi	r2,71
   43214:	b080c526 	beq	r22,r2,4352c <___svfprintf_internal_r+0x1ddc>
   43218:	00801944 	movi	r2,101
   4321c:	1441d80e 	bge	r2,r17,43980 <___svfprintf_internal_r+0x2230>
   43220:	d8c02617 	ldw	r3,152(sp)
   43224:	00801984 	movi	r2,102
   43228:	d8c03215 	stw	r3,200(sp)
   4322c:	88813426 	beq	r17,r2,43700 <___svfprintf_internal_r+0x1fb0>
   43230:	d8c03217 	ldw	r3,200(sp)
   43234:	d9003317 	ldw	r4,204(sp)
   43238:	19012516 	blt	r3,r4,436d0 <___svfprintf_internal_r+0x1f80>
   4323c:	9480004c 	andi	r18,r18,1
   43240:	9001841e 	bne	r18,zero,43854 <___svfprintf_internal_r+0x2104>
   43244:	1805883a 	mov	r2,r3
   43248:	1801cb16 	blt	r3,zero,43978 <___svfprintf_internal_r+0x2228>
   4324c:	d8c03217 	ldw	r3,200(sp)
   43250:	044019c4 	movi	r17,103
   43254:	d8c02b15 	stw	r3,172(sp)
   43258:	df002907 	ldb	fp,164(sp)
   4325c:	e000a61e 	bne	fp,zero,434f8 <___svfprintf_internal_r+0x1da8>
   43260:	df002783 	ldbu	fp,158(sp)
   43264:	d8802915 	stw	r2,164(sp)
   43268:	dc802c17 	ldw	r18,176(sp)
   4326c:	d8002a15 	stw	zero,168(sp)
   43270:	003af506 	br	41e48 <__alt_data_end+0xfffcfe48>
   43274:	04000174 	movhi	r16,5
   43278:	841a1f04 	addi	r16,r16,26748
   4327c:	003a7e06 	br	41c78 <__alt_data_end+0xfffcfc78>
   43280:	d9003917 	ldw	r4,228(sp)
   43284:	04001004 	movi	r16,64
   43288:	800b883a 	mov	r5,r16
   4328c:	0048b380 	call	48b38 <_malloc_r>
   43290:	d9002d17 	ldw	r4,180(sp)
   43294:	20800015 	stw	r2,0(r4)
   43298:	20800415 	stw	r2,16(r4)
   4329c:	1001d026 	beq	r2,zero,439e0 <___svfprintf_internal_r+0x2290>
   432a0:	d8802d17 	ldw	r2,180(sp)
   432a4:	14000515 	stw	r16,20(r2)
   432a8:	00394406 	br	417bc <__alt_data_end+0xfffcf7bc>
   432ac:	04000174 	movhi	r16,5
   432b0:	841a2104 	addi	r16,r16,26756
   432b4:	003ee106 	br	42e3c <__alt_data_end+0xfffd0e3c>
   432b8:	d9402d17 	ldw	r5,180(sp)
   432bc:	d9801e04 	addi	r6,sp,120
   432c0:	9809883a 	mov	r4,r19
   432c4:	004b2580 	call	4b258 <__ssprint_r>
   432c8:	103a081e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   432cc:	dc402617 	ldw	r17,152(sp)
   432d0:	d8c02017 	ldw	r3,128(sp)
   432d4:	da000404 	addi	r8,sp,16
   432d8:	003f4306 	br	42fe8 <__alt_data_end+0xfffd0fe8>
   432dc:	01400184 	movi	r5,6
   432e0:	d9402a15 	stw	r5,168(sp)
   432e4:	003f9506 	br	4313c <__alt_data_end+0xfffd113c>
   432e8:	d8c02e17 	ldw	r3,184(sp)
   432ec:	1d000017 	ldw	r20,0(r3)
   432f0:	18c00104 	addi	r3,r3,4
   432f4:	d8c02e15 	stw	r3,184(sp)
   432f8:	a02dd7fa 	srai	r22,r20,31
   432fc:	b005883a 	mov	r2,r22
   43300:	003a7606 	br	41cdc <__alt_data_end+0xfffcfcdc>
   43304:	d9002e17 	ldw	r4,184(sp)
   43308:	002d883a 	mov	r22,zero
   4330c:	25000017 	ldw	r20,0(r4)
   43310:	21000104 	addi	r4,r4,4
   43314:	d9002e15 	stw	r4,184(sp)
   43318:	003bdd06 	br	42290 <__alt_data_end+0xfffd0290>
   4331c:	9480100c 	andi	r18,r18,64
   43320:	90006e26 	beq	r18,zero,434dc <___svfprintf_internal_r+0x1d8c>
   43324:	d9402e17 	ldw	r5,184(sp)
   43328:	d8c02f17 	ldw	r3,188(sp)
   4332c:	28800017 	ldw	r2,0(r5)
   43330:	29400104 	addi	r5,r5,4
   43334:	d9402e15 	stw	r5,184(sp)
   43338:	10c0000d 	sth	r3,0(r2)
   4333c:	00392f06 	br	417fc <__alt_data_end+0xfffcf7fc>
   43340:	d9402d17 	ldw	r5,180(sp)
   43344:	d9801e04 	addi	r6,sp,120
   43348:	9809883a 	mov	r4,r19
   4334c:	004b2580 	call	4b258 <__ssprint_r>
   43350:	1039e61e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   43354:	d8c02017 	ldw	r3,128(sp)
   43358:	d8801f17 	ldw	r2,124(sp)
   4335c:	da000404 	addi	r8,sp,16
   43360:	d9403317 	ldw	r5,204(sp)
   43364:	10800044 	addi	r2,r2,1
   43368:	44000015 	stw	r16,0(r8)
   4336c:	28c7883a 	add	r3,r5,r3
   43370:	003b5506 	br	420c8 <__alt_data_end+0xfffd00c8>
   43374:	8009883a 	mov	r4,r16
   43378:	df003e15 	stw	fp,248(sp)
   4337c:	00416b80 	call	416b8 <strlen>
   43380:	d8802b15 	stw	r2,172(sp)
   43384:	da003e17 	ldw	r8,248(sp)
   43388:	103c160e 	bge	r2,zero,423e4 <__alt_data_end+0xfffd03e4>
   4338c:	0005883a 	mov	r2,zero
   43390:	003c1406 	br	423e4 <__alt_data_end+0xfffd03e4>
   43394:	00bfffc4 	movi	r2,-1
   43398:	0039d906 	br	41b00 <__alt_data_end+0xfffcfb00>
   4339c:	01000174 	movhi	r4,5
   433a0:	211a3384 	addi	r4,r4,26830
   433a4:	d9003515 	stw	r4,212(sp)
   433a8:	003ae406 	br	41f3c <__alt_data_end+0xfffcff3c>
   433ac:	013fffc4 	movi	r4,-1
   433b0:	0039fa06 	br	41b9c <__alt_data_end+0xfffcfb9c>
   433b4:	d9402d17 	ldw	r5,180(sp)
   433b8:	d9801e04 	addi	r6,sp,120
   433bc:	9809883a 	mov	r4,r19
   433c0:	004b2580 	call	4b258 <__ssprint_r>
   433c4:	1039c91e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   433c8:	d8c02017 	ldw	r3,128(sp)
   433cc:	da000404 	addi	r8,sp,16
   433d0:	003d8406 	br	429e4 <__alt_data_end+0xfffd09e4>
   433d4:	0023883a 	mov	r17,zero
   433d8:	003d8306 	br	429e8 <__alt_data_end+0xfffd09e8>
   433dc:	01000174 	movhi	r4,5
   433e0:	211a2f84 	addi	r4,r4,26814
   433e4:	d9002c15 	stw	r4,176(sp)
   433e8:	d9002c17 	ldw	r4,176(sp)
   433ec:	1c47883a 	add	r3,r3,r17
   433f0:	10800044 	addi	r2,r2,1
   433f4:	41000015 	stw	r4,0(r8)
   433f8:	44400115 	stw	r17,4(r8)
   433fc:	d8c02015 	stw	r3,128(sp)
   43400:	d8801f15 	stw	r2,124(sp)
   43404:	010001c4 	movi	r4,7
   43408:	20bfcd16 	blt	r4,r2,43340 <__alt_data_end+0xfffd1340>
   4340c:	42000204 	addi	r8,r8,8
   43410:	003fd306 	br	43360 <__alt_data_end+0xfffd1360>
   43414:	d9402d17 	ldw	r5,180(sp)
   43418:	d9801e04 	addi	r6,sp,120
   4341c:	9809883a 	mov	r4,r19
   43420:	004b2580 	call	4b258 <__ssprint_r>
   43424:	1039b11e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   43428:	d8802617 	ldw	r2,152(sp)
   4342c:	d8c02017 	ldw	r3,128(sp)
   43430:	da000404 	addi	r8,sp,16
   43434:	003e1c06 	br	42ca8 <__alt_data_end+0xfffd0ca8>
   43438:	d8802a17 	ldw	r2,168(sp)
   4343c:	00c00184 	movi	r3,6
   43440:	1880012e 	bgeu	r3,r2,43448 <___svfprintf_internal_r+0x1cf8>
   43444:	1805883a 	mov	r2,r3
   43448:	d8802b15 	stw	r2,172(sp)
   4344c:	1000f316 	blt	r2,zero,4381c <___svfprintf_internal_r+0x20cc>
   43450:	04000174 	movhi	r16,5
   43454:	d8802915 	stw	r2,164(sp)
   43458:	dd002e15 	stw	r20,184(sp)
   4345c:	d8002a15 	stw	zero,168(sp)
   43460:	d8003215 	stw	zero,200(sp)
   43464:	841a2d04 	addi	r16,r16,26804
   43468:	0039883a 	mov	fp,zero
   4346c:	003a7d06 	br	41e64 <__alt_data_end+0xfffcfe64>
   43470:	01000174 	movhi	r4,5
   43474:	211a3384 	addi	r4,r4,26830
   43478:	d9003515 	stw	r4,212(sp)
   4347c:	003b3d06 	br	42174 <__alt_data_end+0xfffd0174>
   43480:	d9402d17 	ldw	r5,180(sp)
   43484:	d9801e04 	addi	r6,sp,120
   43488:	9809883a 	mov	r4,r19
   4348c:	004b2580 	call	4b258 <__ssprint_r>
   43490:	1039961e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   43494:	d8802617 	ldw	r2,152(sp)
   43498:	d9403317 	ldw	r5,204(sp)
   4349c:	d8c02017 	ldw	r3,128(sp)
   434a0:	da000404 	addi	r8,sp,16
   434a4:	2885c83a 	sub	r2,r5,r2
   434a8:	003e1006 	br	42cec <__alt_data_end+0xfffd0cec>
   434ac:	00800044 	movi	r2,1
   434b0:	10803fcc 	andi	r2,r2,255
   434b4:	00c00044 	movi	r3,1
   434b8:	10fa1026 	beq	r2,r3,41cfc <__alt_data_end+0xfffcfcfc>
   434bc:	00c00084 	movi	r3,2
   434c0:	10fb8226 	beq	r2,r3,422cc <__alt_data_end+0xfffd02cc>
   434c4:	003a4206 	br	41dd0 <__alt_data_end+0xfffcfdd0>
   434c8:	0021883a 	mov	r16,zero
   434cc:	003e0806 	br	42cf0 <__alt_data_end+0xfffd0cf0>
   434d0:	07000b44 	movi	fp,45
   434d4:	df002785 	stb	fp,158(sp)
   434d8:	0039e306 	br	41c68 <__alt_data_end+0xfffcfc68>
   434dc:	d9002e17 	ldw	r4,184(sp)
   434e0:	d9402f17 	ldw	r5,188(sp)
   434e4:	20800017 	ldw	r2,0(r4)
   434e8:	21000104 	addi	r4,r4,4
   434ec:	d9002e15 	stw	r4,184(sp)
   434f0:	11400015 	stw	r5,0(r2)
   434f4:	0038c106 	br	417fc <__alt_data_end+0xfffcf7fc>
   434f8:	00c00b44 	movi	r3,45
   434fc:	d8c02785 	stb	r3,158(sp)
   43500:	d8802915 	stw	r2,164(sp)
   43504:	dc802c17 	ldw	r18,176(sp)
   43508:	d8002a15 	stw	zero,168(sp)
   4350c:	07000b44 	movi	fp,45
   43510:	003a5106 	br	41e58 <__alt_data_end+0xfffcfe58>
   43514:	9080004c 	andi	r2,r18,1
   43518:	1000941e 	bne	r2,zero,4376c <___svfprintf_internal_r+0x201c>
   4351c:	d8802117 	ldw	r2,132(sp)
   43520:	1405c83a 	sub	r2,r2,r16
   43524:	d8803315 	stw	r2,204(sp)
   43528:	b441151e 	bne	r22,r17,43980 <___svfprintf_internal_r+0x2230>
   4352c:	dd802617 	ldw	r22,152(sp)
   43530:	00bfff44 	movi	r2,-3
   43534:	b0801a16 	blt	r22,r2,435a0 <___svfprintf_internal_r+0x1e50>
   43538:	d9402a17 	ldw	r5,168(sp)
   4353c:	2d801816 	blt	r5,r22,435a0 <___svfprintf_internal_r+0x1e50>
   43540:	dd803215 	stw	r22,200(sp)
   43544:	003f3a06 	br	43230 <__alt_data_end+0xfffd1230>
   43548:	1025883a 	mov	r18,r2
   4354c:	0039883a 	mov	fp,zero
   43550:	00800084 	movi	r2,2
   43554:	003fd606 	br	434b0 <__alt_data_end+0xfffd14b0>
   43558:	9080004c 	andi	r2,r18,1
   4355c:	103f191e 	bne	r2,zero,431c4 <__alt_data_end+0xfffd11c4>
   43560:	d8802117 	ldw	r2,132(sp)
   43564:	003f2806 	br	43208 <__alt_data_end+0xfffd1208>
   43568:	01000174 	movhi	r4,5
   4356c:	211a2f84 	addi	r4,r4,26814
   43570:	d9002c15 	stw	r4,176(sp)
   43574:	003c7c06 	br	42768 <__alt_data_end+0xfffd0768>
   43578:	e005883a 	mov	r2,fp
   4357c:	003f2206 	br	43208 <__alt_data_end+0xfffd1208>
   43580:	d9002a17 	ldw	r4,168(sp)
   43584:	df002783 	ldbu	fp,158(sp)
   43588:	dd002e15 	stw	r20,184(sp)
   4358c:	d9002915 	stw	r4,164(sp)
   43590:	d9002b15 	stw	r4,172(sp)
   43594:	d8002a15 	stw	zero,168(sp)
   43598:	d8003215 	stw	zero,200(sp)
   4359c:	003a2a06 	br	41e48 <__alt_data_end+0xfffcfe48>
   435a0:	8c7fff84 	addi	r17,r17,-2
   435a4:	b5bfffc4 	addi	r22,r22,-1
   435a8:	dd802615 	stw	r22,152(sp)
   435ac:	dc4022c5 	stb	r17,139(sp)
   435b0:	b000c316 	blt	r22,zero,438c0 <___svfprintf_internal_r+0x2170>
   435b4:	00800ac4 	movi	r2,43
   435b8:	d8802305 	stb	r2,140(sp)
   435bc:	00800244 	movi	r2,9
   435c0:	15806e16 	blt	r2,r22,4377c <___svfprintf_internal_r+0x202c>
   435c4:	00800c04 	movi	r2,48
   435c8:	b5800c04 	addi	r22,r22,48
   435cc:	d8802345 	stb	r2,141(sp)
   435d0:	dd802385 	stb	r22,142(sp)
   435d4:	d88023c4 	addi	r2,sp,143
   435d8:	df0022c4 	addi	fp,sp,139
   435dc:	d8c03317 	ldw	r3,204(sp)
   435e0:	1739c83a 	sub	fp,r2,fp
   435e4:	d9003317 	ldw	r4,204(sp)
   435e8:	e0c7883a 	add	r3,fp,r3
   435ec:	df003b15 	stw	fp,236(sp)
   435f0:	d8c02b15 	stw	r3,172(sp)
   435f4:	00800044 	movi	r2,1
   435f8:	1100b70e 	bge	r2,r4,438d8 <___svfprintf_internal_r+0x2188>
   435fc:	d8c02b17 	ldw	r3,172(sp)
   43600:	18c00044 	addi	r3,r3,1
   43604:	d8c02b15 	stw	r3,172(sp)
   43608:	1805883a 	mov	r2,r3
   4360c:	1800b016 	blt	r3,zero,438d0 <___svfprintf_internal_r+0x2180>
   43610:	d8003215 	stw	zero,200(sp)
   43614:	003f1006 	br	43258 <__alt_data_end+0xfffd1258>
   43618:	d8802a17 	ldw	r2,168(sp)
   4361c:	103ec71e 	bne	r2,zero,4313c <__alt_data_end+0xfffd113c>
   43620:	dc002a15 	stw	r16,168(sp)
   43624:	003ec506 	br	4313c <__alt_data_end+0xfffd113c>
   43628:	d9402d17 	ldw	r5,180(sp)
   4362c:	d9801e04 	addi	r6,sp,120
   43630:	9809883a 	mov	r4,r19
   43634:	004b2580 	call	4b258 <__ssprint_r>
   43638:	10392c1e 	bne	r2,zero,41aec <__alt_data_end+0xfffcfaec>
   4363c:	dc402617 	ldw	r17,152(sp)
   43640:	d8c02017 	ldw	r3,128(sp)
   43644:	d8801f17 	ldw	r2,124(sp)
   43648:	da000404 	addi	r8,sp,16
   4364c:	003e7706 	br	4302c <__alt_data_end+0xfffd102c>
   43650:	182f883a 	mov	r23,r3
   43654:	d8002a15 	stw	zero,168(sp)
   43658:	00389306 	br	418a8 <__alt_data_end+0xfffcf8a8>
   4365c:	d8c02a17 	ldw	r3,168(sp)
   43660:	d8802104 	addi	r2,sp,132
   43664:	d8800315 	stw	r2,12(sp)
   43668:	d9403617 	ldw	r5,216(sp)
   4366c:	d8802504 	addi	r2,sp,148
   43670:	d8800215 	stw	r2,8(sp)
   43674:	d8802604 	addi	r2,sp,152
   43678:	d8c00015 	stw	r3,0(sp)
   4367c:	9809883a 	mov	r4,r19
   43680:	d8800115 	stw	r2,4(sp)
   43684:	01c000c4 	movi	r7,3
   43688:	a00d883a 	mov	r6,r20
   4368c:	da003e15 	stw	r8,248(sp)
   43690:	004613c0 	call	4613c <_dtoa_r>
   43694:	d9002a17 	ldw	r4,168(sp)
   43698:	da003e17 	ldw	r8,248(sp)
   4369c:	1021883a 	mov	r16,r2
   436a0:	1139883a 	add	fp,r2,r4
   436a4:	2007883a 	mov	r3,r4
   436a8:	81000007 	ldb	r4,0(r16)
   436ac:	00800c04 	movi	r2,48
   436b0:	20806f26 	beq	r4,r2,43870 <___svfprintf_internal_r+0x2120>
   436b4:	d8c02617 	ldw	r3,152(sp)
   436b8:	e0f9883a 	add	fp,fp,r3
   436bc:	003ec206 	br	431c8 <__alt_data_end+0xfffd11c8>
   436c0:	00c00b44 	movi	r3,45
   436c4:	2520003c 	xorhi	r20,r4,32768
   436c8:	d8c02905 	stb	r3,164(sp)
   436cc:	003ea106 	br	43154 <__alt_data_end+0xfffd1154>
   436d0:	d8c03217 	ldw	r3,200(sp)
   436d4:	00c0890e 	bge	zero,r3,438fc <___svfprintf_internal_r+0x21ac>
   436d8:	00800044 	movi	r2,1
   436dc:	d9003317 	ldw	r4,204(sp)
   436e0:	1105883a 	add	r2,r2,r4
   436e4:	d8802b15 	stw	r2,172(sp)
   436e8:	10005f16 	blt	r2,zero,43868 <___svfprintf_internal_r+0x2118>
   436ec:	044019c4 	movi	r17,103
   436f0:	003ed906 	br	43258 <__alt_data_end+0xfffd1258>
   436f4:	d9002a17 	ldw	r4,168(sp)
   436f8:	20c00044 	addi	r3,r4,1
   436fc:	003e9c06 	br	43170 <__alt_data_end+0xfffd1170>
   43700:	d9002a17 	ldw	r4,168(sp)
   43704:	00c0680e 	bge	zero,r3,438a8 <___svfprintf_internal_r+0x2158>
   43708:	2000461e 	bne	r4,zero,43824 <___svfprintf_internal_r+0x20d4>
   4370c:	9480004c 	andi	r18,r18,1
   43710:	9000441e 	bne	r18,zero,43824 <___svfprintf_internal_r+0x20d4>
   43714:	1805883a 	mov	r2,r3
   43718:	1800a116 	blt	r3,zero,439a0 <___svfprintf_internal_r+0x2250>
   4371c:	d8c03217 	ldw	r3,200(sp)
   43720:	d8c02b15 	stw	r3,172(sp)
   43724:	003ecc06 	br	43258 <__alt_data_end+0xfffd1258>
   43728:	d9402a17 	ldw	r5,168(sp)
   4372c:	d8802104 	addi	r2,sp,132
   43730:	d8800315 	stw	r2,12(sp)
   43734:	d9400015 	stw	r5,0(sp)
   43738:	d8802504 	addi	r2,sp,148
   4373c:	d9403617 	ldw	r5,216(sp)
   43740:	d8800215 	stw	r2,8(sp)
   43744:	d8802604 	addi	r2,sp,152
   43748:	d8800115 	stw	r2,4(sp)
   4374c:	01c000c4 	movi	r7,3
   43750:	a00d883a 	mov	r6,r20
   43754:	9809883a 	mov	r4,r19
   43758:	da003e15 	stw	r8,248(sp)
   4375c:	004613c0 	call	4613c <_dtoa_r>
   43760:	d8c02a17 	ldw	r3,168(sp)
   43764:	da003e17 	ldw	r8,248(sp)
   43768:	1021883a 	mov	r16,r2
   4376c:	00801184 	movi	r2,70
   43770:	80f9883a 	add	fp,r16,r3
   43774:	88bfcc26 	beq	r17,r2,436a8 <__alt_data_end+0xfffd16a8>
   43778:	003e9306 	br	431c8 <__alt_data_end+0xfffd11c8>
   4377c:	df0022c4 	addi	fp,sp,139
   43780:	dc002a15 	stw	r16,168(sp)
   43784:	9829883a 	mov	r20,r19
   43788:	e021883a 	mov	r16,fp
   4378c:	4027883a 	mov	r19,r8
   43790:	b009883a 	mov	r4,r22
   43794:	01400284 	movi	r5,10
   43798:	00407c40 	call	407c4 <__modsi3>
   4379c:	10800c04 	addi	r2,r2,48
   437a0:	843fffc4 	addi	r16,r16,-1
   437a4:	b009883a 	mov	r4,r22
   437a8:	01400284 	movi	r5,10
   437ac:	80800005 	stb	r2,0(r16)
   437b0:	00407400 	call	40740 <__divsi3>
   437b4:	102d883a 	mov	r22,r2
   437b8:	00800244 	movi	r2,9
   437bc:	15bff416 	blt	r2,r22,43790 <__alt_data_end+0xfffd1790>
   437c0:	9811883a 	mov	r8,r19
   437c4:	b0800c04 	addi	r2,r22,48
   437c8:	a027883a 	mov	r19,r20
   437cc:	8029883a 	mov	r20,r16
   437d0:	a17fffc4 	addi	r5,r20,-1
   437d4:	a0bfffc5 	stb	r2,-1(r20)
   437d8:	dc002a17 	ldw	r16,168(sp)
   437dc:	2f00782e 	bgeu	r5,fp,439c0 <___svfprintf_internal_r+0x2270>
   437e0:	d9c02384 	addi	r7,sp,142
   437e4:	3d0fc83a 	sub	r7,r7,r20
   437e8:	d9002344 	addi	r4,sp,141
   437ec:	e1cf883a 	add	r7,fp,r7
   437f0:	00000106 	br	437f8 <___svfprintf_internal_r+0x20a8>
   437f4:	28800003 	ldbu	r2,0(r5)
   437f8:	20800005 	stb	r2,0(r4)
   437fc:	21000044 	addi	r4,r4,1
   43800:	29400044 	addi	r5,r5,1
   43804:	21fffb1e 	bne	r4,r7,437f4 <__alt_data_end+0xfffd17f4>
   43808:	d8802304 	addi	r2,sp,140
   4380c:	1505c83a 	sub	r2,r2,r20
   43810:	d8c02344 	addi	r3,sp,141
   43814:	1885883a 	add	r2,r3,r2
   43818:	003f7006 	br	435dc <__alt_data_end+0xfffd15dc>
   4381c:	0005883a 	mov	r2,zero
   43820:	003f0b06 	br	43450 <__alt_data_end+0xfffd1450>
   43824:	d9002a17 	ldw	r4,168(sp)
   43828:	d8c03217 	ldw	r3,200(sp)
   4382c:	20800044 	addi	r2,r4,1
   43830:	1885883a 	add	r2,r3,r2
   43834:	d8802b15 	stw	r2,172(sp)
   43838:	103e870e 	bge	r2,zero,43258 <__alt_data_end+0xfffd1258>
   4383c:	0005883a 	mov	r2,zero
   43840:	003e8506 	br	43258 <__alt_data_end+0xfffd1258>
   43844:	01000174 	movhi	r4,5
   43848:	211a2f84 	addi	r4,r4,26814
   4384c:	d9002c15 	stw	r4,176(sp)
   43850:	003cc506 	br	42b68 <__alt_data_end+0xfffd0b68>
   43854:	d8c03217 	ldw	r3,200(sp)
   43858:	18c00044 	addi	r3,r3,1
   4385c:	d8c02b15 	stw	r3,172(sp)
   43860:	1805883a 	mov	r2,r3
   43864:	183fa10e 	bge	r3,zero,436ec <__alt_data_end+0xfffd16ec>
   43868:	0005883a 	mov	r2,zero
   4386c:	003f9f06 	br	436ec <__alt_data_end+0xfffd16ec>
   43870:	d9003617 	ldw	r4,216(sp)
   43874:	000d883a 	mov	r6,zero
   43878:	000f883a 	mov	r7,zero
   4387c:	a00b883a 	mov	r5,r20
   43880:	d8c03d15 	stw	r3,244(sp)
   43884:	da003e15 	stw	r8,248(sp)
   43888:	00506480 	call	50648 <__eqdf2>
   4388c:	d8c03d17 	ldw	r3,244(sp)
   43890:	da003e17 	ldw	r8,248(sp)
   43894:	103f8726 	beq	r2,zero,436b4 <__alt_data_end+0xfffd16b4>
   43898:	00800044 	movi	r2,1
   4389c:	10c7c83a 	sub	r3,r2,r3
   438a0:	d8c02615 	stw	r3,152(sp)
   438a4:	003f8406 	br	436b8 <__alt_data_end+0xfffd16b8>
   438a8:	20000e1e 	bne	r4,zero,438e4 <___svfprintf_internal_r+0x2194>
   438ac:	9480004c 	andi	r18,r18,1
   438b0:	90000c1e 	bne	r18,zero,438e4 <___svfprintf_internal_r+0x2194>
   438b4:	00800044 	movi	r2,1
   438b8:	d8802b15 	stw	r2,172(sp)
   438bc:	003e6606 	br	43258 <__alt_data_end+0xfffd1258>
   438c0:	00800b44 	movi	r2,45
   438c4:	05adc83a 	sub	r22,zero,r22
   438c8:	d8802305 	stb	r2,140(sp)
   438cc:	003f3b06 	br	435bc <__alt_data_end+0xfffd15bc>
   438d0:	0005883a 	mov	r2,zero
   438d4:	003f4e06 	br	43610 <__alt_data_end+0xfffd1610>
   438d8:	90a4703a 	and	r18,r18,r2
   438dc:	903f4a26 	beq	r18,zero,43608 <__alt_data_end+0xfffd1608>
   438e0:	003f4606 	br	435fc <__alt_data_end+0xfffd15fc>
   438e4:	d8c02a17 	ldw	r3,168(sp)
   438e8:	18c00084 	addi	r3,r3,2
   438ec:	d8c02b15 	stw	r3,172(sp)
   438f0:	1805883a 	mov	r2,r3
   438f4:	183e580e 	bge	r3,zero,43258 <__alt_data_end+0xfffd1258>
   438f8:	003fd006 	br	4383c <__alt_data_end+0xfffd183c>
   438fc:	00800084 	movi	r2,2
   43900:	10c5c83a 	sub	r2,r2,r3
   43904:	003f7506 	br	436dc <__alt_data_end+0xfffd16dc>
   43908:	d9402e17 	ldw	r5,184(sp)
   4390c:	d9002e17 	ldw	r4,184(sp)
   43910:	bc400043 	ldbu	r17,1(r23)
   43914:	29400017 	ldw	r5,0(r5)
   43918:	20800104 	addi	r2,r4,4
   4391c:	d8802e15 	stw	r2,184(sp)
   43920:	d9402a15 	stw	r5,168(sp)
   43924:	182f883a 	mov	r23,r3
   43928:	283df10e 	bge	r5,zero,430f0 <__alt_data_end+0xfffd10f0>
   4392c:	8c403fcc 	andi	r17,r17,255
   43930:	017fffc4 	movi	r5,-1
   43934:	8c40201c 	xori	r17,r17,128
   43938:	d9402a15 	stw	r5,168(sp)
   4393c:	8c7fe004 	addi	r17,r17,-128
   43940:	0037d806 	br	418a4 <__alt_data_end+0xfffcf8a4>
   43944:	9080004c 	andi	r2,r18,1
   43948:	0039883a 	mov	fp,zero
   4394c:	10000726 	beq	r2,zero,4396c <___svfprintf_internal_r+0x221c>
   43950:	d8c02817 	ldw	r3,160(sp)
   43954:	dc001dc4 	addi	r16,sp,119
   43958:	00800c04 	movi	r2,48
   4395c:	1c07c83a 	sub	r3,r3,r16
   43960:	d8801dc5 	stb	r2,119(sp)
   43964:	d8c02b15 	stw	r3,172(sp)
   43968:	00393106 	br	41e30 <__alt_data_end+0xfffcfe30>
   4396c:	d8002b15 	stw	zero,172(sp)
   43970:	dc001e04 	addi	r16,sp,120
   43974:	00392e06 	br	41e30 <__alt_data_end+0xfffcfe30>
   43978:	0005883a 	mov	r2,zero
   4397c:	003e3306 	br	4324c <__alt_data_end+0xfffd124c>
   43980:	dd802617 	ldw	r22,152(sp)
   43984:	003f0706 	br	435a4 <__alt_data_end+0xfffd15a4>
   43988:	d8c02b03 	ldbu	r3,172(sp)
   4398c:	d8c02785 	stb	r3,158(sp)
   43990:	003a3506 	br	42268 <__alt_data_end+0xfffd0268>
   43994:	d8c02b03 	ldbu	r3,172(sp)
   43998:	d8c02785 	stb	r3,158(sp)
   4399c:	003a1706 	br	421fc <__alt_data_end+0xfffd01fc>
   439a0:	0005883a 	mov	r2,zero
   439a4:	003f5d06 	br	4371c <__alt_data_end+0xfffd171c>
   439a8:	d8c02b03 	ldbu	r3,172(sp)
   439ac:	d8c02785 	stb	r3,158(sp)
   439b0:	0038f306 	br	41d80 <__alt_data_end+0xfffcfd80>
   439b4:	d8c02b03 	ldbu	r3,172(sp)
   439b8:	d8c02785 	stb	r3,158(sp)
   439bc:	0038be06 	br	41cb8 <__alt_data_end+0xfffcfcb8>
   439c0:	d8802344 	addi	r2,sp,141
   439c4:	003f0506 	br	435dc <__alt_data_end+0xfffd15dc>
   439c8:	d8c02b03 	ldbu	r3,172(sp)
   439cc:	d8c02785 	stb	r3,158(sp)
   439d0:	00388b06 	br	41c00 <__alt_data_end+0xfffcfc00>
   439d4:	d8c02b03 	ldbu	r3,172(sp)
   439d8:	d8c02785 	stb	r3,158(sp)
   439dc:	003ad706 	br	4253c <__alt_data_end+0xfffd053c>
   439e0:	d9403917 	ldw	r5,228(sp)
   439e4:	00800304 	movi	r2,12
   439e8:	28800015 	stw	r2,0(r5)
   439ec:	00bfffc4 	movi	r2,-1
   439f0:	00384306 	br	41b00 <__alt_data_end+0xfffcfb00>
   439f4:	d8c02b03 	ldbu	r3,172(sp)
   439f8:	d8c02785 	stb	r3,158(sp)
   439fc:	003ab606 	br	424d8 <__alt_data_end+0xfffd04d8>
   43a00:	d8c02b03 	ldbu	r3,172(sp)
   43a04:	d8c02785 	stb	r3,158(sp)
   43a08:	003a8906 	br	42430 <__alt_data_end+0xfffd0430>

00043a0c <___vfprintf_internal_r>:
   43a0c:	deffb804 	addi	sp,sp,-288
   43a10:	dfc04715 	stw	ra,284(sp)
   43a14:	ddc04515 	stw	r23,276(sp)
   43a18:	dd404315 	stw	r21,268(sp)
   43a1c:	d9002d15 	stw	r4,180(sp)
   43a20:	282f883a 	mov	r23,r5
   43a24:	302b883a 	mov	r21,r6
   43a28:	d9c02e15 	stw	r7,184(sp)
   43a2c:	df004615 	stw	fp,280(sp)
   43a30:	dd804415 	stw	r22,272(sp)
   43a34:	dd004215 	stw	r20,264(sp)
   43a38:	dcc04115 	stw	r19,260(sp)
   43a3c:	dc804015 	stw	r18,256(sp)
   43a40:	dc403f15 	stw	r17,252(sp)
   43a44:	dc003e15 	stw	r16,248(sp)
   43a48:	004894c0 	call	4894c <_localeconv_r>
   43a4c:	10800017 	ldw	r2,0(r2)
   43a50:	1009883a 	mov	r4,r2
   43a54:	d8803415 	stw	r2,208(sp)
   43a58:	00416b80 	call	416b8 <strlen>
   43a5c:	d8803715 	stw	r2,220(sp)
   43a60:	d8802d17 	ldw	r2,180(sp)
   43a64:	10000226 	beq	r2,zero,43a70 <___vfprintf_internal_r+0x64>
   43a68:	10800e17 	ldw	r2,56(r2)
   43a6c:	1000fb26 	beq	r2,zero,43e5c <___vfprintf_internal_r+0x450>
   43a70:	b880030b 	ldhu	r2,12(r23)
   43a74:	10c8000c 	andi	r3,r2,8192
   43a78:	1800061e 	bne	r3,zero,43a94 <___vfprintf_internal_r+0x88>
   43a7c:	b9001917 	ldw	r4,100(r23)
   43a80:	00f7ffc4 	movi	r3,-8193
   43a84:	10880014 	ori	r2,r2,8192
   43a88:	20c6703a 	and	r3,r4,r3
   43a8c:	b880030d 	sth	r2,12(r23)
   43a90:	b8c01915 	stw	r3,100(r23)
   43a94:	10c0020c 	andi	r3,r2,8
   43a98:	1800c326 	beq	r3,zero,43da8 <___vfprintf_internal_r+0x39c>
   43a9c:	b8c00417 	ldw	r3,16(r23)
   43aa0:	1800c126 	beq	r3,zero,43da8 <___vfprintf_internal_r+0x39c>
   43aa4:	1080068c 	andi	r2,r2,26
   43aa8:	00c00284 	movi	r3,10
   43aac:	10c0c626 	beq	r2,r3,43dc8 <___vfprintf_internal_r+0x3bc>
   43ab0:	d8c00404 	addi	r3,sp,16
   43ab4:	05000174 	movhi	r20,5
   43ab8:	d9001e04 	addi	r4,sp,120
   43abc:	a51a3784 	addi	r20,r20,26846
   43ac0:	d8c01e15 	stw	r3,120(sp)
   43ac4:	d8002015 	stw	zero,128(sp)
   43ac8:	d8001f15 	stw	zero,124(sp)
   43acc:	d8003315 	stw	zero,204(sp)
   43ad0:	d8003615 	stw	zero,216(sp)
   43ad4:	d8003815 	stw	zero,224(sp)
   43ad8:	1811883a 	mov	r8,r3
   43adc:	d8003915 	stw	zero,228(sp)
   43ae0:	d8003a15 	stw	zero,232(sp)
   43ae4:	d8002f15 	stw	zero,188(sp)
   43ae8:	d9002815 	stw	r4,160(sp)
   43aec:	a8800007 	ldb	r2,0(r21)
   43af0:	10028b26 	beq	r2,zero,44520 <___vfprintf_internal_r+0xb14>
   43af4:	00c00944 	movi	r3,37
   43af8:	a823883a 	mov	r17,r21
   43afc:	10c0021e 	bne	r2,r3,43b08 <___vfprintf_internal_r+0xfc>
   43b00:	00001406 	br	43b54 <___vfprintf_internal_r+0x148>
   43b04:	10c00326 	beq	r2,r3,43b14 <___vfprintf_internal_r+0x108>
   43b08:	8c400044 	addi	r17,r17,1
   43b0c:	88800007 	ldb	r2,0(r17)
   43b10:	103ffc1e 	bne	r2,zero,43b04 <__alt_data_end+0xfffd1b04>
   43b14:	8d61c83a 	sub	r16,r17,r21
   43b18:	80000e26 	beq	r16,zero,43b54 <___vfprintf_internal_r+0x148>
   43b1c:	d8c02017 	ldw	r3,128(sp)
   43b20:	d8801f17 	ldw	r2,124(sp)
   43b24:	45400015 	stw	r21,0(r8)
   43b28:	1c07883a 	add	r3,r3,r16
   43b2c:	10800044 	addi	r2,r2,1
   43b30:	d8c02015 	stw	r3,128(sp)
   43b34:	44000115 	stw	r16,4(r8)
   43b38:	d8801f15 	stw	r2,124(sp)
   43b3c:	00c001c4 	movi	r3,7
   43b40:	1880a916 	blt	r3,r2,43de8 <___vfprintf_internal_r+0x3dc>
   43b44:	42000204 	addi	r8,r8,8
   43b48:	d9402f17 	ldw	r5,188(sp)
   43b4c:	2c0b883a 	add	r5,r5,r16
   43b50:	d9402f15 	stw	r5,188(sp)
   43b54:	88800007 	ldb	r2,0(r17)
   43b58:	1000aa26 	beq	r2,zero,43e04 <___vfprintf_internal_r+0x3f8>
   43b5c:	8d400044 	addi	r21,r17,1
   43b60:	8c400047 	ldb	r17,1(r17)
   43b64:	0021883a 	mov	r16,zero
   43b68:	00bfffc4 	movi	r2,-1
   43b6c:	0025883a 	mov	r18,zero
   43b70:	dc002905 	stb	r16,164(sp)
   43b74:	d8002785 	stb	zero,158(sp)
   43b78:	d8002b05 	stb	zero,172(sp)
   43b7c:	d8802a15 	stw	r2,168(sp)
   43b80:	d8003115 	stw	zero,196(sp)
   43b84:	04c01604 	movi	r19,88
   43b88:	05800244 	movi	r22,9
   43b8c:	9021883a 	mov	r16,r18
   43b90:	4039883a 	mov	fp,r8
   43b94:	ad400044 	addi	r21,r21,1
   43b98:	88bff804 	addi	r2,r17,-32
   43b9c:	98833236 	bltu	r19,r2,44868 <___vfprintf_internal_r+0xe5c>
   43ba0:	100490ba 	slli	r2,r2,2
   43ba4:	00c00134 	movhi	r3,4
   43ba8:	18ceee04 	addi	r3,r3,15288
   43bac:	10c5883a 	add	r2,r2,r3
   43bb0:	10800017 	ldw	r2,0(r2)
   43bb4:	1000683a 	jmp	r2
   43bb8:	00044760 	cmpeqi	zero,zero,4381
   43bbc:	00044868 	cmpgeui	zero,zero,4385
   43bc0:	00044868 	cmpgeui	zero,zero,4385
   43bc4:	00044780 	call	4478 <__alt_mem_RAM-0x3bb88>
   43bc8:	00044868 	cmpgeui	zero,zero,4385
   43bcc:	00044868 	cmpgeui	zero,zero,4385
   43bd0:	00044868 	cmpgeui	zero,zero,4385
   43bd4:	00044868 	cmpgeui	zero,zero,4385
   43bd8:	00044868 	cmpgeui	zero,zero,4385
   43bdc:	00044868 	cmpgeui	zero,zero,4385
   43be0:	00043e68 	cmpgeui	zero,zero,4345
   43be4:	00044670 	cmpltui	zero,zero,4377
   43be8:	00044868 	cmpgeui	zero,zero,4385
   43bec:	00043d2c 	andhi	zero,zero,4340
   43bf0:	00043e8c 	andi	zero,zero,4346
   43bf4:	00044868 	cmpgeui	zero,zero,4385
   43bf8:	00043edc 	xori	zero,zero,4347
   43bfc:	00043ee8 	cmpgeui	zero,zero,4347
   43c00:	00043ee8 	cmpgeui	zero,zero,4347
   43c04:	00043ee8 	cmpgeui	zero,zero,4347
   43c08:	00043ee8 	cmpgeui	zero,zero,4347
   43c0c:	00043ee8 	cmpgeui	zero,zero,4347
   43c10:	00043ee8 	cmpgeui	zero,zero,4347
   43c14:	00043ee8 	cmpgeui	zero,zero,4347
   43c18:	00043ee8 	cmpgeui	zero,zero,4347
   43c1c:	00043ee8 	cmpgeui	zero,zero,4347
   43c20:	00044868 	cmpgeui	zero,zero,4385
   43c24:	00044868 	cmpgeui	zero,zero,4385
   43c28:	00044868 	cmpgeui	zero,zero,4385
   43c2c:	00044868 	cmpgeui	zero,zero,4385
   43c30:	00044868 	cmpgeui	zero,zero,4385
   43c34:	00044868 	cmpgeui	zero,zero,4385
   43c38:	00044868 	cmpgeui	zero,zero,4385
   43c3c:	00044868 	cmpgeui	zero,zero,4385
   43c40:	00044868 	cmpgeui	zero,zero,4385
   43c44:	00044868 	cmpgeui	zero,zero,4385
   43c48:	00043f24 	muli	zero,zero,4348
   43c4c:	00043fec 	andhi	zero,zero,4351
   43c50:	00044868 	cmpgeui	zero,zero,4385
   43c54:	00043fec 	andhi	zero,zero,4351
   43c58:	00044868 	cmpgeui	zero,zero,4385
   43c5c:	00044868 	cmpgeui	zero,zero,4385
   43c60:	00044868 	cmpgeui	zero,zero,4385
   43c64:	00044868 	cmpgeui	zero,zero,4385
   43c68:	00044098 	cmpnei	zero,zero,4354
   43c6c:	00044868 	cmpgeui	zero,zero,4385
   43c70:	00044868 	cmpgeui	zero,zero,4385
   43c74:	000440a4 	muli	zero,zero,4354
   43c78:	00044868 	cmpgeui	zero,zero,4385
   43c7c:	00044868 	cmpgeui	zero,zero,4385
   43c80:	00044868 	cmpgeui	zero,zero,4385
   43c84:	00044868 	cmpgeui	zero,zero,4385
   43c88:	00044868 	cmpgeui	zero,zero,4385
   43c8c:	00044528 	cmpgeui	zero,zero,4372
   43c90:	00044868 	cmpgeui	zero,zero,4385
   43c94:	00044868 	cmpgeui	zero,zero,4385
   43c98:	00044594 	movui	zero,4374
   43c9c:	00044868 	cmpgeui	zero,zero,4385
   43ca0:	00044868 	cmpgeui	zero,zero,4385
   43ca4:	00044868 	cmpgeui	zero,zero,4385
   43ca8:	00044868 	cmpgeui	zero,zero,4385
   43cac:	00044868 	cmpgeui	zero,zero,4385
   43cb0:	00044868 	cmpgeui	zero,zero,4385
   43cb4:	00044868 	cmpgeui	zero,zero,4385
   43cb8:	00044868 	cmpgeui	zero,zero,4385
   43cbc:	00044868 	cmpgeui	zero,zero,4385
   43cc0:	00044868 	cmpgeui	zero,zero,4385
   43cc4:	0004480c 	andi	zero,zero,4384
   43cc8:	0004478c 	andi	zero,zero,4382
   43ccc:	00043fec 	andhi	zero,zero,4351
   43cd0:	00043fec 	andhi	zero,zero,4351
   43cd4:	00043fec 	andhi	zero,zero,4351
   43cd8:	000447ac 	andhi	zero,zero,4382
   43cdc:	0004478c 	andi	zero,zero,4382
   43ce0:	00044868 	cmpgeui	zero,zero,4385
   43ce4:	00044868 	cmpgeui	zero,zero,4385
   43ce8:	000447b8 	rdprs	zero,zero,4382
   43cec:	00044868 	cmpgeui	zero,zero,4385
   43cf0:	000447cc 	andi	zero,zero,4383
   43cf4:	00044650 	cmplti	zero,zero,4377
   43cf8:	00043d38 	rdprs	zero,zero,4340
   43cfc:	00044688 	cmpgei	zero,zero,4378
   43d00:	00044868 	cmpgeui	zero,zero,4385
   43d04:	00044694 	movui	zero,4378
   43d08:	00044868 	cmpgeui	zero,zero,4385
   43d0c:	000446f8 	rdprs	zero,zero,4379
   43d10:	00044868 	cmpgeui	zero,zero,4385
   43d14:	00044868 	cmpgeui	zero,zero,4385
   43d18:	00044718 	cmpnei	zero,zero,4380
   43d1c:	d8c03117 	ldw	r3,196(sp)
   43d20:	d8802e15 	stw	r2,184(sp)
   43d24:	00c7c83a 	sub	r3,zero,r3
   43d28:	d8c03115 	stw	r3,196(sp)
   43d2c:	84000114 	ori	r16,r16,4
   43d30:	ac400007 	ldb	r17,0(r21)
   43d34:	003f9706 	br	43b94 <__alt_data_end+0xfffd1b94>
   43d38:	00800c04 	movi	r2,48
   43d3c:	d8802705 	stb	r2,156(sp)
   43d40:	00801e04 	movi	r2,120
   43d44:	d8802745 	stb	r2,157(sp)
   43d48:	d9002a17 	ldw	r4,168(sp)
   43d4c:	d8802e17 	ldw	r2,184(sp)
   43d50:	d8002785 	stb	zero,158(sp)
   43d54:	e011883a 	mov	r8,fp
   43d58:	10c00104 	addi	r3,r2,4
   43d5c:	14c00017 	ldw	r19,0(r2)
   43d60:	002d883a 	mov	r22,zero
   43d64:	80800094 	ori	r2,r16,2
   43d68:	2002ca16 	blt	r4,zero,44894 <___vfprintf_internal_r+0xe88>
   43d6c:	00bfdfc4 	movi	r2,-129
   43d70:	80a4703a 	and	r18,r16,r2
   43d74:	d8c02e15 	stw	r3,184(sp)
   43d78:	94800094 	ori	r18,r18,2
   43d7c:	9802b41e 	bne	r19,zero,44850 <___vfprintf_internal_r+0xe44>
   43d80:	01400174 	movhi	r5,5
   43d84:	295a2804 	addi	r5,r5,26784
   43d88:	d9403915 	stw	r5,228(sp)
   43d8c:	04401e04 	movi	r17,120
   43d90:	d8802a17 	ldw	r2,168(sp)
   43d94:	0039883a 	mov	fp,zero
   43d98:	1001fa26 	beq	r2,zero,44584 <___vfprintf_internal_r+0xb78>
   43d9c:	0027883a 	mov	r19,zero
   43da0:	002d883a 	mov	r22,zero
   43da4:	00021906 	br	4460c <___vfprintf_internal_r+0xc00>
   43da8:	d9002d17 	ldw	r4,180(sp)
   43dac:	b80b883a 	mov	r5,r23
   43db0:	0045dc00 	call	45dc0 <__swsetup_r>
   43db4:	1005dc1e 	bne	r2,zero,45528 <___vfprintf_internal_r+0x1b1c>
   43db8:	b880030b 	ldhu	r2,12(r23)
   43dbc:	00c00284 	movi	r3,10
   43dc0:	1080068c 	andi	r2,r2,26
   43dc4:	10ff3a1e 	bne	r2,r3,43ab0 <__alt_data_end+0xfffd1ab0>
   43dc8:	b880038f 	ldh	r2,14(r23)
   43dcc:	103f3816 	blt	r2,zero,43ab0 <__alt_data_end+0xfffd1ab0>
   43dd0:	d9c02e17 	ldw	r7,184(sp)
   43dd4:	d9002d17 	ldw	r4,180(sp)
   43dd8:	a80d883a 	mov	r6,r21
   43ddc:	b80b883a 	mov	r5,r23
   43de0:	0045d040 	call	45d04 <__sbprintf>
   43de4:	00001106 	br	43e2c <___vfprintf_internal_r+0x420>
   43de8:	d9002d17 	ldw	r4,180(sp)
   43dec:	d9801e04 	addi	r6,sp,120
   43df0:	b80b883a 	mov	r5,r23
   43df4:	004c8c40 	call	4c8c4 <__sprint_r>
   43df8:	1000081e 	bne	r2,zero,43e1c <___vfprintf_internal_r+0x410>
   43dfc:	da000404 	addi	r8,sp,16
   43e00:	003f5106 	br	43b48 <__alt_data_end+0xfffd1b48>
   43e04:	d8802017 	ldw	r2,128(sp)
   43e08:	10000426 	beq	r2,zero,43e1c <___vfprintf_internal_r+0x410>
   43e0c:	d9002d17 	ldw	r4,180(sp)
   43e10:	d9801e04 	addi	r6,sp,120
   43e14:	b80b883a 	mov	r5,r23
   43e18:	004c8c40 	call	4c8c4 <__sprint_r>
   43e1c:	b880030b 	ldhu	r2,12(r23)
   43e20:	1080100c 	andi	r2,r2,64
   43e24:	1005c01e 	bne	r2,zero,45528 <___vfprintf_internal_r+0x1b1c>
   43e28:	d8802f17 	ldw	r2,188(sp)
   43e2c:	dfc04717 	ldw	ra,284(sp)
   43e30:	df004617 	ldw	fp,280(sp)
   43e34:	ddc04517 	ldw	r23,276(sp)
   43e38:	dd804417 	ldw	r22,272(sp)
   43e3c:	dd404317 	ldw	r21,268(sp)
   43e40:	dd004217 	ldw	r20,264(sp)
   43e44:	dcc04117 	ldw	r19,260(sp)
   43e48:	dc804017 	ldw	r18,256(sp)
   43e4c:	dc403f17 	ldw	r17,252(sp)
   43e50:	dc003e17 	ldw	r16,248(sp)
   43e54:	dec04804 	addi	sp,sp,288
   43e58:	f800283a 	ret
   43e5c:	d9002d17 	ldw	r4,180(sp)
   43e60:	0047dcc0 	call	47dcc <__sinit>
   43e64:	003f0206 	br	43a70 <__alt_data_end+0xfffd1a70>
   43e68:	d9002e17 	ldw	r4,184(sp)
   43e6c:	d9402e17 	ldw	r5,184(sp)
   43e70:	21000017 	ldw	r4,0(r4)
   43e74:	28800104 	addi	r2,r5,4
   43e78:	d9003115 	stw	r4,196(sp)
   43e7c:	203fa716 	blt	r4,zero,43d1c <__alt_data_end+0xfffd1d1c>
   43e80:	d8802e15 	stw	r2,184(sp)
   43e84:	ac400007 	ldb	r17,0(r21)
   43e88:	003f4206 	br	43b94 <__alt_data_end+0xfffd1b94>
   43e8c:	ac400007 	ldb	r17,0(r21)
   43e90:	01000a84 	movi	r4,42
   43e94:	a8c00044 	addi	r3,r21,1
   43e98:	89075826 	beq	r17,r4,45bfc <___vfprintf_internal_r+0x21f0>
   43e9c:	8cbff404 	addi	r18,r17,-48
   43ea0:	b486ae36 	bltu	r22,r18,4595c <___vfprintf_internal_r+0x1f50>
   43ea4:	0009883a 	mov	r4,zero
   43ea8:	1823883a 	mov	r17,r3
   43eac:	01400284 	movi	r5,10
   43eb0:	004146c0 	call	4146c <__mulsi3>
   43eb4:	88c00007 	ldb	r3,0(r17)
   43eb8:	1489883a 	add	r4,r2,r18
   43ebc:	8d400044 	addi	r21,r17,1
   43ec0:	1cbff404 	addi	r18,r3,-48
   43ec4:	a823883a 	mov	r17,r21
   43ec8:	b4bff82e 	bgeu	r22,r18,43eac <__alt_data_end+0xfffd1eac>
   43ecc:	1823883a 	mov	r17,r3
   43ed0:	2005f616 	blt	r4,zero,456ac <___vfprintf_internal_r+0x1ca0>
   43ed4:	d9002a15 	stw	r4,168(sp)
   43ed8:	003f2f06 	br	43b98 <__alt_data_end+0xfffd1b98>
   43edc:	84002014 	ori	r16,r16,128
   43ee0:	ac400007 	ldb	r17,0(r21)
   43ee4:	003f2b06 	br	43b94 <__alt_data_end+0xfffd1b94>
   43ee8:	8cbff404 	addi	r18,r17,-48
   43eec:	d8003115 	stw	zero,196(sp)
   43ef0:	0009883a 	mov	r4,zero
   43ef4:	a823883a 	mov	r17,r21
   43ef8:	01400284 	movi	r5,10
   43efc:	004146c0 	call	4146c <__mulsi3>
   43f00:	88c00007 	ldb	r3,0(r17)
   43f04:	9089883a 	add	r4,r18,r2
   43f08:	ad400044 	addi	r21,r21,1
   43f0c:	1cbff404 	addi	r18,r3,-48
   43f10:	a823883a 	mov	r17,r21
   43f14:	b4bff82e 	bgeu	r22,r18,43ef8 <__alt_data_end+0xfffd1ef8>
   43f18:	1823883a 	mov	r17,r3
   43f1c:	d9003115 	stw	r4,196(sp)
   43f20:	003f1d06 	br	43b98 <__alt_data_end+0xfffd1b98>
   43f24:	8025883a 	mov	r18,r16
   43f28:	dc002903 	ldbu	r16,164(sp)
   43f2c:	e011883a 	mov	r8,fp
   43f30:	84003fcc 	andi	r16,r16,255
   43f34:	8007531e 	bne	r16,zero,45c84 <___vfprintf_internal_r+0x2278>
   43f38:	94800414 	ori	r18,r18,16
   43f3c:	9080080c 	andi	r2,r18,32
   43f40:	1003a326 	beq	r2,zero,44dd0 <___vfprintf_internal_r+0x13c4>
   43f44:	d9002e17 	ldw	r4,184(sp)
   43f48:	20800117 	ldw	r2,4(r4)
   43f4c:	24c00017 	ldw	r19,0(r4)
   43f50:	21000204 	addi	r4,r4,8
   43f54:	d9002e15 	stw	r4,184(sp)
   43f58:	102d883a 	mov	r22,r2
   43f5c:	10047316 	blt	r2,zero,4512c <___vfprintf_internal_r+0x1720>
   43f60:	d9002a17 	ldw	r4,168(sp)
   43f64:	df002783 	ldbu	fp,158(sp)
   43f68:	2003e416 	blt	r4,zero,44efc <___vfprintf_internal_r+0x14f0>
   43f6c:	00ffdfc4 	movi	r3,-129
   43f70:	9d84b03a 	or	r2,r19,r22
   43f74:	90e4703a 	and	r18,r18,r3
   43f78:	10018026 	beq	r2,zero,4457c <___vfprintf_internal_r+0xb70>
   43f7c:	b003ab26 	beq	r22,zero,44e2c <___vfprintf_internal_r+0x1420>
   43f80:	dc402915 	stw	r17,164(sp)
   43f84:	dc001e04 	addi	r16,sp,120
   43f88:	b023883a 	mov	r17,r22
   43f8c:	402d883a 	mov	r22,r8
   43f90:	9809883a 	mov	r4,r19
   43f94:	880b883a 	mov	r5,r17
   43f98:	01800284 	movi	r6,10
   43f9c:	000f883a 	mov	r7,zero
   43fa0:	004ee080 	call	4ee08 <__umoddi3>
   43fa4:	10800c04 	addi	r2,r2,48
   43fa8:	843fffc4 	addi	r16,r16,-1
   43fac:	9809883a 	mov	r4,r19
   43fb0:	880b883a 	mov	r5,r17
   43fb4:	80800005 	stb	r2,0(r16)
   43fb8:	01800284 	movi	r6,10
   43fbc:	000f883a 	mov	r7,zero
   43fc0:	004e80c0 	call	4e80c <__udivdi3>
   43fc4:	1027883a 	mov	r19,r2
   43fc8:	10c4b03a 	or	r2,r2,r3
   43fcc:	1823883a 	mov	r17,r3
   43fd0:	103fef1e 	bne	r2,zero,43f90 <__alt_data_end+0xfffd1f90>
   43fd4:	d8c02817 	ldw	r3,160(sp)
   43fd8:	dc402917 	ldw	r17,164(sp)
   43fdc:	b011883a 	mov	r8,r22
   43fe0:	1c07c83a 	sub	r3,r3,r16
   43fe4:	d8c02b15 	stw	r3,172(sp)
   43fe8:	00005f06 	br	44168 <___vfprintf_internal_r+0x75c>
   43fec:	8025883a 	mov	r18,r16
   43ff0:	dc002903 	ldbu	r16,164(sp)
   43ff4:	e011883a 	mov	r8,fp
   43ff8:	84003fcc 	andi	r16,r16,255
   43ffc:	80071e1e 	bne	r16,zero,45c78 <___vfprintf_internal_r+0x226c>
   44000:	9080020c 	andi	r2,r18,8
   44004:	1004af26 	beq	r2,zero,452c4 <___vfprintf_internal_r+0x18b8>
   44008:	d9002e17 	ldw	r4,184(sp)
   4400c:	d9402e17 	ldw	r5,184(sp)
   44010:	d8802e17 	ldw	r2,184(sp)
   44014:	21000017 	ldw	r4,0(r4)
   44018:	29400117 	ldw	r5,4(r5)
   4401c:	10800204 	addi	r2,r2,8
   44020:	d9003615 	stw	r4,216(sp)
   44024:	d9403815 	stw	r5,224(sp)
   44028:	d8802e15 	stw	r2,184(sp)
   4402c:	d9003617 	ldw	r4,216(sp)
   44030:	d9403817 	ldw	r5,224(sp)
   44034:	da003d15 	stw	r8,244(sp)
   44038:	04000044 	movi	r16,1
   4403c:	004af780 	call	4af78 <__fpclassifyd>
   44040:	da003d17 	ldw	r8,244(sp)
   44044:	1404441e 	bne	r2,r16,45158 <___vfprintf_internal_r+0x174c>
   44048:	d9003617 	ldw	r4,216(sp)
   4404c:	d9403817 	ldw	r5,224(sp)
   44050:	000d883a 	mov	r6,zero
   44054:	000f883a 	mov	r7,zero
   44058:	00507ac0 	call	507ac <__ledf2>
   4405c:	da003d17 	ldw	r8,244(sp)
   44060:	1005e316 	blt	r2,zero,457f0 <___vfprintf_internal_r+0x1de4>
   44064:	df002783 	ldbu	fp,158(sp)
   44068:	008011c4 	movi	r2,71
   4406c:	1445580e 	bge	r2,r17,455d0 <___vfprintf_internal_r+0x1bc4>
   44070:	04000174 	movhi	r16,5
   44074:	841a2004 	addi	r16,r16,26752
   44078:	00c000c4 	movi	r3,3
   4407c:	00bfdfc4 	movi	r2,-129
   44080:	d8c02915 	stw	r3,164(sp)
   44084:	90a4703a 	and	r18,r18,r2
   44088:	d8c02b15 	stw	r3,172(sp)
   4408c:	d8002a15 	stw	zero,168(sp)
   44090:	d8003215 	stw	zero,200(sp)
   44094:	00003a06 	br	44180 <___vfprintf_internal_r+0x774>
   44098:	84000214 	ori	r16,r16,8
   4409c:	ac400007 	ldb	r17,0(r21)
   440a0:	003ebc06 	br	43b94 <__alt_data_end+0xfffd1b94>
   440a4:	8025883a 	mov	r18,r16
   440a8:	dc002903 	ldbu	r16,164(sp)
   440ac:	e011883a 	mov	r8,fp
   440b0:	84003fcc 	andi	r16,r16,255
   440b4:	8007001e 	bne	r16,zero,45cb8 <___vfprintf_internal_r+0x22ac>
   440b8:	94800414 	ori	r18,r18,16
   440bc:	9080080c 	andi	r2,r18,32
   440c0:	1002fa26 	beq	r2,zero,44cac <___vfprintf_internal_r+0x12a0>
   440c4:	d9002e17 	ldw	r4,184(sp)
   440c8:	d9402a17 	ldw	r5,168(sp)
   440cc:	d8002785 	stb	zero,158(sp)
   440d0:	20800204 	addi	r2,r4,8
   440d4:	24c00017 	ldw	r19,0(r4)
   440d8:	25800117 	ldw	r22,4(r4)
   440dc:	2804b116 	blt	r5,zero,453a4 <___vfprintf_internal_r+0x1998>
   440e0:	013fdfc4 	movi	r4,-129
   440e4:	9d86b03a 	or	r3,r19,r22
   440e8:	d8802e15 	stw	r2,184(sp)
   440ec:	9124703a 	and	r18,r18,r4
   440f0:	1802fb1e 	bne	r3,zero,44ce0 <___vfprintf_internal_r+0x12d4>
   440f4:	d8c02a17 	ldw	r3,168(sp)
   440f8:	0039883a 	mov	fp,zero
   440fc:	1805e526 	beq	r3,zero,45894 <___vfprintf_internal_r+0x1e88>
   44100:	0027883a 	mov	r19,zero
   44104:	002d883a 	mov	r22,zero
   44108:	dc001e04 	addi	r16,sp,120
   4410c:	9806d0fa 	srli	r3,r19,3
   44110:	b008977a 	slli	r4,r22,29
   44114:	b02cd0fa 	srli	r22,r22,3
   44118:	9cc001cc 	andi	r19,r19,7
   4411c:	98800c04 	addi	r2,r19,48
   44120:	843fffc4 	addi	r16,r16,-1
   44124:	20e6b03a 	or	r19,r4,r3
   44128:	80800005 	stb	r2,0(r16)
   4412c:	9d86b03a 	or	r3,r19,r22
   44130:	183ff61e 	bne	r3,zero,4410c <__alt_data_end+0xfffd210c>
   44134:	90c0004c 	andi	r3,r18,1
   44138:	18014126 	beq	r3,zero,44640 <___vfprintf_internal_r+0xc34>
   4413c:	10803fcc 	andi	r2,r2,255
   44140:	1080201c 	xori	r2,r2,128
   44144:	10bfe004 	addi	r2,r2,-128
   44148:	00c00c04 	movi	r3,48
   4414c:	10c13c26 	beq	r2,r3,44640 <___vfprintf_internal_r+0xc34>
   44150:	80ffffc5 	stb	r3,-1(r16)
   44154:	d8c02817 	ldw	r3,160(sp)
   44158:	80bfffc4 	addi	r2,r16,-1
   4415c:	1021883a 	mov	r16,r2
   44160:	1887c83a 	sub	r3,r3,r2
   44164:	d8c02b15 	stw	r3,172(sp)
   44168:	d8802b17 	ldw	r2,172(sp)
   4416c:	d9002a17 	ldw	r4,168(sp)
   44170:	1100010e 	bge	r2,r4,44178 <___vfprintf_internal_r+0x76c>
   44174:	2005883a 	mov	r2,r4
   44178:	d8802915 	stw	r2,164(sp)
   4417c:	d8003215 	stw	zero,200(sp)
   44180:	e7003fcc 	andi	fp,fp,255
   44184:	e700201c 	xori	fp,fp,128
   44188:	e73fe004 	addi	fp,fp,-128
   4418c:	e0000326 	beq	fp,zero,4419c <___vfprintf_internal_r+0x790>
   44190:	d8c02917 	ldw	r3,164(sp)
   44194:	18c00044 	addi	r3,r3,1
   44198:	d8c02915 	stw	r3,164(sp)
   4419c:	90c0008c 	andi	r3,r18,2
   441a0:	d8c02c15 	stw	r3,176(sp)
   441a4:	18000326 	beq	r3,zero,441b4 <___vfprintf_internal_r+0x7a8>
   441a8:	d8c02917 	ldw	r3,164(sp)
   441ac:	18c00084 	addi	r3,r3,2
   441b0:	d8c02915 	stw	r3,164(sp)
   441b4:	90c0210c 	andi	r3,r18,132
   441b8:	d8c03015 	stw	r3,192(sp)
   441bc:	1801c51e 	bne	r3,zero,448d4 <___vfprintf_internal_r+0xec8>
   441c0:	d9003117 	ldw	r4,196(sp)
   441c4:	d8c02917 	ldw	r3,164(sp)
   441c8:	20e7c83a 	sub	r19,r4,r3
   441cc:	04c1c10e 	bge	zero,r19,448d4 <___vfprintf_internal_r+0xec8>
   441d0:	02400404 	movi	r9,16
   441d4:	d8c02017 	ldw	r3,128(sp)
   441d8:	d8801f17 	ldw	r2,124(sp)
   441dc:	4cc52f0e 	bge	r9,r19,4569c <___vfprintf_internal_r+0x1c90>
   441e0:	01400174 	movhi	r5,5
   441e4:	295a3b84 	addi	r5,r5,26862
   441e8:	dc403b15 	stw	r17,236(sp)
   441ec:	d9403515 	stw	r5,212(sp)
   441f0:	9823883a 	mov	r17,r19
   441f4:	482d883a 	mov	r22,r9
   441f8:	9027883a 	mov	r19,r18
   441fc:	070001c4 	movi	fp,7
   44200:	8025883a 	mov	r18,r16
   44204:	dc002d17 	ldw	r16,180(sp)
   44208:	00000306 	br	44218 <___vfprintf_internal_r+0x80c>
   4420c:	8c7ffc04 	addi	r17,r17,-16
   44210:	42000204 	addi	r8,r8,8
   44214:	b440130e 	bge	r22,r17,44264 <___vfprintf_internal_r+0x858>
   44218:	01000174 	movhi	r4,5
   4421c:	18c00404 	addi	r3,r3,16
   44220:	10800044 	addi	r2,r2,1
   44224:	211a3b84 	addi	r4,r4,26862
   44228:	41000015 	stw	r4,0(r8)
   4422c:	45800115 	stw	r22,4(r8)
   44230:	d8c02015 	stw	r3,128(sp)
   44234:	d8801f15 	stw	r2,124(sp)
   44238:	e0bff40e 	bge	fp,r2,4420c <__alt_data_end+0xfffd220c>
   4423c:	d9801e04 	addi	r6,sp,120
   44240:	b80b883a 	mov	r5,r23
   44244:	8009883a 	mov	r4,r16
   44248:	004c8c40 	call	4c8c4 <__sprint_r>
   4424c:	103ef31e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44250:	8c7ffc04 	addi	r17,r17,-16
   44254:	d8c02017 	ldw	r3,128(sp)
   44258:	d8801f17 	ldw	r2,124(sp)
   4425c:	da000404 	addi	r8,sp,16
   44260:	b47fed16 	blt	r22,r17,44218 <__alt_data_end+0xfffd2218>
   44264:	9021883a 	mov	r16,r18
   44268:	9825883a 	mov	r18,r19
   4426c:	8827883a 	mov	r19,r17
   44270:	dc403b17 	ldw	r17,236(sp)
   44274:	d9403517 	ldw	r5,212(sp)
   44278:	98c7883a 	add	r3,r19,r3
   4427c:	10800044 	addi	r2,r2,1
   44280:	41400015 	stw	r5,0(r8)
   44284:	44c00115 	stw	r19,4(r8)
   44288:	d8c02015 	stw	r3,128(sp)
   4428c:	d8801f15 	stw	r2,124(sp)
   44290:	010001c4 	movi	r4,7
   44294:	2082c516 	blt	r4,r2,44dac <___vfprintf_internal_r+0x13a0>
   44298:	df002787 	ldb	fp,158(sp)
   4429c:	42000204 	addi	r8,r8,8
   442a0:	e0000c26 	beq	fp,zero,442d4 <___vfprintf_internal_r+0x8c8>
   442a4:	d8801f17 	ldw	r2,124(sp)
   442a8:	d9002784 	addi	r4,sp,158
   442ac:	18c00044 	addi	r3,r3,1
   442b0:	10800044 	addi	r2,r2,1
   442b4:	41000015 	stw	r4,0(r8)
   442b8:	01000044 	movi	r4,1
   442bc:	41000115 	stw	r4,4(r8)
   442c0:	d8c02015 	stw	r3,128(sp)
   442c4:	d8801f15 	stw	r2,124(sp)
   442c8:	010001c4 	movi	r4,7
   442cc:	20825e16 	blt	r4,r2,44c48 <___vfprintf_internal_r+0x123c>
   442d0:	42000204 	addi	r8,r8,8
   442d4:	d8802c17 	ldw	r2,176(sp)
   442d8:	10000c26 	beq	r2,zero,4430c <___vfprintf_internal_r+0x900>
   442dc:	d8801f17 	ldw	r2,124(sp)
   442e0:	d9002704 	addi	r4,sp,156
   442e4:	18c00084 	addi	r3,r3,2
   442e8:	10800044 	addi	r2,r2,1
   442ec:	41000015 	stw	r4,0(r8)
   442f0:	01000084 	movi	r4,2
   442f4:	41000115 	stw	r4,4(r8)
   442f8:	d8c02015 	stw	r3,128(sp)
   442fc:	d8801f15 	stw	r2,124(sp)
   44300:	010001c4 	movi	r4,7
   44304:	20825816 	blt	r4,r2,44c68 <___vfprintf_internal_r+0x125c>
   44308:	42000204 	addi	r8,r8,8
   4430c:	d9003017 	ldw	r4,192(sp)
   44310:	00802004 	movi	r2,128
   44314:	2081bb26 	beq	r4,r2,44a04 <___vfprintf_internal_r+0xff8>
   44318:	d9402a17 	ldw	r5,168(sp)
   4431c:	d8802b17 	ldw	r2,172(sp)
   44320:	28adc83a 	sub	r22,r5,r2
   44324:	0580310e 	bge	zero,r22,443ec <___vfprintf_internal_r+0x9e0>
   44328:	07000404 	movi	fp,16
   4432c:	d8801f17 	ldw	r2,124(sp)
   44330:	e584360e 	bge	fp,r22,4540c <___vfprintf_internal_r+0x1a00>
   44334:	01400174 	movhi	r5,5
   44338:	295a3784 	addi	r5,r5,26846
   4433c:	dc402a15 	stw	r17,168(sp)
   44340:	d9402c15 	stw	r5,176(sp)
   44344:	b023883a 	mov	r17,r22
   44348:	04c001c4 	movi	r19,7
   4434c:	a82d883a 	mov	r22,r21
   44350:	902b883a 	mov	r21,r18
   44354:	8025883a 	mov	r18,r16
   44358:	dc002d17 	ldw	r16,180(sp)
   4435c:	00000306 	br	4436c <___vfprintf_internal_r+0x960>
   44360:	8c7ffc04 	addi	r17,r17,-16
   44364:	42000204 	addi	r8,r8,8
   44368:	e440110e 	bge	fp,r17,443b0 <___vfprintf_internal_r+0x9a4>
   4436c:	18c00404 	addi	r3,r3,16
   44370:	10800044 	addi	r2,r2,1
   44374:	45000015 	stw	r20,0(r8)
   44378:	47000115 	stw	fp,4(r8)
   4437c:	d8c02015 	stw	r3,128(sp)
   44380:	d8801f15 	stw	r2,124(sp)
   44384:	98bff60e 	bge	r19,r2,44360 <__alt_data_end+0xfffd2360>
   44388:	d9801e04 	addi	r6,sp,120
   4438c:	b80b883a 	mov	r5,r23
   44390:	8009883a 	mov	r4,r16
   44394:	004c8c40 	call	4c8c4 <__sprint_r>
   44398:	103ea01e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   4439c:	8c7ffc04 	addi	r17,r17,-16
   443a0:	d8c02017 	ldw	r3,128(sp)
   443a4:	d8801f17 	ldw	r2,124(sp)
   443a8:	da000404 	addi	r8,sp,16
   443ac:	e47fef16 	blt	fp,r17,4436c <__alt_data_end+0xfffd236c>
   443b0:	9021883a 	mov	r16,r18
   443b4:	a825883a 	mov	r18,r21
   443b8:	b02b883a 	mov	r21,r22
   443bc:	882d883a 	mov	r22,r17
   443c0:	dc402a17 	ldw	r17,168(sp)
   443c4:	d9002c17 	ldw	r4,176(sp)
   443c8:	1d87883a 	add	r3,r3,r22
   443cc:	10800044 	addi	r2,r2,1
   443d0:	41000015 	stw	r4,0(r8)
   443d4:	45800115 	stw	r22,4(r8)
   443d8:	d8c02015 	stw	r3,128(sp)
   443dc:	d8801f15 	stw	r2,124(sp)
   443e0:	010001c4 	movi	r4,7
   443e4:	20821016 	blt	r4,r2,44c28 <___vfprintf_internal_r+0x121c>
   443e8:	42000204 	addi	r8,r8,8
   443ec:	9080400c 	andi	r2,r18,256
   443f0:	10013a1e 	bne	r2,zero,448dc <___vfprintf_internal_r+0xed0>
   443f4:	d9402b17 	ldw	r5,172(sp)
   443f8:	d8801f17 	ldw	r2,124(sp)
   443fc:	44000015 	stw	r16,0(r8)
   44400:	1947883a 	add	r3,r3,r5
   44404:	10800044 	addi	r2,r2,1
   44408:	41400115 	stw	r5,4(r8)
   4440c:	d8c02015 	stw	r3,128(sp)
   44410:	d8801f15 	stw	r2,124(sp)
   44414:	010001c4 	movi	r4,7
   44418:	2081f516 	blt	r4,r2,44bf0 <___vfprintf_internal_r+0x11e4>
   4441c:	42000204 	addi	r8,r8,8
   44420:	9480010c 	andi	r18,r18,4
   44424:	90003226 	beq	r18,zero,444f0 <___vfprintf_internal_r+0xae4>
   44428:	d9403117 	ldw	r5,196(sp)
   4442c:	d8802917 	ldw	r2,164(sp)
   44430:	28a1c83a 	sub	r16,r5,r2
   44434:	04002e0e 	bge	zero,r16,444f0 <___vfprintf_internal_r+0xae4>
   44438:	04400404 	movi	r17,16
   4443c:	d8801f17 	ldw	r2,124(sp)
   44440:	8c04c40e 	bge	r17,r16,45754 <___vfprintf_internal_r+0x1d48>
   44444:	01400174 	movhi	r5,5
   44448:	295a3b84 	addi	r5,r5,26862
   4444c:	d9403515 	stw	r5,212(sp)
   44450:	048001c4 	movi	r18,7
   44454:	dcc02d17 	ldw	r19,180(sp)
   44458:	00000306 	br	44468 <___vfprintf_internal_r+0xa5c>
   4445c:	843ffc04 	addi	r16,r16,-16
   44460:	42000204 	addi	r8,r8,8
   44464:	8c00130e 	bge	r17,r16,444b4 <___vfprintf_internal_r+0xaa8>
   44468:	01000174 	movhi	r4,5
   4446c:	18c00404 	addi	r3,r3,16
   44470:	10800044 	addi	r2,r2,1
   44474:	211a3b84 	addi	r4,r4,26862
   44478:	41000015 	stw	r4,0(r8)
   4447c:	44400115 	stw	r17,4(r8)
   44480:	d8c02015 	stw	r3,128(sp)
   44484:	d8801f15 	stw	r2,124(sp)
   44488:	90bff40e 	bge	r18,r2,4445c <__alt_data_end+0xfffd245c>
   4448c:	d9801e04 	addi	r6,sp,120
   44490:	b80b883a 	mov	r5,r23
   44494:	9809883a 	mov	r4,r19
   44498:	004c8c40 	call	4c8c4 <__sprint_r>
   4449c:	103e5f1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   444a0:	843ffc04 	addi	r16,r16,-16
   444a4:	d8c02017 	ldw	r3,128(sp)
   444a8:	d8801f17 	ldw	r2,124(sp)
   444ac:	da000404 	addi	r8,sp,16
   444b0:	8c3fed16 	blt	r17,r16,44468 <__alt_data_end+0xfffd2468>
   444b4:	d9403517 	ldw	r5,212(sp)
   444b8:	1c07883a 	add	r3,r3,r16
   444bc:	10800044 	addi	r2,r2,1
   444c0:	41400015 	stw	r5,0(r8)
   444c4:	44000115 	stw	r16,4(r8)
   444c8:	d8c02015 	stw	r3,128(sp)
   444cc:	d8801f15 	stw	r2,124(sp)
   444d0:	010001c4 	movi	r4,7
   444d4:	2080060e 	bge	r4,r2,444f0 <___vfprintf_internal_r+0xae4>
   444d8:	d9002d17 	ldw	r4,180(sp)
   444dc:	d9801e04 	addi	r6,sp,120
   444e0:	b80b883a 	mov	r5,r23
   444e4:	004c8c40 	call	4c8c4 <__sprint_r>
   444e8:	103e4c1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   444ec:	d8c02017 	ldw	r3,128(sp)
   444f0:	d8803117 	ldw	r2,196(sp)
   444f4:	d9002917 	ldw	r4,164(sp)
   444f8:	1100010e 	bge	r2,r4,44500 <___vfprintf_internal_r+0xaf4>
   444fc:	2005883a 	mov	r2,r4
   44500:	d9402f17 	ldw	r5,188(sp)
   44504:	288b883a 	add	r5,r5,r2
   44508:	d9402f15 	stw	r5,188(sp)
   4450c:	1801c01e 	bne	r3,zero,44c10 <___vfprintf_internal_r+0x1204>
   44510:	a8800007 	ldb	r2,0(r21)
   44514:	d8001f15 	stw	zero,124(sp)
   44518:	da000404 	addi	r8,sp,16
   4451c:	103d751e 	bne	r2,zero,43af4 <__alt_data_end+0xfffd1af4>
   44520:	a823883a 	mov	r17,r21
   44524:	003d8b06 	br	43b54 <__alt_data_end+0xfffd1b54>
   44528:	8025883a 	mov	r18,r16
   4452c:	dc002903 	ldbu	r16,164(sp)
   44530:	e011883a 	mov	r8,fp
   44534:	84003fcc 	andi	r16,r16,255
   44538:	8005e51e 	bne	r16,zero,45cd0 <___vfprintf_internal_r+0x22c4>
   4453c:	94800414 	ori	r18,r18,16
   44540:	9080080c 	andi	r2,r18,32
   44544:	10022b26 	beq	r2,zero,44df4 <___vfprintf_internal_r+0x13e8>
   44548:	d9002e17 	ldw	r4,184(sp)
   4454c:	d9402a17 	ldw	r5,168(sp)
   44550:	d8002785 	stb	zero,158(sp)
   44554:	20c00204 	addi	r3,r4,8
   44558:	24c00017 	ldw	r19,0(r4)
   4455c:	25800117 	ldw	r22,4(r4)
   44560:	28042e16 	blt	r5,zero,4561c <___vfprintf_internal_r+0x1c10>
   44564:	013fdfc4 	movi	r4,-129
   44568:	9d84b03a 	or	r2,r19,r22
   4456c:	d8c02e15 	stw	r3,184(sp)
   44570:	9124703a 	and	r18,r18,r4
   44574:	0039883a 	mov	fp,zero
   44578:	103e801e 	bne	r2,zero,43f7c <__alt_data_end+0xfffd1f7c>
   4457c:	d9002a17 	ldw	r4,168(sp)
   44580:	2002e01e 	bne	r4,zero,45104 <___vfprintf_internal_r+0x16f8>
   44584:	d8002a15 	stw	zero,168(sp)
   44588:	d8002b15 	stw	zero,172(sp)
   4458c:	dc001e04 	addi	r16,sp,120
   44590:	003ef506 	br	44168 <__alt_data_end+0xfffd2168>
   44594:	8025883a 	mov	r18,r16
   44598:	dc002903 	ldbu	r16,164(sp)
   4459c:	e011883a 	mov	r8,fp
   445a0:	84003fcc 	andi	r16,r16,255
   445a4:	8005ba1e 	bne	r16,zero,45c90 <___vfprintf_internal_r+0x2284>
   445a8:	01000174 	movhi	r4,5
   445ac:	211a2304 	addi	r4,r4,26764
   445b0:	d9003915 	stw	r4,228(sp)
   445b4:	9080080c 	andi	r2,r18,32
   445b8:	10006126 	beq	r2,zero,44740 <___vfprintf_internal_r+0xd34>
   445bc:	d9402e17 	ldw	r5,184(sp)
   445c0:	2cc00017 	ldw	r19,0(r5)
   445c4:	2d800117 	ldw	r22,4(r5)
   445c8:	29400204 	addi	r5,r5,8
   445cc:	d9402e15 	stw	r5,184(sp)
   445d0:	9080004c 	andi	r2,r18,1
   445d4:	1001ac26 	beq	r2,zero,44c88 <___vfprintf_internal_r+0x127c>
   445d8:	9d84b03a 	or	r2,r19,r22
   445dc:	10038526 	beq	r2,zero,453f4 <___vfprintf_internal_r+0x19e8>
   445e0:	d8c02a17 	ldw	r3,168(sp)
   445e4:	00800c04 	movi	r2,48
   445e8:	d8802705 	stb	r2,156(sp)
   445ec:	dc402745 	stb	r17,157(sp)
   445f0:	d8002785 	stb	zero,158(sp)
   445f4:	90800094 	ori	r2,r18,2
   445f8:	18047916 	blt	r3,zero,457e0 <___vfprintf_internal_r+0x1dd4>
   445fc:	00bfdfc4 	movi	r2,-129
   44600:	90a4703a 	and	r18,r18,r2
   44604:	94800094 	ori	r18,r18,2
   44608:	0039883a 	mov	fp,zero
   4460c:	d9003917 	ldw	r4,228(sp)
   44610:	dc001e04 	addi	r16,sp,120
   44614:	988003cc 	andi	r2,r19,15
   44618:	b006973a 	slli	r3,r22,28
   4461c:	2085883a 	add	r2,r4,r2
   44620:	9826d13a 	srli	r19,r19,4
   44624:	10800003 	ldbu	r2,0(r2)
   44628:	b02cd13a 	srli	r22,r22,4
   4462c:	843fffc4 	addi	r16,r16,-1
   44630:	1ce6b03a 	or	r19,r3,r19
   44634:	80800005 	stb	r2,0(r16)
   44638:	9d84b03a 	or	r2,r19,r22
   4463c:	103ff51e 	bne	r2,zero,44614 <__alt_data_end+0xfffd2614>
   44640:	d8c02817 	ldw	r3,160(sp)
   44644:	1c07c83a 	sub	r3,r3,r16
   44648:	d8c02b15 	stw	r3,172(sp)
   4464c:	003ec606 	br	44168 <__alt_data_end+0xfffd2168>
   44650:	8025883a 	mov	r18,r16
   44654:	dc002903 	ldbu	r16,164(sp)
   44658:	e011883a 	mov	r8,fp
   4465c:	84003fcc 	andi	r16,r16,255
   44660:	803e9626 	beq	r16,zero,440bc <__alt_data_end+0xfffd20bc>
   44664:	d8c02b03 	ldbu	r3,172(sp)
   44668:	d8c02785 	stb	r3,158(sp)
   4466c:	003e9306 	br	440bc <__alt_data_end+0xfffd20bc>
   44670:	00c00044 	movi	r3,1
   44674:	d8c02905 	stb	r3,164(sp)
   44678:	00c00ac4 	movi	r3,43
   4467c:	d8c02b05 	stb	r3,172(sp)
   44680:	ac400007 	ldb	r17,0(r21)
   44684:	003d4306 	br	43b94 <__alt_data_end+0xfffd1b94>
   44688:	84000814 	ori	r16,r16,32
   4468c:	ac400007 	ldb	r17,0(r21)
   44690:	003d4006 	br	43b94 <__alt_data_end+0xfffd1b94>
   44694:	d8802e17 	ldw	r2,184(sp)
   44698:	8025883a 	mov	r18,r16
   4469c:	d8002785 	stb	zero,158(sp)
   446a0:	14000017 	ldw	r16,0(r2)
   446a4:	e011883a 	mov	r8,fp
   446a8:	14c00104 	addi	r19,r2,4
   446ac:	80042d26 	beq	r16,zero,45764 <___vfprintf_internal_r+0x1d58>
   446b0:	d8c02a17 	ldw	r3,168(sp)
   446b4:	1803e416 	blt	r3,zero,45648 <___vfprintf_internal_r+0x1c3c>
   446b8:	180d883a 	mov	r6,r3
   446bc:	000b883a 	mov	r5,zero
   446c0:	8009883a 	mov	r4,r16
   446c4:	df003d15 	stw	fp,244(sp)
   446c8:	00493440 	call	49344 <memchr>
   446cc:	da003d17 	ldw	r8,244(sp)
   446d0:	10046826 	beq	r2,zero,45874 <___vfprintf_internal_r+0x1e68>
   446d4:	1405c83a 	sub	r2,r2,r16
   446d8:	d8802b15 	stw	r2,172(sp)
   446dc:	1003e016 	blt	r2,zero,45660 <___vfprintf_internal_r+0x1c54>
   446e0:	df002783 	ldbu	fp,158(sp)
   446e4:	d8802915 	stw	r2,164(sp)
   446e8:	dcc02e15 	stw	r19,184(sp)
   446ec:	d8002a15 	stw	zero,168(sp)
   446f0:	d8003215 	stw	zero,200(sp)
   446f4:	003ea206 	br	44180 <__alt_data_end+0xfffd2180>
   446f8:	8025883a 	mov	r18,r16
   446fc:	dc002903 	ldbu	r16,164(sp)
   44700:	e011883a 	mov	r8,fp
   44704:	84003fcc 	andi	r16,r16,255
   44708:	803f8d26 	beq	r16,zero,44540 <__alt_data_end+0xfffd2540>
   4470c:	d8c02b03 	ldbu	r3,172(sp)
   44710:	d8c02785 	stb	r3,158(sp)
   44714:	003f8a06 	br	44540 <__alt_data_end+0xfffd2540>
   44718:	8025883a 	mov	r18,r16
   4471c:	dc002903 	ldbu	r16,164(sp)
   44720:	e011883a 	mov	r8,fp
   44724:	84003fcc 	andi	r16,r16,255
   44728:	8005661e 	bne	r16,zero,45cc4 <___vfprintf_internal_r+0x22b8>
   4472c:	01000174 	movhi	r4,5
   44730:	211a2804 	addi	r4,r4,26784
   44734:	d9003915 	stw	r4,228(sp)
   44738:	9080080c 	andi	r2,r18,32
   4473c:	103f9f1e 	bne	r2,zero,445bc <__alt_data_end+0xfffd25bc>
   44740:	9080040c 	andi	r2,r18,16
   44744:	1002eb26 	beq	r2,zero,452f4 <___vfprintf_internal_r+0x18e8>
   44748:	d8802e17 	ldw	r2,184(sp)
   4474c:	002d883a 	mov	r22,zero
   44750:	14c00017 	ldw	r19,0(r2)
   44754:	10800104 	addi	r2,r2,4
   44758:	d8802e15 	stw	r2,184(sp)
   4475c:	003f9c06 	br	445d0 <__alt_data_end+0xfffd25d0>
   44760:	d8802b07 	ldb	r2,172(sp)
   44764:	1002e11e 	bne	r2,zero,452ec <___vfprintf_internal_r+0x18e0>
   44768:	00c00044 	movi	r3,1
   4476c:	d8c02905 	stb	r3,164(sp)
   44770:	00c00804 	movi	r3,32
   44774:	d8c02b05 	stb	r3,172(sp)
   44778:	ac400007 	ldb	r17,0(r21)
   4477c:	003d0506 	br	43b94 <__alt_data_end+0xfffd1b94>
   44780:	84000054 	ori	r16,r16,1
   44784:	ac400007 	ldb	r17,0(r21)
   44788:	003d0206 	br	43b94 <__alt_data_end+0xfffd1b94>
   4478c:	8025883a 	mov	r18,r16
   44790:	dc002903 	ldbu	r16,164(sp)
   44794:	e011883a 	mov	r8,fp
   44798:	84003fcc 	andi	r16,r16,255
   4479c:	803de726 	beq	r16,zero,43f3c <__alt_data_end+0xfffd1f3c>
   447a0:	d8c02b03 	ldbu	r3,172(sp)
   447a4:	d8c02785 	stb	r3,158(sp)
   447a8:	003de406 	br	43f3c <__alt_data_end+0xfffd1f3c>
   447ac:	84001014 	ori	r16,r16,64
   447b0:	ac400007 	ldb	r17,0(r21)
   447b4:	003cf706 	br	43b94 <__alt_data_end+0xfffd1b94>
   447b8:	ac400007 	ldb	r17,0(r21)
   447bc:	00801b04 	movi	r2,108
   447c0:	88838f26 	beq	r17,r2,45600 <___vfprintf_internal_r+0x1bf4>
   447c4:	84000414 	ori	r16,r16,16
   447c8:	003cf206 	br	43b94 <__alt_data_end+0xfffd1b94>
   447cc:	8025883a 	mov	r18,r16
   447d0:	dc002903 	ldbu	r16,164(sp)
   447d4:	e011883a 	mov	r8,fp
   447d8:	84003fcc 	andi	r16,r16,255
   447dc:	80053f1e 	bne	r16,zero,45cdc <___vfprintf_internal_r+0x22d0>
   447e0:	9080080c 	andi	r2,r18,32
   447e4:	1002d226 	beq	r2,zero,45330 <___vfprintf_internal_r+0x1924>
   447e8:	d9002e17 	ldw	r4,184(sp)
   447ec:	d9402f17 	ldw	r5,188(sp)
   447f0:	20800017 	ldw	r2,0(r4)
   447f4:	2807d7fa 	srai	r3,r5,31
   447f8:	21000104 	addi	r4,r4,4
   447fc:	d9002e15 	stw	r4,184(sp)
   44800:	11400015 	stw	r5,0(r2)
   44804:	10c00115 	stw	r3,4(r2)
   44808:	003cb806 	br	43aec <__alt_data_end+0xfffd1aec>
   4480c:	d8c02e17 	ldw	r3,184(sp)
   44810:	d9002e17 	ldw	r4,184(sp)
   44814:	8025883a 	mov	r18,r16
   44818:	18800017 	ldw	r2,0(r3)
   4481c:	21000104 	addi	r4,r4,4
   44820:	00c00044 	movi	r3,1
   44824:	e011883a 	mov	r8,fp
   44828:	d8c02915 	stw	r3,164(sp)
   4482c:	d8002785 	stb	zero,158(sp)
   44830:	d8801405 	stb	r2,80(sp)
   44834:	d9002e15 	stw	r4,184(sp)
   44838:	d8c02b15 	stw	r3,172(sp)
   4483c:	d8002a15 	stw	zero,168(sp)
   44840:	d8003215 	stw	zero,200(sp)
   44844:	dc001404 	addi	r16,sp,80
   44848:	0039883a 	mov	fp,zero
   4484c:	003e5306 	br	4419c <__alt_data_end+0xfffd219c>
   44850:	01000174 	movhi	r4,5
   44854:	211a2804 	addi	r4,r4,26784
   44858:	0039883a 	mov	fp,zero
   4485c:	d9003915 	stw	r4,228(sp)
   44860:	04401e04 	movi	r17,120
   44864:	003f6906 	br	4460c <__alt_data_end+0xfffd260c>
   44868:	8025883a 	mov	r18,r16
   4486c:	dc002903 	ldbu	r16,164(sp)
   44870:	e011883a 	mov	r8,fp
   44874:	84003fcc 	andi	r16,r16,255
   44878:	8005081e 	bne	r16,zero,45c9c <___vfprintf_internal_r+0x2290>
   4487c:	883d6126 	beq	r17,zero,43e04 <__alt_data_end+0xfffd1e04>
   44880:	00c00044 	movi	r3,1
   44884:	d8c02915 	stw	r3,164(sp)
   44888:	dc401405 	stb	r17,80(sp)
   4488c:	d8002785 	stb	zero,158(sp)
   44890:	003fe906 	br	44838 <__alt_data_end+0xfffd2838>
   44894:	01400174 	movhi	r5,5
   44898:	295a2804 	addi	r5,r5,26784
   4489c:	d9403915 	stw	r5,228(sp)
   448a0:	d8c02e15 	stw	r3,184(sp)
   448a4:	1025883a 	mov	r18,r2
   448a8:	04401e04 	movi	r17,120
   448ac:	9d84b03a 	or	r2,r19,r22
   448b0:	1000fc1e 	bne	r2,zero,44ca4 <___vfprintf_internal_r+0x1298>
   448b4:	0039883a 	mov	fp,zero
   448b8:	00800084 	movi	r2,2
   448bc:	10803fcc 	andi	r2,r2,255
   448c0:	00c00044 	movi	r3,1
   448c4:	10c20f26 	beq	r2,r3,45104 <___vfprintf_internal_r+0x16f8>
   448c8:	00c00084 	movi	r3,2
   448cc:	10fd3326 	beq	r2,r3,43d9c <__alt_data_end+0xfffd1d9c>
   448d0:	003e0b06 	br	44100 <__alt_data_end+0xfffd2100>
   448d4:	d8c02017 	ldw	r3,128(sp)
   448d8:	003e7106 	br	442a0 <__alt_data_end+0xfffd22a0>
   448dc:	00801944 	movi	r2,101
   448e0:	14407e0e 	bge	r2,r17,44adc <___vfprintf_internal_r+0x10d0>
   448e4:	d9003617 	ldw	r4,216(sp)
   448e8:	d9403817 	ldw	r5,224(sp)
   448ec:	000d883a 	mov	r6,zero
   448f0:	000f883a 	mov	r7,zero
   448f4:	d8c03c15 	stw	r3,240(sp)
   448f8:	da003d15 	stw	r8,244(sp)
   448fc:	00506480 	call	50648 <__eqdf2>
   44900:	d8c03c17 	ldw	r3,240(sp)
   44904:	da003d17 	ldw	r8,244(sp)
   44908:	1000f71e 	bne	r2,zero,44ce8 <___vfprintf_internal_r+0x12dc>
   4490c:	d8801f17 	ldw	r2,124(sp)
   44910:	01000174 	movhi	r4,5
   44914:	211a2f04 	addi	r4,r4,26812
   44918:	18c00044 	addi	r3,r3,1
   4491c:	10800044 	addi	r2,r2,1
   44920:	41000015 	stw	r4,0(r8)
   44924:	01000044 	movi	r4,1
   44928:	41000115 	stw	r4,4(r8)
   4492c:	d8c02015 	stw	r3,128(sp)
   44930:	d8801f15 	stw	r2,124(sp)
   44934:	010001c4 	movi	r4,7
   44938:	2082b816 	blt	r4,r2,4541c <___vfprintf_internal_r+0x1a10>
   4493c:	42000204 	addi	r8,r8,8
   44940:	d8802617 	ldw	r2,152(sp)
   44944:	d9403317 	ldw	r5,204(sp)
   44948:	11400216 	blt	r2,r5,44954 <___vfprintf_internal_r+0xf48>
   4494c:	9080004c 	andi	r2,r18,1
   44950:	103eb326 	beq	r2,zero,44420 <__alt_data_end+0xfffd2420>
   44954:	d8803717 	ldw	r2,220(sp)
   44958:	d9003417 	ldw	r4,208(sp)
   4495c:	d9403717 	ldw	r5,220(sp)
   44960:	1887883a 	add	r3,r3,r2
   44964:	d8801f17 	ldw	r2,124(sp)
   44968:	41000015 	stw	r4,0(r8)
   4496c:	41400115 	stw	r5,4(r8)
   44970:	10800044 	addi	r2,r2,1
   44974:	d8c02015 	stw	r3,128(sp)
   44978:	d8801f15 	stw	r2,124(sp)
   4497c:	010001c4 	movi	r4,7
   44980:	20832916 	blt	r4,r2,45628 <___vfprintf_internal_r+0x1c1c>
   44984:	42000204 	addi	r8,r8,8
   44988:	d8803317 	ldw	r2,204(sp)
   4498c:	143fffc4 	addi	r16,r2,-1
   44990:	043ea30e 	bge	zero,r16,44420 <__alt_data_end+0xfffd2420>
   44994:	04400404 	movi	r17,16
   44998:	d8801f17 	ldw	r2,124(sp)
   4499c:	8c00880e 	bge	r17,r16,44bc0 <___vfprintf_internal_r+0x11b4>
   449a0:	01400174 	movhi	r5,5
   449a4:	295a3784 	addi	r5,r5,26846
   449a8:	d9402c15 	stw	r5,176(sp)
   449ac:	058001c4 	movi	r22,7
   449b0:	dcc02d17 	ldw	r19,180(sp)
   449b4:	00000306 	br	449c4 <___vfprintf_internal_r+0xfb8>
   449b8:	42000204 	addi	r8,r8,8
   449bc:	843ffc04 	addi	r16,r16,-16
   449c0:	8c00820e 	bge	r17,r16,44bcc <___vfprintf_internal_r+0x11c0>
   449c4:	18c00404 	addi	r3,r3,16
   449c8:	10800044 	addi	r2,r2,1
   449cc:	45000015 	stw	r20,0(r8)
   449d0:	44400115 	stw	r17,4(r8)
   449d4:	d8c02015 	stw	r3,128(sp)
   449d8:	d8801f15 	stw	r2,124(sp)
   449dc:	b0bff60e 	bge	r22,r2,449b8 <__alt_data_end+0xfffd29b8>
   449e0:	d9801e04 	addi	r6,sp,120
   449e4:	b80b883a 	mov	r5,r23
   449e8:	9809883a 	mov	r4,r19
   449ec:	004c8c40 	call	4c8c4 <__sprint_r>
   449f0:	103d0a1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   449f4:	d8c02017 	ldw	r3,128(sp)
   449f8:	d8801f17 	ldw	r2,124(sp)
   449fc:	da000404 	addi	r8,sp,16
   44a00:	003fee06 	br	449bc <__alt_data_end+0xfffd29bc>
   44a04:	d9403117 	ldw	r5,196(sp)
   44a08:	d8802917 	ldw	r2,164(sp)
   44a0c:	28adc83a 	sub	r22,r5,r2
   44a10:	05be410e 	bge	zero,r22,44318 <__alt_data_end+0xfffd2318>
   44a14:	07000404 	movi	fp,16
   44a18:	d8801f17 	ldw	r2,124(sp)
   44a1c:	e5838f0e 	bge	fp,r22,4585c <___vfprintf_internal_r+0x1e50>
   44a20:	01400174 	movhi	r5,5
   44a24:	295a3784 	addi	r5,r5,26846
   44a28:	dc403015 	stw	r17,192(sp)
   44a2c:	d9402c15 	stw	r5,176(sp)
   44a30:	b023883a 	mov	r17,r22
   44a34:	04c001c4 	movi	r19,7
   44a38:	a82d883a 	mov	r22,r21
   44a3c:	902b883a 	mov	r21,r18
   44a40:	8025883a 	mov	r18,r16
   44a44:	dc002d17 	ldw	r16,180(sp)
   44a48:	00000306 	br	44a58 <___vfprintf_internal_r+0x104c>
   44a4c:	8c7ffc04 	addi	r17,r17,-16
   44a50:	42000204 	addi	r8,r8,8
   44a54:	e440110e 	bge	fp,r17,44a9c <___vfprintf_internal_r+0x1090>
   44a58:	18c00404 	addi	r3,r3,16
   44a5c:	10800044 	addi	r2,r2,1
   44a60:	45000015 	stw	r20,0(r8)
   44a64:	47000115 	stw	fp,4(r8)
   44a68:	d8c02015 	stw	r3,128(sp)
   44a6c:	d8801f15 	stw	r2,124(sp)
   44a70:	98bff60e 	bge	r19,r2,44a4c <__alt_data_end+0xfffd2a4c>
   44a74:	d9801e04 	addi	r6,sp,120
   44a78:	b80b883a 	mov	r5,r23
   44a7c:	8009883a 	mov	r4,r16
   44a80:	004c8c40 	call	4c8c4 <__sprint_r>
   44a84:	103ce51e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44a88:	8c7ffc04 	addi	r17,r17,-16
   44a8c:	d8c02017 	ldw	r3,128(sp)
   44a90:	d8801f17 	ldw	r2,124(sp)
   44a94:	da000404 	addi	r8,sp,16
   44a98:	e47fef16 	blt	fp,r17,44a58 <__alt_data_end+0xfffd2a58>
   44a9c:	9021883a 	mov	r16,r18
   44aa0:	a825883a 	mov	r18,r21
   44aa4:	b02b883a 	mov	r21,r22
   44aa8:	882d883a 	mov	r22,r17
   44aac:	dc403017 	ldw	r17,192(sp)
   44ab0:	d9002c17 	ldw	r4,176(sp)
   44ab4:	1d87883a 	add	r3,r3,r22
   44ab8:	10800044 	addi	r2,r2,1
   44abc:	41000015 	stw	r4,0(r8)
   44ac0:	45800115 	stw	r22,4(r8)
   44ac4:	d8c02015 	stw	r3,128(sp)
   44ac8:	d8801f15 	stw	r2,124(sp)
   44acc:	010001c4 	movi	r4,7
   44ad0:	20818e16 	blt	r4,r2,4510c <___vfprintf_internal_r+0x1700>
   44ad4:	42000204 	addi	r8,r8,8
   44ad8:	003e0f06 	br	44318 <__alt_data_end+0xfffd2318>
   44adc:	d9403317 	ldw	r5,204(sp)
   44ae0:	00800044 	movi	r2,1
   44ae4:	18c00044 	addi	r3,r3,1
   44ae8:	1141530e 	bge	r2,r5,45038 <___vfprintf_internal_r+0x162c>
   44aec:	dc401f17 	ldw	r17,124(sp)
   44af0:	00800044 	movi	r2,1
   44af4:	40800115 	stw	r2,4(r8)
   44af8:	8c400044 	addi	r17,r17,1
   44afc:	44000015 	stw	r16,0(r8)
   44b00:	d8c02015 	stw	r3,128(sp)
   44b04:	dc401f15 	stw	r17,124(sp)
   44b08:	008001c4 	movi	r2,7
   44b0c:	14416b16 	blt	r2,r17,450bc <___vfprintf_internal_r+0x16b0>
   44b10:	42000204 	addi	r8,r8,8
   44b14:	d8803717 	ldw	r2,220(sp)
   44b18:	d9003417 	ldw	r4,208(sp)
   44b1c:	8c400044 	addi	r17,r17,1
   44b20:	10c7883a 	add	r3,r2,r3
   44b24:	40800115 	stw	r2,4(r8)
   44b28:	41000015 	stw	r4,0(r8)
   44b2c:	d8c02015 	stw	r3,128(sp)
   44b30:	dc401f15 	stw	r17,124(sp)
   44b34:	008001c4 	movi	r2,7
   44b38:	14416916 	blt	r2,r17,450e0 <___vfprintf_internal_r+0x16d4>
   44b3c:	45800204 	addi	r22,r8,8
   44b40:	d9003617 	ldw	r4,216(sp)
   44b44:	d9403817 	ldw	r5,224(sp)
   44b48:	000d883a 	mov	r6,zero
   44b4c:	000f883a 	mov	r7,zero
   44b50:	d8c03c15 	stw	r3,240(sp)
   44b54:	00506480 	call	50648 <__eqdf2>
   44b58:	d8c03c17 	ldw	r3,240(sp)
   44b5c:	1000bc26 	beq	r2,zero,44e50 <___vfprintf_internal_r+0x1444>
   44b60:	d9403317 	ldw	r5,204(sp)
   44b64:	84000044 	addi	r16,r16,1
   44b68:	8c400044 	addi	r17,r17,1
   44b6c:	28bfffc4 	addi	r2,r5,-1
   44b70:	1887883a 	add	r3,r3,r2
   44b74:	b0800115 	stw	r2,4(r22)
   44b78:	b4000015 	stw	r16,0(r22)
   44b7c:	d8c02015 	stw	r3,128(sp)
   44b80:	dc401f15 	stw	r17,124(sp)
   44b84:	008001c4 	movi	r2,7
   44b88:	14414316 	blt	r2,r17,45098 <___vfprintf_internal_r+0x168c>
   44b8c:	b5800204 	addi	r22,r22,8
   44b90:	d9003a17 	ldw	r4,232(sp)
   44b94:	df0022c4 	addi	fp,sp,139
   44b98:	8c400044 	addi	r17,r17,1
   44b9c:	20c7883a 	add	r3,r4,r3
   44ba0:	b7000015 	stw	fp,0(r22)
   44ba4:	b1000115 	stw	r4,4(r22)
   44ba8:	d8c02015 	stw	r3,128(sp)
   44bac:	dc401f15 	stw	r17,124(sp)
   44bb0:	008001c4 	movi	r2,7
   44bb4:	14400e16 	blt	r2,r17,44bf0 <___vfprintf_internal_r+0x11e4>
   44bb8:	b2000204 	addi	r8,r22,8
   44bbc:	003e1806 	br	44420 <__alt_data_end+0xfffd2420>
   44bc0:	01000174 	movhi	r4,5
   44bc4:	211a3784 	addi	r4,r4,26846
   44bc8:	d9002c15 	stw	r4,176(sp)
   44bcc:	d9002c17 	ldw	r4,176(sp)
   44bd0:	1c07883a 	add	r3,r3,r16
   44bd4:	44000115 	stw	r16,4(r8)
   44bd8:	41000015 	stw	r4,0(r8)
   44bdc:	10800044 	addi	r2,r2,1
   44be0:	d8c02015 	stw	r3,128(sp)
   44be4:	d8801f15 	stw	r2,124(sp)
   44be8:	010001c4 	movi	r4,7
   44bec:	20be0b0e 	bge	r4,r2,4441c <__alt_data_end+0xfffd241c>
   44bf0:	d9002d17 	ldw	r4,180(sp)
   44bf4:	d9801e04 	addi	r6,sp,120
   44bf8:	b80b883a 	mov	r5,r23
   44bfc:	004c8c40 	call	4c8c4 <__sprint_r>
   44c00:	103c861e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44c04:	d8c02017 	ldw	r3,128(sp)
   44c08:	da000404 	addi	r8,sp,16
   44c0c:	003e0406 	br	44420 <__alt_data_end+0xfffd2420>
   44c10:	d9002d17 	ldw	r4,180(sp)
   44c14:	d9801e04 	addi	r6,sp,120
   44c18:	b80b883a 	mov	r5,r23
   44c1c:	004c8c40 	call	4c8c4 <__sprint_r>
   44c20:	103e3b26 	beq	r2,zero,44510 <__alt_data_end+0xfffd2510>
   44c24:	003c7d06 	br	43e1c <__alt_data_end+0xfffd1e1c>
   44c28:	d9002d17 	ldw	r4,180(sp)
   44c2c:	d9801e04 	addi	r6,sp,120
   44c30:	b80b883a 	mov	r5,r23
   44c34:	004c8c40 	call	4c8c4 <__sprint_r>
   44c38:	103c781e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44c3c:	d8c02017 	ldw	r3,128(sp)
   44c40:	da000404 	addi	r8,sp,16
   44c44:	003de906 	br	443ec <__alt_data_end+0xfffd23ec>
   44c48:	d9002d17 	ldw	r4,180(sp)
   44c4c:	d9801e04 	addi	r6,sp,120
   44c50:	b80b883a 	mov	r5,r23
   44c54:	004c8c40 	call	4c8c4 <__sprint_r>
   44c58:	103c701e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44c5c:	d8c02017 	ldw	r3,128(sp)
   44c60:	da000404 	addi	r8,sp,16
   44c64:	003d9b06 	br	442d4 <__alt_data_end+0xfffd22d4>
   44c68:	d9002d17 	ldw	r4,180(sp)
   44c6c:	d9801e04 	addi	r6,sp,120
   44c70:	b80b883a 	mov	r5,r23
   44c74:	004c8c40 	call	4c8c4 <__sprint_r>
   44c78:	103c681e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44c7c:	d8c02017 	ldw	r3,128(sp)
   44c80:	da000404 	addi	r8,sp,16
   44c84:	003da106 	br	4430c <__alt_data_end+0xfffd230c>
   44c88:	d9402a17 	ldw	r5,168(sp)
   44c8c:	d8002785 	stb	zero,158(sp)
   44c90:	283f0616 	blt	r5,zero,448ac <__alt_data_end+0xfffd28ac>
   44c94:	00ffdfc4 	movi	r3,-129
   44c98:	9d84b03a 	or	r2,r19,r22
   44c9c:	90e4703a 	and	r18,r18,r3
   44ca0:	103c3b26 	beq	r2,zero,43d90 <__alt_data_end+0xfffd1d90>
   44ca4:	0039883a 	mov	fp,zero
   44ca8:	003e5806 	br	4460c <__alt_data_end+0xfffd260c>
   44cac:	9080040c 	andi	r2,r18,16
   44cb0:	1001b326 	beq	r2,zero,45380 <___vfprintf_internal_r+0x1974>
   44cb4:	d8c02e17 	ldw	r3,184(sp)
   44cb8:	d9002a17 	ldw	r4,168(sp)
   44cbc:	d8002785 	stb	zero,158(sp)
   44cc0:	18800104 	addi	r2,r3,4
   44cc4:	1cc00017 	ldw	r19,0(r3)
   44cc8:	002d883a 	mov	r22,zero
   44ccc:	2001b516 	blt	r4,zero,453a4 <___vfprintf_internal_r+0x1998>
   44cd0:	00ffdfc4 	movi	r3,-129
   44cd4:	d8802e15 	stw	r2,184(sp)
   44cd8:	90e4703a 	and	r18,r18,r3
   44cdc:	983d0526 	beq	r19,zero,440f4 <__alt_data_end+0xfffd20f4>
   44ce0:	0039883a 	mov	fp,zero
   44ce4:	003d0806 	br	44108 <__alt_data_end+0xfffd2108>
   44ce8:	dc402617 	ldw	r17,152(sp)
   44cec:	0441d30e 	bge	zero,r17,4543c <___vfprintf_internal_r+0x1a30>
   44cf0:	dc403217 	ldw	r17,200(sp)
   44cf4:	d8803317 	ldw	r2,204(sp)
   44cf8:	1440010e 	bge	r2,r17,44d00 <___vfprintf_internal_r+0x12f4>
   44cfc:	1023883a 	mov	r17,r2
   44d00:	04400a0e 	bge	zero,r17,44d2c <___vfprintf_internal_r+0x1320>
   44d04:	d8801f17 	ldw	r2,124(sp)
   44d08:	1c47883a 	add	r3,r3,r17
   44d0c:	44000015 	stw	r16,0(r8)
   44d10:	10800044 	addi	r2,r2,1
   44d14:	44400115 	stw	r17,4(r8)
   44d18:	d8c02015 	stw	r3,128(sp)
   44d1c:	d8801f15 	stw	r2,124(sp)
   44d20:	010001c4 	movi	r4,7
   44d24:	20826516 	blt	r4,r2,456bc <___vfprintf_internal_r+0x1cb0>
   44d28:	42000204 	addi	r8,r8,8
   44d2c:	88026116 	blt	r17,zero,456b4 <___vfprintf_internal_r+0x1ca8>
   44d30:	d9003217 	ldw	r4,200(sp)
   44d34:	2463c83a 	sub	r17,r4,r17
   44d38:	04407b0e 	bge	zero,r17,44f28 <___vfprintf_internal_r+0x151c>
   44d3c:	05800404 	movi	r22,16
   44d40:	d8801f17 	ldw	r2,124(sp)
   44d44:	b4419d0e 	bge	r22,r17,453bc <___vfprintf_internal_r+0x19b0>
   44d48:	01000174 	movhi	r4,5
   44d4c:	211a3784 	addi	r4,r4,26846
   44d50:	d9002c15 	stw	r4,176(sp)
   44d54:	070001c4 	movi	fp,7
   44d58:	dcc02d17 	ldw	r19,180(sp)
   44d5c:	00000306 	br	44d6c <___vfprintf_internal_r+0x1360>
   44d60:	42000204 	addi	r8,r8,8
   44d64:	8c7ffc04 	addi	r17,r17,-16
   44d68:	b441970e 	bge	r22,r17,453c8 <___vfprintf_internal_r+0x19bc>
   44d6c:	18c00404 	addi	r3,r3,16
   44d70:	10800044 	addi	r2,r2,1
   44d74:	45000015 	stw	r20,0(r8)
   44d78:	45800115 	stw	r22,4(r8)
   44d7c:	d8c02015 	stw	r3,128(sp)
   44d80:	d8801f15 	stw	r2,124(sp)
   44d84:	e0bff60e 	bge	fp,r2,44d60 <__alt_data_end+0xfffd2d60>
   44d88:	d9801e04 	addi	r6,sp,120
   44d8c:	b80b883a 	mov	r5,r23
   44d90:	9809883a 	mov	r4,r19
   44d94:	004c8c40 	call	4c8c4 <__sprint_r>
   44d98:	103c201e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44d9c:	d8c02017 	ldw	r3,128(sp)
   44da0:	d8801f17 	ldw	r2,124(sp)
   44da4:	da000404 	addi	r8,sp,16
   44da8:	003fee06 	br	44d64 <__alt_data_end+0xfffd2d64>
   44dac:	d9002d17 	ldw	r4,180(sp)
   44db0:	d9801e04 	addi	r6,sp,120
   44db4:	b80b883a 	mov	r5,r23
   44db8:	004c8c40 	call	4c8c4 <__sprint_r>
   44dbc:	103c171e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44dc0:	d8c02017 	ldw	r3,128(sp)
   44dc4:	df002787 	ldb	fp,158(sp)
   44dc8:	da000404 	addi	r8,sp,16
   44dcc:	003d3406 	br	442a0 <__alt_data_end+0xfffd22a0>
   44dd0:	9080040c 	andi	r2,r18,16
   44dd4:	10016126 	beq	r2,zero,4535c <___vfprintf_internal_r+0x1950>
   44dd8:	d9402e17 	ldw	r5,184(sp)
   44ddc:	2cc00017 	ldw	r19,0(r5)
   44de0:	29400104 	addi	r5,r5,4
   44de4:	d9402e15 	stw	r5,184(sp)
   44de8:	982dd7fa 	srai	r22,r19,31
   44dec:	b005883a 	mov	r2,r22
   44df0:	003c5a06 	br	43f5c <__alt_data_end+0xfffd1f5c>
   44df4:	9080040c 	andi	r2,r18,16
   44df8:	10003526 	beq	r2,zero,44ed0 <___vfprintf_internal_r+0x14c4>
   44dfc:	d8c02e17 	ldw	r3,184(sp)
   44e00:	d9002a17 	ldw	r4,168(sp)
   44e04:	d8002785 	stb	zero,158(sp)
   44e08:	18800104 	addi	r2,r3,4
   44e0c:	1cc00017 	ldw	r19,0(r3)
   44e10:	002d883a 	mov	r22,zero
   44e14:	20003716 	blt	r4,zero,44ef4 <___vfprintf_internal_r+0x14e8>
   44e18:	00ffdfc4 	movi	r3,-129
   44e1c:	d8802e15 	stw	r2,184(sp)
   44e20:	90e4703a 	and	r18,r18,r3
   44e24:	0039883a 	mov	fp,zero
   44e28:	983dd426 	beq	r19,zero,4457c <__alt_data_end+0xfffd257c>
   44e2c:	00800244 	movi	r2,9
   44e30:	14fc5336 	bltu	r2,r19,43f80 <__alt_data_end+0xfffd1f80>
   44e34:	d8c02817 	ldw	r3,160(sp)
   44e38:	dc001dc4 	addi	r16,sp,119
   44e3c:	9cc00c04 	addi	r19,r19,48
   44e40:	1c07c83a 	sub	r3,r3,r16
   44e44:	dcc01dc5 	stb	r19,119(sp)
   44e48:	d8c02b15 	stw	r3,172(sp)
   44e4c:	003cc606 	br	44168 <__alt_data_end+0xfffd2168>
   44e50:	d8803317 	ldw	r2,204(sp)
   44e54:	143fffc4 	addi	r16,r2,-1
   44e58:	043f4d0e 	bge	zero,r16,44b90 <__alt_data_end+0xfffd2b90>
   44e5c:	07000404 	movi	fp,16
   44e60:	e400810e 	bge	fp,r16,45068 <___vfprintf_internal_r+0x165c>
   44e64:	01400174 	movhi	r5,5
   44e68:	295a3784 	addi	r5,r5,26846
   44e6c:	d9402c15 	stw	r5,176(sp)
   44e70:	01c001c4 	movi	r7,7
   44e74:	dcc02d17 	ldw	r19,180(sp)
   44e78:	00000306 	br	44e88 <___vfprintf_internal_r+0x147c>
   44e7c:	b5800204 	addi	r22,r22,8
   44e80:	843ffc04 	addi	r16,r16,-16
   44e84:	e4007b0e 	bge	fp,r16,45074 <___vfprintf_internal_r+0x1668>
   44e88:	18c00404 	addi	r3,r3,16
   44e8c:	8c400044 	addi	r17,r17,1
   44e90:	b5000015 	stw	r20,0(r22)
   44e94:	b7000115 	stw	fp,4(r22)
   44e98:	d8c02015 	stw	r3,128(sp)
   44e9c:	dc401f15 	stw	r17,124(sp)
   44ea0:	3c7ff60e 	bge	r7,r17,44e7c <__alt_data_end+0xfffd2e7c>
   44ea4:	d9801e04 	addi	r6,sp,120
   44ea8:	b80b883a 	mov	r5,r23
   44eac:	9809883a 	mov	r4,r19
   44eb0:	d9c03c15 	stw	r7,240(sp)
   44eb4:	004c8c40 	call	4c8c4 <__sprint_r>
   44eb8:	d9c03c17 	ldw	r7,240(sp)
   44ebc:	103bd71e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44ec0:	d8c02017 	ldw	r3,128(sp)
   44ec4:	dc401f17 	ldw	r17,124(sp)
   44ec8:	dd800404 	addi	r22,sp,16
   44ecc:	003fec06 	br	44e80 <__alt_data_end+0xfffd2e80>
   44ed0:	9080100c 	andi	r2,r18,64
   44ed4:	d8002785 	stb	zero,158(sp)
   44ed8:	10010e26 	beq	r2,zero,45314 <___vfprintf_internal_r+0x1908>
   44edc:	d9402e17 	ldw	r5,184(sp)
   44ee0:	d8c02a17 	ldw	r3,168(sp)
   44ee4:	002d883a 	mov	r22,zero
   44ee8:	28800104 	addi	r2,r5,4
   44eec:	2cc0000b 	ldhu	r19,0(r5)
   44ef0:	183fc90e 	bge	r3,zero,44e18 <__alt_data_end+0xfffd2e18>
   44ef4:	d8802e15 	stw	r2,184(sp)
   44ef8:	0039883a 	mov	fp,zero
   44efc:	9d84b03a 	or	r2,r19,r22
   44f00:	103c1e1e 	bne	r2,zero,43f7c <__alt_data_end+0xfffd1f7c>
   44f04:	00800044 	movi	r2,1
   44f08:	003e6c06 	br	448bc <__alt_data_end+0xfffd28bc>
   44f0c:	d9002d17 	ldw	r4,180(sp)
   44f10:	d9801e04 	addi	r6,sp,120
   44f14:	b80b883a 	mov	r5,r23
   44f18:	004c8c40 	call	4c8c4 <__sprint_r>
   44f1c:	103bbf1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   44f20:	d8c02017 	ldw	r3,128(sp)
   44f24:	da000404 	addi	r8,sp,16
   44f28:	d9003217 	ldw	r4,200(sp)
   44f2c:	d8802617 	ldw	r2,152(sp)
   44f30:	d9403317 	ldw	r5,204(sp)
   44f34:	8123883a 	add	r17,r16,r4
   44f38:	11400216 	blt	r2,r5,44f44 <___vfprintf_internal_r+0x1538>
   44f3c:	9100004c 	andi	r4,r18,1
   44f40:	20000d26 	beq	r4,zero,44f78 <___vfprintf_internal_r+0x156c>
   44f44:	d9003717 	ldw	r4,220(sp)
   44f48:	d9403417 	ldw	r5,208(sp)
   44f4c:	1907883a 	add	r3,r3,r4
   44f50:	d9001f17 	ldw	r4,124(sp)
   44f54:	41400015 	stw	r5,0(r8)
   44f58:	d9403717 	ldw	r5,220(sp)
   44f5c:	21000044 	addi	r4,r4,1
   44f60:	d8c02015 	stw	r3,128(sp)
   44f64:	41400115 	stw	r5,4(r8)
   44f68:	d9001f15 	stw	r4,124(sp)
   44f6c:	014001c4 	movi	r5,7
   44f70:	2901e816 	blt	r5,r4,45714 <___vfprintf_internal_r+0x1d08>
   44f74:	42000204 	addi	r8,r8,8
   44f78:	d9003317 	ldw	r4,204(sp)
   44f7c:	8121883a 	add	r16,r16,r4
   44f80:	2085c83a 	sub	r2,r4,r2
   44f84:	8461c83a 	sub	r16,r16,r17
   44f88:	1400010e 	bge	r2,r16,44f90 <___vfprintf_internal_r+0x1584>
   44f8c:	1021883a 	mov	r16,r2
   44f90:	04000a0e 	bge	zero,r16,44fbc <___vfprintf_internal_r+0x15b0>
   44f94:	d9001f17 	ldw	r4,124(sp)
   44f98:	1c07883a 	add	r3,r3,r16
   44f9c:	44400015 	stw	r17,0(r8)
   44fa0:	21000044 	addi	r4,r4,1
   44fa4:	44000115 	stw	r16,4(r8)
   44fa8:	d8c02015 	stw	r3,128(sp)
   44fac:	d9001f15 	stw	r4,124(sp)
   44fb0:	014001c4 	movi	r5,7
   44fb4:	2901fb16 	blt	r5,r4,457a4 <___vfprintf_internal_r+0x1d98>
   44fb8:	42000204 	addi	r8,r8,8
   44fbc:	8001f716 	blt	r16,zero,4579c <___vfprintf_internal_r+0x1d90>
   44fc0:	1421c83a 	sub	r16,r2,r16
   44fc4:	043d160e 	bge	zero,r16,44420 <__alt_data_end+0xfffd2420>
   44fc8:	04400404 	movi	r17,16
   44fcc:	d8801f17 	ldw	r2,124(sp)
   44fd0:	8c3efb0e 	bge	r17,r16,44bc0 <__alt_data_end+0xfffd2bc0>
   44fd4:	01400174 	movhi	r5,5
   44fd8:	295a3784 	addi	r5,r5,26846
   44fdc:	d9402c15 	stw	r5,176(sp)
   44fe0:	058001c4 	movi	r22,7
   44fe4:	dcc02d17 	ldw	r19,180(sp)
   44fe8:	00000306 	br	44ff8 <___vfprintf_internal_r+0x15ec>
   44fec:	42000204 	addi	r8,r8,8
   44ff0:	843ffc04 	addi	r16,r16,-16
   44ff4:	8c3ef50e 	bge	r17,r16,44bcc <__alt_data_end+0xfffd2bcc>
   44ff8:	18c00404 	addi	r3,r3,16
   44ffc:	10800044 	addi	r2,r2,1
   45000:	45000015 	stw	r20,0(r8)
   45004:	44400115 	stw	r17,4(r8)
   45008:	d8c02015 	stw	r3,128(sp)
   4500c:	d8801f15 	stw	r2,124(sp)
   45010:	b0bff60e 	bge	r22,r2,44fec <__alt_data_end+0xfffd2fec>
   45014:	d9801e04 	addi	r6,sp,120
   45018:	b80b883a 	mov	r5,r23
   4501c:	9809883a 	mov	r4,r19
   45020:	004c8c40 	call	4c8c4 <__sprint_r>
   45024:	103b7d1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   45028:	d8c02017 	ldw	r3,128(sp)
   4502c:	d8801f17 	ldw	r2,124(sp)
   45030:	da000404 	addi	r8,sp,16
   45034:	003fee06 	br	44ff0 <__alt_data_end+0xfffd2ff0>
   45038:	9088703a 	and	r4,r18,r2
   4503c:	203eab1e 	bne	r4,zero,44aec <__alt_data_end+0xfffd2aec>
   45040:	dc401f17 	ldw	r17,124(sp)
   45044:	40800115 	stw	r2,4(r8)
   45048:	44000015 	stw	r16,0(r8)
   4504c:	8c400044 	addi	r17,r17,1
   45050:	d8c02015 	stw	r3,128(sp)
   45054:	dc401f15 	stw	r17,124(sp)
   45058:	008001c4 	movi	r2,7
   4505c:	14400e16 	blt	r2,r17,45098 <___vfprintf_internal_r+0x168c>
   45060:	45800204 	addi	r22,r8,8
   45064:	003eca06 	br	44b90 <__alt_data_end+0xfffd2b90>
   45068:	01000174 	movhi	r4,5
   4506c:	211a3784 	addi	r4,r4,26846
   45070:	d9002c15 	stw	r4,176(sp)
   45074:	d8802c17 	ldw	r2,176(sp)
   45078:	1c07883a 	add	r3,r3,r16
   4507c:	8c400044 	addi	r17,r17,1
   45080:	b0800015 	stw	r2,0(r22)
   45084:	b4000115 	stw	r16,4(r22)
   45088:	d8c02015 	stw	r3,128(sp)
   4508c:	dc401f15 	stw	r17,124(sp)
   45090:	008001c4 	movi	r2,7
   45094:	147ebd0e 	bge	r2,r17,44b8c <__alt_data_end+0xfffd2b8c>
   45098:	d9002d17 	ldw	r4,180(sp)
   4509c:	d9801e04 	addi	r6,sp,120
   450a0:	b80b883a 	mov	r5,r23
   450a4:	004c8c40 	call	4c8c4 <__sprint_r>
   450a8:	103b5c1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   450ac:	d8c02017 	ldw	r3,128(sp)
   450b0:	dc401f17 	ldw	r17,124(sp)
   450b4:	dd800404 	addi	r22,sp,16
   450b8:	003eb506 	br	44b90 <__alt_data_end+0xfffd2b90>
   450bc:	d9002d17 	ldw	r4,180(sp)
   450c0:	d9801e04 	addi	r6,sp,120
   450c4:	b80b883a 	mov	r5,r23
   450c8:	004c8c40 	call	4c8c4 <__sprint_r>
   450cc:	103b531e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   450d0:	d8c02017 	ldw	r3,128(sp)
   450d4:	dc401f17 	ldw	r17,124(sp)
   450d8:	da000404 	addi	r8,sp,16
   450dc:	003e8d06 	br	44b14 <__alt_data_end+0xfffd2b14>
   450e0:	d9002d17 	ldw	r4,180(sp)
   450e4:	d9801e04 	addi	r6,sp,120
   450e8:	b80b883a 	mov	r5,r23
   450ec:	004c8c40 	call	4c8c4 <__sprint_r>
   450f0:	103b4a1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   450f4:	d8c02017 	ldw	r3,128(sp)
   450f8:	dc401f17 	ldw	r17,124(sp)
   450fc:	dd800404 	addi	r22,sp,16
   45100:	003e8f06 	br	44b40 <__alt_data_end+0xfffd2b40>
   45104:	0027883a 	mov	r19,zero
   45108:	003f4a06 	br	44e34 <__alt_data_end+0xfffd2e34>
   4510c:	d9002d17 	ldw	r4,180(sp)
   45110:	d9801e04 	addi	r6,sp,120
   45114:	b80b883a 	mov	r5,r23
   45118:	004c8c40 	call	4c8c4 <__sprint_r>
   4511c:	103b3f1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   45120:	d8c02017 	ldw	r3,128(sp)
   45124:	da000404 	addi	r8,sp,16
   45128:	003c7b06 	br	44318 <__alt_data_end+0xfffd2318>
   4512c:	d9402a17 	ldw	r5,168(sp)
   45130:	04e7c83a 	sub	r19,zero,r19
   45134:	07000b44 	movi	fp,45
   45138:	9804c03a 	cmpne	r2,r19,zero
   4513c:	05adc83a 	sub	r22,zero,r22
   45140:	df002785 	stb	fp,158(sp)
   45144:	b0adc83a 	sub	r22,r22,r2
   45148:	28017b16 	blt	r5,zero,45738 <___vfprintf_internal_r+0x1d2c>
   4514c:	00bfdfc4 	movi	r2,-129
   45150:	90a4703a 	and	r18,r18,r2
   45154:	003b8906 	br	43f7c <__alt_data_end+0xfffd1f7c>
   45158:	d9003617 	ldw	r4,216(sp)
   4515c:	d9403817 	ldw	r5,224(sp)
   45160:	da003d15 	stw	r8,244(sp)
   45164:	004af780 	call	4af78 <__fpclassifyd>
   45168:	da003d17 	ldw	r8,244(sp)
   4516c:	1000f026 	beq	r2,zero,45530 <___vfprintf_internal_r+0x1b24>
   45170:	d9002a17 	ldw	r4,168(sp)
   45174:	05bff7c4 	movi	r22,-33
   45178:	00bfffc4 	movi	r2,-1
   4517c:	8dac703a 	and	r22,r17,r22
   45180:	20820026 	beq	r4,r2,45984 <___vfprintf_internal_r+0x1f78>
   45184:	008011c4 	movi	r2,71
   45188:	b081f726 	beq	r22,r2,45968 <___vfprintf_internal_r+0x1f5c>
   4518c:	d9003817 	ldw	r4,224(sp)
   45190:	90c04014 	ori	r3,r18,256
   45194:	d8c02c15 	stw	r3,176(sp)
   45198:	20021516 	blt	r4,zero,459f0 <___vfprintf_internal_r+0x1fe4>
   4519c:	dcc03817 	ldw	r19,224(sp)
   451a0:	d8002905 	stb	zero,164(sp)
   451a4:	00801984 	movi	r2,102
   451a8:	8881f926 	beq	r17,r2,45990 <___vfprintf_internal_r+0x1f84>
   451ac:	00801184 	movi	r2,70
   451b0:	88821c26 	beq	r17,r2,45a24 <___vfprintf_internal_r+0x2018>
   451b4:	00801144 	movi	r2,69
   451b8:	b081ef26 	beq	r22,r2,45978 <___vfprintf_internal_r+0x1f6c>
   451bc:	d8c02a17 	ldw	r3,168(sp)
   451c0:	d8802104 	addi	r2,sp,132
   451c4:	d8800315 	stw	r2,12(sp)
   451c8:	d9403617 	ldw	r5,216(sp)
   451cc:	d8802504 	addi	r2,sp,148
   451d0:	d9002d17 	ldw	r4,180(sp)
   451d4:	d8800215 	stw	r2,8(sp)
   451d8:	d8802604 	addi	r2,sp,152
   451dc:	d8c00015 	stw	r3,0(sp)
   451e0:	d8800115 	stw	r2,4(sp)
   451e4:	01c00084 	movi	r7,2
   451e8:	980d883a 	mov	r6,r19
   451ec:	d8c03c15 	stw	r3,240(sp)
   451f0:	da003d15 	stw	r8,244(sp)
   451f4:	004613c0 	call	4613c <_dtoa_r>
   451f8:	1021883a 	mov	r16,r2
   451fc:	008019c4 	movi	r2,103
   45200:	d8c03c17 	ldw	r3,240(sp)
   45204:	da003d17 	ldw	r8,244(sp)
   45208:	88817126 	beq	r17,r2,457d0 <___vfprintf_internal_r+0x1dc4>
   4520c:	008011c4 	movi	r2,71
   45210:	88829126 	beq	r17,r2,45c58 <___vfprintf_internal_r+0x224c>
   45214:	80f9883a 	add	fp,r16,r3
   45218:	d9003617 	ldw	r4,216(sp)
   4521c:	000d883a 	mov	r6,zero
   45220:	000f883a 	mov	r7,zero
   45224:	980b883a 	mov	r5,r19
   45228:	da003d15 	stw	r8,244(sp)
   4522c:	00506480 	call	50648 <__eqdf2>
   45230:	da003d17 	ldw	r8,244(sp)
   45234:	10018d26 	beq	r2,zero,4586c <___vfprintf_internal_r+0x1e60>
   45238:	d8802117 	ldw	r2,132(sp)
   4523c:	1700062e 	bgeu	r2,fp,45258 <___vfprintf_internal_r+0x184c>
   45240:	01000c04 	movi	r4,48
   45244:	10c00044 	addi	r3,r2,1
   45248:	d8c02115 	stw	r3,132(sp)
   4524c:	11000005 	stb	r4,0(r2)
   45250:	d8802117 	ldw	r2,132(sp)
   45254:	173ffb36 	bltu	r2,fp,45244 <__alt_data_end+0xfffd3244>
   45258:	1405c83a 	sub	r2,r2,r16
   4525c:	d8803315 	stw	r2,204(sp)
   45260:	008011c4 	movi	r2,71
   45264:	b0817626 	beq	r22,r2,45840 <___vfprintf_internal_r+0x1e34>
   45268:	00801944 	movi	r2,101
   4526c:	1442800e 	bge	r2,r17,45c70 <___vfprintf_internal_r+0x2264>
   45270:	d8c02617 	ldw	r3,152(sp)
   45274:	00801984 	movi	r2,102
   45278:	d8c03215 	stw	r3,200(sp)
   4527c:	8881fe26 	beq	r17,r2,45a78 <___vfprintf_internal_r+0x206c>
   45280:	d8c03217 	ldw	r3,200(sp)
   45284:	d9003317 	ldw	r4,204(sp)
   45288:	1901dd16 	blt	r3,r4,45a00 <___vfprintf_internal_r+0x1ff4>
   4528c:	9480004c 	andi	r18,r18,1
   45290:	90022b1e 	bne	r18,zero,45b40 <___vfprintf_internal_r+0x2134>
   45294:	1805883a 	mov	r2,r3
   45298:	18028316 	blt	r3,zero,45ca8 <___vfprintf_internal_r+0x229c>
   4529c:	d8c03217 	ldw	r3,200(sp)
   452a0:	044019c4 	movi	r17,103
   452a4:	d8c02b15 	stw	r3,172(sp)
   452a8:	df002907 	ldb	fp,164(sp)
   452ac:	e001531e 	bne	fp,zero,457fc <___vfprintf_internal_r+0x1df0>
   452b0:	df002783 	ldbu	fp,158(sp)
   452b4:	d8802915 	stw	r2,164(sp)
   452b8:	dc802c17 	ldw	r18,176(sp)
   452bc:	d8002a15 	stw	zero,168(sp)
   452c0:	003baf06 	br	44180 <__alt_data_end+0xfffd2180>
   452c4:	d8c02e17 	ldw	r3,184(sp)
   452c8:	d9002e17 	ldw	r4,184(sp)
   452cc:	d9402e17 	ldw	r5,184(sp)
   452d0:	18c00017 	ldw	r3,0(r3)
   452d4:	21000117 	ldw	r4,4(r4)
   452d8:	29400204 	addi	r5,r5,8
   452dc:	d8c03615 	stw	r3,216(sp)
   452e0:	d9003815 	stw	r4,224(sp)
   452e4:	d9402e15 	stw	r5,184(sp)
   452e8:	003b5006 	br	4402c <__alt_data_end+0xfffd202c>
   452ec:	ac400007 	ldb	r17,0(r21)
   452f0:	003a2806 	br	43b94 <__alt_data_end+0xfffd1b94>
   452f4:	9080100c 	andi	r2,r18,64
   452f8:	1000a826 	beq	r2,zero,4559c <___vfprintf_internal_r+0x1b90>
   452fc:	d8c02e17 	ldw	r3,184(sp)
   45300:	002d883a 	mov	r22,zero
   45304:	1cc0000b 	ldhu	r19,0(r3)
   45308:	18c00104 	addi	r3,r3,4
   4530c:	d8c02e15 	stw	r3,184(sp)
   45310:	003caf06 	br	445d0 <__alt_data_end+0xfffd25d0>
   45314:	d9002e17 	ldw	r4,184(sp)
   45318:	d9402a17 	ldw	r5,168(sp)
   4531c:	002d883a 	mov	r22,zero
   45320:	20800104 	addi	r2,r4,4
   45324:	24c00017 	ldw	r19,0(r4)
   45328:	283ebb0e 	bge	r5,zero,44e18 <__alt_data_end+0xfffd2e18>
   4532c:	003ef106 	br	44ef4 <__alt_data_end+0xfffd2ef4>
   45330:	9080040c 	andi	r2,r18,16
   45334:	1000921e 	bne	r2,zero,45580 <___vfprintf_internal_r+0x1b74>
   45338:	9480100c 	andi	r18,r18,64
   4533c:	90013926 	beq	r18,zero,45824 <___vfprintf_internal_r+0x1e18>
   45340:	d9402e17 	ldw	r5,184(sp)
   45344:	d8c02f17 	ldw	r3,188(sp)
   45348:	28800017 	ldw	r2,0(r5)
   4534c:	29400104 	addi	r5,r5,4
   45350:	d9402e15 	stw	r5,184(sp)
   45354:	10c0000d 	sth	r3,0(r2)
   45358:	0039e406 	br	43aec <__alt_data_end+0xfffd1aec>
   4535c:	9080100c 	andi	r2,r18,64
   45360:	10008026 	beq	r2,zero,45564 <___vfprintf_internal_r+0x1b58>
   45364:	d8802e17 	ldw	r2,184(sp)
   45368:	14c0000f 	ldh	r19,0(r2)
   4536c:	10800104 	addi	r2,r2,4
   45370:	d8802e15 	stw	r2,184(sp)
   45374:	982dd7fa 	srai	r22,r19,31
   45378:	b005883a 	mov	r2,r22
   4537c:	003af706 	br	43f5c <__alt_data_end+0xfffd1f5c>
   45380:	9080100c 	andi	r2,r18,64
   45384:	d8002785 	stb	zero,158(sp)
   45388:	10008a1e 	bne	r2,zero,455b4 <___vfprintf_internal_r+0x1ba8>
   4538c:	d9002e17 	ldw	r4,184(sp)
   45390:	d9402a17 	ldw	r5,168(sp)
   45394:	002d883a 	mov	r22,zero
   45398:	20800104 	addi	r2,r4,4
   4539c:	24c00017 	ldw	r19,0(r4)
   453a0:	283e4b0e 	bge	r5,zero,44cd0 <__alt_data_end+0xfffd2cd0>
   453a4:	9d86b03a 	or	r3,r19,r22
   453a8:	d8802e15 	stw	r2,184(sp)
   453ac:	183e4c1e 	bne	r3,zero,44ce0 <__alt_data_end+0xfffd2ce0>
   453b0:	0039883a 	mov	fp,zero
   453b4:	0005883a 	mov	r2,zero
   453b8:	003d4006 	br	448bc <__alt_data_end+0xfffd28bc>
   453bc:	01400174 	movhi	r5,5
   453c0:	295a3784 	addi	r5,r5,26846
   453c4:	d9402c15 	stw	r5,176(sp)
   453c8:	d9402c17 	ldw	r5,176(sp)
   453cc:	1c47883a 	add	r3,r3,r17
   453d0:	10800044 	addi	r2,r2,1
   453d4:	41400015 	stw	r5,0(r8)
   453d8:	44400115 	stw	r17,4(r8)
   453dc:	d8c02015 	stw	r3,128(sp)
   453e0:	d8801f15 	stw	r2,124(sp)
   453e4:	010001c4 	movi	r4,7
   453e8:	20bec816 	blt	r4,r2,44f0c <__alt_data_end+0xfffd2f0c>
   453ec:	42000204 	addi	r8,r8,8
   453f0:	003ecd06 	br	44f28 <__alt_data_end+0xfffd2f28>
   453f4:	d9002a17 	ldw	r4,168(sp)
   453f8:	d8002785 	stb	zero,158(sp)
   453fc:	203d2d16 	blt	r4,zero,448b4 <__alt_data_end+0xfffd28b4>
   45400:	00bfdfc4 	movi	r2,-129
   45404:	90a4703a 	and	r18,r18,r2
   45408:	003a6106 	br	43d90 <__alt_data_end+0xfffd1d90>
   4540c:	01000174 	movhi	r4,5
   45410:	211a3784 	addi	r4,r4,26846
   45414:	d9002c15 	stw	r4,176(sp)
   45418:	003bea06 	br	443c4 <__alt_data_end+0xfffd23c4>
   4541c:	d9002d17 	ldw	r4,180(sp)
   45420:	d9801e04 	addi	r6,sp,120
   45424:	b80b883a 	mov	r5,r23
   45428:	004c8c40 	call	4c8c4 <__sprint_r>
   4542c:	103a7b1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   45430:	d8c02017 	ldw	r3,128(sp)
   45434:	da000404 	addi	r8,sp,16
   45438:	003d4106 	br	44940 <__alt_data_end+0xfffd2940>
   4543c:	d8801f17 	ldw	r2,124(sp)
   45440:	01400174 	movhi	r5,5
   45444:	01000044 	movi	r4,1
   45448:	18c00044 	addi	r3,r3,1
   4544c:	10800044 	addi	r2,r2,1
   45450:	295a2f04 	addi	r5,r5,26812
   45454:	41000115 	stw	r4,4(r8)
   45458:	41400015 	stw	r5,0(r8)
   4545c:	d8c02015 	stw	r3,128(sp)
   45460:	d8801f15 	stw	r2,124(sp)
   45464:	010001c4 	movi	r4,7
   45468:	20805c16 	blt	r4,r2,455dc <___vfprintf_internal_r+0x1bd0>
   4546c:	42000204 	addi	r8,r8,8
   45470:	8800041e 	bne	r17,zero,45484 <___vfprintf_internal_r+0x1a78>
   45474:	d8803317 	ldw	r2,204(sp)
   45478:	1000021e 	bne	r2,zero,45484 <___vfprintf_internal_r+0x1a78>
   4547c:	9080004c 	andi	r2,r18,1
   45480:	103be726 	beq	r2,zero,44420 <__alt_data_end+0xfffd2420>
   45484:	d9003717 	ldw	r4,220(sp)
   45488:	d8801f17 	ldw	r2,124(sp)
   4548c:	d9403417 	ldw	r5,208(sp)
   45490:	20c7883a 	add	r3,r4,r3
   45494:	10800044 	addi	r2,r2,1
   45498:	41000115 	stw	r4,4(r8)
   4549c:	41400015 	stw	r5,0(r8)
   454a0:	d8c02015 	stw	r3,128(sp)
   454a4:	d8801f15 	stw	r2,124(sp)
   454a8:	010001c4 	movi	r4,7
   454ac:	20812116 	blt	r4,r2,45934 <___vfprintf_internal_r+0x1f28>
   454b0:	42000204 	addi	r8,r8,8
   454b4:	0463c83a 	sub	r17,zero,r17
   454b8:	0440730e 	bge	zero,r17,45688 <___vfprintf_internal_r+0x1c7c>
   454bc:	05800404 	movi	r22,16
   454c0:	b440860e 	bge	r22,r17,456dc <___vfprintf_internal_r+0x1cd0>
   454c4:	01400174 	movhi	r5,5
   454c8:	295a3784 	addi	r5,r5,26846
   454cc:	d9402c15 	stw	r5,176(sp)
   454d0:	070001c4 	movi	fp,7
   454d4:	dcc02d17 	ldw	r19,180(sp)
   454d8:	00000306 	br	454e8 <___vfprintf_internal_r+0x1adc>
   454dc:	42000204 	addi	r8,r8,8
   454e0:	8c7ffc04 	addi	r17,r17,-16
   454e4:	b440800e 	bge	r22,r17,456e8 <___vfprintf_internal_r+0x1cdc>
   454e8:	18c00404 	addi	r3,r3,16
   454ec:	10800044 	addi	r2,r2,1
   454f0:	45000015 	stw	r20,0(r8)
   454f4:	45800115 	stw	r22,4(r8)
   454f8:	d8c02015 	stw	r3,128(sp)
   454fc:	d8801f15 	stw	r2,124(sp)
   45500:	e0bff60e 	bge	fp,r2,454dc <__alt_data_end+0xfffd34dc>
   45504:	d9801e04 	addi	r6,sp,120
   45508:	b80b883a 	mov	r5,r23
   4550c:	9809883a 	mov	r4,r19
   45510:	004c8c40 	call	4c8c4 <__sprint_r>
   45514:	103a411e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   45518:	d8c02017 	ldw	r3,128(sp)
   4551c:	d8801f17 	ldw	r2,124(sp)
   45520:	da000404 	addi	r8,sp,16
   45524:	003fee06 	br	454e0 <__alt_data_end+0xfffd34e0>
   45528:	00bfffc4 	movi	r2,-1
   4552c:	003a3f06 	br	43e2c <__alt_data_end+0xfffd1e2c>
   45530:	008011c4 	movi	r2,71
   45534:	1440b816 	blt	r2,r17,45818 <___vfprintf_internal_r+0x1e0c>
   45538:	04000174 	movhi	r16,5
   4553c:	841a2104 	addi	r16,r16,26756
   45540:	00c000c4 	movi	r3,3
   45544:	00bfdfc4 	movi	r2,-129
   45548:	d8c02915 	stw	r3,164(sp)
   4554c:	90a4703a 	and	r18,r18,r2
   45550:	df002783 	ldbu	fp,158(sp)
   45554:	d8c02b15 	stw	r3,172(sp)
   45558:	d8002a15 	stw	zero,168(sp)
   4555c:	d8003215 	stw	zero,200(sp)
   45560:	003b0706 	br	44180 <__alt_data_end+0xfffd2180>
   45564:	d8c02e17 	ldw	r3,184(sp)
   45568:	1cc00017 	ldw	r19,0(r3)
   4556c:	18c00104 	addi	r3,r3,4
   45570:	d8c02e15 	stw	r3,184(sp)
   45574:	982dd7fa 	srai	r22,r19,31
   45578:	b005883a 	mov	r2,r22
   4557c:	003a7706 	br	43f5c <__alt_data_end+0xfffd1f5c>
   45580:	d8c02e17 	ldw	r3,184(sp)
   45584:	d9002f17 	ldw	r4,188(sp)
   45588:	18800017 	ldw	r2,0(r3)
   4558c:	18c00104 	addi	r3,r3,4
   45590:	d8c02e15 	stw	r3,184(sp)
   45594:	11000015 	stw	r4,0(r2)
   45598:	00395406 	br	43aec <__alt_data_end+0xfffd1aec>
   4559c:	d9002e17 	ldw	r4,184(sp)
   455a0:	002d883a 	mov	r22,zero
   455a4:	24c00017 	ldw	r19,0(r4)
   455a8:	21000104 	addi	r4,r4,4
   455ac:	d9002e15 	stw	r4,184(sp)
   455b0:	003c0706 	br	445d0 <__alt_data_end+0xfffd25d0>
   455b4:	d9402e17 	ldw	r5,184(sp)
   455b8:	d8c02a17 	ldw	r3,168(sp)
   455bc:	002d883a 	mov	r22,zero
   455c0:	28800104 	addi	r2,r5,4
   455c4:	2cc0000b 	ldhu	r19,0(r5)
   455c8:	183dc10e 	bge	r3,zero,44cd0 <__alt_data_end+0xfffd2cd0>
   455cc:	003f7506 	br	453a4 <__alt_data_end+0xfffd33a4>
   455d0:	04000174 	movhi	r16,5
   455d4:	841a1f04 	addi	r16,r16,26748
   455d8:	003aa706 	br	44078 <__alt_data_end+0xfffd2078>
   455dc:	d9002d17 	ldw	r4,180(sp)
   455e0:	d9801e04 	addi	r6,sp,120
   455e4:	b80b883a 	mov	r5,r23
   455e8:	004c8c40 	call	4c8c4 <__sprint_r>
   455ec:	103a0b1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   455f0:	dc402617 	ldw	r17,152(sp)
   455f4:	d8c02017 	ldw	r3,128(sp)
   455f8:	da000404 	addi	r8,sp,16
   455fc:	003f9c06 	br	45470 <__alt_data_end+0xfffd3470>
   45600:	ac400043 	ldbu	r17,1(r21)
   45604:	84000814 	ori	r16,r16,32
   45608:	ad400044 	addi	r21,r21,1
   4560c:	8c403fcc 	andi	r17,r17,255
   45610:	8c40201c 	xori	r17,r17,128
   45614:	8c7fe004 	addi	r17,r17,-128
   45618:	00395e06 	br	43b94 <__alt_data_end+0xfffd1b94>
   4561c:	d8c02e15 	stw	r3,184(sp)
   45620:	0039883a 	mov	fp,zero
   45624:	003e3506 	br	44efc <__alt_data_end+0xfffd2efc>
   45628:	d9002d17 	ldw	r4,180(sp)
   4562c:	d9801e04 	addi	r6,sp,120
   45630:	b80b883a 	mov	r5,r23
   45634:	004c8c40 	call	4c8c4 <__sprint_r>
   45638:	1039f81e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   4563c:	d8c02017 	ldw	r3,128(sp)
   45640:	da000404 	addi	r8,sp,16
   45644:	003cd006 	br	44988 <__alt_data_end+0xfffd2988>
   45648:	8009883a 	mov	r4,r16
   4564c:	df003d15 	stw	fp,244(sp)
   45650:	00416b80 	call	416b8 <strlen>
   45654:	d8802b15 	stw	r2,172(sp)
   45658:	da003d17 	ldw	r8,244(sp)
   4565c:	103c200e 	bge	r2,zero,446e0 <__alt_data_end+0xfffd26e0>
   45660:	0005883a 	mov	r2,zero
   45664:	003c1e06 	br	446e0 <__alt_data_end+0xfffd26e0>
   45668:	d9002d17 	ldw	r4,180(sp)
   4566c:	d9801e04 	addi	r6,sp,120
   45670:	b80b883a 	mov	r5,r23
   45674:	004c8c40 	call	4c8c4 <__sprint_r>
   45678:	1039e81e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   4567c:	d8c02017 	ldw	r3,128(sp)
   45680:	d8801f17 	ldw	r2,124(sp)
   45684:	da000404 	addi	r8,sp,16
   45688:	d9403317 	ldw	r5,204(sp)
   4568c:	10800044 	addi	r2,r2,1
   45690:	44000015 	stw	r16,0(r8)
   45694:	28c7883a 	add	r3,r5,r3
   45698:	003b5b06 	br	44408 <__alt_data_end+0xfffd2408>
   4569c:	01000174 	movhi	r4,5
   456a0:	211a3b84 	addi	r4,r4,26862
   456a4:	d9003515 	stw	r4,212(sp)
   456a8:	003af206 	br	44274 <__alt_data_end+0xfffd2274>
   456ac:	013fffc4 	movi	r4,-1
   456b0:	003a0806 	br	43ed4 <__alt_data_end+0xfffd1ed4>
   456b4:	0023883a 	mov	r17,zero
   456b8:	003d9d06 	br	44d30 <__alt_data_end+0xfffd2d30>
   456bc:	d9002d17 	ldw	r4,180(sp)
   456c0:	d9801e04 	addi	r6,sp,120
   456c4:	b80b883a 	mov	r5,r23
   456c8:	004c8c40 	call	4c8c4 <__sprint_r>
   456cc:	1039d31e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   456d0:	d8c02017 	ldw	r3,128(sp)
   456d4:	da000404 	addi	r8,sp,16
   456d8:	003d9406 	br	44d2c <__alt_data_end+0xfffd2d2c>
   456dc:	01000174 	movhi	r4,5
   456e0:	211a3784 	addi	r4,r4,26846
   456e4:	d9002c15 	stw	r4,176(sp)
   456e8:	d9002c17 	ldw	r4,176(sp)
   456ec:	1c47883a 	add	r3,r3,r17
   456f0:	10800044 	addi	r2,r2,1
   456f4:	41000015 	stw	r4,0(r8)
   456f8:	44400115 	stw	r17,4(r8)
   456fc:	d8c02015 	stw	r3,128(sp)
   45700:	d8801f15 	stw	r2,124(sp)
   45704:	010001c4 	movi	r4,7
   45708:	20bfd716 	blt	r4,r2,45668 <__alt_data_end+0xfffd3668>
   4570c:	42000204 	addi	r8,r8,8
   45710:	003fdd06 	br	45688 <__alt_data_end+0xfffd3688>
   45714:	d9002d17 	ldw	r4,180(sp)
   45718:	d9801e04 	addi	r6,sp,120
   4571c:	b80b883a 	mov	r5,r23
   45720:	004c8c40 	call	4c8c4 <__sprint_r>
   45724:	1039bd1e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   45728:	d8802617 	ldw	r2,152(sp)
   4572c:	d8c02017 	ldw	r3,128(sp)
   45730:	da000404 	addi	r8,sp,16
   45734:	003e1006 	br	44f78 <__alt_data_end+0xfffd2f78>
   45738:	00800044 	movi	r2,1
   4573c:	10803fcc 	andi	r2,r2,255
   45740:	00c00044 	movi	r3,1
   45744:	10fa0d26 	beq	r2,r3,43f7c <__alt_data_end+0xfffd1f7c>
   45748:	00c00084 	movi	r3,2
   4574c:	10fbaf26 	beq	r2,r3,4460c <__alt_data_end+0xfffd260c>
   45750:	003a6d06 	br	44108 <__alt_data_end+0xfffd2108>
   45754:	01000174 	movhi	r4,5
   45758:	211a3b84 	addi	r4,r4,26862
   4575c:	d9003515 	stw	r4,212(sp)
   45760:	003b5406 	br	444b4 <__alt_data_end+0xfffd24b4>
   45764:	d8802a17 	ldw	r2,168(sp)
   45768:	00c00184 	movi	r3,6
   4576c:	1880012e 	bgeu	r3,r2,45774 <___vfprintf_internal_r+0x1d68>
   45770:	1805883a 	mov	r2,r3
   45774:	d8802b15 	stw	r2,172(sp)
   45778:	1000ef16 	blt	r2,zero,45b38 <___vfprintf_internal_r+0x212c>
   4577c:	04000174 	movhi	r16,5
   45780:	d8802915 	stw	r2,164(sp)
   45784:	dcc02e15 	stw	r19,184(sp)
   45788:	d8002a15 	stw	zero,168(sp)
   4578c:	d8003215 	stw	zero,200(sp)
   45790:	841a2d04 	addi	r16,r16,26804
   45794:	0039883a 	mov	fp,zero
   45798:	003a8006 	br	4419c <__alt_data_end+0xfffd219c>
   4579c:	0021883a 	mov	r16,zero
   457a0:	003e0706 	br	44fc0 <__alt_data_end+0xfffd2fc0>
   457a4:	d9002d17 	ldw	r4,180(sp)
   457a8:	d9801e04 	addi	r6,sp,120
   457ac:	b80b883a 	mov	r5,r23
   457b0:	004c8c40 	call	4c8c4 <__sprint_r>
   457b4:	1039991e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   457b8:	d8802617 	ldw	r2,152(sp)
   457bc:	d9403317 	ldw	r5,204(sp)
   457c0:	d8c02017 	ldw	r3,128(sp)
   457c4:	da000404 	addi	r8,sp,16
   457c8:	2885c83a 	sub	r2,r5,r2
   457cc:	003dfb06 	br	44fbc <__alt_data_end+0xfffd2fbc>
   457d0:	9080004c 	andi	r2,r18,1
   457d4:	103e8f1e 	bne	r2,zero,45214 <__alt_data_end+0xfffd3214>
   457d8:	d8802117 	ldw	r2,132(sp)
   457dc:	003e9e06 	br	45258 <__alt_data_end+0xfffd3258>
   457e0:	1025883a 	mov	r18,r2
   457e4:	0039883a 	mov	fp,zero
   457e8:	00800084 	movi	r2,2
   457ec:	003fd306 	br	4573c <__alt_data_end+0xfffd373c>
   457f0:	07000b44 	movi	fp,45
   457f4:	df002785 	stb	fp,158(sp)
   457f8:	003a1b06 	br	44068 <__alt_data_end+0xfffd2068>
   457fc:	00c00b44 	movi	r3,45
   45800:	d8c02785 	stb	r3,158(sp)
   45804:	d8802915 	stw	r2,164(sp)
   45808:	dc802c17 	ldw	r18,176(sp)
   4580c:	d8002a15 	stw	zero,168(sp)
   45810:	07000b44 	movi	fp,45
   45814:	003a5e06 	br	44190 <__alt_data_end+0xfffd2190>
   45818:	04000174 	movhi	r16,5
   4581c:	841a2204 	addi	r16,r16,26760
   45820:	003f4706 	br	45540 <__alt_data_end+0xfffd3540>
   45824:	d9002e17 	ldw	r4,184(sp)
   45828:	d9402f17 	ldw	r5,188(sp)
   4582c:	20800017 	ldw	r2,0(r4)
   45830:	21000104 	addi	r4,r4,4
   45834:	d9002e15 	stw	r4,184(sp)
   45838:	11400015 	stw	r5,0(r2)
   4583c:	0038ab06 	br	43aec <__alt_data_end+0xfffd1aec>
   45840:	dd802617 	ldw	r22,152(sp)
   45844:	00bfff44 	movi	r2,-3
   45848:	b0801c16 	blt	r22,r2,458bc <___vfprintf_internal_r+0x1eb0>
   4584c:	d9402a17 	ldw	r5,168(sp)
   45850:	2d801a16 	blt	r5,r22,458bc <___vfprintf_internal_r+0x1eb0>
   45854:	dd803215 	stw	r22,200(sp)
   45858:	003e8906 	br	45280 <__alt_data_end+0xfffd3280>
   4585c:	01000174 	movhi	r4,5
   45860:	211a3784 	addi	r4,r4,26846
   45864:	d9002c15 	stw	r4,176(sp)
   45868:	003c9106 	br	44ab0 <__alt_data_end+0xfffd2ab0>
   4586c:	e005883a 	mov	r2,fp
   45870:	003e7906 	br	45258 <__alt_data_end+0xfffd3258>
   45874:	d9002a17 	ldw	r4,168(sp)
   45878:	df002783 	ldbu	fp,158(sp)
   4587c:	dcc02e15 	stw	r19,184(sp)
   45880:	d9002915 	stw	r4,164(sp)
   45884:	d9002b15 	stw	r4,172(sp)
   45888:	d8002a15 	stw	zero,168(sp)
   4588c:	d8003215 	stw	zero,200(sp)
   45890:	003a3b06 	br	44180 <__alt_data_end+0xfffd2180>
   45894:	9080004c 	andi	r2,r18,1
   45898:	0039883a 	mov	fp,zero
   4589c:	10000426 	beq	r2,zero,458b0 <___vfprintf_internal_r+0x1ea4>
   458a0:	00800c04 	movi	r2,48
   458a4:	dc001dc4 	addi	r16,sp,119
   458a8:	d8801dc5 	stb	r2,119(sp)
   458ac:	003b6406 	br	44640 <__alt_data_end+0xfffd2640>
   458b0:	d8002b15 	stw	zero,172(sp)
   458b4:	dc001e04 	addi	r16,sp,120
   458b8:	003a2b06 	br	44168 <__alt_data_end+0xfffd2168>
   458bc:	8c7fff84 	addi	r17,r17,-2
   458c0:	b5bfffc4 	addi	r22,r22,-1
   458c4:	dd802615 	stw	r22,152(sp)
   458c8:	dc4022c5 	stb	r17,139(sp)
   458cc:	b000bf16 	blt	r22,zero,45bcc <___vfprintf_internal_r+0x21c0>
   458d0:	00800ac4 	movi	r2,43
   458d4:	d8802305 	stb	r2,140(sp)
   458d8:	00800244 	movi	r2,9
   458dc:	15807016 	blt	r2,r22,45aa0 <___vfprintf_internal_r+0x2094>
   458e0:	00800c04 	movi	r2,48
   458e4:	b5800c04 	addi	r22,r22,48
   458e8:	d8802345 	stb	r2,141(sp)
   458ec:	dd802385 	stb	r22,142(sp)
   458f0:	d88023c4 	addi	r2,sp,143
   458f4:	df0022c4 	addi	fp,sp,139
   458f8:	d8c03317 	ldw	r3,204(sp)
   458fc:	1739c83a 	sub	fp,r2,fp
   45900:	d9003317 	ldw	r4,204(sp)
   45904:	e0c7883a 	add	r3,fp,r3
   45908:	df003a15 	stw	fp,232(sp)
   4590c:	d8c02b15 	stw	r3,172(sp)
   45910:	00800044 	movi	r2,1
   45914:	1100b30e 	bge	r2,r4,45be4 <___vfprintf_internal_r+0x21d8>
   45918:	d8c02b17 	ldw	r3,172(sp)
   4591c:	18c00044 	addi	r3,r3,1
   45920:	d8c02b15 	stw	r3,172(sp)
   45924:	1805883a 	mov	r2,r3
   45928:	1800ac16 	blt	r3,zero,45bdc <___vfprintf_internal_r+0x21d0>
   4592c:	d8003215 	stw	zero,200(sp)
   45930:	003e5d06 	br	452a8 <__alt_data_end+0xfffd32a8>
   45934:	d9002d17 	ldw	r4,180(sp)
   45938:	d9801e04 	addi	r6,sp,120
   4593c:	b80b883a 	mov	r5,r23
   45940:	004c8c40 	call	4c8c4 <__sprint_r>
   45944:	1039351e 	bne	r2,zero,43e1c <__alt_data_end+0xfffd1e1c>
   45948:	dc402617 	ldw	r17,152(sp)
   4594c:	d8c02017 	ldw	r3,128(sp)
   45950:	d8801f17 	ldw	r2,124(sp)
   45954:	da000404 	addi	r8,sp,16
   45958:	003ed606 	br	454b4 <__alt_data_end+0xfffd34b4>
   4595c:	182b883a 	mov	r21,r3
   45960:	d8002a15 	stw	zero,168(sp)
   45964:	00388c06 	br	43b98 <__alt_data_end+0xfffd1b98>
   45968:	d8802a17 	ldw	r2,168(sp)
   4596c:	103e071e 	bne	r2,zero,4518c <__alt_data_end+0xfffd318c>
   45970:	dc002a15 	stw	r16,168(sp)
   45974:	003e0506 	br	4518c <__alt_data_end+0xfffd318c>
   45978:	d9002a17 	ldw	r4,168(sp)
   4597c:	20c00044 	addi	r3,r4,1
   45980:	003e0f06 	br	451c0 <__alt_data_end+0xfffd31c0>
   45984:	01400184 	movi	r5,6
   45988:	d9402a15 	stw	r5,168(sp)
   4598c:	003dff06 	br	4518c <__alt_data_end+0xfffd318c>
   45990:	d8802104 	addi	r2,sp,132
   45994:	d8800315 	stw	r2,12(sp)
   45998:	d8802504 	addi	r2,sp,148
   4599c:	d8800215 	stw	r2,8(sp)
   459a0:	d8802604 	addi	r2,sp,152
   459a4:	d8800115 	stw	r2,4(sp)
   459a8:	d8802a17 	ldw	r2,168(sp)
   459ac:	d9403617 	ldw	r5,216(sp)
   459b0:	d9002d17 	ldw	r4,180(sp)
   459b4:	d8800015 	stw	r2,0(sp)
   459b8:	01c000c4 	movi	r7,3
   459bc:	980d883a 	mov	r6,r19
   459c0:	da003d15 	stw	r8,244(sp)
   459c4:	004613c0 	call	4613c <_dtoa_r>
   459c8:	d8c02a17 	ldw	r3,168(sp)
   459cc:	da003d17 	ldw	r8,244(sp)
   459d0:	1021883a 	mov	r16,r2
   459d4:	10f9883a 	add	fp,r2,r3
   459d8:	81000007 	ldb	r4,0(r16)
   459dc:	00800c04 	movi	r2,48
   459e0:	20805e26 	beq	r4,r2,45b5c <___vfprintf_internal_r+0x2150>
   459e4:	d8c02617 	ldw	r3,152(sp)
   459e8:	e0f9883a 	add	fp,fp,r3
   459ec:	003e0a06 	br	45218 <__alt_data_end+0xfffd3218>
   459f0:	00c00b44 	movi	r3,45
   459f4:	24e0003c 	xorhi	r19,r4,32768
   459f8:	d8c02905 	stb	r3,164(sp)
   459fc:	003de906 	br	451a4 <__alt_data_end+0xfffd31a4>
   45a00:	d8c03217 	ldw	r3,200(sp)
   45a04:	00c07a0e 	bge	zero,r3,45bf0 <___vfprintf_internal_r+0x21e4>
   45a08:	00800044 	movi	r2,1
   45a0c:	d9003317 	ldw	r4,204(sp)
   45a10:	1105883a 	add	r2,r2,r4
   45a14:	d8802b15 	stw	r2,172(sp)
   45a18:	10004e16 	blt	r2,zero,45b54 <___vfprintf_internal_r+0x2148>
   45a1c:	044019c4 	movi	r17,103
   45a20:	003e2106 	br	452a8 <__alt_data_end+0xfffd32a8>
   45a24:	d9002a17 	ldw	r4,168(sp)
   45a28:	d8802104 	addi	r2,sp,132
   45a2c:	d8800315 	stw	r2,12(sp)
   45a30:	d9000015 	stw	r4,0(sp)
   45a34:	d8802504 	addi	r2,sp,148
   45a38:	d9403617 	ldw	r5,216(sp)
   45a3c:	d9002d17 	ldw	r4,180(sp)
   45a40:	d8800215 	stw	r2,8(sp)
   45a44:	d8802604 	addi	r2,sp,152
   45a48:	d8800115 	stw	r2,4(sp)
   45a4c:	01c000c4 	movi	r7,3
   45a50:	980d883a 	mov	r6,r19
   45a54:	da003d15 	stw	r8,244(sp)
   45a58:	004613c0 	call	4613c <_dtoa_r>
   45a5c:	d8c02a17 	ldw	r3,168(sp)
   45a60:	da003d17 	ldw	r8,244(sp)
   45a64:	1021883a 	mov	r16,r2
   45a68:	00801184 	movi	r2,70
   45a6c:	80f9883a 	add	fp,r16,r3
   45a70:	88bfd926 	beq	r17,r2,459d8 <__alt_data_end+0xfffd39d8>
   45a74:	003de806 	br	45218 <__alt_data_end+0xfffd3218>
   45a78:	d9002a17 	ldw	r4,168(sp)
   45a7c:	00c04d0e 	bge	zero,r3,45bb4 <___vfprintf_internal_r+0x21a8>
   45a80:	2000441e 	bne	r4,zero,45b94 <___vfprintf_internal_r+0x2188>
   45a84:	9480004c 	andi	r18,r18,1
   45a88:	9000421e 	bne	r18,zero,45b94 <___vfprintf_internal_r+0x2188>
   45a8c:	1805883a 	mov	r2,r3
   45a90:	18006f16 	blt	r3,zero,45c50 <___vfprintf_internal_r+0x2244>
   45a94:	d8c03217 	ldw	r3,200(sp)
   45a98:	d8c02b15 	stw	r3,172(sp)
   45a9c:	003e0206 	br	452a8 <__alt_data_end+0xfffd32a8>
   45aa0:	df0022c4 	addi	fp,sp,139
   45aa4:	dc002a15 	stw	r16,168(sp)
   45aa8:	4027883a 	mov	r19,r8
   45aac:	e021883a 	mov	r16,fp
   45ab0:	b009883a 	mov	r4,r22
   45ab4:	01400284 	movi	r5,10
   45ab8:	00407c40 	call	407c4 <__modsi3>
   45abc:	10800c04 	addi	r2,r2,48
   45ac0:	843fffc4 	addi	r16,r16,-1
   45ac4:	b009883a 	mov	r4,r22
   45ac8:	01400284 	movi	r5,10
   45acc:	80800005 	stb	r2,0(r16)
   45ad0:	00407400 	call	40740 <__divsi3>
   45ad4:	102d883a 	mov	r22,r2
   45ad8:	00800244 	movi	r2,9
   45adc:	15bff416 	blt	r2,r22,45ab0 <__alt_data_end+0xfffd3ab0>
   45ae0:	9811883a 	mov	r8,r19
   45ae4:	b0800c04 	addi	r2,r22,48
   45ae8:	8027883a 	mov	r19,r16
   45aec:	997fffc4 	addi	r5,r19,-1
   45af0:	98bfffc5 	stb	r2,-1(r19)
   45af4:	dc002a17 	ldw	r16,168(sp)
   45af8:	2f006d2e 	bgeu	r5,fp,45cb0 <___vfprintf_internal_r+0x22a4>
   45afc:	d9c02384 	addi	r7,sp,142
   45b00:	3ccfc83a 	sub	r7,r7,r19
   45b04:	d9002344 	addi	r4,sp,141
   45b08:	e1cf883a 	add	r7,fp,r7
   45b0c:	00000106 	br	45b14 <___vfprintf_internal_r+0x2108>
   45b10:	28800003 	ldbu	r2,0(r5)
   45b14:	20800005 	stb	r2,0(r4)
   45b18:	21000044 	addi	r4,r4,1
   45b1c:	29400044 	addi	r5,r5,1
   45b20:	393ffb1e 	bne	r7,r4,45b10 <__alt_data_end+0xfffd3b10>
   45b24:	d8802304 	addi	r2,sp,140
   45b28:	14c5c83a 	sub	r2,r2,r19
   45b2c:	d8c02344 	addi	r3,sp,141
   45b30:	1885883a 	add	r2,r3,r2
   45b34:	003f7006 	br	458f8 <__alt_data_end+0xfffd38f8>
   45b38:	0005883a 	mov	r2,zero
   45b3c:	003f0f06 	br	4577c <__alt_data_end+0xfffd377c>
   45b40:	d8c03217 	ldw	r3,200(sp)
   45b44:	18c00044 	addi	r3,r3,1
   45b48:	d8c02b15 	stw	r3,172(sp)
   45b4c:	1805883a 	mov	r2,r3
   45b50:	183fb20e 	bge	r3,zero,45a1c <__alt_data_end+0xfffd3a1c>
   45b54:	0005883a 	mov	r2,zero
   45b58:	003fb006 	br	45a1c <__alt_data_end+0xfffd3a1c>
   45b5c:	d9003617 	ldw	r4,216(sp)
   45b60:	000d883a 	mov	r6,zero
   45b64:	000f883a 	mov	r7,zero
   45b68:	980b883a 	mov	r5,r19
   45b6c:	d8c03c15 	stw	r3,240(sp)
   45b70:	da003d15 	stw	r8,244(sp)
   45b74:	00506480 	call	50648 <__eqdf2>
   45b78:	d8c03c17 	ldw	r3,240(sp)
   45b7c:	da003d17 	ldw	r8,244(sp)
   45b80:	103f9826 	beq	r2,zero,459e4 <__alt_data_end+0xfffd39e4>
   45b84:	00800044 	movi	r2,1
   45b88:	10c7c83a 	sub	r3,r2,r3
   45b8c:	d8c02615 	stw	r3,152(sp)
   45b90:	003f9506 	br	459e8 <__alt_data_end+0xfffd39e8>
   45b94:	d9002a17 	ldw	r4,168(sp)
   45b98:	d8c03217 	ldw	r3,200(sp)
   45b9c:	20800044 	addi	r2,r4,1
   45ba0:	1885883a 	add	r2,r3,r2
   45ba4:	d8802b15 	stw	r2,172(sp)
   45ba8:	103dbf0e 	bge	r2,zero,452a8 <__alt_data_end+0xfffd32a8>
   45bac:	0005883a 	mov	r2,zero
   45bb0:	003dbd06 	br	452a8 <__alt_data_end+0xfffd32a8>
   45bb4:	2000201e 	bne	r4,zero,45c38 <___vfprintf_internal_r+0x222c>
   45bb8:	9480004c 	andi	r18,r18,1
   45bbc:	90001e1e 	bne	r18,zero,45c38 <___vfprintf_internal_r+0x222c>
   45bc0:	00800044 	movi	r2,1
   45bc4:	d8802b15 	stw	r2,172(sp)
   45bc8:	003db706 	br	452a8 <__alt_data_end+0xfffd32a8>
   45bcc:	00800b44 	movi	r2,45
   45bd0:	05adc83a 	sub	r22,zero,r22
   45bd4:	d8802305 	stb	r2,140(sp)
   45bd8:	003f3f06 	br	458d8 <__alt_data_end+0xfffd38d8>
   45bdc:	0005883a 	mov	r2,zero
   45be0:	003f5206 	br	4592c <__alt_data_end+0xfffd392c>
   45be4:	90a4703a 	and	r18,r18,r2
   45be8:	903f4e26 	beq	r18,zero,45924 <__alt_data_end+0xfffd3924>
   45bec:	003f4a06 	br	45918 <__alt_data_end+0xfffd3918>
   45bf0:	00800084 	movi	r2,2
   45bf4:	10c5c83a 	sub	r2,r2,r3
   45bf8:	003f8406 	br	45a0c <__alt_data_end+0xfffd3a0c>
   45bfc:	d9402e17 	ldw	r5,184(sp)
   45c00:	d9002e17 	ldw	r4,184(sp)
   45c04:	ac400043 	ldbu	r17,1(r21)
   45c08:	29400017 	ldw	r5,0(r5)
   45c0c:	20800104 	addi	r2,r4,4
   45c10:	d8802e15 	stw	r2,184(sp)
   45c14:	d9402a15 	stw	r5,168(sp)
   45c18:	182b883a 	mov	r21,r3
   45c1c:	283e7b0e 	bge	r5,zero,4560c <__alt_data_end+0xfffd360c>
   45c20:	8c403fcc 	andi	r17,r17,255
   45c24:	017fffc4 	movi	r5,-1
   45c28:	8c40201c 	xori	r17,r17,128
   45c2c:	d9402a15 	stw	r5,168(sp)
   45c30:	8c7fe004 	addi	r17,r17,-128
   45c34:	0037d706 	br	43b94 <__alt_data_end+0xfffd1b94>
   45c38:	d8c02a17 	ldw	r3,168(sp)
   45c3c:	18c00084 	addi	r3,r3,2
   45c40:	d8c02b15 	stw	r3,172(sp)
   45c44:	1805883a 	mov	r2,r3
   45c48:	183d970e 	bge	r3,zero,452a8 <__alt_data_end+0xfffd32a8>
   45c4c:	003fd706 	br	45bac <__alt_data_end+0xfffd3bac>
   45c50:	0005883a 	mov	r2,zero
   45c54:	003f8f06 	br	45a94 <__alt_data_end+0xfffd3a94>
   45c58:	9080004c 	andi	r2,r18,1
   45c5c:	103f821e 	bne	r2,zero,45a68 <__alt_data_end+0xfffd3a68>
   45c60:	d8802117 	ldw	r2,132(sp)
   45c64:	1405c83a 	sub	r2,r2,r16
   45c68:	d8803315 	stw	r2,204(sp)
   45c6c:	b47ef426 	beq	r22,r17,45840 <__alt_data_end+0xfffd3840>
   45c70:	dd802617 	ldw	r22,152(sp)
   45c74:	003f1206 	br	458c0 <__alt_data_end+0xfffd38c0>
   45c78:	d8c02b03 	ldbu	r3,172(sp)
   45c7c:	d8c02785 	stb	r3,158(sp)
   45c80:	0038df06 	br	44000 <__alt_data_end+0xfffd2000>
   45c84:	d8c02b03 	ldbu	r3,172(sp)
   45c88:	d8c02785 	stb	r3,158(sp)
   45c8c:	0038aa06 	br	43f38 <__alt_data_end+0xfffd1f38>
   45c90:	d8c02b03 	ldbu	r3,172(sp)
   45c94:	d8c02785 	stb	r3,158(sp)
   45c98:	003a4306 	br	445a8 <__alt_data_end+0xfffd25a8>
   45c9c:	d8c02b03 	ldbu	r3,172(sp)
   45ca0:	d8c02785 	stb	r3,158(sp)
   45ca4:	003af506 	br	4487c <__alt_data_end+0xfffd287c>
   45ca8:	0005883a 	mov	r2,zero
   45cac:	003d7b06 	br	4529c <__alt_data_end+0xfffd329c>
   45cb0:	d8802344 	addi	r2,sp,141
   45cb4:	003f1006 	br	458f8 <__alt_data_end+0xfffd38f8>
   45cb8:	d8c02b03 	ldbu	r3,172(sp)
   45cbc:	d8c02785 	stb	r3,158(sp)
   45cc0:	0038fd06 	br	440b8 <__alt_data_end+0xfffd20b8>
   45cc4:	d8c02b03 	ldbu	r3,172(sp)
   45cc8:	d8c02785 	stb	r3,158(sp)
   45ccc:	003a9706 	br	4472c <__alt_data_end+0xfffd272c>
   45cd0:	d8c02b03 	ldbu	r3,172(sp)
   45cd4:	d8c02785 	stb	r3,158(sp)
   45cd8:	003a1806 	br	4453c <__alt_data_end+0xfffd253c>
   45cdc:	d8c02b03 	ldbu	r3,172(sp)
   45ce0:	d8c02785 	stb	r3,158(sp)
   45ce4:	003abe06 	br	447e0 <__alt_data_end+0xfffd27e0>

00045ce8 <__vfprintf_internal>:
   45ce8:	008001b4 	movhi	r2,6
   45cec:	10a18604 	addi	r2,r2,-31208
   45cf0:	300f883a 	mov	r7,r6
   45cf4:	280d883a 	mov	r6,r5
   45cf8:	200b883a 	mov	r5,r4
   45cfc:	11000017 	ldw	r4,0(r2)
   45d00:	0043a0c1 	jmpi	43a0c <___vfprintf_internal_r>

00045d04 <__sbprintf>:
   45d04:	2880030b 	ldhu	r2,12(r5)
   45d08:	2ac01917 	ldw	r11,100(r5)
   45d0c:	2a80038b 	ldhu	r10,14(r5)
   45d10:	2a400717 	ldw	r9,28(r5)
   45d14:	2a000917 	ldw	r8,36(r5)
   45d18:	defee204 	addi	sp,sp,-1144
   45d1c:	00c10004 	movi	r3,1024
   45d20:	dc011a15 	stw	r16,1128(sp)
   45d24:	10bfff4c 	andi	r2,r2,65533
   45d28:	2821883a 	mov	r16,r5
   45d2c:	d8cb883a 	add	r5,sp,r3
   45d30:	dc811c15 	stw	r18,1136(sp)
   45d34:	dc411b15 	stw	r17,1132(sp)
   45d38:	dfc11d15 	stw	ra,1140(sp)
   45d3c:	2025883a 	mov	r18,r4
   45d40:	d881030d 	sth	r2,1036(sp)
   45d44:	dac11915 	stw	r11,1124(sp)
   45d48:	da81038d 	sth	r10,1038(sp)
   45d4c:	da410715 	stw	r9,1052(sp)
   45d50:	da010915 	stw	r8,1060(sp)
   45d54:	dec10015 	stw	sp,1024(sp)
   45d58:	dec10415 	stw	sp,1040(sp)
   45d5c:	d8c10215 	stw	r3,1032(sp)
   45d60:	d8c10515 	stw	r3,1044(sp)
   45d64:	d8010615 	stw	zero,1048(sp)
   45d68:	0043a0c0 	call	43a0c <___vfprintf_internal_r>
   45d6c:	1023883a 	mov	r17,r2
   45d70:	10000416 	blt	r2,zero,45d84 <__sbprintf+0x80>
   45d74:	d9410004 	addi	r5,sp,1024
   45d78:	9009883a 	mov	r4,r18
   45d7c:	00479e00 	call	479e0 <_fflush_r>
   45d80:	10000d1e 	bne	r2,zero,45db8 <__sbprintf+0xb4>
   45d84:	d881030b 	ldhu	r2,1036(sp)
   45d88:	1080100c 	andi	r2,r2,64
   45d8c:	10000326 	beq	r2,zero,45d9c <__sbprintf+0x98>
   45d90:	8080030b 	ldhu	r2,12(r16)
   45d94:	10801014 	ori	r2,r2,64
   45d98:	8080030d 	sth	r2,12(r16)
   45d9c:	8805883a 	mov	r2,r17
   45da0:	dfc11d17 	ldw	ra,1140(sp)
   45da4:	dc811c17 	ldw	r18,1136(sp)
   45da8:	dc411b17 	ldw	r17,1132(sp)
   45dac:	dc011a17 	ldw	r16,1128(sp)
   45db0:	dec11e04 	addi	sp,sp,1144
   45db4:	f800283a 	ret
   45db8:	047fffc4 	movi	r17,-1
   45dbc:	003ff106 	br	45d84 <__alt_data_end+0xfffd3d84>

00045dc0 <__swsetup_r>:
   45dc0:	008001b4 	movhi	r2,6
   45dc4:	defffd04 	addi	sp,sp,-12
   45dc8:	10a18604 	addi	r2,r2,-31208
   45dcc:	dc400115 	stw	r17,4(sp)
   45dd0:	2023883a 	mov	r17,r4
   45dd4:	11000017 	ldw	r4,0(r2)
   45dd8:	dc000015 	stw	r16,0(sp)
   45ddc:	dfc00215 	stw	ra,8(sp)
   45de0:	2821883a 	mov	r16,r5
   45de4:	20000226 	beq	r4,zero,45df0 <__swsetup_r+0x30>
   45de8:	20800e17 	ldw	r2,56(r4)
   45dec:	10003126 	beq	r2,zero,45eb4 <__swsetup_r+0xf4>
   45df0:	8080030b 	ldhu	r2,12(r16)
   45df4:	10c0020c 	andi	r3,r2,8
   45df8:	1009883a 	mov	r4,r2
   45dfc:	18000f26 	beq	r3,zero,45e3c <__swsetup_r+0x7c>
   45e00:	80c00417 	ldw	r3,16(r16)
   45e04:	18001526 	beq	r3,zero,45e5c <__swsetup_r+0x9c>
   45e08:	1100004c 	andi	r4,r2,1
   45e0c:	20001c1e 	bne	r4,zero,45e80 <__swsetup_r+0xc0>
   45e10:	1080008c 	andi	r2,r2,2
   45e14:	1000291e 	bne	r2,zero,45ebc <__swsetup_r+0xfc>
   45e18:	80800517 	ldw	r2,20(r16)
   45e1c:	80800215 	stw	r2,8(r16)
   45e20:	18001c26 	beq	r3,zero,45e94 <__swsetup_r+0xd4>
   45e24:	0005883a 	mov	r2,zero
   45e28:	dfc00217 	ldw	ra,8(sp)
   45e2c:	dc400117 	ldw	r17,4(sp)
   45e30:	dc000017 	ldw	r16,0(sp)
   45e34:	dec00304 	addi	sp,sp,12
   45e38:	f800283a 	ret
   45e3c:	2080040c 	andi	r2,r4,16
   45e40:	10002e26 	beq	r2,zero,45efc <__swsetup_r+0x13c>
   45e44:	2080010c 	andi	r2,r4,4
   45e48:	10001e1e 	bne	r2,zero,45ec4 <__swsetup_r+0x104>
   45e4c:	80c00417 	ldw	r3,16(r16)
   45e50:	20800214 	ori	r2,r4,8
   45e54:	8080030d 	sth	r2,12(r16)
   45e58:	183feb1e 	bne	r3,zero,45e08 <__alt_data_end+0xfffd3e08>
   45e5c:	1100a00c 	andi	r4,r2,640
   45e60:	01408004 	movi	r5,512
   45e64:	217fe826 	beq	r4,r5,45e08 <__alt_data_end+0xfffd3e08>
   45e68:	800b883a 	mov	r5,r16
   45e6c:	8809883a 	mov	r4,r17
   45e70:	004897c0 	call	4897c <__smakebuf_r>
   45e74:	8080030b 	ldhu	r2,12(r16)
   45e78:	80c00417 	ldw	r3,16(r16)
   45e7c:	003fe206 	br	45e08 <__alt_data_end+0xfffd3e08>
   45e80:	80800517 	ldw	r2,20(r16)
   45e84:	80000215 	stw	zero,8(r16)
   45e88:	0085c83a 	sub	r2,zero,r2
   45e8c:	80800615 	stw	r2,24(r16)
   45e90:	183fe41e 	bne	r3,zero,45e24 <__alt_data_end+0xfffd3e24>
   45e94:	80c0030b 	ldhu	r3,12(r16)
   45e98:	0005883a 	mov	r2,zero
   45e9c:	1900200c 	andi	r4,r3,128
   45ea0:	203fe126 	beq	r4,zero,45e28 <__alt_data_end+0xfffd3e28>
   45ea4:	18c01014 	ori	r3,r3,64
   45ea8:	80c0030d 	sth	r3,12(r16)
   45eac:	00bfffc4 	movi	r2,-1
   45eb0:	003fdd06 	br	45e28 <__alt_data_end+0xfffd3e28>
   45eb4:	0047dcc0 	call	47dcc <__sinit>
   45eb8:	003fcd06 	br	45df0 <__alt_data_end+0xfffd3df0>
   45ebc:	0005883a 	mov	r2,zero
   45ec0:	003fd606 	br	45e1c <__alt_data_end+0xfffd3e1c>
   45ec4:	81400c17 	ldw	r5,48(r16)
   45ec8:	28000626 	beq	r5,zero,45ee4 <__swsetup_r+0x124>
   45ecc:	80801004 	addi	r2,r16,64
   45ed0:	28800326 	beq	r5,r2,45ee0 <__swsetup_r+0x120>
   45ed4:	8809883a 	mov	r4,r17
   45ed8:	0047f400 	call	47f40 <_free_r>
   45edc:	8100030b 	ldhu	r4,12(r16)
   45ee0:	80000c15 	stw	zero,48(r16)
   45ee4:	80c00417 	ldw	r3,16(r16)
   45ee8:	00bff6c4 	movi	r2,-37
   45eec:	1108703a 	and	r4,r2,r4
   45ef0:	80000115 	stw	zero,4(r16)
   45ef4:	80c00015 	stw	r3,0(r16)
   45ef8:	003fd506 	br	45e50 <__alt_data_end+0xfffd3e50>
   45efc:	00800244 	movi	r2,9
   45f00:	88800015 	stw	r2,0(r17)
   45f04:	20801014 	ori	r2,r4,64
   45f08:	8080030d 	sth	r2,12(r16)
   45f0c:	00bfffc4 	movi	r2,-1
   45f10:	003fc506 	br	45e28 <__alt_data_end+0xfffd3e28>

00045f14 <quorem>:
   45f14:	defff204 	addi	sp,sp,-56
   45f18:	ddc00b15 	stw	r23,44(sp)
   45f1c:	20800417 	ldw	r2,16(r4)
   45f20:	2dc00417 	ldw	r23,16(r5)
   45f24:	dfc00d15 	stw	ra,52(sp)
   45f28:	df000c15 	stw	fp,48(sp)
   45f2c:	dd800a15 	stw	r22,40(sp)
   45f30:	dd400915 	stw	r21,36(sp)
   45f34:	dd000815 	stw	r20,32(sp)
   45f38:	dcc00715 	stw	r19,28(sp)
   45f3c:	dc800615 	stw	r18,24(sp)
   45f40:	dc400515 	stw	r17,20(sp)
   45f44:	dc000415 	stw	r16,16(sp)
   45f48:	15c07a16 	blt	r2,r23,46134 <quorem+0x220>
   45f4c:	bdffffc4 	addi	r23,r23,-1
   45f50:	bde9883a 	add	r20,r23,r23
   45f54:	28c00504 	addi	r3,r5,20
   45f58:	a529883a 	add	r20,r20,r20
   45f5c:	1d39883a 	add	fp,r3,r20
   45f60:	24c00504 	addi	r19,r4,20
   45f64:	d9400215 	stw	r5,8(sp)
   45f68:	9d29883a 	add	r20,r19,r20
   45f6c:	e1400017 	ldw	r5,0(fp)
   45f70:	d9000015 	stw	r4,0(sp)
   45f74:	a1000017 	ldw	r4,0(r20)
   45f78:	29400044 	addi	r5,r5,1
   45f7c:	d8c00115 	stw	r3,4(sp)
   45f80:	dd000315 	stw	r20,12(sp)
   45f84:	00408380 	call	40838 <__udivsi3>
   45f88:	1025883a 	mov	r18,r2
   45f8c:	10003026 	beq	r2,zero,46050 <quorem+0x13c>
   45f90:	dc400117 	ldw	r17,4(sp)
   45f94:	9829883a 	mov	r20,r19
   45f98:	002d883a 	mov	r22,zero
   45f9c:	0021883a 	mov	r16,zero
   45fa0:	8d400017 	ldw	r21,0(r17)
   45fa4:	900b883a 	mov	r5,r18
   45fa8:	8c400104 	addi	r17,r17,4
   45fac:	a93fffcc 	andi	r4,r21,65535
   45fb0:	004146c0 	call	4146c <__mulsi3>
   45fb4:	a808d43a 	srli	r4,r21,16
   45fb8:	900b883a 	mov	r5,r18
   45fbc:	15ad883a 	add	r22,r2,r22
   45fc0:	004146c0 	call	4146c <__mulsi3>
   45fc4:	a1000017 	ldw	r4,0(r20)
   45fc8:	b00cd43a 	srli	r6,r22,16
   45fcc:	b0ffffcc 	andi	r3,r22,65535
   45fd0:	217fffcc 	andi	r5,r4,65535
   45fd4:	2c21883a 	add	r16,r5,r16
   45fd8:	80c7c83a 	sub	r3,r16,r3
   45fdc:	2008d43a 	srli	r4,r4,16
   45fe0:	1185883a 	add	r2,r2,r6
   45fe4:	1821d43a 	srai	r16,r3,16
   45fe8:	117fffcc 	andi	r5,r2,65535
   45fec:	2149c83a 	sub	r4,r4,r5
   45ff0:	2421883a 	add	r16,r4,r16
   45ff4:	8008943a 	slli	r4,r16,16
   45ff8:	18ffffcc 	andi	r3,r3,65535
   45ffc:	102cd43a 	srli	r22,r2,16
   46000:	20c8b03a 	or	r4,r4,r3
   46004:	a1000015 	stw	r4,0(r20)
   46008:	8021d43a 	srai	r16,r16,16
   4600c:	a5000104 	addi	r20,r20,4
   46010:	e47fe32e 	bgeu	fp,r17,45fa0 <__alt_data_end+0xfffd3fa0>
   46014:	d8c00317 	ldw	r3,12(sp)
   46018:	18800017 	ldw	r2,0(r3)
   4601c:	10000c1e 	bne	r2,zero,46050 <quorem+0x13c>
   46020:	18bfff04 	addi	r2,r3,-4
   46024:	9880082e 	bgeu	r19,r2,46048 <quorem+0x134>
   46028:	18ffff17 	ldw	r3,-4(r3)
   4602c:	18000326 	beq	r3,zero,4603c <quorem+0x128>
   46030:	00000506 	br	46048 <quorem+0x134>
   46034:	10c00017 	ldw	r3,0(r2)
   46038:	1800031e 	bne	r3,zero,46048 <quorem+0x134>
   4603c:	10bfff04 	addi	r2,r2,-4
   46040:	bdffffc4 	addi	r23,r23,-1
   46044:	98bffb36 	bltu	r19,r2,46034 <__alt_data_end+0xfffd4034>
   46048:	d8c00017 	ldw	r3,0(sp)
   4604c:	1dc00415 	stw	r23,16(r3)
   46050:	d9400217 	ldw	r5,8(sp)
   46054:	d9000017 	ldw	r4,0(sp)
   46058:	004a1780 	call	4a178 <__mcmp>
   4605c:	10002816 	blt	r2,zero,46100 <quorem+0x1ec>
   46060:	dc400117 	ldw	r17,4(sp)
   46064:	94800044 	addi	r18,r18,1
   46068:	980d883a 	mov	r6,r19
   4606c:	0007883a 	mov	r3,zero
   46070:	31000017 	ldw	r4,0(r6)
   46074:	89400017 	ldw	r5,0(r17)
   46078:	31800104 	addi	r6,r6,4
   4607c:	20bfffcc 	andi	r2,r4,65535
   46080:	10c7883a 	add	r3,r2,r3
   46084:	28bfffcc 	andi	r2,r5,65535
   46088:	1885c83a 	sub	r2,r3,r2
   4608c:	280ad43a 	srli	r5,r5,16
   46090:	2008d43a 	srli	r4,r4,16
   46094:	1007d43a 	srai	r3,r2,16
   46098:	10bfffcc 	andi	r2,r2,65535
   4609c:	2149c83a 	sub	r4,r4,r5
   460a0:	20c9883a 	add	r4,r4,r3
   460a4:	200a943a 	slli	r5,r4,16
   460a8:	8c400104 	addi	r17,r17,4
   460ac:	2007d43a 	srai	r3,r4,16
   460b0:	2884b03a 	or	r2,r5,r2
   460b4:	30bfff15 	stw	r2,-4(r6)
   460b8:	e47fed2e 	bgeu	fp,r17,46070 <__alt_data_end+0xfffd4070>
   460bc:	bdc5883a 	add	r2,r23,r23
   460c0:	1085883a 	add	r2,r2,r2
   460c4:	9887883a 	add	r3,r19,r2
   460c8:	18800017 	ldw	r2,0(r3)
   460cc:	10000c1e 	bne	r2,zero,46100 <quorem+0x1ec>
   460d0:	18bfff04 	addi	r2,r3,-4
   460d4:	9880082e 	bgeu	r19,r2,460f8 <quorem+0x1e4>
   460d8:	18ffff17 	ldw	r3,-4(r3)
   460dc:	18000326 	beq	r3,zero,460ec <quorem+0x1d8>
   460e0:	00000506 	br	460f8 <quorem+0x1e4>
   460e4:	10c00017 	ldw	r3,0(r2)
   460e8:	1800031e 	bne	r3,zero,460f8 <quorem+0x1e4>
   460ec:	10bfff04 	addi	r2,r2,-4
   460f0:	bdffffc4 	addi	r23,r23,-1
   460f4:	98bffb36 	bltu	r19,r2,460e4 <__alt_data_end+0xfffd40e4>
   460f8:	d8c00017 	ldw	r3,0(sp)
   460fc:	1dc00415 	stw	r23,16(r3)
   46100:	9005883a 	mov	r2,r18
   46104:	dfc00d17 	ldw	ra,52(sp)
   46108:	df000c17 	ldw	fp,48(sp)
   4610c:	ddc00b17 	ldw	r23,44(sp)
   46110:	dd800a17 	ldw	r22,40(sp)
   46114:	dd400917 	ldw	r21,36(sp)
   46118:	dd000817 	ldw	r20,32(sp)
   4611c:	dcc00717 	ldw	r19,28(sp)
   46120:	dc800617 	ldw	r18,24(sp)
   46124:	dc400517 	ldw	r17,20(sp)
   46128:	dc000417 	ldw	r16,16(sp)
   4612c:	dec00e04 	addi	sp,sp,56
   46130:	f800283a 	ret
   46134:	0005883a 	mov	r2,zero
   46138:	003ff206 	br	46104 <__alt_data_end+0xfffd4104>

0004613c <_dtoa_r>:
   4613c:	20801017 	ldw	r2,64(r4)
   46140:	deffde04 	addi	sp,sp,-136
   46144:	df002015 	stw	fp,128(sp)
   46148:	dcc01b15 	stw	r19,108(sp)
   4614c:	dc801a15 	stw	r18,104(sp)
   46150:	dc401915 	stw	r17,100(sp)
   46154:	dc001815 	stw	r16,96(sp)
   46158:	dfc02115 	stw	ra,132(sp)
   4615c:	ddc01f15 	stw	r23,124(sp)
   46160:	dd801e15 	stw	r22,120(sp)
   46164:	dd401d15 	stw	r21,116(sp)
   46168:	dd001c15 	stw	r20,112(sp)
   4616c:	d9c00315 	stw	r7,12(sp)
   46170:	2039883a 	mov	fp,r4
   46174:	3023883a 	mov	r17,r6
   46178:	2825883a 	mov	r18,r5
   4617c:	dc002417 	ldw	r16,144(sp)
   46180:	3027883a 	mov	r19,r6
   46184:	10000826 	beq	r2,zero,461a8 <_dtoa_r+0x6c>
   46188:	21801117 	ldw	r6,68(r4)
   4618c:	00c00044 	movi	r3,1
   46190:	100b883a 	mov	r5,r2
   46194:	1986983a 	sll	r3,r3,r6
   46198:	11800115 	stw	r6,4(r2)
   4619c:	10c00215 	stw	r3,8(r2)
   461a0:	004989c0 	call	4989c <_Bfree>
   461a4:	e0001015 	stw	zero,64(fp)
   461a8:	88002e16 	blt	r17,zero,46264 <_dtoa_r+0x128>
   461ac:	80000015 	stw	zero,0(r16)
   461b0:	889ffc2c 	andhi	r2,r17,32752
   461b4:	00dffc34 	movhi	r3,32752
   461b8:	10c01c26 	beq	r2,r3,4622c <_dtoa_r+0xf0>
   461bc:	000d883a 	mov	r6,zero
   461c0:	000f883a 	mov	r7,zero
   461c4:	9009883a 	mov	r4,r18
   461c8:	980b883a 	mov	r5,r19
   461cc:	00506480 	call	50648 <__eqdf2>
   461d0:	10002b1e 	bne	r2,zero,46280 <_dtoa_r+0x144>
   461d4:	d9c02317 	ldw	r7,140(sp)
   461d8:	00800044 	movi	r2,1
   461dc:	38800015 	stw	r2,0(r7)
   461e0:	d8802517 	ldw	r2,148(sp)
   461e4:	10019e26 	beq	r2,zero,46860 <_dtoa_r+0x724>
   461e8:	d8c02517 	ldw	r3,148(sp)
   461ec:	00800174 	movhi	r2,5
   461f0:	109a2f44 	addi	r2,r2,26813
   461f4:	18800015 	stw	r2,0(r3)
   461f8:	10bfffc4 	addi	r2,r2,-1
   461fc:	dfc02117 	ldw	ra,132(sp)
   46200:	df002017 	ldw	fp,128(sp)
   46204:	ddc01f17 	ldw	r23,124(sp)
   46208:	dd801e17 	ldw	r22,120(sp)
   4620c:	dd401d17 	ldw	r21,116(sp)
   46210:	dd001c17 	ldw	r20,112(sp)
   46214:	dcc01b17 	ldw	r19,108(sp)
   46218:	dc801a17 	ldw	r18,104(sp)
   4621c:	dc401917 	ldw	r17,100(sp)
   46220:	dc001817 	ldw	r16,96(sp)
   46224:	dec02204 	addi	sp,sp,136
   46228:	f800283a 	ret
   4622c:	d8c02317 	ldw	r3,140(sp)
   46230:	0089c3c4 	movi	r2,9999
   46234:	18800015 	stw	r2,0(r3)
   46238:	90017726 	beq	r18,zero,46818 <_dtoa_r+0x6dc>
   4623c:	00800174 	movhi	r2,5
   46240:	109a4304 	addi	r2,r2,26892
   46244:	d9002517 	ldw	r4,148(sp)
   46248:	203fec26 	beq	r4,zero,461fc <__alt_data_end+0xfffd41fc>
   4624c:	10c000c7 	ldb	r3,3(r2)
   46250:	1801781e 	bne	r3,zero,46834 <_dtoa_r+0x6f8>
   46254:	10c000c4 	addi	r3,r2,3
   46258:	d9802517 	ldw	r6,148(sp)
   4625c:	30c00015 	stw	r3,0(r6)
   46260:	003fe606 	br	461fc <__alt_data_end+0xfffd41fc>
   46264:	04e00034 	movhi	r19,32768
   46268:	9cffffc4 	addi	r19,r19,-1
   4626c:	00800044 	movi	r2,1
   46270:	8ce6703a 	and	r19,r17,r19
   46274:	80800015 	stw	r2,0(r16)
   46278:	9823883a 	mov	r17,r19
   4627c:	003fcc06 	br	461b0 <__alt_data_end+0xfffd41b0>
   46280:	d8800204 	addi	r2,sp,8
   46284:	d8800015 	stw	r2,0(sp)
   46288:	d9c00104 	addi	r7,sp,4
   4628c:	900b883a 	mov	r5,r18
   46290:	980d883a 	mov	r6,r19
   46294:	e009883a 	mov	r4,fp
   46298:	8820d53a 	srli	r16,r17,20
   4629c:	004a5440 	call	4a544 <__d2b>
   462a0:	d8800915 	stw	r2,36(sp)
   462a4:	8001651e 	bne	r16,zero,4683c <_dtoa_r+0x700>
   462a8:	dd800217 	ldw	r22,8(sp)
   462ac:	dc000117 	ldw	r16,4(sp)
   462b0:	00800804 	movi	r2,32
   462b4:	b421883a 	add	r16,r22,r16
   462b8:	80c10c84 	addi	r3,r16,1074
   462bc:	10c2d10e 	bge	r2,r3,46e04 <_dtoa_r+0xcc8>
   462c0:	00801004 	movi	r2,64
   462c4:	81010484 	addi	r4,r16,1042
   462c8:	10c7c83a 	sub	r3,r2,r3
   462cc:	9108d83a 	srl	r4,r18,r4
   462d0:	88e2983a 	sll	r17,r17,r3
   462d4:	2448b03a 	or	r4,r4,r17
   462d8:	0051b640 	call	51b64 <__floatunsidf>
   462dc:	017f8434 	movhi	r5,65040
   462e0:	01800044 	movi	r6,1
   462e4:	1009883a 	mov	r4,r2
   462e8:	194b883a 	add	r5,r3,r5
   462ec:	843fffc4 	addi	r16,r16,-1
   462f0:	d9801115 	stw	r6,68(sp)
   462f4:	000d883a 	mov	r6,zero
   462f8:	01cffe34 	movhi	r7,16376
   462fc:	005110c0 	call	5110c <__subdf3>
   46300:	0198dbf4 	movhi	r6,25455
   46304:	01cff4f4 	movhi	r7,16339
   46308:	3190d844 	addi	r6,r6,17249
   4630c:	39e1e9c4 	addi	r7,r7,-30809
   46310:	1009883a 	mov	r4,r2
   46314:	180b883a 	mov	r5,r3
   46318:	00508a00 	call	508a0 <__muldf3>
   4631c:	01a2d874 	movhi	r6,35681
   46320:	01cff1f4 	movhi	r7,16327
   46324:	31b22cc4 	addi	r6,r6,-14157
   46328:	39e28a04 	addi	r7,r7,-30168
   4632c:	180b883a 	mov	r5,r3
   46330:	1009883a 	mov	r4,r2
   46334:	004f3cc0 	call	4f3cc <__adddf3>
   46338:	8009883a 	mov	r4,r16
   4633c:	1029883a 	mov	r20,r2
   46340:	1823883a 	mov	r17,r3
   46344:	0051a880 	call	51a88 <__floatsidf>
   46348:	019427f4 	movhi	r6,20639
   4634c:	01cff4f4 	movhi	r7,16339
   46350:	319e7ec4 	addi	r6,r6,31227
   46354:	39d104c4 	addi	r7,r7,17427
   46358:	1009883a 	mov	r4,r2
   4635c:	180b883a 	mov	r5,r3
   46360:	00508a00 	call	508a0 <__muldf3>
   46364:	100d883a 	mov	r6,r2
   46368:	180f883a 	mov	r7,r3
   4636c:	a009883a 	mov	r4,r20
   46370:	880b883a 	mov	r5,r17
   46374:	004f3cc0 	call	4f3cc <__adddf3>
   46378:	1009883a 	mov	r4,r2
   4637c:	180b883a 	mov	r5,r3
   46380:	1029883a 	mov	r20,r2
   46384:	1823883a 	mov	r17,r3
   46388:	0051a080 	call	51a08 <__fixdfsi>
   4638c:	000d883a 	mov	r6,zero
   46390:	000f883a 	mov	r7,zero
   46394:	a009883a 	mov	r4,r20
   46398:	880b883a 	mov	r5,r17
   4639c:	d8800515 	stw	r2,20(sp)
   463a0:	00507ac0 	call	507ac <__ledf2>
   463a4:	10028716 	blt	r2,zero,46dc4 <_dtoa_r+0xc88>
   463a8:	d8c00517 	ldw	r3,20(sp)
   463ac:	00800584 	movi	r2,22
   463b0:	10c27536 	bltu	r2,r3,46d88 <_dtoa_r+0xc4c>
   463b4:	180490fa 	slli	r2,r3,3
   463b8:	00c00174 	movhi	r3,5
   463bc:	18da5f04 	addi	r3,r3,27004
   463c0:	1885883a 	add	r2,r3,r2
   463c4:	11000017 	ldw	r4,0(r2)
   463c8:	11400117 	ldw	r5,4(r2)
   463cc:	900d883a 	mov	r6,r18
   463d0:	980f883a 	mov	r7,r19
   463d4:	00506d00 	call	506d0 <__gedf2>
   463d8:	00828d0e 	bge	zero,r2,46e10 <_dtoa_r+0xcd4>
   463dc:	d9000517 	ldw	r4,20(sp)
   463e0:	d8000e15 	stw	zero,56(sp)
   463e4:	213fffc4 	addi	r4,r4,-1
   463e8:	d9000515 	stw	r4,20(sp)
   463ec:	b42dc83a 	sub	r22,r22,r16
   463f0:	b5bfffc4 	addi	r22,r22,-1
   463f4:	b0026f16 	blt	r22,zero,46db4 <_dtoa_r+0xc78>
   463f8:	d8000815 	stw	zero,32(sp)
   463fc:	d9c00517 	ldw	r7,20(sp)
   46400:	38026416 	blt	r7,zero,46d94 <_dtoa_r+0xc58>
   46404:	b1ed883a 	add	r22,r22,r7
   46408:	d9c00d15 	stw	r7,52(sp)
   4640c:	d8000a15 	stw	zero,40(sp)
   46410:	d9800317 	ldw	r6,12(sp)
   46414:	00800244 	movi	r2,9
   46418:	11811436 	bltu	r2,r6,4686c <_dtoa_r+0x730>
   4641c:	00800144 	movi	r2,5
   46420:	1184e10e 	bge	r2,r6,477a8 <_dtoa_r+0x166c>
   46424:	31bfff04 	addi	r6,r6,-4
   46428:	d9800315 	stw	r6,12(sp)
   4642c:	0023883a 	mov	r17,zero
   46430:	d9800317 	ldw	r6,12(sp)
   46434:	008000c4 	movi	r2,3
   46438:	30836726 	beq	r6,r2,471d8 <_dtoa_r+0x109c>
   4643c:	1183410e 	bge	r2,r6,47144 <_dtoa_r+0x1008>
   46440:	d9c00317 	ldw	r7,12(sp)
   46444:	00800104 	movi	r2,4
   46448:	38827c26 	beq	r7,r2,46e3c <_dtoa_r+0xd00>
   4644c:	00800144 	movi	r2,5
   46450:	3884c41e 	bne	r7,r2,47764 <_dtoa_r+0x1628>
   46454:	00800044 	movi	r2,1
   46458:	d8800b15 	stw	r2,44(sp)
   4645c:	d8c00517 	ldw	r3,20(sp)
   46460:	d9002217 	ldw	r4,136(sp)
   46464:	1907883a 	add	r3,r3,r4
   46468:	19800044 	addi	r6,r3,1
   4646c:	d8c00c15 	stw	r3,48(sp)
   46470:	d9800615 	stw	r6,24(sp)
   46474:	0183a40e 	bge	zero,r6,47308 <_dtoa_r+0x11cc>
   46478:	d9800617 	ldw	r6,24(sp)
   4647c:	3021883a 	mov	r16,r6
   46480:	e0001115 	stw	zero,68(fp)
   46484:	008005c4 	movi	r2,23
   46488:	1184c92e 	bgeu	r2,r6,477b0 <_dtoa_r+0x1674>
   4648c:	00c00044 	movi	r3,1
   46490:	00800104 	movi	r2,4
   46494:	1085883a 	add	r2,r2,r2
   46498:	11000504 	addi	r4,r2,20
   4649c:	180b883a 	mov	r5,r3
   464a0:	18c00044 	addi	r3,r3,1
   464a4:	313ffb2e 	bgeu	r6,r4,46494 <__alt_data_end+0xfffd4494>
   464a8:	e1401115 	stw	r5,68(fp)
   464ac:	e009883a 	mov	r4,fp
   464b0:	00497f40 	call	497f4 <_Balloc>
   464b4:	d8800715 	stw	r2,28(sp)
   464b8:	e0801015 	stw	r2,64(fp)
   464bc:	00800384 	movi	r2,14
   464c0:	1400f736 	bltu	r2,r16,468a0 <_dtoa_r+0x764>
   464c4:	8800f626 	beq	r17,zero,468a0 <_dtoa_r+0x764>
   464c8:	d9c00517 	ldw	r7,20(sp)
   464cc:	01c39a0e 	bge	zero,r7,47338 <_dtoa_r+0x11fc>
   464d0:	388003cc 	andi	r2,r7,15
   464d4:	100490fa 	slli	r2,r2,3
   464d8:	382bd13a 	srai	r21,r7,4
   464dc:	00c00174 	movhi	r3,5
   464e0:	18da5f04 	addi	r3,r3,27004
   464e4:	1885883a 	add	r2,r3,r2
   464e8:	a8c0040c 	andi	r3,r21,16
   464ec:	12400017 	ldw	r9,0(r2)
   464f0:	12000117 	ldw	r8,4(r2)
   464f4:	18037926 	beq	r3,zero,472dc <_dtoa_r+0x11a0>
   464f8:	00800174 	movhi	r2,5
   464fc:	109a5504 	addi	r2,r2,26964
   46500:	11800817 	ldw	r6,32(r2)
   46504:	11c00917 	ldw	r7,36(r2)
   46508:	9009883a 	mov	r4,r18
   4650c:	980b883a 	mov	r5,r19
   46510:	da001715 	stw	r8,92(sp)
   46514:	da401615 	stw	r9,88(sp)
   46518:	004fc780 	call	4fc78 <__divdf3>
   4651c:	da001717 	ldw	r8,92(sp)
   46520:	da401617 	ldw	r9,88(sp)
   46524:	ad4003cc 	andi	r21,r21,15
   46528:	040000c4 	movi	r16,3
   4652c:	1023883a 	mov	r17,r2
   46530:	1829883a 	mov	r20,r3
   46534:	a8001126 	beq	r21,zero,4657c <_dtoa_r+0x440>
   46538:	05c00174 	movhi	r23,5
   4653c:	bdda5504 	addi	r23,r23,26964
   46540:	4805883a 	mov	r2,r9
   46544:	4007883a 	mov	r3,r8
   46548:	a980004c 	andi	r6,r21,1
   4654c:	1009883a 	mov	r4,r2
   46550:	a82bd07a 	srai	r21,r21,1
   46554:	180b883a 	mov	r5,r3
   46558:	30000426 	beq	r6,zero,4656c <_dtoa_r+0x430>
   4655c:	b9800017 	ldw	r6,0(r23)
   46560:	b9c00117 	ldw	r7,4(r23)
   46564:	84000044 	addi	r16,r16,1
   46568:	00508a00 	call	508a0 <__muldf3>
   4656c:	bdc00204 	addi	r23,r23,8
   46570:	a83ff51e 	bne	r21,zero,46548 <__alt_data_end+0xfffd4548>
   46574:	1013883a 	mov	r9,r2
   46578:	1811883a 	mov	r8,r3
   4657c:	480d883a 	mov	r6,r9
   46580:	400f883a 	mov	r7,r8
   46584:	8809883a 	mov	r4,r17
   46588:	a00b883a 	mov	r5,r20
   4658c:	004fc780 	call	4fc78 <__divdf3>
   46590:	d8800f15 	stw	r2,60(sp)
   46594:	d8c01015 	stw	r3,64(sp)
   46598:	d8c00e17 	ldw	r3,56(sp)
   4659c:	18000626 	beq	r3,zero,465b8 <_dtoa_r+0x47c>
   465a0:	d9000f17 	ldw	r4,60(sp)
   465a4:	d9401017 	ldw	r5,64(sp)
   465a8:	000d883a 	mov	r6,zero
   465ac:	01cffc34 	movhi	r7,16368
   465b0:	00507ac0 	call	507ac <__ledf2>
   465b4:	10040b16 	blt	r2,zero,475e4 <_dtoa_r+0x14a8>
   465b8:	8009883a 	mov	r4,r16
   465bc:	0051a880 	call	51a88 <__floatsidf>
   465c0:	d9800f17 	ldw	r6,60(sp)
   465c4:	d9c01017 	ldw	r7,64(sp)
   465c8:	1009883a 	mov	r4,r2
   465cc:	180b883a 	mov	r5,r3
   465d0:	00508a00 	call	508a0 <__muldf3>
   465d4:	000d883a 	mov	r6,zero
   465d8:	01d00734 	movhi	r7,16412
   465dc:	1009883a 	mov	r4,r2
   465e0:	180b883a 	mov	r5,r3
   465e4:	004f3cc0 	call	4f3cc <__adddf3>
   465e8:	1021883a 	mov	r16,r2
   465ec:	d8800617 	ldw	r2,24(sp)
   465f0:	047f3034 	movhi	r17,64704
   465f4:	1c63883a 	add	r17,r3,r17
   465f8:	10031826 	beq	r2,zero,4725c <_dtoa_r+0x1120>
   465fc:	d8c00517 	ldw	r3,20(sp)
   46600:	db000617 	ldw	r12,24(sp)
   46604:	d8c01315 	stw	r3,76(sp)
   46608:	d9000b17 	ldw	r4,44(sp)
   4660c:	20038f26 	beq	r4,zero,4744c <_dtoa_r+0x1310>
   46610:	60bfffc4 	addi	r2,r12,-1
   46614:	100490fa 	slli	r2,r2,3
   46618:	00c00174 	movhi	r3,5
   4661c:	18da5f04 	addi	r3,r3,27004
   46620:	1885883a 	add	r2,r3,r2
   46624:	11800017 	ldw	r6,0(r2)
   46628:	11c00117 	ldw	r7,4(r2)
   4662c:	d8800717 	ldw	r2,28(sp)
   46630:	0009883a 	mov	r4,zero
   46634:	014ff834 	movhi	r5,16352
   46638:	db001615 	stw	r12,88(sp)
   4663c:	15c00044 	addi	r23,r2,1
   46640:	004fc780 	call	4fc78 <__divdf3>
   46644:	800d883a 	mov	r6,r16
   46648:	880f883a 	mov	r7,r17
   4664c:	1009883a 	mov	r4,r2
   46650:	180b883a 	mov	r5,r3
   46654:	005110c0 	call	5110c <__subdf3>
   46658:	d9401017 	ldw	r5,64(sp)
   4665c:	d9000f17 	ldw	r4,60(sp)
   46660:	102b883a 	mov	r21,r2
   46664:	d8c01215 	stw	r3,72(sp)
   46668:	0051a080 	call	51a08 <__fixdfsi>
   4666c:	1009883a 	mov	r4,r2
   46670:	1029883a 	mov	r20,r2
   46674:	0051a880 	call	51a88 <__floatsidf>
   46678:	d9000f17 	ldw	r4,60(sp)
   4667c:	d9401017 	ldw	r5,64(sp)
   46680:	100d883a 	mov	r6,r2
   46684:	180f883a 	mov	r7,r3
   46688:	005110c0 	call	5110c <__subdf3>
   4668c:	1823883a 	mov	r17,r3
   46690:	d8c00717 	ldw	r3,28(sp)
   46694:	d9401217 	ldw	r5,72(sp)
   46698:	a2000c04 	addi	r8,r20,48
   4669c:	1021883a 	mov	r16,r2
   466a0:	1a000005 	stb	r8,0(r3)
   466a4:	800d883a 	mov	r6,r16
   466a8:	880f883a 	mov	r7,r17
   466ac:	a809883a 	mov	r4,r21
   466b0:	4029883a 	mov	r20,r8
   466b4:	00506d00 	call	506d0 <__gedf2>
   466b8:	00841d16 	blt	zero,r2,47730 <_dtoa_r+0x15f4>
   466bc:	800d883a 	mov	r6,r16
   466c0:	880f883a 	mov	r7,r17
   466c4:	0009883a 	mov	r4,zero
   466c8:	014ffc34 	movhi	r5,16368
   466cc:	005110c0 	call	5110c <__subdf3>
   466d0:	d9401217 	ldw	r5,72(sp)
   466d4:	100d883a 	mov	r6,r2
   466d8:	180f883a 	mov	r7,r3
   466dc:	a809883a 	mov	r4,r21
   466e0:	00506d00 	call	506d0 <__gedf2>
   466e4:	db001617 	ldw	r12,88(sp)
   466e8:	00840e16 	blt	zero,r2,47724 <_dtoa_r+0x15e8>
   466ec:	00800044 	movi	r2,1
   466f0:	13006b0e 	bge	r2,r12,468a0 <_dtoa_r+0x764>
   466f4:	d9000717 	ldw	r4,28(sp)
   466f8:	dd800f15 	stw	r22,60(sp)
   466fc:	dcc01015 	stw	r19,64(sp)
   46700:	2319883a 	add	r12,r4,r12
   46704:	dcc01217 	ldw	r19,72(sp)
   46708:	602d883a 	mov	r22,r12
   4670c:	dc801215 	stw	r18,72(sp)
   46710:	b825883a 	mov	r18,r23
   46714:	00000906 	br	4673c <_dtoa_r+0x600>
   46718:	005110c0 	call	5110c <__subdf3>
   4671c:	a80d883a 	mov	r6,r21
   46720:	980f883a 	mov	r7,r19
   46724:	1009883a 	mov	r4,r2
   46728:	180b883a 	mov	r5,r3
   4672c:	00507ac0 	call	507ac <__ledf2>
   46730:	1003e816 	blt	r2,zero,476d4 <_dtoa_r+0x1598>
   46734:	b825883a 	mov	r18,r23
   46738:	bd83e926 	beq	r23,r22,476e0 <_dtoa_r+0x15a4>
   4673c:	a809883a 	mov	r4,r21
   46740:	980b883a 	mov	r5,r19
   46744:	000d883a 	mov	r6,zero
   46748:	01d00934 	movhi	r7,16420
   4674c:	00508a00 	call	508a0 <__muldf3>
   46750:	000d883a 	mov	r6,zero
   46754:	01d00934 	movhi	r7,16420
   46758:	8009883a 	mov	r4,r16
   4675c:	880b883a 	mov	r5,r17
   46760:	102b883a 	mov	r21,r2
   46764:	1827883a 	mov	r19,r3
   46768:	00508a00 	call	508a0 <__muldf3>
   4676c:	180b883a 	mov	r5,r3
   46770:	1009883a 	mov	r4,r2
   46774:	1821883a 	mov	r16,r3
   46778:	1023883a 	mov	r17,r2
   4677c:	0051a080 	call	51a08 <__fixdfsi>
   46780:	1009883a 	mov	r4,r2
   46784:	1029883a 	mov	r20,r2
   46788:	0051a880 	call	51a88 <__floatsidf>
   4678c:	8809883a 	mov	r4,r17
   46790:	800b883a 	mov	r5,r16
   46794:	100d883a 	mov	r6,r2
   46798:	180f883a 	mov	r7,r3
   4679c:	005110c0 	call	5110c <__subdf3>
   467a0:	a5000c04 	addi	r20,r20,48
   467a4:	a80d883a 	mov	r6,r21
   467a8:	980f883a 	mov	r7,r19
   467ac:	1009883a 	mov	r4,r2
   467b0:	180b883a 	mov	r5,r3
   467b4:	95000005 	stb	r20,0(r18)
   467b8:	1021883a 	mov	r16,r2
   467bc:	1823883a 	mov	r17,r3
   467c0:	00507ac0 	call	507ac <__ledf2>
   467c4:	bdc00044 	addi	r23,r23,1
   467c8:	800d883a 	mov	r6,r16
   467cc:	880f883a 	mov	r7,r17
   467d0:	0009883a 	mov	r4,zero
   467d4:	014ffc34 	movhi	r5,16368
   467d8:	103fcf0e 	bge	r2,zero,46718 <__alt_data_end+0xfffd4718>
   467dc:	d8c01317 	ldw	r3,76(sp)
   467e0:	d8c00515 	stw	r3,20(sp)
   467e4:	d9400917 	ldw	r5,36(sp)
   467e8:	e009883a 	mov	r4,fp
   467ec:	004989c0 	call	4989c <_Bfree>
   467f0:	d9000517 	ldw	r4,20(sp)
   467f4:	d9802317 	ldw	r6,140(sp)
   467f8:	d9c02517 	ldw	r7,148(sp)
   467fc:	b8000005 	stb	zero,0(r23)
   46800:	20800044 	addi	r2,r4,1
   46804:	30800015 	stw	r2,0(r6)
   46808:	3802aa26 	beq	r7,zero,472b4 <_dtoa_r+0x1178>
   4680c:	3dc00015 	stw	r23,0(r7)
   46810:	d8800717 	ldw	r2,28(sp)
   46814:	003e7906 	br	461fc <__alt_data_end+0xfffd41fc>
   46818:	00800434 	movhi	r2,16
   4681c:	10bfffc4 	addi	r2,r2,-1
   46820:	88a2703a 	and	r17,r17,r2
   46824:	883e851e 	bne	r17,zero,4623c <__alt_data_end+0xfffd423c>
   46828:	00800174 	movhi	r2,5
   4682c:	109a4004 	addi	r2,r2,26880
   46830:	003e8406 	br	46244 <__alt_data_end+0xfffd4244>
   46834:	10c00204 	addi	r3,r2,8
   46838:	003e8706 	br	46258 <__alt_data_end+0xfffd4258>
   4683c:	01400434 	movhi	r5,16
   46840:	297fffc4 	addi	r5,r5,-1
   46844:	994a703a 	and	r5,r19,r5
   46848:	9009883a 	mov	r4,r18
   4684c:	843f0044 	addi	r16,r16,-1023
   46850:	294ffc34 	orhi	r5,r5,16368
   46854:	dd800217 	ldw	r22,8(sp)
   46858:	d8001115 	stw	zero,68(sp)
   4685c:	003ea506 	br	462f4 <__alt_data_end+0xfffd42f4>
   46860:	00800174 	movhi	r2,5
   46864:	109a2f04 	addi	r2,r2,26812
   46868:	003e6406 	br	461fc <__alt_data_end+0xfffd41fc>
   4686c:	e0001115 	stw	zero,68(fp)
   46870:	000b883a 	mov	r5,zero
   46874:	e009883a 	mov	r4,fp
   46878:	00497f40 	call	497f4 <_Balloc>
   4687c:	01bfffc4 	movi	r6,-1
   46880:	01c00044 	movi	r7,1
   46884:	d8800715 	stw	r2,28(sp)
   46888:	d9800c15 	stw	r6,48(sp)
   4688c:	e0801015 	stw	r2,64(fp)
   46890:	d8000315 	stw	zero,12(sp)
   46894:	d9c00b15 	stw	r7,44(sp)
   46898:	d9800615 	stw	r6,24(sp)
   4689c:	d8002215 	stw	zero,136(sp)
   468a0:	d8800117 	ldw	r2,4(sp)
   468a4:	10008916 	blt	r2,zero,46acc <_dtoa_r+0x990>
   468a8:	d9000517 	ldw	r4,20(sp)
   468ac:	00c00384 	movi	r3,14
   468b0:	19008616 	blt	r3,r4,46acc <_dtoa_r+0x990>
   468b4:	200490fa 	slli	r2,r4,3
   468b8:	00c00174 	movhi	r3,5
   468bc:	d9802217 	ldw	r6,136(sp)
   468c0:	18da5f04 	addi	r3,r3,27004
   468c4:	1885883a 	add	r2,r3,r2
   468c8:	14000017 	ldw	r16,0(r2)
   468cc:	14400117 	ldw	r17,4(r2)
   468d0:	30016316 	blt	r6,zero,46e60 <_dtoa_r+0xd24>
   468d4:	800d883a 	mov	r6,r16
   468d8:	880f883a 	mov	r7,r17
   468dc:	9009883a 	mov	r4,r18
   468e0:	980b883a 	mov	r5,r19
   468e4:	004fc780 	call	4fc78 <__divdf3>
   468e8:	180b883a 	mov	r5,r3
   468ec:	1009883a 	mov	r4,r2
   468f0:	0051a080 	call	51a08 <__fixdfsi>
   468f4:	1009883a 	mov	r4,r2
   468f8:	102b883a 	mov	r21,r2
   468fc:	0051a880 	call	51a88 <__floatsidf>
   46900:	800d883a 	mov	r6,r16
   46904:	880f883a 	mov	r7,r17
   46908:	1009883a 	mov	r4,r2
   4690c:	180b883a 	mov	r5,r3
   46910:	00508a00 	call	508a0 <__muldf3>
   46914:	100d883a 	mov	r6,r2
   46918:	180f883a 	mov	r7,r3
   4691c:	9009883a 	mov	r4,r18
   46920:	980b883a 	mov	r5,r19
   46924:	005110c0 	call	5110c <__subdf3>
   46928:	d9c00717 	ldw	r7,28(sp)
   4692c:	1009883a 	mov	r4,r2
   46930:	a8800c04 	addi	r2,r21,48
   46934:	38800005 	stb	r2,0(r7)
   46938:	3dc00044 	addi	r23,r7,1
   4693c:	d9c00617 	ldw	r7,24(sp)
   46940:	01800044 	movi	r6,1
   46944:	180b883a 	mov	r5,r3
   46948:	2005883a 	mov	r2,r4
   4694c:	39803826 	beq	r7,r6,46a30 <_dtoa_r+0x8f4>
   46950:	000d883a 	mov	r6,zero
   46954:	01d00934 	movhi	r7,16420
   46958:	00508a00 	call	508a0 <__muldf3>
   4695c:	000d883a 	mov	r6,zero
   46960:	000f883a 	mov	r7,zero
   46964:	1009883a 	mov	r4,r2
   46968:	180b883a 	mov	r5,r3
   4696c:	1025883a 	mov	r18,r2
   46970:	1827883a 	mov	r19,r3
   46974:	00506480 	call	50648 <__eqdf2>
   46978:	103f9a26 	beq	r2,zero,467e4 <__alt_data_end+0xfffd47e4>
   4697c:	d9c00617 	ldw	r7,24(sp)
   46980:	d8c00717 	ldw	r3,28(sp)
   46984:	b829883a 	mov	r20,r23
   46988:	38bfffc4 	addi	r2,r7,-1
   4698c:	18ad883a 	add	r22,r3,r2
   46990:	00000a06 	br	469bc <_dtoa_r+0x880>
   46994:	00508a00 	call	508a0 <__muldf3>
   46998:	000d883a 	mov	r6,zero
   4699c:	000f883a 	mov	r7,zero
   469a0:	1009883a 	mov	r4,r2
   469a4:	180b883a 	mov	r5,r3
   469a8:	1025883a 	mov	r18,r2
   469ac:	1827883a 	mov	r19,r3
   469b0:	b829883a 	mov	r20,r23
   469b4:	00506480 	call	50648 <__eqdf2>
   469b8:	103f8a26 	beq	r2,zero,467e4 <__alt_data_end+0xfffd47e4>
   469bc:	800d883a 	mov	r6,r16
   469c0:	880f883a 	mov	r7,r17
   469c4:	9009883a 	mov	r4,r18
   469c8:	980b883a 	mov	r5,r19
   469cc:	004fc780 	call	4fc78 <__divdf3>
   469d0:	180b883a 	mov	r5,r3
   469d4:	1009883a 	mov	r4,r2
   469d8:	0051a080 	call	51a08 <__fixdfsi>
   469dc:	1009883a 	mov	r4,r2
   469e0:	102b883a 	mov	r21,r2
   469e4:	0051a880 	call	51a88 <__floatsidf>
   469e8:	800d883a 	mov	r6,r16
   469ec:	880f883a 	mov	r7,r17
   469f0:	1009883a 	mov	r4,r2
   469f4:	180b883a 	mov	r5,r3
   469f8:	00508a00 	call	508a0 <__muldf3>
   469fc:	100d883a 	mov	r6,r2
   46a00:	180f883a 	mov	r7,r3
   46a04:	9009883a 	mov	r4,r18
   46a08:	980b883a 	mov	r5,r19
   46a0c:	005110c0 	call	5110c <__subdf3>
   46a10:	aa000c04 	addi	r8,r21,48
   46a14:	a2000005 	stb	r8,0(r20)
   46a18:	000d883a 	mov	r6,zero
   46a1c:	01d00934 	movhi	r7,16420
   46a20:	1009883a 	mov	r4,r2
   46a24:	180b883a 	mov	r5,r3
   46a28:	a5c00044 	addi	r23,r20,1
   46a2c:	b53fd91e 	bne	r22,r20,46994 <__alt_data_end+0xfffd4994>
   46a30:	100d883a 	mov	r6,r2
   46a34:	180f883a 	mov	r7,r3
   46a38:	1009883a 	mov	r4,r2
   46a3c:	180b883a 	mov	r5,r3
   46a40:	004f3cc0 	call	4f3cc <__adddf3>
   46a44:	100d883a 	mov	r6,r2
   46a48:	180f883a 	mov	r7,r3
   46a4c:	8009883a 	mov	r4,r16
   46a50:	880b883a 	mov	r5,r17
   46a54:	1027883a 	mov	r19,r2
   46a58:	1825883a 	mov	r18,r3
   46a5c:	00507ac0 	call	507ac <__ledf2>
   46a60:	10000816 	blt	r2,zero,46a84 <_dtoa_r+0x948>
   46a64:	980d883a 	mov	r6,r19
   46a68:	900f883a 	mov	r7,r18
   46a6c:	8009883a 	mov	r4,r16
   46a70:	880b883a 	mov	r5,r17
   46a74:	00506480 	call	50648 <__eqdf2>
   46a78:	103f5a1e 	bne	r2,zero,467e4 <__alt_data_end+0xfffd47e4>
   46a7c:	ad40004c 	andi	r21,r21,1
   46a80:	a83f5826 	beq	r21,zero,467e4 <__alt_data_end+0xfffd47e4>
   46a84:	bd3fffc3 	ldbu	r20,-1(r23)
   46a88:	b8bfffc4 	addi	r2,r23,-1
   46a8c:	1007883a 	mov	r3,r2
   46a90:	01400e44 	movi	r5,57
   46a94:	d9800717 	ldw	r6,28(sp)
   46a98:	00000506 	br	46ab0 <_dtoa_r+0x974>
   46a9c:	18ffffc4 	addi	r3,r3,-1
   46aa0:	11824726 	beq	r2,r6,473c0 <_dtoa_r+0x1284>
   46aa4:	1d000003 	ldbu	r20,0(r3)
   46aa8:	102f883a 	mov	r23,r2
   46aac:	10bfffc4 	addi	r2,r2,-1
   46ab0:	a1003fcc 	andi	r4,r20,255
   46ab4:	2100201c 	xori	r4,r4,128
   46ab8:	213fe004 	addi	r4,r4,-128
   46abc:	217ff726 	beq	r4,r5,46a9c <__alt_data_end+0xfffd4a9c>
   46ac0:	a2000044 	addi	r8,r20,1
   46ac4:	12000005 	stb	r8,0(r2)
   46ac8:	003f4606 	br	467e4 <__alt_data_end+0xfffd47e4>
   46acc:	d9000b17 	ldw	r4,44(sp)
   46ad0:	2000c826 	beq	r4,zero,46df4 <_dtoa_r+0xcb8>
   46ad4:	d9800317 	ldw	r6,12(sp)
   46ad8:	00c00044 	movi	r3,1
   46adc:	1980f90e 	bge	r3,r6,46ec4 <_dtoa_r+0xd88>
   46ae0:	d8800617 	ldw	r2,24(sp)
   46ae4:	d8c00a17 	ldw	r3,40(sp)
   46ae8:	157fffc4 	addi	r21,r2,-1
   46aec:	1d41f316 	blt	r3,r21,472bc <_dtoa_r+0x1180>
   46af0:	1d6bc83a 	sub	r21,r3,r21
   46af4:	d9c00617 	ldw	r7,24(sp)
   46af8:	3802aa16 	blt	r7,zero,475a4 <_dtoa_r+0x1468>
   46afc:	dd000817 	ldw	r20,32(sp)
   46b00:	d8800617 	ldw	r2,24(sp)
   46b04:	d8c00817 	ldw	r3,32(sp)
   46b08:	01400044 	movi	r5,1
   46b0c:	e009883a 	mov	r4,fp
   46b10:	1887883a 	add	r3,r3,r2
   46b14:	d8c00815 	stw	r3,32(sp)
   46b18:	b0ad883a 	add	r22,r22,r2
   46b1c:	0049c280 	call	49c28 <__i2b>
   46b20:	1023883a 	mov	r17,r2
   46b24:	a0000826 	beq	r20,zero,46b48 <_dtoa_r+0xa0c>
   46b28:	0580070e 	bge	zero,r22,46b48 <_dtoa_r+0xa0c>
   46b2c:	a005883a 	mov	r2,r20
   46b30:	b500b916 	blt	r22,r20,46e18 <_dtoa_r+0xcdc>
   46b34:	d9000817 	ldw	r4,32(sp)
   46b38:	a0a9c83a 	sub	r20,r20,r2
   46b3c:	b0adc83a 	sub	r22,r22,r2
   46b40:	2089c83a 	sub	r4,r4,r2
   46b44:	d9000815 	stw	r4,32(sp)
   46b48:	d9800a17 	ldw	r6,40(sp)
   46b4c:	0181810e 	bge	zero,r6,47154 <_dtoa_r+0x1018>
   46b50:	d9c00b17 	ldw	r7,44(sp)
   46b54:	3800b326 	beq	r7,zero,46e24 <_dtoa_r+0xce8>
   46b58:	a800b226 	beq	r21,zero,46e24 <_dtoa_r+0xce8>
   46b5c:	880b883a 	mov	r5,r17
   46b60:	a80d883a 	mov	r6,r21
   46b64:	e009883a 	mov	r4,fp
   46b68:	0049ef00 	call	49ef0 <__pow5mult>
   46b6c:	d9800917 	ldw	r6,36(sp)
   46b70:	100b883a 	mov	r5,r2
   46b74:	e009883a 	mov	r4,fp
   46b78:	1023883a 	mov	r17,r2
   46b7c:	0049c640 	call	49c64 <__multiply>
   46b80:	1021883a 	mov	r16,r2
   46b84:	d8800a17 	ldw	r2,40(sp)
   46b88:	d9400917 	ldw	r5,36(sp)
   46b8c:	e009883a 	mov	r4,fp
   46b90:	1545c83a 	sub	r2,r2,r21
   46b94:	d8800a15 	stw	r2,40(sp)
   46b98:	004989c0 	call	4989c <_Bfree>
   46b9c:	d8c00a17 	ldw	r3,40(sp)
   46ba0:	18009f1e 	bne	r3,zero,46e20 <_dtoa_r+0xce4>
   46ba4:	05c00044 	movi	r23,1
   46ba8:	e009883a 	mov	r4,fp
   46bac:	b80b883a 	mov	r5,r23
   46bb0:	0049c280 	call	49c28 <__i2b>
   46bb4:	d9000d17 	ldw	r4,52(sp)
   46bb8:	102b883a 	mov	r21,r2
   46bbc:	2000ce26 	beq	r4,zero,46ef8 <_dtoa_r+0xdbc>
   46bc0:	200d883a 	mov	r6,r4
   46bc4:	100b883a 	mov	r5,r2
   46bc8:	e009883a 	mov	r4,fp
   46bcc:	0049ef00 	call	49ef0 <__pow5mult>
   46bd0:	d9800317 	ldw	r6,12(sp)
   46bd4:	102b883a 	mov	r21,r2
   46bd8:	b981810e 	bge	r23,r6,471e0 <_dtoa_r+0x10a4>
   46bdc:	0027883a 	mov	r19,zero
   46be0:	a8800417 	ldw	r2,16(r21)
   46be4:	05c00804 	movi	r23,32
   46be8:	10800104 	addi	r2,r2,4
   46bec:	1085883a 	add	r2,r2,r2
   46bf0:	1085883a 	add	r2,r2,r2
   46bf4:	a885883a 	add	r2,r21,r2
   46bf8:	11000017 	ldw	r4,0(r2)
   46bfc:	0049b100 	call	49b10 <__hi0bits>
   46c00:	b885c83a 	sub	r2,r23,r2
   46c04:	1585883a 	add	r2,r2,r22
   46c08:	108007cc 	andi	r2,r2,31
   46c0c:	1000b326 	beq	r2,zero,46edc <_dtoa_r+0xda0>
   46c10:	00c00804 	movi	r3,32
   46c14:	1887c83a 	sub	r3,r3,r2
   46c18:	01000104 	movi	r4,4
   46c1c:	20c2cd0e 	bge	r4,r3,47754 <_dtoa_r+0x1618>
   46c20:	00c00704 	movi	r3,28
   46c24:	1885c83a 	sub	r2,r3,r2
   46c28:	d8c00817 	ldw	r3,32(sp)
   46c2c:	a0a9883a 	add	r20,r20,r2
   46c30:	b0ad883a 	add	r22,r22,r2
   46c34:	1887883a 	add	r3,r3,r2
   46c38:	d8c00815 	stw	r3,32(sp)
   46c3c:	d9800817 	ldw	r6,32(sp)
   46c40:	0180040e 	bge	zero,r6,46c54 <_dtoa_r+0xb18>
   46c44:	800b883a 	mov	r5,r16
   46c48:	e009883a 	mov	r4,fp
   46c4c:	004a0300 	call	4a030 <__lshift>
   46c50:	1021883a 	mov	r16,r2
   46c54:	0580050e 	bge	zero,r22,46c6c <_dtoa_r+0xb30>
   46c58:	a80b883a 	mov	r5,r21
   46c5c:	b00d883a 	mov	r6,r22
   46c60:	e009883a 	mov	r4,fp
   46c64:	004a0300 	call	4a030 <__lshift>
   46c68:	102b883a 	mov	r21,r2
   46c6c:	d9c00e17 	ldw	r7,56(sp)
   46c70:	3801211e 	bne	r7,zero,470f8 <_dtoa_r+0xfbc>
   46c74:	d9800617 	ldw	r6,24(sp)
   46c78:	0181380e 	bge	zero,r6,4715c <_dtoa_r+0x1020>
   46c7c:	d8c00b17 	ldw	r3,44(sp)
   46c80:	1800ab1e 	bne	r3,zero,46f30 <_dtoa_r+0xdf4>
   46c84:	dc800717 	ldw	r18,28(sp)
   46c88:	dcc00617 	ldw	r19,24(sp)
   46c8c:	9029883a 	mov	r20,r18
   46c90:	00000206 	br	46c9c <_dtoa_r+0xb60>
   46c94:	00498c40 	call	498c4 <__multadd>
   46c98:	1021883a 	mov	r16,r2
   46c9c:	a80b883a 	mov	r5,r21
   46ca0:	8009883a 	mov	r4,r16
   46ca4:	0045f140 	call	45f14 <quorem>
   46ca8:	10800c04 	addi	r2,r2,48
   46cac:	90800005 	stb	r2,0(r18)
   46cb0:	94800044 	addi	r18,r18,1
   46cb4:	9507c83a 	sub	r3,r18,r20
   46cb8:	000f883a 	mov	r7,zero
   46cbc:	01800284 	movi	r6,10
   46cc0:	800b883a 	mov	r5,r16
   46cc4:	e009883a 	mov	r4,fp
   46cc8:	1cfff216 	blt	r3,r19,46c94 <__alt_data_end+0xfffd4c94>
   46ccc:	1011883a 	mov	r8,r2
   46cd0:	d8800617 	ldw	r2,24(sp)
   46cd4:	0082370e 	bge	zero,r2,475b4 <_dtoa_r+0x1478>
   46cd8:	d9000717 	ldw	r4,28(sp)
   46cdc:	0025883a 	mov	r18,zero
   46ce0:	20af883a 	add	r23,r4,r2
   46ce4:	01800044 	movi	r6,1
   46ce8:	800b883a 	mov	r5,r16
   46cec:	e009883a 	mov	r4,fp
   46cf0:	da001715 	stw	r8,92(sp)
   46cf4:	004a0300 	call	4a030 <__lshift>
   46cf8:	a80b883a 	mov	r5,r21
   46cfc:	1009883a 	mov	r4,r2
   46d00:	d8800915 	stw	r2,36(sp)
   46d04:	004a1780 	call	4a178 <__mcmp>
   46d08:	da001717 	ldw	r8,92(sp)
   46d0c:	0081800e 	bge	zero,r2,47310 <_dtoa_r+0x11d4>
   46d10:	b93fffc3 	ldbu	r4,-1(r23)
   46d14:	b8bfffc4 	addi	r2,r23,-1
   46d18:	1007883a 	mov	r3,r2
   46d1c:	01800e44 	movi	r6,57
   46d20:	d9c00717 	ldw	r7,28(sp)
   46d24:	00000506 	br	46d3c <_dtoa_r+0xc00>
   46d28:	18ffffc4 	addi	r3,r3,-1
   46d2c:	11c12326 	beq	r2,r7,471bc <_dtoa_r+0x1080>
   46d30:	19000003 	ldbu	r4,0(r3)
   46d34:	102f883a 	mov	r23,r2
   46d38:	10bfffc4 	addi	r2,r2,-1
   46d3c:	21403fcc 	andi	r5,r4,255
   46d40:	2940201c 	xori	r5,r5,128
   46d44:	297fe004 	addi	r5,r5,-128
   46d48:	29bff726 	beq	r5,r6,46d28 <__alt_data_end+0xfffd4d28>
   46d4c:	21000044 	addi	r4,r4,1
   46d50:	11000005 	stb	r4,0(r2)
   46d54:	a80b883a 	mov	r5,r21
   46d58:	e009883a 	mov	r4,fp
   46d5c:	004989c0 	call	4989c <_Bfree>
   46d60:	883ea026 	beq	r17,zero,467e4 <__alt_data_end+0xfffd47e4>
   46d64:	90000426 	beq	r18,zero,46d78 <_dtoa_r+0xc3c>
   46d68:	94400326 	beq	r18,r17,46d78 <_dtoa_r+0xc3c>
   46d6c:	900b883a 	mov	r5,r18
   46d70:	e009883a 	mov	r4,fp
   46d74:	004989c0 	call	4989c <_Bfree>
   46d78:	880b883a 	mov	r5,r17
   46d7c:	e009883a 	mov	r4,fp
   46d80:	004989c0 	call	4989c <_Bfree>
   46d84:	003e9706 	br	467e4 <__alt_data_end+0xfffd47e4>
   46d88:	01800044 	movi	r6,1
   46d8c:	d9800e15 	stw	r6,56(sp)
   46d90:	003d9606 	br	463ec <__alt_data_end+0xfffd43ec>
   46d94:	d8800817 	ldw	r2,32(sp)
   46d98:	d8c00517 	ldw	r3,20(sp)
   46d9c:	d8000d15 	stw	zero,52(sp)
   46da0:	10c5c83a 	sub	r2,r2,r3
   46da4:	00c9c83a 	sub	r4,zero,r3
   46da8:	d8800815 	stw	r2,32(sp)
   46dac:	d9000a15 	stw	r4,40(sp)
   46db0:	003d9706 	br	46410 <__alt_data_end+0xfffd4410>
   46db4:	05adc83a 	sub	r22,zero,r22
   46db8:	dd800815 	stw	r22,32(sp)
   46dbc:	002d883a 	mov	r22,zero
   46dc0:	003d8e06 	br	463fc <__alt_data_end+0xfffd43fc>
   46dc4:	d9000517 	ldw	r4,20(sp)
   46dc8:	0051a880 	call	51a88 <__floatsidf>
   46dcc:	100d883a 	mov	r6,r2
   46dd0:	180f883a 	mov	r7,r3
   46dd4:	a009883a 	mov	r4,r20
   46dd8:	880b883a 	mov	r5,r17
   46ddc:	00506480 	call	50648 <__eqdf2>
   46de0:	103d7126 	beq	r2,zero,463a8 <__alt_data_end+0xfffd43a8>
   46de4:	d9c00517 	ldw	r7,20(sp)
   46de8:	39ffffc4 	addi	r7,r7,-1
   46dec:	d9c00515 	stw	r7,20(sp)
   46df0:	003d6d06 	br	463a8 <__alt_data_end+0xfffd43a8>
   46df4:	dd400a17 	ldw	r21,40(sp)
   46df8:	dd000817 	ldw	r20,32(sp)
   46dfc:	0023883a 	mov	r17,zero
   46e00:	003f4806 	br	46b24 <__alt_data_end+0xfffd4b24>
   46e04:	10e3c83a 	sub	r17,r2,r3
   46e08:	9448983a 	sll	r4,r18,r17
   46e0c:	003d3206 	br	462d8 <__alt_data_end+0xfffd42d8>
   46e10:	d8000e15 	stw	zero,56(sp)
   46e14:	003d7506 	br	463ec <__alt_data_end+0xfffd43ec>
   46e18:	b005883a 	mov	r2,r22
   46e1c:	003f4506 	br	46b34 <__alt_data_end+0xfffd4b34>
   46e20:	dc000915 	stw	r16,36(sp)
   46e24:	d9800a17 	ldw	r6,40(sp)
   46e28:	d9400917 	ldw	r5,36(sp)
   46e2c:	e009883a 	mov	r4,fp
   46e30:	0049ef00 	call	49ef0 <__pow5mult>
   46e34:	1021883a 	mov	r16,r2
   46e38:	003f5a06 	br	46ba4 <__alt_data_end+0xfffd4ba4>
   46e3c:	01c00044 	movi	r7,1
   46e40:	d9c00b15 	stw	r7,44(sp)
   46e44:	d8802217 	ldw	r2,136(sp)
   46e48:	0081280e 	bge	zero,r2,472ec <_dtoa_r+0x11b0>
   46e4c:	100d883a 	mov	r6,r2
   46e50:	1021883a 	mov	r16,r2
   46e54:	d8800c15 	stw	r2,48(sp)
   46e58:	d8800615 	stw	r2,24(sp)
   46e5c:	003d8806 	br	46480 <__alt_data_end+0xfffd4480>
   46e60:	d8800617 	ldw	r2,24(sp)
   46e64:	00be9b16 	blt	zero,r2,468d4 <__alt_data_end+0xfffd48d4>
   46e68:	10010f1e 	bne	r2,zero,472a8 <_dtoa_r+0x116c>
   46e6c:	880b883a 	mov	r5,r17
   46e70:	000d883a 	mov	r6,zero
   46e74:	01d00534 	movhi	r7,16404
   46e78:	8009883a 	mov	r4,r16
   46e7c:	00508a00 	call	508a0 <__muldf3>
   46e80:	900d883a 	mov	r6,r18
   46e84:	980f883a 	mov	r7,r19
   46e88:	1009883a 	mov	r4,r2
   46e8c:	180b883a 	mov	r5,r3
   46e90:	00506d00 	call	506d0 <__gedf2>
   46e94:	002b883a 	mov	r21,zero
   46e98:	0023883a 	mov	r17,zero
   46e9c:	1000bf16 	blt	r2,zero,4719c <_dtoa_r+0x1060>
   46ea0:	d9802217 	ldw	r6,136(sp)
   46ea4:	ddc00717 	ldw	r23,28(sp)
   46ea8:	018c303a 	nor	r6,zero,r6
   46eac:	d9800515 	stw	r6,20(sp)
   46eb0:	a80b883a 	mov	r5,r21
   46eb4:	e009883a 	mov	r4,fp
   46eb8:	004989c0 	call	4989c <_Bfree>
   46ebc:	883e4926 	beq	r17,zero,467e4 <__alt_data_end+0xfffd47e4>
   46ec0:	003fad06 	br	46d78 <__alt_data_end+0xfffd4d78>
   46ec4:	d9c01117 	ldw	r7,68(sp)
   46ec8:	3801bc26 	beq	r7,zero,475bc <_dtoa_r+0x1480>
   46ecc:	10810cc4 	addi	r2,r2,1075
   46ed0:	dd400a17 	ldw	r21,40(sp)
   46ed4:	dd000817 	ldw	r20,32(sp)
   46ed8:	003f0a06 	br	46b04 <__alt_data_end+0xfffd4b04>
   46edc:	00800704 	movi	r2,28
   46ee0:	d9000817 	ldw	r4,32(sp)
   46ee4:	a0a9883a 	add	r20,r20,r2
   46ee8:	b0ad883a 	add	r22,r22,r2
   46eec:	2089883a 	add	r4,r4,r2
   46ef0:	d9000815 	stw	r4,32(sp)
   46ef4:	003f5106 	br	46c3c <__alt_data_end+0xfffd4c3c>
   46ef8:	d8c00317 	ldw	r3,12(sp)
   46efc:	b8c1fc0e 	bge	r23,r3,476f0 <_dtoa_r+0x15b4>
   46f00:	0027883a 	mov	r19,zero
   46f04:	b805883a 	mov	r2,r23
   46f08:	003f3e06 	br	46c04 <__alt_data_end+0xfffd4c04>
   46f0c:	880b883a 	mov	r5,r17
   46f10:	e009883a 	mov	r4,fp
   46f14:	000f883a 	mov	r7,zero
   46f18:	01800284 	movi	r6,10
   46f1c:	00498c40 	call	498c4 <__multadd>
   46f20:	d9000c17 	ldw	r4,48(sp)
   46f24:	1023883a 	mov	r17,r2
   46f28:	0102040e 	bge	zero,r4,4773c <_dtoa_r+0x1600>
   46f2c:	d9000615 	stw	r4,24(sp)
   46f30:	0500050e 	bge	zero,r20,46f48 <_dtoa_r+0xe0c>
   46f34:	880b883a 	mov	r5,r17
   46f38:	a00d883a 	mov	r6,r20
   46f3c:	e009883a 	mov	r4,fp
   46f40:	004a0300 	call	4a030 <__lshift>
   46f44:	1023883a 	mov	r17,r2
   46f48:	9801241e 	bne	r19,zero,473dc <_dtoa_r+0x12a0>
   46f4c:	8829883a 	mov	r20,r17
   46f50:	d9000617 	ldw	r4,24(sp)
   46f54:	dcc00717 	ldw	r19,28(sp)
   46f58:	9480004c 	andi	r18,r18,1
   46f5c:	20bfffc4 	addi	r2,r4,-1
   46f60:	9885883a 	add	r2,r19,r2
   46f64:	d8800415 	stw	r2,16(sp)
   46f68:	dc800615 	stw	r18,24(sp)
   46f6c:	a80b883a 	mov	r5,r21
   46f70:	8009883a 	mov	r4,r16
   46f74:	0045f140 	call	45f14 <quorem>
   46f78:	880b883a 	mov	r5,r17
   46f7c:	8009883a 	mov	r4,r16
   46f80:	102f883a 	mov	r23,r2
   46f84:	004a1780 	call	4a178 <__mcmp>
   46f88:	a80b883a 	mov	r5,r21
   46f8c:	a00d883a 	mov	r6,r20
   46f90:	e009883a 	mov	r4,fp
   46f94:	102d883a 	mov	r22,r2
   46f98:	004a1d80 	call	4a1d8 <__mdiff>
   46f9c:	1007883a 	mov	r3,r2
   46fa0:	10800317 	ldw	r2,12(r2)
   46fa4:	bc800c04 	addi	r18,r23,48
   46fa8:	180b883a 	mov	r5,r3
   46fac:	10004e1e 	bne	r2,zero,470e8 <_dtoa_r+0xfac>
   46fb0:	8009883a 	mov	r4,r16
   46fb4:	d8c01615 	stw	r3,88(sp)
   46fb8:	004a1780 	call	4a178 <__mcmp>
   46fbc:	d8c01617 	ldw	r3,88(sp)
   46fc0:	e009883a 	mov	r4,fp
   46fc4:	d8801615 	stw	r2,88(sp)
   46fc8:	180b883a 	mov	r5,r3
   46fcc:	004989c0 	call	4989c <_Bfree>
   46fd0:	d8801617 	ldw	r2,88(sp)
   46fd4:	1000041e 	bne	r2,zero,46fe8 <_dtoa_r+0xeac>
   46fd8:	d9800317 	ldw	r6,12(sp)
   46fdc:	3000021e 	bne	r6,zero,46fe8 <_dtoa_r+0xeac>
   46fe0:	d8c00617 	ldw	r3,24(sp)
   46fe4:	18003726 	beq	r3,zero,470c4 <_dtoa_r+0xf88>
   46fe8:	b0002016 	blt	r22,zero,4706c <_dtoa_r+0xf30>
   46fec:	b000041e 	bne	r22,zero,47000 <_dtoa_r+0xec4>
   46ff0:	d9000317 	ldw	r4,12(sp)
   46ff4:	2000021e 	bne	r4,zero,47000 <_dtoa_r+0xec4>
   46ff8:	d8c00617 	ldw	r3,24(sp)
   46ffc:	18001b26 	beq	r3,zero,4706c <_dtoa_r+0xf30>
   47000:	00810716 	blt	zero,r2,47420 <_dtoa_r+0x12e4>
   47004:	d8c00417 	ldw	r3,16(sp)
   47008:	9d800044 	addi	r22,r19,1
   4700c:	9c800005 	stb	r18,0(r19)
   47010:	b02f883a 	mov	r23,r22
   47014:	98c10626 	beq	r19,r3,47430 <_dtoa_r+0x12f4>
   47018:	800b883a 	mov	r5,r16
   4701c:	000f883a 	mov	r7,zero
   47020:	01800284 	movi	r6,10
   47024:	e009883a 	mov	r4,fp
   47028:	00498c40 	call	498c4 <__multadd>
   4702c:	1021883a 	mov	r16,r2
   47030:	000f883a 	mov	r7,zero
   47034:	01800284 	movi	r6,10
   47038:	880b883a 	mov	r5,r17
   4703c:	e009883a 	mov	r4,fp
   47040:	8d002526 	beq	r17,r20,470d8 <_dtoa_r+0xf9c>
   47044:	00498c40 	call	498c4 <__multadd>
   47048:	a00b883a 	mov	r5,r20
   4704c:	000f883a 	mov	r7,zero
   47050:	01800284 	movi	r6,10
   47054:	e009883a 	mov	r4,fp
   47058:	1023883a 	mov	r17,r2
   4705c:	00498c40 	call	498c4 <__multadd>
   47060:	1029883a 	mov	r20,r2
   47064:	b027883a 	mov	r19,r22
   47068:	003fc006 	br	46f6c <__alt_data_end+0xfffd4f6c>
   4706c:	9011883a 	mov	r8,r18
   47070:	00800e0e 	bge	zero,r2,470ac <_dtoa_r+0xf70>
   47074:	800b883a 	mov	r5,r16
   47078:	01800044 	movi	r6,1
   4707c:	e009883a 	mov	r4,fp
   47080:	da001715 	stw	r8,92(sp)
   47084:	004a0300 	call	4a030 <__lshift>
   47088:	a80b883a 	mov	r5,r21
   4708c:	1009883a 	mov	r4,r2
   47090:	1021883a 	mov	r16,r2
   47094:	004a1780 	call	4a178 <__mcmp>
   47098:	da001717 	ldw	r8,92(sp)
   4709c:	0081960e 	bge	zero,r2,476f8 <_dtoa_r+0x15bc>
   470a0:	00800e44 	movi	r2,57
   470a4:	40817026 	beq	r8,r2,47668 <_dtoa_r+0x152c>
   470a8:	ba000c44 	addi	r8,r23,49
   470ac:	8825883a 	mov	r18,r17
   470b0:	9dc00044 	addi	r23,r19,1
   470b4:	9a000005 	stb	r8,0(r19)
   470b8:	a023883a 	mov	r17,r20
   470bc:	dc000915 	stw	r16,36(sp)
   470c0:	003f2406 	br	46d54 <__alt_data_end+0xfffd4d54>
   470c4:	00800e44 	movi	r2,57
   470c8:	9011883a 	mov	r8,r18
   470cc:	90816626 	beq	r18,r2,47668 <_dtoa_r+0x152c>
   470d0:	05bff516 	blt	zero,r22,470a8 <__alt_data_end+0xfffd50a8>
   470d4:	003ff506 	br	470ac <__alt_data_end+0xfffd50ac>
   470d8:	00498c40 	call	498c4 <__multadd>
   470dc:	1023883a 	mov	r17,r2
   470e0:	1029883a 	mov	r20,r2
   470e4:	003fdf06 	br	47064 <__alt_data_end+0xfffd5064>
   470e8:	e009883a 	mov	r4,fp
   470ec:	004989c0 	call	4989c <_Bfree>
   470f0:	00800044 	movi	r2,1
   470f4:	003fbc06 	br	46fe8 <__alt_data_end+0xfffd4fe8>
   470f8:	a80b883a 	mov	r5,r21
   470fc:	8009883a 	mov	r4,r16
   47100:	004a1780 	call	4a178 <__mcmp>
   47104:	103edb0e 	bge	r2,zero,46c74 <__alt_data_end+0xfffd4c74>
   47108:	800b883a 	mov	r5,r16
   4710c:	000f883a 	mov	r7,zero
   47110:	01800284 	movi	r6,10
   47114:	e009883a 	mov	r4,fp
   47118:	00498c40 	call	498c4 <__multadd>
   4711c:	1021883a 	mov	r16,r2
   47120:	d8800517 	ldw	r2,20(sp)
   47124:	d8c00b17 	ldw	r3,44(sp)
   47128:	10bfffc4 	addi	r2,r2,-1
   4712c:	d8800515 	stw	r2,20(sp)
   47130:	183f761e 	bne	r3,zero,46f0c <__alt_data_end+0xfffd4f0c>
   47134:	d9000c17 	ldw	r4,48(sp)
   47138:	0101730e 	bge	zero,r4,47708 <_dtoa_r+0x15cc>
   4713c:	d9000615 	stw	r4,24(sp)
   47140:	003ed006 	br	46c84 <__alt_data_end+0xfffd4c84>
   47144:	00800084 	movi	r2,2
   47148:	3081861e 	bne	r6,r2,47764 <_dtoa_r+0x1628>
   4714c:	d8000b15 	stw	zero,44(sp)
   47150:	003f3c06 	br	46e44 <__alt_data_end+0xfffd4e44>
   47154:	dc000917 	ldw	r16,36(sp)
   47158:	003e9206 	br	46ba4 <__alt_data_end+0xfffd4ba4>
   4715c:	d9c00317 	ldw	r7,12(sp)
   47160:	00800084 	movi	r2,2
   47164:	11fec50e 	bge	r2,r7,46c7c <__alt_data_end+0xfffd4c7c>
   47168:	d9000617 	ldw	r4,24(sp)
   4716c:	20013c1e 	bne	r4,zero,47660 <_dtoa_r+0x1524>
   47170:	a80b883a 	mov	r5,r21
   47174:	000f883a 	mov	r7,zero
   47178:	01800144 	movi	r6,5
   4717c:	e009883a 	mov	r4,fp
   47180:	00498c40 	call	498c4 <__multadd>
   47184:	100b883a 	mov	r5,r2
   47188:	8009883a 	mov	r4,r16
   4718c:	102b883a 	mov	r21,r2
   47190:	004a1780 	call	4a178 <__mcmp>
   47194:	dc000915 	stw	r16,36(sp)
   47198:	00bf410e 	bge	zero,r2,46ea0 <__alt_data_end+0xfffd4ea0>
   4719c:	d9c00717 	ldw	r7,28(sp)
   471a0:	00800c44 	movi	r2,49
   471a4:	38800005 	stb	r2,0(r7)
   471a8:	d8800517 	ldw	r2,20(sp)
   471ac:	3dc00044 	addi	r23,r7,1
   471b0:	10800044 	addi	r2,r2,1
   471b4:	d8800515 	stw	r2,20(sp)
   471b8:	003f3d06 	br	46eb0 <__alt_data_end+0xfffd4eb0>
   471bc:	d9800517 	ldw	r6,20(sp)
   471c0:	d9c00717 	ldw	r7,28(sp)
   471c4:	00800c44 	movi	r2,49
   471c8:	31800044 	addi	r6,r6,1
   471cc:	d9800515 	stw	r6,20(sp)
   471d0:	38800005 	stb	r2,0(r7)
   471d4:	003edf06 	br	46d54 <__alt_data_end+0xfffd4d54>
   471d8:	d8000b15 	stw	zero,44(sp)
   471dc:	003c9f06 	br	4645c <__alt_data_end+0xfffd445c>
   471e0:	903e7e1e 	bne	r18,zero,46bdc <__alt_data_end+0xfffd4bdc>
   471e4:	00800434 	movhi	r2,16
   471e8:	10bfffc4 	addi	r2,r2,-1
   471ec:	9884703a 	and	r2,r19,r2
   471f0:	1000ea1e 	bne	r2,zero,4759c <_dtoa_r+0x1460>
   471f4:	9cdffc2c 	andhi	r19,r19,32752
   471f8:	9800e826 	beq	r19,zero,4759c <_dtoa_r+0x1460>
   471fc:	d9c00817 	ldw	r7,32(sp)
   47200:	b5800044 	addi	r22,r22,1
   47204:	04c00044 	movi	r19,1
   47208:	39c00044 	addi	r7,r7,1
   4720c:	d9c00815 	stw	r7,32(sp)
   47210:	d8800d17 	ldw	r2,52(sp)
   47214:	103e721e 	bne	r2,zero,46be0 <__alt_data_end+0xfffd4be0>
   47218:	00800044 	movi	r2,1
   4721c:	003e7906 	br	46c04 <__alt_data_end+0xfffd4c04>
   47220:	8009883a 	mov	r4,r16
   47224:	0051a880 	call	51a88 <__floatsidf>
   47228:	d9800f17 	ldw	r6,60(sp)
   4722c:	d9c01017 	ldw	r7,64(sp)
   47230:	1009883a 	mov	r4,r2
   47234:	180b883a 	mov	r5,r3
   47238:	00508a00 	call	508a0 <__muldf3>
   4723c:	000d883a 	mov	r6,zero
   47240:	01d00734 	movhi	r7,16412
   47244:	1009883a 	mov	r4,r2
   47248:	180b883a 	mov	r5,r3
   4724c:	004f3cc0 	call	4f3cc <__adddf3>
   47250:	047f3034 	movhi	r17,64704
   47254:	1021883a 	mov	r16,r2
   47258:	1c63883a 	add	r17,r3,r17
   4725c:	d9000f17 	ldw	r4,60(sp)
   47260:	d9401017 	ldw	r5,64(sp)
   47264:	000d883a 	mov	r6,zero
   47268:	01d00534 	movhi	r7,16404
   4726c:	005110c0 	call	5110c <__subdf3>
   47270:	800d883a 	mov	r6,r16
   47274:	880f883a 	mov	r7,r17
   47278:	1009883a 	mov	r4,r2
   4727c:	180b883a 	mov	r5,r3
   47280:	102b883a 	mov	r21,r2
   47284:	1829883a 	mov	r20,r3
   47288:	00506d00 	call	506d0 <__gedf2>
   4728c:	00806c16 	blt	zero,r2,47440 <_dtoa_r+0x1304>
   47290:	89e0003c 	xorhi	r7,r17,32768
   47294:	800d883a 	mov	r6,r16
   47298:	a809883a 	mov	r4,r21
   4729c:	a00b883a 	mov	r5,r20
   472a0:	00507ac0 	call	507ac <__ledf2>
   472a4:	103d7e0e 	bge	r2,zero,468a0 <__alt_data_end+0xfffd48a0>
   472a8:	002b883a 	mov	r21,zero
   472ac:	0023883a 	mov	r17,zero
   472b0:	003efb06 	br	46ea0 <__alt_data_end+0xfffd4ea0>
   472b4:	d8800717 	ldw	r2,28(sp)
   472b8:	003bd006 	br	461fc <__alt_data_end+0xfffd41fc>
   472bc:	d9000a17 	ldw	r4,40(sp)
   472c0:	d9800d17 	ldw	r6,52(sp)
   472c4:	dd400a15 	stw	r21,40(sp)
   472c8:	a905c83a 	sub	r2,r21,r4
   472cc:	308d883a 	add	r6,r6,r2
   472d0:	d9800d15 	stw	r6,52(sp)
   472d4:	002b883a 	mov	r21,zero
   472d8:	003e0606 	br	46af4 <__alt_data_end+0xfffd4af4>
   472dc:	9023883a 	mov	r17,r18
   472e0:	9829883a 	mov	r20,r19
   472e4:	04000084 	movi	r16,2
   472e8:	003c9206 	br	46534 <__alt_data_end+0xfffd4534>
   472ec:	04000044 	movi	r16,1
   472f0:	dc000c15 	stw	r16,48(sp)
   472f4:	dc000615 	stw	r16,24(sp)
   472f8:	dc002215 	stw	r16,136(sp)
   472fc:	e0001115 	stw	zero,68(fp)
   47300:	000b883a 	mov	r5,zero
   47304:	003c6906 	br	464ac <__alt_data_end+0xfffd44ac>
   47308:	3021883a 	mov	r16,r6
   4730c:	003ffb06 	br	472fc <__alt_data_end+0xfffd52fc>
   47310:	1000021e 	bne	r2,zero,4731c <_dtoa_r+0x11e0>
   47314:	4200004c 	andi	r8,r8,1
   47318:	403e7d1e 	bne	r8,zero,46d10 <__alt_data_end+0xfffd4d10>
   4731c:	01000c04 	movi	r4,48
   47320:	00000106 	br	47328 <_dtoa_r+0x11ec>
   47324:	102f883a 	mov	r23,r2
   47328:	b8bfffc4 	addi	r2,r23,-1
   4732c:	10c00007 	ldb	r3,0(r2)
   47330:	193ffc26 	beq	r3,r4,47324 <__alt_data_end+0xfffd5324>
   47334:	003e8706 	br	46d54 <__alt_data_end+0xfffd4d54>
   47338:	d8800517 	ldw	r2,20(sp)
   4733c:	00a3c83a 	sub	r17,zero,r2
   47340:	8800a426 	beq	r17,zero,475d4 <_dtoa_r+0x1498>
   47344:	888003cc 	andi	r2,r17,15
   47348:	100490fa 	slli	r2,r2,3
   4734c:	00c00174 	movhi	r3,5
   47350:	18da5f04 	addi	r3,r3,27004
   47354:	1885883a 	add	r2,r3,r2
   47358:	11800017 	ldw	r6,0(r2)
   4735c:	11c00117 	ldw	r7,4(r2)
   47360:	9009883a 	mov	r4,r18
   47364:	980b883a 	mov	r5,r19
   47368:	8823d13a 	srai	r17,r17,4
   4736c:	00508a00 	call	508a0 <__muldf3>
   47370:	d8800f15 	stw	r2,60(sp)
   47374:	d8c01015 	stw	r3,64(sp)
   47378:	8800e826 	beq	r17,zero,4771c <_dtoa_r+0x15e0>
   4737c:	05000174 	movhi	r20,5
   47380:	a51a5504 	addi	r20,r20,26964
   47384:	04000084 	movi	r16,2
   47388:	8980004c 	andi	r6,r17,1
   4738c:	1009883a 	mov	r4,r2
   47390:	8823d07a 	srai	r17,r17,1
   47394:	180b883a 	mov	r5,r3
   47398:	30000426 	beq	r6,zero,473ac <_dtoa_r+0x1270>
   4739c:	a1800017 	ldw	r6,0(r20)
   473a0:	a1c00117 	ldw	r7,4(r20)
   473a4:	84000044 	addi	r16,r16,1
   473a8:	00508a00 	call	508a0 <__muldf3>
   473ac:	a5000204 	addi	r20,r20,8
   473b0:	883ff51e 	bne	r17,zero,47388 <__alt_data_end+0xfffd5388>
   473b4:	d8800f15 	stw	r2,60(sp)
   473b8:	d8c01015 	stw	r3,64(sp)
   473bc:	003c7606 	br	46598 <__alt_data_end+0xfffd4598>
   473c0:	00c00c04 	movi	r3,48
   473c4:	10c00005 	stb	r3,0(r2)
   473c8:	d8c00517 	ldw	r3,20(sp)
   473cc:	bd3fffc3 	ldbu	r20,-1(r23)
   473d0:	18c00044 	addi	r3,r3,1
   473d4:	d8c00515 	stw	r3,20(sp)
   473d8:	003db906 	br	46ac0 <__alt_data_end+0xfffd4ac0>
   473dc:	89400117 	ldw	r5,4(r17)
   473e0:	e009883a 	mov	r4,fp
   473e4:	00497f40 	call	497f4 <_Balloc>
   473e8:	89800417 	ldw	r6,16(r17)
   473ec:	89400304 	addi	r5,r17,12
   473f0:	11000304 	addi	r4,r2,12
   473f4:	31800084 	addi	r6,r6,2
   473f8:	318d883a 	add	r6,r6,r6
   473fc:	318d883a 	add	r6,r6,r6
   47400:	1027883a 	mov	r19,r2
   47404:	00494280 	call	49428 <memcpy>
   47408:	01800044 	movi	r6,1
   4740c:	980b883a 	mov	r5,r19
   47410:	e009883a 	mov	r4,fp
   47414:	004a0300 	call	4a030 <__lshift>
   47418:	1029883a 	mov	r20,r2
   4741c:	003ecc06 	br	46f50 <__alt_data_end+0xfffd4f50>
   47420:	00800e44 	movi	r2,57
   47424:	90809026 	beq	r18,r2,47668 <_dtoa_r+0x152c>
   47428:	92000044 	addi	r8,r18,1
   4742c:	003f1f06 	br	470ac <__alt_data_end+0xfffd50ac>
   47430:	9011883a 	mov	r8,r18
   47434:	8825883a 	mov	r18,r17
   47438:	a023883a 	mov	r17,r20
   4743c:	003e2906 	br	46ce4 <__alt_data_end+0xfffd4ce4>
   47440:	002b883a 	mov	r21,zero
   47444:	0023883a 	mov	r17,zero
   47448:	003f5406 	br	4719c <__alt_data_end+0xfffd519c>
   4744c:	61bfffc4 	addi	r6,r12,-1
   47450:	300490fa 	slli	r2,r6,3
   47454:	00c00174 	movhi	r3,5
   47458:	18da5f04 	addi	r3,r3,27004
   4745c:	1885883a 	add	r2,r3,r2
   47460:	11000017 	ldw	r4,0(r2)
   47464:	11400117 	ldw	r5,4(r2)
   47468:	d8800717 	ldw	r2,28(sp)
   4746c:	880f883a 	mov	r7,r17
   47470:	d9801215 	stw	r6,72(sp)
   47474:	800d883a 	mov	r6,r16
   47478:	db001615 	stw	r12,88(sp)
   4747c:	15c00044 	addi	r23,r2,1
   47480:	00508a00 	call	508a0 <__muldf3>
   47484:	d9401017 	ldw	r5,64(sp)
   47488:	d9000f17 	ldw	r4,60(sp)
   4748c:	d8c01515 	stw	r3,84(sp)
   47490:	d8801415 	stw	r2,80(sp)
   47494:	0051a080 	call	51a08 <__fixdfsi>
   47498:	1009883a 	mov	r4,r2
   4749c:	1021883a 	mov	r16,r2
   474a0:	0051a880 	call	51a88 <__floatsidf>
   474a4:	d9000f17 	ldw	r4,60(sp)
   474a8:	d9401017 	ldw	r5,64(sp)
   474ac:	100d883a 	mov	r6,r2
   474b0:	180f883a 	mov	r7,r3
   474b4:	005110c0 	call	5110c <__subdf3>
   474b8:	1829883a 	mov	r20,r3
   474bc:	d8c00717 	ldw	r3,28(sp)
   474c0:	84000c04 	addi	r16,r16,48
   474c4:	1023883a 	mov	r17,r2
   474c8:	1c000005 	stb	r16,0(r3)
   474cc:	db001617 	ldw	r12,88(sp)
   474d0:	00800044 	movi	r2,1
   474d4:	60802226 	beq	r12,r2,47560 <_dtoa_r+0x1424>
   474d8:	d9c00717 	ldw	r7,28(sp)
   474dc:	8805883a 	mov	r2,r17
   474e0:	b82b883a 	mov	r21,r23
   474e4:	3b19883a 	add	r12,r7,r12
   474e8:	6023883a 	mov	r17,r12
   474ec:	a007883a 	mov	r3,r20
   474f0:	dc800f15 	stw	r18,60(sp)
   474f4:	000d883a 	mov	r6,zero
   474f8:	01d00934 	movhi	r7,16420
   474fc:	1009883a 	mov	r4,r2
   47500:	180b883a 	mov	r5,r3
   47504:	00508a00 	call	508a0 <__muldf3>
   47508:	180b883a 	mov	r5,r3
   4750c:	1009883a 	mov	r4,r2
   47510:	1829883a 	mov	r20,r3
   47514:	1025883a 	mov	r18,r2
   47518:	0051a080 	call	51a08 <__fixdfsi>
   4751c:	1009883a 	mov	r4,r2
   47520:	1021883a 	mov	r16,r2
   47524:	0051a880 	call	51a88 <__floatsidf>
   47528:	100d883a 	mov	r6,r2
   4752c:	180f883a 	mov	r7,r3
   47530:	9009883a 	mov	r4,r18
   47534:	a00b883a 	mov	r5,r20
   47538:	84000c04 	addi	r16,r16,48
   4753c:	005110c0 	call	5110c <__subdf3>
   47540:	ad400044 	addi	r21,r21,1
   47544:	ac3fffc5 	stb	r16,-1(r21)
   47548:	ac7fea1e 	bne	r21,r17,474f4 <__alt_data_end+0xfffd54f4>
   4754c:	1023883a 	mov	r17,r2
   47550:	d8801217 	ldw	r2,72(sp)
   47554:	dc800f17 	ldw	r18,60(sp)
   47558:	1829883a 	mov	r20,r3
   4755c:	b8af883a 	add	r23,r23,r2
   47560:	d9001417 	ldw	r4,80(sp)
   47564:	d9401517 	ldw	r5,84(sp)
   47568:	000d883a 	mov	r6,zero
   4756c:	01cff834 	movhi	r7,16352
   47570:	004f3cc0 	call	4f3cc <__adddf3>
   47574:	880d883a 	mov	r6,r17
   47578:	a00f883a 	mov	r7,r20
   4757c:	1009883a 	mov	r4,r2
   47580:	180b883a 	mov	r5,r3
   47584:	00507ac0 	call	507ac <__ledf2>
   47588:	10003e0e 	bge	r2,zero,47684 <_dtoa_r+0x1548>
   4758c:	d9001317 	ldw	r4,76(sp)
   47590:	bd3fffc3 	ldbu	r20,-1(r23)
   47594:	d9000515 	stw	r4,20(sp)
   47598:	003d3b06 	br	46a88 <__alt_data_end+0xfffd4a88>
   4759c:	0027883a 	mov	r19,zero
   475a0:	003f1b06 	br	47210 <__alt_data_end+0xfffd5210>
   475a4:	d8800817 	ldw	r2,32(sp)
   475a8:	11e9c83a 	sub	r20,r2,r7
   475ac:	0005883a 	mov	r2,zero
   475b0:	003d5406 	br	46b04 <__alt_data_end+0xfffd4b04>
   475b4:	00800044 	movi	r2,1
   475b8:	003dc706 	br	46cd8 <__alt_data_end+0xfffd4cd8>
   475bc:	d8c00217 	ldw	r3,8(sp)
   475c0:	00800d84 	movi	r2,54
   475c4:	dd400a17 	ldw	r21,40(sp)
   475c8:	10c5c83a 	sub	r2,r2,r3
   475cc:	dd000817 	ldw	r20,32(sp)
   475d0:	003d4c06 	br	46b04 <__alt_data_end+0xfffd4b04>
   475d4:	dc800f15 	stw	r18,60(sp)
   475d8:	dcc01015 	stw	r19,64(sp)
   475dc:	04000084 	movi	r16,2
   475e0:	003bed06 	br	46598 <__alt_data_end+0xfffd4598>
   475e4:	d9000617 	ldw	r4,24(sp)
   475e8:	203f0d26 	beq	r4,zero,47220 <__alt_data_end+0xfffd5220>
   475ec:	d9800c17 	ldw	r6,48(sp)
   475f0:	01bcab0e 	bge	zero,r6,468a0 <__alt_data_end+0xfffd48a0>
   475f4:	d9401017 	ldw	r5,64(sp)
   475f8:	d9000f17 	ldw	r4,60(sp)
   475fc:	000d883a 	mov	r6,zero
   47600:	01d00934 	movhi	r7,16420
   47604:	00508a00 	call	508a0 <__muldf3>
   47608:	81000044 	addi	r4,r16,1
   4760c:	d8800f15 	stw	r2,60(sp)
   47610:	d8c01015 	stw	r3,64(sp)
   47614:	0051a880 	call	51a88 <__floatsidf>
   47618:	d9800f17 	ldw	r6,60(sp)
   4761c:	d9c01017 	ldw	r7,64(sp)
   47620:	1009883a 	mov	r4,r2
   47624:	180b883a 	mov	r5,r3
   47628:	00508a00 	call	508a0 <__muldf3>
   4762c:	01d00734 	movhi	r7,16412
   47630:	000d883a 	mov	r6,zero
   47634:	1009883a 	mov	r4,r2
   47638:	180b883a 	mov	r5,r3
   4763c:	004f3cc0 	call	4f3cc <__adddf3>
   47640:	d9c00517 	ldw	r7,20(sp)
   47644:	047f3034 	movhi	r17,64704
   47648:	1021883a 	mov	r16,r2
   4764c:	39ffffc4 	addi	r7,r7,-1
   47650:	d9c01315 	stw	r7,76(sp)
   47654:	1c63883a 	add	r17,r3,r17
   47658:	db000c17 	ldw	r12,48(sp)
   4765c:	003bea06 	br	46608 <__alt_data_end+0xfffd4608>
   47660:	dc000915 	stw	r16,36(sp)
   47664:	003e0e06 	br	46ea0 <__alt_data_end+0xfffd4ea0>
   47668:	01000e44 	movi	r4,57
   4766c:	8825883a 	mov	r18,r17
   47670:	9dc00044 	addi	r23,r19,1
   47674:	99000005 	stb	r4,0(r19)
   47678:	a023883a 	mov	r17,r20
   4767c:	dc000915 	stw	r16,36(sp)
   47680:	003da406 	br	46d14 <__alt_data_end+0xfffd4d14>
   47684:	d9801417 	ldw	r6,80(sp)
   47688:	d9c01517 	ldw	r7,84(sp)
   4768c:	0009883a 	mov	r4,zero
   47690:	014ff834 	movhi	r5,16352
   47694:	005110c0 	call	5110c <__subdf3>
   47698:	880d883a 	mov	r6,r17
   4769c:	a00f883a 	mov	r7,r20
   476a0:	1009883a 	mov	r4,r2
   476a4:	180b883a 	mov	r5,r3
   476a8:	00506d00 	call	506d0 <__gedf2>
   476ac:	00bc7c0e 	bge	zero,r2,468a0 <__alt_data_end+0xfffd48a0>
   476b0:	01000c04 	movi	r4,48
   476b4:	00000106 	br	476bc <_dtoa_r+0x1580>
   476b8:	102f883a 	mov	r23,r2
   476bc:	b8bfffc4 	addi	r2,r23,-1
   476c0:	10c00007 	ldb	r3,0(r2)
   476c4:	193ffc26 	beq	r3,r4,476b8 <__alt_data_end+0xfffd56b8>
   476c8:	d9801317 	ldw	r6,76(sp)
   476cc:	d9800515 	stw	r6,20(sp)
   476d0:	003c4406 	br	467e4 <__alt_data_end+0xfffd47e4>
   476d4:	d9801317 	ldw	r6,76(sp)
   476d8:	d9800515 	stw	r6,20(sp)
   476dc:	003cea06 	br	46a88 <__alt_data_end+0xfffd4a88>
   476e0:	dd800f17 	ldw	r22,60(sp)
   476e4:	dcc01017 	ldw	r19,64(sp)
   476e8:	dc801217 	ldw	r18,72(sp)
   476ec:	003c6c06 	br	468a0 <__alt_data_end+0xfffd48a0>
   476f0:	903e031e 	bne	r18,zero,46f00 <__alt_data_end+0xfffd4f00>
   476f4:	003ebb06 	br	471e4 <__alt_data_end+0xfffd51e4>
   476f8:	103e6c1e 	bne	r2,zero,470ac <__alt_data_end+0xfffd50ac>
   476fc:	4080004c 	andi	r2,r8,1
   47700:	103e6a26 	beq	r2,zero,470ac <__alt_data_end+0xfffd50ac>
   47704:	003e6606 	br	470a0 <__alt_data_end+0xfffd50a0>
   47708:	d8c00317 	ldw	r3,12(sp)
   4770c:	00800084 	movi	r2,2
   47710:	10c02916 	blt	r2,r3,477b8 <_dtoa_r+0x167c>
   47714:	d9000c17 	ldw	r4,48(sp)
   47718:	003e8806 	br	4713c <__alt_data_end+0xfffd513c>
   4771c:	04000084 	movi	r16,2
   47720:	003b9d06 	br	46598 <__alt_data_end+0xfffd4598>
   47724:	d9001317 	ldw	r4,76(sp)
   47728:	d9000515 	stw	r4,20(sp)
   4772c:	003cd606 	br	46a88 <__alt_data_end+0xfffd4a88>
   47730:	d8801317 	ldw	r2,76(sp)
   47734:	d8800515 	stw	r2,20(sp)
   47738:	003c2a06 	br	467e4 <__alt_data_end+0xfffd47e4>
   4773c:	d9800317 	ldw	r6,12(sp)
   47740:	00800084 	movi	r2,2
   47744:	11801516 	blt	r2,r6,4779c <_dtoa_r+0x1660>
   47748:	d9c00c17 	ldw	r7,48(sp)
   4774c:	d9c00615 	stw	r7,24(sp)
   47750:	003df706 	br	46f30 <__alt_data_end+0xfffd4f30>
   47754:	193d3926 	beq	r3,r4,46c3c <__alt_data_end+0xfffd4c3c>
   47758:	00c00f04 	movi	r3,60
   4775c:	1885c83a 	sub	r2,r3,r2
   47760:	003ddf06 	br	46ee0 <__alt_data_end+0xfffd4ee0>
   47764:	e009883a 	mov	r4,fp
   47768:	e0001115 	stw	zero,68(fp)
   4776c:	000b883a 	mov	r5,zero
   47770:	00497f40 	call	497f4 <_Balloc>
   47774:	d8800715 	stw	r2,28(sp)
   47778:	d8c00717 	ldw	r3,28(sp)
   4777c:	00bfffc4 	movi	r2,-1
   47780:	01000044 	movi	r4,1
   47784:	d8800c15 	stw	r2,48(sp)
   47788:	e0c01015 	stw	r3,64(fp)
   4778c:	d9000b15 	stw	r4,44(sp)
   47790:	d8800615 	stw	r2,24(sp)
   47794:	d8002215 	stw	zero,136(sp)
   47798:	003c4106 	br	468a0 <__alt_data_end+0xfffd48a0>
   4779c:	d8c00c17 	ldw	r3,48(sp)
   477a0:	d8c00615 	stw	r3,24(sp)
   477a4:	003e7006 	br	47168 <__alt_data_end+0xfffd5168>
   477a8:	04400044 	movi	r17,1
   477ac:	003b2006 	br	46430 <__alt_data_end+0xfffd4430>
   477b0:	000b883a 	mov	r5,zero
   477b4:	003b3d06 	br	464ac <__alt_data_end+0xfffd44ac>
   477b8:	d8800c17 	ldw	r2,48(sp)
   477bc:	d8800615 	stw	r2,24(sp)
   477c0:	003e6906 	br	47168 <__alt_data_end+0xfffd5168>

000477c4 <__sflush_r>:
   477c4:	2880030b 	ldhu	r2,12(r5)
   477c8:	defffb04 	addi	sp,sp,-20
   477cc:	dcc00315 	stw	r19,12(sp)
   477d0:	dc400115 	stw	r17,4(sp)
   477d4:	dfc00415 	stw	ra,16(sp)
   477d8:	dc800215 	stw	r18,8(sp)
   477dc:	dc000015 	stw	r16,0(sp)
   477e0:	10c0020c 	andi	r3,r2,8
   477e4:	2823883a 	mov	r17,r5
   477e8:	2027883a 	mov	r19,r4
   477ec:	1800311e 	bne	r3,zero,478b4 <__sflush_r+0xf0>
   477f0:	28c00117 	ldw	r3,4(r5)
   477f4:	10820014 	ori	r2,r2,2048
   477f8:	2880030d 	sth	r2,12(r5)
   477fc:	00c04b0e 	bge	zero,r3,4792c <__sflush_r+0x168>
   47800:	8a000a17 	ldw	r8,40(r17)
   47804:	40002326 	beq	r8,zero,47894 <__sflush_r+0xd0>
   47808:	9c000017 	ldw	r16,0(r19)
   4780c:	10c4000c 	andi	r3,r2,4096
   47810:	98000015 	stw	zero,0(r19)
   47814:	18004826 	beq	r3,zero,47938 <__sflush_r+0x174>
   47818:	89801417 	ldw	r6,80(r17)
   4781c:	10c0010c 	andi	r3,r2,4
   47820:	18000626 	beq	r3,zero,4783c <__sflush_r+0x78>
   47824:	88c00117 	ldw	r3,4(r17)
   47828:	88800c17 	ldw	r2,48(r17)
   4782c:	30cdc83a 	sub	r6,r6,r3
   47830:	10000226 	beq	r2,zero,4783c <__sflush_r+0x78>
   47834:	88800f17 	ldw	r2,60(r17)
   47838:	308dc83a 	sub	r6,r6,r2
   4783c:	89400717 	ldw	r5,28(r17)
   47840:	000f883a 	mov	r7,zero
   47844:	9809883a 	mov	r4,r19
   47848:	403ee83a 	callr	r8
   4784c:	00ffffc4 	movi	r3,-1
   47850:	10c04426 	beq	r2,r3,47964 <__sflush_r+0x1a0>
   47854:	88c0030b 	ldhu	r3,12(r17)
   47858:	89000417 	ldw	r4,16(r17)
   4785c:	88000115 	stw	zero,4(r17)
   47860:	197dffcc 	andi	r5,r3,63487
   47864:	8940030d 	sth	r5,12(r17)
   47868:	89000015 	stw	r4,0(r17)
   4786c:	18c4000c 	andi	r3,r3,4096
   47870:	18002c1e 	bne	r3,zero,47924 <__sflush_r+0x160>
   47874:	89400c17 	ldw	r5,48(r17)
   47878:	9c000015 	stw	r16,0(r19)
   4787c:	28000526 	beq	r5,zero,47894 <__sflush_r+0xd0>
   47880:	88801004 	addi	r2,r17,64
   47884:	28800226 	beq	r5,r2,47890 <__sflush_r+0xcc>
   47888:	9809883a 	mov	r4,r19
   4788c:	0047f400 	call	47f40 <_free_r>
   47890:	88000c15 	stw	zero,48(r17)
   47894:	0005883a 	mov	r2,zero
   47898:	dfc00417 	ldw	ra,16(sp)
   4789c:	dcc00317 	ldw	r19,12(sp)
   478a0:	dc800217 	ldw	r18,8(sp)
   478a4:	dc400117 	ldw	r17,4(sp)
   478a8:	dc000017 	ldw	r16,0(sp)
   478ac:	dec00504 	addi	sp,sp,20
   478b0:	f800283a 	ret
   478b4:	2c800417 	ldw	r18,16(r5)
   478b8:	903ff626 	beq	r18,zero,47894 <__alt_data_end+0xfffd5894>
   478bc:	2c000017 	ldw	r16,0(r5)
   478c0:	108000cc 	andi	r2,r2,3
   478c4:	2c800015 	stw	r18,0(r5)
   478c8:	84a1c83a 	sub	r16,r16,r18
   478cc:	1000131e 	bne	r2,zero,4791c <__sflush_r+0x158>
   478d0:	28800517 	ldw	r2,20(r5)
   478d4:	88800215 	stw	r2,8(r17)
   478d8:	04000316 	blt	zero,r16,478e8 <__sflush_r+0x124>
   478dc:	003fed06 	br	47894 <__alt_data_end+0xfffd5894>
   478e0:	90a5883a 	add	r18,r18,r2
   478e4:	043feb0e 	bge	zero,r16,47894 <__alt_data_end+0xfffd5894>
   478e8:	88800917 	ldw	r2,36(r17)
   478ec:	89400717 	ldw	r5,28(r17)
   478f0:	800f883a 	mov	r7,r16
   478f4:	900d883a 	mov	r6,r18
   478f8:	9809883a 	mov	r4,r19
   478fc:	103ee83a 	callr	r2
   47900:	80a1c83a 	sub	r16,r16,r2
   47904:	00bff616 	blt	zero,r2,478e0 <__alt_data_end+0xfffd58e0>
   47908:	88c0030b 	ldhu	r3,12(r17)
   4790c:	00bfffc4 	movi	r2,-1
   47910:	18c01014 	ori	r3,r3,64
   47914:	88c0030d 	sth	r3,12(r17)
   47918:	003fdf06 	br	47898 <__alt_data_end+0xfffd5898>
   4791c:	0005883a 	mov	r2,zero
   47920:	003fec06 	br	478d4 <__alt_data_end+0xfffd58d4>
   47924:	88801415 	stw	r2,80(r17)
   47928:	003fd206 	br	47874 <__alt_data_end+0xfffd5874>
   4792c:	28c00f17 	ldw	r3,60(r5)
   47930:	00ffb316 	blt	zero,r3,47800 <__alt_data_end+0xfffd5800>
   47934:	003fd706 	br	47894 <__alt_data_end+0xfffd5894>
   47938:	89400717 	ldw	r5,28(r17)
   4793c:	000d883a 	mov	r6,zero
   47940:	01c00044 	movi	r7,1
   47944:	9809883a 	mov	r4,r19
   47948:	403ee83a 	callr	r8
   4794c:	100d883a 	mov	r6,r2
   47950:	00bfffc4 	movi	r2,-1
   47954:	30801426 	beq	r6,r2,479a8 <__sflush_r+0x1e4>
   47958:	8880030b 	ldhu	r2,12(r17)
   4795c:	8a000a17 	ldw	r8,40(r17)
   47960:	003fae06 	br	4781c <__alt_data_end+0xfffd581c>
   47964:	98c00017 	ldw	r3,0(r19)
   47968:	183fba26 	beq	r3,zero,47854 <__alt_data_end+0xfffd5854>
   4796c:	01000744 	movi	r4,29
   47970:	19000626 	beq	r3,r4,4798c <__sflush_r+0x1c8>
   47974:	01000584 	movi	r4,22
   47978:	19000426 	beq	r3,r4,4798c <__sflush_r+0x1c8>
   4797c:	88c0030b 	ldhu	r3,12(r17)
   47980:	18c01014 	ori	r3,r3,64
   47984:	88c0030d 	sth	r3,12(r17)
   47988:	003fc306 	br	47898 <__alt_data_end+0xfffd5898>
   4798c:	8880030b 	ldhu	r2,12(r17)
   47990:	88c00417 	ldw	r3,16(r17)
   47994:	88000115 	stw	zero,4(r17)
   47998:	10bdffcc 	andi	r2,r2,63487
   4799c:	8880030d 	sth	r2,12(r17)
   479a0:	88c00015 	stw	r3,0(r17)
   479a4:	003fb306 	br	47874 <__alt_data_end+0xfffd5874>
   479a8:	98800017 	ldw	r2,0(r19)
   479ac:	103fea26 	beq	r2,zero,47958 <__alt_data_end+0xfffd5958>
   479b0:	00c00744 	movi	r3,29
   479b4:	10c00226 	beq	r2,r3,479c0 <__sflush_r+0x1fc>
   479b8:	00c00584 	movi	r3,22
   479bc:	10c0031e 	bne	r2,r3,479cc <__sflush_r+0x208>
   479c0:	9c000015 	stw	r16,0(r19)
   479c4:	0005883a 	mov	r2,zero
   479c8:	003fb306 	br	47898 <__alt_data_end+0xfffd5898>
   479cc:	88c0030b 	ldhu	r3,12(r17)
   479d0:	3005883a 	mov	r2,r6
   479d4:	18c01014 	ori	r3,r3,64
   479d8:	88c0030d 	sth	r3,12(r17)
   479dc:	003fae06 	br	47898 <__alt_data_end+0xfffd5898>

000479e0 <_fflush_r>:
   479e0:	defffd04 	addi	sp,sp,-12
   479e4:	dc000115 	stw	r16,4(sp)
   479e8:	dfc00215 	stw	ra,8(sp)
   479ec:	2021883a 	mov	r16,r4
   479f0:	20000226 	beq	r4,zero,479fc <_fflush_r+0x1c>
   479f4:	20800e17 	ldw	r2,56(r4)
   479f8:	10000c26 	beq	r2,zero,47a2c <_fflush_r+0x4c>
   479fc:	2880030f 	ldh	r2,12(r5)
   47a00:	1000051e 	bne	r2,zero,47a18 <_fflush_r+0x38>
   47a04:	0005883a 	mov	r2,zero
   47a08:	dfc00217 	ldw	ra,8(sp)
   47a0c:	dc000117 	ldw	r16,4(sp)
   47a10:	dec00304 	addi	sp,sp,12
   47a14:	f800283a 	ret
   47a18:	8009883a 	mov	r4,r16
   47a1c:	dfc00217 	ldw	ra,8(sp)
   47a20:	dc000117 	ldw	r16,4(sp)
   47a24:	dec00304 	addi	sp,sp,12
   47a28:	00477c41 	jmpi	477c4 <__sflush_r>
   47a2c:	d9400015 	stw	r5,0(sp)
   47a30:	0047dcc0 	call	47dcc <__sinit>
   47a34:	d9400017 	ldw	r5,0(sp)
   47a38:	003ff006 	br	479fc <__alt_data_end+0xfffd59fc>

00047a3c <fflush>:
   47a3c:	20000526 	beq	r4,zero,47a54 <fflush+0x18>
   47a40:	008001b4 	movhi	r2,6
   47a44:	10a18604 	addi	r2,r2,-31208
   47a48:	200b883a 	mov	r5,r4
   47a4c:	11000017 	ldw	r4,0(r2)
   47a50:	00479e01 	jmpi	479e0 <_fflush_r>
   47a54:	008001b4 	movhi	r2,6
   47a58:	10a18504 	addi	r2,r2,-31212
   47a5c:	11000017 	ldw	r4,0(r2)
   47a60:	01400134 	movhi	r5,4
   47a64:	295e7804 	addi	r5,r5,31200
   47a68:	00487dc1 	jmpi	487dc <_fwalk_reent>

00047a6c <__fp_unlock>:
   47a6c:	0005883a 	mov	r2,zero
   47a70:	f800283a 	ret

00047a74 <_cleanup_r>:
   47a74:	01400174 	movhi	r5,5
   47a78:	29786a04 	addi	r5,r5,-7768
   47a7c:	00487dc1 	jmpi	487dc <_fwalk_reent>

00047a80 <__sinit.part.1>:
   47a80:	defff704 	addi	sp,sp,-36
   47a84:	00c00134 	movhi	r3,4
   47a88:	dfc00815 	stw	ra,32(sp)
   47a8c:	ddc00715 	stw	r23,28(sp)
   47a90:	dd800615 	stw	r22,24(sp)
   47a94:	dd400515 	stw	r21,20(sp)
   47a98:	dd000415 	stw	r20,16(sp)
   47a9c:	dcc00315 	stw	r19,12(sp)
   47aa0:	dc800215 	stw	r18,8(sp)
   47aa4:	dc400115 	stw	r17,4(sp)
   47aa8:	dc000015 	stw	r16,0(sp)
   47aac:	18de9d04 	addi	r3,r3,31348
   47ab0:	24000117 	ldw	r16,4(r4)
   47ab4:	20c00f15 	stw	r3,60(r4)
   47ab8:	2080bb04 	addi	r2,r4,748
   47abc:	00c000c4 	movi	r3,3
   47ac0:	20c0b915 	stw	r3,740(r4)
   47ac4:	2080ba15 	stw	r2,744(r4)
   47ac8:	2000b815 	stw	zero,736(r4)
   47acc:	05c00204 	movi	r23,8
   47ad0:	00800104 	movi	r2,4
   47ad4:	2025883a 	mov	r18,r4
   47ad8:	b80d883a 	mov	r6,r23
   47adc:	81001704 	addi	r4,r16,92
   47ae0:	000b883a 	mov	r5,zero
   47ae4:	80000015 	stw	zero,0(r16)
   47ae8:	80000115 	stw	zero,4(r16)
   47aec:	80000215 	stw	zero,8(r16)
   47af0:	8080030d 	sth	r2,12(r16)
   47af4:	80001915 	stw	zero,100(r16)
   47af8:	8000038d 	sth	zero,14(r16)
   47afc:	80000415 	stw	zero,16(r16)
   47b00:	80000515 	stw	zero,20(r16)
   47b04:	80000615 	stw	zero,24(r16)
   47b08:	00496cc0 	call	496cc <memset>
   47b0c:	05800174 	movhi	r22,5
   47b10:	94400217 	ldw	r17,8(r18)
   47b14:	05400174 	movhi	r21,5
   47b18:	05000174 	movhi	r20,5
   47b1c:	04c00174 	movhi	r19,5
   47b20:	b5ac1004 	addi	r22,r22,-20416
   47b24:	ad6c2704 	addi	r21,r21,-20324
   47b28:	a52c4604 	addi	r20,r20,-20200
   47b2c:	9cec5d04 	addi	r19,r19,-20108
   47b30:	85800815 	stw	r22,32(r16)
   47b34:	85400915 	stw	r21,36(r16)
   47b38:	85000a15 	stw	r20,40(r16)
   47b3c:	84c00b15 	stw	r19,44(r16)
   47b40:	84000715 	stw	r16,28(r16)
   47b44:	00800284 	movi	r2,10
   47b48:	8880030d 	sth	r2,12(r17)
   47b4c:	00800044 	movi	r2,1
   47b50:	b80d883a 	mov	r6,r23
   47b54:	89001704 	addi	r4,r17,92
   47b58:	000b883a 	mov	r5,zero
   47b5c:	88000015 	stw	zero,0(r17)
   47b60:	88000115 	stw	zero,4(r17)
   47b64:	88000215 	stw	zero,8(r17)
   47b68:	88001915 	stw	zero,100(r17)
   47b6c:	8880038d 	sth	r2,14(r17)
   47b70:	88000415 	stw	zero,16(r17)
   47b74:	88000515 	stw	zero,20(r17)
   47b78:	88000615 	stw	zero,24(r17)
   47b7c:	00496cc0 	call	496cc <memset>
   47b80:	94000317 	ldw	r16,12(r18)
   47b84:	00800484 	movi	r2,18
   47b88:	8c400715 	stw	r17,28(r17)
   47b8c:	8d800815 	stw	r22,32(r17)
   47b90:	8d400915 	stw	r21,36(r17)
   47b94:	8d000a15 	stw	r20,40(r17)
   47b98:	8cc00b15 	stw	r19,44(r17)
   47b9c:	8080030d 	sth	r2,12(r16)
   47ba0:	00800084 	movi	r2,2
   47ba4:	80000015 	stw	zero,0(r16)
   47ba8:	80000115 	stw	zero,4(r16)
   47bac:	80000215 	stw	zero,8(r16)
   47bb0:	80001915 	stw	zero,100(r16)
   47bb4:	8080038d 	sth	r2,14(r16)
   47bb8:	80000415 	stw	zero,16(r16)
   47bbc:	80000515 	stw	zero,20(r16)
   47bc0:	80000615 	stw	zero,24(r16)
   47bc4:	b80d883a 	mov	r6,r23
   47bc8:	000b883a 	mov	r5,zero
   47bcc:	81001704 	addi	r4,r16,92
   47bd0:	00496cc0 	call	496cc <memset>
   47bd4:	00800044 	movi	r2,1
   47bd8:	84000715 	stw	r16,28(r16)
   47bdc:	85800815 	stw	r22,32(r16)
   47be0:	85400915 	stw	r21,36(r16)
   47be4:	85000a15 	stw	r20,40(r16)
   47be8:	84c00b15 	stw	r19,44(r16)
   47bec:	90800e15 	stw	r2,56(r18)
   47bf0:	dfc00817 	ldw	ra,32(sp)
   47bf4:	ddc00717 	ldw	r23,28(sp)
   47bf8:	dd800617 	ldw	r22,24(sp)
   47bfc:	dd400517 	ldw	r21,20(sp)
   47c00:	dd000417 	ldw	r20,16(sp)
   47c04:	dcc00317 	ldw	r19,12(sp)
   47c08:	dc800217 	ldw	r18,8(sp)
   47c0c:	dc400117 	ldw	r17,4(sp)
   47c10:	dc000017 	ldw	r16,0(sp)
   47c14:	dec00904 	addi	sp,sp,36
   47c18:	f800283a 	ret

00047c1c <__fp_lock>:
   47c1c:	0005883a 	mov	r2,zero
   47c20:	f800283a 	ret

00047c24 <__sfmoreglue>:
   47c24:	defffc04 	addi	sp,sp,-16
   47c28:	dc800215 	stw	r18,8(sp)
   47c2c:	2825883a 	mov	r18,r5
   47c30:	dc000015 	stw	r16,0(sp)
   47c34:	01401a04 	movi	r5,104
   47c38:	2021883a 	mov	r16,r4
   47c3c:	913fffc4 	addi	r4,r18,-1
   47c40:	dfc00315 	stw	ra,12(sp)
   47c44:	dc400115 	stw	r17,4(sp)
   47c48:	004146c0 	call	4146c <__mulsi3>
   47c4c:	8009883a 	mov	r4,r16
   47c50:	11401d04 	addi	r5,r2,116
   47c54:	1023883a 	mov	r17,r2
   47c58:	0048b380 	call	48b38 <_malloc_r>
   47c5c:	1021883a 	mov	r16,r2
   47c60:	10000726 	beq	r2,zero,47c80 <__sfmoreglue+0x5c>
   47c64:	11000304 	addi	r4,r2,12
   47c68:	10000015 	stw	zero,0(r2)
   47c6c:	14800115 	stw	r18,4(r2)
   47c70:	11000215 	stw	r4,8(r2)
   47c74:	89801a04 	addi	r6,r17,104
   47c78:	000b883a 	mov	r5,zero
   47c7c:	00496cc0 	call	496cc <memset>
   47c80:	8005883a 	mov	r2,r16
   47c84:	dfc00317 	ldw	ra,12(sp)
   47c88:	dc800217 	ldw	r18,8(sp)
   47c8c:	dc400117 	ldw	r17,4(sp)
   47c90:	dc000017 	ldw	r16,0(sp)
   47c94:	dec00404 	addi	sp,sp,16
   47c98:	f800283a 	ret

00047c9c <__sfp>:
   47c9c:	defffb04 	addi	sp,sp,-20
   47ca0:	dc000015 	stw	r16,0(sp)
   47ca4:	040001b4 	movhi	r16,6
   47ca8:	84218504 	addi	r16,r16,-31212
   47cac:	dcc00315 	stw	r19,12(sp)
   47cb0:	2027883a 	mov	r19,r4
   47cb4:	81000017 	ldw	r4,0(r16)
   47cb8:	dfc00415 	stw	ra,16(sp)
   47cbc:	dc800215 	stw	r18,8(sp)
   47cc0:	20800e17 	ldw	r2,56(r4)
   47cc4:	dc400115 	stw	r17,4(sp)
   47cc8:	1000021e 	bne	r2,zero,47cd4 <__sfp+0x38>
   47ccc:	0047a800 	call	47a80 <__sinit.part.1>
   47cd0:	81000017 	ldw	r4,0(r16)
   47cd4:	2480b804 	addi	r18,r4,736
   47cd8:	047fffc4 	movi	r17,-1
   47cdc:	91000117 	ldw	r4,4(r18)
   47ce0:	94000217 	ldw	r16,8(r18)
   47ce4:	213fffc4 	addi	r4,r4,-1
   47ce8:	20000a16 	blt	r4,zero,47d14 <__sfp+0x78>
   47cec:	8080030f 	ldh	r2,12(r16)
   47cf0:	10000c26 	beq	r2,zero,47d24 <__sfp+0x88>
   47cf4:	80c01d04 	addi	r3,r16,116
   47cf8:	00000206 	br	47d04 <__sfp+0x68>
   47cfc:	18bfe60f 	ldh	r2,-104(r3)
   47d00:	10000826 	beq	r2,zero,47d24 <__sfp+0x88>
   47d04:	213fffc4 	addi	r4,r4,-1
   47d08:	1c3ffd04 	addi	r16,r3,-12
   47d0c:	18c01a04 	addi	r3,r3,104
   47d10:	247ffa1e 	bne	r4,r17,47cfc <__alt_data_end+0xfffd5cfc>
   47d14:	90800017 	ldw	r2,0(r18)
   47d18:	10001d26 	beq	r2,zero,47d90 <__sfp+0xf4>
   47d1c:	1025883a 	mov	r18,r2
   47d20:	003fee06 	br	47cdc <__alt_data_end+0xfffd5cdc>
   47d24:	00bfffc4 	movi	r2,-1
   47d28:	8080038d 	sth	r2,14(r16)
   47d2c:	00800044 	movi	r2,1
   47d30:	8080030d 	sth	r2,12(r16)
   47d34:	80001915 	stw	zero,100(r16)
   47d38:	80000015 	stw	zero,0(r16)
   47d3c:	80000215 	stw	zero,8(r16)
   47d40:	80000115 	stw	zero,4(r16)
   47d44:	80000415 	stw	zero,16(r16)
   47d48:	80000515 	stw	zero,20(r16)
   47d4c:	80000615 	stw	zero,24(r16)
   47d50:	01800204 	movi	r6,8
   47d54:	000b883a 	mov	r5,zero
   47d58:	81001704 	addi	r4,r16,92
   47d5c:	00496cc0 	call	496cc <memset>
   47d60:	8005883a 	mov	r2,r16
   47d64:	80000c15 	stw	zero,48(r16)
   47d68:	80000d15 	stw	zero,52(r16)
   47d6c:	80001115 	stw	zero,68(r16)
   47d70:	80001215 	stw	zero,72(r16)
   47d74:	dfc00417 	ldw	ra,16(sp)
   47d78:	dcc00317 	ldw	r19,12(sp)
   47d7c:	dc800217 	ldw	r18,8(sp)
   47d80:	dc400117 	ldw	r17,4(sp)
   47d84:	dc000017 	ldw	r16,0(sp)
   47d88:	dec00504 	addi	sp,sp,20
   47d8c:	f800283a 	ret
   47d90:	01400104 	movi	r5,4
   47d94:	9809883a 	mov	r4,r19
   47d98:	0047c240 	call	47c24 <__sfmoreglue>
   47d9c:	90800015 	stw	r2,0(r18)
   47da0:	103fde1e 	bne	r2,zero,47d1c <__alt_data_end+0xfffd5d1c>
   47da4:	00800304 	movi	r2,12
   47da8:	98800015 	stw	r2,0(r19)
   47dac:	0005883a 	mov	r2,zero
   47db0:	003ff006 	br	47d74 <__alt_data_end+0xfffd5d74>

00047db4 <_cleanup>:
   47db4:	008001b4 	movhi	r2,6
   47db8:	10a18504 	addi	r2,r2,-31212
   47dbc:	11000017 	ldw	r4,0(r2)
   47dc0:	01400174 	movhi	r5,5
   47dc4:	29786a04 	addi	r5,r5,-7768
   47dc8:	00487dc1 	jmpi	487dc <_fwalk_reent>

00047dcc <__sinit>:
   47dcc:	20800e17 	ldw	r2,56(r4)
   47dd0:	10000126 	beq	r2,zero,47dd8 <__sinit+0xc>
   47dd4:	f800283a 	ret
   47dd8:	0047a801 	jmpi	47a80 <__sinit.part.1>

00047ddc <__sfp_lock_acquire>:
   47ddc:	f800283a 	ret

00047de0 <__sfp_lock_release>:
   47de0:	f800283a 	ret

00047de4 <__sinit_lock_acquire>:
   47de4:	f800283a 	ret

00047de8 <__sinit_lock_release>:
   47de8:	f800283a 	ret

00047dec <__fp_lock_all>:
   47dec:	008001b4 	movhi	r2,6
   47df0:	10a18604 	addi	r2,r2,-31208
   47df4:	11000017 	ldw	r4,0(r2)
   47df8:	01400134 	movhi	r5,4
   47dfc:	295f0704 	addi	r5,r5,31772
   47e00:	00487181 	jmpi	48718 <_fwalk>

00047e04 <__fp_unlock_all>:
   47e04:	008001b4 	movhi	r2,6
   47e08:	10a18604 	addi	r2,r2,-31208
   47e0c:	11000017 	ldw	r4,0(r2)
   47e10:	01400134 	movhi	r5,4
   47e14:	295e9b04 	addi	r5,r5,31340
   47e18:	00487181 	jmpi	48718 <_fwalk>

00047e1c <_malloc_trim_r>:
   47e1c:	defffb04 	addi	sp,sp,-20
   47e20:	dcc00315 	stw	r19,12(sp)
   47e24:	04c00174 	movhi	r19,5
   47e28:	dc800215 	stw	r18,8(sp)
   47e2c:	dc400115 	stw	r17,4(sp)
   47e30:	dc000015 	stw	r16,0(sp)
   47e34:	dfc00415 	stw	ra,16(sp)
   47e38:	2821883a 	mov	r16,r5
   47e3c:	9cdbe204 	addi	r19,r19,28552
   47e40:	2025883a 	mov	r18,r4
   47e44:	00521a80 	call	521a8 <__malloc_lock>
   47e48:	98800217 	ldw	r2,8(r19)
   47e4c:	14400117 	ldw	r17,4(r2)
   47e50:	00bfff04 	movi	r2,-4
   47e54:	88a2703a 	and	r17,r17,r2
   47e58:	8c21c83a 	sub	r16,r17,r16
   47e5c:	8403fbc4 	addi	r16,r16,4079
   47e60:	8020d33a 	srli	r16,r16,12
   47e64:	0083ffc4 	movi	r2,4095
   47e68:	843fffc4 	addi	r16,r16,-1
   47e6c:	8020933a 	slli	r16,r16,12
   47e70:	1400060e 	bge	r2,r16,47e8c <_malloc_trim_r+0x70>
   47e74:	000b883a 	mov	r5,zero
   47e78:	9009883a 	mov	r4,r18
   47e7c:	004afec0 	call	4afec <_sbrk_r>
   47e80:	98c00217 	ldw	r3,8(r19)
   47e84:	1c47883a 	add	r3,r3,r17
   47e88:	10c00a26 	beq	r2,r3,47eb4 <_malloc_trim_r+0x98>
   47e8c:	9009883a 	mov	r4,r18
   47e90:	00521cc0 	call	521cc <__malloc_unlock>
   47e94:	0005883a 	mov	r2,zero
   47e98:	dfc00417 	ldw	ra,16(sp)
   47e9c:	dcc00317 	ldw	r19,12(sp)
   47ea0:	dc800217 	ldw	r18,8(sp)
   47ea4:	dc400117 	ldw	r17,4(sp)
   47ea8:	dc000017 	ldw	r16,0(sp)
   47eac:	dec00504 	addi	sp,sp,20
   47eb0:	f800283a 	ret
   47eb4:	040bc83a 	sub	r5,zero,r16
   47eb8:	9009883a 	mov	r4,r18
   47ebc:	004afec0 	call	4afec <_sbrk_r>
   47ec0:	00ffffc4 	movi	r3,-1
   47ec4:	10c00d26 	beq	r2,r3,47efc <_malloc_trim_r+0xe0>
   47ec8:	00c001b4 	movhi	r3,6
   47ecc:	18e88a04 	addi	r3,r3,-24024
   47ed0:	18800017 	ldw	r2,0(r3)
   47ed4:	99000217 	ldw	r4,8(r19)
   47ed8:	8c23c83a 	sub	r17,r17,r16
   47edc:	8c400054 	ori	r17,r17,1
   47ee0:	1421c83a 	sub	r16,r2,r16
   47ee4:	24400115 	stw	r17,4(r4)
   47ee8:	9009883a 	mov	r4,r18
   47eec:	1c000015 	stw	r16,0(r3)
   47ef0:	00521cc0 	call	521cc <__malloc_unlock>
   47ef4:	00800044 	movi	r2,1
   47ef8:	003fe706 	br	47e98 <__alt_data_end+0xfffd5e98>
   47efc:	000b883a 	mov	r5,zero
   47f00:	9009883a 	mov	r4,r18
   47f04:	004afec0 	call	4afec <_sbrk_r>
   47f08:	99000217 	ldw	r4,8(r19)
   47f0c:	014003c4 	movi	r5,15
   47f10:	1107c83a 	sub	r3,r2,r4
   47f14:	28ffdd0e 	bge	r5,r3,47e8c <__alt_data_end+0xfffd5e8c>
   47f18:	014001b4 	movhi	r5,6
   47f1c:	29618804 	addi	r5,r5,-31200
   47f20:	29400017 	ldw	r5,0(r5)
   47f24:	18c00054 	ori	r3,r3,1
   47f28:	20c00115 	stw	r3,4(r4)
   47f2c:	00c001b4 	movhi	r3,6
   47f30:	1145c83a 	sub	r2,r2,r5
   47f34:	18e88a04 	addi	r3,r3,-24024
   47f38:	18800015 	stw	r2,0(r3)
   47f3c:	003fd306 	br	47e8c <__alt_data_end+0xfffd5e8c>

00047f40 <_free_r>:
   47f40:	28004126 	beq	r5,zero,48048 <_free_r+0x108>
   47f44:	defffd04 	addi	sp,sp,-12
   47f48:	dc400115 	stw	r17,4(sp)
   47f4c:	dc000015 	stw	r16,0(sp)
   47f50:	2023883a 	mov	r17,r4
   47f54:	2821883a 	mov	r16,r5
   47f58:	dfc00215 	stw	ra,8(sp)
   47f5c:	00521a80 	call	521a8 <__malloc_lock>
   47f60:	81ffff17 	ldw	r7,-4(r16)
   47f64:	00bfff84 	movi	r2,-2
   47f68:	01000174 	movhi	r4,5
   47f6c:	81bffe04 	addi	r6,r16,-8
   47f70:	3884703a 	and	r2,r7,r2
   47f74:	211be204 	addi	r4,r4,28552
   47f78:	308b883a 	add	r5,r6,r2
   47f7c:	2a400117 	ldw	r9,4(r5)
   47f80:	22000217 	ldw	r8,8(r4)
   47f84:	00ffff04 	movi	r3,-4
   47f88:	48c6703a 	and	r3,r9,r3
   47f8c:	2a005726 	beq	r5,r8,480ec <_free_r+0x1ac>
   47f90:	28c00115 	stw	r3,4(r5)
   47f94:	39c0004c 	andi	r7,r7,1
   47f98:	3800091e 	bne	r7,zero,47fc0 <_free_r+0x80>
   47f9c:	823ffe17 	ldw	r8,-8(r16)
   47fa0:	22400204 	addi	r9,r4,8
   47fa4:	320dc83a 	sub	r6,r6,r8
   47fa8:	31c00217 	ldw	r7,8(r6)
   47fac:	1205883a 	add	r2,r2,r8
   47fb0:	3a406526 	beq	r7,r9,48148 <_free_r+0x208>
   47fb4:	32000317 	ldw	r8,12(r6)
   47fb8:	3a000315 	stw	r8,12(r7)
   47fbc:	41c00215 	stw	r7,8(r8)
   47fc0:	28cf883a 	add	r7,r5,r3
   47fc4:	39c00117 	ldw	r7,4(r7)
   47fc8:	39c0004c 	andi	r7,r7,1
   47fcc:	38003a26 	beq	r7,zero,480b8 <_free_r+0x178>
   47fd0:	10c00054 	ori	r3,r2,1
   47fd4:	30c00115 	stw	r3,4(r6)
   47fd8:	3087883a 	add	r3,r6,r2
   47fdc:	18800015 	stw	r2,0(r3)
   47fe0:	00c07fc4 	movi	r3,511
   47fe4:	18801936 	bltu	r3,r2,4804c <_free_r+0x10c>
   47fe8:	1004d0fa 	srli	r2,r2,3
   47fec:	01c00044 	movi	r7,1
   47ff0:	21400117 	ldw	r5,4(r4)
   47ff4:	10c00044 	addi	r3,r2,1
   47ff8:	18c7883a 	add	r3,r3,r3
   47ffc:	1005d0ba 	srai	r2,r2,2
   48000:	18c7883a 	add	r3,r3,r3
   48004:	18c7883a 	add	r3,r3,r3
   48008:	1907883a 	add	r3,r3,r4
   4800c:	3884983a 	sll	r2,r7,r2
   48010:	19c00017 	ldw	r7,0(r3)
   48014:	1a3ffe04 	addi	r8,r3,-8
   48018:	1144b03a 	or	r2,r2,r5
   4801c:	32000315 	stw	r8,12(r6)
   48020:	31c00215 	stw	r7,8(r6)
   48024:	20800115 	stw	r2,4(r4)
   48028:	19800015 	stw	r6,0(r3)
   4802c:	39800315 	stw	r6,12(r7)
   48030:	8809883a 	mov	r4,r17
   48034:	dfc00217 	ldw	ra,8(sp)
   48038:	dc400117 	ldw	r17,4(sp)
   4803c:	dc000017 	ldw	r16,0(sp)
   48040:	dec00304 	addi	sp,sp,12
   48044:	00521cc1 	jmpi	521cc <__malloc_unlock>
   48048:	f800283a 	ret
   4804c:	100ad27a 	srli	r5,r2,9
   48050:	00c00104 	movi	r3,4
   48054:	19404a36 	bltu	r3,r5,48180 <_free_r+0x240>
   48058:	100ad1ba 	srli	r5,r2,6
   4805c:	28c00e44 	addi	r3,r5,57
   48060:	18c7883a 	add	r3,r3,r3
   48064:	29400e04 	addi	r5,r5,56
   48068:	18c7883a 	add	r3,r3,r3
   4806c:	18c7883a 	add	r3,r3,r3
   48070:	1909883a 	add	r4,r3,r4
   48074:	20c00017 	ldw	r3,0(r4)
   48078:	01c00174 	movhi	r7,5
   4807c:	213ffe04 	addi	r4,r4,-8
   48080:	39dbe204 	addi	r7,r7,28552
   48084:	20c04426 	beq	r4,r3,48198 <_free_r+0x258>
   48088:	01ffff04 	movi	r7,-4
   4808c:	19400117 	ldw	r5,4(r3)
   48090:	29ca703a 	and	r5,r5,r7
   48094:	1140022e 	bgeu	r2,r5,480a0 <_free_r+0x160>
   48098:	18c00217 	ldw	r3,8(r3)
   4809c:	20fffb1e 	bne	r4,r3,4808c <__alt_data_end+0xfffd608c>
   480a0:	19000317 	ldw	r4,12(r3)
   480a4:	31000315 	stw	r4,12(r6)
   480a8:	30c00215 	stw	r3,8(r6)
   480ac:	21800215 	stw	r6,8(r4)
   480b0:	19800315 	stw	r6,12(r3)
   480b4:	003fde06 	br	48030 <__alt_data_end+0xfffd6030>
   480b8:	29c00217 	ldw	r7,8(r5)
   480bc:	10c5883a 	add	r2,r2,r3
   480c0:	00c00174 	movhi	r3,5
   480c4:	18dbe404 	addi	r3,r3,28560
   480c8:	38c03b26 	beq	r7,r3,481b8 <_free_r+0x278>
   480cc:	2a000317 	ldw	r8,12(r5)
   480d0:	11400054 	ori	r5,r2,1
   480d4:	3087883a 	add	r3,r6,r2
   480d8:	3a000315 	stw	r8,12(r7)
   480dc:	41c00215 	stw	r7,8(r8)
   480e0:	31400115 	stw	r5,4(r6)
   480e4:	18800015 	stw	r2,0(r3)
   480e8:	003fbd06 	br	47fe0 <__alt_data_end+0xfffd5fe0>
   480ec:	39c0004c 	andi	r7,r7,1
   480f0:	10c5883a 	add	r2,r2,r3
   480f4:	3800071e 	bne	r7,zero,48114 <_free_r+0x1d4>
   480f8:	81fffe17 	ldw	r7,-8(r16)
   480fc:	31cdc83a 	sub	r6,r6,r7
   48100:	30c00317 	ldw	r3,12(r6)
   48104:	31400217 	ldw	r5,8(r6)
   48108:	11c5883a 	add	r2,r2,r7
   4810c:	28c00315 	stw	r3,12(r5)
   48110:	19400215 	stw	r5,8(r3)
   48114:	10c00054 	ori	r3,r2,1
   48118:	30c00115 	stw	r3,4(r6)
   4811c:	00c001b4 	movhi	r3,6
   48120:	18e18904 	addi	r3,r3,-31196
   48124:	18c00017 	ldw	r3,0(r3)
   48128:	21800215 	stw	r6,8(r4)
   4812c:	10ffc036 	bltu	r2,r3,48030 <__alt_data_end+0xfffd6030>
   48130:	008001b4 	movhi	r2,6
   48134:	10a88104 	addi	r2,r2,-24060
   48138:	11400017 	ldw	r5,0(r2)
   4813c:	8809883a 	mov	r4,r17
   48140:	0047e1c0 	call	47e1c <_malloc_trim_r>
   48144:	003fba06 	br	48030 <__alt_data_end+0xfffd6030>
   48148:	28c9883a 	add	r4,r5,r3
   4814c:	21000117 	ldw	r4,4(r4)
   48150:	2100004c 	andi	r4,r4,1
   48154:	2000391e 	bne	r4,zero,4823c <_free_r+0x2fc>
   48158:	29c00217 	ldw	r7,8(r5)
   4815c:	29000317 	ldw	r4,12(r5)
   48160:	1885883a 	add	r2,r3,r2
   48164:	10c00054 	ori	r3,r2,1
   48168:	39000315 	stw	r4,12(r7)
   4816c:	21c00215 	stw	r7,8(r4)
   48170:	30c00115 	stw	r3,4(r6)
   48174:	308d883a 	add	r6,r6,r2
   48178:	30800015 	stw	r2,0(r6)
   4817c:	003fac06 	br	48030 <__alt_data_end+0xfffd6030>
   48180:	00c00504 	movi	r3,20
   48184:	19401536 	bltu	r3,r5,481dc <_free_r+0x29c>
   48188:	28c01704 	addi	r3,r5,92
   4818c:	18c7883a 	add	r3,r3,r3
   48190:	294016c4 	addi	r5,r5,91
   48194:	003fb406 	br	48068 <__alt_data_end+0xfffd6068>
   48198:	280bd0ba 	srai	r5,r5,2
   4819c:	00c00044 	movi	r3,1
   481a0:	38800117 	ldw	r2,4(r7)
   481a4:	194a983a 	sll	r5,r3,r5
   481a8:	2007883a 	mov	r3,r4
   481ac:	2884b03a 	or	r2,r5,r2
   481b0:	38800115 	stw	r2,4(r7)
   481b4:	003fbb06 	br	480a4 <__alt_data_end+0xfffd60a4>
   481b8:	21800515 	stw	r6,20(r4)
   481bc:	21800415 	stw	r6,16(r4)
   481c0:	10c00054 	ori	r3,r2,1
   481c4:	31c00315 	stw	r7,12(r6)
   481c8:	31c00215 	stw	r7,8(r6)
   481cc:	30c00115 	stw	r3,4(r6)
   481d0:	308d883a 	add	r6,r6,r2
   481d4:	30800015 	stw	r2,0(r6)
   481d8:	003f9506 	br	48030 <__alt_data_end+0xfffd6030>
   481dc:	00c01504 	movi	r3,84
   481e0:	19400536 	bltu	r3,r5,481f8 <_free_r+0x2b8>
   481e4:	100ad33a 	srli	r5,r2,12
   481e8:	28c01bc4 	addi	r3,r5,111
   481ec:	18c7883a 	add	r3,r3,r3
   481f0:	29401b84 	addi	r5,r5,110
   481f4:	003f9c06 	br	48068 <__alt_data_end+0xfffd6068>
   481f8:	00c05504 	movi	r3,340
   481fc:	19400536 	bltu	r3,r5,48214 <_free_r+0x2d4>
   48200:	100ad3fa 	srli	r5,r2,15
   48204:	28c01e04 	addi	r3,r5,120
   48208:	18c7883a 	add	r3,r3,r3
   4820c:	29401dc4 	addi	r5,r5,119
   48210:	003f9506 	br	48068 <__alt_data_end+0xfffd6068>
   48214:	00c15504 	movi	r3,1364
   48218:	19400536 	bltu	r3,r5,48230 <_free_r+0x2f0>
   4821c:	100ad4ba 	srli	r5,r2,18
   48220:	28c01f44 	addi	r3,r5,125
   48224:	18c7883a 	add	r3,r3,r3
   48228:	29401f04 	addi	r5,r5,124
   4822c:	003f8e06 	br	48068 <__alt_data_end+0xfffd6068>
   48230:	00c03f84 	movi	r3,254
   48234:	01401f84 	movi	r5,126
   48238:	003f8b06 	br	48068 <__alt_data_end+0xfffd6068>
   4823c:	10c00054 	ori	r3,r2,1
   48240:	30c00115 	stw	r3,4(r6)
   48244:	308d883a 	add	r6,r6,r2
   48248:	30800015 	stw	r2,0(r6)
   4824c:	003f7806 	br	48030 <__alt_data_end+0xfffd6030>

00048250 <__sfvwrite_r>:
   48250:	30800217 	ldw	r2,8(r6)
   48254:	10006726 	beq	r2,zero,483f4 <__sfvwrite_r+0x1a4>
   48258:	28c0030b 	ldhu	r3,12(r5)
   4825c:	defff404 	addi	sp,sp,-48
   48260:	dd400715 	stw	r21,28(sp)
   48264:	dd000615 	stw	r20,24(sp)
   48268:	dc000215 	stw	r16,8(sp)
   4826c:	dfc00b15 	stw	ra,44(sp)
   48270:	df000a15 	stw	fp,40(sp)
   48274:	ddc00915 	stw	r23,36(sp)
   48278:	dd800815 	stw	r22,32(sp)
   4827c:	dcc00515 	stw	r19,20(sp)
   48280:	dc800415 	stw	r18,16(sp)
   48284:	dc400315 	stw	r17,12(sp)
   48288:	1880020c 	andi	r2,r3,8
   4828c:	2821883a 	mov	r16,r5
   48290:	202b883a 	mov	r21,r4
   48294:	3029883a 	mov	r20,r6
   48298:	10002726 	beq	r2,zero,48338 <__sfvwrite_r+0xe8>
   4829c:	28800417 	ldw	r2,16(r5)
   482a0:	10002526 	beq	r2,zero,48338 <__sfvwrite_r+0xe8>
   482a4:	1880008c 	andi	r2,r3,2
   482a8:	a4400017 	ldw	r17,0(r20)
   482ac:	10002a26 	beq	r2,zero,48358 <__sfvwrite_r+0x108>
   482b0:	05a00034 	movhi	r22,32768
   482b4:	0027883a 	mov	r19,zero
   482b8:	0025883a 	mov	r18,zero
   482bc:	b5bf0004 	addi	r22,r22,-1024
   482c0:	980d883a 	mov	r6,r19
   482c4:	a809883a 	mov	r4,r21
   482c8:	90004626 	beq	r18,zero,483e4 <__sfvwrite_r+0x194>
   482cc:	900f883a 	mov	r7,r18
   482d0:	b480022e 	bgeu	r22,r18,482dc <__sfvwrite_r+0x8c>
   482d4:	01e00034 	movhi	r7,32768
   482d8:	39ff0004 	addi	r7,r7,-1024
   482dc:	80800917 	ldw	r2,36(r16)
   482e0:	81400717 	ldw	r5,28(r16)
   482e4:	103ee83a 	callr	r2
   482e8:	00805a0e 	bge	zero,r2,48454 <__sfvwrite_r+0x204>
   482ec:	a0c00217 	ldw	r3,8(r20)
   482f0:	98a7883a 	add	r19,r19,r2
   482f4:	90a5c83a 	sub	r18,r18,r2
   482f8:	1885c83a 	sub	r2,r3,r2
   482fc:	a0800215 	stw	r2,8(r20)
   48300:	103fef1e 	bne	r2,zero,482c0 <__alt_data_end+0xfffd62c0>
   48304:	0005883a 	mov	r2,zero
   48308:	dfc00b17 	ldw	ra,44(sp)
   4830c:	df000a17 	ldw	fp,40(sp)
   48310:	ddc00917 	ldw	r23,36(sp)
   48314:	dd800817 	ldw	r22,32(sp)
   48318:	dd400717 	ldw	r21,28(sp)
   4831c:	dd000617 	ldw	r20,24(sp)
   48320:	dcc00517 	ldw	r19,20(sp)
   48324:	dc800417 	ldw	r18,16(sp)
   48328:	dc400317 	ldw	r17,12(sp)
   4832c:	dc000217 	ldw	r16,8(sp)
   48330:	dec00c04 	addi	sp,sp,48
   48334:	f800283a 	ret
   48338:	800b883a 	mov	r5,r16
   4833c:	a809883a 	mov	r4,r21
   48340:	0045dc00 	call	45dc0 <__swsetup_r>
   48344:	1000ee1e 	bne	r2,zero,48700 <__sfvwrite_r+0x4b0>
   48348:	80c0030b 	ldhu	r3,12(r16)
   4834c:	a4400017 	ldw	r17,0(r20)
   48350:	1880008c 	andi	r2,r3,2
   48354:	103fd61e 	bne	r2,zero,482b0 <__alt_data_end+0xfffd62b0>
   48358:	1880004c 	andi	r2,r3,1
   4835c:	1000421e 	bne	r2,zero,48468 <__sfvwrite_r+0x218>
   48360:	0039883a 	mov	fp,zero
   48364:	0025883a 	mov	r18,zero
   48368:	90001a26 	beq	r18,zero,483d4 <__sfvwrite_r+0x184>
   4836c:	1880800c 	andi	r2,r3,512
   48370:	84c00217 	ldw	r19,8(r16)
   48374:	10002126 	beq	r2,zero,483fc <__sfvwrite_r+0x1ac>
   48378:	982f883a 	mov	r23,r19
   4837c:	94c09636 	bltu	r18,r19,485d8 <__sfvwrite_r+0x388>
   48380:	1881200c 	andi	r2,r3,1152
   48384:	1000a11e 	bne	r2,zero,4860c <__sfvwrite_r+0x3bc>
   48388:	81000017 	ldw	r4,0(r16)
   4838c:	b80d883a 	mov	r6,r23
   48390:	e00b883a 	mov	r5,fp
   48394:	00495700 	call	49570 <memmove>
   48398:	80c00217 	ldw	r3,8(r16)
   4839c:	81000017 	ldw	r4,0(r16)
   483a0:	9005883a 	mov	r2,r18
   483a4:	1ce7c83a 	sub	r19,r3,r19
   483a8:	25cf883a 	add	r7,r4,r23
   483ac:	84c00215 	stw	r19,8(r16)
   483b0:	81c00015 	stw	r7,0(r16)
   483b4:	a0c00217 	ldw	r3,8(r20)
   483b8:	e0b9883a 	add	fp,fp,r2
   483bc:	90a5c83a 	sub	r18,r18,r2
   483c0:	18a7c83a 	sub	r19,r3,r2
   483c4:	a4c00215 	stw	r19,8(r20)
   483c8:	983fce26 	beq	r19,zero,48304 <__alt_data_end+0xfffd6304>
   483cc:	80c0030b 	ldhu	r3,12(r16)
   483d0:	903fe61e 	bne	r18,zero,4836c <__alt_data_end+0xfffd636c>
   483d4:	8f000017 	ldw	fp,0(r17)
   483d8:	8c800117 	ldw	r18,4(r17)
   483dc:	8c400204 	addi	r17,r17,8
   483e0:	003fe106 	br	48368 <__alt_data_end+0xfffd6368>
   483e4:	8cc00017 	ldw	r19,0(r17)
   483e8:	8c800117 	ldw	r18,4(r17)
   483ec:	8c400204 	addi	r17,r17,8
   483f0:	003fb306 	br	482c0 <__alt_data_end+0xfffd62c0>
   483f4:	0005883a 	mov	r2,zero
   483f8:	f800283a 	ret
   483fc:	81000017 	ldw	r4,0(r16)
   48400:	80800417 	ldw	r2,16(r16)
   48404:	11005a36 	bltu	r2,r4,48570 <__sfvwrite_r+0x320>
   48408:	85c00517 	ldw	r23,20(r16)
   4840c:	95c05836 	bltu	r18,r23,48570 <__sfvwrite_r+0x320>
   48410:	00a00034 	movhi	r2,32768
   48414:	10bfffc4 	addi	r2,r2,-1
   48418:	9009883a 	mov	r4,r18
   4841c:	1480012e 	bgeu	r2,r18,48424 <__sfvwrite_r+0x1d4>
   48420:	1009883a 	mov	r4,r2
   48424:	b80b883a 	mov	r5,r23
   48428:	00407400 	call	40740 <__divsi3>
   4842c:	b80b883a 	mov	r5,r23
   48430:	1009883a 	mov	r4,r2
   48434:	004146c0 	call	4146c <__mulsi3>
   48438:	81400717 	ldw	r5,28(r16)
   4843c:	80c00917 	ldw	r3,36(r16)
   48440:	100f883a 	mov	r7,r2
   48444:	e00d883a 	mov	r6,fp
   48448:	a809883a 	mov	r4,r21
   4844c:	183ee83a 	callr	r3
   48450:	00bfd816 	blt	zero,r2,483b4 <__alt_data_end+0xfffd63b4>
   48454:	8080030b 	ldhu	r2,12(r16)
   48458:	10801014 	ori	r2,r2,64
   4845c:	8080030d 	sth	r2,12(r16)
   48460:	00bfffc4 	movi	r2,-1
   48464:	003fa806 	br	48308 <__alt_data_end+0xfffd6308>
   48468:	0027883a 	mov	r19,zero
   4846c:	0011883a 	mov	r8,zero
   48470:	0039883a 	mov	fp,zero
   48474:	0025883a 	mov	r18,zero
   48478:	90001f26 	beq	r18,zero,484f8 <__sfvwrite_r+0x2a8>
   4847c:	40005a26 	beq	r8,zero,485e8 <__sfvwrite_r+0x398>
   48480:	982d883a 	mov	r22,r19
   48484:	94c0012e 	bgeu	r18,r19,4848c <__sfvwrite_r+0x23c>
   48488:	902d883a 	mov	r22,r18
   4848c:	81000017 	ldw	r4,0(r16)
   48490:	80800417 	ldw	r2,16(r16)
   48494:	b02f883a 	mov	r23,r22
   48498:	81c00517 	ldw	r7,20(r16)
   4849c:	1100032e 	bgeu	r2,r4,484ac <__sfvwrite_r+0x25c>
   484a0:	80c00217 	ldw	r3,8(r16)
   484a4:	38c7883a 	add	r3,r7,r3
   484a8:	1d801816 	blt	r3,r22,4850c <__sfvwrite_r+0x2bc>
   484ac:	b1c03e16 	blt	r22,r7,485a8 <__sfvwrite_r+0x358>
   484b0:	80800917 	ldw	r2,36(r16)
   484b4:	81400717 	ldw	r5,28(r16)
   484b8:	e00d883a 	mov	r6,fp
   484bc:	da000115 	stw	r8,4(sp)
   484c0:	a809883a 	mov	r4,r21
   484c4:	103ee83a 	callr	r2
   484c8:	102f883a 	mov	r23,r2
   484cc:	da000117 	ldw	r8,4(sp)
   484d0:	00bfe00e 	bge	zero,r2,48454 <__alt_data_end+0xfffd6454>
   484d4:	9de7c83a 	sub	r19,r19,r23
   484d8:	98001f26 	beq	r19,zero,48558 <__sfvwrite_r+0x308>
   484dc:	a0800217 	ldw	r2,8(r20)
   484e0:	e5f9883a 	add	fp,fp,r23
   484e4:	95e5c83a 	sub	r18,r18,r23
   484e8:	15efc83a 	sub	r23,r2,r23
   484ec:	a5c00215 	stw	r23,8(r20)
   484f0:	b83f8426 	beq	r23,zero,48304 <__alt_data_end+0xfffd6304>
   484f4:	903fe11e 	bne	r18,zero,4847c <__alt_data_end+0xfffd647c>
   484f8:	8f000017 	ldw	fp,0(r17)
   484fc:	8c800117 	ldw	r18,4(r17)
   48500:	0011883a 	mov	r8,zero
   48504:	8c400204 	addi	r17,r17,8
   48508:	003fdb06 	br	48478 <__alt_data_end+0xfffd6478>
   4850c:	180d883a 	mov	r6,r3
   48510:	e00b883a 	mov	r5,fp
   48514:	da000115 	stw	r8,4(sp)
   48518:	d8c00015 	stw	r3,0(sp)
   4851c:	00495700 	call	49570 <memmove>
   48520:	d8c00017 	ldw	r3,0(sp)
   48524:	80800017 	ldw	r2,0(r16)
   48528:	800b883a 	mov	r5,r16
   4852c:	a809883a 	mov	r4,r21
   48530:	10c5883a 	add	r2,r2,r3
   48534:	80800015 	stw	r2,0(r16)
   48538:	d8c00015 	stw	r3,0(sp)
   4853c:	00479e00 	call	479e0 <_fflush_r>
   48540:	d8c00017 	ldw	r3,0(sp)
   48544:	da000117 	ldw	r8,4(sp)
   48548:	103fc21e 	bne	r2,zero,48454 <__alt_data_end+0xfffd6454>
   4854c:	182f883a 	mov	r23,r3
   48550:	9de7c83a 	sub	r19,r19,r23
   48554:	983fe11e 	bne	r19,zero,484dc <__alt_data_end+0xfffd64dc>
   48558:	800b883a 	mov	r5,r16
   4855c:	a809883a 	mov	r4,r21
   48560:	00479e00 	call	479e0 <_fflush_r>
   48564:	103fbb1e 	bne	r2,zero,48454 <__alt_data_end+0xfffd6454>
   48568:	0011883a 	mov	r8,zero
   4856c:	003fdb06 	br	484dc <__alt_data_end+0xfffd64dc>
   48570:	94c0012e 	bgeu	r18,r19,48578 <__sfvwrite_r+0x328>
   48574:	9027883a 	mov	r19,r18
   48578:	980d883a 	mov	r6,r19
   4857c:	e00b883a 	mov	r5,fp
   48580:	00495700 	call	49570 <memmove>
   48584:	80800217 	ldw	r2,8(r16)
   48588:	80c00017 	ldw	r3,0(r16)
   4858c:	14c5c83a 	sub	r2,r2,r19
   48590:	1cc7883a 	add	r3,r3,r19
   48594:	80800215 	stw	r2,8(r16)
   48598:	80c00015 	stw	r3,0(r16)
   4859c:	10004326 	beq	r2,zero,486ac <__sfvwrite_r+0x45c>
   485a0:	9805883a 	mov	r2,r19
   485a4:	003f8306 	br	483b4 <__alt_data_end+0xfffd63b4>
   485a8:	b00d883a 	mov	r6,r22
   485ac:	e00b883a 	mov	r5,fp
   485b0:	da000115 	stw	r8,4(sp)
   485b4:	00495700 	call	49570 <memmove>
   485b8:	80800217 	ldw	r2,8(r16)
   485bc:	80c00017 	ldw	r3,0(r16)
   485c0:	da000117 	ldw	r8,4(sp)
   485c4:	1585c83a 	sub	r2,r2,r22
   485c8:	1dad883a 	add	r22,r3,r22
   485cc:	80800215 	stw	r2,8(r16)
   485d0:	85800015 	stw	r22,0(r16)
   485d4:	003fbf06 	br	484d4 <__alt_data_end+0xfffd64d4>
   485d8:	81000017 	ldw	r4,0(r16)
   485dc:	9027883a 	mov	r19,r18
   485e0:	902f883a 	mov	r23,r18
   485e4:	003f6906 	br	4838c <__alt_data_end+0xfffd638c>
   485e8:	900d883a 	mov	r6,r18
   485ec:	01400284 	movi	r5,10
   485f0:	e009883a 	mov	r4,fp
   485f4:	00493440 	call	49344 <memchr>
   485f8:	10003e26 	beq	r2,zero,486f4 <__sfvwrite_r+0x4a4>
   485fc:	10800044 	addi	r2,r2,1
   48600:	1727c83a 	sub	r19,r2,fp
   48604:	02000044 	movi	r8,1
   48608:	003f9d06 	br	48480 <__alt_data_end+0xfffd6480>
   4860c:	80800517 	ldw	r2,20(r16)
   48610:	81400417 	ldw	r5,16(r16)
   48614:	81c00017 	ldw	r7,0(r16)
   48618:	10a7883a 	add	r19,r2,r2
   4861c:	9885883a 	add	r2,r19,r2
   48620:	1026d7fa 	srli	r19,r2,31
   48624:	396dc83a 	sub	r22,r7,r5
   48628:	b1000044 	addi	r4,r22,1
   4862c:	9885883a 	add	r2,r19,r2
   48630:	1027d07a 	srai	r19,r2,1
   48634:	2485883a 	add	r2,r4,r18
   48638:	980d883a 	mov	r6,r19
   4863c:	9880022e 	bgeu	r19,r2,48648 <__sfvwrite_r+0x3f8>
   48640:	1027883a 	mov	r19,r2
   48644:	100d883a 	mov	r6,r2
   48648:	18c1000c 	andi	r3,r3,1024
   4864c:	18001c26 	beq	r3,zero,486c0 <__sfvwrite_r+0x470>
   48650:	300b883a 	mov	r5,r6
   48654:	a809883a 	mov	r4,r21
   48658:	0048b380 	call	48b38 <_malloc_r>
   4865c:	102f883a 	mov	r23,r2
   48660:	10002926 	beq	r2,zero,48708 <__sfvwrite_r+0x4b8>
   48664:	81400417 	ldw	r5,16(r16)
   48668:	b00d883a 	mov	r6,r22
   4866c:	1009883a 	mov	r4,r2
   48670:	00494280 	call	49428 <memcpy>
   48674:	8080030b 	ldhu	r2,12(r16)
   48678:	00fedfc4 	movi	r3,-1153
   4867c:	10c4703a 	and	r2,r2,r3
   48680:	10802014 	ori	r2,r2,128
   48684:	8080030d 	sth	r2,12(r16)
   48688:	bd89883a 	add	r4,r23,r22
   4868c:	9d8fc83a 	sub	r7,r19,r22
   48690:	85c00415 	stw	r23,16(r16)
   48694:	84c00515 	stw	r19,20(r16)
   48698:	81000015 	stw	r4,0(r16)
   4869c:	9027883a 	mov	r19,r18
   486a0:	81c00215 	stw	r7,8(r16)
   486a4:	902f883a 	mov	r23,r18
   486a8:	003f3806 	br	4838c <__alt_data_end+0xfffd638c>
   486ac:	800b883a 	mov	r5,r16
   486b0:	a809883a 	mov	r4,r21
   486b4:	00479e00 	call	479e0 <_fflush_r>
   486b8:	103fb926 	beq	r2,zero,485a0 <__alt_data_end+0xfffd65a0>
   486bc:	003f6506 	br	48454 <__alt_data_end+0xfffd6454>
   486c0:	a809883a 	mov	r4,r21
   486c4:	004aa140 	call	4aa14 <_realloc_r>
   486c8:	102f883a 	mov	r23,r2
   486cc:	103fee1e 	bne	r2,zero,48688 <__alt_data_end+0xfffd6688>
   486d0:	81400417 	ldw	r5,16(r16)
   486d4:	a809883a 	mov	r4,r21
   486d8:	0047f400 	call	47f40 <_free_r>
   486dc:	8080030b 	ldhu	r2,12(r16)
   486e0:	00ffdfc4 	movi	r3,-129
   486e4:	1884703a 	and	r2,r3,r2
   486e8:	00c00304 	movi	r3,12
   486ec:	a8c00015 	stw	r3,0(r21)
   486f0:	003f5906 	br	48458 <__alt_data_end+0xfffd6458>
   486f4:	94c00044 	addi	r19,r18,1
   486f8:	02000044 	movi	r8,1
   486fc:	003f6006 	br	48480 <__alt_data_end+0xfffd6480>
   48700:	00bfffc4 	movi	r2,-1
   48704:	003f0006 	br	48308 <__alt_data_end+0xfffd6308>
   48708:	00800304 	movi	r2,12
   4870c:	a8800015 	stw	r2,0(r21)
   48710:	8080030b 	ldhu	r2,12(r16)
   48714:	003f5006 	br	48458 <__alt_data_end+0xfffd6458>

00048718 <_fwalk>:
   48718:	defff704 	addi	sp,sp,-36
   4871c:	dd000415 	stw	r20,16(sp)
   48720:	dfc00815 	stw	ra,32(sp)
   48724:	ddc00715 	stw	r23,28(sp)
   48728:	dd800615 	stw	r22,24(sp)
   4872c:	dd400515 	stw	r21,20(sp)
   48730:	dcc00315 	stw	r19,12(sp)
   48734:	dc800215 	stw	r18,8(sp)
   48738:	dc400115 	stw	r17,4(sp)
   4873c:	dc000015 	stw	r16,0(sp)
   48740:	2500b804 	addi	r20,r4,736
   48744:	a0002326 	beq	r20,zero,487d4 <_fwalk+0xbc>
   48748:	282b883a 	mov	r21,r5
   4874c:	002f883a 	mov	r23,zero
   48750:	05800044 	movi	r22,1
   48754:	04ffffc4 	movi	r19,-1
   48758:	a4400117 	ldw	r17,4(r20)
   4875c:	a4800217 	ldw	r18,8(r20)
   48760:	8c7fffc4 	addi	r17,r17,-1
   48764:	88000d16 	blt	r17,zero,4879c <_fwalk+0x84>
   48768:	94000304 	addi	r16,r18,12
   4876c:	94800384 	addi	r18,r18,14
   48770:	8080000b 	ldhu	r2,0(r16)
   48774:	8c7fffc4 	addi	r17,r17,-1
   48778:	813ffd04 	addi	r4,r16,-12
   4877c:	b080042e 	bgeu	r22,r2,48790 <_fwalk+0x78>
   48780:	9080000f 	ldh	r2,0(r18)
   48784:	14c00226 	beq	r2,r19,48790 <_fwalk+0x78>
   48788:	a83ee83a 	callr	r21
   4878c:	b8aeb03a 	or	r23,r23,r2
   48790:	84001a04 	addi	r16,r16,104
   48794:	94801a04 	addi	r18,r18,104
   48798:	8cfff51e 	bne	r17,r19,48770 <__alt_data_end+0xfffd6770>
   4879c:	a5000017 	ldw	r20,0(r20)
   487a0:	a03fed1e 	bne	r20,zero,48758 <__alt_data_end+0xfffd6758>
   487a4:	b805883a 	mov	r2,r23
   487a8:	dfc00817 	ldw	ra,32(sp)
   487ac:	ddc00717 	ldw	r23,28(sp)
   487b0:	dd800617 	ldw	r22,24(sp)
   487b4:	dd400517 	ldw	r21,20(sp)
   487b8:	dd000417 	ldw	r20,16(sp)
   487bc:	dcc00317 	ldw	r19,12(sp)
   487c0:	dc800217 	ldw	r18,8(sp)
   487c4:	dc400117 	ldw	r17,4(sp)
   487c8:	dc000017 	ldw	r16,0(sp)
   487cc:	dec00904 	addi	sp,sp,36
   487d0:	f800283a 	ret
   487d4:	002f883a 	mov	r23,zero
   487d8:	003ff206 	br	487a4 <__alt_data_end+0xfffd67a4>

000487dc <_fwalk_reent>:
   487dc:	defff704 	addi	sp,sp,-36
   487e0:	dd000415 	stw	r20,16(sp)
   487e4:	dfc00815 	stw	ra,32(sp)
   487e8:	ddc00715 	stw	r23,28(sp)
   487ec:	dd800615 	stw	r22,24(sp)
   487f0:	dd400515 	stw	r21,20(sp)
   487f4:	dcc00315 	stw	r19,12(sp)
   487f8:	dc800215 	stw	r18,8(sp)
   487fc:	dc400115 	stw	r17,4(sp)
   48800:	dc000015 	stw	r16,0(sp)
   48804:	2500b804 	addi	r20,r4,736
   48808:	a0002326 	beq	r20,zero,48898 <_fwalk_reent+0xbc>
   4880c:	282b883a 	mov	r21,r5
   48810:	2027883a 	mov	r19,r4
   48814:	002f883a 	mov	r23,zero
   48818:	05800044 	movi	r22,1
   4881c:	04bfffc4 	movi	r18,-1
   48820:	a4400117 	ldw	r17,4(r20)
   48824:	a4000217 	ldw	r16,8(r20)
   48828:	8c7fffc4 	addi	r17,r17,-1
   4882c:	88000c16 	blt	r17,zero,48860 <_fwalk_reent+0x84>
   48830:	84000304 	addi	r16,r16,12
   48834:	8080000b 	ldhu	r2,0(r16)
   48838:	8c7fffc4 	addi	r17,r17,-1
   4883c:	817ffd04 	addi	r5,r16,-12
   48840:	b080052e 	bgeu	r22,r2,48858 <_fwalk_reent+0x7c>
   48844:	8080008f 	ldh	r2,2(r16)
   48848:	9809883a 	mov	r4,r19
   4884c:	14800226 	beq	r2,r18,48858 <_fwalk_reent+0x7c>
   48850:	a83ee83a 	callr	r21
   48854:	b8aeb03a 	or	r23,r23,r2
   48858:	84001a04 	addi	r16,r16,104
   4885c:	8cbff51e 	bne	r17,r18,48834 <__alt_data_end+0xfffd6834>
   48860:	a5000017 	ldw	r20,0(r20)
   48864:	a03fee1e 	bne	r20,zero,48820 <__alt_data_end+0xfffd6820>
   48868:	b805883a 	mov	r2,r23
   4886c:	dfc00817 	ldw	ra,32(sp)
   48870:	ddc00717 	ldw	r23,28(sp)
   48874:	dd800617 	ldw	r22,24(sp)
   48878:	dd400517 	ldw	r21,20(sp)
   4887c:	dd000417 	ldw	r20,16(sp)
   48880:	dcc00317 	ldw	r19,12(sp)
   48884:	dc800217 	ldw	r18,8(sp)
   48888:	dc400117 	ldw	r17,4(sp)
   4888c:	dc000017 	ldw	r16,0(sp)
   48890:	dec00904 	addi	sp,sp,36
   48894:	f800283a 	ret
   48898:	002f883a 	mov	r23,zero
   4889c:	003ff206 	br	48868 <__alt_data_end+0xfffd6868>

000488a0 <_setlocale_r>:
   488a0:	30001b26 	beq	r6,zero,48910 <_setlocale_r+0x70>
   488a4:	01400174 	movhi	r5,5
   488a8:	defffe04 	addi	sp,sp,-8
   488ac:	295a4504 	addi	r5,r5,26900
   488b0:	3009883a 	mov	r4,r6
   488b4:	dc000015 	stw	r16,0(sp)
   488b8:	dfc00115 	stw	ra,4(sp)
   488bc:	3021883a 	mov	r16,r6
   488c0:	004b17c0 	call	4b17c <strcmp>
   488c4:	1000061e 	bne	r2,zero,488e0 <_setlocale_r+0x40>
   488c8:	00800174 	movhi	r2,5
   488cc:	109a4404 	addi	r2,r2,26896
   488d0:	dfc00117 	ldw	ra,4(sp)
   488d4:	dc000017 	ldw	r16,0(sp)
   488d8:	dec00204 	addi	sp,sp,8
   488dc:	f800283a 	ret
   488e0:	01400174 	movhi	r5,5
   488e4:	295a4404 	addi	r5,r5,26896
   488e8:	8009883a 	mov	r4,r16
   488ec:	004b17c0 	call	4b17c <strcmp>
   488f0:	103ff526 	beq	r2,zero,488c8 <__alt_data_end+0xfffd68c8>
   488f4:	01400174 	movhi	r5,5
   488f8:	295a2704 	addi	r5,r5,26780
   488fc:	8009883a 	mov	r4,r16
   48900:	004b17c0 	call	4b17c <strcmp>
   48904:	103ff026 	beq	r2,zero,488c8 <__alt_data_end+0xfffd68c8>
   48908:	0005883a 	mov	r2,zero
   4890c:	003ff006 	br	488d0 <__alt_data_end+0xfffd68d0>
   48910:	00800174 	movhi	r2,5
   48914:	109a4404 	addi	r2,r2,26896
   48918:	f800283a 	ret

0004891c <__locale_charset>:
   4891c:	00800174 	movhi	r2,5
   48920:	109bcc04 	addi	r2,r2,28464
   48924:	f800283a 	ret

00048928 <__locale_mb_cur_max>:
   48928:	008001b4 	movhi	r2,6
   4892c:	10a18704 	addi	r2,r2,-31204
   48930:	10800017 	ldw	r2,0(r2)
   48934:	f800283a 	ret

00048938 <__locale_msgcharset>:
   48938:	00800174 	movhi	r2,5
   4893c:	109bc404 	addi	r2,r2,28432
   48940:	f800283a 	ret

00048944 <__locale_cjk_lang>:
   48944:	0005883a 	mov	r2,zero
   48948:	f800283a 	ret

0004894c <_localeconv_r>:
   4894c:	00800174 	movhi	r2,5
   48950:	109bd404 	addi	r2,r2,28496
   48954:	f800283a 	ret

00048958 <setlocale>:
   48958:	008001b4 	movhi	r2,6
   4895c:	10a18604 	addi	r2,r2,-31208
   48960:	280d883a 	mov	r6,r5
   48964:	200b883a 	mov	r5,r4
   48968:	11000017 	ldw	r4,0(r2)
   4896c:	00488a01 	jmpi	488a0 <_setlocale_r>

00048970 <localeconv>:
   48970:	00800174 	movhi	r2,5
   48974:	109bd404 	addi	r2,r2,28496
   48978:	f800283a 	ret

0004897c <__smakebuf_r>:
   4897c:	2880030b 	ldhu	r2,12(r5)
   48980:	10c0008c 	andi	r3,r2,2
   48984:	1800411e 	bne	r3,zero,48a8c <__smakebuf_r+0x110>
   48988:	deffec04 	addi	sp,sp,-80
   4898c:	dc000f15 	stw	r16,60(sp)
   48990:	2821883a 	mov	r16,r5
   48994:	2940038f 	ldh	r5,14(r5)
   48998:	dc401015 	stw	r17,64(sp)
   4899c:	dfc01315 	stw	ra,76(sp)
   489a0:	dcc01215 	stw	r19,72(sp)
   489a4:	dc801115 	stw	r18,68(sp)
   489a8:	2023883a 	mov	r17,r4
   489ac:	28001c16 	blt	r5,zero,48a20 <__smakebuf_r+0xa4>
   489b0:	d80d883a 	mov	r6,sp
   489b4:	004e4b40 	call	4e4b4 <_fstat_r>
   489b8:	10001816 	blt	r2,zero,48a1c <__smakebuf_r+0xa0>
   489bc:	d8800117 	ldw	r2,4(sp)
   489c0:	00e00014 	movui	r3,32768
   489c4:	10bc000c 	andi	r2,r2,61440
   489c8:	14c80020 	cmpeqi	r19,r2,8192
   489cc:	10c03726 	beq	r2,r3,48aac <__smakebuf_r+0x130>
   489d0:	80c0030b 	ldhu	r3,12(r16)
   489d4:	18c20014 	ori	r3,r3,2048
   489d8:	80c0030d 	sth	r3,12(r16)
   489dc:	00c80004 	movi	r3,8192
   489e0:	10c0521e 	bne	r2,r3,48b2c <__smakebuf_r+0x1b0>
   489e4:	8140038f 	ldh	r5,14(r16)
   489e8:	8809883a 	mov	r4,r17
   489ec:	004e5100 	call	4e510 <_isatty_r>
   489f0:	10004c26 	beq	r2,zero,48b24 <__smakebuf_r+0x1a8>
   489f4:	8080030b 	ldhu	r2,12(r16)
   489f8:	80c010c4 	addi	r3,r16,67
   489fc:	80c00015 	stw	r3,0(r16)
   48a00:	10800054 	ori	r2,r2,1
   48a04:	8080030d 	sth	r2,12(r16)
   48a08:	00800044 	movi	r2,1
   48a0c:	80c00415 	stw	r3,16(r16)
   48a10:	80800515 	stw	r2,20(r16)
   48a14:	04810004 	movi	r18,1024
   48a18:	00000706 	br	48a38 <__smakebuf_r+0xbc>
   48a1c:	8080030b 	ldhu	r2,12(r16)
   48a20:	10c0200c 	andi	r3,r2,128
   48a24:	18001f1e 	bne	r3,zero,48aa4 <__smakebuf_r+0x128>
   48a28:	04810004 	movi	r18,1024
   48a2c:	10820014 	ori	r2,r2,2048
   48a30:	8080030d 	sth	r2,12(r16)
   48a34:	0027883a 	mov	r19,zero
   48a38:	900b883a 	mov	r5,r18
   48a3c:	8809883a 	mov	r4,r17
   48a40:	0048b380 	call	48b38 <_malloc_r>
   48a44:	10002c26 	beq	r2,zero,48af8 <__smakebuf_r+0x17c>
   48a48:	80c0030b 	ldhu	r3,12(r16)
   48a4c:	01000134 	movhi	r4,4
   48a50:	211e9d04 	addi	r4,r4,31348
   48a54:	89000f15 	stw	r4,60(r17)
   48a58:	18c02014 	ori	r3,r3,128
   48a5c:	80c0030d 	sth	r3,12(r16)
   48a60:	80800015 	stw	r2,0(r16)
   48a64:	80800415 	stw	r2,16(r16)
   48a68:	84800515 	stw	r18,20(r16)
   48a6c:	98001a1e 	bne	r19,zero,48ad8 <__smakebuf_r+0x15c>
   48a70:	dfc01317 	ldw	ra,76(sp)
   48a74:	dcc01217 	ldw	r19,72(sp)
   48a78:	dc801117 	ldw	r18,68(sp)
   48a7c:	dc401017 	ldw	r17,64(sp)
   48a80:	dc000f17 	ldw	r16,60(sp)
   48a84:	dec01404 	addi	sp,sp,80
   48a88:	f800283a 	ret
   48a8c:	288010c4 	addi	r2,r5,67
   48a90:	28800015 	stw	r2,0(r5)
   48a94:	28800415 	stw	r2,16(r5)
   48a98:	00800044 	movi	r2,1
   48a9c:	28800515 	stw	r2,20(r5)
   48aa0:	f800283a 	ret
   48aa4:	04801004 	movi	r18,64
   48aa8:	003fe006 	br	48a2c <__alt_data_end+0xfffd6a2c>
   48aac:	81000a17 	ldw	r4,40(r16)
   48ab0:	00c00174 	movhi	r3,5
   48ab4:	18ec4604 	addi	r3,r3,-20200
   48ab8:	20ffc51e 	bne	r4,r3,489d0 <__alt_data_end+0xfffd69d0>
   48abc:	8080030b 	ldhu	r2,12(r16)
   48ac0:	04810004 	movi	r18,1024
   48ac4:	84801315 	stw	r18,76(r16)
   48ac8:	1484b03a 	or	r2,r2,r18
   48acc:	8080030d 	sth	r2,12(r16)
   48ad0:	0027883a 	mov	r19,zero
   48ad4:	003fd806 	br	48a38 <__alt_data_end+0xfffd6a38>
   48ad8:	8140038f 	ldh	r5,14(r16)
   48adc:	8809883a 	mov	r4,r17
   48ae0:	004e5100 	call	4e510 <_isatty_r>
   48ae4:	103fe226 	beq	r2,zero,48a70 <__alt_data_end+0xfffd6a70>
   48ae8:	8080030b 	ldhu	r2,12(r16)
   48aec:	10800054 	ori	r2,r2,1
   48af0:	8080030d 	sth	r2,12(r16)
   48af4:	003fde06 	br	48a70 <__alt_data_end+0xfffd6a70>
   48af8:	8080030b 	ldhu	r2,12(r16)
   48afc:	10c0800c 	andi	r3,r2,512
   48b00:	183fdb1e 	bne	r3,zero,48a70 <__alt_data_end+0xfffd6a70>
   48b04:	10800094 	ori	r2,r2,2
   48b08:	80c010c4 	addi	r3,r16,67
   48b0c:	8080030d 	sth	r2,12(r16)
   48b10:	00800044 	movi	r2,1
   48b14:	80c00015 	stw	r3,0(r16)
   48b18:	80c00415 	stw	r3,16(r16)
   48b1c:	80800515 	stw	r2,20(r16)
   48b20:	003fd306 	br	48a70 <__alt_data_end+0xfffd6a70>
   48b24:	04810004 	movi	r18,1024
   48b28:	003fc306 	br	48a38 <__alt_data_end+0xfffd6a38>
   48b2c:	0027883a 	mov	r19,zero
   48b30:	04810004 	movi	r18,1024
   48b34:	003fc006 	br	48a38 <__alt_data_end+0xfffd6a38>

00048b38 <_malloc_r>:
   48b38:	defff504 	addi	sp,sp,-44
   48b3c:	dc800315 	stw	r18,12(sp)
   48b40:	dfc00a15 	stw	ra,40(sp)
   48b44:	df000915 	stw	fp,36(sp)
   48b48:	ddc00815 	stw	r23,32(sp)
   48b4c:	dd800715 	stw	r22,28(sp)
   48b50:	dd400615 	stw	r21,24(sp)
   48b54:	dd000515 	stw	r20,20(sp)
   48b58:	dcc00415 	stw	r19,16(sp)
   48b5c:	dc400215 	stw	r17,8(sp)
   48b60:	dc000115 	stw	r16,4(sp)
   48b64:	288002c4 	addi	r2,r5,11
   48b68:	00c00584 	movi	r3,22
   48b6c:	2025883a 	mov	r18,r4
   48b70:	18807f2e 	bgeu	r3,r2,48d70 <_malloc_r+0x238>
   48b74:	047ffe04 	movi	r17,-8
   48b78:	1462703a 	and	r17,r2,r17
   48b7c:	8800a316 	blt	r17,zero,48e0c <_malloc_r+0x2d4>
   48b80:	8940a236 	bltu	r17,r5,48e0c <_malloc_r+0x2d4>
   48b84:	00521a80 	call	521a8 <__malloc_lock>
   48b88:	00807dc4 	movi	r2,503
   48b8c:	1441e92e 	bgeu	r2,r17,49334 <_malloc_r+0x7fc>
   48b90:	8804d27a 	srli	r2,r17,9
   48b94:	1000a126 	beq	r2,zero,48e1c <_malloc_r+0x2e4>
   48b98:	00c00104 	movi	r3,4
   48b9c:	18811e36 	bltu	r3,r2,49018 <_malloc_r+0x4e0>
   48ba0:	8804d1ba 	srli	r2,r17,6
   48ba4:	12000e44 	addi	r8,r2,57
   48ba8:	11c00e04 	addi	r7,r2,56
   48bac:	4209883a 	add	r4,r8,r8
   48bb0:	04c00174 	movhi	r19,5
   48bb4:	2109883a 	add	r4,r4,r4
   48bb8:	9cdbe204 	addi	r19,r19,28552
   48bbc:	2109883a 	add	r4,r4,r4
   48bc0:	9909883a 	add	r4,r19,r4
   48bc4:	24000117 	ldw	r16,4(r4)
   48bc8:	213ffe04 	addi	r4,r4,-8
   48bcc:	24009726 	beq	r4,r16,48e2c <_malloc_r+0x2f4>
   48bd0:	80800117 	ldw	r2,4(r16)
   48bd4:	01bfff04 	movi	r6,-4
   48bd8:	014003c4 	movi	r5,15
   48bdc:	1184703a 	and	r2,r2,r6
   48be0:	1447c83a 	sub	r3,r2,r17
   48be4:	28c00716 	blt	r5,r3,48c04 <_malloc_r+0xcc>
   48be8:	1800920e 	bge	r3,zero,48e34 <_malloc_r+0x2fc>
   48bec:	84000317 	ldw	r16,12(r16)
   48bf0:	24008e26 	beq	r4,r16,48e2c <_malloc_r+0x2f4>
   48bf4:	80800117 	ldw	r2,4(r16)
   48bf8:	1184703a 	and	r2,r2,r6
   48bfc:	1447c83a 	sub	r3,r2,r17
   48c00:	28fff90e 	bge	r5,r3,48be8 <__alt_data_end+0xfffd6be8>
   48c04:	3809883a 	mov	r4,r7
   48c08:	01800174 	movhi	r6,5
   48c0c:	9c000417 	ldw	r16,16(r19)
   48c10:	319be204 	addi	r6,r6,28552
   48c14:	32000204 	addi	r8,r6,8
   48c18:	82013426 	beq	r16,r8,490ec <_malloc_r+0x5b4>
   48c1c:	80c00117 	ldw	r3,4(r16)
   48c20:	00bfff04 	movi	r2,-4
   48c24:	188e703a 	and	r7,r3,r2
   48c28:	3c45c83a 	sub	r2,r7,r17
   48c2c:	00c003c4 	movi	r3,15
   48c30:	18811f16 	blt	r3,r2,490b0 <_malloc_r+0x578>
   48c34:	32000515 	stw	r8,20(r6)
   48c38:	32000415 	stw	r8,16(r6)
   48c3c:	10007f0e 	bge	r2,zero,48e3c <_malloc_r+0x304>
   48c40:	00807fc4 	movi	r2,511
   48c44:	11c0fd36 	bltu	r2,r7,4903c <_malloc_r+0x504>
   48c48:	3806d0fa 	srli	r3,r7,3
   48c4c:	01c00044 	movi	r7,1
   48c50:	30800117 	ldw	r2,4(r6)
   48c54:	19400044 	addi	r5,r3,1
   48c58:	294b883a 	add	r5,r5,r5
   48c5c:	1807d0ba 	srai	r3,r3,2
   48c60:	294b883a 	add	r5,r5,r5
   48c64:	294b883a 	add	r5,r5,r5
   48c68:	298b883a 	add	r5,r5,r6
   48c6c:	38c6983a 	sll	r3,r7,r3
   48c70:	29c00017 	ldw	r7,0(r5)
   48c74:	2a7ffe04 	addi	r9,r5,-8
   48c78:	1886b03a 	or	r3,r3,r2
   48c7c:	82400315 	stw	r9,12(r16)
   48c80:	81c00215 	stw	r7,8(r16)
   48c84:	30c00115 	stw	r3,4(r6)
   48c88:	2c000015 	stw	r16,0(r5)
   48c8c:	3c000315 	stw	r16,12(r7)
   48c90:	2005d0ba 	srai	r2,r4,2
   48c94:	01400044 	movi	r5,1
   48c98:	288a983a 	sll	r5,r5,r2
   48c9c:	19406f36 	bltu	r3,r5,48e5c <_malloc_r+0x324>
   48ca0:	28c4703a 	and	r2,r5,r3
   48ca4:	10000a1e 	bne	r2,zero,48cd0 <_malloc_r+0x198>
   48ca8:	00bfff04 	movi	r2,-4
   48cac:	294b883a 	add	r5,r5,r5
   48cb0:	2088703a 	and	r4,r4,r2
   48cb4:	28c4703a 	and	r2,r5,r3
   48cb8:	21000104 	addi	r4,r4,4
   48cbc:	1000041e 	bne	r2,zero,48cd0 <_malloc_r+0x198>
   48cc0:	294b883a 	add	r5,r5,r5
   48cc4:	28c4703a 	and	r2,r5,r3
   48cc8:	21000104 	addi	r4,r4,4
   48ccc:	103ffc26 	beq	r2,zero,48cc0 <__alt_data_end+0xfffd6cc0>
   48cd0:	02bfff04 	movi	r10,-4
   48cd4:	024003c4 	movi	r9,15
   48cd8:	21800044 	addi	r6,r4,1
   48cdc:	318d883a 	add	r6,r6,r6
   48ce0:	318d883a 	add	r6,r6,r6
   48ce4:	318d883a 	add	r6,r6,r6
   48ce8:	998d883a 	add	r6,r19,r6
   48cec:	333ffe04 	addi	r12,r6,-8
   48cf0:	2017883a 	mov	r11,r4
   48cf4:	31800104 	addi	r6,r6,4
   48cf8:	34000017 	ldw	r16,0(r6)
   48cfc:	31fffd04 	addi	r7,r6,-12
   48d00:	81c0041e 	bne	r16,r7,48d14 <_malloc_r+0x1dc>
   48d04:	0000fb06 	br	490f4 <_malloc_r+0x5bc>
   48d08:	1801030e 	bge	r3,zero,49118 <_malloc_r+0x5e0>
   48d0c:	84000317 	ldw	r16,12(r16)
   48d10:	81c0f826 	beq	r16,r7,490f4 <_malloc_r+0x5bc>
   48d14:	80800117 	ldw	r2,4(r16)
   48d18:	1284703a 	and	r2,r2,r10
   48d1c:	1447c83a 	sub	r3,r2,r17
   48d20:	48fff90e 	bge	r9,r3,48d08 <__alt_data_end+0xfffd6d08>
   48d24:	80800317 	ldw	r2,12(r16)
   48d28:	81000217 	ldw	r4,8(r16)
   48d2c:	89400054 	ori	r5,r17,1
   48d30:	81400115 	stw	r5,4(r16)
   48d34:	20800315 	stw	r2,12(r4)
   48d38:	11000215 	stw	r4,8(r2)
   48d3c:	8463883a 	add	r17,r16,r17
   48d40:	9c400515 	stw	r17,20(r19)
   48d44:	9c400415 	stw	r17,16(r19)
   48d48:	18800054 	ori	r2,r3,1
   48d4c:	88800115 	stw	r2,4(r17)
   48d50:	8a000315 	stw	r8,12(r17)
   48d54:	8a000215 	stw	r8,8(r17)
   48d58:	88e3883a 	add	r17,r17,r3
   48d5c:	88c00015 	stw	r3,0(r17)
   48d60:	9009883a 	mov	r4,r18
   48d64:	00521cc0 	call	521cc <__malloc_unlock>
   48d68:	80800204 	addi	r2,r16,8
   48d6c:	00001b06 	br	48ddc <_malloc_r+0x2a4>
   48d70:	04400404 	movi	r17,16
   48d74:	89402536 	bltu	r17,r5,48e0c <_malloc_r+0x2d4>
   48d78:	00521a80 	call	521a8 <__malloc_lock>
   48d7c:	00800184 	movi	r2,6
   48d80:	01000084 	movi	r4,2
   48d84:	04c00174 	movhi	r19,5
   48d88:	1085883a 	add	r2,r2,r2
   48d8c:	9cdbe204 	addi	r19,r19,28552
   48d90:	1085883a 	add	r2,r2,r2
   48d94:	9885883a 	add	r2,r19,r2
   48d98:	14000117 	ldw	r16,4(r2)
   48d9c:	10fffe04 	addi	r3,r2,-8
   48da0:	80c0d926 	beq	r16,r3,49108 <_malloc_r+0x5d0>
   48da4:	80c00117 	ldw	r3,4(r16)
   48da8:	81000317 	ldw	r4,12(r16)
   48dac:	00bfff04 	movi	r2,-4
   48db0:	1884703a 	and	r2,r3,r2
   48db4:	81400217 	ldw	r5,8(r16)
   48db8:	8085883a 	add	r2,r16,r2
   48dbc:	10c00117 	ldw	r3,4(r2)
   48dc0:	29000315 	stw	r4,12(r5)
   48dc4:	21400215 	stw	r5,8(r4)
   48dc8:	18c00054 	ori	r3,r3,1
   48dcc:	10c00115 	stw	r3,4(r2)
   48dd0:	9009883a 	mov	r4,r18
   48dd4:	00521cc0 	call	521cc <__malloc_unlock>
   48dd8:	80800204 	addi	r2,r16,8
   48ddc:	dfc00a17 	ldw	ra,40(sp)
   48de0:	df000917 	ldw	fp,36(sp)
   48de4:	ddc00817 	ldw	r23,32(sp)
   48de8:	dd800717 	ldw	r22,28(sp)
   48dec:	dd400617 	ldw	r21,24(sp)
   48df0:	dd000517 	ldw	r20,20(sp)
   48df4:	dcc00417 	ldw	r19,16(sp)
   48df8:	dc800317 	ldw	r18,12(sp)
   48dfc:	dc400217 	ldw	r17,8(sp)
   48e00:	dc000117 	ldw	r16,4(sp)
   48e04:	dec00b04 	addi	sp,sp,44
   48e08:	f800283a 	ret
   48e0c:	00800304 	movi	r2,12
   48e10:	90800015 	stw	r2,0(r18)
   48e14:	0005883a 	mov	r2,zero
   48e18:	003ff006 	br	48ddc <__alt_data_end+0xfffd6ddc>
   48e1c:	01002004 	movi	r4,128
   48e20:	02001004 	movi	r8,64
   48e24:	01c00fc4 	movi	r7,63
   48e28:	003f6106 	br	48bb0 <__alt_data_end+0xfffd6bb0>
   48e2c:	4009883a 	mov	r4,r8
   48e30:	003f7506 	br	48c08 <__alt_data_end+0xfffd6c08>
   48e34:	81000317 	ldw	r4,12(r16)
   48e38:	003fde06 	br	48db4 <__alt_data_end+0xfffd6db4>
   48e3c:	81c5883a 	add	r2,r16,r7
   48e40:	11400117 	ldw	r5,4(r2)
   48e44:	9009883a 	mov	r4,r18
   48e48:	29400054 	ori	r5,r5,1
   48e4c:	11400115 	stw	r5,4(r2)
   48e50:	00521cc0 	call	521cc <__malloc_unlock>
   48e54:	80800204 	addi	r2,r16,8
   48e58:	003fe006 	br	48ddc <__alt_data_end+0xfffd6ddc>
   48e5c:	9c000217 	ldw	r16,8(r19)
   48e60:	00bfff04 	movi	r2,-4
   48e64:	85800117 	ldw	r22,4(r16)
   48e68:	b0ac703a 	and	r22,r22,r2
   48e6c:	b4400336 	bltu	r22,r17,48e7c <_malloc_r+0x344>
   48e70:	b445c83a 	sub	r2,r22,r17
   48e74:	00c003c4 	movi	r3,15
   48e78:	18805d16 	blt	r3,r2,48ff0 <_malloc_r+0x4b8>
   48e7c:	05c001b4 	movhi	r23,6
   48e80:	008001b4 	movhi	r2,6
   48e84:	10a88104 	addi	r2,r2,-24060
   48e88:	bde18804 	addi	r23,r23,-31200
   48e8c:	15400017 	ldw	r21,0(r2)
   48e90:	b8c00017 	ldw	r3,0(r23)
   48e94:	00bfffc4 	movi	r2,-1
   48e98:	858d883a 	add	r6,r16,r22
   48e9c:	8d6b883a 	add	r21,r17,r21
   48ea0:	1880ea26 	beq	r3,r2,4924c <_malloc_r+0x714>
   48ea4:	ad4403c4 	addi	r21,r21,4111
   48ea8:	00bc0004 	movi	r2,-4096
   48eac:	a8aa703a 	and	r21,r21,r2
   48eb0:	a80b883a 	mov	r5,r21
   48eb4:	9009883a 	mov	r4,r18
   48eb8:	d9800015 	stw	r6,0(sp)
   48ebc:	004afec0 	call	4afec <_sbrk_r>
   48ec0:	1029883a 	mov	r20,r2
   48ec4:	00bfffc4 	movi	r2,-1
   48ec8:	d9800017 	ldw	r6,0(sp)
   48ecc:	a080e826 	beq	r20,r2,49270 <_malloc_r+0x738>
   48ed0:	a180a636 	bltu	r20,r6,4916c <_malloc_r+0x634>
   48ed4:	070001b4 	movhi	fp,6
   48ed8:	e7288a04 	addi	fp,fp,-24024
   48edc:	e0800017 	ldw	r2,0(fp)
   48ee0:	a887883a 	add	r3,r21,r2
   48ee4:	e0c00015 	stw	r3,0(fp)
   48ee8:	3500e626 	beq	r6,r20,49284 <_malloc_r+0x74c>
   48eec:	b9000017 	ldw	r4,0(r23)
   48ef0:	00bfffc4 	movi	r2,-1
   48ef4:	2080ee26 	beq	r4,r2,492b0 <_malloc_r+0x778>
   48ef8:	a185c83a 	sub	r2,r20,r6
   48efc:	10c5883a 	add	r2,r2,r3
   48f00:	e0800015 	stw	r2,0(fp)
   48f04:	a0c001cc 	andi	r3,r20,7
   48f08:	1800bc26 	beq	r3,zero,491fc <_malloc_r+0x6c4>
   48f0c:	a0e9c83a 	sub	r20,r20,r3
   48f10:	00840204 	movi	r2,4104
   48f14:	a5000204 	addi	r20,r20,8
   48f18:	10c7c83a 	sub	r3,r2,r3
   48f1c:	a545883a 	add	r2,r20,r21
   48f20:	1083ffcc 	andi	r2,r2,4095
   48f24:	18abc83a 	sub	r21,r3,r2
   48f28:	a80b883a 	mov	r5,r21
   48f2c:	9009883a 	mov	r4,r18
   48f30:	004afec0 	call	4afec <_sbrk_r>
   48f34:	00ffffc4 	movi	r3,-1
   48f38:	10c0e126 	beq	r2,r3,492c0 <_malloc_r+0x788>
   48f3c:	1505c83a 	sub	r2,r2,r20
   48f40:	1545883a 	add	r2,r2,r21
   48f44:	10800054 	ori	r2,r2,1
   48f48:	e0c00017 	ldw	r3,0(fp)
   48f4c:	9d000215 	stw	r20,8(r19)
   48f50:	a0800115 	stw	r2,4(r20)
   48f54:	a8c7883a 	add	r3,r21,r3
   48f58:	e0c00015 	stw	r3,0(fp)
   48f5c:	84c00e26 	beq	r16,r19,48f98 <_malloc_r+0x460>
   48f60:	018003c4 	movi	r6,15
   48f64:	3580a72e 	bgeu	r6,r22,49204 <_malloc_r+0x6cc>
   48f68:	81400117 	ldw	r5,4(r16)
   48f6c:	013ffe04 	movi	r4,-8
   48f70:	b0bffd04 	addi	r2,r22,-12
   48f74:	1104703a 	and	r2,r2,r4
   48f78:	2900004c 	andi	r4,r5,1
   48f7c:	2088b03a 	or	r4,r4,r2
   48f80:	81000115 	stw	r4,4(r16)
   48f84:	01400144 	movi	r5,5
   48f88:	8089883a 	add	r4,r16,r2
   48f8c:	21400115 	stw	r5,4(r4)
   48f90:	21400215 	stw	r5,8(r4)
   48f94:	3080cd36 	bltu	r6,r2,492cc <_malloc_r+0x794>
   48f98:	008001b4 	movhi	r2,6
   48f9c:	10a88004 	addi	r2,r2,-24064
   48fa0:	11000017 	ldw	r4,0(r2)
   48fa4:	20c0012e 	bgeu	r4,r3,48fac <_malloc_r+0x474>
   48fa8:	10c00015 	stw	r3,0(r2)
   48fac:	008001b4 	movhi	r2,6
   48fb0:	10a87f04 	addi	r2,r2,-24068
   48fb4:	11000017 	ldw	r4,0(r2)
   48fb8:	9c000217 	ldw	r16,8(r19)
   48fbc:	20c0012e 	bgeu	r4,r3,48fc4 <_malloc_r+0x48c>
   48fc0:	10c00015 	stw	r3,0(r2)
   48fc4:	80c00117 	ldw	r3,4(r16)
   48fc8:	00bfff04 	movi	r2,-4
   48fcc:	1886703a 	and	r3,r3,r2
   48fd0:	1c45c83a 	sub	r2,r3,r17
   48fd4:	1c400236 	bltu	r3,r17,48fe0 <_malloc_r+0x4a8>
   48fd8:	00c003c4 	movi	r3,15
   48fdc:	18800416 	blt	r3,r2,48ff0 <_malloc_r+0x4b8>
   48fe0:	9009883a 	mov	r4,r18
   48fe4:	00521cc0 	call	521cc <__malloc_unlock>
   48fe8:	0005883a 	mov	r2,zero
   48fec:	003f7b06 	br	48ddc <__alt_data_end+0xfffd6ddc>
   48ff0:	88c00054 	ori	r3,r17,1
   48ff4:	80c00115 	stw	r3,4(r16)
   48ff8:	8463883a 	add	r17,r16,r17
   48ffc:	10800054 	ori	r2,r2,1
   49000:	9c400215 	stw	r17,8(r19)
   49004:	88800115 	stw	r2,4(r17)
   49008:	9009883a 	mov	r4,r18
   4900c:	00521cc0 	call	521cc <__malloc_unlock>
   49010:	80800204 	addi	r2,r16,8
   49014:	003f7106 	br	48ddc <__alt_data_end+0xfffd6ddc>
   49018:	00c00504 	movi	r3,20
   4901c:	18804a2e 	bgeu	r3,r2,49148 <_malloc_r+0x610>
   49020:	00c01504 	movi	r3,84
   49024:	18806e36 	bltu	r3,r2,491e0 <_malloc_r+0x6a8>
   49028:	8804d33a 	srli	r2,r17,12
   4902c:	12001bc4 	addi	r8,r2,111
   49030:	11c01b84 	addi	r7,r2,110
   49034:	4209883a 	add	r4,r8,r8
   49038:	003edd06 	br	48bb0 <__alt_data_end+0xfffd6bb0>
   4903c:	3804d27a 	srli	r2,r7,9
   49040:	00c00104 	movi	r3,4
   49044:	1880442e 	bgeu	r3,r2,49158 <_malloc_r+0x620>
   49048:	00c00504 	movi	r3,20
   4904c:	18808136 	bltu	r3,r2,49254 <_malloc_r+0x71c>
   49050:	11401704 	addi	r5,r2,92
   49054:	10c016c4 	addi	r3,r2,91
   49058:	294b883a 	add	r5,r5,r5
   4905c:	294b883a 	add	r5,r5,r5
   49060:	294b883a 	add	r5,r5,r5
   49064:	994b883a 	add	r5,r19,r5
   49068:	28800017 	ldw	r2,0(r5)
   4906c:	01800174 	movhi	r6,5
   49070:	297ffe04 	addi	r5,r5,-8
   49074:	319be204 	addi	r6,r6,28552
   49078:	28806526 	beq	r5,r2,49210 <_malloc_r+0x6d8>
   4907c:	01bfff04 	movi	r6,-4
   49080:	10c00117 	ldw	r3,4(r2)
   49084:	1986703a 	and	r3,r3,r6
   49088:	38c0022e 	bgeu	r7,r3,49094 <_malloc_r+0x55c>
   4908c:	10800217 	ldw	r2,8(r2)
   49090:	28bffb1e 	bne	r5,r2,49080 <__alt_data_end+0xfffd7080>
   49094:	11400317 	ldw	r5,12(r2)
   49098:	98c00117 	ldw	r3,4(r19)
   4909c:	81400315 	stw	r5,12(r16)
   490a0:	80800215 	stw	r2,8(r16)
   490a4:	2c000215 	stw	r16,8(r5)
   490a8:	14000315 	stw	r16,12(r2)
   490ac:	003ef806 	br	48c90 <__alt_data_end+0xfffd6c90>
   490b0:	88c00054 	ori	r3,r17,1
   490b4:	80c00115 	stw	r3,4(r16)
   490b8:	8463883a 	add	r17,r16,r17
   490bc:	34400515 	stw	r17,20(r6)
   490c0:	34400415 	stw	r17,16(r6)
   490c4:	10c00054 	ori	r3,r2,1
   490c8:	8a000315 	stw	r8,12(r17)
   490cc:	8a000215 	stw	r8,8(r17)
   490d0:	88c00115 	stw	r3,4(r17)
   490d4:	88a3883a 	add	r17,r17,r2
   490d8:	88800015 	stw	r2,0(r17)
   490dc:	9009883a 	mov	r4,r18
   490e0:	00521cc0 	call	521cc <__malloc_unlock>
   490e4:	80800204 	addi	r2,r16,8
   490e8:	003f3c06 	br	48ddc <__alt_data_end+0xfffd6ddc>
   490ec:	30c00117 	ldw	r3,4(r6)
   490f0:	003ee706 	br	48c90 <__alt_data_end+0xfffd6c90>
   490f4:	5ac00044 	addi	r11,r11,1
   490f8:	588000cc 	andi	r2,r11,3
   490fc:	31800204 	addi	r6,r6,8
   49100:	103efd1e 	bne	r2,zero,48cf8 <__alt_data_end+0xfffd6cf8>
   49104:	00002406 	br	49198 <_malloc_r+0x660>
   49108:	14000317 	ldw	r16,12(r2)
   4910c:	143f251e 	bne	r2,r16,48da4 <__alt_data_end+0xfffd6da4>
   49110:	21000084 	addi	r4,r4,2
   49114:	003ebc06 	br	48c08 <__alt_data_end+0xfffd6c08>
   49118:	8085883a 	add	r2,r16,r2
   4911c:	10c00117 	ldw	r3,4(r2)
   49120:	81000317 	ldw	r4,12(r16)
   49124:	81400217 	ldw	r5,8(r16)
   49128:	18c00054 	ori	r3,r3,1
   4912c:	10c00115 	stw	r3,4(r2)
   49130:	29000315 	stw	r4,12(r5)
   49134:	21400215 	stw	r5,8(r4)
   49138:	9009883a 	mov	r4,r18
   4913c:	00521cc0 	call	521cc <__malloc_unlock>
   49140:	80800204 	addi	r2,r16,8
   49144:	003f2506 	br	48ddc <__alt_data_end+0xfffd6ddc>
   49148:	12001704 	addi	r8,r2,92
   4914c:	11c016c4 	addi	r7,r2,91
   49150:	4209883a 	add	r4,r8,r8
   49154:	003e9606 	br	48bb0 <__alt_data_end+0xfffd6bb0>
   49158:	3804d1ba 	srli	r2,r7,6
   4915c:	11400e44 	addi	r5,r2,57
   49160:	10c00e04 	addi	r3,r2,56
   49164:	294b883a 	add	r5,r5,r5
   49168:	003fbc06 	br	4905c <__alt_data_end+0xfffd705c>
   4916c:	84ff5926 	beq	r16,r19,48ed4 <__alt_data_end+0xfffd6ed4>
   49170:	00800174 	movhi	r2,5
   49174:	109be204 	addi	r2,r2,28552
   49178:	14000217 	ldw	r16,8(r2)
   4917c:	00bfff04 	movi	r2,-4
   49180:	80c00117 	ldw	r3,4(r16)
   49184:	1886703a 	and	r3,r3,r2
   49188:	003f9106 	br	48fd0 <__alt_data_end+0xfffd6fd0>
   4918c:	60800217 	ldw	r2,8(r12)
   49190:	213fffc4 	addi	r4,r4,-1
   49194:	1300651e 	bne	r2,r12,4932c <_malloc_r+0x7f4>
   49198:	208000cc 	andi	r2,r4,3
   4919c:	633ffe04 	addi	r12,r12,-8
   491a0:	103ffa1e 	bne	r2,zero,4918c <__alt_data_end+0xfffd718c>
   491a4:	98800117 	ldw	r2,4(r19)
   491a8:	0146303a 	nor	r3,zero,r5
   491ac:	1884703a 	and	r2,r3,r2
   491b0:	98800115 	stw	r2,4(r19)
   491b4:	294b883a 	add	r5,r5,r5
   491b8:	117f2836 	bltu	r2,r5,48e5c <__alt_data_end+0xfffd6e5c>
   491bc:	283f2726 	beq	r5,zero,48e5c <__alt_data_end+0xfffd6e5c>
   491c0:	2886703a 	and	r3,r5,r2
   491c4:	5809883a 	mov	r4,r11
   491c8:	183ec31e 	bne	r3,zero,48cd8 <__alt_data_end+0xfffd6cd8>
   491cc:	294b883a 	add	r5,r5,r5
   491d0:	2886703a 	and	r3,r5,r2
   491d4:	21000104 	addi	r4,r4,4
   491d8:	183ffc26 	beq	r3,zero,491cc <__alt_data_end+0xfffd71cc>
   491dc:	003ebe06 	br	48cd8 <__alt_data_end+0xfffd6cd8>
   491e0:	00c05504 	movi	r3,340
   491e4:	18801236 	bltu	r3,r2,49230 <_malloc_r+0x6f8>
   491e8:	8804d3fa 	srli	r2,r17,15
   491ec:	12001e04 	addi	r8,r2,120
   491f0:	11c01dc4 	addi	r7,r2,119
   491f4:	4209883a 	add	r4,r8,r8
   491f8:	003e6d06 	br	48bb0 <__alt_data_end+0xfffd6bb0>
   491fc:	00c40004 	movi	r3,4096
   49200:	003f4606 	br	48f1c <__alt_data_end+0xfffd6f1c>
   49204:	00800044 	movi	r2,1
   49208:	a0800115 	stw	r2,4(r20)
   4920c:	003f7406 	br	48fe0 <__alt_data_end+0xfffd6fe0>
   49210:	1805d0ba 	srai	r2,r3,2
   49214:	01c00044 	movi	r7,1
   49218:	30c00117 	ldw	r3,4(r6)
   4921c:	388e983a 	sll	r7,r7,r2
   49220:	2805883a 	mov	r2,r5
   49224:	38c6b03a 	or	r3,r7,r3
   49228:	30c00115 	stw	r3,4(r6)
   4922c:	003f9b06 	br	4909c <__alt_data_end+0xfffd709c>
   49230:	00c15504 	movi	r3,1364
   49234:	18801a36 	bltu	r3,r2,492a0 <_malloc_r+0x768>
   49238:	8804d4ba 	srli	r2,r17,18
   4923c:	12001f44 	addi	r8,r2,125
   49240:	11c01f04 	addi	r7,r2,124
   49244:	4209883a 	add	r4,r8,r8
   49248:	003e5906 	br	48bb0 <__alt_data_end+0xfffd6bb0>
   4924c:	ad400404 	addi	r21,r21,16
   49250:	003f1706 	br	48eb0 <__alt_data_end+0xfffd6eb0>
   49254:	00c01504 	movi	r3,84
   49258:	18802336 	bltu	r3,r2,492e8 <_malloc_r+0x7b0>
   4925c:	3804d33a 	srli	r2,r7,12
   49260:	11401bc4 	addi	r5,r2,111
   49264:	10c01b84 	addi	r3,r2,110
   49268:	294b883a 	add	r5,r5,r5
   4926c:	003f7b06 	br	4905c <__alt_data_end+0xfffd705c>
   49270:	9c000217 	ldw	r16,8(r19)
   49274:	00bfff04 	movi	r2,-4
   49278:	80c00117 	ldw	r3,4(r16)
   4927c:	1886703a 	and	r3,r3,r2
   49280:	003f5306 	br	48fd0 <__alt_data_end+0xfffd6fd0>
   49284:	3083ffcc 	andi	r2,r6,4095
   49288:	103f181e 	bne	r2,zero,48eec <__alt_data_end+0xfffd6eec>
   4928c:	99000217 	ldw	r4,8(r19)
   49290:	b545883a 	add	r2,r22,r21
   49294:	10800054 	ori	r2,r2,1
   49298:	20800115 	stw	r2,4(r4)
   4929c:	003f3e06 	br	48f98 <__alt_data_end+0xfffd6f98>
   492a0:	01003f84 	movi	r4,254
   492a4:	02001fc4 	movi	r8,127
   492a8:	01c01f84 	movi	r7,126
   492ac:	003e4006 	br	48bb0 <__alt_data_end+0xfffd6bb0>
   492b0:	008001b4 	movhi	r2,6
   492b4:	10a18804 	addi	r2,r2,-31200
   492b8:	15000015 	stw	r20,0(r2)
   492bc:	003f1106 	br	48f04 <__alt_data_end+0xfffd6f04>
   492c0:	00800044 	movi	r2,1
   492c4:	002b883a 	mov	r21,zero
   492c8:	003f1f06 	br	48f48 <__alt_data_end+0xfffd6f48>
   492cc:	81400204 	addi	r5,r16,8
   492d0:	9009883a 	mov	r4,r18
   492d4:	0047f400 	call	47f40 <_free_r>
   492d8:	008001b4 	movhi	r2,6
   492dc:	10a88a04 	addi	r2,r2,-24024
   492e0:	10c00017 	ldw	r3,0(r2)
   492e4:	003f2c06 	br	48f98 <__alt_data_end+0xfffd6f98>
   492e8:	00c05504 	movi	r3,340
   492ec:	18800536 	bltu	r3,r2,49304 <_malloc_r+0x7cc>
   492f0:	3804d3fa 	srli	r2,r7,15
   492f4:	11401e04 	addi	r5,r2,120
   492f8:	10c01dc4 	addi	r3,r2,119
   492fc:	294b883a 	add	r5,r5,r5
   49300:	003f5606 	br	4905c <__alt_data_end+0xfffd705c>
   49304:	00c15504 	movi	r3,1364
   49308:	18800536 	bltu	r3,r2,49320 <_malloc_r+0x7e8>
   4930c:	3804d4ba 	srli	r2,r7,18
   49310:	11401f44 	addi	r5,r2,125
   49314:	10c01f04 	addi	r3,r2,124
   49318:	294b883a 	add	r5,r5,r5
   4931c:	003f4f06 	br	4905c <__alt_data_end+0xfffd705c>
   49320:	01403f84 	movi	r5,254
   49324:	00c01f84 	movi	r3,126
   49328:	003f4c06 	br	4905c <__alt_data_end+0xfffd705c>
   4932c:	98800117 	ldw	r2,4(r19)
   49330:	003fa006 	br	491b4 <__alt_data_end+0xfffd71b4>
   49334:	8808d0fa 	srli	r4,r17,3
   49338:	20800044 	addi	r2,r4,1
   4933c:	1085883a 	add	r2,r2,r2
   49340:	003e9006 	br	48d84 <__alt_data_end+0xfffd6d84>

00049344 <memchr>:
   49344:	208000cc 	andi	r2,r4,3
   49348:	280f883a 	mov	r7,r5
   4934c:	10003426 	beq	r2,zero,49420 <memchr+0xdc>
   49350:	30bfffc4 	addi	r2,r6,-1
   49354:	30001a26 	beq	r6,zero,493c0 <memchr+0x7c>
   49358:	20c00003 	ldbu	r3,0(r4)
   4935c:	29803fcc 	andi	r6,r5,255
   49360:	30c0051e 	bne	r6,r3,49378 <memchr+0x34>
   49364:	00001806 	br	493c8 <memchr+0x84>
   49368:	10001526 	beq	r2,zero,493c0 <memchr+0x7c>
   4936c:	20c00003 	ldbu	r3,0(r4)
   49370:	10bfffc4 	addi	r2,r2,-1
   49374:	30c01426 	beq	r6,r3,493c8 <memchr+0x84>
   49378:	21000044 	addi	r4,r4,1
   4937c:	20c000cc 	andi	r3,r4,3
   49380:	183ff91e 	bne	r3,zero,49368 <__alt_data_end+0xfffd7368>
   49384:	020000c4 	movi	r8,3
   49388:	40801136 	bltu	r8,r2,493d0 <memchr+0x8c>
   4938c:	10000c26 	beq	r2,zero,493c0 <memchr+0x7c>
   49390:	20c00003 	ldbu	r3,0(r4)
   49394:	29403fcc 	andi	r5,r5,255
   49398:	28c00b26 	beq	r5,r3,493c8 <memchr+0x84>
   4939c:	20c00044 	addi	r3,r4,1
   493a0:	39803fcc 	andi	r6,r7,255
   493a4:	2089883a 	add	r4,r4,r2
   493a8:	00000306 	br	493b8 <memchr+0x74>
   493ac:	18c00044 	addi	r3,r3,1
   493b0:	197fffc3 	ldbu	r5,-1(r3)
   493b4:	31400526 	beq	r6,r5,493cc <memchr+0x88>
   493b8:	1805883a 	mov	r2,r3
   493bc:	20fffb1e 	bne	r4,r3,493ac <__alt_data_end+0xfffd73ac>
   493c0:	0005883a 	mov	r2,zero
   493c4:	f800283a 	ret
   493c8:	2005883a 	mov	r2,r4
   493cc:	f800283a 	ret
   493d0:	28c03fcc 	andi	r3,r5,255
   493d4:	1812923a 	slli	r9,r3,8
   493d8:	02ffbff4 	movhi	r11,65279
   493dc:	02a02074 	movhi	r10,32897
   493e0:	48d2b03a 	or	r9,r9,r3
   493e4:	4806943a 	slli	r3,r9,16
   493e8:	5affbfc4 	addi	r11,r11,-257
   493ec:	52a02004 	addi	r10,r10,-32640
   493f0:	48d2b03a 	or	r9,r9,r3
   493f4:	20c00017 	ldw	r3,0(r4)
   493f8:	48c6f03a 	xor	r3,r9,r3
   493fc:	1acd883a 	add	r6,r3,r11
   49400:	00c6303a 	nor	r3,zero,r3
   49404:	30c6703a 	and	r3,r6,r3
   49408:	1a86703a 	and	r3,r3,r10
   4940c:	183fe01e 	bne	r3,zero,49390 <__alt_data_end+0xfffd7390>
   49410:	10bfff04 	addi	r2,r2,-4
   49414:	21000104 	addi	r4,r4,4
   49418:	40bff636 	bltu	r8,r2,493f4 <__alt_data_end+0xfffd73f4>
   4941c:	003fdb06 	br	4938c <__alt_data_end+0xfffd738c>
   49420:	3005883a 	mov	r2,r6
   49424:	003fd706 	br	49384 <__alt_data_end+0xfffd7384>

00049428 <memcpy>:
   49428:	defffd04 	addi	sp,sp,-12
   4942c:	dfc00215 	stw	ra,8(sp)
   49430:	dc400115 	stw	r17,4(sp)
   49434:	dc000015 	stw	r16,0(sp)
   49438:	00c003c4 	movi	r3,15
   4943c:	2005883a 	mov	r2,r4
   49440:	1980452e 	bgeu	r3,r6,49558 <memcpy+0x130>
   49444:	2906b03a 	or	r3,r5,r4
   49448:	18c000cc 	andi	r3,r3,3
   4944c:	1800441e 	bne	r3,zero,49560 <memcpy+0x138>
   49450:	347ffc04 	addi	r17,r6,-16
   49454:	8822d13a 	srli	r17,r17,4
   49458:	28c00104 	addi	r3,r5,4
   4945c:	23400104 	addi	r13,r4,4
   49460:	8820913a 	slli	r16,r17,4
   49464:	2b000204 	addi	r12,r5,8
   49468:	22c00204 	addi	r11,r4,8
   4946c:	84000504 	addi	r16,r16,20
   49470:	2a800304 	addi	r10,r5,12
   49474:	22400304 	addi	r9,r4,12
   49478:	2c21883a 	add	r16,r5,r16
   4947c:	2811883a 	mov	r8,r5
   49480:	200f883a 	mov	r7,r4
   49484:	41000017 	ldw	r4,0(r8)
   49488:	1fc00017 	ldw	ra,0(r3)
   4948c:	63c00017 	ldw	r15,0(r12)
   49490:	39000015 	stw	r4,0(r7)
   49494:	53800017 	ldw	r14,0(r10)
   49498:	6fc00015 	stw	ra,0(r13)
   4949c:	5bc00015 	stw	r15,0(r11)
   494a0:	4b800015 	stw	r14,0(r9)
   494a4:	18c00404 	addi	r3,r3,16
   494a8:	39c00404 	addi	r7,r7,16
   494ac:	42000404 	addi	r8,r8,16
   494b0:	6b400404 	addi	r13,r13,16
   494b4:	63000404 	addi	r12,r12,16
   494b8:	5ac00404 	addi	r11,r11,16
   494bc:	52800404 	addi	r10,r10,16
   494c0:	4a400404 	addi	r9,r9,16
   494c4:	1c3fef1e 	bne	r3,r16,49484 <__alt_data_end+0xfffd7484>
   494c8:	89c00044 	addi	r7,r17,1
   494cc:	380e913a 	slli	r7,r7,4
   494d0:	310003cc 	andi	r4,r6,15
   494d4:	02c000c4 	movi	r11,3
   494d8:	11c7883a 	add	r3,r2,r7
   494dc:	29cb883a 	add	r5,r5,r7
   494e0:	5900212e 	bgeu	r11,r4,49568 <memcpy+0x140>
   494e4:	1813883a 	mov	r9,r3
   494e8:	2811883a 	mov	r8,r5
   494ec:	200f883a 	mov	r7,r4
   494f0:	42800017 	ldw	r10,0(r8)
   494f4:	4a400104 	addi	r9,r9,4
   494f8:	39ffff04 	addi	r7,r7,-4
   494fc:	4abfff15 	stw	r10,-4(r9)
   49500:	42000104 	addi	r8,r8,4
   49504:	59fffa36 	bltu	r11,r7,494f0 <__alt_data_end+0xfffd74f0>
   49508:	213fff04 	addi	r4,r4,-4
   4950c:	2008d0ba 	srli	r4,r4,2
   49510:	318000cc 	andi	r6,r6,3
   49514:	21000044 	addi	r4,r4,1
   49518:	2109883a 	add	r4,r4,r4
   4951c:	2109883a 	add	r4,r4,r4
   49520:	1907883a 	add	r3,r3,r4
   49524:	290b883a 	add	r5,r5,r4
   49528:	30000626 	beq	r6,zero,49544 <memcpy+0x11c>
   4952c:	198d883a 	add	r6,r3,r6
   49530:	29c00003 	ldbu	r7,0(r5)
   49534:	18c00044 	addi	r3,r3,1
   49538:	29400044 	addi	r5,r5,1
   4953c:	19ffffc5 	stb	r7,-1(r3)
   49540:	19bffb1e 	bne	r3,r6,49530 <__alt_data_end+0xfffd7530>
   49544:	dfc00217 	ldw	ra,8(sp)
   49548:	dc400117 	ldw	r17,4(sp)
   4954c:	dc000017 	ldw	r16,0(sp)
   49550:	dec00304 	addi	sp,sp,12
   49554:	f800283a 	ret
   49558:	2007883a 	mov	r3,r4
   4955c:	003ff206 	br	49528 <__alt_data_end+0xfffd7528>
   49560:	2007883a 	mov	r3,r4
   49564:	003ff106 	br	4952c <__alt_data_end+0xfffd752c>
   49568:	200d883a 	mov	r6,r4
   4956c:	003fee06 	br	49528 <__alt_data_end+0xfffd7528>

00049570 <memmove>:
   49570:	2005883a 	mov	r2,r4
   49574:	29000b2e 	bgeu	r5,r4,495a4 <memmove+0x34>
   49578:	298f883a 	add	r7,r5,r6
   4957c:	21c0092e 	bgeu	r4,r7,495a4 <memmove+0x34>
   49580:	2187883a 	add	r3,r4,r6
   49584:	198bc83a 	sub	r5,r3,r6
   49588:	30004826 	beq	r6,zero,496ac <memmove+0x13c>
   4958c:	39ffffc4 	addi	r7,r7,-1
   49590:	39000003 	ldbu	r4,0(r7)
   49594:	18ffffc4 	addi	r3,r3,-1
   49598:	19000005 	stb	r4,0(r3)
   4959c:	28fffb1e 	bne	r5,r3,4958c <__alt_data_end+0xfffd758c>
   495a0:	f800283a 	ret
   495a4:	00c003c4 	movi	r3,15
   495a8:	1980412e 	bgeu	r3,r6,496b0 <memmove+0x140>
   495ac:	2886b03a 	or	r3,r5,r2
   495b0:	18c000cc 	andi	r3,r3,3
   495b4:	1800401e 	bne	r3,zero,496b8 <memmove+0x148>
   495b8:	33fffc04 	addi	r15,r6,-16
   495bc:	781ed13a 	srli	r15,r15,4
   495c0:	28c00104 	addi	r3,r5,4
   495c4:	13400104 	addi	r13,r2,4
   495c8:	781c913a 	slli	r14,r15,4
   495cc:	2b000204 	addi	r12,r5,8
   495d0:	12c00204 	addi	r11,r2,8
   495d4:	73800504 	addi	r14,r14,20
   495d8:	2a800304 	addi	r10,r5,12
   495dc:	12400304 	addi	r9,r2,12
   495e0:	2b9d883a 	add	r14,r5,r14
   495e4:	2811883a 	mov	r8,r5
   495e8:	100f883a 	mov	r7,r2
   495ec:	41000017 	ldw	r4,0(r8)
   495f0:	39c00404 	addi	r7,r7,16
   495f4:	18c00404 	addi	r3,r3,16
   495f8:	393ffc15 	stw	r4,-16(r7)
   495fc:	193ffc17 	ldw	r4,-16(r3)
   49600:	6b400404 	addi	r13,r13,16
   49604:	5ac00404 	addi	r11,r11,16
   49608:	693ffc15 	stw	r4,-16(r13)
   4960c:	61000017 	ldw	r4,0(r12)
   49610:	4a400404 	addi	r9,r9,16
   49614:	42000404 	addi	r8,r8,16
   49618:	593ffc15 	stw	r4,-16(r11)
   4961c:	51000017 	ldw	r4,0(r10)
   49620:	63000404 	addi	r12,r12,16
   49624:	52800404 	addi	r10,r10,16
   49628:	493ffc15 	stw	r4,-16(r9)
   4962c:	1bbfef1e 	bne	r3,r14,495ec <__alt_data_end+0xfffd75ec>
   49630:	79000044 	addi	r4,r15,1
   49634:	2008913a 	slli	r4,r4,4
   49638:	328003cc 	andi	r10,r6,15
   4963c:	02c000c4 	movi	r11,3
   49640:	1107883a 	add	r3,r2,r4
   49644:	290b883a 	add	r5,r5,r4
   49648:	5a801e2e 	bgeu	r11,r10,496c4 <memmove+0x154>
   4964c:	1813883a 	mov	r9,r3
   49650:	2811883a 	mov	r8,r5
   49654:	500f883a 	mov	r7,r10
   49658:	41000017 	ldw	r4,0(r8)
   4965c:	4a400104 	addi	r9,r9,4
   49660:	39ffff04 	addi	r7,r7,-4
   49664:	493fff15 	stw	r4,-4(r9)
   49668:	42000104 	addi	r8,r8,4
   4966c:	59fffa36 	bltu	r11,r7,49658 <__alt_data_end+0xfffd7658>
   49670:	513fff04 	addi	r4,r10,-4
   49674:	2008d0ba 	srli	r4,r4,2
   49678:	318000cc 	andi	r6,r6,3
   4967c:	21000044 	addi	r4,r4,1
   49680:	2109883a 	add	r4,r4,r4
   49684:	2109883a 	add	r4,r4,r4
   49688:	1907883a 	add	r3,r3,r4
   4968c:	290b883a 	add	r5,r5,r4
   49690:	30000b26 	beq	r6,zero,496c0 <memmove+0x150>
   49694:	198d883a 	add	r6,r3,r6
   49698:	29c00003 	ldbu	r7,0(r5)
   4969c:	18c00044 	addi	r3,r3,1
   496a0:	29400044 	addi	r5,r5,1
   496a4:	19ffffc5 	stb	r7,-1(r3)
   496a8:	19bffb1e 	bne	r3,r6,49698 <__alt_data_end+0xfffd7698>
   496ac:	f800283a 	ret
   496b0:	1007883a 	mov	r3,r2
   496b4:	003ff606 	br	49690 <__alt_data_end+0xfffd7690>
   496b8:	1007883a 	mov	r3,r2
   496bc:	003ff506 	br	49694 <__alt_data_end+0xfffd7694>
   496c0:	f800283a 	ret
   496c4:	500d883a 	mov	r6,r10
   496c8:	003ff106 	br	49690 <__alt_data_end+0xfffd7690>

000496cc <memset>:
   496cc:	20c000cc 	andi	r3,r4,3
   496d0:	2005883a 	mov	r2,r4
   496d4:	18004426 	beq	r3,zero,497e8 <memset+0x11c>
   496d8:	31ffffc4 	addi	r7,r6,-1
   496dc:	30004026 	beq	r6,zero,497e0 <memset+0x114>
   496e0:	2813883a 	mov	r9,r5
   496e4:	200d883a 	mov	r6,r4
   496e8:	2007883a 	mov	r3,r4
   496ec:	00000406 	br	49700 <memset+0x34>
   496f0:	3a3fffc4 	addi	r8,r7,-1
   496f4:	31800044 	addi	r6,r6,1
   496f8:	38003926 	beq	r7,zero,497e0 <memset+0x114>
   496fc:	400f883a 	mov	r7,r8
   49700:	18c00044 	addi	r3,r3,1
   49704:	32400005 	stb	r9,0(r6)
   49708:	1a0000cc 	andi	r8,r3,3
   4970c:	403ff81e 	bne	r8,zero,496f0 <__alt_data_end+0xfffd76f0>
   49710:	010000c4 	movi	r4,3
   49714:	21c02d2e 	bgeu	r4,r7,497cc <memset+0x100>
   49718:	29003fcc 	andi	r4,r5,255
   4971c:	200c923a 	slli	r6,r4,8
   49720:	3108b03a 	or	r4,r6,r4
   49724:	200c943a 	slli	r6,r4,16
   49728:	218cb03a 	or	r6,r4,r6
   4972c:	010003c4 	movi	r4,15
   49730:	21c0182e 	bgeu	r4,r7,49794 <memset+0xc8>
   49734:	3b3ffc04 	addi	r12,r7,-16
   49738:	6018d13a 	srli	r12,r12,4
   4973c:	1a000104 	addi	r8,r3,4
   49740:	1ac00204 	addi	r11,r3,8
   49744:	6008913a 	slli	r4,r12,4
   49748:	1a800304 	addi	r10,r3,12
   4974c:	1813883a 	mov	r9,r3
   49750:	21000504 	addi	r4,r4,20
   49754:	1909883a 	add	r4,r3,r4
   49758:	49800015 	stw	r6,0(r9)
   4975c:	41800015 	stw	r6,0(r8)
   49760:	59800015 	stw	r6,0(r11)
   49764:	51800015 	stw	r6,0(r10)
   49768:	42000404 	addi	r8,r8,16
   4976c:	4a400404 	addi	r9,r9,16
   49770:	5ac00404 	addi	r11,r11,16
   49774:	52800404 	addi	r10,r10,16
   49778:	413ff71e 	bne	r8,r4,49758 <__alt_data_end+0xfffd7758>
   4977c:	63000044 	addi	r12,r12,1
   49780:	6018913a 	slli	r12,r12,4
   49784:	39c003cc 	andi	r7,r7,15
   49788:	010000c4 	movi	r4,3
   4978c:	1b07883a 	add	r3,r3,r12
   49790:	21c00e2e 	bgeu	r4,r7,497cc <memset+0x100>
   49794:	1813883a 	mov	r9,r3
   49798:	3811883a 	mov	r8,r7
   4979c:	010000c4 	movi	r4,3
   497a0:	49800015 	stw	r6,0(r9)
   497a4:	423fff04 	addi	r8,r8,-4
   497a8:	4a400104 	addi	r9,r9,4
   497ac:	223ffc36 	bltu	r4,r8,497a0 <__alt_data_end+0xfffd77a0>
   497b0:	393fff04 	addi	r4,r7,-4
   497b4:	2008d0ba 	srli	r4,r4,2
   497b8:	39c000cc 	andi	r7,r7,3
   497bc:	21000044 	addi	r4,r4,1
   497c0:	2109883a 	add	r4,r4,r4
   497c4:	2109883a 	add	r4,r4,r4
   497c8:	1907883a 	add	r3,r3,r4
   497cc:	38000526 	beq	r7,zero,497e4 <memset+0x118>
   497d0:	19cf883a 	add	r7,r3,r7
   497d4:	19400005 	stb	r5,0(r3)
   497d8:	18c00044 	addi	r3,r3,1
   497dc:	38fffd1e 	bne	r7,r3,497d4 <__alt_data_end+0xfffd77d4>
   497e0:	f800283a 	ret
   497e4:	f800283a 	ret
   497e8:	2007883a 	mov	r3,r4
   497ec:	300f883a 	mov	r7,r6
   497f0:	003fc706 	br	49710 <__alt_data_end+0xfffd7710>

000497f4 <_Balloc>:
   497f4:	20801317 	ldw	r2,76(r4)
   497f8:	defffc04 	addi	sp,sp,-16
   497fc:	dc400115 	stw	r17,4(sp)
   49800:	dc000015 	stw	r16,0(sp)
   49804:	dfc00315 	stw	ra,12(sp)
   49808:	dc800215 	stw	r18,8(sp)
   4980c:	2023883a 	mov	r17,r4
   49810:	2821883a 	mov	r16,r5
   49814:	10000f26 	beq	r2,zero,49854 <_Balloc+0x60>
   49818:	8407883a 	add	r3,r16,r16
   4981c:	18c7883a 	add	r3,r3,r3
   49820:	10c7883a 	add	r3,r2,r3
   49824:	18800017 	ldw	r2,0(r3)
   49828:	10001126 	beq	r2,zero,49870 <_Balloc+0x7c>
   4982c:	11000017 	ldw	r4,0(r2)
   49830:	19000015 	stw	r4,0(r3)
   49834:	10000415 	stw	zero,16(r2)
   49838:	10000315 	stw	zero,12(r2)
   4983c:	dfc00317 	ldw	ra,12(sp)
   49840:	dc800217 	ldw	r18,8(sp)
   49844:	dc400117 	ldw	r17,4(sp)
   49848:	dc000017 	ldw	r16,0(sp)
   4984c:	dec00404 	addi	sp,sp,16
   49850:	f800283a 	ret
   49854:	01800844 	movi	r6,33
   49858:	01400104 	movi	r5,4
   4985c:	004e0cc0 	call	4e0cc <_calloc_r>
   49860:	88801315 	stw	r2,76(r17)
   49864:	103fec1e 	bne	r2,zero,49818 <__alt_data_end+0xfffd7818>
   49868:	0005883a 	mov	r2,zero
   4986c:	003ff306 	br	4983c <__alt_data_end+0xfffd783c>
   49870:	01400044 	movi	r5,1
   49874:	2c24983a 	sll	r18,r5,r16
   49878:	8809883a 	mov	r4,r17
   4987c:	91800144 	addi	r6,r18,5
   49880:	318d883a 	add	r6,r6,r6
   49884:	318d883a 	add	r6,r6,r6
   49888:	004e0cc0 	call	4e0cc <_calloc_r>
   4988c:	103ff626 	beq	r2,zero,49868 <__alt_data_end+0xfffd7868>
   49890:	14000115 	stw	r16,4(r2)
   49894:	14800215 	stw	r18,8(r2)
   49898:	003fe606 	br	49834 <__alt_data_end+0xfffd7834>

0004989c <_Bfree>:
   4989c:	28000826 	beq	r5,zero,498c0 <_Bfree+0x24>
   498a0:	28c00117 	ldw	r3,4(r5)
   498a4:	20801317 	ldw	r2,76(r4)
   498a8:	18c7883a 	add	r3,r3,r3
   498ac:	18c7883a 	add	r3,r3,r3
   498b0:	10c5883a 	add	r2,r2,r3
   498b4:	10c00017 	ldw	r3,0(r2)
   498b8:	28c00015 	stw	r3,0(r5)
   498bc:	11400015 	stw	r5,0(r2)
   498c0:	f800283a 	ret

000498c4 <__multadd>:
   498c4:	defff704 	addi	sp,sp,-36
   498c8:	dc800215 	stw	r18,8(sp)
   498cc:	2c800417 	ldw	r18,16(r5)
   498d0:	dd800615 	stw	r22,24(sp)
   498d4:	dd400515 	stw	r21,20(sp)
   498d8:	dd000415 	stw	r20,16(sp)
   498dc:	dcc00315 	stw	r19,12(sp)
   498e0:	dc400115 	stw	r17,4(sp)
   498e4:	dc000015 	stw	r16,0(sp)
   498e8:	dfc00815 	stw	ra,32(sp)
   498ec:	ddc00715 	stw	r23,28(sp)
   498f0:	2827883a 	mov	r19,r5
   498f4:	2029883a 	mov	r20,r4
   498f8:	3023883a 	mov	r17,r6
   498fc:	3821883a 	mov	r16,r7
   49900:	2d400504 	addi	r21,r5,20
   49904:	002d883a 	mov	r22,zero
   49908:	adc00017 	ldw	r23,0(r21)
   4990c:	880b883a 	mov	r5,r17
   49910:	ad400104 	addi	r21,r21,4
   49914:	b93fffcc 	andi	r4,r23,65535
   49918:	004146c0 	call	4146c <__mulsi3>
   4991c:	b808d43a 	srli	r4,r23,16
   49920:	880b883a 	mov	r5,r17
   49924:	1421883a 	add	r16,r2,r16
   49928:	004146c0 	call	4146c <__mulsi3>
   4992c:	800ed43a 	srli	r7,r16,16
   49930:	80ffffcc 	andi	r3,r16,65535
   49934:	b5800044 	addi	r22,r22,1
   49938:	11c5883a 	add	r2,r2,r7
   4993c:	100e943a 	slli	r7,r2,16
   49940:	1020d43a 	srli	r16,r2,16
   49944:	38c7883a 	add	r3,r7,r3
   49948:	a8ffff15 	stw	r3,-4(r21)
   4994c:	b4bfee16 	blt	r22,r18,49908 <__alt_data_end+0xfffd7908>
   49950:	80000926 	beq	r16,zero,49978 <__multadd+0xb4>
   49954:	98800217 	ldw	r2,8(r19)
   49958:	9080130e 	bge	r18,r2,499a8 <__multadd+0xe4>
   4995c:	90800144 	addi	r2,r18,5
   49960:	1085883a 	add	r2,r2,r2
   49964:	1085883a 	add	r2,r2,r2
   49968:	9885883a 	add	r2,r19,r2
   4996c:	14000015 	stw	r16,0(r2)
   49970:	94800044 	addi	r18,r18,1
   49974:	9c800415 	stw	r18,16(r19)
   49978:	9805883a 	mov	r2,r19
   4997c:	dfc00817 	ldw	ra,32(sp)
   49980:	ddc00717 	ldw	r23,28(sp)
   49984:	dd800617 	ldw	r22,24(sp)
   49988:	dd400517 	ldw	r21,20(sp)
   4998c:	dd000417 	ldw	r20,16(sp)
   49990:	dcc00317 	ldw	r19,12(sp)
   49994:	dc800217 	ldw	r18,8(sp)
   49998:	dc400117 	ldw	r17,4(sp)
   4999c:	dc000017 	ldw	r16,0(sp)
   499a0:	dec00904 	addi	sp,sp,36
   499a4:	f800283a 	ret
   499a8:	99400117 	ldw	r5,4(r19)
   499ac:	a009883a 	mov	r4,r20
   499b0:	29400044 	addi	r5,r5,1
   499b4:	00497f40 	call	497f4 <_Balloc>
   499b8:	99800417 	ldw	r6,16(r19)
   499bc:	99400304 	addi	r5,r19,12
   499c0:	11000304 	addi	r4,r2,12
   499c4:	31800084 	addi	r6,r6,2
   499c8:	318d883a 	add	r6,r6,r6
   499cc:	318d883a 	add	r6,r6,r6
   499d0:	1023883a 	mov	r17,r2
   499d4:	00494280 	call	49428 <memcpy>
   499d8:	98000a26 	beq	r19,zero,49a04 <__multadd+0x140>
   499dc:	98c00117 	ldw	r3,4(r19)
   499e0:	a0801317 	ldw	r2,76(r20)
   499e4:	18c7883a 	add	r3,r3,r3
   499e8:	18c7883a 	add	r3,r3,r3
   499ec:	10c5883a 	add	r2,r2,r3
   499f0:	10c00017 	ldw	r3,0(r2)
   499f4:	98c00015 	stw	r3,0(r19)
   499f8:	14c00015 	stw	r19,0(r2)
   499fc:	8827883a 	mov	r19,r17
   49a00:	003fd606 	br	4995c <__alt_data_end+0xfffd795c>
   49a04:	8827883a 	mov	r19,r17
   49a08:	003fd406 	br	4995c <__alt_data_end+0xfffd795c>

00049a0c <__s2b>:
   49a0c:	defff904 	addi	sp,sp,-28
   49a10:	dc400115 	stw	r17,4(sp)
   49a14:	dc000015 	stw	r16,0(sp)
   49a18:	2023883a 	mov	r17,r4
   49a1c:	2821883a 	mov	r16,r5
   49a20:	39000204 	addi	r4,r7,8
   49a24:	01400244 	movi	r5,9
   49a28:	dcc00315 	stw	r19,12(sp)
   49a2c:	dc800215 	stw	r18,8(sp)
   49a30:	dfc00615 	stw	ra,24(sp)
   49a34:	dd400515 	stw	r21,20(sp)
   49a38:	dd000415 	stw	r20,16(sp)
   49a3c:	3825883a 	mov	r18,r7
   49a40:	3027883a 	mov	r19,r6
   49a44:	00407400 	call	40740 <__divsi3>
   49a48:	00c00044 	movi	r3,1
   49a4c:	000b883a 	mov	r5,zero
   49a50:	1880030e 	bge	r3,r2,49a60 <__s2b+0x54>
   49a54:	18c7883a 	add	r3,r3,r3
   49a58:	29400044 	addi	r5,r5,1
   49a5c:	18bffd16 	blt	r3,r2,49a54 <__alt_data_end+0xfffd7a54>
   49a60:	8809883a 	mov	r4,r17
   49a64:	00497f40 	call	497f4 <_Balloc>
   49a68:	d8c00717 	ldw	r3,28(sp)
   49a6c:	10c00515 	stw	r3,20(r2)
   49a70:	00c00044 	movi	r3,1
   49a74:	10c00415 	stw	r3,16(r2)
   49a78:	00c00244 	movi	r3,9
   49a7c:	1cc0210e 	bge	r3,r19,49b04 <__s2b+0xf8>
   49a80:	80eb883a 	add	r21,r16,r3
   49a84:	a829883a 	mov	r20,r21
   49a88:	84e1883a 	add	r16,r16,r19
   49a8c:	a1c00007 	ldb	r7,0(r20)
   49a90:	01800284 	movi	r6,10
   49a94:	a5000044 	addi	r20,r20,1
   49a98:	100b883a 	mov	r5,r2
   49a9c:	39fff404 	addi	r7,r7,-48
   49aa0:	8809883a 	mov	r4,r17
   49aa4:	00498c40 	call	498c4 <__multadd>
   49aa8:	a43ff81e 	bne	r20,r16,49a8c <__alt_data_end+0xfffd7a8c>
   49aac:	ace1883a 	add	r16,r21,r19
   49ab0:	843ffe04 	addi	r16,r16,-8
   49ab4:	9c800a0e 	bge	r19,r18,49ae0 <__s2b+0xd4>
   49ab8:	94e5c83a 	sub	r18,r18,r19
   49abc:	84a5883a 	add	r18,r16,r18
   49ac0:	81c00007 	ldb	r7,0(r16)
   49ac4:	01800284 	movi	r6,10
   49ac8:	84000044 	addi	r16,r16,1
   49acc:	100b883a 	mov	r5,r2
   49ad0:	39fff404 	addi	r7,r7,-48
   49ad4:	8809883a 	mov	r4,r17
   49ad8:	00498c40 	call	498c4 <__multadd>
   49adc:	84bff81e 	bne	r16,r18,49ac0 <__alt_data_end+0xfffd7ac0>
   49ae0:	dfc00617 	ldw	ra,24(sp)
   49ae4:	dd400517 	ldw	r21,20(sp)
   49ae8:	dd000417 	ldw	r20,16(sp)
   49aec:	dcc00317 	ldw	r19,12(sp)
   49af0:	dc800217 	ldw	r18,8(sp)
   49af4:	dc400117 	ldw	r17,4(sp)
   49af8:	dc000017 	ldw	r16,0(sp)
   49afc:	dec00704 	addi	sp,sp,28
   49b00:	f800283a 	ret
   49b04:	84000284 	addi	r16,r16,10
   49b08:	1827883a 	mov	r19,r3
   49b0c:	003fe906 	br	49ab4 <__alt_data_end+0xfffd7ab4>

00049b10 <__hi0bits>:
   49b10:	20bfffec 	andhi	r2,r4,65535
   49b14:	1000141e 	bne	r2,zero,49b68 <__hi0bits+0x58>
   49b18:	2008943a 	slli	r4,r4,16
   49b1c:	00800404 	movi	r2,16
   49b20:	20ffc02c 	andhi	r3,r4,65280
   49b24:	1800021e 	bne	r3,zero,49b30 <__hi0bits+0x20>
   49b28:	2008923a 	slli	r4,r4,8
   49b2c:	10800204 	addi	r2,r2,8
   49b30:	20fc002c 	andhi	r3,r4,61440
   49b34:	1800021e 	bne	r3,zero,49b40 <__hi0bits+0x30>
   49b38:	2008913a 	slli	r4,r4,4
   49b3c:	10800104 	addi	r2,r2,4
   49b40:	20f0002c 	andhi	r3,r4,49152
   49b44:	1800031e 	bne	r3,zero,49b54 <__hi0bits+0x44>
   49b48:	2109883a 	add	r4,r4,r4
   49b4c:	10800084 	addi	r2,r2,2
   49b50:	2109883a 	add	r4,r4,r4
   49b54:	20000316 	blt	r4,zero,49b64 <__hi0bits+0x54>
   49b58:	2110002c 	andhi	r4,r4,16384
   49b5c:	2000041e 	bne	r4,zero,49b70 <__hi0bits+0x60>
   49b60:	00800804 	movi	r2,32
   49b64:	f800283a 	ret
   49b68:	0005883a 	mov	r2,zero
   49b6c:	003fec06 	br	49b20 <__alt_data_end+0xfffd7b20>
   49b70:	10800044 	addi	r2,r2,1
   49b74:	f800283a 	ret

00049b78 <__lo0bits>:
   49b78:	20c00017 	ldw	r3,0(r4)
   49b7c:	188001cc 	andi	r2,r3,7
   49b80:	10000826 	beq	r2,zero,49ba4 <__lo0bits+0x2c>
   49b84:	1880004c 	andi	r2,r3,1
   49b88:	1000211e 	bne	r2,zero,49c10 <__lo0bits+0x98>
   49b8c:	1880008c 	andi	r2,r3,2
   49b90:	1000211e 	bne	r2,zero,49c18 <__lo0bits+0xa0>
   49b94:	1806d0ba 	srli	r3,r3,2
   49b98:	00800084 	movi	r2,2
   49b9c:	20c00015 	stw	r3,0(r4)
   49ba0:	f800283a 	ret
   49ba4:	18bfffcc 	andi	r2,r3,65535
   49ba8:	10001326 	beq	r2,zero,49bf8 <__lo0bits+0x80>
   49bac:	0005883a 	mov	r2,zero
   49bb0:	19403fcc 	andi	r5,r3,255
   49bb4:	2800021e 	bne	r5,zero,49bc0 <__lo0bits+0x48>
   49bb8:	1806d23a 	srli	r3,r3,8
   49bbc:	10800204 	addi	r2,r2,8
   49bc0:	194003cc 	andi	r5,r3,15
   49bc4:	2800021e 	bne	r5,zero,49bd0 <__lo0bits+0x58>
   49bc8:	1806d13a 	srli	r3,r3,4
   49bcc:	10800104 	addi	r2,r2,4
   49bd0:	194000cc 	andi	r5,r3,3
   49bd4:	2800021e 	bne	r5,zero,49be0 <__lo0bits+0x68>
   49bd8:	1806d0ba 	srli	r3,r3,2
   49bdc:	10800084 	addi	r2,r2,2
   49be0:	1940004c 	andi	r5,r3,1
   49be4:	2800081e 	bne	r5,zero,49c08 <__lo0bits+0x90>
   49be8:	1806d07a 	srli	r3,r3,1
   49bec:	1800051e 	bne	r3,zero,49c04 <__lo0bits+0x8c>
   49bf0:	00800804 	movi	r2,32
   49bf4:	f800283a 	ret
   49bf8:	1806d43a 	srli	r3,r3,16
   49bfc:	00800404 	movi	r2,16
   49c00:	003feb06 	br	49bb0 <__alt_data_end+0xfffd7bb0>
   49c04:	10800044 	addi	r2,r2,1
   49c08:	20c00015 	stw	r3,0(r4)
   49c0c:	f800283a 	ret
   49c10:	0005883a 	mov	r2,zero
   49c14:	f800283a 	ret
   49c18:	1806d07a 	srli	r3,r3,1
   49c1c:	00800044 	movi	r2,1
   49c20:	20c00015 	stw	r3,0(r4)
   49c24:	f800283a 	ret

00049c28 <__i2b>:
   49c28:	defffd04 	addi	sp,sp,-12
   49c2c:	dc000015 	stw	r16,0(sp)
   49c30:	04000044 	movi	r16,1
   49c34:	dc400115 	stw	r17,4(sp)
   49c38:	2823883a 	mov	r17,r5
   49c3c:	800b883a 	mov	r5,r16
   49c40:	dfc00215 	stw	ra,8(sp)
   49c44:	00497f40 	call	497f4 <_Balloc>
   49c48:	14400515 	stw	r17,20(r2)
   49c4c:	14000415 	stw	r16,16(r2)
   49c50:	dfc00217 	ldw	ra,8(sp)
   49c54:	dc400117 	ldw	r17,4(sp)
   49c58:	dc000017 	ldw	r16,0(sp)
   49c5c:	dec00304 	addi	sp,sp,12
   49c60:	f800283a 	ret

00049c64 <__multiply>:
   49c64:	deffef04 	addi	sp,sp,-68
   49c68:	dc400815 	stw	r17,32(sp)
   49c6c:	dc000715 	stw	r16,28(sp)
   49c70:	34400417 	ldw	r17,16(r6)
   49c74:	2c000417 	ldw	r16,16(r5)
   49c78:	dd800d15 	stw	r22,52(sp)
   49c7c:	dc800915 	stw	r18,36(sp)
   49c80:	dfc01015 	stw	ra,64(sp)
   49c84:	df000f15 	stw	fp,60(sp)
   49c88:	ddc00e15 	stw	r23,56(sp)
   49c8c:	dd400c15 	stw	r21,48(sp)
   49c90:	dd000b15 	stw	r20,44(sp)
   49c94:	dcc00a15 	stw	r19,40(sp)
   49c98:	2825883a 	mov	r18,r5
   49c9c:	302d883a 	mov	r22,r6
   49ca0:	8440050e 	bge	r16,r17,49cb8 <__multiply+0x54>
   49ca4:	8007883a 	mov	r3,r16
   49ca8:	3025883a 	mov	r18,r6
   49cac:	8821883a 	mov	r16,r17
   49cb0:	282d883a 	mov	r22,r5
   49cb4:	1823883a 	mov	r17,r3
   49cb8:	90800217 	ldw	r2,8(r18)
   49cbc:	8447883a 	add	r3,r16,r17
   49cc0:	d8c00215 	stw	r3,8(sp)
   49cc4:	91400117 	ldw	r5,4(r18)
   49cc8:	10c0010e 	bge	r2,r3,49cd0 <__multiply+0x6c>
   49ccc:	29400044 	addi	r5,r5,1
   49cd0:	00497f40 	call	497f4 <_Balloc>
   49cd4:	d8c00217 	ldw	r3,8(sp)
   49cd8:	d8800615 	stw	r2,24(sp)
   49cdc:	18eb883a 	add	r21,r3,r3
   49ce0:	ad6b883a 	add	r21,r21,r21
   49ce4:	10c00504 	addi	r3,r2,20
   49ce8:	1d6b883a 	add	r21,r3,r21
   49cec:	d8c00115 	stw	r3,4(sp)
   49cf0:	dd400315 	stw	r21,12(sp)
   49cf4:	1805883a 	mov	r2,r3
   49cf8:	1d40042e 	bgeu	r3,r21,49d0c <__multiply+0xa8>
   49cfc:	d8c00317 	ldw	r3,12(sp)
   49d00:	10000015 	stw	zero,0(r2)
   49d04:	10800104 	addi	r2,r2,4
   49d08:	10fffc36 	bltu	r2,r3,49cfc <__alt_data_end+0xfffd7cfc>
   49d0c:	8c63883a 	add	r17,r17,r17
   49d10:	b5800504 	addi	r22,r22,20
   49d14:	8c63883a 	add	r17,r17,r17
   49d18:	94800504 	addi	r18,r18,20
   49d1c:	8421883a 	add	r16,r16,r16
   49d20:	b463883a 	add	r17,r22,r17
   49d24:	8421883a 	add	r16,r16,r16
   49d28:	dd800015 	stw	r22,0(sp)
   49d2c:	dc800415 	stw	r18,16(sp)
   49d30:	dc400515 	stw	r17,20(sp)
   49d34:	9429883a 	add	r20,r18,r16
   49d38:	b4404f2e 	bgeu	r22,r17,49e78 <__multiply+0x214>
   49d3c:	d8c00017 	ldw	r3,0(sp)
   49d40:	1c800017 	ldw	r18,0(r3)
   49d44:	947fffcc 	andi	r17,r18,65535
   49d48:	88001e26 	beq	r17,zero,49dc4 <__multiply+0x160>
   49d4c:	dd800117 	ldw	r22,4(sp)
   49d50:	dd400417 	ldw	r21,16(sp)
   49d54:	0027883a 	mov	r19,zero
   49d58:	ac800017 	ldw	r18,0(r21)
   49d5c:	b4000017 	ldw	r16,0(r22)
   49d60:	880b883a 	mov	r5,r17
   49d64:	913fffcc 	andi	r4,r18,65535
   49d68:	004146c0 	call	4146c <__mulsi3>
   49d6c:	9008d43a 	srli	r4,r18,16
   49d70:	84bfffcc 	andi	r18,r16,65535
   49d74:	1485883a 	add	r2,r2,r18
   49d78:	14e5883a 	add	r18,r2,r19
   49d7c:	8020d43a 	srli	r16,r16,16
   49d80:	9026d43a 	srli	r19,r18,16
   49d84:	880b883a 	mov	r5,r17
   49d88:	004146c0 	call	4146c <__mulsi3>
   49d8c:	1405883a 	add	r2,r2,r16
   49d90:	14e1883a 	add	r16,r2,r19
   49d94:	90ffffcc 	andi	r3,r18,65535
   49d98:	8024943a 	slli	r18,r16,16
   49d9c:	ad400104 	addi	r21,r21,4
   49da0:	b005883a 	mov	r2,r22
   49da4:	90c6b03a 	or	r3,r18,r3
   49da8:	b0c00015 	stw	r3,0(r22)
   49dac:	8026d43a 	srli	r19,r16,16
   49db0:	b5800104 	addi	r22,r22,4
   49db4:	ad3fe836 	bltu	r21,r20,49d58 <__alt_data_end+0xfffd7d58>
   49db8:	d8c00017 	ldw	r3,0(sp)
   49dbc:	14c00115 	stw	r19,4(r2)
   49dc0:	1c800017 	ldw	r18,0(r3)
   49dc4:	9024d43a 	srli	r18,r18,16
   49dc8:	90002226 	beq	r18,zero,49e54 <__multiply+0x1f0>
   49dcc:	d8c00117 	ldw	r3,4(sp)
   49dd0:	dd800417 	ldw	r22,16(sp)
   49dd4:	002f883a 	mov	r23,zero
   49dd8:	1f000017 	ldw	fp,0(r3)
   49ddc:	1823883a 	mov	r17,r3
   49de0:	182b883a 	mov	r21,r3
   49de4:	e021883a 	mov	r16,fp
   49de8:	00000106 	br	49df0 <__multiply+0x18c>
   49dec:	982b883a 	mov	r21,r19
   49df0:	b100000b 	ldhu	r4,0(r22)
   49df4:	8020d43a 	srli	r16,r16,16
   49df8:	900b883a 	mov	r5,r18
   49dfc:	004146c0 	call	4146c <__mulsi3>
   49e00:	1405883a 	add	r2,r2,r16
   49e04:	15ef883a 	add	r23,r2,r23
   49e08:	b804943a 	slli	r2,r23,16
   49e0c:	e0ffffcc 	andi	r3,fp,65535
   49e10:	8c400104 	addi	r17,r17,4
   49e14:	10c6b03a 	or	r3,r2,r3
   49e18:	88ffff15 	stw	r3,-4(r17)
   49e1c:	b5800104 	addi	r22,r22,4
   49e20:	b13fff17 	ldw	r4,-4(r22)
   49e24:	acc00104 	addi	r19,r21,4
   49e28:	900b883a 	mov	r5,r18
   49e2c:	2008d43a 	srli	r4,r4,16
   49e30:	9c000017 	ldw	r16,0(r19)
   49e34:	004146c0 	call	4146c <__mulsi3>
   49e38:	b806d43a 	srli	r3,r23,16
   49e3c:	813fffcc 	andi	r4,r16,65535
   49e40:	1105883a 	add	r2,r2,r4
   49e44:	10f9883a 	add	fp,r2,r3
   49e48:	e02ed43a 	srli	r23,fp,16
   49e4c:	b53fe736 	bltu	r22,r20,49dec <__alt_data_end+0xfffd7dec>
   49e50:	af000115 	stw	fp,4(r21)
   49e54:	d8c00017 	ldw	r3,0(sp)
   49e58:	d9000517 	ldw	r4,20(sp)
   49e5c:	18c00104 	addi	r3,r3,4
   49e60:	d8c00015 	stw	r3,0(sp)
   49e64:	d8c00117 	ldw	r3,4(sp)
   49e68:	18c00104 	addi	r3,r3,4
   49e6c:	d8c00115 	stw	r3,4(sp)
   49e70:	d8c00017 	ldw	r3,0(sp)
   49e74:	193fb136 	bltu	r3,r4,49d3c <__alt_data_end+0xfffd7d3c>
   49e78:	d8c00217 	ldw	r3,8(sp)
   49e7c:	00c00c0e 	bge	zero,r3,49eb0 <__multiply+0x24c>
   49e80:	d8c00317 	ldw	r3,12(sp)
   49e84:	18bfff17 	ldw	r2,-4(r3)
   49e88:	1d7fff04 	addi	r21,r3,-4
   49e8c:	10000326 	beq	r2,zero,49e9c <__multiply+0x238>
   49e90:	00000706 	br	49eb0 <__multiply+0x24c>
   49e94:	a8800017 	ldw	r2,0(r21)
   49e98:	1000051e 	bne	r2,zero,49eb0 <__multiply+0x24c>
   49e9c:	d8c00217 	ldw	r3,8(sp)
   49ea0:	ad7fff04 	addi	r21,r21,-4
   49ea4:	18ffffc4 	addi	r3,r3,-1
   49ea8:	d8c00215 	stw	r3,8(sp)
   49eac:	183ff91e 	bne	r3,zero,49e94 <__alt_data_end+0xfffd7e94>
   49eb0:	d8c00617 	ldw	r3,24(sp)
   49eb4:	d9000217 	ldw	r4,8(sp)
   49eb8:	1805883a 	mov	r2,r3
   49ebc:	19000415 	stw	r4,16(r3)
   49ec0:	dfc01017 	ldw	ra,64(sp)
   49ec4:	df000f17 	ldw	fp,60(sp)
   49ec8:	ddc00e17 	ldw	r23,56(sp)
   49ecc:	dd800d17 	ldw	r22,52(sp)
   49ed0:	dd400c17 	ldw	r21,48(sp)
   49ed4:	dd000b17 	ldw	r20,44(sp)
   49ed8:	dcc00a17 	ldw	r19,40(sp)
   49edc:	dc800917 	ldw	r18,36(sp)
   49ee0:	dc400817 	ldw	r17,32(sp)
   49ee4:	dc000717 	ldw	r16,28(sp)
   49ee8:	dec01104 	addi	sp,sp,68
   49eec:	f800283a 	ret

00049ef0 <__pow5mult>:
   49ef0:	defffa04 	addi	sp,sp,-24
   49ef4:	dcc00315 	stw	r19,12(sp)
   49ef8:	dc000015 	stw	r16,0(sp)
   49efc:	dfc00515 	stw	ra,20(sp)
   49f00:	dd000415 	stw	r20,16(sp)
   49f04:	dc800215 	stw	r18,8(sp)
   49f08:	dc400115 	stw	r17,4(sp)
   49f0c:	308000cc 	andi	r2,r6,3
   49f10:	3021883a 	mov	r16,r6
   49f14:	2027883a 	mov	r19,r4
   49f18:	10002f1e 	bne	r2,zero,49fd8 <__pow5mult+0xe8>
   49f1c:	2825883a 	mov	r18,r5
   49f20:	8021d0ba 	srai	r16,r16,2
   49f24:	80001a26 	beq	r16,zero,49f90 <__pow5mult+0xa0>
   49f28:	9c401217 	ldw	r17,72(r19)
   49f2c:	8800061e 	bne	r17,zero,49f48 <__pow5mult+0x58>
   49f30:	00003406 	br	4a004 <__pow5mult+0x114>
   49f34:	8021d07a 	srai	r16,r16,1
   49f38:	80001526 	beq	r16,zero,49f90 <__pow5mult+0xa0>
   49f3c:	88800017 	ldw	r2,0(r17)
   49f40:	10001c26 	beq	r2,zero,49fb4 <__pow5mult+0xc4>
   49f44:	1023883a 	mov	r17,r2
   49f48:	8080004c 	andi	r2,r16,1
   49f4c:	103ff926 	beq	r2,zero,49f34 <__alt_data_end+0xfffd7f34>
   49f50:	880d883a 	mov	r6,r17
   49f54:	900b883a 	mov	r5,r18
   49f58:	9809883a 	mov	r4,r19
   49f5c:	0049c640 	call	49c64 <__multiply>
   49f60:	90001b26 	beq	r18,zero,49fd0 <__pow5mult+0xe0>
   49f64:	91000117 	ldw	r4,4(r18)
   49f68:	98c01317 	ldw	r3,76(r19)
   49f6c:	8021d07a 	srai	r16,r16,1
   49f70:	2109883a 	add	r4,r4,r4
   49f74:	2109883a 	add	r4,r4,r4
   49f78:	1907883a 	add	r3,r3,r4
   49f7c:	19000017 	ldw	r4,0(r3)
   49f80:	91000015 	stw	r4,0(r18)
   49f84:	1c800015 	stw	r18,0(r3)
   49f88:	1025883a 	mov	r18,r2
   49f8c:	803feb1e 	bne	r16,zero,49f3c <__alt_data_end+0xfffd7f3c>
   49f90:	9005883a 	mov	r2,r18
   49f94:	dfc00517 	ldw	ra,20(sp)
   49f98:	dd000417 	ldw	r20,16(sp)
   49f9c:	dcc00317 	ldw	r19,12(sp)
   49fa0:	dc800217 	ldw	r18,8(sp)
   49fa4:	dc400117 	ldw	r17,4(sp)
   49fa8:	dc000017 	ldw	r16,0(sp)
   49fac:	dec00604 	addi	sp,sp,24
   49fb0:	f800283a 	ret
   49fb4:	880d883a 	mov	r6,r17
   49fb8:	880b883a 	mov	r5,r17
   49fbc:	9809883a 	mov	r4,r19
   49fc0:	0049c640 	call	49c64 <__multiply>
   49fc4:	88800015 	stw	r2,0(r17)
   49fc8:	10000015 	stw	zero,0(r2)
   49fcc:	003fdd06 	br	49f44 <__alt_data_end+0xfffd7f44>
   49fd0:	1025883a 	mov	r18,r2
   49fd4:	003fd706 	br	49f34 <__alt_data_end+0xfffd7f34>
   49fd8:	10bfffc4 	addi	r2,r2,-1
   49fdc:	1085883a 	add	r2,r2,r2
   49fe0:	00c00174 	movhi	r3,5
   49fe4:	18da4804 	addi	r3,r3,26912
   49fe8:	1085883a 	add	r2,r2,r2
   49fec:	1885883a 	add	r2,r3,r2
   49ff0:	11800017 	ldw	r6,0(r2)
   49ff4:	000f883a 	mov	r7,zero
   49ff8:	00498c40 	call	498c4 <__multadd>
   49ffc:	1025883a 	mov	r18,r2
   4a000:	003fc706 	br	49f20 <__alt_data_end+0xfffd7f20>
   4a004:	05000044 	movi	r20,1
   4a008:	a00b883a 	mov	r5,r20
   4a00c:	9809883a 	mov	r4,r19
   4a010:	00497f40 	call	497f4 <_Balloc>
   4a014:	1023883a 	mov	r17,r2
   4a018:	00809c44 	movi	r2,625
   4a01c:	88800515 	stw	r2,20(r17)
   4a020:	8d000415 	stw	r20,16(r17)
   4a024:	9c401215 	stw	r17,72(r19)
   4a028:	88000015 	stw	zero,0(r17)
   4a02c:	003fc606 	br	49f48 <__alt_data_end+0xfffd7f48>

0004a030 <__lshift>:
   4a030:	defff904 	addi	sp,sp,-28
   4a034:	dd400515 	stw	r21,20(sp)
   4a038:	dcc00315 	stw	r19,12(sp)
   4a03c:	302bd17a 	srai	r21,r6,5
   4a040:	2cc00417 	ldw	r19,16(r5)
   4a044:	28800217 	ldw	r2,8(r5)
   4a048:	dd000415 	stw	r20,16(sp)
   4a04c:	ace7883a 	add	r19,r21,r19
   4a050:	dc800215 	stw	r18,8(sp)
   4a054:	dc400115 	stw	r17,4(sp)
   4a058:	dc000015 	stw	r16,0(sp)
   4a05c:	dfc00615 	stw	ra,24(sp)
   4a060:	9c000044 	addi	r16,r19,1
   4a064:	2823883a 	mov	r17,r5
   4a068:	3029883a 	mov	r20,r6
   4a06c:	2025883a 	mov	r18,r4
   4a070:	29400117 	ldw	r5,4(r5)
   4a074:	1400030e 	bge	r2,r16,4a084 <__lshift+0x54>
   4a078:	1085883a 	add	r2,r2,r2
   4a07c:	29400044 	addi	r5,r5,1
   4a080:	143ffd16 	blt	r2,r16,4a078 <__alt_data_end+0xfffd8078>
   4a084:	9009883a 	mov	r4,r18
   4a088:	00497f40 	call	497f4 <_Balloc>
   4a08c:	10c00504 	addi	r3,r2,20
   4a090:	0540070e 	bge	zero,r21,4a0b0 <__lshift+0x80>
   4a094:	ad6b883a 	add	r21,r21,r21
   4a098:	ad6b883a 	add	r21,r21,r21
   4a09c:	1809883a 	mov	r4,r3
   4a0a0:	1d47883a 	add	r3,r3,r21
   4a0a4:	20000015 	stw	zero,0(r4)
   4a0a8:	21000104 	addi	r4,r4,4
   4a0ac:	193ffd1e 	bne	r3,r4,4a0a4 <__alt_data_end+0xfffd80a4>
   4a0b0:	8a000417 	ldw	r8,16(r17)
   4a0b4:	89000504 	addi	r4,r17,20
   4a0b8:	a18007cc 	andi	r6,r20,31
   4a0bc:	4211883a 	add	r8,r8,r8
   4a0c0:	4211883a 	add	r8,r8,r8
   4a0c4:	2211883a 	add	r8,r4,r8
   4a0c8:	30002326 	beq	r6,zero,4a158 <__lshift+0x128>
   4a0cc:	02400804 	movi	r9,32
   4a0d0:	4993c83a 	sub	r9,r9,r6
   4a0d4:	000b883a 	mov	r5,zero
   4a0d8:	21c00017 	ldw	r7,0(r4)
   4a0dc:	1815883a 	mov	r10,r3
   4a0e0:	18c00104 	addi	r3,r3,4
   4a0e4:	398e983a 	sll	r7,r7,r6
   4a0e8:	21000104 	addi	r4,r4,4
   4a0ec:	394ab03a 	or	r5,r7,r5
   4a0f0:	197fff15 	stw	r5,-4(r3)
   4a0f4:	217fff17 	ldw	r5,-4(r4)
   4a0f8:	2a4ad83a 	srl	r5,r5,r9
   4a0fc:	223ff636 	bltu	r4,r8,4a0d8 <__alt_data_end+0xfffd80d8>
   4a100:	51400115 	stw	r5,4(r10)
   4a104:	28001a1e 	bne	r5,zero,4a170 <__lshift+0x140>
   4a108:	843fffc4 	addi	r16,r16,-1
   4a10c:	14000415 	stw	r16,16(r2)
   4a110:	88000826 	beq	r17,zero,4a134 <__lshift+0x104>
   4a114:	89000117 	ldw	r4,4(r17)
   4a118:	90c01317 	ldw	r3,76(r18)
   4a11c:	2109883a 	add	r4,r4,r4
   4a120:	2109883a 	add	r4,r4,r4
   4a124:	1907883a 	add	r3,r3,r4
   4a128:	19000017 	ldw	r4,0(r3)
   4a12c:	89000015 	stw	r4,0(r17)
   4a130:	1c400015 	stw	r17,0(r3)
   4a134:	dfc00617 	ldw	ra,24(sp)
   4a138:	dd400517 	ldw	r21,20(sp)
   4a13c:	dd000417 	ldw	r20,16(sp)
   4a140:	dcc00317 	ldw	r19,12(sp)
   4a144:	dc800217 	ldw	r18,8(sp)
   4a148:	dc400117 	ldw	r17,4(sp)
   4a14c:	dc000017 	ldw	r16,0(sp)
   4a150:	dec00704 	addi	sp,sp,28
   4a154:	f800283a 	ret
   4a158:	21400017 	ldw	r5,0(r4)
   4a15c:	18c00104 	addi	r3,r3,4
   4a160:	21000104 	addi	r4,r4,4
   4a164:	197fff15 	stw	r5,-4(r3)
   4a168:	223ffb36 	bltu	r4,r8,4a158 <__alt_data_end+0xfffd8158>
   4a16c:	003fe606 	br	4a108 <__alt_data_end+0xfffd8108>
   4a170:	9c000084 	addi	r16,r19,2
   4a174:	003fe406 	br	4a108 <__alt_data_end+0xfffd8108>

0004a178 <__mcmp>:
   4a178:	20800417 	ldw	r2,16(r4)
   4a17c:	28c00417 	ldw	r3,16(r5)
   4a180:	10c5c83a 	sub	r2,r2,r3
   4a184:	1000111e 	bne	r2,zero,4a1cc <__mcmp+0x54>
   4a188:	18c7883a 	add	r3,r3,r3
   4a18c:	18c7883a 	add	r3,r3,r3
   4a190:	21000504 	addi	r4,r4,20
   4a194:	29400504 	addi	r5,r5,20
   4a198:	20c5883a 	add	r2,r4,r3
   4a19c:	28cb883a 	add	r5,r5,r3
   4a1a0:	00000106 	br	4a1a8 <__mcmp+0x30>
   4a1a4:	20800a2e 	bgeu	r4,r2,4a1d0 <__mcmp+0x58>
   4a1a8:	10bfff04 	addi	r2,r2,-4
   4a1ac:	297fff04 	addi	r5,r5,-4
   4a1b0:	11800017 	ldw	r6,0(r2)
   4a1b4:	28c00017 	ldw	r3,0(r5)
   4a1b8:	30fffa26 	beq	r6,r3,4a1a4 <__alt_data_end+0xfffd81a4>
   4a1bc:	30c00236 	bltu	r6,r3,4a1c8 <__mcmp+0x50>
   4a1c0:	00800044 	movi	r2,1
   4a1c4:	f800283a 	ret
   4a1c8:	00bfffc4 	movi	r2,-1
   4a1cc:	f800283a 	ret
   4a1d0:	0005883a 	mov	r2,zero
   4a1d4:	f800283a 	ret

0004a1d8 <__mdiff>:
   4a1d8:	28c00417 	ldw	r3,16(r5)
   4a1dc:	30800417 	ldw	r2,16(r6)
   4a1e0:	defffa04 	addi	sp,sp,-24
   4a1e4:	dcc00315 	stw	r19,12(sp)
   4a1e8:	dc800215 	stw	r18,8(sp)
   4a1ec:	dfc00515 	stw	ra,20(sp)
   4a1f0:	dd000415 	stw	r20,16(sp)
   4a1f4:	dc400115 	stw	r17,4(sp)
   4a1f8:	dc000015 	stw	r16,0(sp)
   4a1fc:	1887c83a 	sub	r3,r3,r2
   4a200:	2825883a 	mov	r18,r5
   4a204:	3027883a 	mov	r19,r6
   4a208:	1800141e 	bne	r3,zero,4a25c <__mdiff+0x84>
   4a20c:	1085883a 	add	r2,r2,r2
   4a210:	1085883a 	add	r2,r2,r2
   4a214:	2a000504 	addi	r8,r5,20
   4a218:	34000504 	addi	r16,r6,20
   4a21c:	4087883a 	add	r3,r8,r2
   4a220:	8085883a 	add	r2,r16,r2
   4a224:	00000106 	br	4a22c <__mdiff+0x54>
   4a228:	40c0592e 	bgeu	r8,r3,4a390 <__mdiff+0x1b8>
   4a22c:	18ffff04 	addi	r3,r3,-4
   4a230:	10bfff04 	addi	r2,r2,-4
   4a234:	19c00017 	ldw	r7,0(r3)
   4a238:	11400017 	ldw	r5,0(r2)
   4a23c:	397ffa26 	beq	r7,r5,4a228 <__alt_data_end+0xfffd8228>
   4a240:	3940592e 	bgeu	r7,r5,4a3a8 <__mdiff+0x1d0>
   4a244:	9005883a 	mov	r2,r18
   4a248:	4023883a 	mov	r17,r8
   4a24c:	9825883a 	mov	r18,r19
   4a250:	05000044 	movi	r20,1
   4a254:	1027883a 	mov	r19,r2
   4a258:	00000406 	br	4a26c <__mdiff+0x94>
   4a25c:	18005616 	blt	r3,zero,4a3b8 <__mdiff+0x1e0>
   4a260:	34400504 	addi	r17,r6,20
   4a264:	2c000504 	addi	r16,r5,20
   4a268:	0029883a 	mov	r20,zero
   4a26c:	91400117 	ldw	r5,4(r18)
   4a270:	00497f40 	call	497f4 <_Balloc>
   4a274:	92400417 	ldw	r9,16(r18)
   4a278:	9b000417 	ldw	r12,16(r19)
   4a27c:	12c00504 	addi	r11,r2,20
   4a280:	4a51883a 	add	r8,r9,r9
   4a284:	6319883a 	add	r12,r12,r12
   4a288:	4211883a 	add	r8,r8,r8
   4a28c:	6319883a 	add	r12,r12,r12
   4a290:	15000315 	stw	r20,12(r2)
   4a294:	8211883a 	add	r8,r16,r8
   4a298:	8b19883a 	add	r12,r17,r12
   4a29c:	0007883a 	mov	r3,zero
   4a2a0:	81400017 	ldw	r5,0(r16)
   4a2a4:	89c00017 	ldw	r7,0(r17)
   4a2a8:	59800104 	addi	r6,r11,4
   4a2ac:	293fffcc 	andi	r4,r5,65535
   4a2b0:	20c7883a 	add	r3,r4,r3
   4a2b4:	393fffcc 	andi	r4,r7,65535
   4a2b8:	1909c83a 	sub	r4,r3,r4
   4a2bc:	280ad43a 	srli	r5,r5,16
   4a2c0:	380ed43a 	srli	r7,r7,16
   4a2c4:	2007d43a 	srai	r3,r4,16
   4a2c8:	213fffcc 	andi	r4,r4,65535
   4a2cc:	29cbc83a 	sub	r5,r5,r7
   4a2d0:	28c7883a 	add	r3,r5,r3
   4a2d4:	180a943a 	slli	r5,r3,16
   4a2d8:	8c400104 	addi	r17,r17,4
   4a2dc:	84000104 	addi	r16,r16,4
   4a2e0:	2908b03a 	or	r4,r5,r4
   4a2e4:	59000015 	stw	r4,0(r11)
   4a2e8:	1807d43a 	srai	r3,r3,16
   4a2ec:	3015883a 	mov	r10,r6
   4a2f0:	3017883a 	mov	r11,r6
   4a2f4:	8b3fea36 	bltu	r17,r12,4a2a0 <__alt_data_end+0xfffd82a0>
   4a2f8:	8200162e 	bgeu	r16,r8,4a354 <__mdiff+0x17c>
   4a2fc:	8017883a 	mov	r11,r16
   4a300:	59400017 	ldw	r5,0(r11)
   4a304:	31800104 	addi	r6,r6,4
   4a308:	5ac00104 	addi	r11,r11,4
   4a30c:	293fffcc 	andi	r4,r5,65535
   4a310:	20c7883a 	add	r3,r4,r3
   4a314:	280ed43a 	srli	r7,r5,16
   4a318:	180bd43a 	srai	r5,r3,16
   4a31c:	193fffcc 	andi	r4,r3,65535
   4a320:	3947883a 	add	r3,r7,r5
   4a324:	180a943a 	slli	r5,r3,16
   4a328:	1807d43a 	srai	r3,r3,16
   4a32c:	2908b03a 	or	r4,r5,r4
   4a330:	313fff15 	stw	r4,-4(r6)
   4a334:	5a3ff236 	bltu	r11,r8,4a300 <__alt_data_end+0xfffd8300>
   4a338:	0406303a 	nor	r3,zero,r16
   4a33c:	1a07883a 	add	r3,r3,r8
   4a340:	1806d0ba 	srli	r3,r3,2
   4a344:	18c00044 	addi	r3,r3,1
   4a348:	18c7883a 	add	r3,r3,r3
   4a34c:	18c7883a 	add	r3,r3,r3
   4a350:	50d5883a 	add	r10,r10,r3
   4a354:	50ffff04 	addi	r3,r10,-4
   4a358:	2000041e 	bne	r4,zero,4a36c <__mdiff+0x194>
   4a35c:	18ffff04 	addi	r3,r3,-4
   4a360:	19000017 	ldw	r4,0(r3)
   4a364:	4a7fffc4 	addi	r9,r9,-1
   4a368:	203ffc26 	beq	r4,zero,4a35c <__alt_data_end+0xfffd835c>
   4a36c:	12400415 	stw	r9,16(r2)
   4a370:	dfc00517 	ldw	ra,20(sp)
   4a374:	dd000417 	ldw	r20,16(sp)
   4a378:	dcc00317 	ldw	r19,12(sp)
   4a37c:	dc800217 	ldw	r18,8(sp)
   4a380:	dc400117 	ldw	r17,4(sp)
   4a384:	dc000017 	ldw	r16,0(sp)
   4a388:	dec00604 	addi	sp,sp,24
   4a38c:	f800283a 	ret
   4a390:	000b883a 	mov	r5,zero
   4a394:	00497f40 	call	497f4 <_Balloc>
   4a398:	00c00044 	movi	r3,1
   4a39c:	10c00415 	stw	r3,16(r2)
   4a3a0:	10000515 	stw	zero,20(r2)
   4a3a4:	003ff206 	br	4a370 <__alt_data_end+0xfffd8370>
   4a3a8:	8023883a 	mov	r17,r16
   4a3ac:	0029883a 	mov	r20,zero
   4a3b0:	4021883a 	mov	r16,r8
   4a3b4:	003fad06 	br	4a26c <__alt_data_end+0xfffd826c>
   4a3b8:	9005883a 	mov	r2,r18
   4a3bc:	94400504 	addi	r17,r18,20
   4a3c0:	9c000504 	addi	r16,r19,20
   4a3c4:	9825883a 	mov	r18,r19
   4a3c8:	05000044 	movi	r20,1
   4a3cc:	1027883a 	mov	r19,r2
   4a3d0:	003fa606 	br	4a26c <__alt_data_end+0xfffd826c>

0004a3d4 <__ulp>:
   4a3d4:	295ffc2c 	andhi	r5,r5,32752
   4a3d8:	00bf3034 	movhi	r2,64704
   4a3dc:	2887883a 	add	r3,r5,r2
   4a3e0:	00c0020e 	bge	zero,r3,4a3ec <__ulp+0x18>
   4a3e4:	0005883a 	mov	r2,zero
   4a3e8:	f800283a 	ret
   4a3ec:	00c7c83a 	sub	r3,zero,r3
   4a3f0:	1807d53a 	srai	r3,r3,20
   4a3f4:	008004c4 	movi	r2,19
   4a3f8:	10c00b0e 	bge	r2,r3,4a428 <__ulp+0x54>
   4a3fc:	18bffb04 	addi	r2,r3,-20
   4a400:	01000784 	movi	r4,30
   4a404:	0007883a 	mov	r3,zero
   4a408:	20800516 	blt	r4,r2,4a420 <__ulp+0x4c>
   4a40c:	010007c4 	movi	r4,31
   4a410:	2089c83a 	sub	r4,r4,r2
   4a414:	00800044 	movi	r2,1
   4a418:	1104983a 	sll	r2,r2,r4
   4a41c:	f800283a 	ret
   4a420:	00800044 	movi	r2,1
   4a424:	f800283a 	ret
   4a428:	01400234 	movhi	r5,8
   4a42c:	28c7d83a 	sra	r3,r5,r3
   4a430:	0005883a 	mov	r2,zero
   4a434:	f800283a 	ret

0004a438 <__b2d>:
   4a438:	defffa04 	addi	sp,sp,-24
   4a43c:	dc000015 	stw	r16,0(sp)
   4a440:	24000417 	ldw	r16,16(r4)
   4a444:	dc400115 	stw	r17,4(sp)
   4a448:	24400504 	addi	r17,r4,20
   4a44c:	8421883a 	add	r16,r16,r16
   4a450:	8421883a 	add	r16,r16,r16
   4a454:	8c21883a 	add	r16,r17,r16
   4a458:	dc800215 	stw	r18,8(sp)
   4a45c:	84bfff17 	ldw	r18,-4(r16)
   4a460:	dd000415 	stw	r20,16(sp)
   4a464:	dcc00315 	stw	r19,12(sp)
   4a468:	9009883a 	mov	r4,r18
   4a46c:	2829883a 	mov	r20,r5
   4a470:	dfc00515 	stw	ra,20(sp)
   4a474:	0049b100 	call	49b10 <__hi0bits>
   4a478:	00c00804 	movi	r3,32
   4a47c:	1889c83a 	sub	r4,r3,r2
   4a480:	a1000015 	stw	r4,0(r20)
   4a484:	01000284 	movi	r4,10
   4a488:	84ffff04 	addi	r19,r16,-4
   4a48c:	20801216 	blt	r4,r2,4a4d8 <__b2d+0xa0>
   4a490:	018002c4 	movi	r6,11
   4a494:	308dc83a 	sub	r6,r6,r2
   4a498:	9186d83a 	srl	r3,r18,r6
   4a49c:	18cffc34 	orhi	r3,r3,16368
   4a4a0:	8cc0212e 	bgeu	r17,r19,4a528 <__b2d+0xf0>
   4a4a4:	813ffe17 	ldw	r4,-8(r16)
   4a4a8:	218cd83a 	srl	r6,r4,r6
   4a4ac:	10800544 	addi	r2,r2,21
   4a4b0:	9084983a 	sll	r2,r18,r2
   4a4b4:	1184b03a 	or	r2,r2,r6
   4a4b8:	dfc00517 	ldw	ra,20(sp)
   4a4bc:	dd000417 	ldw	r20,16(sp)
   4a4c0:	dcc00317 	ldw	r19,12(sp)
   4a4c4:	dc800217 	ldw	r18,8(sp)
   4a4c8:	dc400117 	ldw	r17,4(sp)
   4a4cc:	dc000017 	ldw	r16,0(sp)
   4a4d0:	dec00604 	addi	sp,sp,24
   4a4d4:	f800283a 	ret
   4a4d8:	8cc00f2e 	bgeu	r17,r19,4a518 <__b2d+0xe0>
   4a4dc:	117ffd44 	addi	r5,r2,-11
   4a4e0:	80bffe17 	ldw	r2,-8(r16)
   4a4e4:	28000e26 	beq	r5,zero,4a520 <__b2d+0xe8>
   4a4e8:	1949c83a 	sub	r4,r3,r5
   4a4ec:	9164983a 	sll	r18,r18,r5
   4a4f0:	1106d83a 	srl	r3,r2,r4
   4a4f4:	81bffe04 	addi	r6,r16,-8
   4a4f8:	948ffc34 	orhi	r18,r18,16368
   4a4fc:	90c6b03a 	or	r3,r18,r3
   4a500:	89800e2e 	bgeu	r17,r6,4a53c <__b2d+0x104>
   4a504:	81bffd17 	ldw	r6,-12(r16)
   4a508:	1144983a 	sll	r2,r2,r5
   4a50c:	310ad83a 	srl	r5,r6,r4
   4a510:	2884b03a 	or	r2,r5,r2
   4a514:	003fe806 	br	4a4b8 <__alt_data_end+0xfffd84b8>
   4a518:	10bffd44 	addi	r2,r2,-11
   4a51c:	1000041e 	bne	r2,zero,4a530 <__b2d+0xf8>
   4a520:	90cffc34 	orhi	r3,r18,16368
   4a524:	003fe406 	br	4a4b8 <__alt_data_end+0xfffd84b8>
   4a528:	000d883a 	mov	r6,zero
   4a52c:	003fdf06 	br	4a4ac <__alt_data_end+0xfffd84ac>
   4a530:	90a4983a 	sll	r18,r18,r2
   4a534:	0005883a 	mov	r2,zero
   4a538:	003ff906 	br	4a520 <__alt_data_end+0xfffd8520>
   4a53c:	1144983a 	sll	r2,r2,r5
   4a540:	003fdd06 	br	4a4b8 <__alt_data_end+0xfffd84b8>

0004a544 <__d2b>:
   4a544:	defff804 	addi	sp,sp,-32
   4a548:	dc000215 	stw	r16,8(sp)
   4a54c:	3021883a 	mov	r16,r6
   4a550:	dc400315 	stw	r17,12(sp)
   4a554:	8022907a 	slli	r17,r16,1
   4a558:	dd000615 	stw	r20,24(sp)
   4a55c:	2829883a 	mov	r20,r5
   4a560:	01400044 	movi	r5,1
   4a564:	dcc00515 	stw	r19,20(sp)
   4a568:	dc800415 	stw	r18,16(sp)
   4a56c:	dfc00715 	stw	ra,28(sp)
   4a570:	3825883a 	mov	r18,r7
   4a574:	8822d57a 	srli	r17,r17,21
   4a578:	00497f40 	call	497f4 <_Balloc>
   4a57c:	1027883a 	mov	r19,r2
   4a580:	00800434 	movhi	r2,16
   4a584:	10bfffc4 	addi	r2,r2,-1
   4a588:	808c703a 	and	r6,r16,r2
   4a58c:	88000126 	beq	r17,zero,4a594 <__d2b+0x50>
   4a590:	31800434 	orhi	r6,r6,16
   4a594:	d9800015 	stw	r6,0(sp)
   4a598:	a0002426 	beq	r20,zero,4a62c <__d2b+0xe8>
   4a59c:	d9000104 	addi	r4,sp,4
   4a5a0:	dd000115 	stw	r20,4(sp)
   4a5a4:	0049b780 	call	49b78 <__lo0bits>
   4a5a8:	d8c00017 	ldw	r3,0(sp)
   4a5ac:	10002f1e 	bne	r2,zero,4a66c <__d2b+0x128>
   4a5b0:	d9000117 	ldw	r4,4(sp)
   4a5b4:	99000515 	stw	r4,20(r19)
   4a5b8:	1821003a 	cmpeq	r16,r3,zero
   4a5bc:	01000084 	movi	r4,2
   4a5c0:	2421c83a 	sub	r16,r4,r16
   4a5c4:	98c00615 	stw	r3,24(r19)
   4a5c8:	9c000415 	stw	r16,16(r19)
   4a5cc:	88001f1e 	bne	r17,zero,4a64c <__d2b+0x108>
   4a5d0:	10bef384 	addi	r2,r2,-1074
   4a5d4:	90800015 	stw	r2,0(r18)
   4a5d8:	00900034 	movhi	r2,16384
   4a5dc:	10bfffc4 	addi	r2,r2,-1
   4a5e0:	8085883a 	add	r2,r16,r2
   4a5e4:	1085883a 	add	r2,r2,r2
   4a5e8:	1085883a 	add	r2,r2,r2
   4a5ec:	9885883a 	add	r2,r19,r2
   4a5f0:	11000517 	ldw	r4,20(r2)
   4a5f4:	8020917a 	slli	r16,r16,5
   4a5f8:	0049b100 	call	49b10 <__hi0bits>
   4a5fc:	d8c00817 	ldw	r3,32(sp)
   4a600:	8085c83a 	sub	r2,r16,r2
   4a604:	18800015 	stw	r2,0(r3)
   4a608:	9805883a 	mov	r2,r19
   4a60c:	dfc00717 	ldw	ra,28(sp)
   4a610:	dd000617 	ldw	r20,24(sp)
   4a614:	dcc00517 	ldw	r19,20(sp)
   4a618:	dc800417 	ldw	r18,16(sp)
   4a61c:	dc400317 	ldw	r17,12(sp)
   4a620:	dc000217 	ldw	r16,8(sp)
   4a624:	dec00804 	addi	sp,sp,32
   4a628:	f800283a 	ret
   4a62c:	d809883a 	mov	r4,sp
   4a630:	0049b780 	call	49b78 <__lo0bits>
   4a634:	d8c00017 	ldw	r3,0(sp)
   4a638:	04000044 	movi	r16,1
   4a63c:	9c000415 	stw	r16,16(r19)
   4a640:	98c00515 	stw	r3,20(r19)
   4a644:	10800804 	addi	r2,r2,32
   4a648:	883fe126 	beq	r17,zero,4a5d0 <__alt_data_end+0xfffd85d0>
   4a64c:	00c00d44 	movi	r3,53
   4a650:	8c7ef344 	addi	r17,r17,-1075
   4a654:	88a3883a 	add	r17,r17,r2
   4a658:	1885c83a 	sub	r2,r3,r2
   4a65c:	d8c00817 	ldw	r3,32(sp)
   4a660:	94400015 	stw	r17,0(r18)
   4a664:	18800015 	stw	r2,0(r3)
   4a668:	003fe706 	br	4a608 <__alt_data_end+0xfffd8608>
   4a66c:	01000804 	movi	r4,32
   4a670:	2089c83a 	sub	r4,r4,r2
   4a674:	1908983a 	sll	r4,r3,r4
   4a678:	d9400117 	ldw	r5,4(sp)
   4a67c:	1886d83a 	srl	r3,r3,r2
   4a680:	2148b03a 	or	r4,r4,r5
   4a684:	99000515 	stw	r4,20(r19)
   4a688:	d8c00015 	stw	r3,0(sp)
   4a68c:	003fca06 	br	4a5b8 <__alt_data_end+0xfffd85b8>

0004a690 <__ratio>:
   4a690:	defff904 	addi	sp,sp,-28
   4a694:	dc400315 	stw	r17,12(sp)
   4a698:	2823883a 	mov	r17,r5
   4a69c:	d9400104 	addi	r5,sp,4
   4a6a0:	dfc00615 	stw	ra,24(sp)
   4a6a4:	dcc00515 	stw	r19,20(sp)
   4a6a8:	dc800415 	stw	r18,16(sp)
   4a6ac:	2027883a 	mov	r19,r4
   4a6b0:	dc000215 	stw	r16,8(sp)
   4a6b4:	004a4380 	call	4a438 <__b2d>
   4a6b8:	d80b883a 	mov	r5,sp
   4a6bc:	8809883a 	mov	r4,r17
   4a6c0:	1025883a 	mov	r18,r2
   4a6c4:	1821883a 	mov	r16,r3
   4a6c8:	004a4380 	call	4a438 <__b2d>
   4a6cc:	8a000417 	ldw	r8,16(r17)
   4a6d0:	99000417 	ldw	r4,16(r19)
   4a6d4:	d9400117 	ldw	r5,4(sp)
   4a6d8:	2209c83a 	sub	r4,r4,r8
   4a6dc:	2010917a 	slli	r8,r4,5
   4a6e0:	d9000017 	ldw	r4,0(sp)
   4a6e4:	2909c83a 	sub	r4,r5,r4
   4a6e8:	4109883a 	add	r4,r8,r4
   4a6ec:	01000e0e 	bge	zero,r4,4a728 <__ratio+0x98>
   4a6f0:	2008953a 	slli	r4,r4,20
   4a6f4:	2421883a 	add	r16,r4,r16
   4a6f8:	100d883a 	mov	r6,r2
   4a6fc:	180f883a 	mov	r7,r3
   4a700:	9009883a 	mov	r4,r18
   4a704:	800b883a 	mov	r5,r16
   4a708:	004fc780 	call	4fc78 <__divdf3>
   4a70c:	dfc00617 	ldw	ra,24(sp)
   4a710:	dcc00517 	ldw	r19,20(sp)
   4a714:	dc800417 	ldw	r18,16(sp)
   4a718:	dc400317 	ldw	r17,12(sp)
   4a71c:	dc000217 	ldw	r16,8(sp)
   4a720:	dec00704 	addi	sp,sp,28
   4a724:	f800283a 	ret
   4a728:	2008953a 	slli	r4,r4,20
   4a72c:	1907c83a 	sub	r3,r3,r4
   4a730:	003ff106 	br	4a6f8 <__alt_data_end+0xfffd86f8>

0004a734 <_mprec_log10>:
   4a734:	defffe04 	addi	sp,sp,-8
   4a738:	dc000015 	stw	r16,0(sp)
   4a73c:	dfc00115 	stw	ra,4(sp)
   4a740:	008005c4 	movi	r2,23
   4a744:	2021883a 	mov	r16,r4
   4a748:	11000d0e 	bge	r2,r4,4a780 <_mprec_log10+0x4c>
   4a74c:	0005883a 	mov	r2,zero
   4a750:	00cffc34 	movhi	r3,16368
   4a754:	843fffc4 	addi	r16,r16,-1
   4a758:	000d883a 	mov	r6,zero
   4a75c:	01d00934 	movhi	r7,16420
   4a760:	1009883a 	mov	r4,r2
   4a764:	180b883a 	mov	r5,r3
   4a768:	00508a00 	call	508a0 <__muldf3>
   4a76c:	803ff91e 	bne	r16,zero,4a754 <__alt_data_end+0xfffd8754>
   4a770:	dfc00117 	ldw	ra,4(sp)
   4a774:	dc000017 	ldw	r16,0(sp)
   4a778:	dec00204 	addi	sp,sp,8
   4a77c:	f800283a 	ret
   4a780:	202090fa 	slli	r16,r4,3
   4a784:	00800174 	movhi	r2,5
   4a788:	109a5f04 	addi	r2,r2,27004
   4a78c:	1421883a 	add	r16,r2,r16
   4a790:	80800017 	ldw	r2,0(r16)
   4a794:	80c00117 	ldw	r3,4(r16)
   4a798:	dfc00117 	ldw	ra,4(sp)
   4a79c:	dc000017 	ldw	r16,0(sp)
   4a7a0:	dec00204 	addi	sp,sp,8
   4a7a4:	f800283a 	ret

0004a7a8 <__copybits>:
   4a7a8:	297fffc4 	addi	r5,r5,-1
   4a7ac:	280fd17a 	srai	r7,r5,5
   4a7b0:	30c00417 	ldw	r3,16(r6)
   4a7b4:	30800504 	addi	r2,r6,20
   4a7b8:	39c00044 	addi	r7,r7,1
   4a7bc:	18c7883a 	add	r3,r3,r3
   4a7c0:	39cf883a 	add	r7,r7,r7
   4a7c4:	18c7883a 	add	r3,r3,r3
   4a7c8:	39cf883a 	add	r7,r7,r7
   4a7cc:	10c7883a 	add	r3,r2,r3
   4a7d0:	21cf883a 	add	r7,r4,r7
   4a7d4:	10c00d2e 	bgeu	r2,r3,4a80c <__copybits+0x64>
   4a7d8:	200b883a 	mov	r5,r4
   4a7dc:	12000017 	ldw	r8,0(r2)
   4a7e0:	29400104 	addi	r5,r5,4
   4a7e4:	10800104 	addi	r2,r2,4
   4a7e8:	2a3fff15 	stw	r8,-4(r5)
   4a7ec:	10fffb36 	bltu	r2,r3,4a7dc <__alt_data_end+0xfffd87dc>
   4a7f0:	1985c83a 	sub	r2,r3,r6
   4a7f4:	10bffac4 	addi	r2,r2,-21
   4a7f8:	1004d0ba 	srli	r2,r2,2
   4a7fc:	10800044 	addi	r2,r2,1
   4a800:	1085883a 	add	r2,r2,r2
   4a804:	1085883a 	add	r2,r2,r2
   4a808:	2089883a 	add	r4,r4,r2
   4a80c:	21c0032e 	bgeu	r4,r7,4a81c <__copybits+0x74>
   4a810:	20000015 	stw	zero,0(r4)
   4a814:	21000104 	addi	r4,r4,4
   4a818:	21fffd36 	bltu	r4,r7,4a810 <__alt_data_end+0xfffd8810>
   4a81c:	f800283a 	ret

0004a820 <__any_on>:
   4a820:	20c00417 	ldw	r3,16(r4)
   4a824:	2805d17a 	srai	r2,r5,5
   4a828:	21000504 	addi	r4,r4,20
   4a82c:	18800d0e 	bge	r3,r2,4a864 <__any_on+0x44>
   4a830:	18c7883a 	add	r3,r3,r3
   4a834:	18c7883a 	add	r3,r3,r3
   4a838:	20c7883a 	add	r3,r4,r3
   4a83c:	20c0192e 	bgeu	r4,r3,4a8a4 <__any_on+0x84>
   4a840:	18bfff17 	ldw	r2,-4(r3)
   4a844:	18ffff04 	addi	r3,r3,-4
   4a848:	1000041e 	bne	r2,zero,4a85c <__any_on+0x3c>
   4a84c:	20c0142e 	bgeu	r4,r3,4a8a0 <__any_on+0x80>
   4a850:	18ffff04 	addi	r3,r3,-4
   4a854:	19400017 	ldw	r5,0(r3)
   4a858:	283ffc26 	beq	r5,zero,4a84c <__alt_data_end+0xfffd884c>
   4a85c:	00800044 	movi	r2,1
   4a860:	f800283a 	ret
   4a864:	10c00a0e 	bge	r2,r3,4a890 <__any_on+0x70>
   4a868:	1085883a 	add	r2,r2,r2
   4a86c:	1085883a 	add	r2,r2,r2
   4a870:	294007cc 	andi	r5,r5,31
   4a874:	2087883a 	add	r3,r4,r2
   4a878:	283ff026 	beq	r5,zero,4a83c <__alt_data_end+0xfffd883c>
   4a87c:	19800017 	ldw	r6,0(r3)
   4a880:	3144d83a 	srl	r2,r6,r5
   4a884:	114a983a 	sll	r5,r2,r5
   4a888:	317ff41e 	bne	r6,r5,4a85c <__alt_data_end+0xfffd885c>
   4a88c:	003feb06 	br	4a83c <__alt_data_end+0xfffd883c>
   4a890:	1085883a 	add	r2,r2,r2
   4a894:	1085883a 	add	r2,r2,r2
   4a898:	2087883a 	add	r3,r4,r2
   4a89c:	003fe706 	br	4a83c <__alt_data_end+0xfffd883c>
   4a8a0:	f800283a 	ret
   4a8a4:	0005883a 	mov	r2,zero
   4a8a8:	f800283a 	ret

0004a8ac <_putc_r>:
   4a8ac:	defffc04 	addi	sp,sp,-16
   4a8b0:	dc000215 	stw	r16,8(sp)
   4a8b4:	dfc00315 	stw	ra,12(sp)
   4a8b8:	2021883a 	mov	r16,r4
   4a8bc:	20000226 	beq	r4,zero,4a8c8 <_putc_r+0x1c>
   4a8c0:	20800e17 	ldw	r2,56(r4)
   4a8c4:	10001b26 	beq	r2,zero,4a934 <_putc_r+0x88>
   4a8c8:	30800217 	ldw	r2,8(r6)
   4a8cc:	10bfffc4 	addi	r2,r2,-1
   4a8d0:	30800215 	stw	r2,8(r6)
   4a8d4:	10000a16 	blt	r2,zero,4a900 <_putc_r+0x54>
   4a8d8:	30800017 	ldw	r2,0(r6)
   4a8dc:	11400005 	stb	r5,0(r2)
   4a8e0:	30800017 	ldw	r2,0(r6)
   4a8e4:	10c00044 	addi	r3,r2,1
   4a8e8:	30c00015 	stw	r3,0(r6)
   4a8ec:	10800003 	ldbu	r2,0(r2)
   4a8f0:	dfc00317 	ldw	ra,12(sp)
   4a8f4:	dc000217 	ldw	r16,8(sp)
   4a8f8:	dec00404 	addi	sp,sp,16
   4a8fc:	f800283a 	ret
   4a900:	30c00617 	ldw	r3,24(r6)
   4a904:	10c00616 	blt	r2,r3,4a920 <_putc_r+0x74>
   4a908:	30800017 	ldw	r2,0(r6)
   4a90c:	00c00284 	movi	r3,10
   4a910:	11400005 	stb	r5,0(r2)
   4a914:	30800017 	ldw	r2,0(r6)
   4a918:	11400003 	ldbu	r5,0(r2)
   4a91c:	28fff11e 	bne	r5,r3,4a8e4 <__alt_data_end+0xfffd88e4>
   4a920:	8009883a 	mov	r4,r16
   4a924:	dfc00317 	ldw	ra,12(sp)
   4a928:	dc000217 	ldw	r16,8(sp)
   4a92c:	dec00404 	addi	sp,sp,16
   4a930:	004dec01 	jmpi	4dec0 <__swbuf_r>
   4a934:	d9400015 	stw	r5,0(sp)
   4a938:	d9800115 	stw	r6,4(sp)
   4a93c:	0047dcc0 	call	47dcc <__sinit>
   4a940:	d9800117 	ldw	r6,4(sp)
   4a944:	d9400017 	ldw	r5,0(sp)
   4a948:	003fdf06 	br	4a8c8 <__alt_data_end+0xfffd88c8>

0004a94c <putc>:
   4a94c:	008001b4 	movhi	r2,6
   4a950:	defffc04 	addi	sp,sp,-16
   4a954:	10a18604 	addi	r2,r2,-31208
   4a958:	dc000115 	stw	r16,4(sp)
   4a95c:	14000017 	ldw	r16,0(r2)
   4a960:	dc400215 	stw	r17,8(sp)
   4a964:	dfc00315 	stw	ra,12(sp)
   4a968:	2023883a 	mov	r17,r4
   4a96c:	80000226 	beq	r16,zero,4a978 <putc+0x2c>
   4a970:	80800e17 	ldw	r2,56(r16)
   4a974:	10001a26 	beq	r2,zero,4a9e0 <putc+0x94>
   4a978:	28800217 	ldw	r2,8(r5)
   4a97c:	10bfffc4 	addi	r2,r2,-1
   4a980:	28800215 	stw	r2,8(r5)
   4a984:	10000b16 	blt	r2,zero,4a9b4 <putc+0x68>
   4a988:	28800017 	ldw	r2,0(r5)
   4a98c:	14400005 	stb	r17,0(r2)
   4a990:	28800017 	ldw	r2,0(r5)
   4a994:	10c00044 	addi	r3,r2,1
   4a998:	28c00015 	stw	r3,0(r5)
   4a99c:	10800003 	ldbu	r2,0(r2)
   4a9a0:	dfc00317 	ldw	ra,12(sp)
   4a9a4:	dc400217 	ldw	r17,8(sp)
   4a9a8:	dc000117 	ldw	r16,4(sp)
   4a9ac:	dec00404 	addi	sp,sp,16
   4a9b0:	f800283a 	ret
   4a9b4:	28c00617 	ldw	r3,24(r5)
   4a9b8:	10c00e16 	blt	r2,r3,4a9f4 <putc+0xa8>
   4a9bc:	28800017 	ldw	r2,0(r5)
   4a9c0:	01000284 	movi	r4,10
   4a9c4:	14400005 	stb	r17,0(r2)
   4a9c8:	28800017 	ldw	r2,0(r5)
   4a9cc:	10c00003 	ldbu	r3,0(r2)
   4a9d0:	193ff01e 	bne	r3,r4,4a994 <__alt_data_end+0xfffd8994>
   4a9d4:	280d883a 	mov	r6,r5
   4a9d8:	180b883a 	mov	r5,r3
   4a9dc:	00000706 	br	4a9fc <putc+0xb0>
   4a9e0:	8009883a 	mov	r4,r16
   4a9e4:	d9400015 	stw	r5,0(sp)
   4a9e8:	0047dcc0 	call	47dcc <__sinit>
   4a9ec:	d9400017 	ldw	r5,0(sp)
   4a9f0:	003fe106 	br	4a978 <__alt_data_end+0xfffd8978>
   4a9f4:	280d883a 	mov	r6,r5
   4a9f8:	880b883a 	mov	r5,r17
   4a9fc:	8009883a 	mov	r4,r16
   4aa00:	dfc00317 	ldw	ra,12(sp)
   4aa04:	dc400217 	ldw	r17,8(sp)
   4aa08:	dc000117 	ldw	r16,4(sp)
   4aa0c:	dec00404 	addi	sp,sp,16
   4aa10:	004dec01 	jmpi	4dec0 <__swbuf_r>

0004aa14 <_realloc_r>:
   4aa14:	defff604 	addi	sp,sp,-40
   4aa18:	dc800215 	stw	r18,8(sp)
   4aa1c:	dfc00915 	stw	ra,36(sp)
   4aa20:	df000815 	stw	fp,32(sp)
   4aa24:	ddc00715 	stw	r23,28(sp)
   4aa28:	dd800615 	stw	r22,24(sp)
   4aa2c:	dd400515 	stw	r21,20(sp)
   4aa30:	dd000415 	stw	r20,16(sp)
   4aa34:	dcc00315 	stw	r19,12(sp)
   4aa38:	dc400115 	stw	r17,4(sp)
   4aa3c:	dc000015 	stw	r16,0(sp)
   4aa40:	3025883a 	mov	r18,r6
   4aa44:	2800b726 	beq	r5,zero,4ad24 <_realloc_r+0x310>
   4aa48:	282b883a 	mov	r21,r5
   4aa4c:	2029883a 	mov	r20,r4
   4aa50:	00521a80 	call	521a8 <__malloc_lock>
   4aa54:	a8bfff17 	ldw	r2,-4(r21)
   4aa58:	043fff04 	movi	r16,-4
   4aa5c:	90c002c4 	addi	r3,r18,11
   4aa60:	01000584 	movi	r4,22
   4aa64:	acfffe04 	addi	r19,r21,-8
   4aa68:	1420703a 	and	r16,r2,r16
   4aa6c:	20c0332e 	bgeu	r4,r3,4ab3c <_realloc_r+0x128>
   4aa70:	047ffe04 	movi	r17,-8
   4aa74:	1c62703a 	and	r17,r3,r17
   4aa78:	8807883a 	mov	r3,r17
   4aa7c:	88005816 	blt	r17,zero,4abe0 <_realloc_r+0x1cc>
   4aa80:	8c805736 	bltu	r17,r18,4abe0 <_realloc_r+0x1cc>
   4aa84:	80c0300e 	bge	r16,r3,4ab48 <_realloc_r+0x134>
   4aa88:	07000174 	movhi	fp,5
   4aa8c:	e71be204 	addi	fp,fp,28552
   4aa90:	e1c00217 	ldw	r7,8(fp)
   4aa94:	9c09883a 	add	r4,r19,r16
   4aa98:	22000117 	ldw	r8,4(r4)
   4aa9c:	21c06326 	beq	r4,r7,4ac2c <_realloc_r+0x218>
   4aaa0:	017fff84 	movi	r5,-2
   4aaa4:	414a703a 	and	r5,r8,r5
   4aaa8:	214b883a 	add	r5,r4,r5
   4aaac:	29800117 	ldw	r6,4(r5)
   4aab0:	3180004c 	andi	r6,r6,1
   4aab4:	30003f26 	beq	r6,zero,4abb4 <_realloc_r+0x1a0>
   4aab8:	1080004c 	andi	r2,r2,1
   4aabc:	10008326 	beq	r2,zero,4accc <_realloc_r+0x2b8>
   4aac0:	900b883a 	mov	r5,r18
   4aac4:	a009883a 	mov	r4,r20
   4aac8:	0048b380 	call	48b38 <_malloc_r>
   4aacc:	1025883a 	mov	r18,r2
   4aad0:	10011e26 	beq	r2,zero,4af4c <_realloc_r+0x538>
   4aad4:	a93fff17 	ldw	r4,-4(r21)
   4aad8:	10fffe04 	addi	r3,r2,-8
   4aadc:	00bfff84 	movi	r2,-2
   4aae0:	2084703a 	and	r2,r4,r2
   4aae4:	9885883a 	add	r2,r19,r2
   4aae8:	1880ee26 	beq	r3,r2,4aea4 <_realloc_r+0x490>
   4aaec:	81bfff04 	addi	r6,r16,-4
   4aaf0:	00800904 	movi	r2,36
   4aaf4:	1180b836 	bltu	r2,r6,4add8 <_realloc_r+0x3c4>
   4aaf8:	00c004c4 	movi	r3,19
   4aafc:	19809636 	bltu	r3,r6,4ad58 <_realloc_r+0x344>
   4ab00:	9005883a 	mov	r2,r18
   4ab04:	a807883a 	mov	r3,r21
   4ab08:	19000017 	ldw	r4,0(r3)
   4ab0c:	11000015 	stw	r4,0(r2)
   4ab10:	19000117 	ldw	r4,4(r3)
   4ab14:	11000115 	stw	r4,4(r2)
   4ab18:	18c00217 	ldw	r3,8(r3)
   4ab1c:	10c00215 	stw	r3,8(r2)
   4ab20:	a80b883a 	mov	r5,r21
   4ab24:	a009883a 	mov	r4,r20
   4ab28:	0047f400 	call	47f40 <_free_r>
   4ab2c:	a009883a 	mov	r4,r20
   4ab30:	00521cc0 	call	521cc <__malloc_unlock>
   4ab34:	9005883a 	mov	r2,r18
   4ab38:	00001206 	br	4ab84 <_realloc_r+0x170>
   4ab3c:	00c00404 	movi	r3,16
   4ab40:	1823883a 	mov	r17,r3
   4ab44:	003fce06 	br	4aa80 <__alt_data_end+0xfffd8a80>
   4ab48:	a825883a 	mov	r18,r21
   4ab4c:	8445c83a 	sub	r2,r16,r17
   4ab50:	00c003c4 	movi	r3,15
   4ab54:	18802636 	bltu	r3,r2,4abf0 <_realloc_r+0x1dc>
   4ab58:	99800117 	ldw	r6,4(r19)
   4ab5c:	9c07883a 	add	r3,r19,r16
   4ab60:	3180004c 	andi	r6,r6,1
   4ab64:	3420b03a 	or	r16,r6,r16
   4ab68:	9c000115 	stw	r16,4(r19)
   4ab6c:	18800117 	ldw	r2,4(r3)
   4ab70:	10800054 	ori	r2,r2,1
   4ab74:	18800115 	stw	r2,4(r3)
   4ab78:	a009883a 	mov	r4,r20
   4ab7c:	00521cc0 	call	521cc <__malloc_unlock>
   4ab80:	9005883a 	mov	r2,r18
   4ab84:	dfc00917 	ldw	ra,36(sp)
   4ab88:	df000817 	ldw	fp,32(sp)
   4ab8c:	ddc00717 	ldw	r23,28(sp)
   4ab90:	dd800617 	ldw	r22,24(sp)
   4ab94:	dd400517 	ldw	r21,20(sp)
   4ab98:	dd000417 	ldw	r20,16(sp)
   4ab9c:	dcc00317 	ldw	r19,12(sp)
   4aba0:	dc800217 	ldw	r18,8(sp)
   4aba4:	dc400117 	ldw	r17,4(sp)
   4aba8:	dc000017 	ldw	r16,0(sp)
   4abac:	dec00a04 	addi	sp,sp,40
   4abb0:	f800283a 	ret
   4abb4:	017fff04 	movi	r5,-4
   4abb8:	414a703a 	and	r5,r8,r5
   4abbc:	814d883a 	add	r6,r16,r5
   4abc0:	30c01f16 	blt	r6,r3,4ac40 <_realloc_r+0x22c>
   4abc4:	20800317 	ldw	r2,12(r4)
   4abc8:	20c00217 	ldw	r3,8(r4)
   4abcc:	a825883a 	mov	r18,r21
   4abd0:	3021883a 	mov	r16,r6
   4abd4:	18800315 	stw	r2,12(r3)
   4abd8:	10c00215 	stw	r3,8(r2)
   4abdc:	003fdb06 	br	4ab4c <__alt_data_end+0xfffd8b4c>
   4abe0:	00800304 	movi	r2,12
   4abe4:	a0800015 	stw	r2,0(r20)
   4abe8:	0005883a 	mov	r2,zero
   4abec:	003fe506 	br	4ab84 <__alt_data_end+0xfffd8b84>
   4abf0:	98c00117 	ldw	r3,4(r19)
   4abf4:	9c4b883a 	add	r5,r19,r17
   4abf8:	11000054 	ori	r4,r2,1
   4abfc:	18c0004c 	andi	r3,r3,1
   4ac00:	1c62b03a 	or	r17,r3,r17
   4ac04:	9c400115 	stw	r17,4(r19)
   4ac08:	29000115 	stw	r4,4(r5)
   4ac0c:	2885883a 	add	r2,r5,r2
   4ac10:	10c00117 	ldw	r3,4(r2)
   4ac14:	29400204 	addi	r5,r5,8
   4ac18:	a009883a 	mov	r4,r20
   4ac1c:	18c00054 	ori	r3,r3,1
   4ac20:	10c00115 	stw	r3,4(r2)
   4ac24:	0047f400 	call	47f40 <_free_r>
   4ac28:	003fd306 	br	4ab78 <__alt_data_end+0xfffd8b78>
   4ac2c:	017fff04 	movi	r5,-4
   4ac30:	414a703a 	and	r5,r8,r5
   4ac34:	89800404 	addi	r6,r17,16
   4ac38:	8151883a 	add	r8,r16,r5
   4ac3c:	4180590e 	bge	r8,r6,4ada4 <_realloc_r+0x390>
   4ac40:	1080004c 	andi	r2,r2,1
   4ac44:	103f9e1e 	bne	r2,zero,4aac0 <__alt_data_end+0xfffd8ac0>
   4ac48:	adbffe17 	ldw	r22,-8(r21)
   4ac4c:	00bfff04 	movi	r2,-4
   4ac50:	9dadc83a 	sub	r22,r19,r22
   4ac54:	b1800117 	ldw	r6,4(r22)
   4ac58:	3084703a 	and	r2,r6,r2
   4ac5c:	20002026 	beq	r4,zero,4ace0 <_realloc_r+0x2cc>
   4ac60:	80af883a 	add	r23,r16,r2
   4ac64:	b96f883a 	add	r23,r23,r5
   4ac68:	21c05f26 	beq	r4,r7,4ade8 <_realloc_r+0x3d4>
   4ac6c:	b8c01c16 	blt	r23,r3,4ace0 <_realloc_r+0x2cc>
   4ac70:	20800317 	ldw	r2,12(r4)
   4ac74:	20c00217 	ldw	r3,8(r4)
   4ac78:	81bfff04 	addi	r6,r16,-4
   4ac7c:	01000904 	movi	r4,36
   4ac80:	18800315 	stw	r2,12(r3)
   4ac84:	10c00215 	stw	r3,8(r2)
   4ac88:	b0c00217 	ldw	r3,8(r22)
   4ac8c:	b0800317 	ldw	r2,12(r22)
   4ac90:	b4800204 	addi	r18,r22,8
   4ac94:	18800315 	stw	r2,12(r3)
   4ac98:	10c00215 	stw	r3,8(r2)
   4ac9c:	21801b36 	bltu	r4,r6,4ad0c <_realloc_r+0x2f8>
   4aca0:	008004c4 	movi	r2,19
   4aca4:	1180352e 	bgeu	r2,r6,4ad7c <_realloc_r+0x368>
   4aca8:	a8800017 	ldw	r2,0(r21)
   4acac:	b0800215 	stw	r2,8(r22)
   4acb0:	a8800117 	ldw	r2,4(r21)
   4acb4:	b0800315 	stw	r2,12(r22)
   4acb8:	008006c4 	movi	r2,27
   4acbc:	11807f36 	bltu	r2,r6,4aebc <_realloc_r+0x4a8>
   4acc0:	b0800404 	addi	r2,r22,16
   4acc4:	ad400204 	addi	r21,r21,8
   4acc8:	00002d06 	br	4ad80 <_realloc_r+0x36c>
   4accc:	adbffe17 	ldw	r22,-8(r21)
   4acd0:	00bfff04 	movi	r2,-4
   4acd4:	9dadc83a 	sub	r22,r19,r22
   4acd8:	b1000117 	ldw	r4,4(r22)
   4acdc:	2084703a 	and	r2,r4,r2
   4ace0:	b03f7726 	beq	r22,zero,4aac0 <__alt_data_end+0xfffd8ac0>
   4ace4:	80af883a 	add	r23,r16,r2
   4ace8:	b8ff7516 	blt	r23,r3,4aac0 <__alt_data_end+0xfffd8ac0>
   4acec:	b0800317 	ldw	r2,12(r22)
   4acf0:	b0c00217 	ldw	r3,8(r22)
   4acf4:	81bfff04 	addi	r6,r16,-4
   4acf8:	01000904 	movi	r4,36
   4acfc:	18800315 	stw	r2,12(r3)
   4ad00:	10c00215 	stw	r3,8(r2)
   4ad04:	b4800204 	addi	r18,r22,8
   4ad08:	21bfe52e 	bgeu	r4,r6,4aca0 <__alt_data_end+0xfffd8ca0>
   4ad0c:	a80b883a 	mov	r5,r21
   4ad10:	9009883a 	mov	r4,r18
   4ad14:	00495700 	call	49570 <memmove>
   4ad18:	b821883a 	mov	r16,r23
   4ad1c:	b027883a 	mov	r19,r22
   4ad20:	003f8a06 	br	4ab4c <__alt_data_end+0xfffd8b4c>
   4ad24:	300b883a 	mov	r5,r6
   4ad28:	dfc00917 	ldw	ra,36(sp)
   4ad2c:	df000817 	ldw	fp,32(sp)
   4ad30:	ddc00717 	ldw	r23,28(sp)
   4ad34:	dd800617 	ldw	r22,24(sp)
   4ad38:	dd400517 	ldw	r21,20(sp)
   4ad3c:	dd000417 	ldw	r20,16(sp)
   4ad40:	dcc00317 	ldw	r19,12(sp)
   4ad44:	dc800217 	ldw	r18,8(sp)
   4ad48:	dc400117 	ldw	r17,4(sp)
   4ad4c:	dc000017 	ldw	r16,0(sp)
   4ad50:	dec00a04 	addi	sp,sp,40
   4ad54:	0048b381 	jmpi	48b38 <_malloc_r>
   4ad58:	a8c00017 	ldw	r3,0(r21)
   4ad5c:	90c00015 	stw	r3,0(r18)
   4ad60:	a8c00117 	ldw	r3,4(r21)
   4ad64:	90c00115 	stw	r3,4(r18)
   4ad68:	00c006c4 	movi	r3,27
   4ad6c:	19804536 	bltu	r3,r6,4ae84 <_realloc_r+0x470>
   4ad70:	90800204 	addi	r2,r18,8
   4ad74:	a8c00204 	addi	r3,r21,8
   4ad78:	003f6306 	br	4ab08 <__alt_data_end+0xfffd8b08>
   4ad7c:	9005883a 	mov	r2,r18
   4ad80:	a8c00017 	ldw	r3,0(r21)
   4ad84:	b821883a 	mov	r16,r23
   4ad88:	b027883a 	mov	r19,r22
   4ad8c:	10c00015 	stw	r3,0(r2)
   4ad90:	a8c00117 	ldw	r3,4(r21)
   4ad94:	10c00115 	stw	r3,4(r2)
   4ad98:	a8c00217 	ldw	r3,8(r21)
   4ad9c:	10c00215 	stw	r3,8(r2)
   4ada0:	003f6a06 	br	4ab4c <__alt_data_end+0xfffd8b4c>
   4ada4:	9c67883a 	add	r19,r19,r17
   4ada8:	4445c83a 	sub	r2,r8,r17
   4adac:	e4c00215 	stw	r19,8(fp)
   4adb0:	10800054 	ori	r2,r2,1
   4adb4:	98800115 	stw	r2,4(r19)
   4adb8:	a8bfff17 	ldw	r2,-4(r21)
   4adbc:	a009883a 	mov	r4,r20
   4adc0:	1080004c 	andi	r2,r2,1
   4adc4:	1462b03a 	or	r17,r2,r17
   4adc8:	ac7fff15 	stw	r17,-4(r21)
   4adcc:	00521cc0 	call	521cc <__malloc_unlock>
   4add0:	a805883a 	mov	r2,r21
   4add4:	003f6b06 	br	4ab84 <__alt_data_end+0xfffd8b84>
   4add8:	a80b883a 	mov	r5,r21
   4addc:	9009883a 	mov	r4,r18
   4ade0:	00495700 	call	49570 <memmove>
   4ade4:	003f4e06 	br	4ab20 <__alt_data_end+0xfffd8b20>
   4ade8:	89000404 	addi	r4,r17,16
   4adec:	b93fbc16 	blt	r23,r4,4ace0 <__alt_data_end+0xfffd8ce0>
   4adf0:	b0800317 	ldw	r2,12(r22)
   4adf4:	b0c00217 	ldw	r3,8(r22)
   4adf8:	81bfff04 	addi	r6,r16,-4
   4adfc:	01000904 	movi	r4,36
   4ae00:	18800315 	stw	r2,12(r3)
   4ae04:	10c00215 	stw	r3,8(r2)
   4ae08:	b4800204 	addi	r18,r22,8
   4ae0c:	21804336 	bltu	r4,r6,4af1c <_realloc_r+0x508>
   4ae10:	008004c4 	movi	r2,19
   4ae14:	11803f2e 	bgeu	r2,r6,4af14 <_realloc_r+0x500>
   4ae18:	a8800017 	ldw	r2,0(r21)
   4ae1c:	b0800215 	stw	r2,8(r22)
   4ae20:	a8800117 	ldw	r2,4(r21)
   4ae24:	b0800315 	stw	r2,12(r22)
   4ae28:	008006c4 	movi	r2,27
   4ae2c:	11803f36 	bltu	r2,r6,4af2c <_realloc_r+0x518>
   4ae30:	b0800404 	addi	r2,r22,16
   4ae34:	ad400204 	addi	r21,r21,8
   4ae38:	a8c00017 	ldw	r3,0(r21)
   4ae3c:	10c00015 	stw	r3,0(r2)
   4ae40:	a8c00117 	ldw	r3,4(r21)
   4ae44:	10c00115 	stw	r3,4(r2)
   4ae48:	a8c00217 	ldw	r3,8(r21)
   4ae4c:	10c00215 	stw	r3,8(r2)
   4ae50:	b447883a 	add	r3,r22,r17
   4ae54:	bc45c83a 	sub	r2,r23,r17
   4ae58:	e0c00215 	stw	r3,8(fp)
   4ae5c:	10800054 	ori	r2,r2,1
   4ae60:	18800115 	stw	r2,4(r3)
   4ae64:	b0800117 	ldw	r2,4(r22)
   4ae68:	a009883a 	mov	r4,r20
   4ae6c:	1080004c 	andi	r2,r2,1
   4ae70:	1462b03a 	or	r17,r2,r17
   4ae74:	b4400115 	stw	r17,4(r22)
   4ae78:	00521cc0 	call	521cc <__malloc_unlock>
   4ae7c:	9005883a 	mov	r2,r18
   4ae80:	003f4006 	br	4ab84 <__alt_data_end+0xfffd8b84>
   4ae84:	a8c00217 	ldw	r3,8(r21)
   4ae88:	90c00215 	stw	r3,8(r18)
   4ae8c:	a8c00317 	ldw	r3,12(r21)
   4ae90:	90c00315 	stw	r3,12(r18)
   4ae94:	30801126 	beq	r6,r2,4aedc <_realloc_r+0x4c8>
   4ae98:	90800404 	addi	r2,r18,16
   4ae9c:	a8c00404 	addi	r3,r21,16
   4aea0:	003f1906 	br	4ab08 <__alt_data_end+0xfffd8b08>
   4aea4:	90ffff17 	ldw	r3,-4(r18)
   4aea8:	00bfff04 	movi	r2,-4
   4aeac:	a825883a 	mov	r18,r21
   4aeb0:	1884703a 	and	r2,r3,r2
   4aeb4:	80a1883a 	add	r16,r16,r2
   4aeb8:	003f2406 	br	4ab4c <__alt_data_end+0xfffd8b4c>
   4aebc:	a8800217 	ldw	r2,8(r21)
   4aec0:	b0800415 	stw	r2,16(r22)
   4aec4:	a8800317 	ldw	r2,12(r21)
   4aec8:	b0800515 	stw	r2,20(r22)
   4aecc:	31000a26 	beq	r6,r4,4aef8 <_realloc_r+0x4e4>
   4aed0:	b0800604 	addi	r2,r22,24
   4aed4:	ad400404 	addi	r21,r21,16
   4aed8:	003fa906 	br	4ad80 <__alt_data_end+0xfffd8d80>
   4aedc:	a9000417 	ldw	r4,16(r21)
   4aee0:	90800604 	addi	r2,r18,24
   4aee4:	a8c00604 	addi	r3,r21,24
   4aee8:	91000415 	stw	r4,16(r18)
   4aeec:	a9000517 	ldw	r4,20(r21)
   4aef0:	91000515 	stw	r4,20(r18)
   4aef4:	003f0406 	br	4ab08 <__alt_data_end+0xfffd8b08>
   4aef8:	a8c00417 	ldw	r3,16(r21)
   4aefc:	ad400604 	addi	r21,r21,24
   4af00:	b0800804 	addi	r2,r22,32
   4af04:	b0c00615 	stw	r3,24(r22)
   4af08:	a8ffff17 	ldw	r3,-4(r21)
   4af0c:	b0c00715 	stw	r3,28(r22)
   4af10:	003f9b06 	br	4ad80 <__alt_data_end+0xfffd8d80>
   4af14:	9005883a 	mov	r2,r18
   4af18:	003fc706 	br	4ae38 <__alt_data_end+0xfffd8e38>
   4af1c:	a80b883a 	mov	r5,r21
   4af20:	9009883a 	mov	r4,r18
   4af24:	00495700 	call	49570 <memmove>
   4af28:	003fc906 	br	4ae50 <__alt_data_end+0xfffd8e50>
   4af2c:	a8800217 	ldw	r2,8(r21)
   4af30:	b0800415 	stw	r2,16(r22)
   4af34:	a8800317 	ldw	r2,12(r21)
   4af38:	b0800515 	stw	r2,20(r22)
   4af3c:	31000726 	beq	r6,r4,4af5c <_realloc_r+0x548>
   4af40:	b0800604 	addi	r2,r22,24
   4af44:	ad400404 	addi	r21,r21,16
   4af48:	003fbb06 	br	4ae38 <__alt_data_end+0xfffd8e38>
   4af4c:	a009883a 	mov	r4,r20
   4af50:	00521cc0 	call	521cc <__malloc_unlock>
   4af54:	0005883a 	mov	r2,zero
   4af58:	003f0a06 	br	4ab84 <__alt_data_end+0xfffd8b84>
   4af5c:	a8c00417 	ldw	r3,16(r21)
   4af60:	ad400604 	addi	r21,r21,24
   4af64:	b0800804 	addi	r2,r22,32
   4af68:	b0c00615 	stw	r3,24(r22)
   4af6c:	a8ffff17 	ldw	r3,-4(r21)
   4af70:	b0c00715 	stw	r3,28(r22)
   4af74:	003fb006 	br	4ae38 <__alt_data_end+0xfffd8e38>

0004af78 <__fpclassifyd>:
   4af78:	00a00034 	movhi	r2,32768
   4af7c:	10bfffc4 	addi	r2,r2,-1
   4af80:	2884703a 	and	r2,r5,r2
   4af84:	10000726 	beq	r2,zero,4afa4 <__fpclassifyd+0x2c>
   4af88:	00fffc34 	movhi	r3,65520
   4af8c:	019ff834 	movhi	r6,32736
   4af90:	28c7883a 	add	r3,r5,r3
   4af94:	31bfffc4 	addi	r6,r6,-1
   4af98:	30c00536 	bltu	r6,r3,4afb0 <__fpclassifyd+0x38>
   4af9c:	00800104 	movi	r2,4
   4afa0:	f800283a 	ret
   4afa4:	2000021e 	bne	r4,zero,4afb0 <__fpclassifyd+0x38>
   4afa8:	00800084 	movi	r2,2
   4afac:	f800283a 	ret
   4afb0:	00dffc34 	movhi	r3,32752
   4afb4:	019ff834 	movhi	r6,32736
   4afb8:	28cb883a 	add	r5,r5,r3
   4afbc:	31bfffc4 	addi	r6,r6,-1
   4afc0:	317ff62e 	bgeu	r6,r5,4af9c <__alt_data_end+0xfffd8f9c>
   4afc4:	01400434 	movhi	r5,16
   4afc8:	297fffc4 	addi	r5,r5,-1
   4afcc:	28800236 	bltu	r5,r2,4afd8 <__fpclassifyd+0x60>
   4afd0:	008000c4 	movi	r2,3
   4afd4:	f800283a 	ret
   4afd8:	10c00226 	beq	r2,r3,4afe4 <__fpclassifyd+0x6c>
   4afdc:	0005883a 	mov	r2,zero
   4afe0:	f800283a 	ret
   4afe4:	2005003a 	cmpeq	r2,r4,zero
   4afe8:	f800283a 	ret

0004afec <_sbrk_r>:
   4afec:	defffd04 	addi	sp,sp,-12
   4aff0:	dc000015 	stw	r16,0(sp)
   4aff4:	040001b4 	movhi	r16,6
   4aff8:	dc400115 	stw	r17,4(sp)
   4affc:	84288204 	addi	r16,r16,-24056
   4b000:	2023883a 	mov	r17,r4
   4b004:	2809883a 	mov	r4,r5
   4b008:	dfc00215 	stw	ra,8(sp)
   4b00c:	80000015 	stw	zero,0(r16)
   4b010:	00523b40 	call	523b4 <sbrk>
   4b014:	00ffffc4 	movi	r3,-1
   4b018:	10c00526 	beq	r2,r3,4b030 <_sbrk_r+0x44>
   4b01c:	dfc00217 	ldw	ra,8(sp)
   4b020:	dc400117 	ldw	r17,4(sp)
   4b024:	dc000017 	ldw	r16,0(sp)
   4b028:	dec00304 	addi	sp,sp,12
   4b02c:	f800283a 	ret
   4b030:	80c00017 	ldw	r3,0(r16)
   4b034:	183ff926 	beq	r3,zero,4b01c <__alt_data_end+0xfffd901c>
   4b038:	88c00015 	stw	r3,0(r17)
   4b03c:	003ff706 	br	4b01c <__alt_data_end+0xfffd901c>

0004b040 <__sread>:
   4b040:	defffe04 	addi	sp,sp,-8
   4b044:	dc000015 	stw	r16,0(sp)
   4b048:	2821883a 	mov	r16,r5
   4b04c:	2940038f 	ldh	r5,14(r5)
   4b050:	dfc00115 	stw	ra,4(sp)
   4b054:	004e5c40 	call	4e5c4 <_read_r>
   4b058:	10000716 	blt	r2,zero,4b078 <__sread+0x38>
   4b05c:	80c01417 	ldw	r3,80(r16)
   4b060:	1887883a 	add	r3,r3,r2
   4b064:	80c01415 	stw	r3,80(r16)
   4b068:	dfc00117 	ldw	ra,4(sp)
   4b06c:	dc000017 	ldw	r16,0(sp)
   4b070:	dec00204 	addi	sp,sp,8
   4b074:	f800283a 	ret
   4b078:	80c0030b 	ldhu	r3,12(r16)
   4b07c:	18fbffcc 	andi	r3,r3,61439
   4b080:	80c0030d 	sth	r3,12(r16)
   4b084:	dfc00117 	ldw	ra,4(sp)
   4b088:	dc000017 	ldw	r16,0(sp)
   4b08c:	dec00204 	addi	sp,sp,8
   4b090:	f800283a 	ret

0004b094 <__seofread>:
   4b094:	0005883a 	mov	r2,zero
   4b098:	f800283a 	ret

0004b09c <__swrite>:
   4b09c:	2880030b 	ldhu	r2,12(r5)
   4b0a0:	defffb04 	addi	sp,sp,-20
   4b0a4:	dcc00315 	stw	r19,12(sp)
   4b0a8:	dc800215 	stw	r18,8(sp)
   4b0ac:	dc400115 	stw	r17,4(sp)
   4b0b0:	dc000015 	stw	r16,0(sp)
   4b0b4:	dfc00415 	stw	ra,16(sp)
   4b0b8:	10c0400c 	andi	r3,r2,256
   4b0bc:	2821883a 	mov	r16,r5
   4b0c0:	2023883a 	mov	r17,r4
   4b0c4:	3025883a 	mov	r18,r6
   4b0c8:	3827883a 	mov	r19,r7
   4b0cc:	18000526 	beq	r3,zero,4b0e4 <__swrite+0x48>
   4b0d0:	2940038f 	ldh	r5,14(r5)
   4b0d4:	01c00084 	movi	r7,2
   4b0d8:	000d883a 	mov	r6,zero
   4b0dc:	004e5640 	call	4e564 <_lseek_r>
   4b0e0:	8080030b 	ldhu	r2,12(r16)
   4b0e4:	8140038f 	ldh	r5,14(r16)
   4b0e8:	10bbffcc 	andi	r2,r2,61439
   4b0ec:	980f883a 	mov	r7,r19
   4b0f0:	900d883a 	mov	r6,r18
   4b0f4:	8809883a 	mov	r4,r17
   4b0f8:	8080030d 	sth	r2,12(r16)
   4b0fc:	dfc00417 	ldw	ra,16(sp)
   4b100:	dcc00317 	ldw	r19,12(sp)
   4b104:	dc800217 	ldw	r18,8(sp)
   4b108:	dc400117 	ldw	r17,4(sp)
   4b10c:	dc000017 	ldw	r16,0(sp)
   4b110:	dec00504 	addi	sp,sp,20
   4b114:	004e0181 	jmpi	4e018 <_write_r>

0004b118 <__sseek>:
   4b118:	defffe04 	addi	sp,sp,-8
   4b11c:	dc000015 	stw	r16,0(sp)
   4b120:	2821883a 	mov	r16,r5
   4b124:	2940038f 	ldh	r5,14(r5)
   4b128:	dfc00115 	stw	ra,4(sp)
   4b12c:	004e5640 	call	4e564 <_lseek_r>
   4b130:	00ffffc4 	movi	r3,-1
   4b134:	10c00826 	beq	r2,r3,4b158 <__sseek+0x40>
   4b138:	80c0030b 	ldhu	r3,12(r16)
   4b13c:	80801415 	stw	r2,80(r16)
   4b140:	18c40014 	ori	r3,r3,4096
   4b144:	80c0030d 	sth	r3,12(r16)
   4b148:	dfc00117 	ldw	ra,4(sp)
   4b14c:	dc000017 	ldw	r16,0(sp)
   4b150:	dec00204 	addi	sp,sp,8
   4b154:	f800283a 	ret
   4b158:	80c0030b 	ldhu	r3,12(r16)
   4b15c:	18fbffcc 	andi	r3,r3,61439
   4b160:	80c0030d 	sth	r3,12(r16)
   4b164:	dfc00117 	ldw	ra,4(sp)
   4b168:	dc000017 	ldw	r16,0(sp)
   4b16c:	dec00204 	addi	sp,sp,8
   4b170:	f800283a 	ret

0004b174 <__sclose>:
   4b174:	2940038f 	ldh	r5,14(r5)
   4b178:	004e0781 	jmpi	4e078 <_close_r>

0004b17c <strcmp>:
   4b17c:	2144b03a 	or	r2,r4,r5
   4b180:	108000cc 	andi	r2,r2,3
   4b184:	1000171e 	bne	r2,zero,4b1e4 <strcmp+0x68>
   4b188:	20800017 	ldw	r2,0(r4)
   4b18c:	28c00017 	ldw	r3,0(r5)
   4b190:	10c0141e 	bne	r2,r3,4b1e4 <strcmp+0x68>
   4b194:	027fbff4 	movhi	r9,65279
   4b198:	4a7fbfc4 	addi	r9,r9,-257
   4b19c:	0086303a 	nor	r3,zero,r2
   4b1a0:	02202074 	movhi	r8,32897
   4b1a4:	1245883a 	add	r2,r2,r9
   4b1a8:	42202004 	addi	r8,r8,-32640
   4b1ac:	10c4703a 	and	r2,r2,r3
   4b1b0:	1204703a 	and	r2,r2,r8
   4b1b4:	10000226 	beq	r2,zero,4b1c0 <strcmp+0x44>
   4b1b8:	00002306 	br	4b248 <strcmp+0xcc>
   4b1bc:	1000221e 	bne	r2,zero,4b248 <strcmp+0xcc>
   4b1c0:	21000104 	addi	r4,r4,4
   4b1c4:	20c00017 	ldw	r3,0(r4)
   4b1c8:	29400104 	addi	r5,r5,4
   4b1cc:	29800017 	ldw	r6,0(r5)
   4b1d0:	1a4f883a 	add	r7,r3,r9
   4b1d4:	00c4303a 	nor	r2,zero,r3
   4b1d8:	3884703a 	and	r2,r7,r2
   4b1dc:	1204703a 	and	r2,r2,r8
   4b1e0:	19bff626 	beq	r3,r6,4b1bc <__alt_data_end+0xfffd91bc>
   4b1e4:	20800003 	ldbu	r2,0(r4)
   4b1e8:	10c03fcc 	andi	r3,r2,255
   4b1ec:	18c0201c 	xori	r3,r3,128
   4b1f0:	18ffe004 	addi	r3,r3,-128
   4b1f4:	18000c26 	beq	r3,zero,4b228 <strcmp+0xac>
   4b1f8:	29800007 	ldb	r6,0(r5)
   4b1fc:	19800326 	beq	r3,r6,4b20c <strcmp+0x90>
   4b200:	00001306 	br	4b250 <strcmp+0xd4>
   4b204:	29800007 	ldb	r6,0(r5)
   4b208:	11800b1e 	bne	r2,r6,4b238 <strcmp+0xbc>
   4b20c:	21000044 	addi	r4,r4,1
   4b210:	20c00003 	ldbu	r3,0(r4)
   4b214:	29400044 	addi	r5,r5,1
   4b218:	18803fcc 	andi	r2,r3,255
   4b21c:	1080201c 	xori	r2,r2,128
   4b220:	10bfe004 	addi	r2,r2,-128
   4b224:	103ff71e 	bne	r2,zero,4b204 <__alt_data_end+0xfffd9204>
   4b228:	0007883a 	mov	r3,zero
   4b22c:	28800003 	ldbu	r2,0(r5)
   4b230:	1885c83a 	sub	r2,r3,r2
   4b234:	f800283a 	ret
   4b238:	28800003 	ldbu	r2,0(r5)
   4b23c:	18c03fcc 	andi	r3,r3,255
   4b240:	1885c83a 	sub	r2,r3,r2
   4b244:	f800283a 	ret
   4b248:	0005883a 	mov	r2,zero
   4b24c:	f800283a 	ret
   4b250:	10c03fcc 	andi	r3,r2,255
   4b254:	003ff506 	br	4b22c <__alt_data_end+0xfffd922c>

0004b258 <__ssprint_r>:
   4b258:	30800217 	ldw	r2,8(r6)
   4b25c:	defff604 	addi	sp,sp,-40
   4b260:	dc800215 	stw	r18,8(sp)
   4b264:	dfc00915 	stw	ra,36(sp)
   4b268:	df000815 	stw	fp,32(sp)
   4b26c:	ddc00715 	stw	r23,28(sp)
   4b270:	dd800615 	stw	r22,24(sp)
   4b274:	dd400515 	stw	r21,20(sp)
   4b278:	dd000415 	stw	r20,16(sp)
   4b27c:	dcc00315 	stw	r19,12(sp)
   4b280:	dc400115 	stw	r17,4(sp)
   4b284:	dc000015 	stw	r16,0(sp)
   4b288:	3025883a 	mov	r18,r6
   4b28c:	10005826 	beq	r2,zero,4b3f0 <__ssprint_r+0x198>
   4b290:	2027883a 	mov	r19,r4
   4b294:	35c00017 	ldw	r23,0(r6)
   4b298:	29000017 	ldw	r4,0(r5)
   4b29c:	28800217 	ldw	r2,8(r5)
   4b2a0:	2823883a 	mov	r17,r5
   4b2a4:	0039883a 	mov	fp,zero
   4b2a8:	0021883a 	mov	r16,zero
   4b2ac:	80003926 	beq	r16,zero,4b394 <__ssprint_r+0x13c>
   4b2b0:	102b883a 	mov	r21,r2
   4b2b4:	102d883a 	mov	r22,r2
   4b2b8:	80803a36 	bltu	r16,r2,4b3a4 <__ssprint_r+0x14c>
   4b2bc:	88c0030b 	ldhu	r3,12(r17)
   4b2c0:	1881200c 	andi	r2,r3,1152
   4b2c4:	10002626 	beq	r2,zero,4b360 <__ssprint_r+0x108>
   4b2c8:	88800517 	ldw	r2,20(r17)
   4b2cc:	89400417 	ldw	r5,16(r17)
   4b2d0:	81800044 	addi	r6,r16,1
   4b2d4:	108f883a 	add	r7,r2,r2
   4b2d8:	3885883a 	add	r2,r7,r2
   4b2dc:	100ed7fa 	srli	r7,r2,31
   4b2e0:	216dc83a 	sub	r22,r4,r5
   4b2e4:	3589883a 	add	r4,r6,r22
   4b2e8:	3885883a 	add	r2,r7,r2
   4b2ec:	102bd07a 	srai	r21,r2,1
   4b2f0:	a80d883a 	mov	r6,r21
   4b2f4:	a900022e 	bgeu	r21,r4,4b300 <__ssprint_r+0xa8>
   4b2f8:	202b883a 	mov	r21,r4
   4b2fc:	200d883a 	mov	r6,r4
   4b300:	18c1000c 	andi	r3,r3,1024
   4b304:	18002a26 	beq	r3,zero,4b3b0 <__ssprint_r+0x158>
   4b308:	300b883a 	mov	r5,r6
   4b30c:	9809883a 	mov	r4,r19
   4b310:	0048b380 	call	48b38 <_malloc_r>
   4b314:	1029883a 	mov	r20,r2
   4b318:	10002c26 	beq	r2,zero,4b3cc <__ssprint_r+0x174>
   4b31c:	89400417 	ldw	r5,16(r17)
   4b320:	b00d883a 	mov	r6,r22
   4b324:	1009883a 	mov	r4,r2
   4b328:	00494280 	call	49428 <memcpy>
   4b32c:	8880030b 	ldhu	r2,12(r17)
   4b330:	00fedfc4 	movi	r3,-1153
   4b334:	10c4703a 	and	r2,r2,r3
   4b338:	10802014 	ori	r2,r2,128
   4b33c:	8880030d 	sth	r2,12(r17)
   4b340:	a589883a 	add	r4,r20,r22
   4b344:	adadc83a 	sub	r22,r21,r22
   4b348:	8d400515 	stw	r21,20(r17)
   4b34c:	8d800215 	stw	r22,8(r17)
   4b350:	8d000415 	stw	r20,16(r17)
   4b354:	89000015 	stw	r4,0(r17)
   4b358:	802b883a 	mov	r21,r16
   4b35c:	802d883a 	mov	r22,r16
   4b360:	b00d883a 	mov	r6,r22
   4b364:	e00b883a 	mov	r5,fp
   4b368:	00495700 	call	49570 <memmove>
   4b36c:	88800217 	ldw	r2,8(r17)
   4b370:	89000017 	ldw	r4,0(r17)
   4b374:	90c00217 	ldw	r3,8(r18)
   4b378:	1545c83a 	sub	r2,r2,r21
   4b37c:	2589883a 	add	r4,r4,r22
   4b380:	88800215 	stw	r2,8(r17)
   4b384:	89000015 	stw	r4,0(r17)
   4b388:	1c21c83a 	sub	r16,r3,r16
   4b38c:	94000215 	stw	r16,8(r18)
   4b390:	80001726 	beq	r16,zero,4b3f0 <__ssprint_r+0x198>
   4b394:	bf000017 	ldw	fp,0(r23)
   4b398:	bc000117 	ldw	r16,4(r23)
   4b39c:	bdc00204 	addi	r23,r23,8
   4b3a0:	003fc206 	br	4b2ac <__alt_data_end+0xfffd92ac>
   4b3a4:	802b883a 	mov	r21,r16
   4b3a8:	802d883a 	mov	r22,r16
   4b3ac:	003fec06 	br	4b360 <__alt_data_end+0xfffd9360>
   4b3b0:	9809883a 	mov	r4,r19
   4b3b4:	004aa140 	call	4aa14 <_realloc_r>
   4b3b8:	1029883a 	mov	r20,r2
   4b3bc:	103fe01e 	bne	r2,zero,4b340 <__alt_data_end+0xfffd9340>
   4b3c0:	89400417 	ldw	r5,16(r17)
   4b3c4:	9809883a 	mov	r4,r19
   4b3c8:	0047f400 	call	47f40 <_free_r>
   4b3cc:	88c0030b 	ldhu	r3,12(r17)
   4b3d0:	00800304 	movi	r2,12
   4b3d4:	98800015 	stw	r2,0(r19)
   4b3d8:	18c01014 	ori	r3,r3,64
   4b3dc:	88c0030d 	sth	r3,12(r17)
   4b3e0:	00bfffc4 	movi	r2,-1
   4b3e4:	90000215 	stw	zero,8(r18)
   4b3e8:	90000115 	stw	zero,4(r18)
   4b3ec:	00000206 	br	4b3f8 <__ssprint_r+0x1a0>
   4b3f0:	90000115 	stw	zero,4(r18)
   4b3f4:	0005883a 	mov	r2,zero
   4b3f8:	dfc00917 	ldw	ra,36(sp)
   4b3fc:	df000817 	ldw	fp,32(sp)
   4b400:	ddc00717 	ldw	r23,28(sp)
   4b404:	dd800617 	ldw	r22,24(sp)
   4b408:	dd400517 	ldw	r21,20(sp)
   4b40c:	dd000417 	ldw	r20,16(sp)
   4b410:	dcc00317 	ldw	r19,12(sp)
   4b414:	dc800217 	ldw	r18,8(sp)
   4b418:	dc400117 	ldw	r17,4(sp)
   4b41c:	dc000017 	ldw	r16,0(sp)
   4b420:	dec00a04 	addi	sp,sp,40
   4b424:	f800283a 	ret

0004b428 <___svfiprintf_internal_r>:
   4b428:	2880030b 	ldhu	r2,12(r5)
   4b42c:	deffc804 	addi	sp,sp,-224
   4b430:	dcc03115 	stw	r19,196(sp)
   4b434:	dfc03715 	stw	ra,220(sp)
   4b438:	df003615 	stw	fp,216(sp)
   4b43c:	ddc03515 	stw	r23,212(sp)
   4b440:	dd803415 	stw	r22,208(sp)
   4b444:	dd403315 	stw	r21,204(sp)
   4b448:	dd003215 	stw	r20,200(sp)
   4b44c:	dc803015 	stw	r18,192(sp)
   4b450:	dc402f15 	stw	r17,188(sp)
   4b454:	dc002e15 	stw	r16,184(sp)
   4b458:	d9402315 	stw	r5,140(sp)
   4b45c:	d9002715 	stw	r4,156(sp)
   4b460:	1080200c 	andi	r2,r2,128
   4b464:	d9c02415 	stw	r7,144(sp)
   4b468:	3027883a 	mov	r19,r6
   4b46c:	10000226 	beq	r2,zero,4b478 <___svfiprintf_internal_r+0x50>
   4b470:	28800417 	ldw	r2,16(r5)
   4b474:	10046d26 	beq	r2,zero,4c62c <___svfiprintf_internal_r+0x1204>
   4b478:	d8801a04 	addi	r2,sp,104
   4b47c:	d8c019c4 	addi	r3,sp,103
   4b480:	05800174 	movhi	r22,5
   4b484:	10c9c83a 	sub	r4,r2,r3
   4b488:	b59a9104 	addi	r22,r22,27204
   4b48c:	d8801e15 	stw	r2,120(sp)
   4b490:	d8c01f15 	stw	r3,124(sp)
   4b494:	dec01a15 	stw	sp,104(sp)
   4b498:	d8001c15 	stw	zero,112(sp)
   4b49c:	d8001b15 	stw	zero,108(sp)
   4b4a0:	d811883a 	mov	r8,sp
   4b4a4:	d8002915 	stw	zero,164(sp)
   4b4a8:	d8002615 	stw	zero,152(sp)
   4b4ac:	d9002c15 	stw	r4,176(sp)
   4b4b0:	98800007 	ldb	r2,0(r19)
   4b4b4:	10031426 	beq	r2,zero,4c108 <___svfiprintf_internal_r+0xce0>
   4b4b8:	00c00944 	movi	r3,37
   4b4bc:	9825883a 	mov	r18,r19
   4b4c0:	10c0021e 	bne	r2,r3,4b4cc <___svfiprintf_internal_r+0xa4>
   4b4c4:	00001406 	br	4b518 <___svfiprintf_internal_r+0xf0>
   4b4c8:	10c00326 	beq	r2,r3,4b4d8 <___svfiprintf_internal_r+0xb0>
   4b4cc:	94800044 	addi	r18,r18,1
   4b4d0:	90800007 	ldb	r2,0(r18)
   4b4d4:	103ffc1e 	bne	r2,zero,4b4c8 <__alt_data_end+0xfffd94c8>
   4b4d8:	94e1c83a 	sub	r16,r18,r19
   4b4dc:	80000e26 	beq	r16,zero,4b518 <___svfiprintf_internal_r+0xf0>
   4b4e0:	d8c01c17 	ldw	r3,112(sp)
   4b4e4:	d8801b17 	ldw	r2,108(sp)
   4b4e8:	44c00015 	stw	r19,0(r8)
   4b4ec:	1c07883a 	add	r3,r3,r16
   4b4f0:	10800044 	addi	r2,r2,1
   4b4f4:	d8c01c15 	stw	r3,112(sp)
   4b4f8:	44000115 	stw	r16,4(r8)
   4b4fc:	d8801b15 	stw	r2,108(sp)
   4b500:	00c001c4 	movi	r3,7
   4b504:	18835c16 	blt	r3,r2,4c278 <___svfiprintf_internal_r+0xe50>
   4b508:	42000204 	addi	r8,r8,8
   4b50c:	d9402617 	ldw	r5,152(sp)
   4b510:	2c0b883a 	add	r5,r5,r16
   4b514:	d9402615 	stw	r5,152(sp)
   4b518:	90800007 	ldb	r2,0(r18)
   4b51c:	1002fc26 	beq	r2,zero,4c110 <___svfiprintf_internal_r+0xce8>
   4b520:	0023883a 	mov	r17,zero
   4b524:	00bfffc4 	movi	r2,-1
   4b528:	0021883a 	mov	r16,zero
   4b52c:	94c00044 	addi	r19,r18,1
   4b530:	90c00047 	ldb	r3,1(r18)
   4b534:	dc402105 	stb	r17,132(sp)
   4b538:	d8001d85 	stb	zero,118(sp)
   4b53c:	002b883a 	mov	r21,zero
   4b540:	d8802015 	stw	r2,128(sp)
   4b544:	d8002515 	stw	zero,148(sp)
   4b548:	04801604 	movi	r18,88
   4b54c:	05000244 	movi	r20,9
   4b550:	402f883a 	mov	r23,r8
   4b554:	8023883a 	mov	r17,r16
   4b558:	9cc00044 	addi	r19,r19,1
   4b55c:	18bff804 	addi	r2,r3,-32
   4b560:	9081fb36 	bltu	r18,r2,4bd50 <___svfiprintf_internal_r+0x928>
   4b564:	100490ba 	slli	r2,r2,2
   4b568:	01000174 	movhi	r4,5
   4b56c:	212d5f04 	addi	r4,r4,-19076
   4b570:	1105883a 	add	r2,r2,r4
   4b574:	10800017 	ldw	r2,0(r2)
   4b578:	1000683a 	jmp	r2
   4b57c:	0004b77c 	xorhi	zero,zero,4829
   4b580:	0004bd50 	cmplti	zero,zero,4853
   4b584:	0004bd50 	cmplti	zero,zero,4853
   4b588:	0004b770 	cmpltui	zero,zero,4829
   4b58c:	0004bd50 	cmplti	zero,zero,4853
   4b590:	0004bd50 	cmplti	zero,zero,4853
   4b594:	0004bd50 	cmplti	zero,zero,4853
   4b598:	0004bd50 	cmplti	zero,zero,4853
   4b59c:	0004bd50 	cmplti	zero,zero,4853
   4b5a0:	0004bd50 	cmplti	zero,zero,4853
   4b5a4:	0004b6e0 	cmpeqi	zero,zero,4827
   4b5a8:	0004b8dc 	xori	zero,zero,4835
   4b5ac:	0004bd50 	cmplti	zero,zero,4853
   4b5b0:	0004b708 	cmpgei	zero,zero,4828
   4b5b4:	0004bd8c 	andi	zero,zero,4854
   4b5b8:	0004bd50 	cmplti	zero,zero,4853
   4b5bc:	0004bd80 	call	4bd8 <__alt_mem_RAM-0x3b428>
   4b5c0:	0004bd14 	movui	zero,4852
   4b5c4:	0004bd14 	movui	zero,4852
   4b5c8:	0004bd14 	movui	zero,4852
   4b5cc:	0004bd14 	movui	zero,4852
   4b5d0:	0004bd14 	movui	zero,4852
   4b5d4:	0004bd14 	movui	zero,4852
   4b5d8:	0004bd14 	movui	zero,4852
   4b5dc:	0004bd14 	movui	zero,4852
   4b5e0:	0004bd14 	movui	zero,4852
   4b5e4:	0004bd50 	cmplti	zero,zero,4853
   4b5e8:	0004bd50 	cmplti	zero,zero,4853
   4b5ec:	0004bd50 	cmplti	zero,zero,4853
   4b5f0:	0004bd50 	cmplti	zero,zero,4853
   4b5f4:	0004bd50 	cmplti	zero,zero,4853
   4b5f8:	0004bd50 	cmplti	zero,zero,4853
   4b5fc:	0004bd50 	cmplti	zero,zero,4853
   4b600:	0004bd50 	cmplti	zero,zero,4853
   4b604:	0004bd50 	cmplti	zero,zero,4853
   4b608:	0004bd50 	cmplti	zero,zero,4853
   4b60c:	0004bc98 	cmpnei	zero,zero,4850
   4b610:	0004bd50 	cmplti	zero,zero,4853
   4b614:	0004bd50 	cmplti	zero,zero,4853
   4b618:	0004bd50 	cmplti	zero,zero,4853
   4b61c:	0004bd50 	cmplti	zero,zero,4853
   4b620:	0004bd50 	cmplti	zero,zero,4853
   4b624:	0004bd50 	cmplti	zero,zero,4853
   4b628:	0004bd50 	cmplti	zero,zero,4853
   4b62c:	0004bd50 	cmplti	zero,zero,4853
   4b630:	0004bd50 	cmplti	zero,zero,4853
   4b634:	0004bd50 	cmplti	zero,zero,4853
   4b638:	0004be48 	cmpgei	zero,zero,4857
   4b63c:	0004bd50 	cmplti	zero,zero,4853
   4b640:	0004bd50 	cmplti	zero,zero,4853
   4b644:	0004bd50 	cmplti	zero,zero,4853
   4b648:	0004bd50 	cmplti	zero,zero,4853
   4b64c:	0004bd50 	cmplti	zero,zero,4853
   4b650:	0004bdd4 	movui	zero,4855
   4b654:	0004bd50 	cmplti	zero,zero,4853
   4b658:	0004bd50 	cmplti	zero,zero,4853
   4b65c:	0004bad4 	movui	zero,4843
   4b660:	0004bd50 	cmplti	zero,zero,4853
   4b664:	0004bd50 	cmplti	zero,zero,4853
   4b668:	0004bd50 	cmplti	zero,zero,4853
   4b66c:	0004bd50 	cmplti	zero,zero,4853
   4b670:	0004bd50 	cmplti	zero,zero,4853
   4b674:	0004bd50 	cmplti	zero,zero,4853
   4b678:	0004bd50 	cmplti	zero,zero,4853
   4b67c:	0004bd50 	cmplti	zero,zero,4853
   4b680:	0004bd50 	cmplti	zero,zero,4853
   4b684:	0004bd50 	cmplti	zero,zero,4853
   4b688:	0004b9a0 	cmpeqi	zero,zero,4838
   4b68c:	0004bb84 	movi	zero,4846
   4b690:	0004bd50 	cmplti	zero,zero,4853
   4b694:	0004bd50 	cmplti	zero,zero,4853
   4b698:	0004bd50 	cmplti	zero,zero,4853
   4b69c:	0004bb78 	rdprs	zero,zero,4845
   4b6a0:	0004bb84 	movi	zero,4846
   4b6a4:	0004bd50 	cmplti	zero,zero,4853
   4b6a8:	0004bd50 	cmplti	zero,zero,4853
   4b6ac:	0004bb64 	muli	zero,zero,4845
   4b6b0:	0004bd50 	cmplti	zero,zero,4853
   4b6b4:	0004bb24 	muli	zero,zero,4844
   4b6b8:	0004b8f0 	cmpltui	zero,zero,4835
   4b6bc:	0004b714 	movui	zero,4828
   4b6c0:	0004bc8c 	andi	zero,zero,4850
   4b6c4:	0004bd50 	cmplti	zero,zero,4853
   4b6c8:	0004bc38 	rdprs	zero,zero,4848
   4b6cc:	0004bd50 	cmplti	zero,zero,4853
   4b6d0:	0004b854 	movui	zero,4833
   4b6d4:	0004bd50 	cmplti	zero,zero,4853
   4b6d8:	0004bd50 	cmplti	zero,zero,4853
   4b6dc:	0004b7a0 	cmpeqi	zero,zero,4830
   4b6e0:	d9002417 	ldw	r4,144(sp)
   4b6e4:	d9402417 	ldw	r5,144(sp)
   4b6e8:	21000017 	ldw	r4,0(r4)
   4b6ec:	28800104 	addi	r2,r5,4
   4b6f0:	d9002515 	stw	r4,148(sp)
   4b6f4:	20032b0e 	bge	r4,zero,4c3a4 <___svfiprintf_internal_r+0xf7c>
   4b6f8:	d8c02517 	ldw	r3,148(sp)
   4b6fc:	d8802415 	stw	r2,144(sp)
   4b700:	00c7c83a 	sub	r3,zero,r3
   4b704:	d8c02515 	stw	r3,148(sp)
   4b708:	8c400114 	ori	r17,r17,4
   4b70c:	98c00007 	ldb	r3,0(r19)
   4b710:	003f9106 	br	4b558 <__alt_data_end+0xfffd9558>
   4b714:	00800c04 	movi	r2,48
   4b718:	d9402417 	ldw	r5,144(sp)
   4b71c:	d9002017 	ldw	r4,128(sp)
   4b720:	d8801d05 	stb	r2,116(sp)
   4b724:	00801e04 	movi	r2,120
   4b728:	d8801d45 	stb	r2,117(sp)
   4b72c:	d8001d85 	stb	zero,118(sp)
   4b730:	b811883a 	mov	r8,r23
   4b734:	28c00104 	addi	r3,r5,4
   4b738:	2c800017 	ldw	r18,0(r5)
   4b73c:	0029883a 	mov	r20,zero
   4b740:	88800094 	ori	r2,r17,2
   4b744:	20036316 	blt	r4,zero,4c4d4 <___svfiprintf_internal_r+0x10ac>
   4b748:	00bfdfc4 	movi	r2,-129
   4b74c:	88a0703a 	and	r16,r17,r2
   4b750:	d8c02415 	stw	r3,144(sp)
   4b754:	84000094 	ori	r16,r16,2
   4b758:	90031c26 	beq	r18,zero,4c3cc <___svfiprintf_internal_r+0xfa4>
   4b75c:	01400174 	movhi	r5,5
   4b760:	295a2804 	addi	r5,r5,26784
   4b764:	002b883a 	mov	r21,zero
   4b768:	d9402915 	stw	r5,164(sp)
   4b76c:	00002906 	br	4b814 <___svfiprintf_internal_r+0x3ec>
   4b770:	8c400054 	ori	r17,r17,1
   4b774:	98c00007 	ldb	r3,0(r19)
   4b778:	003f7706 	br	4b558 <__alt_data_end+0xfffd9558>
   4b77c:	a8803fcc 	andi	r2,r21,255
   4b780:	1080201c 	xori	r2,r2,128
   4b784:	10bfe004 	addi	r2,r2,-128
   4b788:	10032a1e 	bne	r2,zero,4c434 <___svfiprintf_internal_r+0x100c>
   4b78c:	00c00044 	movi	r3,1
   4b790:	d8c02105 	stb	r3,132(sp)
   4b794:	05400804 	movi	r21,32
   4b798:	98c00007 	ldb	r3,0(r19)
   4b79c:	003f6e06 	br	4b558 <__alt_data_end+0xfffd9558>
   4b7a0:	8821883a 	mov	r16,r17
   4b7a4:	dc402103 	ldbu	r17,132(sp)
   4b7a8:	b811883a 	mov	r8,r23
   4b7ac:	8c403fcc 	andi	r17,r17,255
   4b7b0:	8803f01e 	bne	r17,zero,4c774 <___svfiprintf_internal_r+0x134c>
   4b7b4:	00800174 	movhi	r2,5
   4b7b8:	109a2804 	addi	r2,r2,26784
   4b7bc:	d8802915 	stw	r2,164(sp)
   4b7c0:	8080080c 	andi	r2,r16,32
   4b7c4:	1000cd26 	beq	r2,zero,4bafc <___svfiprintf_internal_r+0x6d4>
   4b7c8:	d9002417 	ldw	r4,144(sp)
   4b7cc:	24800017 	ldw	r18,0(r4)
   4b7d0:	25000117 	ldw	r20,4(r4)
   4b7d4:	21000204 	addi	r4,r4,8
   4b7d8:	d9002415 	stw	r4,144(sp)
   4b7dc:	8080004c 	andi	r2,r16,1
   4b7e0:	1002c726 	beq	r2,zero,4c300 <___svfiprintf_internal_r+0xed8>
   4b7e4:	9504b03a 	or	r2,r18,r20
   4b7e8:	1003061e 	bne	r2,zero,4c404 <___svfiprintf_internal_r+0xfdc>
   4b7ec:	d9002017 	ldw	r4,128(sp)
   4b7f0:	d8001d85 	stb	zero,118(sp)
   4b7f4:	20033e16 	blt	r4,zero,4c4f0 <___svfiprintf_internal_r+0x10c8>
   4b7f8:	00bfdfc4 	movi	r2,-129
   4b7fc:	80a0703a 	and	r16,r16,r2
   4b800:	d9402017 	ldw	r5,128(sp)
   4b804:	002b883a 	mov	r21,zero
   4b808:	28002826 	beq	r5,zero,4b8ac <___svfiprintf_internal_r+0x484>
   4b80c:	0025883a 	mov	r18,zero
   4b810:	0029883a 	mov	r20,zero
   4b814:	d9002917 	ldw	r4,164(sp)
   4b818:	dc401a04 	addi	r17,sp,104
   4b81c:	908003cc 	andi	r2,r18,15
   4b820:	a006973a 	slli	r3,r20,28
   4b824:	2085883a 	add	r2,r4,r2
   4b828:	9024d13a 	srli	r18,r18,4
   4b82c:	10800003 	ldbu	r2,0(r2)
   4b830:	a028d13a 	srli	r20,r20,4
   4b834:	8c7fffc4 	addi	r17,r17,-1
   4b838:	1ca4b03a 	or	r18,r3,r18
   4b83c:	88800005 	stb	r2,0(r17)
   4b840:	9504b03a 	or	r2,r18,r20
   4b844:	103ff51e 	bne	r2,zero,4b81c <__alt_data_end+0xfffd981c>
   4b848:	d8801e17 	ldw	r2,120(sp)
   4b84c:	1469c83a 	sub	r20,r2,r17
   4b850:	00001906 	br	4b8b8 <___svfiprintf_internal_r+0x490>
   4b854:	8821883a 	mov	r16,r17
   4b858:	dc402103 	ldbu	r17,132(sp)
   4b85c:	b811883a 	mov	r8,r23
   4b860:	8c403fcc 	andi	r17,r17,255
   4b864:	8803d01e 	bne	r17,zero,4c7a8 <___svfiprintf_internal_r+0x1380>
   4b868:	8080080c 	andi	r2,r16,32
   4b86c:	10016126 	beq	r2,zero,4bdf4 <___svfiprintf_internal_r+0x9cc>
   4b870:	d9002417 	ldw	r4,144(sp)
   4b874:	d9402017 	ldw	r5,128(sp)
   4b878:	d8001d85 	stb	zero,118(sp)
   4b87c:	20c00204 	addi	r3,r4,8
   4b880:	24800017 	ldw	r18,0(r4)
   4b884:	25000117 	ldw	r20,4(r4)
   4b888:	28030f16 	blt	r5,zero,4c4c8 <___svfiprintf_internal_r+0x10a0>
   4b88c:	013fdfc4 	movi	r4,-129
   4b890:	9504b03a 	or	r2,r18,r20
   4b894:	d8c02415 	stw	r3,144(sp)
   4b898:	8120703a 	and	r16,r16,r4
   4b89c:	002b883a 	mov	r21,zero
   4b8a0:	1000cd1e 	bne	r2,zero,4bbd8 <___svfiprintf_internal_r+0x7b0>
   4b8a4:	d8c02017 	ldw	r3,128(sp)
   4b8a8:	1803141e 	bne	r3,zero,4c4fc <___svfiprintf_internal_r+0x10d4>
   4b8ac:	d8002015 	stw	zero,128(sp)
   4b8b0:	0029883a 	mov	r20,zero
   4b8b4:	dc401a04 	addi	r17,sp,104
   4b8b8:	dc802017 	ldw	r18,128(sp)
   4b8bc:	9500010e 	bge	r18,r20,4b8c4 <___svfiprintf_internal_r+0x49c>
   4b8c0:	a025883a 	mov	r18,r20
   4b8c4:	ad403fcc 	andi	r21,r21,255
   4b8c8:	ad40201c 	xori	r21,r21,128
   4b8cc:	ad7fe004 	addi	r21,r21,-128
   4b8d0:	a8003f26 	beq	r21,zero,4b9d0 <___svfiprintf_internal_r+0x5a8>
   4b8d4:	94800044 	addi	r18,r18,1
   4b8d8:	00003d06 	br	4b9d0 <___svfiprintf_internal_r+0x5a8>
   4b8dc:	00c00044 	movi	r3,1
   4b8e0:	d8c02105 	stb	r3,132(sp)
   4b8e4:	05400ac4 	movi	r21,43
   4b8e8:	98c00007 	ldb	r3,0(r19)
   4b8ec:	003f1a06 	br	4b558 <__alt_data_end+0xfffd9558>
   4b8f0:	8821883a 	mov	r16,r17
   4b8f4:	dc402103 	ldbu	r17,132(sp)
   4b8f8:	b811883a 	mov	r8,r23
   4b8fc:	8c403fcc 	andi	r17,r17,255
   4b900:	8803a71e 	bne	r17,zero,4c7a0 <___svfiprintf_internal_r+0x1378>
   4b904:	8080080c 	andi	r2,r16,32
   4b908:	10015726 	beq	r2,zero,4be68 <___svfiprintf_internal_r+0xa40>
   4b90c:	d8c02417 	ldw	r3,144(sp)
   4b910:	d9002017 	ldw	r4,128(sp)
   4b914:	d8001d85 	stb	zero,118(sp)
   4b918:	18800204 	addi	r2,r3,8
   4b91c:	1c800017 	ldw	r18,0(r3)
   4b920:	1d000117 	ldw	r20,4(r3)
   4b924:	2002db16 	blt	r4,zero,4c494 <___svfiprintf_internal_r+0x106c>
   4b928:	013fdfc4 	movi	r4,-129
   4b92c:	9506b03a 	or	r3,r18,r20
   4b930:	d8802415 	stw	r2,144(sp)
   4b934:	8120703a 	and	r16,r16,r4
   4b938:	18015826 	beq	r3,zero,4be9c <___svfiprintf_internal_r+0xa74>
   4b93c:	002b883a 	mov	r21,zero
   4b940:	dc401a04 	addi	r17,sp,104
   4b944:	9006d0fa 	srli	r3,r18,3
   4b948:	a008977a 	slli	r4,r20,29
   4b94c:	a028d0fa 	srli	r20,r20,3
   4b950:	948001cc 	andi	r18,r18,7
   4b954:	90800c04 	addi	r2,r18,48
   4b958:	8c7fffc4 	addi	r17,r17,-1
   4b95c:	20e4b03a 	or	r18,r4,r3
   4b960:	88800005 	stb	r2,0(r17)
   4b964:	9506b03a 	or	r3,r18,r20
   4b968:	183ff61e 	bne	r3,zero,4b944 <__alt_data_end+0xfffd9944>
   4b96c:	80c0004c 	andi	r3,r16,1
   4b970:	18028926 	beq	r3,zero,4c398 <___svfiprintf_internal_r+0xf70>
   4b974:	10803fcc 	andi	r2,r2,255
   4b978:	1080201c 	xori	r2,r2,128
   4b97c:	10bfe004 	addi	r2,r2,-128
   4b980:	00c00c04 	movi	r3,48
   4b984:	10ffb026 	beq	r2,r3,4b848 <__alt_data_end+0xfffd9848>
   4b988:	88ffffc5 	stb	r3,-1(r17)
   4b98c:	d8c01e17 	ldw	r3,120(sp)
   4b990:	88bfffc4 	addi	r2,r17,-1
   4b994:	1023883a 	mov	r17,r2
   4b998:	18a9c83a 	sub	r20,r3,r2
   4b99c:	003fc606 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4b9a0:	d8c02417 	ldw	r3,144(sp)
   4b9a4:	04800044 	movi	r18,1
   4b9a8:	8821883a 	mov	r16,r17
   4b9ac:	18800017 	ldw	r2,0(r3)
   4b9b0:	18c00104 	addi	r3,r3,4
   4b9b4:	b811883a 	mov	r8,r23
   4b9b8:	d8001d85 	stb	zero,118(sp)
   4b9bc:	d8801005 	stb	r2,64(sp)
   4b9c0:	d8c02415 	stw	r3,144(sp)
   4b9c4:	9029883a 	mov	r20,r18
   4b9c8:	dc401004 	addi	r17,sp,64
   4b9cc:	d8002015 	stw	zero,128(sp)
   4b9d0:	80c0008c 	andi	r3,r16,2
   4b9d4:	d8c02115 	stw	r3,132(sp)
   4b9d8:	18000126 	beq	r3,zero,4b9e0 <___svfiprintf_internal_r+0x5b8>
   4b9dc:	94800084 	addi	r18,r18,2
   4b9e0:	80c0210c 	andi	r3,r16,132
   4b9e4:	d8c02215 	stw	r3,136(sp)
   4b9e8:	1801321e 	bne	r3,zero,4beb4 <___svfiprintf_internal_r+0xa8c>
   4b9ec:	d9002517 	ldw	r4,148(sp)
   4b9f0:	24b9c83a 	sub	fp,r4,r18
   4b9f4:	07012f0e 	bge	zero,fp,4beb4 <___svfiprintf_internal_r+0xa8c>
   4b9f8:	02400404 	movi	r9,16
   4b9fc:	d8c01c17 	ldw	r3,112(sp)
   4ba00:	d8801b17 	ldw	r2,108(sp)
   4ba04:	4f03250e 	bge	r9,fp,4c69c <___svfiprintf_internal_r+0x1274>
   4ba08:	01000174 	movhi	r4,5
   4ba0c:	211a9504 	addi	r4,r4,27220
   4ba10:	dc002a15 	stw	r16,168(sp)
   4ba14:	dc402b15 	stw	r17,172(sp)
   4ba18:	d9002815 	stw	r4,160(sp)
   4ba1c:	e023883a 	mov	r17,fp
   4ba20:	482f883a 	mov	r23,r9
   4ba24:	9839883a 	mov	fp,r19
   4ba28:	054001c4 	movi	r21,7
   4ba2c:	9027883a 	mov	r19,r18
   4ba30:	dc002717 	ldw	r16,156(sp)
   4ba34:	dc802317 	ldw	r18,140(sp)
   4ba38:	00000306 	br	4ba48 <___svfiprintf_internal_r+0x620>
   4ba3c:	8c7ffc04 	addi	r17,r17,-16
   4ba40:	42000204 	addi	r8,r8,8
   4ba44:	bc40130e 	bge	r23,r17,4ba94 <___svfiprintf_internal_r+0x66c>
   4ba48:	01400174 	movhi	r5,5
   4ba4c:	18c00404 	addi	r3,r3,16
   4ba50:	10800044 	addi	r2,r2,1
   4ba54:	295a9504 	addi	r5,r5,27220
   4ba58:	41400015 	stw	r5,0(r8)
   4ba5c:	45c00115 	stw	r23,4(r8)
   4ba60:	d8c01c15 	stw	r3,112(sp)
   4ba64:	d8801b15 	stw	r2,108(sp)
   4ba68:	a8bff40e 	bge	r21,r2,4ba3c <__alt_data_end+0xfffd9a3c>
   4ba6c:	d9801a04 	addi	r6,sp,104
   4ba70:	900b883a 	mov	r5,r18
   4ba74:	8009883a 	mov	r4,r16
   4ba78:	004b2580 	call	4b258 <__ssprint_r>
   4ba7c:	1001aa1e 	bne	r2,zero,4c128 <___svfiprintf_internal_r+0xd00>
   4ba80:	8c7ffc04 	addi	r17,r17,-16
   4ba84:	d8c01c17 	ldw	r3,112(sp)
   4ba88:	d8801b17 	ldw	r2,108(sp)
   4ba8c:	d811883a 	mov	r8,sp
   4ba90:	bc7fed16 	blt	r23,r17,4ba48 <__alt_data_end+0xfffd9a48>
   4ba94:	9825883a 	mov	r18,r19
   4ba98:	dc002a17 	ldw	r16,168(sp)
   4ba9c:	e027883a 	mov	r19,fp
   4baa0:	8839883a 	mov	fp,r17
   4baa4:	dc402b17 	ldw	r17,172(sp)
   4baa8:	d9002817 	ldw	r4,160(sp)
   4baac:	e0c7883a 	add	r3,fp,r3
   4bab0:	10800044 	addi	r2,r2,1
   4bab4:	41000015 	stw	r4,0(r8)
   4bab8:	47000115 	stw	fp,4(r8)
   4babc:	d8c01c15 	stw	r3,112(sp)
   4bac0:	d8801b15 	stw	r2,108(sp)
   4bac4:	010001c4 	movi	r4,7
   4bac8:	20821616 	blt	r4,r2,4c324 <___svfiprintf_internal_r+0xefc>
   4bacc:	42000204 	addi	r8,r8,8
   4bad0:	0000fa06 	br	4bebc <___svfiprintf_internal_r+0xa94>
   4bad4:	8821883a 	mov	r16,r17
   4bad8:	dc402103 	ldbu	r17,132(sp)
   4badc:	b811883a 	mov	r8,r23
   4bae0:	8c403fcc 	andi	r17,r17,255
   4bae4:	8803361e 	bne	r17,zero,4c7c0 <___svfiprintf_internal_r+0x1398>
   4bae8:	01400174 	movhi	r5,5
   4baec:	295a2304 	addi	r5,r5,26764
   4baf0:	d9402915 	stw	r5,164(sp)
   4baf4:	8080080c 	andi	r2,r16,32
   4baf8:	103f331e 	bne	r2,zero,4b7c8 <__alt_data_end+0xfffd97c8>
   4bafc:	8080040c 	andi	r2,r16,16
   4bb00:	1002551e 	bne	r2,zero,4c458 <___svfiprintf_internal_r+0x1030>
   4bb04:	8080100c 	andi	r2,r16,64
   4bb08:	1002a626 	beq	r2,zero,4c5a4 <___svfiprintf_internal_r+0x117c>
   4bb0c:	d8802417 	ldw	r2,144(sp)
   4bb10:	0029883a 	mov	r20,zero
   4bb14:	1480000b 	ldhu	r18,0(r2)
   4bb18:	10800104 	addi	r2,r2,4
   4bb1c:	d8802415 	stw	r2,144(sp)
   4bb20:	003f2e06 	br	4b7dc <__alt_data_end+0xfffd97dc>
   4bb24:	8821883a 	mov	r16,r17
   4bb28:	dc402103 	ldbu	r17,132(sp)
   4bb2c:	b811883a 	mov	r8,r23
   4bb30:	8c403fcc 	andi	r17,r17,255
   4bb34:	88030b1e 	bne	r17,zero,4c764 <___svfiprintf_internal_r+0x133c>
   4bb38:	8080080c 	andi	r2,r16,32
   4bb3c:	1002271e 	bne	r2,zero,4c3dc <___svfiprintf_internal_r+0xfb4>
   4bb40:	8080040c 	andi	r2,r16,16
   4bb44:	10028e26 	beq	r2,zero,4c580 <___svfiprintf_internal_r+0x1158>
   4bb48:	d8c02417 	ldw	r3,144(sp)
   4bb4c:	d9002617 	ldw	r4,152(sp)
   4bb50:	18800017 	ldw	r2,0(r3)
   4bb54:	18c00104 	addi	r3,r3,4
   4bb58:	d8c02415 	stw	r3,144(sp)
   4bb5c:	11000015 	stw	r4,0(r2)
   4bb60:	003e5306 	br	4b4b0 <__alt_data_end+0xfffd94b0>
   4bb64:	98c00007 	ldb	r3,0(r19)
   4bb68:	01401b04 	movi	r5,108
   4bb6c:	19424f26 	beq	r3,r5,4c4ac <___svfiprintf_internal_r+0x1084>
   4bb70:	8c400414 	ori	r17,r17,16
   4bb74:	003e7806 	br	4b558 <__alt_data_end+0xfffd9558>
   4bb78:	8c401014 	ori	r17,r17,64
   4bb7c:	98c00007 	ldb	r3,0(r19)
   4bb80:	003e7506 	br	4b558 <__alt_data_end+0xfffd9558>
   4bb84:	8821883a 	mov	r16,r17
   4bb88:	dc402103 	ldbu	r17,132(sp)
   4bb8c:	b811883a 	mov	r8,r23
   4bb90:	8c403fcc 	andi	r17,r17,255
   4bb94:	8802fe1e 	bne	r17,zero,4c790 <___svfiprintf_internal_r+0x1368>
   4bb98:	8080080c 	andi	r2,r16,32
   4bb9c:	10004626 	beq	r2,zero,4bcb8 <___svfiprintf_internal_r+0x890>
   4bba0:	d9002417 	ldw	r4,144(sp)
   4bba4:	20800117 	ldw	r2,4(r4)
   4bba8:	24800017 	ldw	r18,0(r4)
   4bbac:	21000204 	addi	r4,r4,8
   4bbb0:	d9002415 	stw	r4,144(sp)
   4bbb4:	1029883a 	mov	r20,r2
   4bbb8:	10004a16 	blt	r2,zero,4bce4 <___svfiprintf_internal_r+0x8bc>
   4bbbc:	d9002017 	ldw	r4,128(sp)
   4bbc0:	dd401d83 	ldbu	r21,118(sp)
   4bbc4:	2001eb16 	blt	r4,zero,4c374 <___svfiprintf_internal_r+0xf4c>
   4bbc8:	00ffdfc4 	movi	r3,-129
   4bbcc:	9504b03a 	or	r2,r18,r20
   4bbd0:	80e0703a 	and	r16,r16,r3
   4bbd4:	103f3326 	beq	r2,zero,4b8a4 <__alt_data_end+0xfffd98a4>
   4bbd8:	a0009426 	beq	r20,zero,4be2c <___svfiprintf_internal_r+0xa04>
   4bbdc:	dc401a04 	addi	r17,sp,104
   4bbe0:	402f883a 	mov	r23,r8
   4bbe4:	9009883a 	mov	r4,r18
   4bbe8:	a00b883a 	mov	r5,r20
   4bbec:	01800284 	movi	r6,10
   4bbf0:	000f883a 	mov	r7,zero
   4bbf4:	004ee080 	call	4ee08 <__umoddi3>
   4bbf8:	10800c04 	addi	r2,r2,48
   4bbfc:	8c7fffc4 	addi	r17,r17,-1
   4bc00:	9009883a 	mov	r4,r18
   4bc04:	a00b883a 	mov	r5,r20
   4bc08:	88800005 	stb	r2,0(r17)
   4bc0c:	01800284 	movi	r6,10
   4bc10:	000f883a 	mov	r7,zero
   4bc14:	004e80c0 	call	4e80c <__udivdi3>
   4bc18:	1025883a 	mov	r18,r2
   4bc1c:	10c4b03a 	or	r2,r2,r3
   4bc20:	1829883a 	mov	r20,r3
   4bc24:	103fef1e 	bne	r2,zero,4bbe4 <__alt_data_end+0xfffd9be4>
   4bc28:	d9001e17 	ldw	r4,120(sp)
   4bc2c:	b811883a 	mov	r8,r23
   4bc30:	2469c83a 	sub	r20,r4,r17
   4bc34:	003f2006 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4bc38:	d8802417 	ldw	r2,144(sp)
   4bc3c:	8821883a 	mov	r16,r17
   4bc40:	d8001d85 	stb	zero,118(sp)
   4bc44:	14400017 	ldw	r17,0(r2)
   4bc48:	b811883a 	mov	r8,r23
   4bc4c:	15c00104 	addi	r23,r2,4
   4bc50:	88026c26 	beq	r17,zero,4c604 <___svfiprintf_internal_r+0x11dc>
   4bc54:	d8c02017 	ldw	r3,128(sp)
   4bc58:	18025f16 	blt	r3,zero,4c5d8 <___svfiprintf_internal_r+0x11b0>
   4bc5c:	180d883a 	mov	r6,r3
   4bc60:	000b883a 	mov	r5,zero
   4bc64:	8809883a 	mov	r4,r17
   4bc68:	da002d15 	stw	r8,180(sp)
   4bc6c:	00493440 	call	49344 <memchr>
   4bc70:	da002d17 	ldw	r8,180(sp)
   4bc74:	1002a526 	beq	r2,zero,4c70c <___svfiprintf_internal_r+0x12e4>
   4bc78:	1469c83a 	sub	r20,r2,r17
   4bc7c:	dd401d83 	ldbu	r21,118(sp)
   4bc80:	ddc02415 	stw	r23,144(sp)
   4bc84:	d8002015 	stw	zero,128(sp)
   4bc88:	003f0b06 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4bc8c:	8c400814 	ori	r17,r17,32
   4bc90:	98c00007 	ldb	r3,0(r19)
   4bc94:	003e3006 	br	4b558 <__alt_data_end+0xfffd9558>
   4bc98:	8821883a 	mov	r16,r17
   4bc9c:	dc402103 	ldbu	r17,132(sp)
   4bca0:	b811883a 	mov	r8,r23
   4bca4:	8c403fcc 	andi	r17,r17,255
   4bca8:	8802b01e 	bne	r17,zero,4c76c <___svfiprintf_internal_r+0x1344>
   4bcac:	84000414 	ori	r16,r16,16
   4bcb0:	8080080c 	andi	r2,r16,32
   4bcb4:	103fba1e 	bne	r2,zero,4bba0 <__alt_data_end+0xfffd9ba0>
   4bcb8:	8080040c 	andi	r2,r16,16
   4bcbc:	1001df1e 	bne	r2,zero,4c43c <___svfiprintf_internal_r+0x1014>
   4bcc0:	8080100c 	andi	r2,r16,64
   4bcc4:	10023d26 	beq	r2,zero,4c5bc <___svfiprintf_internal_r+0x1194>
   4bcc8:	d8802417 	ldw	r2,144(sp)
   4bccc:	1480000f 	ldh	r18,0(r2)
   4bcd0:	10800104 	addi	r2,r2,4
   4bcd4:	d8802415 	stw	r2,144(sp)
   4bcd8:	9029d7fa 	srai	r20,r18,31
   4bcdc:	a005883a 	mov	r2,r20
   4bce0:	103fb60e 	bge	r2,zero,4bbbc <__alt_data_end+0xfffd9bbc>
   4bce4:	d9402017 	ldw	r5,128(sp)
   4bce8:	04a5c83a 	sub	r18,zero,r18
   4bcec:	05400b44 	movi	r21,45
   4bcf0:	9004c03a 	cmpne	r2,r18,zero
   4bcf4:	0529c83a 	sub	r20,zero,r20
   4bcf8:	dd401d85 	stb	r21,118(sp)
   4bcfc:	a0a9c83a 	sub	r20,r20,r2
   4bd00:	28026c16 	blt	r5,zero,4c6b4 <___svfiprintf_internal_r+0x128c>
   4bd04:	00bfdfc4 	movi	r2,-129
   4bd08:	80a0703a 	and	r16,r16,r2
   4bd0c:	a03fb31e 	bne	r20,zero,4bbdc <__alt_data_end+0xfffd9bdc>
   4bd10:	00004606 	br	4be2c <___svfiprintf_internal_r+0xa04>
   4bd14:	9839883a 	mov	fp,r19
   4bd18:	d8002515 	stw	zero,148(sp)
   4bd1c:	1c3ff404 	addi	r16,r3,-48
   4bd20:	0009883a 	mov	r4,zero
   4bd24:	01400284 	movi	r5,10
   4bd28:	004146c0 	call	4146c <__mulsi3>
   4bd2c:	e0c00007 	ldb	r3,0(fp)
   4bd30:	8089883a 	add	r4,r16,r2
   4bd34:	9cc00044 	addi	r19,r19,1
   4bd38:	1c3ff404 	addi	r16,r3,-48
   4bd3c:	9839883a 	mov	fp,r19
   4bd40:	a43ff82e 	bgeu	r20,r16,4bd24 <__alt_data_end+0xfffd9d24>
   4bd44:	d9002515 	stw	r4,148(sp)
   4bd48:	18bff804 	addi	r2,r3,-32
   4bd4c:	90be052e 	bgeu	r18,r2,4b564 <__alt_data_end+0xfffd9564>
   4bd50:	8821883a 	mov	r16,r17
   4bd54:	dc402103 	ldbu	r17,132(sp)
   4bd58:	b811883a 	mov	r8,r23
   4bd5c:	8c403fcc 	andi	r17,r17,255
   4bd60:	88028d1e 	bne	r17,zero,4c798 <___svfiprintf_internal_r+0x1370>
   4bd64:	1800ea26 	beq	r3,zero,4c110 <___svfiprintf_internal_r+0xce8>
   4bd68:	04800044 	movi	r18,1
   4bd6c:	d8c01005 	stb	r3,64(sp)
   4bd70:	d8001d85 	stb	zero,118(sp)
   4bd74:	9029883a 	mov	r20,r18
   4bd78:	dc401004 	addi	r17,sp,64
   4bd7c:	003f1306 	br	4b9cc <__alt_data_end+0xfffd99cc>
   4bd80:	8c402014 	ori	r17,r17,128
   4bd84:	98c00007 	ldb	r3,0(r19)
   4bd88:	003df306 	br	4b558 <__alt_data_end+0xfffd9558>
   4bd8c:	98c00007 	ldb	r3,0(r19)
   4bd90:	01000a84 	movi	r4,42
   4bd94:	9f000044 	addi	fp,r19,1
   4bd98:	19026326 	beq	r3,r4,4c728 <___svfiprintf_internal_r+0x1300>
   4bd9c:	1c3ff404 	addi	r16,r3,-48
   4bda0:	0009883a 	mov	r4,zero
   4bda4:	a4025636 	bltu	r20,r16,4c700 <___svfiprintf_internal_r+0x12d8>
   4bda8:	01400284 	movi	r5,10
   4bdac:	004146c0 	call	4146c <__mulsi3>
   4bdb0:	e0c00007 	ldb	r3,0(fp)
   4bdb4:	1409883a 	add	r4,r2,r16
   4bdb8:	e4c00044 	addi	r19,fp,1
   4bdbc:	1c3ff404 	addi	r16,r3,-48
   4bdc0:	9839883a 	mov	fp,r19
   4bdc4:	a43ff82e 	bgeu	r20,r16,4bda8 <__alt_data_end+0xfffd9da8>
   4bdc8:	20020c16 	blt	r4,zero,4c5fc <___svfiprintf_internal_r+0x11d4>
   4bdcc:	d9002015 	stw	r4,128(sp)
   4bdd0:	003de206 	br	4b55c <__alt_data_end+0xfffd955c>
   4bdd4:	8821883a 	mov	r16,r17
   4bdd8:	dc402103 	ldbu	r17,132(sp)
   4bddc:	b811883a 	mov	r8,r23
   4bde0:	8c403fcc 	andi	r17,r17,255
   4bde4:	8802721e 	bne	r17,zero,4c7b0 <___svfiprintf_internal_r+0x1388>
   4bde8:	84000414 	ori	r16,r16,16
   4bdec:	8080080c 	andi	r2,r16,32
   4bdf0:	103e9f1e 	bne	r2,zero,4b870 <__alt_data_end+0xfffd9870>
   4bdf4:	8080040c 	andi	r2,r16,16
   4bdf8:	10015326 	beq	r2,zero,4c348 <___svfiprintf_internal_r+0xf20>
   4bdfc:	d8c02417 	ldw	r3,144(sp)
   4be00:	d9002017 	ldw	r4,128(sp)
   4be04:	d8001d85 	stb	zero,118(sp)
   4be08:	18800104 	addi	r2,r3,4
   4be0c:	1c800017 	ldw	r18,0(r3)
   4be10:	0029883a 	mov	r20,zero
   4be14:	20015516 	blt	r4,zero,4c36c <___svfiprintf_internal_r+0xf44>
   4be18:	00ffdfc4 	movi	r3,-129
   4be1c:	d8802415 	stw	r2,144(sp)
   4be20:	80e0703a 	and	r16,r16,r3
   4be24:	002b883a 	mov	r21,zero
   4be28:	903e9e26 	beq	r18,zero,4b8a4 <__alt_data_end+0xfffd98a4>
   4be2c:	00800244 	movi	r2,9
   4be30:	14bf6a36 	bltu	r2,r18,4bbdc <__alt_data_end+0xfffd9bdc>
   4be34:	94800c04 	addi	r18,r18,48
   4be38:	dc8019c5 	stb	r18,103(sp)
   4be3c:	dd002c17 	ldw	r20,176(sp)
   4be40:	dc4019c4 	addi	r17,sp,103
   4be44:	003e9c06 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4be48:	8821883a 	mov	r16,r17
   4be4c:	dc402103 	ldbu	r17,132(sp)
   4be50:	b811883a 	mov	r8,r23
   4be54:	8c403fcc 	andi	r17,r17,255
   4be58:	8802571e 	bne	r17,zero,4c7b8 <___svfiprintf_internal_r+0x1390>
   4be5c:	84000414 	ori	r16,r16,16
   4be60:	8080080c 	andi	r2,r16,32
   4be64:	103ea91e 	bne	r2,zero,4b90c <__alt_data_end+0xfffd990c>
   4be68:	8080040c 	andi	r2,r16,16
   4be6c:	10018026 	beq	r2,zero,4c470 <___svfiprintf_internal_r+0x1048>
   4be70:	d9402417 	ldw	r5,144(sp)
   4be74:	d8c02017 	ldw	r3,128(sp)
   4be78:	d8001d85 	stb	zero,118(sp)
   4be7c:	28800104 	addi	r2,r5,4
   4be80:	2c800017 	ldw	r18,0(r5)
   4be84:	0029883a 	mov	r20,zero
   4be88:	18018216 	blt	r3,zero,4c494 <___svfiprintf_internal_r+0x106c>
   4be8c:	00ffdfc4 	movi	r3,-129
   4be90:	d8802415 	stw	r2,144(sp)
   4be94:	80e0703a 	and	r16,r16,r3
   4be98:	903ea81e 	bne	r18,zero,4b93c <__alt_data_end+0xfffd993c>
   4be9c:	d8802017 	ldw	r2,128(sp)
   4bea0:	002b883a 	mov	r21,zero
   4bea4:	1001f226 	beq	r2,zero,4c670 <___svfiprintf_internal_r+0x1248>
   4bea8:	0025883a 	mov	r18,zero
   4beac:	0029883a 	mov	r20,zero
   4beb0:	003ea306 	br	4b940 <__alt_data_end+0xfffd9940>
   4beb4:	d8c01c17 	ldw	r3,112(sp)
   4beb8:	d8801b17 	ldw	r2,108(sp)
   4bebc:	d9001d87 	ldb	r4,118(sp)
   4bec0:	20000b26 	beq	r4,zero,4bef0 <___svfiprintf_internal_r+0xac8>
   4bec4:	d9001d84 	addi	r4,sp,118
   4bec8:	18c00044 	addi	r3,r3,1
   4becc:	10800044 	addi	r2,r2,1
   4bed0:	41000015 	stw	r4,0(r8)
   4bed4:	01000044 	movi	r4,1
   4bed8:	41000115 	stw	r4,4(r8)
   4bedc:	d8c01c15 	stw	r3,112(sp)
   4bee0:	d8801b15 	stw	r2,108(sp)
   4bee4:	010001c4 	movi	r4,7
   4bee8:	2080f316 	blt	r4,r2,4c2b8 <___svfiprintf_internal_r+0xe90>
   4beec:	42000204 	addi	r8,r8,8
   4bef0:	d9402117 	ldw	r5,132(sp)
   4bef4:	28000b26 	beq	r5,zero,4bf24 <___svfiprintf_internal_r+0xafc>
   4bef8:	d9001d04 	addi	r4,sp,116
   4befc:	18c00084 	addi	r3,r3,2
   4bf00:	10800044 	addi	r2,r2,1
   4bf04:	41000015 	stw	r4,0(r8)
   4bf08:	01000084 	movi	r4,2
   4bf0c:	41000115 	stw	r4,4(r8)
   4bf10:	d8c01c15 	stw	r3,112(sp)
   4bf14:	d8801b15 	stw	r2,108(sp)
   4bf18:	010001c4 	movi	r4,7
   4bf1c:	2080ef16 	blt	r4,r2,4c2dc <___svfiprintf_internal_r+0xeb4>
   4bf20:	42000204 	addi	r8,r8,8
   4bf24:	d9402217 	ldw	r5,136(sp)
   4bf28:	01002004 	movi	r4,128
   4bf2c:	29008f26 	beq	r5,r4,4c16c <___svfiprintf_internal_r+0xd44>
   4bf30:	d9002017 	ldw	r4,128(sp)
   4bf34:	252fc83a 	sub	r23,r4,r20
   4bf38:	05c0310e 	bge	zero,r23,4c000 <___svfiprintf_internal_r+0xbd8>
   4bf3c:	07000404 	movi	fp,16
   4bf40:	e5c17d0e 	bge	fp,r23,4c538 <___svfiprintf_internal_r+0x1110>
   4bf44:	01000174 	movhi	r4,5
   4bf48:	211a9104 	addi	r4,r4,27204
   4bf4c:	dc002015 	stw	r16,128(sp)
   4bf50:	dc402215 	stw	r17,136(sp)
   4bf54:	d9002115 	stw	r4,132(sp)
   4bf58:	b823883a 	mov	r17,r23
   4bf5c:	054001c4 	movi	r21,7
   4bf60:	982f883a 	mov	r23,r19
   4bf64:	dc002717 	ldw	r16,156(sp)
   4bf68:	9027883a 	mov	r19,r18
   4bf6c:	dc802317 	ldw	r18,140(sp)
   4bf70:	00000306 	br	4bf80 <___svfiprintf_internal_r+0xb58>
   4bf74:	8c7ffc04 	addi	r17,r17,-16
   4bf78:	42000204 	addi	r8,r8,8
   4bf7c:	e440110e 	bge	fp,r17,4bfc4 <___svfiprintf_internal_r+0xb9c>
   4bf80:	18c00404 	addi	r3,r3,16
   4bf84:	10800044 	addi	r2,r2,1
   4bf88:	45800015 	stw	r22,0(r8)
   4bf8c:	47000115 	stw	fp,4(r8)
   4bf90:	d8c01c15 	stw	r3,112(sp)
   4bf94:	d8801b15 	stw	r2,108(sp)
   4bf98:	a8bff60e 	bge	r21,r2,4bf74 <__alt_data_end+0xfffd9f74>
   4bf9c:	d9801a04 	addi	r6,sp,104
   4bfa0:	900b883a 	mov	r5,r18
   4bfa4:	8009883a 	mov	r4,r16
   4bfa8:	004b2580 	call	4b258 <__ssprint_r>
   4bfac:	10005e1e 	bne	r2,zero,4c128 <___svfiprintf_internal_r+0xd00>
   4bfb0:	8c7ffc04 	addi	r17,r17,-16
   4bfb4:	d8c01c17 	ldw	r3,112(sp)
   4bfb8:	d8801b17 	ldw	r2,108(sp)
   4bfbc:	d811883a 	mov	r8,sp
   4bfc0:	e47fef16 	blt	fp,r17,4bf80 <__alt_data_end+0xfffd9f80>
   4bfc4:	9825883a 	mov	r18,r19
   4bfc8:	dc002017 	ldw	r16,128(sp)
   4bfcc:	b827883a 	mov	r19,r23
   4bfd0:	882f883a 	mov	r23,r17
   4bfd4:	dc402217 	ldw	r17,136(sp)
   4bfd8:	d9402117 	ldw	r5,132(sp)
   4bfdc:	1dc7883a 	add	r3,r3,r23
   4bfe0:	10800044 	addi	r2,r2,1
   4bfe4:	41400015 	stw	r5,0(r8)
   4bfe8:	45c00115 	stw	r23,4(r8)
   4bfec:	d8c01c15 	stw	r3,112(sp)
   4bff0:	d8801b15 	stw	r2,108(sp)
   4bff4:	010001c4 	movi	r4,7
   4bff8:	2080a616 	blt	r4,r2,4c294 <___svfiprintf_internal_r+0xe6c>
   4bffc:	42000204 	addi	r8,r8,8
   4c000:	a0c7883a 	add	r3,r20,r3
   4c004:	10800044 	addi	r2,r2,1
   4c008:	44400015 	stw	r17,0(r8)
   4c00c:	45000115 	stw	r20,4(r8)
   4c010:	d8c01c15 	stw	r3,112(sp)
   4c014:	d8801b15 	stw	r2,108(sp)
   4c018:	010001c4 	movi	r4,7
   4c01c:	20808816 	blt	r4,r2,4c240 <___svfiprintf_internal_r+0xe18>
   4c020:	42000204 	addi	r8,r8,8
   4c024:	8400010c 	andi	r16,r16,4
   4c028:	80002c26 	beq	r16,zero,4c0dc <___svfiprintf_internal_r+0xcb4>
   4c02c:	d8802517 	ldw	r2,148(sp)
   4c030:	14a1c83a 	sub	r16,r2,r18
   4c034:	0400290e 	bge	zero,r16,4c0dc <___svfiprintf_internal_r+0xcb4>
   4c038:	04400404 	movi	r17,16
   4c03c:	d8801b17 	ldw	r2,108(sp)
   4c040:	8c01a70e 	bge	r17,r16,4c6e0 <___svfiprintf_internal_r+0x12b8>
   4c044:	01400174 	movhi	r5,5
   4c048:	295a9504 	addi	r5,r5,27220
   4c04c:	d9402815 	stw	r5,160(sp)
   4c050:	050001c4 	movi	r20,7
   4c054:	dd402717 	ldw	r21,156(sp)
   4c058:	ddc02317 	ldw	r23,140(sp)
   4c05c:	00000306 	br	4c06c <___svfiprintf_internal_r+0xc44>
   4c060:	843ffc04 	addi	r16,r16,-16
   4c064:	42000204 	addi	r8,r8,8
   4c068:	8c00130e 	bge	r17,r16,4c0b8 <___svfiprintf_internal_r+0xc90>
   4c06c:	01000174 	movhi	r4,5
   4c070:	18c00404 	addi	r3,r3,16
   4c074:	10800044 	addi	r2,r2,1
   4c078:	211a9504 	addi	r4,r4,27220
   4c07c:	41000015 	stw	r4,0(r8)
   4c080:	44400115 	stw	r17,4(r8)
   4c084:	d8c01c15 	stw	r3,112(sp)
   4c088:	d8801b15 	stw	r2,108(sp)
   4c08c:	a0bff40e 	bge	r20,r2,4c060 <__alt_data_end+0xfffda060>
   4c090:	d9801a04 	addi	r6,sp,104
   4c094:	b80b883a 	mov	r5,r23
   4c098:	a809883a 	mov	r4,r21
   4c09c:	004b2580 	call	4b258 <__ssprint_r>
   4c0a0:	1000211e 	bne	r2,zero,4c128 <___svfiprintf_internal_r+0xd00>
   4c0a4:	843ffc04 	addi	r16,r16,-16
   4c0a8:	d8c01c17 	ldw	r3,112(sp)
   4c0ac:	d8801b17 	ldw	r2,108(sp)
   4c0b0:	d811883a 	mov	r8,sp
   4c0b4:	8c3fed16 	blt	r17,r16,4c06c <__alt_data_end+0xfffda06c>
   4c0b8:	d9402817 	ldw	r5,160(sp)
   4c0bc:	1c07883a 	add	r3,r3,r16
   4c0c0:	10800044 	addi	r2,r2,1
   4c0c4:	41400015 	stw	r5,0(r8)
   4c0c8:	44000115 	stw	r16,4(r8)
   4c0cc:	d8c01c15 	stw	r3,112(sp)
   4c0d0:	d8801b15 	stw	r2,108(sp)
   4c0d4:	010001c4 	movi	r4,7
   4c0d8:	2080b516 	blt	r4,r2,4c3b0 <___svfiprintf_internal_r+0xf88>
   4c0dc:	d8802517 	ldw	r2,148(sp)
   4c0e0:	1480010e 	bge	r2,r18,4c0e8 <___svfiprintf_internal_r+0xcc0>
   4c0e4:	9005883a 	mov	r2,r18
   4c0e8:	d9002617 	ldw	r4,152(sp)
   4c0ec:	2089883a 	add	r4,r4,r2
   4c0f0:	d9002615 	stw	r4,152(sp)
   4c0f4:	18005a1e 	bne	r3,zero,4c260 <___svfiprintf_internal_r+0xe38>
   4c0f8:	98800007 	ldb	r2,0(r19)
   4c0fc:	d8001b15 	stw	zero,108(sp)
   4c100:	d811883a 	mov	r8,sp
   4c104:	103cec1e 	bne	r2,zero,4b4b8 <__alt_data_end+0xfffd94b8>
   4c108:	9825883a 	mov	r18,r19
   4c10c:	003d0206 	br	4b518 <__alt_data_end+0xfffd9518>
   4c110:	d8801c17 	ldw	r2,112(sp)
   4c114:	10000426 	beq	r2,zero,4c128 <___svfiprintf_internal_r+0xd00>
   4c118:	d9402317 	ldw	r5,140(sp)
   4c11c:	d9002717 	ldw	r4,156(sp)
   4c120:	d9801a04 	addi	r6,sp,104
   4c124:	004b2580 	call	4b258 <__ssprint_r>
   4c128:	d9402317 	ldw	r5,140(sp)
   4c12c:	d8802617 	ldw	r2,152(sp)
   4c130:	28c0030b 	ldhu	r3,12(r5)
   4c134:	18c0100c 	andi	r3,r3,64
   4c138:	18015c1e 	bne	r3,zero,4c6ac <___svfiprintf_internal_r+0x1284>
   4c13c:	dfc03717 	ldw	ra,220(sp)
   4c140:	df003617 	ldw	fp,216(sp)
   4c144:	ddc03517 	ldw	r23,212(sp)
   4c148:	dd803417 	ldw	r22,208(sp)
   4c14c:	dd403317 	ldw	r21,204(sp)
   4c150:	dd003217 	ldw	r20,200(sp)
   4c154:	dcc03117 	ldw	r19,196(sp)
   4c158:	dc803017 	ldw	r18,192(sp)
   4c15c:	dc402f17 	ldw	r17,188(sp)
   4c160:	dc002e17 	ldw	r16,184(sp)
   4c164:	dec03804 	addi	sp,sp,224
   4c168:	f800283a 	ret
   4c16c:	d9002517 	ldw	r4,148(sp)
   4c170:	24afc83a 	sub	r23,r4,r18
   4c174:	05ff6e0e 	bge	zero,r23,4bf30 <__alt_data_end+0xfffd9f30>
   4c178:	07000404 	movi	fp,16
   4c17c:	e5c15c0e 	bge	fp,r23,4c6f0 <___svfiprintf_internal_r+0x12c8>
   4c180:	01000174 	movhi	r4,5
   4c184:	211a9104 	addi	r4,r4,27204
   4c188:	dc002215 	stw	r16,136(sp)
   4c18c:	dc402815 	stw	r17,160(sp)
   4c190:	d9002115 	stw	r4,132(sp)
   4c194:	b823883a 	mov	r17,r23
   4c198:	054001c4 	movi	r21,7
   4c19c:	982f883a 	mov	r23,r19
   4c1a0:	dc002717 	ldw	r16,156(sp)
   4c1a4:	9027883a 	mov	r19,r18
   4c1a8:	dc802317 	ldw	r18,140(sp)
   4c1ac:	00000306 	br	4c1bc <___svfiprintf_internal_r+0xd94>
   4c1b0:	8c7ffc04 	addi	r17,r17,-16
   4c1b4:	42000204 	addi	r8,r8,8
   4c1b8:	e440110e 	bge	fp,r17,4c200 <___svfiprintf_internal_r+0xdd8>
   4c1bc:	18c00404 	addi	r3,r3,16
   4c1c0:	10800044 	addi	r2,r2,1
   4c1c4:	45800015 	stw	r22,0(r8)
   4c1c8:	47000115 	stw	fp,4(r8)
   4c1cc:	d8c01c15 	stw	r3,112(sp)
   4c1d0:	d8801b15 	stw	r2,108(sp)
   4c1d4:	a8bff60e 	bge	r21,r2,4c1b0 <__alt_data_end+0xfffda1b0>
   4c1d8:	d9801a04 	addi	r6,sp,104
   4c1dc:	900b883a 	mov	r5,r18
   4c1e0:	8009883a 	mov	r4,r16
   4c1e4:	004b2580 	call	4b258 <__ssprint_r>
   4c1e8:	103fcf1e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c1ec:	8c7ffc04 	addi	r17,r17,-16
   4c1f0:	d8c01c17 	ldw	r3,112(sp)
   4c1f4:	d8801b17 	ldw	r2,108(sp)
   4c1f8:	d811883a 	mov	r8,sp
   4c1fc:	e47fef16 	blt	fp,r17,4c1bc <__alt_data_end+0xfffda1bc>
   4c200:	9825883a 	mov	r18,r19
   4c204:	dc002217 	ldw	r16,136(sp)
   4c208:	b827883a 	mov	r19,r23
   4c20c:	882f883a 	mov	r23,r17
   4c210:	dc402817 	ldw	r17,160(sp)
   4c214:	d9402117 	ldw	r5,132(sp)
   4c218:	1dc7883a 	add	r3,r3,r23
   4c21c:	10800044 	addi	r2,r2,1
   4c220:	41400015 	stw	r5,0(r8)
   4c224:	45c00115 	stw	r23,4(r8)
   4c228:	d8c01c15 	stw	r3,112(sp)
   4c22c:	d8801b15 	stw	r2,108(sp)
   4c230:	010001c4 	movi	r4,7
   4c234:	2080b716 	blt	r4,r2,4c514 <___svfiprintf_internal_r+0x10ec>
   4c238:	42000204 	addi	r8,r8,8
   4c23c:	003f3c06 	br	4bf30 <__alt_data_end+0xfffd9f30>
   4c240:	d9402317 	ldw	r5,140(sp)
   4c244:	d9002717 	ldw	r4,156(sp)
   4c248:	d9801a04 	addi	r6,sp,104
   4c24c:	004b2580 	call	4b258 <__ssprint_r>
   4c250:	103fb51e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c254:	d8c01c17 	ldw	r3,112(sp)
   4c258:	d811883a 	mov	r8,sp
   4c25c:	003f7106 	br	4c024 <__alt_data_end+0xfffda024>
   4c260:	d9402317 	ldw	r5,140(sp)
   4c264:	d9002717 	ldw	r4,156(sp)
   4c268:	d9801a04 	addi	r6,sp,104
   4c26c:	004b2580 	call	4b258 <__ssprint_r>
   4c270:	103fa126 	beq	r2,zero,4c0f8 <__alt_data_end+0xfffda0f8>
   4c274:	003fac06 	br	4c128 <__alt_data_end+0xfffda128>
   4c278:	d9402317 	ldw	r5,140(sp)
   4c27c:	d9002717 	ldw	r4,156(sp)
   4c280:	d9801a04 	addi	r6,sp,104
   4c284:	004b2580 	call	4b258 <__ssprint_r>
   4c288:	103fa71e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c28c:	d811883a 	mov	r8,sp
   4c290:	003c9e06 	br	4b50c <__alt_data_end+0xfffd950c>
   4c294:	d9402317 	ldw	r5,140(sp)
   4c298:	d9002717 	ldw	r4,156(sp)
   4c29c:	d9801a04 	addi	r6,sp,104
   4c2a0:	004b2580 	call	4b258 <__ssprint_r>
   4c2a4:	103fa01e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c2a8:	d8c01c17 	ldw	r3,112(sp)
   4c2ac:	d8801b17 	ldw	r2,108(sp)
   4c2b0:	d811883a 	mov	r8,sp
   4c2b4:	003f5206 	br	4c000 <__alt_data_end+0xfffda000>
   4c2b8:	d9402317 	ldw	r5,140(sp)
   4c2bc:	d9002717 	ldw	r4,156(sp)
   4c2c0:	d9801a04 	addi	r6,sp,104
   4c2c4:	004b2580 	call	4b258 <__ssprint_r>
   4c2c8:	103f971e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c2cc:	d8c01c17 	ldw	r3,112(sp)
   4c2d0:	d8801b17 	ldw	r2,108(sp)
   4c2d4:	d811883a 	mov	r8,sp
   4c2d8:	003f0506 	br	4bef0 <__alt_data_end+0xfffd9ef0>
   4c2dc:	d9402317 	ldw	r5,140(sp)
   4c2e0:	d9002717 	ldw	r4,156(sp)
   4c2e4:	d9801a04 	addi	r6,sp,104
   4c2e8:	004b2580 	call	4b258 <__ssprint_r>
   4c2ec:	103f8e1e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c2f0:	d8c01c17 	ldw	r3,112(sp)
   4c2f4:	d8801b17 	ldw	r2,108(sp)
   4c2f8:	d811883a 	mov	r8,sp
   4c2fc:	003f0906 	br	4bf24 <__alt_data_end+0xfffd9f24>
   4c300:	d9402017 	ldw	r5,128(sp)
   4c304:	d8001d85 	stb	zero,118(sp)
   4c308:	28007716 	blt	r5,zero,4c4e8 <___svfiprintf_internal_r+0x10c0>
   4c30c:	00ffdfc4 	movi	r3,-129
   4c310:	9504b03a 	or	r2,r18,r20
   4c314:	80e0703a 	and	r16,r16,r3
   4c318:	103d3926 	beq	r2,zero,4b800 <__alt_data_end+0xfffd9800>
   4c31c:	002b883a 	mov	r21,zero
   4c320:	003d3c06 	br	4b814 <__alt_data_end+0xfffd9814>
   4c324:	d9402317 	ldw	r5,140(sp)
   4c328:	d9002717 	ldw	r4,156(sp)
   4c32c:	d9801a04 	addi	r6,sp,104
   4c330:	004b2580 	call	4b258 <__ssprint_r>
   4c334:	103f7c1e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c338:	d8c01c17 	ldw	r3,112(sp)
   4c33c:	d8801b17 	ldw	r2,108(sp)
   4c340:	d811883a 	mov	r8,sp
   4c344:	003edd06 	br	4bebc <__alt_data_end+0xfffd9ebc>
   4c348:	8080100c 	andi	r2,r16,64
   4c34c:	d8001d85 	stb	zero,118(sp)
   4c350:	10008426 	beq	r2,zero,4c564 <___svfiprintf_internal_r+0x113c>
   4c354:	d9402417 	ldw	r5,144(sp)
   4c358:	d8c02017 	ldw	r3,128(sp)
   4c35c:	0029883a 	mov	r20,zero
   4c360:	28800104 	addi	r2,r5,4
   4c364:	2c80000b 	ldhu	r18,0(r5)
   4c368:	183eab0e 	bge	r3,zero,4be18 <__alt_data_end+0xfffd9e18>
   4c36c:	d8802415 	stw	r2,144(sp)
   4c370:	002b883a 	mov	r21,zero
   4c374:	9504b03a 	or	r2,r18,r20
   4c378:	103e171e 	bne	r2,zero,4bbd8 <__alt_data_end+0xfffd9bd8>
   4c37c:	00800044 	movi	r2,1
   4c380:	10803fcc 	andi	r2,r2,255
   4c384:	00c00044 	movi	r3,1
   4c388:	10c05c26 	beq	r2,r3,4c4fc <___svfiprintf_internal_r+0x10d4>
   4c38c:	00c00084 	movi	r3,2
   4c390:	10fd1e26 	beq	r2,r3,4b80c <__alt_data_end+0xfffd980c>
   4c394:	003ec406 	br	4bea8 <__alt_data_end+0xfffd9ea8>
   4c398:	d9401e17 	ldw	r5,120(sp)
   4c39c:	2c69c83a 	sub	r20,r5,r17
   4c3a0:	003d4506 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4c3a4:	d8802415 	stw	r2,144(sp)
   4c3a8:	98c00007 	ldb	r3,0(r19)
   4c3ac:	003c6a06 	br	4b558 <__alt_data_end+0xfffd9558>
   4c3b0:	d9402317 	ldw	r5,140(sp)
   4c3b4:	d9002717 	ldw	r4,156(sp)
   4c3b8:	d9801a04 	addi	r6,sp,104
   4c3bc:	004b2580 	call	4b258 <__ssprint_r>
   4c3c0:	103f591e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c3c4:	d8c01c17 	ldw	r3,112(sp)
   4c3c8:	003f4406 	br	4c0dc <__alt_data_end+0xfffda0dc>
   4c3cc:	01400174 	movhi	r5,5
   4c3d0:	295a2804 	addi	r5,r5,26784
   4c3d4:	d9402915 	stw	r5,164(sp)
   4c3d8:	003d0906 	br	4b800 <__alt_data_end+0xfffd9800>
   4c3dc:	d8c02417 	ldw	r3,144(sp)
   4c3e0:	d9002617 	ldw	r4,152(sp)
   4c3e4:	d9402417 	ldw	r5,144(sp)
   4c3e8:	18800017 	ldw	r2,0(r3)
   4c3ec:	2007d7fa 	srai	r3,r4,31
   4c3f0:	29400104 	addi	r5,r5,4
   4c3f4:	d9402415 	stw	r5,144(sp)
   4c3f8:	11000015 	stw	r4,0(r2)
   4c3fc:	10c00115 	stw	r3,4(r2)
   4c400:	003c2b06 	br	4b4b0 <__alt_data_end+0xfffd94b0>
   4c404:	d8c01d45 	stb	r3,117(sp)
   4c408:	d8c02017 	ldw	r3,128(sp)
   4c40c:	00800c04 	movi	r2,48
   4c410:	d8801d05 	stb	r2,116(sp)
   4c414:	d8001d85 	stb	zero,118(sp)
   4c418:	80800094 	ori	r2,r16,2
   4c41c:	1800ac16 	blt	r3,zero,4c6d0 <___svfiprintf_internal_r+0x12a8>
   4c420:	00bfdfc4 	movi	r2,-129
   4c424:	80a0703a 	and	r16,r16,r2
   4c428:	84000094 	ori	r16,r16,2
   4c42c:	002b883a 	mov	r21,zero
   4c430:	003cf806 	br	4b814 <__alt_data_end+0xfffd9814>
   4c434:	98c00007 	ldb	r3,0(r19)
   4c438:	003c4706 	br	4b558 <__alt_data_end+0xfffd9558>
   4c43c:	d9402417 	ldw	r5,144(sp)
   4c440:	2c800017 	ldw	r18,0(r5)
   4c444:	29400104 	addi	r5,r5,4
   4c448:	d9402415 	stw	r5,144(sp)
   4c44c:	9029d7fa 	srai	r20,r18,31
   4c450:	a005883a 	mov	r2,r20
   4c454:	003dd806 	br	4bbb8 <__alt_data_end+0xfffd9bb8>
   4c458:	d9402417 	ldw	r5,144(sp)
   4c45c:	0029883a 	mov	r20,zero
   4c460:	2c800017 	ldw	r18,0(r5)
   4c464:	29400104 	addi	r5,r5,4
   4c468:	d9402415 	stw	r5,144(sp)
   4c46c:	003cdb06 	br	4b7dc <__alt_data_end+0xfffd97dc>
   4c470:	8080100c 	andi	r2,r16,64
   4c474:	d8001d85 	stb	zero,118(sp)
   4c478:	10003326 	beq	r2,zero,4c548 <___svfiprintf_internal_r+0x1120>
   4c47c:	d9002417 	ldw	r4,144(sp)
   4c480:	d9402017 	ldw	r5,128(sp)
   4c484:	0029883a 	mov	r20,zero
   4c488:	20800104 	addi	r2,r4,4
   4c48c:	2480000b 	ldhu	r18,0(r4)
   4c490:	283e7e0e 	bge	r5,zero,4be8c <__alt_data_end+0xfffd9e8c>
   4c494:	9506b03a 	or	r3,r18,r20
   4c498:	d8802415 	stw	r2,144(sp)
   4c49c:	183d271e 	bne	r3,zero,4b93c <__alt_data_end+0xfffd993c>
   4c4a0:	002b883a 	mov	r21,zero
   4c4a4:	0005883a 	mov	r2,zero
   4c4a8:	003fb506 	br	4c380 <__alt_data_end+0xfffda380>
   4c4ac:	98c00043 	ldbu	r3,1(r19)
   4c4b0:	8c400814 	ori	r17,r17,32
   4c4b4:	9cc00044 	addi	r19,r19,1
   4c4b8:	18c03fcc 	andi	r3,r3,255
   4c4bc:	18c0201c 	xori	r3,r3,128
   4c4c0:	18ffe004 	addi	r3,r3,-128
   4c4c4:	003c2406 	br	4b558 <__alt_data_end+0xfffd9558>
   4c4c8:	d8c02415 	stw	r3,144(sp)
   4c4cc:	002b883a 	mov	r21,zero
   4c4d0:	003fa806 	br	4c374 <__alt_data_end+0xfffda374>
   4c4d4:	01000174 	movhi	r4,5
   4c4d8:	211a2804 	addi	r4,r4,26784
   4c4dc:	d9002915 	stw	r4,164(sp)
   4c4e0:	d8c02415 	stw	r3,144(sp)
   4c4e4:	1021883a 	mov	r16,r2
   4c4e8:	9504b03a 	or	r2,r18,r20
   4c4ec:	103f8b1e 	bne	r2,zero,4c31c <__alt_data_end+0xfffda31c>
   4c4f0:	002b883a 	mov	r21,zero
   4c4f4:	00800084 	movi	r2,2
   4c4f8:	003fa106 	br	4c380 <__alt_data_end+0xfffda380>
   4c4fc:	0025883a 	mov	r18,zero
   4c500:	94800c04 	addi	r18,r18,48
   4c504:	dc8019c5 	stb	r18,103(sp)
   4c508:	dd002c17 	ldw	r20,176(sp)
   4c50c:	dc4019c4 	addi	r17,sp,103
   4c510:	003ce906 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4c514:	d9402317 	ldw	r5,140(sp)
   4c518:	d9002717 	ldw	r4,156(sp)
   4c51c:	d9801a04 	addi	r6,sp,104
   4c520:	004b2580 	call	4b258 <__ssprint_r>
   4c524:	103f001e 	bne	r2,zero,4c128 <__alt_data_end+0xfffda128>
   4c528:	d8c01c17 	ldw	r3,112(sp)
   4c52c:	d8801b17 	ldw	r2,108(sp)
   4c530:	d811883a 	mov	r8,sp
   4c534:	003e7e06 	br	4bf30 <__alt_data_end+0xfffd9f30>
   4c538:	01400174 	movhi	r5,5
   4c53c:	295a9104 	addi	r5,r5,27204
   4c540:	d9402115 	stw	r5,132(sp)
   4c544:	003ea406 	br	4bfd8 <__alt_data_end+0xfffd9fd8>
   4c548:	d8c02417 	ldw	r3,144(sp)
   4c54c:	d9002017 	ldw	r4,128(sp)
   4c550:	0029883a 	mov	r20,zero
   4c554:	18800104 	addi	r2,r3,4
   4c558:	1c800017 	ldw	r18,0(r3)
   4c55c:	203e4b0e 	bge	r4,zero,4be8c <__alt_data_end+0xfffd9e8c>
   4c560:	003fcc06 	br	4c494 <__alt_data_end+0xfffda494>
   4c564:	d9002417 	ldw	r4,144(sp)
   4c568:	d9402017 	ldw	r5,128(sp)
   4c56c:	0029883a 	mov	r20,zero
   4c570:	20800104 	addi	r2,r4,4
   4c574:	24800017 	ldw	r18,0(r4)
   4c578:	283e270e 	bge	r5,zero,4be18 <__alt_data_end+0xfffd9e18>
   4c57c:	003f7b06 	br	4c36c <__alt_data_end+0xfffda36c>
   4c580:	8400100c 	andi	r16,r16,64
   4c584:	80003326 	beq	r16,zero,4c654 <___svfiprintf_internal_r+0x122c>
   4c588:	d9402417 	ldw	r5,144(sp)
   4c58c:	d8c02617 	ldw	r3,152(sp)
   4c590:	28800017 	ldw	r2,0(r5)
   4c594:	29400104 	addi	r5,r5,4
   4c598:	d9402415 	stw	r5,144(sp)
   4c59c:	10c0000d 	sth	r3,0(r2)
   4c5a0:	003bc306 	br	4b4b0 <__alt_data_end+0xfffd94b0>
   4c5a4:	d9002417 	ldw	r4,144(sp)
   4c5a8:	0029883a 	mov	r20,zero
   4c5ac:	24800017 	ldw	r18,0(r4)
   4c5b0:	21000104 	addi	r4,r4,4
   4c5b4:	d9002415 	stw	r4,144(sp)
   4c5b8:	003c8806 	br	4b7dc <__alt_data_end+0xfffd97dc>
   4c5bc:	d8c02417 	ldw	r3,144(sp)
   4c5c0:	1c800017 	ldw	r18,0(r3)
   4c5c4:	18c00104 	addi	r3,r3,4
   4c5c8:	d8c02415 	stw	r3,144(sp)
   4c5cc:	9029d7fa 	srai	r20,r18,31
   4c5d0:	a005883a 	mov	r2,r20
   4c5d4:	003d7806 	br	4bbb8 <__alt_data_end+0xfffd9bb8>
   4c5d8:	8809883a 	mov	r4,r17
   4c5dc:	da002d15 	stw	r8,180(sp)
   4c5e0:	00416b80 	call	416b8 <strlen>
   4c5e4:	1029883a 	mov	r20,r2
   4c5e8:	dd401d83 	ldbu	r21,118(sp)
   4c5ec:	ddc02415 	stw	r23,144(sp)
   4c5f0:	d8002015 	stw	zero,128(sp)
   4c5f4:	da002d17 	ldw	r8,180(sp)
   4c5f8:	003caf06 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4c5fc:	013fffc4 	movi	r4,-1
   4c600:	003df206 	br	4bdcc <__alt_data_end+0xfffd9dcc>
   4c604:	dd002017 	ldw	r20,128(sp)
   4c608:	00800184 	movi	r2,6
   4c60c:	1500012e 	bgeu	r2,r20,4c614 <___svfiprintf_internal_r+0x11ec>
   4c610:	1029883a 	mov	r20,r2
   4c614:	a025883a 	mov	r18,r20
   4c618:	a0004116 	blt	r20,zero,4c720 <___svfiprintf_internal_r+0x12f8>
   4c61c:	04400174 	movhi	r17,5
   4c620:	ddc02415 	stw	r23,144(sp)
   4c624:	8c5a2d04 	addi	r17,r17,26804
   4c628:	003ce806 	br	4b9cc <__alt_data_end+0xfffd99cc>
   4c62c:	04001004 	movi	r16,64
   4c630:	800b883a 	mov	r5,r16
   4c634:	0048b380 	call	48b38 <_malloc_r>
   4c638:	d8c02317 	ldw	r3,140(sp)
   4c63c:	18800015 	stw	r2,0(r3)
   4c640:	18800415 	stw	r2,16(r3)
   4c644:	10004d26 	beq	r2,zero,4c77c <___svfiprintf_internal_r+0x1354>
   4c648:	d9402317 	ldw	r5,140(sp)
   4c64c:	2c000515 	stw	r16,20(r5)
   4c650:	003b8906 	br	4b478 <__alt_data_end+0xfffd9478>
   4c654:	d9002417 	ldw	r4,144(sp)
   4c658:	d9402617 	ldw	r5,152(sp)
   4c65c:	20800017 	ldw	r2,0(r4)
   4c660:	21000104 	addi	r4,r4,4
   4c664:	d9002415 	stw	r4,144(sp)
   4c668:	11400015 	stw	r5,0(r2)
   4c66c:	003b9006 	br	4b4b0 <__alt_data_end+0xfffd94b0>
   4c670:	8080004c 	andi	r2,r16,1
   4c674:	002b883a 	mov	r21,zero
   4c678:	10000526 	beq	r2,zero,4c690 <___svfiprintf_internal_r+0x1268>
   4c67c:	00800c04 	movi	r2,48
   4c680:	d88019c5 	stb	r2,103(sp)
   4c684:	dd002c17 	ldw	r20,176(sp)
   4c688:	dc4019c4 	addi	r17,sp,103
   4c68c:	003c8a06 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4c690:	0029883a 	mov	r20,zero
   4c694:	dc401a04 	addi	r17,sp,104
   4c698:	003c8706 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4c69c:	01400174 	movhi	r5,5
   4c6a0:	295a9504 	addi	r5,r5,27220
   4c6a4:	d9402815 	stw	r5,160(sp)
   4c6a8:	003cff06 	br	4baa8 <__alt_data_end+0xfffd9aa8>
   4c6ac:	00bfffc4 	movi	r2,-1
   4c6b0:	003ea206 	br	4c13c <__alt_data_end+0xfffda13c>
   4c6b4:	00800044 	movi	r2,1
   4c6b8:	10803fcc 	andi	r2,r2,255
   4c6bc:	00c00044 	movi	r3,1
   4c6c0:	10fd4526 	beq	r2,r3,4bbd8 <__alt_data_end+0xfffd9bd8>
   4c6c4:	00c00084 	movi	r3,2
   4c6c8:	10fc5226 	beq	r2,r3,4b814 <__alt_data_end+0xfffd9814>
   4c6cc:	003c9c06 	br	4b940 <__alt_data_end+0xfffd9940>
   4c6d0:	1021883a 	mov	r16,r2
   4c6d4:	002b883a 	mov	r21,zero
   4c6d8:	00800084 	movi	r2,2
   4c6dc:	003ff606 	br	4c6b8 <__alt_data_end+0xfffda6b8>
   4c6e0:	01000174 	movhi	r4,5
   4c6e4:	211a9504 	addi	r4,r4,27220
   4c6e8:	d9002815 	stw	r4,160(sp)
   4c6ec:	003e7206 	br	4c0b8 <__alt_data_end+0xfffda0b8>
   4c6f0:	01400174 	movhi	r5,5
   4c6f4:	295a9104 	addi	r5,r5,27204
   4c6f8:	d9402115 	stw	r5,132(sp)
   4c6fc:	003ec506 	br	4c214 <__alt_data_end+0xfffda214>
   4c700:	e027883a 	mov	r19,fp
   4c704:	d8002015 	stw	zero,128(sp)
   4c708:	003b9406 	br	4b55c <__alt_data_end+0xfffd955c>
   4c70c:	dd002017 	ldw	r20,128(sp)
   4c710:	dd401d83 	ldbu	r21,118(sp)
   4c714:	ddc02415 	stw	r23,144(sp)
   4c718:	d8002015 	stw	zero,128(sp)
   4c71c:	003c6606 	br	4b8b8 <__alt_data_end+0xfffd98b8>
   4c720:	0025883a 	mov	r18,zero
   4c724:	003fbd06 	br	4c61c <__alt_data_end+0xfffda61c>
   4c728:	d9402417 	ldw	r5,144(sp)
   4c72c:	d8c02417 	ldw	r3,144(sp)
   4c730:	29400017 	ldw	r5,0(r5)
   4c734:	19000104 	addi	r4,r3,4
   4c738:	d9002415 	stw	r4,144(sp)
   4c73c:	d9402015 	stw	r5,128(sp)
   4c740:	98c00043 	ldbu	r3,1(r19)
   4c744:	e027883a 	mov	r19,fp
   4c748:	283f5b0e 	bge	r5,zero,4c4b8 <__alt_data_end+0xfffda4b8>
   4c74c:	18c03fcc 	andi	r3,r3,255
   4c750:	013fffc4 	movi	r4,-1
   4c754:	18c0201c 	xori	r3,r3,128
   4c758:	d9002015 	stw	r4,128(sp)
   4c75c:	18ffe004 	addi	r3,r3,-128
   4c760:	003b7d06 	br	4b558 <__alt_data_end+0xfffd9558>
   4c764:	dd401d85 	stb	r21,118(sp)
   4c768:	003cf306 	br	4bb38 <__alt_data_end+0xfffd9b38>
   4c76c:	dd401d85 	stb	r21,118(sp)
   4c770:	003d4e06 	br	4bcac <__alt_data_end+0xfffd9cac>
   4c774:	dd401d85 	stb	r21,118(sp)
   4c778:	003c0e06 	br	4b7b4 <__alt_data_end+0xfffd97b4>
   4c77c:	d9002717 	ldw	r4,156(sp)
   4c780:	00800304 	movi	r2,12
   4c784:	20800015 	stw	r2,0(r4)
   4c788:	00bfffc4 	movi	r2,-1
   4c78c:	003e6b06 	br	4c13c <__alt_data_end+0xfffda13c>
   4c790:	dd401d85 	stb	r21,118(sp)
   4c794:	003d0006 	br	4bb98 <__alt_data_end+0xfffd9b98>
   4c798:	dd401d85 	stb	r21,118(sp)
   4c79c:	003d7106 	br	4bd64 <__alt_data_end+0xfffd9d64>
   4c7a0:	dd401d85 	stb	r21,118(sp)
   4c7a4:	003c5706 	br	4b904 <__alt_data_end+0xfffd9904>
   4c7a8:	dd401d85 	stb	r21,118(sp)
   4c7ac:	003c2e06 	br	4b868 <__alt_data_end+0xfffd9868>
   4c7b0:	dd401d85 	stb	r21,118(sp)
   4c7b4:	003d8c06 	br	4bde8 <__alt_data_end+0xfffd9de8>
   4c7b8:	dd401d85 	stb	r21,118(sp)
   4c7bc:	003da706 	br	4be5c <__alt_data_end+0xfffd9e5c>
   4c7c0:	dd401d85 	stb	r21,118(sp)
   4c7c4:	003cc806 	br	4bae8 <__alt_data_end+0xfffd9ae8>

0004c7c8 <__sprint_r.part.0>:
   4c7c8:	28801917 	ldw	r2,100(r5)
   4c7cc:	defff604 	addi	sp,sp,-40
   4c7d0:	dd400515 	stw	r21,20(sp)
   4c7d4:	dfc00915 	stw	ra,36(sp)
   4c7d8:	df000815 	stw	fp,32(sp)
   4c7dc:	ddc00715 	stw	r23,28(sp)
   4c7e0:	dd800615 	stw	r22,24(sp)
   4c7e4:	dd000415 	stw	r20,16(sp)
   4c7e8:	dcc00315 	stw	r19,12(sp)
   4c7ec:	dc800215 	stw	r18,8(sp)
   4c7f0:	dc400115 	stw	r17,4(sp)
   4c7f4:	dc000015 	stw	r16,0(sp)
   4c7f8:	1088000c 	andi	r2,r2,8192
   4c7fc:	302b883a 	mov	r21,r6
   4c800:	10002e26 	beq	r2,zero,4c8bc <__sprint_r.part.0+0xf4>
   4c804:	30800217 	ldw	r2,8(r6)
   4c808:	35800017 	ldw	r22,0(r6)
   4c80c:	10002926 	beq	r2,zero,4c8b4 <__sprint_r.part.0+0xec>
   4c810:	2827883a 	mov	r19,r5
   4c814:	2029883a 	mov	r20,r4
   4c818:	b5c00104 	addi	r23,r22,4
   4c81c:	04bfffc4 	movi	r18,-1
   4c820:	bc400017 	ldw	r17,0(r23)
   4c824:	b4000017 	ldw	r16,0(r22)
   4c828:	0039883a 	mov	fp,zero
   4c82c:	8822d0ba 	srli	r17,r17,2
   4c830:	8800031e 	bne	r17,zero,4c840 <__sprint_r.part.0+0x78>
   4c834:	00001806 	br	4c898 <__sprint_r.part.0+0xd0>
   4c838:	84000104 	addi	r16,r16,4
   4c83c:	8f001526 	beq	r17,fp,4c894 <__sprint_r.part.0+0xcc>
   4c840:	81400017 	ldw	r5,0(r16)
   4c844:	980d883a 	mov	r6,r19
   4c848:	a009883a 	mov	r4,r20
   4c84c:	004e4100 	call	4e410 <_fputwc_r>
   4c850:	e7000044 	addi	fp,fp,1
   4c854:	14bff81e 	bne	r2,r18,4c838 <__alt_data_end+0xfffda838>
   4c858:	9005883a 	mov	r2,r18
   4c85c:	a8000215 	stw	zero,8(r21)
   4c860:	a8000115 	stw	zero,4(r21)
   4c864:	dfc00917 	ldw	ra,36(sp)
   4c868:	df000817 	ldw	fp,32(sp)
   4c86c:	ddc00717 	ldw	r23,28(sp)
   4c870:	dd800617 	ldw	r22,24(sp)
   4c874:	dd400517 	ldw	r21,20(sp)
   4c878:	dd000417 	ldw	r20,16(sp)
   4c87c:	dcc00317 	ldw	r19,12(sp)
   4c880:	dc800217 	ldw	r18,8(sp)
   4c884:	dc400117 	ldw	r17,4(sp)
   4c888:	dc000017 	ldw	r16,0(sp)
   4c88c:	dec00a04 	addi	sp,sp,40
   4c890:	f800283a 	ret
   4c894:	a8800217 	ldw	r2,8(r21)
   4c898:	8c63883a 	add	r17,r17,r17
   4c89c:	8c63883a 	add	r17,r17,r17
   4c8a0:	1445c83a 	sub	r2,r2,r17
   4c8a4:	a8800215 	stw	r2,8(r21)
   4c8a8:	b5800204 	addi	r22,r22,8
   4c8ac:	bdc00204 	addi	r23,r23,8
   4c8b0:	103fdb1e 	bne	r2,zero,4c820 <__alt_data_end+0xfffda820>
   4c8b4:	0005883a 	mov	r2,zero
   4c8b8:	003fe806 	br	4c85c <__alt_data_end+0xfffda85c>
   4c8bc:	00482500 	call	48250 <__sfvwrite_r>
   4c8c0:	003fe606 	br	4c85c <__alt_data_end+0xfffda85c>

0004c8c4 <__sprint_r>:
   4c8c4:	30c00217 	ldw	r3,8(r6)
   4c8c8:	18000126 	beq	r3,zero,4c8d0 <__sprint_r+0xc>
   4c8cc:	004c7c81 	jmpi	4c7c8 <__sprint_r.part.0>
   4c8d0:	30000115 	stw	zero,4(r6)
   4c8d4:	0005883a 	mov	r2,zero
   4c8d8:	f800283a 	ret

0004c8dc <___vfiprintf_internal_r>:
   4c8dc:	deffca04 	addi	sp,sp,-216
   4c8e0:	dd403115 	stw	r21,196(sp)
   4c8e4:	dfc03515 	stw	ra,212(sp)
   4c8e8:	df003415 	stw	fp,208(sp)
   4c8ec:	ddc03315 	stw	r23,204(sp)
   4c8f0:	dd803215 	stw	r22,200(sp)
   4c8f4:	dd003015 	stw	r20,192(sp)
   4c8f8:	dcc02f15 	stw	r19,188(sp)
   4c8fc:	dc802e15 	stw	r18,184(sp)
   4c900:	dc402d15 	stw	r17,180(sp)
   4c904:	dc002c15 	stw	r16,176(sp)
   4c908:	d9002115 	stw	r4,132(sp)
   4c90c:	d9402015 	stw	r5,128(sp)
   4c910:	d9c02215 	stw	r7,136(sp)
   4c914:	302b883a 	mov	r21,r6
   4c918:	20000226 	beq	r4,zero,4c924 <___vfiprintf_internal_r+0x48>
   4c91c:	20800e17 	ldw	r2,56(r4)
   4c920:	1000cf26 	beq	r2,zero,4cc60 <___vfiprintf_internal_r+0x384>
   4c924:	d8c02017 	ldw	r3,128(sp)
   4c928:	1880030b 	ldhu	r2,12(r3)
   4c92c:	10c8000c 	andi	r3,r2,8192
   4c930:	1800071e 	bne	r3,zero,4c950 <___vfiprintf_internal_r+0x74>
   4c934:	d9402017 	ldw	r5,128(sp)
   4c938:	00f7ffc4 	movi	r3,-8193
   4c93c:	10880014 	ori	r2,r2,8192
   4c940:	29001917 	ldw	r4,100(r5)
   4c944:	2880030d 	sth	r2,12(r5)
   4c948:	20c6703a 	and	r3,r4,r3
   4c94c:	28c01915 	stw	r3,100(r5)
   4c950:	10c0020c 	andi	r3,r2,8
   4c954:	1800a526 	beq	r3,zero,4cbec <___vfiprintf_internal_r+0x310>
   4c958:	d9002017 	ldw	r4,128(sp)
   4c95c:	20c00417 	ldw	r3,16(r4)
   4c960:	1800a226 	beq	r3,zero,4cbec <___vfiprintf_internal_r+0x310>
   4c964:	1080068c 	andi	r2,r2,26
   4c968:	00c00284 	movi	r3,10
   4c96c:	10c0a826 	beq	r2,r3,4cc10 <___vfiprintf_internal_r+0x334>
   4c970:	d9001a04 	addi	r4,sp,104
   4c974:	d94019c4 	addi	r5,sp,103
   4c978:	04800174 	movhi	r18,5
   4c97c:	2145c83a 	sub	r2,r4,r5
   4c980:	949a9904 	addi	r18,r18,27236
   4c984:	d9001e15 	stw	r4,120(sp)
   4c988:	d9401f15 	stw	r5,124(sp)
   4c98c:	dec01a15 	stw	sp,104(sp)
   4c990:	d8001c15 	stw	zero,112(sp)
   4c994:	d8001b15 	stw	zero,108(sp)
   4c998:	d811883a 	mov	r8,sp
   4c99c:	d8002615 	stw	zero,152(sp)
   4c9a0:	d8002415 	stw	zero,144(sp)
   4c9a4:	d8802815 	stw	r2,160(sp)
   4c9a8:	a82d883a 	mov	r22,r21
   4c9ac:	b0800007 	ldb	r2,0(r22)
   4c9b0:	10040d26 	beq	r2,zero,4d9e8 <___vfiprintf_internal_r+0x110c>
   4c9b4:	00c00944 	movi	r3,37
   4c9b8:	b029883a 	mov	r20,r22
   4c9bc:	10c0021e 	bne	r2,r3,4c9c8 <___vfiprintf_internal_r+0xec>
   4c9c0:	00001606 	br	4ca1c <___vfiprintf_internal_r+0x140>
   4c9c4:	10c00326 	beq	r2,r3,4c9d4 <___vfiprintf_internal_r+0xf8>
   4c9c8:	a5000044 	addi	r20,r20,1
   4c9cc:	a0800007 	ldb	r2,0(r20)
   4c9d0:	103ffc1e 	bne	r2,zero,4c9c4 <__alt_data_end+0xfffda9c4>
   4c9d4:	a5a1c83a 	sub	r16,r20,r22
   4c9d8:	80001026 	beq	r16,zero,4ca1c <___vfiprintf_internal_r+0x140>
   4c9dc:	d8c01c17 	ldw	r3,112(sp)
   4c9e0:	d8801b17 	ldw	r2,108(sp)
   4c9e4:	45800015 	stw	r22,0(r8)
   4c9e8:	80c7883a 	add	r3,r16,r3
   4c9ec:	10800044 	addi	r2,r2,1
   4c9f0:	44000115 	stw	r16,4(r8)
   4c9f4:	d8c01c15 	stw	r3,112(sp)
   4c9f8:	d8801b15 	stw	r2,108(sp)
   4c9fc:	010001c4 	movi	r4,7
   4ca00:	2080750e 	bge	r4,r2,4cbd8 <___vfiprintf_internal_r+0x2fc>
   4ca04:	1803951e 	bne	r3,zero,4d85c <___vfiprintf_internal_r+0xf80>
   4ca08:	d8c02417 	ldw	r3,144(sp)
   4ca0c:	d8001b15 	stw	zero,108(sp)
   4ca10:	d811883a 	mov	r8,sp
   4ca14:	1c07883a 	add	r3,r3,r16
   4ca18:	d8c02415 	stw	r3,144(sp)
   4ca1c:	a0800007 	ldb	r2,0(r20)
   4ca20:	1002e026 	beq	r2,zero,4d5a4 <___vfiprintf_internal_r+0xcc8>
   4ca24:	a5800044 	addi	r22,r20,1
   4ca28:	a0c00047 	ldb	r3,1(r20)
   4ca2c:	d8001d85 	stb	zero,118(sp)
   4ca30:	0027883a 	mov	r19,zero
   4ca34:	d8002305 	stb	zero,140(sp)
   4ca38:	043fffc4 	movi	r16,-1
   4ca3c:	d8002515 	stw	zero,148(sp)
   4ca40:	0023883a 	mov	r17,zero
   4ca44:	05001604 	movi	r20,88
   4ca48:	05400244 	movi	r21,9
   4ca4c:	402f883a 	mov	r23,r8
   4ca50:	b5800044 	addi	r22,r22,1
   4ca54:	18bff804 	addi	r2,r3,-32
   4ca58:	a0827736 	bltu	r20,r2,4d438 <___vfiprintf_internal_r+0xb5c>
   4ca5c:	100490ba 	slli	r2,r2,2
   4ca60:	01000174 	movhi	r4,5
   4ca64:	21329d04 	addi	r4,r4,-13708
   4ca68:	1105883a 	add	r2,r2,r4
   4ca6c:	10800017 	ldw	r2,0(r2)
   4ca70:	1000683a 	jmp	r2
   4ca74:	0004d138 	rdprs	zero,zero,4932
   4ca78:	0004d438 	rdprs	zero,zero,4944
   4ca7c:	0004d438 	rdprs	zero,zero,4944
   4ca80:	0004d154 	movui	zero,4933
   4ca84:	0004d438 	rdprs	zero,zero,4944
   4ca88:	0004d438 	rdprs	zero,zero,4944
   4ca8c:	0004d438 	rdprs	zero,zero,4944
   4ca90:	0004d438 	rdprs	zero,zero,4944
   4ca94:	0004d438 	rdprs	zero,zero,4944
   4ca98:	0004d438 	rdprs	zero,zero,4944
   4ca9c:	0004d35c 	xori	zero,zero,4941
   4caa0:	0004d380 	call	4d38 <__alt_mem_RAM-0x3b2c8>
   4caa4:	0004d438 	rdprs	zero,zero,4944
   4caa8:	0004cc78 	rdprs	zero,zero,4913
   4caac:	0004d394 	movui	zero,4942
   4cab0:	0004d438 	rdprs	zero,zero,4944
   4cab4:	0004d160 	cmpeqi	zero,zero,4933
   4cab8:	0004d16c 	andhi	zero,zero,4933
   4cabc:	0004d16c 	andhi	zero,zero,4933
   4cac0:	0004d16c 	andhi	zero,zero,4933
   4cac4:	0004d16c 	andhi	zero,zero,4933
   4cac8:	0004d16c 	andhi	zero,zero,4933
   4cacc:	0004d16c 	andhi	zero,zero,4933
   4cad0:	0004d16c 	andhi	zero,zero,4933
   4cad4:	0004d16c 	andhi	zero,zero,4933
   4cad8:	0004d16c 	andhi	zero,zero,4933
   4cadc:	0004d438 	rdprs	zero,zero,4944
   4cae0:	0004d438 	rdprs	zero,zero,4944
   4cae4:	0004d438 	rdprs	zero,zero,4944
   4cae8:	0004d438 	rdprs	zero,zero,4944
   4caec:	0004d438 	rdprs	zero,zero,4944
   4caf0:	0004d438 	rdprs	zero,zero,4944
   4caf4:	0004d438 	rdprs	zero,zero,4944
   4caf8:	0004d438 	rdprs	zero,zero,4944
   4cafc:	0004d438 	rdprs	zero,zero,4944
   4cb00:	0004d438 	rdprs	zero,zero,4944
   4cb04:	0004d1ac 	andhi	zero,zero,4934
   4cb08:	0004d438 	rdprs	zero,zero,4944
   4cb0c:	0004d438 	rdprs	zero,zero,4944
   4cb10:	0004d438 	rdprs	zero,zero,4944
   4cb14:	0004d438 	rdprs	zero,zero,4944
   4cb18:	0004d438 	rdprs	zero,zero,4944
   4cb1c:	0004d438 	rdprs	zero,zero,4944
   4cb20:	0004d438 	rdprs	zero,zero,4944
   4cb24:	0004d438 	rdprs	zero,zero,4944
   4cb28:	0004d438 	rdprs	zero,zero,4944
   4cb2c:	0004d438 	rdprs	zero,zero,4944
   4cb30:	0004d1e8 	cmpgeui	zero,zero,4935
   4cb34:	0004d438 	rdprs	zero,zero,4944
   4cb38:	0004d438 	rdprs	zero,zero,4944
   4cb3c:	0004d438 	rdprs	zero,zero,4944
   4cb40:	0004d438 	rdprs	zero,zero,4944
   4cb44:	0004d438 	rdprs	zero,zero,4944
   4cb48:	0004d244 	movi	zero,4937
   4cb4c:	0004d438 	rdprs	zero,zero,4944
   4cb50:	0004d438 	rdprs	zero,zero,4944
   4cb54:	0004d2b8 	rdprs	zero,zero,4938
   4cb58:	0004d438 	rdprs	zero,zero,4944
   4cb5c:	0004d438 	rdprs	zero,zero,4944
   4cb60:	0004d438 	rdprs	zero,zero,4944
   4cb64:	0004d438 	rdprs	zero,zero,4944
   4cb68:	0004d438 	rdprs	zero,zero,4944
   4cb6c:	0004d438 	rdprs	zero,zero,4944
   4cb70:	0004d438 	rdprs	zero,zero,4944
   4cb74:	0004d438 	rdprs	zero,zero,4944
   4cb78:	0004d438 	rdprs	zero,zero,4944
   4cb7c:	0004d438 	rdprs	zero,zero,4944
   4cb80:	0004d060 	cmpeqi	zero,zero,4929
   4cb84:	0004d090 	cmplti	zero,zero,4930
   4cb88:	0004d438 	rdprs	zero,zero,4944
   4cb8c:	0004d438 	rdprs	zero,zero,4944
   4cb90:	0004d438 	rdprs	zero,zero,4944
   4cb94:	0004d3e0 	cmpeqi	zero,zero,4943
   4cb98:	0004d090 	cmplti	zero,zero,4930
   4cb9c:	0004d438 	rdprs	zero,zero,4944
   4cba0:	0004d438 	rdprs	zero,zero,4944
   4cba4:	0004cf38 	rdprs	zero,zero,4924
   4cba8:	0004d438 	rdprs	zero,zero,4944
   4cbac:	0004cf4c 	andi	zero,zero,4925
   4cbb0:	0004cf84 	movi	zero,4926
   4cbb4:	0004cc84 	movi	zero,4914
   4cbb8:	0004cf2c 	andhi	zero,zero,4924
   4cbbc:	0004d438 	rdprs	zero,zero,4944
   4cbc0:	0004d2f8 	rdprs	zero,zero,4939
   4cbc4:	0004d438 	rdprs	zero,zero,4944
   4cbc8:	0004d344 	movi	zero,4941
   4cbcc:	0004d438 	rdprs	zero,zero,4944
   4cbd0:	0004d438 	rdprs	zero,zero,4944
   4cbd4:	0004d008 	cmpgei	zero,zero,4928
   4cbd8:	42000204 	addi	r8,r8,8
   4cbdc:	d8c02417 	ldw	r3,144(sp)
   4cbe0:	1c07883a 	add	r3,r3,r16
   4cbe4:	d8c02415 	stw	r3,144(sp)
   4cbe8:	003f8c06 	br	4ca1c <__alt_data_end+0xfffdaa1c>
   4cbec:	d9402017 	ldw	r5,128(sp)
   4cbf0:	d9002117 	ldw	r4,132(sp)
   4cbf4:	0045dc00 	call	45dc0 <__swsetup_r>
   4cbf8:	1003c11e 	bne	r2,zero,4db00 <___vfiprintf_internal_r+0x1224>
   4cbfc:	d9402017 	ldw	r5,128(sp)
   4cc00:	00c00284 	movi	r3,10
   4cc04:	2880030b 	ldhu	r2,12(r5)
   4cc08:	1080068c 	andi	r2,r2,26
   4cc0c:	10ff581e 	bne	r2,r3,4c970 <__alt_data_end+0xfffda970>
   4cc10:	d8c02017 	ldw	r3,128(sp)
   4cc14:	1880038f 	ldh	r2,14(r3)
   4cc18:	103f5516 	blt	r2,zero,4c970 <__alt_data_end+0xfffda970>
   4cc1c:	d9c02217 	ldw	r7,136(sp)
   4cc20:	d9002117 	ldw	r4,132(sp)
   4cc24:	a80d883a 	mov	r6,r21
   4cc28:	180b883a 	mov	r5,r3
   4cc2c:	004de040 	call	4de04 <__sbprintf>
   4cc30:	dfc03517 	ldw	ra,212(sp)
   4cc34:	df003417 	ldw	fp,208(sp)
   4cc38:	ddc03317 	ldw	r23,204(sp)
   4cc3c:	dd803217 	ldw	r22,200(sp)
   4cc40:	dd403117 	ldw	r21,196(sp)
   4cc44:	dd003017 	ldw	r20,192(sp)
   4cc48:	dcc02f17 	ldw	r19,188(sp)
   4cc4c:	dc802e17 	ldw	r18,184(sp)
   4cc50:	dc402d17 	ldw	r17,180(sp)
   4cc54:	dc002c17 	ldw	r16,176(sp)
   4cc58:	dec03604 	addi	sp,sp,216
   4cc5c:	f800283a 	ret
   4cc60:	0047dcc0 	call	47dcc <__sinit>
   4cc64:	003f2f06 	br	4c924 <__alt_data_end+0xfffda924>
   4cc68:	d8c02517 	ldw	r3,148(sp)
   4cc6c:	d8802215 	stw	r2,136(sp)
   4cc70:	00c7c83a 	sub	r3,zero,r3
   4cc74:	d8c02515 	stw	r3,148(sp)
   4cc78:	8c400114 	ori	r17,r17,4
   4cc7c:	b0c00007 	ldb	r3,0(r22)
   4cc80:	003f7306 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4cc84:	00800c04 	movi	r2,48
   4cc88:	d9402217 	ldw	r5,136(sp)
   4cc8c:	d8801d05 	stb	r2,116(sp)
   4cc90:	00801e04 	movi	r2,120
   4cc94:	d8801d45 	stb	r2,117(sp)
   4cc98:	d8001d85 	stb	zero,118(sp)
   4cc9c:	b811883a 	mov	r8,r23
   4cca0:	28c00104 	addi	r3,r5,4
   4cca4:	2cc00017 	ldw	r19,0(r5)
   4cca8:	0029883a 	mov	r20,zero
   4ccac:	88800094 	ori	r2,r17,2
   4ccb0:	80032516 	blt	r16,zero,4d948 <___vfiprintf_internal_r+0x106c>
   4ccb4:	00bfdfc4 	movi	r2,-129
   4ccb8:	88a2703a 	and	r17,r17,r2
   4ccbc:	d8c02215 	stw	r3,136(sp)
   4ccc0:	8c400094 	ori	r17,r17,2
   4ccc4:	98032a1e 	bne	r19,zero,4d970 <___vfiprintf_internal_r+0x1094>
   4ccc8:	00800174 	movhi	r2,5
   4cccc:	109a2804 	addi	r2,r2,26784
   4ccd0:	d8802615 	stw	r2,152(sp)
   4ccd4:	002b883a 	mov	r21,zero
   4ccd8:	8001741e 	bne	r16,zero,4d2ac <___vfiprintf_internal_r+0x9d0>
   4ccdc:	0021883a 	mov	r16,zero
   4cce0:	0029883a 	mov	r20,zero
   4cce4:	ddc01a04 	addi	r23,sp,104
   4cce8:	8027883a 	mov	r19,r16
   4ccec:	8500010e 	bge	r16,r20,4ccf4 <___vfiprintf_internal_r+0x418>
   4ccf0:	a027883a 	mov	r19,r20
   4ccf4:	ad403fcc 	andi	r21,r21,255
   4ccf8:	ad40201c 	xori	r21,r21,128
   4ccfc:	ad7fe004 	addi	r21,r21,-128
   4cd00:	a8000126 	beq	r21,zero,4cd08 <___vfiprintf_internal_r+0x42c>
   4cd04:	9cc00044 	addi	r19,r19,1
   4cd08:	89c0008c 	andi	r7,r17,2
   4cd0c:	38000126 	beq	r7,zero,4cd14 <___vfiprintf_internal_r+0x438>
   4cd10:	9cc00084 	addi	r19,r19,2
   4cd14:	88c0210c 	andi	r3,r17,132
   4cd18:	1801dd1e 	bne	r3,zero,4d490 <___vfiprintf_internal_r+0xbb4>
   4cd1c:	d9402517 	ldw	r5,148(sp)
   4cd20:	2cebc83a 	sub	r21,r5,r19
   4cd24:	0541da0e 	bge	zero,r21,4d490 <___vfiprintf_internal_r+0xbb4>
   4cd28:	07000404 	movi	fp,16
   4cd2c:	d8801c17 	ldw	r2,112(sp)
   4cd30:	e543be0e 	bge	fp,r21,4dc2c <___vfiprintf_internal_r+0x1350>
   4cd34:	01400174 	movhi	r5,5
   4cd38:	295a9d04 	addi	r5,r5,27252
   4cd3c:	dc002715 	stw	r16,156(sp)
   4cd40:	d9801b17 	ldw	r6,108(sp)
   4cd44:	a821883a 	mov	r16,r21
   4cd48:	d9402315 	stw	r5,140(sp)
   4cd4c:	028001c4 	movi	r10,7
   4cd50:	d9c02915 	stw	r7,164(sp)
   4cd54:	182b883a 	mov	r21,r3
   4cd58:	00000506 	br	4cd70 <___vfiprintf_internal_r+0x494>
   4cd5c:	31000084 	addi	r4,r6,2
   4cd60:	42000204 	addi	r8,r8,8
   4cd64:	180d883a 	mov	r6,r3
   4cd68:	843ffc04 	addi	r16,r16,-16
   4cd6c:	e4000f0e 	bge	fp,r16,4cdac <___vfiprintf_internal_r+0x4d0>
   4cd70:	01000174 	movhi	r4,5
   4cd74:	10800404 	addi	r2,r2,16
   4cd78:	30c00044 	addi	r3,r6,1
   4cd7c:	211a9d04 	addi	r4,r4,27252
   4cd80:	41000015 	stw	r4,0(r8)
   4cd84:	47000115 	stw	fp,4(r8)
   4cd88:	d8801c15 	stw	r2,112(sp)
   4cd8c:	d8c01b15 	stw	r3,108(sp)
   4cd90:	50fff20e 	bge	r10,r3,4cd5c <__alt_data_end+0xfffdad5c>
   4cd94:	1001b21e 	bne	r2,zero,4d460 <___vfiprintf_internal_r+0xb84>
   4cd98:	843ffc04 	addi	r16,r16,-16
   4cd9c:	000d883a 	mov	r6,zero
   4cda0:	01000044 	movi	r4,1
   4cda4:	d811883a 	mov	r8,sp
   4cda8:	e43ff116 	blt	fp,r16,4cd70 <__alt_data_end+0xfffdad70>
   4cdac:	a807883a 	mov	r3,r21
   4cdb0:	d9c02917 	ldw	r7,164(sp)
   4cdb4:	802b883a 	mov	r21,r16
   4cdb8:	dc002717 	ldw	r16,156(sp)
   4cdbc:	d9402317 	ldw	r5,140(sp)
   4cdc0:	a885883a 	add	r2,r21,r2
   4cdc4:	45400115 	stw	r21,4(r8)
   4cdc8:	41400015 	stw	r5,0(r8)
   4cdcc:	d8801c15 	stw	r2,112(sp)
   4cdd0:	d9001b15 	stw	r4,108(sp)
   4cdd4:	014001c4 	movi	r5,7
   4cdd8:	29026216 	blt	r5,r4,4d764 <___vfiprintf_internal_r+0xe88>
   4cddc:	d9801d87 	ldb	r6,118(sp)
   4cde0:	42000204 	addi	r8,r8,8
   4cde4:	21400044 	addi	r5,r4,1
   4cde8:	3001ae1e 	bne	r6,zero,4d4a4 <___vfiprintf_internal_r+0xbc8>
   4cdec:	3801bb26 	beq	r7,zero,4d4dc <___vfiprintf_internal_r+0xc00>
   4cdf0:	d9001d04 	addi	r4,sp,116
   4cdf4:	10800084 	addi	r2,r2,2
   4cdf8:	41000015 	stw	r4,0(r8)
   4cdfc:	01000084 	movi	r4,2
   4ce00:	41000115 	stw	r4,4(r8)
   4ce04:	d8801c15 	stw	r2,112(sp)
   4ce08:	d9401b15 	stw	r5,108(sp)
   4ce0c:	010001c4 	movi	r4,7
   4ce10:	2142680e 	bge	r4,r5,4d7b4 <___vfiprintf_internal_r+0xed8>
   4ce14:	1002b11e 	bne	r2,zero,4d8dc <___vfiprintf_internal_r+0x1000>
   4ce18:	01802004 	movi	r6,128
   4ce1c:	01400044 	movi	r5,1
   4ce20:	0009883a 	mov	r4,zero
   4ce24:	d811883a 	mov	r8,sp
   4ce28:	1981ae1e 	bne	r3,r6,4d4e4 <___vfiprintf_internal_r+0xc08>
   4ce2c:	d8c02517 	ldw	r3,148(sp)
   4ce30:	1cf9c83a 	sub	fp,r3,r19
   4ce34:	0701ab0e 	bge	zero,fp,4d4e4 <___vfiprintf_internal_r+0xc08>
   4ce38:	05400404 	movi	r21,16
   4ce3c:	af03a90e 	bge	r21,fp,4dce4 <___vfiprintf_internal_r+0x1408>
   4ce40:	01400174 	movhi	r5,5
   4ce44:	295a9904 	addi	r5,r5,27236
   4ce48:	d9402315 	stw	r5,140(sp)
   4ce4c:	01c001c4 	movi	r7,7
   4ce50:	00000506 	br	4ce68 <___vfiprintf_internal_r+0x58c>
   4ce54:	21800084 	addi	r6,r4,2
   4ce58:	42000204 	addi	r8,r8,8
   4ce5c:	1809883a 	mov	r4,r3
   4ce60:	e73ffc04 	addi	fp,fp,-16
   4ce64:	af000d0e 	bge	r21,fp,4ce9c <___vfiprintf_internal_r+0x5c0>
   4ce68:	10800404 	addi	r2,r2,16
   4ce6c:	20c00044 	addi	r3,r4,1
   4ce70:	44800015 	stw	r18,0(r8)
   4ce74:	45400115 	stw	r21,4(r8)
   4ce78:	d8801c15 	stw	r2,112(sp)
   4ce7c:	d8c01b15 	stw	r3,108(sp)
   4ce80:	38fff40e 	bge	r7,r3,4ce54 <__alt_data_end+0xfffdae54>
   4ce84:	10022b1e 	bne	r2,zero,4d734 <___vfiprintf_internal_r+0xe58>
   4ce88:	e73ffc04 	addi	fp,fp,-16
   4ce8c:	01800044 	movi	r6,1
   4ce90:	0009883a 	mov	r4,zero
   4ce94:	d811883a 	mov	r8,sp
   4ce98:	af3ff316 	blt	r21,fp,4ce68 <__alt_data_end+0xfffdae68>
   4ce9c:	d8c02317 	ldw	r3,140(sp)
   4cea0:	1705883a 	add	r2,r2,fp
   4cea4:	47000115 	stw	fp,4(r8)
   4cea8:	40c00015 	stw	r3,0(r8)
   4ceac:	d8801c15 	stw	r2,112(sp)
   4ceb0:	d9801b15 	stw	r6,108(sp)
   4ceb4:	00c001c4 	movi	r3,7
   4ceb8:	19829416 	blt	r3,r6,4d90c <___vfiprintf_internal_r+0x1030>
   4cebc:	8521c83a 	sub	r16,r16,r20
   4cec0:	42000204 	addi	r8,r8,8
   4cec4:	31400044 	addi	r5,r6,1
   4cec8:	3009883a 	mov	r4,r6
   4cecc:	04018716 	blt	zero,r16,4d4ec <___vfiprintf_internal_r+0xc10>
   4ced0:	a085883a 	add	r2,r20,r2
   4ced4:	45c00015 	stw	r23,0(r8)
   4ced8:	45000115 	stw	r20,4(r8)
   4cedc:	d8801c15 	stw	r2,112(sp)
   4cee0:	d9401b15 	stw	r5,108(sp)
   4cee4:	00c001c4 	movi	r3,7
   4cee8:	1941c20e 	bge	r3,r5,4d5f4 <___vfiprintf_internal_r+0xd18>
   4ceec:	1002531e 	bne	r2,zero,4d83c <___vfiprintf_internal_r+0xf60>
   4cef0:	d8001b15 	stw	zero,108(sp)
   4cef4:	8c40010c 	andi	r17,r17,4
   4cef8:	88023226 	beq	r17,zero,4d7c4 <___vfiprintf_internal_r+0xee8>
   4cefc:	d9002517 	ldw	r4,148(sp)
   4cf00:	24e3c83a 	sub	r17,r4,r19
   4cf04:	04432916 	blt	zero,r17,4dbac <___vfiprintf_internal_r+0x12d0>
   4cf08:	d8802517 	ldw	r2,148(sp)
   4cf0c:	14c0010e 	bge	r2,r19,4cf14 <___vfiprintf_internal_r+0x638>
   4cf10:	9805883a 	mov	r2,r19
   4cf14:	d8c02417 	ldw	r3,144(sp)
   4cf18:	1887883a 	add	r3,r3,r2
   4cf1c:	d8c02415 	stw	r3,144(sp)
   4cf20:	d8001b15 	stw	zero,108(sp)
   4cf24:	d811883a 	mov	r8,sp
   4cf28:	003ea006 	br	4c9ac <__alt_data_end+0xfffda9ac>
   4cf2c:	8c400814 	ori	r17,r17,32
   4cf30:	b0c00007 	ldb	r3,0(r22)
   4cf34:	003ec606 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4cf38:	b0c00007 	ldb	r3,0(r22)
   4cf3c:	00801b04 	movi	r2,108
   4cf40:	18832026 	beq	r3,r2,4dbc4 <___vfiprintf_internal_r+0x12e8>
   4cf44:	8c400414 	ori	r17,r17,16
   4cf48:	003ec106 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4cf4c:	9cc03fcc 	andi	r19,r19,255
   4cf50:	b811883a 	mov	r8,r23
   4cf54:	9803981e 	bne	r19,zero,4ddb8 <___vfiprintf_internal_r+0x14dc>
   4cf58:	8880080c 	andi	r2,r17,32
   4cf5c:	1002be26 	beq	r2,zero,4da58 <___vfiprintf_internal_r+0x117c>
   4cf60:	d9002217 	ldw	r4,136(sp)
   4cf64:	d9402417 	ldw	r5,144(sp)
   4cf68:	20800017 	ldw	r2,0(r4)
   4cf6c:	2807d7fa 	srai	r3,r5,31
   4cf70:	21000104 	addi	r4,r4,4
   4cf74:	d9002215 	stw	r4,136(sp)
   4cf78:	11400015 	stw	r5,0(r2)
   4cf7c:	10c00115 	stw	r3,4(r2)
   4cf80:	003e8a06 	br	4c9ac <__alt_data_end+0xfffda9ac>
   4cf84:	9cc03fcc 	andi	r19,r19,255
   4cf88:	b811883a 	mov	r8,r23
   4cf8c:	9803871e 	bne	r19,zero,4ddac <___vfiprintf_internal_r+0x14d0>
   4cf90:	8880080c 	andi	r2,r17,32
   4cf94:	10009a26 	beq	r2,zero,4d200 <___vfiprintf_internal_r+0x924>
   4cf98:	d9002217 	ldw	r4,136(sp)
   4cf9c:	d8001d85 	stb	zero,118(sp)
   4cfa0:	20800204 	addi	r2,r4,8
   4cfa4:	24c00017 	ldw	r19,0(r4)
   4cfa8:	25000117 	ldw	r20,4(r4)
   4cfac:	8002a416 	blt	r16,zero,4da40 <___vfiprintf_internal_r+0x1164>
   4cfb0:	013fdfc4 	movi	r4,-129
   4cfb4:	9d06b03a 	or	r3,r19,r20
   4cfb8:	d8802215 	stw	r2,136(sp)
   4cfbc:	8922703a 	and	r17,r17,r4
   4cfc0:	18009b26 	beq	r3,zero,4d230 <___vfiprintf_internal_r+0x954>
   4cfc4:	002b883a 	mov	r21,zero
   4cfc8:	ddc01a04 	addi	r23,sp,104
   4cfcc:	9806d0fa 	srli	r3,r19,3
   4cfd0:	a008977a 	slli	r4,r20,29
   4cfd4:	a028d0fa 	srli	r20,r20,3
   4cfd8:	9cc001cc 	andi	r19,r19,7
   4cfdc:	98800c04 	addi	r2,r19,48
   4cfe0:	bdffffc4 	addi	r23,r23,-1
   4cfe4:	20e6b03a 	or	r19,r4,r3
   4cfe8:	b8800005 	stb	r2,0(r23)
   4cfec:	9d06b03a 	or	r3,r19,r20
   4cff0:	183ff61e 	bne	r3,zero,4cfcc <__alt_data_end+0xfffdafcc>
   4cff4:	88c0004c 	andi	r3,r17,1
   4cff8:	18021f1e 	bne	r3,zero,4d878 <___vfiprintf_internal_r+0xf9c>
   4cffc:	d9401e17 	ldw	r5,120(sp)
   4d000:	2de9c83a 	sub	r20,r5,r23
   4d004:	003f3806 	br	4cce8 <__alt_data_end+0xfffdace8>
   4d008:	9cc03fcc 	andi	r19,r19,255
   4d00c:	b811883a 	mov	r8,r23
   4d010:	98034f1e 	bne	r19,zero,4dd50 <___vfiprintf_internal_r+0x1474>
   4d014:	00800174 	movhi	r2,5
   4d018:	109a2804 	addi	r2,r2,26784
   4d01c:	d8802615 	stw	r2,152(sp)
   4d020:	8880080c 	andi	r2,r17,32
   4d024:	1000ac26 	beq	r2,zero,4d2d8 <___vfiprintf_internal_r+0x9fc>
   4d028:	d9002217 	ldw	r4,136(sp)
   4d02c:	24c00017 	ldw	r19,0(r4)
   4d030:	25000117 	ldw	r20,4(r4)
   4d034:	21000204 	addi	r4,r4,8
   4d038:	d9002215 	stw	r4,136(sp)
   4d03c:	8880004c 	andi	r2,r17,1
   4d040:	1001e726 	beq	r2,zero,4d7e0 <___vfiprintf_internal_r+0xf04>
   4d044:	9d04b03a 	or	r2,r19,r20
   4d048:	10025c1e 	bne	r2,zero,4d9bc <___vfiprintf_internal_r+0x10e0>
   4d04c:	d8001d85 	stb	zero,118(sp)
   4d050:	80024416 	blt	r16,zero,4d964 <___vfiprintf_internal_r+0x1088>
   4d054:	00bfdfc4 	movi	r2,-129
   4d058:	88a2703a 	and	r17,r17,r2
   4d05c:	003f1d06 	br	4ccd4 <__alt_data_end+0xfffdacd4>
   4d060:	d8c02217 	ldw	r3,136(sp)
   4d064:	04c00044 	movi	r19,1
   4d068:	b811883a 	mov	r8,r23
   4d06c:	18800017 	ldw	r2,0(r3)
   4d070:	18c00104 	addi	r3,r3,4
   4d074:	d8001d85 	stb	zero,118(sp)
   4d078:	d8801005 	stb	r2,64(sp)
   4d07c:	d8c02215 	stw	r3,136(sp)
   4d080:	9829883a 	mov	r20,r19
   4d084:	ddc01004 	addi	r23,sp,64
   4d088:	0021883a 	mov	r16,zero
   4d08c:	003f1e06 	br	4cd08 <__alt_data_end+0xfffdad08>
   4d090:	9cc03fcc 	andi	r19,r19,255
   4d094:	b811883a 	mov	r8,r23
   4d098:	9803331e 	bne	r19,zero,4dd68 <___vfiprintf_internal_r+0x148c>
   4d09c:	8880080c 	andi	r2,r17,32
   4d0a0:	10004826 	beq	r2,zero,4d1c4 <___vfiprintf_internal_r+0x8e8>
   4d0a4:	d9002217 	ldw	r4,136(sp)
   4d0a8:	20800117 	ldw	r2,4(r4)
   4d0ac:	24c00017 	ldw	r19,0(r4)
   4d0b0:	21000204 	addi	r4,r4,8
   4d0b4:	d9002215 	stw	r4,136(sp)
   4d0b8:	1029883a 	mov	r20,r2
   4d0bc:	10024c16 	blt	r2,zero,4d9f0 <___vfiprintf_internal_r+0x1114>
   4d0c0:	dd401d83 	ldbu	r21,118(sp)
   4d0c4:	80007116 	blt	r16,zero,4d28c <___vfiprintf_internal_r+0x9b0>
   4d0c8:	00ffdfc4 	movi	r3,-129
   4d0cc:	9d04b03a 	or	r2,r19,r20
   4d0d0:	88e2703a 	and	r17,r17,r3
   4d0d4:	1000d126 	beq	r2,zero,4d41c <___vfiprintf_internal_r+0xb40>
   4d0d8:	a0023526 	beq	r20,zero,4d9b0 <___vfiprintf_internal_r+0x10d4>
   4d0dc:	ddc01a04 	addi	r23,sp,104
   4d0e0:	4039883a 	mov	fp,r8
   4d0e4:	9809883a 	mov	r4,r19
   4d0e8:	a00b883a 	mov	r5,r20
   4d0ec:	01800284 	movi	r6,10
   4d0f0:	000f883a 	mov	r7,zero
   4d0f4:	004ee080 	call	4ee08 <__umoddi3>
   4d0f8:	10800c04 	addi	r2,r2,48
   4d0fc:	bdffffc4 	addi	r23,r23,-1
   4d100:	9809883a 	mov	r4,r19
   4d104:	a00b883a 	mov	r5,r20
   4d108:	b8800005 	stb	r2,0(r23)
   4d10c:	01800284 	movi	r6,10
   4d110:	000f883a 	mov	r7,zero
   4d114:	004e80c0 	call	4e80c <__udivdi3>
   4d118:	1027883a 	mov	r19,r2
   4d11c:	10c4b03a 	or	r2,r2,r3
   4d120:	1829883a 	mov	r20,r3
   4d124:	103fef1e 	bne	r2,zero,4d0e4 <__alt_data_end+0xfffdb0e4>
   4d128:	d9001e17 	ldw	r4,120(sp)
   4d12c:	e011883a 	mov	r8,fp
   4d130:	25e9c83a 	sub	r20,r4,r23
   4d134:	003eec06 	br	4cce8 <__alt_data_end+0xfffdace8>
   4d138:	d8802307 	ldb	r2,140(sp)
   4d13c:	1002361e 	bne	r2,zero,4da18 <___vfiprintf_internal_r+0x113c>
   4d140:	00c00804 	movi	r3,32
   4d144:	d8c02305 	stb	r3,140(sp)
   4d148:	04c00044 	movi	r19,1
   4d14c:	b0c00007 	ldb	r3,0(r22)
   4d150:	003e3f06 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4d154:	8c400054 	ori	r17,r17,1
   4d158:	b0c00007 	ldb	r3,0(r22)
   4d15c:	003e3c06 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4d160:	8c402014 	ori	r17,r17,128
   4d164:	b0c00007 	ldb	r3,0(r22)
   4d168:	003e3906 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4d16c:	dc002715 	stw	r16,156(sp)
   4d170:	d8002515 	stw	zero,148(sp)
   4d174:	1f3ff404 	addi	fp,r3,-48
   4d178:	0009883a 	mov	r4,zero
   4d17c:	b021883a 	mov	r16,r22
   4d180:	01400284 	movi	r5,10
   4d184:	004146c0 	call	4146c <__mulsi3>
   4d188:	80c00007 	ldb	r3,0(r16)
   4d18c:	e089883a 	add	r4,fp,r2
   4d190:	b5800044 	addi	r22,r22,1
   4d194:	1f3ff404 	addi	fp,r3,-48
   4d198:	b021883a 	mov	r16,r22
   4d19c:	af3ff82e 	bgeu	r21,fp,4d180 <__alt_data_end+0xfffdb180>
   4d1a0:	d9002515 	stw	r4,148(sp)
   4d1a4:	dc002717 	ldw	r16,156(sp)
   4d1a8:	003e2a06 	br	4ca54 <__alt_data_end+0xfffdaa54>
   4d1ac:	9cc03fcc 	andi	r19,r19,255
   4d1b0:	b811883a 	mov	r8,r23
   4d1b4:	9802e91e 	bne	r19,zero,4dd5c <___vfiprintf_internal_r+0x1480>
   4d1b8:	8c400414 	ori	r17,r17,16
   4d1bc:	8880080c 	andi	r2,r17,32
   4d1c0:	103fb81e 	bne	r2,zero,4d0a4 <__alt_data_end+0xfffdb0a4>
   4d1c4:	8880040c 	andi	r2,r17,16
   4d1c8:	10022e26 	beq	r2,zero,4da84 <___vfiprintf_internal_r+0x11a8>
   4d1cc:	d9402217 	ldw	r5,136(sp)
   4d1d0:	2cc00017 	ldw	r19,0(r5)
   4d1d4:	29400104 	addi	r5,r5,4
   4d1d8:	d9402215 	stw	r5,136(sp)
   4d1dc:	9829d7fa 	srai	r20,r19,31
   4d1e0:	a005883a 	mov	r2,r20
   4d1e4:	003fb506 	br	4d0bc <__alt_data_end+0xfffdb0bc>
   4d1e8:	9cc03fcc 	andi	r19,r19,255
   4d1ec:	b811883a 	mov	r8,r23
   4d1f0:	9802fa1e 	bne	r19,zero,4dddc <___vfiprintf_internal_r+0x1500>
   4d1f4:	8c400414 	ori	r17,r17,16
   4d1f8:	8880080c 	andi	r2,r17,32
   4d1fc:	103f661e 	bne	r2,zero,4cf98 <__alt_data_end+0xfffdaf98>
   4d200:	8880040c 	andi	r2,r17,16
   4d204:	10020626 	beq	r2,zero,4da20 <___vfiprintf_internal_r+0x1144>
   4d208:	d9402217 	ldw	r5,136(sp)
   4d20c:	d8001d85 	stb	zero,118(sp)
   4d210:	0029883a 	mov	r20,zero
   4d214:	28800104 	addi	r2,r5,4
   4d218:	2cc00017 	ldw	r19,0(r5)
   4d21c:	80020816 	blt	r16,zero,4da40 <___vfiprintf_internal_r+0x1164>
   4d220:	00ffdfc4 	movi	r3,-129
   4d224:	d8802215 	stw	r2,136(sp)
   4d228:	88e2703a 	and	r17,r17,r3
   4d22c:	983f651e 	bne	r19,zero,4cfc4 <__alt_data_end+0xfffdafc4>
   4d230:	002b883a 	mov	r21,zero
   4d234:	8002cf26 	beq	r16,zero,4dd74 <___vfiprintf_internal_r+0x1498>
   4d238:	0027883a 	mov	r19,zero
   4d23c:	0029883a 	mov	r20,zero
   4d240:	003f6106 	br	4cfc8 <__alt_data_end+0xfffdafc8>
   4d244:	9cc03fcc 	andi	r19,r19,255
   4d248:	b811883a 	mov	r8,r23
   4d24c:	9802e01e 	bne	r19,zero,4ddd0 <___vfiprintf_internal_r+0x14f4>
   4d250:	8c400414 	ori	r17,r17,16
   4d254:	8880080c 	andi	r2,r17,32
   4d258:	1000641e 	bne	r2,zero,4d3ec <___vfiprintf_internal_r+0xb10>
   4d25c:	8880040c 	andi	r2,r17,16
   4d260:	1001c81e 	bne	r2,zero,4d984 <___vfiprintf_internal_r+0x10a8>
   4d264:	8880100c 	andi	r2,r17,64
   4d268:	d8001d85 	stb	zero,118(sp)
   4d26c:	1002281e 	bne	r2,zero,4db10 <___vfiprintf_internal_r+0x1234>
   4d270:	d9002217 	ldw	r4,136(sp)
   4d274:	0029883a 	mov	r20,zero
   4d278:	20800104 	addi	r2,r4,4
   4d27c:	24c00017 	ldw	r19,0(r4)
   4d280:	8001c60e 	bge	r16,zero,4d99c <___vfiprintf_internal_r+0x10c0>
   4d284:	d8802215 	stw	r2,136(sp)
   4d288:	002b883a 	mov	r21,zero
   4d28c:	9d04b03a 	or	r2,r19,r20
   4d290:	103f911e 	bne	r2,zero,4d0d8 <__alt_data_end+0xfffdb0d8>
   4d294:	00800044 	movi	r2,1
   4d298:	10803fcc 	andi	r2,r2,255
   4d29c:	00c00044 	movi	r3,1
   4d2a0:	10c05f26 	beq	r2,r3,4d420 <___vfiprintf_internal_r+0xb44>
   4d2a4:	00c00084 	movi	r3,2
   4d2a8:	10ffe31e 	bne	r2,r3,4d238 <__alt_data_end+0xfffdb238>
   4d2ac:	0027883a 	mov	r19,zero
   4d2b0:	0029883a 	mov	r20,zero
   4d2b4:	00015106 	br	4d7fc <___vfiprintf_internal_r+0xf20>
   4d2b8:	9cc03fcc 	andi	r19,r19,255
   4d2bc:	b811883a 	mov	r8,r23
   4d2c0:	9802c01e 	bne	r19,zero,4ddc4 <___vfiprintf_internal_r+0x14e8>
   4d2c4:	01400174 	movhi	r5,5
   4d2c8:	295a2304 	addi	r5,r5,26764
   4d2cc:	d9402615 	stw	r5,152(sp)
   4d2d0:	8880080c 	andi	r2,r17,32
   4d2d4:	103f541e 	bne	r2,zero,4d028 <__alt_data_end+0xfffdb028>
   4d2d8:	8880040c 	andi	r2,r17,16
   4d2dc:	1001f226 	beq	r2,zero,4daa8 <___vfiprintf_internal_r+0x11cc>
   4d2e0:	d9402217 	ldw	r5,136(sp)
   4d2e4:	0029883a 	mov	r20,zero
   4d2e8:	2cc00017 	ldw	r19,0(r5)
   4d2ec:	29400104 	addi	r5,r5,4
   4d2f0:	d9402215 	stw	r5,136(sp)
   4d2f4:	003f5106 	br	4d03c <__alt_data_end+0xfffdb03c>
   4d2f8:	d8c02217 	ldw	r3,136(sp)
   4d2fc:	b811883a 	mov	r8,r23
   4d300:	d8001d85 	stb	zero,118(sp)
   4d304:	1dc00017 	ldw	r23,0(r3)
   4d308:	1f000104 	addi	fp,r3,4
   4d30c:	b8025926 	beq	r23,zero,4dc74 <___vfiprintf_internal_r+0x1398>
   4d310:	80023316 	blt	r16,zero,4dbe0 <___vfiprintf_internal_r+0x1304>
   4d314:	800d883a 	mov	r6,r16
   4d318:	000b883a 	mov	r5,zero
   4d31c:	b809883a 	mov	r4,r23
   4d320:	da002a15 	stw	r8,168(sp)
   4d324:	00493440 	call	49344 <memchr>
   4d328:	da002a17 	ldw	r8,168(sp)
   4d32c:	10026826 	beq	r2,zero,4dcd0 <___vfiprintf_internal_r+0x13f4>
   4d330:	15e9c83a 	sub	r20,r2,r23
   4d334:	dd401d83 	ldbu	r21,118(sp)
   4d338:	df002215 	stw	fp,136(sp)
   4d33c:	0021883a 	mov	r16,zero
   4d340:	003e6906 	br	4cce8 <__alt_data_end+0xfffdace8>
   4d344:	9cc03fcc 	andi	r19,r19,255
   4d348:	b811883a 	mov	r8,r23
   4d34c:	983fc126 	beq	r19,zero,4d254 <__alt_data_end+0xfffdb254>
   4d350:	d8c02303 	ldbu	r3,140(sp)
   4d354:	d8c01d85 	stb	r3,118(sp)
   4d358:	003fbe06 	br	4d254 <__alt_data_end+0xfffdb254>
   4d35c:	d9002217 	ldw	r4,136(sp)
   4d360:	d9402217 	ldw	r5,136(sp)
   4d364:	21000017 	ldw	r4,0(r4)
   4d368:	28800104 	addi	r2,r5,4
   4d36c:	d9002515 	stw	r4,148(sp)
   4d370:	203e3d16 	blt	r4,zero,4cc68 <__alt_data_end+0xfffdac68>
   4d374:	d8802215 	stw	r2,136(sp)
   4d378:	b0c00007 	ldb	r3,0(r22)
   4d37c:	003db406 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4d380:	00c00ac4 	movi	r3,43
   4d384:	d8c02305 	stb	r3,140(sp)
   4d388:	04c00044 	movi	r19,1
   4d38c:	b0c00007 	ldb	r3,0(r22)
   4d390:	003daf06 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4d394:	b0c00007 	ldb	r3,0(r22)
   4d398:	01000a84 	movi	r4,42
   4d39c:	b4000044 	addi	r16,r22,1
   4d3a0:	19025e26 	beq	r3,r4,4dd1c <___vfiprintf_internal_r+0x1440>
   4d3a4:	1f3ff404 	addi	fp,r3,-48
   4d3a8:	0009883a 	mov	r4,zero
   4d3ac:	af025236 	bltu	r21,fp,4dcf8 <___vfiprintf_internal_r+0x141c>
   4d3b0:	01400284 	movi	r5,10
   4d3b4:	004146c0 	call	4146c <__mulsi3>
   4d3b8:	80c00007 	ldb	r3,0(r16)
   4d3bc:	1709883a 	add	r4,r2,fp
   4d3c0:	85800044 	addi	r22,r16,1
   4d3c4:	1f3ff404 	addi	fp,r3,-48
   4d3c8:	b021883a 	mov	r16,r22
   4d3cc:	af3ff82e 	bgeu	r21,fp,4d3b0 <__alt_data_end+0xfffdb3b0>
   4d3d0:	2021883a 	mov	r16,r4
   4d3d4:	203d9f0e 	bge	r4,zero,4ca54 <__alt_data_end+0xfffdaa54>
   4d3d8:	043fffc4 	movi	r16,-1
   4d3dc:	003d9d06 	br	4ca54 <__alt_data_end+0xfffdaa54>
   4d3e0:	8c401014 	ori	r17,r17,64
   4d3e4:	b0c00007 	ldb	r3,0(r22)
   4d3e8:	003d9906 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4d3ec:	d9002217 	ldw	r4,136(sp)
   4d3f0:	d8001d85 	stb	zero,118(sp)
   4d3f4:	20c00204 	addi	r3,r4,8
   4d3f8:	24c00017 	ldw	r19,0(r4)
   4d3fc:	25000117 	ldw	r20,4(r4)
   4d400:	8001e716 	blt	r16,zero,4dba0 <___vfiprintf_internal_r+0x12c4>
   4d404:	013fdfc4 	movi	r4,-129
   4d408:	9d04b03a 	or	r2,r19,r20
   4d40c:	d8c02215 	stw	r3,136(sp)
   4d410:	8922703a 	and	r17,r17,r4
   4d414:	002b883a 	mov	r21,zero
   4d418:	103f2f1e 	bne	r2,zero,4d0d8 <__alt_data_end+0xfffdb0d8>
   4d41c:	803e2f26 	beq	r16,zero,4ccdc <__alt_data_end+0xfffdacdc>
   4d420:	0027883a 	mov	r19,zero
   4d424:	9cc00c04 	addi	r19,r19,48
   4d428:	dcc019c5 	stb	r19,103(sp)
   4d42c:	dd002817 	ldw	r20,160(sp)
   4d430:	ddc019c4 	addi	r23,sp,103
   4d434:	003e2c06 	br	4cce8 <__alt_data_end+0xfffdace8>
   4d438:	9cc03fcc 	andi	r19,r19,255
   4d43c:	b811883a 	mov	r8,r23
   4d440:	9802571e 	bne	r19,zero,4dda0 <___vfiprintf_internal_r+0x14c4>
   4d444:	18005726 	beq	r3,zero,4d5a4 <___vfiprintf_internal_r+0xcc8>
   4d448:	04c00044 	movi	r19,1
   4d44c:	d8c01005 	stb	r3,64(sp)
   4d450:	d8001d85 	stb	zero,118(sp)
   4d454:	9829883a 	mov	r20,r19
   4d458:	ddc01004 	addi	r23,sp,64
   4d45c:	003f0a06 	br	4d088 <__alt_data_end+0xfffdb088>
   4d460:	d9402017 	ldw	r5,128(sp)
   4d464:	d9002117 	ldw	r4,132(sp)
   4d468:	d9801a04 	addi	r6,sp,104
   4d46c:	da802a15 	stw	r10,168(sp)
   4d470:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d474:	da802a17 	ldw	r10,168(sp)
   4d478:	1000501e 	bne	r2,zero,4d5bc <___vfiprintf_internal_r+0xce0>
   4d47c:	d9801b17 	ldw	r6,108(sp)
   4d480:	d8801c17 	ldw	r2,112(sp)
   4d484:	d811883a 	mov	r8,sp
   4d488:	31000044 	addi	r4,r6,1
   4d48c:	003e3606 	br	4cd68 <__alt_data_end+0xfffdad68>
   4d490:	d9001b17 	ldw	r4,108(sp)
   4d494:	d8801c17 	ldw	r2,112(sp)
   4d498:	21400044 	addi	r5,r4,1
   4d49c:	d9801d87 	ldb	r6,118(sp)
   4d4a0:	303e5226 	beq	r6,zero,4cdec <__alt_data_end+0xfffdadec>
   4d4a4:	01800044 	movi	r6,1
   4d4a8:	d9001d84 	addi	r4,sp,118
   4d4ac:	1185883a 	add	r2,r2,r6
   4d4b0:	41000015 	stw	r4,0(r8)
   4d4b4:	41800115 	stw	r6,4(r8)
   4d4b8:	d8801c15 	stw	r2,112(sp)
   4d4bc:	d9401b15 	stw	r5,108(sp)
   4d4c0:	010001c4 	movi	r4,7
   4d4c4:	2140b00e 	bge	r4,r5,4d788 <___vfiprintf_internal_r+0xeac>
   4d4c8:	1000f61e 	bne	r2,zero,4d8a4 <___vfiprintf_internal_r+0xfc8>
   4d4cc:	3800b31e 	bne	r7,zero,4d79c <___vfiprintf_internal_r+0xec0>
   4d4d0:	0009883a 	mov	r4,zero
   4d4d4:	300b883a 	mov	r5,r6
   4d4d8:	d811883a 	mov	r8,sp
   4d4dc:	01802004 	movi	r6,128
   4d4e0:	19be5226 	beq	r3,r6,4ce2c <__alt_data_end+0xfffdae2c>
   4d4e4:	8521c83a 	sub	r16,r16,r20
   4d4e8:	043e790e 	bge	zero,r16,4ced0 <__alt_data_end+0xfffdaed0>
   4d4ec:	05400404 	movi	r21,16
   4d4f0:	ac01b00e 	bge	r21,r16,4dbb4 <___vfiprintf_internal_r+0x12d8>
   4d4f4:	01400174 	movhi	r5,5
   4d4f8:	295a9904 	addi	r5,r5,27236
   4d4fc:	d9402315 	stw	r5,140(sp)
   4d500:	070001c4 	movi	fp,7
   4d504:	00000506 	br	4d51c <___vfiprintf_internal_r+0xc40>
   4d508:	21400084 	addi	r5,r4,2
   4d50c:	42000204 	addi	r8,r8,8
   4d510:	1809883a 	mov	r4,r3
   4d514:	843ffc04 	addi	r16,r16,-16
   4d518:	ac000d0e 	bge	r21,r16,4d550 <___vfiprintf_internal_r+0xc74>
   4d51c:	10800404 	addi	r2,r2,16
   4d520:	20c00044 	addi	r3,r4,1
   4d524:	44800015 	stw	r18,0(r8)
   4d528:	45400115 	stw	r21,4(r8)
   4d52c:	d8801c15 	stw	r2,112(sp)
   4d530:	d8c01b15 	stw	r3,108(sp)
   4d534:	e0fff40e 	bge	fp,r3,4d508 <__alt_data_end+0xfffdb508>
   4d538:	1000101e 	bne	r2,zero,4d57c <___vfiprintf_internal_r+0xca0>
   4d53c:	843ffc04 	addi	r16,r16,-16
   4d540:	01400044 	movi	r5,1
   4d544:	0009883a 	mov	r4,zero
   4d548:	d811883a 	mov	r8,sp
   4d54c:	ac3ff316 	blt	r21,r16,4d51c <__alt_data_end+0xfffdb51c>
   4d550:	d8c02317 	ldw	r3,140(sp)
   4d554:	1405883a 	add	r2,r2,r16
   4d558:	44000115 	stw	r16,4(r8)
   4d55c:	40c00015 	stw	r3,0(r8)
   4d560:	d8801c15 	stw	r2,112(sp)
   4d564:	d9401b15 	stw	r5,108(sp)
   4d568:	00c001c4 	movi	r3,7
   4d56c:	19401916 	blt	r3,r5,4d5d4 <___vfiprintf_internal_r+0xcf8>
   4d570:	42000204 	addi	r8,r8,8
   4d574:	29400044 	addi	r5,r5,1
   4d578:	003e5506 	br	4ced0 <__alt_data_end+0xfffdaed0>
   4d57c:	d9402017 	ldw	r5,128(sp)
   4d580:	d9002117 	ldw	r4,132(sp)
   4d584:	d9801a04 	addi	r6,sp,104
   4d588:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d58c:	10000b1e 	bne	r2,zero,4d5bc <___vfiprintf_internal_r+0xce0>
   4d590:	d9001b17 	ldw	r4,108(sp)
   4d594:	d8801c17 	ldw	r2,112(sp)
   4d598:	d811883a 	mov	r8,sp
   4d59c:	21400044 	addi	r5,r4,1
   4d5a0:	003fdc06 	br	4d514 <__alt_data_end+0xfffdb514>
   4d5a4:	d8801c17 	ldw	r2,112(sp)
   4d5a8:	10000426 	beq	r2,zero,4d5bc <___vfiprintf_internal_r+0xce0>
   4d5ac:	d9402017 	ldw	r5,128(sp)
   4d5b0:	d9002117 	ldw	r4,132(sp)
   4d5b4:	d9801a04 	addi	r6,sp,104
   4d5b8:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d5bc:	d9402017 	ldw	r5,128(sp)
   4d5c0:	2880030b 	ldhu	r2,12(r5)
   4d5c4:	1080100c 	andi	r2,r2,64
   4d5c8:	10014d1e 	bne	r2,zero,4db00 <___vfiprintf_internal_r+0x1224>
   4d5cc:	d8802417 	ldw	r2,144(sp)
   4d5d0:	003d9706 	br	4cc30 <__alt_data_end+0xfffdac30>
   4d5d4:	1000d21e 	bne	r2,zero,4d920 <___vfiprintf_internal_r+0x1044>
   4d5d8:	00c00044 	movi	r3,1
   4d5dc:	a005883a 	mov	r2,r20
   4d5e0:	ddc00015 	stw	r23,0(sp)
   4d5e4:	dd000115 	stw	r20,4(sp)
   4d5e8:	dd001c15 	stw	r20,112(sp)
   4d5ec:	d8c01b15 	stw	r3,108(sp)
   4d5f0:	d811883a 	mov	r8,sp
   4d5f4:	42000204 	addi	r8,r8,8
   4d5f8:	8c40010c 	andi	r17,r17,4
   4d5fc:	88004026 	beq	r17,zero,4d700 <___vfiprintf_internal_r+0xe24>
   4d600:	d9002517 	ldw	r4,148(sp)
   4d604:	24e3c83a 	sub	r17,r4,r19
   4d608:	04403d0e 	bge	zero,r17,4d700 <___vfiprintf_internal_r+0xe24>
   4d60c:	04000404 	movi	r16,16
   4d610:	8441a90e 	bge	r16,r17,4dcb8 <___vfiprintf_internal_r+0x13dc>
   4d614:	00c00174 	movhi	r3,5
   4d618:	18da9d04 	addi	r3,r3,27252
   4d61c:	d9001b17 	ldw	r4,108(sp)
   4d620:	d8c02315 	stw	r3,140(sp)
   4d624:	050001c4 	movi	r20,7
   4d628:	dd402117 	ldw	r21,132(sp)
   4d62c:	ddc02017 	ldw	r23,128(sp)
   4d630:	00000506 	br	4d648 <___vfiprintf_internal_r+0xd6c>
   4d634:	21400084 	addi	r5,r4,2
   4d638:	42000204 	addi	r8,r8,8
   4d63c:	1809883a 	mov	r4,r3
   4d640:	8c7ffc04 	addi	r17,r17,-16
   4d644:	84400f0e 	bge	r16,r17,4d684 <___vfiprintf_internal_r+0xda8>
   4d648:	01400174 	movhi	r5,5
   4d64c:	10800404 	addi	r2,r2,16
   4d650:	20c00044 	addi	r3,r4,1
   4d654:	295a9d04 	addi	r5,r5,27252
   4d658:	41400015 	stw	r5,0(r8)
   4d65c:	44000115 	stw	r16,4(r8)
   4d660:	d8801c15 	stw	r2,112(sp)
   4d664:	d8c01b15 	stw	r3,108(sp)
   4d668:	a0fff20e 	bge	r20,r3,4d634 <__alt_data_end+0xfffdb634>
   4d66c:	1000141e 	bne	r2,zero,4d6c0 <___vfiprintf_internal_r+0xde4>
   4d670:	8c7ffc04 	addi	r17,r17,-16
   4d674:	01400044 	movi	r5,1
   4d678:	0009883a 	mov	r4,zero
   4d67c:	d811883a 	mov	r8,sp
   4d680:	847ff116 	blt	r16,r17,4d648 <__alt_data_end+0xfffdb648>
   4d684:	d8c02317 	ldw	r3,140(sp)
   4d688:	1445883a 	add	r2,r2,r17
   4d68c:	44400115 	stw	r17,4(r8)
   4d690:	40c00015 	stw	r3,0(r8)
   4d694:	d8801c15 	stw	r2,112(sp)
   4d698:	d9401b15 	stw	r5,108(sp)
   4d69c:	00c001c4 	movi	r3,7
   4d6a0:	1940170e 	bge	r3,r5,4d700 <___vfiprintf_internal_r+0xe24>
   4d6a4:	1000101e 	bne	r2,zero,4d6e8 <___vfiprintf_internal_r+0xe0c>
   4d6a8:	d8802517 	ldw	r2,148(sp)
   4d6ac:	14c11616 	blt	r2,r19,4db08 <___vfiprintf_internal_r+0x122c>
   4d6b0:	d9002417 	ldw	r4,144(sp)
   4d6b4:	2089883a 	add	r4,r4,r2
   4d6b8:	d9002415 	stw	r4,144(sp)
   4d6bc:	003e1806 	br	4cf20 <__alt_data_end+0xfffdaf20>
   4d6c0:	d9801a04 	addi	r6,sp,104
   4d6c4:	b80b883a 	mov	r5,r23
   4d6c8:	a809883a 	mov	r4,r21
   4d6cc:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d6d0:	103fba1e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d6d4:	d9001b17 	ldw	r4,108(sp)
   4d6d8:	d8801c17 	ldw	r2,112(sp)
   4d6dc:	d811883a 	mov	r8,sp
   4d6e0:	21400044 	addi	r5,r4,1
   4d6e4:	003fd606 	br	4d640 <__alt_data_end+0xfffdb640>
   4d6e8:	d9402017 	ldw	r5,128(sp)
   4d6ec:	d9002117 	ldw	r4,132(sp)
   4d6f0:	d9801a04 	addi	r6,sp,104
   4d6f4:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d6f8:	103fb01e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d6fc:	d8801c17 	ldw	r2,112(sp)
   4d700:	d8c02517 	ldw	r3,148(sp)
   4d704:	1cc0010e 	bge	r3,r19,4d70c <___vfiprintf_internal_r+0xe30>
   4d708:	9807883a 	mov	r3,r19
   4d70c:	d9002417 	ldw	r4,144(sp)
   4d710:	20c9883a 	add	r4,r4,r3
   4d714:	d9002415 	stw	r4,144(sp)
   4d718:	103e0126 	beq	r2,zero,4cf20 <__alt_data_end+0xfffdaf20>
   4d71c:	d9402017 	ldw	r5,128(sp)
   4d720:	d9002117 	ldw	r4,132(sp)
   4d724:	d9801a04 	addi	r6,sp,104
   4d728:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d72c:	103dfc26 	beq	r2,zero,4cf20 <__alt_data_end+0xfffdaf20>
   4d730:	003fa206 	br	4d5bc <__alt_data_end+0xfffdb5bc>
   4d734:	d9402017 	ldw	r5,128(sp)
   4d738:	d9002117 	ldw	r4,132(sp)
   4d73c:	d9801a04 	addi	r6,sp,104
   4d740:	d9c02b15 	stw	r7,172(sp)
   4d744:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d748:	d9c02b17 	ldw	r7,172(sp)
   4d74c:	103f9b1e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d750:	d9001b17 	ldw	r4,108(sp)
   4d754:	d8801c17 	ldw	r2,112(sp)
   4d758:	d811883a 	mov	r8,sp
   4d75c:	21800044 	addi	r6,r4,1
   4d760:	003dbf06 	br	4ce60 <__alt_data_end+0xfffdae60>
   4d764:	1000d81e 	bne	r2,zero,4dac8 <___vfiprintf_internal_r+0x11ec>
   4d768:	d9001d87 	ldb	r4,118(sp)
   4d76c:	20000a26 	beq	r4,zero,4d798 <___vfiprintf_internal_r+0xebc>
   4d770:	00800044 	movi	r2,1
   4d774:	d9001d84 	addi	r4,sp,118
   4d778:	100b883a 	mov	r5,r2
   4d77c:	d9000015 	stw	r4,0(sp)
   4d780:	d8800115 	stw	r2,4(sp)
   4d784:	d811883a 	mov	r8,sp
   4d788:	2809883a 	mov	r4,r5
   4d78c:	42000204 	addi	r8,r8,8
   4d790:	29400044 	addi	r5,r5,1
   4d794:	003d9506 	br	4cdec <__alt_data_end+0xfffdadec>
   4d798:	3800fd26 	beq	r7,zero,4db90 <___vfiprintf_internal_r+0x12b4>
   4d79c:	00800084 	movi	r2,2
   4d7a0:	d9001d04 	addi	r4,sp,116
   4d7a4:	d9000015 	stw	r4,0(sp)
   4d7a8:	d8800115 	stw	r2,4(sp)
   4d7ac:	01400044 	movi	r5,1
   4d7b0:	d811883a 	mov	r8,sp
   4d7b4:	2809883a 	mov	r4,r5
   4d7b8:	42000204 	addi	r8,r8,8
   4d7bc:	29400044 	addi	r5,r5,1
   4d7c0:	003f4606 	br	4d4dc <__alt_data_end+0xfffdb4dc>
   4d7c4:	d8802517 	ldw	r2,148(sp)
   4d7c8:	14c0010e 	bge	r2,r19,4d7d0 <___vfiprintf_internal_r+0xef4>
   4d7cc:	9805883a 	mov	r2,r19
   4d7d0:	d9402417 	ldw	r5,144(sp)
   4d7d4:	288b883a 	add	r5,r5,r2
   4d7d8:	d9402415 	stw	r5,144(sp)
   4d7dc:	003dd006 	br	4cf20 <__alt_data_end+0xfffdaf20>
   4d7e0:	d8001d85 	stb	zero,118(sp)
   4d7e4:	80005d16 	blt	r16,zero,4d95c <___vfiprintf_internal_r+0x1080>
   4d7e8:	00ffdfc4 	movi	r3,-129
   4d7ec:	9d04b03a 	or	r2,r19,r20
   4d7f0:	88e2703a 	and	r17,r17,r3
   4d7f4:	103d3726 	beq	r2,zero,4ccd4 <__alt_data_end+0xfffdacd4>
   4d7f8:	002b883a 	mov	r21,zero
   4d7fc:	d9002617 	ldw	r4,152(sp)
   4d800:	ddc01a04 	addi	r23,sp,104
   4d804:	988003cc 	andi	r2,r19,15
   4d808:	a006973a 	slli	r3,r20,28
   4d80c:	2085883a 	add	r2,r4,r2
   4d810:	9826d13a 	srli	r19,r19,4
   4d814:	10800003 	ldbu	r2,0(r2)
   4d818:	a028d13a 	srli	r20,r20,4
   4d81c:	bdffffc4 	addi	r23,r23,-1
   4d820:	1ce6b03a 	or	r19,r3,r19
   4d824:	b8800005 	stb	r2,0(r23)
   4d828:	9d04b03a 	or	r2,r19,r20
   4d82c:	103ff51e 	bne	r2,zero,4d804 <__alt_data_end+0xfffdb804>
   4d830:	d8801e17 	ldw	r2,120(sp)
   4d834:	15e9c83a 	sub	r20,r2,r23
   4d838:	003d2b06 	br	4cce8 <__alt_data_end+0xfffdace8>
   4d83c:	d9402017 	ldw	r5,128(sp)
   4d840:	d9002117 	ldw	r4,132(sp)
   4d844:	d9801a04 	addi	r6,sp,104
   4d848:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d84c:	103f5b1e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d850:	d8801c17 	ldw	r2,112(sp)
   4d854:	d811883a 	mov	r8,sp
   4d858:	003f6706 	br	4d5f8 <__alt_data_end+0xfffdb5f8>
   4d85c:	d9402017 	ldw	r5,128(sp)
   4d860:	d9002117 	ldw	r4,132(sp)
   4d864:	d9801a04 	addi	r6,sp,104
   4d868:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d86c:	103f531e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d870:	d811883a 	mov	r8,sp
   4d874:	003cd906 	br	4cbdc <__alt_data_end+0xfffdabdc>
   4d878:	10803fcc 	andi	r2,r2,255
   4d87c:	1080201c 	xori	r2,r2,128
   4d880:	10bfe004 	addi	r2,r2,-128
   4d884:	00c00c04 	movi	r3,48
   4d888:	10ffe926 	beq	r2,r3,4d830 <__alt_data_end+0xfffdb830>
   4d88c:	b8ffffc5 	stb	r3,-1(r23)
   4d890:	d8c01e17 	ldw	r3,120(sp)
   4d894:	b8bfffc4 	addi	r2,r23,-1
   4d898:	102f883a 	mov	r23,r2
   4d89c:	18a9c83a 	sub	r20,r3,r2
   4d8a0:	003d1106 	br	4cce8 <__alt_data_end+0xfffdace8>
   4d8a4:	d9402017 	ldw	r5,128(sp)
   4d8a8:	d9002117 	ldw	r4,132(sp)
   4d8ac:	d9801a04 	addi	r6,sp,104
   4d8b0:	d8c02a15 	stw	r3,168(sp)
   4d8b4:	d9c02b15 	stw	r7,172(sp)
   4d8b8:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d8bc:	d8c02a17 	ldw	r3,168(sp)
   4d8c0:	d9c02b17 	ldw	r7,172(sp)
   4d8c4:	103f3d1e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d8c8:	d9001b17 	ldw	r4,108(sp)
   4d8cc:	d8801c17 	ldw	r2,112(sp)
   4d8d0:	d811883a 	mov	r8,sp
   4d8d4:	21400044 	addi	r5,r4,1
   4d8d8:	003d4406 	br	4cdec <__alt_data_end+0xfffdadec>
   4d8dc:	d9402017 	ldw	r5,128(sp)
   4d8e0:	d9002117 	ldw	r4,132(sp)
   4d8e4:	d9801a04 	addi	r6,sp,104
   4d8e8:	d8c02a15 	stw	r3,168(sp)
   4d8ec:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d8f0:	d8c02a17 	ldw	r3,168(sp)
   4d8f4:	103f311e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d8f8:	d9001b17 	ldw	r4,108(sp)
   4d8fc:	d8801c17 	ldw	r2,112(sp)
   4d900:	d811883a 	mov	r8,sp
   4d904:	21400044 	addi	r5,r4,1
   4d908:	003ef406 	br	4d4dc <__alt_data_end+0xfffdb4dc>
   4d90c:	1000bd1e 	bne	r2,zero,4dc04 <___vfiprintf_internal_r+0x1328>
   4d910:	01400044 	movi	r5,1
   4d914:	0009883a 	mov	r4,zero
   4d918:	d811883a 	mov	r8,sp
   4d91c:	003ef106 	br	4d4e4 <__alt_data_end+0xfffdb4e4>
   4d920:	d9402017 	ldw	r5,128(sp)
   4d924:	d9002117 	ldw	r4,132(sp)
   4d928:	d9801a04 	addi	r6,sp,104
   4d92c:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4d930:	103f221e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4d934:	d9401b17 	ldw	r5,108(sp)
   4d938:	d8801c17 	ldw	r2,112(sp)
   4d93c:	d811883a 	mov	r8,sp
   4d940:	29400044 	addi	r5,r5,1
   4d944:	003d6206 	br	4ced0 <__alt_data_end+0xfffdaed0>
   4d948:	01400174 	movhi	r5,5
   4d94c:	295a2804 	addi	r5,r5,26784
   4d950:	d9402615 	stw	r5,152(sp)
   4d954:	d8c02215 	stw	r3,136(sp)
   4d958:	1023883a 	mov	r17,r2
   4d95c:	9d04b03a 	or	r2,r19,r20
   4d960:	103fa51e 	bne	r2,zero,4d7f8 <__alt_data_end+0xfffdb7f8>
   4d964:	002b883a 	mov	r21,zero
   4d968:	00800084 	movi	r2,2
   4d96c:	003e4a06 	br	4d298 <__alt_data_end+0xfffdb298>
   4d970:	01400174 	movhi	r5,5
   4d974:	295a2804 	addi	r5,r5,26784
   4d978:	002b883a 	mov	r21,zero
   4d97c:	d9402615 	stw	r5,152(sp)
   4d980:	003f9e06 	br	4d7fc <__alt_data_end+0xfffdb7fc>
   4d984:	d9402217 	ldw	r5,136(sp)
   4d988:	d8001d85 	stb	zero,118(sp)
   4d98c:	0029883a 	mov	r20,zero
   4d990:	28800104 	addi	r2,r5,4
   4d994:	2cc00017 	ldw	r19,0(r5)
   4d998:	803e3a16 	blt	r16,zero,4d284 <__alt_data_end+0xfffdb284>
   4d99c:	00ffdfc4 	movi	r3,-129
   4d9a0:	d8802215 	stw	r2,136(sp)
   4d9a4:	88e2703a 	and	r17,r17,r3
   4d9a8:	002b883a 	mov	r21,zero
   4d9ac:	983e9b26 	beq	r19,zero,4d41c <__alt_data_end+0xfffdb41c>
   4d9b0:	00800244 	movi	r2,9
   4d9b4:	14fdc936 	bltu	r2,r19,4d0dc <__alt_data_end+0xfffdb0dc>
   4d9b8:	003e9a06 	br	4d424 <__alt_data_end+0xfffdb424>
   4d9bc:	00800c04 	movi	r2,48
   4d9c0:	d8c01d45 	stb	r3,117(sp)
   4d9c4:	d8801d05 	stb	r2,116(sp)
   4d9c8:	d8001d85 	stb	zero,118(sp)
   4d9cc:	88c00094 	ori	r3,r17,2
   4d9d0:	80009c16 	blt	r16,zero,4dc44 <___vfiprintf_internal_r+0x1368>
   4d9d4:	00bfdfc4 	movi	r2,-129
   4d9d8:	88a2703a 	and	r17,r17,r2
   4d9dc:	8c400094 	ori	r17,r17,2
   4d9e0:	002b883a 	mov	r21,zero
   4d9e4:	003f8506 	br	4d7fc <__alt_data_end+0xfffdb7fc>
   4d9e8:	b029883a 	mov	r20,r22
   4d9ec:	003c0b06 	br	4ca1c <__alt_data_end+0xfffdaa1c>
   4d9f0:	04e7c83a 	sub	r19,zero,r19
   4d9f4:	05400b44 	movi	r21,45
   4d9f8:	9804c03a 	cmpne	r2,r19,zero
   4d9fc:	0529c83a 	sub	r20,zero,r20
   4da00:	dd401d85 	stb	r21,118(sp)
   4da04:	a0a9c83a 	sub	r20,r20,r2
   4da08:	80009716 	blt	r16,zero,4dc68 <___vfiprintf_internal_r+0x138c>
   4da0c:	00bfdfc4 	movi	r2,-129
   4da10:	88a2703a 	and	r17,r17,r2
   4da14:	003db006 	br	4d0d8 <__alt_data_end+0xfffdb0d8>
   4da18:	b0c00007 	ldb	r3,0(r22)
   4da1c:	003c0c06 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4da20:	8880100c 	andi	r2,r17,64
   4da24:	d8001d85 	stb	zero,118(sp)
   4da28:	1000461e 	bne	r2,zero,4db44 <___vfiprintf_internal_r+0x1268>
   4da2c:	d9002217 	ldw	r4,136(sp)
   4da30:	0029883a 	mov	r20,zero
   4da34:	20800104 	addi	r2,r4,4
   4da38:	24c00017 	ldw	r19,0(r4)
   4da3c:	803df80e 	bge	r16,zero,4d220 <__alt_data_end+0xfffdb220>
   4da40:	9d06b03a 	or	r3,r19,r20
   4da44:	d8802215 	stw	r2,136(sp)
   4da48:	183d5e1e 	bne	r3,zero,4cfc4 <__alt_data_end+0xfffdafc4>
   4da4c:	002b883a 	mov	r21,zero
   4da50:	0005883a 	mov	r2,zero
   4da54:	003e1006 	br	4d298 <__alt_data_end+0xfffdb298>
   4da58:	8880040c 	andi	r2,r17,16
   4da5c:	1000321e 	bne	r2,zero,4db28 <___vfiprintf_internal_r+0x124c>
   4da60:	8c40100c 	andi	r17,r17,64
   4da64:	88008d26 	beq	r17,zero,4dc9c <___vfiprintf_internal_r+0x13c0>
   4da68:	d9402217 	ldw	r5,136(sp)
   4da6c:	d8c02417 	ldw	r3,144(sp)
   4da70:	28800017 	ldw	r2,0(r5)
   4da74:	29400104 	addi	r5,r5,4
   4da78:	d9402215 	stw	r5,136(sp)
   4da7c:	10c0000d 	sth	r3,0(r2)
   4da80:	003bca06 	br	4c9ac <__alt_data_end+0xfffda9ac>
   4da84:	8880100c 	andi	r2,r17,64
   4da88:	10003a26 	beq	r2,zero,4db74 <___vfiprintf_internal_r+0x1298>
   4da8c:	d8802217 	ldw	r2,136(sp)
   4da90:	14c0000f 	ldh	r19,0(r2)
   4da94:	10800104 	addi	r2,r2,4
   4da98:	d8802215 	stw	r2,136(sp)
   4da9c:	9829d7fa 	srai	r20,r19,31
   4daa0:	a005883a 	mov	r2,r20
   4daa4:	003d8506 	br	4d0bc <__alt_data_end+0xfffdb0bc>
   4daa8:	8880100c 	andi	r2,r17,64
   4daac:	10002b26 	beq	r2,zero,4db5c <___vfiprintf_internal_r+0x1280>
   4dab0:	d8802217 	ldw	r2,136(sp)
   4dab4:	0029883a 	mov	r20,zero
   4dab8:	14c0000b 	ldhu	r19,0(r2)
   4dabc:	10800104 	addi	r2,r2,4
   4dac0:	d8802215 	stw	r2,136(sp)
   4dac4:	003d5d06 	br	4d03c <__alt_data_end+0xfffdb03c>
   4dac8:	d9402017 	ldw	r5,128(sp)
   4dacc:	d9002117 	ldw	r4,132(sp)
   4dad0:	d9801a04 	addi	r6,sp,104
   4dad4:	d8c02a15 	stw	r3,168(sp)
   4dad8:	d9c02b15 	stw	r7,172(sp)
   4dadc:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4dae0:	d8c02a17 	ldw	r3,168(sp)
   4dae4:	d9c02b17 	ldw	r7,172(sp)
   4dae8:	103eb41e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4daec:	d9001b17 	ldw	r4,108(sp)
   4daf0:	d8801c17 	ldw	r2,112(sp)
   4daf4:	d811883a 	mov	r8,sp
   4daf8:	21400044 	addi	r5,r4,1
   4dafc:	003e6706 	br	4d49c <__alt_data_end+0xfffdb49c>
   4db00:	00bfffc4 	movi	r2,-1
   4db04:	003c4a06 	br	4cc30 <__alt_data_end+0xfffdac30>
   4db08:	9805883a 	mov	r2,r19
   4db0c:	003ee806 	br	4d6b0 <__alt_data_end+0xfffdb6b0>
   4db10:	d8c02217 	ldw	r3,136(sp)
   4db14:	0029883a 	mov	r20,zero
   4db18:	18800104 	addi	r2,r3,4
   4db1c:	1cc0000b 	ldhu	r19,0(r3)
   4db20:	803f9e0e 	bge	r16,zero,4d99c <__alt_data_end+0xfffdb99c>
   4db24:	003dd706 	br	4d284 <__alt_data_end+0xfffdb284>
   4db28:	d8c02217 	ldw	r3,136(sp)
   4db2c:	d9002417 	ldw	r4,144(sp)
   4db30:	18800017 	ldw	r2,0(r3)
   4db34:	18c00104 	addi	r3,r3,4
   4db38:	d8c02215 	stw	r3,136(sp)
   4db3c:	11000015 	stw	r4,0(r2)
   4db40:	003b9a06 	br	4c9ac <__alt_data_end+0xfffda9ac>
   4db44:	d8c02217 	ldw	r3,136(sp)
   4db48:	0029883a 	mov	r20,zero
   4db4c:	18800104 	addi	r2,r3,4
   4db50:	1cc0000b 	ldhu	r19,0(r3)
   4db54:	803db20e 	bge	r16,zero,4d220 <__alt_data_end+0xfffdb220>
   4db58:	003fb906 	br	4da40 <__alt_data_end+0xfffdba40>
   4db5c:	d9002217 	ldw	r4,136(sp)
   4db60:	0029883a 	mov	r20,zero
   4db64:	24c00017 	ldw	r19,0(r4)
   4db68:	21000104 	addi	r4,r4,4
   4db6c:	d9002215 	stw	r4,136(sp)
   4db70:	003d3206 	br	4d03c <__alt_data_end+0xfffdb03c>
   4db74:	d8c02217 	ldw	r3,136(sp)
   4db78:	1cc00017 	ldw	r19,0(r3)
   4db7c:	18c00104 	addi	r3,r3,4
   4db80:	d8c02215 	stw	r3,136(sp)
   4db84:	9829d7fa 	srai	r20,r19,31
   4db88:	a005883a 	mov	r2,r20
   4db8c:	003d4b06 	br	4d0bc <__alt_data_end+0xfffdb0bc>
   4db90:	0009883a 	mov	r4,zero
   4db94:	01400044 	movi	r5,1
   4db98:	d811883a 	mov	r8,sp
   4db9c:	003e4f06 	br	4d4dc <__alt_data_end+0xfffdb4dc>
   4dba0:	d8c02215 	stw	r3,136(sp)
   4dba4:	002b883a 	mov	r21,zero
   4dba8:	003db806 	br	4d28c <__alt_data_end+0xfffdb28c>
   4dbac:	d811883a 	mov	r8,sp
   4dbb0:	003e9606 	br	4d60c <__alt_data_end+0xfffdb60c>
   4dbb4:	01000174 	movhi	r4,5
   4dbb8:	211a9904 	addi	r4,r4,27236
   4dbbc:	d9002315 	stw	r4,140(sp)
   4dbc0:	003e6306 	br	4d550 <__alt_data_end+0xfffdb550>
   4dbc4:	b0c00043 	ldbu	r3,1(r22)
   4dbc8:	8c400814 	ori	r17,r17,32
   4dbcc:	b5800044 	addi	r22,r22,1
   4dbd0:	18c03fcc 	andi	r3,r3,255
   4dbd4:	18c0201c 	xori	r3,r3,128
   4dbd8:	18ffe004 	addi	r3,r3,-128
   4dbdc:	003b9c06 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4dbe0:	b809883a 	mov	r4,r23
   4dbe4:	da002a15 	stw	r8,168(sp)
   4dbe8:	00416b80 	call	416b8 <strlen>
   4dbec:	1029883a 	mov	r20,r2
   4dbf0:	dd401d83 	ldbu	r21,118(sp)
   4dbf4:	df002215 	stw	fp,136(sp)
   4dbf8:	0021883a 	mov	r16,zero
   4dbfc:	da002a17 	ldw	r8,168(sp)
   4dc00:	003c3906 	br	4cce8 <__alt_data_end+0xfffdace8>
   4dc04:	d9402017 	ldw	r5,128(sp)
   4dc08:	d9002117 	ldw	r4,132(sp)
   4dc0c:	d9801a04 	addi	r6,sp,104
   4dc10:	004c7c80 	call	4c7c8 <__sprint_r.part.0>
   4dc14:	103e691e 	bne	r2,zero,4d5bc <__alt_data_end+0xfffdb5bc>
   4dc18:	d9001b17 	ldw	r4,108(sp)
   4dc1c:	d8801c17 	ldw	r2,112(sp)
   4dc20:	d811883a 	mov	r8,sp
   4dc24:	21400044 	addi	r5,r4,1
   4dc28:	003e2e06 	br	4d4e4 <__alt_data_end+0xfffdb4e4>
   4dc2c:	01000174 	movhi	r4,5
   4dc30:	211a9d04 	addi	r4,r4,27252
   4dc34:	d9002315 	stw	r4,140(sp)
   4dc38:	d9001b17 	ldw	r4,108(sp)
   4dc3c:	21000044 	addi	r4,r4,1
   4dc40:	003c5e06 	br	4cdbc <__alt_data_end+0xfffdadbc>
   4dc44:	002b883a 	mov	r21,zero
   4dc48:	00800084 	movi	r2,2
   4dc4c:	10803fcc 	andi	r2,r2,255
   4dc50:	01000044 	movi	r4,1
   4dc54:	11002b26 	beq	r2,r4,4dd04 <___vfiprintf_internal_r+0x1428>
   4dc58:	01000084 	movi	r4,2
   4dc5c:	11002b1e 	bne	r2,r4,4dd0c <___vfiprintf_internal_r+0x1430>
   4dc60:	1823883a 	mov	r17,r3
   4dc64:	003ee506 	br	4d7fc <__alt_data_end+0xfffdb7fc>
   4dc68:	8807883a 	mov	r3,r17
   4dc6c:	00800044 	movi	r2,1
   4dc70:	003ff606 	br	4dc4c <__alt_data_end+0xfffdbc4c>
   4dc74:	00800184 	movi	r2,6
   4dc78:	1400012e 	bgeu	r2,r16,4dc80 <___vfiprintf_internal_r+0x13a4>
   4dc7c:	1021883a 	mov	r16,r2
   4dc80:	8029883a 	mov	r20,r16
   4dc84:	8027883a 	mov	r19,r16
   4dc88:	80002216 	blt	r16,zero,4dd14 <___vfiprintf_internal_r+0x1438>
   4dc8c:	05c00174 	movhi	r23,5
   4dc90:	df002215 	stw	fp,136(sp)
   4dc94:	bdda2d04 	addi	r23,r23,26804
   4dc98:	003cfb06 	br	4d088 <__alt_data_end+0xfffdb088>
   4dc9c:	d9002217 	ldw	r4,136(sp)
   4dca0:	d9402417 	ldw	r5,144(sp)
   4dca4:	20800017 	ldw	r2,0(r4)
   4dca8:	21000104 	addi	r4,r4,4
   4dcac:	d9002215 	stw	r4,136(sp)
   4dcb0:	11400015 	stw	r5,0(r2)
   4dcb4:	003b3d06 	br	4c9ac <__alt_data_end+0xfffda9ac>
   4dcb8:	01400174 	movhi	r5,5
   4dcbc:	295a9d04 	addi	r5,r5,27252
   4dcc0:	d9402315 	stw	r5,140(sp)
   4dcc4:	d9401b17 	ldw	r5,108(sp)
   4dcc8:	29400044 	addi	r5,r5,1
   4dccc:	003e6d06 	br	4d684 <__alt_data_end+0xfffdb684>
   4dcd0:	8029883a 	mov	r20,r16
   4dcd4:	dd401d83 	ldbu	r21,118(sp)
   4dcd8:	df002215 	stw	fp,136(sp)
   4dcdc:	0021883a 	mov	r16,zero
   4dce0:	003c0106 	br	4cce8 <__alt_data_end+0xfffdace8>
   4dce4:	00c00174 	movhi	r3,5
   4dce8:	18da9904 	addi	r3,r3,27236
   4dcec:	d8c02315 	stw	r3,140(sp)
   4dcf0:	280d883a 	mov	r6,r5
   4dcf4:	003c6906 	br	4ce9c <__alt_data_end+0xfffdae9c>
   4dcf8:	802d883a 	mov	r22,r16
   4dcfc:	0021883a 	mov	r16,zero
   4dd00:	003b5406 	br	4ca54 <__alt_data_end+0xfffdaa54>
   4dd04:	1823883a 	mov	r17,r3
   4dd08:	003cf306 	br	4d0d8 <__alt_data_end+0xfffdb0d8>
   4dd0c:	1823883a 	mov	r17,r3
   4dd10:	003cad06 	br	4cfc8 <__alt_data_end+0xfffdafc8>
   4dd14:	0027883a 	mov	r19,zero
   4dd18:	003fdc06 	br	4dc8c <__alt_data_end+0xfffdbc8c>
   4dd1c:	d9402217 	ldw	r5,136(sp)
   4dd20:	8005883a 	mov	r2,r16
   4dd24:	b0c00043 	ldbu	r3,1(r22)
   4dd28:	2c000017 	ldw	r16,0(r5)
   4dd2c:	29000104 	addi	r4,r5,4
   4dd30:	d9002215 	stw	r4,136(sp)
   4dd34:	102d883a 	mov	r22,r2
   4dd38:	803fa50e 	bge	r16,zero,4dbd0 <__alt_data_end+0xfffdbbd0>
   4dd3c:	18c03fcc 	andi	r3,r3,255
   4dd40:	18c0201c 	xori	r3,r3,128
   4dd44:	043fffc4 	movi	r16,-1
   4dd48:	18ffe004 	addi	r3,r3,-128
   4dd4c:	003b4006 	br	4ca50 <__alt_data_end+0xfffdaa50>
   4dd50:	d9402303 	ldbu	r5,140(sp)
   4dd54:	d9401d85 	stb	r5,118(sp)
   4dd58:	003cae06 	br	4d014 <__alt_data_end+0xfffdb014>
   4dd5c:	d8c02303 	ldbu	r3,140(sp)
   4dd60:	d8c01d85 	stb	r3,118(sp)
   4dd64:	003d1406 	br	4d1b8 <__alt_data_end+0xfffdb1b8>
   4dd68:	d8c02303 	ldbu	r3,140(sp)
   4dd6c:	d8c01d85 	stb	r3,118(sp)
   4dd70:	003cca06 	br	4d09c <__alt_data_end+0xfffdb09c>
   4dd74:	8880004c 	andi	r2,r17,1
   4dd78:	002b883a 	mov	r21,zero
   4dd7c:	10000526 	beq	r2,zero,4dd94 <___vfiprintf_internal_r+0x14b8>
   4dd80:	00800c04 	movi	r2,48
   4dd84:	d88019c5 	stb	r2,103(sp)
   4dd88:	dd002817 	ldw	r20,160(sp)
   4dd8c:	ddc019c4 	addi	r23,sp,103
   4dd90:	003bd506 	br	4cce8 <__alt_data_end+0xfffdace8>
   4dd94:	0029883a 	mov	r20,zero
   4dd98:	ddc01a04 	addi	r23,sp,104
   4dd9c:	003bd206 	br	4cce8 <__alt_data_end+0xfffdace8>
   4dda0:	d9002303 	ldbu	r4,140(sp)
   4dda4:	d9001d85 	stb	r4,118(sp)
   4dda8:	003da606 	br	4d444 <__alt_data_end+0xfffdb444>
   4ddac:	d8c02303 	ldbu	r3,140(sp)
   4ddb0:	d8c01d85 	stb	r3,118(sp)
   4ddb4:	003c7606 	br	4cf90 <__alt_data_end+0xfffdaf90>
   4ddb8:	d8c02303 	ldbu	r3,140(sp)
   4ddbc:	d8c01d85 	stb	r3,118(sp)
   4ddc0:	003c6506 	br	4cf58 <__alt_data_end+0xfffdaf58>
   4ddc4:	d9002303 	ldbu	r4,140(sp)
   4ddc8:	d9001d85 	stb	r4,118(sp)
   4ddcc:	003d3d06 	br	4d2c4 <__alt_data_end+0xfffdb2c4>
   4ddd0:	d8c02303 	ldbu	r3,140(sp)
   4ddd4:	d8c01d85 	stb	r3,118(sp)
   4ddd8:	003d1d06 	br	4d250 <__alt_data_end+0xfffdb250>
   4dddc:	d8c02303 	ldbu	r3,140(sp)
   4dde0:	d8c01d85 	stb	r3,118(sp)
   4dde4:	003d0306 	br	4d1f4 <__alt_data_end+0xfffdb1f4>

0004dde8 <__vfiprintf_internal>:
   4dde8:	008001b4 	movhi	r2,6
   4ddec:	10a18604 	addi	r2,r2,-31208
   4ddf0:	300f883a 	mov	r7,r6
   4ddf4:	280d883a 	mov	r6,r5
   4ddf8:	200b883a 	mov	r5,r4
   4ddfc:	11000017 	ldw	r4,0(r2)
   4de00:	004c8dc1 	jmpi	4c8dc <___vfiprintf_internal_r>

0004de04 <__sbprintf>:
   4de04:	2880030b 	ldhu	r2,12(r5)
   4de08:	2ac01917 	ldw	r11,100(r5)
   4de0c:	2a80038b 	ldhu	r10,14(r5)
   4de10:	2a400717 	ldw	r9,28(r5)
   4de14:	2a000917 	ldw	r8,36(r5)
   4de18:	defee204 	addi	sp,sp,-1144
   4de1c:	00c10004 	movi	r3,1024
   4de20:	dc011a15 	stw	r16,1128(sp)
   4de24:	10bfff4c 	andi	r2,r2,65533
   4de28:	2821883a 	mov	r16,r5
   4de2c:	d8cb883a 	add	r5,sp,r3
   4de30:	dc811c15 	stw	r18,1136(sp)
   4de34:	dc411b15 	stw	r17,1132(sp)
   4de38:	dfc11d15 	stw	ra,1140(sp)
   4de3c:	2025883a 	mov	r18,r4
   4de40:	d881030d 	sth	r2,1036(sp)
   4de44:	dac11915 	stw	r11,1124(sp)
   4de48:	da81038d 	sth	r10,1038(sp)
   4de4c:	da410715 	stw	r9,1052(sp)
   4de50:	da010915 	stw	r8,1060(sp)
   4de54:	dec10015 	stw	sp,1024(sp)
   4de58:	dec10415 	stw	sp,1040(sp)
   4de5c:	d8c10215 	stw	r3,1032(sp)
   4de60:	d8c10515 	stw	r3,1044(sp)
   4de64:	d8010615 	stw	zero,1048(sp)
   4de68:	004c8dc0 	call	4c8dc <___vfiprintf_internal_r>
   4de6c:	1023883a 	mov	r17,r2
   4de70:	10000416 	blt	r2,zero,4de84 <__sbprintf+0x80>
   4de74:	d9410004 	addi	r5,sp,1024
   4de78:	9009883a 	mov	r4,r18
   4de7c:	00479e00 	call	479e0 <_fflush_r>
   4de80:	10000d1e 	bne	r2,zero,4deb8 <__sbprintf+0xb4>
   4de84:	d881030b 	ldhu	r2,1036(sp)
   4de88:	1080100c 	andi	r2,r2,64
   4de8c:	10000326 	beq	r2,zero,4de9c <__sbprintf+0x98>
   4de90:	8080030b 	ldhu	r2,12(r16)
   4de94:	10801014 	ori	r2,r2,64
   4de98:	8080030d 	sth	r2,12(r16)
   4de9c:	8805883a 	mov	r2,r17
   4dea0:	dfc11d17 	ldw	ra,1140(sp)
   4dea4:	dc811c17 	ldw	r18,1136(sp)
   4dea8:	dc411b17 	ldw	r17,1132(sp)
   4deac:	dc011a17 	ldw	r16,1128(sp)
   4deb0:	dec11e04 	addi	sp,sp,1144
   4deb4:	f800283a 	ret
   4deb8:	047fffc4 	movi	r17,-1
   4debc:	003ff106 	br	4de84 <__alt_data_end+0xfffdbe84>

0004dec0 <__swbuf_r>:
   4dec0:	defffb04 	addi	sp,sp,-20
   4dec4:	dcc00315 	stw	r19,12(sp)
   4dec8:	dc800215 	stw	r18,8(sp)
   4decc:	dc000015 	stw	r16,0(sp)
   4ded0:	dfc00415 	stw	ra,16(sp)
   4ded4:	dc400115 	stw	r17,4(sp)
   4ded8:	2025883a 	mov	r18,r4
   4dedc:	2827883a 	mov	r19,r5
   4dee0:	3021883a 	mov	r16,r6
   4dee4:	20000226 	beq	r4,zero,4def0 <__swbuf_r+0x30>
   4dee8:	20800e17 	ldw	r2,56(r4)
   4deec:	10004226 	beq	r2,zero,4dff8 <__swbuf_r+0x138>
   4def0:	80800617 	ldw	r2,24(r16)
   4def4:	8100030b 	ldhu	r4,12(r16)
   4def8:	80800215 	stw	r2,8(r16)
   4defc:	2080020c 	andi	r2,r4,8
   4df00:	10003626 	beq	r2,zero,4dfdc <__swbuf_r+0x11c>
   4df04:	80c00417 	ldw	r3,16(r16)
   4df08:	18003426 	beq	r3,zero,4dfdc <__swbuf_r+0x11c>
   4df0c:	2088000c 	andi	r2,r4,8192
   4df10:	9c403fcc 	andi	r17,r19,255
   4df14:	10001a26 	beq	r2,zero,4df80 <__swbuf_r+0xc0>
   4df18:	80800017 	ldw	r2,0(r16)
   4df1c:	81000517 	ldw	r4,20(r16)
   4df20:	10c7c83a 	sub	r3,r2,r3
   4df24:	1900200e 	bge	r3,r4,4dfa8 <__swbuf_r+0xe8>
   4df28:	18c00044 	addi	r3,r3,1
   4df2c:	81000217 	ldw	r4,8(r16)
   4df30:	11400044 	addi	r5,r2,1
   4df34:	81400015 	stw	r5,0(r16)
   4df38:	213fffc4 	addi	r4,r4,-1
   4df3c:	81000215 	stw	r4,8(r16)
   4df40:	14c00005 	stb	r19,0(r2)
   4df44:	80800517 	ldw	r2,20(r16)
   4df48:	10c01e26 	beq	r2,r3,4dfc4 <__swbuf_r+0x104>
   4df4c:	8080030b 	ldhu	r2,12(r16)
   4df50:	1080004c 	andi	r2,r2,1
   4df54:	10000226 	beq	r2,zero,4df60 <__swbuf_r+0xa0>
   4df58:	00800284 	movi	r2,10
   4df5c:	88801926 	beq	r17,r2,4dfc4 <__swbuf_r+0x104>
   4df60:	8805883a 	mov	r2,r17
   4df64:	dfc00417 	ldw	ra,16(sp)
   4df68:	dcc00317 	ldw	r19,12(sp)
   4df6c:	dc800217 	ldw	r18,8(sp)
   4df70:	dc400117 	ldw	r17,4(sp)
   4df74:	dc000017 	ldw	r16,0(sp)
   4df78:	dec00504 	addi	sp,sp,20
   4df7c:	f800283a 	ret
   4df80:	81401917 	ldw	r5,100(r16)
   4df84:	00b7ffc4 	movi	r2,-8193
   4df88:	21080014 	ori	r4,r4,8192
   4df8c:	2884703a 	and	r2,r5,r2
   4df90:	80801915 	stw	r2,100(r16)
   4df94:	80800017 	ldw	r2,0(r16)
   4df98:	8100030d 	sth	r4,12(r16)
   4df9c:	81000517 	ldw	r4,20(r16)
   4dfa0:	10c7c83a 	sub	r3,r2,r3
   4dfa4:	193fe016 	blt	r3,r4,4df28 <__alt_data_end+0xfffdbf28>
   4dfa8:	800b883a 	mov	r5,r16
   4dfac:	9009883a 	mov	r4,r18
   4dfb0:	00479e00 	call	479e0 <_fflush_r>
   4dfb4:	1000071e 	bne	r2,zero,4dfd4 <__swbuf_r+0x114>
   4dfb8:	80800017 	ldw	r2,0(r16)
   4dfbc:	00c00044 	movi	r3,1
   4dfc0:	003fda06 	br	4df2c <__alt_data_end+0xfffdbf2c>
   4dfc4:	800b883a 	mov	r5,r16
   4dfc8:	9009883a 	mov	r4,r18
   4dfcc:	00479e00 	call	479e0 <_fflush_r>
   4dfd0:	103fe326 	beq	r2,zero,4df60 <__alt_data_end+0xfffdbf60>
   4dfd4:	00bfffc4 	movi	r2,-1
   4dfd8:	003fe206 	br	4df64 <__alt_data_end+0xfffdbf64>
   4dfdc:	800b883a 	mov	r5,r16
   4dfe0:	9009883a 	mov	r4,r18
   4dfe4:	0045dc00 	call	45dc0 <__swsetup_r>
   4dfe8:	103ffa1e 	bne	r2,zero,4dfd4 <__alt_data_end+0xfffdbfd4>
   4dfec:	8100030b 	ldhu	r4,12(r16)
   4dff0:	80c00417 	ldw	r3,16(r16)
   4dff4:	003fc506 	br	4df0c <__alt_data_end+0xfffdbf0c>
   4dff8:	0047dcc0 	call	47dcc <__sinit>
   4dffc:	003fbc06 	br	4def0 <__alt_data_end+0xfffdbef0>

0004e000 <__swbuf>:
   4e000:	008001b4 	movhi	r2,6
   4e004:	10a18604 	addi	r2,r2,-31208
   4e008:	280d883a 	mov	r6,r5
   4e00c:	200b883a 	mov	r5,r4
   4e010:	11000017 	ldw	r4,0(r2)
   4e014:	004dec01 	jmpi	4dec0 <__swbuf_r>

0004e018 <_write_r>:
   4e018:	defffd04 	addi	sp,sp,-12
   4e01c:	2805883a 	mov	r2,r5
   4e020:	dc000015 	stw	r16,0(sp)
   4e024:	040001b4 	movhi	r16,6
   4e028:	dc400115 	stw	r17,4(sp)
   4e02c:	300b883a 	mov	r5,r6
   4e030:	84288204 	addi	r16,r16,-24056
   4e034:	2023883a 	mov	r17,r4
   4e038:	380d883a 	mov	r6,r7
   4e03c:	1009883a 	mov	r4,r2
   4e040:	dfc00215 	stw	ra,8(sp)
   4e044:	80000015 	stw	zero,0(r16)
   4e048:	00524a00 	call	524a0 <write>
   4e04c:	00ffffc4 	movi	r3,-1
   4e050:	10c00526 	beq	r2,r3,4e068 <_write_r+0x50>
   4e054:	dfc00217 	ldw	ra,8(sp)
   4e058:	dc400117 	ldw	r17,4(sp)
   4e05c:	dc000017 	ldw	r16,0(sp)
   4e060:	dec00304 	addi	sp,sp,12
   4e064:	f800283a 	ret
   4e068:	80c00017 	ldw	r3,0(r16)
   4e06c:	183ff926 	beq	r3,zero,4e054 <__alt_data_end+0xfffdc054>
   4e070:	88c00015 	stw	r3,0(r17)
   4e074:	003ff706 	br	4e054 <__alt_data_end+0xfffdc054>

0004e078 <_close_r>:
   4e078:	defffd04 	addi	sp,sp,-12
   4e07c:	dc000015 	stw	r16,0(sp)
   4e080:	040001b4 	movhi	r16,6
   4e084:	dc400115 	stw	r17,4(sp)
   4e088:	84288204 	addi	r16,r16,-24056
   4e08c:	2023883a 	mov	r17,r4
   4e090:	2809883a 	mov	r4,r5
   4e094:	dfc00215 	stw	ra,8(sp)
   4e098:	80000015 	stw	zero,0(r16)
   4e09c:	0051c480 	call	51c48 <close>
   4e0a0:	00ffffc4 	movi	r3,-1
   4e0a4:	10c00526 	beq	r2,r3,4e0bc <_close_r+0x44>
   4e0a8:	dfc00217 	ldw	ra,8(sp)
   4e0ac:	dc400117 	ldw	r17,4(sp)
   4e0b0:	dc000017 	ldw	r16,0(sp)
   4e0b4:	dec00304 	addi	sp,sp,12
   4e0b8:	f800283a 	ret
   4e0bc:	80c00017 	ldw	r3,0(r16)
   4e0c0:	183ff926 	beq	r3,zero,4e0a8 <__alt_data_end+0xfffdc0a8>
   4e0c4:	88c00015 	stw	r3,0(r17)
   4e0c8:	003ff706 	br	4e0a8 <__alt_data_end+0xfffdc0a8>

0004e0cc <_calloc_r>:
   4e0cc:	defffe04 	addi	sp,sp,-8
   4e0d0:	2805883a 	mov	r2,r5
   4e0d4:	dc000015 	stw	r16,0(sp)
   4e0d8:	300b883a 	mov	r5,r6
   4e0dc:	2021883a 	mov	r16,r4
   4e0e0:	1009883a 	mov	r4,r2
   4e0e4:	dfc00115 	stw	ra,4(sp)
   4e0e8:	004146c0 	call	4146c <__mulsi3>
   4e0ec:	100b883a 	mov	r5,r2
   4e0f0:	8009883a 	mov	r4,r16
   4e0f4:	0048b380 	call	48b38 <_malloc_r>
   4e0f8:	10002926 	beq	r2,zero,4e1a0 <_calloc_r+0xd4>
   4e0fc:	11bfff17 	ldw	r6,-4(r2)
   4e100:	1021883a 	mov	r16,r2
   4e104:	00bfff04 	movi	r2,-4
   4e108:	308c703a 	and	r6,r6,r2
   4e10c:	00c00904 	movi	r3,36
   4e110:	308d883a 	add	r6,r6,r2
   4e114:	19801636 	bltu	r3,r6,4e170 <_calloc_r+0xa4>
   4e118:	008004c4 	movi	r2,19
   4e11c:	11800b2e 	bgeu	r2,r6,4e14c <_calloc_r+0x80>
   4e120:	80000015 	stw	zero,0(r16)
   4e124:	80000115 	stw	zero,4(r16)
   4e128:	008006c4 	movi	r2,27
   4e12c:	11801a2e 	bgeu	r2,r6,4e198 <_calloc_r+0xcc>
   4e130:	80000215 	stw	zero,8(r16)
   4e134:	80000315 	stw	zero,12(r16)
   4e138:	30c0151e 	bne	r6,r3,4e190 <_calloc_r+0xc4>
   4e13c:	80000415 	stw	zero,16(r16)
   4e140:	80800604 	addi	r2,r16,24
   4e144:	80000515 	stw	zero,20(r16)
   4e148:	00000106 	br	4e150 <_calloc_r+0x84>
   4e14c:	8005883a 	mov	r2,r16
   4e150:	10000015 	stw	zero,0(r2)
   4e154:	10000115 	stw	zero,4(r2)
   4e158:	10000215 	stw	zero,8(r2)
   4e15c:	8005883a 	mov	r2,r16
   4e160:	dfc00117 	ldw	ra,4(sp)
   4e164:	dc000017 	ldw	r16,0(sp)
   4e168:	dec00204 	addi	sp,sp,8
   4e16c:	f800283a 	ret
   4e170:	000b883a 	mov	r5,zero
   4e174:	8009883a 	mov	r4,r16
   4e178:	00496cc0 	call	496cc <memset>
   4e17c:	8005883a 	mov	r2,r16
   4e180:	dfc00117 	ldw	ra,4(sp)
   4e184:	dc000017 	ldw	r16,0(sp)
   4e188:	dec00204 	addi	sp,sp,8
   4e18c:	f800283a 	ret
   4e190:	80800404 	addi	r2,r16,16
   4e194:	003fee06 	br	4e150 <__alt_data_end+0xfffdc150>
   4e198:	80800204 	addi	r2,r16,8
   4e19c:	003fec06 	br	4e150 <__alt_data_end+0xfffdc150>
   4e1a0:	0005883a 	mov	r2,zero
   4e1a4:	003fee06 	br	4e160 <__alt_data_end+0xfffdc160>

0004e1a8 <_fclose_r>:
   4e1a8:	28003926 	beq	r5,zero,4e290 <_fclose_r+0xe8>
   4e1ac:	defffc04 	addi	sp,sp,-16
   4e1b0:	dc400115 	stw	r17,4(sp)
   4e1b4:	dc000015 	stw	r16,0(sp)
   4e1b8:	dfc00315 	stw	ra,12(sp)
   4e1bc:	dc800215 	stw	r18,8(sp)
   4e1c0:	2023883a 	mov	r17,r4
   4e1c4:	2821883a 	mov	r16,r5
   4e1c8:	20000226 	beq	r4,zero,4e1d4 <_fclose_r+0x2c>
   4e1cc:	20800e17 	ldw	r2,56(r4)
   4e1d0:	10002726 	beq	r2,zero,4e270 <_fclose_r+0xc8>
   4e1d4:	8080030f 	ldh	r2,12(r16)
   4e1d8:	1000071e 	bne	r2,zero,4e1f8 <_fclose_r+0x50>
   4e1dc:	0005883a 	mov	r2,zero
   4e1e0:	dfc00317 	ldw	ra,12(sp)
   4e1e4:	dc800217 	ldw	r18,8(sp)
   4e1e8:	dc400117 	ldw	r17,4(sp)
   4e1ec:	dc000017 	ldw	r16,0(sp)
   4e1f0:	dec00404 	addi	sp,sp,16
   4e1f4:	f800283a 	ret
   4e1f8:	800b883a 	mov	r5,r16
   4e1fc:	8809883a 	mov	r4,r17
   4e200:	00477c40 	call	477c4 <__sflush_r>
   4e204:	1025883a 	mov	r18,r2
   4e208:	80800b17 	ldw	r2,44(r16)
   4e20c:	10000426 	beq	r2,zero,4e220 <_fclose_r+0x78>
   4e210:	81400717 	ldw	r5,28(r16)
   4e214:	8809883a 	mov	r4,r17
   4e218:	103ee83a 	callr	r2
   4e21c:	10001616 	blt	r2,zero,4e278 <_fclose_r+0xd0>
   4e220:	8080030b 	ldhu	r2,12(r16)
   4e224:	1080200c 	andi	r2,r2,128
   4e228:	1000151e 	bne	r2,zero,4e280 <_fclose_r+0xd8>
   4e22c:	81400c17 	ldw	r5,48(r16)
   4e230:	28000526 	beq	r5,zero,4e248 <_fclose_r+0xa0>
   4e234:	80801004 	addi	r2,r16,64
   4e238:	28800226 	beq	r5,r2,4e244 <_fclose_r+0x9c>
   4e23c:	8809883a 	mov	r4,r17
   4e240:	0047f400 	call	47f40 <_free_r>
   4e244:	80000c15 	stw	zero,48(r16)
   4e248:	81401117 	ldw	r5,68(r16)
   4e24c:	28000326 	beq	r5,zero,4e25c <_fclose_r+0xb4>
   4e250:	8809883a 	mov	r4,r17
   4e254:	0047f400 	call	47f40 <_free_r>
   4e258:	80001115 	stw	zero,68(r16)
   4e25c:	0047ddc0 	call	47ddc <__sfp_lock_acquire>
   4e260:	8000030d 	sth	zero,12(r16)
   4e264:	0047de00 	call	47de0 <__sfp_lock_release>
   4e268:	9005883a 	mov	r2,r18
   4e26c:	003fdc06 	br	4e1e0 <__alt_data_end+0xfffdc1e0>
   4e270:	0047dcc0 	call	47dcc <__sinit>
   4e274:	003fd706 	br	4e1d4 <__alt_data_end+0xfffdc1d4>
   4e278:	04bfffc4 	movi	r18,-1
   4e27c:	003fe806 	br	4e220 <__alt_data_end+0xfffdc220>
   4e280:	81400417 	ldw	r5,16(r16)
   4e284:	8809883a 	mov	r4,r17
   4e288:	0047f400 	call	47f40 <_free_r>
   4e28c:	003fe706 	br	4e22c <__alt_data_end+0xfffdc22c>
   4e290:	0005883a 	mov	r2,zero
   4e294:	f800283a 	ret

0004e298 <fclose>:
   4e298:	008001b4 	movhi	r2,6
   4e29c:	10a18604 	addi	r2,r2,-31208
   4e2a0:	200b883a 	mov	r5,r4
   4e2a4:	11000017 	ldw	r4,0(r2)
   4e2a8:	004e1a81 	jmpi	4e1a8 <_fclose_r>

0004e2ac <__fputwc>:
   4e2ac:	defff804 	addi	sp,sp,-32
   4e2b0:	dcc00415 	stw	r19,16(sp)
   4e2b4:	dc800315 	stw	r18,12(sp)
   4e2b8:	dc000115 	stw	r16,4(sp)
   4e2bc:	dfc00715 	stw	ra,28(sp)
   4e2c0:	dd400615 	stw	r21,24(sp)
   4e2c4:	dd000515 	stw	r20,20(sp)
   4e2c8:	dc400215 	stw	r17,8(sp)
   4e2cc:	2027883a 	mov	r19,r4
   4e2d0:	2825883a 	mov	r18,r5
   4e2d4:	3021883a 	mov	r16,r6
   4e2d8:	00489280 	call	48928 <__locale_mb_cur_max>
   4e2dc:	00c00044 	movi	r3,1
   4e2e0:	10c03e26 	beq	r2,r3,4e3dc <__fputwc+0x130>
   4e2e4:	81c01704 	addi	r7,r16,92
   4e2e8:	900d883a 	mov	r6,r18
   4e2ec:	d80b883a 	mov	r5,sp
   4e2f0:	9809883a 	mov	r4,r19
   4e2f4:	004e6240 	call	4e624 <_wcrtomb_r>
   4e2f8:	1029883a 	mov	r20,r2
   4e2fc:	00bfffc4 	movi	r2,-1
   4e300:	a0802026 	beq	r20,r2,4e384 <__fputwc+0xd8>
   4e304:	d9400003 	ldbu	r5,0(sp)
   4e308:	a0001c26 	beq	r20,zero,4e37c <__fputwc+0xd0>
   4e30c:	0023883a 	mov	r17,zero
   4e310:	05400284 	movi	r21,10
   4e314:	00000906 	br	4e33c <__fputwc+0x90>
   4e318:	80800017 	ldw	r2,0(r16)
   4e31c:	11400005 	stb	r5,0(r2)
   4e320:	80c00017 	ldw	r3,0(r16)
   4e324:	18c00044 	addi	r3,r3,1
   4e328:	80c00015 	stw	r3,0(r16)
   4e32c:	8c400044 	addi	r17,r17,1
   4e330:	dc45883a 	add	r2,sp,r17
   4e334:	8d00112e 	bgeu	r17,r20,4e37c <__fputwc+0xd0>
   4e338:	11400003 	ldbu	r5,0(r2)
   4e33c:	80c00217 	ldw	r3,8(r16)
   4e340:	18ffffc4 	addi	r3,r3,-1
   4e344:	80c00215 	stw	r3,8(r16)
   4e348:	183ff30e 	bge	r3,zero,4e318 <__alt_data_end+0xfffdc318>
   4e34c:	80800617 	ldw	r2,24(r16)
   4e350:	18801916 	blt	r3,r2,4e3b8 <__fputwc+0x10c>
   4e354:	80800017 	ldw	r2,0(r16)
   4e358:	11400005 	stb	r5,0(r2)
   4e35c:	80800017 	ldw	r2,0(r16)
   4e360:	10c00003 	ldbu	r3,0(r2)
   4e364:	10800044 	addi	r2,r2,1
   4e368:	1d402326 	beq	r3,r21,4e3f8 <__fputwc+0x14c>
   4e36c:	80800015 	stw	r2,0(r16)
   4e370:	8c400044 	addi	r17,r17,1
   4e374:	dc45883a 	add	r2,sp,r17
   4e378:	8d3fef36 	bltu	r17,r20,4e338 <__alt_data_end+0xfffdc338>
   4e37c:	9005883a 	mov	r2,r18
   4e380:	00000406 	br	4e394 <__fputwc+0xe8>
   4e384:	80c0030b 	ldhu	r3,12(r16)
   4e388:	a005883a 	mov	r2,r20
   4e38c:	18c01014 	ori	r3,r3,64
   4e390:	80c0030d 	sth	r3,12(r16)
   4e394:	dfc00717 	ldw	ra,28(sp)
   4e398:	dd400617 	ldw	r21,24(sp)
   4e39c:	dd000517 	ldw	r20,20(sp)
   4e3a0:	dcc00417 	ldw	r19,16(sp)
   4e3a4:	dc800317 	ldw	r18,12(sp)
   4e3a8:	dc400217 	ldw	r17,8(sp)
   4e3ac:	dc000117 	ldw	r16,4(sp)
   4e3b0:	dec00804 	addi	sp,sp,32
   4e3b4:	f800283a 	ret
   4e3b8:	800d883a 	mov	r6,r16
   4e3bc:	29403fcc 	andi	r5,r5,255
   4e3c0:	9809883a 	mov	r4,r19
   4e3c4:	004dec00 	call	4dec0 <__swbuf_r>
   4e3c8:	10bfffe0 	cmpeqi	r2,r2,-1
   4e3cc:	10803fcc 	andi	r2,r2,255
   4e3d0:	103fd626 	beq	r2,zero,4e32c <__alt_data_end+0xfffdc32c>
   4e3d4:	00bfffc4 	movi	r2,-1
   4e3d8:	003fee06 	br	4e394 <__alt_data_end+0xfffdc394>
   4e3dc:	90ffffc4 	addi	r3,r18,-1
   4e3e0:	01003f84 	movi	r4,254
   4e3e4:	20ffbf36 	bltu	r4,r3,4e2e4 <__alt_data_end+0xfffdc2e4>
   4e3e8:	900b883a 	mov	r5,r18
   4e3ec:	dc800005 	stb	r18,0(sp)
   4e3f0:	1029883a 	mov	r20,r2
   4e3f4:	003fc506 	br	4e30c <__alt_data_end+0xfffdc30c>
   4e3f8:	800d883a 	mov	r6,r16
   4e3fc:	a80b883a 	mov	r5,r21
   4e400:	9809883a 	mov	r4,r19
   4e404:	004dec00 	call	4dec0 <__swbuf_r>
   4e408:	10bfffe0 	cmpeqi	r2,r2,-1
   4e40c:	003fef06 	br	4e3cc <__alt_data_end+0xfffdc3cc>

0004e410 <_fputwc_r>:
   4e410:	3080030b 	ldhu	r2,12(r6)
   4e414:	10c8000c 	andi	r3,r2,8192
   4e418:	1800051e 	bne	r3,zero,4e430 <_fputwc_r+0x20>
   4e41c:	30c01917 	ldw	r3,100(r6)
   4e420:	10880014 	ori	r2,r2,8192
   4e424:	3080030d 	sth	r2,12(r6)
   4e428:	18880014 	ori	r2,r3,8192
   4e42c:	30801915 	stw	r2,100(r6)
   4e430:	004e2ac1 	jmpi	4e2ac <__fputwc>

0004e434 <fputwc>:
   4e434:	008001b4 	movhi	r2,6
   4e438:	defffc04 	addi	sp,sp,-16
   4e43c:	10a18604 	addi	r2,r2,-31208
   4e440:	dc000115 	stw	r16,4(sp)
   4e444:	14000017 	ldw	r16,0(r2)
   4e448:	dc400215 	stw	r17,8(sp)
   4e44c:	dfc00315 	stw	ra,12(sp)
   4e450:	2023883a 	mov	r17,r4
   4e454:	80000226 	beq	r16,zero,4e460 <fputwc+0x2c>
   4e458:	80800e17 	ldw	r2,56(r16)
   4e45c:	10001026 	beq	r2,zero,4e4a0 <fputwc+0x6c>
   4e460:	2880030b 	ldhu	r2,12(r5)
   4e464:	10c8000c 	andi	r3,r2,8192
   4e468:	1800051e 	bne	r3,zero,4e480 <fputwc+0x4c>
   4e46c:	28c01917 	ldw	r3,100(r5)
   4e470:	10880014 	ori	r2,r2,8192
   4e474:	2880030d 	sth	r2,12(r5)
   4e478:	18880014 	ori	r2,r3,8192
   4e47c:	28801915 	stw	r2,100(r5)
   4e480:	280d883a 	mov	r6,r5
   4e484:	8009883a 	mov	r4,r16
   4e488:	880b883a 	mov	r5,r17
   4e48c:	dfc00317 	ldw	ra,12(sp)
   4e490:	dc400217 	ldw	r17,8(sp)
   4e494:	dc000117 	ldw	r16,4(sp)
   4e498:	dec00404 	addi	sp,sp,16
   4e49c:	004e2ac1 	jmpi	4e2ac <__fputwc>
   4e4a0:	8009883a 	mov	r4,r16
   4e4a4:	d9400015 	stw	r5,0(sp)
   4e4a8:	0047dcc0 	call	47dcc <__sinit>
   4e4ac:	d9400017 	ldw	r5,0(sp)
   4e4b0:	003feb06 	br	4e460 <__alt_data_end+0xfffdc460>

0004e4b4 <_fstat_r>:
   4e4b4:	defffd04 	addi	sp,sp,-12
   4e4b8:	2805883a 	mov	r2,r5
   4e4bc:	dc000015 	stw	r16,0(sp)
   4e4c0:	040001b4 	movhi	r16,6
   4e4c4:	dc400115 	stw	r17,4(sp)
   4e4c8:	84288204 	addi	r16,r16,-24056
   4e4cc:	2023883a 	mov	r17,r4
   4e4d0:	300b883a 	mov	r5,r6
   4e4d4:	1009883a 	mov	r4,r2
   4e4d8:	dfc00215 	stw	ra,8(sp)
   4e4dc:	80000015 	stw	zero,0(r16)
   4e4e0:	0051d880 	call	51d88 <fstat>
   4e4e4:	00ffffc4 	movi	r3,-1
   4e4e8:	10c00526 	beq	r2,r3,4e500 <_fstat_r+0x4c>
   4e4ec:	dfc00217 	ldw	ra,8(sp)
   4e4f0:	dc400117 	ldw	r17,4(sp)
   4e4f4:	dc000017 	ldw	r16,0(sp)
   4e4f8:	dec00304 	addi	sp,sp,12
   4e4fc:	f800283a 	ret
   4e500:	80c00017 	ldw	r3,0(r16)
   4e504:	183ff926 	beq	r3,zero,4e4ec <__alt_data_end+0xfffdc4ec>
   4e508:	88c00015 	stw	r3,0(r17)
   4e50c:	003ff706 	br	4e4ec <__alt_data_end+0xfffdc4ec>

0004e510 <_isatty_r>:
   4e510:	defffd04 	addi	sp,sp,-12
   4e514:	dc000015 	stw	r16,0(sp)
   4e518:	040001b4 	movhi	r16,6
   4e51c:	dc400115 	stw	r17,4(sp)
   4e520:	84288204 	addi	r16,r16,-24056
   4e524:	2023883a 	mov	r17,r4
   4e528:	2809883a 	mov	r4,r5
   4e52c:	dfc00215 	stw	ra,8(sp)
   4e530:	80000015 	stw	zero,0(r16)
   4e534:	0051e7c0 	call	51e7c <isatty>
   4e538:	00ffffc4 	movi	r3,-1
   4e53c:	10c00526 	beq	r2,r3,4e554 <_isatty_r+0x44>
   4e540:	dfc00217 	ldw	ra,8(sp)
   4e544:	dc400117 	ldw	r17,4(sp)
   4e548:	dc000017 	ldw	r16,0(sp)
   4e54c:	dec00304 	addi	sp,sp,12
   4e550:	f800283a 	ret
   4e554:	80c00017 	ldw	r3,0(r16)
   4e558:	183ff926 	beq	r3,zero,4e540 <__alt_data_end+0xfffdc540>
   4e55c:	88c00015 	stw	r3,0(r17)
   4e560:	003ff706 	br	4e540 <__alt_data_end+0xfffdc540>

0004e564 <_lseek_r>:
   4e564:	defffd04 	addi	sp,sp,-12
   4e568:	2805883a 	mov	r2,r5
   4e56c:	dc000015 	stw	r16,0(sp)
   4e570:	040001b4 	movhi	r16,6
   4e574:	dc400115 	stw	r17,4(sp)
   4e578:	300b883a 	mov	r5,r6
   4e57c:	84288204 	addi	r16,r16,-24056
   4e580:	2023883a 	mov	r17,r4
   4e584:	380d883a 	mov	r6,r7
   4e588:	1009883a 	mov	r4,r2
   4e58c:	dfc00215 	stw	ra,8(sp)
   4e590:	80000015 	stw	zero,0(r16)
   4e594:	00520500 	call	52050 <lseek>
   4e598:	00ffffc4 	movi	r3,-1
   4e59c:	10c00526 	beq	r2,r3,4e5b4 <_lseek_r+0x50>
   4e5a0:	dfc00217 	ldw	ra,8(sp)
   4e5a4:	dc400117 	ldw	r17,4(sp)
   4e5a8:	dc000017 	ldw	r16,0(sp)
   4e5ac:	dec00304 	addi	sp,sp,12
   4e5b0:	f800283a 	ret
   4e5b4:	80c00017 	ldw	r3,0(r16)
   4e5b8:	183ff926 	beq	r3,zero,4e5a0 <__alt_data_end+0xfffdc5a0>
   4e5bc:	88c00015 	stw	r3,0(r17)
   4e5c0:	003ff706 	br	4e5a0 <__alt_data_end+0xfffdc5a0>

0004e5c4 <_read_r>:
   4e5c4:	defffd04 	addi	sp,sp,-12
   4e5c8:	2805883a 	mov	r2,r5
   4e5cc:	dc000015 	stw	r16,0(sp)
   4e5d0:	040001b4 	movhi	r16,6
   4e5d4:	dc400115 	stw	r17,4(sp)
   4e5d8:	300b883a 	mov	r5,r6
   4e5dc:	84288204 	addi	r16,r16,-24056
   4e5e0:	2023883a 	mov	r17,r4
   4e5e4:	380d883a 	mov	r6,r7
   4e5e8:	1009883a 	mov	r4,r2
   4e5ec:	dfc00215 	stw	ra,8(sp)
   4e5f0:	80000015 	stw	zero,0(r16)
   4e5f4:	005222c0 	call	5222c <read>
   4e5f8:	00ffffc4 	movi	r3,-1
   4e5fc:	10c00526 	beq	r2,r3,4e614 <_read_r+0x50>
   4e600:	dfc00217 	ldw	ra,8(sp)
   4e604:	dc400117 	ldw	r17,4(sp)
   4e608:	dc000017 	ldw	r16,0(sp)
   4e60c:	dec00304 	addi	sp,sp,12
   4e610:	f800283a 	ret
   4e614:	80c00017 	ldw	r3,0(r16)
   4e618:	183ff926 	beq	r3,zero,4e600 <__alt_data_end+0xfffdc600>
   4e61c:	88c00015 	stw	r3,0(r17)
   4e620:	003ff706 	br	4e600 <__alt_data_end+0xfffdc600>

0004e624 <_wcrtomb_r>:
   4e624:	defff604 	addi	sp,sp,-40
   4e628:	008001b4 	movhi	r2,6
   4e62c:	dc800815 	stw	r18,32(sp)
   4e630:	dc400715 	stw	r17,28(sp)
   4e634:	dc000615 	stw	r16,24(sp)
   4e638:	10a18a04 	addi	r2,r2,-31192
   4e63c:	dfc00915 	stw	ra,36(sp)
   4e640:	2021883a 	mov	r16,r4
   4e644:	3823883a 	mov	r17,r7
   4e648:	14800017 	ldw	r18,0(r2)
   4e64c:	28001426 	beq	r5,zero,4e6a0 <_wcrtomb_r+0x7c>
   4e650:	d9400415 	stw	r5,16(sp)
   4e654:	d9800515 	stw	r6,20(sp)
   4e658:	004891c0 	call	4891c <__locale_charset>
   4e65c:	d9800517 	ldw	r6,20(sp)
   4e660:	d9400417 	ldw	r5,16(sp)
   4e664:	100f883a 	mov	r7,r2
   4e668:	dc400015 	stw	r17,0(sp)
   4e66c:	8009883a 	mov	r4,r16
   4e670:	903ee83a 	callr	r18
   4e674:	00ffffc4 	movi	r3,-1
   4e678:	10c0031e 	bne	r2,r3,4e688 <_wcrtomb_r+0x64>
   4e67c:	88000015 	stw	zero,0(r17)
   4e680:	00c02284 	movi	r3,138
   4e684:	80c00015 	stw	r3,0(r16)
   4e688:	dfc00917 	ldw	ra,36(sp)
   4e68c:	dc800817 	ldw	r18,32(sp)
   4e690:	dc400717 	ldw	r17,28(sp)
   4e694:	dc000617 	ldw	r16,24(sp)
   4e698:	dec00a04 	addi	sp,sp,40
   4e69c:	f800283a 	ret
   4e6a0:	004891c0 	call	4891c <__locale_charset>
   4e6a4:	100f883a 	mov	r7,r2
   4e6a8:	dc400015 	stw	r17,0(sp)
   4e6ac:	000d883a 	mov	r6,zero
   4e6b0:	d9400104 	addi	r5,sp,4
   4e6b4:	8009883a 	mov	r4,r16
   4e6b8:	903ee83a 	callr	r18
   4e6bc:	003fed06 	br	4e674 <__alt_data_end+0xfffdc674>

0004e6c0 <wcrtomb>:
   4e6c0:	defff604 	addi	sp,sp,-40
   4e6c4:	008001b4 	movhi	r2,6
   4e6c8:	dc800615 	stw	r18,24(sp)
   4e6cc:	dc400515 	stw	r17,20(sp)
   4e6d0:	10a18604 	addi	r2,r2,-31208
   4e6d4:	dfc00915 	stw	ra,36(sp)
   4e6d8:	dd000815 	stw	r20,32(sp)
   4e6dc:	dcc00715 	stw	r19,28(sp)
   4e6e0:	dc000415 	stw	r16,16(sp)
   4e6e4:	3025883a 	mov	r18,r6
   4e6e8:	14400017 	ldw	r17,0(r2)
   4e6ec:	20001926 	beq	r4,zero,4e754 <wcrtomb+0x94>
   4e6f0:	008001b4 	movhi	r2,6
   4e6f4:	10a18a04 	addi	r2,r2,-31192
   4e6f8:	15000017 	ldw	r20,0(r2)
   4e6fc:	2021883a 	mov	r16,r4
   4e700:	2827883a 	mov	r19,r5
   4e704:	004891c0 	call	4891c <__locale_charset>
   4e708:	100f883a 	mov	r7,r2
   4e70c:	dc800015 	stw	r18,0(sp)
   4e710:	980d883a 	mov	r6,r19
   4e714:	800b883a 	mov	r5,r16
   4e718:	8809883a 	mov	r4,r17
   4e71c:	a03ee83a 	callr	r20
   4e720:	00ffffc4 	movi	r3,-1
   4e724:	10c0031e 	bne	r2,r3,4e734 <wcrtomb+0x74>
   4e728:	90000015 	stw	zero,0(r18)
   4e72c:	00c02284 	movi	r3,138
   4e730:	88c00015 	stw	r3,0(r17)
   4e734:	dfc00917 	ldw	ra,36(sp)
   4e738:	dd000817 	ldw	r20,32(sp)
   4e73c:	dcc00717 	ldw	r19,28(sp)
   4e740:	dc800617 	ldw	r18,24(sp)
   4e744:	dc400517 	ldw	r17,20(sp)
   4e748:	dc000417 	ldw	r16,16(sp)
   4e74c:	dec00a04 	addi	sp,sp,40
   4e750:	f800283a 	ret
   4e754:	008001b4 	movhi	r2,6
   4e758:	10a18a04 	addi	r2,r2,-31192
   4e75c:	14000017 	ldw	r16,0(r2)
   4e760:	004891c0 	call	4891c <__locale_charset>
   4e764:	100f883a 	mov	r7,r2
   4e768:	dc800015 	stw	r18,0(sp)
   4e76c:	000d883a 	mov	r6,zero
   4e770:	d9400104 	addi	r5,sp,4
   4e774:	8809883a 	mov	r4,r17
   4e778:	803ee83a 	callr	r16
   4e77c:	003fe806 	br	4e720 <__alt_data_end+0xfffdc720>

0004e780 <__ascii_wctomb>:
   4e780:	28000526 	beq	r5,zero,4e798 <__ascii_wctomb+0x18>
   4e784:	00803fc4 	movi	r2,255
   4e788:	11800536 	bltu	r2,r6,4e7a0 <__ascii_wctomb+0x20>
   4e78c:	29800005 	stb	r6,0(r5)
   4e790:	00800044 	movi	r2,1
   4e794:	f800283a 	ret
   4e798:	0005883a 	mov	r2,zero
   4e79c:	f800283a 	ret
   4e7a0:	00802284 	movi	r2,138
   4e7a4:	20800015 	stw	r2,0(r4)
   4e7a8:	00bfffc4 	movi	r2,-1
   4e7ac:	f800283a 	ret

0004e7b0 <_wctomb_r>:
   4e7b0:	008001b4 	movhi	r2,6
   4e7b4:	defff904 	addi	sp,sp,-28
   4e7b8:	10a18a04 	addi	r2,r2,-31192
   4e7bc:	dfc00615 	stw	ra,24(sp)
   4e7c0:	dc400515 	stw	r17,20(sp)
   4e7c4:	dc000415 	stw	r16,16(sp)
   4e7c8:	3823883a 	mov	r17,r7
   4e7cc:	14000017 	ldw	r16,0(r2)
   4e7d0:	d9000115 	stw	r4,4(sp)
   4e7d4:	d9400215 	stw	r5,8(sp)
   4e7d8:	d9800315 	stw	r6,12(sp)
   4e7dc:	004891c0 	call	4891c <__locale_charset>
   4e7e0:	d9800317 	ldw	r6,12(sp)
   4e7e4:	d9400217 	ldw	r5,8(sp)
   4e7e8:	d9000117 	ldw	r4,4(sp)
   4e7ec:	100f883a 	mov	r7,r2
   4e7f0:	dc400015 	stw	r17,0(sp)
   4e7f4:	803ee83a 	callr	r16
   4e7f8:	dfc00617 	ldw	ra,24(sp)
   4e7fc:	dc400517 	ldw	r17,20(sp)
   4e800:	dc000417 	ldw	r16,16(sp)
   4e804:	dec00704 	addi	sp,sp,28
   4e808:	f800283a 	ret

0004e80c <__udivdi3>:
   4e80c:	defff404 	addi	sp,sp,-48
   4e810:	dcc00515 	stw	r19,20(sp)
   4e814:	dc000215 	stw	r16,8(sp)
   4e818:	dfc00b15 	stw	ra,44(sp)
   4e81c:	df000a15 	stw	fp,40(sp)
   4e820:	ddc00915 	stw	r23,36(sp)
   4e824:	dd800815 	stw	r22,32(sp)
   4e828:	dd400715 	stw	r21,28(sp)
   4e82c:	dd000615 	stw	r20,24(sp)
   4e830:	dc800415 	stw	r18,16(sp)
   4e834:	dc400315 	stw	r17,12(sp)
   4e838:	2027883a 	mov	r19,r4
   4e83c:	2821883a 	mov	r16,r5
   4e840:	3800461e 	bne	r7,zero,4e95c <__udivdi3+0x150>
   4e844:	3023883a 	mov	r17,r6
   4e848:	2025883a 	mov	r18,r4
   4e84c:	2980572e 	bgeu	r5,r6,4e9ac <__udivdi3+0x1a0>
   4e850:	00bfffd4 	movui	r2,65535
   4e854:	282d883a 	mov	r22,r5
   4e858:	1180b236 	bltu	r2,r6,4eb24 <__udivdi3+0x318>
   4e85c:	00803fc4 	movi	r2,255
   4e860:	1185803a 	cmpltu	r2,r2,r6
   4e864:	100490fa 	slli	r2,r2,3
   4e868:	3086d83a 	srl	r3,r6,r2
   4e86c:	01000174 	movhi	r4,5
   4e870:	2119de04 	addi	r4,r4,26488
   4e874:	20c7883a 	add	r3,r4,r3
   4e878:	18c00003 	ldbu	r3,0(r3)
   4e87c:	1885883a 	add	r2,r3,r2
   4e880:	00c00804 	movi	r3,32
   4e884:	1887c83a 	sub	r3,r3,r2
   4e888:	18000526 	beq	r3,zero,4e8a0 <__udivdi3+0x94>
   4e88c:	80e0983a 	sll	r16,r16,r3
   4e890:	9884d83a 	srl	r2,r19,r2
   4e894:	30e2983a 	sll	r17,r6,r3
   4e898:	98e4983a 	sll	r18,r19,r3
   4e89c:	142cb03a 	or	r22,r2,r16
   4e8a0:	882ad43a 	srli	r21,r17,16
   4e8a4:	b009883a 	mov	r4,r22
   4e8a8:	8d3fffcc 	andi	r20,r17,65535
   4e8ac:	a80b883a 	mov	r5,r21
   4e8b0:	004089c0 	call	4089c <__umodsi3>
   4e8b4:	b009883a 	mov	r4,r22
   4e8b8:	a80b883a 	mov	r5,r21
   4e8bc:	1027883a 	mov	r19,r2
   4e8c0:	00408380 	call	40838 <__udivsi3>
   4e8c4:	100b883a 	mov	r5,r2
   4e8c8:	a009883a 	mov	r4,r20
   4e8cc:	102d883a 	mov	r22,r2
   4e8d0:	004146c0 	call	4146c <__mulsi3>
   4e8d4:	9826943a 	slli	r19,r19,16
   4e8d8:	9006d43a 	srli	r3,r18,16
   4e8dc:	1cc6b03a 	or	r3,r3,r19
   4e8e0:	1880052e 	bgeu	r3,r2,4e8f8 <__udivdi3+0xec>
   4e8e4:	1c47883a 	add	r3,r3,r17
   4e8e8:	b13fffc4 	addi	r4,r22,-1
   4e8ec:	1c400136 	bltu	r3,r17,4e8f4 <__udivdi3+0xe8>
   4e8f0:	18814236 	bltu	r3,r2,4edfc <__udivdi3+0x5f0>
   4e8f4:	202d883a 	mov	r22,r4
   4e8f8:	18a1c83a 	sub	r16,r3,r2
   4e8fc:	8009883a 	mov	r4,r16
   4e900:	a80b883a 	mov	r5,r21
   4e904:	004089c0 	call	4089c <__umodsi3>
   4e908:	1027883a 	mov	r19,r2
   4e90c:	8009883a 	mov	r4,r16
   4e910:	a80b883a 	mov	r5,r21
   4e914:	9826943a 	slli	r19,r19,16
   4e918:	00408380 	call	40838 <__udivsi3>
   4e91c:	100b883a 	mov	r5,r2
   4e920:	a009883a 	mov	r4,r20
   4e924:	94bfffcc 	andi	r18,r18,65535
   4e928:	1021883a 	mov	r16,r2
   4e92c:	94e4b03a 	or	r18,r18,r19
   4e930:	004146c0 	call	4146c <__mulsi3>
   4e934:	9080052e 	bgeu	r18,r2,4e94c <__udivdi3+0x140>
   4e938:	8ca5883a 	add	r18,r17,r18
   4e93c:	80ffffc4 	addi	r3,r16,-1
   4e940:	94410c36 	bltu	r18,r17,4ed74 <__udivdi3+0x568>
   4e944:	90810b2e 	bgeu	r18,r2,4ed74 <__udivdi3+0x568>
   4e948:	843fff84 	addi	r16,r16,-2
   4e94c:	b004943a 	slli	r2,r22,16
   4e950:	0007883a 	mov	r3,zero
   4e954:	1404b03a 	or	r2,r2,r16
   4e958:	00005e06 	br	4ead4 <__udivdi3+0x2c8>
   4e95c:	29c05b36 	bltu	r5,r7,4eacc <__udivdi3+0x2c0>
   4e960:	00bfffd4 	movui	r2,65535
   4e964:	11c0672e 	bgeu	r2,r7,4eb04 <__udivdi3+0x2f8>
   4e968:	00804034 	movhi	r2,256
   4e96c:	10bfffc4 	addi	r2,r2,-1
   4e970:	11c10a36 	bltu	r2,r7,4ed9c <__udivdi3+0x590>
   4e974:	00800404 	movi	r2,16
   4e978:	3886d83a 	srl	r3,r7,r2
   4e97c:	01000174 	movhi	r4,5
   4e980:	2119de04 	addi	r4,r4,26488
   4e984:	20c7883a 	add	r3,r4,r3
   4e988:	18c00003 	ldbu	r3,0(r3)
   4e98c:	05c00804 	movi	r23,32
   4e990:	1885883a 	add	r2,r3,r2
   4e994:	b8afc83a 	sub	r23,r23,r2
   4e998:	b800671e 	bne	r23,zero,4eb38 <__udivdi3+0x32c>
   4e99c:	3c010536 	bltu	r7,r16,4edb4 <__udivdi3+0x5a8>
   4e9a0:	9985403a 	cmpgeu	r2,r19,r6
   4e9a4:	0007883a 	mov	r3,zero
   4e9a8:	00004a06 	br	4ead4 <__udivdi3+0x2c8>
   4e9ac:	3000041e 	bne	r6,zero,4e9c0 <__udivdi3+0x1b4>
   4e9b0:	000b883a 	mov	r5,zero
   4e9b4:	01000044 	movi	r4,1
   4e9b8:	00408380 	call	40838 <__udivsi3>
   4e9bc:	1023883a 	mov	r17,r2
   4e9c0:	00bfffd4 	movui	r2,65535
   4e9c4:	1440532e 	bgeu	r2,r17,4eb14 <__udivdi3+0x308>
   4e9c8:	00804034 	movhi	r2,256
   4e9cc:	10bfffc4 	addi	r2,r2,-1
   4e9d0:	1440f436 	bltu	r2,r17,4eda4 <__udivdi3+0x598>
   4e9d4:	00800404 	movi	r2,16
   4e9d8:	8886d83a 	srl	r3,r17,r2
   4e9dc:	01000174 	movhi	r4,5
   4e9e0:	2119de04 	addi	r4,r4,26488
   4e9e4:	20c7883a 	add	r3,r4,r3
   4e9e8:	18c00003 	ldbu	r3,0(r3)
   4e9ec:	1885883a 	add	r2,r3,r2
   4e9f0:	00c00804 	movi	r3,32
   4e9f4:	1887c83a 	sub	r3,r3,r2
   4e9f8:	1800a51e 	bne	r3,zero,4ec90 <__udivdi3+0x484>
   4e9fc:	882ad43a 	srli	r21,r17,16
   4ea00:	8461c83a 	sub	r16,r16,r17
   4ea04:	8d3fffcc 	andi	r20,r17,65535
   4ea08:	00c00044 	movi	r3,1
   4ea0c:	a80b883a 	mov	r5,r21
   4ea10:	8009883a 	mov	r4,r16
   4ea14:	d8c00115 	stw	r3,4(sp)
   4ea18:	004089c0 	call	4089c <__umodsi3>
   4ea1c:	a80b883a 	mov	r5,r21
   4ea20:	8009883a 	mov	r4,r16
   4ea24:	1027883a 	mov	r19,r2
   4ea28:	00408380 	call	40838 <__udivsi3>
   4ea2c:	a00b883a 	mov	r5,r20
   4ea30:	1009883a 	mov	r4,r2
   4ea34:	102d883a 	mov	r22,r2
   4ea38:	004146c0 	call	4146c <__mulsi3>
   4ea3c:	9826943a 	slli	r19,r19,16
   4ea40:	900ed43a 	srli	r7,r18,16
   4ea44:	d8c00117 	ldw	r3,4(sp)
   4ea48:	3cceb03a 	or	r7,r7,r19
   4ea4c:	3880052e 	bgeu	r7,r2,4ea64 <__udivdi3+0x258>
   4ea50:	3c4f883a 	add	r7,r7,r17
   4ea54:	b13fffc4 	addi	r4,r22,-1
   4ea58:	3c400136 	bltu	r7,r17,4ea60 <__udivdi3+0x254>
   4ea5c:	3880e436 	bltu	r7,r2,4edf0 <__udivdi3+0x5e4>
   4ea60:	202d883a 	mov	r22,r4
   4ea64:	38a1c83a 	sub	r16,r7,r2
   4ea68:	8009883a 	mov	r4,r16
   4ea6c:	a80b883a 	mov	r5,r21
   4ea70:	d8c00115 	stw	r3,4(sp)
   4ea74:	004089c0 	call	4089c <__umodsi3>
   4ea78:	1027883a 	mov	r19,r2
   4ea7c:	8009883a 	mov	r4,r16
   4ea80:	a80b883a 	mov	r5,r21
   4ea84:	9826943a 	slli	r19,r19,16
   4ea88:	00408380 	call	40838 <__udivsi3>
   4ea8c:	a00b883a 	mov	r5,r20
   4ea90:	1009883a 	mov	r4,r2
   4ea94:	94bfffcc 	andi	r18,r18,65535
   4ea98:	1021883a 	mov	r16,r2
   4ea9c:	94e4b03a 	or	r18,r18,r19
   4eaa0:	004146c0 	call	4146c <__mulsi3>
   4eaa4:	d8c00117 	ldw	r3,4(sp)
   4eaa8:	9080052e 	bgeu	r18,r2,4eac0 <__udivdi3+0x2b4>
   4eaac:	8ca5883a 	add	r18,r17,r18
   4eab0:	813fffc4 	addi	r4,r16,-1
   4eab4:	9440ad36 	bltu	r18,r17,4ed6c <__udivdi3+0x560>
   4eab8:	9080ac2e 	bgeu	r18,r2,4ed6c <__udivdi3+0x560>
   4eabc:	843fff84 	addi	r16,r16,-2
   4eac0:	b004943a 	slli	r2,r22,16
   4eac4:	1404b03a 	or	r2,r2,r16
   4eac8:	00000206 	br	4ead4 <__udivdi3+0x2c8>
   4eacc:	0007883a 	mov	r3,zero
   4ead0:	0005883a 	mov	r2,zero
   4ead4:	dfc00b17 	ldw	ra,44(sp)
   4ead8:	df000a17 	ldw	fp,40(sp)
   4eadc:	ddc00917 	ldw	r23,36(sp)
   4eae0:	dd800817 	ldw	r22,32(sp)
   4eae4:	dd400717 	ldw	r21,28(sp)
   4eae8:	dd000617 	ldw	r20,24(sp)
   4eaec:	dcc00517 	ldw	r19,20(sp)
   4eaf0:	dc800417 	ldw	r18,16(sp)
   4eaf4:	dc400317 	ldw	r17,12(sp)
   4eaf8:	dc000217 	ldw	r16,8(sp)
   4eafc:	dec00c04 	addi	sp,sp,48
   4eb00:	f800283a 	ret
   4eb04:	00803fc4 	movi	r2,255
   4eb08:	11c5803a 	cmpltu	r2,r2,r7
   4eb0c:	100490fa 	slli	r2,r2,3
   4eb10:	003f9906 	br	4e978 <__alt_data_end+0xfffdc978>
   4eb14:	00803fc4 	movi	r2,255
   4eb18:	1445803a 	cmpltu	r2,r2,r17
   4eb1c:	100490fa 	slli	r2,r2,3
   4eb20:	003fad06 	br	4e9d8 <__alt_data_end+0xfffdc9d8>
   4eb24:	00804034 	movhi	r2,256
   4eb28:	10bfffc4 	addi	r2,r2,-1
   4eb2c:	11809f36 	bltu	r2,r6,4edac <__udivdi3+0x5a0>
   4eb30:	00800404 	movi	r2,16
   4eb34:	003f4c06 	br	4e868 <__alt_data_end+0xfffdc868>
   4eb38:	3dce983a 	sll	r7,r7,r23
   4eb3c:	30b8d83a 	srl	fp,r6,r2
   4eb40:	80a2d83a 	srl	r17,r16,r2
   4eb44:	35cc983a 	sll	r6,r6,r23
   4eb48:	3f38b03a 	or	fp,r7,fp
   4eb4c:	e024d43a 	srli	r18,fp,16
   4eb50:	9884d83a 	srl	r2,r19,r2
   4eb54:	85e0983a 	sll	r16,r16,r23
   4eb58:	8809883a 	mov	r4,r17
   4eb5c:	900b883a 	mov	r5,r18
   4eb60:	d9800015 	stw	r6,0(sp)
   4eb64:	1420b03a 	or	r16,r2,r16
   4eb68:	004089c0 	call	4089c <__umodsi3>
   4eb6c:	900b883a 	mov	r5,r18
   4eb70:	8809883a 	mov	r4,r17
   4eb74:	1029883a 	mov	r20,r2
   4eb78:	e5bfffcc 	andi	r22,fp,65535
   4eb7c:	00408380 	call	40838 <__udivsi3>
   4eb80:	100b883a 	mov	r5,r2
   4eb84:	b009883a 	mov	r4,r22
   4eb88:	102b883a 	mov	r21,r2
   4eb8c:	004146c0 	call	4146c <__mulsi3>
   4eb90:	a028943a 	slli	r20,r20,16
   4eb94:	8006d43a 	srli	r3,r16,16
   4eb98:	1d06b03a 	or	r3,r3,r20
   4eb9c:	1880042e 	bgeu	r3,r2,4ebb0 <__udivdi3+0x3a4>
   4eba0:	1f07883a 	add	r3,r3,fp
   4eba4:	a93fffc4 	addi	r4,r21,-1
   4eba8:	1f00892e 	bgeu	r3,fp,4edd0 <__udivdi3+0x5c4>
   4ebac:	202b883a 	mov	r21,r4
   4ebb0:	18a3c83a 	sub	r17,r3,r2
   4ebb4:	8809883a 	mov	r4,r17
   4ebb8:	900b883a 	mov	r5,r18
   4ebbc:	004089c0 	call	4089c <__umodsi3>
   4ebc0:	1029883a 	mov	r20,r2
   4ebc4:	8809883a 	mov	r4,r17
   4ebc8:	900b883a 	mov	r5,r18
   4ebcc:	a028943a 	slli	r20,r20,16
   4ebd0:	00408380 	call	40838 <__udivsi3>
   4ebd4:	100b883a 	mov	r5,r2
   4ebd8:	b009883a 	mov	r4,r22
   4ebdc:	843fffcc 	andi	r16,r16,65535
   4ebe0:	1023883a 	mov	r17,r2
   4ebe4:	8520b03a 	or	r16,r16,r20
   4ebe8:	004146c0 	call	4146c <__mulsi3>
   4ebec:	8080042e 	bgeu	r16,r2,4ec00 <__udivdi3+0x3f4>
   4ebf0:	8721883a 	add	r16,r16,fp
   4ebf4:	88ffffc4 	addi	r3,r17,-1
   4ebf8:	8700712e 	bgeu	r16,fp,4edc0 <__udivdi3+0x5b4>
   4ebfc:	1823883a 	mov	r17,r3
   4ec00:	a80e943a 	slli	r7,r21,16
   4ec04:	d8c00017 	ldw	r3,0(sp)
   4ec08:	80a1c83a 	sub	r16,r16,r2
   4ec0c:	3c64b03a 	or	r18,r7,r17
   4ec10:	1d3fffcc 	andi	r20,r3,65535
   4ec14:	9022d43a 	srli	r17,r18,16
   4ec18:	95bfffcc 	andi	r22,r18,65535
   4ec1c:	a00b883a 	mov	r5,r20
   4ec20:	b009883a 	mov	r4,r22
   4ec24:	182ad43a 	srli	r21,r3,16
   4ec28:	004146c0 	call	4146c <__mulsi3>
   4ec2c:	a00b883a 	mov	r5,r20
   4ec30:	8809883a 	mov	r4,r17
   4ec34:	1039883a 	mov	fp,r2
   4ec38:	004146c0 	call	4146c <__mulsi3>
   4ec3c:	8809883a 	mov	r4,r17
   4ec40:	a80b883a 	mov	r5,r21
   4ec44:	1029883a 	mov	r20,r2
   4ec48:	004146c0 	call	4146c <__mulsi3>
   4ec4c:	a80b883a 	mov	r5,r21
   4ec50:	b009883a 	mov	r4,r22
   4ec54:	1023883a 	mov	r17,r2
   4ec58:	004146c0 	call	4146c <__mulsi3>
   4ec5c:	e006d43a 	srli	r3,fp,16
   4ec60:	1505883a 	add	r2,r2,r20
   4ec64:	1887883a 	add	r3,r3,r2
   4ec68:	1d00022e 	bgeu	r3,r20,4ec74 <__udivdi3+0x468>
   4ec6c:	00800074 	movhi	r2,1
   4ec70:	88a3883a 	add	r17,r17,r2
   4ec74:	1804d43a 	srli	r2,r3,16
   4ec78:	1463883a 	add	r17,r2,r17
   4ec7c:	84404436 	bltu	r16,r17,4ed90 <__udivdi3+0x584>
   4ec80:	84403e26 	beq	r16,r17,4ed7c <__udivdi3+0x570>
   4ec84:	9005883a 	mov	r2,r18
   4ec88:	0007883a 	mov	r3,zero
   4ec8c:	003f9106 	br	4ead4 <__alt_data_end+0xfffdcad4>
   4ec90:	88e2983a 	sll	r17,r17,r3
   4ec94:	80aed83a 	srl	r23,r16,r2
   4ec98:	80e0983a 	sll	r16,r16,r3
   4ec9c:	882ad43a 	srli	r21,r17,16
   4eca0:	9884d83a 	srl	r2,r19,r2
   4eca4:	b809883a 	mov	r4,r23
   4eca8:	a80b883a 	mov	r5,r21
   4ecac:	98e4983a 	sll	r18,r19,r3
   4ecb0:	142cb03a 	or	r22,r2,r16
   4ecb4:	004089c0 	call	4089c <__umodsi3>
   4ecb8:	b809883a 	mov	r4,r23
   4ecbc:	a80b883a 	mov	r5,r21
   4ecc0:	1027883a 	mov	r19,r2
   4ecc4:	8d3fffcc 	andi	r20,r17,65535
   4ecc8:	00408380 	call	40838 <__udivsi3>
   4eccc:	a009883a 	mov	r4,r20
   4ecd0:	100b883a 	mov	r5,r2
   4ecd4:	102f883a 	mov	r23,r2
   4ecd8:	004146c0 	call	4146c <__mulsi3>
   4ecdc:	9826943a 	slli	r19,r19,16
   4ece0:	b008d43a 	srli	r4,r22,16
   4ece4:	24c8b03a 	or	r4,r4,r19
   4ece8:	2080062e 	bgeu	r4,r2,4ed04 <__udivdi3+0x4f8>
   4ecec:	2449883a 	add	r4,r4,r17
   4ecf0:	b8ffffc4 	addi	r3,r23,-1
   4ecf4:	24403c36 	bltu	r4,r17,4ede8 <__udivdi3+0x5dc>
   4ecf8:	20803b2e 	bgeu	r4,r2,4ede8 <__udivdi3+0x5dc>
   4ecfc:	bdffff84 	addi	r23,r23,-2
   4ed00:	2449883a 	add	r4,r4,r17
   4ed04:	20a1c83a 	sub	r16,r4,r2
   4ed08:	a80b883a 	mov	r5,r21
   4ed0c:	8009883a 	mov	r4,r16
   4ed10:	004089c0 	call	4089c <__umodsi3>
   4ed14:	a80b883a 	mov	r5,r21
   4ed18:	8009883a 	mov	r4,r16
   4ed1c:	1027883a 	mov	r19,r2
   4ed20:	00408380 	call	40838 <__udivsi3>
   4ed24:	a009883a 	mov	r4,r20
   4ed28:	100b883a 	mov	r5,r2
   4ed2c:	9826943a 	slli	r19,r19,16
   4ed30:	1039883a 	mov	fp,r2
   4ed34:	004146c0 	call	4146c <__mulsi3>
   4ed38:	b13fffcc 	andi	r4,r22,65535
   4ed3c:	24c8b03a 	or	r4,r4,r19
   4ed40:	2080062e 	bgeu	r4,r2,4ed5c <__udivdi3+0x550>
   4ed44:	2449883a 	add	r4,r4,r17
   4ed48:	e0ffffc4 	addi	r3,fp,-1
   4ed4c:	24402436 	bltu	r4,r17,4ede0 <__udivdi3+0x5d4>
   4ed50:	2080232e 	bgeu	r4,r2,4ede0 <__udivdi3+0x5d4>
   4ed54:	e73fff84 	addi	fp,fp,-2
   4ed58:	2449883a 	add	r4,r4,r17
   4ed5c:	b82e943a 	slli	r23,r23,16
   4ed60:	20a1c83a 	sub	r16,r4,r2
   4ed64:	bf06b03a 	or	r3,r23,fp
   4ed68:	003f2806 	br	4ea0c <__alt_data_end+0xfffdca0c>
   4ed6c:	2021883a 	mov	r16,r4
   4ed70:	003f5306 	br	4eac0 <__alt_data_end+0xfffdcac0>
   4ed74:	1821883a 	mov	r16,r3
   4ed78:	003ef406 	br	4e94c <__alt_data_end+0xfffdc94c>
   4ed7c:	1806943a 	slli	r3,r3,16
   4ed80:	9de6983a 	sll	r19,r19,r23
   4ed84:	e73fffcc 	andi	fp,fp,65535
   4ed88:	1f07883a 	add	r3,r3,fp
   4ed8c:	98ffbd2e 	bgeu	r19,r3,4ec84 <__alt_data_end+0xfffdcc84>
   4ed90:	90bfffc4 	addi	r2,r18,-1
   4ed94:	0007883a 	mov	r3,zero
   4ed98:	003f4e06 	br	4ead4 <__alt_data_end+0xfffdcad4>
   4ed9c:	00800604 	movi	r2,24
   4eda0:	003ef506 	br	4e978 <__alt_data_end+0xfffdc978>
   4eda4:	00800604 	movi	r2,24
   4eda8:	003f0b06 	br	4e9d8 <__alt_data_end+0xfffdc9d8>
   4edac:	00800604 	movi	r2,24
   4edb0:	003ead06 	br	4e868 <__alt_data_end+0xfffdc868>
   4edb4:	0007883a 	mov	r3,zero
   4edb8:	00800044 	movi	r2,1
   4edbc:	003f4506 	br	4ead4 <__alt_data_end+0xfffdcad4>
   4edc0:	80bf8e2e 	bgeu	r16,r2,4ebfc <__alt_data_end+0xfffdcbfc>
   4edc4:	8c7fff84 	addi	r17,r17,-2
   4edc8:	8721883a 	add	r16,r16,fp
   4edcc:	003f8c06 	br	4ec00 <__alt_data_end+0xfffdcc00>
   4edd0:	18bf762e 	bgeu	r3,r2,4ebac <__alt_data_end+0xfffdcbac>
   4edd4:	ad7fff84 	addi	r21,r21,-2
   4edd8:	1f07883a 	add	r3,r3,fp
   4eddc:	003f7406 	br	4ebb0 <__alt_data_end+0xfffdcbb0>
   4ede0:	1839883a 	mov	fp,r3
   4ede4:	003fdd06 	br	4ed5c <__alt_data_end+0xfffdcd5c>
   4ede8:	182f883a 	mov	r23,r3
   4edec:	003fc506 	br	4ed04 <__alt_data_end+0xfffdcd04>
   4edf0:	b5bfff84 	addi	r22,r22,-2
   4edf4:	3c4f883a 	add	r7,r7,r17
   4edf8:	003f1a06 	br	4ea64 <__alt_data_end+0xfffdca64>
   4edfc:	b5bfff84 	addi	r22,r22,-2
   4ee00:	1c47883a 	add	r3,r3,r17
   4ee04:	003ebc06 	br	4e8f8 <__alt_data_end+0xfffdc8f8>

0004ee08 <__umoddi3>:
   4ee08:	defff304 	addi	sp,sp,-52
   4ee0c:	df000b15 	stw	fp,44(sp)
   4ee10:	dc400415 	stw	r17,16(sp)
   4ee14:	dc000315 	stw	r16,12(sp)
   4ee18:	dfc00c15 	stw	ra,48(sp)
   4ee1c:	ddc00a15 	stw	r23,40(sp)
   4ee20:	dd800915 	stw	r22,36(sp)
   4ee24:	dd400815 	stw	r21,32(sp)
   4ee28:	dd000715 	stw	r20,28(sp)
   4ee2c:	dcc00615 	stw	r19,24(sp)
   4ee30:	dc800515 	stw	r18,20(sp)
   4ee34:	2021883a 	mov	r16,r4
   4ee38:	2823883a 	mov	r17,r5
   4ee3c:	2839883a 	mov	fp,r5
   4ee40:	3800401e 	bne	r7,zero,4ef44 <__umoddi3+0x13c>
   4ee44:	3027883a 	mov	r19,r6
   4ee48:	2029883a 	mov	r20,r4
   4ee4c:	2980552e 	bgeu	r5,r6,4efa4 <__umoddi3+0x19c>
   4ee50:	00bfffd4 	movui	r2,65535
   4ee54:	1180a236 	bltu	r2,r6,4f0e0 <__umoddi3+0x2d8>
   4ee58:	01003fc4 	movi	r4,255
   4ee5c:	2189803a 	cmpltu	r4,r4,r6
   4ee60:	200890fa 	slli	r4,r4,3
   4ee64:	3104d83a 	srl	r2,r6,r4
   4ee68:	00c00174 	movhi	r3,5
   4ee6c:	18d9de04 	addi	r3,r3,26488
   4ee70:	1885883a 	add	r2,r3,r2
   4ee74:	10c00003 	ldbu	r3,0(r2)
   4ee78:	00800804 	movi	r2,32
   4ee7c:	1909883a 	add	r4,r3,r4
   4ee80:	1125c83a 	sub	r18,r2,r4
   4ee84:	90000526 	beq	r18,zero,4ee9c <__umoddi3+0x94>
   4ee88:	8ca2983a 	sll	r17,r17,r18
   4ee8c:	8108d83a 	srl	r4,r16,r4
   4ee90:	34a6983a 	sll	r19,r6,r18
   4ee94:	84a8983a 	sll	r20,r16,r18
   4ee98:	2478b03a 	or	fp,r4,r17
   4ee9c:	982cd43a 	srli	r22,r19,16
   4eea0:	e009883a 	mov	r4,fp
   4eea4:	9dffffcc 	andi	r23,r19,65535
   4eea8:	b00b883a 	mov	r5,r22
   4eeac:	004089c0 	call	4089c <__umodsi3>
   4eeb0:	b00b883a 	mov	r5,r22
   4eeb4:	e009883a 	mov	r4,fp
   4eeb8:	102b883a 	mov	r21,r2
   4eebc:	00408380 	call	40838 <__udivsi3>
   4eec0:	100b883a 	mov	r5,r2
   4eec4:	b809883a 	mov	r4,r23
   4eec8:	004146c0 	call	4146c <__mulsi3>
   4eecc:	a82a943a 	slli	r21,r21,16
   4eed0:	a006d43a 	srli	r3,r20,16
   4eed4:	1d46b03a 	or	r3,r3,r21
   4eed8:	1880032e 	bgeu	r3,r2,4eee8 <__umoddi3+0xe0>
   4eedc:	1cc7883a 	add	r3,r3,r19
   4eee0:	1cc00136 	bltu	r3,r19,4eee8 <__umoddi3+0xe0>
   4eee4:	18813136 	bltu	r3,r2,4f3ac <__umoddi3+0x5a4>
   4eee8:	18a1c83a 	sub	r16,r3,r2
   4eeec:	b00b883a 	mov	r5,r22
   4eef0:	8009883a 	mov	r4,r16
   4eef4:	004089c0 	call	4089c <__umodsi3>
   4eef8:	b00b883a 	mov	r5,r22
   4eefc:	8009883a 	mov	r4,r16
   4ef00:	1023883a 	mov	r17,r2
   4ef04:	00408380 	call	40838 <__udivsi3>
   4ef08:	100b883a 	mov	r5,r2
   4ef0c:	b809883a 	mov	r4,r23
   4ef10:	8822943a 	slli	r17,r17,16
   4ef14:	004146c0 	call	4146c <__mulsi3>
   4ef18:	a0ffffcc 	andi	r3,r20,65535
   4ef1c:	1c46b03a 	or	r3,r3,r17
   4ef20:	1880042e 	bgeu	r3,r2,4ef34 <__umoddi3+0x12c>
   4ef24:	1cc7883a 	add	r3,r3,r19
   4ef28:	1cc00236 	bltu	r3,r19,4ef34 <__umoddi3+0x12c>
   4ef2c:	1880012e 	bgeu	r3,r2,4ef34 <__umoddi3+0x12c>
   4ef30:	1cc7883a 	add	r3,r3,r19
   4ef34:	1885c83a 	sub	r2,r3,r2
   4ef38:	1484d83a 	srl	r2,r2,r18
   4ef3c:	0007883a 	mov	r3,zero
   4ef40:	00005306 	br	4f090 <__umoddi3+0x288>
   4ef44:	29c05036 	bltu	r5,r7,4f088 <__umoddi3+0x280>
   4ef48:	00bfffd4 	movui	r2,65535
   4ef4c:	11c05c2e 	bgeu	r2,r7,4f0c0 <__umoddi3+0x2b8>
   4ef50:	00804034 	movhi	r2,256
   4ef54:	10bfffc4 	addi	r2,r2,-1
   4ef58:	11c10636 	bltu	r2,r7,4f374 <__umoddi3+0x56c>
   4ef5c:	01000404 	movi	r4,16
   4ef60:	3904d83a 	srl	r2,r7,r4
   4ef64:	00c00174 	movhi	r3,5
   4ef68:	18d9de04 	addi	r3,r3,26488
   4ef6c:	1885883a 	add	r2,r3,r2
   4ef70:	14c00003 	ldbu	r19,0(r2)
   4ef74:	00c00804 	movi	r3,32
   4ef78:	9927883a 	add	r19,r19,r4
   4ef7c:	1ce9c83a 	sub	r20,r3,r19
   4ef80:	a0005c1e 	bne	r20,zero,4f0f4 <__umoddi3+0x2ec>
   4ef84:	3c400136 	bltu	r7,r17,4ef8c <__umoddi3+0x184>
   4ef88:	81810a36 	bltu	r16,r6,4f3b4 <__umoddi3+0x5ac>
   4ef8c:	8185c83a 	sub	r2,r16,r6
   4ef90:	89e3c83a 	sub	r17,r17,r7
   4ef94:	8089803a 	cmpltu	r4,r16,r2
   4ef98:	8939c83a 	sub	fp,r17,r4
   4ef9c:	e007883a 	mov	r3,fp
   4efa0:	00003b06 	br	4f090 <__umoddi3+0x288>
   4efa4:	3000041e 	bne	r6,zero,4efb8 <__umoddi3+0x1b0>
   4efa8:	000b883a 	mov	r5,zero
   4efac:	01000044 	movi	r4,1
   4efb0:	00408380 	call	40838 <__udivsi3>
   4efb4:	1027883a 	mov	r19,r2
   4efb8:	00bfffd4 	movui	r2,65535
   4efbc:	14c0442e 	bgeu	r2,r19,4f0d0 <__umoddi3+0x2c8>
   4efc0:	00804034 	movhi	r2,256
   4efc4:	10bfffc4 	addi	r2,r2,-1
   4efc8:	14c0ec36 	bltu	r2,r19,4f37c <__umoddi3+0x574>
   4efcc:	00800404 	movi	r2,16
   4efd0:	9886d83a 	srl	r3,r19,r2
   4efd4:	01000174 	movhi	r4,5
   4efd8:	2119de04 	addi	r4,r4,26488
   4efdc:	20c7883a 	add	r3,r4,r3
   4efe0:	18c00003 	ldbu	r3,0(r3)
   4efe4:	1887883a 	add	r3,r3,r2
   4efe8:	00800804 	movi	r2,32
   4efec:	10e5c83a 	sub	r18,r2,r3
   4eff0:	9000ab1e 	bne	r18,zero,4f2a0 <__umoddi3+0x498>
   4eff4:	982cd43a 	srli	r22,r19,16
   4eff8:	8ce3c83a 	sub	r17,r17,r19
   4effc:	9dffffcc 	andi	r23,r19,65535
   4f000:	b00b883a 	mov	r5,r22
   4f004:	8809883a 	mov	r4,r17
   4f008:	004089c0 	call	4089c <__umodsi3>
   4f00c:	b00b883a 	mov	r5,r22
   4f010:	8809883a 	mov	r4,r17
   4f014:	102b883a 	mov	r21,r2
   4f018:	00408380 	call	40838 <__udivsi3>
   4f01c:	b80b883a 	mov	r5,r23
   4f020:	1009883a 	mov	r4,r2
   4f024:	004146c0 	call	4146c <__mulsi3>
   4f028:	a82a943a 	slli	r21,r21,16
   4f02c:	a006d43a 	srli	r3,r20,16
   4f030:	1d46b03a 	or	r3,r3,r21
   4f034:	1880042e 	bgeu	r3,r2,4f048 <__umoddi3+0x240>
   4f038:	1cc7883a 	add	r3,r3,r19
   4f03c:	1cc00236 	bltu	r3,r19,4f048 <__umoddi3+0x240>
   4f040:	1880012e 	bgeu	r3,r2,4f048 <__umoddi3+0x240>
   4f044:	1cc7883a 	add	r3,r3,r19
   4f048:	18a1c83a 	sub	r16,r3,r2
   4f04c:	b00b883a 	mov	r5,r22
   4f050:	8009883a 	mov	r4,r16
   4f054:	004089c0 	call	4089c <__umodsi3>
   4f058:	1023883a 	mov	r17,r2
   4f05c:	b00b883a 	mov	r5,r22
   4f060:	8009883a 	mov	r4,r16
   4f064:	00408380 	call	40838 <__udivsi3>
   4f068:	8822943a 	slli	r17,r17,16
   4f06c:	b80b883a 	mov	r5,r23
   4f070:	1009883a 	mov	r4,r2
   4f074:	004146c0 	call	4146c <__mulsi3>
   4f078:	a53fffcc 	andi	r20,r20,65535
   4f07c:	a446b03a 	or	r3,r20,r17
   4f080:	18bfac2e 	bgeu	r3,r2,4ef34 <__alt_data_end+0xfffdcf34>
   4f084:	003fa706 	br	4ef24 <__alt_data_end+0xfffdcf24>
   4f088:	2005883a 	mov	r2,r4
   4f08c:	2807883a 	mov	r3,r5
   4f090:	dfc00c17 	ldw	ra,48(sp)
   4f094:	df000b17 	ldw	fp,44(sp)
   4f098:	ddc00a17 	ldw	r23,40(sp)
   4f09c:	dd800917 	ldw	r22,36(sp)
   4f0a0:	dd400817 	ldw	r21,32(sp)
   4f0a4:	dd000717 	ldw	r20,28(sp)
   4f0a8:	dcc00617 	ldw	r19,24(sp)
   4f0ac:	dc800517 	ldw	r18,20(sp)
   4f0b0:	dc400417 	ldw	r17,16(sp)
   4f0b4:	dc000317 	ldw	r16,12(sp)
   4f0b8:	dec00d04 	addi	sp,sp,52
   4f0bc:	f800283a 	ret
   4f0c0:	04c03fc4 	movi	r19,255
   4f0c4:	99c9803a 	cmpltu	r4,r19,r7
   4f0c8:	200890fa 	slli	r4,r4,3
   4f0cc:	003fa406 	br	4ef60 <__alt_data_end+0xfffdcf60>
   4f0d0:	00803fc4 	movi	r2,255
   4f0d4:	14c5803a 	cmpltu	r2,r2,r19
   4f0d8:	100490fa 	slli	r2,r2,3
   4f0dc:	003fbc06 	br	4efd0 <__alt_data_end+0xfffdcfd0>
   4f0e0:	00804034 	movhi	r2,256
   4f0e4:	10bfffc4 	addi	r2,r2,-1
   4f0e8:	1180a636 	bltu	r2,r6,4f384 <__umoddi3+0x57c>
   4f0ec:	01000404 	movi	r4,16
   4f0f0:	003f5c06 	br	4ee64 <__alt_data_end+0xfffdce64>
   4f0f4:	3d0e983a 	sll	r7,r7,r20
   4f0f8:	34ead83a 	srl	r21,r6,r19
   4f0fc:	8cc6d83a 	srl	r3,r17,r19
   4f100:	8d10983a 	sll	r8,r17,r20
   4f104:	3d6ab03a 	or	r21,r7,r21
   4f108:	a82cd43a 	srli	r22,r21,16
   4f10c:	84e2d83a 	srl	r17,r16,r19
   4f110:	1809883a 	mov	r4,r3
   4f114:	b00b883a 	mov	r5,r22
   4f118:	8a22b03a 	or	r17,r17,r8
   4f11c:	3524983a 	sll	r18,r6,r20
   4f120:	dc400015 	stw	r17,0(sp)
   4f124:	d8c00115 	stw	r3,4(sp)
   4f128:	004089c0 	call	4089c <__umodsi3>
   4f12c:	d8c00117 	ldw	r3,4(sp)
   4f130:	b00b883a 	mov	r5,r22
   4f134:	1039883a 	mov	fp,r2
   4f138:	1809883a 	mov	r4,r3
   4f13c:	00408380 	call	40838 <__udivsi3>
   4f140:	adffffcc 	andi	r23,r21,65535
   4f144:	100b883a 	mov	r5,r2
   4f148:	b809883a 	mov	r4,r23
   4f14c:	1023883a 	mov	r17,r2
   4f150:	004146c0 	call	4146c <__mulsi3>
   4f154:	d9400017 	ldw	r5,0(sp)
   4f158:	e008943a 	slli	r4,fp,16
   4f15c:	8520983a 	sll	r16,r16,r20
   4f160:	2806d43a 	srli	r3,r5,16
   4f164:	1906b03a 	or	r3,r3,r4
   4f168:	1880042e 	bgeu	r3,r2,4f17c <__umoddi3+0x374>
   4f16c:	1d47883a 	add	r3,r3,r21
   4f170:	893fffc4 	addi	r4,r17,-1
   4f174:	1d40892e 	bgeu	r3,r21,4f39c <__umoddi3+0x594>
   4f178:	2023883a 	mov	r17,r4
   4f17c:	18b9c83a 	sub	fp,r3,r2
   4f180:	b00b883a 	mov	r5,r22
   4f184:	e009883a 	mov	r4,fp
   4f188:	004089c0 	call	4089c <__umodsi3>
   4f18c:	b00b883a 	mov	r5,r22
   4f190:	e009883a 	mov	r4,fp
   4f194:	d8800215 	stw	r2,8(sp)
   4f198:	00408380 	call	40838 <__udivsi3>
   4f19c:	100b883a 	mov	r5,r2
   4f1a0:	b809883a 	mov	r4,r23
   4f1a4:	102d883a 	mov	r22,r2
   4f1a8:	004146c0 	call	4146c <__mulsi3>
   4f1ac:	d9800217 	ldw	r6,8(sp)
   4f1b0:	d8c00017 	ldw	r3,0(sp)
   4f1b4:	300c943a 	slli	r6,r6,16
   4f1b8:	1a3fffcc 	andi	r8,r3,65535
   4f1bc:	4190b03a 	or	r8,r8,r6
   4f1c0:	4080042e 	bgeu	r8,r2,4f1d4 <__umoddi3+0x3cc>
   4f1c4:	4551883a 	add	r8,r8,r21
   4f1c8:	b0ffffc4 	addi	r3,r22,-1
   4f1cc:	45406f2e 	bgeu	r8,r21,4f38c <__umoddi3+0x584>
   4f1d0:	182d883a 	mov	r22,r3
   4f1d4:	880e943a 	slli	r7,r17,16
   4f1d8:	9006d43a 	srli	r3,r18,16
   4f1dc:	91bfffcc 	andi	r6,r18,65535
   4f1e0:	3dacb03a 	or	r22,r7,r22
   4f1e4:	b02ed43a 	srli	r23,r22,16
   4f1e8:	b5bfffcc 	andi	r22,r22,65535
   4f1ec:	300b883a 	mov	r5,r6
   4f1f0:	b009883a 	mov	r4,r22
   4f1f4:	40a3c83a 	sub	r17,r8,r2
   4f1f8:	d8c00115 	stw	r3,4(sp)
   4f1fc:	d9800215 	stw	r6,8(sp)
   4f200:	004146c0 	call	4146c <__mulsi3>
   4f204:	d9800217 	ldw	r6,8(sp)
   4f208:	b809883a 	mov	r4,r23
   4f20c:	1039883a 	mov	fp,r2
   4f210:	300b883a 	mov	r5,r6
   4f214:	004146c0 	call	4146c <__mulsi3>
   4f218:	d8c00117 	ldw	r3,4(sp)
   4f21c:	b809883a 	mov	r4,r23
   4f220:	d8800215 	stw	r2,8(sp)
   4f224:	180b883a 	mov	r5,r3
   4f228:	004146c0 	call	4146c <__mulsi3>
   4f22c:	d8c00117 	ldw	r3,4(sp)
   4f230:	b009883a 	mov	r4,r22
   4f234:	102f883a 	mov	r23,r2
   4f238:	180b883a 	mov	r5,r3
   4f23c:	004146c0 	call	4146c <__mulsi3>
   4f240:	d9800217 	ldw	r6,8(sp)
   4f244:	e006d43a 	srli	r3,fp,16
   4f248:	1185883a 	add	r2,r2,r6
   4f24c:	1885883a 	add	r2,r3,r2
   4f250:	1180022e 	bgeu	r2,r6,4f25c <__umoddi3+0x454>
   4f254:	00c00074 	movhi	r3,1
   4f258:	b8ef883a 	add	r23,r23,r3
   4f25c:	1006d43a 	srli	r3,r2,16
   4f260:	1004943a 	slli	r2,r2,16
   4f264:	e73fffcc 	andi	fp,fp,65535
   4f268:	1dc7883a 	add	r3,r3,r23
   4f26c:	1739883a 	add	fp,r2,fp
   4f270:	88c03a36 	bltu	r17,r3,4f35c <__umoddi3+0x554>
   4f274:	88c05126 	beq	r17,r3,4f3bc <__umoddi3+0x5b4>
   4f278:	88c9c83a 	sub	r4,r17,r3
   4f27c:	e00f883a 	mov	r7,fp
   4f280:	81cfc83a 	sub	r7,r16,r7
   4f284:	81c7803a 	cmpltu	r3,r16,r7
   4f288:	20c7c83a 	sub	r3,r4,r3
   4f28c:	1cc4983a 	sll	r2,r3,r19
   4f290:	3d0ed83a 	srl	r7,r7,r20
   4f294:	1d06d83a 	srl	r3,r3,r20
   4f298:	11c4b03a 	or	r2,r2,r7
   4f29c:	003f7c06 	br	4f090 <__alt_data_end+0xfffdd090>
   4f2a0:	9ca6983a 	sll	r19,r19,r18
   4f2a4:	88f8d83a 	srl	fp,r17,r3
   4f2a8:	80c4d83a 	srl	r2,r16,r3
   4f2ac:	982cd43a 	srli	r22,r19,16
   4f2b0:	8ca2983a 	sll	r17,r17,r18
   4f2b4:	e009883a 	mov	r4,fp
   4f2b8:	b00b883a 	mov	r5,r22
   4f2bc:	146ab03a 	or	r21,r2,r17
   4f2c0:	004089c0 	call	4089c <__umodsi3>
   4f2c4:	b00b883a 	mov	r5,r22
   4f2c8:	e009883a 	mov	r4,fp
   4f2cc:	1029883a 	mov	r20,r2
   4f2d0:	9dffffcc 	andi	r23,r19,65535
   4f2d4:	00408380 	call	40838 <__udivsi3>
   4f2d8:	b809883a 	mov	r4,r23
   4f2dc:	100b883a 	mov	r5,r2
   4f2e0:	004146c0 	call	4146c <__mulsi3>
   4f2e4:	a008943a 	slli	r4,r20,16
   4f2e8:	a806d43a 	srli	r3,r21,16
   4f2ec:	84a8983a 	sll	r20,r16,r18
   4f2f0:	1906b03a 	or	r3,r3,r4
   4f2f4:	1880042e 	bgeu	r3,r2,4f308 <__umoddi3+0x500>
   4f2f8:	1cc7883a 	add	r3,r3,r19
   4f2fc:	1cc00236 	bltu	r3,r19,4f308 <__umoddi3+0x500>
   4f300:	1880012e 	bgeu	r3,r2,4f308 <__umoddi3+0x500>
   4f304:	1cc7883a 	add	r3,r3,r19
   4f308:	18a3c83a 	sub	r17,r3,r2
   4f30c:	b00b883a 	mov	r5,r22
   4f310:	8809883a 	mov	r4,r17
   4f314:	004089c0 	call	4089c <__umodsi3>
   4f318:	b00b883a 	mov	r5,r22
   4f31c:	8809883a 	mov	r4,r17
   4f320:	1021883a 	mov	r16,r2
   4f324:	00408380 	call	40838 <__udivsi3>
   4f328:	100b883a 	mov	r5,r2
   4f32c:	b809883a 	mov	r4,r23
   4f330:	8020943a 	slli	r16,r16,16
   4f334:	004146c0 	call	4146c <__mulsi3>
   4f338:	a8ffffcc 	andi	r3,r21,65535
   4f33c:	1c06b03a 	or	r3,r3,r16
   4f340:	1880042e 	bgeu	r3,r2,4f354 <__umoddi3+0x54c>
   4f344:	1cc7883a 	add	r3,r3,r19
   4f348:	1cc00236 	bltu	r3,r19,4f354 <__umoddi3+0x54c>
   4f34c:	1880012e 	bgeu	r3,r2,4f354 <__umoddi3+0x54c>
   4f350:	1cc7883a 	add	r3,r3,r19
   4f354:	18a3c83a 	sub	r17,r3,r2
   4f358:	003f2906 	br	4f000 <__alt_data_end+0xfffdd000>
   4f35c:	e48fc83a 	sub	r7,fp,r18
   4f360:	1d49c83a 	sub	r4,r3,r21
   4f364:	e1f9803a 	cmpltu	fp,fp,r7
   4f368:	2739c83a 	sub	fp,r4,fp
   4f36c:	8f09c83a 	sub	r4,r17,fp
   4f370:	003fc306 	br	4f280 <__alt_data_end+0xfffdd280>
   4f374:	01000604 	movi	r4,24
   4f378:	003ef906 	br	4ef60 <__alt_data_end+0xfffdcf60>
   4f37c:	00800604 	movi	r2,24
   4f380:	003f1306 	br	4efd0 <__alt_data_end+0xfffdcfd0>
   4f384:	01000604 	movi	r4,24
   4f388:	003eb606 	br	4ee64 <__alt_data_end+0xfffdce64>
   4f38c:	40bf902e 	bgeu	r8,r2,4f1d0 <__alt_data_end+0xfffdd1d0>
   4f390:	b5bfff84 	addi	r22,r22,-2
   4f394:	4551883a 	add	r8,r8,r21
   4f398:	003f8e06 	br	4f1d4 <__alt_data_end+0xfffdd1d4>
   4f39c:	18bf762e 	bgeu	r3,r2,4f178 <__alt_data_end+0xfffdd178>
   4f3a0:	8c7fff84 	addi	r17,r17,-2
   4f3a4:	1d47883a 	add	r3,r3,r21
   4f3a8:	003f7406 	br	4f17c <__alt_data_end+0xfffdd17c>
   4f3ac:	1cc7883a 	add	r3,r3,r19
   4f3b0:	003ecd06 	br	4eee8 <__alt_data_end+0xfffdcee8>
   4f3b4:	8005883a 	mov	r2,r16
   4f3b8:	003ef806 	br	4ef9c <__alt_data_end+0xfffdcf9c>
   4f3bc:	873fe736 	bltu	r16,fp,4f35c <__alt_data_end+0xfffdd35c>
   4f3c0:	e00f883a 	mov	r7,fp
   4f3c4:	0009883a 	mov	r4,zero
   4f3c8:	003fad06 	br	4f280 <__alt_data_end+0xfffdd280>

0004f3cc <__adddf3>:
   4f3cc:	02c00434 	movhi	r11,16
   4f3d0:	5affffc4 	addi	r11,r11,-1
   4f3d4:	2806d7fa 	srli	r3,r5,31
   4f3d8:	2ad4703a 	and	r10,r5,r11
   4f3dc:	3ad2703a 	and	r9,r7,r11
   4f3e0:	3804d53a 	srli	r2,r7,20
   4f3e4:	3018d77a 	srli	r12,r6,29
   4f3e8:	280ad53a 	srli	r5,r5,20
   4f3ec:	501490fa 	slli	r10,r10,3
   4f3f0:	2010d77a 	srli	r8,r4,29
   4f3f4:	481290fa 	slli	r9,r9,3
   4f3f8:	380ed7fa 	srli	r7,r7,31
   4f3fc:	defffb04 	addi	sp,sp,-20
   4f400:	dc800215 	stw	r18,8(sp)
   4f404:	dc400115 	stw	r17,4(sp)
   4f408:	dc000015 	stw	r16,0(sp)
   4f40c:	dfc00415 	stw	ra,16(sp)
   4f410:	dcc00315 	stw	r19,12(sp)
   4f414:	1c803fcc 	andi	r18,r3,255
   4f418:	2c01ffcc 	andi	r16,r5,2047
   4f41c:	5210b03a 	or	r8,r10,r8
   4f420:	202290fa 	slli	r17,r4,3
   4f424:	1081ffcc 	andi	r2,r2,2047
   4f428:	4b12b03a 	or	r9,r9,r12
   4f42c:	300c90fa 	slli	r6,r6,3
   4f430:	91c07526 	beq	r18,r7,4f608 <__adddf3+0x23c>
   4f434:	8087c83a 	sub	r3,r16,r2
   4f438:	00c0ab0e 	bge	zero,r3,4f6e8 <__adddf3+0x31c>
   4f43c:	10002a1e 	bne	r2,zero,4f4e8 <__adddf3+0x11c>
   4f440:	4984b03a 	or	r2,r9,r6
   4f444:	1000961e 	bne	r2,zero,4f6a0 <__adddf3+0x2d4>
   4f448:	888001cc 	andi	r2,r17,7
   4f44c:	10000726 	beq	r2,zero,4f46c <__adddf3+0xa0>
   4f450:	888003cc 	andi	r2,r17,15
   4f454:	00c00104 	movi	r3,4
   4f458:	10c00426 	beq	r2,r3,4f46c <__adddf3+0xa0>
   4f45c:	88c7883a 	add	r3,r17,r3
   4f460:	1c63803a 	cmpltu	r17,r3,r17
   4f464:	4451883a 	add	r8,r8,r17
   4f468:	1823883a 	mov	r17,r3
   4f46c:	4080202c 	andhi	r2,r8,128
   4f470:	10005926 	beq	r2,zero,4f5d8 <__adddf3+0x20c>
   4f474:	84000044 	addi	r16,r16,1
   4f478:	0081ffc4 	movi	r2,2047
   4f47c:	8080ba26 	beq	r16,r2,4f768 <__adddf3+0x39c>
   4f480:	00bfe034 	movhi	r2,65408
   4f484:	10bfffc4 	addi	r2,r2,-1
   4f488:	4090703a 	and	r8,r8,r2
   4f48c:	4004977a 	slli	r2,r8,29
   4f490:	4010927a 	slli	r8,r8,9
   4f494:	8822d0fa 	srli	r17,r17,3
   4f498:	8401ffcc 	andi	r16,r16,2047
   4f49c:	4010d33a 	srli	r8,r8,12
   4f4a0:	9007883a 	mov	r3,r18
   4f4a4:	1444b03a 	or	r2,r2,r17
   4f4a8:	8401ffcc 	andi	r16,r16,2047
   4f4ac:	8020953a 	slli	r16,r16,20
   4f4b0:	18c03fcc 	andi	r3,r3,255
   4f4b4:	01000434 	movhi	r4,16
   4f4b8:	213fffc4 	addi	r4,r4,-1
   4f4bc:	180697fa 	slli	r3,r3,31
   4f4c0:	4110703a 	and	r8,r8,r4
   4f4c4:	4410b03a 	or	r8,r8,r16
   4f4c8:	40c6b03a 	or	r3,r8,r3
   4f4cc:	dfc00417 	ldw	ra,16(sp)
   4f4d0:	dcc00317 	ldw	r19,12(sp)
   4f4d4:	dc800217 	ldw	r18,8(sp)
   4f4d8:	dc400117 	ldw	r17,4(sp)
   4f4dc:	dc000017 	ldw	r16,0(sp)
   4f4e0:	dec00504 	addi	sp,sp,20
   4f4e4:	f800283a 	ret
   4f4e8:	0081ffc4 	movi	r2,2047
   4f4ec:	80bfd626 	beq	r16,r2,4f448 <__alt_data_end+0xfffdd448>
   4f4f0:	4a402034 	orhi	r9,r9,128
   4f4f4:	00800e04 	movi	r2,56
   4f4f8:	10c09f16 	blt	r2,r3,4f778 <__adddf3+0x3ac>
   4f4fc:	008007c4 	movi	r2,31
   4f500:	10c0c216 	blt	r2,r3,4f80c <__adddf3+0x440>
   4f504:	00800804 	movi	r2,32
   4f508:	10c5c83a 	sub	r2,r2,r3
   4f50c:	488a983a 	sll	r5,r9,r2
   4f510:	30c8d83a 	srl	r4,r6,r3
   4f514:	3084983a 	sll	r2,r6,r2
   4f518:	48c6d83a 	srl	r3,r9,r3
   4f51c:	290cb03a 	or	r6,r5,r4
   4f520:	1004c03a 	cmpne	r2,r2,zero
   4f524:	308cb03a 	or	r6,r6,r2
   4f528:	898dc83a 	sub	r6,r17,r6
   4f52c:	89a3803a 	cmpltu	r17,r17,r6
   4f530:	40d1c83a 	sub	r8,r8,r3
   4f534:	4451c83a 	sub	r8,r8,r17
   4f538:	3023883a 	mov	r17,r6
   4f53c:	4080202c 	andhi	r2,r8,128
   4f540:	10002326 	beq	r2,zero,4f5d0 <__adddf3+0x204>
   4f544:	04c02034 	movhi	r19,128
   4f548:	9cffffc4 	addi	r19,r19,-1
   4f54c:	44e6703a 	and	r19,r8,r19
   4f550:	98007626 	beq	r19,zero,4f72c <__adddf3+0x360>
   4f554:	9809883a 	mov	r4,r19
   4f558:	00414080 	call	41408 <__clzsi2>
   4f55c:	10fffe04 	addi	r3,r2,-8
   4f560:	010007c4 	movi	r4,31
   4f564:	20c07716 	blt	r4,r3,4f744 <__adddf3+0x378>
   4f568:	00800804 	movi	r2,32
   4f56c:	10c5c83a 	sub	r2,r2,r3
   4f570:	8884d83a 	srl	r2,r17,r2
   4f574:	98d0983a 	sll	r8,r19,r3
   4f578:	88e2983a 	sll	r17,r17,r3
   4f57c:	1204b03a 	or	r2,r2,r8
   4f580:	1c007416 	blt	r3,r16,4f754 <__adddf3+0x388>
   4f584:	1c21c83a 	sub	r16,r3,r16
   4f588:	82000044 	addi	r8,r16,1
   4f58c:	00c007c4 	movi	r3,31
   4f590:	1a009116 	blt	r3,r8,4f7d8 <__adddf3+0x40c>
   4f594:	00c00804 	movi	r3,32
   4f598:	1a07c83a 	sub	r3,r3,r8
   4f59c:	8a08d83a 	srl	r4,r17,r8
   4f5a0:	88e2983a 	sll	r17,r17,r3
   4f5a4:	10c6983a 	sll	r3,r2,r3
   4f5a8:	1210d83a 	srl	r8,r2,r8
   4f5ac:	8804c03a 	cmpne	r2,r17,zero
   4f5b0:	1906b03a 	or	r3,r3,r4
   4f5b4:	18a2b03a 	or	r17,r3,r2
   4f5b8:	0021883a 	mov	r16,zero
   4f5bc:	003fa206 	br	4f448 <__alt_data_end+0xfffdd448>
   4f5c0:	1890b03a 	or	r8,r3,r2
   4f5c4:	40017d26 	beq	r8,zero,4fbbc <__adddf3+0x7f0>
   4f5c8:	1011883a 	mov	r8,r2
   4f5cc:	1823883a 	mov	r17,r3
   4f5d0:	888001cc 	andi	r2,r17,7
   4f5d4:	103f9e1e 	bne	r2,zero,4f450 <__alt_data_end+0xfffdd450>
   4f5d8:	4004977a 	slli	r2,r8,29
   4f5dc:	8822d0fa 	srli	r17,r17,3
   4f5e0:	4010d0fa 	srli	r8,r8,3
   4f5e4:	9007883a 	mov	r3,r18
   4f5e8:	1444b03a 	or	r2,r2,r17
   4f5ec:	0101ffc4 	movi	r4,2047
   4f5f0:	81002426 	beq	r16,r4,4f684 <__adddf3+0x2b8>
   4f5f4:	8120703a 	and	r16,r16,r4
   4f5f8:	01000434 	movhi	r4,16
   4f5fc:	213fffc4 	addi	r4,r4,-1
   4f600:	4110703a 	and	r8,r8,r4
   4f604:	003fa806 	br	4f4a8 <__alt_data_end+0xfffdd4a8>
   4f608:	8089c83a 	sub	r4,r16,r2
   4f60c:	01005e0e 	bge	zero,r4,4f788 <__adddf3+0x3bc>
   4f610:	10002b26 	beq	r2,zero,4f6c0 <__adddf3+0x2f4>
   4f614:	0081ffc4 	movi	r2,2047
   4f618:	80bf8b26 	beq	r16,r2,4f448 <__alt_data_end+0xfffdd448>
   4f61c:	4a402034 	orhi	r9,r9,128
   4f620:	00800e04 	movi	r2,56
   4f624:	1100a40e 	bge	r2,r4,4f8b8 <__adddf3+0x4ec>
   4f628:	498cb03a 	or	r6,r9,r6
   4f62c:	300ac03a 	cmpne	r5,r6,zero
   4f630:	0013883a 	mov	r9,zero
   4f634:	2c4b883a 	add	r5,r5,r17
   4f638:	2c63803a 	cmpltu	r17,r5,r17
   4f63c:	4a11883a 	add	r8,r9,r8
   4f640:	8a11883a 	add	r8,r17,r8
   4f644:	2823883a 	mov	r17,r5
   4f648:	4080202c 	andhi	r2,r8,128
   4f64c:	103fe026 	beq	r2,zero,4f5d0 <__alt_data_end+0xfffdd5d0>
   4f650:	84000044 	addi	r16,r16,1
   4f654:	0081ffc4 	movi	r2,2047
   4f658:	8080d226 	beq	r16,r2,4f9a4 <__adddf3+0x5d8>
   4f65c:	00bfe034 	movhi	r2,65408
   4f660:	10bfffc4 	addi	r2,r2,-1
   4f664:	4090703a 	and	r8,r8,r2
   4f668:	880ad07a 	srli	r5,r17,1
   4f66c:	400897fa 	slli	r4,r8,31
   4f670:	88c0004c 	andi	r3,r17,1
   4f674:	28e2b03a 	or	r17,r5,r3
   4f678:	4010d07a 	srli	r8,r8,1
   4f67c:	2462b03a 	or	r17,r4,r17
   4f680:	003f7106 	br	4f448 <__alt_data_end+0xfffdd448>
   4f684:	4088b03a 	or	r4,r8,r2
   4f688:	20014526 	beq	r4,zero,4fba0 <__adddf3+0x7d4>
   4f68c:	01000434 	movhi	r4,16
   4f690:	42000234 	orhi	r8,r8,8
   4f694:	213fffc4 	addi	r4,r4,-1
   4f698:	4110703a 	and	r8,r8,r4
   4f69c:	003f8206 	br	4f4a8 <__alt_data_end+0xfffdd4a8>
   4f6a0:	18ffffc4 	addi	r3,r3,-1
   4f6a4:	1800491e 	bne	r3,zero,4f7cc <__adddf3+0x400>
   4f6a8:	898bc83a 	sub	r5,r17,r6
   4f6ac:	8963803a 	cmpltu	r17,r17,r5
   4f6b0:	4251c83a 	sub	r8,r8,r9
   4f6b4:	4451c83a 	sub	r8,r8,r17
   4f6b8:	2823883a 	mov	r17,r5
   4f6bc:	003f9f06 	br	4f53c <__alt_data_end+0xfffdd53c>
   4f6c0:	4984b03a 	or	r2,r9,r6
   4f6c4:	103f6026 	beq	r2,zero,4f448 <__alt_data_end+0xfffdd448>
   4f6c8:	213fffc4 	addi	r4,r4,-1
   4f6cc:	2000931e 	bne	r4,zero,4f91c <__adddf3+0x550>
   4f6d0:	898d883a 	add	r6,r17,r6
   4f6d4:	3463803a 	cmpltu	r17,r6,r17
   4f6d8:	4251883a 	add	r8,r8,r9
   4f6dc:	8a11883a 	add	r8,r17,r8
   4f6e0:	3023883a 	mov	r17,r6
   4f6e4:	003fd806 	br	4f648 <__alt_data_end+0xfffdd648>
   4f6e8:	1800541e 	bne	r3,zero,4f83c <__adddf3+0x470>
   4f6ec:	80800044 	addi	r2,r16,1
   4f6f0:	1081ffcc 	andi	r2,r2,2047
   4f6f4:	00c00044 	movi	r3,1
   4f6f8:	1880a00e 	bge	r3,r2,4f97c <__adddf3+0x5b0>
   4f6fc:	8989c83a 	sub	r4,r17,r6
   4f700:	8905803a 	cmpltu	r2,r17,r4
   4f704:	4267c83a 	sub	r19,r8,r9
   4f708:	98a7c83a 	sub	r19,r19,r2
   4f70c:	9880202c 	andhi	r2,r19,128
   4f710:	10006326 	beq	r2,zero,4f8a0 <__adddf3+0x4d4>
   4f714:	3463c83a 	sub	r17,r6,r17
   4f718:	4a07c83a 	sub	r3,r9,r8
   4f71c:	344d803a 	cmpltu	r6,r6,r17
   4f720:	19a7c83a 	sub	r19,r3,r6
   4f724:	3825883a 	mov	r18,r7
   4f728:	983f8a1e 	bne	r19,zero,4f554 <__alt_data_end+0xfffdd554>
   4f72c:	8809883a 	mov	r4,r17
   4f730:	00414080 	call	41408 <__clzsi2>
   4f734:	10800804 	addi	r2,r2,32
   4f738:	10fffe04 	addi	r3,r2,-8
   4f73c:	010007c4 	movi	r4,31
   4f740:	20ff890e 	bge	r4,r3,4f568 <__alt_data_end+0xfffdd568>
   4f744:	10bff604 	addi	r2,r2,-40
   4f748:	8884983a 	sll	r2,r17,r2
   4f74c:	0023883a 	mov	r17,zero
   4f750:	1c3f8c0e 	bge	r3,r16,4f584 <__alt_data_end+0xfffdd584>
   4f754:	023fe034 	movhi	r8,65408
   4f758:	423fffc4 	addi	r8,r8,-1
   4f75c:	80e1c83a 	sub	r16,r16,r3
   4f760:	1210703a 	and	r8,r2,r8
   4f764:	003f3806 	br	4f448 <__alt_data_end+0xfffdd448>
   4f768:	9007883a 	mov	r3,r18
   4f76c:	0011883a 	mov	r8,zero
   4f770:	0005883a 	mov	r2,zero
   4f774:	003f4c06 	br	4f4a8 <__alt_data_end+0xfffdd4a8>
   4f778:	498cb03a 	or	r6,r9,r6
   4f77c:	300cc03a 	cmpne	r6,r6,zero
   4f780:	0007883a 	mov	r3,zero
   4f784:	003f6806 	br	4f528 <__alt_data_end+0xfffdd528>
   4f788:	20009c1e 	bne	r4,zero,4f9fc <__adddf3+0x630>
   4f78c:	80800044 	addi	r2,r16,1
   4f790:	1141ffcc 	andi	r5,r2,2047
   4f794:	01000044 	movi	r4,1
   4f798:	2140670e 	bge	r4,r5,4f938 <__adddf3+0x56c>
   4f79c:	0101ffc4 	movi	r4,2047
   4f7a0:	11007f26 	beq	r2,r4,4f9a0 <__adddf3+0x5d4>
   4f7a4:	898d883a 	add	r6,r17,r6
   4f7a8:	4247883a 	add	r3,r8,r9
   4f7ac:	3451803a 	cmpltu	r8,r6,r17
   4f7b0:	40d1883a 	add	r8,r8,r3
   4f7b4:	402297fa 	slli	r17,r8,31
   4f7b8:	300cd07a 	srli	r6,r6,1
   4f7bc:	4010d07a 	srli	r8,r8,1
   4f7c0:	1021883a 	mov	r16,r2
   4f7c4:	89a2b03a 	or	r17,r17,r6
   4f7c8:	003f1f06 	br	4f448 <__alt_data_end+0xfffdd448>
   4f7cc:	0081ffc4 	movi	r2,2047
   4f7d0:	80bf481e 	bne	r16,r2,4f4f4 <__alt_data_end+0xfffdd4f4>
   4f7d4:	003f1c06 	br	4f448 <__alt_data_end+0xfffdd448>
   4f7d8:	843ff844 	addi	r16,r16,-31
   4f7dc:	01000804 	movi	r4,32
   4f7e0:	1406d83a 	srl	r3,r2,r16
   4f7e4:	41005026 	beq	r8,r4,4f928 <__adddf3+0x55c>
   4f7e8:	01001004 	movi	r4,64
   4f7ec:	2211c83a 	sub	r8,r4,r8
   4f7f0:	1204983a 	sll	r2,r2,r8
   4f7f4:	88a2b03a 	or	r17,r17,r2
   4f7f8:	8822c03a 	cmpne	r17,r17,zero
   4f7fc:	1c62b03a 	or	r17,r3,r17
   4f800:	0011883a 	mov	r8,zero
   4f804:	0021883a 	mov	r16,zero
   4f808:	003f7106 	br	4f5d0 <__alt_data_end+0xfffdd5d0>
   4f80c:	193ff804 	addi	r4,r3,-32
   4f810:	00800804 	movi	r2,32
   4f814:	4908d83a 	srl	r4,r9,r4
   4f818:	18804526 	beq	r3,r2,4f930 <__adddf3+0x564>
   4f81c:	00801004 	movi	r2,64
   4f820:	10c5c83a 	sub	r2,r2,r3
   4f824:	4886983a 	sll	r3,r9,r2
   4f828:	198cb03a 	or	r6,r3,r6
   4f82c:	300cc03a 	cmpne	r6,r6,zero
   4f830:	218cb03a 	or	r6,r4,r6
   4f834:	0007883a 	mov	r3,zero
   4f838:	003f3b06 	br	4f528 <__alt_data_end+0xfffdd528>
   4f83c:	80002a26 	beq	r16,zero,4f8e8 <__adddf3+0x51c>
   4f840:	0101ffc4 	movi	r4,2047
   4f844:	11006826 	beq	r2,r4,4f9e8 <__adddf3+0x61c>
   4f848:	00c7c83a 	sub	r3,zero,r3
   4f84c:	42002034 	orhi	r8,r8,128
   4f850:	01000e04 	movi	r4,56
   4f854:	20c07c16 	blt	r4,r3,4fa48 <__adddf3+0x67c>
   4f858:	010007c4 	movi	r4,31
   4f85c:	20c0da16 	blt	r4,r3,4fbc8 <__adddf3+0x7fc>
   4f860:	01000804 	movi	r4,32
   4f864:	20c9c83a 	sub	r4,r4,r3
   4f868:	4114983a 	sll	r10,r8,r4
   4f86c:	88cad83a 	srl	r5,r17,r3
   4f870:	8908983a 	sll	r4,r17,r4
   4f874:	40c6d83a 	srl	r3,r8,r3
   4f878:	5162b03a 	or	r17,r10,r5
   4f87c:	2008c03a 	cmpne	r4,r4,zero
   4f880:	8922b03a 	or	r17,r17,r4
   4f884:	3463c83a 	sub	r17,r6,r17
   4f888:	48c7c83a 	sub	r3,r9,r3
   4f88c:	344d803a 	cmpltu	r6,r6,r17
   4f890:	1991c83a 	sub	r8,r3,r6
   4f894:	1021883a 	mov	r16,r2
   4f898:	3825883a 	mov	r18,r7
   4f89c:	003f2706 	br	4f53c <__alt_data_end+0xfffdd53c>
   4f8a0:	24d0b03a 	or	r8,r4,r19
   4f8a4:	40001b1e 	bne	r8,zero,4f914 <__adddf3+0x548>
   4f8a8:	0005883a 	mov	r2,zero
   4f8ac:	0007883a 	mov	r3,zero
   4f8b0:	0021883a 	mov	r16,zero
   4f8b4:	003f4d06 	br	4f5ec <__alt_data_end+0xfffdd5ec>
   4f8b8:	008007c4 	movi	r2,31
   4f8bc:	11003c16 	blt	r2,r4,4f9b0 <__adddf3+0x5e4>
   4f8c0:	00800804 	movi	r2,32
   4f8c4:	1105c83a 	sub	r2,r2,r4
   4f8c8:	488e983a 	sll	r7,r9,r2
   4f8cc:	310ad83a 	srl	r5,r6,r4
   4f8d0:	3084983a 	sll	r2,r6,r2
   4f8d4:	4912d83a 	srl	r9,r9,r4
   4f8d8:	394ab03a 	or	r5,r7,r5
   4f8dc:	1004c03a 	cmpne	r2,r2,zero
   4f8e0:	288ab03a 	or	r5,r5,r2
   4f8e4:	003f5306 	br	4f634 <__alt_data_end+0xfffdd634>
   4f8e8:	4448b03a 	or	r4,r8,r17
   4f8ec:	20003e26 	beq	r4,zero,4f9e8 <__adddf3+0x61c>
   4f8f0:	00c6303a 	nor	r3,zero,r3
   4f8f4:	18003a1e 	bne	r3,zero,4f9e0 <__adddf3+0x614>
   4f8f8:	3463c83a 	sub	r17,r6,r17
   4f8fc:	4a07c83a 	sub	r3,r9,r8
   4f900:	344d803a 	cmpltu	r6,r6,r17
   4f904:	1991c83a 	sub	r8,r3,r6
   4f908:	1021883a 	mov	r16,r2
   4f90c:	3825883a 	mov	r18,r7
   4f910:	003f0a06 	br	4f53c <__alt_data_end+0xfffdd53c>
   4f914:	2023883a 	mov	r17,r4
   4f918:	003f0d06 	br	4f550 <__alt_data_end+0xfffdd550>
   4f91c:	0081ffc4 	movi	r2,2047
   4f920:	80bf3f1e 	bne	r16,r2,4f620 <__alt_data_end+0xfffdd620>
   4f924:	003ec806 	br	4f448 <__alt_data_end+0xfffdd448>
   4f928:	0005883a 	mov	r2,zero
   4f92c:	003fb106 	br	4f7f4 <__alt_data_end+0xfffdd7f4>
   4f930:	0007883a 	mov	r3,zero
   4f934:	003fbc06 	br	4f828 <__alt_data_end+0xfffdd828>
   4f938:	4444b03a 	or	r2,r8,r17
   4f93c:	8000871e 	bne	r16,zero,4fb5c <__adddf3+0x790>
   4f940:	1000ba26 	beq	r2,zero,4fc2c <__adddf3+0x860>
   4f944:	4984b03a 	or	r2,r9,r6
   4f948:	103ebf26 	beq	r2,zero,4f448 <__alt_data_end+0xfffdd448>
   4f94c:	8985883a 	add	r2,r17,r6
   4f950:	4247883a 	add	r3,r8,r9
   4f954:	1451803a 	cmpltu	r8,r2,r17
   4f958:	40d1883a 	add	r8,r8,r3
   4f95c:	40c0202c 	andhi	r3,r8,128
   4f960:	1023883a 	mov	r17,r2
   4f964:	183f1a26 	beq	r3,zero,4f5d0 <__alt_data_end+0xfffdd5d0>
   4f968:	00bfe034 	movhi	r2,65408
   4f96c:	10bfffc4 	addi	r2,r2,-1
   4f970:	2021883a 	mov	r16,r4
   4f974:	4090703a 	and	r8,r8,r2
   4f978:	003eb306 	br	4f448 <__alt_data_end+0xfffdd448>
   4f97c:	4444b03a 	or	r2,r8,r17
   4f980:	8000291e 	bne	r16,zero,4fa28 <__adddf3+0x65c>
   4f984:	10004b1e 	bne	r2,zero,4fab4 <__adddf3+0x6e8>
   4f988:	4990b03a 	or	r8,r9,r6
   4f98c:	40008b26 	beq	r8,zero,4fbbc <__adddf3+0x7f0>
   4f990:	4811883a 	mov	r8,r9
   4f994:	3023883a 	mov	r17,r6
   4f998:	3825883a 	mov	r18,r7
   4f99c:	003eaa06 	br	4f448 <__alt_data_end+0xfffdd448>
   4f9a0:	1021883a 	mov	r16,r2
   4f9a4:	0011883a 	mov	r8,zero
   4f9a8:	0005883a 	mov	r2,zero
   4f9ac:	003f0f06 	br	4f5ec <__alt_data_end+0xfffdd5ec>
   4f9b0:	217ff804 	addi	r5,r4,-32
   4f9b4:	00800804 	movi	r2,32
   4f9b8:	494ad83a 	srl	r5,r9,r5
   4f9bc:	20807d26 	beq	r4,r2,4fbb4 <__adddf3+0x7e8>
   4f9c0:	00801004 	movi	r2,64
   4f9c4:	1109c83a 	sub	r4,r2,r4
   4f9c8:	4912983a 	sll	r9,r9,r4
   4f9cc:	498cb03a 	or	r6,r9,r6
   4f9d0:	300cc03a 	cmpne	r6,r6,zero
   4f9d4:	298ab03a 	or	r5,r5,r6
   4f9d8:	0013883a 	mov	r9,zero
   4f9dc:	003f1506 	br	4f634 <__alt_data_end+0xfffdd634>
   4f9e0:	0101ffc4 	movi	r4,2047
   4f9e4:	113f9a1e 	bne	r2,r4,4f850 <__alt_data_end+0xfffdd850>
   4f9e8:	4811883a 	mov	r8,r9
   4f9ec:	3023883a 	mov	r17,r6
   4f9f0:	1021883a 	mov	r16,r2
   4f9f4:	3825883a 	mov	r18,r7
   4f9f8:	003e9306 	br	4f448 <__alt_data_end+0xfffdd448>
   4f9fc:	8000161e 	bne	r16,zero,4fa58 <__adddf3+0x68c>
   4fa00:	444ab03a 	or	r5,r8,r17
   4fa04:	28005126 	beq	r5,zero,4fb4c <__adddf3+0x780>
   4fa08:	0108303a 	nor	r4,zero,r4
   4fa0c:	20004d1e 	bne	r4,zero,4fb44 <__adddf3+0x778>
   4fa10:	89a3883a 	add	r17,r17,r6
   4fa14:	4253883a 	add	r9,r8,r9
   4fa18:	898d803a 	cmpltu	r6,r17,r6
   4fa1c:	3251883a 	add	r8,r6,r9
   4fa20:	1021883a 	mov	r16,r2
   4fa24:	003f0806 	br	4f648 <__alt_data_end+0xfffdd648>
   4fa28:	1000301e 	bne	r2,zero,4faec <__adddf3+0x720>
   4fa2c:	4984b03a 	or	r2,r9,r6
   4fa30:	10007126 	beq	r2,zero,4fbf8 <__adddf3+0x82c>
   4fa34:	4811883a 	mov	r8,r9
   4fa38:	3023883a 	mov	r17,r6
   4fa3c:	3825883a 	mov	r18,r7
   4fa40:	0401ffc4 	movi	r16,2047
   4fa44:	003e8006 	br	4f448 <__alt_data_end+0xfffdd448>
   4fa48:	4462b03a 	or	r17,r8,r17
   4fa4c:	8822c03a 	cmpne	r17,r17,zero
   4fa50:	0007883a 	mov	r3,zero
   4fa54:	003f8b06 	br	4f884 <__alt_data_end+0xfffdd884>
   4fa58:	0141ffc4 	movi	r5,2047
   4fa5c:	11403b26 	beq	r2,r5,4fb4c <__adddf3+0x780>
   4fa60:	0109c83a 	sub	r4,zero,r4
   4fa64:	42002034 	orhi	r8,r8,128
   4fa68:	01400e04 	movi	r5,56
   4fa6c:	29006716 	blt	r5,r4,4fc0c <__adddf3+0x840>
   4fa70:	014007c4 	movi	r5,31
   4fa74:	29007016 	blt	r5,r4,4fc38 <__adddf3+0x86c>
   4fa78:	01400804 	movi	r5,32
   4fa7c:	290bc83a 	sub	r5,r5,r4
   4fa80:	4154983a 	sll	r10,r8,r5
   4fa84:	890ed83a 	srl	r7,r17,r4
   4fa88:	894a983a 	sll	r5,r17,r5
   4fa8c:	4108d83a 	srl	r4,r8,r4
   4fa90:	51e2b03a 	or	r17,r10,r7
   4fa94:	280ac03a 	cmpne	r5,r5,zero
   4fa98:	8962b03a 	or	r17,r17,r5
   4fa9c:	89a3883a 	add	r17,r17,r6
   4faa0:	2253883a 	add	r9,r4,r9
   4faa4:	898d803a 	cmpltu	r6,r17,r6
   4faa8:	3251883a 	add	r8,r6,r9
   4faac:	1021883a 	mov	r16,r2
   4fab0:	003ee506 	br	4f648 <__alt_data_end+0xfffdd648>
   4fab4:	4984b03a 	or	r2,r9,r6
   4fab8:	103e6326 	beq	r2,zero,4f448 <__alt_data_end+0xfffdd448>
   4fabc:	8987c83a 	sub	r3,r17,r6
   4fac0:	88c9803a 	cmpltu	r4,r17,r3
   4fac4:	4245c83a 	sub	r2,r8,r9
   4fac8:	1105c83a 	sub	r2,r2,r4
   4facc:	1100202c 	andhi	r4,r2,128
   4fad0:	203ebb26 	beq	r4,zero,4f5c0 <__alt_data_end+0xfffdd5c0>
   4fad4:	3463c83a 	sub	r17,r6,r17
   4fad8:	4a07c83a 	sub	r3,r9,r8
   4fadc:	344d803a 	cmpltu	r6,r6,r17
   4fae0:	1991c83a 	sub	r8,r3,r6
   4fae4:	3825883a 	mov	r18,r7
   4fae8:	003e5706 	br	4f448 <__alt_data_end+0xfffdd448>
   4faec:	4984b03a 	or	r2,r9,r6
   4faf0:	10002e26 	beq	r2,zero,4fbac <__adddf3+0x7e0>
   4faf4:	4004d0fa 	srli	r2,r8,3
   4faf8:	8822d0fa 	srli	r17,r17,3
   4fafc:	4010977a 	slli	r8,r8,29
   4fb00:	10c0022c 	andhi	r3,r2,8
   4fb04:	4462b03a 	or	r17,r8,r17
   4fb08:	18000826 	beq	r3,zero,4fb2c <__adddf3+0x760>
   4fb0c:	4808d0fa 	srli	r4,r9,3
   4fb10:	20c0022c 	andhi	r3,r4,8
   4fb14:	1800051e 	bne	r3,zero,4fb2c <__adddf3+0x760>
   4fb18:	300cd0fa 	srli	r6,r6,3
   4fb1c:	4806977a 	slli	r3,r9,29
   4fb20:	2005883a 	mov	r2,r4
   4fb24:	3825883a 	mov	r18,r7
   4fb28:	19a2b03a 	or	r17,r3,r6
   4fb2c:	8810d77a 	srli	r8,r17,29
   4fb30:	100490fa 	slli	r2,r2,3
   4fb34:	882290fa 	slli	r17,r17,3
   4fb38:	0401ffc4 	movi	r16,2047
   4fb3c:	4090b03a 	or	r8,r8,r2
   4fb40:	003e4106 	br	4f448 <__alt_data_end+0xfffdd448>
   4fb44:	0141ffc4 	movi	r5,2047
   4fb48:	117fc71e 	bne	r2,r5,4fa68 <__alt_data_end+0xfffdda68>
   4fb4c:	4811883a 	mov	r8,r9
   4fb50:	3023883a 	mov	r17,r6
   4fb54:	1021883a 	mov	r16,r2
   4fb58:	003e3b06 	br	4f448 <__alt_data_end+0xfffdd448>
   4fb5c:	10002f26 	beq	r2,zero,4fc1c <__adddf3+0x850>
   4fb60:	4984b03a 	or	r2,r9,r6
   4fb64:	10001126 	beq	r2,zero,4fbac <__adddf3+0x7e0>
   4fb68:	4004d0fa 	srli	r2,r8,3
   4fb6c:	8822d0fa 	srli	r17,r17,3
   4fb70:	4010977a 	slli	r8,r8,29
   4fb74:	10c0022c 	andhi	r3,r2,8
   4fb78:	4462b03a 	or	r17,r8,r17
   4fb7c:	183feb26 	beq	r3,zero,4fb2c <__alt_data_end+0xfffddb2c>
   4fb80:	4808d0fa 	srli	r4,r9,3
   4fb84:	20c0022c 	andhi	r3,r4,8
   4fb88:	183fe81e 	bne	r3,zero,4fb2c <__alt_data_end+0xfffddb2c>
   4fb8c:	300cd0fa 	srli	r6,r6,3
   4fb90:	4806977a 	slli	r3,r9,29
   4fb94:	2005883a 	mov	r2,r4
   4fb98:	19a2b03a 	or	r17,r3,r6
   4fb9c:	003fe306 	br	4fb2c <__alt_data_end+0xfffddb2c>
   4fba0:	0011883a 	mov	r8,zero
   4fba4:	0005883a 	mov	r2,zero
   4fba8:	003e3f06 	br	4f4a8 <__alt_data_end+0xfffdd4a8>
   4fbac:	0401ffc4 	movi	r16,2047
   4fbb0:	003e2506 	br	4f448 <__alt_data_end+0xfffdd448>
   4fbb4:	0013883a 	mov	r9,zero
   4fbb8:	003f8406 	br	4f9cc <__alt_data_end+0xfffdd9cc>
   4fbbc:	0005883a 	mov	r2,zero
   4fbc0:	0007883a 	mov	r3,zero
   4fbc4:	003e8906 	br	4f5ec <__alt_data_end+0xfffdd5ec>
   4fbc8:	197ff804 	addi	r5,r3,-32
   4fbcc:	01000804 	movi	r4,32
   4fbd0:	414ad83a 	srl	r5,r8,r5
   4fbd4:	19002426 	beq	r3,r4,4fc68 <__adddf3+0x89c>
   4fbd8:	01001004 	movi	r4,64
   4fbdc:	20c7c83a 	sub	r3,r4,r3
   4fbe0:	40c6983a 	sll	r3,r8,r3
   4fbe4:	1c46b03a 	or	r3,r3,r17
   4fbe8:	1806c03a 	cmpne	r3,r3,zero
   4fbec:	28e2b03a 	or	r17,r5,r3
   4fbf0:	0007883a 	mov	r3,zero
   4fbf4:	003f2306 	br	4f884 <__alt_data_end+0xfffdd884>
   4fbf8:	0007883a 	mov	r3,zero
   4fbfc:	5811883a 	mov	r8,r11
   4fc00:	00bfffc4 	movi	r2,-1
   4fc04:	0401ffc4 	movi	r16,2047
   4fc08:	003e7806 	br	4f5ec <__alt_data_end+0xfffdd5ec>
   4fc0c:	4462b03a 	or	r17,r8,r17
   4fc10:	8822c03a 	cmpne	r17,r17,zero
   4fc14:	0009883a 	mov	r4,zero
   4fc18:	003fa006 	br	4fa9c <__alt_data_end+0xfffdda9c>
   4fc1c:	4811883a 	mov	r8,r9
   4fc20:	3023883a 	mov	r17,r6
   4fc24:	0401ffc4 	movi	r16,2047
   4fc28:	003e0706 	br	4f448 <__alt_data_end+0xfffdd448>
   4fc2c:	4811883a 	mov	r8,r9
   4fc30:	3023883a 	mov	r17,r6
   4fc34:	003e0406 	br	4f448 <__alt_data_end+0xfffdd448>
   4fc38:	21fff804 	addi	r7,r4,-32
   4fc3c:	01400804 	movi	r5,32
   4fc40:	41ced83a 	srl	r7,r8,r7
   4fc44:	21400a26 	beq	r4,r5,4fc70 <__adddf3+0x8a4>
   4fc48:	01401004 	movi	r5,64
   4fc4c:	2909c83a 	sub	r4,r5,r4
   4fc50:	4108983a 	sll	r4,r8,r4
   4fc54:	2448b03a 	or	r4,r4,r17
   4fc58:	2008c03a 	cmpne	r4,r4,zero
   4fc5c:	3922b03a 	or	r17,r7,r4
   4fc60:	0009883a 	mov	r4,zero
   4fc64:	003f8d06 	br	4fa9c <__alt_data_end+0xfffdda9c>
   4fc68:	0007883a 	mov	r3,zero
   4fc6c:	003fdd06 	br	4fbe4 <__alt_data_end+0xfffddbe4>
   4fc70:	0009883a 	mov	r4,zero
   4fc74:	003ff706 	br	4fc54 <__alt_data_end+0xfffddc54>

0004fc78 <__divdf3>:
   4fc78:	defff004 	addi	sp,sp,-64
   4fc7c:	dc800815 	stw	r18,32(sp)
   4fc80:	2824d53a 	srli	r18,r5,20
   4fc84:	dd800c15 	stw	r22,48(sp)
   4fc88:	282cd7fa 	srli	r22,r5,31
   4fc8c:	dc000615 	stw	r16,24(sp)
   4fc90:	04000434 	movhi	r16,16
   4fc94:	843fffc4 	addi	r16,r16,-1
   4fc98:	dfc00f15 	stw	ra,60(sp)
   4fc9c:	df000e15 	stw	fp,56(sp)
   4fca0:	ddc00d15 	stw	r23,52(sp)
   4fca4:	dd400b15 	stw	r21,44(sp)
   4fca8:	dd000a15 	stw	r20,40(sp)
   4fcac:	dcc00915 	stw	r19,36(sp)
   4fcb0:	dc400715 	stw	r17,28(sp)
   4fcb4:	9481ffcc 	andi	r18,r18,2047
   4fcb8:	2c20703a 	and	r16,r5,r16
   4fcbc:	b2003fcc 	andi	r8,r22,255
   4fcc0:	90006126 	beq	r18,zero,4fe48 <__divdf3+0x1d0>
   4fcc4:	0081ffc4 	movi	r2,2047
   4fcc8:	202b883a 	mov	r21,r4
   4fccc:	90803726 	beq	r18,r2,4fdac <__divdf3+0x134>
   4fcd0:	80800434 	orhi	r2,r16,16
   4fcd4:	100490fa 	slli	r2,r2,3
   4fcd8:	2020d77a 	srli	r16,r4,29
   4fcdc:	202a90fa 	slli	r21,r4,3
   4fce0:	94bf0044 	addi	r18,r18,-1023
   4fce4:	80a0b03a 	or	r16,r16,r2
   4fce8:	0013883a 	mov	r9,zero
   4fcec:	000b883a 	mov	r5,zero
   4fcf0:	3806d53a 	srli	r3,r7,20
   4fcf4:	382ed7fa 	srli	r23,r7,31
   4fcf8:	04400434 	movhi	r17,16
   4fcfc:	8c7fffc4 	addi	r17,r17,-1
   4fd00:	18c1ffcc 	andi	r3,r3,2047
   4fd04:	3029883a 	mov	r20,r6
   4fd08:	3c62703a 	and	r17,r7,r17
   4fd0c:	bf003fcc 	andi	fp,r23,255
   4fd10:	18006e26 	beq	r3,zero,4fecc <__divdf3+0x254>
   4fd14:	0081ffc4 	movi	r2,2047
   4fd18:	18806626 	beq	r3,r2,4feb4 <__divdf3+0x23c>
   4fd1c:	88800434 	orhi	r2,r17,16
   4fd20:	100490fa 	slli	r2,r2,3
   4fd24:	3022d77a 	srli	r17,r6,29
   4fd28:	302890fa 	slli	r20,r6,3
   4fd2c:	18ff0044 	addi	r3,r3,-1023
   4fd30:	88a2b03a 	or	r17,r17,r2
   4fd34:	000f883a 	mov	r7,zero
   4fd38:	b5e6f03a 	xor	r19,r22,r23
   4fd3c:	3a4cb03a 	or	r6,r7,r9
   4fd40:	008003c4 	movi	r2,15
   4fd44:	9809883a 	mov	r4,r19
   4fd48:	90c7c83a 	sub	r3,r18,r3
   4fd4c:	9cc03fcc 	andi	r19,r19,255
   4fd50:	11809636 	bltu	r2,r6,4ffac <__divdf3+0x334>
   4fd54:	300c90ba 	slli	r6,r6,2
   4fd58:	00800174 	movhi	r2,5
   4fd5c:	10bf5b04 	addi	r2,r2,-660
   4fd60:	308d883a 	add	r6,r6,r2
   4fd64:	30800017 	ldw	r2,0(r6)
   4fd68:	1000683a 	jmp	r2
   4fd6c:	0004ffac 	andhi	zero,zero,5118
   4fd70:	0004fde4 	muli	zero,zero,5111
   4fd74:	0004ff9c 	xori	zero,zero,5118
   4fd78:	0004fdd8 	cmpnei	zero,zero,5111
   4fd7c:	0004ff9c 	xori	zero,zero,5118
   4fd80:	0004ff70 	cmpltui	zero,zero,5117
   4fd84:	0004ff9c 	xori	zero,zero,5118
   4fd88:	0004fdd8 	cmpnei	zero,zero,5111
   4fd8c:	0004fde4 	muli	zero,zero,5111
   4fd90:	0004fde4 	muli	zero,zero,5111
   4fd94:	0004ff70 	cmpltui	zero,zero,5117
   4fd98:	0004fdd8 	cmpnei	zero,zero,5111
   4fd9c:	0004fdc8 	cmpgei	zero,zero,5111
   4fda0:	0004fdc8 	cmpgei	zero,zero,5111
   4fda4:	0004fdc8 	cmpgei	zero,zero,5111
   4fda8:	00050334 	movhi	zero,5132
   4fdac:	2404b03a 	or	r2,r4,r16
   4fdb0:	10006c1e 	bne	r2,zero,4ff64 <__divdf3+0x2ec>
   4fdb4:	02400204 	movi	r9,8
   4fdb8:	0021883a 	mov	r16,zero
   4fdbc:	002b883a 	mov	r21,zero
   4fdc0:	01400084 	movi	r5,2
   4fdc4:	003fca06 	br	4fcf0 <__alt_data_end+0xfffddcf0>
   4fdc8:	8023883a 	mov	r17,r16
   4fdcc:	a829883a 	mov	r20,r21
   4fdd0:	4039883a 	mov	fp,r8
   4fdd4:	280f883a 	mov	r7,r5
   4fdd8:	00800084 	movi	r2,2
   4fddc:	3881601e 	bne	r7,r2,50360 <__divdf3+0x6e8>
   4fde0:	e027883a 	mov	r19,fp
   4fde4:	9900004c 	andi	r4,r19,1
   4fde8:	0081ffc4 	movi	r2,2047
   4fdec:	0021883a 	mov	r16,zero
   4fdf0:	002b883a 	mov	r21,zero
   4fdf4:	1004953a 	slli	r2,r2,20
   4fdf8:	20c03fcc 	andi	r3,r4,255
   4fdfc:	01400434 	movhi	r5,16
   4fe00:	297fffc4 	addi	r5,r5,-1
   4fe04:	180697fa 	slli	r3,r3,31
   4fe08:	8160703a 	and	r16,r16,r5
   4fe0c:	80a0b03a 	or	r16,r16,r2
   4fe10:	80c6b03a 	or	r3,r16,r3
   4fe14:	a805883a 	mov	r2,r21
   4fe18:	dfc00f17 	ldw	ra,60(sp)
   4fe1c:	df000e17 	ldw	fp,56(sp)
   4fe20:	ddc00d17 	ldw	r23,52(sp)
   4fe24:	dd800c17 	ldw	r22,48(sp)
   4fe28:	dd400b17 	ldw	r21,44(sp)
   4fe2c:	dd000a17 	ldw	r20,40(sp)
   4fe30:	dcc00917 	ldw	r19,36(sp)
   4fe34:	dc800817 	ldw	r18,32(sp)
   4fe38:	dc400717 	ldw	r17,28(sp)
   4fe3c:	dc000617 	ldw	r16,24(sp)
   4fe40:	dec01004 	addi	sp,sp,64
   4fe44:	f800283a 	ret
   4fe48:	2404b03a 	or	r2,r4,r16
   4fe4c:	2023883a 	mov	r17,r4
   4fe50:	10003f26 	beq	r2,zero,4ff50 <__divdf3+0x2d8>
   4fe54:	80015e26 	beq	r16,zero,503d0 <__divdf3+0x758>
   4fe58:	8009883a 	mov	r4,r16
   4fe5c:	d9800215 	stw	r6,8(sp)
   4fe60:	d9c00515 	stw	r7,20(sp)
   4fe64:	da000415 	stw	r8,16(sp)
   4fe68:	00414080 	call	41408 <__clzsi2>
   4fe6c:	d9800217 	ldw	r6,8(sp)
   4fe70:	d9c00517 	ldw	r7,20(sp)
   4fe74:	da000417 	ldw	r8,16(sp)
   4fe78:	113ffd44 	addi	r4,r2,-11
   4fe7c:	00c00704 	movi	r3,28
   4fe80:	19014f16 	blt	r3,r4,503c0 <__divdf3+0x748>
   4fe84:	00c00744 	movi	r3,29
   4fe88:	157ffe04 	addi	r21,r2,-8
   4fe8c:	1907c83a 	sub	r3,r3,r4
   4fe90:	8560983a 	sll	r16,r16,r21
   4fe94:	88c6d83a 	srl	r3,r17,r3
   4fe98:	8d6a983a 	sll	r21,r17,r21
   4fe9c:	1c20b03a 	or	r16,r3,r16
   4fea0:	1080fcc4 	addi	r2,r2,1011
   4fea4:	00a5c83a 	sub	r18,zero,r2
   4fea8:	0013883a 	mov	r9,zero
   4feac:	000b883a 	mov	r5,zero
   4feb0:	003f8f06 	br	4fcf0 <__alt_data_end+0xfffddcf0>
   4feb4:	3444b03a 	or	r2,r6,r17
   4feb8:	1000231e 	bne	r2,zero,4ff48 <__divdf3+0x2d0>
   4febc:	0023883a 	mov	r17,zero
   4fec0:	0029883a 	mov	r20,zero
   4fec4:	01c00084 	movi	r7,2
   4fec8:	003f9b06 	br	4fd38 <__alt_data_end+0xfffddd38>
   4fecc:	3444b03a 	or	r2,r6,r17
   4fed0:	10001926 	beq	r2,zero,4ff38 <__divdf3+0x2c0>
   4fed4:	88014b26 	beq	r17,zero,50404 <__divdf3+0x78c>
   4fed8:	8809883a 	mov	r4,r17
   4fedc:	d9400115 	stw	r5,4(sp)
   4fee0:	d9800215 	stw	r6,8(sp)
   4fee4:	da000415 	stw	r8,16(sp)
   4fee8:	da400315 	stw	r9,12(sp)
   4feec:	00414080 	call	41408 <__clzsi2>
   4fef0:	d9400117 	ldw	r5,4(sp)
   4fef4:	d9800217 	ldw	r6,8(sp)
   4fef8:	da000417 	ldw	r8,16(sp)
   4fefc:	da400317 	ldw	r9,12(sp)
   4ff00:	113ffd44 	addi	r4,r2,-11
   4ff04:	00c00704 	movi	r3,28
   4ff08:	19013a16 	blt	r3,r4,503f4 <__divdf3+0x77c>
   4ff0c:	00c00744 	movi	r3,29
   4ff10:	153ffe04 	addi	r20,r2,-8
   4ff14:	1907c83a 	sub	r3,r3,r4
   4ff18:	8d22983a 	sll	r17,r17,r20
   4ff1c:	30c6d83a 	srl	r3,r6,r3
   4ff20:	3528983a 	sll	r20,r6,r20
   4ff24:	1c62b03a 	or	r17,r3,r17
   4ff28:	1080fcc4 	addi	r2,r2,1011
   4ff2c:	0087c83a 	sub	r3,zero,r2
   4ff30:	000f883a 	mov	r7,zero
   4ff34:	003f8006 	br	4fd38 <__alt_data_end+0xfffddd38>
   4ff38:	0023883a 	mov	r17,zero
   4ff3c:	0029883a 	mov	r20,zero
   4ff40:	01c00044 	movi	r7,1
   4ff44:	003f7c06 	br	4fd38 <__alt_data_end+0xfffddd38>
   4ff48:	01c000c4 	movi	r7,3
   4ff4c:	003f7a06 	br	4fd38 <__alt_data_end+0xfffddd38>
   4ff50:	02400104 	movi	r9,4
   4ff54:	0021883a 	mov	r16,zero
   4ff58:	002b883a 	mov	r21,zero
   4ff5c:	01400044 	movi	r5,1
   4ff60:	003f6306 	br	4fcf0 <__alt_data_end+0xfffddcf0>
   4ff64:	02400304 	movi	r9,12
   4ff68:	014000c4 	movi	r5,3
   4ff6c:	003f6006 	br	4fcf0 <__alt_data_end+0xfffddcf0>
   4ff70:	04000434 	movhi	r16,16
   4ff74:	0009883a 	mov	r4,zero
   4ff78:	843fffc4 	addi	r16,r16,-1
   4ff7c:	057fffc4 	movi	r21,-1
   4ff80:	0081ffc4 	movi	r2,2047
   4ff84:	003f9b06 	br	4fdf4 <__alt_data_end+0xfffdddf4>
   4ff88:	00c00044 	movi	r3,1
   4ff8c:	1887c83a 	sub	r3,r3,r2
   4ff90:	01000e04 	movi	r4,56
   4ff94:	20c1530e 	bge	r4,r3,504e4 <__divdf3+0x86c>
   4ff98:	9900004c 	andi	r4,r19,1
   4ff9c:	0005883a 	mov	r2,zero
   4ffa0:	0021883a 	mov	r16,zero
   4ffa4:	002b883a 	mov	r21,zero
   4ffa8:	003f9206 	br	4fdf4 <__alt_data_end+0xfffdddf4>
   4ffac:	8c012e36 	bltu	r17,r16,50468 <__divdf3+0x7f0>
   4ffb0:	84412c26 	beq	r16,r17,50464 <__divdf3+0x7ec>
   4ffb4:	a82f883a 	mov	r23,r21
   4ffb8:	18ffffc4 	addi	r3,r3,-1
   4ffbc:	002b883a 	mov	r21,zero
   4ffc0:	a004d63a 	srli	r2,r20,24
   4ffc4:	8822923a 	slli	r17,r17,8
   4ffc8:	a028923a 	slli	r20,r20,8
   4ffcc:	8009883a 	mov	r4,r16
   4ffd0:	88acb03a 	or	r22,r17,r2
   4ffd4:	dd000015 	stw	r20,0(sp)
   4ffd8:	b028d43a 	srli	r20,r22,16
   4ffdc:	d8c00215 	stw	r3,8(sp)
   4ffe0:	b4bfffcc 	andi	r18,r22,65535
   4ffe4:	a00b883a 	mov	r5,r20
   4ffe8:	00408380 	call	40838 <__udivsi3>
   4ffec:	100b883a 	mov	r5,r2
   4fff0:	9009883a 	mov	r4,r18
   4fff4:	1023883a 	mov	r17,r2
   4fff8:	004146c0 	call	4146c <__mulsi3>
   4fffc:	8009883a 	mov	r4,r16
   50000:	a00b883a 	mov	r5,r20
   50004:	1039883a 	mov	fp,r2
   50008:	004089c0 	call	4089c <__umodsi3>
   5000c:	1004943a 	slli	r2,r2,16
   50010:	b808d43a 	srli	r4,r23,16
   50014:	d8c00217 	ldw	r3,8(sp)
   50018:	2084b03a 	or	r2,r4,r2
   5001c:	1700062e 	bgeu	r2,fp,50038 <__divdf3+0x3c0>
   50020:	1585883a 	add	r2,r2,r22
   50024:	893fffc4 	addi	r4,r17,-1
   50028:	15811d36 	bltu	r2,r22,504a0 <__divdf3+0x828>
   5002c:	17011c2e 	bgeu	r2,fp,504a0 <__divdf3+0x828>
   50030:	8c7fff84 	addi	r17,r17,-2
   50034:	1585883a 	add	r2,r2,r22
   50038:	1739c83a 	sub	fp,r2,fp
   5003c:	a00b883a 	mov	r5,r20
   50040:	e009883a 	mov	r4,fp
   50044:	d8c00215 	stw	r3,8(sp)
   50048:	00408380 	call	40838 <__udivsi3>
   5004c:	100b883a 	mov	r5,r2
   50050:	9009883a 	mov	r4,r18
   50054:	1021883a 	mov	r16,r2
   50058:	004146c0 	call	4146c <__mulsi3>
   5005c:	a00b883a 	mov	r5,r20
   50060:	e009883a 	mov	r4,fp
   50064:	d8800415 	stw	r2,16(sp)
   50068:	004089c0 	call	4089c <__umodsi3>
   5006c:	1004943a 	slli	r2,r2,16
   50070:	da000417 	ldw	r8,16(sp)
   50074:	bdffffcc 	andi	r23,r23,65535
   50078:	b884b03a 	or	r2,r23,r2
   5007c:	d8c00217 	ldw	r3,8(sp)
   50080:	1200062e 	bgeu	r2,r8,5009c <__divdf3+0x424>
   50084:	1585883a 	add	r2,r2,r22
   50088:	813fffc4 	addi	r4,r16,-1
   5008c:	15810236 	bltu	r2,r22,50498 <__divdf3+0x820>
   50090:	1201012e 	bgeu	r2,r8,50498 <__divdf3+0x820>
   50094:	843fff84 	addi	r16,r16,-2
   50098:	1585883a 	add	r2,r2,r22
   5009c:	8822943a 	slli	r17,r17,16
   500a0:	d9800017 	ldw	r6,0(sp)
   500a4:	1211c83a 	sub	r8,r2,r8
   500a8:	8c22b03a 	or	r17,r17,r16
   500ac:	373fffcc 	andi	fp,r6,65535
   500b0:	8abfffcc 	andi	r10,r17,65535
   500b4:	8820d43a 	srli	r16,r17,16
   500b8:	5009883a 	mov	r4,r10
   500bc:	e00b883a 	mov	r5,fp
   500c0:	302ed43a 	srli	r23,r6,16
   500c4:	d8c00215 	stw	r3,8(sp)
   500c8:	da000415 	stw	r8,16(sp)
   500cc:	da800115 	stw	r10,4(sp)
   500d0:	004146c0 	call	4146c <__mulsi3>
   500d4:	800b883a 	mov	r5,r16
   500d8:	e009883a 	mov	r4,fp
   500dc:	d8800515 	stw	r2,20(sp)
   500e0:	004146c0 	call	4146c <__mulsi3>
   500e4:	8009883a 	mov	r4,r16
   500e8:	b80b883a 	mov	r5,r23
   500ec:	d8800315 	stw	r2,12(sp)
   500f0:	004146c0 	call	4146c <__mulsi3>
   500f4:	da800117 	ldw	r10,4(sp)
   500f8:	b80b883a 	mov	r5,r23
   500fc:	1021883a 	mov	r16,r2
   50100:	5009883a 	mov	r4,r10
   50104:	004146c0 	call	4146c <__mulsi3>
   50108:	d9c00517 	ldw	r7,20(sp)
   5010c:	da400317 	ldw	r9,12(sp)
   50110:	d8c00217 	ldw	r3,8(sp)
   50114:	3808d43a 	srli	r4,r7,16
   50118:	1245883a 	add	r2,r2,r9
   5011c:	da000417 	ldw	r8,16(sp)
   50120:	2085883a 	add	r2,r4,r2
   50124:	1240022e 	bgeu	r2,r9,50130 <__divdf3+0x4b8>
   50128:	01000074 	movhi	r4,1
   5012c:	8121883a 	add	r16,r16,r4
   50130:	1008d43a 	srli	r4,r2,16
   50134:	1004943a 	slli	r2,r2,16
   50138:	39ffffcc 	andi	r7,r7,65535
   5013c:	2409883a 	add	r4,r4,r16
   50140:	11c5883a 	add	r2,r2,r7
   50144:	4100bb36 	bltu	r8,r4,50434 <__divdf3+0x7bc>
   50148:	4100d726 	beq	r8,r4,504a8 <__divdf3+0x830>
   5014c:	4109c83a 	sub	r4,r8,r4
   50150:	a8a1c83a 	sub	r16,r21,r2
   50154:	ac2b803a 	cmpltu	r21,r21,r16
   50158:	256bc83a 	sub	r21,r4,r21
   5015c:	b540d926 	beq	r22,r21,504c4 <__divdf3+0x84c>
   50160:	a00b883a 	mov	r5,r20
   50164:	a809883a 	mov	r4,r21
   50168:	d8c00215 	stw	r3,8(sp)
   5016c:	00408380 	call	40838 <__udivsi3>
   50170:	100b883a 	mov	r5,r2
   50174:	9009883a 	mov	r4,r18
   50178:	d8800515 	stw	r2,20(sp)
   5017c:	004146c0 	call	4146c <__mulsi3>
   50180:	a809883a 	mov	r4,r21
   50184:	a00b883a 	mov	r5,r20
   50188:	d8800415 	stw	r2,16(sp)
   5018c:	004089c0 	call	4089c <__umodsi3>
   50190:	1004943a 	slli	r2,r2,16
   50194:	8008d43a 	srli	r4,r16,16
   50198:	da000417 	ldw	r8,16(sp)
   5019c:	d8c00217 	ldw	r3,8(sp)
   501a0:	2084b03a 	or	r2,r4,r2
   501a4:	d9c00517 	ldw	r7,20(sp)
   501a8:	1200062e 	bgeu	r2,r8,501c4 <__divdf3+0x54c>
   501ac:	1585883a 	add	r2,r2,r22
   501b0:	393fffc4 	addi	r4,r7,-1
   501b4:	1580c536 	bltu	r2,r22,504cc <__divdf3+0x854>
   501b8:	1200c42e 	bgeu	r2,r8,504cc <__divdf3+0x854>
   501bc:	39ffff84 	addi	r7,r7,-2
   501c0:	1585883a 	add	r2,r2,r22
   501c4:	122bc83a 	sub	r21,r2,r8
   501c8:	a00b883a 	mov	r5,r20
   501cc:	a809883a 	mov	r4,r21
   501d0:	d8c00215 	stw	r3,8(sp)
   501d4:	d9c00515 	stw	r7,20(sp)
   501d8:	00408380 	call	40838 <__udivsi3>
   501dc:	9009883a 	mov	r4,r18
   501e0:	100b883a 	mov	r5,r2
   501e4:	d8800415 	stw	r2,16(sp)
   501e8:	004146c0 	call	4146c <__mulsi3>
   501ec:	a809883a 	mov	r4,r21
   501f0:	a00b883a 	mov	r5,r20
   501f4:	1025883a 	mov	r18,r2
   501f8:	004089c0 	call	4089c <__umodsi3>
   501fc:	1004943a 	slli	r2,r2,16
   50200:	813fffcc 	andi	r4,r16,65535
   50204:	d8c00217 	ldw	r3,8(sp)
   50208:	20a0b03a 	or	r16,r4,r2
   5020c:	d9c00517 	ldw	r7,20(sp)
   50210:	da000417 	ldw	r8,16(sp)
   50214:	8480062e 	bgeu	r16,r18,50230 <__divdf3+0x5b8>
   50218:	85a1883a 	add	r16,r16,r22
   5021c:	40bfffc4 	addi	r2,r8,-1
   50220:	8580ac36 	bltu	r16,r22,504d4 <__divdf3+0x85c>
   50224:	8480ab2e 	bgeu	r16,r18,504d4 <__divdf3+0x85c>
   50228:	423fff84 	addi	r8,r8,-2
   5022c:	85a1883a 	add	r16,r16,r22
   50230:	3804943a 	slli	r2,r7,16
   50234:	84a1c83a 	sub	r16,r16,r18
   50238:	e009883a 	mov	r4,fp
   5023c:	1228b03a 	or	r20,r2,r8
   50240:	a1ffffcc 	andi	r7,r20,65535
   50244:	a024d43a 	srli	r18,r20,16
   50248:	380b883a 	mov	r5,r7
   5024c:	d8c00215 	stw	r3,8(sp)
   50250:	d9c00515 	stw	r7,20(sp)
   50254:	004146c0 	call	4146c <__mulsi3>
   50258:	900b883a 	mov	r5,r18
   5025c:	e009883a 	mov	r4,fp
   50260:	102b883a 	mov	r21,r2
   50264:	004146c0 	call	4146c <__mulsi3>
   50268:	900b883a 	mov	r5,r18
   5026c:	b809883a 	mov	r4,r23
   50270:	1039883a 	mov	fp,r2
   50274:	004146c0 	call	4146c <__mulsi3>
   50278:	d9c00517 	ldw	r7,20(sp)
   5027c:	b80b883a 	mov	r5,r23
   50280:	1025883a 	mov	r18,r2
   50284:	3809883a 	mov	r4,r7
   50288:	004146c0 	call	4146c <__mulsi3>
   5028c:	a808d43a 	srli	r4,r21,16
   50290:	1705883a 	add	r2,r2,fp
   50294:	d8c00217 	ldw	r3,8(sp)
   50298:	2085883a 	add	r2,r4,r2
   5029c:	1700022e 	bgeu	r2,fp,502a8 <__divdf3+0x630>
   502a0:	01000074 	movhi	r4,1
   502a4:	9125883a 	add	r18,r18,r4
   502a8:	1008d43a 	srli	r4,r2,16
   502ac:	1004943a 	slli	r2,r2,16
   502b0:	ad7fffcc 	andi	r21,r21,65535
   502b4:	2489883a 	add	r4,r4,r18
   502b8:	1545883a 	add	r2,r2,r21
   502bc:	81003836 	bltu	r16,r4,503a0 <__divdf3+0x728>
   502c0:	81003626 	beq	r16,r4,5039c <__divdf3+0x724>
   502c4:	a5000054 	ori	r20,r20,1
   502c8:	1880ffc4 	addi	r2,r3,1023
   502cc:	00bf2e0e 	bge	zero,r2,4ff88 <__alt_data_end+0xfffddf88>
   502d0:	a10001cc 	andi	r4,r20,7
   502d4:	20000726 	beq	r4,zero,502f4 <__divdf3+0x67c>
   502d8:	a10003cc 	andi	r4,r20,15
   502dc:	01400104 	movi	r5,4
   502e0:	21400426 	beq	r4,r5,502f4 <__divdf3+0x67c>
   502e4:	a149883a 	add	r4,r20,r5
   502e8:	2529803a 	cmpltu	r20,r4,r20
   502ec:	8d23883a 	add	r17,r17,r20
   502f0:	2029883a 	mov	r20,r4
   502f4:	8900402c 	andhi	r4,r17,256
   502f8:	20000426 	beq	r4,zero,5030c <__divdf3+0x694>
   502fc:	18810004 	addi	r2,r3,1024
   50300:	00ffc034 	movhi	r3,65280
   50304:	18ffffc4 	addi	r3,r3,-1
   50308:	88e2703a 	and	r17,r17,r3
   5030c:	00c1ff84 	movi	r3,2046
   50310:	18beb416 	blt	r3,r2,4fde4 <__alt_data_end+0xfffddde4>
   50314:	a028d0fa 	srli	r20,r20,3
   50318:	882a977a 	slli	r21,r17,29
   5031c:	8820927a 	slli	r16,r17,9
   50320:	1081ffcc 	andi	r2,r2,2047
   50324:	ad2ab03a 	or	r21,r21,r20
   50328:	8020d33a 	srli	r16,r16,12
   5032c:	9900004c 	andi	r4,r19,1
   50330:	003eb006 	br	4fdf4 <__alt_data_end+0xfffdddf4>
   50334:	8080022c 	andhi	r2,r16,8
   50338:	10001226 	beq	r2,zero,50384 <__divdf3+0x70c>
   5033c:	8880022c 	andhi	r2,r17,8
   50340:	1000101e 	bne	r2,zero,50384 <__divdf3+0x70c>
   50344:	00800434 	movhi	r2,16
   50348:	8c000234 	orhi	r16,r17,8
   5034c:	10bfffc4 	addi	r2,r2,-1
   50350:	b809883a 	mov	r4,r23
   50354:	80a0703a 	and	r16,r16,r2
   50358:	a02b883a 	mov	r21,r20
   5035c:	003f0806 	br	4ff80 <__alt_data_end+0xfffddf80>
   50360:	008000c4 	movi	r2,3
   50364:	3880b126 	beq	r7,r2,5062c <__divdf3+0x9b4>
   50368:	00800044 	movi	r2,1
   5036c:	38805b1e 	bne	r7,r2,504dc <__divdf3+0x864>
   50370:	e009883a 	mov	r4,fp
   50374:	0005883a 	mov	r2,zero
   50378:	0021883a 	mov	r16,zero
   5037c:	002b883a 	mov	r21,zero
   50380:	003e9c06 	br	4fdf4 <__alt_data_end+0xfffdddf4>
   50384:	00800434 	movhi	r2,16
   50388:	84000234 	orhi	r16,r16,8
   5038c:	10bfffc4 	addi	r2,r2,-1
   50390:	b009883a 	mov	r4,r22
   50394:	80a0703a 	and	r16,r16,r2
   50398:	003ef906 	br	4ff80 <__alt_data_end+0xfffddf80>
   5039c:	103fca26 	beq	r2,zero,502c8 <__alt_data_end+0xfffde2c8>
   503a0:	b421883a 	add	r16,r22,r16
   503a4:	a17fffc4 	addi	r5,r20,-1
   503a8:	8580422e 	bgeu	r16,r22,504b4 <__divdf3+0x83c>
   503ac:	2829883a 	mov	r20,r5
   503b0:	813fc41e 	bne	r16,r4,502c4 <__alt_data_end+0xfffde2c4>
   503b4:	d9800017 	ldw	r6,0(sp)
   503b8:	30bfc21e 	bne	r6,r2,502c4 <__alt_data_end+0xfffde2c4>
   503bc:	003fc206 	br	502c8 <__alt_data_end+0xfffde2c8>
   503c0:	143ff604 	addi	r16,r2,-40
   503c4:	8c20983a 	sll	r16,r17,r16
   503c8:	002b883a 	mov	r21,zero
   503cc:	003eb406 	br	4fea0 <__alt_data_end+0xfffddea0>
   503d0:	d9800215 	stw	r6,8(sp)
   503d4:	d9c00515 	stw	r7,20(sp)
   503d8:	da000415 	stw	r8,16(sp)
   503dc:	00414080 	call	41408 <__clzsi2>
   503e0:	10800804 	addi	r2,r2,32
   503e4:	da000417 	ldw	r8,16(sp)
   503e8:	d9c00517 	ldw	r7,20(sp)
   503ec:	d9800217 	ldw	r6,8(sp)
   503f0:	003ea106 	br	4fe78 <__alt_data_end+0xfffdde78>
   503f4:	147ff604 	addi	r17,r2,-40
   503f8:	3462983a 	sll	r17,r6,r17
   503fc:	0029883a 	mov	r20,zero
   50400:	003ec906 	br	4ff28 <__alt_data_end+0xfffddf28>
   50404:	3009883a 	mov	r4,r6
   50408:	d9400115 	stw	r5,4(sp)
   5040c:	d9800215 	stw	r6,8(sp)
   50410:	da000415 	stw	r8,16(sp)
   50414:	da400315 	stw	r9,12(sp)
   50418:	00414080 	call	41408 <__clzsi2>
   5041c:	10800804 	addi	r2,r2,32
   50420:	da400317 	ldw	r9,12(sp)
   50424:	da000417 	ldw	r8,16(sp)
   50428:	d9800217 	ldw	r6,8(sp)
   5042c:	d9400117 	ldw	r5,4(sp)
   50430:	003eb306 	br	4ff00 <__alt_data_end+0xfffddf00>
   50434:	d9800017 	ldw	r6,0(sp)
   50438:	a9ab883a 	add	r21,r21,r6
   5043c:	a98b803a 	cmpltu	r5,r21,r6
   50440:	2d8b883a 	add	r5,r5,r22
   50444:	2a11883a 	add	r8,r5,r8
   50448:	897fffc4 	addi	r5,r17,-1
   5044c:	b2000c2e 	bgeu	r22,r8,50480 <__divdf3+0x808>
   50450:	41003f36 	bltu	r8,r4,50550 <__divdf3+0x8d8>
   50454:	22006c26 	beq	r4,r8,50608 <__divdf3+0x990>
   50458:	4109c83a 	sub	r4,r8,r4
   5045c:	2823883a 	mov	r17,r5
   50460:	003f3b06 	br	50150 <__alt_data_end+0xfffde150>
   50464:	ad3ed336 	bltu	r21,r20,4ffb4 <__alt_data_end+0xfffddfb4>
   50468:	a804d07a 	srli	r2,r21,1
   5046c:	802e97fa 	slli	r23,r16,31
   50470:	a82a97fa 	slli	r21,r21,31
   50474:	8020d07a 	srli	r16,r16,1
   50478:	b8aeb03a 	or	r23,r23,r2
   5047c:	003ed006 	br	4ffc0 <__alt_data_end+0xfffddfc0>
   50480:	b23ff51e 	bne	r22,r8,50458 <__alt_data_end+0xfffde458>
   50484:	d9800017 	ldw	r6,0(sp)
   50488:	a9bff12e 	bgeu	r21,r6,50450 <__alt_data_end+0xfffde450>
   5048c:	b109c83a 	sub	r4,r22,r4
   50490:	2823883a 	mov	r17,r5
   50494:	003f2e06 	br	50150 <__alt_data_end+0xfffde150>
   50498:	2021883a 	mov	r16,r4
   5049c:	003eff06 	br	5009c <__alt_data_end+0xfffde09c>
   504a0:	2023883a 	mov	r17,r4
   504a4:	003ee406 	br	50038 <__alt_data_end+0xfffde038>
   504a8:	a8bfe236 	bltu	r21,r2,50434 <__alt_data_end+0xfffde434>
   504ac:	0009883a 	mov	r4,zero
   504b0:	003f2706 	br	50150 <__alt_data_end+0xfffde150>
   504b4:	81002d36 	bltu	r16,r4,5056c <__divdf3+0x8f4>
   504b8:	24005626 	beq	r4,r16,50614 <__divdf3+0x99c>
   504bc:	2829883a 	mov	r20,r5
   504c0:	003f8006 	br	502c4 <__alt_data_end+0xfffde2c4>
   504c4:	053fffc4 	movi	r20,-1
   504c8:	003f7f06 	br	502c8 <__alt_data_end+0xfffde2c8>
   504cc:	200f883a 	mov	r7,r4
   504d0:	003f3c06 	br	501c4 <__alt_data_end+0xfffde1c4>
   504d4:	1011883a 	mov	r8,r2
   504d8:	003f5506 	br	50230 <__alt_data_end+0xfffde230>
   504dc:	e027883a 	mov	r19,fp
   504e0:	003f7906 	br	502c8 <__alt_data_end+0xfffde2c8>
   504e4:	010007c4 	movi	r4,31
   504e8:	20c02816 	blt	r4,r3,5058c <__divdf3+0x914>
   504ec:	00800804 	movi	r2,32
   504f0:	10c5c83a 	sub	r2,r2,r3
   504f4:	888a983a 	sll	r5,r17,r2
   504f8:	a0c8d83a 	srl	r4,r20,r3
   504fc:	a084983a 	sll	r2,r20,r2
   50500:	88e2d83a 	srl	r17,r17,r3
   50504:	2906b03a 	or	r3,r5,r4
   50508:	1004c03a 	cmpne	r2,r2,zero
   5050c:	1886b03a 	or	r3,r3,r2
   50510:	188001cc 	andi	r2,r3,7
   50514:	10000726 	beq	r2,zero,50534 <__divdf3+0x8bc>
   50518:	188003cc 	andi	r2,r3,15
   5051c:	01000104 	movi	r4,4
   50520:	11000426 	beq	r2,r4,50534 <__divdf3+0x8bc>
   50524:	1805883a 	mov	r2,r3
   50528:	10c00104 	addi	r3,r2,4
   5052c:	1885803a 	cmpltu	r2,r3,r2
   50530:	88a3883a 	add	r17,r17,r2
   50534:	8880202c 	andhi	r2,r17,128
   50538:	10002926 	beq	r2,zero,505e0 <__divdf3+0x968>
   5053c:	9900004c 	andi	r4,r19,1
   50540:	00800044 	movi	r2,1
   50544:	0021883a 	mov	r16,zero
   50548:	002b883a 	mov	r21,zero
   5054c:	003e2906 	br	4fdf4 <__alt_data_end+0xfffdddf4>
   50550:	d9800017 	ldw	r6,0(sp)
   50554:	8c7fff84 	addi	r17,r17,-2
   50558:	a9ab883a 	add	r21,r21,r6
   5055c:	a98b803a 	cmpltu	r5,r21,r6
   50560:	2d8b883a 	add	r5,r5,r22
   50564:	2a11883a 	add	r8,r5,r8
   50568:	003ef806 	br	5014c <__alt_data_end+0xfffde14c>
   5056c:	d9800017 	ldw	r6,0(sp)
   50570:	318f883a 	add	r7,r6,r6
   50574:	398b803a 	cmpltu	r5,r7,r6
   50578:	2d8d883a 	add	r6,r5,r22
   5057c:	81a1883a 	add	r16,r16,r6
   50580:	a17fff84 	addi	r5,r20,-2
   50584:	d9c00015 	stw	r7,0(sp)
   50588:	003f8806 	br	503ac <__alt_data_end+0xfffde3ac>
   5058c:	013ff844 	movi	r4,-31
   50590:	2085c83a 	sub	r2,r4,r2
   50594:	8888d83a 	srl	r4,r17,r2
   50598:	00800804 	movi	r2,32
   5059c:	18802126 	beq	r3,r2,50624 <__divdf3+0x9ac>
   505a0:	04001004 	movi	r16,64
   505a4:	80c7c83a 	sub	r3,r16,r3
   505a8:	88e0983a 	sll	r16,r17,r3
   505ac:	8504b03a 	or	r2,r16,r20
   505b0:	1004c03a 	cmpne	r2,r2,zero
   505b4:	2084b03a 	or	r2,r4,r2
   505b8:	144001cc 	andi	r17,r2,7
   505bc:	88000d1e 	bne	r17,zero,505f4 <__divdf3+0x97c>
   505c0:	0021883a 	mov	r16,zero
   505c4:	102ad0fa 	srli	r21,r2,3
   505c8:	9900004c 	andi	r4,r19,1
   505cc:	0005883a 	mov	r2,zero
   505d0:	ac6ab03a 	or	r21,r21,r17
   505d4:	003e0706 	br	4fdf4 <__alt_data_end+0xfffdddf4>
   505d8:	1007883a 	mov	r3,r2
   505dc:	0023883a 	mov	r17,zero
   505e0:	8820927a 	slli	r16,r17,9
   505e4:	1805883a 	mov	r2,r3
   505e8:	8822977a 	slli	r17,r17,29
   505ec:	8020d33a 	srli	r16,r16,12
   505f0:	003ff406 	br	505c4 <__alt_data_end+0xfffde5c4>
   505f4:	10c003cc 	andi	r3,r2,15
   505f8:	01000104 	movi	r4,4
   505fc:	193ff626 	beq	r3,r4,505d8 <__alt_data_end+0xfffde5d8>
   50600:	0023883a 	mov	r17,zero
   50604:	003fc806 	br	50528 <__alt_data_end+0xfffde528>
   50608:	a8bfd136 	bltu	r21,r2,50550 <__alt_data_end+0xfffde550>
   5060c:	2823883a 	mov	r17,r5
   50610:	003fa606 	br	504ac <__alt_data_end+0xfffde4ac>
   50614:	d9800017 	ldw	r6,0(sp)
   50618:	30bfd436 	bltu	r6,r2,5056c <__alt_data_end+0xfffde56c>
   5061c:	2829883a 	mov	r20,r5
   50620:	003f6406 	br	503b4 <__alt_data_end+0xfffde3b4>
   50624:	0021883a 	mov	r16,zero
   50628:	003fe006 	br	505ac <__alt_data_end+0xfffde5ac>
   5062c:	00800434 	movhi	r2,16
   50630:	8c000234 	orhi	r16,r17,8
   50634:	10bfffc4 	addi	r2,r2,-1
   50638:	e009883a 	mov	r4,fp
   5063c:	80a0703a 	and	r16,r16,r2
   50640:	a02b883a 	mov	r21,r20
   50644:	003e4e06 	br	4ff80 <__alt_data_end+0xfffddf80>

00050648 <__eqdf2>:
   50648:	2804d53a 	srli	r2,r5,20
   5064c:	3806d53a 	srli	r3,r7,20
   50650:	02000434 	movhi	r8,16
   50654:	423fffc4 	addi	r8,r8,-1
   50658:	1081ffcc 	andi	r2,r2,2047
   5065c:	0281ffc4 	movi	r10,2047
   50660:	2a12703a 	and	r9,r5,r8
   50664:	18c1ffcc 	andi	r3,r3,2047
   50668:	3a10703a 	and	r8,r7,r8
   5066c:	280ad7fa 	srli	r5,r5,31
   50670:	380ed7fa 	srli	r7,r7,31
   50674:	12801026 	beq	r2,r10,506b8 <__eqdf2+0x70>
   50678:	0281ffc4 	movi	r10,2047
   5067c:	1a800a26 	beq	r3,r10,506a8 <__eqdf2+0x60>
   50680:	10c00226 	beq	r2,r3,5068c <__eqdf2+0x44>
   50684:	00800044 	movi	r2,1
   50688:	f800283a 	ret
   5068c:	4a3ffd1e 	bne	r9,r8,50684 <__alt_data_end+0xfffde684>
   50690:	21bffc1e 	bne	r4,r6,50684 <__alt_data_end+0xfffde684>
   50694:	29c00c26 	beq	r5,r7,506c8 <__eqdf2+0x80>
   50698:	103ffa1e 	bne	r2,zero,50684 <__alt_data_end+0xfffde684>
   5069c:	2244b03a 	or	r2,r4,r9
   506a0:	1004c03a 	cmpne	r2,r2,zero
   506a4:	f800283a 	ret
   506a8:	3214b03a 	or	r10,r6,r8
   506ac:	503ff426 	beq	r10,zero,50680 <__alt_data_end+0xfffde680>
   506b0:	00800044 	movi	r2,1
   506b4:	f800283a 	ret
   506b8:	2254b03a 	or	r10,r4,r9
   506bc:	503fee26 	beq	r10,zero,50678 <__alt_data_end+0xfffde678>
   506c0:	00800044 	movi	r2,1
   506c4:	f800283a 	ret
   506c8:	0005883a 	mov	r2,zero
   506cc:	f800283a 	ret

000506d0 <__gedf2>:
   506d0:	2804d53a 	srli	r2,r5,20
   506d4:	3806d53a 	srli	r3,r7,20
   506d8:	02000434 	movhi	r8,16
   506dc:	423fffc4 	addi	r8,r8,-1
   506e0:	1081ffcc 	andi	r2,r2,2047
   506e4:	0241ffc4 	movi	r9,2047
   506e8:	2a14703a 	and	r10,r5,r8
   506ec:	18c1ffcc 	andi	r3,r3,2047
   506f0:	3a10703a 	and	r8,r7,r8
   506f4:	280ad7fa 	srli	r5,r5,31
   506f8:	380ed7fa 	srli	r7,r7,31
   506fc:	12401d26 	beq	r2,r9,50774 <__gedf2+0xa4>
   50700:	0241ffc4 	movi	r9,2047
   50704:	1a401226 	beq	r3,r9,50750 <__gedf2+0x80>
   50708:	1000081e 	bne	r2,zero,5072c <__gedf2+0x5c>
   5070c:	2296b03a 	or	r11,r4,r10
   50710:	5813003a 	cmpeq	r9,r11,zero
   50714:	1800091e 	bne	r3,zero,5073c <__gedf2+0x6c>
   50718:	3218b03a 	or	r12,r6,r8
   5071c:	6000071e 	bne	r12,zero,5073c <__gedf2+0x6c>
   50720:	0005883a 	mov	r2,zero
   50724:	5800101e 	bne	r11,zero,50768 <__gedf2+0x98>
   50728:	f800283a 	ret
   5072c:	18000c1e 	bne	r3,zero,50760 <__gedf2+0x90>
   50730:	3212b03a 	or	r9,r6,r8
   50734:	48000c26 	beq	r9,zero,50768 <__gedf2+0x98>
   50738:	0013883a 	mov	r9,zero
   5073c:	39c03fcc 	andi	r7,r7,255
   50740:	48000826 	beq	r9,zero,50764 <__gedf2+0x94>
   50744:	38000926 	beq	r7,zero,5076c <__gedf2+0x9c>
   50748:	00800044 	movi	r2,1
   5074c:	f800283a 	ret
   50750:	3212b03a 	or	r9,r6,r8
   50754:	483fec26 	beq	r9,zero,50708 <__alt_data_end+0xfffde708>
   50758:	00bfff84 	movi	r2,-2
   5075c:	f800283a 	ret
   50760:	39c03fcc 	andi	r7,r7,255
   50764:	29c00626 	beq	r5,r7,50780 <__gedf2+0xb0>
   50768:	283ff726 	beq	r5,zero,50748 <__alt_data_end+0xfffde748>
   5076c:	00bfffc4 	movi	r2,-1
   50770:	f800283a 	ret
   50774:	2292b03a 	or	r9,r4,r10
   50778:	483fe126 	beq	r9,zero,50700 <__alt_data_end+0xfffde700>
   5077c:	003ff606 	br	50758 <__alt_data_end+0xfffde758>
   50780:	18bff916 	blt	r3,r2,50768 <__alt_data_end+0xfffde768>
   50784:	10c00316 	blt	r2,r3,50794 <__gedf2+0xc4>
   50788:	42bff736 	bltu	r8,r10,50768 <__alt_data_end+0xfffde768>
   5078c:	52000326 	beq	r10,r8,5079c <__gedf2+0xcc>
   50790:	5200042e 	bgeu	r10,r8,507a4 <__gedf2+0xd4>
   50794:	283fec1e 	bne	r5,zero,50748 <__alt_data_end+0xfffde748>
   50798:	003ff406 	br	5076c <__alt_data_end+0xfffde76c>
   5079c:	313ff236 	bltu	r6,r4,50768 <__alt_data_end+0xfffde768>
   507a0:	21bffc36 	bltu	r4,r6,50794 <__alt_data_end+0xfffde794>
   507a4:	0005883a 	mov	r2,zero
   507a8:	f800283a 	ret

000507ac <__ledf2>:
   507ac:	2804d53a 	srli	r2,r5,20
   507b0:	3810d53a 	srli	r8,r7,20
   507b4:	00c00434 	movhi	r3,16
   507b8:	18ffffc4 	addi	r3,r3,-1
   507bc:	1081ffcc 	andi	r2,r2,2047
   507c0:	0241ffc4 	movi	r9,2047
   507c4:	28d4703a 	and	r10,r5,r3
   507c8:	4201ffcc 	andi	r8,r8,2047
   507cc:	38c6703a 	and	r3,r7,r3
   507d0:	280ad7fa 	srli	r5,r5,31
   507d4:	380ed7fa 	srli	r7,r7,31
   507d8:	12401f26 	beq	r2,r9,50858 <__ledf2+0xac>
   507dc:	0241ffc4 	movi	r9,2047
   507e0:	42401426 	beq	r8,r9,50834 <__ledf2+0x88>
   507e4:	1000091e 	bne	r2,zero,5080c <__ledf2+0x60>
   507e8:	2296b03a 	or	r11,r4,r10
   507ec:	5813003a 	cmpeq	r9,r11,zero
   507f0:	29403fcc 	andi	r5,r5,255
   507f4:	40000a1e 	bne	r8,zero,50820 <__ledf2+0x74>
   507f8:	30d8b03a 	or	r12,r6,r3
   507fc:	6000081e 	bne	r12,zero,50820 <__ledf2+0x74>
   50800:	0005883a 	mov	r2,zero
   50804:	5800111e 	bne	r11,zero,5084c <__ledf2+0xa0>
   50808:	f800283a 	ret
   5080c:	29403fcc 	andi	r5,r5,255
   50810:	40000c1e 	bne	r8,zero,50844 <__ledf2+0x98>
   50814:	30d2b03a 	or	r9,r6,r3
   50818:	48000c26 	beq	r9,zero,5084c <__ledf2+0xa0>
   5081c:	0013883a 	mov	r9,zero
   50820:	39c03fcc 	andi	r7,r7,255
   50824:	48000826 	beq	r9,zero,50848 <__ledf2+0x9c>
   50828:	38001126 	beq	r7,zero,50870 <__ledf2+0xc4>
   5082c:	00800044 	movi	r2,1
   50830:	f800283a 	ret
   50834:	30d2b03a 	or	r9,r6,r3
   50838:	483fea26 	beq	r9,zero,507e4 <__alt_data_end+0xfffde7e4>
   5083c:	00800084 	movi	r2,2
   50840:	f800283a 	ret
   50844:	39c03fcc 	andi	r7,r7,255
   50848:	39400726 	beq	r7,r5,50868 <__ledf2+0xbc>
   5084c:	2800081e 	bne	r5,zero,50870 <__ledf2+0xc4>
   50850:	00800044 	movi	r2,1
   50854:	f800283a 	ret
   50858:	2292b03a 	or	r9,r4,r10
   5085c:	483fdf26 	beq	r9,zero,507dc <__alt_data_end+0xfffde7dc>
   50860:	00800084 	movi	r2,2
   50864:	f800283a 	ret
   50868:	4080030e 	bge	r8,r2,50878 <__ledf2+0xcc>
   5086c:	383fef26 	beq	r7,zero,5082c <__alt_data_end+0xfffde82c>
   50870:	00bfffc4 	movi	r2,-1
   50874:	f800283a 	ret
   50878:	123feb16 	blt	r2,r8,50828 <__alt_data_end+0xfffde828>
   5087c:	1abff336 	bltu	r3,r10,5084c <__alt_data_end+0xfffde84c>
   50880:	50c00326 	beq	r10,r3,50890 <__ledf2+0xe4>
   50884:	50c0042e 	bgeu	r10,r3,50898 <__ledf2+0xec>
   50888:	283fe81e 	bne	r5,zero,5082c <__alt_data_end+0xfffde82c>
   5088c:	003ff806 	br	50870 <__alt_data_end+0xfffde870>
   50890:	313fee36 	bltu	r6,r4,5084c <__alt_data_end+0xfffde84c>
   50894:	21bffc36 	bltu	r4,r6,50888 <__alt_data_end+0xfffde888>
   50898:	0005883a 	mov	r2,zero
   5089c:	f800283a 	ret

000508a0 <__muldf3>:
   508a0:	deffee04 	addi	sp,sp,-72
   508a4:	dd000c15 	stw	r20,48(sp)
   508a8:	2828d53a 	srli	r20,r5,20
   508ac:	ddc00f15 	stw	r23,60(sp)
   508b0:	282ed7fa 	srli	r23,r5,31
   508b4:	dc000815 	stw	r16,32(sp)
   508b8:	04000434 	movhi	r16,16
   508bc:	dcc00b15 	stw	r19,44(sp)
   508c0:	843fffc4 	addi	r16,r16,-1
   508c4:	dfc01115 	stw	ra,68(sp)
   508c8:	df001015 	stw	fp,64(sp)
   508cc:	dd800e15 	stw	r22,56(sp)
   508d0:	dd400d15 	stw	r21,52(sp)
   508d4:	dc800a15 	stw	r18,40(sp)
   508d8:	dc400915 	stw	r17,36(sp)
   508dc:	a501ffcc 	andi	r20,r20,2047
   508e0:	2c20703a 	and	r16,r5,r16
   508e4:	b827883a 	mov	r19,r23
   508e8:	ba403fcc 	andi	r9,r23,255
   508ec:	a0006026 	beq	r20,zero,50a70 <__muldf3+0x1d0>
   508f0:	0081ffc4 	movi	r2,2047
   508f4:	202d883a 	mov	r22,r4
   508f8:	a0803626 	beq	r20,r2,509d4 <__muldf3+0x134>
   508fc:	84000434 	orhi	r16,r16,16
   50900:	200ad77a 	srli	r5,r4,29
   50904:	800490fa 	slli	r2,r16,3
   50908:	202c90fa 	slli	r22,r4,3
   5090c:	a53f0044 	addi	r20,r20,-1023
   50910:	28a0b03a 	or	r16,r5,r2
   50914:	002b883a 	mov	r21,zero
   50918:	000b883a 	mov	r5,zero
   5091c:	3804d53a 	srli	r2,r7,20
   50920:	3838d7fa 	srli	fp,r7,31
   50924:	04400434 	movhi	r17,16
   50928:	8c7fffc4 	addi	r17,r17,-1
   5092c:	1081ffcc 	andi	r2,r2,2047
   50930:	3025883a 	mov	r18,r6
   50934:	3c62703a 	and	r17,r7,r17
   50938:	e2803fcc 	andi	r10,fp,255
   5093c:	10006d26 	beq	r2,zero,50af4 <__muldf3+0x254>
   50940:	00c1ffc4 	movi	r3,2047
   50944:	10c06526 	beq	r2,r3,50adc <__muldf3+0x23c>
   50948:	8c400434 	orhi	r17,r17,16
   5094c:	300ed77a 	srli	r7,r6,29
   50950:	880690fa 	slli	r3,r17,3
   50954:	302490fa 	slli	r18,r6,3
   50958:	10bf0044 	addi	r2,r2,-1023
   5095c:	38e2b03a 	or	r17,r7,r3
   50960:	000f883a 	mov	r7,zero
   50964:	a087883a 	add	r3,r20,r2
   50968:	010003c4 	movi	r4,15
   5096c:	3d44b03a 	or	r2,r7,r21
   50970:	e5ccf03a 	xor	r6,fp,r23
   50974:	1a000044 	addi	r8,r3,1
   50978:	20809b36 	bltu	r4,r2,50be8 <__muldf3+0x348>
   5097c:	100490ba 	slli	r2,r2,2
   50980:	01000174 	movhi	r4,5
   50984:	21026504 	addi	r4,r4,2452
   50988:	1105883a 	add	r2,r2,r4
   5098c:	10800017 	ldw	r2,0(r2)
   50990:	1000683a 	jmp	r2
   50994:	00050be8 	cmpgeui	zero,zero,5167
   50998:	000509f4 	movhi	zero,5159
   5099c:	000509f4 	movhi	zero,5159
   509a0:	000509f0 	cmpltui	zero,zero,5159
   509a4:	00050bc4 	movi	zero,5167
   509a8:	00050bc4 	movi	zero,5167
   509ac:	00050bac 	andhi	zero,zero,5166
   509b0:	000509f0 	cmpltui	zero,zero,5159
   509b4:	00050bc4 	movi	zero,5167
   509b8:	00050bac 	andhi	zero,zero,5166
   509bc:	00050bc4 	movi	zero,5167
   509c0:	000509f0 	cmpltui	zero,zero,5159
   509c4:	00050bd4 	movui	zero,5167
   509c8:	00050bd4 	movui	zero,5167
   509cc:	00050bd4 	movui	zero,5167
   509d0:	00050f34 	movhi	zero,5180
   509d4:	2404b03a 	or	r2,r4,r16
   509d8:	1000711e 	bne	r2,zero,50ba0 <__muldf3+0x300>
   509dc:	05400204 	movi	r21,8
   509e0:	0021883a 	mov	r16,zero
   509e4:	002d883a 	mov	r22,zero
   509e8:	01400084 	movi	r5,2
   509ec:	003fcb06 	br	5091c <__alt_data_end+0xfffde91c>
   509f0:	500d883a 	mov	r6,r10
   509f4:	00800084 	movi	r2,2
   509f8:	38805926 	beq	r7,r2,50b60 <__muldf3+0x2c0>
   509fc:	008000c4 	movi	r2,3
   50a00:	3881bb26 	beq	r7,r2,510f0 <__muldf3+0x850>
   50a04:	00800044 	movi	r2,1
   50a08:	3881961e 	bne	r7,r2,51064 <__muldf3+0x7c4>
   50a0c:	3027883a 	mov	r19,r6
   50a10:	0005883a 	mov	r2,zero
   50a14:	0021883a 	mov	r16,zero
   50a18:	002d883a 	mov	r22,zero
   50a1c:	1004953a 	slli	r2,r2,20
   50a20:	98c03fcc 	andi	r3,r19,255
   50a24:	04400434 	movhi	r17,16
   50a28:	8c7fffc4 	addi	r17,r17,-1
   50a2c:	180697fa 	slli	r3,r3,31
   50a30:	8460703a 	and	r16,r16,r17
   50a34:	80a0b03a 	or	r16,r16,r2
   50a38:	80c6b03a 	or	r3,r16,r3
   50a3c:	b005883a 	mov	r2,r22
   50a40:	dfc01117 	ldw	ra,68(sp)
   50a44:	df001017 	ldw	fp,64(sp)
   50a48:	ddc00f17 	ldw	r23,60(sp)
   50a4c:	dd800e17 	ldw	r22,56(sp)
   50a50:	dd400d17 	ldw	r21,52(sp)
   50a54:	dd000c17 	ldw	r20,48(sp)
   50a58:	dcc00b17 	ldw	r19,44(sp)
   50a5c:	dc800a17 	ldw	r18,40(sp)
   50a60:	dc400917 	ldw	r17,36(sp)
   50a64:	dc000817 	ldw	r16,32(sp)
   50a68:	dec01204 	addi	sp,sp,72
   50a6c:	f800283a 	ret
   50a70:	2404b03a 	or	r2,r4,r16
   50a74:	202b883a 	mov	r21,r4
   50a78:	10004426 	beq	r2,zero,50b8c <__muldf3+0x2ec>
   50a7c:	80015126 	beq	r16,zero,50fc4 <__muldf3+0x724>
   50a80:	8009883a 	mov	r4,r16
   50a84:	d9800715 	stw	r6,28(sp)
   50a88:	d9c00215 	stw	r7,8(sp)
   50a8c:	da400415 	stw	r9,16(sp)
   50a90:	00414080 	call	41408 <__clzsi2>
   50a94:	d9800717 	ldw	r6,28(sp)
   50a98:	d9c00217 	ldw	r7,8(sp)
   50a9c:	da400417 	ldw	r9,16(sp)
   50aa0:	113ffd44 	addi	r4,r2,-11
   50aa4:	00c00704 	movi	r3,28
   50aa8:	19014216 	blt	r3,r4,50fb4 <__muldf3+0x714>
   50aac:	00c00744 	movi	r3,29
   50ab0:	15bffe04 	addi	r22,r2,-8
   50ab4:	1907c83a 	sub	r3,r3,r4
   50ab8:	85a0983a 	sll	r16,r16,r22
   50abc:	a8c6d83a 	srl	r3,r21,r3
   50ac0:	adac983a 	sll	r22,r21,r22
   50ac4:	1c20b03a 	or	r16,r3,r16
   50ac8:	1080fcc4 	addi	r2,r2,1011
   50acc:	00a9c83a 	sub	r20,zero,r2
   50ad0:	002b883a 	mov	r21,zero
   50ad4:	000b883a 	mov	r5,zero
   50ad8:	003f9006 	br	5091c <__alt_data_end+0xfffde91c>
   50adc:	3446b03a 	or	r3,r6,r17
   50ae0:	1800281e 	bne	r3,zero,50b84 <__muldf3+0x2e4>
   50ae4:	0023883a 	mov	r17,zero
   50ae8:	0025883a 	mov	r18,zero
   50aec:	01c00084 	movi	r7,2
   50af0:	003f9c06 	br	50964 <__alt_data_end+0xfffde964>
   50af4:	3446b03a 	or	r3,r6,r17
   50af8:	18001e26 	beq	r3,zero,50b74 <__muldf3+0x2d4>
   50afc:	88012126 	beq	r17,zero,50f84 <__muldf3+0x6e4>
   50b00:	8809883a 	mov	r4,r17
   50b04:	d9400215 	stw	r5,8(sp)
   50b08:	d9800715 	stw	r6,28(sp)
   50b0c:	da400415 	stw	r9,16(sp)
   50b10:	da800315 	stw	r10,12(sp)
   50b14:	00414080 	call	41408 <__clzsi2>
   50b18:	d9400217 	ldw	r5,8(sp)
   50b1c:	d9800717 	ldw	r6,28(sp)
   50b20:	da400417 	ldw	r9,16(sp)
   50b24:	da800317 	ldw	r10,12(sp)
   50b28:	113ffd44 	addi	r4,r2,-11
   50b2c:	00c00704 	movi	r3,28
   50b30:	19011016 	blt	r3,r4,50f74 <__muldf3+0x6d4>
   50b34:	00c00744 	movi	r3,29
   50b38:	14bffe04 	addi	r18,r2,-8
   50b3c:	1907c83a 	sub	r3,r3,r4
   50b40:	8ca2983a 	sll	r17,r17,r18
   50b44:	30c6d83a 	srl	r3,r6,r3
   50b48:	34a4983a 	sll	r18,r6,r18
   50b4c:	1c62b03a 	or	r17,r3,r17
   50b50:	1080fcc4 	addi	r2,r2,1011
   50b54:	0085c83a 	sub	r2,zero,r2
   50b58:	000f883a 	mov	r7,zero
   50b5c:	003f8106 	br	50964 <__alt_data_end+0xfffde964>
   50b60:	3027883a 	mov	r19,r6
   50b64:	0081ffc4 	movi	r2,2047
   50b68:	0021883a 	mov	r16,zero
   50b6c:	002d883a 	mov	r22,zero
   50b70:	003faa06 	br	50a1c <__alt_data_end+0xfffdea1c>
   50b74:	0023883a 	mov	r17,zero
   50b78:	0025883a 	mov	r18,zero
   50b7c:	01c00044 	movi	r7,1
   50b80:	003f7806 	br	50964 <__alt_data_end+0xfffde964>
   50b84:	01c000c4 	movi	r7,3
   50b88:	003f7606 	br	50964 <__alt_data_end+0xfffde964>
   50b8c:	05400104 	movi	r21,4
   50b90:	0021883a 	mov	r16,zero
   50b94:	002d883a 	mov	r22,zero
   50b98:	01400044 	movi	r5,1
   50b9c:	003f5f06 	br	5091c <__alt_data_end+0xfffde91c>
   50ba0:	05400304 	movi	r21,12
   50ba4:	014000c4 	movi	r5,3
   50ba8:	003f5c06 	br	5091c <__alt_data_end+0xfffde91c>
   50bac:	04000434 	movhi	r16,16
   50bb0:	0027883a 	mov	r19,zero
   50bb4:	843fffc4 	addi	r16,r16,-1
   50bb8:	05bfffc4 	movi	r22,-1
   50bbc:	0081ffc4 	movi	r2,2047
   50bc0:	003f9606 	br	50a1c <__alt_data_end+0xfffdea1c>
   50bc4:	8023883a 	mov	r17,r16
   50bc8:	b025883a 	mov	r18,r22
   50bcc:	280f883a 	mov	r7,r5
   50bd0:	003f8806 	br	509f4 <__alt_data_end+0xfffde9f4>
   50bd4:	8023883a 	mov	r17,r16
   50bd8:	b025883a 	mov	r18,r22
   50bdc:	480d883a 	mov	r6,r9
   50be0:	280f883a 	mov	r7,r5
   50be4:	003f8306 	br	509f4 <__alt_data_end+0xfffde9f4>
   50be8:	b026d43a 	srli	r19,r22,16
   50bec:	902ed43a 	srli	r23,r18,16
   50bf0:	b5bfffcc 	andi	r22,r22,65535
   50bf4:	94bfffcc 	andi	r18,r18,65535
   50bf8:	b00b883a 	mov	r5,r22
   50bfc:	9009883a 	mov	r4,r18
   50c00:	d8c00515 	stw	r3,20(sp)
   50c04:	d9800715 	stw	r6,28(sp)
   50c08:	da000615 	stw	r8,24(sp)
   50c0c:	004146c0 	call	4146c <__mulsi3>
   50c10:	980b883a 	mov	r5,r19
   50c14:	9009883a 	mov	r4,r18
   50c18:	1029883a 	mov	r20,r2
   50c1c:	004146c0 	call	4146c <__mulsi3>
   50c20:	b80b883a 	mov	r5,r23
   50c24:	9809883a 	mov	r4,r19
   50c28:	102b883a 	mov	r21,r2
   50c2c:	004146c0 	call	4146c <__mulsi3>
   50c30:	b809883a 	mov	r4,r23
   50c34:	b00b883a 	mov	r5,r22
   50c38:	1039883a 	mov	fp,r2
   50c3c:	004146c0 	call	4146c <__mulsi3>
   50c40:	a008d43a 	srli	r4,r20,16
   50c44:	1545883a 	add	r2,r2,r21
   50c48:	d8c00517 	ldw	r3,20(sp)
   50c4c:	2085883a 	add	r2,r4,r2
   50c50:	d9800717 	ldw	r6,28(sp)
   50c54:	da000617 	ldw	r8,24(sp)
   50c58:	1540022e 	bgeu	r2,r21,50c64 <__muldf3+0x3c4>
   50c5c:	01000074 	movhi	r4,1
   50c60:	e139883a 	add	fp,fp,r4
   50c64:	100e943a 	slli	r7,r2,16
   50c68:	1004d43a 	srli	r2,r2,16
   50c6c:	882ad43a 	srli	r21,r17,16
   50c70:	a53fffcc 	andi	r20,r20,65535
   50c74:	8c7fffcc 	andi	r17,r17,65535
   50c78:	3d29883a 	add	r20,r7,r20
   50c7c:	b00b883a 	mov	r5,r22
   50c80:	8809883a 	mov	r4,r17
   50c84:	d8c00515 	stw	r3,20(sp)
   50c88:	d9800715 	stw	r6,28(sp)
   50c8c:	da000615 	stw	r8,24(sp)
   50c90:	dd000115 	stw	r20,4(sp)
   50c94:	d8800015 	stw	r2,0(sp)
   50c98:	004146c0 	call	4146c <__mulsi3>
   50c9c:	980b883a 	mov	r5,r19
   50ca0:	8809883a 	mov	r4,r17
   50ca4:	d8800215 	stw	r2,8(sp)
   50ca8:	004146c0 	call	4146c <__mulsi3>
   50cac:	9809883a 	mov	r4,r19
   50cb0:	a80b883a 	mov	r5,r21
   50cb4:	1029883a 	mov	r20,r2
   50cb8:	004146c0 	call	4146c <__mulsi3>
   50cbc:	b00b883a 	mov	r5,r22
   50cc0:	a809883a 	mov	r4,r21
   50cc4:	d8800415 	stw	r2,16(sp)
   50cc8:	004146c0 	call	4146c <__mulsi3>
   50ccc:	d9c00217 	ldw	r7,8(sp)
   50cd0:	1505883a 	add	r2,r2,r20
   50cd4:	d8c00517 	ldw	r3,20(sp)
   50cd8:	3826d43a 	srli	r19,r7,16
   50cdc:	d9800717 	ldw	r6,28(sp)
   50ce0:	da000617 	ldw	r8,24(sp)
   50ce4:	9885883a 	add	r2,r19,r2
   50ce8:	da400417 	ldw	r9,16(sp)
   50cec:	1500022e 	bgeu	r2,r20,50cf8 <__muldf3+0x458>
   50cf0:	01000074 	movhi	r4,1
   50cf4:	4913883a 	add	r9,r9,r4
   50cf8:	1028d43a 	srli	r20,r2,16
   50cfc:	1004943a 	slli	r2,r2,16
   50d00:	802cd43a 	srli	r22,r16,16
   50d04:	843fffcc 	andi	r16,r16,65535
   50d08:	3cffffcc 	andi	r19,r7,65535
   50d0c:	9009883a 	mov	r4,r18
   50d10:	800b883a 	mov	r5,r16
   50d14:	a269883a 	add	r20,r20,r9
   50d18:	d8c00515 	stw	r3,20(sp)
   50d1c:	d9800715 	stw	r6,28(sp)
   50d20:	da000615 	stw	r8,24(sp)
   50d24:	14e7883a 	add	r19,r2,r19
   50d28:	004146c0 	call	4146c <__mulsi3>
   50d2c:	9009883a 	mov	r4,r18
   50d30:	b00b883a 	mov	r5,r22
   50d34:	d8800315 	stw	r2,12(sp)
   50d38:	004146c0 	call	4146c <__mulsi3>
   50d3c:	b809883a 	mov	r4,r23
   50d40:	b00b883a 	mov	r5,r22
   50d44:	d8800215 	stw	r2,8(sp)
   50d48:	004146c0 	call	4146c <__mulsi3>
   50d4c:	b80b883a 	mov	r5,r23
   50d50:	8009883a 	mov	r4,r16
   50d54:	d8800415 	stw	r2,16(sp)
   50d58:	004146c0 	call	4146c <__mulsi3>
   50d5c:	da800317 	ldw	r10,12(sp)
   50d60:	d9c00217 	ldw	r7,8(sp)
   50d64:	d9000017 	ldw	r4,0(sp)
   50d68:	502ed43a 	srli	r23,r10,16
   50d6c:	11c5883a 	add	r2,r2,r7
   50d70:	24e5883a 	add	r18,r4,r19
   50d74:	b885883a 	add	r2,r23,r2
   50d78:	d8c00517 	ldw	r3,20(sp)
   50d7c:	d9800717 	ldw	r6,28(sp)
   50d80:	da000617 	ldw	r8,24(sp)
   50d84:	da400417 	ldw	r9,16(sp)
   50d88:	11c0022e 	bgeu	r2,r7,50d94 <__muldf3+0x4f4>
   50d8c:	01000074 	movhi	r4,1
   50d90:	4913883a 	add	r9,r9,r4
   50d94:	100ed43a 	srli	r7,r2,16
   50d98:	1004943a 	slli	r2,r2,16
   50d9c:	55ffffcc 	andi	r23,r10,65535
   50da0:	3a53883a 	add	r9,r7,r9
   50da4:	8809883a 	mov	r4,r17
   50da8:	800b883a 	mov	r5,r16
   50dac:	d8c00515 	stw	r3,20(sp)
   50db0:	d9800715 	stw	r6,28(sp)
   50db4:	da000615 	stw	r8,24(sp)
   50db8:	da400415 	stw	r9,16(sp)
   50dbc:	15ef883a 	add	r23,r2,r23
   50dc0:	004146c0 	call	4146c <__mulsi3>
   50dc4:	8809883a 	mov	r4,r17
   50dc8:	b00b883a 	mov	r5,r22
   50dcc:	d8800215 	stw	r2,8(sp)
   50dd0:	004146c0 	call	4146c <__mulsi3>
   50dd4:	b00b883a 	mov	r5,r22
   50dd8:	a809883a 	mov	r4,r21
   50ddc:	d8800315 	stw	r2,12(sp)
   50de0:	004146c0 	call	4146c <__mulsi3>
   50de4:	8009883a 	mov	r4,r16
   50de8:	a80b883a 	mov	r5,r21
   50dec:	1023883a 	mov	r17,r2
   50df0:	004146c0 	call	4146c <__mulsi3>
   50df4:	d9c00217 	ldw	r7,8(sp)
   50df8:	da800317 	ldw	r10,12(sp)
   50dfc:	d8c00517 	ldw	r3,20(sp)
   50e00:	3808d43a 	srli	r4,r7,16
   50e04:	1285883a 	add	r2,r2,r10
   50e08:	d9800717 	ldw	r6,28(sp)
   50e0c:	2085883a 	add	r2,r4,r2
   50e10:	da000617 	ldw	r8,24(sp)
   50e14:	da400417 	ldw	r9,16(sp)
   50e18:	1280022e 	bgeu	r2,r10,50e24 <__muldf3+0x584>
   50e1c:	01000074 	movhi	r4,1
   50e20:	8923883a 	add	r17,r17,r4
   50e24:	1008943a 	slli	r4,r2,16
   50e28:	39ffffcc 	andi	r7,r7,65535
   50e2c:	e4b9883a 	add	fp,fp,r18
   50e30:	21cf883a 	add	r7,r4,r7
   50e34:	e4e7803a 	cmpltu	r19,fp,r19
   50e38:	3d0f883a 	add	r7,r7,r20
   50e3c:	bf39883a 	add	fp,r23,fp
   50e40:	99c9883a 	add	r4,r19,r7
   50e44:	e5ef803a 	cmpltu	r23,fp,r23
   50e48:	490b883a 	add	r5,r9,r4
   50e4c:	1004d43a 	srli	r2,r2,16
   50e50:	b965883a 	add	r18,r23,r5
   50e54:	24c9803a 	cmpltu	r4,r4,r19
   50e58:	3d29803a 	cmpltu	r20,r7,r20
   50e5c:	a128b03a 	or	r20,r20,r4
   50e60:	95ef803a 	cmpltu	r23,r18,r23
   50e64:	2a53803a 	cmpltu	r9,r5,r9
   50e68:	a0a9883a 	add	r20,r20,r2
   50e6c:	4deeb03a 	or	r23,r9,r23
   50e70:	a5ef883a 	add	r23,r20,r23
   50e74:	bc63883a 	add	r17,r23,r17
   50e78:	e004927a 	slli	r2,fp,9
   50e7c:	d9000117 	ldw	r4,4(sp)
   50e80:	882e927a 	slli	r23,r17,9
   50e84:	9022d5fa 	srli	r17,r18,23
   50e88:	e038d5fa 	srli	fp,fp,23
   50e8c:	1104b03a 	or	r2,r2,r4
   50e90:	9024927a 	slli	r18,r18,9
   50e94:	1004c03a 	cmpne	r2,r2,zero
   50e98:	bc62b03a 	or	r17,r23,r17
   50e9c:	1738b03a 	or	fp,r2,fp
   50ea0:	8880402c 	andhi	r2,r17,256
   50ea4:	e4a4b03a 	or	r18,fp,r18
   50ea8:	10000726 	beq	r2,zero,50ec8 <__muldf3+0x628>
   50eac:	9006d07a 	srli	r3,r18,1
   50eb0:	880497fa 	slli	r2,r17,31
   50eb4:	9480004c 	andi	r18,r18,1
   50eb8:	8822d07a 	srli	r17,r17,1
   50ebc:	1ca4b03a 	or	r18,r3,r18
   50ec0:	14a4b03a 	or	r18,r2,r18
   50ec4:	4007883a 	mov	r3,r8
   50ec8:	1880ffc4 	addi	r2,r3,1023
   50ecc:	0080460e 	bge	zero,r2,50fe8 <__muldf3+0x748>
   50ed0:	910001cc 	andi	r4,r18,7
   50ed4:	20000726 	beq	r4,zero,50ef4 <__muldf3+0x654>
   50ed8:	910003cc 	andi	r4,r18,15
   50edc:	01400104 	movi	r5,4
   50ee0:	21400426 	beq	r4,r5,50ef4 <__muldf3+0x654>
   50ee4:	9149883a 	add	r4,r18,r5
   50ee8:	24a5803a 	cmpltu	r18,r4,r18
   50eec:	8ca3883a 	add	r17,r17,r18
   50ef0:	2025883a 	mov	r18,r4
   50ef4:	8900402c 	andhi	r4,r17,256
   50ef8:	20000426 	beq	r4,zero,50f0c <__muldf3+0x66c>
   50efc:	18810004 	addi	r2,r3,1024
   50f00:	00ffc034 	movhi	r3,65280
   50f04:	18ffffc4 	addi	r3,r3,-1
   50f08:	88e2703a 	and	r17,r17,r3
   50f0c:	00c1ff84 	movi	r3,2046
   50f10:	18bf1316 	blt	r3,r2,50b60 <__alt_data_end+0xfffdeb60>
   50f14:	882c977a 	slli	r22,r17,29
   50f18:	9024d0fa 	srli	r18,r18,3
   50f1c:	8822927a 	slli	r17,r17,9
   50f20:	1081ffcc 	andi	r2,r2,2047
   50f24:	b4acb03a 	or	r22,r22,r18
   50f28:	8820d33a 	srli	r16,r17,12
   50f2c:	3027883a 	mov	r19,r6
   50f30:	003eba06 	br	50a1c <__alt_data_end+0xfffdea1c>
   50f34:	8080022c 	andhi	r2,r16,8
   50f38:	10000926 	beq	r2,zero,50f60 <__muldf3+0x6c0>
   50f3c:	8880022c 	andhi	r2,r17,8
   50f40:	1000071e 	bne	r2,zero,50f60 <__muldf3+0x6c0>
   50f44:	00800434 	movhi	r2,16
   50f48:	8c000234 	orhi	r16,r17,8
   50f4c:	10bfffc4 	addi	r2,r2,-1
   50f50:	e027883a 	mov	r19,fp
   50f54:	80a0703a 	and	r16,r16,r2
   50f58:	902d883a 	mov	r22,r18
   50f5c:	003f1706 	br	50bbc <__alt_data_end+0xfffdebbc>
   50f60:	00800434 	movhi	r2,16
   50f64:	84000234 	orhi	r16,r16,8
   50f68:	10bfffc4 	addi	r2,r2,-1
   50f6c:	80a0703a 	and	r16,r16,r2
   50f70:	003f1206 	br	50bbc <__alt_data_end+0xfffdebbc>
   50f74:	147ff604 	addi	r17,r2,-40
   50f78:	3462983a 	sll	r17,r6,r17
   50f7c:	0025883a 	mov	r18,zero
   50f80:	003ef306 	br	50b50 <__alt_data_end+0xfffdeb50>
   50f84:	3009883a 	mov	r4,r6
   50f88:	d9400215 	stw	r5,8(sp)
   50f8c:	d9800715 	stw	r6,28(sp)
   50f90:	da400415 	stw	r9,16(sp)
   50f94:	da800315 	stw	r10,12(sp)
   50f98:	00414080 	call	41408 <__clzsi2>
   50f9c:	10800804 	addi	r2,r2,32
   50fa0:	da800317 	ldw	r10,12(sp)
   50fa4:	da400417 	ldw	r9,16(sp)
   50fa8:	d9800717 	ldw	r6,28(sp)
   50fac:	d9400217 	ldw	r5,8(sp)
   50fb0:	003edd06 	br	50b28 <__alt_data_end+0xfffdeb28>
   50fb4:	143ff604 	addi	r16,r2,-40
   50fb8:	ac20983a 	sll	r16,r21,r16
   50fbc:	002d883a 	mov	r22,zero
   50fc0:	003ec106 	br	50ac8 <__alt_data_end+0xfffdeac8>
   50fc4:	d9800715 	stw	r6,28(sp)
   50fc8:	d9c00215 	stw	r7,8(sp)
   50fcc:	da400415 	stw	r9,16(sp)
   50fd0:	00414080 	call	41408 <__clzsi2>
   50fd4:	10800804 	addi	r2,r2,32
   50fd8:	da400417 	ldw	r9,16(sp)
   50fdc:	d9c00217 	ldw	r7,8(sp)
   50fe0:	d9800717 	ldw	r6,28(sp)
   50fe4:	003eae06 	br	50aa0 <__alt_data_end+0xfffdeaa0>
   50fe8:	00c00044 	movi	r3,1
   50fec:	1887c83a 	sub	r3,r3,r2
   50ff0:	01000e04 	movi	r4,56
   50ff4:	20fe8516 	blt	r4,r3,50a0c <__alt_data_end+0xfffdea0c>
   50ff8:	010007c4 	movi	r4,31
   50ffc:	20c01b16 	blt	r4,r3,5106c <__muldf3+0x7cc>
   51000:	00800804 	movi	r2,32
   51004:	10c5c83a 	sub	r2,r2,r3
   51008:	888a983a 	sll	r5,r17,r2
   5100c:	90c8d83a 	srl	r4,r18,r3
   51010:	9084983a 	sll	r2,r18,r2
   51014:	88e2d83a 	srl	r17,r17,r3
   51018:	2906b03a 	or	r3,r5,r4
   5101c:	1004c03a 	cmpne	r2,r2,zero
   51020:	1886b03a 	or	r3,r3,r2
   51024:	188001cc 	andi	r2,r3,7
   51028:	10000726 	beq	r2,zero,51048 <__muldf3+0x7a8>
   5102c:	188003cc 	andi	r2,r3,15
   51030:	01000104 	movi	r4,4
   51034:	11000426 	beq	r2,r4,51048 <__muldf3+0x7a8>
   51038:	1805883a 	mov	r2,r3
   5103c:	10c00104 	addi	r3,r2,4
   51040:	1885803a 	cmpltu	r2,r3,r2
   51044:	88a3883a 	add	r17,r17,r2
   51048:	8880202c 	andhi	r2,r17,128
   5104c:	10001c26 	beq	r2,zero,510c0 <__muldf3+0x820>
   51050:	3027883a 	mov	r19,r6
   51054:	00800044 	movi	r2,1
   51058:	0021883a 	mov	r16,zero
   5105c:	002d883a 	mov	r22,zero
   51060:	003e6e06 	br	50a1c <__alt_data_end+0xfffdea1c>
   51064:	4007883a 	mov	r3,r8
   51068:	003f9706 	br	50ec8 <__alt_data_end+0xfffdeec8>
   5106c:	017ff844 	movi	r5,-31
   51070:	2885c83a 	sub	r2,r5,r2
   51074:	888ad83a 	srl	r5,r17,r2
   51078:	00800804 	movi	r2,32
   5107c:	18801a26 	beq	r3,r2,510e8 <__muldf3+0x848>
   51080:	01001004 	movi	r4,64
   51084:	20c7c83a 	sub	r3,r4,r3
   51088:	88e2983a 	sll	r17,r17,r3
   5108c:	8ca4b03a 	or	r18,r17,r18
   51090:	9004c03a 	cmpne	r2,r18,zero
   51094:	2884b03a 	or	r2,r5,r2
   51098:	144001cc 	andi	r17,r2,7
   5109c:	88000d1e 	bne	r17,zero,510d4 <__muldf3+0x834>
   510a0:	0021883a 	mov	r16,zero
   510a4:	102cd0fa 	srli	r22,r2,3
   510a8:	3027883a 	mov	r19,r6
   510ac:	0005883a 	mov	r2,zero
   510b0:	b46cb03a 	or	r22,r22,r17
   510b4:	003e5906 	br	50a1c <__alt_data_end+0xfffdea1c>
   510b8:	1007883a 	mov	r3,r2
   510bc:	0023883a 	mov	r17,zero
   510c0:	8820927a 	slli	r16,r17,9
   510c4:	1805883a 	mov	r2,r3
   510c8:	8822977a 	slli	r17,r17,29
   510cc:	8020d33a 	srli	r16,r16,12
   510d0:	003ff406 	br	510a4 <__alt_data_end+0xfffdf0a4>
   510d4:	10c003cc 	andi	r3,r2,15
   510d8:	01000104 	movi	r4,4
   510dc:	193ff626 	beq	r3,r4,510b8 <__alt_data_end+0xfffdf0b8>
   510e0:	0023883a 	mov	r17,zero
   510e4:	003fd506 	br	5103c <__alt_data_end+0xfffdf03c>
   510e8:	0023883a 	mov	r17,zero
   510ec:	003fe706 	br	5108c <__alt_data_end+0xfffdf08c>
   510f0:	00800434 	movhi	r2,16
   510f4:	8c000234 	orhi	r16,r17,8
   510f8:	10bfffc4 	addi	r2,r2,-1
   510fc:	3027883a 	mov	r19,r6
   51100:	80a0703a 	and	r16,r16,r2
   51104:	902d883a 	mov	r22,r18
   51108:	003eac06 	br	50bbc <__alt_data_end+0xfffdebbc>

0005110c <__subdf3>:
   5110c:	02000434 	movhi	r8,16
   51110:	423fffc4 	addi	r8,r8,-1
   51114:	defffb04 	addi	sp,sp,-20
   51118:	2a14703a 	and	r10,r5,r8
   5111c:	3812d53a 	srli	r9,r7,20
   51120:	3a10703a 	and	r8,r7,r8
   51124:	2006d77a 	srli	r3,r4,29
   51128:	3004d77a 	srli	r2,r6,29
   5112c:	dc000015 	stw	r16,0(sp)
   51130:	501490fa 	slli	r10,r10,3
   51134:	2820d53a 	srli	r16,r5,20
   51138:	401090fa 	slli	r8,r8,3
   5113c:	dc800215 	stw	r18,8(sp)
   51140:	dc400115 	stw	r17,4(sp)
   51144:	dfc00415 	stw	ra,16(sp)
   51148:	202290fa 	slli	r17,r4,3
   5114c:	dcc00315 	stw	r19,12(sp)
   51150:	4a41ffcc 	andi	r9,r9,2047
   51154:	0101ffc4 	movi	r4,2047
   51158:	2824d7fa 	srli	r18,r5,31
   5115c:	8401ffcc 	andi	r16,r16,2047
   51160:	50c6b03a 	or	r3,r10,r3
   51164:	380ed7fa 	srli	r7,r7,31
   51168:	408ab03a 	or	r5,r8,r2
   5116c:	300c90fa 	slli	r6,r6,3
   51170:	49009626 	beq	r9,r4,513cc <__subdf3+0x2c0>
   51174:	39c0005c 	xori	r7,r7,1
   51178:	8245c83a 	sub	r2,r16,r9
   5117c:	3c807426 	beq	r7,r18,51350 <__subdf3+0x244>
   51180:	0080af0e 	bge	zero,r2,51440 <__subdf3+0x334>
   51184:	48002a1e 	bne	r9,zero,51230 <__subdf3+0x124>
   51188:	2988b03a 	or	r4,r5,r6
   5118c:	20009a1e 	bne	r4,zero,513f8 <__subdf3+0x2ec>
   51190:	888001cc 	andi	r2,r17,7
   51194:	10000726 	beq	r2,zero,511b4 <__subdf3+0xa8>
   51198:	888003cc 	andi	r2,r17,15
   5119c:	01000104 	movi	r4,4
   511a0:	11000426 	beq	r2,r4,511b4 <__subdf3+0xa8>
   511a4:	890b883a 	add	r5,r17,r4
   511a8:	2c63803a 	cmpltu	r17,r5,r17
   511ac:	1c47883a 	add	r3,r3,r17
   511b0:	2823883a 	mov	r17,r5
   511b4:	1880202c 	andhi	r2,r3,128
   511b8:	10005926 	beq	r2,zero,51320 <__subdf3+0x214>
   511bc:	84000044 	addi	r16,r16,1
   511c0:	0081ffc4 	movi	r2,2047
   511c4:	8080be26 	beq	r16,r2,514c0 <__subdf3+0x3b4>
   511c8:	017fe034 	movhi	r5,65408
   511cc:	297fffc4 	addi	r5,r5,-1
   511d0:	1946703a 	and	r3,r3,r5
   511d4:	1804977a 	slli	r2,r3,29
   511d8:	1806927a 	slli	r3,r3,9
   511dc:	8822d0fa 	srli	r17,r17,3
   511e0:	8401ffcc 	andi	r16,r16,2047
   511e4:	180ad33a 	srli	r5,r3,12
   511e8:	9100004c 	andi	r4,r18,1
   511ec:	1444b03a 	or	r2,r2,r17
   511f0:	80c1ffcc 	andi	r3,r16,2047
   511f4:	1820953a 	slli	r16,r3,20
   511f8:	20c03fcc 	andi	r3,r4,255
   511fc:	180897fa 	slli	r4,r3,31
   51200:	00c00434 	movhi	r3,16
   51204:	18ffffc4 	addi	r3,r3,-1
   51208:	28c6703a 	and	r3,r5,r3
   5120c:	1c06b03a 	or	r3,r3,r16
   51210:	1906b03a 	or	r3,r3,r4
   51214:	dfc00417 	ldw	ra,16(sp)
   51218:	dcc00317 	ldw	r19,12(sp)
   5121c:	dc800217 	ldw	r18,8(sp)
   51220:	dc400117 	ldw	r17,4(sp)
   51224:	dc000017 	ldw	r16,0(sp)
   51228:	dec00504 	addi	sp,sp,20
   5122c:	f800283a 	ret
   51230:	0101ffc4 	movi	r4,2047
   51234:	813fd626 	beq	r16,r4,51190 <__alt_data_end+0xfffdf190>
   51238:	29402034 	orhi	r5,r5,128
   5123c:	01000e04 	movi	r4,56
   51240:	2080a316 	blt	r4,r2,514d0 <__subdf3+0x3c4>
   51244:	010007c4 	movi	r4,31
   51248:	2080c616 	blt	r4,r2,51564 <__subdf3+0x458>
   5124c:	01000804 	movi	r4,32
   51250:	2089c83a 	sub	r4,r4,r2
   51254:	2910983a 	sll	r8,r5,r4
   51258:	308ed83a 	srl	r7,r6,r2
   5125c:	3108983a 	sll	r4,r6,r4
   51260:	2884d83a 	srl	r2,r5,r2
   51264:	41ccb03a 	or	r6,r8,r7
   51268:	2008c03a 	cmpne	r4,r4,zero
   5126c:	310cb03a 	or	r6,r6,r4
   51270:	898dc83a 	sub	r6,r17,r6
   51274:	89a3803a 	cmpltu	r17,r17,r6
   51278:	1887c83a 	sub	r3,r3,r2
   5127c:	1c47c83a 	sub	r3,r3,r17
   51280:	3023883a 	mov	r17,r6
   51284:	1880202c 	andhi	r2,r3,128
   51288:	10002326 	beq	r2,zero,51318 <__subdf3+0x20c>
   5128c:	04c02034 	movhi	r19,128
   51290:	9cffffc4 	addi	r19,r19,-1
   51294:	1ce6703a 	and	r19,r3,r19
   51298:	98007a26 	beq	r19,zero,51484 <__subdf3+0x378>
   5129c:	9809883a 	mov	r4,r19
   512a0:	00414080 	call	41408 <__clzsi2>
   512a4:	113ffe04 	addi	r4,r2,-8
   512a8:	00c007c4 	movi	r3,31
   512ac:	19007b16 	blt	r3,r4,5149c <__subdf3+0x390>
   512b0:	00800804 	movi	r2,32
   512b4:	1105c83a 	sub	r2,r2,r4
   512b8:	8884d83a 	srl	r2,r17,r2
   512bc:	9906983a 	sll	r3,r19,r4
   512c0:	8922983a 	sll	r17,r17,r4
   512c4:	10c4b03a 	or	r2,r2,r3
   512c8:	24007816 	blt	r4,r16,514ac <__subdf3+0x3a0>
   512cc:	2421c83a 	sub	r16,r4,r16
   512d0:	80c00044 	addi	r3,r16,1
   512d4:	010007c4 	movi	r4,31
   512d8:	20c09516 	blt	r4,r3,51530 <__subdf3+0x424>
   512dc:	01400804 	movi	r5,32
   512e0:	28cbc83a 	sub	r5,r5,r3
   512e4:	88c8d83a 	srl	r4,r17,r3
   512e8:	8962983a 	sll	r17,r17,r5
   512ec:	114a983a 	sll	r5,r2,r5
   512f0:	10c6d83a 	srl	r3,r2,r3
   512f4:	8804c03a 	cmpne	r2,r17,zero
   512f8:	290ab03a 	or	r5,r5,r4
   512fc:	28a2b03a 	or	r17,r5,r2
   51300:	0021883a 	mov	r16,zero
   51304:	003fa206 	br	51190 <__alt_data_end+0xfffdf190>
   51308:	2090b03a 	or	r8,r4,r2
   5130c:	40018e26 	beq	r8,zero,51948 <__subdf3+0x83c>
   51310:	1007883a 	mov	r3,r2
   51314:	2023883a 	mov	r17,r4
   51318:	888001cc 	andi	r2,r17,7
   5131c:	103f9e1e 	bne	r2,zero,51198 <__alt_data_end+0xfffdf198>
   51320:	1804977a 	slli	r2,r3,29
   51324:	8822d0fa 	srli	r17,r17,3
   51328:	1810d0fa 	srli	r8,r3,3
   5132c:	9100004c 	andi	r4,r18,1
   51330:	1444b03a 	or	r2,r2,r17
   51334:	00c1ffc4 	movi	r3,2047
   51338:	80c02826 	beq	r16,r3,513dc <__subdf3+0x2d0>
   5133c:	01400434 	movhi	r5,16
   51340:	297fffc4 	addi	r5,r5,-1
   51344:	80e0703a 	and	r16,r16,r3
   51348:	414a703a 	and	r5,r8,r5
   5134c:	003fa806 	br	511f0 <__alt_data_end+0xfffdf1f0>
   51350:	0080630e 	bge	zero,r2,514e0 <__subdf3+0x3d4>
   51354:	48003026 	beq	r9,zero,51418 <__subdf3+0x30c>
   51358:	0101ffc4 	movi	r4,2047
   5135c:	813f8c26 	beq	r16,r4,51190 <__alt_data_end+0xfffdf190>
   51360:	29402034 	orhi	r5,r5,128
   51364:	01000e04 	movi	r4,56
   51368:	2080a90e 	bge	r4,r2,51610 <__subdf3+0x504>
   5136c:	298cb03a 	or	r6,r5,r6
   51370:	3012c03a 	cmpne	r9,r6,zero
   51374:	0005883a 	mov	r2,zero
   51378:	4c53883a 	add	r9,r9,r17
   5137c:	4c63803a 	cmpltu	r17,r9,r17
   51380:	10c7883a 	add	r3,r2,r3
   51384:	88c7883a 	add	r3,r17,r3
   51388:	4823883a 	mov	r17,r9
   5138c:	1880202c 	andhi	r2,r3,128
   51390:	1000d026 	beq	r2,zero,516d4 <__subdf3+0x5c8>
   51394:	84000044 	addi	r16,r16,1
   51398:	0081ffc4 	movi	r2,2047
   5139c:	8080fe26 	beq	r16,r2,51798 <__subdf3+0x68c>
   513a0:	00bfe034 	movhi	r2,65408
   513a4:	10bfffc4 	addi	r2,r2,-1
   513a8:	1886703a 	and	r3,r3,r2
   513ac:	880ad07a 	srli	r5,r17,1
   513b0:	180497fa 	slli	r2,r3,31
   513b4:	8900004c 	andi	r4,r17,1
   513b8:	2922b03a 	or	r17,r5,r4
   513bc:	1806d07a 	srli	r3,r3,1
   513c0:	1462b03a 	or	r17,r2,r17
   513c4:	3825883a 	mov	r18,r7
   513c8:	003f7106 	br	51190 <__alt_data_end+0xfffdf190>
   513cc:	2984b03a 	or	r2,r5,r6
   513d0:	103f6826 	beq	r2,zero,51174 <__alt_data_end+0xfffdf174>
   513d4:	39c03fcc 	andi	r7,r7,255
   513d8:	003f6706 	br	51178 <__alt_data_end+0xfffdf178>
   513dc:	4086b03a 	or	r3,r8,r2
   513e0:	18015226 	beq	r3,zero,5192c <__subdf3+0x820>
   513e4:	00c00434 	movhi	r3,16
   513e8:	41400234 	orhi	r5,r8,8
   513ec:	18ffffc4 	addi	r3,r3,-1
   513f0:	28ca703a 	and	r5,r5,r3
   513f4:	003f7e06 	br	511f0 <__alt_data_end+0xfffdf1f0>
   513f8:	10bfffc4 	addi	r2,r2,-1
   513fc:	1000491e 	bne	r2,zero,51524 <__subdf3+0x418>
   51400:	898fc83a 	sub	r7,r17,r6
   51404:	89e3803a 	cmpltu	r17,r17,r7
   51408:	1947c83a 	sub	r3,r3,r5
   5140c:	1c47c83a 	sub	r3,r3,r17
   51410:	3823883a 	mov	r17,r7
   51414:	003f9b06 	br	51284 <__alt_data_end+0xfffdf284>
   51418:	2988b03a 	or	r4,r5,r6
   5141c:	203f5c26 	beq	r4,zero,51190 <__alt_data_end+0xfffdf190>
   51420:	10bfffc4 	addi	r2,r2,-1
   51424:	1000931e 	bne	r2,zero,51674 <__subdf3+0x568>
   51428:	898d883a 	add	r6,r17,r6
   5142c:	3463803a 	cmpltu	r17,r6,r17
   51430:	1947883a 	add	r3,r3,r5
   51434:	88c7883a 	add	r3,r17,r3
   51438:	3023883a 	mov	r17,r6
   5143c:	003fd306 	br	5138c <__alt_data_end+0xfffdf38c>
   51440:	1000541e 	bne	r2,zero,51594 <__subdf3+0x488>
   51444:	80800044 	addi	r2,r16,1
   51448:	1081ffcc 	andi	r2,r2,2047
   5144c:	01000044 	movi	r4,1
   51450:	2080a20e 	bge	r4,r2,516dc <__subdf3+0x5d0>
   51454:	8989c83a 	sub	r4,r17,r6
   51458:	8905803a 	cmpltu	r2,r17,r4
   5145c:	1967c83a 	sub	r19,r3,r5
   51460:	98a7c83a 	sub	r19,r19,r2
   51464:	9880202c 	andhi	r2,r19,128
   51468:	10006326 	beq	r2,zero,515f8 <__subdf3+0x4ec>
   5146c:	3463c83a 	sub	r17,r6,r17
   51470:	28c7c83a 	sub	r3,r5,r3
   51474:	344d803a 	cmpltu	r6,r6,r17
   51478:	19a7c83a 	sub	r19,r3,r6
   5147c:	3825883a 	mov	r18,r7
   51480:	983f861e 	bne	r19,zero,5129c <__alt_data_end+0xfffdf29c>
   51484:	8809883a 	mov	r4,r17
   51488:	00414080 	call	41408 <__clzsi2>
   5148c:	10800804 	addi	r2,r2,32
   51490:	113ffe04 	addi	r4,r2,-8
   51494:	00c007c4 	movi	r3,31
   51498:	193f850e 	bge	r3,r4,512b0 <__alt_data_end+0xfffdf2b0>
   5149c:	10bff604 	addi	r2,r2,-40
   514a0:	8884983a 	sll	r2,r17,r2
   514a4:	0023883a 	mov	r17,zero
   514a8:	243f880e 	bge	r4,r16,512cc <__alt_data_end+0xfffdf2cc>
   514ac:	00ffe034 	movhi	r3,65408
   514b0:	18ffffc4 	addi	r3,r3,-1
   514b4:	8121c83a 	sub	r16,r16,r4
   514b8:	10c6703a 	and	r3,r2,r3
   514bc:	003f3406 	br	51190 <__alt_data_end+0xfffdf190>
   514c0:	9100004c 	andi	r4,r18,1
   514c4:	000b883a 	mov	r5,zero
   514c8:	0005883a 	mov	r2,zero
   514cc:	003f4806 	br	511f0 <__alt_data_end+0xfffdf1f0>
   514d0:	298cb03a 	or	r6,r5,r6
   514d4:	300cc03a 	cmpne	r6,r6,zero
   514d8:	0005883a 	mov	r2,zero
   514dc:	003f6406 	br	51270 <__alt_data_end+0xfffdf270>
   514e0:	10009a1e 	bne	r2,zero,5174c <__subdf3+0x640>
   514e4:	82400044 	addi	r9,r16,1
   514e8:	4881ffcc 	andi	r2,r9,2047
   514ec:	02800044 	movi	r10,1
   514f0:	5080670e 	bge	r10,r2,51690 <__subdf3+0x584>
   514f4:	0081ffc4 	movi	r2,2047
   514f8:	4880af26 	beq	r9,r2,517b8 <__subdf3+0x6ac>
   514fc:	898d883a 	add	r6,r17,r6
   51500:	1945883a 	add	r2,r3,r5
   51504:	3447803a 	cmpltu	r3,r6,r17
   51508:	1887883a 	add	r3,r3,r2
   5150c:	182297fa 	slli	r17,r3,31
   51510:	300cd07a 	srli	r6,r6,1
   51514:	1806d07a 	srli	r3,r3,1
   51518:	4821883a 	mov	r16,r9
   5151c:	89a2b03a 	or	r17,r17,r6
   51520:	003f1b06 	br	51190 <__alt_data_end+0xfffdf190>
   51524:	0101ffc4 	movi	r4,2047
   51528:	813f441e 	bne	r16,r4,5123c <__alt_data_end+0xfffdf23c>
   5152c:	003f1806 	br	51190 <__alt_data_end+0xfffdf190>
   51530:	843ff844 	addi	r16,r16,-31
   51534:	01400804 	movi	r5,32
   51538:	1408d83a 	srl	r4,r2,r16
   5153c:	19405026 	beq	r3,r5,51680 <__subdf3+0x574>
   51540:	01401004 	movi	r5,64
   51544:	28c7c83a 	sub	r3,r5,r3
   51548:	10c4983a 	sll	r2,r2,r3
   5154c:	88a2b03a 	or	r17,r17,r2
   51550:	8822c03a 	cmpne	r17,r17,zero
   51554:	2462b03a 	or	r17,r4,r17
   51558:	0007883a 	mov	r3,zero
   5155c:	0021883a 	mov	r16,zero
   51560:	003f6d06 	br	51318 <__alt_data_end+0xfffdf318>
   51564:	11fff804 	addi	r7,r2,-32
   51568:	01000804 	movi	r4,32
   5156c:	29ced83a 	srl	r7,r5,r7
   51570:	11004526 	beq	r2,r4,51688 <__subdf3+0x57c>
   51574:	01001004 	movi	r4,64
   51578:	2089c83a 	sub	r4,r4,r2
   5157c:	2904983a 	sll	r2,r5,r4
   51580:	118cb03a 	or	r6,r2,r6
   51584:	300cc03a 	cmpne	r6,r6,zero
   51588:	398cb03a 	or	r6,r7,r6
   5158c:	0005883a 	mov	r2,zero
   51590:	003f3706 	br	51270 <__alt_data_end+0xfffdf270>
   51594:	80002a26 	beq	r16,zero,51640 <__subdf3+0x534>
   51598:	0101ffc4 	movi	r4,2047
   5159c:	49006626 	beq	r9,r4,51738 <__subdf3+0x62c>
   515a0:	0085c83a 	sub	r2,zero,r2
   515a4:	18c02034 	orhi	r3,r3,128
   515a8:	01000e04 	movi	r4,56
   515ac:	20807e16 	blt	r4,r2,517a8 <__subdf3+0x69c>
   515b0:	010007c4 	movi	r4,31
   515b4:	2080e716 	blt	r4,r2,51954 <__subdf3+0x848>
   515b8:	01000804 	movi	r4,32
   515bc:	2089c83a 	sub	r4,r4,r2
   515c0:	1914983a 	sll	r10,r3,r4
   515c4:	8890d83a 	srl	r8,r17,r2
   515c8:	8908983a 	sll	r4,r17,r4
   515cc:	1884d83a 	srl	r2,r3,r2
   515d0:	5222b03a 	or	r17,r10,r8
   515d4:	2006c03a 	cmpne	r3,r4,zero
   515d8:	88e2b03a 	or	r17,r17,r3
   515dc:	3463c83a 	sub	r17,r6,r17
   515e0:	2885c83a 	sub	r2,r5,r2
   515e4:	344d803a 	cmpltu	r6,r6,r17
   515e8:	1187c83a 	sub	r3,r2,r6
   515ec:	4821883a 	mov	r16,r9
   515f0:	3825883a 	mov	r18,r7
   515f4:	003f2306 	br	51284 <__alt_data_end+0xfffdf284>
   515f8:	24d0b03a 	or	r8,r4,r19
   515fc:	40001b1e 	bne	r8,zero,5166c <__subdf3+0x560>
   51600:	0005883a 	mov	r2,zero
   51604:	0009883a 	mov	r4,zero
   51608:	0021883a 	mov	r16,zero
   5160c:	003f4906 	br	51334 <__alt_data_end+0xfffdf334>
   51610:	010007c4 	movi	r4,31
   51614:	20803a16 	blt	r4,r2,51700 <__subdf3+0x5f4>
   51618:	01000804 	movi	r4,32
   5161c:	2089c83a 	sub	r4,r4,r2
   51620:	2912983a 	sll	r9,r5,r4
   51624:	3090d83a 	srl	r8,r6,r2
   51628:	3108983a 	sll	r4,r6,r4
   5162c:	2884d83a 	srl	r2,r5,r2
   51630:	4a12b03a 	or	r9,r9,r8
   51634:	2008c03a 	cmpne	r4,r4,zero
   51638:	4912b03a 	or	r9,r9,r4
   5163c:	003f4e06 	br	51378 <__alt_data_end+0xfffdf378>
   51640:	1c48b03a 	or	r4,r3,r17
   51644:	20003c26 	beq	r4,zero,51738 <__subdf3+0x62c>
   51648:	0084303a 	nor	r2,zero,r2
   5164c:	1000381e 	bne	r2,zero,51730 <__subdf3+0x624>
   51650:	3463c83a 	sub	r17,r6,r17
   51654:	28c5c83a 	sub	r2,r5,r3
   51658:	344d803a 	cmpltu	r6,r6,r17
   5165c:	1187c83a 	sub	r3,r2,r6
   51660:	4821883a 	mov	r16,r9
   51664:	3825883a 	mov	r18,r7
   51668:	003f0606 	br	51284 <__alt_data_end+0xfffdf284>
   5166c:	2023883a 	mov	r17,r4
   51670:	003f0906 	br	51298 <__alt_data_end+0xfffdf298>
   51674:	0101ffc4 	movi	r4,2047
   51678:	813f3a1e 	bne	r16,r4,51364 <__alt_data_end+0xfffdf364>
   5167c:	003ec406 	br	51190 <__alt_data_end+0xfffdf190>
   51680:	0005883a 	mov	r2,zero
   51684:	003fb106 	br	5154c <__alt_data_end+0xfffdf54c>
   51688:	0005883a 	mov	r2,zero
   5168c:	003fbc06 	br	51580 <__alt_data_end+0xfffdf580>
   51690:	1c44b03a 	or	r2,r3,r17
   51694:	80008e1e 	bne	r16,zero,518d0 <__subdf3+0x7c4>
   51698:	1000c826 	beq	r2,zero,519bc <__subdf3+0x8b0>
   5169c:	2984b03a 	or	r2,r5,r6
   516a0:	103ebb26 	beq	r2,zero,51190 <__alt_data_end+0xfffdf190>
   516a4:	8989883a 	add	r4,r17,r6
   516a8:	1945883a 	add	r2,r3,r5
   516ac:	2447803a 	cmpltu	r3,r4,r17
   516b0:	1887883a 	add	r3,r3,r2
   516b4:	1880202c 	andhi	r2,r3,128
   516b8:	2023883a 	mov	r17,r4
   516bc:	103f1626 	beq	r2,zero,51318 <__alt_data_end+0xfffdf318>
   516c0:	00bfe034 	movhi	r2,65408
   516c4:	10bfffc4 	addi	r2,r2,-1
   516c8:	5021883a 	mov	r16,r10
   516cc:	1886703a 	and	r3,r3,r2
   516d0:	003eaf06 	br	51190 <__alt_data_end+0xfffdf190>
   516d4:	3825883a 	mov	r18,r7
   516d8:	003f0f06 	br	51318 <__alt_data_end+0xfffdf318>
   516dc:	1c44b03a 	or	r2,r3,r17
   516e0:	8000251e 	bne	r16,zero,51778 <__subdf3+0x66c>
   516e4:	1000661e 	bne	r2,zero,51880 <__subdf3+0x774>
   516e8:	2990b03a 	or	r8,r5,r6
   516ec:	40009626 	beq	r8,zero,51948 <__subdf3+0x83c>
   516f0:	2807883a 	mov	r3,r5
   516f4:	3023883a 	mov	r17,r6
   516f8:	3825883a 	mov	r18,r7
   516fc:	003ea406 	br	51190 <__alt_data_end+0xfffdf190>
   51700:	127ff804 	addi	r9,r2,-32
   51704:	01000804 	movi	r4,32
   51708:	2a52d83a 	srl	r9,r5,r9
   5170c:	11008c26 	beq	r2,r4,51940 <__subdf3+0x834>
   51710:	01001004 	movi	r4,64
   51714:	2085c83a 	sub	r2,r4,r2
   51718:	2884983a 	sll	r2,r5,r2
   5171c:	118cb03a 	or	r6,r2,r6
   51720:	300cc03a 	cmpne	r6,r6,zero
   51724:	4992b03a 	or	r9,r9,r6
   51728:	0005883a 	mov	r2,zero
   5172c:	003f1206 	br	51378 <__alt_data_end+0xfffdf378>
   51730:	0101ffc4 	movi	r4,2047
   51734:	493f9c1e 	bne	r9,r4,515a8 <__alt_data_end+0xfffdf5a8>
   51738:	2807883a 	mov	r3,r5
   5173c:	3023883a 	mov	r17,r6
   51740:	4821883a 	mov	r16,r9
   51744:	3825883a 	mov	r18,r7
   51748:	003e9106 	br	51190 <__alt_data_end+0xfffdf190>
   5174c:	80001f1e 	bne	r16,zero,517cc <__subdf3+0x6c0>
   51750:	1c48b03a 	or	r4,r3,r17
   51754:	20005a26 	beq	r4,zero,518c0 <__subdf3+0x7b4>
   51758:	0084303a 	nor	r2,zero,r2
   5175c:	1000561e 	bne	r2,zero,518b8 <__subdf3+0x7ac>
   51760:	89a3883a 	add	r17,r17,r6
   51764:	1945883a 	add	r2,r3,r5
   51768:	898d803a 	cmpltu	r6,r17,r6
   5176c:	3087883a 	add	r3,r6,r2
   51770:	4821883a 	mov	r16,r9
   51774:	003f0506 	br	5138c <__alt_data_end+0xfffdf38c>
   51778:	10002b1e 	bne	r2,zero,51828 <__subdf3+0x71c>
   5177c:	2984b03a 	or	r2,r5,r6
   51780:	10008026 	beq	r2,zero,51984 <__subdf3+0x878>
   51784:	2807883a 	mov	r3,r5
   51788:	3023883a 	mov	r17,r6
   5178c:	3825883a 	mov	r18,r7
   51790:	0401ffc4 	movi	r16,2047
   51794:	003e7e06 	br	51190 <__alt_data_end+0xfffdf190>
   51798:	3809883a 	mov	r4,r7
   5179c:	0011883a 	mov	r8,zero
   517a0:	0005883a 	mov	r2,zero
   517a4:	003ee306 	br	51334 <__alt_data_end+0xfffdf334>
   517a8:	1c62b03a 	or	r17,r3,r17
   517ac:	8822c03a 	cmpne	r17,r17,zero
   517b0:	0005883a 	mov	r2,zero
   517b4:	003f8906 	br	515dc <__alt_data_end+0xfffdf5dc>
   517b8:	3809883a 	mov	r4,r7
   517bc:	4821883a 	mov	r16,r9
   517c0:	0011883a 	mov	r8,zero
   517c4:	0005883a 	mov	r2,zero
   517c8:	003eda06 	br	51334 <__alt_data_end+0xfffdf334>
   517cc:	0101ffc4 	movi	r4,2047
   517d0:	49003b26 	beq	r9,r4,518c0 <__subdf3+0x7b4>
   517d4:	0085c83a 	sub	r2,zero,r2
   517d8:	18c02034 	orhi	r3,r3,128
   517dc:	01000e04 	movi	r4,56
   517e0:	20806e16 	blt	r4,r2,5199c <__subdf3+0x890>
   517e4:	010007c4 	movi	r4,31
   517e8:	20807716 	blt	r4,r2,519c8 <__subdf3+0x8bc>
   517ec:	01000804 	movi	r4,32
   517f0:	2089c83a 	sub	r4,r4,r2
   517f4:	1914983a 	sll	r10,r3,r4
   517f8:	8890d83a 	srl	r8,r17,r2
   517fc:	8908983a 	sll	r4,r17,r4
   51800:	1884d83a 	srl	r2,r3,r2
   51804:	5222b03a 	or	r17,r10,r8
   51808:	2006c03a 	cmpne	r3,r4,zero
   5180c:	88e2b03a 	or	r17,r17,r3
   51810:	89a3883a 	add	r17,r17,r6
   51814:	1145883a 	add	r2,r2,r5
   51818:	898d803a 	cmpltu	r6,r17,r6
   5181c:	3087883a 	add	r3,r6,r2
   51820:	4821883a 	mov	r16,r9
   51824:	003ed906 	br	5138c <__alt_data_end+0xfffdf38c>
   51828:	2984b03a 	or	r2,r5,r6
   5182c:	10004226 	beq	r2,zero,51938 <__subdf3+0x82c>
   51830:	1808d0fa 	srli	r4,r3,3
   51834:	8822d0fa 	srli	r17,r17,3
   51838:	1806977a 	slli	r3,r3,29
   5183c:	2080022c 	andhi	r2,r4,8
   51840:	1c62b03a 	or	r17,r3,r17
   51844:	10000826 	beq	r2,zero,51868 <__subdf3+0x75c>
   51848:	2812d0fa 	srli	r9,r5,3
   5184c:	4880022c 	andhi	r2,r9,8
   51850:	1000051e 	bne	r2,zero,51868 <__subdf3+0x75c>
   51854:	300cd0fa 	srli	r6,r6,3
   51858:	2804977a 	slli	r2,r5,29
   5185c:	4809883a 	mov	r4,r9
   51860:	3825883a 	mov	r18,r7
   51864:	11a2b03a 	or	r17,r2,r6
   51868:	8806d77a 	srli	r3,r17,29
   5186c:	200890fa 	slli	r4,r4,3
   51870:	882290fa 	slli	r17,r17,3
   51874:	0401ffc4 	movi	r16,2047
   51878:	1906b03a 	or	r3,r3,r4
   5187c:	003e4406 	br	51190 <__alt_data_end+0xfffdf190>
   51880:	2984b03a 	or	r2,r5,r6
   51884:	103e4226 	beq	r2,zero,51190 <__alt_data_end+0xfffdf190>
   51888:	8989c83a 	sub	r4,r17,r6
   5188c:	8911803a 	cmpltu	r8,r17,r4
   51890:	1945c83a 	sub	r2,r3,r5
   51894:	1205c83a 	sub	r2,r2,r8
   51898:	1200202c 	andhi	r8,r2,128
   5189c:	403e9a26 	beq	r8,zero,51308 <__alt_data_end+0xfffdf308>
   518a0:	3463c83a 	sub	r17,r6,r17
   518a4:	28c5c83a 	sub	r2,r5,r3
   518a8:	344d803a 	cmpltu	r6,r6,r17
   518ac:	1187c83a 	sub	r3,r2,r6
   518b0:	3825883a 	mov	r18,r7
   518b4:	003e3606 	br	51190 <__alt_data_end+0xfffdf190>
   518b8:	0101ffc4 	movi	r4,2047
   518bc:	493fc71e 	bne	r9,r4,517dc <__alt_data_end+0xfffdf7dc>
   518c0:	2807883a 	mov	r3,r5
   518c4:	3023883a 	mov	r17,r6
   518c8:	4821883a 	mov	r16,r9
   518cc:	003e3006 	br	51190 <__alt_data_end+0xfffdf190>
   518d0:	10003626 	beq	r2,zero,519ac <__subdf3+0x8a0>
   518d4:	2984b03a 	or	r2,r5,r6
   518d8:	10001726 	beq	r2,zero,51938 <__subdf3+0x82c>
   518dc:	1808d0fa 	srli	r4,r3,3
   518e0:	8822d0fa 	srli	r17,r17,3
   518e4:	1806977a 	slli	r3,r3,29
   518e8:	2080022c 	andhi	r2,r4,8
   518ec:	1c62b03a 	or	r17,r3,r17
   518f0:	10000726 	beq	r2,zero,51910 <__subdf3+0x804>
   518f4:	2812d0fa 	srli	r9,r5,3
   518f8:	4880022c 	andhi	r2,r9,8
   518fc:	1000041e 	bne	r2,zero,51910 <__subdf3+0x804>
   51900:	300cd0fa 	srli	r6,r6,3
   51904:	2804977a 	slli	r2,r5,29
   51908:	4809883a 	mov	r4,r9
   5190c:	11a2b03a 	or	r17,r2,r6
   51910:	8806d77a 	srli	r3,r17,29
   51914:	200890fa 	slli	r4,r4,3
   51918:	882290fa 	slli	r17,r17,3
   5191c:	3825883a 	mov	r18,r7
   51920:	1906b03a 	or	r3,r3,r4
   51924:	0401ffc4 	movi	r16,2047
   51928:	003e1906 	br	51190 <__alt_data_end+0xfffdf190>
   5192c:	000b883a 	mov	r5,zero
   51930:	0005883a 	mov	r2,zero
   51934:	003e2e06 	br	511f0 <__alt_data_end+0xfffdf1f0>
   51938:	0401ffc4 	movi	r16,2047
   5193c:	003e1406 	br	51190 <__alt_data_end+0xfffdf190>
   51940:	0005883a 	mov	r2,zero
   51944:	003f7506 	br	5171c <__alt_data_end+0xfffdf71c>
   51948:	0005883a 	mov	r2,zero
   5194c:	0009883a 	mov	r4,zero
   51950:	003e7806 	br	51334 <__alt_data_end+0xfffdf334>
   51954:	123ff804 	addi	r8,r2,-32
   51958:	01000804 	movi	r4,32
   5195c:	1a10d83a 	srl	r8,r3,r8
   51960:	11002526 	beq	r2,r4,519f8 <__subdf3+0x8ec>
   51964:	01001004 	movi	r4,64
   51968:	2085c83a 	sub	r2,r4,r2
   5196c:	1884983a 	sll	r2,r3,r2
   51970:	1444b03a 	or	r2,r2,r17
   51974:	1004c03a 	cmpne	r2,r2,zero
   51978:	40a2b03a 	or	r17,r8,r2
   5197c:	0005883a 	mov	r2,zero
   51980:	003f1606 	br	515dc <__alt_data_end+0xfffdf5dc>
   51984:	02000434 	movhi	r8,16
   51988:	0009883a 	mov	r4,zero
   5198c:	423fffc4 	addi	r8,r8,-1
   51990:	00bfffc4 	movi	r2,-1
   51994:	0401ffc4 	movi	r16,2047
   51998:	003e6606 	br	51334 <__alt_data_end+0xfffdf334>
   5199c:	1c62b03a 	or	r17,r3,r17
   519a0:	8822c03a 	cmpne	r17,r17,zero
   519a4:	0005883a 	mov	r2,zero
   519a8:	003f9906 	br	51810 <__alt_data_end+0xfffdf810>
   519ac:	2807883a 	mov	r3,r5
   519b0:	3023883a 	mov	r17,r6
   519b4:	0401ffc4 	movi	r16,2047
   519b8:	003df506 	br	51190 <__alt_data_end+0xfffdf190>
   519bc:	2807883a 	mov	r3,r5
   519c0:	3023883a 	mov	r17,r6
   519c4:	003df206 	br	51190 <__alt_data_end+0xfffdf190>
   519c8:	123ff804 	addi	r8,r2,-32
   519cc:	01000804 	movi	r4,32
   519d0:	1a10d83a 	srl	r8,r3,r8
   519d4:	11000a26 	beq	r2,r4,51a00 <__subdf3+0x8f4>
   519d8:	01001004 	movi	r4,64
   519dc:	2085c83a 	sub	r2,r4,r2
   519e0:	1884983a 	sll	r2,r3,r2
   519e4:	1444b03a 	or	r2,r2,r17
   519e8:	1004c03a 	cmpne	r2,r2,zero
   519ec:	40a2b03a 	or	r17,r8,r2
   519f0:	0005883a 	mov	r2,zero
   519f4:	003f8606 	br	51810 <__alt_data_end+0xfffdf810>
   519f8:	0005883a 	mov	r2,zero
   519fc:	003fdc06 	br	51970 <__alt_data_end+0xfffdf970>
   51a00:	0005883a 	mov	r2,zero
   51a04:	003ff706 	br	519e4 <__alt_data_end+0xfffdf9e4>

00051a08 <__fixdfsi>:
   51a08:	280cd53a 	srli	r6,r5,20
   51a0c:	00c00434 	movhi	r3,16
   51a10:	18ffffc4 	addi	r3,r3,-1
   51a14:	3181ffcc 	andi	r6,r6,2047
   51a18:	01c0ff84 	movi	r7,1022
   51a1c:	28c6703a 	and	r3,r5,r3
   51a20:	280ad7fa 	srli	r5,r5,31
   51a24:	3980120e 	bge	r7,r6,51a70 <__fixdfsi+0x68>
   51a28:	00810744 	movi	r2,1053
   51a2c:	11800c16 	blt	r2,r6,51a60 <__fixdfsi+0x58>
   51a30:	00810cc4 	movi	r2,1075
   51a34:	1185c83a 	sub	r2,r2,r6
   51a38:	01c007c4 	movi	r7,31
   51a3c:	18c00434 	orhi	r3,r3,16
   51a40:	38800d16 	blt	r7,r2,51a78 <__fixdfsi+0x70>
   51a44:	31befb44 	addi	r6,r6,-1043
   51a48:	2084d83a 	srl	r2,r4,r2
   51a4c:	1986983a 	sll	r3,r3,r6
   51a50:	1884b03a 	or	r2,r3,r2
   51a54:	28000726 	beq	r5,zero,51a74 <__fixdfsi+0x6c>
   51a58:	0085c83a 	sub	r2,zero,r2
   51a5c:	f800283a 	ret
   51a60:	00a00034 	movhi	r2,32768
   51a64:	10bfffc4 	addi	r2,r2,-1
   51a68:	2885883a 	add	r2,r5,r2
   51a6c:	f800283a 	ret
   51a70:	0005883a 	mov	r2,zero
   51a74:	f800283a 	ret
   51a78:	008104c4 	movi	r2,1043
   51a7c:	1185c83a 	sub	r2,r2,r6
   51a80:	1884d83a 	srl	r2,r3,r2
   51a84:	003ff306 	br	51a54 <__alt_data_end+0xfffdfa54>

00051a88 <__floatsidf>:
   51a88:	defffd04 	addi	sp,sp,-12
   51a8c:	dfc00215 	stw	ra,8(sp)
   51a90:	dc400115 	stw	r17,4(sp)
   51a94:	dc000015 	stw	r16,0(sp)
   51a98:	20002b26 	beq	r4,zero,51b48 <__floatsidf+0xc0>
   51a9c:	2023883a 	mov	r17,r4
   51aa0:	2020d7fa 	srli	r16,r4,31
   51aa4:	20002d16 	blt	r4,zero,51b5c <__floatsidf+0xd4>
   51aa8:	8809883a 	mov	r4,r17
   51aac:	00414080 	call	41408 <__clzsi2>
   51ab0:	01410784 	movi	r5,1054
   51ab4:	288bc83a 	sub	r5,r5,r2
   51ab8:	01010cc4 	movi	r4,1075
   51abc:	2149c83a 	sub	r4,r4,r5
   51ac0:	00c007c4 	movi	r3,31
   51ac4:	1900160e 	bge	r3,r4,51b20 <__floatsidf+0x98>
   51ac8:	00c104c4 	movi	r3,1043
   51acc:	1947c83a 	sub	r3,r3,r5
   51ad0:	88c6983a 	sll	r3,r17,r3
   51ad4:	00800434 	movhi	r2,16
   51ad8:	10bfffc4 	addi	r2,r2,-1
   51adc:	1886703a 	and	r3,r3,r2
   51ae0:	2941ffcc 	andi	r5,r5,2047
   51ae4:	800d883a 	mov	r6,r16
   51ae8:	0005883a 	mov	r2,zero
   51aec:	280a953a 	slli	r5,r5,20
   51af0:	31803fcc 	andi	r6,r6,255
   51af4:	01000434 	movhi	r4,16
   51af8:	300c97fa 	slli	r6,r6,31
   51afc:	213fffc4 	addi	r4,r4,-1
   51b00:	1906703a 	and	r3,r3,r4
   51b04:	1946b03a 	or	r3,r3,r5
   51b08:	1986b03a 	or	r3,r3,r6
   51b0c:	dfc00217 	ldw	ra,8(sp)
   51b10:	dc400117 	ldw	r17,4(sp)
   51b14:	dc000017 	ldw	r16,0(sp)
   51b18:	dec00304 	addi	sp,sp,12
   51b1c:	f800283a 	ret
   51b20:	00c002c4 	movi	r3,11
   51b24:	1887c83a 	sub	r3,r3,r2
   51b28:	88c6d83a 	srl	r3,r17,r3
   51b2c:	8904983a 	sll	r2,r17,r4
   51b30:	01000434 	movhi	r4,16
   51b34:	213fffc4 	addi	r4,r4,-1
   51b38:	2941ffcc 	andi	r5,r5,2047
   51b3c:	1906703a 	and	r3,r3,r4
   51b40:	800d883a 	mov	r6,r16
   51b44:	003fe906 	br	51aec <__alt_data_end+0xfffdfaec>
   51b48:	000d883a 	mov	r6,zero
   51b4c:	000b883a 	mov	r5,zero
   51b50:	0007883a 	mov	r3,zero
   51b54:	0005883a 	mov	r2,zero
   51b58:	003fe406 	br	51aec <__alt_data_end+0xfffdfaec>
   51b5c:	0123c83a 	sub	r17,zero,r4
   51b60:	003fd106 	br	51aa8 <__alt_data_end+0xfffdfaa8>

00051b64 <__floatunsidf>:
   51b64:	defffe04 	addi	sp,sp,-8
   51b68:	dc000015 	stw	r16,0(sp)
   51b6c:	dfc00115 	stw	ra,4(sp)
   51b70:	2021883a 	mov	r16,r4
   51b74:	20002226 	beq	r4,zero,51c00 <__floatunsidf+0x9c>
   51b78:	00414080 	call	41408 <__clzsi2>
   51b7c:	01010784 	movi	r4,1054
   51b80:	2089c83a 	sub	r4,r4,r2
   51b84:	01810cc4 	movi	r6,1075
   51b88:	310dc83a 	sub	r6,r6,r4
   51b8c:	00c007c4 	movi	r3,31
   51b90:	1980120e 	bge	r3,r6,51bdc <__floatunsidf+0x78>
   51b94:	00c104c4 	movi	r3,1043
   51b98:	1907c83a 	sub	r3,r3,r4
   51b9c:	80ca983a 	sll	r5,r16,r3
   51ba0:	00800434 	movhi	r2,16
   51ba4:	10bfffc4 	addi	r2,r2,-1
   51ba8:	2101ffcc 	andi	r4,r4,2047
   51bac:	0021883a 	mov	r16,zero
   51bb0:	288a703a 	and	r5,r5,r2
   51bb4:	2008953a 	slli	r4,r4,20
   51bb8:	00c00434 	movhi	r3,16
   51bbc:	18ffffc4 	addi	r3,r3,-1
   51bc0:	28c6703a 	and	r3,r5,r3
   51bc4:	8005883a 	mov	r2,r16
   51bc8:	1906b03a 	or	r3,r3,r4
   51bcc:	dfc00117 	ldw	ra,4(sp)
   51bd0:	dc000017 	ldw	r16,0(sp)
   51bd4:	dec00204 	addi	sp,sp,8
   51bd8:	f800283a 	ret
   51bdc:	00c002c4 	movi	r3,11
   51be0:	188bc83a 	sub	r5,r3,r2
   51be4:	814ad83a 	srl	r5,r16,r5
   51be8:	00c00434 	movhi	r3,16
   51bec:	18ffffc4 	addi	r3,r3,-1
   51bf0:	81a0983a 	sll	r16,r16,r6
   51bf4:	2101ffcc 	andi	r4,r4,2047
   51bf8:	28ca703a 	and	r5,r5,r3
   51bfc:	003fed06 	br	51bb4 <__alt_data_end+0xfffdfbb4>
   51c00:	0009883a 	mov	r4,zero
   51c04:	000b883a 	mov	r5,zero
   51c08:	003fea06 	br	51bb4 <__alt_data_end+0xfffdfbb4>

00051c0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51c0c:	defffe04 	addi	sp,sp,-8
   51c10:	dfc00115 	stw	ra,4(sp)
   51c14:	df000015 	stw	fp,0(sp)
   51c18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51c1c:	d0a01117 	ldw	r2,-32700(gp)
   51c20:	10000326 	beq	r2,zero,51c30 <alt_get_errno+0x24>
   51c24:	d0a01117 	ldw	r2,-32700(gp)
   51c28:	103ee83a 	callr	r2
   51c2c:	00000106 	br	51c34 <alt_get_errno+0x28>
   51c30:	d0a70304 	addi	r2,gp,-25588
}
   51c34:	e037883a 	mov	sp,fp
   51c38:	dfc00117 	ldw	ra,4(sp)
   51c3c:	df000017 	ldw	fp,0(sp)
   51c40:	dec00204 	addi	sp,sp,8
   51c44:	f800283a 	ret

00051c48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   51c48:	defffb04 	addi	sp,sp,-20
   51c4c:	dfc00415 	stw	ra,16(sp)
   51c50:	df000315 	stw	fp,12(sp)
   51c54:	df000304 	addi	fp,sp,12
   51c58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   51c5c:	e0bfff17 	ldw	r2,-4(fp)
   51c60:	10000816 	blt	r2,zero,51c84 <close+0x3c>
   51c64:	01400304 	movi	r5,12
   51c68:	e13fff17 	ldw	r4,-4(fp)
   51c6c:	004146c0 	call	4146c <__mulsi3>
   51c70:	1007883a 	mov	r3,r2
   51c74:	00800174 	movhi	r2,5
   51c78:	109cee04 	addi	r2,r2,29624
   51c7c:	1885883a 	add	r2,r3,r2
   51c80:	00000106 	br	51c88 <close+0x40>
   51c84:	0005883a 	mov	r2,zero
   51c88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   51c8c:	e0bffd17 	ldw	r2,-12(fp)
   51c90:	10001926 	beq	r2,zero,51cf8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   51c94:	e0bffd17 	ldw	r2,-12(fp)
   51c98:	10800017 	ldw	r2,0(r2)
   51c9c:	10800417 	ldw	r2,16(r2)
   51ca0:	10000626 	beq	r2,zero,51cbc <close+0x74>
   51ca4:	e0bffd17 	ldw	r2,-12(fp)
   51ca8:	10800017 	ldw	r2,0(r2)
   51cac:	10800417 	ldw	r2,16(r2)
   51cb0:	e13ffd17 	ldw	r4,-12(fp)
   51cb4:	103ee83a 	callr	r2
   51cb8:	00000106 	br	51cc0 <close+0x78>
   51cbc:	0005883a 	mov	r2,zero
   51cc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   51cc4:	e13fff17 	ldw	r4,-4(fp)
   51cc8:	00523300 	call	52330 <alt_release_fd>
    if (rval < 0)
   51ccc:	e0bffe17 	ldw	r2,-8(fp)
   51cd0:	1000070e 	bge	r2,zero,51cf0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   51cd4:	0051c0c0 	call	51c0c <alt_get_errno>
   51cd8:	1007883a 	mov	r3,r2
   51cdc:	e0bffe17 	ldw	r2,-8(fp)
   51ce0:	0085c83a 	sub	r2,zero,r2
   51ce4:	18800015 	stw	r2,0(r3)
      return -1;
   51ce8:	00bfffc4 	movi	r2,-1
   51cec:	00000706 	br	51d0c <close+0xc4>
    }
    return 0;
   51cf0:	0005883a 	mov	r2,zero
   51cf4:	00000506 	br	51d0c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51cf8:	0051c0c0 	call	51c0c <alt_get_errno>
   51cfc:	1007883a 	mov	r3,r2
   51d00:	00801444 	movi	r2,81
   51d04:	18800015 	stw	r2,0(r3)
    return -1;
   51d08:	00bfffc4 	movi	r2,-1
  }
}
   51d0c:	e037883a 	mov	sp,fp
   51d10:	dfc00117 	ldw	ra,4(sp)
   51d14:	df000017 	ldw	fp,0(sp)
   51d18:	dec00204 	addi	sp,sp,8
   51d1c:	f800283a 	ret

00051d20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   51d20:	defffc04 	addi	sp,sp,-16
   51d24:	df000315 	stw	fp,12(sp)
   51d28:	df000304 	addi	fp,sp,12
   51d2c:	e13ffd15 	stw	r4,-12(fp)
   51d30:	e17ffe15 	stw	r5,-8(fp)
   51d34:	e1bfff15 	stw	r6,-4(fp)
  return len;
   51d38:	e0bfff17 	ldw	r2,-4(fp)
}
   51d3c:	e037883a 	mov	sp,fp
   51d40:	df000017 	ldw	fp,0(sp)
   51d44:	dec00104 	addi	sp,sp,4
   51d48:	f800283a 	ret

00051d4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51d4c:	defffe04 	addi	sp,sp,-8
   51d50:	dfc00115 	stw	ra,4(sp)
   51d54:	df000015 	stw	fp,0(sp)
   51d58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51d5c:	d0a01117 	ldw	r2,-32700(gp)
   51d60:	10000326 	beq	r2,zero,51d70 <alt_get_errno+0x24>
   51d64:	d0a01117 	ldw	r2,-32700(gp)
   51d68:	103ee83a 	callr	r2
   51d6c:	00000106 	br	51d74 <alt_get_errno+0x28>
   51d70:	d0a70304 	addi	r2,gp,-25588
}
   51d74:	e037883a 	mov	sp,fp
   51d78:	dfc00117 	ldw	ra,4(sp)
   51d7c:	df000017 	ldw	fp,0(sp)
   51d80:	dec00204 	addi	sp,sp,8
   51d84:	f800283a 	ret

00051d88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   51d88:	defffb04 	addi	sp,sp,-20
   51d8c:	dfc00415 	stw	ra,16(sp)
   51d90:	df000315 	stw	fp,12(sp)
   51d94:	df000304 	addi	fp,sp,12
   51d98:	e13ffe15 	stw	r4,-8(fp)
   51d9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51da0:	e0bffe17 	ldw	r2,-8(fp)
   51da4:	10000816 	blt	r2,zero,51dc8 <fstat+0x40>
   51da8:	01400304 	movi	r5,12
   51dac:	e13ffe17 	ldw	r4,-8(fp)
   51db0:	004146c0 	call	4146c <__mulsi3>
   51db4:	1007883a 	mov	r3,r2
   51db8:	00800174 	movhi	r2,5
   51dbc:	109cee04 	addi	r2,r2,29624
   51dc0:	1885883a 	add	r2,r3,r2
   51dc4:	00000106 	br	51dcc <fstat+0x44>
   51dc8:	0005883a 	mov	r2,zero
   51dcc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   51dd0:	e0bffd17 	ldw	r2,-12(fp)
   51dd4:	10001026 	beq	r2,zero,51e18 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   51dd8:	e0bffd17 	ldw	r2,-12(fp)
   51ddc:	10800017 	ldw	r2,0(r2)
   51de0:	10800817 	ldw	r2,32(r2)
   51de4:	10000726 	beq	r2,zero,51e04 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   51de8:	e0bffd17 	ldw	r2,-12(fp)
   51dec:	10800017 	ldw	r2,0(r2)
   51df0:	10800817 	ldw	r2,32(r2)
   51df4:	e17fff17 	ldw	r5,-4(fp)
   51df8:	e13ffd17 	ldw	r4,-12(fp)
   51dfc:	103ee83a 	callr	r2
   51e00:	00000a06 	br	51e2c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   51e04:	e0bfff17 	ldw	r2,-4(fp)
   51e08:	00c80004 	movi	r3,8192
   51e0c:	10c00115 	stw	r3,4(r2)
      return 0;
   51e10:	0005883a 	mov	r2,zero
   51e14:	00000506 	br	51e2c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51e18:	0051d4c0 	call	51d4c <alt_get_errno>
   51e1c:	1007883a 	mov	r3,r2
   51e20:	00801444 	movi	r2,81
   51e24:	18800015 	stw	r2,0(r3)
    return -1;
   51e28:	00bfffc4 	movi	r2,-1
  }
}
   51e2c:	e037883a 	mov	sp,fp
   51e30:	dfc00117 	ldw	ra,4(sp)
   51e34:	df000017 	ldw	fp,0(sp)
   51e38:	dec00204 	addi	sp,sp,8
   51e3c:	f800283a 	ret

00051e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51e40:	defffe04 	addi	sp,sp,-8
   51e44:	dfc00115 	stw	ra,4(sp)
   51e48:	df000015 	stw	fp,0(sp)
   51e4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51e50:	d0a01117 	ldw	r2,-32700(gp)
   51e54:	10000326 	beq	r2,zero,51e64 <alt_get_errno+0x24>
   51e58:	d0a01117 	ldw	r2,-32700(gp)
   51e5c:	103ee83a 	callr	r2
   51e60:	00000106 	br	51e68 <alt_get_errno+0x28>
   51e64:	d0a70304 	addi	r2,gp,-25588
}
   51e68:	e037883a 	mov	sp,fp
   51e6c:	dfc00117 	ldw	ra,4(sp)
   51e70:	df000017 	ldw	fp,0(sp)
   51e74:	dec00204 	addi	sp,sp,8
   51e78:	f800283a 	ret

00051e7c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   51e7c:	deffed04 	addi	sp,sp,-76
   51e80:	dfc01215 	stw	ra,72(sp)
   51e84:	df001115 	stw	fp,68(sp)
   51e88:	df001104 	addi	fp,sp,68
   51e8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51e90:	e0bfff17 	ldw	r2,-4(fp)
   51e94:	10000816 	blt	r2,zero,51eb8 <isatty+0x3c>
   51e98:	01400304 	movi	r5,12
   51e9c:	e13fff17 	ldw	r4,-4(fp)
   51ea0:	004146c0 	call	4146c <__mulsi3>
   51ea4:	1007883a 	mov	r3,r2
   51ea8:	00800174 	movhi	r2,5
   51eac:	109cee04 	addi	r2,r2,29624
   51eb0:	1885883a 	add	r2,r3,r2
   51eb4:	00000106 	br	51ebc <isatty+0x40>
   51eb8:	0005883a 	mov	r2,zero
   51ebc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   51ec0:	e0bfef17 	ldw	r2,-68(fp)
   51ec4:	10000e26 	beq	r2,zero,51f00 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   51ec8:	e0bfef17 	ldw	r2,-68(fp)
   51ecc:	10800017 	ldw	r2,0(r2)
   51ed0:	10800817 	ldw	r2,32(r2)
   51ed4:	1000021e 	bne	r2,zero,51ee0 <isatty+0x64>
    {
      return 1;
   51ed8:	00800044 	movi	r2,1
   51edc:	00000d06 	br	51f14 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   51ee0:	e0bff004 	addi	r2,fp,-64
   51ee4:	100b883a 	mov	r5,r2
   51ee8:	e13fff17 	ldw	r4,-4(fp)
   51eec:	0051d880 	call	51d88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   51ef0:	e0bff117 	ldw	r2,-60(fp)
   51ef4:	10880020 	cmpeqi	r2,r2,8192
   51ef8:	10803fcc 	andi	r2,r2,255
   51efc:	00000506 	br	51f14 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   51f00:	0051e400 	call	51e40 <alt_get_errno>
   51f04:	1007883a 	mov	r3,r2
   51f08:	00801444 	movi	r2,81
   51f0c:	18800015 	stw	r2,0(r3)
    return 0;
   51f10:	0005883a 	mov	r2,zero
  }
}
   51f14:	e037883a 	mov	sp,fp
   51f18:	dfc00117 	ldw	ra,4(sp)
   51f1c:	df000017 	ldw	fp,0(sp)
   51f20:	dec00204 	addi	sp,sp,8
   51f24:	f800283a 	ret

00051f28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   51f28:	defffc04 	addi	sp,sp,-16
   51f2c:	df000315 	stw	fp,12(sp)
   51f30:	df000304 	addi	fp,sp,12
   51f34:	e13ffd15 	stw	r4,-12(fp)
   51f38:	e17ffe15 	stw	r5,-8(fp)
   51f3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   51f40:	e0fffe17 	ldw	r3,-8(fp)
   51f44:	e0bffd17 	ldw	r2,-12(fp)
   51f48:	18800c26 	beq	r3,r2,51f7c <alt_load_section+0x54>
  {
    while( to != end )
   51f4c:	00000806 	br	51f70 <alt_load_section+0x48>
    {
      *to++ = *from++;
   51f50:	e0bffe17 	ldw	r2,-8(fp)
   51f54:	10c00104 	addi	r3,r2,4
   51f58:	e0fffe15 	stw	r3,-8(fp)
   51f5c:	e0fffd17 	ldw	r3,-12(fp)
   51f60:	19000104 	addi	r4,r3,4
   51f64:	e13ffd15 	stw	r4,-12(fp)
   51f68:	18c00017 	ldw	r3,0(r3)
   51f6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   51f70:	e0fffe17 	ldw	r3,-8(fp)
   51f74:	e0bfff17 	ldw	r2,-4(fp)
   51f78:	18bff51e 	bne	r3,r2,51f50 <__alt_data_end+0xfffdff50>
    {
      *to++ = *from++;
    }
  }
}
   51f7c:	0001883a 	nop
   51f80:	e037883a 	mov	sp,fp
   51f84:	df000017 	ldw	fp,0(sp)
   51f88:	dec00104 	addi	sp,sp,4
   51f8c:	f800283a 	ret

00051f90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   51f90:	defffe04 	addi	sp,sp,-8
   51f94:	dfc00115 	stw	ra,4(sp)
   51f98:	df000015 	stw	fp,0(sp)
   51f9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   51fa0:	018001b4 	movhi	r6,6
   51fa4:	31a19704 	addi	r6,r6,-31140
   51fa8:	01400174 	movhi	r5,5
   51fac:	295ab804 	addi	r5,r5,27360
   51fb0:	010001b4 	movhi	r4,6
   51fb4:	21219704 	addi	r4,r4,-31140
   51fb8:	0051f280 	call	51f28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   51fbc:	01800134 	movhi	r6,4
   51fc0:	31808c04 	addi	r6,r6,560
   51fc4:	01400134 	movhi	r5,4
   51fc8:	29400804 	addi	r5,r5,32
   51fcc:	01000134 	movhi	r4,4
   51fd0:	21000804 	addi	r4,r4,32
   51fd4:	0051f280 	call	51f28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   51fd8:	01800174 	movhi	r6,5
   51fdc:	319ab804 	addi	r6,r6,27360
   51fe0:	01400174 	movhi	r5,5
   51fe4:	2959cc04 	addi	r5,r5,26416
   51fe8:	01000174 	movhi	r4,5
   51fec:	2119cc04 	addi	r4,r4,26416
   51ff0:	0051f280 	call	51f28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   51ff4:	00554100 	call	55410 <alt_dcache_flush_all>
  alt_icache_flush_all();
   51ff8:	00556600 	call	55660 <alt_icache_flush_all>
}
   51ffc:	0001883a 	nop
   52000:	e037883a 	mov	sp,fp
   52004:	dfc00117 	ldw	ra,4(sp)
   52008:	df000017 	ldw	fp,0(sp)
   5200c:	dec00204 	addi	sp,sp,8
   52010:	f800283a 	ret

00052014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52014:	defffe04 	addi	sp,sp,-8
   52018:	dfc00115 	stw	ra,4(sp)
   5201c:	df000015 	stw	fp,0(sp)
   52020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52024:	d0a01117 	ldw	r2,-32700(gp)
   52028:	10000326 	beq	r2,zero,52038 <alt_get_errno+0x24>
   5202c:	d0a01117 	ldw	r2,-32700(gp)
   52030:	103ee83a 	callr	r2
   52034:	00000106 	br	5203c <alt_get_errno+0x28>
   52038:	d0a70304 	addi	r2,gp,-25588
}
   5203c:	e037883a 	mov	sp,fp
   52040:	dfc00117 	ldw	ra,4(sp)
   52044:	df000017 	ldw	fp,0(sp)
   52048:	dec00204 	addi	sp,sp,8
   5204c:	f800283a 	ret

00052050 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   52050:	defff904 	addi	sp,sp,-28
   52054:	dfc00615 	stw	ra,24(sp)
   52058:	df000515 	stw	fp,20(sp)
   5205c:	df000504 	addi	fp,sp,20
   52060:	e13ffd15 	stw	r4,-12(fp)
   52064:	e17ffe15 	stw	r5,-8(fp)
   52068:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   5206c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52070:	e0bffd17 	ldw	r2,-12(fp)
   52074:	10000816 	blt	r2,zero,52098 <lseek+0x48>
   52078:	01400304 	movi	r5,12
   5207c:	e13ffd17 	ldw	r4,-12(fp)
   52080:	004146c0 	call	4146c <__mulsi3>
   52084:	1007883a 	mov	r3,r2
   52088:	00800174 	movhi	r2,5
   5208c:	109cee04 	addi	r2,r2,29624
   52090:	1885883a 	add	r2,r3,r2
   52094:	00000106 	br	5209c <lseek+0x4c>
   52098:	0005883a 	mov	r2,zero
   5209c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   520a0:	e0bffc17 	ldw	r2,-16(fp)
   520a4:	10001026 	beq	r2,zero,520e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   520a8:	e0bffc17 	ldw	r2,-16(fp)
   520ac:	10800017 	ldw	r2,0(r2)
   520b0:	10800717 	ldw	r2,28(r2)
   520b4:	10000926 	beq	r2,zero,520dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   520b8:	e0bffc17 	ldw	r2,-16(fp)
   520bc:	10800017 	ldw	r2,0(r2)
   520c0:	10800717 	ldw	r2,28(r2)
   520c4:	e1bfff17 	ldw	r6,-4(fp)
   520c8:	e17ffe17 	ldw	r5,-8(fp)
   520cc:	e13ffc17 	ldw	r4,-16(fp)
   520d0:	103ee83a 	callr	r2
   520d4:	e0bffb15 	stw	r2,-20(fp)
   520d8:	00000506 	br	520f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   520dc:	00bfde84 	movi	r2,-134
   520e0:	e0bffb15 	stw	r2,-20(fp)
   520e4:	00000206 	br	520f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   520e8:	00bfebc4 	movi	r2,-81
   520ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   520f0:	e0bffb17 	ldw	r2,-20(fp)
   520f4:	1000070e 	bge	r2,zero,52114 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   520f8:	00520140 	call	52014 <alt_get_errno>
   520fc:	1007883a 	mov	r3,r2
   52100:	e0bffb17 	ldw	r2,-20(fp)
   52104:	0085c83a 	sub	r2,zero,r2
   52108:	18800015 	stw	r2,0(r3)
    rc = -1;
   5210c:	00bfffc4 	movi	r2,-1
   52110:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   52114:	e0bffb17 	ldw	r2,-20(fp)
}
   52118:	e037883a 	mov	sp,fp
   5211c:	dfc00117 	ldw	ra,4(sp)
   52120:	df000017 	ldw	fp,0(sp)
   52124:	dec00204 	addi	sp,sp,8
   52128:	f800283a 	ret

0005212c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   5212c:	defffd04 	addi	sp,sp,-12
   52130:	dfc00215 	stw	ra,8(sp)
   52134:	df000115 	stw	fp,4(sp)
   52138:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   5213c:	0009883a 	mov	r4,zero
   52140:	00525d40 	call	525d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   52144:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   52148:	005260c0 	call	5260c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   5214c:	01800174 	movhi	r6,5
   52150:	319aa404 	addi	r6,r6,27280
   52154:	01400174 	movhi	r5,5
   52158:	295aa404 	addi	r5,r5,27280
   5215c:	01000174 	movhi	r4,5
   52160:	211aa404 	addi	r4,r4,27280
   52164:	0055a040 	call	55a04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   52168:	00555100 	call	55510 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   5216c:	01000174 	movhi	r4,5
   52170:	21155c04 	addi	r4,r4,21872
   52174:	005639c0 	call	5639c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   52178:	d0a70417 	ldw	r2,-25584(gp)
   5217c:	d0e70517 	ldw	r3,-25580(gp)
   52180:	d1270617 	ldw	r4,-25576(gp)
   52184:	200d883a 	mov	r6,r4
   52188:	180b883a 	mov	r5,r3
   5218c:	1009883a 	mov	r4,r2
   52190:	00402d00 	call	402d0 <main>
   52194:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   52198:	01000044 	movi	r4,1
   5219c:	0051c480 	call	51c48 <close>
  exit (result);
   521a0:	e13fff17 	ldw	r4,-4(fp)
   521a4:	00563b00 	call	563b0 <exit>

000521a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   521a8:	defffe04 	addi	sp,sp,-8
   521ac:	df000115 	stw	fp,4(sp)
   521b0:	df000104 	addi	fp,sp,4
   521b4:	e13fff15 	stw	r4,-4(fp)
}
   521b8:	0001883a 	nop
   521bc:	e037883a 	mov	sp,fp
   521c0:	df000017 	ldw	fp,0(sp)
   521c4:	dec00104 	addi	sp,sp,4
   521c8:	f800283a 	ret

000521cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   521cc:	defffe04 	addi	sp,sp,-8
   521d0:	df000115 	stw	fp,4(sp)
   521d4:	df000104 	addi	fp,sp,4
   521d8:	e13fff15 	stw	r4,-4(fp)
}
   521dc:	0001883a 	nop
   521e0:	e037883a 	mov	sp,fp
   521e4:	df000017 	ldw	fp,0(sp)
   521e8:	dec00104 	addi	sp,sp,4
   521ec:	f800283a 	ret

000521f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   521f0:	defffe04 	addi	sp,sp,-8
   521f4:	dfc00115 	stw	ra,4(sp)
   521f8:	df000015 	stw	fp,0(sp)
   521fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52200:	d0a01117 	ldw	r2,-32700(gp)
   52204:	10000326 	beq	r2,zero,52214 <alt_get_errno+0x24>
   52208:	d0a01117 	ldw	r2,-32700(gp)
   5220c:	103ee83a 	callr	r2
   52210:	00000106 	br	52218 <alt_get_errno+0x28>
   52214:	d0a70304 	addi	r2,gp,-25588
}
   52218:	e037883a 	mov	sp,fp
   5221c:	dfc00117 	ldw	ra,4(sp)
   52220:	df000017 	ldw	fp,0(sp)
   52224:	dec00204 	addi	sp,sp,8
   52228:	f800283a 	ret

0005222c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   5222c:	defff904 	addi	sp,sp,-28
   52230:	dfc00615 	stw	ra,24(sp)
   52234:	df000515 	stw	fp,20(sp)
   52238:	df000504 	addi	fp,sp,20
   5223c:	e13ffd15 	stw	r4,-12(fp)
   52240:	e17ffe15 	stw	r5,-8(fp)
   52244:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52248:	e0bffd17 	ldw	r2,-12(fp)
   5224c:	10000816 	blt	r2,zero,52270 <read+0x44>
   52250:	01400304 	movi	r5,12
   52254:	e13ffd17 	ldw	r4,-12(fp)
   52258:	004146c0 	call	4146c <__mulsi3>
   5225c:	1007883a 	mov	r3,r2
   52260:	00800174 	movhi	r2,5
   52264:	109cee04 	addi	r2,r2,29624
   52268:	1885883a 	add	r2,r3,r2
   5226c:	00000106 	br	52274 <read+0x48>
   52270:	0005883a 	mov	r2,zero
   52274:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   52278:	e0bffb17 	ldw	r2,-20(fp)
   5227c:	10002226 	beq	r2,zero,52308 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52280:	e0bffb17 	ldw	r2,-20(fp)
   52284:	10800217 	ldw	r2,8(r2)
   52288:	108000cc 	andi	r2,r2,3
   5228c:	10800060 	cmpeqi	r2,r2,1
   52290:	1000181e 	bne	r2,zero,522f4 <read+0xc8>
        (fd->dev->read))
   52294:	e0bffb17 	ldw	r2,-20(fp)
   52298:	10800017 	ldw	r2,0(r2)
   5229c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   522a0:	10001426 	beq	r2,zero,522f4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   522a4:	e0bffb17 	ldw	r2,-20(fp)
   522a8:	10800017 	ldw	r2,0(r2)
   522ac:	10800517 	ldw	r2,20(r2)
   522b0:	e0ffff17 	ldw	r3,-4(fp)
   522b4:	180d883a 	mov	r6,r3
   522b8:	e17ffe17 	ldw	r5,-8(fp)
   522bc:	e13ffb17 	ldw	r4,-20(fp)
   522c0:	103ee83a 	callr	r2
   522c4:	e0bffc15 	stw	r2,-16(fp)
   522c8:	e0bffc17 	ldw	r2,-16(fp)
   522cc:	1000070e 	bge	r2,zero,522ec <read+0xc0>
        {
          ALT_ERRNO = -rval;
   522d0:	00521f00 	call	521f0 <alt_get_errno>
   522d4:	1007883a 	mov	r3,r2
   522d8:	e0bffc17 	ldw	r2,-16(fp)
   522dc:	0085c83a 	sub	r2,zero,r2
   522e0:	18800015 	stw	r2,0(r3)
          return -1;
   522e4:	00bfffc4 	movi	r2,-1
   522e8:	00000c06 	br	5231c <read+0xf0>
        }
        return rval;
   522ec:	e0bffc17 	ldw	r2,-16(fp)
   522f0:	00000a06 	br	5231c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   522f4:	00521f00 	call	521f0 <alt_get_errno>
   522f8:	1007883a 	mov	r3,r2
   522fc:	00800344 	movi	r2,13
   52300:	18800015 	stw	r2,0(r3)
   52304:	00000406 	br	52318 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   52308:	00521f00 	call	521f0 <alt_get_errno>
   5230c:	1007883a 	mov	r3,r2
   52310:	00801444 	movi	r2,81
   52314:	18800015 	stw	r2,0(r3)
  }
  return -1;
   52318:	00bfffc4 	movi	r2,-1
}
   5231c:	e037883a 	mov	sp,fp
   52320:	dfc00117 	ldw	ra,4(sp)
   52324:	df000017 	ldw	fp,0(sp)
   52328:	dec00204 	addi	sp,sp,8
   5232c:	f800283a 	ret

00052330 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   52330:	defffc04 	addi	sp,sp,-16
   52334:	dfc00315 	stw	ra,12(sp)
   52338:	df000215 	stw	fp,8(sp)
   5233c:	dc000115 	stw	r16,4(sp)
   52340:	df000204 	addi	fp,sp,8
   52344:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   52348:	e0bffe17 	ldw	r2,-8(fp)
   5234c:	108000d0 	cmplti	r2,r2,3
   52350:	1000111e 	bne	r2,zero,52398 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   52354:	04000174 	movhi	r16,5
   52358:	841cee04 	addi	r16,r16,29624
   5235c:	e0bffe17 	ldw	r2,-8(fp)
   52360:	01400304 	movi	r5,12
   52364:	1009883a 	mov	r4,r2
   52368:	004146c0 	call	4146c <__mulsi3>
   5236c:	8085883a 	add	r2,r16,r2
   52370:	10800204 	addi	r2,r2,8
   52374:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   52378:	04000174 	movhi	r16,5
   5237c:	841cee04 	addi	r16,r16,29624
   52380:	e0bffe17 	ldw	r2,-8(fp)
   52384:	01400304 	movi	r5,12
   52388:	1009883a 	mov	r4,r2
   5238c:	004146c0 	call	4146c <__mulsi3>
   52390:	8085883a 	add	r2,r16,r2
   52394:	10000015 	stw	zero,0(r2)
  }
}
   52398:	0001883a 	nop
   5239c:	e6ffff04 	addi	sp,fp,-4
   523a0:	dfc00217 	ldw	ra,8(sp)
   523a4:	df000117 	ldw	fp,4(sp)
   523a8:	dc000017 	ldw	r16,0(sp)
   523ac:	dec00304 	addi	sp,sp,12
   523b0:	f800283a 	ret

000523b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   523b4:	defff904 	addi	sp,sp,-28
   523b8:	df000615 	stw	fp,24(sp)
   523bc:	df000604 	addi	fp,sp,24
   523c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   523c4:	0005303a 	rdctl	r2,status
   523c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   523cc:	e0fffe17 	ldw	r3,-8(fp)
   523d0:	00bfff84 	movi	r2,-2
   523d4:	1884703a 	and	r2,r3,r2
   523d8:	1001703a 	wrctl	status,r2
  
  return context;
   523dc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   523e0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   523e4:	d0a01217 	ldw	r2,-32696(gp)
   523e8:	10c000c4 	addi	r3,r2,3
   523ec:	00bfff04 	movi	r2,-4
   523f0:	1884703a 	and	r2,r3,r2
   523f4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   523f8:	d0e01217 	ldw	r3,-32696(gp)
   523fc:	e0bfff17 	ldw	r2,-4(fp)
   52400:	1887883a 	add	r3,r3,r2
   52404:	008001f4 	movhi	r2,7
   52408:	10880004 	addi	r2,r2,8192
   5240c:	10c0062e 	bgeu	r2,r3,52428 <sbrk+0x74>
   52410:	e0bffb17 	ldw	r2,-20(fp)
   52414:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52418:	e0bffa17 	ldw	r2,-24(fp)
   5241c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   52420:	00bfffc4 	movi	r2,-1
   52424:	00000b06 	br	52454 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   52428:	d0a01217 	ldw	r2,-32696(gp)
   5242c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   52430:	d0e01217 	ldw	r3,-32696(gp)
   52434:	e0bfff17 	ldw	r2,-4(fp)
   52438:	1885883a 	add	r2,r3,r2
   5243c:	d0a01215 	stw	r2,-32696(gp)
   52440:	e0bffb17 	ldw	r2,-20(fp)
   52444:	e0bffc15 	stw	r2,-16(fp)
   52448:	e0bffc17 	ldw	r2,-16(fp)
   5244c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   52450:	e0bffd17 	ldw	r2,-12(fp)
} 
   52454:	e037883a 	mov	sp,fp
   52458:	df000017 	ldw	fp,0(sp)
   5245c:	dec00104 	addi	sp,sp,4
   52460:	f800283a 	ret

00052464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52464:	defffe04 	addi	sp,sp,-8
   52468:	dfc00115 	stw	ra,4(sp)
   5246c:	df000015 	stw	fp,0(sp)
   52470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52474:	d0a01117 	ldw	r2,-32700(gp)
   52478:	10000326 	beq	r2,zero,52488 <alt_get_errno+0x24>
   5247c:	d0a01117 	ldw	r2,-32700(gp)
   52480:	103ee83a 	callr	r2
   52484:	00000106 	br	5248c <alt_get_errno+0x28>
   52488:	d0a70304 	addi	r2,gp,-25588
}
   5248c:	e037883a 	mov	sp,fp
   52490:	dfc00117 	ldw	ra,4(sp)
   52494:	df000017 	ldw	fp,0(sp)
   52498:	dec00204 	addi	sp,sp,8
   5249c:	f800283a 	ret

000524a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   524a0:	defff904 	addi	sp,sp,-28
   524a4:	dfc00615 	stw	ra,24(sp)
   524a8:	df000515 	stw	fp,20(sp)
   524ac:	df000504 	addi	fp,sp,20
   524b0:	e13ffd15 	stw	r4,-12(fp)
   524b4:	e17ffe15 	stw	r5,-8(fp)
   524b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   524bc:	e0bffd17 	ldw	r2,-12(fp)
   524c0:	10000816 	blt	r2,zero,524e4 <write+0x44>
   524c4:	01400304 	movi	r5,12
   524c8:	e13ffd17 	ldw	r4,-12(fp)
   524cc:	004146c0 	call	4146c <__mulsi3>
   524d0:	1007883a 	mov	r3,r2
   524d4:	00800174 	movhi	r2,5
   524d8:	109cee04 	addi	r2,r2,29624
   524dc:	1885883a 	add	r2,r3,r2
   524e0:	00000106 	br	524e8 <write+0x48>
   524e4:	0005883a 	mov	r2,zero
   524e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   524ec:	e0bffb17 	ldw	r2,-20(fp)
   524f0:	10002126 	beq	r2,zero,52578 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   524f4:	e0bffb17 	ldw	r2,-20(fp)
   524f8:	10800217 	ldw	r2,8(r2)
   524fc:	108000cc 	andi	r2,r2,3
   52500:	10001826 	beq	r2,zero,52564 <write+0xc4>
   52504:	e0bffb17 	ldw	r2,-20(fp)
   52508:	10800017 	ldw	r2,0(r2)
   5250c:	10800617 	ldw	r2,24(r2)
   52510:	10001426 	beq	r2,zero,52564 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   52514:	e0bffb17 	ldw	r2,-20(fp)
   52518:	10800017 	ldw	r2,0(r2)
   5251c:	10800617 	ldw	r2,24(r2)
   52520:	e0ffff17 	ldw	r3,-4(fp)
   52524:	180d883a 	mov	r6,r3
   52528:	e17ffe17 	ldw	r5,-8(fp)
   5252c:	e13ffb17 	ldw	r4,-20(fp)
   52530:	103ee83a 	callr	r2
   52534:	e0bffc15 	stw	r2,-16(fp)
   52538:	e0bffc17 	ldw	r2,-16(fp)
   5253c:	1000070e 	bge	r2,zero,5255c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   52540:	00524640 	call	52464 <alt_get_errno>
   52544:	1007883a 	mov	r3,r2
   52548:	e0bffc17 	ldw	r2,-16(fp)
   5254c:	0085c83a 	sub	r2,zero,r2
   52550:	18800015 	stw	r2,0(r3)
        return -1;
   52554:	00bfffc4 	movi	r2,-1
   52558:	00000c06 	br	5258c <write+0xec>
      }
      return rval;
   5255c:	e0bffc17 	ldw	r2,-16(fp)
   52560:	00000a06 	br	5258c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   52564:	00524640 	call	52464 <alt_get_errno>
   52568:	1007883a 	mov	r3,r2
   5256c:	00800344 	movi	r2,13
   52570:	18800015 	stw	r2,0(r3)
   52574:	00000406 	br	52588 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   52578:	00524640 	call	52464 <alt_get_errno>
   5257c:	1007883a 	mov	r3,r2
   52580:	00801444 	movi	r2,81
   52584:	18800015 	stw	r2,0(r3)
  }
  return -1;
   52588:	00bfffc4 	movi	r2,-1
}
   5258c:	e037883a 	mov	sp,fp
   52590:	dfc00117 	ldw	ra,4(sp)
   52594:	df000017 	ldw	fp,0(sp)
   52598:	dec00204 	addi	sp,sp,8
   5259c:	f800283a 	ret

000525a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   525a0:	defffd04 	addi	sp,sp,-12
   525a4:	dfc00215 	stw	ra,8(sp)
   525a8:	df000115 	stw	fp,4(sp)
   525ac:	df000104 	addi	fp,sp,4
   525b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   525b4:	d1600e04 	addi	r5,gp,-32712
   525b8:	e13fff17 	ldw	r4,-4(fp)
   525bc:	005546c0 	call	5546c <alt_dev_llist_insert>
}
   525c0:	e037883a 	mov	sp,fp
   525c4:	dfc00117 	ldw	ra,4(sp)
   525c8:	df000017 	ldw	fp,0(sp)
   525cc:	dec00204 	addi	sp,sp,8
   525d0:	f800283a 	ret

000525d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   525d4:	defffd04 	addi	sp,sp,-12
   525d8:	dfc00215 	stw	ra,8(sp)
   525dc:	df000115 	stw	fp,4(sp)
   525e0:	df000104 	addi	fp,sp,4
   525e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
   525e8:	00561100 	call	56110 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   525ec:	00800044 	movi	r2,1
   525f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   525f4:	0001883a 	nop
   525f8:	e037883a 	mov	sp,fp
   525fc:	dfc00117 	ldw	ra,4(sp)
   52600:	df000017 	ldw	fp,0(sp)
   52604:	dec00204 	addi	sp,sp,8
   52608:	f800283a 	ret

0005260c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   5260c:	defffe04 	addi	sp,sp,-8
   52610:	dfc00115 	stw	ra,4(sp)
   52614:	df000015 	stw	fp,0(sp)
   52618:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   5261c:	01c0fa04 	movi	r7,1000
   52620:	01800084 	movi	r6,2
   52624:	000b883a 	mov	r5,zero
   52628:	01000234 	movhi	r4,8
   5262c:	21042004 	addi	r4,r4,4224
   52630:	0054d800 	call	54d80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C, I2C);
   52634:	01000174 	movhi	r4,5
   52638:	211d4e04 	addi	r4,r4,30008
   5263c:	00528d80 	call	528d8 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
   52640:	000d883a 	mov	r6,zero
   52644:	000b883a 	mov	r5,zero
   52648:	01000174 	movhi	r4,5
   5264c:	211d6604 	addi	r4,r4,30104
   52650:	00544040 	call	54404 <altera_avalon_jtag_uart_init>
   52654:	01000174 	movhi	r4,5
   52658:	211d5c04 	addi	r4,r4,30064
   5265c:	00525a00 	call	525a0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   52660:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( RS232, RS232);
   52664:	010001b4 	movhi	r4,6
   52668:	21217404 	addi	r4,r4,-31280
   5266c:	00525a00 	call	525a0 <alt_dev_reg>
}
   52670:	0001883a 	nop
   52674:	e037883a 	mov	sp,fp
   52678:	dfc00117 	ldw	ra,4(sp)
   5267c:	df000017 	ldw	fp,0(sp)
   52680:	dec00204 	addi	sp,sp,8
   52684:	f800283a 	ret

00052688 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   52688:	defff904 	addi	sp,sp,-28
   5268c:	dfc00615 	stw	ra,24(sp)
   52690:	df000515 	stw	fp,20(sp)
   52694:	df000504 	addi	fp,sp,20
   52698:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   5269c:	008000b4 	movhi	r2,2
   526a0:	10a1a804 	addi	r2,r2,-31072
   526a4:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   526a8:	e0bfff17 	ldw	r2,-4(fp)
   526ac:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   526b0:	e0bffc17 	ldw	r2,-16(fp)
   526b4:	10800717 	ldw	r2,28(r2)
   526b8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   526bc:	e0bffd17 	ldw	r2,-12(fp)
   526c0:	10800217 	ldw	r2,8(r2)
   526c4:	10800098 	cmpnei	r2,r2,2
   526c8:	1000251e 	bne	r2,zero,52760 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   526cc:	e0bffd17 	ldw	r2,-12(fp)
   526d0:	10c00017 	ldw	r3,0(r2)
   526d4:	e0bffd17 	ldw	r2,-12(fp)
   526d8:	10800117 	ldw	r2,4(r2)
   526dc:	e13ffe04 	addi	r4,fp,-8
   526e0:	200f883a 	mov	r7,r4
   526e4:	100d883a 	mov	r6,r2
   526e8:	180b883a 	mov	r5,r3
   526ec:	e13ffc17 	ldw	r4,-16(fp)
   526f0:	0052e380 	call	52e38 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   526f4:	e0bffd17 	ldw	r2,-12(fp)
   526f8:	10c00117 	ldw	r3,4(r2)
   526fc:	e0bffe17 	ldw	r2,-8(fp)
   52700:	1887c83a 	sub	r3,r3,r2
   52704:	e0bffd17 	ldw	r2,-12(fp)
   52708:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   5270c:	e0bffd17 	ldw	r2,-12(fp)
   52710:	10c00017 	ldw	r3,0(r2)
   52714:	e0bffe17 	ldw	r2,-8(fp)
   52718:	1887883a 	add	r3,r3,r2
   5271c:	e0bffd17 	ldw	r2,-12(fp)
   52720:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   52724:	e0bffd17 	ldw	r2,-12(fp)
   52728:	10800117 	ldw	r2,4(r2)
   5272c:	10000c26 	beq	r2,zero,52760 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52730:	01400704 	movi	r5,28
   52734:	e13ffc17 	ldw	r4,-16(fp)
   52738:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   5273c:	01400084 	movi	r5,2
   52740:	e13ffc17 	ldw	r4,-16(fp)
   52744:	00540940 	call	54094 <alt_avalon_i2c_int_enable>
   52748:	00000e06 	br	52784 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   5274c:	e0bffb17 	ldw	r2,-20(fp)
   52750:	10bfffc4 	addi	r2,r2,-1
   52754:	e0bffb15 	stw	r2,-20(fp)
   52758:	e0bffb17 	ldw	r2,-20(fp)
   5275c:	10000426 	beq	r2,zero,52770 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   52760:	e13ffc17 	ldw	r4,-16(fp)
   52764:	0052df40 	call	52df4 <alt_avalon_i2c_is_busy>
   52768:	103ff81e 	bne	r2,zero,5274c <__alt_data_end+0xfffe074c>
   5276c:	00000106 	br	52774 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   52770:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   52774:	e13ffc17 	ldw	r4,-16(fp)
   52778:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   5277c:	e0bffd17 	ldw	r2,-12(fp)
   52780:	10000215 	stw	zero,8(r2)
}
   52784:	e037883a 	mov	sp,fp
   52788:	dfc00117 	ldw	ra,4(sp)
   5278c:	df000017 	ldw	fp,0(sp)
   52790:	dec00204 	addi	sp,sp,8
   52794:	f800283a 	ret

00052798 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   52798:	defffc04 	addi	sp,sp,-16
   5279c:	dfc00315 	stw	ra,12(sp)
   527a0:	df000215 	stw	fp,8(sp)
   527a4:	df000204 	addi	fp,sp,8
   527a8:	e13ffe15 	stw	r4,-8(fp)
   527ac:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   527b0:	e0bfff17 	ldw	r2,-4(fp)
   527b4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   527b8:	e1ffff17 	ldw	r7,-4(fp)
   527bc:	000d883a 	mov	r6,zero
   527c0:	01400174 	movhi	r5,5
   527c4:	2949a204 	addi	r5,r5,9864
   527c8:	e13ffe17 	ldw	r4,-8(fp)
   527cc:	00528840 	call	52884 <alt_avalon_i2c_register_callback>
}
   527d0:	0001883a 	nop
   527d4:	e037883a 	mov	sp,fp
   527d8:	dfc00117 	ldw	ra,4(sp)
   527dc:	df000017 	ldw	fp,0(sp)
   527e0:	dec00204 	addi	sp,sp,8
   527e4:	f800283a 	ret

000527e8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   527e8:	defff904 	addi	sp,sp,-28
   527ec:	dfc00615 	stw	ra,24(sp)
   527f0:	df000515 	stw	fp,20(sp)
   527f4:	df000504 	addi	fp,sp,20
   527f8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   527fc:	e0bfff17 	ldw	r2,-4(fp)
   52800:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   52804:	014007c4 	movi	r5,31
   52808:	e13ffb17 	ldw	r4,-20(fp)
   5280c:	005402c0 	call	5402c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52810:	01400704 	movi	r5,28
   52814:	e13ffb17 	ldw	r4,-20(fp)
   52818:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   5281c:	e0bffb17 	ldw	r2,-20(fp)
   52820:	10800617 	ldw	r2,24(r2)
   52824:	10001126 	beq	r2,zero,5286c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52828:	0005303a 	rdctl	r2,status
   5282c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52830:	e0fffd17 	ldw	r3,-12(fp)
   52834:	00bfff84 	movi	r2,-2
   52838:	1884703a 	and	r2,r3,r2
   5283c:	1001703a 	wrctl	status,r2
  
  return context;
   52840:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   52844:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   52848:	e0bffb17 	ldw	r2,-20(fp)
   5284c:	10800617 	ldw	r2,24(r2)
   52850:	e13ffb17 	ldw	r4,-20(fp)
   52854:	103ee83a 	callr	r2
   52858:	e0bffc17 	ldw	r2,-16(fp)
   5285c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52860:	e0bffe17 	ldw	r2,-8(fp)
   52864:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   52868:	0001883a 	nop
   5286c:	0001883a 	nop
}
   52870:	e037883a 	mov	sp,fp
   52874:	dfc00117 	ldw	ra,4(sp)
   52878:	df000017 	ldw	fp,0(sp)
   5287c:	dec00204 	addi	sp,sp,8
   52880:	f800283a 	ret

00052884 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   52884:	defffb04 	addi	sp,sp,-20
   52888:	df000415 	stw	fp,16(sp)
   5288c:	df000404 	addi	fp,sp,16
   52890:	e13ffc15 	stw	r4,-16(fp)
   52894:	e17ffd15 	stw	r5,-12(fp)
   52898:	e1bffe15 	stw	r6,-8(fp)
   5289c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   528a0:	e0bffc17 	ldw	r2,-16(fp)
   528a4:	e0fffd17 	ldw	r3,-12(fp)
   528a8:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   528ac:	e0bffc17 	ldw	r2,-16(fp)
   528b0:	e0ffff17 	ldw	r3,-4(fp)
   528b4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   528b8:	e0bffc17 	ldw	r2,-16(fp)
   528bc:	e0fffe17 	ldw	r3,-8(fp)
   528c0:	10c00815 	stw	r3,32(r2)

    return ;
   528c4:	0001883a 	nop
}
   528c8:	e037883a 	mov	sp,fp
   528cc:	df000017 	ldw	fp,0(sp)
   528d0:	dec00104 	addi	sp,sp,4
   528d4:	f800283a 	ret

000528d8 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   528d8:	defff704 	addi	sp,sp,-36
   528dc:	dfc00815 	stw	ra,32(sp)
   528e0:	df000715 	stw	fp,28(sp)
   528e4:	df000704 	addi	fp,sp,28
   528e8:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   528ec:	e13fff17 	ldw	r4,-4(fp)
   528f0:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   528f4:	014007c4 	movi	r5,31
   528f8:	e13fff17 	ldw	r4,-4(fp)
   528fc:	005402c0 	call	5402c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52900:	01400704 	movi	r5,28
   52904:	e13fff17 	ldw	r4,-4(fp)
   52908:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   5290c:	014000c4 	movi	r5,3
   52910:	e13fff17 	ldw	r4,-4(fp)
   52914:	00542380 	call	54238 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   52918:	014000c4 	movi	r5,3
   5291c:	e13fff17 	ldw	r4,-4(fp)
   52920:	00541880 	call	54188 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   52924:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   52928:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   5292c:	e0bffb04 	addi	r2,fp,-20
   52930:	018000b4 	movhi	r6,2
   52934:	31a1a804 	addi	r6,r6,-31072
   52938:	100b883a 	mov	r5,r2
   5293c:	e13fff17 	ldw	r4,-4(fp)
   52940:	0052cf80 	call	52cf8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   52944:	e0bffb04 	addi	r2,fp,-20
   52948:	100b883a 	mov	r5,r2
   5294c:	e13fff17 	ldw	r4,-4(fp)
   52950:	0052b980 	call	52b98 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   52954:	d1601304 	addi	r5,gp,-32692
   52958:	e13fff17 	ldw	r4,-4(fp)
   5295c:	005546c0 	call	5546c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   52960:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   52964:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   52968:	e0bffa17 	ldw	r2,-24(fp)
   5296c:	10000c1e 	bne	r2,zero,529a0 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   52970:	e0bfff17 	ldw	r2,-4(fp)
   52974:	10c00417 	ldw	r3,16(r2)
   52978:	e0bfff17 	ldw	r2,-4(fp)
   5297c:	10800517 	ldw	r2,20(r2)
   52980:	d8000015 	stw	zero,0(sp)
   52984:	e1ffff17 	ldw	r7,-4(fp)
   52988:	01800174 	movhi	r6,5
   5298c:	3189fa04 	addi	r6,r6,10216
   52990:	100b883a 	mov	r5,r2
   52994:	1809883a 	mov	r4,r3
   52998:	00556800 	call	55680 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   5299c:	00000406 	br	529b0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   529a0:	01000174 	movhi	r4,5
   529a4:	211ab004 	addi	r4,r4,27328
   529a8:	0055d040 	call	55d04 <alt_printf>
    }

    return;
   529ac:	0001883a 	nop

}
   529b0:	e037883a 	mov	sp,fp
   529b4:	dfc00117 	ldw	ra,4(sp)
   529b8:	df000017 	ldw	fp,0(sp)
   529bc:	dec00204 	addi	sp,sp,8
   529c0:	f800283a 	ret

000529c4 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   529c4:	defffc04 	addi	sp,sp,-16
   529c8:	dfc00315 	stw	ra,12(sp)
   529cc:	df000215 	stw	fp,8(sp)
   529d0:	df000204 	addi	fp,sp,8
   529d4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   529d8:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   529dc:	d1601304 	addi	r5,gp,-32692
   529e0:	e13fff17 	ldw	r4,-4(fp)
   529e4:	00555d00 	call	555d0 <alt_find_dev>
   529e8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   529ec:	e0bffe17 	ldw	r2,-8(fp)
}
   529f0:	e037883a 	mov	sp,fp
   529f4:	dfc00117 	ldw	ra,4(sp)
   529f8:	df000017 	ldw	fp,0(sp)
   529fc:	dec00204 	addi	sp,sp,8
   52a00:	f800283a 	ret

00052a04 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52a04:	defffc04 	addi	sp,sp,-16
   52a08:	df000315 	stw	fp,12(sp)
   52a0c:	df000304 	addi	fp,sp,12
   52a10:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   52a14:	e0bfff17 	ldw	r2,-4(fp)
   52a18:	10800717 	ldw	r2,28(r2)
   52a1c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   52a20:	e0bfff17 	ldw	r2,-4(fp)
   52a24:	10800317 	ldw	r2,12(r2)
   52a28:	10800204 	addi	r2,r2,8
   52a2c:	10800037 	ldwio	r2,0(r2)
   52a30:	1080004c 	andi	r2,r2,1
   52a34:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   52a38:	e0bffe17 	ldw	r2,-8(fp)
   52a3c:	10000226 	beq	r2,zero,52a48 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   52a40:	00bffe44 	movi	r2,-7
   52a44:	00001106 	br	52a8c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   52a48:	e0bfff17 	ldw	r2,-4(fp)
   52a4c:	10c00617 	ldw	r3,24(r2)
   52a50:	00800174 	movhi	r2,5
   52a54:	1089a204 	addi	r2,r2,9864
   52a58:	1880021e 	bne	r3,r2,52a64 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   52a5c:	e0bffd17 	ldw	r2,-12(fp)
   52a60:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   52a64:	e0bfff17 	ldw	r2,-4(fp)
   52a68:	10800317 	ldw	r2,12(r2)
   52a6c:	10800204 	addi	r2,r2,8
   52a70:	e0ffff17 	ldw	r3,-4(fp)
   52a74:	18c00317 	ldw	r3,12(r3)
   52a78:	18c00204 	addi	r3,r3,8
   52a7c:	18c00037 	ldwio	r3,0(r3)
   52a80:	18c00054 	ori	r3,r3,1
   52a84:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   52a88:	0005883a 	mov	r2,zero
}
   52a8c:	e037883a 	mov	sp,fp
   52a90:	df000017 	ldw	fp,0(sp)
   52a94:	dec00104 	addi	sp,sp,4
   52a98:	f800283a 	ret

00052a9c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52a9c:	defffe04 	addi	sp,sp,-8
   52aa0:	df000115 	stw	fp,4(sp)
   52aa4:	df000104 	addi	fp,sp,4
   52aa8:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   52aac:	e0bfff17 	ldw	r2,-4(fp)
   52ab0:	10800317 	ldw	r2,12(r2)
   52ab4:	10800204 	addi	r2,r2,8
   52ab8:	e0ffff17 	ldw	r3,-4(fp)
   52abc:	18c00317 	ldw	r3,12(r3)
   52ac0:	18c00204 	addi	r3,r3,8
   52ac4:	19000037 	ldwio	r4,0(r3)
   52ac8:	00ffff84 	movi	r3,-2
   52acc:	20c6703a 	and	r3,r4,r3
   52ad0:	10c00035 	stwio	r3,0(r2)

}
   52ad4:	0001883a 	nop
   52ad8:	e037883a 	mov	sp,fp
   52adc:	df000017 	ldw	fp,0(sp)
   52ae0:	dec00104 	addi	sp,sp,4
   52ae4:	f800283a 	ret

00052ae8 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   52ae8:	defffd04 	addi	sp,sp,-12
   52aec:	df000215 	stw	fp,8(sp)
   52af0:	df000204 	addi	fp,sp,8
   52af4:	e13ffe15 	stw	r4,-8(fp)
   52af8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   52afc:	e0bffe17 	ldw	r2,-8(fp)
   52b00:	10c00d17 	ldw	r3,52(r2)
   52b04:	e0bfff17 	ldw	r2,-4(fp)
   52b08:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   52b0c:	e0bffe17 	ldw	r2,-8(fp)
   52b10:	10800317 	ldw	r2,12(r2)
   52b14:	10800204 	addi	r2,r2,8
   52b18:	10800037 	ldwio	r2,0(r2)
   52b1c:	1080008c 	andi	r2,r2,2
   52b20:	1005d07a 	srai	r2,r2,1
   52b24:	1007883a 	mov	r3,r2
   52b28:	e0bfff17 	ldw	r2,-4(fp)
   52b2c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   52b30:	e0bffe17 	ldw	r2,-8(fp)
   52b34:	10800317 	ldw	r2,12(r2)
   52b38:	10800904 	addi	r2,r2,36
   52b3c:	10800037 	ldwio	r2,0(r2)
   52b40:	1007883a 	mov	r3,r2
   52b44:	e0bfff17 	ldw	r2,-4(fp)
   52b48:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   52b4c:	e0bffe17 	ldw	r2,-8(fp)
   52b50:	10800317 	ldw	r2,12(r2)
   52b54:	10800804 	addi	r2,r2,32
   52b58:	10800037 	ldwio	r2,0(r2)
   52b5c:	1007883a 	mov	r3,r2
   52b60:	e0bfff17 	ldw	r2,-4(fp)
   52b64:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   52b68:	e0bffe17 	ldw	r2,-8(fp)
   52b6c:	10800317 	ldw	r2,12(r2)
   52b70:	10800a04 	addi	r2,r2,40
   52b74:	10800037 	ldwio	r2,0(r2)
   52b78:	1007883a 	mov	r3,r2
   52b7c:	e0bfff17 	ldw	r2,-4(fp)
   52b80:	10c0030d 	sth	r3,12(r2)
}
   52b84:	0001883a 	nop
   52b88:	e037883a 	mov	sp,fp
   52b8c:	df000017 	ldw	fp,0(sp)
   52b90:	dec00104 	addi	sp,sp,4
   52b94:	f800283a 	ret

00052b98 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   52b98:	defffd04 	addi	sp,sp,-12
   52b9c:	df000215 	stw	fp,8(sp)
   52ba0:	df000204 	addi	fp,sp,8
   52ba4:	e13ffe15 	stw	r4,-8(fp)
   52ba8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   52bac:	e0bfff17 	ldw	r2,-4(fp)
   52bb0:	10c00017 	ldw	r3,0(r2)
   52bb4:	e0bffe17 	ldw	r2,-8(fp)
   52bb8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   52bbc:	e0bffe17 	ldw	r2,-8(fp)
   52bc0:	10800317 	ldw	r2,12(r2)
   52bc4:	10c00204 	addi	r3,r2,8
   52bc8:	e0bffe17 	ldw	r2,-8(fp)
   52bcc:	10800317 	ldw	r2,12(r2)
   52bd0:	10800204 	addi	r2,r2,8
   52bd4:	10800037 	ldwio	r2,0(r2)
   52bd8:	1009883a 	mov	r4,r2
   52bdc:	00bfff44 	movi	r2,-3
   52be0:	2088703a 	and	r4,r4,r2
   52be4:	e0bfff17 	ldw	r2,-4(fp)
   52be8:	10800117 	ldw	r2,4(r2)
   52bec:	1085883a 	add	r2,r2,r2
   52bf0:	1080008c 	andi	r2,r2,2
   52bf4:	2084b03a 	or	r2,r4,r2
   52bf8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   52bfc:	e0bffe17 	ldw	r2,-8(fp)
   52c00:	10800317 	ldw	r2,12(r2)
   52c04:	10800904 	addi	r2,r2,36
   52c08:	e0ffff17 	ldw	r3,-4(fp)
   52c0c:	18c0020b 	ldhu	r3,8(r3)
   52c10:	18ffffcc 	andi	r3,r3,65535
   52c14:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   52c18:	e0bffe17 	ldw	r2,-8(fp)
   52c1c:	10800317 	ldw	r2,12(r2)
   52c20:	10800804 	addi	r2,r2,32
   52c24:	e0ffff17 	ldw	r3,-4(fp)
   52c28:	18c0028b 	ldhu	r3,10(r3)
   52c2c:	18ffffcc 	andi	r3,r3,65535
   52c30:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   52c34:	e0bffe17 	ldw	r2,-8(fp)
   52c38:	10800317 	ldw	r2,12(r2)
   52c3c:	10800a04 	addi	r2,r2,40
   52c40:	e0ffff17 	ldw	r3,-4(fp)
   52c44:	18c0030b 	ldhu	r3,12(r3)
   52c48:	18ffffcc 	andi	r3,r3,65535
   52c4c:	10c00035 	stwio	r3,0(r2)
}
   52c50:	0001883a 	nop
   52c54:	e037883a 	mov	sp,fp
   52c58:	df000017 	ldw	fp,0(sp)
   52c5c:	dec00104 	addi	sp,sp,4
   52c60:	f800283a 	ret

00052c64 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   52c64:	defffb04 	addi	sp,sp,-20
   52c68:	dfc00415 	stw	ra,16(sp)
   52c6c:	df000315 	stw	fp,12(sp)
   52c70:	df000304 	addi	fp,sp,12
   52c74:	e13ffd15 	stw	r4,-12(fp)
   52c78:	e17ffe15 	stw	r5,-8(fp)
   52c7c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   52c80:	e0bffe17 	ldw	r2,-8(fp)
   52c84:	1080028b 	ldhu	r2,10(r2)
   52c88:	10bfffcc 	andi	r2,r2,65535
   52c8c:	10000426 	beq	r2,zero,52ca0 <alt_avalon_i2c_master_config_speed_get+0x3c>
   52c90:	e0bffe17 	ldw	r2,-8(fp)
   52c94:	1080020b 	ldhu	r2,8(r2)
   52c98:	10bfffcc 	andi	r2,r2,65535
   52c9c:	1000021e 	bne	r2,zero,52ca8 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   52ca0:	00bfff44 	movi	r2,-3
   52ca4:	00000f06 	br	52ce4 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   52ca8:	e0bffd17 	ldw	r2,-12(fp)
   52cac:	11000c17 	ldw	r4,48(r2)
   52cb0:	e0bffe17 	ldw	r2,-8(fp)
   52cb4:	1080028b 	ldhu	r2,10(r2)
   52cb8:	10ffffcc 	andi	r3,r2,65535
   52cbc:	e0bffe17 	ldw	r2,-8(fp)
   52cc0:	1080020b 	ldhu	r2,8(r2)
   52cc4:	10bfffcc 	andi	r2,r2,65535
   52cc8:	1885883a 	add	r2,r3,r2
   52ccc:	100b883a 	mov	r5,r2
   52cd0:	00408380 	call	40838 <__udivsi3>
   52cd4:	1007883a 	mov	r3,r2
   52cd8:	e0bfff17 	ldw	r2,-4(fp)
   52cdc:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   52ce0:	0005883a 	mov	r2,zero
}
   52ce4:	e037883a 	mov	sp,fp
   52ce8:	dfc00117 	ldw	ra,4(sp)
   52cec:	df000017 	ldw	fp,0(sp)
   52cf0:	dec00204 	addi	sp,sp,8
   52cf4:	f800283a 	ret

00052cf8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   52cf8:	defff904 	addi	sp,sp,-28
   52cfc:	dfc00615 	stw	ra,24(sp)
   52d00:	df000515 	stw	fp,20(sp)
   52d04:	df000504 	addi	fp,sp,20
   52d08:	e13ffd15 	stw	r4,-12(fp)
   52d0c:	e17ffe15 	stw	r5,-8(fp)
   52d10:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   52d14:	e0ffff17 	ldw	r3,-4(fp)
   52d18:	008001b4 	movhi	r2,6
   52d1c:	1086a004 	addi	r2,r2,6784
   52d20:	10c00436 	bltu	r2,r3,52d34 <alt_avalon_i2c_master_config_speed_set+0x3c>
   52d24:	e0bfff17 	ldw	r2,-4(fp)
   52d28:	10000226 	beq	r2,zero,52d34 <alt_avalon_i2c_master_config_speed_set+0x3c>
   52d2c:	e0bfff17 	ldw	r2,-4(fp)
   52d30:	1000021e 	bne	r2,zero,52d3c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   52d34:	00bfff04 	movi	r2,-4
   52d38:	00002906 	br	52de0 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   52d3c:	e0bffd17 	ldw	r2,-12(fp)
   52d40:	10c00c17 	ldw	r3,48(r2)
   52d44:	e0bfff17 	ldw	r2,-4(fp)
   52d48:	1085883a 	add	r2,r2,r2
   52d4c:	100b883a 	mov	r5,r2
   52d50:	1809883a 	mov	r4,r3
   52d54:	00408380 	call	40838 <__udivsi3>
   52d58:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   52d5c:	e0bffb17 	ldw	r2,-20(fp)
   52d60:	10800f04 	addi	r2,r2,60
   52d64:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   52d68:	e0bffb17 	ldw	r2,-20(fp)
   52d6c:	10bff104 	addi	r2,r2,-60
   52d70:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   52d74:	e0ffff17 	ldw	r3,-4(fp)
   52d78:	008000b4 	movhi	r2,2
   52d7c:	10a1a804 	addi	r2,r2,-31072
   52d80:	10c0042e 	bgeu	r2,r3,52d94 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   52d84:	e0bffe17 	ldw	r2,-8(fp)
   52d88:	00c00044 	movi	r3,1
   52d8c:	10c00115 	stw	r3,4(r2)
   52d90:	00000206 	br	52d9c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   52d94:	e0bffe17 	ldw	r2,-8(fp)
   52d98:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   52d9c:	e0bffb17 	ldw	r2,-20(fp)
   52da0:	1007883a 	mov	r3,r2
   52da4:	e0bffe17 	ldw	r2,-8(fp)
   52da8:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   52dac:	e0bffc17 	ldw	r2,-16(fp)
   52db0:	1007883a 	mov	r3,r2
   52db4:	e0bffe17 	ldw	r2,-8(fp)
   52db8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   52dbc:	e0bffb17 	ldw	r2,-20(fp)
   52dc0:	1007883a 	mov	r3,r2
   52dc4:	e0bffb17 	ldw	r2,-20(fp)
   52dc8:	1004d07a 	srli	r2,r2,1
   52dcc:	1885c83a 	sub	r2,r3,r2
   52dd0:	1007883a 	mov	r3,r2
   52dd4:	e0bffe17 	ldw	r2,-8(fp)
   52dd8:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   52ddc:	0005883a 	mov	r2,zero

}
   52de0:	e037883a 	mov	sp,fp
   52de4:	dfc00117 	ldw	ra,4(sp)
   52de8:	df000017 	ldw	fp,0(sp)
   52dec:	dec00204 	addi	sp,sp,8
   52df0:	f800283a 	ret

00052df4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52df4:	defffe04 	addi	sp,sp,-8
   52df8:	df000115 	stw	fp,4(sp)
   52dfc:	df000104 	addi	fp,sp,4
   52e00:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   52e04:	e0bfff17 	ldw	r2,-4(fp)
   52e08:	10800317 	ldw	r2,12(r2)
   52e0c:	10800504 	addi	r2,r2,20
   52e10:	10800037 	ldwio	r2,0(r2)
   52e14:	1080004c 	andi	r2,r2,1
   52e18:	10000226 	beq	r2,zero,52e24 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   52e1c:	00800044 	movi	r2,1
   52e20:	00000106 	br	52e28 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   52e24:	0005883a 	mov	r2,zero
}
   52e28:	e037883a 	mov	sp,fp
   52e2c:	df000017 	ldw	fp,0(sp)
   52e30:	dec00104 	addi	sp,sp,4
   52e34:	f800283a 	ret

00052e38 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   52e38:	defffb04 	addi	sp,sp,-20
   52e3c:	df000415 	stw	fp,16(sp)
   52e40:	df000404 	addi	fp,sp,16
   52e44:	e13ffc15 	stw	r4,-16(fp)
   52e48:	e17ffd15 	stw	r5,-12(fp)
   52e4c:	e1bffe15 	stw	r6,-8(fp)
   52e50:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   52e54:	e0bfff17 	ldw	r2,-4(fp)
   52e58:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   52e5c:	00001406 	br	52eb0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   52e60:	e0bfff17 	ldw	r2,-4(fp)
   52e64:	10800017 	ldw	r2,0(r2)
   52e68:	e0fffd17 	ldw	r3,-12(fp)
   52e6c:	1885883a 	add	r2,r3,r2
   52e70:	e0fffc17 	ldw	r3,-16(fp)
   52e74:	18c00317 	ldw	r3,12(r3)
   52e78:	18c00104 	addi	r3,r3,4
   52e7c:	18c00037 	ldwio	r3,0(r3)
   52e80:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   52e84:	e0bfff17 	ldw	r2,-4(fp)
   52e88:	10800017 	ldw	r2,0(r2)
   52e8c:	10c00044 	addi	r3,r2,1
   52e90:	e0bfff17 	ldw	r2,-4(fp)
   52e94:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   52e98:	e0bfff17 	ldw	r2,-4(fp)
   52e9c:	10c00017 	ldw	r3,0(r2)
   52ea0:	e0bffe17 	ldw	r2,-8(fp)
   52ea4:	1880021e 	bne	r3,r2,52eb0 <alt_avalon_i2c_rx_read_available+0x78>
   52ea8:	e0bffe17 	ldw	r2,-8(fp)
   52eac:	1000061e 	bne	r2,zero,52ec8 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   52eb0:	e0bffc17 	ldw	r2,-16(fp)
   52eb4:	10800317 	ldw	r2,12(r2)
   52eb8:	10800704 	addi	r2,r2,28
   52ebc:	10800037 	ldwio	r2,0(r2)
   52ec0:	103fe71e 	bne	r2,zero,52e60 <__alt_data_end+0xfffe0e60>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   52ec4:	00000106 	br	52ecc <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   52ec8:	0001883a 	nop
    }
}
   52ecc:	0001883a 	nop
   52ed0:	e037883a 	mov	sp,fp
   52ed4:	df000017 	ldw	fp,0(sp)
   52ed8:	dec00104 	addi	sp,sp,4
   52edc:	f800283a 	ret

00052ee0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   52ee0:	defffa04 	addi	sp,sp,-24
   52ee4:	dfc00515 	stw	ra,20(sp)
   52ee8:	df000415 	stw	fp,16(sp)
   52eec:	df000404 	addi	fp,sp,16
   52ef0:	e13ffe15 	stw	r4,-8(fp)
   52ef4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   52ef8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   52efc:	008000b4 	movhi	r2,2
   52f00:	10a1a804 	addi	r2,r2,-31072
   52f04:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   52f08:	00000d06 	br	52f40 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   52f0c:	e0bffd17 	ldw	r2,-12(fp)
   52f10:	108002a8 	cmpgeui	r2,r2,10
   52f14:	1000021e 	bne	r2,zero,52f20 <alt_avalon_i2c_rx_read+0x40>
   52f18:	0109c404 	movi	r4,10000
   52f1c:	00552b80 	call	552b8 <alt_busy_sleep>
      if (--timeout == 0)
   52f20:	e0bffd17 	ldw	r2,-12(fp)
   52f24:	10bfffc4 	addi	r2,r2,-1
   52f28:	e0bffd15 	stw	r2,-12(fp)
   52f2c:	e0bffd17 	ldw	r2,-12(fp)
   52f30:	1000031e 	bne	r2,zero,52f40 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   52f34:	00bfff84 	movi	r2,-2
   52f38:	e0bffc15 	stw	r2,-16(fp)
        break;
   52f3c:	00000506 	br	52f54 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   52f40:	e0bffe17 	ldw	r2,-8(fp)
   52f44:	10800317 	ldw	r2,12(r2)
   52f48:	10800704 	addi	r2,r2,28
   52f4c:	10800037 	ldwio	r2,0(r2)
   52f50:	103fee26 	beq	r2,zero,52f0c <__alt_data_end+0xfffe0f0c>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   52f54:	e0bffe17 	ldw	r2,-8(fp)
   52f58:	10800317 	ldw	r2,12(r2)
   52f5c:	10800104 	addi	r2,r2,4
   52f60:	10800037 	ldwio	r2,0(r2)
   52f64:	1007883a 	mov	r3,r2
   52f68:	e0bfff17 	ldw	r2,-4(fp)
   52f6c:	10c00005 	stb	r3,0(r2)
        
    return status;
   52f70:	e0bffc17 	ldw	r2,-16(fp)
}
   52f74:	e037883a 	mov	sp,fp
   52f78:	dfc00117 	ldw	ra,4(sp)
   52f7c:	df000017 	ldw	fp,0(sp)
   52f80:	dec00204 	addi	sp,sp,8
   52f84:	f800283a 	ret

00052f88 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   52f88:	defff804 	addi	sp,sp,-32
   52f8c:	dfc00715 	stw	ra,28(sp)
   52f90:	df000615 	stw	fp,24(sp)
   52f94:	df000604 	addi	fp,sp,24
   52f98:	e13ffc15 	stw	r4,-16(fp)
   52f9c:	2809883a 	mov	r4,r5
   52fa0:	3007883a 	mov	r3,r6
   52fa4:	3805883a 	mov	r2,r7
   52fa8:	e13ffd05 	stb	r4,-12(fp)
   52fac:	e0fffe05 	stb	r3,-8(fp)
   52fb0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   52fb4:	0089c404 	movi	r2,10000
   52fb8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52fbc:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   52fc0:	00000c06 	br	52ff4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   52fc4:	e0bffa17 	ldw	r2,-24(fp)
   52fc8:	108002a8 	cmpgeui	r2,r2,10
   52fcc:	1000021e 	bne	r2,zero,52fd8 <alt_avalon_i2c_cmd_write+0x50>
   52fd0:	0109c404 	movi	r4,10000
   52fd4:	00552b80 	call	552b8 <alt_busy_sleep>
      if (--timeout == 0)
   52fd8:	e0bffa17 	ldw	r2,-24(fp)
   52fdc:	10bfffc4 	addi	r2,r2,-1
   52fe0:	e0bffa15 	stw	r2,-24(fp)
   52fe4:	e0bffa17 	ldw	r2,-24(fp)
   52fe8:	1000021e 	bne	r2,zero,52ff4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   52fec:	00bfff84 	movi	r2,-2
   52ff0:	00001906 	br	53058 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   52ff4:	e0bffc17 	ldw	r2,-16(fp)
   52ff8:	10800317 	ldw	r2,12(r2)
   52ffc:	10800404 	addi	r2,r2,16
   53000:	10800037 	ldwio	r2,0(r2)
   53004:	1080004c 	andi	r2,r2,1
   53008:	103fee26 	beq	r2,zero,52fc4 <__alt_data_end+0xfffe0fc4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   5300c:	e0bffc17 	ldw	r2,-16(fp)
   53010:	10800317 	ldw	r2,12(r2)
   53014:	e13ffd03 	ldbu	r4,-12(fp)
   53018:	e0fffe03 	ldbu	r3,-8(fp)
   5301c:	1806927a 	slli	r3,r3,9
   53020:	20c8b03a 	or	r4,r4,r3
   53024:	e0ffff03 	ldbu	r3,-4(fp)
   53028:	1806923a 	slli	r3,r3,8
   5302c:	20c6b03a 	or	r3,r4,r3
   53030:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   53034:	e0bffb04 	addi	r2,fp,-20
   53038:	100b883a 	mov	r5,r2
   5303c:	e13ffc17 	ldw	r4,-16(fp)
   53040:	00531c80 	call	531c8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   53044:	e0bffb04 	addi	r2,fp,-20
   53048:	100b883a 	mov	r5,r2
   5304c:	e13ffc17 	ldw	r4,-16(fp)
   53050:	00532140 	call	53214 <alt_avalon_i2c_check_arblost>
    
    return status;
   53054:	e0bffb17 	ldw	r2,-20(fp)
}
   53058:	e037883a 	mov	sp,fp
   5305c:	dfc00117 	ldw	ra,4(sp)
   53060:	df000017 	ldw	fp,0(sp)
   53064:	dec00204 	addi	sp,sp,8
   53068:	f800283a 	ret

0005306c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   5306c:	defffa04 	addi	sp,sp,-24
   53070:	dfc00515 	stw	ra,20(sp)
   53074:	df000415 	stw	fp,16(sp)
   53078:	df000404 	addi	fp,sp,16
   5307c:	e13ffd15 	stw	r4,-12(fp)
   53080:	e17ffe15 	stw	r5,-8(fp)
   53084:	3005883a 	mov	r2,r6
   53088:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   5308c:	e0bffd17 	ldw	r2,-12(fp)
   53090:	10800d17 	ldw	r2,52(r2)
   53094:	10800058 	cmpnei	r2,r2,1
   53098:	10001c1e 	bne	r2,zero,5310c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   5309c:	e0bffd17 	ldw	r2,-12(fp)
   530a0:	10800917 	ldw	r2,36(r2)
   530a4:	109e0014 	ori	r2,r2,30720
   530a8:	1004d1fa 	srli	r2,r2,7
   530ac:	1007883a 	mov	r3,r2
   530b0:	00bfff84 	movi	r2,-2
   530b4:	1884703a 	and	r2,r3,r2
   530b8:	1007883a 	mov	r3,r2
   530bc:	e0bffe17 	ldw	r2,-8(fp)
   530c0:	1884b03a 	or	r2,r3,r2
   530c4:	10803fcc 	andi	r2,r2,255
   530c8:	e0ffff03 	ldbu	r3,-4(fp)
   530cc:	000f883a 	mov	r7,zero
   530d0:	180d883a 	mov	r6,r3
   530d4:	100b883a 	mov	r5,r2
   530d8:	e13ffd17 	ldw	r4,-12(fp)
   530dc:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   530e0:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   530e4:	e0bffd17 	ldw	r2,-12(fp)
   530e8:	10800917 	ldw	r2,36(r2)
   530ec:	10803fcc 	andi	r2,r2,255
   530f0:	000f883a 	mov	r7,zero
   530f4:	000d883a 	mov	r6,zero
   530f8:	100b883a 	mov	r5,r2
   530fc:	e13ffd17 	ldw	r4,-12(fp)
   53100:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53104:	e0bffc15 	stw	r2,-16(fp)
   53108:	00000e06 	br	53144 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   5310c:	e0bffd17 	ldw	r2,-12(fp)
   53110:	10800917 	ldw	r2,36(r2)
   53114:	1085883a 	add	r2,r2,r2
   53118:	1007883a 	mov	r3,r2
   5311c:	e0bffe17 	ldw	r2,-8(fp)
   53120:	1884b03a 	or	r2,r3,r2
   53124:	10803fcc 	andi	r2,r2,255
   53128:	e0ffff03 	ldbu	r3,-4(fp)
   5312c:	000f883a 	mov	r7,zero
   53130:	180d883a 	mov	r6,r3
   53134:	100b883a 	mov	r5,r2
   53138:	e13ffd17 	ldw	r4,-12(fp)
   5313c:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53140:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   53144:	e0bffc17 	ldw	r2,-16(fp)
}
   53148:	e037883a 	mov	sp,fp
   5314c:	dfc00117 	ldw	ra,4(sp)
   53150:	df000017 	ldw	fp,0(sp)
   53154:	dec00204 	addi	sp,sp,8
   53158:	f800283a 	ret

0005315c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   5315c:	defffd04 	addi	sp,sp,-12
   53160:	df000215 	stw	fp,8(sp)
   53164:	df000204 	addi	fp,sp,8
   53168:	e13ffe15 	stw	r4,-8(fp)
   5316c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   53170:	e0bffe17 	ldw	r2,-8(fp)
   53174:	10c00917 	ldw	r3,36(r2)
   53178:	e0bfff17 	ldw	r2,-4(fp)
   5317c:	10c00015 	stw	r3,0(r2)
}
   53180:	0001883a 	nop
   53184:	e037883a 	mov	sp,fp
   53188:	df000017 	ldw	fp,0(sp)
   5318c:	dec00104 	addi	sp,sp,4
   53190:	f800283a 	ret

00053194 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   53194:	defffd04 	addi	sp,sp,-12
   53198:	df000215 	stw	fp,8(sp)
   5319c:	df000204 	addi	fp,sp,8
   531a0:	e13ffe15 	stw	r4,-8(fp)
   531a4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   531a8:	e0bffe17 	ldw	r2,-8(fp)
   531ac:	e0ffff17 	ldw	r3,-4(fp)
   531b0:	10c00915 	stw	r3,36(r2)
}
   531b4:	0001883a 	nop
   531b8:	e037883a 	mov	sp,fp
   531bc:	df000017 	ldw	fp,0(sp)
   531c0:	dec00104 	addi	sp,sp,4
   531c4:	f800283a 	ret

000531c8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   531c8:	defffd04 	addi	sp,sp,-12
   531cc:	df000215 	stw	fp,8(sp)
   531d0:	df000204 	addi	fp,sp,8
   531d4:	e13ffe15 	stw	r4,-8(fp)
   531d8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   531dc:	e0bffe17 	ldw	r2,-8(fp)
   531e0:	10800317 	ldw	r2,12(r2)
   531e4:	10800404 	addi	r2,r2,16
   531e8:	10800037 	ldwio	r2,0(r2)
   531ec:	1080010c 	andi	r2,r2,4
   531f0:	10000326 	beq	r2,zero,53200 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   531f4:	e0bfff17 	ldw	r2,-4(fp)
   531f8:	00fffec4 	movi	r3,-5
   531fc:	10c00015 	stw	r3,0(r2)
    }
}
   53200:	0001883a 	nop
   53204:	e037883a 	mov	sp,fp
   53208:	df000017 	ldw	fp,0(sp)
   5320c:	dec00104 	addi	sp,sp,4
   53210:	f800283a 	ret

00053214 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   53214:	defffd04 	addi	sp,sp,-12
   53218:	df000215 	stw	fp,8(sp)
   5321c:	df000204 	addi	fp,sp,8
   53220:	e13ffe15 	stw	r4,-8(fp)
   53224:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   53228:	e0bffe17 	ldw	r2,-8(fp)
   5322c:	10800317 	ldw	r2,12(r2)
   53230:	10800404 	addi	r2,r2,16
   53234:	10800037 	ldwio	r2,0(r2)
   53238:	1080020c 	andi	r2,r2,8
   5323c:	10000326 	beq	r2,zero,5324c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   53240:	e0bfff17 	ldw	r2,-4(fp)
   53244:	00fffe84 	movi	r3,-6
   53248:	10c00015 	stw	r3,0(r2)
    }
}
   5324c:	0001883a 	nop
   53250:	e037883a 	mov	sp,fp
   53254:	df000017 	ldw	fp,0(sp)
   53258:	dec00104 	addi	sp,sp,4
   5325c:	f800283a 	ret

00053260 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   53260:	defff804 	addi	sp,sp,-32
   53264:	dfc00715 	stw	ra,28(sp)
   53268:	df000615 	stw	fp,24(sp)
   5326c:	df000604 	addi	fp,sp,24
   53270:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53274:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   53278:	e0bfff17 	ldw	r2,-4(fp)
   5327c:	10800717 	ldw	r2,28(r2)
   53280:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   53284:	e0bffb17 	ldw	r2,-20(fp)
   53288:	10800117 	ldw	r2,4(r2)
   5328c:	10800044 	addi	r2,r2,1
   53290:	0149c404 	movi	r5,10000
   53294:	1009883a 	mov	r4,r2
   53298:	004146c0 	call	4146c <__mulsi3>
   5329c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   532a0:	e0bffd04 	addi	r2,fp,-12
   532a4:	100b883a 	mov	r5,r2
   532a8:	e13fff17 	ldw	r4,-4(fp)
   532ac:	00540f80 	call	540f8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   532b0:	e0bffd17 	ldw	r2,-12(fp)
   532b4:	100b883a 	mov	r5,r2
   532b8:	e13fff17 	ldw	r4,-4(fp)
   532bc:	005402c0 	call	5402c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   532c0:	e0bffc04 	addi	r2,fp,-16
   532c4:	100b883a 	mov	r5,r2
   532c8:	e13fff17 	ldw	r4,-4(fp)
   532cc:	00531c80 	call	531c8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   532d0:	e0bffc17 	ldw	r2,-16(fp)
   532d4:	10002226 	beq	r2,zero,53360 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   532d8:	e0bffb17 	ldw	r2,-20(fp)
   532dc:	10800217 	ldw	r2,8(r2)
   532e0:	10001d26 	beq	r2,zero,53358 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   532e4:	00000d06 	br	5331c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   532e8:	e0bffa17 	ldw	r2,-24(fp)
   532ec:	108002a8 	cmpgeui	r2,r2,10
   532f0:	1000021e 	bne	r2,zero,532fc <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   532f4:	0109c404 	movi	r4,10000
   532f8:	00552b80 	call	552b8 <alt_busy_sleep>
              if (--timeout == 0)
   532fc:	e0bffa17 	ldw	r2,-24(fp)
   53300:	10bfffc4 	addi	r2,r2,-1
   53304:	e0bffa15 	stw	r2,-24(fp)
   53308:	e0bffa17 	ldw	r2,-24(fp)
   5330c:	1000031e 	bne	r2,zero,5331c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   53310:	00bfff84 	movi	r2,-2
   53314:	e0bffc15 	stw	r2,-16(fp)
                 break;
   53318:	00000306 	br	53328 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   5331c:	e13fff17 	ldw	r4,-4(fp)
   53320:	0052df40 	call	52df4 <alt_avalon_i2c_is_busy>
   53324:	103ff01e 	bne	r2,zero,532e8 <__alt_data_end+0xfffe12e8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   53328:	e0bffb17 	ldw	r2,-20(fp)
   5332c:	10800017 	ldw	r2,0(r2)
   53330:	e0fffe04 	addi	r3,fp,-8
   53334:	180f883a 	mov	r7,r3
   53338:	000d883a 	mov	r6,zero
   5333c:	100b883a 	mov	r5,r2
   53340:	e13fff17 	ldw	r4,-4(fp)
   53344:	0052e380 	call	52e38 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   53348:	e13fff17 	ldw	r4,-4(fp)
   5334c:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   53350:	e0bffb17 	ldw	r2,-20(fp)
   53354:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   53358:	e0bffc17 	ldw	r2,-16(fp)
   5335c:	00000a06 	br	53388 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   53360:	e0bffb17 	ldw	r2,-20(fp)
   53364:	10800217 	ldw	r2,8(r2)
   53368:	10000626 	beq	r2,zero,53384 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   5336c:	e0bffd17 	ldw	r2,-12(fp)
   53370:	100b883a 	mov	r5,r2
   53374:	e13fff17 	ldw	r4,-4(fp)
   53378:	00540940 	call	54094 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   5337c:	00bffe44 	movi	r2,-7
   53380:	00000106 	br	53388 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   53384:	0005883a 	mov	r2,zero
}
   53388:	e037883a 	mov	sp,fp
   5338c:	dfc00117 	ldw	ra,4(sp)
   53390:	df000017 	ldw	fp,0(sp)
   53394:	dec00204 	addi	sp,sp,8
   53398:	f800283a 	ret

0005339c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   5339c:	defff704 	addi	sp,sp,-36
   533a0:	dfc00815 	stw	ra,32(sp)
   533a4:	df000715 	stw	fp,28(sp)
   533a8:	df000704 	addi	fp,sp,28
   533ac:	e13ffc15 	stw	r4,-16(fp)
   533b0:	e17ffd15 	stw	r5,-12(fp)
   533b4:	e1bffe15 	stw	r6,-8(fp)
   533b8:	3805883a 	mov	r2,r7
   533bc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   533c0:	0089c404 	movi	r2,10000
   533c4:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   533c8:	00002206 	br	53454 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   533cc:	e0bffb17 	ldw	r2,-20(fp)
   533d0:	108002a8 	cmpgeui	r2,r2,10
   533d4:	1000021e 	bne	r2,zero,533e0 <alt_avalon_i2c_master_tx+0x44>
   533d8:	0109c404 	movi	r4,10000
   533dc:	00552b80 	call	552b8 <alt_busy_sleep>
      if (use_interrupts)
   533e0:	e0bfff03 	ldbu	r2,-4(fp)
   533e4:	10000926 	beq	r2,zero,5340c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   533e8:	00800044 	movi	r2,1
   533ec:	d8800015 	stw	r2,0(sp)
   533f0:	000f883a 	mov	r7,zero
   533f4:	e1bffe17 	ldw	r6,-8(fp)
   533f8:	e17ffd17 	ldw	r5,-12(fp)
   533fc:	e13ffc17 	ldw	r4,-16(fp)
   53400:	00539480 	call	53948 <alt_avalon_i2c_master_transmit_using_interrupts>
   53404:	e0bffa15 	stw	r2,-24(fp)
   53408:	00000806 	br	5342c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   5340c:	00800044 	movi	r2,1
   53410:	d8800015 	stw	r2,0(sp)
   53414:	000f883a 	mov	r7,zero
   53418:	e1bffe17 	ldw	r6,-8(fp)
   5341c:	e17ffd17 	ldw	r5,-12(fp)
   53420:	e13ffc17 	ldw	r4,-16(fp)
   53424:	00537880 	call	53788 <alt_avalon_i2c_master_transmit>
   53428:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   5342c:	e0bffa17 	ldw	r2,-24(fp)
   53430:	10bffea0 	cmpeqi	r2,r2,-6
   53434:	1000061e 	bne	r2,zero,53450 <alt_avalon_i2c_master_tx+0xb4>
   53438:	e0bffa17 	ldw	r2,-24(fp)
   5343c:	10bffee0 	cmpeqi	r2,r2,-5
   53440:	1000031e 	bne	r2,zero,53450 <alt_avalon_i2c_master_tx+0xb4>
   53444:	e0bffa17 	ldw	r2,-24(fp)
   53448:	10bffe58 	cmpnei	r2,r2,-7
   5344c:	1000061e 	bne	r2,zero,53468 <alt_avalon_i2c_master_tx+0xcc>
   53450:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   53454:	e0bffb17 	ldw	r2,-20(fp)
   53458:	10ffffc4 	addi	r3,r2,-1
   5345c:	e0fffb15 	stw	r3,-20(fp)
   53460:	103fda1e 	bne	r2,zero,533cc <__alt_data_end+0xfffe13cc>
   53464:	00000106 	br	5346c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   53468:	0001883a 	nop
    }

    return status;
   5346c:	e0bffa17 	ldw	r2,-24(fp)
}        
   53470:	e037883a 	mov	sp,fp
   53474:	dfc00117 	ldw	ra,4(sp)
   53478:	df000017 	ldw	fp,0(sp)
   5347c:	dec00204 	addi	sp,sp,8
   53480:	f800283a 	ret

00053484 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   53484:	defff704 	addi	sp,sp,-36
   53488:	dfc00815 	stw	ra,32(sp)
   5348c:	df000715 	stw	fp,28(sp)
   53490:	df000704 	addi	fp,sp,28
   53494:	e13ffc15 	stw	r4,-16(fp)
   53498:	e17ffd15 	stw	r5,-12(fp)
   5349c:	e1bffe15 	stw	r6,-8(fp)
   534a0:	3805883a 	mov	r2,r7
   534a4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   534a8:	0089c404 	movi	r2,10000
   534ac:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   534b0:	e0bfff03 	ldbu	r2,-4(fp)
   534b4:	10003426 	beq	r2,zero,53588 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   534b8:	00001706 	br	53518 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   534bc:	e0bffb17 	ldw	r2,-20(fp)
   534c0:	108002a8 	cmpgeui	r2,r2,10
   534c4:	1000021e 	bne	r2,zero,534d0 <alt_avalon_i2c_master_rx+0x4c>
   534c8:	0109c404 	movi	r4,10000
   534cc:	00552b80 	call	552b8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   534d0:	00800044 	movi	r2,1
   534d4:	d8800015 	stw	r2,0(sp)
   534d8:	000f883a 	mov	r7,zero
   534dc:	e1bffe17 	ldw	r6,-8(fp)
   534e0:	e17ffd17 	ldw	r5,-12(fp)
   534e4:	e13ffc17 	ldw	r4,-16(fp)
   534e8:	0053d640 	call	53d64 <alt_avalon_i2c_master_receive_using_interrupts>
   534ec:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   534f0:	e0bffa17 	ldw	r2,-24(fp)
   534f4:	10bffea0 	cmpeqi	r2,r2,-6
   534f8:	1000061e 	bne	r2,zero,53514 <alt_avalon_i2c_master_rx+0x90>
   534fc:	e0bffa17 	ldw	r2,-24(fp)
   53500:	10bffee0 	cmpeqi	r2,r2,-5
   53504:	1000031e 	bne	r2,zero,53514 <alt_avalon_i2c_master_rx+0x90>
   53508:	e0bffa17 	ldw	r2,-24(fp)
   5350c:	10bffe58 	cmpnei	r2,r2,-7
   53510:	1000221e 	bne	r2,zero,5359c <alt_avalon_i2c_master_rx+0x118>
   53514:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   53518:	e0bffb17 	ldw	r2,-20(fp)
   5351c:	10ffffc4 	addi	r3,r2,-1
   53520:	e0fffb15 	stw	r3,-20(fp)
   53524:	103fe51e 	bne	r2,zero,534bc <__alt_data_end+0xfffe14bc>
   53528:	00001f06 	br	535a8 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   5352c:	e0bffb17 	ldw	r2,-20(fp)
   53530:	108002a8 	cmpgeui	r2,r2,10
   53534:	1000021e 	bne	r2,zero,53540 <alt_avalon_i2c_master_rx+0xbc>
   53538:	0109c404 	movi	r4,10000
   5353c:	00552b80 	call	552b8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   53540:	00800044 	movi	r2,1
   53544:	d8800015 	stw	r2,0(sp)
   53548:	000f883a 	mov	r7,zero
   5354c:	e1bffe17 	ldw	r6,-8(fp)
   53550:	e17ffd17 	ldw	r5,-12(fp)
   53554:	e13ffc17 	ldw	r4,-16(fp)
   53558:	0053b540 	call	53b54 <alt_avalon_i2c_master_receive>
   5355c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53560:	e0bffa17 	ldw	r2,-24(fp)
   53564:	10bffea0 	cmpeqi	r2,r2,-6
   53568:	1000061e 	bne	r2,zero,53584 <alt_avalon_i2c_master_rx+0x100>
   5356c:	e0bffa17 	ldw	r2,-24(fp)
   53570:	10bffee0 	cmpeqi	r2,r2,-5
   53574:	1000031e 	bne	r2,zero,53584 <alt_avalon_i2c_master_rx+0x100>
   53578:	e0bffa17 	ldw	r2,-24(fp)
   5357c:	10bffe58 	cmpnei	r2,r2,-7
   53580:	1000081e 	bne	r2,zero,535a4 <alt_avalon_i2c_master_rx+0x120>
   53584:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   53588:	e0bffb17 	ldw	r2,-20(fp)
   5358c:	10ffffc4 	addi	r3,r2,-1
   53590:	e0fffb15 	stw	r3,-20(fp)
   53594:	103fe51e 	bne	r2,zero,5352c <__alt_data_end+0xfffe152c>
   53598:	00000306 	br	535a8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   5359c:	0001883a 	nop
   535a0:	00000106 	br	535a8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   535a4:	0001883a 	nop
      }
    }
    
    return status;
   535a8:	e0bffa17 	ldw	r2,-24(fp)
}        
   535ac:	e037883a 	mov	sp,fp
   535b0:	dfc00117 	ldw	ra,4(sp)
   535b4:	df000017 	ldw	fp,0(sp)
   535b8:	dec00204 	addi	sp,sp,8
   535bc:	f800283a 	ret

000535c0 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   535c0:	defff604 	addi	sp,sp,-40
   535c4:	dfc00915 	stw	ra,36(sp)
   535c8:	df000815 	stw	fp,32(sp)
   535cc:	df000804 	addi	fp,sp,32
   535d0:	e13ffb15 	stw	r4,-20(fp)
   535d4:	e17ffc15 	stw	r5,-16(fp)
   535d8:	e1bffd15 	stw	r6,-12(fp)
   535dc:	e1fffe15 	stw	r7,-8(fp)
   535e0:	e0800317 	ldw	r2,12(fp)
   535e4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   535e8:	0089c404 	movi	r2,10000
   535ec:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   535f0:	e0bfff03 	ldbu	r2,-4(fp)
   535f4:	10005626 	beq	r2,zero,53750 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   535f8:	00002806 	br	5369c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   535fc:	e0bffa17 	ldw	r2,-24(fp)
   53600:	108002a8 	cmpgeui	r2,r2,10
   53604:	1000021e 	bne	r2,zero,53610 <alt_avalon_i2c_master_tx_rx+0x50>
   53608:	0109c404 	movi	r4,10000
   5360c:	00552b80 	call	552b8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   53610:	d8000015 	stw	zero,0(sp)
   53614:	000f883a 	mov	r7,zero
   53618:	e1bffd17 	ldw	r6,-12(fp)
   5361c:	e17ffc17 	ldw	r5,-16(fp)
   53620:	e13ffb17 	ldw	r4,-20(fp)
   53624:	00539480 	call	53948 <alt_avalon_i2c_master_transmit_using_interrupts>
   53628:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   5362c:	e0bff917 	ldw	r2,-28(fp)
   53630:	10bffea0 	cmpeqi	r2,r2,-6
   53634:	1000191e 	bne	r2,zero,5369c <alt_avalon_i2c_master_tx_rx+0xdc>
   53638:	e0bff917 	ldw	r2,-28(fp)
   5363c:	10bffee0 	cmpeqi	r2,r2,-5
   53640:	1000161e 	bne	r2,zero,5369c <alt_avalon_i2c_master_tx_rx+0xdc>
   53644:	e0bff917 	ldw	r2,-28(fp)
   53648:	10bffe58 	cmpnei	r2,r2,-7
   5364c:	1000011e 	bne	r2,zero,53654 <alt_avalon_i2c_master_tx_rx+0x94>
   53650:	00001206 	br	5369c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   53654:	00800044 	movi	r2,1
   53658:	d8800015 	stw	r2,0(sp)
   5365c:	01c00044 	movi	r7,1
   53660:	e1800217 	ldw	r6,8(fp)
   53664:	e17ffe17 	ldw	r5,-8(fp)
   53668:	e13ffb17 	ldw	r4,-20(fp)
   5366c:	0053d640 	call	53d64 <alt_avalon_i2c_master_receive_using_interrupts>
   53670:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53674:	e0bff917 	ldw	r2,-28(fp)
   53678:	10bffea0 	cmpeqi	r2,r2,-6
   5367c:	1000061e 	bne	r2,zero,53698 <alt_avalon_i2c_master_tx_rx+0xd8>
   53680:	e0bff917 	ldw	r2,-28(fp)
   53684:	10bffee0 	cmpeqi	r2,r2,-5
   53688:	1000031e 	bne	r2,zero,53698 <alt_avalon_i2c_master_tx_rx+0xd8>
   5368c:	e0bff917 	ldw	r2,-28(fp)
   53690:	10bffe58 	cmpnei	r2,r2,-7
   53694:	1000331e 	bne	r2,zero,53764 <alt_avalon_i2c_master_tx_rx+0x1a4>
   53698:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   5369c:	e0bffa17 	ldw	r2,-24(fp)
   536a0:	10ffffc4 	addi	r3,r2,-1
   536a4:	e0fffa15 	stw	r3,-24(fp)
   536a8:	103fd41e 	bne	r2,zero,535fc <__alt_data_end+0xfffe15fc>
   536ac:	00003006 	br	53770 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   536b0:	e0bffa17 	ldw	r2,-24(fp)
   536b4:	108002a8 	cmpgeui	r2,r2,10
   536b8:	1000021e 	bne	r2,zero,536c4 <alt_avalon_i2c_master_tx_rx+0x104>
   536bc:	0109c404 	movi	r4,10000
   536c0:	00552b80 	call	552b8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   536c4:	d8000015 	stw	zero,0(sp)
   536c8:	000f883a 	mov	r7,zero
   536cc:	e1bffd17 	ldw	r6,-12(fp)
   536d0:	e17ffc17 	ldw	r5,-16(fp)
   536d4:	e13ffb17 	ldw	r4,-20(fp)
   536d8:	00537880 	call	53788 <alt_avalon_i2c_master_transmit>
   536dc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   536e0:	e0bff917 	ldw	r2,-28(fp)
   536e4:	10bffea0 	cmpeqi	r2,r2,-6
   536e8:	1000191e 	bne	r2,zero,53750 <alt_avalon_i2c_master_tx_rx+0x190>
   536ec:	e0bff917 	ldw	r2,-28(fp)
   536f0:	10bffee0 	cmpeqi	r2,r2,-5
   536f4:	1000161e 	bne	r2,zero,53750 <alt_avalon_i2c_master_tx_rx+0x190>
   536f8:	e0bff917 	ldw	r2,-28(fp)
   536fc:	10bffe58 	cmpnei	r2,r2,-7
   53700:	1000011e 	bne	r2,zero,53708 <alt_avalon_i2c_master_tx_rx+0x148>
   53704:	00001206 	br	53750 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   53708:	00800044 	movi	r2,1
   5370c:	d8800015 	stw	r2,0(sp)
   53710:	01c00044 	movi	r7,1
   53714:	e1800217 	ldw	r6,8(fp)
   53718:	e17ffe17 	ldw	r5,-8(fp)
   5371c:	e13ffb17 	ldw	r4,-20(fp)
   53720:	0053b540 	call	53b54 <alt_avalon_i2c_master_receive>
   53724:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   53728:	e0bff917 	ldw	r2,-28(fp)
   5372c:	10bffea0 	cmpeqi	r2,r2,-6
   53730:	1000061e 	bne	r2,zero,5374c <alt_avalon_i2c_master_tx_rx+0x18c>
   53734:	e0bff917 	ldw	r2,-28(fp)
   53738:	10bffee0 	cmpeqi	r2,r2,-5
   5373c:	1000031e 	bne	r2,zero,5374c <alt_avalon_i2c_master_tx_rx+0x18c>
   53740:	e0bff917 	ldw	r2,-28(fp)
   53744:	10bffe58 	cmpnei	r2,r2,-7
   53748:	1000081e 	bne	r2,zero,5376c <alt_avalon_i2c_master_tx_rx+0x1ac>
   5374c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   53750:	e0bffa17 	ldw	r2,-24(fp)
   53754:	10ffffc4 	addi	r3,r2,-1
   53758:	e0fffa15 	stw	r3,-24(fp)
   5375c:	103fd41e 	bne	r2,zero,536b0 <__alt_data_end+0xfffe16b0>
   53760:	00000306 	br	53770 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   53764:	0001883a 	nop
   53768:	00000106 	br	53770 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   5376c:	0001883a 	nop
      }
    }
    
    return status;
   53770:	e0bff917 	ldw	r2,-28(fp)
}                                       
   53774:	e037883a 	mov	sp,fp
   53778:	dfc00117 	ldw	ra,4(sp)
   5377c:	df000017 	ldw	fp,0(sp)
   53780:	dec00204 	addi	sp,sp,8
   53784:	f800283a 	ret

00053788 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   53788:	defff704 	addi	sp,sp,-36
   5378c:	dfc00815 	stw	ra,32(sp)
   53790:	df000715 	stw	fp,28(sp)
   53794:	df000704 	addi	fp,sp,28
   53798:	e13ffb15 	stw	r4,-20(fp)
   5379c:	e17ffc15 	stw	r5,-16(fp)
   537a0:	e1bffd15 	stw	r6,-12(fp)
   537a4:	3807883a 	mov	r3,r7
   537a8:	e0800217 	ldw	r2,8(fp)
   537ac:	e0fffe05 	stb	r3,-8(fp)
   537b0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   537b4:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   537b8:	0149c404 	movi	r5,10000
   537bc:	e13ffd17 	ldw	r4,-12(fp)
   537c0:	004146c0 	call	4146c <__mulsi3>
   537c4:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   537c8:	e0bffd17 	ldw	r2,-12(fp)
   537cc:	1000021e 	bne	r2,zero,537d8 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   537d0:	0005883a 	mov	r2,zero
   537d4:	00005706 	br	53934 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   537d8:	e0bffe03 	ldbu	r2,-8(fp)
   537dc:	10000a1e 	bne	r2,zero,53808 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   537e0:	e13ffb17 	ldw	r4,-20(fp)
   537e4:	0052a040 	call	52a04 <alt_avalon_i2c_enable>
   537e8:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   537ec:	e0bffa17 	ldw	r2,-24(fp)
   537f0:	10000226 	beq	r2,zero,537fc <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   537f4:	e0bffa17 	ldw	r2,-24(fp)
   537f8:	00004e06 	br	53934 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   537fc:	01400704 	movi	r5,28
   53800:	e13ffb17 	ldw	r4,-20(fp)
   53804:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   53808:	e0bffe03 	ldbu	r2,-8(fp)
   5380c:	100d883a 	mov	r6,r2
   53810:	000b883a 	mov	r5,zero
   53814:	e13ffb17 	ldw	r4,-20(fp)
   53818:	005306c0 	call	5306c <alt_avalon_i2c_send_address>
   5381c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   53820:	e0bffa17 	ldw	r2,-24(fp)
   53824:	1000271e 	bne	r2,zero,538c4 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53828:	00000f06 	br	53868 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   5382c:	e0bffc17 	ldw	r2,-16(fp)
   53830:	10800003 	ldbu	r2,0(r2)
   53834:	10803fcc 	andi	r2,r2,255
   53838:	000f883a 	mov	r7,zero
   5383c:	000d883a 	mov	r6,zero
   53840:	100b883a 	mov	r5,r2
   53844:	e13ffb17 	ldw	r4,-20(fp)
   53848:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   5384c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   53850:	e0bffc17 	ldw	r2,-16(fp)
   53854:	10800044 	addi	r2,r2,1
   53858:	e0bffc15 	stw	r2,-16(fp)
            --size;
   5385c:	e0bffd17 	ldw	r2,-12(fp)
   53860:	10bfffc4 	addi	r2,r2,-1
   53864:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53868:	e0bffd17 	ldw	r2,-12(fp)
   5386c:	108000b0 	cmpltui	r2,r2,2
   53870:	1000021e 	bne	r2,zero,5387c <alt_avalon_i2c_master_transmit+0xf4>
   53874:	e0bffa17 	ldw	r2,-24(fp)
   53878:	103fec26 	beq	r2,zero,5382c <__alt_data_end+0xfffe182c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   5387c:	e0bffa17 	ldw	r2,-24(fp)
   53880:	1000101e 	bne	r2,zero,538c4 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53884:	e0bffc17 	ldw	r2,-16(fp)
   53888:	10800003 	ldbu	r2,0(r2)
   5388c:	10803fcc 	andi	r2,r2,255
   53890:	e0ffff03 	ldbu	r3,-4(fp)
   53894:	180f883a 	mov	r7,r3
   53898:	000d883a 	mov	r6,zero
   5389c:	100b883a 	mov	r5,r2
   538a0:	e13ffb17 	ldw	r4,-20(fp)
   538a4:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   538a8:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   538ac:	e0bffc17 	ldw	r2,-16(fp)
   538b0:	10800044 	addi	r2,r2,1
   538b4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   538b8:	e0bffd17 	ldw	r2,-12(fp)
   538bc:	10bfffc4 	addi	r2,r2,-1
   538c0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   538c4:	e0bfff03 	ldbu	r2,-4(fp)
   538c8:	1000101e 	bne	r2,zero,5390c <alt_avalon_i2c_master_transmit+0x184>
   538cc:	e0bffa17 	ldw	r2,-24(fp)
   538d0:	10001726 	beq	r2,zero,53930 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   538d4:	00000d06 	br	5390c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   538d8:	e0bff917 	ldw	r2,-28(fp)
   538dc:	108002a8 	cmpgeui	r2,r2,10
   538e0:	1000021e 	bne	r2,zero,538ec <alt_avalon_i2c_master_transmit+0x164>
   538e4:	0109c404 	movi	r4,10000
   538e8:	00552b80 	call	552b8 <alt_busy_sleep>
            if (--timeout == 0)
   538ec:	e0bff917 	ldw	r2,-28(fp)
   538f0:	10bfffc4 	addi	r2,r2,-1
   538f4:	e0bff915 	stw	r2,-28(fp)
   538f8:	e0bff917 	ldw	r2,-28(fp)
   538fc:	1000031e 	bne	r2,zero,5390c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53900:	00bfff84 	movi	r2,-2
   53904:	e0bffa15 	stw	r2,-24(fp)
               break;
   53908:	00000306 	br	53918 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   5390c:	e13ffb17 	ldw	r4,-20(fp)
   53910:	0052df40 	call	52df4 <alt_avalon_i2c_is_busy>
   53914:	103ff01e 	bne	r2,zero,538d8 <__alt_data_end+0xfffe18d8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   53918:	e0bffa04 	addi	r2,fp,-24
   5391c:	100b883a 	mov	r5,r2
   53920:	e13ffb17 	ldw	r4,-20(fp)
   53924:	00531c80 	call	531c8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53928:	e13ffb17 	ldw	r4,-20(fp)
   5392c:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>
    }


    return status;
   53930:	e0bffa17 	ldw	r2,-24(fp)
}
   53934:	e037883a 	mov	sp,fp
   53938:	dfc00117 	ldw	ra,4(sp)
   5393c:	df000017 	ldw	fp,0(sp)
   53940:	dec00204 	addi	sp,sp,8
   53944:	f800283a 	ret

00053948 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   53948:	defff604 	addi	sp,sp,-40
   5394c:	dfc00915 	stw	ra,36(sp)
   53950:	df000815 	stw	fp,32(sp)
   53954:	df000804 	addi	fp,sp,32
   53958:	e13ffb15 	stw	r4,-20(fp)
   5395c:	e17ffc15 	stw	r5,-16(fp)
   53960:	e1bffd15 	stw	r6,-12(fp)
   53964:	3807883a 	mov	r3,r7
   53968:	e0800217 	ldw	r2,8(fp)
   5396c:	e0fffe05 	stb	r3,-8(fp)
   53970:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53974:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   53978:	0149c404 	movi	r5,10000
   5397c:	e13ffd17 	ldw	r4,-12(fp)
   53980:	004146c0 	call	4146c <__mulsi3>
   53984:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   53988:	e0bffb17 	ldw	r2,-20(fp)
   5398c:	10800717 	ldw	r2,28(r2)
   53990:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   53994:	e0bffd17 	ldw	r2,-12(fp)
   53998:	1000021e 	bne	r2,zero,539a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   5399c:	0005883a 	mov	r2,zero
   539a0:	00006706 	br	53b40 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   539a4:	e0bffb17 	ldw	r2,-20(fp)
   539a8:	10c00617 	ldw	r3,24(r2)
   539ac:	00800174 	movhi	r2,5
   539b0:	1089a204 	addi	r2,r2,9864
   539b4:	18800226 	beq	r3,r2,539c0 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   539b8:	00bfff44 	movi	r2,-3
   539bc:	00006006 	br	53b40 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   539c0:	e0bffe03 	ldbu	r2,-8(fp)
   539c4:	10000a1e 	bne	r2,zero,539f0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   539c8:	e13ffb17 	ldw	r4,-20(fp)
   539cc:	0052a040 	call	52a04 <alt_avalon_i2c_enable>
   539d0:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   539d4:	e0bff817 	ldw	r2,-32(fp)
   539d8:	10000226 	beq	r2,zero,539e4 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   539dc:	e0bff817 	ldw	r2,-32(fp)
   539e0:	00005706 	br	53b40 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   539e4:	01400704 	movi	r5,28
   539e8:	e13ffb17 	ldw	r4,-20(fp)
   539ec:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   539f0:	e0bffe03 	ldbu	r2,-8(fp)
   539f4:	100d883a 	mov	r6,r2
   539f8:	000b883a 	mov	r5,zero
   539fc:	e13ffb17 	ldw	r4,-20(fp)
   53a00:	005306c0 	call	5306c <alt_avalon_i2c_send_address>
   53a04:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   53a08:	e0bff817 	ldw	r2,-32(fp)
   53a0c:	1000271e 	bne	r2,zero,53aac <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53a10:	00000f06 	br	53a50 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53a14:	e0bffc17 	ldw	r2,-16(fp)
   53a18:	10800003 	ldbu	r2,0(r2)
   53a1c:	10803fcc 	andi	r2,r2,255
   53a20:	000f883a 	mov	r7,zero
   53a24:	000d883a 	mov	r6,zero
   53a28:	100b883a 	mov	r5,r2
   53a2c:	e13ffb17 	ldw	r4,-20(fp)
   53a30:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53a34:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   53a38:	e0bffc17 	ldw	r2,-16(fp)
   53a3c:	10800044 	addi	r2,r2,1
   53a40:	e0bffc15 	stw	r2,-16(fp)
            --size;
   53a44:	e0bffd17 	ldw	r2,-12(fp)
   53a48:	10bfffc4 	addi	r2,r2,-1
   53a4c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   53a50:	e0bffd17 	ldw	r2,-12(fp)
   53a54:	108000b0 	cmpltui	r2,r2,2
   53a58:	1000021e 	bne	r2,zero,53a64 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   53a5c:	e0bff817 	ldw	r2,-32(fp)
   53a60:	103fec26 	beq	r2,zero,53a14 <__alt_data_end+0xfffe1a14>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   53a64:	e0bff817 	ldw	r2,-32(fp)
   53a68:	1000101e 	bne	r2,zero,53aac <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53a6c:	e0bffc17 	ldw	r2,-16(fp)
   53a70:	10800003 	ldbu	r2,0(r2)
   53a74:	10803fcc 	andi	r2,r2,255
   53a78:	e0ffff03 	ldbu	r3,-4(fp)
   53a7c:	180f883a 	mov	r7,r3
   53a80:	000d883a 	mov	r6,zero
   53a84:	100b883a 	mov	r5,r2
   53a88:	e13ffb17 	ldw	r4,-20(fp)
   53a8c:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53a90:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   53a94:	e0bffc17 	ldw	r2,-16(fp)
   53a98:	10800044 	addi	r2,r2,1
   53a9c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   53aa0:	e0bffd17 	ldw	r2,-12(fp)
   53aa4:	10bfffc4 	addi	r2,r2,-1
   53aa8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   53aac:	e0bff817 	ldw	r2,-32(fp)
   53ab0:	10001426 	beq	r2,zero,53b04 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53ab4:	00000d06 	br	53aec <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   53ab8:	e0bff917 	ldw	r2,-28(fp)
   53abc:	108002a8 	cmpgeui	r2,r2,10
   53ac0:	1000021e 	bne	r2,zero,53acc <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   53ac4:	0109c404 	movi	r4,10000
   53ac8:	00552b80 	call	552b8 <alt_busy_sleep>
            if (--timeout == 0)
   53acc:	e0bff917 	ldw	r2,-28(fp)
   53ad0:	10bfffc4 	addi	r2,r2,-1
   53ad4:	e0bff915 	stw	r2,-28(fp)
   53ad8:	e0bff917 	ldw	r2,-28(fp)
   53adc:	1000031e 	bne	r2,zero,53aec <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53ae0:	00bfff84 	movi	r2,-2
   53ae4:	e0bff815 	stw	r2,-32(fp)
               break;
   53ae8:	00000306 	br	53af8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53aec:	e13ffb17 	ldw	r4,-20(fp)
   53af0:	0052df40 	call	52df4 <alt_avalon_i2c_is_busy>
   53af4:	103ff01e 	bne	r2,zero,53ab8 <__alt_data_end+0xfffe1ab8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53af8:	e13ffb17 	ldw	r4,-20(fp)
   53afc:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>
   53b00:	00000e06 	br	53b3c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   53b04:	e0bfff03 	ldbu	r2,-4(fp)
   53b08:	10000c26 	beq	r2,zero,53b3c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53b0c:	01400704 	movi	r5,28
   53b10:	e13ffb17 	ldw	r4,-20(fp)
   53b14:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   53b18:	000b883a 	mov	r5,zero
   53b1c:	e13ffb17 	ldw	r4,-20(fp)
   53b20:	00542380 	call	54238 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   53b24:	e0bffa17 	ldw	r2,-24(fp)
   53b28:	00c00044 	movi	r3,1
   53b2c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   53b30:	01400044 	movi	r5,1
   53b34:	e13ffb17 	ldw	r4,-20(fp)
   53b38:	00540940 	call	54094 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   53b3c:	e0bff817 	ldw	r2,-32(fp)
}
   53b40:	e037883a 	mov	sp,fp
   53b44:	dfc00117 	ldw	ra,4(sp)
   53b48:	df000017 	ldw	fp,0(sp)
   53b4c:	dec00204 	addi	sp,sp,8
   53b50:	f800283a 	ret

00053b54 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   53b54:	defff404 	addi	sp,sp,-48
   53b58:	dfc00b15 	stw	ra,44(sp)
   53b5c:	df000a15 	stw	fp,40(sp)
   53b60:	df000a04 	addi	fp,sp,40
   53b64:	e13ffb15 	stw	r4,-20(fp)
   53b68:	e17ffc15 	stw	r5,-16(fp)
   53b6c:	e1bffd15 	stw	r6,-12(fp)
   53b70:	3807883a 	mov	r3,r7
   53b74:	e0800217 	ldw	r2,8(fp)
   53b78:	e0fffe05 	stb	r3,-8(fp)
   53b7c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53b80:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   53b84:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   53b88:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   53b8c:	e0bffd17 	ldw	r2,-12(fp)
   53b90:	1000021e 	bne	r2,zero,53b9c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53b94:	0005883a 	mov	r2,zero
   53b98:	00006d06 	br	53d50 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53b9c:	e0bffe03 	ldbu	r2,-8(fp)
   53ba0:	10000a1e 	bne	r2,zero,53bcc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53ba4:	e13ffb17 	ldw	r4,-20(fp)
   53ba8:	0052a040 	call	52a04 <alt_avalon_i2c_enable>
   53bac:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53bb0:	e0bff917 	ldw	r2,-28(fp)
   53bb4:	10000226 	beq	r2,zero,53bc0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   53bb8:	e0bff917 	ldw	r2,-28(fp)
   53bbc:	00006406 	br	53d50 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53bc0:	01400704 	movi	r5,28
   53bc4:	e13ffb17 	ldw	r4,-20(fp)
   53bc8:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53bcc:	e0bffe03 	ldbu	r2,-8(fp)
   53bd0:	100d883a 	mov	r6,r2
   53bd4:	01400044 	movi	r5,1
   53bd8:	e13ffb17 	ldw	r4,-20(fp)
   53bdc:	005306c0 	call	5306c <alt_avalon_i2c_send_address>
   53be0:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53be4:	e0bff917 	ldw	r2,-28(fp)
   53be8:	1000341e 	bne	r2,zero,53cbc <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53bec:	00001906 	br	53c54 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53bf0:	000f883a 	mov	r7,zero
   53bf4:	000d883a 	mov	r6,zero
   53bf8:	000b883a 	mov	r5,zero
   53bfc:	e13ffb17 	ldw	r4,-20(fp)
   53c00:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53c04:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   53c08:	e0bff817 	ldw	r2,-32(fp)
   53c0c:	10800044 	addi	r2,r2,1
   53c10:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   53c14:	e0bff917 	ldw	r2,-28(fp)
   53c18:	10000e1e 	bne	r2,zero,53c54 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   53c1c:	e0bffa04 	addi	r2,fp,-24
   53c20:	100f883a 	mov	r7,r2
   53c24:	000d883a 	mov	r6,zero
   53c28:	e17ffc17 	ldw	r5,-16(fp)
   53c2c:	e13ffb17 	ldw	r4,-20(fp)
   53c30:	0052e380 	call	52e38 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   53c34:	e0bffa17 	ldw	r2,-24(fp)
   53c38:	e0fffc17 	ldw	r3,-16(fp)
   53c3c:	1885883a 	add	r2,r3,r2
   53c40:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   53c44:	e0bffa17 	ldw	r2,-24(fp)
   53c48:	e0fff717 	ldw	r3,-36(fp)
   53c4c:	1885883a 	add	r2,r3,r2
   53c50:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53c54:	e0bffd17 	ldw	r2,-12(fp)
   53c58:	10bfffc4 	addi	r2,r2,-1
   53c5c:	e0fff817 	ldw	r3,-32(fp)
   53c60:	1880022e 	bgeu	r3,r2,53c6c <alt_avalon_i2c_master_receive+0x118>
   53c64:	e0bff917 	ldw	r2,-28(fp)
   53c68:	103fe126 	beq	r2,zero,53bf0 <__alt_data_end+0xfffe1bf0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   53c6c:	e0bff917 	ldw	r2,-28(fp)
   53c70:	1000121e 	bne	r2,zero,53cbc <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53c74:	e0bfff03 	ldbu	r2,-4(fp)
   53c78:	100f883a 	mov	r7,r2
   53c7c:	000d883a 	mov	r6,zero
   53c80:	000b883a 	mov	r5,zero
   53c84:	e13ffb17 	ldw	r4,-20(fp)
   53c88:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53c8c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53c90:	00000a06 	br	53cbc <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   53c94:	e17ffc17 	ldw	r5,-16(fp)
   53c98:	e13ffb17 	ldw	r4,-20(fp)
   53c9c:	0052ee00 	call	52ee0 <alt_avalon_i2c_rx_read>
   53ca0:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   53ca4:	e0bffc17 	ldw	r2,-16(fp)
   53ca8:	10800044 	addi	r2,r2,1
   53cac:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   53cb0:	e0bff717 	ldw	r2,-36(fp)
   53cb4:	10800044 	addi	r2,r2,1
   53cb8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53cbc:	e0fff717 	ldw	r3,-36(fp)
   53cc0:	e0bffd17 	ldw	r2,-12(fp)
   53cc4:	1880022e 	bgeu	r3,r2,53cd0 <alt_avalon_i2c_master_receive+0x17c>
   53cc8:	e0bff917 	ldw	r2,-28(fp)
   53ccc:	103ff126 	beq	r2,zero,53c94 <__alt_data_end+0xfffe1c94>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   53cd0:	e0bfff03 	ldbu	r2,-4(fp)
   53cd4:	1000021e 	bne	r2,zero,53ce0 <alt_avalon_i2c_master_receive+0x18c>
   53cd8:	e0bff917 	ldw	r2,-28(fp)
   53cdc:	10001b26 	beq	r2,zero,53d4c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   53ce0:	0149c404 	movi	r5,10000
   53ce4:	e13ffd17 	ldw	r4,-12(fp)
   53ce8:	004146c0 	call	4146c <__mulsi3>
   53cec:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53cf0:	00000d06 	br	53d28 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53cf4:	e0bff617 	ldw	r2,-40(fp)
   53cf8:	108002a8 	cmpgeui	r2,r2,10
   53cfc:	1000021e 	bne	r2,zero,53d08 <alt_avalon_i2c_master_receive+0x1b4>
   53d00:	0109c404 	movi	r4,10000
   53d04:	00552b80 	call	552b8 <alt_busy_sleep>
            if (--timeout == 0)
   53d08:	e0bff617 	ldw	r2,-40(fp)
   53d0c:	10bfffc4 	addi	r2,r2,-1
   53d10:	e0bff615 	stw	r2,-40(fp)
   53d14:	e0bff617 	ldw	r2,-40(fp)
   53d18:	1000031e 	bne	r2,zero,53d28 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53d1c:	00bfff84 	movi	r2,-2
   53d20:	e0bff915 	stw	r2,-28(fp)
               break;
   53d24:	00000306 	br	53d34 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53d28:	e13ffb17 	ldw	r4,-20(fp)
   53d2c:	0052df40 	call	52df4 <alt_avalon_i2c_is_busy>
   53d30:	103ff01e 	bne	r2,zero,53cf4 <__alt_data_end+0xfffe1cf4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   53d34:	e0bff904 	addi	r2,fp,-28
   53d38:	100b883a 	mov	r5,r2
   53d3c:	e13ffb17 	ldw	r4,-20(fp)
   53d40:	00531c80 	call	531c8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53d44:	e13ffb17 	ldw	r4,-20(fp)
   53d48:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>
    }

    return status;
   53d4c:	e0bff917 	ldw	r2,-28(fp)
}
   53d50:	e037883a 	mov	sp,fp
   53d54:	dfc00117 	ldw	ra,4(sp)
   53d58:	df000017 	ldw	fp,0(sp)
   53d5c:	dec00204 	addi	sp,sp,8
   53d60:	f800283a 	ret

00053d64 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   53d64:	defff504 	addi	sp,sp,-44
   53d68:	dfc00a15 	stw	ra,40(sp)
   53d6c:	df000915 	stw	fp,36(sp)
   53d70:	df000904 	addi	fp,sp,36
   53d74:	e13ffb15 	stw	r4,-20(fp)
   53d78:	e17ffc15 	stw	r5,-16(fp)
   53d7c:	e1bffd15 	stw	r6,-12(fp)
   53d80:	3807883a 	mov	r3,r7
   53d84:	e0800217 	ldw	r2,8(fp)
   53d88:	e0fffe05 	stb	r3,-8(fp)
   53d8c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53d90:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   53d94:	e0bffb17 	ldw	r2,-20(fp)
   53d98:	10800717 	ldw	r2,28(r2)
   53d9c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   53da0:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   53da4:	e0bffd17 	ldw	r2,-12(fp)
   53da8:	1000021e 	bne	r2,zero,53db4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53dac:	0005883a 	mov	r2,zero
   53db0:	00006306 	br	53f40 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   53db4:	e0bffb17 	ldw	r2,-20(fp)
   53db8:	10c00617 	ldw	r3,24(r2)
   53dbc:	00800174 	movhi	r2,5
   53dc0:	1089a204 	addi	r2,r2,9864
   53dc4:	18800226 	beq	r3,r2,53dd0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   53dc8:	00bfff44 	movi	r2,-3
   53dcc:	00005c06 	br	53f40 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53dd0:	e0bffe03 	ldbu	r2,-8(fp)
   53dd4:	10000a1e 	bne	r2,zero,53e00 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53dd8:	e13ffb17 	ldw	r4,-20(fp)
   53ddc:	0052a040 	call	52a04 <alt_avalon_i2c_enable>
   53de0:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   53de4:	e0bff717 	ldw	r2,-36(fp)
   53de8:	10000226 	beq	r2,zero,53df4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   53dec:	e0bff717 	ldw	r2,-36(fp)
   53df0:	00005306 	br	53f40 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53df4:	01400704 	movi	r5,28
   53df8:	e13ffb17 	ldw	r4,-20(fp)
   53dfc:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53e00:	e0bffe03 	ldbu	r2,-8(fp)
   53e04:	100d883a 	mov	r6,r2
   53e08:	01400044 	movi	r5,1
   53e0c:	e13ffb17 	ldw	r4,-20(fp)
   53e10:	005306c0 	call	5306c <alt_avalon_i2c_send_address>
   53e14:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53e18:	e0bff717 	ldw	r2,-36(fp)
   53e1c:	1000191e 	bne	r2,zero,53e84 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53e20:	00000906 	br	53e48 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   53e24:	000f883a 	mov	r7,zero
   53e28:	000d883a 	mov	r6,zero
   53e2c:	000b883a 	mov	r5,zero
   53e30:	e13ffb17 	ldw	r4,-20(fp)
   53e34:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53e38:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   53e3c:	e0bff917 	ldw	r2,-28(fp)
   53e40:	10800044 	addi	r2,r2,1
   53e44:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53e48:	e0bffd17 	ldw	r2,-12(fp)
   53e4c:	10bfffc4 	addi	r2,r2,-1
   53e50:	e0fff917 	ldw	r3,-28(fp)
   53e54:	1880022e 	bgeu	r3,r2,53e60 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   53e58:	e0bff717 	ldw	r2,-36(fp)
   53e5c:	103ff126 	beq	r2,zero,53e24 <__alt_data_end+0xfffe1e24>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   53e60:	e0bff717 	ldw	r2,-36(fp)
   53e64:	1000071e 	bne	r2,zero,53e84 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   53e68:	e0bfff03 	ldbu	r2,-4(fp)
   53e6c:	100f883a 	mov	r7,r2
   53e70:	000d883a 	mov	r6,zero
   53e74:	000b883a 	mov	r5,zero
   53e78:	e13ffb17 	ldw	r4,-20(fp)
   53e7c:	0052f880 	call	52f88 <alt_avalon_i2c_cmd_write>
   53e80:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   53e84:	e0bff717 	ldw	r2,-36(fp)
   53e88:	10001826 	beq	r2,zero,53eec <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   53e8c:	0149c404 	movi	r5,10000
   53e90:	e13ffd17 	ldw	r4,-12(fp)
   53e94:	004146c0 	call	4146c <__mulsi3>
   53e98:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53e9c:	00000d06 	br	53ed4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53ea0:	e0bff817 	ldw	r2,-32(fp)
   53ea4:	108002a8 	cmpgeui	r2,r2,10
   53ea8:	1000021e 	bne	r2,zero,53eb4 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   53eac:	0109c404 	movi	r4,10000
   53eb0:	00552b80 	call	552b8 <alt_busy_sleep>
            if (--timeout == 0)
   53eb4:	e0bff817 	ldw	r2,-32(fp)
   53eb8:	10bfffc4 	addi	r2,r2,-1
   53ebc:	e0bff815 	stw	r2,-32(fp)
   53ec0:	e0bff817 	ldw	r2,-32(fp)
   53ec4:	1000031e 	bne	r2,zero,53ed4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53ec8:	00bfff84 	movi	r2,-2
   53ecc:	e0bff715 	stw	r2,-36(fp)
               break;
   53ed0:	00000306 	br	53ee0 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53ed4:	e13ffb17 	ldw	r4,-20(fp)
   53ed8:	0052df40 	call	52df4 <alt_avalon_i2c_is_busy>
   53edc:	103ff01e 	bne	r2,zero,53ea0 <__alt_data_end+0xfffe1ea0>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53ee0:	e13ffb17 	ldw	r4,-20(fp)
   53ee4:	0052a9c0 	call	52a9c <alt_avalon_i2c_disable>
   53ee8:	00001406 	br	53f3c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   53eec:	e0bfff03 	ldbu	r2,-4(fp)
   53ef0:	10001226 	beq	r2,zero,53f3c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53ef4:	01400704 	movi	r5,28
   53ef8:	e13ffb17 	ldw	r4,-20(fp)
   53efc:	0053ff00 	call	53ff0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   53f00:	000b883a 	mov	r5,zero
   53f04:	e13ffb17 	ldw	r4,-20(fp)
   53f08:	00541880 	call	54188 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   53f0c:	e0bffa17 	ldw	r2,-24(fp)
   53f10:	00c00084 	movi	r3,2
   53f14:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   53f18:	e0bffa17 	ldw	r2,-24(fp)
   53f1c:	e0fffc17 	ldw	r3,-16(fp)
   53f20:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   53f24:	e0bffa17 	ldw	r2,-24(fp)
   53f28:	e0fffd17 	ldw	r3,-12(fp)
   53f2c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   53f30:	01400084 	movi	r5,2
   53f34:	e13ffb17 	ldw	r4,-20(fp)
   53f38:	00540940 	call	54094 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   53f3c:	e0bff717 	ldw	r2,-36(fp)
}
   53f40:	e037883a 	mov	sp,fp
   53f44:	dfc00117 	ldw	ra,4(sp)
   53f48:	df000017 	ldw	fp,0(sp)
   53f4c:	dec00204 	addi	sp,sp,8
   53f50:	f800283a 	ret

00053f54 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   53f54:	defffd04 	addi	sp,sp,-12
   53f58:	df000215 	stw	fp,8(sp)
   53f5c:	df000204 	addi	fp,sp,8
   53f60:	e13ffe15 	stw	r4,-8(fp)
   53f64:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   53f68:	e0bffe17 	ldw	r2,-8(fp)
   53f6c:	10800317 	ldw	r2,12(r2)
   53f70:	10800404 	addi	r2,r2,16
   53f74:	10c00037 	ldwio	r3,0(r2)
   53f78:	e0bffe17 	ldw	r2,-8(fp)
   53f7c:	10800317 	ldw	r2,12(r2)
   53f80:	10800304 	addi	r2,r2,12
   53f84:	10800037 	ldwio	r2,0(r2)
   53f88:	1884703a 	and	r2,r3,r2
   53f8c:	1007883a 	mov	r3,r2
   53f90:	e0bfff17 	ldw	r2,-4(fp)
   53f94:	10c00015 	stw	r3,0(r2)
}
   53f98:	0001883a 	nop
   53f9c:	e037883a 	mov	sp,fp
   53fa0:	df000017 	ldw	fp,0(sp)
   53fa4:	dec00104 	addi	sp,sp,4
   53fa8:	f800283a 	ret

00053fac <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   53fac:	defffd04 	addi	sp,sp,-12
   53fb0:	df000215 	stw	fp,8(sp)
   53fb4:	df000204 	addi	fp,sp,8
   53fb8:	e13ffe15 	stw	r4,-8(fp)
   53fbc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   53fc0:	e0bffe17 	ldw	r2,-8(fp)
   53fc4:	10800317 	ldw	r2,12(r2)
   53fc8:	10800404 	addi	r2,r2,16
   53fcc:	10800037 	ldwio	r2,0(r2)
   53fd0:	1007883a 	mov	r3,r2
   53fd4:	e0bfff17 	ldw	r2,-4(fp)
   53fd8:	10c00015 	stw	r3,0(r2)
}
   53fdc:	0001883a 	nop
   53fe0:	e037883a 	mov	sp,fp
   53fe4:	df000017 	ldw	fp,0(sp)
   53fe8:	dec00104 	addi	sp,sp,4
   53fec:	f800283a 	ret

00053ff0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   53ff0:	defffd04 	addi	sp,sp,-12
   53ff4:	df000215 	stw	fp,8(sp)
   53ff8:	df000204 	addi	fp,sp,8
   53ffc:	e13ffe15 	stw	r4,-8(fp)
   54000:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   54004:	e0bffe17 	ldw	r2,-8(fp)
   54008:	10800317 	ldw	r2,12(r2)
   5400c:	10800404 	addi	r2,r2,16
   54010:	e0ffff17 	ldw	r3,-4(fp)
   54014:	10c00035 	stwio	r3,0(r2)
}
   54018:	0001883a 	nop
   5401c:	e037883a 	mov	sp,fp
   54020:	df000017 	ldw	fp,0(sp)
   54024:	dec00104 	addi	sp,sp,4
   54028:	f800283a 	ret

0005402c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   5402c:	defffb04 	addi	sp,sp,-20
   54030:	dfc00415 	stw	ra,16(sp)
   54034:	df000315 	stw	fp,12(sp)
   54038:	df000304 	addi	fp,sp,12
   5403c:	e13ffe15 	stw	r4,-8(fp)
   54040:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   54044:	e17ffd04 	addi	r5,fp,-12
   54048:	e13ffe17 	ldw	r4,-8(fp)
   5404c:	00540f80 	call	540f8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   54050:	e0bfff17 	ldw	r2,-4(fp)
   54054:	0086303a 	nor	r3,zero,r2
   54058:	e0bffd17 	ldw	r2,-12(fp)
   5405c:	1884703a 	and	r2,r3,r2
   54060:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   54064:	e0bffe17 	ldw	r2,-8(fp)
   54068:	10800317 	ldw	r2,12(r2)
   5406c:	10800304 	addi	r2,r2,12
   54070:	e0fffd17 	ldw	r3,-12(fp)
   54074:	18c007cc 	andi	r3,r3,31
   54078:	10c00035 	stwio	r3,0(r2)
}
   5407c:	0001883a 	nop
   54080:	e037883a 	mov	sp,fp
   54084:	dfc00117 	ldw	ra,4(sp)
   54088:	df000017 	ldw	fp,0(sp)
   5408c:	dec00204 	addi	sp,sp,8
   54090:	f800283a 	ret

00054094 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   54094:	defffb04 	addi	sp,sp,-20
   54098:	dfc00415 	stw	ra,16(sp)
   5409c:	df000315 	stw	fp,12(sp)
   540a0:	df000304 	addi	fp,sp,12
   540a4:	e13ffe15 	stw	r4,-8(fp)
   540a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   540ac:	e17ffd04 	addi	r5,fp,-12
   540b0:	e13ffe17 	ldw	r4,-8(fp)
   540b4:	00540f80 	call	540f8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   540b8:	e0fffd17 	ldw	r3,-12(fp)
   540bc:	e0bfff17 	ldw	r2,-4(fp)
   540c0:	1884b03a 	or	r2,r3,r2
   540c4:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   540c8:	e0bffe17 	ldw	r2,-8(fp)
   540cc:	10800317 	ldw	r2,12(r2)
   540d0:	10800304 	addi	r2,r2,12
   540d4:	e0fffd17 	ldw	r3,-12(fp)
   540d8:	18c007cc 	andi	r3,r3,31
   540dc:	10c00035 	stwio	r3,0(r2)
}
   540e0:	0001883a 	nop
   540e4:	e037883a 	mov	sp,fp
   540e8:	dfc00117 	ldw	ra,4(sp)
   540ec:	df000017 	ldw	fp,0(sp)
   540f0:	dec00204 	addi	sp,sp,8
   540f4:	f800283a 	ret

000540f8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   540f8:	defffd04 	addi	sp,sp,-12
   540fc:	df000215 	stw	fp,8(sp)
   54100:	df000204 	addi	fp,sp,8
   54104:	e13ffe15 	stw	r4,-8(fp)
   54108:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   5410c:	e0bffe17 	ldw	r2,-8(fp)
   54110:	10800317 	ldw	r2,12(r2)
   54114:	10800304 	addi	r2,r2,12
   54118:	10800037 	ldwio	r2,0(r2)
   5411c:	10c007cc 	andi	r3,r2,31
   54120:	e0bfff17 	ldw	r2,-4(fp)
   54124:	10c00015 	stw	r3,0(r2)
}
   54128:	0001883a 	nop
   5412c:	e037883a 	mov	sp,fp
   54130:	df000017 	ldw	fp,0(sp)
   54134:	dec00104 	addi	sp,sp,4
   54138:	f800283a 	ret

0005413c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   5413c:	defffd04 	addi	sp,sp,-12
   54140:	df000215 	stw	fp,8(sp)
   54144:	df000204 	addi	fp,sp,8
   54148:	e13ffe15 	stw	r4,-8(fp)
   5414c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   54150:	e0bffe17 	ldw	r2,-8(fp)
   54154:	10800317 	ldw	r2,12(r2)
   54158:	10800204 	addi	r2,r2,8
   5415c:	10800037 	ldwio	r2,0(r2)
   54160:	10800c0c 	andi	r2,r2,48
   54164:	1005d13a 	srai	r2,r2,4
   54168:	1007883a 	mov	r3,r2
   5416c:	e0bfff17 	ldw	r2,-4(fp)
   54170:	10c00015 	stw	r3,0(r2)
}
   54174:	0001883a 	nop
   54178:	e037883a 	mov	sp,fp
   5417c:	df000017 	ldw	fp,0(sp)
   54180:	dec00104 	addi	sp,sp,4
   54184:	f800283a 	ret

00054188 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   54188:	defffd04 	addi	sp,sp,-12
   5418c:	df000215 	stw	fp,8(sp)
   54190:	df000204 	addi	fp,sp,8
   54194:	e13ffe15 	stw	r4,-8(fp)
   54198:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   5419c:	e0bffe17 	ldw	r2,-8(fp)
   541a0:	10800317 	ldw	r2,12(r2)
   541a4:	10800204 	addi	r2,r2,8
   541a8:	e0fffe17 	ldw	r3,-8(fp)
   541ac:	18c00317 	ldw	r3,12(r3)
   541b0:	18c00204 	addi	r3,r3,8
   541b4:	18c00037 	ldwio	r3,0(r3)
   541b8:	1809883a 	mov	r4,r3
   541bc:	00fff3c4 	movi	r3,-49
   541c0:	20c8703a 	and	r4,r4,r3
   541c4:	e0ffff17 	ldw	r3,-4(fp)
   541c8:	1806913a 	slli	r3,r3,4
   541cc:	18c00c0c 	andi	r3,r3,48
   541d0:	20c6b03a 	or	r3,r4,r3
   541d4:	10c00035 	stwio	r3,0(r2)
}
   541d8:	0001883a 	nop
   541dc:	e037883a 	mov	sp,fp
   541e0:	df000017 	ldw	fp,0(sp)
   541e4:	dec00104 	addi	sp,sp,4
   541e8:	f800283a 	ret

000541ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   541ec:	defffd04 	addi	sp,sp,-12
   541f0:	df000215 	stw	fp,8(sp)
   541f4:	df000204 	addi	fp,sp,8
   541f8:	e13ffe15 	stw	r4,-8(fp)
   541fc:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   54200:	e0bffe17 	ldw	r2,-8(fp)
   54204:	10800317 	ldw	r2,12(r2)
   54208:	10800204 	addi	r2,r2,8
   5420c:	10800037 	ldwio	r2,0(r2)
   54210:	1080030c 	andi	r2,r2,12
   54214:	1005d0ba 	srai	r2,r2,2
   54218:	1007883a 	mov	r3,r2
   5421c:	e0bfff17 	ldw	r2,-4(fp)
   54220:	10c00015 	stw	r3,0(r2)
}
   54224:	0001883a 	nop
   54228:	e037883a 	mov	sp,fp
   5422c:	df000017 	ldw	fp,0(sp)
   54230:	dec00104 	addi	sp,sp,4
   54234:	f800283a 	ret

00054238 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   54238:	defffd04 	addi	sp,sp,-12
   5423c:	df000215 	stw	fp,8(sp)
   54240:	df000204 	addi	fp,sp,8
   54244:	e13ffe15 	stw	r4,-8(fp)
   54248:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   5424c:	e0bffe17 	ldw	r2,-8(fp)
   54250:	10800317 	ldw	r2,12(r2)
   54254:	10c00204 	addi	r3,r2,8
   54258:	e0bffe17 	ldw	r2,-8(fp)
   5425c:	10800317 	ldw	r2,12(r2)
   54260:	10800204 	addi	r2,r2,8
   54264:	10800037 	ldwio	r2,0(r2)
   54268:	1009883a 	mov	r4,r2
   5426c:	00bffcc4 	movi	r2,-13
   54270:	2088703a 	and	r4,r4,r2
   54274:	e0bfff17 	ldw	r2,-4(fp)
   54278:	1085883a 	add	r2,r2,r2
   5427c:	1085883a 	add	r2,r2,r2
   54280:	1080030c 	andi	r2,r2,12
   54284:	2084b03a 	or	r2,r4,r2
   54288:	18800035 	stwio	r2,0(r3)
}
   5428c:	0001883a 	nop
   54290:	e037883a 	mov	sp,fp
   54294:	df000017 	ldw	fp,0(sp)
   54298:	dec00104 	addi	sp,sp,4
   5429c:	f800283a 	ret

000542a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   542a0:	defffa04 	addi	sp,sp,-24
   542a4:	dfc00515 	stw	ra,20(sp)
   542a8:	df000415 	stw	fp,16(sp)
   542ac:	df000404 	addi	fp,sp,16
   542b0:	e13ffd15 	stw	r4,-12(fp)
   542b4:	e17ffe15 	stw	r5,-8(fp)
   542b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   542bc:	e0bffd17 	ldw	r2,-12(fp)
   542c0:	10800017 	ldw	r2,0(r2)
   542c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   542c8:	e0bffc17 	ldw	r2,-16(fp)
   542cc:	10c00a04 	addi	r3,r2,40
   542d0:	e0bffd17 	ldw	r2,-12(fp)
   542d4:	10800217 	ldw	r2,8(r2)
   542d8:	100f883a 	mov	r7,r2
   542dc:	e1bfff17 	ldw	r6,-4(fp)
   542e0:	e17ffe17 	ldw	r5,-8(fp)
   542e4:	1809883a 	mov	r4,r3
   542e8:	00548c80 	call	548c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   542ec:	e037883a 	mov	sp,fp
   542f0:	dfc00117 	ldw	ra,4(sp)
   542f4:	df000017 	ldw	fp,0(sp)
   542f8:	dec00204 	addi	sp,sp,8
   542fc:	f800283a 	ret

00054300 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   54300:	defffa04 	addi	sp,sp,-24
   54304:	dfc00515 	stw	ra,20(sp)
   54308:	df000415 	stw	fp,16(sp)
   5430c:	df000404 	addi	fp,sp,16
   54310:	e13ffd15 	stw	r4,-12(fp)
   54314:	e17ffe15 	stw	r5,-8(fp)
   54318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5431c:	e0bffd17 	ldw	r2,-12(fp)
   54320:	10800017 	ldw	r2,0(r2)
   54324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   54328:	e0bffc17 	ldw	r2,-16(fp)
   5432c:	10c00a04 	addi	r3,r2,40
   54330:	e0bffd17 	ldw	r2,-12(fp)
   54334:	10800217 	ldw	r2,8(r2)
   54338:	100f883a 	mov	r7,r2
   5433c:	e1bfff17 	ldw	r6,-4(fp)
   54340:	e17ffe17 	ldw	r5,-8(fp)
   54344:	1809883a 	mov	r4,r3
   54348:	0054ae40 	call	54ae4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   5434c:	e037883a 	mov	sp,fp
   54350:	dfc00117 	ldw	ra,4(sp)
   54354:	df000017 	ldw	fp,0(sp)
   54358:	dec00204 	addi	sp,sp,8
   5435c:	f800283a 	ret

00054360 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   54360:	defffc04 	addi	sp,sp,-16
   54364:	dfc00315 	stw	ra,12(sp)
   54368:	df000215 	stw	fp,8(sp)
   5436c:	df000204 	addi	fp,sp,8
   54370:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   54374:	e0bfff17 	ldw	r2,-4(fp)
   54378:	10800017 	ldw	r2,0(r2)
   5437c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   54380:	e0bffe17 	ldw	r2,-8(fp)
   54384:	10c00a04 	addi	r3,r2,40
   54388:	e0bfff17 	ldw	r2,-4(fp)
   5438c:	10800217 	ldw	r2,8(r2)
   54390:	100b883a 	mov	r5,r2
   54394:	1809883a 	mov	r4,r3
   54398:	00547700 	call	54770 <altera_avalon_jtag_uart_close>
}
   5439c:	e037883a 	mov	sp,fp
   543a0:	dfc00117 	ldw	ra,4(sp)
   543a4:	df000017 	ldw	fp,0(sp)
   543a8:	dec00204 	addi	sp,sp,8
   543ac:	f800283a 	ret

000543b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   543b0:	defffa04 	addi	sp,sp,-24
   543b4:	dfc00515 	stw	ra,20(sp)
   543b8:	df000415 	stw	fp,16(sp)
   543bc:	df000404 	addi	fp,sp,16
   543c0:	e13ffd15 	stw	r4,-12(fp)
   543c4:	e17ffe15 	stw	r5,-8(fp)
   543c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   543cc:	e0bffd17 	ldw	r2,-12(fp)
   543d0:	10800017 	ldw	r2,0(r2)
   543d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   543d8:	e0bffc17 	ldw	r2,-16(fp)
   543dc:	10800a04 	addi	r2,r2,40
   543e0:	e1bfff17 	ldw	r6,-4(fp)
   543e4:	e17ffe17 	ldw	r5,-8(fp)
   543e8:	1009883a 	mov	r4,r2
   543ec:	00547d80 	call	547d8 <altera_avalon_jtag_uart_ioctl>
}
   543f0:	e037883a 	mov	sp,fp
   543f4:	dfc00117 	ldw	ra,4(sp)
   543f8:	df000017 	ldw	fp,0(sp)
   543fc:	dec00204 	addi	sp,sp,8
   54400:	f800283a 	ret

00054404 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   54404:	defffa04 	addi	sp,sp,-24
   54408:	dfc00515 	stw	ra,20(sp)
   5440c:	df000415 	stw	fp,16(sp)
   54410:	df000404 	addi	fp,sp,16
   54414:	e13ffd15 	stw	r4,-12(fp)
   54418:	e17ffe15 	stw	r5,-8(fp)
   5441c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   54420:	e0bffd17 	ldw	r2,-12(fp)
   54424:	00c00044 	movi	r3,1
   54428:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   5442c:	e0bffd17 	ldw	r2,-12(fp)
   54430:	10800017 	ldw	r2,0(r2)
   54434:	10800104 	addi	r2,r2,4
   54438:	1007883a 	mov	r3,r2
   5443c:	e0bffd17 	ldw	r2,-12(fp)
   54440:	10800817 	ldw	r2,32(r2)
   54444:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   54448:	e0bffe17 	ldw	r2,-8(fp)
   5444c:	e0ffff17 	ldw	r3,-4(fp)
   54450:	d8000015 	stw	zero,0(sp)
   54454:	e1fffd17 	ldw	r7,-12(fp)
   54458:	01800174 	movhi	r6,5
   5445c:	31913104 	addi	r6,r6,17604
   54460:	180b883a 	mov	r5,r3
   54464:	1009883a 	mov	r4,r2
   54468:	00556800 	call	55680 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   5446c:	e0bffd17 	ldw	r2,-12(fp)
   54470:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   54474:	e0bffd17 	ldw	r2,-12(fp)
   54478:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5447c:	d0e70817 	ldw	r3,-25568(gp)
   54480:	e1fffd17 	ldw	r7,-12(fp)
   54484:	01800174 	movhi	r6,5
   54488:	3191b404 	addi	r6,r6,18128
   5448c:	180b883a 	mov	r5,r3
   54490:	1009883a 	mov	r4,r2
   54494:	005518c0 	call	5518c <alt_alarm_start>
   54498:	1000040e 	bge	r2,zero,544ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   5449c:	e0fffd17 	ldw	r3,-12(fp)
   544a0:	00a00034 	movhi	r2,32768
   544a4:	10bfffc4 	addi	r2,r2,-1
   544a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   544ac:	0001883a 	nop
   544b0:	e037883a 	mov	sp,fp
   544b4:	dfc00117 	ldw	ra,4(sp)
   544b8:	df000017 	ldw	fp,0(sp)
   544bc:	dec00204 	addi	sp,sp,8
   544c0:	f800283a 	ret

000544c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   544c4:	defff804 	addi	sp,sp,-32
   544c8:	df000715 	stw	fp,28(sp)
   544cc:	df000704 	addi	fp,sp,28
   544d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   544d4:	e0bfff17 	ldw	r2,-4(fp)
   544d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   544dc:	e0bffb17 	ldw	r2,-20(fp)
   544e0:	10800017 	ldw	r2,0(r2)
   544e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   544e8:	e0bffc17 	ldw	r2,-16(fp)
   544ec:	10800104 	addi	r2,r2,4
   544f0:	10800037 	ldwio	r2,0(r2)
   544f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   544f8:	e0bffd17 	ldw	r2,-12(fp)
   544fc:	1080c00c 	andi	r2,r2,768
   54500:	10006d26 	beq	r2,zero,546b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   54504:	e0bffd17 	ldw	r2,-12(fp)
   54508:	1080400c 	andi	r2,r2,256
   5450c:	10003526 	beq	r2,zero,545e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   54510:	00800074 	movhi	r2,1
   54514:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54518:	e0bffb17 	ldw	r2,-20(fp)
   5451c:	10800a17 	ldw	r2,40(r2)
   54520:	10800044 	addi	r2,r2,1
   54524:	1081ffcc 	andi	r2,r2,2047
   54528:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   5452c:	e0bffb17 	ldw	r2,-20(fp)
   54530:	10c00b17 	ldw	r3,44(r2)
   54534:	e0bffe17 	ldw	r2,-8(fp)
   54538:	18801526 	beq	r3,r2,54590 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   5453c:	e0bffc17 	ldw	r2,-16(fp)
   54540:	10800037 	ldwio	r2,0(r2)
   54544:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   54548:	e0bff917 	ldw	r2,-28(fp)
   5454c:	10a0000c 	andi	r2,r2,32768
   54550:	10001126 	beq	r2,zero,54598 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   54554:	e0bffb17 	ldw	r2,-20(fp)
   54558:	10800a17 	ldw	r2,40(r2)
   5455c:	e0fff917 	ldw	r3,-28(fp)
   54560:	1809883a 	mov	r4,r3
   54564:	e0fffb17 	ldw	r3,-20(fp)
   54568:	1885883a 	add	r2,r3,r2
   5456c:	10800e04 	addi	r2,r2,56
   54570:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54574:	e0bffb17 	ldw	r2,-20(fp)
   54578:	10800a17 	ldw	r2,40(r2)
   5457c:	10800044 	addi	r2,r2,1
   54580:	10c1ffcc 	andi	r3,r2,2047
   54584:	e0bffb17 	ldw	r2,-20(fp)
   54588:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   5458c:	003fe206 	br	54518 <__alt_data_end+0xfffe2518>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   54590:	0001883a 	nop
   54594:	00000106 	br	5459c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   54598:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   5459c:	e0bff917 	ldw	r2,-28(fp)
   545a0:	10bfffec 	andhi	r2,r2,65535
   545a4:	10000f26 	beq	r2,zero,545e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   545a8:	e0bffb17 	ldw	r2,-20(fp)
   545ac:	10c00817 	ldw	r3,32(r2)
   545b0:	00bfff84 	movi	r2,-2
   545b4:	1886703a 	and	r3,r3,r2
   545b8:	e0bffb17 	ldw	r2,-20(fp)
   545bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   545c0:	e0bffc17 	ldw	r2,-16(fp)
   545c4:	10800104 	addi	r2,r2,4
   545c8:	1007883a 	mov	r3,r2
   545cc:	e0bffb17 	ldw	r2,-20(fp)
   545d0:	10800817 	ldw	r2,32(r2)
   545d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   545d8:	e0bffc17 	ldw	r2,-16(fp)
   545dc:	10800104 	addi	r2,r2,4
   545e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   545e4:	e0bffd17 	ldw	r2,-12(fp)
   545e8:	1080800c 	andi	r2,r2,512
   545ec:	103fbe26 	beq	r2,zero,544e8 <__alt_data_end+0xfffe24e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   545f0:	e0bffd17 	ldw	r2,-12(fp)
   545f4:	1004d43a 	srli	r2,r2,16
   545f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   545fc:	00001406 	br	54650 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   54600:	e0bffc17 	ldw	r2,-16(fp)
   54604:	e0fffb17 	ldw	r3,-20(fp)
   54608:	18c00d17 	ldw	r3,52(r3)
   5460c:	e13ffb17 	ldw	r4,-20(fp)
   54610:	20c7883a 	add	r3,r4,r3
   54614:	18c20e04 	addi	r3,r3,2104
   54618:	18c00003 	ldbu	r3,0(r3)
   5461c:	18c03fcc 	andi	r3,r3,255
   54620:	18c0201c 	xori	r3,r3,128
   54624:	18ffe004 	addi	r3,r3,-128
   54628:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5462c:	e0bffb17 	ldw	r2,-20(fp)
   54630:	10800d17 	ldw	r2,52(r2)
   54634:	10800044 	addi	r2,r2,1
   54638:	10c1ffcc 	andi	r3,r2,2047
   5463c:	e0bffb17 	ldw	r2,-20(fp)
   54640:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   54644:	e0bffa17 	ldw	r2,-24(fp)
   54648:	10bfffc4 	addi	r2,r2,-1
   5464c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   54650:	e0bffa17 	ldw	r2,-24(fp)
   54654:	10000526 	beq	r2,zero,5466c <altera_avalon_jtag_uart_irq+0x1a8>
   54658:	e0bffb17 	ldw	r2,-20(fp)
   5465c:	10c00d17 	ldw	r3,52(r2)
   54660:	e0bffb17 	ldw	r2,-20(fp)
   54664:	10800c17 	ldw	r2,48(r2)
   54668:	18bfe51e 	bne	r3,r2,54600 <__alt_data_end+0xfffe2600>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   5466c:	e0bffa17 	ldw	r2,-24(fp)
   54670:	103f9d26 	beq	r2,zero,544e8 <__alt_data_end+0xfffe24e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54674:	e0bffb17 	ldw	r2,-20(fp)
   54678:	10c00817 	ldw	r3,32(r2)
   5467c:	00bfff44 	movi	r2,-3
   54680:	1886703a 	and	r3,r3,r2
   54684:	e0bffb17 	ldw	r2,-20(fp)
   54688:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5468c:	e0bffb17 	ldw	r2,-20(fp)
   54690:	10800017 	ldw	r2,0(r2)
   54694:	10800104 	addi	r2,r2,4
   54698:	1007883a 	mov	r3,r2
   5469c:	e0bffb17 	ldw	r2,-20(fp)
   546a0:	10800817 	ldw	r2,32(r2)
   546a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   546a8:	e0bffc17 	ldw	r2,-16(fp)
   546ac:	10800104 	addi	r2,r2,4
   546b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   546b4:	003f8c06 	br	544e8 <__alt_data_end+0xfffe24e8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   546b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   546bc:	0001883a 	nop
   546c0:	e037883a 	mov	sp,fp
   546c4:	df000017 	ldw	fp,0(sp)
   546c8:	dec00104 	addi	sp,sp,4
   546cc:	f800283a 	ret

000546d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   546d0:	defff804 	addi	sp,sp,-32
   546d4:	df000715 	stw	fp,28(sp)
   546d8:	df000704 	addi	fp,sp,28
   546dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   546e0:	e0bffb17 	ldw	r2,-20(fp)
   546e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   546e8:	e0bff917 	ldw	r2,-28(fp)
   546ec:	10800017 	ldw	r2,0(r2)
   546f0:	10800104 	addi	r2,r2,4
   546f4:	10800037 	ldwio	r2,0(r2)
   546f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   546fc:	e0bffa17 	ldw	r2,-24(fp)
   54700:	1081000c 	andi	r2,r2,1024
   54704:	10000b26 	beq	r2,zero,54734 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   54708:	e0bff917 	ldw	r2,-28(fp)
   5470c:	10800017 	ldw	r2,0(r2)
   54710:	10800104 	addi	r2,r2,4
   54714:	1007883a 	mov	r3,r2
   54718:	e0bff917 	ldw	r2,-28(fp)
   5471c:	10800817 	ldw	r2,32(r2)
   54720:	10810014 	ori	r2,r2,1024
   54724:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   54728:	e0bff917 	ldw	r2,-28(fp)
   5472c:	10000915 	stw	zero,36(r2)
   54730:	00000a06 	br	5475c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   54734:	e0bff917 	ldw	r2,-28(fp)
   54738:	10c00917 	ldw	r3,36(r2)
   5473c:	00a00034 	movhi	r2,32768
   54740:	10bfff04 	addi	r2,r2,-4
   54744:	10c00536 	bltu	r2,r3,5475c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   54748:	e0bff917 	ldw	r2,-28(fp)
   5474c:	10800917 	ldw	r2,36(r2)
   54750:	10c00044 	addi	r3,r2,1
   54754:	e0bff917 	ldw	r2,-28(fp)
   54758:	10c00915 	stw	r3,36(r2)
   5475c:	d0a70817 	ldw	r2,-25568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   54760:	e037883a 	mov	sp,fp
   54764:	df000017 	ldw	fp,0(sp)
   54768:	dec00104 	addi	sp,sp,4
   5476c:	f800283a 	ret

00054770 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   54770:	defffd04 	addi	sp,sp,-12
   54774:	df000215 	stw	fp,8(sp)
   54778:	df000204 	addi	fp,sp,8
   5477c:	e13ffe15 	stw	r4,-8(fp)
   54780:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   54784:	00000506 	br	5479c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   54788:	e0bfff17 	ldw	r2,-4(fp)
   5478c:	1090000c 	andi	r2,r2,16384
   54790:	10000226 	beq	r2,zero,5479c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   54794:	00bffd44 	movi	r2,-11
   54798:	00000b06 	br	547c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   5479c:	e0bffe17 	ldw	r2,-8(fp)
   547a0:	10c00d17 	ldw	r3,52(r2)
   547a4:	e0bffe17 	ldw	r2,-8(fp)
   547a8:	10800c17 	ldw	r2,48(r2)
   547ac:	18800526 	beq	r3,r2,547c4 <altera_avalon_jtag_uart_close+0x54>
   547b0:	e0bffe17 	ldw	r2,-8(fp)
   547b4:	10c00917 	ldw	r3,36(r2)
   547b8:	e0bffe17 	ldw	r2,-8(fp)
   547bc:	10800117 	ldw	r2,4(r2)
   547c0:	18bff136 	bltu	r3,r2,54788 <__alt_data_end+0xfffe2788>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   547c4:	0005883a 	mov	r2,zero
}
   547c8:	e037883a 	mov	sp,fp
   547cc:	df000017 	ldw	fp,0(sp)
   547d0:	dec00104 	addi	sp,sp,4
   547d4:	f800283a 	ret

000547d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   547d8:	defffa04 	addi	sp,sp,-24
   547dc:	df000515 	stw	fp,20(sp)
   547e0:	df000504 	addi	fp,sp,20
   547e4:	e13ffd15 	stw	r4,-12(fp)
   547e8:	e17ffe15 	stw	r5,-8(fp)
   547ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   547f0:	00bff9c4 	movi	r2,-25
   547f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   547f8:	e0bffe17 	ldw	r2,-8(fp)
   547fc:	10da8060 	cmpeqi	r3,r2,27137
   54800:	1800031e 	bne	r3,zero,54810 <altera_avalon_jtag_uart_ioctl+0x38>
   54804:	109a80a0 	cmpeqi	r2,r2,27138
   54808:	1000181e 	bne	r2,zero,5486c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   5480c:	00002906 	br	548b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   54810:	e0bffd17 	ldw	r2,-12(fp)
   54814:	10c00117 	ldw	r3,4(r2)
   54818:	00a00034 	movhi	r2,32768
   5481c:	10bfffc4 	addi	r2,r2,-1
   54820:	18802126 	beq	r3,r2,548a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   54824:	e0bfff17 	ldw	r2,-4(fp)
   54828:	10800017 	ldw	r2,0(r2)
   5482c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   54830:	e0bffc17 	ldw	r2,-16(fp)
   54834:	10800090 	cmplti	r2,r2,2
   54838:	1000061e 	bne	r2,zero,54854 <altera_avalon_jtag_uart_ioctl+0x7c>
   5483c:	e0fffc17 	ldw	r3,-16(fp)
   54840:	00a00034 	movhi	r2,32768
   54844:	10bfffc4 	addi	r2,r2,-1
   54848:	18800226 	beq	r3,r2,54854 <altera_avalon_jtag_uart_ioctl+0x7c>
   5484c:	e0bffc17 	ldw	r2,-16(fp)
   54850:	00000206 	br	5485c <altera_avalon_jtag_uart_ioctl+0x84>
   54854:	00a00034 	movhi	r2,32768
   54858:	10bfff84 	addi	r2,r2,-2
   5485c:	e0fffd17 	ldw	r3,-12(fp)
   54860:	18800115 	stw	r2,4(r3)
      rc = 0;
   54864:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   54868:	00000f06 	br	548a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   5486c:	e0bffd17 	ldw	r2,-12(fp)
   54870:	10c00117 	ldw	r3,4(r2)
   54874:	00a00034 	movhi	r2,32768
   54878:	10bfffc4 	addi	r2,r2,-1
   5487c:	18800c26 	beq	r3,r2,548b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   54880:	e0bffd17 	ldw	r2,-12(fp)
   54884:	10c00917 	ldw	r3,36(r2)
   54888:	e0bffd17 	ldw	r2,-12(fp)
   5488c:	10800117 	ldw	r2,4(r2)
   54890:	1885803a 	cmpltu	r2,r3,r2
   54894:	10c03fcc 	andi	r3,r2,255
   54898:	e0bfff17 	ldw	r2,-4(fp)
   5489c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   548a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   548a4:	00000206 	br	548b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   548a8:	0001883a 	nop
   548ac:	00000106 	br	548b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   548b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   548b4:	e0bffb17 	ldw	r2,-20(fp)
}
   548b8:	e037883a 	mov	sp,fp
   548bc:	df000017 	ldw	fp,0(sp)
   548c0:	dec00104 	addi	sp,sp,4
   548c4:	f800283a 	ret

000548c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   548c8:	defff304 	addi	sp,sp,-52
   548cc:	dfc00c15 	stw	ra,48(sp)
   548d0:	df000b15 	stw	fp,44(sp)
   548d4:	df000b04 	addi	fp,sp,44
   548d8:	e13ffc15 	stw	r4,-16(fp)
   548dc:	e17ffd15 	stw	r5,-12(fp)
   548e0:	e1bffe15 	stw	r6,-8(fp)
   548e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   548e8:	e0bffd17 	ldw	r2,-12(fp)
   548ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   548f0:	00004706 	br	54a10 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   548f4:	e0bffc17 	ldw	r2,-16(fp)
   548f8:	10800a17 	ldw	r2,40(r2)
   548fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   54900:	e0bffc17 	ldw	r2,-16(fp)
   54904:	10800b17 	ldw	r2,44(r2)
   54908:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   5490c:	e0fff717 	ldw	r3,-36(fp)
   54910:	e0bff817 	ldw	r2,-32(fp)
   54914:	18800536 	bltu	r3,r2,5492c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   54918:	e0fff717 	ldw	r3,-36(fp)
   5491c:	e0bff817 	ldw	r2,-32(fp)
   54920:	1885c83a 	sub	r2,r3,r2
   54924:	e0bff615 	stw	r2,-40(fp)
   54928:	00000406 	br	5493c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   5492c:	00c20004 	movi	r3,2048
   54930:	e0bff817 	ldw	r2,-32(fp)
   54934:	1885c83a 	sub	r2,r3,r2
   54938:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   5493c:	e0bff617 	ldw	r2,-40(fp)
   54940:	10001e26 	beq	r2,zero,549bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   54944:	e0fffe17 	ldw	r3,-8(fp)
   54948:	e0bff617 	ldw	r2,-40(fp)
   5494c:	1880022e 	bgeu	r3,r2,54958 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   54950:	e0bffe17 	ldw	r2,-8(fp)
   54954:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   54958:	e0bffc17 	ldw	r2,-16(fp)
   5495c:	10c00e04 	addi	r3,r2,56
   54960:	e0bff817 	ldw	r2,-32(fp)
   54964:	1885883a 	add	r2,r3,r2
   54968:	e1bff617 	ldw	r6,-40(fp)
   5496c:	100b883a 	mov	r5,r2
   54970:	e13ff517 	ldw	r4,-44(fp)
   54974:	00494280 	call	49428 <memcpy>
      ptr   += n;
   54978:	e0fff517 	ldw	r3,-44(fp)
   5497c:	e0bff617 	ldw	r2,-40(fp)
   54980:	1885883a 	add	r2,r3,r2
   54984:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   54988:	e0fffe17 	ldw	r3,-8(fp)
   5498c:	e0bff617 	ldw	r2,-40(fp)
   54990:	1885c83a 	sub	r2,r3,r2
   54994:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54998:	e0fff817 	ldw	r3,-32(fp)
   5499c:	e0bff617 	ldw	r2,-40(fp)
   549a0:	1885883a 	add	r2,r3,r2
   549a4:	10c1ffcc 	andi	r3,r2,2047
   549a8:	e0bffc17 	ldw	r2,-16(fp)
   549ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   549b0:	e0bffe17 	ldw	r2,-8(fp)
   549b4:	00bfcf16 	blt	zero,r2,548f4 <__alt_data_end+0xfffe28f4>
   549b8:	00000106 	br	549c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   549bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   549c0:	e0fff517 	ldw	r3,-44(fp)
   549c4:	e0bffd17 	ldw	r2,-12(fp)
   549c8:	1880141e 	bne	r3,r2,54a1c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   549cc:	e0bfff17 	ldw	r2,-4(fp)
   549d0:	1090000c 	andi	r2,r2,16384
   549d4:	1000131e 	bne	r2,zero,54a24 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   549d8:	0001883a 	nop
   549dc:	e0bffc17 	ldw	r2,-16(fp)
   549e0:	10c00a17 	ldw	r3,40(r2)
   549e4:	e0bff717 	ldw	r2,-36(fp)
   549e8:	1880051e 	bne	r3,r2,54a00 <altera_avalon_jtag_uart_read+0x138>
   549ec:	e0bffc17 	ldw	r2,-16(fp)
   549f0:	10c00917 	ldw	r3,36(r2)
   549f4:	e0bffc17 	ldw	r2,-16(fp)
   549f8:	10800117 	ldw	r2,4(r2)
   549fc:	18bff736 	bltu	r3,r2,549dc <__alt_data_end+0xfffe29dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   54a00:	e0bffc17 	ldw	r2,-16(fp)
   54a04:	10c00a17 	ldw	r3,40(r2)
   54a08:	e0bff717 	ldw	r2,-36(fp)
   54a0c:	18800726 	beq	r3,r2,54a2c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54a10:	e0bffe17 	ldw	r2,-8(fp)
   54a14:	00bfb716 	blt	zero,r2,548f4 <__alt_data_end+0xfffe28f4>
   54a18:	00000506 	br	54a30 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   54a1c:	0001883a 	nop
   54a20:	00000306 	br	54a30 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   54a24:	0001883a 	nop
   54a28:	00000106 	br	54a30 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   54a2c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   54a30:	e0fff517 	ldw	r3,-44(fp)
   54a34:	e0bffd17 	ldw	r2,-12(fp)
   54a38:	18801826 	beq	r3,r2,54a9c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54a3c:	0005303a 	rdctl	r2,status
   54a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54a44:	e0fffb17 	ldw	r3,-20(fp)
   54a48:	00bfff84 	movi	r2,-2
   54a4c:	1884703a 	and	r2,r3,r2
   54a50:	1001703a 	wrctl	status,r2
  
  return context;
   54a54:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   54a58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   54a5c:	e0bffc17 	ldw	r2,-16(fp)
   54a60:	10800817 	ldw	r2,32(r2)
   54a64:	10c00054 	ori	r3,r2,1
   54a68:	e0bffc17 	ldw	r2,-16(fp)
   54a6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54a70:	e0bffc17 	ldw	r2,-16(fp)
   54a74:	10800017 	ldw	r2,0(r2)
   54a78:	10800104 	addi	r2,r2,4
   54a7c:	1007883a 	mov	r3,r2
   54a80:	e0bffc17 	ldw	r2,-16(fp)
   54a84:	10800817 	ldw	r2,32(r2)
   54a88:	18800035 	stwio	r2,0(r3)
   54a8c:	e0bffa17 	ldw	r2,-24(fp)
   54a90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54a94:	e0bff917 	ldw	r2,-28(fp)
   54a98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   54a9c:	e0fff517 	ldw	r3,-44(fp)
   54aa0:	e0bffd17 	ldw	r2,-12(fp)
   54aa4:	18800426 	beq	r3,r2,54ab8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   54aa8:	e0fff517 	ldw	r3,-44(fp)
   54aac:	e0bffd17 	ldw	r2,-12(fp)
   54ab0:	1885c83a 	sub	r2,r3,r2
   54ab4:	00000606 	br	54ad0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   54ab8:	e0bfff17 	ldw	r2,-4(fp)
   54abc:	1090000c 	andi	r2,r2,16384
   54ac0:	10000226 	beq	r2,zero,54acc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   54ac4:	00bffd44 	movi	r2,-11
   54ac8:	00000106 	br	54ad0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   54acc:	00bffec4 	movi	r2,-5
}
   54ad0:	e037883a 	mov	sp,fp
   54ad4:	dfc00117 	ldw	ra,4(sp)
   54ad8:	df000017 	ldw	fp,0(sp)
   54adc:	dec00204 	addi	sp,sp,8
   54ae0:	f800283a 	ret

00054ae4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54ae4:	defff304 	addi	sp,sp,-52
   54ae8:	dfc00c15 	stw	ra,48(sp)
   54aec:	df000b15 	stw	fp,44(sp)
   54af0:	df000b04 	addi	fp,sp,44
   54af4:	e13ffc15 	stw	r4,-16(fp)
   54af8:	e17ffd15 	stw	r5,-12(fp)
   54afc:	e1bffe15 	stw	r6,-8(fp)
   54b00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54b04:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   54b08:	e0bffd17 	ldw	r2,-12(fp)
   54b0c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54b10:	00003706 	br	54bf0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54b14:	e0bffc17 	ldw	r2,-16(fp)
   54b18:	10800c17 	ldw	r2,48(r2)
   54b1c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   54b20:	e0bffc17 	ldw	r2,-16(fp)
   54b24:	10800d17 	ldw	r2,52(r2)
   54b28:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   54b2c:	e0fff917 	ldw	r3,-28(fp)
   54b30:	e0bff517 	ldw	r2,-44(fp)
   54b34:	1880062e 	bgeu	r3,r2,54b50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   54b38:	e0fff517 	ldw	r3,-44(fp)
   54b3c:	e0bff917 	ldw	r2,-28(fp)
   54b40:	1885c83a 	sub	r2,r3,r2
   54b44:	10bfffc4 	addi	r2,r2,-1
   54b48:	e0bff615 	stw	r2,-40(fp)
   54b4c:	00000b06 	br	54b7c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   54b50:	e0bff517 	ldw	r2,-44(fp)
   54b54:	10000526 	beq	r2,zero,54b6c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   54b58:	00c20004 	movi	r3,2048
   54b5c:	e0bff917 	ldw	r2,-28(fp)
   54b60:	1885c83a 	sub	r2,r3,r2
   54b64:	e0bff615 	stw	r2,-40(fp)
   54b68:	00000406 	br	54b7c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   54b6c:	00c1ffc4 	movi	r3,2047
   54b70:	e0bff917 	ldw	r2,-28(fp)
   54b74:	1885c83a 	sub	r2,r3,r2
   54b78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   54b7c:	e0bff617 	ldw	r2,-40(fp)
   54b80:	10001e26 	beq	r2,zero,54bfc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   54b84:	e0fffe17 	ldw	r3,-8(fp)
   54b88:	e0bff617 	ldw	r2,-40(fp)
   54b8c:	1880022e 	bgeu	r3,r2,54b98 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   54b90:	e0bffe17 	ldw	r2,-8(fp)
   54b94:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   54b98:	e0bffc17 	ldw	r2,-16(fp)
   54b9c:	10c20e04 	addi	r3,r2,2104
   54ba0:	e0bff917 	ldw	r2,-28(fp)
   54ba4:	1885883a 	add	r2,r3,r2
   54ba8:	e1bff617 	ldw	r6,-40(fp)
   54bac:	e17ffd17 	ldw	r5,-12(fp)
   54bb0:	1009883a 	mov	r4,r2
   54bb4:	00494280 	call	49428 <memcpy>
      ptr   += n;
   54bb8:	e0fffd17 	ldw	r3,-12(fp)
   54bbc:	e0bff617 	ldw	r2,-40(fp)
   54bc0:	1885883a 	add	r2,r3,r2
   54bc4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   54bc8:	e0fffe17 	ldw	r3,-8(fp)
   54bcc:	e0bff617 	ldw	r2,-40(fp)
   54bd0:	1885c83a 	sub	r2,r3,r2
   54bd4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54bd8:	e0fff917 	ldw	r3,-28(fp)
   54bdc:	e0bff617 	ldw	r2,-40(fp)
   54be0:	1885883a 	add	r2,r3,r2
   54be4:	10c1ffcc 	andi	r3,r2,2047
   54be8:	e0bffc17 	ldw	r2,-16(fp)
   54bec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54bf0:	e0bffe17 	ldw	r2,-8(fp)
   54bf4:	00bfc716 	blt	zero,r2,54b14 <__alt_data_end+0xfffe2b14>
   54bf8:	00000106 	br	54c00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   54bfc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54c00:	0005303a 	rdctl	r2,status
   54c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54c08:	e0fffb17 	ldw	r3,-20(fp)
   54c0c:	00bfff84 	movi	r2,-2
   54c10:	1884703a 	and	r2,r3,r2
   54c14:	1001703a 	wrctl	status,r2
  
  return context;
   54c18:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   54c1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54c20:	e0bffc17 	ldw	r2,-16(fp)
   54c24:	10800817 	ldw	r2,32(r2)
   54c28:	10c00094 	ori	r3,r2,2
   54c2c:	e0bffc17 	ldw	r2,-16(fp)
   54c30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54c34:	e0bffc17 	ldw	r2,-16(fp)
   54c38:	10800017 	ldw	r2,0(r2)
   54c3c:	10800104 	addi	r2,r2,4
   54c40:	1007883a 	mov	r3,r2
   54c44:	e0bffc17 	ldw	r2,-16(fp)
   54c48:	10800817 	ldw	r2,32(r2)
   54c4c:	18800035 	stwio	r2,0(r3)
   54c50:	e0bffa17 	ldw	r2,-24(fp)
   54c54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54c58:	e0bff817 	ldw	r2,-32(fp)
   54c5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   54c60:	e0bffe17 	ldw	r2,-8(fp)
   54c64:	0080100e 	bge	zero,r2,54ca8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   54c68:	e0bfff17 	ldw	r2,-4(fp)
   54c6c:	1090000c 	andi	r2,r2,16384
   54c70:	1000101e 	bne	r2,zero,54cb4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   54c74:	0001883a 	nop
   54c78:	e0bffc17 	ldw	r2,-16(fp)
   54c7c:	10c00d17 	ldw	r3,52(r2)
   54c80:	e0bff517 	ldw	r2,-44(fp)
   54c84:	1880051e 	bne	r3,r2,54c9c <altera_avalon_jtag_uart_write+0x1b8>
   54c88:	e0bffc17 	ldw	r2,-16(fp)
   54c8c:	10c00917 	ldw	r3,36(r2)
   54c90:	e0bffc17 	ldw	r2,-16(fp)
   54c94:	10800117 	ldw	r2,4(r2)
   54c98:	18bff736 	bltu	r3,r2,54c78 <__alt_data_end+0xfffe2c78>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   54c9c:	e0bffc17 	ldw	r2,-16(fp)
   54ca0:	10800917 	ldw	r2,36(r2)
   54ca4:	1000051e 	bne	r2,zero,54cbc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   54ca8:	e0bffe17 	ldw	r2,-8(fp)
   54cac:	00bfd016 	blt	zero,r2,54bf0 <__alt_data_end+0xfffe2bf0>
   54cb0:	00000306 	br	54cc0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   54cb4:	0001883a 	nop
   54cb8:	00000106 	br	54cc0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   54cbc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   54cc0:	e0fffd17 	ldw	r3,-12(fp)
   54cc4:	e0bff717 	ldw	r2,-36(fp)
   54cc8:	18800426 	beq	r3,r2,54cdc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   54ccc:	e0fffd17 	ldw	r3,-12(fp)
   54cd0:	e0bff717 	ldw	r2,-36(fp)
   54cd4:	1885c83a 	sub	r2,r3,r2
   54cd8:	00000606 	br	54cf4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   54cdc:	e0bfff17 	ldw	r2,-4(fp)
   54ce0:	1090000c 	andi	r2,r2,16384
   54ce4:	10000226 	beq	r2,zero,54cf0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   54ce8:	00bffd44 	movi	r2,-11
   54cec:	00000106 	br	54cf4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   54cf0:	00bffec4 	movi	r2,-5
}
   54cf4:	e037883a 	mov	sp,fp
   54cf8:	dfc00117 	ldw	ra,4(sp)
   54cfc:	df000017 	ldw	fp,0(sp)
   54d00:	dec00204 	addi	sp,sp,8
   54d04:	f800283a 	ret

00054d08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   54d08:	defffa04 	addi	sp,sp,-24
   54d0c:	dfc00515 	stw	ra,20(sp)
   54d10:	df000415 	stw	fp,16(sp)
   54d14:	df000404 	addi	fp,sp,16
   54d18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   54d1c:	0007883a 	mov	r3,zero
   54d20:	e0bfff17 	ldw	r2,-4(fp)
   54d24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   54d28:	e0bfff17 	ldw	r2,-4(fp)
   54d2c:	10800104 	addi	r2,r2,4
   54d30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54d34:	0005303a 	rdctl	r2,status
   54d38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54d3c:	e0fffd17 	ldw	r3,-12(fp)
   54d40:	00bfff84 	movi	r2,-2
   54d44:	1884703a 	and	r2,r3,r2
   54d48:	1001703a 	wrctl	status,r2
  
  return context;
   54d4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   54d50:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   54d54:	00560080 	call	56008 <alt_tick>
   54d58:	e0bffc17 	ldw	r2,-16(fp)
   54d5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54d60:	e0bffe17 	ldw	r2,-8(fp)
   54d64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   54d68:	0001883a 	nop
   54d6c:	e037883a 	mov	sp,fp
   54d70:	dfc00117 	ldw	ra,4(sp)
   54d74:	df000017 	ldw	fp,0(sp)
   54d78:	dec00204 	addi	sp,sp,8
   54d7c:	f800283a 	ret

00054d80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   54d80:	defff804 	addi	sp,sp,-32
   54d84:	dfc00715 	stw	ra,28(sp)
   54d88:	df000615 	stw	fp,24(sp)
   54d8c:	df000604 	addi	fp,sp,24
   54d90:	e13ffc15 	stw	r4,-16(fp)
   54d94:	e17ffd15 	stw	r5,-12(fp)
   54d98:	e1bffe15 	stw	r6,-8(fp)
   54d9c:	e1ffff15 	stw	r7,-4(fp)
   54da0:	e0bfff17 	ldw	r2,-4(fp)
   54da4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   54da8:	d0a70817 	ldw	r2,-25568(gp)
   54dac:	1000021e 	bne	r2,zero,54db8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   54db0:	e0bffb17 	ldw	r2,-20(fp)
   54db4:	d0a70815 	stw	r2,-25568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   54db8:	e0bffc17 	ldw	r2,-16(fp)
   54dbc:	10800104 	addi	r2,r2,4
   54dc0:	00c001c4 	movi	r3,7
   54dc4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   54dc8:	d8000015 	stw	zero,0(sp)
   54dcc:	e1fffc17 	ldw	r7,-16(fp)
   54dd0:	01800174 	movhi	r6,5
   54dd4:	31934204 	addi	r6,r6,19720
   54dd8:	e17ffe17 	ldw	r5,-8(fp)
   54ddc:	e13ffd17 	ldw	r4,-12(fp)
   54de0:	00556800 	call	55680 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   54de4:	0001883a 	nop
   54de8:	e037883a 	mov	sp,fp
   54dec:	dfc00117 	ldw	ra,4(sp)
   54df0:	df000017 	ldw	fp,0(sp)
   54df4:	dec00204 	addi	sp,sp,8
   54df8:	f800283a 	ret

00054dfc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   54dfc:	defffd04 	addi	sp,sp,-12
   54e00:	df000215 	stw	fp,8(sp)
   54e04:	df000204 	addi	fp,sp,8
   54e08:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   54e0c:	e0bfff17 	ldw	r2,-4(fp)
   54e10:	10800a17 	ldw	r2,40(r2)
   54e14:	10800104 	addi	r2,r2,4
   54e18:	10800037 	ldwio	r2,0(r2)
   54e1c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   54e20:	e0bffe17 	ldw	r2,-8(fp)
   54e24:	10800054 	ori	r2,r2,1
   54e28:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   54e2c:	e0bfff17 	ldw	r2,-4(fp)
   54e30:	10800a17 	ldw	r2,40(r2)
   54e34:	10800104 	addi	r2,r2,4
   54e38:	1007883a 	mov	r3,r2
   54e3c:	e0bffe17 	ldw	r2,-8(fp)
   54e40:	18800035 	stwio	r2,0(r3)
}
   54e44:	0001883a 	nop
   54e48:	e037883a 	mov	sp,fp
   54e4c:	df000017 	ldw	fp,0(sp)
   54e50:	dec00104 	addi	sp,sp,4
   54e54:	f800283a 	ret

00054e58 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   54e58:	defffd04 	addi	sp,sp,-12
   54e5c:	df000215 	stw	fp,8(sp)
   54e60:	df000204 	addi	fp,sp,8
   54e64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   54e68:	e0bfff17 	ldw	r2,-4(fp)
   54e6c:	10800a17 	ldw	r2,40(r2)
   54e70:	10800104 	addi	r2,r2,4
   54e74:	10800037 	ldwio	r2,0(r2)
   54e78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   54e7c:	e0fffe17 	ldw	r3,-8(fp)
   54e80:	00bfff84 	movi	r2,-2
   54e84:	1884703a 	and	r2,r3,r2
   54e88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   54e8c:	e0bfff17 	ldw	r2,-4(fp)
   54e90:	10800a17 	ldw	r2,40(r2)
   54e94:	10800104 	addi	r2,r2,4
   54e98:	1007883a 	mov	r3,r2
   54e9c:	e0bffe17 	ldw	r2,-8(fp)
   54ea0:	18800035 	stwio	r2,0(r3)
}
   54ea4:	0001883a 	nop
   54ea8:	e037883a 	mov	sp,fp
   54eac:	df000017 	ldw	fp,0(sp)
   54eb0:	dec00104 	addi	sp,sp,4
   54eb4:	f800283a 	ret

00054eb8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   54eb8:	defffd04 	addi	sp,sp,-12
   54ebc:	df000215 	stw	fp,8(sp)
   54ec0:	df000204 	addi	fp,sp,8
   54ec4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   54ec8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   54ecc:	e0bfff17 	ldw	r2,-4(fp)
   54ed0:	10800a17 	ldw	r2,40(r2)
   54ed4:	10800084 	addi	r2,r2,2
   54ed8:	1080002b 	ldhuio	r2,0(r2)
   54edc:	10bfffcc 	andi	r2,r2,65535
   54ee0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   54ee4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   54ee8:	e037883a 	mov	sp,fp
   54eec:	df000017 	ldw	fp,0(sp)
   54ef0:	dec00104 	addi	sp,sp,4
   54ef4:	f800283a 	ret

00054ef8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   54ef8:	defffd04 	addi	sp,sp,-12
   54efc:	df000215 	stw	fp,8(sp)
   54f00:	df000204 	addi	fp,sp,8
   54f04:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   54f08:	e0bfff17 	ldw	r2,-4(fp)
   54f0c:	10800a17 	ldw	r2,40(r2)
   54f10:	10800104 	addi	r2,r2,4
   54f14:	10800037 	ldwio	r2,0(r2)
   54f18:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   54f1c:	e0bffe17 	ldw	r2,-8(fp)
   54f20:	1004d43a 	srli	r2,r2,16
}
   54f24:	e037883a 	mov	sp,fp
   54f28:	df000017 	ldw	fp,0(sp)
   54f2c:	dec00104 	addi	sp,sp,4
   54f30:	f800283a 	ret

00054f34 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   54f34:	defffd04 	addi	sp,sp,-12
   54f38:	df000215 	stw	fp,8(sp)
   54f3c:	df000204 	addi	fp,sp,8
   54f40:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   54f44:	e0bfff17 	ldw	r2,-4(fp)
   54f48:	1080800c 	andi	r2,r2,512
   54f4c:	1004d27a 	srli	r2,r2,9
   54f50:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   54f54:	e0bffe17 	ldw	r2,-8(fp)
   54f58:	10000226 	beq	r2,zero,54f64 <alt_up_rs232_check_parity+0x30>
   54f5c:	00bfffc4 	movi	r2,-1
   54f60:	00000106 	br	54f68 <alt_up_rs232_check_parity+0x34>
   54f64:	0005883a 	mov	r2,zero
}
   54f68:	e037883a 	mov	sp,fp
   54f6c:	df000017 	ldw	fp,0(sp)
   54f70:	dec00104 	addi	sp,sp,4
   54f74:	f800283a 	ret

00054f78 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   54f78:	defffd04 	addi	sp,sp,-12
   54f7c:	df000215 	stw	fp,8(sp)
   54f80:	df000204 	addi	fp,sp,8
   54f84:	e13ffe15 	stw	r4,-8(fp)
   54f88:	2805883a 	mov	r2,r5
   54f8c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   54f90:	e0bffe17 	ldw	r2,-8(fp)
   54f94:	10800a17 	ldw	r2,40(r2)
   54f98:	1007883a 	mov	r3,r2
   54f9c:	e0bfff03 	ldbu	r2,-4(fp)
   54fa0:	18800035 	stwio	r2,0(r3)
	return 0;
   54fa4:	0005883a 	mov	r2,zero
}
   54fa8:	e037883a 	mov	sp,fp
   54fac:	df000017 	ldw	fp,0(sp)
   54fb0:	dec00104 	addi	sp,sp,4
   54fb4:	f800283a 	ret

00054fb8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   54fb8:	defffa04 	addi	sp,sp,-24
   54fbc:	dfc00515 	stw	ra,20(sp)
   54fc0:	df000415 	stw	fp,16(sp)
   54fc4:	df000404 	addi	fp,sp,16
   54fc8:	e13ffd15 	stw	r4,-12(fp)
   54fcc:	e17ffe15 	stw	r5,-8(fp)
   54fd0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   54fd4:	e0bffd17 	ldw	r2,-12(fp)
   54fd8:	10800a17 	ldw	r2,40(r2)
   54fdc:	10800037 	ldwio	r2,0(r2)
   54fe0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   54fe4:	e0bffc17 	ldw	r2,-16(fp)
   54fe8:	1007883a 	mov	r3,r2
   54fec:	e0bffe17 	ldw	r2,-8(fp)
   54ff0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   54ff4:	e13ffc17 	ldw	r4,-16(fp)
   54ff8:	0054f340 	call	54f34 <alt_up_rs232_check_parity>
   54ffc:	1007883a 	mov	r3,r2
   55000:	e0bfff17 	ldw	r2,-4(fp)
   55004:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   55008:	e0bffc17 	ldw	r2,-16(fp)
   5500c:	10a0000c 	andi	r2,r2,32768
   55010:	1004d3fa 	srli	r2,r2,15
   55014:	10bfffc4 	addi	r2,r2,-1
}
   55018:	e037883a 	mov	sp,fp
   5501c:	dfc00117 	ldw	ra,4(sp)
   55020:	df000017 	ldw	fp,0(sp)
   55024:	dec00204 	addi	sp,sp,8
   55028:	f800283a 	ret

0005502c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   5502c:	defff804 	addi	sp,sp,-32
   55030:	dfc00715 	stw	ra,28(sp)
   55034:	df000615 	stw	fp,24(sp)
   55038:	df000604 	addi	fp,sp,24
   5503c:	e13ffd15 	stw	r4,-12(fp)
   55040:	e17ffe15 	stw	r5,-8(fp)
   55044:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   55048:	e0bffd17 	ldw	r2,-12(fp)
   5504c:	10800017 	ldw	r2,0(r2)
   55050:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   55054:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   55058:	00000c06 	br	5508c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   5505c:	e0bffe17 	ldw	r2,-8(fp)
   55060:	10c00044 	addi	r3,r2,1
   55064:	e0fffe15 	stw	r3,-8(fp)
   55068:	e0fffc04 	addi	r3,fp,-16
   5506c:	180d883a 	mov	r6,r3
   55070:	100b883a 	mov	r5,r2
   55074:	e13ffb17 	ldw	r4,-20(fp)
   55078:	0054fb80 	call	54fb8 <alt_up_rs232_read_data>
   5507c:	1000081e 	bne	r2,zero,550a0 <alt_up_rs232_read_fd+0x74>
			count++;
   55080:	e0bffa17 	ldw	r2,-24(fp)
   55084:	10800044 	addi	r2,r2,1
   55088:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   5508c:	e0bfff17 	ldw	r2,-4(fp)
   55090:	10ffffc4 	addi	r3,r2,-1
   55094:	e0ffff15 	stw	r3,-4(fp)
   55098:	103ff01e 	bne	r2,zero,5505c <__alt_data_end+0xfffe305c>
   5509c:	00000106 	br	550a4 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   550a0:	0001883a 	nop
	}
	return count;
   550a4:	e0bffa17 	ldw	r2,-24(fp)
}
   550a8:	e037883a 	mov	sp,fp
   550ac:	dfc00117 	ldw	ra,4(sp)
   550b0:	df000017 	ldw	fp,0(sp)
   550b4:	dec00204 	addi	sp,sp,8
   550b8:	f800283a 	ret

000550bc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   550bc:	defff904 	addi	sp,sp,-28
   550c0:	dfc00615 	stw	ra,24(sp)
   550c4:	df000515 	stw	fp,20(sp)
   550c8:	df000504 	addi	fp,sp,20
   550cc:	e13ffd15 	stw	r4,-12(fp)
   550d0:	e17ffe15 	stw	r5,-8(fp)
   550d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   550d8:	e0bffd17 	ldw	r2,-12(fp)
   550dc:	10800017 	ldw	r2,0(r2)
   550e0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   550e4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   550e8:	00000d06 	br	55120 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   550ec:	e0bffe17 	ldw	r2,-8(fp)
   550f0:	10800003 	ldbu	r2,0(r2)
   550f4:	10803fcc 	andi	r2,r2,255
   550f8:	100b883a 	mov	r5,r2
   550fc:	e13ffc17 	ldw	r4,-16(fp)
   55100:	0054f780 	call	54f78 <alt_up_rs232_write_data>
   55104:	10000b1e 	bne	r2,zero,55134 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   55108:	e0bffb17 	ldw	r2,-20(fp)
   5510c:	10800044 	addi	r2,r2,1
   55110:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   55114:	e0bffe17 	ldw	r2,-8(fp)
   55118:	10800044 	addi	r2,r2,1
   5511c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   55120:	e0bfff17 	ldw	r2,-4(fp)
   55124:	10ffffc4 	addi	r3,r2,-1
   55128:	e0ffff15 	stw	r3,-4(fp)
   5512c:	103fef1e 	bne	r2,zero,550ec <__alt_data_end+0xfffe30ec>
   55130:	00000106 	br	55138 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   55134:	0001883a 	nop
	}
	return count;
   55138:	e0bffb17 	ldw	r2,-20(fp)
}
   5513c:	e037883a 	mov	sp,fp
   55140:	dfc00117 	ldw	ra,4(sp)
   55144:	df000017 	ldw	fp,0(sp)
   55148:	dec00204 	addi	sp,sp,8
   5514c:	f800283a 	ret

00055150 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   55150:	defffc04 	addi	sp,sp,-16
   55154:	dfc00315 	stw	ra,12(sp)
   55158:	df000215 	stw	fp,8(sp)
   5515c:	df000204 	addi	fp,sp,8
   55160:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   55164:	d1600e04 	addi	r5,gp,-32712
   55168:	e13fff17 	ldw	r4,-4(fp)
   5516c:	00555d00 	call	555d0 <alt_find_dev>
   55170:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   55174:	e0bffe17 	ldw	r2,-8(fp)
}
   55178:	e037883a 	mov	sp,fp
   5517c:	dfc00117 	ldw	ra,4(sp)
   55180:	df000017 	ldw	fp,0(sp)
   55184:	dec00204 	addi	sp,sp,8
   55188:	f800283a 	ret

0005518c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5518c:	defff504 	addi	sp,sp,-44
   55190:	df000a15 	stw	fp,40(sp)
   55194:	df000a04 	addi	fp,sp,40
   55198:	e13ffc15 	stw	r4,-16(fp)
   5519c:	e17ffd15 	stw	r5,-12(fp)
   551a0:	e1bffe15 	stw	r6,-8(fp)
   551a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   551a8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   551ac:	d0a70817 	ldw	r2,-25568(gp)
  
  if (alt_ticks_per_second ())
   551b0:	10003c26 	beq	r2,zero,552a4 <alt_alarm_start+0x118>
  {
    if (alarm)
   551b4:	e0bffc17 	ldw	r2,-16(fp)
   551b8:	10003826 	beq	r2,zero,5529c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   551bc:	e0bffc17 	ldw	r2,-16(fp)
   551c0:	e0fffe17 	ldw	r3,-8(fp)
   551c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   551c8:	e0bffc17 	ldw	r2,-16(fp)
   551cc:	e0ffff17 	ldw	r3,-4(fp)
   551d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   551d4:	0005303a 	rdctl	r2,status
   551d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   551dc:	e0fff917 	ldw	r3,-28(fp)
   551e0:	00bfff84 	movi	r2,-2
   551e4:	1884703a 	and	r2,r3,r2
   551e8:	1001703a 	wrctl	status,r2
  
  return context;
   551ec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   551f0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   551f4:	d0a70917 	ldw	r2,-25564(gp)
      
      current_nticks = alt_nticks();
   551f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   551fc:	e0fffd17 	ldw	r3,-12(fp)
   55200:	e0bff617 	ldw	r2,-40(fp)
   55204:	1885883a 	add	r2,r3,r2
   55208:	10c00044 	addi	r3,r2,1
   5520c:	e0bffc17 	ldw	r2,-16(fp)
   55210:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   55214:	e0bffc17 	ldw	r2,-16(fp)
   55218:	10c00217 	ldw	r3,8(r2)
   5521c:	e0bff617 	ldw	r2,-40(fp)
   55220:	1880042e 	bgeu	r3,r2,55234 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   55224:	e0bffc17 	ldw	r2,-16(fp)
   55228:	00c00044 	movi	r3,1
   5522c:	10c00405 	stb	r3,16(r2)
   55230:	00000206 	br	5523c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   55234:	e0bffc17 	ldw	r2,-16(fp)
   55238:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   5523c:	e0bffc17 	ldw	r2,-16(fp)
   55240:	d0e01604 	addi	r3,gp,-32680
   55244:	e0fffa15 	stw	r3,-24(fp)
   55248:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5524c:	e0bffb17 	ldw	r2,-20(fp)
   55250:	e0fffa17 	ldw	r3,-24(fp)
   55254:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   55258:	e0bffa17 	ldw	r2,-24(fp)
   5525c:	10c00017 	ldw	r3,0(r2)
   55260:	e0bffb17 	ldw	r2,-20(fp)
   55264:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   55268:	e0bffa17 	ldw	r2,-24(fp)
   5526c:	10800017 	ldw	r2,0(r2)
   55270:	e0fffb17 	ldw	r3,-20(fp)
   55274:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   55278:	e0bffa17 	ldw	r2,-24(fp)
   5527c:	e0fffb17 	ldw	r3,-20(fp)
   55280:	10c00015 	stw	r3,0(r2)
   55284:	e0bff817 	ldw	r2,-32(fp)
   55288:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5528c:	e0bff717 	ldw	r2,-36(fp)
   55290:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   55294:	0005883a 	mov	r2,zero
   55298:	00000306 	br	552a8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   5529c:	00bffa84 	movi	r2,-22
   552a0:	00000106 	br	552a8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   552a4:	00bfde84 	movi	r2,-134
  }
}
   552a8:	e037883a 	mov	sp,fp
   552ac:	df000017 	ldw	fp,0(sp)
   552b0:	dec00104 	addi	sp,sp,4
   552b4:	f800283a 	ret

000552b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   552b8:	defffa04 	addi	sp,sp,-24
   552bc:	dfc00515 	stw	ra,20(sp)
   552c0:	df000415 	stw	fp,16(sp)
   552c4:	df000404 	addi	fp,sp,16
   552c8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   552cc:	00800244 	movi	r2,9
   552d0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   552d4:	014003f4 	movhi	r5,15
   552d8:	29509004 	addi	r5,r5,16960
   552dc:	e13ffd17 	ldw	r4,-12(fp)
   552e0:	004146c0 	call	4146c <__mulsi3>
   552e4:	100b883a 	mov	r5,r2
   552e8:	0100bef4 	movhi	r4,763
   552ec:	213c2004 	addi	r4,r4,-3968
   552f0:	00408380 	call	40838 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   552f4:	100b883a 	mov	r5,r2
   552f8:	01200034 	movhi	r4,32768
   552fc:	213fffc4 	addi	r4,r4,-1
   55300:	00408380 	call	40838 <__udivsi3>
   55304:	100b883a 	mov	r5,r2
   55308:	e13fff17 	ldw	r4,-4(fp)
   5530c:	00408380 	call	40838 <__udivsi3>
   55310:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   55314:	e0bffe17 	ldw	r2,-8(fp)
   55318:	10002a26 	beq	r2,zero,553c4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   5531c:	e03ffc15 	stw	zero,-16(fp)
   55320:	00001706 	br	55380 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   55324:	00a00034 	movhi	r2,32768
   55328:	10bfffc4 	addi	r2,r2,-1
   5532c:	10bfffc4 	addi	r2,r2,-1
   55330:	103ffe1e 	bne	r2,zero,5532c <__alt_data_end+0xfffe332c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   55334:	014003f4 	movhi	r5,15
   55338:	29509004 	addi	r5,r5,16960
   5533c:	e13ffd17 	ldw	r4,-12(fp)
   55340:	004146c0 	call	4146c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   55344:	100b883a 	mov	r5,r2
   55348:	0100bef4 	movhi	r4,763
   5534c:	213c2004 	addi	r4,r4,-3968
   55350:	00408380 	call	40838 <__udivsi3>
   55354:	100b883a 	mov	r5,r2
   55358:	01200034 	movhi	r4,32768
   5535c:	213fffc4 	addi	r4,r4,-1
   55360:	00408380 	call	40838 <__udivsi3>
   55364:	1007883a 	mov	r3,r2
   55368:	e0bfff17 	ldw	r2,-4(fp)
   5536c:	10c5c83a 	sub	r2,r2,r3
   55370:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   55374:	e0bffc17 	ldw	r2,-16(fp)
   55378:	10800044 	addi	r2,r2,1
   5537c:	e0bffc15 	stw	r2,-16(fp)
   55380:	e0fffc17 	ldw	r3,-16(fp)
   55384:	e0bffe17 	ldw	r2,-8(fp)
   55388:	18bfe616 	blt	r3,r2,55324 <__alt_data_end+0xfffe3324>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   5538c:	014003f4 	movhi	r5,15
   55390:	29509004 	addi	r5,r5,16960
   55394:	e13ffd17 	ldw	r4,-12(fp)
   55398:	004146c0 	call	4146c <__mulsi3>
   5539c:	100b883a 	mov	r5,r2
   553a0:	0100bef4 	movhi	r4,763
   553a4:	213c2004 	addi	r4,r4,-3968
   553a8:	00408380 	call	40838 <__udivsi3>
   553ac:	e17fff17 	ldw	r5,-4(fp)
   553b0:	1009883a 	mov	r4,r2
   553b4:	004146c0 	call	4146c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   553b8:	10bfffc4 	addi	r2,r2,-1
   553bc:	103ffe1e 	bne	r2,zero,553b8 <__alt_data_end+0xfffe33b8>
   553c0:	00000d06 	br	553f8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   553c4:	014003f4 	movhi	r5,15
   553c8:	29509004 	addi	r5,r5,16960
   553cc:	e13ffd17 	ldw	r4,-12(fp)
   553d0:	004146c0 	call	4146c <__mulsi3>
   553d4:	100b883a 	mov	r5,r2
   553d8:	0100bef4 	movhi	r4,763
   553dc:	213c2004 	addi	r4,r4,-3968
   553e0:	00408380 	call	40838 <__udivsi3>
   553e4:	e17fff17 	ldw	r5,-4(fp)
   553e8:	1009883a 	mov	r4,r2
   553ec:	004146c0 	call	4146c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   553f0:	10bfffc4 	addi	r2,r2,-1
   553f4:	00bffe16 	blt	zero,r2,553f0 <__alt_data_end+0xfffe33f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   553f8:	0005883a 	mov	r2,zero
}
   553fc:	e037883a 	mov	sp,fp
   55400:	dfc00117 	ldw	ra,4(sp)
   55404:	df000017 	ldw	fp,0(sp)
   55408:	dec00204 	addi	sp,sp,8
   5540c:	f800283a 	ret

00055410 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   55410:	deffff04 	addi	sp,sp,-4
   55414:	df000015 	stw	fp,0(sp)
   55418:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   5541c:	0001883a 	nop
   55420:	e037883a 	mov	sp,fp
   55424:	df000017 	ldw	fp,0(sp)
   55428:	dec00104 	addi	sp,sp,4
   5542c:	f800283a 	ret

00055430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   55430:	defffe04 	addi	sp,sp,-8
   55434:	dfc00115 	stw	ra,4(sp)
   55438:	df000015 	stw	fp,0(sp)
   5543c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   55440:	d0a01117 	ldw	r2,-32700(gp)
   55444:	10000326 	beq	r2,zero,55454 <alt_get_errno+0x24>
   55448:	d0a01117 	ldw	r2,-32700(gp)
   5544c:	103ee83a 	callr	r2
   55450:	00000106 	br	55458 <alt_get_errno+0x28>
   55454:	d0a70304 	addi	r2,gp,-25588
}
   55458:	e037883a 	mov	sp,fp
   5545c:	dfc00117 	ldw	ra,4(sp)
   55460:	df000017 	ldw	fp,0(sp)
   55464:	dec00204 	addi	sp,sp,8
   55468:	f800283a 	ret

0005546c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   5546c:	defffa04 	addi	sp,sp,-24
   55470:	dfc00515 	stw	ra,20(sp)
   55474:	df000415 	stw	fp,16(sp)
   55478:	df000404 	addi	fp,sp,16
   5547c:	e13ffe15 	stw	r4,-8(fp)
   55480:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   55484:	e0bffe17 	ldw	r2,-8(fp)
   55488:	10000326 	beq	r2,zero,55498 <alt_dev_llist_insert+0x2c>
   5548c:	e0bffe17 	ldw	r2,-8(fp)
   55490:	10800217 	ldw	r2,8(r2)
   55494:	1000061e 	bne	r2,zero,554b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   55498:	00554300 	call	55430 <alt_get_errno>
   5549c:	1007883a 	mov	r3,r2
   554a0:	00800584 	movi	r2,22
   554a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   554a8:	00bffa84 	movi	r2,-22
   554ac:	00001306 	br	554fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   554b0:	e0bffe17 	ldw	r2,-8(fp)
   554b4:	e0ffff17 	ldw	r3,-4(fp)
   554b8:	e0fffc15 	stw	r3,-16(fp)
   554bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   554c0:	e0bffd17 	ldw	r2,-12(fp)
   554c4:	e0fffc17 	ldw	r3,-16(fp)
   554c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   554cc:	e0bffc17 	ldw	r2,-16(fp)
   554d0:	10c00017 	ldw	r3,0(r2)
   554d4:	e0bffd17 	ldw	r2,-12(fp)
   554d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   554dc:	e0bffc17 	ldw	r2,-16(fp)
   554e0:	10800017 	ldw	r2,0(r2)
   554e4:	e0fffd17 	ldw	r3,-12(fp)
   554e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   554ec:	e0bffc17 	ldw	r2,-16(fp)
   554f0:	e0fffd17 	ldw	r3,-12(fp)
   554f4:	10c00015 	stw	r3,0(r2)

  return 0;  
   554f8:	0005883a 	mov	r2,zero
}
   554fc:	e037883a 	mov	sp,fp
   55500:	dfc00117 	ldw	ra,4(sp)
   55504:	df000017 	ldw	fp,0(sp)
   55508:	dec00204 	addi	sp,sp,8
   5550c:	f800283a 	ret

00055510 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   55510:	defffd04 	addi	sp,sp,-12
   55514:	dfc00215 	stw	ra,8(sp)
   55518:	df000115 	stw	fp,4(sp)
   5551c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   55520:	00800174 	movhi	r2,5
   55524:	1099cb04 	addi	r2,r2,26412
   55528:	e0bfff15 	stw	r2,-4(fp)
   5552c:	00000606 	br	55548 <_do_ctors+0x38>
        (*ctor) (); 
   55530:	e0bfff17 	ldw	r2,-4(fp)
   55534:	10800017 	ldw	r2,0(r2)
   55538:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5553c:	e0bfff17 	ldw	r2,-4(fp)
   55540:	10bfff04 	addi	r2,r2,-4
   55544:	e0bfff15 	stw	r2,-4(fp)
   55548:	e0ffff17 	ldw	r3,-4(fp)
   5554c:	00800174 	movhi	r2,5
   55550:	1099cc04 	addi	r2,r2,26416
   55554:	18bff62e 	bgeu	r3,r2,55530 <__alt_data_end+0xfffe3530>
        (*ctor) (); 
}
   55558:	0001883a 	nop
   5555c:	e037883a 	mov	sp,fp
   55560:	dfc00117 	ldw	ra,4(sp)
   55564:	df000017 	ldw	fp,0(sp)
   55568:	dec00204 	addi	sp,sp,8
   5556c:	f800283a 	ret

00055570 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   55570:	defffd04 	addi	sp,sp,-12
   55574:	dfc00215 	stw	ra,8(sp)
   55578:	df000115 	stw	fp,4(sp)
   5557c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   55580:	00800174 	movhi	r2,5
   55584:	1099cb04 	addi	r2,r2,26412
   55588:	e0bfff15 	stw	r2,-4(fp)
   5558c:	00000606 	br	555a8 <_do_dtors+0x38>
        (*dtor) (); 
   55590:	e0bfff17 	ldw	r2,-4(fp)
   55594:	10800017 	ldw	r2,0(r2)
   55598:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5559c:	e0bfff17 	ldw	r2,-4(fp)
   555a0:	10bfff04 	addi	r2,r2,-4
   555a4:	e0bfff15 	stw	r2,-4(fp)
   555a8:	e0ffff17 	ldw	r3,-4(fp)
   555ac:	00800174 	movhi	r2,5
   555b0:	1099cc04 	addi	r2,r2,26416
   555b4:	18bff62e 	bgeu	r3,r2,55590 <__alt_data_end+0xfffe3590>
        (*dtor) (); 
}
   555b8:	0001883a 	nop
   555bc:	e037883a 	mov	sp,fp
   555c0:	dfc00117 	ldw	ra,4(sp)
   555c4:	df000017 	ldw	fp,0(sp)
   555c8:	dec00204 	addi	sp,sp,8
   555cc:	f800283a 	ret

000555d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   555d0:	defffa04 	addi	sp,sp,-24
   555d4:	dfc00515 	stw	ra,20(sp)
   555d8:	df000415 	stw	fp,16(sp)
   555dc:	df000404 	addi	fp,sp,16
   555e0:	e13ffe15 	stw	r4,-8(fp)
   555e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   555e8:	e0bfff17 	ldw	r2,-4(fp)
   555ec:	10800017 	ldw	r2,0(r2)
   555f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   555f4:	e13ffe17 	ldw	r4,-8(fp)
   555f8:	00416b80 	call	416b8 <strlen>
   555fc:	10800044 	addi	r2,r2,1
   55600:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   55604:	00000d06 	br	5563c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   55608:	e0bffc17 	ldw	r2,-16(fp)
   5560c:	10800217 	ldw	r2,8(r2)
   55610:	e0fffd17 	ldw	r3,-12(fp)
   55614:	180d883a 	mov	r6,r3
   55618:	e17ffe17 	ldw	r5,-8(fp)
   5561c:	1009883a 	mov	r4,r2
   55620:	00563e80 	call	563e8 <memcmp>
   55624:	1000021e 	bne	r2,zero,55630 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   55628:	e0bffc17 	ldw	r2,-16(fp)
   5562c:	00000706 	br	5564c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   55630:	e0bffc17 	ldw	r2,-16(fp)
   55634:	10800017 	ldw	r2,0(r2)
   55638:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   5563c:	e0fffc17 	ldw	r3,-16(fp)
   55640:	e0bfff17 	ldw	r2,-4(fp)
   55644:	18bff01e 	bne	r3,r2,55608 <__alt_data_end+0xfffe3608>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   55648:	0005883a 	mov	r2,zero
}
   5564c:	e037883a 	mov	sp,fp
   55650:	dfc00117 	ldw	ra,4(sp)
   55654:	df000017 	ldw	fp,0(sp)
   55658:	dec00204 	addi	sp,sp,8
   5565c:	f800283a 	ret

00055660 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   55660:	deffff04 	addi	sp,sp,-4
   55664:	df000015 	stw	fp,0(sp)
   55668:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   5566c:	0001883a 	nop
   55670:	e037883a 	mov	sp,fp
   55674:	df000017 	ldw	fp,0(sp)
   55678:	dec00104 	addi	sp,sp,4
   5567c:	f800283a 	ret

00055680 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   55680:	defff904 	addi	sp,sp,-28
   55684:	dfc00615 	stw	ra,24(sp)
   55688:	df000515 	stw	fp,20(sp)
   5568c:	df000504 	addi	fp,sp,20
   55690:	e13ffc15 	stw	r4,-16(fp)
   55694:	e17ffd15 	stw	r5,-12(fp)
   55698:	e1bffe15 	stw	r6,-8(fp)
   5569c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   556a0:	e0800217 	ldw	r2,8(fp)
   556a4:	d8800015 	stw	r2,0(sp)
   556a8:	e1ffff17 	ldw	r7,-4(fp)
   556ac:	e1bffe17 	ldw	r6,-8(fp)
   556b0:	e17ffd17 	ldw	r5,-12(fp)
   556b4:	e13ffc17 	ldw	r4,-16(fp)
   556b8:	00558300 	call	55830 <alt_iic_isr_register>
}  
   556bc:	e037883a 	mov	sp,fp
   556c0:	dfc00117 	ldw	ra,4(sp)
   556c4:	df000017 	ldw	fp,0(sp)
   556c8:	dec00204 	addi	sp,sp,8
   556cc:	f800283a 	ret

000556d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   556d0:	defff904 	addi	sp,sp,-28
   556d4:	df000615 	stw	fp,24(sp)
   556d8:	df000604 	addi	fp,sp,24
   556dc:	e13ffe15 	stw	r4,-8(fp)
   556e0:	e17fff15 	stw	r5,-4(fp)
   556e4:	e0bfff17 	ldw	r2,-4(fp)
   556e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   556ec:	0005303a 	rdctl	r2,status
   556f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   556f4:	e0fffb17 	ldw	r3,-20(fp)
   556f8:	00bfff84 	movi	r2,-2
   556fc:	1884703a 	and	r2,r3,r2
   55700:	1001703a 	wrctl	status,r2
  
  return context;
   55704:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   55708:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   5570c:	00c00044 	movi	r3,1
   55710:	e0bffa17 	ldw	r2,-24(fp)
   55714:	1884983a 	sll	r2,r3,r2
   55718:	1007883a 	mov	r3,r2
   5571c:	d0a70717 	ldw	r2,-25572(gp)
   55720:	1884b03a 	or	r2,r3,r2
   55724:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   55728:	d0a70717 	ldw	r2,-25572(gp)
   5572c:	100170fa 	wrctl	ienable,r2
   55730:	e0bffc17 	ldw	r2,-16(fp)
   55734:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55738:	e0bffd17 	ldw	r2,-12(fp)
   5573c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   55740:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   55744:	0001883a 	nop
}
   55748:	e037883a 	mov	sp,fp
   5574c:	df000017 	ldw	fp,0(sp)
   55750:	dec00104 	addi	sp,sp,4
   55754:	f800283a 	ret

00055758 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   55758:	defff904 	addi	sp,sp,-28
   5575c:	df000615 	stw	fp,24(sp)
   55760:	df000604 	addi	fp,sp,24
   55764:	e13ffe15 	stw	r4,-8(fp)
   55768:	e17fff15 	stw	r5,-4(fp)
   5576c:	e0bfff17 	ldw	r2,-4(fp)
   55770:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55774:	0005303a 	rdctl	r2,status
   55778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5577c:	e0fffb17 	ldw	r3,-20(fp)
   55780:	00bfff84 	movi	r2,-2
   55784:	1884703a 	and	r2,r3,r2
   55788:	1001703a 	wrctl	status,r2
  
  return context;
   5578c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   55790:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   55794:	00c00044 	movi	r3,1
   55798:	e0bffa17 	ldw	r2,-24(fp)
   5579c:	1884983a 	sll	r2,r3,r2
   557a0:	0084303a 	nor	r2,zero,r2
   557a4:	1007883a 	mov	r3,r2
   557a8:	d0a70717 	ldw	r2,-25572(gp)
   557ac:	1884703a 	and	r2,r3,r2
   557b0:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   557b4:	d0a70717 	ldw	r2,-25572(gp)
   557b8:	100170fa 	wrctl	ienable,r2
   557bc:	e0bffc17 	ldw	r2,-16(fp)
   557c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   557c4:	e0bffd17 	ldw	r2,-12(fp)
   557c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   557cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   557d0:	0001883a 	nop
}
   557d4:	e037883a 	mov	sp,fp
   557d8:	df000017 	ldw	fp,0(sp)
   557dc:	dec00104 	addi	sp,sp,4
   557e0:	f800283a 	ret

000557e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   557e4:	defffc04 	addi	sp,sp,-16
   557e8:	df000315 	stw	fp,12(sp)
   557ec:	df000304 	addi	fp,sp,12
   557f0:	e13ffe15 	stw	r4,-8(fp)
   557f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   557f8:	000530fa 	rdctl	r2,ienable
   557fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   55800:	00c00044 	movi	r3,1
   55804:	e0bfff17 	ldw	r2,-4(fp)
   55808:	1884983a 	sll	r2,r3,r2
   5580c:	1007883a 	mov	r3,r2
   55810:	e0bffd17 	ldw	r2,-12(fp)
   55814:	1884703a 	and	r2,r3,r2
   55818:	1004c03a 	cmpne	r2,r2,zero
   5581c:	10803fcc 	andi	r2,r2,255
}
   55820:	e037883a 	mov	sp,fp
   55824:	df000017 	ldw	fp,0(sp)
   55828:	dec00104 	addi	sp,sp,4
   5582c:	f800283a 	ret

00055830 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   55830:	defff504 	addi	sp,sp,-44
   55834:	dfc00a15 	stw	ra,40(sp)
   55838:	df000915 	stw	fp,36(sp)
   5583c:	df000904 	addi	fp,sp,36
   55840:	e13ffc15 	stw	r4,-16(fp)
   55844:	e17ffd15 	stw	r5,-12(fp)
   55848:	e1bffe15 	stw	r6,-8(fp)
   5584c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   55850:	00bffa84 	movi	r2,-22
   55854:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   55858:	e0bffd17 	ldw	r2,-12(fp)
   5585c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   55860:	e0bff817 	ldw	r2,-32(fp)
   55864:	10800808 	cmpgei	r2,r2,32
   55868:	1000271e 	bne	r2,zero,55908 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5586c:	0005303a 	rdctl	r2,status
   55870:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55874:	e0fffb17 	ldw	r3,-20(fp)
   55878:	00bfff84 	movi	r2,-2
   5587c:	1884703a 	and	r2,r3,r2
   55880:	1001703a 	wrctl	status,r2
  
  return context;
   55884:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   55888:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   5588c:	008001b4 	movhi	r2,6
   55890:	10a8ad04 	addi	r2,r2,-23884
   55894:	e0fff817 	ldw	r3,-32(fp)
   55898:	180690fa 	slli	r3,r3,3
   5589c:	10c5883a 	add	r2,r2,r3
   558a0:	e0fffe17 	ldw	r3,-8(fp)
   558a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   558a8:	008001b4 	movhi	r2,6
   558ac:	10a8ad04 	addi	r2,r2,-23884
   558b0:	e0fff817 	ldw	r3,-32(fp)
   558b4:	180690fa 	slli	r3,r3,3
   558b8:	10c5883a 	add	r2,r2,r3
   558bc:	10800104 	addi	r2,r2,4
   558c0:	e0ffff17 	ldw	r3,-4(fp)
   558c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   558c8:	e0bffe17 	ldw	r2,-8(fp)
   558cc:	10000526 	beq	r2,zero,558e4 <alt_iic_isr_register+0xb4>
   558d0:	e0bff817 	ldw	r2,-32(fp)
   558d4:	100b883a 	mov	r5,r2
   558d8:	e13ffc17 	ldw	r4,-16(fp)
   558dc:	00556d00 	call	556d0 <alt_ic_irq_enable>
   558e0:	00000406 	br	558f4 <alt_iic_isr_register+0xc4>
   558e4:	e0bff817 	ldw	r2,-32(fp)
   558e8:	100b883a 	mov	r5,r2
   558ec:	e13ffc17 	ldw	r4,-16(fp)
   558f0:	00557580 	call	55758 <alt_ic_irq_disable>
   558f4:	e0bff715 	stw	r2,-36(fp)
   558f8:	e0bffa17 	ldw	r2,-24(fp)
   558fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55900:	e0bff917 	ldw	r2,-28(fp)
   55904:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   55908:	e0bff717 	ldw	r2,-36(fp)
}
   5590c:	e037883a 	mov	sp,fp
   55910:	dfc00117 	ldw	ra,4(sp)
   55914:	df000017 	ldw	fp,0(sp)
   55918:	dec00204 	addi	sp,sp,8
   5591c:	f800283a 	ret

00055920 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   55920:	defff804 	addi	sp,sp,-32
   55924:	dfc00715 	stw	ra,28(sp)
   55928:	df000615 	stw	fp,24(sp)
   5592c:	dc000515 	stw	r16,20(sp)
   55930:	df000604 	addi	fp,sp,24
   55934:	e13ffb15 	stw	r4,-20(fp)
   55938:	e17ffc15 	stw	r5,-16(fp)
   5593c:	e1bffd15 	stw	r6,-12(fp)
   55940:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   55944:	e1bffe17 	ldw	r6,-8(fp)
   55948:	e17ffd17 	ldw	r5,-12(fp)
   5594c:	e13ffc17 	ldw	r4,-16(fp)
   55950:	0055ba80 	call	55ba8 <open>
   55954:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   55958:	e0bffa17 	ldw	r2,-24(fp)
   5595c:	10002216 	blt	r2,zero,559e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   55960:	04000174 	movhi	r16,5
   55964:	841cee04 	addi	r16,r16,29624
   55968:	e0bffa17 	ldw	r2,-24(fp)
   5596c:	01400304 	movi	r5,12
   55970:	1009883a 	mov	r4,r2
   55974:	004146c0 	call	4146c <__mulsi3>
   55978:	8085883a 	add	r2,r16,r2
   5597c:	10c00017 	ldw	r3,0(r2)
   55980:	e0bffb17 	ldw	r2,-20(fp)
   55984:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   55988:	04000174 	movhi	r16,5
   5598c:	841cee04 	addi	r16,r16,29624
   55990:	e0bffa17 	ldw	r2,-24(fp)
   55994:	01400304 	movi	r5,12
   55998:	1009883a 	mov	r4,r2
   5599c:	004146c0 	call	4146c <__mulsi3>
   559a0:	8085883a 	add	r2,r16,r2
   559a4:	10800104 	addi	r2,r2,4
   559a8:	10c00017 	ldw	r3,0(r2)
   559ac:	e0bffb17 	ldw	r2,-20(fp)
   559b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   559b4:	04000174 	movhi	r16,5
   559b8:	841cee04 	addi	r16,r16,29624
   559bc:	e0bffa17 	ldw	r2,-24(fp)
   559c0:	01400304 	movi	r5,12
   559c4:	1009883a 	mov	r4,r2
   559c8:	004146c0 	call	4146c <__mulsi3>
   559cc:	8085883a 	add	r2,r16,r2
   559d0:	10800204 	addi	r2,r2,8
   559d4:	10c00017 	ldw	r3,0(r2)
   559d8:	e0bffb17 	ldw	r2,-20(fp)
   559dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   559e0:	e13ffa17 	ldw	r4,-24(fp)
   559e4:	00523300 	call	52330 <alt_release_fd>
  }
} 
   559e8:	0001883a 	nop
   559ec:	e6ffff04 	addi	sp,fp,-4
   559f0:	dfc00217 	ldw	ra,8(sp)
   559f4:	df000117 	ldw	fp,4(sp)
   559f8:	dc000017 	ldw	r16,0(sp)
   559fc:	dec00304 	addi	sp,sp,12
   55a00:	f800283a 	ret

00055a04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   55a04:	defffb04 	addi	sp,sp,-20
   55a08:	dfc00415 	stw	ra,16(sp)
   55a0c:	df000315 	stw	fp,12(sp)
   55a10:	df000304 	addi	fp,sp,12
   55a14:	e13ffd15 	stw	r4,-12(fp)
   55a18:	e17ffe15 	stw	r5,-8(fp)
   55a1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   55a20:	01c07fc4 	movi	r7,511
   55a24:	01800044 	movi	r6,1
   55a28:	e17ffd17 	ldw	r5,-12(fp)
   55a2c:	01000174 	movhi	r4,5
   55a30:	211cf104 	addi	r4,r4,29636
   55a34:	00559200 	call	55920 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   55a38:	01c07fc4 	movi	r7,511
   55a3c:	000d883a 	mov	r6,zero
   55a40:	e17ffe17 	ldw	r5,-8(fp)
   55a44:	01000174 	movhi	r4,5
   55a48:	211cee04 	addi	r4,r4,29624
   55a4c:	00559200 	call	55920 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   55a50:	01c07fc4 	movi	r7,511
   55a54:	01800044 	movi	r6,1
   55a58:	e17fff17 	ldw	r5,-4(fp)
   55a5c:	01000174 	movhi	r4,5
   55a60:	211cf404 	addi	r4,r4,29648
   55a64:	00559200 	call	55920 <alt_open_fd>
}  
   55a68:	0001883a 	nop
   55a6c:	e037883a 	mov	sp,fp
   55a70:	dfc00117 	ldw	ra,4(sp)
   55a74:	df000017 	ldw	fp,0(sp)
   55a78:	dec00204 	addi	sp,sp,8
   55a7c:	f800283a 	ret

00055a80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   55a80:	defffe04 	addi	sp,sp,-8
   55a84:	dfc00115 	stw	ra,4(sp)
   55a88:	df000015 	stw	fp,0(sp)
   55a8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   55a90:	d0a01117 	ldw	r2,-32700(gp)
   55a94:	10000326 	beq	r2,zero,55aa4 <alt_get_errno+0x24>
   55a98:	d0a01117 	ldw	r2,-32700(gp)
   55a9c:	103ee83a 	callr	r2
   55aa0:	00000106 	br	55aa8 <alt_get_errno+0x28>
   55aa4:	d0a70304 	addi	r2,gp,-25588
}
   55aa8:	e037883a 	mov	sp,fp
   55aac:	dfc00117 	ldw	ra,4(sp)
   55ab0:	df000017 	ldw	fp,0(sp)
   55ab4:	dec00204 	addi	sp,sp,8
   55ab8:	f800283a 	ret

00055abc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   55abc:	defffb04 	addi	sp,sp,-20
   55ac0:	dfc00415 	stw	ra,16(sp)
   55ac4:	df000315 	stw	fp,12(sp)
   55ac8:	dc000215 	stw	r16,8(sp)
   55acc:	df000304 	addi	fp,sp,12
   55ad0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   55ad4:	e0bffe17 	ldw	r2,-8(fp)
   55ad8:	10800217 	ldw	r2,8(r2)
   55adc:	10d00034 	orhi	r3,r2,16384
   55ae0:	e0bffe17 	ldw	r2,-8(fp)
   55ae4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   55ae8:	e03ffd15 	stw	zero,-12(fp)
   55aec:	00002306 	br	55b7c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   55af0:	04000174 	movhi	r16,5
   55af4:	841cee04 	addi	r16,r16,29624
   55af8:	e0bffd17 	ldw	r2,-12(fp)
   55afc:	01400304 	movi	r5,12
   55b00:	1009883a 	mov	r4,r2
   55b04:	004146c0 	call	4146c <__mulsi3>
   55b08:	8085883a 	add	r2,r16,r2
   55b0c:	10c00017 	ldw	r3,0(r2)
   55b10:	e0bffe17 	ldw	r2,-8(fp)
   55b14:	10800017 	ldw	r2,0(r2)
   55b18:	1880151e 	bne	r3,r2,55b70 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   55b1c:	04000174 	movhi	r16,5
   55b20:	841cee04 	addi	r16,r16,29624
   55b24:	e0bffd17 	ldw	r2,-12(fp)
   55b28:	01400304 	movi	r5,12
   55b2c:	1009883a 	mov	r4,r2
   55b30:	004146c0 	call	4146c <__mulsi3>
   55b34:	8085883a 	add	r2,r16,r2
   55b38:	10800204 	addi	r2,r2,8
   55b3c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   55b40:	10000b0e 	bge	r2,zero,55b70 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   55b44:	01400304 	movi	r5,12
   55b48:	e13ffd17 	ldw	r4,-12(fp)
   55b4c:	004146c0 	call	4146c <__mulsi3>
   55b50:	1007883a 	mov	r3,r2
   55b54:	00800174 	movhi	r2,5
   55b58:	109cee04 	addi	r2,r2,29624
   55b5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   55b60:	e0bffe17 	ldw	r2,-8(fp)
   55b64:	18800226 	beq	r3,r2,55b70 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   55b68:	00bffcc4 	movi	r2,-13
   55b6c:	00000806 	br	55b90 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   55b70:	e0bffd17 	ldw	r2,-12(fp)
   55b74:	10800044 	addi	r2,r2,1
   55b78:	e0bffd15 	stw	r2,-12(fp)
   55b7c:	d0a01017 	ldw	r2,-32704(gp)
   55b80:	1007883a 	mov	r3,r2
   55b84:	e0bffd17 	ldw	r2,-12(fp)
   55b88:	18bfd92e 	bgeu	r3,r2,55af0 <__alt_data_end+0xfffe3af0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   55b8c:	0005883a 	mov	r2,zero
}
   55b90:	e6ffff04 	addi	sp,fp,-4
   55b94:	dfc00217 	ldw	ra,8(sp)
   55b98:	df000117 	ldw	fp,4(sp)
   55b9c:	dc000017 	ldw	r16,0(sp)
   55ba0:	dec00304 	addi	sp,sp,12
   55ba4:	f800283a 	ret

00055ba8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   55ba8:	defff604 	addi	sp,sp,-40
   55bac:	dfc00915 	stw	ra,36(sp)
   55bb0:	df000815 	stw	fp,32(sp)
   55bb4:	df000804 	addi	fp,sp,32
   55bb8:	e13ffd15 	stw	r4,-12(fp)
   55bbc:	e17ffe15 	stw	r5,-8(fp)
   55bc0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   55bc4:	00bfffc4 	movi	r2,-1
   55bc8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   55bcc:	00bffb44 	movi	r2,-19
   55bd0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   55bd4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   55bd8:	d1600e04 	addi	r5,gp,-32712
   55bdc:	e13ffd17 	ldw	r4,-12(fp)
   55be0:	00555d00 	call	555d0 <alt_find_dev>
   55be4:	e0bff815 	stw	r2,-32(fp)
   55be8:	e0bff817 	ldw	r2,-32(fp)
   55bec:	1000051e 	bne	r2,zero,55c04 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   55bf0:	e13ffd17 	ldw	r4,-12(fp)
   55bf4:	00561340 	call	56134 <alt_find_file>
   55bf8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   55bfc:	00800044 	movi	r2,1
   55c00:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   55c04:	e0bff817 	ldw	r2,-32(fp)
   55c08:	10002b26 	beq	r2,zero,55cb8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   55c0c:	e13ff817 	ldw	r4,-32(fp)
   55c10:	005623c0 	call	5623c <alt_get_fd>
   55c14:	e0bff915 	stw	r2,-28(fp)
   55c18:	e0bff917 	ldw	r2,-28(fp)
   55c1c:	1000030e 	bge	r2,zero,55c2c <open+0x84>
    {
      status = index;
   55c20:	e0bff917 	ldw	r2,-28(fp)
   55c24:	e0bffa15 	stw	r2,-24(fp)
   55c28:	00002506 	br	55cc0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   55c2c:	01400304 	movi	r5,12
   55c30:	e13ff917 	ldw	r4,-28(fp)
   55c34:	004146c0 	call	4146c <__mulsi3>
   55c38:	1007883a 	mov	r3,r2
   55c3c:	00800174 	movhi	r2,5
   55c40:	109cee04 	addi	r2,r2,29624
   55c44:	1885883a 	add	r2,r3,r2
   55c48:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   55c4c:	e0fffe17 	ldw	r3,-8(fp)
   55c50:	00900034 	movhi	r2,16384
   55c54:	10bfffc4 	addi	r2,r2,-1
   55c58:	1886703a 	and	r3,r3,r2
   55c5c:	e0bffc17 	ldw	r2,-16(fp)
   55c60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   55c64:	e0bffb17 	ldw	r2,-20(fp)
   55c68:	1000051e 	bne	r2,zero,55c80 <open+0xd8>
   55c6c:	e13ffc17 	ldw	r4,-16(fp)
   55c70:	0055abc0 	call	55abc <alt_file_locked>
   55c74:	e0bffa15 	stw	r2,-24(fp)
   55c78:	e0bffa17 	ldw	r2,-24(fp)
   55c7c:	10001016 	blt	r2,zero,55cc0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   55c80:	e0bff817 	ldw	r2,-32(fp)
   55c84:	10800317 	ldw	r2,12(r2)
   55c88:	10000826 	beq	r2,zero,55cac <open+0x104>
   55c8c:	e0bff817 	ldw	r2,-32(fp)
   55c90:	10800317 	ldw	r2,12(r2)
   55c94:	e1ffff17 	ldw	r7,-4(fp)
   55c98:	e1bffe17 	ldw	r6,-8(fp)
   55c9c:	e17ffd17 	ldw	r5,-12(fp)
   55ca0:	e13ffc17 	ldw	r4,-16(fp)
   55ca4:	103ee83a 	callr	r2
   55ca8:	00000106 	br	55cb0 <open+0x108>
   55cac:	0005883a 	mov	r2,zero
   55cb0:	e0bffa15 	stw	r2,-24(fp)
   55cb4:	00000206 	br	55cc0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   55cb8:	00bffb44 	movi	r2,-19
   55cbc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   55cc0:	e0bffa17 	ldw	r2,-24(fp)
   55cc4:	1000090e 	bge	r2,zero,55cec <open+0x144>
  {
    alt_release_fd (index);  
   55cc8:	e13ff917 	ldw	r4,-28(fp)
   55ccc:	00523300 	call	52330 <alt_release_fd>
    ALT_ERRNO = -status;
   55cd0:	0055a800 	call	55a80 <alt_get_errno>
   55cd4:	1007883a 	mov	r3,r2
   55cd8:	e0bffa17 	ldw	r2,-24(fp)
   55cdc:	0085c83a 	sub	r2,zero,r2
   55ce0:	18800015 	stw	r2,0(r3)
    return -1;
   55ce4:	00bfffc4 	movi	r2,-1
   55ce8:	00000106 	br	55cf0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   55cec:	e0bff917 	ldw	r2,-28(fp)
}
   55cf0:	e037883a 	mov	sp,fp
   55cf4:	dfc00117 	ldw	ra,4(sp)
   55cf8:	df000017 	ldw	fp,0(sp)
   55cfc:	dec00204 	addi	sp,sp,8
   55d00:	f800283a 	ret

00055d04 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   55d04:	defff204 	addi	sp,sp,-56
   55d08:	dfc00a15 	stw	ra,40(sp)
   55d0c:	df000915 	stw	fp,36(sp)
   55d10:	df000904 	addi	fp,sp,36
   55d14:	e13fff15 	stw	r4,-4(fp)
   55d18:	e1400215 	stw	r5,8(fp)
   55d1c:	e1800315 	stw	r6,12(fp)
   55d20:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   55d24:	e0800204 	addi	r2,fp,8
   55d28:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   55d2c:	e0bfff17 	ldw	r2,-4(fp)
   55d30:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   55d34:	00006f06 	br	55ef4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   55d38:	e0bff807 	ldb	r2,-32(fp)
   55d3c:	10800960 	cmpeqi	r2,r2,37
   55d40:	1000041e 	bne	r2,zero,55d54 <alt_printf+0x50>
        {
            alt_putchar(c);
   55d44:	e0bff807 	ldb	r2,-32(fp)
   55d48:	1009883a 	mov	r4,r2
   55d4c:	0055f300 	call	55f30 <alt_putchar>
   55d50:	00006806 	br	55ef4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   55d54:	e0bff717 	ldw	r2,-36(fp)
   55d58:	10c00044 	addi	r3,r2,1
   55d5c:	e0fff715 	stw	r3,-36(fp)
   55d60:	10800003 	ldbu	r2,0(r2)
   55d64:	e0bff805 	stb	r2,-32(fp)
   55d68:	e0bff807 	ldb	r2,-32(fp)
   55d6c:	10006926 	beq	r2,zero,55f14 <alt_printf+0x210>
            {
                if (c == '%')
   55d70:	e0bff807 	ldb	r2,-32(fp)
   55d74:	10800958 	cmpnei	r2,r2,37
   55d78:	1000041e 	bne	r2,zero,55d8c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   55d7c:	e0bff807 	ldb	r2,-32(fp)
   55d80:	1009883a 	mov	r4,r2
   55d84:	0055f300 	call	55f30 <alt_putchar>
   55d88:	00005a06 	br	55ef4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   55d8c:	e0bff807 	ldb	r2,-32(fp)
   55d90:	108018d8 	cmpnei	r2,r2,99
   55d94:	1000081e 	bne	r2,zero,55db8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   55d98:	e0bffe17 	ldw	r2,-8(fp)
   55d9c:	10c00104 	addi	r3,r2,4
   55da0:	e0fffe15 	stw	r3,-8(fp)
   55da4:	10800017 	ldw	r2,0(r2)
   55da8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   55dac:	e13ffd17 	ldw	r4,-12(fp)
   55db0:	0055f300 	call	55f30 <alt_putchar>
   55db4:	00004f06 	br	55ef4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   55db8:	e0bff807 	ldb	r2,-32(fp)
   55dbc:	10801e18 	cmpnei	r2,r2,120
   55dc0:	1000341e 	bne	r2,zero,55e94 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   55dc4:	e0bffe17 	ldw	r2,-8(fp)
   55dc8:	10c00104 	addi	r3,r2,4
   55dcc:	e0fffe15 	stw	r3,-8(fp)
   55dd0:	10800017 	ldw	r2,0(r2)
   55dd4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   55dd8:	e0bffb17 	ldw	r2,-20(fp)
   55ddc:	1000031e 	bne	r2,zero,55dec <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   55de0:	01000c04 	movi	r4,48
   55de4:	0055f300 	call	55f30 <alt_putchar>
                        continue;
   55de8:	00004206 	br	55ef4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   55dec:	00800704 	movi	r2,28
   55df0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   55df4:	00000306 	br	55e04 <alt_printf+0x100>
                        digit_shift -= 4;
   55df8:	e0bff917 	ldw	r2,-28(fp)
   55dfc:	10bfff04 	addi	r2,r2,-4
   55e00:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   55e04:	00c003c4 	movi	r3,15
   55e08:	e0bff917 	ldw	r2,-28(fp)
   55e0c:	1884983a 	sll	r2,r3,r2
   55e10:	1007883a 	mov	r3,r2
   55e14:	e0bffb17 	ldw	r2,-20(fp)
   55e18:	1884703a 	and	r2,r3,r2
   55e1c:	103ff626 	beq	r2,zero,55df8 <__alt_data_end+0xfffe3df8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   55e20:	00001906 	br	55e88 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   55e24:	00c003c4 	movi	r3,15
   55e28:	e0bff917 	ldw	r2,-28(fp)
   55e2c:	1884983a 	sll	r2,r3,r2
   55e30:	1007883a 	mov	r3,r2
   55e34:	e0bffb17 	ldw	r2,-20(fp)
   55e38:	1886703a 	and	r3,r3,r2
   55e3c:	e0bff917 	ldw	r2,-28(fp)
   55e40:	1884d83a 	srl	r2,r3,r2
   55e44:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   55e48:	e0bffc17 	ldw	r2,-16(fp)
   55e4c:	108002a8 	cmpgeui	r2,r2,10
   55e50:	1000041e 	bne	r2,zero,55e64 <alt_printf+0x160>
                            c = '0' + digit;
   55e54:	e0bffc17 	ldw	r2,-16(fp)
   55e58:	10800c04 	addi	r2,r2,48
   55e5c:	e0bff805 	stb	r2,-32(fp)
   55e60:	00000306 	br	55e70 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   55e64:	e0bffc17 	ldw	r2,-16(fp)
   55e68:	108015c4 	addi	r2,r2,87
   55e6c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   55e70:	e0bff807 	ldb	r2,-32(fp)
   55e74:	1009883a 	mov	r4,r2
   55e78:	0055f300 	call	55f30 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   55e7c:	e0bff917 	ldw	r2,-28(fp)
   55e80:	10bfff04 	addi	r2,r2,-4
   55e84:	e0bff915 	stw	r2,-28(fp)
   55e88:	e0bff917 	ldw	r2,-28(fp)
   55e8c:	103fe50e 	bge	r2,zero,55e24 <__alt_data_end+0xfffe3e24>
   55e90:	00001806 	br	55ef4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   55e94:	e0bff807 	ldb	r2,-32(fp)
   55e98:	10801cd8 	cmpnei	r2,r2,115
   55e9c:	1000151e 	bne	r2,zero,55ef4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   55ea0:	e0bffe17 	ldw	r2,-8(fp)
   55ea4:	10c00104 	addi	r3,r2,4
   55ea8:	e0fffe15 	stw	r3,-8(fp)
   55eac:	10800017 	ldw	r2,0(r2)
   55eb0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   55eb4:	00000906 	br	55edc <alt_printf+0x1d8>
                      alt_putchar(*s++);
   55eb8:	e0bffa17 	ldw	r2,-24(fp)
   55ebc:	10c00044 	addi	r3,r2,1
   55ec0:	e0fffa15 	stw	r3,-24(fp)
   55ec4:	10800003 	ldbu	r2,0(r2)
   55ec8:	10803fcc 	andi	r2,r2,255
   55ecc:	1080201c 	xori	r2,r2,128
   55ed0:	10bfe004 	addi	r2,r2,-128
   55ed4:	1009883a 	mov	r4,r2
   55ed8:	0055f300 	call	55f30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   55edc:	e0bffa17 	ldw	r2,-24(fp)
   55ee0:	10800003 	ldbu	r2,0(r2)
   55ee4:	10803fcc 	andi	r2,r2,255
   55ee8:	1080201c 	xori	r2,r2,128
   55eec:	10bfe004 	addi	r2,r2,-128
   55ef0:	103ff11e 	bne	r2,zero,55eb8 <__alt_data_end+0xfffe3eb8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   55ef4:	e0bff717 	ldw	r2,-36(fp)
   55ef8:	10c00044 	addi	r3,r2,1
   55efc:	e0fff715 	stw	r3,-36(fp)
   55f00:	10800003 	ldbu	r2,0(r2)
   55f04:	e0bff805 	stb	r2,-32(fp)
   55f08:	e0bff807 	ldb	r2,-32(fp)
   55f0c:	103f8a1e 	bne	r2,zero,55d38 <__alt_data_end+0xfffe3d38>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   55f10:	00000106 	br	55f18 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   55f14:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   55f18:	0001883a 	nop
   55f1c:	e037883a 	mov	sp,fp
   55f20:	dfc00117 	ldw	ra,4(sp)
   55f24:	df000017 	ldw	fp,0(sp)
   55f28:	dec00504 	addi	sp,sp,20
   55f2c:	f800283a 	ret

00055f30 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   55f30:	defffd04 	addi	sp,sp,-12
   55f34:	dfc00215 	stw	ra,8(sp)
   55f38:	df000115 	stw	fp,4(sp)
   55f3c:	df000104 	addi	fp,sp,4
   55f40:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   55f44:	d0a00717 	ldw	r2,-32740(gp)
   55f48:	10800217 	ldw	r2,8(r2)
   55f4c:	100b883a 	mov	r5,r2
   55f50:	e13fff17 	ldw	r4,-4(fp)
   55f54:	004a94c0 	call	4a94c <putc>
#endif
#endif
}
   55f58:	e037883a 	mov	sp,fp
   55f5c:	dfc00117 	ldw	ra,4(sp)
   55f60:	df000017 	ldw	fp,0(sp)
   55f64:	dec00204 	addi	sp,sp,8
   55f68:	f800283a 	ret

00055f6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   55f6c:	defffa04 	addi	sp,sp,-24
   55f70:	df000515 	stw	fp,20(sp)
   55f74:	df000504 	addi	fp,sp,20
   55f78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55f7c:	0005303a 	rdctl	r2,status
   55f80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55f84:	e0fffc17 	ldw	r3,-16(fp)
   55f88:	00bfff84 	movi	r2,-2
   55f8c:	1884703a 	and	r2,r3,r2
   55f90:	1001703a 	wrctl	status,r2
  
  return context;
   55f94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   55f98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   55f9c:	e0bfff17 	ldw	r2,-4(fp)
   55fa0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   55fa4:	e0bffd17 	ldw	r2,-12(fp)
   55fa8:	10800017 	ldw	r2,0(r2)
   55fac:	e0fffd17 	ldw	r3,-12(fp)
   55fb0:	18c00117 	ldw	r3,4(r3)
   55fb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   55fb8:	e0bffd17 	ldw	r2,-12(fp)
   55fbc:	10800117 	ldw	r2,4(r2)
   55fc0:	e0fffd17 	ldw	r3,-12(fp)
   55fc4:	18c00017 	ldw	r3,0(r3)
   55fc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   55fcc:	e0bffd17 	ldw	r2,-12(fp)
   55fd0:	e0fffd17 	ldw	r3,-12(fp)
   55fd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   55fd8:	e0bffd17 	ldw	r2,-12(fp)
   55fdc:	e0fffd17 	ldw	r3,-12(fp)
   55fe0:	10c00015 	stw	r3,0(r2)
   55fe4:	e0bffb17 	ldw	r2,-20(fp)
   55fe8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   55fec:	e0bffe17 	ldw	r2,-8(fp)
   55ff0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   55ff4:	0001883a 	nop
   55ff8:	e037883a 	mov	sp,fp
   55ffc:	df000017 	ldw	fp,0(sp)
   56000:	dec00104 	addi	sp,sp,4
   56004:	f800283a 	ret

00056008 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   56008:	defffb04 	addi	sp,sp,-20
   5600c:	dfc00415 	stw	ra,16(sp)
   56010:	df000315 	stw	fp,12(sp)
   56014:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   56018:	d0a01617 	ldw	r2,-32680(gp)
   5601c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   56020:	d0a70917 	ldw	r2,-25564(gp)
   56024:	10800044 	addi	r2,r2,1
   56028:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5602c:	00002e06 	br	560e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   56030:	e0bffd17 	ldw	r2,-12(fp)
   56034:	10800017 	ldw	r2,0(r2)
   56038:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   5603c:	e0bffd17 	ldw	r2,-12(fp)
   56040:	10800403 	ldbu	r2,16(r2)
   56044:	10803fcc 	andi	r2,r2,255
   56048:	10000426 	beq	r2,zero,5605c <alt_tick+0x54>
   5604c:	d0a70917 	ldw	r2,-25564(gp)
   56050:	1000021e 	bne	r2,zero,5605c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   56054:	e0bffd17 	ldw	r2,-12(fp)
   56058:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   5605c:	e0bffd17 	ldw	r2,-12(fp)
   56060:	10800217 	ldw	r2,8(r2)
   56064:	d0e70917 	ldw	r3,-25564(gp)
   56068:	18801d36 	bltu	r3,r2,560e0 <alt_tick+0xd8>
   5606c:	e0bffd17 	ldw	r2,-12(fp)
   56070:	10800403 	ldbu	r2,16(r2)
   56074:	10803fcc 	andi	r2,r2,255
   56078:	1000191e 	bne	r2,zero,560e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   5607c:	e0bffd17 	ldw	r2,-12(fp)
   56080:	10800317 	ldw	r2,12(r2)
   56084:	e0fffd17 	ldw	r3,-12(fp)
   56088:	18c00517 	ldw	r3,20(r3)
   5608c:	1809883a 	mov	r4,r3
   56090:	103ee83a 	callr	r2
   56094:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   56098:	e0bfff17 	ldw	r2,-4(fp)
   5609c:	1000031e 	bne	r2,zero,560ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   560a0:	e13ffd17 	ldw	r4,-12(fp)
   560a4:	0055f6c0 	call	55f6c <alt_alarm_stop>
   560a8:	00000d06 	br	560e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   560ac:	e0bffd17 	ldw	r2,-12(fp)
   560b0:	10c00217 	ldw	r3,8(r2)
   560b4:	e0bfff17 	ldw	r2,-4(fp)
   560b8:	1887883a 	add	r3,r3,r2
   560bc:	e0bffd17 	ldw	r2,-12(fp)
   560c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   560c4:	e0bffd17 	ldw	r2,-12(fp)
   560c8:	10c00217 	ldw	r3,8(r2)
   560cc:	d0a70917 	ldw	r2,-25564(gp)
   560d0:	1880032e 	bgeu	r3,r2,560e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   560d4:	e0bffd17 	ldw	r2,-12(fp)
   560d8:	00c00044 	movi	r3,1
   560dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   560e0:	e0bffe17 	ldw	r2,-8(fp)
   560e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   560e8:	e0fffd17 	ldw	r3,-12(fp)
   560ec:	d0a01604 	addi	r2,gp,-32680
   560f0:	18bfcf1e 	bne	r3,r2,56030 <__alt_data_end+0xfffe4030>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   560f4:	0001883a 	nop
}
   560f8:	0001883a 	nop
   560fc:	e037883a 	mov	sp,fp
   56100:	dfc00117 	ldw	ra,4(sp)
   56104:	df000017 	ldw	fp,0(sp)
   56108:	dec00204 	addi	sp,sp,8
   5610c:	f800283a 	ret

00056110 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   56110:	deffff04 	addi	sp,sp,-4
   56114:	df000015 	stw	fp,0(sp)
   56118:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   5611c:	000170fa 	wrctl	ienable,zero
}
   56120:	0001883a 	nop
   56124:	e037883a 	mov	sp,fp
   56128:	df000017 	ldw	fp,0(sp)
   5612c:	dec00104 	addi	sp,sp,4
   56130:	f800283a 	ret

00056134 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   56134:	defffb04 	addi	sp,sp,-20
   56138:	dfc00415 	stw	ra,16(sp)
   5613c:	df000315 	stw	fp,12(sp)
   56140:	df000304 	addi	fp,sp,12
   56144:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   56148:	d0a00c17 	ldw	r2,-32720(gp)
   5614c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   56150:	00003106 	br	56218 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   56154:	e0bffd17 	ldw	r2,-12(fp)
   56158:	10800217 	ldw	r2,8(r2)
   5615c:	1009883a 	mov	r4,r2
   56160:	00416b80 	call	416b8 <strlen>
   56164:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   56168:	e0bffd17 	ldw	r2,-12(fp)
   5616c:	10c00217 	ldw	r3,8(r2)
   56170:	e0bffe17 	ldw	r2,-8(fp)
   56174:	10bfffc4 	addi	r2,r2,-1
   56178:	1885883a 	add	r2,r3,r2
   5617c:	10800003 	ldbu	r2,0(r2)
   56180:	10803fcc 	andi	r2,r2,255
   56184:	1080201c 	xori	r2,r2,128
   56188:	10bfe004 	addi	r2,r2,-128
   5618c:	10800bd8 	cmpnei	r2,r2,47
   56190:	1000031e 	bne	r2,zero,561a0 <alt_find_file+0x6c>
    {
      len -= 1;
   56194:	e0bffe17 	ldw	r2,-8(fp)
   56198:	10bfffc4 	addi	r2,r2,-1
   5619c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   561a0:	e0bffe17 	ldw	r2,-8(fp)
   561a4:	e0ffff17 	ldw	r3,-4(fp)
   561a8:	1885883a 	add	r2,r3,r2
   561ac:	10800003 	ldbu	r2,0(r2)
   561b0:	10803fcc 	andi	r2,r2,255
   561b4:	1080201c 	xori	r2,r2,128
   561b8:	10bfe004 	addi	r2,r2,-128
   561bc:	10800be0 	cmpeqi	r2,r2,47
   561c0:	1000081e 	bne	r2,zero,561e4 <alt_find_file+0xb0>
   561c4:	e0bffe17 	ldw	r2,-8(fp)
   561c8:	e0ffff17 	ldw	r3,-4(fp)
   561cc:	1885883a 	add	r2,r3,r2
   561d0:	10800003 	ldbu	r2,0(r2)
   561d4:	10803fcc 	andi	r2,r2,255
   561d8:	1080201c 	xori	r2,r2,128
   561dc:	10bfe004 	addi	r2,r2,-128
   561e0:	10000a1e 	bne	r2,zero,5620c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   561e4:	e0bffd17 	ldw	r2,-12(fp)
   561e8:	10800217 	ldw	r2,8(r2)
   561ec:	e0fffe17 	ldw	r3,-8(fp)
   561f0:	180d883a 	mov	r6,r3
   561f4:	e17fff17 	ldw	r5,-4(fp)
   561f8:	1009883a 	mov	r4,r2
   561fc:	00563e80 	call	563e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   56200:	1000021e 	bne	r2,zero,5620c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   56204:	e0bffd17 	ldw	r2,-12(fp)
   56208:	00000706 	br	56228 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   5620c:	e0bffd17 	ldw	r2,-12(fp)
   56210:	10800017 	ldw	r2,0(r2)
   56214:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   56218:	e0fffd17 	ldw	r3,-12(fp)
   5621c:	d0a00c04 	addi	r2,gp,-32720
   56220:	18bfcc1e 	bne	r3,r2,56154 <__alt_data_end+0xfffe4154>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   56224:	0005883a 	mov	r2,zero
}
   56228:	e037883a 	mov	sp,fp
   5622c:	dfc00117 	ldw	ra,4(sp)
   56230:	df000017 	ldw	fp,0(sp)
   56234:	dec00204 	addi	sp,sp,8
   56238:	f800283a 	ret

0005623c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   5623c:	defffa04 	addi	sp,sp,-24
   56240:	dfc00515 	stw	ra,20(sp)
   56244:	df000415 	stw	fp,16(sp)
   56248:	dc000315 	stw	r16,12(sp)
   5624c:	df000404 	addi	fp,sp,16
   56250:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   56254:	00bffa04 	movi	r2,-24
   56258:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5625c:	e03ffc15 	stw	zero,-16(fp)
   56260:	00001d06 	br	562d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   56264:	04000174 	movhi	r16,5
   56268:	841cee04 	addi	r16,r16,29624
   5626c:	e0bffc17 	ldw	r2,-16(fp)
   56270:	01400304 	movi	r5,12
   56274:	1009883a 	mov	r4,r2
   56278:	004146c0 	call	4146c <__mulsi3>
   5627c:	8085883a 	add	r2,r16,r2
   56280:	10800017 	ldw	r2,0(r2)
   56284:	1000111e 	bne	r2,zero,562cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   56288:	04000174 	movhi	r16,5
   5628c:	841cee04 	addi	r16,r16,29624
   56290:	e0bffc17 	ldw	r2,-16(fp)
   56294:	01400304 	movi	r5,12
   56298:	1009883a 	mov	r4,r2
   5629c:	004146c0 	call	4146c <__mulsi3>
   562a0:	8085883a 	add	r2,r16,r2
   562a4:	e0fffe17 	ldw	r3,-8(fp)
   562a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   562ac:	d0e01017 	ldw	r3,-32704(gp)
   562b0:	e0bffc17 	ldw	r2,-16(fp)
   562b4:	1880020e 	bge	r3,r2,562c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   562b8:	e0bffc17 	ldw	r2,-16(fp)
   562bc:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
   562c0:	e0bffc17 	ldw	r2,-16(fp)
   562c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   562c8:	00000606 	br	562e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   562cc:	e0bffc17 	ldw	r2,-16(fp)
   562d0:	10800044 	addi	r2,r2,1
   562d4:	e0bffc15 	stw	r2,-16(fp)
   562d8:	e0bffc17 	ldw	r2,-16(fp)
   562dc:	10800810 	cmplti	r2,r2,32
   562e0:	103fe01e 	bne	r2,zero,56264 <__alt_data_end+0xfffe4264>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   562e4:	e0bffd17 	ldw	r2,-12(fp)
}
   562e8:	e6ffff04 	addi	sp,fp,-4
   562ec:	dfc00217 	ldw	ra,8(sp)
   562f0:	df000117 	ldw	fp,4(sp)
   562f4:	dc000017 	ldw	r16,0(sp)
   562f8:	dec00304 	addi	sp,sp,12
   562fc:	f800283a 	ret

00056300 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   56300:	defffe04 	addi	sp,sp,-8
   56304:	df000115 	stw	fp,4(sp)
   56308:	df000104 	addi	fp,sp,4
   5630c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   56310:	e0bfff17 	ldw	r2,-4(fp)
   56314:	10bffe84 	addi	r2,r2,-6
   56318:	10c00428 	cmpgeui	r3,r2,16
   5631c:	18001a1e 	bne	r3,zero,56388 <alt_exception_cause_generated_bad_addr+0x88>
   56320:	100690ba 	slli	r3,r2,2
   56324:	00800174 	movhi	r2,5
   56328:	1098ce04 	addi	r2,r2,25400
   5632c:	1885883a 	add	r2,r3,r2
   56330:	10800017 	ldw	r2,0(r2)
   56334:	1000683a 	jmp	r2
   56338:	00056378 	rdprs	zero,zero,5517
   5633c:	00056378 	rdprs	zero,zero,5517
   56340:	00056388 	cmpgei	zero,zero,5518
   56344:	00056388 	cmpgei	zero,zero,5518
   56348:	00056388 	cmpgei	zero,zero,5518
   5634c:	00056378 	rdprs	zero,zero,5517
   56350:	00056380 	call	5638 <__alt_mem_RAM-0x3a9c8>
   56354:	00056388 	cmpgei	zero,zero,5518
   56358:	00056378 	rdprs	zero,zero,5517
   5635c:	00056378 	rdprs	zero,zero,5517
   56360:	00056388 	cmpgei	zero,zero,5518
   56364:	00056378 	rdprs	zero,zero,5517
   56368:	00056380 	call	5638 <__alt_mem_RAM-0x3a9c8>
   5636c:	00056388 	cmpgei	zero,zero,5518
   56370:	00056388 	cmpgei	zero,zero,5518
   56374:	00056378 	rdprs	zero,zero,5517
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   56378:	00800044 	movi	r2,1
   5637c:	00000306 	br	5638c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   56380:	0005883a 	mov	r2,zero
   56384:	00000106 	br	5638c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   56388:	0005883a 	mov	r2,zero
  }
}
   5638c:	e037883a 	mov	sp,fp
   56390:	df000017 	ldw	fp,0(sp)
   56394:	dec00104 	addi	sp,sp,4
   56398:	f800283a 	ret

0005639c <atexit>:
   5639c:	200b883a 	mov	r5,r4
   563a0:	000f883a 	mov	r7,zero
   563a4:	000d883a 	mov	r6,zero
   563a8:	0009883a 	mov	r4,zero
   563ac:	00564641 	jmpi	56464 <__register_exitproc>

000563b0 <exit>:
   563b0:	defffe04 	addi	sp,sp,-8
   563b4:	000b883a 	mov	r5,zero
   563b8:	dc000015 	stw	r16,0(sp)
   563bc:	dfc00115 	stw	ra,4(sp)
   563c0:	2021883a 	mov	r16,r4
   563c4:	005657c0 	call	5657c <__call_exitprocs>
   563c8:	008001b4 	movhi	r2,6
   563cc:	10a18504 	addi	r2,r2,-31212
   563d0:	11000017 	ldw	r4,0(r2)
   563d4:	20800f17 	ldw	r2,60(r4)
   563d8:	10000126 	beq	r2,zero,563e0 <exit+0x30>
   563dc:	103ee83a 	callr	r2
   563e0:	8009883a 	mov	r4,r16
   563e4:	00566fc0 	call	566fc <_exit>

000563e8 <memcmp>:
   563e8:	01c000c4 	movi	r7,3
   563ec:	3980192e 	bgeu	r7,r6,56454 <memcmp+0x6c>
   563f0:	2144b03a 	or	r2,r4,r5
   563f4:	11c4703a 	and	r2,r2,r7
   563f8:	10000f26 	beq	r2,zero,56438 <memcmp+0x50>
   563fc:	20800003 	ldbu	r2,0(r4)
   56400:	28c00003 	ldbu	r3,0(r5)
   56404:	10c0151e 	bne	r2,r3,5645c <memcmp+0x74>
   56408:	31bfff84 	addi	r6,r6,-2
   5640c:	01ffffc4 	movi	r7,-1
   56410:	00000406 	br	56424 <memcmp+0x3c>
   56414:	20800003 	ldbu	r2,0(r4)
   56418:	28c00003 	ldbu	r3,0(r5)
   5641c:	31bfffc4 	addi	r6,r6,-1
   56420:	10c00e1e 	bne	r2,r3,5645c <memcmp+0x74>
   56424:	21000044 	addi	r4,r4,1
   56428:	29400044 	addi	r5,r5,1
   5642c:	31fff91e 	bne	r6,r7,56414 <__alt_data_end+0xfffe4414>
   56430:	0005883a 	mov	r2,zero
   56434:	f800283a 	ret
   56438:	20c00017 	ldw	r3,0(r4)
   5643c:	28800017 	ldw	r2,0(r5)
   56440:	18bfee1e 	bne	r3,r2,563fc <__alt_data_end+0xfffe43fc>
   56444:	31bfff04 	addi	r6,r6,-4
   56448:	21000104 	addi	r4,r4,4
   5644c:	29400104 	addi	r5,r5,4
   56450:	39bff936 	bltu	r7,r6,56438 <__alt_data_end+0xfffe4438>
   56454:	303fe91e 	bne	r6,zero,563fc <__alt_data_end+0xfffe43fc>
   56458:	003ff506 	br	56430 <__alt_data_end+0xfffe4430>
   5645c:	10c5c83a 	sub	r2,r2,r3
   56460:	f800283a 	ret

00056464 <__register_exitproc>:
   56464:	defffa04 	addi	sp,sp,-24
   56468:	dc000315 	stw	r16,12(sp)
   5646c:	040001b4 	movhi	r16,6
   56470:	84218504 	addi	r16,r16,-31212
   56474:	80c00017 	ldw	r3,0(r16)
   56478:	dc400415 	stw	r17,16(sp)
   5647c:	dfc00515 	stw	ra,20(sp)
   56480:	18805217 	ldw	r2,328(r3)
   56484:	2023883a 	mov	r17,r4
   56488:	10003726 	beq	r2,zero,56568 <__register_exitproc+0x104>
   5648c:	10c00117 	ldw	r3,4(r2)
   56490:	010007c4 	movi	r4,31
   56494:	20c00e16 	blt	r4,r3,564d0 <__register_exitproc+0x6c>
   56498:	1a000044 	addi	r8,r3,1
   5649c:	8800221e 	bne	r17,zero,56528 <__register_exitproc+0xc4>
   564a0:	18c00084 	addi	r3,r3,2
   564a4:	18c7883a 	add	r3,r3,r3
   564a8:	18c7883a 	add	r3,r3,r3
   564ac:	12000115 	stw	r8,4(r2)
   564b0:	10c7883a 	add	r3,r2,r3
   564b4:	19400015 	stw	r5,0(r3)
   564b8:	0005883a 	mov	r2,zero
   564bc:	dfc00517 	ldw	ra,20(sp)
   564c0:	dc400417 	ldw	r17,16(sp)
   564c4:	dc000317 	ldw	r16,12(sp)
   564c8:	dec00604 	addi	sp,sp,24
   564cc:	f800283a 	ret
   564d0:	00800034 	movhi	r2,0
   564d4:	10800004 	addi	r2,r2,0
   564d8:	10002626 	beq	r2,zero,56574 <__register_exitproc+0x110>
   564dc:	01006404 	movi	r4,400
   564e0:	d9400015 	stw	r5,0(sp)
   564e4:	d9800115 	stw	r6,4(sp)
   564e8:	d9c00215 	stw	r7,8(sp)
   564ec:	00000000 	call	0 <__alt_mem_RAM-0x40000>
   564f0:	d9400017 	ldw	r5,0(sp)
   564f4:	d9800117 	ldw	r6,4(sp)
   564f8:	d9c00217 	ldw	r7,8(sp)
   564fc:	10001d26 	beq	r2,zero,56574 <__register_exitproc+0x110>
   56500:	81000017 	ldw	r4,0(r16)
   56504:	10000115 	stw	zero,4(r2)
   56508:	02000044 	movi	r8,1
   5650c:	22405217 	ldw	r9,328(r4)
   56510:	0007883a 	mov	r3,zero
   56514:	12400015 	stw	r9,0(r2)
   56518:	20805215 	stw	r2,328(r4)
   5651c:	10006215 	stw	zero,392(r2)
   56520:	10006315 	stw	zero,396(r2)
   56524:	883fde26 	beq	r17,zero,564a0 <__alt_data_end+0xfffe44a0>
   56528:	18c9883a 	add	r4,r3,r3
   5652c:	2109883a 	add	r4,r4,r4
   56530:	1109883a 	add	r4,r2,r4
   56534:	21802215 	stw	r6,136(r4)
   56538:	01800044 	movi	r6,1
   5653c:	12406217 	ldw	r9,392(r2)
   56540:	30cc983a 	sll	r6,r6,r3
   56544:	4992b03a 	or	r9,r9,r6
   56548:	12406215 	stw	r9,392(r2)
   5654c:	21c04215 	stw	r7,264(r4)
   56550:	01000084 	movi	r4,2
   56554:	893fd21e 	bne	r17,r4,564a0 <__alt_data_end+0xfffe44a0>
   56558:	11006317 	ldw	r4,396(r2)
   5655c:	218cb03a 	or	r6,r4,r6
   56560:	11806315 	stw	r6,396(r2)
   56564:	003fce06 	br	564a0 <__alt_data_end+0xfffe44a0>
   56568:	18805304 	addi	r2,r3,332
   5656c:	18805215 	stw	r2,328(r3)
   56570:	003fc606 	br	5648c <__alt_data_end+0xfffe448c>
   56574:	00bfffc4 	movi	r2,-1
   56578:	003fd006 	br	564bc <__alt_data_end+0xfffe44bc>

0005657c <__call_exitprocs>:
   5657c:	defff504 	addi	sp,sp,-44
   56580:	df000915 	stw	fp,36(sp)
   56584:	dd400615 	stw	r21,24(sp)
   56588:	dc800315 	stw	r18,12(sp)
   5658c:	dfc00a15 	stw	ra,40(sp)
   56590:	ddc00815 	stw	r23,32(sp)
   56594:	dd800715 	stw	r22,28(sp)
   56598:	dd000515 	stw	r20,20(sp)
   5659c:	dcc00415 	stw	r19,16(sp)
   565a0:	dc400215 	stw	r17,8(sp)
   565a4:	dc000115 	stw	r16,4(sp)
   565a8:	d9000015 	stw	r4,0(sp)
   565ac:	2839883a 	mov	fp,r5
   565b0:	04800044 	movi	r18,1
   565b4:	057fffc4 	movi	r21,-1
   565b8:	008001b4 	movhi	r2,6
   565bc:	10a18504 	addi	r2,r2,-31212
   565c0:	12000017 	ldw	r8,0(r2)
   565c4:	45005217 	ldw	r20,328(r8)
   565c8:	44c05204 	addi	r19,r8,328
   565cc:	a0001c26 	beq	r20,zero,56640 <__call_exitprocs+0xc4>
   565d0:	a0800117 	ldw	r2,4(r20)
   565d4:	15ffffc4 	addi	r23,r2,-1
   565d8:	b8000d16 	blt	r23,zero,56610 <__call_exitprocs+0x94>
   565dc:	14000044 	addi	r16,r2,1
   565e0:	8421883a 	add	r16,r16,r16
   565e4:	8421883a 	add	r16,r16,r16
   565e8:	84402004 	addi	r17,r16,128
   565ec:	a463883a 	add	r17,r20,r17
   565f0:	a421883a 	add	r16,r20,r16
   565f4:	e0001e26 	beq	fp,zero,56670 <__call_exitprocs+0xf4>
   565f8:	80804017 	ldw	r2,256(r16)
   565fc:	e0801c26 	beq	fp,r2,56670 <__call_exitprocs+0xf4>
   56600:	bdffffc4 	addi	r23,r23,-1
   56604:	843fff04 	addi	r16,r16,-4
   56608:	8c7fff04 	addi	r17,r17,-4
   5660c:	bd7ff91e 	bne	r23,r21,565f4 <__alt_data_end+0xfffe45f4>
   56610:	00800034 	movhi	r2,0
   56614:	10800004 	addi	r2,r2,0
   56618:	10000926 	beq	r2,zero,56640 <__call_exitprocs+0xc4>
   5661c:	a0800117 	ldw	r2,4(r20)
   56620:	1000301e 	bne	r2,zero,566e4 <__call_exitprocs+0x168>
   56624:	a0800017 	ldw	r2,0(r20)
   56628:	10003226 	beq	r2,zero,566f4 <__call_exitprocs+0x178>
   5662c:	a009883a 	mov	r4,r20
   56630:	98800015 	stw	r2,0(r19)
   56634:	00000000 	call	0 <__alt_mem_RAM-0x40000>
   56638:	9d000017 	ldw	r20,0(r19)
   5663c:	a03fe41e 	bne	r20,zero,565d0 <__alt_data_end+0xfffe45d0>
   56640:	dfc00a17 	ldw	ra,40(sp)
   56644:	df000917 	ldw	fp,36(sp)
   56648:	ddc00817 	ldw	r23,32(sp)
   5664c:	dd800717 	ldw	r22,28(sp)
   56650:	dd400617 	ldw	r21,24(sp)
   56654:	dd000517 	ldw	r20,20(sp)
   56658:	dcc00417 	ldw	r19,16(sp)
   5665c:	dc800317 	ldw	r18,12(sp)
   56660:	dc400217 	ldw	r17,8(sp)
   56664:	dc000117 	ldw	r16,4(sp)
   56668:	dec00b04 	addi	sp,sp,44
   5666c:	f800283a 	ret
   56670:	a0800117 	ldw	r2,4(r20)
   56674:	80c00017 	ldw	r3,0(r16)
   56678:	10bfffc4 	addi	r2,r2,-1
   5667c:	15c01426 	beq	r2,r23,566d0 <__call_exitprocs+0x154>
   56680:	80000015 	stw	zero,0(r16)
   56684:	183fde26 	beq	r3,zero,56600 <__alt_data_end+0xfffe4600>
   56688:	95c8983a 	sll	r4,r18,r23
   5668c:	a0806217 	ldw	r2,392(r20)
   56690:	a5800117 	ldw	r22,4(r20)
   56694:	2084703a 	and	r2,r4,r2
   56698:	10000b26 	beq	r2,zero,566c8 <__call_exitprocs+0x14c>
   5669c:	a0806317 	ldw	r2,396(r20)
   566a0:	2088703a 	and	r4,r4,r2
   566a4:	20000c1e 	bne	r4,zero,566d8 <__call_exitprocs+0x15c>
   566a8:	89400017 	ldw	r5,0(r17)
   566ac:	d9000017 	ldw	r4,0(sp)
   566b0:	183ee83a 	callr	r3
   566b4:	a0800117 	ldw	r2,4(r20)
   566b8:	15bfbf1e 	bne	r2,r22,565b8 <__alt_data_end+0xfffe45b8>
   566bc:	98800017 	ldw	r2,0(r19)
   566c0:	153fcf26 	beq	r2,r20,56600 <__alt_data_end+0xfffe4600>
   566c4:	003fbc06 	br	565b8 <__alt_data_end+0xfffe45b8>
   566c8:	183ee83a 	callr	r3
   566cc:	003ff906 	br	566b4 <__alt_data_end+0xfffe46b4>
   566d0:	a5c00115 	stw	r23,4(r20)
   566d4:	003feb06 	br	56684 <__alt_data_end+0xfffe4684>
   566d8:	89000017 	ldw	r4,0(r17)
   566dc:	183ee83a 	callr	r3
   566e0:	003ff406 	br	566b4 <__alt_data_end+0xfffe46b4>
   566e4:	a0800017 	ldw	r2,0(r20)
   566e8:	a027883a 	mov	r19,r20
   566ec:	1029883a 	mov	r20,r2
   566f0:	003fb606 	br	565cc <__alt_data_end+0xfffe45cc>
   566f4:	0005883a 	mov	r2,zero
   566f8:	003ffb06 	br	566e8 <__alt_data_end+0xfffe46e8>

000566fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   566fc:	defffd04 	addi	sp,sp,-12
   56700:	df000215 	stw	fp,8(sp)
   56704:	df000204 	addi	fp,sp,8
   56708:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   5670c:	0001883a 	nop
   56710:	e0bfff17 	ldw	r2,-4(fp)
   56714:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   56718:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   5671c:	10000226 	beq	r2,zero,56728 <_exit+0x2c>
    ALT_SIM_FAIL();
   56720:	002af070 	cmpltui	zero,zero,43969
   56724:	00000106 	br	5672c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   56728:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   5672c:	003fff06 	br	5672c <__alt_data_end+0xfffe472c>
